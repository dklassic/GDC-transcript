Alright, I'm Peter Ingstad and welcome to the Kingdoms and Castles Postmortem.
I'm co-founder at Lion's Shield, programmer, designer mostly, but I do a little bit of art.
And I've worked on a bunch of different types of games over the years.
The latest game I've worked on is Kingdoms and Castles.
It's a medieval city building game where you grow your kingdom and defend it against Vikings and dragons.
And the cool thing about the game is that every single person is individually simulated.
So if the game says you have 5,000 people, you can account for all 5,000 people doing something somewhere in the world.
It was made by myself and Michael Peddicord as the main developers, and we had a few contractors, Jason Taylor for music, Steve Green on sound effects, and also Chad Freeman on sound effects.
It took about a year and a half of time to make, and a note here is that all the timelines in this talk are compressed as if we had worked a 35-hour week on it, but in reality, we average closer to 10 hours a week due to other jobs, and I'm also a stay-at-home dad.
It was built on Unity with some handy plugins.
And it went really well.
We've sold about 650,000 copies so far.
And it has been one of the most fun development experiences I've been a part of.
And really, it was all about using our time as efficiently as possible.
So let's dig into some of the interesting parts of its development.
We focused very heavily on market fit testing.
And for us, that meant we wanted to find out, are people interested in this game idea at all?
How many people are interested?
And how big should we make the game?
And why are we so interested in market fit testing?
Let's rewind five years to my first indie game, Cannon Brawl.
It's a 2D action strategy artillery RTS hybrid.
It's got a single-player campaign and a competitive multiplayer mode.
And it had about the same team size, myself and Teresa Terringer.
And it took us about twice as long to make.
And they're both good games.
And in fact, Cannonball has a higher Steam user score than Kingdoms and Castles.
But Kingdoms and Castles sold a lot more.
And it turned out that Cannonball had closer to a niche audience.
And ideally, we would have discovered that early and scoped the game to match that audience size.
And this is where the market fit testing comes in.
And interestingly, during CannonBrawl's development, we did do things that would be considered market fit testing, but we didn't take that data to scope the game.
So, for example, during CannonBrawl, I made a bunch of YouTube devlog videos, and they had 100 views, but that never grew.
We made it through Steam Greenlight, but I would have preferred more yeses.
And we did an early access launch, which got into the Steam Top 20, which is pretty good, but then sales declined in a pretty typical curve.
And each one of those green arrows is a content update.
So, we did all these kind of juicy content updates, but it didn't seem to change anything.
And we had approached this kind of with the mindset of, I hope this update or a YouTube dev log or whatever is really going to help the game catch on.
And it's true that each one of these will, it is a marketing opportunity can help you grow the audience for your game.
Also informing you how big that market is.
And so really with the response that we were getting, the market was saying, well, I'm only about this big.
So investing a lot of development time here is going to be a risk.
So by the time we realized this, it's time to launch the game.
And the launch ends up being a little smaller than early access.
And I think at that point, we had basically captured the market interested in the game.
So overall, Cannonball sold modestly, but it wasn't enough for me to stay indie because I was looking to start a family.
So I ended up getting another job.
And looking back on it now, it would have been wiser to scope that game down a little bit, given the response we were getting from the dev logs and Greenlight and Early Access.
So back to kingdoms and castles, this time we're going to mark a test early, continuously, and intentionally.
And we're going to use this data to find out if we should make the game at all, and how big to make it.
Should it be a quick three-month project, or a five-year magnum opus?
and we're going to use a whole bunch of different things to figure it out.
So first, should we make the game at all?
We used Twitter.
And our thought was, if we can get something retweeted 25 times, we're going to count that as a success.
And we chose that number because at that point, 25 times was an enormous amount for me.
So our first tweet got 11, which was not a success, but encouraging.
And we kept trying.
This was early, so it was pretty fast.
And pretty quickly, we got there with this GIF of the tree growth system.
That got 25.
And then we had another success after that with the cloud system.
So something in the look here is starting to resonate with people.
And I've seen other people on Twitter kind of do this too, like each of these is just an art asset or a little mock-up, but it's resonating.
So if these people were interested in making a game out of these, they'd be worth taking to the next level.
And so the next step for us was to make a Steam Greenlight Ideas page, which is like a mock Steam store page with screenshots and a trailer, and people leave comments, and the ideas get ranked, but then nothing happens after that.
And so we came up with our success criteria, which was get into the top 100 ideas and generate 50 comments by looking at other ideas in the top 100, and how many comments they got, and also if they were successful when they eventually launched on Steam.
And we're using these success criteria as a way to be honest with ourselves and force us to course correct early if the idea isn't resonating.
For example, say we miss the top 100 and we get 20 comments, half of which are neutral or negative.
We don't want to fall into this, like, oh, well, 10 of them were good, like, let's keep going on that same track.
We instead want a bar to measure by that will tell us, no, go back to the drawing board and figure out why this isn't resonating.
So at this point, the game is about three months in, and it is not playable, but we have built enough of it that we can get the idea across in screenshots and a trailer.
So that ends up going pretty well.
We get into the top 100 ideas, and we generate a lot of comments, and they are mostly very positive.
And so judging by the engagement on Twitter and how well this concept page went, we can now answer the question, should we make this game?
And we are going to make it.
Another benefit of doing this market fit testing was that you can course correct early.
One of the things we learned during the Greenlight concept page was that we were getting a lot of comparisons to Stonehearth, and that's because we both had a pretty similar voxel art style going on.
So we redid all of the assets in a low poly style, and because we learned this so early, there weren't that many assets to redo, so it was a quick change to make.
So now we're definitely committing to making the game, but we need to find out how big to make it.
Is this a three-month thing?
Should we quit our jobs and hire people kind of thing?
And to find that out, we're going to run a crowdfunding campaign and then do a real deal Steam Greenlight run.
And at this point, we're willing to risk six months, six more months of development time to prepare given how well the concept page and Twitter did.
And...
So by the time we launch the crowdfunding campaign, the game is playable, and so if we just barely squeak by our funding goal, we can still ship something.
But the crowdfunding goes better than we thought.
It's not enough to quit our jobs and staff up a lot, but now we know how much time to invest and how big to make this game.
We were looking at making some big simulation changes and adding buildings and a military system, and we now know that we have the time and budget to do that.
And if crowdfunding had not gone as well, we could have just cut that.
So, 10 months later, it's time to launch, and it ends up going really well.
The game breaks into the top five on Steam, eventually peaks at number three.
We were unable to unseat PUBG, unfortunately.
So, this market fit testing process helped us avoid sinking lots of time into something that we weren't sure if enough people would buy.
And the launch was also our last market test, which was, do we continue expanding the game?
And for us, the answer was yes, and we're still updating it today.
So let's move on now to a concept I think helped it succeed in the market fit test, which was that it has a very clear player fantasy.
And for this talk, I'm going to give a special definition for player fantasy, which is the ability of the player to imagine what the game is like before having played it at all.
And this is communicated through most often trailers, screenshots, the verbal description.
And your player fantasy, I think, can be anything, but it just has to be very clear what it is.
So for example, Assassin's Creed, the player fantasy would be you're a cool assassin in ancient times, and it's like communicated in the title of the game.
The screenshots show a guy exploring an ancient city, probably about to jump down and assassinate some people.
For Rocket League, the player fantasy is you're a rocket-powered car playing soccer, and that's very obvious, very clear from the screenshot and even the title.
And papers, please.
You're a border control agent in a dystopian country.
And you can see from the screenshot, you're going to approve or deny this guy's passport.
Like, it's clear that you are kind of a customs agent here, kind of person.
So going back to Cannon Brawl, the player fantasy here is not super clear.
And I think the best I could come up with was you fly an airship, which can attack buildings and defense structures, and you use these to defeat your opponent, manage your economy, and it all takes place on a destructible battlefield.
But that's really just a description of the game's mechanics, and it doesn't spark player imagination very well before they've tried it.
And at the time we were coming up with Cannonball, it came from this very technical design place, which was we're going to take an RTS game and blend it with an artillery game.
And that results in a really fun and interesting game.
But if I'm a player looking at this on the Steam store, it's not very clear what I'm going to get, and I'm going to have a hard time imagining how compelling this game is going to be, especially if the next game in my queue is something that's very clear.
I probably might go with that one.
So with Kingdoms and Castles, we wanted to make the player fantasy simple and very clear.
And so that is Build and Manage a Medieval City.
And the title is a little generic, but it sums up the game very explicitly.
The trailer we made sure shows you building a town at different sizes over time, and the screenshots show very clearly a medieval city and also specifically from camera angles and distances that you're familiar with in other city-building games.
So when the player fantasy is clear, it's easier to imagine all the fun stories and good times you might have when you play this game, and that makes the game's appeal easier to communicate and the game easier to share.
So at this point, we've got a game that we think resonates and we can scope it appropriately, and the player fantasy is properly communicated.
And now we need to make it as efficiently as possible.
So we lean very heavily on existing metaphors to save time.
Going back to Cannonball again, this game instead invents and repurposes a lot of existing metaphors.
And we had to spend a lot of time getting that to communicate properly to the player.
So, for example, in Cannonball we have this magical shield tower.
And there's not a lot of real world examples of a shield tower or there's not a lot of magical shield tower in fiction, except maybe in the context of sci-fi with a force field.
But our shield tower is directional, comes out in an arc.
It can be moved, but only before it is activated.
It needs to be reactivated, but only after a cool down.
It can be upgraded, shots break through relative to their strength and the shield tower strength.
There is a lot to it, and we needed to make a tutorial level specific to teach this game, and we also had to spend a lot of time on all the different UI pieces to communicate all of it.
And Cannonball is made up of a lot of these.
For example, you have a headquarters where you dock your airship with to pull a building out of.
And people, you don't expect a building to make new separate buildings.
That's not a real world thing that happens.
The airship carries the buildings across the map and places them.
That's also not something you expect airships to be able to do.
So every time we were doing this, we had to teach that and that took time.
The buildings themselves like this little bomb thing here on the right, it shoots out a robot bomb that when it lands, walks to another building and explodes.
It's just a lot of stuff we had to teach because it was newish or we were repurposing something that already existed.
Then that required a lot of effort.
So, Kingdoms and Castles relies heavily on existing cultural knowledge.
Like, everyone knows what a farm and a road and a house do and what to expect from those.
And so, people were able to figure out how to play the game without a tutorial, just by poking around, and we were able to get away with shipping without one, which saved a lot of time.
And a lot of games use stuff like zombies or giant spiders, which are kind of tired, but that game is saving a lot of time by using something it doesn't need to teach you how it works.
And the trade-off is that if you lean super heavily on existing design, then you're losing a chance at novelty or innovation.
And Cannonball is for sure more innovative than Kingdoms and Castles.
So the question is like, when should I innovate or invent design?
And for me, now, that's if it's absolutely core to the game experience.
So another game I worked on, Seven Billion Humans with Tomorrow Corporation, in this one we invented a programming language, a multi-agent runtime, and then all the programming puzzles.
And this took a lot of time to invent and iterate and get this properly communicating and working.
But without it, the game would not exist at all.
So, like, that invented design was the game.
So for me, like, if it is absolutely a core pillar to the game, or if I have time, then I invent.
Otherwise, I lean heavily on existing design.
So another way we save time was with the art style, and it is a very simple, low-poly style, and I could go from zero to in-game finished Asset in usually about two hours, and that is because everything was made out of simple primitives.
So like if I have a building and I want to revise it, I just duplicate and rotate primitives.
It takes, it is super fast.
And if I want to make new buildings, I can just take old ones and kitbash them together.
We kind of cut some corners with the UV where we just take the UVs for a particular shape and then drag them onto a palette Texture, and every building in the game uses the same palette Texture, so I do not have to spend time properly on UV wrapping anything.
I actually do not know how to properly UV wrap anything.
And if I want to change a color for something, I can change it once in the Texture, and it changes for everything in the game.
So that, the simple shapes and flat texturing gets us to the left, and then Unity stock shadows, SSAO plug-in, color correction, and some slightly customized fog carry us the rest of the way.
And the other benefit of this kind of simple, abstract art style is you can get away with some goofy behavior, like these farmer guys down there, they look like little pegs, and they are very clearly clipping through the wheat.
and the farmer guys would actually clip through everything in the game.
But if they had heads and arms and legs and the wheat looked like actual real-world wheat, you would have more of an expectation that they would walk properly down the rows and bend over to pick it up, and all that would have added time and gameplay code and design.
The more realistic your assets look, the more realistic, the higher expectations players have for their behavior.
And of course, the trade-off is that you end up with a game that looks very abstract.
So if you're making something like Inside that gets a lot of value out of the really high-fidelity animation and interaction, you'd want to lean into that instead of what we did, which was the opposite.
So beyond the concrete work on the game...
Our studio culture was another big part of making the most of our time.
And the biggest thing for us is that we don't crunch specifically to get more done.
Because we found that when we crunch, we get sleep deprived, we burn out, then fights more easily escalate, we introduce more bugs, we make worse decisions, which leaves us less time to get work done, and then we feel like we have to crunch more, and that spirals downward.
So instead, we want to stay well-rested, and that helps us resolve arguments constructively, introduce less bugs, make better decisions, which gives us more time to get work done and more time to rest.
And the big way we found that crunch hurts is in evaluating decisions.
And so we can frame decisions in two ways.
One is a tactical decision, which is like maybe our skill tree needs three more skills, and a strategic decision, which is maybe we don't need skill trees at all.
Maybe we should cut them.
And so we'll do a little thought experiment in the context of kingdoms and castles.
So in this thought experiment, let's imagine we're crunching.
And we see another game.
And their UI looks really good.
This is Northgard on the left there and our UI on the right.
And ours looks a little basic.
And we might think that, well.
they're basically a peer of ours.
Let's bring our UI up to par. We'll just put in an hour or two extra a day to really make this game great.
But there are some big issues with this decision that we're not able to properly evaluate, and we're going to pay for that later.
So when we're crunching, we don't have the mental space to properly zoom out and consider things from a high level.
We're only taking this next little tactical step.
First, I'll redo this UI piece, then I'll redo this piece of art and change this piece of code around.
And when you're crunching, it's much easier to think this way, because these decisions are easier to make than evaluating things from a very high level.
But the problem is, it can turn out that 20 steps down this tactical decision tree, there's some big pitfalls, like maybe now disagreements with your team get very heated and very unproductive, and now maybe we realize that all the new UI is going to take a lot longer to do to execute it at this new high-quality bar.
And also, because we're spending so much time doing this, maybe we're putting off reworking core design problems, or we're not even going to be able to see problems that we don't know exist yet, because we just don't have any mental space to think about it.
And the final result can be, you know, there's three months left to ship, and you've got a really polished UI, but big pieces of the game are not coming together right, and we've got to make huge course corrections and end up throwing out work.
And so the only thing to do is make these big changes and work ends up being wasted and go back to where you started on the decision tree and do a different path.
And we think maybe well this is just how game development is, like how do we know this pit is here until we've fallen into it.
But if we go back to the same scenario, and this time we're not crunching, we do have a lot of mental space to think strategically.
We might come to a different conclusion, which is we're not gonna redo our UI.
Yeah, it looks not great, but it's functional.
It gets everything it needs to get across, and players are gonna get more value if we solve this other different problem.
Maybe we have a mid-game decision lull we need to fix.
And in this case, we do have the mental energy to climb all the way up and foresee all the pitfalls that we just talked about.
And we can make better, better big decisions more often.
And there won't be any more of these big come to Jesus moments where a big course correction will save or maybe not save the game.
We'll have the mental space to discover these problems and fix them before they become a big issue.
And then the question is, well, we just have so much to do and only so much budget and time, we have to crunch to get it all done.
But I think that itself is a tactical decision, and the strategic decision in our case was to just cut early and all the time.
So this is a screenshot of our to-do list, and most of these are big features that we did not ship the game with.
And just every day, we reprioritized this list to make sure that we were working on only the most absolutely necessary thing to ship the game.
in the time that we had.
And we could have crunched to try and get as much done as possible, but then we would have run into all the problems we just talked about.
So, and I think the other thing with crunch is that there's this conscious and sometimes subconscious attitude that we have to suffer for art, and that ends up meaning work ourselves to the bone.
And then crunch also is sometimes romanticized as like a battlefield bonding experience.
But this is kind of crazy because battlefields are a bad place to be.
So.
I like to reframe the suffer for art to instead mean just overcome interesting art design and code problems.
Because we can definitely do that without the downward spiral of crunch.
And there's a lot of really great and successful games made now without crunch.
So let's make all of them that way.
So we'll move on to how we marketed the game.
Our marketing was mostly not separate from making the game itself.
We didn't send tons of emails to press or YouTube.
We didn't go to any trade shows.
We just didn't have time to do any of that because we both had other jobs.
I have taken care of my daughter.
So really, it was mostly about going through the Market Fit testing process, maximizing the game's appeal, and each time we did a new Market Fit test, that was a way to show it to more and more eyeballs and have a higher and higher chance of some kind of serendipitous event.
I will mention that Fig did help with some marketing, especially around the crowdfunding campaign.
They were able to convert some of their newsletter subscribers to backers.
They ran some Facebook ads, and they helped with some press releases around the campaign and launch.
But by far, the biggest thing for us was that the game became organically popular on YouTube.
So the way that happened was we gave out one free alpha key to a YouTuber after the crowdfunding campaign ended.
And he made a video, and then other YouTubers saw it and wanted to try it too.
And it bubbled up and down the YouTuber hierarchy.
And each time we did an alpha update, we got another bump in videos.
And the key was that when viewers are watching the video, they need a way to act on their interest.
And in our case, we had all three of these.
They could sign up for our newsletter, wish listed on Steam, or buy into the alpha as part of a late crowdfunding backer option.
When we were working on Cannonball, we had TotalBiscuit do a video early on.
But we didn't have a really good way for people to follow or track the game at that point.
And that was kind of a missed opportunity.
One question is, why was this?
How did this become popular, organically popular on YouTube?
And one answer is luck.
There are some other factors that the game is very clear what it is from a thumbnail.
Like it looks like a city building game from a thumbnail.
So if you're browsing and you see your YouTuber has made a video like this and you like city building games, you're probably going to watch it.
When you do watch it, there's a lot in there that you want to try for themselves.
oh, why are they building their tavern here?
I would have built it over here in my residential district.
And it's easy to make into a long series of videos because growing a kingdom and kind of a sandbox building environment can take as long or as short a time as you want.
And we also found that there's a specific indie strategy simulation set of YouTubers that play only those games, and this, our game fit really well in there into what they were looking for.
which we did not know ahead of time.
And really, this slide is just taking from the Slime Rancher GDC 2017 talk about how to make a game appealing for YouTube.
So we tried what they said and found that it worked for us.
So last we'll talk about the games community.
And that was mostly Discord, which we started from day zero.
And now we have about 1,000 active members on at any given time.
And we mainly just link to it everywhere in our Steam description, in Steam announcements.
crowdfunding updates on Twitter.
The main benefit is that you're able to drill down into issues in real-time chat with people.
So it helps you get past the feedback problem where people say, oh, this game is broken, and then that's it.
Instead, if they say that, you can start asking questions right away like, okay, what specifically is broken?
How does that work? In this example, This guy had a city of 5,000 people, and we had just introduced a graveyard mechanic, and it was causing this problem where he had to build graveyards constantly, and it was taking over his city.
So, like, in chat, we were able to figure that out, and then he sent us his save game through Discord, and we were able to fix it that day.
Same thing for bug and crash reports.
Like, a lot of people don't have formal QA training, so trying to get repro steps out is really difficult.
But if someone says, Oh, the game crashed.
You can ask them, like, what happened before it crashed, like right then and there, and then spin that off into a private chat and really dig in.
On this one, the repro steps or something crazy like pick 10 maps and on the 11th map, like then the game will hang.
We're only able to figure this out by chatting with this guy for like 30 minutes in a private chat.
It's also worth thinking about when you do, if you are going to do a Discord, the design of your channels.
So we made a hands-off ideas channel because everyone has a lot of ideas about where the game should go, and it's nice to have an unbiased view on where people think it should go.
Our main policy with the ideas channels is that we don't comment on any ideas.
This is also because, say, if someone wants to add the killer bunny from Monty Python, they have a place where they can get that off their chest and feel heard, but then we also don't have to have an argument about that with them, about whether that makes sense to add to the game or not.
We also used to have a random channel and all kinds of weird, scary random stuff ended up in there and I was moderating that every day.
So I changed it instead to something called cool finds and stuff.
It's not perfect, I still have to moderate it, but a lot less and then we also get a lot more cool finds and stuff.
Somebody posted this Lego scene they were making.
Somebody else was making something in Maya that they're just posting for fun.
Also, somebody is a big baked goods fan on our channel.
So, I'll close out the talk with a disclaimer, which is none of this is any kind of recipe for success.
This is kind of how we robbed the bank in 2017, but now it's all changed.
For example, Steam Greenlight doesn't exist anymore, so we would have to do that part differently.
You can't count out luck in any aspect of our success.
Just a quick example is that Steam changed their visibility algorithm in October 2018, which hurt our daily sales.
We had launched well before that.
If we had launched after that, would that have helped or hurt our visibility?
It's impossible to say and totally outside our control.
And then you can't count out privilege.
We're very fortunate to have the opportunities and support network over the years that helped us get to where we are.
So that's it for the talk. Thanks, everyone, for coming.
Okay. We have time for two questions.
Oh, great. At the beginning, you were talking about how you were using Twitter to evaluate your very first ideas and visuals on the game.
How many sort of iterations did you have, and how many were you planning to try before just sort of tossing the idea entirely and thinking of some other game?
Let's see.
I mean, we iterated.
I mean, that very first screenshot looked quite a bit different from the final result.
We did iterate a bunch. Because it was so early, we were just kind of trying to get a feel of, like, if we do a voxel or low-poly city-building game, does anyone care at all?
So, like, if, say, we had posted and been trying for maybe a month, and it just wasn't growing, then we would say, okay, time to try something else.
I understand the need to make money, but when your thing on Twitter wasn't getting enough hits or whatever, how happy were you with the final product?
Like, oh, I really wanted that feature versus, you know, obviously you need to make money to put food on the table, but how happy were you with that final release when you're like, oh, these five features have been really cool.
I really wish people would have liked them more, something like that.
What we released with I was happy with.
Like it was basically the vision we had for the game.
Not like if we had worked on it 10 more months, which we did post launch, it would have been everything we wanted, but we had a really solid core in when we did launch that I think that I was happy with.
Thank you.
All right.
Oh, one more.
So you talked a lot about, or not a lot, but at the end, about having to manage the community and talk with them.
How much did that kind of detract from your production process?
Because that's one of the issues I've been running into is just the more I have to interface with the community, the less mental space I have to focus on production.
So I'm just kind of curious how you manage that.
On Discord, I tend to check in once a day, and it's mostly settled down.
And it's kind of more of like when we launch a beta version of our update, then I'm very involved because I need that to fix whatever issues we have with the update.
But otherwise, we just kind of let it sit and just chime in here and there.
The main community issue that I've run into is how to deal with the Steam forums.
Because that feels like a garden that you need to be weeding a lot.
And if you're not, then when you come back, it feels overwhelming.
So with the Steam forums, I tend to check in kind of once a week.
That way I have mental space to work on the game.
And then for that one day during the week, I go in there and pull weeds and tend flowers and stuff.
OK, cool.
Thank you.
Hi. You opened your talk talking about how you have, you can simulate up to like 5,000 actors.
How are you able to measure the importance of what your audience, or the weight of importance that your audience places on that kind of simulation?
I mean, there's no clear answer, but when we, I'd say it's important because each one of those people is simulated, kind of everything in the game depends on that.
So like if I want to build a house, I need five simulated builders to physically go out and get the resources one by one and bring them back.
So depending on how far those resources are away, like where did you put your stockpiles, where do you have your woodcutter guys, that directly impacts the time it takes to build that house.
And so kind of the whole game is built around that.
So I don't know if we have a good measure for how specifically important that is to people, but without it, kind of the core of the game goes away a little bit.
Okay, thank you.
So my question is also about the optimization process.
So basically, because you simulate each character independently, would that be too slow when you have too many characters?
Yes.
And what kind of optimization techniques do you use to tackle that?
So for the villagers.
The main optimization is that they're very simple.
Like they're not animated meshes in any way.
They're just little static cube peg guys that hop around.
And then for other things, we had a military system that also has thousands of little people.
And for that we used instance rendering and just stored giant arrays of positions of all the guys and then send that off in a single instance draw call to make that work.
So the main cost, computational cost, is from rendering?
The main, well, a big part of it is from rendering, but a bigger part is from pathfinding for all those.
For that part, like pathfinding, that part, what kind of technique do you use to optimize?
So we have a deferred pathfinding system, where each frame you send pathfinding requests to a six-thread pool, and then they burn through those as fast as they can.
All right, we gotta wrap up.
Thanks for coming.
