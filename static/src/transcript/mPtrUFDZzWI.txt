Hello, everyone.
My name is David Huang, and I was a senior animator on Anthem.
I was responsible for creating the traversal animations for the player character.
And my name is Daniel Nordlander, and I was a senior gameplay designer on Anthem.
I was responsible for the player character, controls, and camera.
So during this talk, we're going to discuss how we created Anthem's flight mechanic, as that was a unique selling point of the game.
We'll explore how creating video game characters that look and feel great to play requires close collaboration between design and animation.
Even though our day-to-day work might seem totally different, with design determining things like physics values, movement tuning, cameras and controls, we tend to provide the bigger picture that animation works within.
Our work relies heavily on one another, as we're both responsible for the look and the feel of the traversal mechanics.
So to fully explain how we created flight in Anthem, we need to give the whole picture rather than just an animation by itself.
It's important to take into account the design side and how it relates to the flight system to really understand how to create our animations.
We hope to give you insight into our process, inspire other character designers and animators to use these techniques in their own work.
To give you an idea of what the kind of game Anthem is, let's kick things off with a quick trailer.
You are the chosen few, protectors of our world.
This is your time.
Incoming!
Fire!
Out there, you will fight the unimaginable.
Feel the power of your javelin.
It's precision.
Rely on each other.
Unleash your power.
You are freelancers.
So, in Anthem, players will fly, swim, fight, together, in a dense open world.
So, what does that mean for the player character?
Well, our key goals were to support a full 360 degree movement experience that allows for seamless transitions between movement on the ground, through the sky and underwater using four distinct superheroic characters.
These characters are embodied through armored exosuits called javelins, which make you bigger and stronger and give you superhuman abilities.
Each one you get into makes you a different class of superhero.
The Colossus is a super strong tank.
The Ranger is a versatile warrior.
The Interceptor is a fast and agile ninja.
And the Storm is a magic user with special powers.
The key power that they all share is the ability to fly.
So to give you some background to how and why the flight system works the way it does, let's back up a little bit and look at how it all started.
What you're about to see is from an early prototype of the game.
So Anthem always had exotic traversal as a major part of its core gameplay.
But as you can see here, it was not always in the form of flight.
Technical and design problems made true flight seem impossible.
So we experimented with alternatives early on in the form of rocket-powered jumps, free-form climbing, and wingsuit-style gliding.
So these mechanics worked really well together, but in the end we decided to go a different route.
So why is that?
Well, the mechanics gave us the verticality that we were after, but they didn't feel fluid enough and failed to satisfy the superhero fantasy, which is that anthem's core.
And what's more superheroic than flight, right?
So we realized we needed to lean more into the power fantasy of wearing an exosuit with jet packs.
Why would you climb slowly up a cliff where you can just boost past it using your thrusters?
We decided to implement freeform flight, but we knew that in order to succeed, we needed to solve some very specific issues.
The first issue is if you can fly above the level, we have no control over what the play space is.
You can ignore the entire level layout, skipping past mission objectives, and you have free sight lines of the entire map, which breaks our performance and streaming.
The second issue is if you can fly, you don't really need to think about how you traverse.
You just kind of fly in a direction and wait until you get there.
There are no interesting skill checks, choices, or risks, which makes it boring when really it should feel exhilarating.
So to address these issues, first of all, we added a flight ceiling above the level.
To make it feel less limiting, we didn't make it a hard collision, but instead applied downwards force on players getting close to the flight ceiling and added presentation to make it feel like turbulence.
Since the ceiling was hand placed, we could tailor it to our needs depending on the layout in that specific part of the level.
This allowed us to get control of the play space again and prevent performance and streaming issues.
It also made the player have to fly through the world rather than above it, preventing them from ignoring the level layout completely.
So we also added the overheat system.
When flying, your engine builds heat until it overheats, forcing you to crash land and keeping you grounded until the engine has cooled off again.
So what this achieved was it gave us control over the ground to air ratio of a player's experience and gave players a reason to engage in ground gameplay again.
We then layered in ways to cool off your engines during flight.
For example, by flying downwards, skimming over water, or flying through a waterfall.
This gave the player interesting choices while flying and added a layer of skill to how you choose your flight path.
So now we had a framework for how flying worked in the game.
The next step was to figure out how to control your javelin.
So our biggest challenge here was making the transition between ground, flight, and underwater movement feel completely seamless.
We started out with more traditional airplane controls, where the left stick on the controller steers your character with up and down being inverted.
You could freely look around your character with the right stick as you flew through the world, as you can see in this video.
So the main issue that we found with this was that the control scheme was simply too different from the ground controls.
The transition between the two modes was jarring and players often started their flight with a nose dive into the ground.
So we experimented a lot with different controls to try to solve this problem.
At one point, we even had the trigger button work like a gas pedal, which felt amazing, but kind of makes it difficult when you're making a shooter since you need that button for the gun trigger.
So we ended up with left stick controlling your speed while steering was done with the right stick.
We wanted you to be able to look around and have the character go towards the direction you're looking when you press your movement stick forward, just like it works when you're on foot.
So this approach made the controls a lot more simplified and intuitive.
It allowed for seamless transitions between traversal modes.
And instead of struggling with the controls, it made the players feel like superheroes.
The main thing that we lost from this was the ability to freely look around the character.
But on the other hand, this also gave us more control over the framing and angle, which became helpful when creating animations, as we knew exactly how the characters' movements would be presented to the player.
So we had a framework for flying, with the controls finally figured out.
The next issue was to make those controls translate to really nice movement feel.
We started out with a more realistic physics model, which simulated drag and realistic velocity inheritance.
But as is true for many games, we quickly realized that it's better not to worry too much about realism, and just make it feel as good as we can, no matter how many laws of physics we needed to break.
And we kind of broke all of them in the end.
So while your speed is analog, we did have a binary boost state that triggers a lot of the presentation on the character, such as animation post changes, effects, camera shake, field of view adjustments.
So this boost state was triggered when moving your stick forward, so you'd immediately feel the kick from the boost, even though your character's analog speed would take a second or two to reach its max.
So whether it was for controlling your speed, your side-to-side movement, or your steering, we had a similar setup.
We had curves controlling desired speed based on your stick movement, acceleration and deceleration towards this desired speed.
Modifiers making a light push on the stick give a slower acceleration than fully pushing it.
We also checked for how drastically you tried to change direction, so we had more control over how it felt to make small adjustments versus larger movement changes.
So all of this allowed us to get smooth movement that worked well for different use cases.
We had limits in place to ensure we never went faster than the game could stream in the level.
The limited speed felt okay for flying forwards, but when flying downwards, it felt artificially slow.
Luckily, the streaming constraint did not apply to vertical movement, so we implemented a curve which allows you to go faster as you're flying downwards.
You reach double speed going down versus going forwards.
We actually tried to push it faster than that, but it kind of made it feel like you're hitting a wall as you go from a super fast dive to flying forwards again.
So a problem with all of this is that it actually makes falling faster than flying straight down.
We tried adjusting the fall speed to be slower to compensate, but it kind of made it feel like you're falling through syrup.
So it's definitely weird physics behavior that falling is faster than flying down, but as it didn't really cause any actual exploits or issues in the game, we actually ended up shipping with this behavior.
So now we had a framework for flying, intuitive controls, and nice feeling movement.
So the next step was how to best present that movement with our camera.
First of all, we used camera dampening.
So what this does is have the camera lag behind the movement of the character it's tracking.
The goal was to get a less static feel to the character's position in the screen space, get a better sense of direction, as well as to help you anticipate obstacles.
The only issue is that dampening leaves the camera behind the direction you're going, instead of anticipating it.
So we did some math to create a reverse dampening effect, which gives you the result you can see in this video.
When turning, the camera leads in front of the player, panning slightly towards the direction you're steering, and offsets the character to the opposite side of the screen.
We also did a similar calculation where we tied a small amount of camera roll based on your character's steering speed, so the camera tilts in the direction you're steering.
This was done to give a better feel to the direction you're turning towards, as well as to improve the feedback of how strongly you were turning.
We also tied camera framing, pitch, field of view, and shake to the pitch of the character.
We used this to get more control over framing your character and the world as you fly through it, so you could easily tell what was going on and where you're going.
We widened the field of view and increased the shake as you flew straight up and down to give a more visceral feel and convey the sense of speed even better.
We also frame things differently when going up versus going down to better fit the needs of the player.
When going down, you end up right behind the character, so you see the point you're diving towards and the world below you.
But when you fly straight up, we show a lot more in front of the character, so the player easily can judge if they will collide with something when they decide to start flying forwards again.
So we had a framework for flying, intuitive controls, nice feeling movement, and a camera that presented it all well.
The final piece of the puzzle was to look at how we can differentiate all of these things based on what javelin you're wearing.
So because Anthem is a game which is designed for co-op, it was very important that players are able to move at the same speed so they can stick together as a group.
So when it came to differentiating the javelins and their movement field from each other, we could only rely on things like custom jumps, different steering rates, and switchback times.
In general, we used the Ranger as a standard responsiveness tuning, and went up and down roughly 15% per suit.
But this only got us so far.
To truly push the movement field difference as far as we needed, we relied on animation to save the day, which brings us over to David's domain.
Well, once we get the time values and the framework from the design, we can adjust the feel further through animation.
To exaggerate the speed or sluggishness, we can clamp the values in the blend spaces or spring-flow in the values to dampen the motion even further.
We separate the suits on the visual side through many ways.
Initially, all the suits look very unique, as you can see from the base models and colors.
But once the players start changing things with the array of paints and bit packs, the differences start to get pretty muddy.
So the first thing to figure out when working on a suit is the main base pose, creating an easily identifiable and recognizable silhouette that separates it from the other suits at a glance.
The Lancer is our stereotypical Rocket Man posing.
The medium speed pose has a spread out glide style, and it goes into an aerodynamic facet pose, stretched out with its arms back at its sides and legs closer together.
Since our flight has an analog speed system, so you're not just in one speed and transitioning to the next, where you can be feathering the input for half speeds, we're always constantly blending the different speed sets, which means we need to be aware of how the poses look together in the mid-range.
so they can't be too different from each other, or they won't blend well.
One of the pitfalls to try to avoid when creating the poses is twinning.
It's easy to make the poses too symmetrical and look like a T-pose, basically making sure to offset any limbs slightly if they need to be similar.
We also break out the poses through added layers being on top well, but it's best to try to fix this in the base pose.
Also in the faster speed, I make sure to not collapse the arms and legs too tightly to the body.
This gives the pose room to move and breathe and avoids clipping when the additive layers are running on top.
For all the suits, the medium flight speed shows the most character of the poses, and we need to make sure that those unique parts bleed through when in the faster pose, since it's easy for them to fall into the straight body, arms to the side posing.
For the Closses, I made it more upright with a bigger silhouette and less aerodynamic posing with its arms wider and flexed at its side, treating the Closses as though it was a big massive rock getting pushed forward from its jet engine, and not caring so much about aerodynamics.
The Closses has a faceplate visor that doesn't animate and only points forward, so we needed the suit to be more upright to at least somewhat look like the visor area is pointing in the right direction, instead of looking down.
I also made the legs closer together to bring more focus on the arms and the silhouette, and I bent the knee to offset the back leg plates to avoid some clipping and to vary up the posing from the Lancer.
For the storm, I really leaned into the superhero posing that emphasized the cape and the right arm.
I made the left arm flex outward, which spread out the cape better along the shoulder.
To showcase the magic arm, I pulled the right arm out from the body for that clear silhouette.
I also did a tuning pass on the cape physics to get the motion flowing just right, which was a bunch of random tuning values, so it was a lot of trial and error.
To get the gun streamlined against the body when in flight, I added an offset atom to the weapon holster to keep the gun from clipping the cape.
For the interceptor, I leaned away from the hummingbird flapping motions for the wings, and instead used them like fins or rudders.
To keep the lines of the interceptor's model really clean, I always aimed for an arrow type of graphic in the posing.
So the arms are always straight out with flat hands, and even in the faster pose, I made sure the arms were separated from the body silhouette, and not tied at its sides to still create that graphic.
I also bent the left leg like the storm, but kept them streamlined for more variation.
So the boost transitions, one of the places we wanted to spend some animation bandwidth was to sell that awesome feeling of flight transition from the neutral speed to the faster boost speed.
We want you to feel that initial jolt as soon as you press the throttle forward instead of just a speed blend.
All these boost transitions follow the same type of style.
They open up quickly to a big anticipation pose, then reversing shape and tightly collapsing while moving forward in screen space, eventually opening up slightly to settle into that fast speed pose like an overshoot.
Which is another reason I made sure to open up the fast B-pose more to give them room to collapse tighter in the transition for contrast between the transition and the normal fast flight.
We also layered on top more animation and camera shake as well to sell that boost feel.
For the base pole setup, to make the physics and blending into and out of flight easier, we kept the y-axis facing up the whole time and only rotating the capsule and the yaw, which is how every other state works in our game.
It simplified the physics by putting more work and content on animation.
So basically, the capsule and the physics model never rotated in the other angles, but just visually did it through animation.
That means for each javelin, just the base poses for flight had nine animals for each slow, medium, and fast speed.
So 27 for each suit, just to get the visual roll, pitch, working for the blended speeds.
And this decision did not just affect poses, but every one-off motion, like the boost transitions, enters, and barrel rolls, had to have at least nine different variations as well for the pitch and banking.
Even more if it needs to blend well back into the normal flight loop smoothly for the varied speeds.
An example would be the boost transitions that needed 18 per suit, 9 for fast and 9 for medium to blend out smoothly in case you had little or full input forward at the end of the transitions and while still being able to steer.
Also, keeping in mind that all the additive layers had to work with these base poses and one-offs, so different variations are mainly for hip orientation but slight pose adjustments, because any big rotation changes might give you unexpected results.
These are one set of speed poses in Maya with the trajectory pointing forward, so you can see the pitch and banks were all done just visually.
But this is what the banking poses look like in game.
The top row is the faster boost poses, and the bottom row, the medium speeds.
You can see how the poses are just slight adjustments of each other and how much the camera angle is varied from the Maya trajectory.
So always make sure when posing to work with the in-game camera in mind and test in-game constantly.
What you see in Maya might not be the proper framing when you're playing.
This is a representation of our layer stateful structure.
While the main base stateflow is running or transitioning, we actually have all our additive poses nested in a layer above them that are constantly running.
This allows us to blend the different additives on and off independently from the transitions for more control.
Also, it lets the additive loops continue to play out rather than restarting constantly every transition so you're not just seeing the first same part of the loops all the time.
We also have the turning additives split into two different layers so that we can offset and delay the turning additives on the upper body from the lower body or vice versa, which breaks up the linear way the additive motion would be applied on the whole body.
We use breathing type of additives to break up the static poses and linear blend spaces.
There are two main breathing animations, which are being layered on and blending to create an organic feel.
There's a drifting type of motion that varies the position of the limbs in screen space and comes through more in the default speed.
The second is an air current shake type of motion that is more pronounced in the boost, which gives the feeling that the suits are tensing the faster it goes from the air current and causing it to shake more and drift less.
The turning additives are offset animations created from the neutral base pose.
While we have the base poses to show the pitch and banking lean, we use turning additives for reactionary motion to make it feel more responsive to stick input.
It's the same concept as look or lean additives for turns or runs, where it might take the body and the root motion more time to rotate, but the layered additives help lead the motion first and remove some of that delayed feeling.
In the banking, it creates a twist and a lean in the movement direction.
How big or small the additive post change created in Maya is, is also another way to vary up the different feel of the suits working in conjunction with the design tuning values.
Where the interceptor's turning additives is a big motion to show responsiveness, a suit like the Storm's turning is more minimal and graceful.
And for the pitch up and down, it breaks up the pose and by curving the bend of the body backward and forward.
So it would just, or it would just be a flat pose since the up, neutral and down base poses don't have any spine rotation when they blend by themselves.
All the suits have different types of steering.
The Interceptor uses arms and wings in a twisting banking motion, where the Clossage is used more of an arm swing for steering.
One trick to creating the additives is in Maya.
You can have the turning additive offset poses in a layer above to mimic the state flow.
Then when creating the base poses and animations, you can cycle through them on and off to check how it affects the base pose.
Also to make sure to use FK when rotating limbs rather than IK when creating offset animals, which would result in getting random rotations instead of discrete, deliberate rotations only in certain axes that you want.
To create the crashland state, it's basically just an erratic additive layer that is layered on top of the current flight layers.
So you can still steer and the flight underneath and still work the same as before.
This technique can be used to layer on any type of motion to create different status effects as well.
For example, either turning off all the additives to create a freeze effect, or really hard shake for a shock effect.
A great place to really sell and vary up the feel of the different flights was the one-off motions, like the Lancer's enter.
Initially, we had the body really shooting forward of the trajectory and in screen space to show the speed, but that caused a lot of gameplay bugs with the way it would need to slow down and blend back to the trajectory, or flying off the screen when entering flight facing left or right before the camera could catch up.
But we wanted to show the frantic power of the enter's atoms.
We accomplished that in the motion by first dropping the body as though the Lancer was in free fall for a split second before the boosters kicked in.
And to convey the power of it, I twisted the shoulders when the boosters kicked in and had the arm shooting back and grabbing onto the air to show it's stabilizing from the initial power of the motion.
You can see the Lancer pops into a crouch pose right away at the start and does a big pose change that shoots forward into the horizontal flight pose within four or five frames.
but then spends the rest of the frame time settling in and stabilizing to sell the motion.
Like in fighting games, where it pops into the hip frame, then spends the rest of the animation time with overlap and settle.
Initially, the shoulder and body twist was animated and built into the enters, but next time I'd have the twist on a layer instead, so it can be more varied and randomized.
The cost in general has the same type of motion as a Lancer, but initially the body moves downwards more and backwards instead of forwards right away to sell that greater weight from the delay.
You can see the comparison here where they end up in the same place at the same timing.
So instead of spending the time to stabilize like the Lancer, it takes the Colossus longer to transition to that horizontal pose.
And the arms are also delayed more to show weight, but the full motion is still the same amount of range, which helps for design.
The Storm's Enter is a mix of the Lancers and the Colossuses.
It has a big pop at the start, but then blends forward into the horizontal pose more slowly like the Colossus to have that graceful storm feel.
For the interceptor, since I started animating the double and triple jumps first, I went a bit crazy and I knew I wanted to enter with more extreme motion and I wanted to show that it had more speed and agility than the Lancer.
But the Lancer's enter was already as fast as it gets for that default motion.
I debated about entering using a twist type of motion, but that was too similar to the barrel rolls, and then at first I tried using a front flip, but that caused an initial confusion on the button press with the double and triple jumps, not knowing what happened right away, whether it was a flip jump or an enter glide, so I went with a back flip.
I need to make the visual language very clear and the motion deliberate on the button press to avoid any confusion.
So saving the backlit motion for enter glide shows a clear, unique, big motion that you're in flight, which looks and feels fluid for the player camera.
Also using a front flip for the exit anem blends well with the triple jump flow.
That was one of the many lessons for me in understanding that flight is only one state in a chain of motions, not just thinking of it as a separate state on its own.
Realizing how it feels to transition in and out with the other states was really important.
A benefit of having one animator on the full traversal loop, from jump to fall, hover and flight and swim, gave a consistent feel and fluidity between all the states.
The consistency can come down to stylistic animation choices, but can also depend on small differences of a few frames or blend times in transitions.
The barrel roll was another one-off motion that we had.
For the Lancer, I made sure the barrel roll was very slow, a very nonchalant, I've done it a billion times maneuver.
I thought of it as a very low effort veteran soldier type of move where it's sluggish and doesn't tighten up too much in the roll, which is characteristic of the Lancer, but also shows a contrast with the Interceptor.
For the Colossus, I initially was going to propose a slow type of barrel roll that shoots out flares, like a military carrier plane.
Then we opted to lean into a shield mechanic and just added a shield arm override.
The Storm's Evade is just using the Lancer's barrel roll.
Since the storm is invisible most of the time with a lot of visual effects, I didn't feel the need to create another set, especially with the time we had left.
And using a longer blend out, we could hide the end pose differences.
The interceptor was basically a retarget of the Lancer, but I added two more spins in the row and tightened up the pose in the spin for a sleeker silhouette and also shortened the recovery time to show it being lighter and more agile than the Lancer.
To save animation costs, the barrel rolls are nine atoms that we ended in a blended pose between the medium and fast speed, which we used the longer branch out back into flight instead of doing 18 or 27 atoms.
It's such a big motion that it didn't need to blend perfectly back.
So as you can see in the end, when creating an animation system like Flight, it's very different than creating one-off animations.
There are a lot that goes into getting the feel just right, and only so much you can do through animation alone.
Having to depend on things like physics values, tuning, cameras, controls, visual effects, and countless small things all add up to create a bigger picture.
It's really a marriage between design and animation with lots of back and forth, and even good communication between the different departments.
Yeah, we truly feel that animation and gameplay design are two sides of the same coin, especially so when creating exotic traversal abilities for player characters, which are so dependent on player input.
One side influences the other, and we hope to have shown how our different parts aligned to create the final experience that we deliver to our players.
To close things off, we just want to give a shout out to our amazing team over at Bioware, without whom we never could have realized the flying as well as we did.
While we focused this talk around animation and design, adding the ability to fly to a game has huge ramifications across all disciplines and how they do their work.
It required tons of collaboration and communication and was truly a team effort.
These are just some of the key collaborators that helped us bring flying to life.
We're honored and proud to be here today to represent the entire team's hard work.
Thank you very much.
So, I don't know, do we have time for questions?
One, maybe two.
One, maybe two.
If anyone has any questions.
There's mics over there.
So hi, congratulations on your game.
I also played it, fantastic flight system.
My question is, there are games like Gravity Rush, don't know if you played them, they don't have a ceiling.
And they don't impact gameplay without having a ceiling.
What was actually the decision that you made to just cut out the open world feeling of flying everywhere?
Why did you implement that in the beginning instead of just experimenting with it?
Sure thing.
So we actually did experiment quite a lot, and Gravity Rush was one of many reference games that we actually looked at on how they solved this problem.
It's a really good game, by the way.
I really like it.
So the thing with that that's interesting is what they do is they tend to hide it with VFX or things like that that kind of blocks out the world when it's really far below you.
So we tried some approaches there, but I think the main concern there was still that you didn't really have to fly through the world, you could just fly above it and at that point you were just kind of taking off into the distance and you sat there for a long time without really needing to interact.
or do anything with it, and it tended to become kind of boring.
So that was the thing. As soon as we lowered the ceiling a little bit and made you actually have to fly through the world, we found that players were way more engaged by it.
So that's why we opted for that.
Okay. Thank you very much. Thank you.
Okay, if we have any more questions, we're going to be out by the exit over there.
And just approach us, and we're going to find the breakout room together.
Okay. Thank you. Thank you.
