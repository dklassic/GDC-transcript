Hello and welcome to Building Narrative Games with Yarnspinner.
Hello, I'm John. I'm a game developer at Secret Lab, a Tasmania, Australia-based studio.
I'm best known for working on Night in the Woods, and I'm also an author of a bunch of books, including the indie game programming cookbook and a few others for O'Reilly.
And I also run a project called Yarnspinner.
Hi, I'm Mars. I do machine learning at CSIRO, which is Australia's National Laboratories equivalent, I guess.
I'm a programmer, but not a game maker, and I have asked my best buddy here, John, to teach me about this thing that he makes called Yarnspinner.
What's Yarnspinner?
So what's great about narrative games?
They're really fun to play.
They're also fun to make.
They're a really easy way to get a lot of your complex world building in when you don't have a big team.
Before you get to the part where you have the scale and the skills to show really well, it's really fun to get started on the tell.
And sometimes that ends up standing alone in a really amazing way.
and especially for people who are new to making games, making a text-based game that then grows from there is a really great way to get the story beats going.
So narrative games here is like a story, but interactive.
What a concept. So they vary a lot in scale.
So just as there's a range of different kinds of narrative games, there's a range of different tools.
So you might have heard of twine and ink and fungus and this project, Yarnspinner.
There are others.
And definitely in some of the really big studios, in some cases, if your game is a certain scope, it's worth making your own.
it's probably not worth you riding your own when these alternatives that are out there are free, they're open source and there are really supportive communities that exist to help you use them.
So there's a bunch of them out there as we just said. The three that are possibly the best known right now are Twine, Ink and Yarnspinner.
Yarnspinner kind of exists halfway between Twine's complexity and Ink's complexity.
Twine is fantastic for working with lots of text.
Ink is fantastic for when you need to have lots and lots of logic controlling the individual lines.
And Yarnspinner gives you the best of both worlds.
So today we'll be showing off Yarnspinner as that nice middle between the really simple getting started but might soon reach the limits of twine and the really featureful but might struggle to get started if you're trying to make something smaller, you have to start a lot of bits that are there for ink.
In Yarnspinner it's really, really easy to get started with something small but there's also a lot of room to grow.
So Yarnspinner is a scripting language, a domain-specific programming language for dialogue.
It means that you can write it like a screenplay where there are lines of text and the options that follow it that people can choose between in the same space, in the same script, in the same files between cues, like you would write a screenplay about like moving a character or changing something about their stance or changing something about the scene. It means that you can have someone write it as if they're setting the scene for this dialogue.
It's super super fast to get started writing a branching tree of dialogue and they can grow very large without the files themselves getting too complex.
So if I wanted to get started with narrative tools, John, where should I start?
I'm glad you asked. I think you should start with a visual novel because it's a great way to get started in managing assets and constructing scenes and telling a story without the complexity of making physics-driven gameplay or movement mechanics or all the rest that would otherwise form part of a larger game.
So what is a visual novel?
Well, the most well-known examples of these kinds of games are those games with a 2D background where cartoon characters slide in from the sides of the screen and they talk to you, the player.
Because they're quite text-based and almost always and often entirely text-based, they really quite lend themselves well to romance games, social themes, those kinds of things.
The genre, though, is very, very broad and it includes anything where the primary or the only mechanics.
are speaking to characters and making dialogue choices, making textual choices.
And this is a perfect case for using Yarnspinner, because while Yarnspinner can do a lot more than this, if we focus entirely on dialogues, then we can start simple and go from there.
So with that in mind, let's make one!
So we had a bit of a debate and I won, because I like space, so we're going to make a game about being on a spaceship.
This is why she's called Mars.
So we're going to use Unity, we're going to use Yarnsminut, we're also going to use Visual Studio Code for doing our text editing.
And that's really it.
We're not starting from scratch because this is a talk about building a visual novel rather than learning how to model a 3D environment.
So we've got that already done ahead of time and we've also put together character models, some textures, some animations.
These all came from kenny.nl which is an excellent resource for public domain stuff with some additions by me as well.
We've also written some code, which is just two very simple C Sharp scripts that include very minimal utilities just for moving cameras around or for placing textures on characters that we'll go through as we use them.
All of this is available right now on GitHub for free that you can download at this point so that you can do this along with us and make your own, which we would love to see.
If you do make your own, please tweet at us.
Thank you.
So what are we going to do today?
Well, we're going to download and install Yarnspinner.
We're going to make a basic Yarn script and hook it up.
We're going to block out our story structure and logic.
We're going to set the scene by incorporating multiple characters and locations.
We're going to add a bit of polish.
And then we're going to replace our placeholder text with the final saucy story.
Fantastic.
We don't have time to cover every single feature of Yarnspinner in a very short talk, so we're going to focus on a few of the core features of it.
We're going to talk about branching dialogue, variable-driven options, and also making some custom commands for managing the camera, characters, and the transitions.
So I've created a new empty Unity scene. I'm using Unity 2020.3 today.
This is a completely blank situation. Let's begin by adding the Yarnspinner package.
So I'll go to the window menu and choose Package Manager. I'll click on the plus button and add a package from the git URL and I'll enter in the URL for Yarnspinner. Today I'm using the most recent beta of Yarnspinner, but if you're watching this in the future, then a future version might have been released since then, so make sure you use the most recent version.
So Unity will download and install YarnSpinner into my empty project.
Cool! Now that we have YarnSpinner installed, we should also have a good text editor.
I like Visual Studio Code!
Me too! So luckily for both of us, we've got a good extension for Visual Studio Code that we can just install.
I'll go to the extensions list, and I'll type in YarnSpinner, and hit enter, and there it is, the official YarnSpinner plugin.
I'll click install, click the reload button, and now the extension is installed.
So before we get started with our Yarn script, we have to decide what kind of story we want to tell.
And so we made this little slice where you're starting on a spaceship, because I love them, and you have the choice between speaking to one of three different people on the ship.
And if you choose to speak to the engineer, he has a big complaint to you about his job.
And if you speak to a crewmate, you end up chatting and...
It slowly derails, and you try to convince her to give you more of her rations.
And if you speak to the captain, she talks about how ready she thinks you are for a crisis.
And you have this back and forth where you can either convince her that you are totally ready for a crisis, or that you're woefully unprepared.
And then, moments later, pirates attack the ship.
And depending on whether you spoke to the captain, and whether you convinced her that you were totally ready for a crisis...
If you succeeded, she'll send you to go and save the day against these pirates.
But if you didn't speak to the captain, or if you did but you didn't manage to convince her that you were prepared for a crisis, she will send the garbage crewmate instead to go and save the day. And she probably won't save the day.
So we have this tree structure where you always start in the same spot in the corridor on the ship.
You have one of three conversations that you can have with one of the different people on the ship.
And in different ways, they end up in one of these two different endings.
So how can we represent that in Yarn?
So to get started, let's drop in the basic skeleton of the scene.
So just the bare bones of what we need to start telling our story.
So here we have a fresh download of the assets that I mentioned earlier, and we'll add them to our empty Unity project.
We'll click import and they'll all get copied into the project.
The place to start is in the scenes folder.
So in scenes, start point.
So here's our scene.
We also have a couple of additional things in here that aren't visible.
So two of these game objects, Corridor and Bridge, these are containers that contain just objects that are markers for where the camera is going to go to and where the characters should get placed.
That's our environment.
Let's now start adding in some Yarnspinner objects into the scene.
Yarnspinner works with a collection of script files that we call Yarn files.
These are just plain text documents and you'll write the contents of your dialogue into them.
So let's begin by creating our very first Yarn script.
We'll go into our dialog folder that I've made here, and we'll right-click, create, yarn spinner, yarn script, and we'll call it space journey.
Great. So here's our new empty file.
We'll also create a second file called a yarn project, and a yarn project exists to link multiple yarn scripts together.
Now, today, we're only going to work with one yarn script, but in larger projects, you'll end up working with many, and they all get linked together using the yarn project.
Please do not make a large game using only one yarn file even though is technically possible. It is highly irresponsible. Don't do that You'll get headaches and you Ryan So let's also create our yarn project will right-click create yarn spinner. I'll create a yarn project and I'll call it space journey project Great, we'll now add that script into the project.
So we'll drag the space journey script onto source scripts.
There we go.
So now it's in the list and we can click apply and we're good to go.
Now that the files exist, let's create some game objects in the scene that will use these files.
The dialog runner is a component on a game object that runs yarn code.
It receives lines and options and also commands from the yarn scripts and uses them in the scene.
It makes lines appear, it shows options to the player and also responds to commands, which we'll get to in a second.
You can find a prefab version of the Dialog Runner inside the Packages folder by going to Packages, Yarn Spinner, Prefabs and there you'll find a thing called dialog system which contains among other things a Dialog runner as well as a full canvas for showing lines. So let's drag it into the scene I'll select it and just hit the F key in the scene view to see it all here is our Canvas for showing lines and options the key thing to know about the dialog system is That it's got the dialog runner component on it The dialog runner needs a yarn project, which is what we created a second ago.
So we'll drag this into the right position here.
We'll go to our dialog folder and we'll drag the yarn project into the yarn project slot. Cool.
If we hit the play button right now, nothing would happen because we haven't written any lines yet.
So let's do that now.
So because a yarn project can be made up of multiple yarn files, when you make a new yarn file, it gives the first node the name of the file you gave it.
However, a yarn project will always start running lines from the first node called start.
So we need to call this node start.
And we want to give it some very basic content.
So here's some I prepared earlier.
We've got two lines of text in a node called start.
And if we run this in Unity, it should feed us these two lines one at a time.
Now that we're back in Unity, we're almost ready to hit start.
We're going to turn off a couple things we don't need right now.
We'll turn off the fade layer and we'll also turn off the title for the moment.
We'll come back to those later on.
And now we'll hit play.
There's our first line.
Hello world.
And click continue to move to the next one.
This is me.
Oh, I made you sad.
I made you quote the SoundCloud GBC.
Yarnspinner will send lines one at a time into the game.
It'll also send other things like options and commands.
We'll come to those.
So let's get started with our three different characters.
If we want to make it so that you can pick between which of these three different characters you want to speak to, let's make this note again.
We're going to give it some options.
Here, we're using the first and probably most popular part of the Jansmanner syntax, which is these little arrows that mean options.
After this first line is played, another day in space fleet might go have a chat.
These three options will be presented, the things that are preceded by arrows.
You can choose to go see the engineer as per the orders you were given.
You can choose to meet up with your friend, the crewmate.
Or you can choose to go and talk with the captain.
Then depending on which one you chose, the nested dialogue is shown.
So we're going to save.
We're going to go back into Unity.
And if we play again, this time it should present us with that option.
So it's another day in Space Fleet, and I might go have a chat.
I'm going to decide to go and talk to the captain.
And she says, hello, I am the captain.
So now that we have these different options, What if we wanted to add further and more complex branches?
We could add them inside the same node.
We could keep nesting, and they would give us more options.
But at a certain point, that would become way too complex.
So instead, we use this node system.
Let's instead make it that each of these sub-branches of that first conversation are instead their own node.
Here's one I prepared earlier.
Instead of having those nested dialog options here, they just jump.
using the jump command to go to the node that's called that thing.
If we played this it would do exactly the same thing as before, but it's a more nicely laid out file that better lends itself to expansion.
So the game starts the same way every time, in that we get the choice to speak to the captain, the engineer, or the crewmate.
But no matter which one we choose we end up on the bridge because space pirates have attacked.
And we want to now add in that ending.
Here we add a new node called bridge ending.
And if we want to add jumps to it, we can just put it at the bottom of each of those conversation nodes.
Now, no matter which one you pick, afterwards, you jump to the bridge ending node.
Let's see this in action.
We'll run the game.
We'll talk to the captain.
Everyone picks the captain.
Everyone picks the captain.
And then, pirates!
Oh no!
Crewmate, go deal with those pirates.
Fantastic. That's our story.
Well done. That's going to win awards.
But what if we want to make the ending change depending on what you did?
Let's instead make it have those multiple endings that we talked about before, where either you can save the day or they'll send the useless crewmate.
We have to make it so that when you talk to the captain, you have different conversation options that let you convince her that you are totally up for the challenge if a crisis happens.
But we also want to make it that you can fail if you choose the wrong thing.
Here we're just going to make it really simple.
She's going to ask you if you think you're ready.
You're going to say, I want to go on more missions.
And she's going to say, do you think you're ready?
And if you say yes, instead of saying no, we're going to set a variable.
Variables store information in Yarnspinner.
Right now, we're just using a number.
We're storing it inside of a variable called away mission readiness.
And so we say, set away mission readiness plus equals one, which means it goes up by one.
Variables in Yarnspinner begin with a dollar sign.
After we have set that, we'll see another line where the captain says, really?
And then we'll get another set of options.
These options and that line will only appear if we chose yes at the start.
If we say yes, then away mission readiness will go up by one again.
Now that's important because we want the good ending to only happen if away mission readiness is high enough and high enough in this case means two.
And now we're going to start with our first conditionals where we're going to get different behavior in the ending, depending on the value of this numeric variable.
Here, we're going to replace the contents of the bridge ending node to add this extra part.
Now, either way, the captain will say, pirates, and you will say, oh no.
And if you didn't manage to speak to the captain or convince her that you are ready for this, then she will have the same ending as previously, where she will ask the crewmate to go and deal with those pirates. However, in the else clause, which will be activated if your away mission readiness is two, which means you said yes twice, then you were just telling her how ready you are for crises.
So she tells you to go deal with those pirates.
And you're very excited about that.
So let's go back in Unity and see how we can get to these different endings.
John, do you wanna have a go?
I do.
So let's talk to the captain.
All right, they are the captain.
And we want to go on more missions.
Do you think you're ready?
You're so in love with the captain.
Every time you pick the captain.
My one true love.
Am I ready?
Yes.
Really?
Yes?
Pirates? Oh no! Okay, but we were just telling the captain how ready for this we are.
So time to go deal with the pirates. Hooray.
However, let's run that again, but this time we're going to do it a bit of a different way.
We're going to talk to the captain, and this time only.
Listen, I got reasons for this.
Am I ready? Yes. Am I really ready? No.
Okay. Now when we get to the ending, the crewmate goes and deals with them.
So because we didn't hit both of the points where we changed the value of that variable, the condition wasn't met.
And that means that different content ran.
You are only away mission readiness one, John, step it up.
One day I'll get there.
So we've had a great time looking at this empty sky and watching our story unfold thus far.
But what about all those assets that John made?
How are we going to see the visuals of this story?
And how are we going to make that work through Yarnspinner without having to write too much code?
Over to John.
So, so far we've been working with lines and options. Lines are things that we get to see on screen, that's the text.
Options are the buttons we get to click on.
But there's a third kind of thing that we want to be able to send from Yarnspinner into Unity and that's commands.
Commands are like stage directions. They tell the game to do something that isn't show some text.
So, what we need to do is to have a command that makes the camera be in a certain location.
Now remember how we showed you those markers in the scene, the corridor and the bridge?
we're going to add some code that makes the camera be in the right location and also make it so that YarnSpinner can invoke those functions.
We've written some scripts that contains the code that we need to make this happen.
So that's in a file called visualnovel.cs.
Being a component, it needs to be added to a GameObject, so we'll add that in now.
In the scripts folder.
Here's Visual Novel, so I'll go to the GameObject menu, create an empty, I'll name it VisualNovel, and I'll drag the VisualNovel component into it. Let's open up the code for VisualNovel.
And in here, I've got my function changeCameraLocation.
So our next step is to make it so that Yarnspinner can call this function.
We need to make sure that the commands are known to Yarnspinner before any Yarn scripts run, because otherwise we might end up in a situation where the Yarn script tries to run a command that doesn't yet exist.
So we'll do this in the awake function which is called before anything else happens for the script So inside awake, we'll find the dialer grunner and store in a variable dialer grunner we'll also get the fade overlay that's for later and Then I'm going to add in the call to add command handler add command handler Registers a command with the dialer grunner here. We're saying the command is called camera It takes a parameter which is a location and when the command is run it calls this function changeCameraLocation, that's this here.
Now we can use this command in our Yarn scripts to change the camera location.
So if we go back to our Yarn script, we know that at the start of the game we want to start in the corridor. So at the start of the start node we put a cameraCorridor. It's going to call that setCameraLocation with the parameter corridor. That's going to go and find in the scene that maca we put at a location in the corridor called corridor. Now When we want to switch to the bridge, we're going to put a line in that says camera bridge.
The camera will move to the bridge and it will seem like you, as the player point of view, have moved to the bridge.
Now if we play it, this should display us moving around the different parts of the environment.
And there we are, we begin in the corridor.
We're going to go see your favourite captain.
We do the conversation about whether we're ready to go on away missions.
Totally not ready.
And then there are pirates!
Now it's pirates on the bridge.
Because we've moved the camera into the right location.
I must admit, it's way scarier than Pirates in the Corridor.
What if they end up in the Caribbean?
So as nice as it is speaking to an empty corridor, we probably want to use those characters that John has made for us.
So if we have a look at our characters, we can see that we have that engineer, that crewmate, and that captain as different models.
But how can we make them appear in the different scenes as if we're speaking to them depending on our actions?
Back in our visual novel.cs, we actually have a function for that.
We're going to have place character, take a character name, which is either going to be engineer, crewmate, or captain, and a marker name in the scene to move that character asset to.
This is then going to find the prefab.
If it has never been in the scene before, it's going to make it.
And if it has been in the scene in a different location, it's going to move it to the new spot we want it to be in.
Then, like before, like we did with the camera, we're just going to find the marker with the name that we wanted, and then we're going to set the character asset's position and rotation to that.
We can add a command for this in our awake function in the same way that we did for camera.
Now we're going to have a command in yarn called place.
And it's going to take two parameters, string and string, for the character model you want to move and the location marker you want to move it to.
This means now we can put cues in our yarn file that move our characters around.
If we want to speak to the engineer, we want the engineer to appear.
If we speak to the crewmate, instead we want the crewmate to appear.
If we speak to the captain, instead we want the captain to appear.
The bridge ending is different because we want different characters to appear based on what our ending is going to be.
So we'll always have the captain visible.
And the engineer.
But we'll only see the crewmate if the captain decides that the crewmate should go and deal with the pirates.
Otherwise, the crewmate doesn't even come to the bridge.
Probably shamed by how awesome you are getting chosen to go on the away mission.
I would be.
So we're almost done. Let's go back to Unity.
The visual novel script makes use of an asset called character list, which just contains the collection of references to character prefabs.
So that's this asset here. And all this is, is just a list of prefabs.
So to make the visual novel script aware of that list, we'll just drag it in.
And then we'll hit play. We see our opening lines. And just to annoy Mars, I'll talk to the captain.
And there they are.
Great.
So there's our character appearing on screen.
And now we have the engineer on the left and the captain in the right locations on the bridge.
So maybe it's a bit weird that the captain is so happy about there being pirates, and we want the models to look slightly different in different contexts.
So how about we change the character poses and facial expressions to one of a few predefined options?
The last two commands we added were done by calling addCommandHandler on the dialog runner.
And that works really well because those kinds of commands are things that relate to the scene as a whole.
We're changing the location of the camera, we're creating a new object into the scene.
But setting the expression or the pose of a character is something that's quite specific to that character.
So what we should do is add our commands onto scripts on the characters themselves.
All three of these character prefabs have a character script attached.
This exists for two reasons.
It contains just the list of all the expressions that they can have, and it also contains a bit of logic.
There's two methods in here that we want to make use of.
Set pose.
and set expression.
setPose uses an animator to set the pose of the character and setExpression finds an appropriate texture and applies it to the face.
We want these two methods to be able to be called.
The yarn command attribute allows you to make a function on a script visible to Yarnspinner.
So by saying yarn command pose, we're able to say pose, name of a game object, and then any other parameters that we want to pass in.
So we could say, for example, pose, engineer, hand on hip.
And what yarnspin will do is it will find the appropriate game object and call the appropriate method.
So we've added the pose command.
While we're at it, we'll also add the expression command, which works in the exact same way.
And now we can make use of these commands inside of our Yarn script.
The most emotional part of the entire story is the high stress situation where the space pirates attack.
So what we'll do is we'll have our characters react with emotion.
When the engineer and the captain are visible in the scene, we'll use the pose and expression commands that we just added to tell these two characters to adjust their pose and expression.
We'll tell the engineer to have a hands-on hips pose and we'll have the captain have a hand-at-mouth pose.
The engineer will be angry and so will the captain.
If we're not going to go on the away mission, then when the crewmate arrives, we'll have the crewmate be extremely happy.
We'll change the expression to a happy one after the captain says, crewmate, go deal with the pirates.
And we'll also make the captain have a pointing gesture as well.
But if the captain doesn't want to send the crewmate, they want to send you, the player, then we'll use a different expression and actually the same pose.
All right.
With that, I think we're ready to test it out.
OK, so let's get to that point in the story.
So we'll go talk to this character.
Great.
And now they're responding with different expressions and different poses.
So by adding in that attribute onto those methods, it makes it very easy to just call those functions from within your script.
Mars hand on hip, intrigued.
John, eyebrow raised.
Alright, so we have our visuals, but it's not very zazzy yet.
So how about we add that magical polish that everyone talks about?
John, polish.
Now?
Yes.
So.
One of the greatest ways to establish that we're changing the location is with the classic fade out, fade back in.
Let's do that.
The UI overlay just contains a fade canvas group and the canvas group, you can modify the alpha value of.
So what you just animate this.
Inside that by the way is just an image set to fully black.
So that's how we get our fade to black.
So we wanna be able to make the fade overlay, fade in and fade out.
We could do this with the yarn command attribute like we did with the poses and expressions, but because the fade is kind of like a global scene thing rather than a per object thing, it makes more sense, I think, for it to be a command that we register globally using addCommandHandler. So let's go back into visualnovel.cs and in our awake function we will add in the two commands fadeIn and fadeOut. And these just invoke these functions here.
fadeIn Fade out one thing that's different about these commands is you'll notice these return a coroutine Which means when we say return start coroutine yarn spinner will actually wait for that coroutine to finish before continuing So now if we go back to our space journey dot yarn We can add fade ins and outs every time we change something about the scene here Well, we move the camera to the common corridor at the beginning of the game. We then fade in We're going to fade in from black as we start each other node. We're going to fade out Place all the characters we want to be in the scene and then fade in so that they are already there And when we move to the bridge, we're going to fade out before we move the camera Place all those characters change their pose and expressions so that when we fade back in all of that's already there It should seem a bit cinematic That's cinema baby, baby And as we go from node to node, we'll also see fade outs and then fade back in and that's great This is pretty good. But Mars, I think it's missing something You mean my zazzy title.
I mean your zazzy title.
Yeah, you do.
So back in our Yarn script, just like we did before to move the camera to different parts of the scene, we can also move the camera to right in front of that title we had floating out in the void in space.
And it's going to look like a 2D effect has appeared on screen.
So we can use that same corridor command.
But then we can also add that fade in and fade out, like we want to for cinema effect.
And in between, we have a wait so that it doesn't just fade in and immediately fade out before you had a chance to read my awesome title screen.
So wait is a command that's built into Yarnspinner.
We don't have to define it, it's just there.
And it takes one parameter, which is an amount in seconds.
So we are going to fade in, wait for two seconds, then fade out.
Easily adjustable if you want to be gratuitous.
So back in Unity, we actually have to turn our title canvas back on, because we hit it earlier, well, before we were doing anything with it.
And now when we press play, we should get some gravitas, some fanfare, space journey.
All right, there's one last bit here.
And because this is nothing to do with how to use Yarnspinner and more, what if you just had the script written, we're just gonna go to the script.
that was written. And structurally this is the exact same thing. We start with our fade-ins and our open lines and our initial choices. Our start node. Yep, and then based on what we chose we go into a longer conversation. The only difference to what we did before is there's just more lines as well as some more instructions to pose the character or set an expression. We've got some additional choices.
Here we are in the captain node and we're using the away mission readiness variable here as before.
We also have another variable called captain is friend.
We set that to true if we've hit a certain point in the conversation tree.
Otherwise it's set to false.
And it defaults to false as well.
The bridge ending remains, again, very very similar.
If our away mission readiness is less than the threshold it needs to be, then we get the crewmate going off to have adventures.
Or, to betray us, who can say.
Otherwise, we get to go and defeat the pirates.
And then we make use of the captain is friend variable that we set earlier to control whether the captain says, I'll miss you if you die, friend, or I'm sure somebody will miss you if you die.
And that's it. That's the visual novel.
We made that super, super quickly.
And while we didn't start from completely scratch...
There wasn't really much beyond what we did here.
This is a template that you can make use of.
The code and all the assets are available for free on GitHub for you to use and build off.
If you end up doing something more with this, I'd love to see it.
Please let us know.
So today we've only covered a tiny fraction of what Yarnspinner can do, and you might be wondering, if I've become an expert at this level I've made awesome little visual novels. Where do I want to go to next to find more functionality of Yarnspinner? Well, you can try adding voiceover support or localization which are very easy with built-in systems for Yarnspinner and Unity. You can add more advanced logic like we started to hint at in our longer script and it can...
expand as far as you like with those same conditionals.
There are other conditionals in Yarnspinner and other types of variables that we haven't shown examples of.
And of course, using those commands that speak to C Sharp and Unity, you can have all sorts of behavior that is only bounded by what your game engine can do.
The game that Yarnspinner was originally written for, Night in the Woods, makes extremely heavy use of the command system that's available.
So everything ranging from camera locations, character poses, triggers of animations, sound effects, it's all done through commands in Yarnspinner.
Basically, every time there's a cutscene, then that's Yarnspinner at work.
Yarnspinner is available from GitHub at this address. It is freely available under the terms of the MIT open source license, which basically means that you can use it for commercial and personal work as long as you just give us a credit. You can find the official site for Yarnspinner at yarnspinner.dev and the official twitter at yarnspinnertool, although really that is just me posting online. You can also join our wonderful and super friendly community on discord at discord.gg slash yarnspinner.
Thank you so much for following along with us today.
This has been Jon and you can find him at Displezzder on Twitter.
And that was Marz, you can find her at The Martian Life on Twitter.
Again, thank you so much for being a part of this.
We hope you find that inspirational, educational.
Go and make something cool with this.
And then show us.
Please do.
And also, don't forget to fill out your speaker reviews because it helps us make more awesome content like this.
Thank you and have a great GDC.
Bye.
you