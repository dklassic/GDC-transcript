OK.
Hey, I'm Andrew Frey, and this is Remote Working at SpyFox.
It's a case study of how SpyFox does high quality indie games while being fully remote.
And in detail, we're going to talk about why we've chosen to be a fully remote company, what kind of skills a good remote developer needs over and above their technical skills, what kind of workflows and tools do we use at SpyFox in order to be effective and efficient.
And perhaps most interestingly, how do we take a group of people who have never been in the same room together and make them into a trusted and creative team?
Like I said, I'm Andrew Frey.
I've been in the industry for about 10 years.
I've worked in big 150-person co-located teams.
I've worked in small 15-person co-located teams.
And now for the last two years, I've been working for SpyFox from my dining.
I'm just, there we, we're back, right?
Before we, so just some disclaimers, I'm not standing in front of you as the director of production of SpyFox or anything like that.
We're a very small company, we're a very flat company.
So I'm documenting this mainly because I have an interest in process and workflows and that kind of thing.
Also, we're not perfect.
I'm not saying that this is how everyone should work, but it's, we have had some successes and we've had some failures, so I wanted to tell you about it.
So Spidey Fox are people who don't know.
We've been around since 2010.
These are some of the games that we've made.
Alpha Bear on the bottom left is coming out very soon on mobile and it's going to set the world on fire.
And we are a fully distributed team.
So there's 11 of us on three different continents in five different time zones.
That's me, the yellow dot, and the UK.
We've got four people in Seattle, but they don't work together by habit.
They meet up every now and again, I have a chat, but they don't, there's no SpyFox head office they work in.
We also have two people in San Francisco, and they've just very recently started co-working together, but that's kind of an experiment and we're not quite sure how that's going yet.
What's not the kind of company that's had loads of cash in order to fly everyone and have one of those fancy company holidays every now and again?
So this is actually, this is a picture of the most spy foxes that have ever been in a room.
There's David, one of the co-founders on the left, Alex, Ryan, Pat, Daniel, the other co-founder, and me.
And this is last year at GDC, so that's six.
There are still people in the company that I've never ever met face to face.
Why do we choose to be remote?
Well, instead I'm going to ask you, why should you be co-located?
There was this blog post at richg42blogspot.co.uk which kind of went viral around the turn of the year where he talked about his terrible experiences working in Valve's cabal room and I hope no one from Valve is in the room, I'm going to piss them off.
But he was saying that the kind of busy, noisy, distracting environment is very, very difficult for him to focus and be productive.
This is a photo of Bungie, and I also hope there's no one from Bungie in the room.
And I've worked in offices like that, large, open, barn-like spaces where there's lots and lots of noise and lots and lots of distraction, and I found it very difficult to work in them.
And there's some science to back that up.
For instance, this article says, it's damaging to workers' attention spans, productivity, creativity, and satisfaction to work in an open plan office.
In fact, Peopleware 30 years ago was talking about how open plan offices can be distracting to productivity of creative teams.
And yet, we seem to see it as kind of the default in the industry.
I was working at a studio who had the opportunity to build their own new building, and they chose to have an open plan office.
I think management see it as a kind of easy way to, like the story is that you're facilitating communication because one person could overhear another person talking and then fill in the gaps in their knowledge.
But I see that as kind of like a hack.
If your workflows and tools and your processes aren't good enough to have that kind of communication, then you're really just hacking it and you're harming productivity by using Open Plan instead.
You can have good offices.
So in the top right is Robot Entertainment.
Is there anyone from Robot Entertainment here?
No, well, they seem to have a very good office, lots of square foot per developer baffles between areas to keep the noise down.
And I also think I'm right in saying that they have offices to break out into if you really want to hunker down.
Stack Exchange in the bottom left have gone fully all in on giving their developers their own individual offices because they believe that's such a productivity boost.
But these things are obviously expensive.
And if you don't want to go big, maybe you should go home.
And there's some science that says remote workers can be 30% more productive, fewer sick days, quieter work environment.
So that's one of the main reasons that we've chosen, as SpyFox, to work remotely is because we want to give our developers really, really productive environments.
The other big reason is because we want to have a certain type of developer working for us.
really, really high quality developers who are also really, really interested in working on the types of games that we make.
And if we restrict that to, say, only people who are in the Seattle area, then we've got this tiny, tiny little intersection to choose from.
And maybe those guys are currently in jobs, and they can't leave right now or something.
Where instead, if we drop that restriction, instead we've got this massive, massive pool to pick from.
So those are the two main reasons.
There's a big buck coming up.
It's not for everyone.
Remote working takes a special skill set and a special personality type over and above being a good developer We've had many developers some developers work for us who have been very high quality developers But haven't managed to make remote working stick So I'm going to talk a little bit about the type of skills that you need as a remote developer And the type of skills you should look for if you're hiring a remote developer So the biggest one the most obvious one is maybe that these guys have to be comfortable with being alone at all the time And that's great, that's got some flexible benefits.
I mean, I can sit in my underpants and play Taylor Swift and sing along at three o'clock in the afternoon and I'm not gonna bother anyone, at least only my partner, but it can be difficult for some people, especially if you self-identify as, say, an extrovert.
Now, luckily, we're in the industry where there's not too many of those people around, but if you do and you need that kind of day-to-day personal contact in order to keep your energy levels high, then you might find it difficult to work remotely.
Coworking spaces can help, but be aware that not all coworking spaces are born equal.
The place that I work at, very occasionally, is full of business consultants and a guy who runs an organic t-shirt company.
They're not the same kind of support network that a co-located game development team would be.
So they also, these developers have to be autonomous.
They have to be able to function on their own without this support network, or have some kind of other support network waiting in the wings to help.
And there's a certain class of problem that I know engineers come across, that I'm actually sure if it happens in other disciplines, that I call the wood for the trees problem, where I've got a bug, and I'm looking at the code line by line.
and it all looks like it should work, and I can't figure out why it's not working.
And in those situations, I used to be able to tap another developer on the shoulder, and he'd look at my code and fix it very, very quickly, but I can't do that when I'm working remotely.
Maybe everyone else is asleep.
Maybe it's harder to do that on Skype.
So your developers need the experience to be able to solve those problems by themselves without getting too frustrated.
So support networks can help. Maybe your support network is online, maybe it's Reddit, maybe it's Twitter, maybe it's a co-working space, or maybe it's just texting a buddy or using Skype.
They also have to be autonomous because they're going to come across points where they need to make decisions.
And it's going to be quicker for them to just take those decisions rather than consulting with the rest of the team.
So you need to be hiring the type of people who you can trust to make those decisions correctly, or at least know that when they reach a decision they shouldn't be taking, then they should stop and wait.
Your developers need to be self-aware.
It's much, much harder to pick up on professional as well as personal problems over Skype.
If you're in the same office as someone, it's easy to see if they're struggling with a problem.
But you can't do that when all you see of them is the occasional notification popping up in your chat client.
So they need to be self-assessing and realizing when there's something they should be escalating and telling other people about.
In fact, they should not be self-conscious about sharing issues.
This isn't to absolve responsibility for professional development from managers, but it's much more of a two-way street than you would have in a co-located studio.
They need to be communicative.
This is a really, really, this is such an important skill for a remote worker.
To know what someone's working on and to understand the reasoning behind the decisions they make, they need to be communicating that to you in whatever medium they're using.
and they need to know when there's things that should be broadcasting to the whole team rather than just leaving it and trying to remember to bring it up in the stand-up next time it happens.
If anything, you want your developers to be erring on the side of oversharing information.
That's not to say posting pictures of them in a swimsuit on the beach, but they want to be telling you too much so you can have them dial it back because it's very, very hard to go the other way and tell them to start sharing more information.
Time zones aren't specifically a skill, but it's something you need to be aware of when you're hiring remote developers.
If you're hiring the best anywhere in the world, then they could be working at any time of the day or night.
It's best if there's some kind of overlap between the rest of the team and this person, so there's at least some time where they're having real-time communication.
I try to do that, so this is roughly my time.
I'm in the green working in GMT in the UK, and then most Spy Foxes tend to work kind of on a specific clock.
And you can see that I leave some hours back to come back late in the evening when I know people are going to be around.
In fact, SpyFox working hours are so erratic, I can sometimes have people working when I wake up in the morning, and I can sync up again with them at 8 o'clock in the morning.
But when you're hiring people, be aware that this is going to obviously have an impact on private life.
So they need to be aware when you're bringing them on that they might be the best person in the world, they might be really well suited to working remotely, but if they've got a very young family, for instance, and they can't commit to working those evening hours, or whatever is suitable for them, then maybe it's not the right job to go for.
So when you take all those things together, autonomous, trusted, self-aware, communicative, it becomes apparent that...
Even a possible remote developer cannot be a junior.
This is almost a definition of a senior developer.
So you can't have what I've experienced in many of the co-locations I've worked on where you have a strata of junior developers and then some medium experience and then some very senior developers.
You need everyone across the board to be high quality because they need those skills and they need that experience to be able to cope.
Let's talk about communication bandwidth.
This problem is really the core issue that's going to ripple through the rest of the talk in that you're going to spend a lot of your time talking to your team via IRC or text or Skype or whatever.
And the pure heart of the matter is that text really sucks.
If you're working in a chat room or something, then you can have threading issues where you're not actually sure when a response is an answer to a question or an answer to an earlier question.
And not only that, but you can miss out on really, really important audio-visual cues that you would get when you're face-to-face.
For instance, what my hands are doing right now, where I'm looking, where are the pauses in my speech?
Not just the pauses, but what's the tone of my voice while I'm doing it?
And this is illustrated by a Key and Peel sketch that's quite funny, where they're trying to communicate via text message to arrange a time to go out in the evening.
And Peel on the top left says, I assume we meet at the bar, whatever, I don't care.
He's trying to be casual.
He's trying to be easygoing.
And when Key gets this text, he's like, whatever?
How could he not care?
He's really outraged about it.
And he reads everything in the kind of aggressive tone of voice.
So it's clear that text not only do you miss information when you're communicating over a text, but you're also misinterpreting communication.
It's very easy for emotions to get quite high in text.
It happens sometimes at SpyFox.
We'll be having a conversation, they'll get quite passionate quite quickly.
And when we jump to a voice chat to try and sort it out, things get diffused very, very, very quickly.
So it's obviously not a real issue.
It's just that people are misunderstanding what's going on.
So you're going to spend a lot of time trying to phrase your communications so that they're exact, so they're not ambiguous.
So also that it's accommodating for other people because you don't want any of those misunderstandings.
And that has kind of a weird side effect that text communication can be really formal.
And so the SpyFox atmosphere from a day-to-day perspective is quite a formal atmosphere for what's ostensibly a very creative indie company.
So what workflows and tools do we give our people to try and combat this?
The first thing we do is we go right back to the heart of the matter and look at team size.
So this is a 20-person team.
And these are the communication vectors that one person has to take into account for that whole team.
And if this is a remote team, then like we've already said, you can have to put so much more effort into communication that these can be multiplied.
It becomes much more intense.
And it starts to dominate your day-to-day function.
So what we do is try and cut everything down.
The type of games we want to make just so happen to be suited to working in small teams, so we will drop everything down to two to five people at most.
We once had a game that went to ten people, and I don't think anyone in the company really enjoyed that experience.
When you're choosing your chat clients, There's a list of features you should be considering in rough priority order now.
From the most important is rooms.
So we will take a bunch of people on the same project and we'll create a project room, sometimes more than one project room for different subtopics.
And everyone will go in there, and that will stop the rest of the studio getting spammed with messages.
Persistent searchable histories are important, because that means we can scroll back to six months ago and see that URL that we needed for that advertising client or whatever.
Mentions are great if, for instance, say our art director will span multiple projects and you want to pull him into your room when he's needed, so you can mention him and pull him in.
Guest and external accounts are fantastic for working with contractors.
And finally, it's great if you can take that group of people and jump straight into a voice call or a video call with that whole room.
For most of our text document stuff, we use Google Docs.
And that's kind of self-evident.
I think even co-located teams are starting to use this.
Because the comments and the history and the collaboration tools are so very, very, very good.
We use a kind of blog post style design document where we'll have a big starting blog post in the Google Docs.
And then further blog posts will appear above that documenting how the design changes over time.
There's more details on that at this URL, so I won't go into it now.
We use Trello for project management.
We can get away with that, because, like I said, we're working with such more teams.
But whatever project management tool you end up using, then you'll find that some people are better updating it than others.
And you really, really want to be as anal as you can about getting these people to keep the thing up to date, because as soon as one person stops updating it, then the trust in whatever the whole team is doing starts to fall apart a little bit.
We use Dropbox for cloud storage.
And I mean there were lots of alternatives to this that are getting as good as Dropbox.
One thing we use it for is internal builds, so I can put a build at project X slash latest and everyone can know that they can go there to play whatever the latest build is.
They don't have to sync anything from source control, they don't have to install anything.
It's also got some cool little features, like I can use the OSX native screen grabbing tools, grab a section of, say, UI that I want to iterate on or highlight an issue with, and that will put a link to it directly in my clipboard, and then I can paste that into chat.
We also have some tools for dealing with time zones.
If you're the guy who's working overnight like I do, then you want to be really, really ready for when everyone starts waking up.
Have stuff ready for them to look at for what you've done during the day and be logging what you've been doing.
Sometimes they'll wake up and there'll be a mini essay from me in Skype about what I've been doing.
Also communicate the presence that you have.
I've already shown you that I'll have a gap in the evening and then I'll come back and I'll leave again.
And I will say both times, I'm AFK now for a few hours back later.
And then later on in the evening, I'll say I'm going to bed now.
And I also, if I'm checking Skype on my mobile or something, like here's an example, I'm in the bottom text there and I'm saying, I'm still AFK, but I can help answer your question.
But you're not expect, I'm communicating that they shouldn't expect me to be able to, you know, make any code changes or anything like that.
You could also use Google Calendar to sort out time zones or a tool like World Time Zone Buddy.
And personally, I have a kind of concept in my head of Spy Fox time, which is kind of West Coast time, and I know that I'm eight hours behind that, so if anyone talks about 10 a.m., then I know for me that's 6 p.m.
So this is perhaps the most interesting area of the talk, about how do we take this group of people who, have never ever have ever been in the room together.
How do we take them and then turn them into a creative team that can work together and trust each other?
And I think trust is a really, really important aspect for a team.
You need to know when you can hand off work to someone else.
You need to know what other people's skill areas are.
And you want them to do the same for you.
But a huge part of trust is familiarity.
is getting to know someone and knowing what their foibles are and what they like and even just what their sense of humor is.
But it's hard to do that when we can't have in-person socializing.
You know, there were time zones and there were oceans in the way of us getting in the same room together.
So what we try to do, and I haven't actually thought of a really good term for this.
I'm not quite happy with this term, but we try to interject this space for personality into our workflows.
So everything that we do, we try and get a little crowbar in there and just leave a tiny little gap where we can be ourselves and then everyone can get to know us just by working with us every day.
The easiest and most obvious way of doing that is by using video as much as possible.
Not only is it important for getting over those barriers that text communication has, But also, just by seeing your face and what jokes you laugh at other people, they can get to know you.
Don't have address code, because you want this to have a really, really low barrier to entry.
There are certain people in the company who shall remain nameless.
Let's just call them David Edery, who I've jumped on a video call with and he's very obviously still in bed with the headboard behind him and he's just woken up.
But that's fine, because we're having that face-to-face communication and we're getting that level of fidelity in our communications that we wouldn't have otherwise.
Voice calls are a distant second best. There are some people in the company...
If you're a affiliate or mock company, you're naturally going to hire people who are somewhat loners, and then they won't want to jump onto video calls.
So it's kind of self-defeating.
So there are people in the company who will only use voice.
by habit, and it does work, it is better.
It's better than text by far, but it's a distant second best of video.
One little hack you can do is change your default avatar to something with your face, and with your eyes, and with your mouth, not a cartoon, with your eyes and with your mouth, and then people can look at that as you're talking in voice call, or they can look at that as you're typing in text, and that massively, massively helps people to understand what you're saying, apparently.
So we have a biweekly company call.
that we schedule on a Monday in the morning for West Coast people and in the evening for me.
And that's just for sharing information between the different projects, because there's obviously no, I can't walk past someone else's desk and accidentally see what they're working on and say, oh, that's cool, show me, because there is no desk for me to walk past.
So instead we do it on this call.
And we also have biweekly one-on-ones with Dave or Daniel, our co-founders, and that's a chance for us to talk about personal issues or professional issues, professional development.
And you'll notice that that's a much, much higher frequency than you might be used to in a co-located team.
That's because, like I've said, it's so much easier for these issues to develop quickly and slip through the cracks with a remote team.
We have two global chat rooms, one for random chat and one for company business, although we're not actually that strict about what goes where.
We're not going to shout at anyone for doing that.
And again, it's just a space where you can be yourself.
And if something cool comes up in the news, like say Valve's VR news the other day, then that will go into the global chat and we can talk about it for a minute and what it means for the industry.
One little thing that we have, and this is such a tiny little thing, once I've explained it, you'll be like, what? Is that really? But it made such a big difference when we started doing it, is that when we sit down in the morning and you're ready to start working as a SpyFox, then you open the chat client and you type in good morning and you hit enter, and that's it.
And there's no expectation of reply for this, so it's important that the tenth person to start work doesn't get nine replies saying good morning.
But it's doing several things.
So it's communicating presence, obviously, it's saying I'm here, I'm ready to work, but it's also random noise, and it stops that sometimes, you know, if there's no Valve VR announcement for a couple of days, then that global chat can sometimes be a bit quiet.
But this way, there's just a little bit of random noise in there, and it starts to feel more like a company rather than a bunch of contractors who happen to be on the same Skype channel.
And it's a little bit of space for personality.
I mean, you can use whatever method you like for saying hello.
Some people do it in different languages.
I went through a phase of Googling Shakespearean greetings.
We also have different flavors.
So, for instance, Jukebox Tuesdays is where you say good morning by saying what you're listening to right now.
birthdays are a really interesting social experience.
There's something that's just a little bit special about having a birthday in a team.
In a co-located team, maybe you all go in the kitchen and you cut some cake and you wish happy birthday to the person, but we can't do that because we haven't got a kitchen.
So instead what we do is we open up a secret chat group with everyone apart from the birthday person in there.
It's supposed to be a few days beforehand, but because we're a bit rubbish, it's normally the day of the person's birthday.
And we'll all be in there, and we'll open up a collaborative drawing tool that, like, at the moment, we tend to use Google Docs again.
And we'll all draw silly pictures, and we'll, like, write birthday messages for the person.
Here's some of the examples that we do.
And, you know, it's important that, like, art style is no barrier here, although these are some of the better ones.
I particularly like, for instance, Pat's dreamy eyes in the top left.
They're pretty cool. Pat's on the front row, by the way, if you're interested.
But unfortunately, he is taken, so...
But it's great, I mean this is as much for the other people in SpyFox as it is for the person whose birthday it is.
The person whose birthday it is gets a URL at the end of the day and he gets to open it and say thank you, but before that, everyone else has had this great shared experience where we've been bouncing ideas back and forth and then laughing at each other's jokes or terrible artwork or something.
And again, it's a space of personality, a space to express yourself within our normal workflows.
There are also some things that haven't worked as well.
So weekly multiplayer seemed like a really good idea for getting to know each other, but it didn't really stick, possibly because of time zones.
It's very difficult for me, for instance, to stay up to 3 a.m. in the morning for when everyone else finishes working.
But if you are going to try it, then you want to favor games that are collaborative and chatty, rather than games that are more frantic.
So for instance, Minecraft is a much better experience because you have that day-night cycle and you can stop and talk and plan than...
say, Team Fortress 2, which is just non-non-stop.
Actually, we found it quite difficult to find games that have this property, so maybe there's a potential market there.
We're actually, one of our projects we're working on at the moment, we're kind of viewing through this lens, so it's kind of an interesting space to be in.
So that's all I got.
To recap then.
Team building is really hard for a remote team.
If you can inject space and personality into your workflows, then it becomes easier and you can start to build that trust that you need.
Communication takes so much effort, so much time.
I mean, I'm gonna say it to you that communication takes effort, and then you're gonna leave here thinking communication takes effort.
And if you actually tried it, you're gonna be like, holy shit, this takes a lot of effort.
It's gonna surprise you.
And the workflows I've shown you here don't scale well beyond 10 people.
However, it's an extremely, extremely productive environment.
You can get so much done focusing and really getting in the zone in what you're doing without people distracting you.
And if you could put people together from a huge talent pool who trust each other and are talented, then together you can make great games.
So I'm going to leave you with some resources.
There's some communities there, Stack Exchange and Reddit.
And there's also, I was going to put some blogs up, but this GitHub page has got a fantastic community resource of all kinds of blogs and books that you should look at.
The slides will be on my website in due course.
You should check out spyfox.com for our latest games.
And you should follow me on Twitter at TENPN.
Thank you very much.
I'm not sure if we have any time for questions, do we?
We do.
Yes, OK, good man.
Hi.
The question is, do we have a chat client that we use?
Yeah, so we use Skype.
We're always looking at other ones to see what they can bring to the table, though, because Skype has got its issues.
But I mean, the video chatting in Skype is so much better than almost, I mean, even better than Google Hangouts in some ways.
Like, Google Hangouts is fantastic, but it caps out at 10 people, but we've got 11 people in the company, so it makes it kind of hard to use.
Yes, thank you.
Sorry, what was that?
Go to meeting as well, at least for the video chat, if you need to also share screen.
Okay, cool.
Next question.
I got two quick ones.
One is what do you use for source control?
And the second one is how do you deal with the chores piling up and distracting you when you're working from home?
The distractions of working from home?
Yeah, like, you know, laundry's piling up or there's some dishes you need to clean.
Like, that seems to be a big distraction.
So for source control, it's really up to the individual teams.
We've settled on Git and Mercurial because they are quite good distributed and redistributed teams, so it seems like using distributed source code might be a good idea.
Do you have somebody host it or is it private?
We host it ourselves on our own server.
And to avoid distractions, well, routines and headphones help.
getting yourself up, getting yourself dressed, getting yourself showered and sitting down and knowing that now you're gonna be focusing on working, giving yourself a timetable.
Lunch is gonna be from 12.30 or whatever and knowing that you're not gonna stop until then.
Those are really good for getting yourself into the groove.
But then once you're in that groove, then at least for me, I found that I can then relax that schedule quite a lot and I'm still able to jump in to like start working and get my hours done without getting distracted too much.
Yeah, over that side.
So I apologize if you already mentioned it, but I was wondering if you had found a good collaboration tool for technical drawing that works on both tablets and PC?
No, we haven't really looked.
I mean, we were looking for collaborative drawing for the birthdays thing, as much as anything.
So what do you guys use for, like, shared whiteboarding session type?
We just tend to just hash it out, or we'll hash it out over voice chat, leave notes in the Skype group, or we will just leave it to one person and trust them to get it right.
Thank you.
Thanks.
Thanks.
This is less of a question, more of a statement.
I worked remotely for about 10 years on a 50-person team, and I agree that it's harder with such a larger team, but one of the things that I think is really important is don't be afraid to bother other people.
Because if you don't bother them, then you generally won't get a sense of what's going on with other people if they're not willing to, you know, kind of bring it forth themselves.
So don't be afraid to talk up and bother other people you think are busy.
Yeah, overshare. Yeah, good comment. Anyone on this side?
First of all, I want to ask you if you've ever tried using SocoCo?
So, Cocoa?
Yes.
I haven't even heard of it.
What is it?
Hands down, better than anything I've seen.
So, that's just a tip.
For what?
Video chatting, sharing screens, it's a virtual map of an office and it works really well.
Okay, check it out.
Anyways, S-O-C-O-C-O.
Have you tried any virtual team building?
I'm really interested on what you could do in a team building type.
outside of obviously playing games, because that's what everybody's into, but just specifically for building that trust, especially with new teams?
Well, I mean, like I said, we tried to do that in, like we tried to build that into everything we're doing, like the birthdays thing.
One thing that we tried, we tried the video gaming.
thing and it didn't really take off. One thing we did do was we made a silly stupid video for use what's the what what the fox say which was like a big youtube thing last year and we made a silly video of all us miming to it and we're sending it back and forth over like a number of weeks sending each other little clips to put into the video and that was quite a good experience so we should we should we should do that again someone needs to make another viral fox song yeah in the middle So, do you have a developed process for sort of identifying where issues arise in remote collaboration, like collaborators that aren't really working well with the, or sort of problems in the collaborative structure of this, basically just debugging the process, essentially?
Yeah, so we...
We come by that by just being really, really open with each other.
And when you've got small team sizes, then problem people do highlight themselves much more obviously.
And, uh...
it's very easy for someone to bring something up in the company talk and then like the good morning thing, like that becoming company policy was just me saying, hey, we should do this thing and then the next day it was company policy.
You know, we could we like the the owners of the company are really, really open and easy to talk to.
And the whole team trusts each other so well that we can discuss this kind of stuff quite easily.
So a team member can, if they're having problems.
they bring it up or you bring it up and you talk it out basically.
Yes, because like I said, the people you're hiring should be self-aware, they should be, you know, they want to be bringing these problems to you as much as you're bringing the problems to them.
And yeah, we just, we get by by hiring really great people.
Thank you.
Yeah, one on the right and I think then we're done.
Oh no, we're done now.
We're done now.
Okay, we've got the wrap-up room now, I think, which is where?
Room 3000, so if anyone wants to come to room 3000, then we'll do some more wrap up.
Or just outside in the hallway.
Thanks very much.
