Hello everybody.
And there's a lot of you today.
This is good.
Thank you for waking up this morning.
And thank you for coming to join me today.
This is a talk on how to create a development culture that embraces change.
For your awareness, there are exits at the back of the hall.
My goal for this is that nobody's going to use them for the next 30 minutes.
Also you're going to get a survey at the end of this, or a questionnaire, and it is vital that you do that, and it actually helps in the talk as well.
Feedback is the core of being able to change and adapt, and your feedback to me allows me to improve and change how I present and improve over time.
And that's why you're all here, right?
We're here to improve, changing for the better.
And that can be difficult, but it doesn't have to be.
And actually, we're always changing.
That's a concept to take into what you're working at here.
Every single day, you'll do something a little bit different.
And what we're going to talk about is how we turn those little changes into something a little bit bigger and make it more comfortable for everybody who's involved.
What we're going to do through the talk today is use RuneScape as a series of examples on some practices that I'm hoping that you'll be able to take back to your own teams.
I suppose this is a great chance for me to actually introduce myself.
My name is Connor.
I'm the director of game development at Jagex Game Studios.
And I suppose like most of the people in this room, I love games, but I also really love making games.
My goal really is to better make better games.
So we're going to continue to improve over and over again.
I got the pleasure and privilege of being able to manage and lead RuneScape for a number of years.
And for anybody who isn't aware, RuneScape is a 17-year-old veteran MMO.
It has lived through the rise of free-to-play, social media, and streaming.
And for all three of those, it's managed to embrace them and make them a strength for it rather than a challenge.
We use RuneScape's structure as a template for how we build service teams at Jagex.
And we continue to build teams within the studio on that model.
Jagex, I'm expecting fewer people are aware of Jagex than they are of RuneScape.
The game kind of leads the company.
Our goal is to become the home of living games.
And we see living games being the next step after games as a service or live service games.
something that moves beyond a hobby and becomes a lifestyle for our players.
And that means that we need to build things that are evergreen and everchanging and can always be there for our players, that adapt to what they need and adapt to the market.
This demands our teams to be flexible and adaptive.
And our goal is that with that, we can change with the market, or preferably ahead of it to make things better.
I'm going to cheat.
I'm going to let, well, I'm going to let you guys cheat.
I'm actually going to give you the takeaways at the start.
So...
If you do end up having to use the doors, you can at least take something away with you, at least you get some value from today.
So the first part we're going to look at is talking about how improvement is not immediate.
And that sounds like common sense, but the number of times you're going to try and make a change and immediately expect everything to be perfect would probably cause a challenge.
So taking that into mind is important.
We'll be talking about pillars for your development process that can support the change process.
We'll go through how smaller teams can help that and help that adaptation.
And then for me, the most important thing is distributing decision-making down into your teams and giving ownership to your developers.
And then also, because I'm not going to completely throw everything away, there is a super secret end of the talk takeaway, that if you do wait for the 30 minutes, you'll be able to see what that is.
Okay. So, change is hard, right? We know change is hard, so why don't we plan for it? When we are going from today to this bright and shiny future, we expect this lovely path of continuous improvement and getting everything better all of the time. I mean, the real fact is it actually looks a little bit more like this. The expectation that you bring something in and it will immediately cause your teams to feel a little bit uncomfortable and it is change and it is different. The habits that people formed before will no longer be useful when you go into this state.
Going into the process, understanding that there's going to be an impact means that you can look for how to improve, how it's going to cause the improvement in the future.
You can look for small wins and look for a turnaround.
You have to get over that first kind of the stumbling blocks.
I'll give you an example from RuneScape.
There was a time, fairly like, I'm kind of ashamed at how far into the development, RuneScape didn't have source control.
We had 100-odd developers all working from a network share.
That's crazy, right?
Actually it has a lot of benefits.
You have access to everything everyone has done and is doing right now.
The level of sharing and collaboration is incredible.
The level of flexibility that you have is amazing.
You don't have to worry about being able to, or what's your branching strategy or where are you going to grab a particular asset.
Everything is available to you immediately.
Sounds great, except for the fact that if anybody breaks anything on your login script the whole team is taken out, so that's not good.
So we decided to change and we looked at how we could roll source control into a team while continuing to run a live service.
I'm hoping no one ever has to do this by the way, it's an awful experience.
Also you have to train everybody on how to use source control because many of them never had even seen it or knew it existed.
And when we did make the change, that was difficult.
Suddenly all that flexibility wasn't present.
We had artists who were like, well, there's a texture that someone's using for an update that's coming out in a couple of...
I want to use it.
And you're like, well, that's coming out after yours, so we've got to plan around this now.
And we started to put in all these processes and structures to improve things, and eventually it got better.
We looked for those quick wins, or those early wins, and looked for those small changes to suggest we were going in the right direction.
We had an easy one, the login scripts weren't being changed and knocking the entire team out every couple of minutes, so you know, that was good.
But looking for those kinds of wins, uptime inside the development team, release cadence becoming stable, all that kind of structure coming into place, demonstrating to the team that the improvements were happening, allowed us to continue to improve to today where it is just our habits are formed again and everything is fine.
If we had gone in without expecting to stumble and without expecting everything to be rosy and perfect at the start, that turnaround to bring the team on board would have been far more difficult.
And I'm guessing a lot of people in this room have experienced something similar.
in a different type of change in the past.
But with this, some of the ways that we'll try and be able to support those kinds of changes in the future is our development environment and process itself.
So I'm going to go through our development pillars.
So I'll try and go pretty quickly.
I'll give everybody a bit of time to ask questions at the end.
So if anybody knows Scrum, you'll see that we ripped these straight from Scrum.
They're just the three pillars.
But actually they're really good.
We're talking about transparency, being open with information and open with each other on what's actually happening.
Inspecting because being open is pointless if nobody's actually looking at that information.
You're just generating random useless data.
And then adaptation because inspection is pointless if you don't actually make a change.
You're just sitting there having a discussion and then going away afterwards.
So the three of these build on top of each other and the core of how we work.
Let me go into each a little bit more in depth.
To give you an idea of the level of transparency that we have at Jagex and why I say you can always be more open, our personal development and our objectives for each individual inside the organisation are open.
For me, all of my objectives for the year are available for every single member of the company to see.
Everyone from player support, QA, design, marketing, and my own direct reports know exactly what I'm trying to achieve.
And they also know if I am achieving them.
My progress and everything is available too.
In terms of our products, every piece of data is available to anybody who works at Jagex.
You can delve into our current conversion rates, our retention rates, all monetization detail and down into the individual little details around engagement in particular pieces of content that exists in RuneScape.
That's the level of transparency that we try to get to.
It's important that people are able to see how those things work.
To try and get to this level of transparency, it's something that you can take on to yourself.
If you are putting any piece of information together, for us the default is to be open and closing down access is the exception.
For yourself, ask yourself why you're not sharing something wider, why you're only choosing a small subgroup to get involved in something.
You don't have to tell everybody you're doing it, but don't lock down their access to it.
You can also think about the time you're looking for information.
And if it was difficult for you, what's going to happen when the next person looks for that piece of information?
How can you make it easier for them to be able to find it and grow that culture of transparency inside your organisation?
And then transparency is really tough.
It's difficult to be open with everything that's going on.
So being vulnerable yourself first will show those in your team that that's kind of the way that you want to work.
To give you an idea of where we've used openness on RuneScape, let me go through a tough, harsh truth that we went through at the start of 2016.
We launched a very significant update, trying to kick off the year.
We brought out a new skill.
And for anyone who's not aware, RuneScape has a number of skills that players can progress by engaging with them.
Adding a new one is a significant amount of new content for somebody.
And when it went out, we noticed that day one was really good.
Reception was strong.
People were enjoying what was there.
But then we noticed the progression was way too fast.
They were getting through the content very quickly.
We half expected that.
It was driven by wealth.
People could just liquidate their wealth and get through the skill.
We thought people would do that, but we had to look deeper.
Now, RuneScape gathers about two terabytes of data every day.
That's driving some of our heuristic analysis and a lot of the metrics that are given to the team.
It meant that we had a lot of information coming back.
But you'll see that when something bad is happening, a lot of people jump on assumptions and guesses.
You'll have red herrings flying around.
Having the level of transparency and openness in the information allowed us to cut those down and go directly to where the problem was happening.
How are the people who are progressing fast really engaging with the game?
What exactly are they doing?
And that information allowed us to see the cause, identify a fix, and roll it out in an incredibly short time frame, which is immediately dropping out of my head right now.
I think it was in a week or two.
So the kind of cycle that we're doing on how we're altering the game is driven by the fact that the information is available to everybody.
But of course, that required us to actually delve in and inspect the information.
And data is...
worth nothing if it's not observed and understood.
Anybody can look at a page of stats, but understanding what those stats mean is the most important part.
So another example of where we've used this in RuneScape and why it's important, the most important part for us in sprint cycle is the retrospective, that element where you come together and look at what's worked and what's not worked and how you can improve over time.
We rolled out a marketing initiative, it's called Premier Club, it's a year's membership, it has perks, you'll be familiar with it for a lot of games.
And one year it went reasonably well, the stats came back, they were strong, but we felt like we could do better.
The process internally could have gone much better, there was some confusion, some conflict.
So we ran a retrospective, gathered everybody together, we talked about what worked and what didn't work.
We documented it, made it open, had some good honest open conversations about what we were going to do next and then we documented it and put it away.
The important thing is coming back to that, inspecting it and understanding it.
The next year we brought that back out when we were about to run the project again.
It was like a letter from the future.
Which was just telling us all the things we were about to do wrong.
Allowing us to make sure that the next session was much better.
And it was.
The development was much smoother.
There were no conflicts, there were no issues.
People knew exactly what was going on.
The communication lines that we needed in the first year were much better in the second year.
And our performance was up as well.
So we saw tangible change in the performance of the product, not just in the performance of the team.
So making sure that you are inspecting information and inspecting any information that is there to make your future efforts much more valuable.
And of course the most valuable part is actually adaptation.
So like I was saying, retrospective is the most important part of our process.
For us, we try and make sure that change is an expected part of our day-to-day.
Give you a really tiny example.
Not all changes have to be big.
We do free fruit inside in the studio.
It was getting a bit stale.
It wasn't really exciting.
So we did weird fruit Wednesdays to try and liven it up a bit.
Small little change.
Make people feel a bit more excited.
It didn't work.
Nobody ate the weird fruit.
So we've gone back to the other one.
But not all changes work out.
A much bigger change that we went through.
This level of saying change is one thing, but actually doing it is completely different.
A lot of people will have experienced transferring an established team from a kind of a waterfall step-by-step method into an agile framework like Scrum.
We did that on RuneScape.
Looking for ways that you can make small incremental improvements or small changes or pilot those changes, creating a movement for your change rather than an immediate dictation of altering can be very useful.
We did that with RuneScape by creating a small Scrum team.
Gave them an isolated area of the game and allowed them to continue to improve.
It didn't work out immediately, so it's a good thing we didn't change the whole team, and we altered how that process worked.
Because we went through our cycles and we were open with all the information, we inspected it and we adapted as we went along, it allows us to refine that process in a small section without impacting the whole team.
As it was improving, we rolled it out to a bigger and bigger group.
The people involved at the start created a movement that allowed the overall team to start to change.
Now eventually we did actually have to go for a big, you know, that last big bite of a burger and trying to get that last thing done.
So we had to do that and it was a little bit more difficult.
But at least we knew we were going in the right direction because we had tried and made an example of this already.
So we make sure that we're always changing and we make sure that our process is designed around it.
But what does our actual structure look like and how we make sure that we're making those changes happen?
So I like to think of this as if you think of a large development team, RuneScape itself is over 100 people involved, so trying to move all that can be difficult, like steering a tanker.
Well, we cut it up and we try and make it more like a fleet.
So each of this fleet have their north star, their direction of where they're going.
They understand the general direction they're trying to go, but they have the flexibility to be able to move and adapt and adjust as necessary.
Each one can be an individual.
One ship having a problem doesn't mean that the whole fleet is in trouble.
You can continue to adapt and cover people's changes.
We started this with one small team, not the team that did Scrum, a completely different team inside in RuneScape.
We called them the Ninjas.
I actually did a talk a couple of years ago about creating these autonomous smaller teams.
And Ninja featured heavily in that.
We give them complete autonomy and control over what they're trying to do.
They don't need to be told what needs to happen next.
You give them the ownership and the capability to be able to deliver improvements into the game over and over and over again, constantly improving.
But they know the direction we're going.
So if you look at the leadership structure broadly, how the team is working, you kind of have these six groups.
They all have their development and their art and their QA.
Each of them are building out their content.
And if an injury were one of those, they're given guidance by that product leadership group.
But actually one of the most important things that we found was that trying to put that ownership into the team was difficult.
So we actually built a small little structure within those teams which are allowing each of those development teams to operate as its own group.
They're small enough that they're almost telepathic in how they communicate.
So even though you have that single focal point, everybody knows what everybody else is doing, but they feel like they have the control.
They don't just feel like they have the control, they do have the control.
They can choose how they're going to do something.
The leadership group decide what generally needs to happen.
How we achieve it is all down to the team that is trying to develop it.
To give you an idea of the level of control that they have, one of those teams was taking on a fairly major release for us.
It was God Wars Dungeon 2.
God Wars Dungeon is a very old dungeon in RuneScape.
We launched a second one of those also in 2016.
I promise not all of my examples come from the same time period.
That team took ownership of what they were going to try and develop.
Everything from the visual identity of that project, in keeping with RuneScape as itself, being given guidance by the leadership group.
The communication plan, marketing plan, and then also the release rollout.
How would we do the lead-in over a number of weeks and how would the actual event of the launch feel for the players?
That control was given into the team.
They got advice and they got guidance.
There were suggestions coming from leadership.
We made sure that everybody knew what we were trying to achieve.
And they worked with the other departments inside the team, our publishing and marketing groups, our community group, to make sure that they had everything they needed for a positive launch.
And making a significant dent in player behavior in a game that's been running for 17 years is difficult, I'll tell you that from first-hand experience, but they did it.
And it was by allowing them to have the ownership over what they were trying to do and lay out what needed to happen, gave them that level of control.
But sometimes that can be difficult, right?
Having that level of control into a team.
So I'm hoping I can give you something that will help a little bit.
Pure freedom.
It's probably not a great way to approach this, especially if your team hasn't done it before.
So if you think of the concept of freedom within a frame, set your boundaries, set the space that somebody can operate within.
Some examples would be, depending on the size and the level of awareness in your team, You have maybe one of the boundaries is the cost of the team or the cost of the project you're trying to do.
You have an amount that you can spend.
There's an expected return.
I mean, these are pretty basic ones.
The quality that you're expected to deliver.
All of us have our expected, like, please don't ship a class A bug day one.
And then the satisfaction and the expectation that you'll come back from the players.
Those four antagonistic expectations.
And allow the team to have complete control within that space.
Not telling them what the update's going to be, not going to tell them what the creative direction should be.
Or I could, that might be one of the boundaries that we're going to set.
But really, it allows that team to feel like they have that control.
The borders create the constraint that allow them to feel the freedom that they need.
As that gets better, maybe you can extend out those boundaries.
But that's up for you.
The boundaries that work for a team depend on the team, your own teams themselves.
So let me try and bring all of those four ideas together as a single concept.
We're going through something right now.
So let's go through these.
Our pillars for change.
First of all, we have been looking at how RuneScape has been performing.
We've noticed that there has been some ways that we could improve some little bit of stagnation in some portion of the community that we need to energize, we need to really do better.
So looking at that, we took a lot of player feedback, a lot of feedback from within the team, a lot of open and honest and good conversations.
None of them ended up with people arguing or shouting or screaming at each other, I promise.
But we made sure that we also interrogated that data, delved into it, really understood what it meant.
Were we just seeing things or were we seeing things that weren't there?
Was the data backing up what our expectations are as a team?
And it was.
So we went a little bit further.
We look at the fact that we can change, so we considered whether our small changes were doing enough.
And the fact was we were always changing, so the problem was there, so obviously the changes that we were doing weren't enough.
We had to go bigger, we had to do something a lot more bold.
So we spoke very closely with the team that distributed decision making.
This isn't one leadership group dictating what's going to happen.
This is a collaboration, working with the team and discussing what people are expecting.
From within the team, we were looking for more control within the developers.
I've already told you about a team that felt like they had control.
We wanted more of that.
Those teams are very close to the player base, so being able to give them that level of ownership was really important.
And they wanted to be able to have more awareness of the direction of the game and make sure that that was really clear.
People felt like it was starting to diffuse a bit.
Looking at the players, they really wanted good releases very regularly.
I've asked our data analytics group about how we should approach releases and they gave me the very helpful advice of they want more, bigger, better, faster and more oftener.
So I suppose we have to do all of those things, so we will try.
So with that discussion after happening, we decided it was time to change.
And I realize I said small teams, but we went smaller.
So we're looking at giving that ownership almost to the developer level.
We work in pairs with QA support as well, but really going very, very small.
Consider it to be more like a swarm.
Instead of having six fairly large teams, we now have nine or ten, possibly 11, depending on the time of day.
Each of those teams has a feeling of identity, but the important thing is you can bring them together on a larger project or spread them apart as necessary.
It's that kind of flexibility where you see people bringing together developers for major features and splitting them apart.
We're trying to create the team identity, but also have that flexibility.
I may be trying to have my cake and eat it, right?
We're right in the middle of this change, so maybe I'll come back later on and tell you if this actually worked.
We're trying to give them as much autonomy as possible, but still giving them that north star from the leadership team to give direction.
And so then it's understanding that improvement is not immediate.
Like I said, we're at early days on this.
But I'm hoping that if you consider this graph from earlier where that's yesterday and the future is off there in the future and I'm not going to go along that lovely dotted line of to accept that and I'm going to cause problems when we start the first change, I feel like we're about here.
We went through a lot of difficulty when we started.
It hit the teams quite hard trying to understand what was going on and trying to get that ownership into a smaller group, making sure they're all aligned.
That was difficult.
But we knew what we were getting into and we understood that there was going to be a challenge and we started to see wins in the past couple of weeks even.
Shortly before GDC, this slide today was a little bit further back along that line.
We've already seen a couple of updates come out between the middle of February up to today and we launched a large new quest in the past week or so and it's going down very well.
Players are seeing that ownership and they're seeing the change in our direction.
Our development teams are seeing their impacts.
We're not there yet.
We are still below where we were.
We still need to do better.
But we know we're coming around the hump and we're seeing major changes.
Every day, and it's not just me, it's the whole group, can see those improvements starting to happen and we look out for them and we celebrate those small wins.
And then to just kind of really confuse ourselves, RuneScape's actually going to be coming cross-play to mobile later this year.
So looming on the horizon for that swarm is a fairly major change in approaching cross-platform development.
So we'll have to go through the process again.
So I'm supposed to wrap everything up and give you a little bit more detail, and of course, give you that super secret end of the talk takeaway that everybody is still sitting here waiting for.
The first thing is improvement is not immediate.
You need to become familiar with the change before you see major benefits.
And that's okay.
That's the same for everyone.
The smaller the change, the smaller the dip.
But it's still going to happen.
Be aware of that.
When you see those wins, make sure that you celebrate them.
Celebrate them as a team.
It'll feel better.
You're going to have your resolve hit by the first impact, especially if you're doing a large change.
Consider the development processes that you're using and the pillars that are there to support them.
What are the core concepts that you hold dear as a development team?
We make sure that we embed change at the core of our process to make sure that people are constantly adapting and constantly improving, changing for the better.
Consider whether small teams work for you.
I like this one.
As you can see, we went even smaller, so that's a thing I like.
May not work for every team.
So consider whether it's the right thing for you.
For us, having a fleet rather than a tanker allows us to spread our bets and consider where we're going next.
It doesn't work for everyone, but I encourage you thinking about it.
Does it work for your group?
Like I said, the most important one, absolutely, is distributed decision making.
understanding that you can set what is going to happen, but that how being in the team and allowing them to creatively approach a challenge, giving them the ownership and the empowerment allows them to enter into any large change with more investment.
So I encourage everybody to consider how that could work for you.
Once again, this doesn't mean just tell everybody to do whatever the hell they want.
There needs to be context, there needs to be control.
Freedom in a frame is a good way for us to try and communicate that to people.
And then I suppose I should give it away.
Overall, I'm hoping what you've taken away from all of this is that change isn't really a process.
It's more of a behavior.
How you work and how you approach your day-to-day should be something that allows you to alter and adapt.
And that is creating a development culture that embraces change.
And thank you very much for listening.
And I believe we have five minutes for questions, if anybody has any.
Oh, that's easy. Well, thank you very much.
Hello.
I know you're still early in your rollout, overall process of improvement.
What changes do you think you anticipate you would need to make if you had to scale this out to 2 to 3x the current team size?
What I'm hoping is that by, so for anybody who didn't hear, what would I do to try and scale this out to 2 to 3 times the larger team?
So to give you an idea, we're talking...
the core development group is about 70 people, so we're talking like 200-300 people.
I believe that it becomes the coordination of the multiple smaller teams.
Try to split them into other smaller areas, try to create that hierarchy of groups or creating that ownership may help.
The clearer your direction and the project is the easier it is to disseminate that information to a larger team. If there is any weakness in your vision, the more groups you start adding in, the less effective they will become. I would look at clarifying exactly what you are trying to achieve so everyone understands and looking at ways you can improve communication between teams. If we had like a the video and the content you publish . . . . . . . . . . . . . . . . . . . . . . . . .
Let's say six before we go to the really small groups, but if we say six, if you added like 12 or 24 of those, then communication inside that room, even if you only bring that leadership group, is communication between 24 people.
That's a challenge.
So think about layering a hierarchy inside there.
My question is how small were you able to take the teams before you got to a point of diminishing returns?
To clarify, the question is how small can I take the teams before we see diminishing results?
There is a benefit, and so this is very much up to individual teams and how different teams are working.
On RuneScape, the structure that we've built over multiple years has all been around rapid iteration and rapid development.
So to give you an idea, once someone writes the last line of script to everybody in Jagex actually being able to play the change they've just made is about 45 seconds.
So that level of rapid iteration means that we can go very small in our teams.
We also make sure that our development group are as cross-disciplined as possible.
So those scripters are writing both scripts, they're also designing puzzles, gameplay and narrative design.
They have support in that and that's vital, just letting people do whatever they want in any direction they want can cause challenges.
But giving them that level of control and then allowing leads for...
So, narrative or for conflict, combat, story and puzzle, to be able to support them means that they can take more and more content onto themselves.
But that's a big challenge.
It's been 17 years of trying to get that right and I wouldn't say that we're perfect.
We got down to two in a QA.
Hello, so my question regards Scrum philosophy. I'm curious how much you took from that and if how much your approach varies from classic Scrum. I mean for example the roles like Scrum Master, Product Owner and the team division, Scrum Events and I'm just curious what you guys did actually to make it work for your team.
I was told once about a way to approach learning new things.
The first thing is to do exactly as it's said.
So, I suppose, just to clarify, the question is how do we vary Scrum and how do we come about to where we are?
So we started and we had all ceremonies were working exactly as you'd expect.
We had sprint reviews, sprint planning, retrospectives, backlog grooming, daily stand-ups, and we have most of those already, still today.
We actually adhere very closely.
We do have Scrum Masters inside the team.
I just got the boxes started to get a bit messy.
What we try and do is the first thing is approach it, just do it as it says it in the book.
Don't think that you know better than the person who's actually laid out a framework and designed it.
Because they've probably gone around the mill a bit.
Once you are doing it and understand that everything, or you're doing everything as it says, then understand why you're doing it.
Don't assume you understand it, really understand.
Look at what it's actually achieving.
And then once you have both of those cases, learning from what's there, then you start making the changes.
Because you understand what impact is going to happen from making an alteration.
So our sprint review started to get a little bit shorter.
Our retrospectives got more important.
Our product owner scrum master roles started to diminish.
When you have a swarm, then you don't really have enough people to have things so we don't even meet the criteria for a minimum scrum team.
We make sure that people have the support that they need.
But it came from doing it by the book for a period of time to understand why.
Hi, great talk.
You were talking about giving ownership to the teams, but how often do the teams report to the management and how formal is that?
So the question is how often do the teams report to the management and how formal?
Okay.
We have, depending on which layer of the organization we talk to, the teams themselves are regularly catching up day to day and week to week as a leadership group.
So that product leadership group.
So that team, as a title, people are very aware of what's going on.
As you move larger in the organisation, so to give you context, I have RuneScape and we have old school RuneScape, if people are aware, we launched that about five years ago, and there's another two teams at Jagex as well.
Each of those will speak to me at least once a week, but I'll be in touch with the leads for each of those groups on what's going on fairly regularly in informal discussions.
And then we have at least once a month a relatively detailed breakdown of where we are in progress, what we're doing in the future and what direction we have.
And we're looking at being more thorough in quarterly chunks.
But depending on how close it is, so the rate reduces the further away you are from the customer.
OK, thank you.
Thank you.
Hi, thank you for speaking today.
My question is, how do you maintain cohesion across your product when so many different teams are making decisions?
Is that the leadership team, the product teams?
Who's responsible for that?
So the question is how do I maintain cohesion?
I suppose the easy answer is I don't.
It is a lot of hard work from everybody involved in developing the game and a lot of communication back and forth between them.
Along with the retrospective, we do a daily review every two weeks, not daily review, sorry, a day of reviews every sprint cycle and that is streamed within the studio so everybody can see what's being changed and all of the teams can see all of the other things that the teams are making.
That's one of the first points.
We then have the leadership group layer that I had at the bottom.
That group is aware of everything that everybody else is doing.
primary role is to, I like to think of it as like nudge and guide people in the right direction, but when necessary try and come in a little bit more force to try and bring people back in line. And some of that is clarifying the vision like I was saying at the start.
If people are deviating, it's not necessarily because they just want to do what they want, it may be a case that your communication of direction and vision isn't clear enough to bring people back in. Thank you. I'm kind of doing.
We are out of time.
Well, I'll do one more.
Can I do one more?
I'll do one more.
I'm sorry.
I'll ask you, how do you organize communication, specifically communication between those teams?
Is it like single point of contact, one person represents the team, talks to the representative of the other team, and in case of conflict between them, how do you mediate those conflicts?
Okay, so I'll try and do this very quickly, so I'm sorry if I don't cover everything, but this is communication between the teams and resolving conflict when it arises.
The way we make sure the communication happens between those teams is there is like a producer who represents multiple of the, in the swarm stand up.
There's somebody who represents multiple of those teams and makes sure they're aligned and then that person speaks to somebody who represents the other swarms of people.
That's how we make sure that people are speaking between each other but also the team isn't large enough that we have massive breakdowns of communication.
They're all on the same floor.
They all speak to each other fairly openly anyway.
The other part that we try and do to mediate conflict is open and honest conversations are not only good for transparency, they're also good for airing conflict and resolving them.
I'm not going to say we're the best in the world at dealing with conflict inside an organization.
We could be much better, but we do try and hit it head on when it arises.
So I'm going to wrap up because I've totally gone over time.
I want to thank everybody here for your time inside in the room, and I will be in the wrap-up area at the other side of the hall.
