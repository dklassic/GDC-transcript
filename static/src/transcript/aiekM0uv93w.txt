everyone to the, uh, first talk of board game design day.
Woo! Yep. Um, thank you for joining me at the, uh, crack of 10am, uh, to talk about Mansions of Madness. Uh, my name is Andrew Fisher, uh, I'm the board and card game manager at Fantasy Flight Games. Um, for those of you who aren't aware of us, Fantasy Flight Games is a hobby market board game company. Uh, we operate out of Minnesota here in the states.
Um, so I've been a designer for Fantasy Flight for about, uh, 7 years or so.
I've worked on the Star Wars role playing game, uh, I've worked on the Rune Wars miniatures game, the Fallout board game, among many others.
Um, I was also the scenario designer on Mansions of Madness, which is what I'll be talking about today.
Um, I also quick before I started the talk, just wanted to thank um, a few of my other team members who helped contribute to this talk. Uh, the lead designer of the game, Nikki Valens couldn't be here. Um, and also uh, a couple of our uh, scenario designers and ongoing developers on the game, uh, Carl, Cara Sintel-Dunk and uh, uh, and uh, uh, uh, uh, and uh, Grace Holdinghouse, as well as our primary programmer. We had a few different programmers working on the game, but our primary programmer, Mark Jones, helped put together this talk, and he's in the audience today. So I just wanted to thank them, because they were a huge help in putting this all together. So to start us off... That's a good sign. There we go. All right.
Mansions of Madness, second edition.
This is a board game. We released it about two years ago. We are still releasing expansions and DLC for it today.
But I'll just be kind of talking about the core game development today and kind of the challenges at creating this kind of unique form of game that I'll talk about.
So quick, before we get started, I kind of wanted to do the standard GDC survey of how many people have played this game.
But first...
In our department we were kind of talking about, we were curious about the attendance of board game design day. So I just kind of wanted to get a sense of like, how many of you work on digital games? Okay, so like the vast majority of you.
How many of you work on tabletop games? Alright, sweet.
Represent. Yeah, so and then finally I'll ask the standard question, how many of you have played Mansions of Madness second edition?
Alright, so a good number of you. Um, well for those who haven't, um, as it kinda says in the title, Mansions is what we call an app integrated board game. Uh, you'll be excused for maybe not quite knowing what that means because we kinda made it up. Uh, so what does that mean? Um, well, you might be first be thinking about playing Settlers of Catan or Ticket to Ride or something on your phone. Um, But those are more like digital board games.
They're exclusive to that device.
You also might be thinking about supplemental apps for the board games you've played, like using an app to help out with your character in Betrayal at House on the Hill, or that cool voiceover app that comes with One Night Ultimate Werewolf.
But those are just kind of supplemental.
You can play these games without these apps.
What are app-integrated games are?
are a game system that requires both the board game elements and the digital elements to function. Um, ideally these are game systems that couldn't exist in the same form without both elements. Um, we want to try to create, craft a unique experience that you couldn't get quite any other way. Um, so what Mansions actually looks like in play, um, is...
You each play as a investigator in 1920s Arkham.
Arkham is this New England city in this world where all of the writings of H.P. Lovecraft are true.
And so you are looking into the, you know, the occult and the working of the elder gods and kind of investigating these haunted mansions.
um, represented by these boards here. Uh, well, I shouldn't say they're usually mansions. Some of our expansions, uh, go to more exciting locales. But, um, usually you're exploring these different mansions that we lay out in different ways with these different modular map tiles. You move around the map, you roll dice to, uh, um, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, figure out if you succeed or fail at different challenges, you find items represented by cards, and you make important decisions that change the outcome of a branching narrative.
Each game of Mansions takes about two hours-ish to play, depending on the scenario.
Um, and each play session of it is a self-contained experience.
At the end you'll have a story with an ending.
Um, this isn't really a campaign game, this is kind of, uh, each time you play is a self-contained experience.
Um, all of the narrative in this, uh, board game is run by, um, the app.
Um, the app tracks, um, all of the narrative and enemies.
Basically, uh, it's kind of like...
If you're playing a role playing game where you're these investigators, the app is your game master. It is taking care of all of those tasks for you. Um, usually, uh, we ship on a lot of different platforms. Uh, it comes on phones, tablets, you can get it on Steam, on the computer, and a lot of players actually, uh, we've seen online, uh, will put it up to their TV so the whole group can kind of read it. Um, the actual game flow changes based on, uh, how people are interacting with it. Some people will just have the phone and tablet and read it out loud to each other. Others will pass it around. Others will all read it together on a larger screen. So that's kind of the flow of the game is you're reading from this app, exploring these mansions on the table.
Don't worry if you don't know the exact specifics of the game.
I'll kind of dive into and explain specifics as I use them as examples. So today I'll be diving into the core developments of this game. And then...
I'll be diving into the core development of this game and then kind of going into a post-mortem kind of the standard structure of five things that went well for us, five things that went poorly for us, um, and kind of what we learned from each of those, especially about integrating tabletop and digital games together in the same dev cycle.
Um, I'm not necessarily going to cover them in that order, I'm kind of going to cover them chronologically.
So with that, let's start at the beginning.
Um, so FFG has a long history of making great board games.
We've been making board games for over 20 years.
Um, we also have a media department who handles our, um, all of the supplemental apps for our games, like dice rollers and such, and they've also, um, in the last several years been making, um, some very successful standalone games based on our board games.
Um, these kind of fall into that first category that I talked about. These are, um, tend to be adaptations.
They're not quite just ports of our board games to the digital space. They tend to be, they kind of tend to add to the game and, um, um, take the, the spirit of the game and put it onto, um, a digital platform.
Um, so we've had success in both, uh, in both realms. And then, uh, we actually have, uh, at this point, when we started Mansions of Madness, um, had already shipped, one app integrated game, which was the Xcom board game.
In this game, you play as members of the Xcom organization coordinating to save the world from aliens.
The app, uh, in this kind of encompasses a single mechanic. It shows you all the threats coming down to the world in real time and, you know, the four of you have to sit there and coordinate in real time answering these threats as the app spits them out at you.
And it can adjust the difficulty kind of based on how well or poorly you're doing as you react to this app in real time. Um, but Mansions of Madness was on a whole different scale from this game. So this was a much larger undertaking. Uh, the reason for this is in Um, the split between kind of the day, the table top side of things and the digital side of things, um, was pretty unbalanced. Um, uh, in XCOM the vast majority of the game mechanics, I could have gone on listing them, were all in the table top side of things. Whereas the digital side just mainly handled the real time, uh, execution of the threats.
Uh, so it was really just like a single mechanic in the game run by the digital side.
Um, obviously, you know, this project had its own travails, but it was on a much smaller scale than Mansions was going to be and what we wanted to see from Mansions.
Um, so Mansions was a daunting task, but, uh, we got started right.
And that brings me to our, the first thing that went pretty well with our development, which was that, uh, we prototyped early.
Uh, Nikki Valens and I, um, worked pretty early on the game and dove in pretty thoroughly on our various prototypes to kind of see what apps were capable of, uh, in the realm of board games and what players would, well, put up with.
Luckily we weren't starting from scratch. Uh, as, as you can see from the title of the game, second edition, um, we are based on a first edition of the game. Uh, it's pretty similar to the premise I already talked about, um, but instead of being a co-op game where you're playing as investigators investigating this mystery, uh, it was what we call our one ver- uh, one versus many game. So one player was kind of playing as the, all the bad guys basically being your GM. Uh, this worked fine, but, um, it wasn't, you know, as... it didn't quite fit the game experience we wanted out of Mansions of Madness. Mansions was all about this kind of spooky storytelling atmosphere and when, you know, Mike is sitting across the table from you, you know, playing all his cultists, it's just not quite as scary as if, you know, it's this mystery coming out of the unknown.
Uh, so the one versus many wasn't quite working for the aesthetic we wanted to get across for Mansions.
Um, additionally, first edition had an incredibly complex setup as you seeded, uh, you set up the whole board ahead of time, you seeded out all the different, the narrative onto the board and one little screw up could completely screw up your story for the whole two hour play session.
Um, also it lacked a lot of discovery, uh, you know.
you can not read the cards ahead of time but in the end you're getting all the content in the box. Um you can see everything you're going to encounter in this mission. You set it up beforehand. So it just didn't have that sense of discovery that we wanted out of uh this game where you're, we wanted this game where you open a door and you have no idea what's going to be on the other side. But um it gave us a good launching, a start, launching point for our prototyping. Um we started by replicating first edition but adding an app kind of in place of that one player. Um.
So at our very first step, we started by simulating the app.
We created these flowcharts, these state machines, of the app's logic.
And we created massive, complex ones to play out an entire two-hour scenario with players.
And then we would have the designer kind of pretend to be the app in a playtest.
In fact, we went so far as to separate them from the test to some degree.
Usually, one of us would sit with our back to, uh...
to the testers and just read off our flow charts and that way to disconnect ourselves from the information on the table top and really get in the head space of like what does this app know and what doesn't it know and how is the interface with the app and the players. Um but in the end our app wasn't going to be speaking to them so the next step of testing after we kind of iterated on this approach was to move to a grey box app.
Um luckily both Nikki and I have some coding experience and so we were able to uh write some rudimentary scripts that kind of mimic the functionality we wanted to see in the app um.
So we created this gray box that could play through an entire scenario of mansions.
Primarily Nicky created it.
So we could code, but I don't actually think there's anything horrible in this little screenshot I showed.
But you don't want to look too closely at our gray box.
It's pretty gross.
There's like go-to's and other things that I'm pretty sure would make Mark over there cringe.
It was a bit of a nightmare, but it was functional and it gave us the testing we needed.
It allowed us to identify very early on before real development started what the strengths and weaknesses of the tabletop elements and the digital elements were and kind of identify those to help us while we were designing.
So we identified several key strengths and weaknesses here. I've just kind of showed, um, some of the, the very broad strengths we identified. Um, I'll dive into them a little deeper and some of the things that went well and poorly in development. But in general, tabletop games, um, are really good at flexible effects and timings, at interrupting at any point, at doing kind of weird incomparable effects. They also have a great tactical interface for interacting.
um, for people to collaborate on a game very, very quickly and intuitively. Um, they also have that social dynamic and we can actually do a lot of design around social interactions at the table that you just can't quite mimic, um, in the digital space, I guess, yet. VR is, you know, uh, doing some exciting stuff there, but, um, and then on the digital side of things, um, the di- digital games tend to be much better at real time interactions.
They can handle that constant coming and going, whereas, like, when you're on the tabletop, everybody's like, wait.
stop, uh, what does this card do? What does this wording mean? And all of that. Um, also digital games excel at hidden information. Something that, uh, board games can often struggle with. Um, and then lastly, digital games can handle a massive amount more complexity than our tabletop games can.
So, after learning all these lessons and doing all this prototyping, we were ready to dive into development proper. And this is when our tabletop team started working with the media team. And naturally, these two teams worked perfectly together and the production went off without a hitch. So, that's a lie. It was a bit of a mess. And that brings me to the first thing that went wrong, and several other things that went wrong.
Tabletop designers and digital designers working together was probably one of the biggest challenges of this product, and we hit it right off the bat.
Some of you may recognize these icons.
The left there is waterfall management technique, where everything's kind of in a line, and the other one's agile.
Um, so, our tabletop, the tabletop side of things, by the necessities of, uh, printing, require a certain amount of just linear scheduling.
Things need to be done by certain points to start being printed or produced or tooled or whatever else.
Um, whereas our software team can be a lot more agile.
Um, and so we take, uh, two very different approaches and these immediately started colliding.
Um, uh, these teams had never really worked together before and these workflows really, really clashed.
Um, yeah.
Um, Transcribed by https://otter.ai compounding this, this probably isn't super accurate. Uh, waterfall makes tabletop look way too organized. This is probably more accurate. Um...
Well, uh, our tabletop teams are small and one of the strengths of them is how small they are. That they can just turn around and chat with each other. They can innovate. You know, you can just grab a card, change the text right away. It's that kind of mentality that kind of leads and, and we allow our tabletop designers quite a bit of freedom so that they can kind of innovate and, you know, make the changes to the game that the game needs. Uh, this chaos isn't suited super well to them collaborating with our programmers. Um, and a pretty big conflict for us. Additionally, this was one of the larger teams our company had ever worked with. We tend to keep fairly small teams for our tabletop development.
And so we were scaling to a team size, working across departments. I know these are challenges that a lot of you are probably pretty used to, but were pretty new to us. And so we struggled with communication.
you know, just turning around and chatting in each other's cubes wasn't really a good strategy anymore. We didn't have like a centralized communication, uh, thing like, uh, Slack or anything yet. Um, we didn't have centralized documentation, we didn't have a middle man between the teams.
And so because of this, we were kind of relying on just word of mouth and obviously this kind of hit a brick wall for us. Uh, we eventually got over it, um, kind of early in development to, um, uh... and improved but uh... one of the biggest steps we took was actually came from the media team which was uh... the implementation of our tools uh...
originally you know it we were working with this gray box and it was a bit of a mess and so uh...
yes So the, a big breakthrough came for us at the discovery of Playmaker. Playmaker, so we were using Unity. Um, we decided to use Unity pretty early on. I think we used it for XCOM, is that right, Mark? Yeah. Um, so, uh, we were using Unity and, but the problem we were running into is our tabletop developers, uh, us, we weren't great at coding. Um, and then we also wanted to put developers on this pro, project who had never coded before at all.
So this is going to be a big challenge for us and a big challenge for communication and training and everything else.
But PlayMaker was something that we discovered.
Oh that's right, yep. So we have our gray box. Um, it, as I mentioned earlier, it was a mess. It wasn't very scalable.
It wasn't really easy for non-programmers to, to learn and it was just a mess to debug. Um, this line by line of go to's just broke constantly and was a mess. So Playmaker is a plugin for Unity that allows for visual scripting. Um, eh, allows for creat-, the creation of state machines to, uh, tracked a lot the flow of the game and it allowed for us, well it allowed for our media team to create a encapsulated environment for our tabletop developers to work in so that they didn't have to learn all the nitty gritty of Unity and could just focus on designing scenarios and focus on the mechanics of the game.
uh playmaker was also pretty useful for us because it was very modular um whereas with some of our other projects we create very like specific infrastructures unit uh playmaker allowed us to um build on it and actually we used it for our next two app integrated games that came after mansions of madness uh this is the road to legend app for our descent board game and then the legends the alliance app for our imperial assault board game both of these used that playmaker back end that we originally developed for uh mansions Um, so this ended up being great. It really helped with our communication problems because we could train the developers to use this encapsulated section of the game and, uh, er, of the dev development tools and work within that, um, and allowed us as developers to focus on mechanics, which is where we hit our next roadblock. Um...
So, those of you who know FFG know that we like to support our games.
We create a lot of content.
This is Arkham Horror 2nd edition, which I believe all the expansions, it's kind of spilling off the photo there.
We release a lot of expansions for our games. We're constantly supporting and updating and creating new and interesting ways to play these games. We need to create just a ton of content and it needs to be novel and interesting for these tabletop players. It needs to play to those tabletop strengths we talked about. And it needs to be compelling in person as you kind of play the game with each other.
Additionally, as we're working on all these expansions, we're kind of looking ahead and our media departments, our programmers, are going to be working on other projects.
They can't afford to constantly be supporting and expanding all the different app integrated game lines we work on right now.
We need for the majority of the work for this to be done by tabletop developers.
Now this is a challenge with these kind of...
The mechanics that tabletop developers rely on to create interesting tabletop experiences tend to have a couple of problems that clash with digital.
So as an example, let me show you just the test for Mansions of Madness.
Now a test is a moment that something challenges you in the game and you have to see if you succeed or fail.
It's a pretty simple thing. All you really do is you roll some dice, you count up how many of a certain type of symbol there are in the dice, and you get to have a chance to convert some of a second type of symbol to the first type to improve your result. Um, and then you count them up, and based on how many you get, you know whether you succeed or fail. It's a pretty straightforward process, but upon going through all of the content we've made for mansions thus far, and looking at all the different places in this relatively simple process that our content interfaces with these rules.
we get this.
Um, now this is, this looks messy, but from a tabletop perspective, this is pretty straight forward. Um, we have pretty solid timing rules that tell you exactly when different things come up, um, and it creates some very interesting effects and relationships that we couldn't otherwise create. Um.
Obviously this can be a challenge for digital, uh, implementation because, so for example if this test process is all in your app, we now need a user interrupt point at every single one of these places.
The user needs to be able to specify if some content that we've created is interacting with that test at that point.
Um, that's a huge challenge and it, it, you can see it in games like Magic, a pretty sophisticated timing structure.
Um, I think their online implementation has done a really good job but they have this same problem where they interface at all sorts of complex timings with their rule structure.
Additionally, the other kind of effect that we rely on a lot for development is these kind of in-person social effects.
We can do things, tactical things, with elements of the table, and of the componentry on the table, that are interesting in the rules.
We can do interesting social things, like this is an insanity that you can get in the game that causes you to not be able to speak, like in real life, for the rest of the game to your teammates.
Um, obviously things like this, uh, are a little more difficult to develop, uh, with straight digital integration.
Um, an example, an example of this, um, is this actually pretty unique game by Harebrained Schemes called Golem Arcana.
Um, so this is a miniatures game where you play, um, you control these different golems on this grid and they fight and it uses this really interesting pen interface that links to your phone and scans each of the models and keeps track of them throughout the game.
It's pretty cool, but as you can see, there's not a lot of componentry, which is a benefit, but all of the game execution is happening on those apps.
So because of that, any time they want to develop new content, they need a programmer, they need to script it into the game, and they're constrained by what the digital systems can handle.
They can't kind of explore that freedom that we normally can with the tabletop space.
So because of that, the kind of lesson we learned from this challenge that we ran into was kind of how to split up, divide mechanics between those two spaces of the game, between that tabletop side and that digital side.
Um, we divided, we chose mechanics and divided them up pretty specifically into each space and tried to be as uncompromising as possible about how often they crossed over between those two.
Um, every time they crossed over it can create kind of a messy point.
Uh, for example in mansions, one of the things we didn't do so well was fire.
Uh, fire is represented by these little tokens, they go on the board, if you walk in them they do you damage.
It's, it's pretty straightforward.
But we wanted things in the app to care about whether the mansion was on fire.
We wanted like monsters to care.
We wanted mythos events to care.
We wanted the fire to spread.
And all of this was handled by the app.
And so because of this, this simple little fire token was existing in both worlds.
And what ended up having to happen is if you go into the main menu of mansions while you're playing, there's just a big old set fire button taking up one of our menu slots.
Because it was the only way we could...
get into the app that a fire had started through tabletop mechanics. So as you can see, that's a pretty kludgy solution to this problem, but it's, it's immediately created by a mechanic kind of straddling both sides. Um, so when we have mechanics that stay completely encapsulated on one side, um, we avoid kind of those interfacing problems, which I'll talk about a bit later as well. Um.
So the next thing, so once we divided those mechanics between the tabletop and digital, it allowed us to start really leveraging the strengths of both sides.
And one of the places that really succeeded for us was the ability to conceal complexity.
Remember Arkham from earlier?
This mess?
Our games get a little complex.
We like to create a lot of content and keep our players, receiving fresh new writing all the time and telling fresh new stories. Um, tabletop games by necessity put this all up front. Think about walking up to this as a new player. You know, you've just gone, gone over to your friend's house and they're like, no, no, it's going to be easy, I swear. Now, behold, um...
It's, it's pretty intimidating. But Mansions is different. Mansions has even more content than this in actuality. However, you don't see any of it. In fact, the players only know, really know, need to know three things to play the game, which is our three actions. They need to be able to know how to move around the board. They need to be able to attack monsters and they need, need to be able to interact with tokens.
Um, so moving is pretty straightforward, you just take your figure and move it around the board. So we don't really talk about that. But these other two fairly simple actions that are just clicking on a monster and clicking on a point of interest in the app, um, are both far more sophisticated, uh, than they originally seemed to a brand new player. Our attacks...
They're based on the weapon type you're using.
They can consider all sorts of factors.
They pull from based on the monster you're attacking.
They can pull from story relevant information.
They can consider all sorts of factors that are going on in the game itself.
All with a single push of a button.
Similarly, once you interact with a point of interest in the story.
Um, these are interacting with the state machines we put together with Playmaker. Um, when you interact, you're getting story writing, you're making interesting choices about the branching narrative, you're seeing the repercussions of your past choices, you're exploring new rooms which place new tiles, you're managing the branching narrative, all of this is managed by the app.
all at the push of a button with just a few selections by the players.
So it's taking this incredibly complex system and making it incredibly easy for new players to interface with.
And I think this approach has really shown in our reviews.
For those of you who aren't aware, there's this website called BoardGameGeek.
It's basically the IMDB of board games. It allows users to post all sorts of stuff.
It has all the information you need on board games.
And one of the things it has is a complexity rating for each game.
This is created by the users.
Now as you can see here, our original complexity rating for first edition was 3.24, and with second edition, we reduced that by over 20% down to 2.65, all while having over a dozen, like over 12 times the content that Mansion's first data had in that core box.
there's a downside that many of you probably have seen to this and that it's we actually had to develop that complexity uh...
tabletop developers don't often get the chance to just run wild we're really limited by uh... the budgets on our uh... printed components you know we have x number of cards that we can afford to put in a box and that's it but now the sky was the limit and our eyes got a little bigger than our stomach in fact they got a lot bigger than our stomachs So here is a sample of what we originally planned to put in the game. Um, so we originally planned to have five of these branching scenarios for you to play. Each with what we, uh, four what we call alt maps, which are basically, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, uh, kind of maps that we randomized some of our maps but these were more sophisticated rebuilds of the maps placing them in different locations and such. Um so that gave you 20 different map significantly different maps to play on. We had 9 different monster types with 5 attack types each. We had 6 types of mythos events and we wanted like oh let's throw 2 dozen of each mythos type into these 6 types. We had puzzles each with skins um.
So as you can see, this is a pretty big list. But then on top of this, this game was coming out fairly soon after the first edition of our game. And a lot of players were still playing that and had just bought it. And we didn't want them to feel like that was invalidated. So the decision was made to integrate and make compatible all of the first edition content. Which is awesome. It's really exciting. You can use all your miniatures. But for us...
these numbers ballooned a bit. Uh, we added 3 extra alt maps, uh, to each thing to use the first edition tiles. We added all sorts of monsters, we added a whole new mythos type to fit with these new types of tiles that were coming in. Um...
This got really out of hand. Dev ballooned out of control. Um, we ended up having to make a ton of cuts to the final game from this planned content. Uh, the core game only had four scenarios in it with a lot fewer alt maps and a lot of these, uh, attack types and events and stuff we had to, had reduced variability early on in the game. Um, so we had to, uh, because of how much bigger our eyes got than our stomachs.
Luckily, now that the game's been out for several years and we have a lot of expansions, we've been able to fill out a lot of that variety by patching stuff into the game.
But at launch, we had to cut a lot of this content because of how much our development was ballooning out of control.
Um, on top of all of this, this is all being created by tabletop developers who, as we mentioned, aren't great at coding.
Um, we, we had a lot of bugs.
And um, our tabletop testers, they're not software QA people.
They, you know, uh, don't have the skills necessary to hunt down and squash all of our bugs. So in fact, uh, our media people, our, our small number of programmers ended up having to be the people who were squashing a lot of the bugs created by tabletop people. Um, you know, we, we tried to hunt down our own bugs, but we were only so good at it. So poor Mark over there had spent way too much time squashing our bugs. Um...
these delays, all of that development delay, all of these bugs added up. This project really went on a long time. Um, in fact it went on so long that Road to Legend, which I mentioned earlier, the next game to use this, this back end that we developed here, actually came out before us. Um, so we, we took a while. Um, so on top of all of this development ballooning out of control...
Um, we discovered something on the mechanical side of things, um, in, in the game systems, which was, um, our game had a serious lack of transparency.
What I mean by this was the players were having trouble knowing everything that was going on.
We created all this complexity, we created all this interesting decision making, but our players weren't seeing it.
Um, I think, upon reflection, I think a lot of this problem arises from the mediums, this kind of difference of tabletop and digital that we've been talking about.
Um, tabletop games are transparent by default. Um, everything in a tabletop game, when you take it out of the box, you can read it all. You can see everything. You have to understand basically every rule in the game to start playing. Obviously that's not true. People play Magic without reading the 140 page rule book or whatever. But, um, you need to have a full understanding of the game to play for, for tabletop games. They start transparent.
Every mechanic is default transparent until you deliberately hide it from the players and tell them to hide it.
Meanwhile, on the digital side of things, everything starts opaque.
You have a black screen until you add graphics, until you add UI elements, until you add sound.
Um, all, anything you want your players to know about what's in the digital side of things, you have to deliberately put into the game.
Um, and so, you know, a lot of this, as we talked about, was being developed by tabletop developers and so, uh, they weren't used to having to put all of this, uh, transparency into their game.
And so, one of the issues we ran into with Mansions is that our primary interface were these text boxes.
As you can see, the UI is pretty sparse otherwise.
But we have a lot of sophisticated information about how these scenarios are running that we want to communicate to the player.
Um, so all of that information ended up having to come across in these text boxes.
Um, as a result we ended up spending a lot of time in these scenarios that we kind of wish we could have been, uh, telling stories.
We had to spend explaining to them how the game worked and explaining to them how the game worked again and again and again.
A lot of our scenarios get pretty bogged down with just mechanical text as a result.
Um.
We learned from this in our later iterations like here is the imperial assault app, Legends of the Alliance.
We learned from it, we put a lot of our information front and center.
You have a lot more sophisticated information up front that allows you to kind of see what's going on and these are a lot of things that in mansions we may have had to give you text notifications about.
But in Mansions it was a pretty big challenge for us. But it ended up being something we learned a lot about for making these kinds of games in the future, which is that when you're separating the mechanics between the tabletop side and the digital side and being uncompromising about how often they cross over, one of the great ways to decide, beyond those strengths we talked about earlier, to decide, uh...
which side a mechanic would probably be strongest in is based on the opacity of that mechanic.
Is this something that should be hidden to the player by default? Then it probably belongs in the digital side of your game. It'll be a lot less work to work on that mechanic. Is this something that's transparent by default? You might want it on the tabletop side of your game because the player's going to see all of it right at the start.
And once we got a handle on this difference, and what it meant to us, and on how opaque digital games can be, this opacity was actually super useful to us.
One of the biggest strengths of Mansions, in the end, and one of the things fans love about it, is the sense of discovery it gets.
As I mentioned, everything in a tabletop game starts out very transparent to the player.
Um, but we could hide things from the players. We could truly surprise them. We could allow them to interact with hidden information in really sophisticated ways. Um, and it also allowed for really strengthened replayability. As you saw in the component list, we only had four scenarios, so we wanted people to be able to play these a lot. And in fact, um, I'm gonna give an example from the game. So minor spoilers for, uh, the very first scenario.
It's called Cycle of Eternity.
Um, here are some of our Unity analytics. On cycle. Um, these are the number of people who have played each of our scenarios. Uh, as you can see, COE over on the right. That's cycle of eternity.
It gets played a lot.
It's kind of our default learning scenario, so it's a lot of people's entry points to the game.
You know, you've played it a couple times, but you have that friend over who has never played Mansions before.
All right, well, we'll play Cycle again, because Cycle's a good intro.
And so game groups will play Cycle over and over again, because it, as they bring new people into the game.
So, it's also our learning scenario, and so it's a lot simpler and shorter than a lot of others, so it lacked that variance that a lot of our other scenarios get.
So in it, we actually got a really cool opportunity to kind of surprise people a bit.
So actually, the picture I've been showing is from Cycle of Eternity.
This is the Vanderbilt estate you are...
investigating the mysterious William Vanderbilt.
You arrive at the mansion and you meet his befuddled but kindly butler Eugene.
He's worried that something's going on with his master.
And the spoiler is William Vanderbilt's a cultist.
He's worshipping an elder god because everybody does in this setting.
And he's trying to open a portal or something evil.
So that's how the game played out most of the time.
You help Eugene helps you.
You find William Vanderbilt and you foil his plans.
But we realized that we kind of wanted to surprise these players who were playing the scenario so many times.
So we added a random roll at the beginning of the game that determined a kind of Easter egg variance, maybe like one in every 10 times.
Two seconds.
Um, we added this random variant in where one out of every ten times, uh, you get to the big finale and William Vanderbilt is completely innocent and it turns out that his butler Eugene has been evil the entire time.
Um, and so this was a really awesome cute surprise for players.
People would talk about it on our forums, talk about, you know, totally Eugene was evil and people would be like, I've played this scenario like ten times and Eugene was never evil, you're crazy.
Um, this is something...
You know, it's a cute little thing.
You know, a lot of digital games could do it really easily, but in tabletop, it's nearly impossible to surprise players like this and to truly give them that sense.
This is one example, but the game is full of this little sense of discovery.
We have maps where we keep most of the map the same, so you think you've seen it before and then you open a door and a room's different.
There's all these little things that we can kind of hide from the players.
and uh, kind of give them these surprises. Additionally, as I mentioned, uh, this game branches a lot. Um, and this also gives kind of players the ability to kind of discover what we've created. Um, this is obviously an oversimplification, but our main plots will kind of branch out from different nodes to different possibilities, um, ending in different things. Um, so this gives you some replayability. Um, you know, you can play through the scenario a couple times before you feel like you've seen it all, but then in every scenario, in addition to these main plots.
we try to kind of weave in various side plots that are entirely independent and can kind of go one way or the other and so ideally by the time you multiply out three or four side plots in combination with the main plot going on with you know four different players playing investigators they've never played before you kind of get this interesting emergent combination that you've never seen before and so it allows for each scenario to play very differently and it's something that we've been pretty happy with. Additionally...
We added on an extra layer of randomness onto this to kind of give you that variance play to play which was our mythos events.
I touched on them a little earlier but basically they're just random horrible things that can happen to the investigators as they play.
And as you saw we developed a lot of them and now there's really a lot of them.
We have hundreds of these things.
Um, and we put all sorts of different writers on. We grab people from the, throughout the studio to write mythos events. They're actually quite fun, um, and these mythos events, they pull from this random, uh, this massive list, but we tie specific conditions to each one. So things like what rooms are in...
things that the app knows, what rooms are in the game right now, what choices have the players made, what monsters are on the table, what items are on the table. Um, we also have this threat system which is kind of like the director from Left 4 Dead in the sense that it knows how well or poorly the players are doing and can kind of ramp up or ramp down the threat to kind of keep the pacing interesting for them. Um, mostly using these mythos events.
Um.
Right.
Right.
Right.
Yeah.
Um.
Um.
Um.
Right.
Right.
Right.
Right.
Uh.
Right.
Right.
Right.
Left.
Right.
Left.
Left.
Right.
That's what's it's all about.
Um.
Right.
Um.
Right.
Right.
Right.
Um.
Right.
And so we developed this system, and this has also worked out great for us, but it caused us to make an interesting discovery which is that we don't really see in tabletop games that often, which is players create intent out of randomness.
we spent all this time linking these events to like, you know, make them feel like they had meaning in a scenario. But players will ascribe meaning to the most random things. Um, in tabletop, they always know that's random. You know, they roll the die, they draw the card, they know that that was completely random chance and that nothing else fed into it.
But in the digital side, because of that assumed opacity, the players' imaginations run wild.
They think that that mythos event coming up means something in the story.
They think that, oh, this is based on my choice from earlier.
They create all this meaning that we just, it's nearly impossible for us to create in a tabletop space because of how clear that is to the players.
And I think my favorite example of kind of using the players' hypothesizing is So when the director, when our threat system is low and it's it's giving them kind of a reprieve, we'll give them some flavor text and we'll say, uh, know it like, you know, uh, the wind, uh, whistles through the, uh, through, in the mansion creeks. No effect. Right? This is fine. Player's new, no effect. Okay, we got a break for the round. Um, but that didn't quite work for our Lovecrafty horror theme. So with one si- simple word, we changed no effect to no immediate effect.
This was amazing.
Players get so mad about no immediate effect.
They hypothesize about what that could mean.
When they make a choice and it just pops out no immediate effect, they're like, what's going to happen?
This added to that sense of dread that we wanted in a Lovecraft game.
And so we kind of played to that strength of the digital side and that opacity.
And that turned out great for us.
Another example of this to kind of go to another app integrated game that uses hidden information in the digital side really well is this game called Alchemist. This is kind of a cool game. So it's a deduction game like Clue. But instead of there being like a murder mystery, there are alchemical formulas that you need to know.
There are all sorts of ingredients in the game. You can kind of see them, they're the cards perched near the top of the little dividers. And each one has like elemental principles tied to them and based on how those elements combine they form potions.
But you don't know which elements are tied to which components every time you play.
And so you just have to experiment by mashing these components together and making potions and maybe blowing yourself up until you figure out the deduction puzzle.
This game is cool because its app does something that Clue never could, which is in Clue, the moment you check the file to see if you're right, the game is over for you.
you've seen that hidden information and you've ruined the game for you but the app allows us to check against that hidden information in really sophisticated ways. So in alchemists it can constantly every time you uh use that you use those components it's checking against that hidden information and giving you an output based on that. Um that's something that a tabletop game can't do without a dedicated player who's basically playing the system.
And that's how Alchemist gets around it if you don't have an app, is they have a role for somebody who just sits there and tells you what happens with your potions, but the app allows that player to be able to play the game instead, which is really nice.
So back to mansions.
So we, you know, we went through these trials and travails and, um, finally, after all this hard work, we're getting to the end of the game.
Uh, we're reaching the end of development, which for tabletop games still means there's like nine months before it actually, uh, is on store shelves, but, uh, we're reaching the end and it's time to announce the game.
And unfortunately this was another road bump for it, which was...
announcement was a little rocky. Um public reaction wasn't great. Uh when we first announced it um there was a lot of skepticism about the app integrated format. Uh we saw a little bit of this at with Xcom as well but when we were taking some first ed game that was exclusively um that was exclusively tabletop and making it app integrated.
Um, there's a lot of resistance to this. Um, people were concerned about will my platform be supported? Will I be able to play it on X or Y?
Um, will this game, uh, be able to be playable in twenty years with my grandchildren or whatever else?
Um, you know, I won't be able to play this board game after the nuclear apocalypse or whatever else. Um, this app is going to be a hassle.
So there was a lot of skepticism but we were really confident in the product. We really liked the game and so we were confident that when it launched people would like the game.
But then our launch came and our launch was really buggy.
All those bugs I mentioned earlier, it turns out we didn't manage to squash them all.
And we had a lot of stability issues at launch.
You can see here, this is a super unofficial poll from BoardGameGeek.
On certain platforms, certain scenarios crashed fatally, like a third of the time.
we had a bunch of annoying, and this is on top of a bunch of annoying small bugs that were also plaguing users constantly. To our programmers credit, they got on it super fast. And like after a week or two of panic we had gotten the build a lot more stable, but this kind of strengthened those original skepticisms about the app integrated format and that was a pretty uh, rocky place for us. Um, I think the main takeaway from a lot, reading a lot of, um, people's skepticism though is, uh, ties into my last point, which is, um, why is the app worth the hassle? This sentiment is something that we saw kind of over and over again, like, why not just make this a tabletop game? Why not, don't just make this a digital game?
Why go through this pain in the ass to combine these two formats when I could just get one of the other? Um.
And so I think our last lesson and something that went really right with the game.
is knowing the answer to this question and that the app needs to be justified.
Its inclusion needs to be justified.
I think I've talked a bit about some of the things that the app has done for us.
We feel like it's worth it.
So what's the last element here?
Well, what is the hassle of the app?
Some people might say, oh, it's pretty easy to use.
There is no hassle.
But let's talk a bit about the hassle and minimizing it, because I think it's something we did pretty well.
Um, so this is something I think I just kind of started using this term interfacing, but basically this is the concept of any time your system has to cross over from the tabletop to the app, or from the app to the tabletop, any time those two sides of the system need to interface with each other.
Um, this can be done in myriad ways, but, uh, you know, like with audio cues, with text, with tapping, with camera, um, some much more expensive than others.
but this needs to be done in some way because we've so strictly divided our mechanics between the two sides of the system and they're not aware of each other. Um, so in mansions, uh, the mansion, the app, it knows your story really well. It knows where you're at. Um.
But it has no idea where the characters are on the map.
That's entirely on the tabletop.
It doesn't know where features are.
It doesn't know where the items have ended up.
It doesn't know where the monsters are.
All of that gameplay is happening on your table.
The app is just controlling a lot of the other aspects.
And so anytime the app needs to know that, you need to be inputting into the app.
And also, you don't know the story.
Anytime the app needs to tell you story or where to place tiles, it's outputting that information to you.
And the problem with this is that any time a player spends interfacing with the app at the table with other people is, uh, time away from the game. Yeah, I like that, that's a picture from Netrunner. Um, uh.
all that time interfacing detracts from that tabletop experience. It's viewed by the players as work and hassle. Every moment that, you know, um, your friend over there is sitting with their face in the phone waiting to see what will come out of it, um, is just kind of viewed as wasted time. Um...
Now there's many innovative ways kind of around this.
You know, Alchemists that I showed earlier uses image recognition to view the components.
This game here, World of Yoho by Yelo is pretty cool.
The game mat has spaces that are roughly the size of phones.
And the phones actually show the board through them and you place them on the map.
And actually it works pretty well.
They use the accelerometer in the phone to track where you've moved it around the map so it's constantly showing the right part of the map and it can kind of reveal encounters and stuff.
So it kind of gets that interfacing out of the way by directly integrating the phone into the game, which is pretty neat.
We didn't really have that option. The stories we want to tell are pretty sophisticated, so we rely a lot on text. We have some narration, but we couldn't afford to narrate all of that mountain of content we wanted to do.
And so, the question...
Um, the question that helped us the most when we were kind of working on this, as we're playing the game, asking yourself, uh, am I doing the work for the app or is the app doing the work for me?
Um, this is, this gets down to the heart of the hassle.
Do they feel like interacting with that app is a drain on their time?
Um.
So when you're inputting, when you're doing that kind of stuff, it's going to be viewed as you doing work for the app.
Whereas like when you're getting something out of the app, suddenly it feels like this is a benefit, a boon to the game.
Here's an example.
Road to Legend, which was the follow-up to Mansions, based on Descent.
Because it was based on Descent...
each player activating mattered and when they activated mattered in descent. And so because of that, um, you can see over on the left there, every time you activated, you needed to click and turn on your own turn for all four players every round. Um...
seems simple, it's like two taps, right? But this really drained on the players, they had to remember to do this, they had to keep that in their mind, they had to be passing around the phone to do this on the phone. Um, this, this is kind of like that player at the table you need to constantly be reminding to take their turn, you're constantly reminding that app to take its turn. Um, and that was, that was viewed as real drain on the players.
Um, contrast that with mansions, every time you're clicking on one of these nodes, we're giving you story, we're giving you rewards, we're giving you choices, um, we're giving you stuff.
Uh, players never responded negatively to interacting with nodes on the app.
They were excited, they wanted to see what was coming next.
Um, so the way we, but the problem is, as I mentioned, the Mansions app doesn't know a lot of things about what the players are doing.
So what we tried to do is we tried to take this rewarding experience of getting something out of the app and harvest as much information from it as we possibly could.
So when players are interacting with the app and getting stuff out, we try to look for every piece of information this gives us.
when somebody interacts with an app we know that investigator is on that space cause they have to be in that space to interact with it. We know when they interacted with it, we know how well they did, we know the amount of damage we've given out to them, we know the amount, how close they are to losing the game. Um, so we kind of use these things that players view as beneficial to get just enough information to make the app seem informed about what's going on on the table. Um, but I think there's a long way to go.
in interfacing. I think we've succeeded pretty well in mansions, but I think it's one of the places that these kind of hybrid games can innovate the most. Image recognition and other such technologies are going to allow us to kind of bridge this interfacing gap and make this feel like less of a hassle to players. In the end, I think...
Mansions went pretty well.
Despite, it may sound like Loom and Doom after I talked about the rocky reception, but actually after that initial bump, we got those bugs fixed and the game got great reviews.
It's quite beloved and it's been going on with its expansions now for several years and it's doing incredibly well for us.
So I think the big takeaways from Mansions development.
were obviously to prototype early, to prototype thoroughly, before you start development.
Use that prototyping to be wary of scope and to plan your scope carefully.
And then with when you're developing for both tabletop and digital simultaneously, um, consider how you're gonna divide the mechanics between the two mediums and be pretty strict about that division.
Um, consider the flexibility of your timing versus the desire for real time interaction.
Um, consider the opacity of the mechanic and how it's used by the players.
Consider the interfacing and like if you want it to be shared and tactical and do you want to have social elements in this mechanic, for a given mechanic before you decide which side to put it on. And finally make each interface with the app worth the hassle for the players. So that's it. Thank you very much.
Uh, remember to fill out your evaluations, um, and I think I have time for like a question or two. Oh, yeah, walk up to the mic.
Hey, great job. Um, I just wanted to ask, uh, do you have any thoughts like on specific game mechanics that could leverage, you know, augmented reality, things like ARKit and ARCore for tabletop games?
Oh yeah, I mean like AR is something that we've talked about a lot. It could be really cool.
One of the things I think we think could be coolest about it is the ability, that kind of hidden information and overlapping asymmetrical information for different players sitting around the same table. So AR would allow an overlay of information over a board game so that different players knew different things about what's going on there. And like gave you that really open interface to the game.
through AR while also maintaining that really strong asymmetry. Obviously this is something, the technology is a little far out for us to work on it or anything but I think it could be the potential there is really cool.
Thanks a lot.
I have a question, like you mentioned this interfacing issue between the distance that was made between the app and the players.
Have you ever thought while developing Mentions of Madness about reading out the text loud, I mean using any voice over or kind of this kind of possibility to...
make the game better? Yeah, definitely. Oh, I just remembered I'm supposed to repeat the questions after people say them. I forgot to do that for the first one. Um, yeah, so the question was, uh, have we considered doing voiceovers or narration? Um, so we originally had wanted to do narration for nearly all the text.
Obviously, that proved prohibitively expensive.
And we talked a bit internally about, like, oh, it would be cool to like Microsoft Sam, all this text.
But one of the things we're really going for with mansions is the atmosphere.
And at the time, they there was no real like automated reading of that text that kind of got across a Lovecraftian feel that we were really happy with. So we opted to just have the players read it at the table.
Also, often players reading the text together at the table can kind of be this bonding and joking experience that has actually added to the game quite a bit. So we probably have no intention to put anything like that in the game, I imagine. Thank you.
A great talk.
Just wondering, when you were developing the app and the game, were you considering any sort of accessibility issues, like in terms of the text and the speed of the text and the colors and various other things?
Yeah, so accessibility definitely came up.
Oh yeah, so the question was, did we consider accessibility while developing this app?
And yeah, accessibility definitely came up.
It is something that my department in board and card is very concerned about.
we wanted to help people with. Um we definitely had to make some sacrifices um just to get the app working. It was something we were pretty inexperienced with um but like app contrast um scalability and stuff is definitely something we considered during development.
Did you look at those old games from the late 70s and early 80s where the technical limitations were so big, like Odyssey 2 for example, so that you had those board game things too, to broaden the scope of the video game?
Did you look at those interactions between analog and digital?
Yeah, so the question was, did we look at those old games from like the 70s and the 80s that used kind of the crossover of technology? Yeah, so we, uh, what's the name of that one?
Oh crap, I'm blanking on the name, but we, we, we, huh? Oh yeah, yeah. Um, we, we, we brought a few into the office, um, and we're playing them. It was, it was, it was a lot of fun.
A couple of them had been sitting in people's basements and didn't really work that well, but we definitely checked out several of those and kind of talked about that.
Another kind of inspiration for this kind of game was old school adventure games and kind of like those FMV mysteries and stuff too.
Alright, cool. So I think that we have to wrap that up there. Um, but if anybody else has any other questions, I'll be in the wrap up area for a little bit, so feel free to come by and talk. So thank you everyone.
