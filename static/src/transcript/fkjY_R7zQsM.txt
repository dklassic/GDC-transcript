My name is Jonas.
Before I start, I have a QR code on the slides.
That is the link to the slides, so you can find them online.
I will show the QR code at the end.
You don't have to take photos or anything.
Right.
So welcome to my talk about Subnautica and what that all meant to us and how we did it.
Before I start, let me give a brief introduction to the game itself, if my slides are working.
They are not.
That's a good start.
OK, here we go.
Here we go.
OK, so what is Subnautica, right?
Subnautica is a first-person, single-player, underwater adventure.
It's not an adventure game, but it's an adventure.
So you crash land on an alien planet, and you dive in, and you scavenge resources.
and you craft and build to survive.
You build some tools and some vehicles, and of course you drive those vehicles around.
And later in the game, you build some really cool habitats, and you can customize them to your liking.
And you can bring your vehicles into the habitats, and that's really cool, and you can upgrade them.
And you explore this big open world full of diverse biomes and caves and threats and even bigger threats.
And there's a lot of mystery somewhere in the world.
There's even more mystery and spectacle, of course.
We put a lot of spectacle into the game.
And so you unravel the story by going down all the way to the core of the planet to discover the secret.
And when you've done all that, you build a rocket and you blast off home, and the end.
Sorry for spoiling, if anyone has a plan.
So, like I said, Subnautica is a first-person, single-player underwater adventure, but it's also an open-world exploration, sandbox survival game with a story.
It's a lot of things.
Let's just for a second to give you a frame of reference here.
Let's talk about Spinnautica as a product.
So it was released on PC and Mac last year at a price point of $25 on Steam.
And we were in early access for three years.
And during that time, we sold 2 million copies.
I think we sold another two last year.
We had 50K concurrent players on launch and about a 93% positive user review rating.
Last year we were at 60K.
I'm not sure what the number is now.
87% Metacritic.
And we're also on lots of other consoles now.
Xbox, PlayStation came out in December.
We're on lots of other platforms and stores, like Discord and Epic and all that.
And suffice to say that Subnautica was commercially successful.
You do the numbers.
But how did we make it, right?
How did we build it?
Let me take you behind the scenes here.
That's why you're here.
So we started with a plan.
We made Natural Selection 2 before, and that took a long time, so we wanted to make something small.
And maybe in Unity, because we did our own engine before, and that was a lot of work.
And maybe something casual, maybe with a small team, you know, four people, six months, really easy, right?
And then reality kicked in, and we ended up with this big project.
We're still using Unity, but we're targeting PC and console powerful hardware now, with a team of 25 over the course of five long years.
And that, of course, costs 10 million US dollars to make.
That was not the plan.
So how did that happen?
And where did all the money come from?
That's what I'm going to talk about.
When we started, we started with an idea.
We, Underworld Entertainment, is a small indie company.
We have an office here in San Francisco.
And we're just a few people.
We cannot compete with AAA.
So instead of trying to compete, we just make original games, original IP.
And there's kind of a book on that.
It's called Blue Ocean Strategy, which is about finding uncontested market space.
Maybe we took it a little bit too literal here.
So in our case, the year is 2013.
I'm not sure if you remember, but Minecraft was hugely successful.
And Don't Starve just came out and created the entire genre of survival games.
And we were like, what if we made a game like Minecraft but underwater?
like a survival sandbox game with diving and no guns.
That was important to us because there was Sandy Hook just before and we felt like, okay, maybe we shouldn't add more guns to the world.
And as you all know, like there are thousands of indie games out there.
There's this sea of games and we want to be that spiky bubble and not a generic bubble.
You might have seen this before because we stole this from Jamie Chang of Klee Entertainment, right?
This is his GDC talk. It was 2016, I think.
Very good talk. Absolutely go watch it.
The point of that talk is be something, right?
The spikes will alienate some players, but other players will love it even more.
And that's a good thing.
If you try to please everyone, you will just end up pleasing no one.
So we sat down and we figured out what are our spikes?
What should our game be like?
What should it be about?
So we came up with this.
We want this underwater sci-fi theme, because we just like sci-fi.
And underwater was kind of unexplored, right?
Where you design and build custom submarines, and you.
You explore a procedural world and all that without guns.
That was our initial pitch.
And so we built some prototypes just to see if we can make that work.
This is the first prototype.
It looks ugly.
So we had this modular vessel building in there, where you were building your submarine out of little rooms.
And then you had this modular control scheme where you were kind of like multiplayer co-oping to pilot the submarine.
And that was not fun.
That was super tedious.
That was terrible.
So we ditched all that, we ditched the modular controls, we switched to something that looks more like a proper submarine.
And that was actually pretty good, but it was also pretty boring.
So we came up with this.
We made it so that when you drive into things or when you dive too deep, your submarine floods.
And it makes sounds and stuff, and you have to repair it.
And that already is really exciting and provides a lot of tension in the game without any violence.
So that was good.
And then our core came together, where you dive, right?
And then you gather some loot, and then you craft something.
And then it allows you to dive some more.
And eventually, you build your submarine.
Because we realized it's For this kind of game, it's good if you start with nothing and you work your way up.
So eventually, we replaced the starting submarine with just a static room, which had a little construction station in there.
And then you had a recipe for the submarine.
And we didn't even have to tell you what to do.
You knew you wanted a submarine.
So.
So in summary, what was good about the prototypes was the underwater open world theme worked really nicely and running out of oxygen and flooding, that was scary, so that was good tension.
And there was a good initial tech progression through the craft tree and the recipes there.
But what I'm really trying to say here is that the right emotions were there.
These things are good because there's emotion attached to them.
The emotion of the feelings of wonder and fear and the joy of discovery, tension and intrinsic rewards, all those are feelings.
And that's also why these modular submarines with the modular controls weren't working, because we failed to make them emotionally impactful.
And that's actually a core principle at UWE.
We try to see, we try to design for emotions, first and foremost.
And it's done really well for us.
So if you want to hear more about that, a deep dive into that very topic, tomorrow we have another talk about Subnautica, the design of Subnautica, by my boss, Charlie, tomorrow 9 AM.
And it's all about the designing stuff and the reframing.
And Charlie's a brilliant guy.
And.
Like, just listening to him will blow your mind.
I have to say that because he's my boss, right?
But I also really mean it.
Like, I wouldn't work for this company if it wasn't for him.
So I do recommend that if you're interested in design.
Anyway, while we were busy prototyping, our art director has been really busy.
making art, concept art, right?
So he was drawing these coral reefs and filled with wonder and peril and there was a lot going on.
And our only problem was that our prototypes did not look like that, like at all.
Is it even possible to get this visual fidelity?
So we tried to come up with another goal for ourselves.
We wanted to build a new prototype to match the concept art.
Like no big gameplay, just match the concept art, right?
Just free form diving.
This is the concept and this is in game.
That was good enough.
And we showed that to the public at PAX 2014.
And like I said, there was no game loop in there.
There was no crafting or anything.
But the feedback we got was good anyway, because the right feelings were there.
People were really feeling awe and wonder and fear.
And they just hate the ocean.
And that's a good thing that translates directly into the game world.
If you have something like that, that's pure gold.
So OK, let's update our spikes here for a second, because it's not what we initially envisioned.
The modular submarines, that did not work out, so screw that.
And for the demo, we made a handmade world.
Everything was hand placed.
Everything was hand shaped.
And that was so much better than anything we procedurally generated before.
So forget about procedural world.
We're going to just hand build the entire thing.
But we realize, okay, people really fear the ocean, so let's exploit the hell out of that.
That's gonna be a good product.
All right.
We are confident enough in the potential of our games to move forward, so we build a minimum viable product.
And that's when you have to get your priorities straight.
So in our case, we saw that it's really difficult to make this run even just on PC without terrible frame rate and hitching.
So no more iPhone, no more tablets, whatever, just focus on really powerful, beefy hardware.
Keep the good look, bring back the crafting.
make it single player first, that's difficult enough, and then hand build the entire world because procedural just didn't work for us.
And as you might realize, that requires art and level design and voxel editing tools, and we had to bring more and more people on the team, and we went quickly from four to more like 20.
And half a year later, we kind of had the combination between.
the gameplay prototypes and the visual demo that I just showed you.
And we felt, OK, we need to get some real feedback on this now.
We have to open our doors and see what people are actually thinking.
So we started selling the game earliest access on our own website.
And because it's an open world game, it's kind of like difficult to understand are people even enjoying it or what are they doing.
So we added telemetry and feedback systems to the game.
Let me show you that.
So here we go.
At any point in the game, if you press Escape or you press F8, you can give feedback.
And it opens up a little form where you can send us a message.
directly to us.
You report any issues, send us screenshots, tell us whether you're angry or happy or when you found a bug, right there in the game.
And that feedback then goes to our back end server where we aggregate it and analyze it.
And if you want to have a look, that's the link to our feedback server.
You can absolutely have a look at all the feedback tickets because they are all public.
And I should mention, there's absolutely no personally identifiable information or anything in there.
We're not interested in selling anyone ads or something, we're interested in global trends and in making the game better.
So this is all fine and not covered by GDPR or something.
Here's an example of a global trend.
We shipped an update and our happy tickets went up, went way up.
Updates are a good thing.
You can see that.
And we also send the player's position together with the feedback.
So here you see all the happy dots, the positions where people are happy about our game.
So as you can see in the middle, there's a lot of dots, because that's where the game starts naturally.
But then you can see some clusters and some patterns emerging out of those.
And it turns out those were the areas where people thought our world looks really beautiful.
And they wanted to tell us that it's really nice.
So we knew what to do more of and we could go from there.
And so in addition to the feedback system, the manual system where you can send us something, we also put in telemetry, or analytics, or whatever you call that.
So for example, every now and then we send the player's position, which allows us to build heat maps.
And again, the game is centered around the life pod in the middle of the map.
So naturally, you get a lot of heat right there.
But you can totally see that, for example, here, there are a lot of green dots over there.
And what that means is that Now, players always wanted to swim there.
And what is there?
Well, it's that.
It's the big crash ship that we put on the horizon as a landmark.
But the problem is that it's just a billboard.
That's basically, we thought of it as Skybox, right?
The game is underwater.
But when the player, the player doesn't know that.
And then they start the game, and they see that.
And then they are like, oh, the game must be over there.
So they go there.
And that's not good.
That's not what we want.
But we wanted to keep the landmarks.
So we came up with this idea, OK, we put radiation in the game, and so this is a crashed ship, and it leaks radiation into the ocean.
And so as you get closer, your Geiger counter goes up, and you realize, OK, maybe I shouldn't go there.
And that helped.
Two months later, we ran out of money.
So we wanted to get more money in, we put the game on Steam Early Access.
And that was December 2014.
The game was in a relatively similar state to what you've seen before, but we moved all the good loot to where the sharks were, and that created a lot of excitement.
We saw that in the feedback tickets.
That was cool.
And we also added these super big whale-like creatures called the Reefbacks.
They are absolutely harmless.
They don't do anything.
They just float around and moan.
And people freak out when they see them.
And they talk about Cthulhu and stuff.
And again, we know that people freak out because we're getting the feedback tickets.
So we see there's a huge reaction to these creatures, even though there's no gameplay to them.
Let's do more of that, for sure.
That's a good idea.
All right.
And also people were telling us that we were making a horror game here, which was never our intent.
But maybe if it goes that way, maybe it's meant to be like that.
But our sales numbers were still not good, not enough for us to keep going, not enough for us to survive.
So we needed something to move the needle.
And we needed it fast.
And we so we had to decide what to what are priorities.
And I'm sure many of you are familiar with this kind of situation where you are like in dire needs and what what are you supposed to do now.
So our suggestion would be this.
Look at your spikes and focus what makes your game stand out and do more of that.
Forget anything else.
So in our case, underwater accidental horror and theme, that works really well.
So we want to do features that are concrete and emotional and straightforward to implement.
And everything else, cut it or at least defer it.
And we kept our heads up, and we shipped monthly updates.
And we added more world and more stuff and all that, of course.
But most importantly, each of these updates had a headliner feature, a big thing to call out.
So for example, one of them was the Cyclops submarine.
And another update was the Reaper Leviathan.
That one actually does eat you and is responsible for probably 50% of our sales.
And the Cyclops submarine was also really well received because that's a little bit unsurprising because it's an underwater exploration game, right?
But anyway, so definitely tie that in more with the gameplay.
That was the lesson here.
And like I said, we put out these updates and of course when you do that, you also have to talk about them, right?
So we did a lot of blogging and tweeting and newsletters to our mailing list.
And for each update, we made a little website with a little video, which is a neat trick we learned from Valve.
They did that for Team Fortress 2.
There's the QR code to their talk, really good talk.
Not just on games as a service, like the title says, but on communication in general.
Really, really recommend it.
So that's all good, but probably the best thing we did was to open up our Trello board, our task tracking board, to the public, and you can just see everything.
Our day-to-day tasks, it's all public with all the details, all the little bits, everything.
And because we are all remote, our team is completely remote around the country, around the.
around the globe, in fact, our Trello board actually contains all our tasks and everything is on there because we don't have a whiteboard or something in the office where you can hide something.
So that's the real deal.
And in addition to that, we also made our commit messages to our version control system public.
They go live to our Twitter.
So people can see live what we are working on.
In fact, people can play live what we are working on, because we are uploading daily builds to Steam, where they are available on the experimental branch.
And we tell people about it.
There's no password or anything for that branch.
You just have to go to that branch.
And it's a broken mess.
I mean, of course it's a broken mess, but 20% of our players love it.
Every day, there's new features or horrible bugs to discover.
Who knows?
Like, it's exciting.
And they are right on the bleeding edge, right?
It's bleeding for sure.
But for us, it's free playtesting.
There are thousands of people out there who scrutinize our every check-in.
You should see how fast a programmer fixes that damn bug if 3,000 people are complaining.
That really stabilizes the product really fast.
I recommend that, just for that, just for that alone.
And in terms of sales, we were starting to gain traction.
More and more people were coming in and buying our game.
Why?
Just one word.
Streamers.
Streamers are your sales people.
in this brand new world we're living in.
The first ones to discover our game were small and medium-sized streamers, and then came bigger and bigger ones.
And by April 2015, so half a year after we released our game on earliest access, we hit Jacksepticeye with like 4 million subscribers at that time.
And he made a video about Svobodka every single week for 20 weeks.
And then another 20.
And then another 20.
That's 250 million views just from one YouTuber.
And those viewers, I mean, a fraction of those viewers turned into buyers, right?
And even if they don't turn into buyers, they are still spreading the word.
They are still telling their friends about it.
They still belong to our community.
They're kind of like our free-to-play players, if you want.
And two notes about this here.
First, when you design for emotions, you get a lot of excitement on the streams.
And that's exactly what streamers are looking for, because it entertains their audience.
And that is good.
I think that's one of the major reasons why a lot of streamers really like Subnautica.
It's not because of great game or anything.
No, it's because they can make good entertainment out of it.
So keep that in mind when you design.
a game. And the second thing, which was like really valuable to us, is streamers are essentially playtesters. You can watch their stream and you can watch their face and you can see what they understood, what worked and what didn't. Whether it worked out the way you wanted it to work out.
Our game is completely non-linear, so that's super, super important to us to see if people get it, right?
And so this was invaluable for us to straighten out the onboarding experience in like the early, like, 30 minutes of the game.
So invaluable.
Anyway, so we basically...
We basically went from near bankruptcy to virtually infinite runway overnight.
More and more money was coming in than we were paying the bills, right?
So we could have developed this game forever, which sounds like a pleasant thing, but when you really think about it, it's not.
So where do you go from there, right?
And how do you keep up the pace?
And how do you keep your focus?
So how do you deliver a great update every single month to keep this machine going?
We made a roadmap.
Our goal was to leverage existing systems and build, add stuff that gels with what we already have, right?
So one classic example would be base building, or also known as shelter, which comes with building outposts, so you can venture out further and further, which is great for exploration.
And it comes with farming, so that helps with survival gameplay, right?
And then there's the moon pool, where you can, like, dock your vehicle and upgrade it.
So that's tech progression.
And then there's the map room, which helps you to scan...
scan for resources.
which then helps you progress further.
So that all gels with existing systems.
And, but what I'm really trying to say again is that these are things that the player already cares about.
These are things that the player's already emotionally attached to and intrinsically wants them, intrinsically understands the value.
That's the main thing here.
And we also finally caved and replaced the Aurora billboard.
with the proper 3D model on the horizon and made it explorable inside.
So we explode the entire thing and then you can go inside because despite the radiation that we added around it, we saw that people still wanted to go there.
And then they were like, oh no, the ecosystem, I want to fix the radiation, right?
I'm destroying the planet.
So.
We saw that by watching the streamers play.
And if you know what your audience wants, and if it fits your game, might as well give them what they want.
Was great.
Everyone understood that this was like a mission or something to do.
We didn't have to tell them.
And remember when I told you about telemetry, about the telemetry system we put in the game?
Well, so we track every single item the players craft, every single base piece they build, every single submarine they build, everything.
That allows us to understand what people are doing and in which order, which is super important in an open world game where you want to have any sense of pacing or progression.
So we were able to get the data, evaluate the pacing, look at it if it's like the way we want it to be.
and then tune our loot placement and our tech progression and our level design based on actual data.
And that's really much better than sitting in meetings and trying to figure it out on a piece of paper.
And if you want to do something similar like that, well, so we started with Unity Analytics.
And it comes with a bunch of things built in.
But then we really had to download the raw data.
and write our own data processing tools because the things that we are interested in don't really fall out of it.
But that's no longer an option because Unity Analytics violates GDPR, so that's out.
Chances are if you want to do telemetry, you will have to roll your own solution.
And you can try to use something for web analytics.
And if you basically treat events in the game like, OK, a player crafted an item, it's like a player visited this website, you're basically 80% there.
It's similar-ish.
And then the rest you have to just manually do it.
It's sad.
That's where we stand right now.
So that's it for quantitative feedback, right, for numbers.
And for qualitative feedback...
what just listen to what people are saying about your game on the internet.
And, and, and if you, if you listen to it and if you fix something that they complain about, or if you took a good suggestion from, from someone, call that out, call that out in your patch notes.
Like these are the patch note for dead cells and they were in early access for a year.
They did super well, and they did even better than us with their patch notes.
And they have talks here at GDC.
Go to them.
I've heard them already.
They are really good talks.
Make sure that the reason why you want to call that out when you take a suggestion is to make sure that people understand that they are in the loop, that they actually have power over the creation of the game.
that will grow a community and they will become your super fans and they will spread the word for you.
So listening really is crucially important to the entire process of early access.
But don't take it from me, take it from the man himself, Chris Hecker.
Like he has been out there with Spy Party for years and years and it totally worked for him, right?
He was listening to his game and listening to his players and he says that his game now is better than he could have made it.
because of that.
And that same thing is true for us.
Like Subnautica ended up being way better than we could have made it behind closed doors.
So what I'm saying here is that iteration is important, but the right kind of iteration.
Iteration based on customer's feedback, not your manager's opinion or your boss or your director.
measure what actually works in the game instead of speculating about it in never-ending meetings.
Like, get some data.
And all that is good, and we were in early access for a really long time, and we were making this survival sandbox game where you start at the top, and then you explore further and further and deeper and deeper.
And we had this great little underwater adventure.
And at some point, people are like, okay, so what's the point?
Why explore?
Why survive?
Is there even a point?
Or is this like?
I mean, Minecraft was pointless for a long time, right?
So we discussed many, many different solutions, but one stuck out for us.
In the very, very early prototyping days, one of our guys, our technical artist, had doodled something on a piece of paper.
And it was this epic chart of exploring the ocean, going deeper and deeper, building bigger and bigger submarines, and then going into caves.
And eventually there are.
Aliens.
And we liked that.
So we realized we need like a core narrative.
Something to pull everything together to a final point.
What we needed is a story.
So we hired a writer, and he came up with a bunch of mysteries, including aliens.
And so the story is eventually you build the rocket and you escape the planet, right?
But that main story is implicit and it's all in your head.
What we tell instead is half a dozen minor storylines.
Those are explicit.
And we tell them concurrently and they have overlapping parts.
And they are all linear.
But because you progress through them by player actions, it feels really non-linear.
We do that by monitoring the progress of the players.
We monitor, I told you before, we monitor what you crafted.
We know if you have a knife.
We know if you have a sea glide or a submarine, a sea moth.
We know which areas in the world you have discovered.
And based on that, we can judge how far into the game are you.
And based on that, we can give you little story bits.
And different stories are being advanced by different kind of things.
So depending on what you focus on, your story will play out totally different than someone else's story.
And so one really simple example of that is by measuring what kind of oxygen tanks and vehicles you have, we can judge how deep you can dive.
We know about how deep you can go before you die because your submarine implodes or you run out of oxygen.
And therefore we know which parts of the map you can actually reach.
And therefore we know which loot you can potentially get because the loot is different in each biome.
And so that's a relatively simple measure to understand how much progress you have made in the game, regardless of the hours you spend playing the game.
It could be 60, it could be 6, we don't know.
What is important is how far you are in terms of progress.
And so we used that to advance one of the storylines, which is the infection.
Like there's this whole backstory where you are infected with bitcure.
And basically, the deeper you go, the worse the infection gets, right?
Super simple example.
The other storylines are a little bit more complicated than that.
Anyway, story was our last missing piece here.
Story gave everything a purpose.
And it really worked out well for us.
And for sure, with three long years of early access and a big team, you can do a lot of things.
But don't let that fool you.
We still cut a ton of feature.
But they were not really core, or we never managed to make them emotionally impactful.
So that's fine.
It's OK.
And I fully realize the irony here, right?
standing here in front of you in a suit, telling you how easy and dandy that was.
And my colleagues know me as this mad guy in the middle there, because...
Because don't underestimate how hard it actually is to ship an update every single month, a valuable update, how hard it is to keep a product evolving over 3-4 years and to keep it playable at all times.
I was a programmer on the project, so ask me about it.
I mean, just try it, just try it.
Anyway, I digress.
Long story short, the results of three long years worth of monthly updates was growth and growth.
And I cannot show you the sales graphs, but I can show you our concurrent players graphs.
And I can tell you that it correlates with the sales graphs.
And you can see those typical spikes around releases, updates, or when a streamer comes in and makes a video, or when it has a sales event, right?
And then the long tail starts.
We all know that.
But the point here is, before the long tail really goes down, another spike comes in.
And it just keeps going and going.
And that's the magic here.
And I'm going to make a claim.
that open development was the silver bullet that enabled this kind of growth.
I'm going to make the claim that open development fosters this kind of growth because you build something and you release it and you put it in front of players and streamers and cover it and then you get feedback from that. You watch the streams and then you iterate over and over again.
And at the same time, the new features that you build give the streamers something to talk about, which means new episodes, which means more views, which means more buyers, which means more budget, which means more features.
And this loop probably looks familiar to you, because it's essentially the business model of games as a service, or life services, or free-to-play, freemium subscription.
Whatever you call it, it's essentially the same.
But we're not a game as a service.
Subnautica is a premium game.
Single player, pay once, upfront, we already got your money.
What I'm saying is that with open development, you can basically get the same kind of loop.
And therefore, I'm going to call it game development as a service.
And it works because early access is a show.
Gamers want entertainment.
They don't necessarily want to play games.
Games are entertainment, but they want entertainment.
And watching and influencing a game getting made, that is also entertainment.
And we are in the entertainment business here, or at least most of us.
So with open development, you kind of get like double the entertainment.
You get the entertainment of making the game, and then you get the entertainment which is the game, the final product.
And that should come to no surprise that that's a thing.
Like other industries have discovered this long time ago.
Like take open kitchens where you can see the chef working on your food while you're waiting.
That's entertainment.
It makes the time feel shorter.
But it also builds trust.
He cannot mess up with you seeing it.
And that's crucially important on early access.
You want trust.
Because you want money, right?
You want buy-in.
So if you do that, if you do open development, you don't even need to do marketing anymore.
These days, your most powerful tools are streamers and influencers.
And then maybe the Steam front page.
and then social media and eventually there's still press.
But probably word of mouth really, because what really happens here is that on an India scale there is an infinite market for sure.
But that market is highly fragmented.
into clusters and you can absolutely, you can easily exhaust a cluster, even at an indie scale.
Like we probably sold to every single person who ever watched Jacksepticeye because he just made so many videos about it, right? So that cluster is exhausted, but we still can get millions and millions of other people who never, who don't even know who Jacksepticeye is.
So what you want to do is to get into as many clusters as possible and then let the cluster do its thing.
And that's probably word of mouth and that takes a long time.
Okay, summary, let's wrap it up.
Our three things that we think are important and that really we learned during the development of Subnautica was, okay, first of all, we designed for emotions, right?
And because we believe that that is the core thing that engages your players.
And then, Second, streamers are your salespeople.
So you want to make games that are not only nice to play, but also nice to watch.
And you want to treat streamers well.
And thirdly, early access is a show, and open development is what produces the show.
And when you want to build great original games, we recommend the way we do it is build prototypes.
You define your spikes.
Make sure you know what this game is about, what stands out.
Build your minimum viable product.
And then you get real user feedback as early and as often as possible.
You iterate on that.
And it's still true that execution really matters.
Ideas, not so much.
Execution is what it comes down to, which is why iteration is so important.
So what we would recommend is to design for emotions first, and then listen to your game.
Listen what it wants to tell you, adapt to that.
It's probably not what you had planned.
It's better than what you had planned, and you have to let go and allow for it to happen.
and listen to your players and deliver what they want.
Unless, of course, people are always asking us, I want a harpoon, I want guns, I want to fight back.
That fundamentally clashes with our vision of the game and would probably ruin the horror aspect of the game.
So if it clashes with your vision, then of course listen to your instincts.
And like I said before, Subnautica had a really, really rough start.
We always went out of business there.
It becomes successful over a long, long period of time.
And they say that it takes 20 years to become an overnight success.
That was certainly true for us.
And the corollary of that is if you put all your eggs in one basket and you try to hit that launch date and you make a big splash and you have all the press covering it and stuff like that, that might not work.
People might be busy that very day and you don't you don't allow for word of mouth to spread Hey, we believe in being open As open as possible and building communities around the games we are building and the company I'm very, very certain that early access is a show.
And of course, there's always a lot of negativity and backlash and people writing really bad things about you.
You cannot do anything about that and you cannot defend yourself because that just looks ugly.
So you will need a community to support you and defend you for you, basically.
And most important perhaps, just ship, ship, ship, ship.
Read his stuff.
That's my talk, thank you very much.
Thank you.
So this is the link to the slides again.
You should be able to point your camera at it, or you just go to my Twitter.
It's pinned there if you want to have the slides.
My boss asked me to say that we are hiring, so now you know.
And I believe that we have time for a Q&A.
I shall remind you that there's also the feedback form that I would like you to fill out, because I want to hear what you are thinking about my talk.
I want to get real user feedback.
And if you would like to have me go deeper into any of these topics, please come to the microphones, I'm happy to do so.
If we run out of time with the Q&A, I will go to the wrap-up area, which is like just around there near the windows, and we'll follow up there.
Okay.
So let's start with Q&A.
Yeah, hi.
Great talk.
We made We Happy Few, we also did open development, we discovered many of the same things you did, which we started doing a small roguelike game and we ended up doing a big adventure game, and permadeath went out the window, and a whole bunch of different things changed.
So that was excellent.
But one of the things that we did discover is there was a tendency to build towards the next build, and not all features...
can be done in a month.
So after a while we were beginning to feel that all of the developers were so focused on the next build that they weren't doing the long-term things.
Did you have that same experience and what did you do about it?
So the question was, if you release monthly updates, how do you do long-term stuff that takes more than a month?
Yes, absolutely.
We had that very, very much.
And we kind of handled that by splitting the team a little bit.
Some things, if they just take longer, they have to be developed on a branch.
So our big one was the H2O update, which where we were like rewriting the entire shading for the water.
And that was a big one and took like four or five months or something.
So that was all kind of like in peril and that was a huge pain.
And I absolutely agree that it's hard to both ship great updates short-term and do the right thing long-term.
But at the same time, I kind of want to say that you might actually run out of business if you don't do the short-term things.
So if it keeps you going, and if it keeps getting the money in, then maybe that's already good enough or something.
I don't have a good solution for that.
I only know that if you don't ship an update, the long tail goes way down.
And people start screaming, they abandoned the product.
We had that, too.
Yeah.
So at least ship something.
It doesn't have to be like.
the magnum opus, but definitely keep shipping and try to keep that long-term thing still on the back burner.
And eventually, when it's ready, then you come out and you're like, yeah, here, look at this.
You don't tell anyone that it took longer than a month.
Thank you.
Great question.
So I first came across Subnautica when my son was in the hospital.
You made the game available for free to children's hospitals.
They have steam machines and the kids can play them.
So first of all, thank you.
That helped us get through a very painful period.
We ended up buying, we had never heard of it before.
We ended up buying two and then my son's friends bought like five or six.
Is there a way you can track those analytics?
I assume the hospital doesn't let you do it.
Do you figure that out in your strategy or what?
Right, OK, so the question, I guess, is what do we see in our analytics and what do we not see?
The short answer to that is we have no idea who's playing our game.
We don't know how old they are.
We don't know where they, well, OK, we do know the country, but we don't even care.
there's no, we don't optimize for a certain target audience or something.
We optimize for the, the, uh, the global trends of feedback tickets that we see and the complaints that we get. And, and they are pretty much the same all across age groups.
What we did do though, is try to make this game as inclusive as possible and to be, uh, uh... reaching to not put stuff in there that would give us a uh... okay you can only play this game when you're sixteen or older rating right so we we did try to make it as kid friendly as possible because we just thought that that's a good thing uh... and i didn't even know that hospitals get it for free so thank you for bringing that up it was interesting You said that you got a lot of benefit out of telemetry and out of listening to your community.
You had a team of 25 you said.
How many people were dedicated to analyzing heat maps coming processing all those spreadsheets and also with community outreach like what was the the cost of that.
Yeah that was me.
It was tough.
I mean, I had to wear many hats, and one of them was that.
We could absolutely have had more people just on the analytics side of things.
But at least what we got out of it was we were able to cut short a bunch of really long meetings that just went in circles where we were speculating about stuff, right?
We were like, hey, do people build a CMOS first, or do they build a base first?
And then what does that mean, right?
And I could just.
pull up the data and run a query and say, hey, OK, yeah, they actually built this email first.
This is what happens in the game, right?
And so that helped just cutting down our meeting times.
We didn't like pru.
We used it as an encyclopedia more than like a proactive, like data-driven development or something.
We didn't do that, yeah.
But we used it to balance the game whenever we had a question.
It was in the data.
That's what we got out of it.
Is that for community as well as telemetry, or did you also have someone dedicated to community?
The feedback tickets that we get from the game?
Oh, OK.
So the feedback tickets, we process them automatically.
You should go to the website.
It's text, right?
So we have text analyzers that look at word frequencies and bigrams, and they try to figure out by By looking at these words, we can figure out, OK, there are certain trends that are appearing.
For example, the word stuck is coming up a lot recently.
So we look at the tickets, and we're like, oh, look at that.
There's a correlation.
They're all stuck in this area.
And so we can fix that.
That's kind of how it works.
We get a lot of feedback ticket per minute.
So there's no way you can just read them.
We analyze them with an algorithm.
Thank you.
You're welcome.
At what point was your game when you launched it Early Access on your website?
And then what point when you went into Steam Early Access?
And did you see?
like how finished it was, did that, like your graph kept going up and up, do you think that was just word of mouth, or was that your game getting better as well, I guess?
Um, so the question was what state was the game in in earliest access, and then later, what was it in when we were in early access?
So, we only had two months between those two.
Because we thought we'd put it out on early access, and we'd get a huge amount of money.
And we didn't.
So we really had to put it on early access and be out there.
And then we thought, hey, we will get a huge amount of money, and we didn't.
So the game was still in a relatively similar state.
I think it was a combination of things, really.
There was a core there that was already interesting.
But as soon as people realized that we are one of those games that actually do care about early access, and actually do ship updates, and actually do listen to the community, that's when things really started to snowball.
So I would say that it takes about six months from going out there to being recognized as a good player in the field of early access.
And once people realize that, then it's all good, and it snowballs.
Yes?
Thank you for a brilliant talk, first of all.
It was very insightful, inspiring, and funny too.
You said you originally set out to build a game in six months.
When did you discover that you needed longer than that?
And did you have any trouble motivating the team?
Because you're all remote.
Oh, motivation I don't think was a problem.
Scope was a problem, right?
I think that's, when did we realize that?
I have no idea.
We are really bad at realizing how far we are behind schedule.
Because we don't have a producer.
We don't have a product manager.
We just do our thing.
So we have a gut feeling, and we're always wrong.
So I think that was just us being really naive or something in a way.
Like looking back at that, I don't even know what we can do in half a year.
for the way our company works would be very, very little.
So yeah, it's just not the way we work.
Maybe it's the remoteness of our team or something.
I don't know.
Yeah.
Time is not our friend.
Thank you.
Hi.
It was very encouraging to hear your experience with early access what I hear from People who have like negative experiences with early access they talk about like the source of controversies being Devs like taking something away that wasn't working out or like adding a new feature that really changes the game and you know Kills it to quote the forums. Did you have any experiences with this with so long and early access with like fan backlash or Did you keep things in the beta branch until you were sure they were ready to go in?
Right. So the question was about backlash or things that went wrong during early access.
Yes, we had all these things, right?
Like when we first came out, we were not sure whether that would be multiplayer or not.
And I'm sure that there were a lot of people who bought it under the assumption that there would eventually be multiplayer.
And so eventually we realized, OK, there's not going to be multiplayer.
We had to be super upfront about that and say, look guys, it's not going to happen.
And yes, people got.
angry with that, for sure. And there were also things where we changed the game significantly.
I'm not sure if we had a lot of feedback on that, but the Cyclops used to be so that it would flood, and then eventually that broke and we never fixed it. We put something else in there instead. The point is that...
You want to keep your creative freedom and you want to do what is best for the game.
And I think if you communicate that correctly, people will understand.
But like, good community management is so difficult.
You really need to have a dedicated person and that person has to be a wizard.
And we just happen to have that kind of person.
And that's the other 50% of our success, I would claim.
Because you always need to have the community to defend yourself against any kind of nonsense backlash that is coming up all the time.
Good question.
Thank you.
I think we have one more minute, maybe.
Hi. Do you think using early access as your primary model would be effective for all types of genres, or do you think it's limited to only certain types of game experiences like Subnautica?
Right. Great question. So the question is, is early access applicable to all kinds of games, all kinds of genres?
And I whenever I give this talk people tell me oh, we're building a story based game And like and if I put that on early access then the story is spoiled right and then then the game is ruined And I kind of agree but Let's just say we're building a follow-up game, and it's a story-based game.
It's below zero, and we are putting it on early access.
We're doing it again.
So I think there are ways around that.
And for sure...
We were really lucky with Subnautica, because it's like open world sandbox, right?
Which is like the perfect thing for early access.
Couldn't be any better.
But I truly believe that if you want to, and if you structure your game making process around it, you can absolutely do it for any kind of genre.
And you will end up with a game that is better than you.
could make behind closed doors.
That's my claim, and I'm very happy, very welcome to have a discussion about that if anyone wants to fight with me a little bit.
Thank you.
Thank you.
Okay, I think that's it.
Thank you so much.
