Hello and welcome. I've been a huge follower of GDC over YouTube for two years, yet I'm finally here to make a contribution myself as well. I hope you find it interesting.
In this session, we're going to discuss why team size matters in game development.
And I plan on sharing real-life examples with you from Veloxia, which I believe you will find very useful.
Since the mobile gaming went through the roof recently, the competition is now quite fierce, and we believe in Darwin's theory, which applies here too.
It is not the strongest of the developers that survives, nor the most intelligent.
It is the one most adaptable to change, of course.
I'm sure many of you must have heard of Beezus 2 Pizza Rule.
A principle implemented for the early days of Amazon.
So the rule is basically a guideline to determine how many people should work on the same problem or product in our case. According to the rule, every team should be small enough to be fed by two large pizzas.
A few of my teammates, though, this might result in a team of one person, but never mind.
Turns out this helps with people feeling way more engaged and spreading higher responsibility across the team leads to a much higher sense of autonomy.
Learning from one of the top business people in the world, the cluster structure is a modified implementation of this rule, in fact.
While supported with additional self-determination, of course.
So the structure basically encourages executors, meaning the teammates, to make decisions by themselves and for themselves. This induces decision making faster among the team by enabling people who own the products and decide on the destiny of the product by themselves.
Also, a small team for every product leads to a much higher ownership as well.
This session will probably be very interesting for any professional in the gaming industry who has a say in production and project management, especially the ones struggling with efficiency and productivity, while scaling the product portfolio and expanding their teams, perhaps.
So, today I would like to begin by providing you with a quick background information about myself and Veloxia.
Then we're going to have a brief look at the enterprise architecture models in general.
to make sure that all of us can benchmark cluster structure properly against the other options available. Afterwards we're going to dive into the cluster structure, perhaps discuss its ups and downs and having a system like that. Later we will talk about how to implement such a structure and finally we'll take a look at how this model impacted Velocity all over since the integration of it.
My name is Tugay. I'm the co-founding CEO of Eloxio. I'm a management engineer by education coming from a very multidisciplinary and project-oriented background. During college years I did many internships and extracurricular activities which later on allowed me to experience different areas such as management consulting, strategy and perhaps investment finance. Also during my exchange year in Sweden I was very interested in behavioral economics and psychological design.
Gaming was particularly interesting to me even before Veloxia, and as the industry as a whole is highly data-oriented and has endless possibilities to apply my experiences and versatile skills. As you can imagine, I'm mostly involved in any process that isn't directly related to programming. However, I spent most of my time working with an incredibly talented team of game designers, product people, and marketing professions on a daily basis.
Veloxia is a mobile gaming technologies company based in Istanbul, Turkey.
We make games in short, but our intense engineering culture helps us generate competitive advantage in certain fields.
And we are really serious about being experience-oriented and we praise data-driven design.
Our journey started back in 2019 and currently right at our second year in the industry, we have just closed a fundraising round and became a VC-backed company.
Total equity raised $4 million so far.
We look forward to growing further in our international teams.
So I highly encourage you to check out the opportunities at job.veluxia.co.
By the way, Veluxia is a female co-founded, highly diverse, and we take inclusivity in design very seriously.
Our teams are spread across three different continents and as of today we consist of three clusters and one cluster independent team. Let me talk to you about our first product a little bit for starters. As the genre made the perfect fit with our modeling and behavioral design experience, Veloxy started by delivering mobile games in strategy and simulation genres.
Space Colony Idle is the first game we developed and launched.
And it has over a million downloads.
The team has always remained of five people.
And we have just started further scaling the product by expanding our marketing activities.
With the know-how created over the last two years, we are now working on two new idle games to utilize our idle know-how further and scale our product portfolio as well.
So here comes the exciting snake peak.
Our latest cluster, our largest cluster, is working on a mobile product.
It has very easy to adopt core game mechanics, but the aim for gameplay that is easy to learn, but very difficult to master in fact. So the art direction is quite stylized I would say, but one can also perhaps call it semi-realistic fantasy. Here you can see a few examples of our characters and unique mechanics. I would say the game is positioned somewhere between brawlers and mobas in the complexity spectrum.
and we plan on enriching the gameplay via extensive and unique social features.
Last but not least, our experimental idea cluster is working on unique action and puzzle games.
The possibilities within these genres are truly endless and this cluster is freely exploring around, reaching further to find possibilities and opportunities with the constraints of mobile.
Finding inspiration from simplifying complex mechanics is the heart and soul of this cluster's processes. Here are some of the games we have developed. I would say without a proper integration of the cluster structure, it would have never been possible to have a clear cluster work structure like this that has teammates from Istanbul and New York.
Let's talk a little bit about the enterprise architecture. I'd like to provide you a basis to be able to benchmark the cluster structure more accurately.
So the textbook definition for an enterprise architecture is a discipline that is concerned with the structures and behaviors of a business, especially the roles and processes. Traditional organizations typically follow one of the four structures, either functional, divisional, matrix, or flats.
However, with the rise of the digital marketplace, decentralized team-based organizational models are disrupting all the conventional ones as well.
So it's not only the economies that are towards decentralization, but the societal mindset is also shifting towards there.
And nowadays people are starting to find decentralized structures way more intuitive.
Can you imagine how much the pandemic must have contributed to this change?
So when you look at the sub elements of an enterprise architecture, which come together to shape up the whole thing, it perhaps mainly consists of jobs, departments, processes, and communication structured in a rational manner.
Well, the guidelines defined for each of these elements help you build up the architecture for your enterprise.
Perhaps a typical example of displaying this is the good old organizational structure.
Yay.
As a former strategy consultant, I like to perceive this from a microeconomics perspective.
At its very essence, I think this is nothing more than just applying one of the most basic theories, which is about the most efficient way of allocating resources to meet the predefined goals.
That's that. Now we can dive into our very main topic, cluster structure itself.
The essence of the cluster structure is building up internal teams of designers, developers, and artists who can deliver games without needing any help from any other entity within the firm. Thereby, the cluster structure, the cluster itself has the biggest say on the game's destiny. This especially helps to avoid top-down decision making and to produce higher quality products stemming from collective ownership.
Because each sub-team is focused on one different game, we call them clusters.
And the functions that are needed after the game has been launched, such as LiveOps, marketing, and backends and optimization, all that are handled by a cluster-independent team that is always available at the cluster service when needed, like a group of consultants in the center of the firm. This method has been implemented by many firms in gaming industry, Supercell to name one perhaps.
The structure also allowed Veloxia to meet its business targets and KPIs successfully since the integration. Now that the gaming market is getting more and more fragmented over time, this should make a very impactful lecture for many of us. As the name suggests, cluster-independent teams work on functions that are platform and infrastructure dependent, that are indifferent for separate games in separate clusters. Good examples here would be Engineering, marketing, data teams which are centralized as well within the firm, kind of like serving all clusters and adapt for their continuously changing needs and requirements.
Yes, advantages. Oh, a lot of them. So here are the three main benefits of having a fragmented product portfolio. One, it enables delivering prototypes rapidly and frequently, helping to keep up with the new...
in a mobile market.
Two, expanding certain parts of the teams when products are scaling reduces the efficiency loss by having to always rush within the development pipeline.
Three, keeping a large portion of the team remain unbiased because they work on different products who also have a good grasp on the overall company vision, eventually creating a great testing group who are much less biased, but they can still look from a user's perspective.
Decentralized teams mean decentralized innovation and creativity is unleashed with higher autonomy.
This way, dedicated people know a lot better what products and features to focus on without getting constantly disturbed by other products, which they spend just a tiny little bit of their time on.
Also, work by large teams tend to be on more recent and popular ideas.
While small teams reach further into the past, finding inspiration in more obscure prior ideas and possibilities.
Feel more room in zero judgment zone, where they can question interesting and weird ideas which afterwards can turn into fantastic ones.
TLDR, too many cooks spoil the broth.
When there are too many voices involved in decision-making, innovation goes out the door.
Fever but laser focused inputs create better outputs.
Small teams perform much better on know-how sharing. The connections are stronger since there are less and people are more open to learning as everyone has a higher ownership on their domains. Additionally, different teams work on different kinds of genres and projects, developing a know-how on distinct fields as well.
Since our team collaboration is fully remote and online, as you would guess, and people are also presumably way more isolated than ever, the number of online meetings happening within a day is so much more frequent than compared to the office times where we had only offline meetings. One way to make sure that this situation doesn't create information pollution and inefficiency within your organization is to establish a culture.
We hope they are not adding value.
There we go.
This becomes super simple with the cluster structure because the meetings are already classified and communications are way more clear by definition.
Also, similarity builds unity amongst the teams as they internally focus on the same product from different aspects rather than different people focusing on different aspects of various products at a time.
Lastly, when blended with the right cultural attitude, autonomy gives people a higher sense of ownership and allows everyone to take more end-to-end responsibilities in all parts of the processes. Eventually, everyone contributes to the game design more acutely as well, and basically decisions are made faster by the executors themselves.
Of course, the cluster structure is not all roses and it has some trade-offs as well.
For example, utilizing the expertise can become a challenge during the phase of scaling when you don't have many experts on your team.
Presumably, you would end up having that person cluster independent for some time.
Learning the application might become unavoidable.
The cluster structure makes teams of people with similar job descriptions separate from each other by assigning them on different products compared with the other enterprise architecture models that are available.
There are some workarounds to this but still it is something to be cautious about.
Also, because the output gets fragmented compared with a very commercial enterprise architecture where people are expected to work on different products depending on the size and urgency of the needs.
This might possibly feel the teammates feeling dissatisfied as projects can become everlasting and their expertise is focused on a specific product for a longer period of time. If not planned well, it might become difficult to suddenly expand to team when the demand increases on a certain game and production is suddenly intensified because the product was originally built by a few people.
So until established well, this model might feel a little on the assertive side and even inefficient in certain instances. However, when positioned and planned well and integration is completely done, this is for the greater good. This perhaps is the only efficient way game companies can successfully grow. So now you know about the cluster structure, but how on earth can you implement it?
As a people scheme, cluster structure highly depends on people, functions, or the firm.
Hiring should prioritize who are adaptable and able to work cross-functionally.
And in order to maintain the self-responsible company culture, training becomes significantly crucial.
One great example here perhaps would be Netflix, because they do a great job on training everyone in the firm about how the company makes money and what behaviors will drive its success.
Lastly, talented people perform the best when they are given a proper space where they can share their conflicts and thoughts. So I would say periodic evaluations are also very crucial in terms of exchanging reflections on performance extensively, defining their transparent practice here would help everyone speak up latest at the quarterly interview.
where they have a chance to share ideas and thoughts.
And perhaps this is eventually creating an open space for critics towards the leadership as well.
So people are set and at the right positions, but how do they operate?
Periodic meetings play a significant role in keeping the team in close touch.
We have three types of periodic meetings in Veloxio.
All-hands meetings.
where the whole team is present and everyone's updated about what other clusters are working on.
Departmental meetings where all artists, engineers, and designers gather together with their peers to share practices and exchange know-how, eventually reduced applicant learning.
And most frequent of all, cluster meetings which happen on a daily basis.
Thoughts and updates are shared openly, making sure everyone's on the same page about the decisions made with their cluster mates.
A seamless and practical CI-CD pipeline lays in the core of a systematic approach to game development, eliminating redundancies as much as possible.
Muda is the Japanese word for repetitive work and having to always do certain tasks which don't have a direct value add.
This method ensures the muda is kept at minimum when systematic approach is applied in game development.
Having an automated internal distribution reduces wait times for developers, also provides an easier access to all testers.
This way, we even have implemented a one feature, one build rule for the times when RapidQA becomes necessary. Having an internal RapidQA system helps identify problems and bugs much sooner so that the developers can fix them right away. This way, fatal failures on production are also much less likely to occur. Integration of art assets and merging builds are foolproof processes when certain guidelines are properly followed.
However, very time-consuming when you map the development process within the company.
So it becomes a responsibility for the engineers and technical artists to build an automation system for all the repetitive processes within the firm.
This might go without saying, but creating various communication channels to ensure people can both communicate easily and perhaps follow their daily tasks with an automated pipeline is also very crucial.
Agile project management tools can be easily combined with each cluster specifically to visualize their prerequisites and enable a more clear roadmap for projects as a whole.
Lastly, I would like to discuss a real-life situation. How did cluster structure impacted Veloxia? For starters, cluster structure helped us a lot.
on not to get stuck in one game genre for a long time and it let us analyze the market opportunities without sharp constraints. This way we were able to build teams which can operate independently, eventually driving the founder independent valuation much higher. Additionally, this structure let us create a collective knowledge base which further enables and inspires people to focus on self-development and higher collaboration.
The teams formed under Veloxia have diverse experiences and have been successfully working collaboratively despite different time zones. Cluster structure requires people to have cross-functional approach in certain parts of the workflows. This way, our multidisciplinary problem-solving muscles have gotten a lot stronger. Veloxia has successfully developed five different titles within the structure. Of course, the solid project management methodology was crucial to achieve this as well.
The integration process itself is a huge challenge as the team doesn't grow suddenly, yet it is more of a process management.
Anyhow, although the results are of high importance, we know that the success story is focused on journey and not on the destination.
You might want to take a look at the links for further information.
Thank you very much. I would be very happy to get in touch with any of you, so feel free to drop me an email.
