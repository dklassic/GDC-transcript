Without further ado, welcome to Beyond Game Design.
So my name is Richard Carrillo, I'm a game director at Ubisoft Toronto, and today I'll be discussing what I consider to be one of the greatest challenges in this profession.
And that challenge is working with the other developers around us, passionate developers who will analyze every design, they will pitch alternate solutions, they will question every direction.
And for designers, this can lead to a lot of frustrations.
And I want to do this talk Because a lot of times I've seen those frustrations become bigger conflicts on the team So how can we as designers embrace that passion that they have and channel it to make the best game possible?
Instead of fighting against it and that's what I'll be talking about today This talk looks beyond the hard skills beyond game design to explore the soft skills that I believe every designer needs in order to build A positive design culture on the team so but first I've been in the industry for 14 years.
In that time, I've been lucky to be a part of five major different studios.
Each studio was filled with honestly amazing and talented people, and each had a completely different design culture.
And what I mean by design culture is they all have different ideas on what designers should own, the design process to get approvals, and also who should be a part of that process.
So all of these experiences have helped me to really solidify the design culture I promote on my teams, and that's what I wanna kinda show you today.
Also, in these 14 years, I've been really lucky to be a part of some amazing projects.
I've learned so much from these teams, and especially the latest we've shipped at Ubisoft Toronto, Starlink Battle for Atlas.
And I want to talk a little bit about that game, just because I do take some examples from that development process and put in this presentation.
So I want to make sure you guys have a good idea of what that game is.
So Starlink is an open-world action-adventure game set in the massive star system called Atlas.
In this game, you'll be battling against an ever-growing enemy threat called the Forgotten Legion, who are taking over each planet.
So in short, it's a vehicular third-person shooter with a simulated enemy invasion that spreads across the star system in real time.
And I'm not sure if that cleared things up, but I hope it did.
So for now, back to the soft skills.
Oh, went too far.
So the main question for today is how do we build a positive design culture in our teams?
And before we can really understand that, we need to understand all the day-to-day interactions that are maybe problematic that lead us to a negative design culture.
And hopefully I can convince you that that's not what we want.
I call these problems negative mindsets.
So negative mindsets are the interactions we have with developers around us that sort of push them away.
And I think it's safe to say that almost everyone in this room is guilty of these at some point in their career.
And I'll go through some of the most common examples, and if you leave this talk with anything, I hope it's that you catch yourself whenever you say some of these or even think them.
The first one.
I'm the designer, let me do my job.
So this is honestly one of the biggest examples that quickly builds that divide in the team.
This is my job over here, that's yours over there, you stay over there, I got this.
I've even interviewed a designer once who used this as their reasoning for wanting to leave their current position at their current studio.
They felt that every time they pitched a design, other people on the team would give feedback and say certain things and pitch other designs.
And I'm thinking, yeah, the nerve of those people, you know, wanting to have an input on their project.
So when you have this mindset, what you're really telling the person is, what you're saying doesn't matter.
Only what I say matters, I'm the designer.
And it coincides nicely with our second one, I know best.
Now this one's usually thrown around when the designer can't convince the other person of their point.
But this is also something a parent says to their child.
And just when the child grows up, they realize the parent's just been winging it the entire time.
So just like with a parent, when you say this, what you're really saying is, I know best, you know nothing.
You haven't really seen fireworks until you witness a junior designer say this to a 20-year vet engineer.
That's an exciting time.
Give me feedback, not designs or solutions.
I've seen this one posted on social media as this positive message, and to me it made me cringe a bit.
The issue here is more subtle.
The designer doesn't want the person to add to the design.
They want feedback on the experience they just played.
They wanna know how it felt for them.
But in reality, everything that person is saying is feedback.
It's just not easy for people to really find the problem and tell you about it, so sometimes they jump straight to solutions.
So what the designer is telling them is, tell me what I wanna hear the way I wanna hear it.
and they're not really trained sometimes to talk in our language, and this statement may push them away to not give feedback in the future.
This is the design we approved.
So this one's usually said when someone gives feedback to an already approved design, and we as designers just don't wanna open that can of worms, we just got that design finalized maybe months ago, or we just want production to keep moving forward.
But what it's really saying is, I don't wanna listen to you or reflect on feedback.
It's saying that nothing has changed, that we as a team have learned nothing since the design was first written, we haven't seen the game progress, we don't have a deeper understanding of what the game is, that we can't look at an approved design and question its purpose in the grand scheme.
And we all know that's never true.
And finally, an old favorite, trust me.
Just trust me.
And the developer's of course thinking, trust you.
Like seriously, why don't you trust me?
Because you're the designer, you know best.
My feedback doesn't matter because we already approved this design a while ago.
I'm not gonna stay late when this all blows up.
And there it is, that divide you kinda see in your day-to-day throughout the team.
And I've seen this happen a lot.
I've even seen developers storm out of the building because they're not being listened to, shouting matches on the floor, and worst of all, I've seen what can happen to an entire team that no longer believes in the game they're building.
These mindsets lead to a destructive, I'm the designer, do what I say, culture.
And as I went through these examples, I know some of you were thinking, crap, I said that last week.
We've all been guilty of these, and honestly, I believe it stems from our biggest insecurity.
Stop trying to do my job.
As designers, we have chosen a profession that everyone wants to be a part of.
And after all, everyone has ideas.
But we also have this fear that if we don't have control and maintain control, that people on the team are just gonna be pitching ideas that don't work, don't fit our systems, they aren't what we're looking for, they're not coming together, they don't make sense, just give me some time, just let me design this, stop trying to do my job.
Maybe that sounds familiar to some of you.
But what is our job?
Our job is to design perfect game loops, mechanics, and systems that engage our players and keep them hooked.
And we do that, and they look great.
Now, I know some of you are looking at this like, what game is that from?
This is a filtration system to a swimming pool.
Sort of just a metaphor.
So we put this system into the game, and we connect it to all the other systems.
But we can't do this section because the technical hurdle is too high, and the directors changed their mind on this piece, and we have some messaging issues here, and playtests came back with some frustrations here.
and afterwards your perfect system sort of looks like a chewed up dog toy.
But it's honestly the team that comes to the rescue.
This idea of stop trying to do my job quickly becomes hey guys, can you help me fix this?
The UI team finds a solution for this piece, the gameplay team reroutes this section, and the art team pitches a cheaper solution to this.
In the end, game design always becomes a team effort.
Designers, we need to ditch that insecurity, we need to let the rest of the team in, and we need to learn to lead.
Because the best teams I've worked with are ones where everyone feels engaged and invested in the experience they're making.
Now of course, I'm not saying everyone should design their own sections.
Everything still needs to come together in a cohesive vision.
And for designers, sharing that vision leads us to our first soft skill for building a positive design culture.
The ability to inspire.
Now most designers know how to communicate their vision, but few know how to inspire with it.
Communication ends with people understanding design, inspiration ends with them believing in it.
The time of I'm the designer, do what I say, that's long gone.
Developers are gonna devote the next three to five years of their career on your designs, they need to believe in them.
And if they don't believe, honestly they'll never stop questioning.
But getting them to believe isn't as hard as you think.
It all starts with the design goals of the feature, the problems you're trying to solve with the design itself.
And for a quick example, I'm gonna turn to the war meter for Starlink Battle for Atlas.
This vertical meter on the right displays the current state of the conflict on the planet.
It shows who owns more ground, your alliance or the legion enemy.
The goals of this feature are listed in priority order.
To display the status of the planetary conflict, to give more meaning to the player's action by showing the impact they're having on the world, and to push that feeling of the enemy as an oppressive and dominating force.
The perfect goals are things everybody wants and nobody could say no to.
These goals should drive everything, all discussion, all design, all brainstorms, and later on I'll show you how they end up resolving most disagreements.
So before you even start designing, create a set of two to three goals and pitch a few of them to your peers.
Use their help to strengthen these goals.
Get them excited about these goals.
If people don't believe in your goals, they're honestly not gonna believe in your design.
With this process, you're not only gaining believers, you're actually gaining advocates.
These advocates will resolve smaller issues across the team that you don't even realize are there.
And step two to inspiring the team, sell the goals then to the people that will implement the feature.
And with their input, build design that achieves those goals.
The design isn't finished until they fully believe in it.
Now I know some of you are worried that this process feels a bit time intensive, but honestly the time spent building a design with the devs will save you in the long run at the end when you're trying to clean up that mess of pipes I showed you earlier.
And step three, pitch all of it to the team.
As always, you're going to start with the goals, because the team believes in the goals, and your design accomplishes the goals, then they'll believe in your design.
And later on during the production, maybe a person's going to come up to you and say, hey, why are we doing this?
This design, I don't understand it.
What's the point of it?
And the answer is pretty simple.
It's because we agreed on this goal, and that design accomplishes that goal.
Do you still believe in that goal?
That question will honestly resolve most questions you get through development.
So to recap, every time we say, I'm the designer, let me do my job, or I know best, we are failing to inspire and we're pushing the team away.
It's our job to rally the team around a solid design.
I'm the designer, let me do my job becomes, it's my job to own the vision and empower the team to own the game.
Own the goals and build the design with the insights from the developers.
Teams have the best results when everyone feels invested.
Oh, there's the information.
So this feedback process becomes one of the most important during production, and to do that successfully, you're gonna need your second skill.
Sorry, I think I skipped one.
So I Know Best becomes, if you don't believe, that's on me.
This is a subjective industry where millions of ideas could work, and they need to believe in your goals.
Throughout production, developers will give you feedback and challenge the design.
Just continue referring to the goals.
Make sure they still believe in them.
And if those goals need to change, make sure everything changes and the entire team still is on board.
So that feedback process I talked about earlier is extremely important.
And the next skill, patience and understanding.
I know it sounds like a Saturday morning cartoon, but it is extremely important as well.
So everyday people on the team are gonna be pitching you tons of ideas, the problems they see in the game, things they wanna do better.
It's gonna feel like everyone's trying to do your job, but it's actually your job to listen.
These people are coming to you because the design isn't perfect.
Something is missing and sometimes the only way they know how to communicate that is by coming up with solutions.
So there's going to be times when people are going to pitch you something that may sound completely out there.
But we need to look past their solution and look at the core issue you're trying to solve.
What goal are they trying to add? What they feel is missing?
So this example I've used previously, I want a gun that kills everything in one shot.
The first time I heard this, I couldn't get past how unbalanced it all sounded.
But after conversation, what they were really saying was, I want to feel powerful.
The solution, a powerful weapon that takes skill to use and is punishing when you miss.
And another example, in the early development of Starlink, one of the engineers surprised me with, this game is pointless.
That's a really harsh statement, it was a little hurtful, but it wasn't an attack.
Something was wrong and it's my job to get to the bottom of what they're trying to say.
So I took this developer to lunch, and after about 10 minutes of listening to them sort of rage, I understood what their feedback actually was.
I don't feel like my actions are having an impact on the world.
So this was something I could actually use.
And this conversation is actually what led to that war effort meter I talked about earlier.
As the player completes major actions on a planet, the meter shows them how the action has changed the state of the world.
So to get to the real feedback, you need to sit with a developer and have a deeper conversation.
Step one, get to the root of their concerns by asking questions.
If they pitch a solution, ask them why they believe that solution works.
And then two, reiterate the issue.
The biggest miscommunication in game design happens when two people are solving different problems.
So this will ensure that you're on the same page.
Also, this may be the first time you've ever even heard the problem out loud so you'll sound really cool.
And three, resolution.
Work with them to find a solution to their problem.
And the solution may be something that's already designed, and if that's the case, just explain that to them.
But still make sure that they believe that solves their concern.
And now you've figured out what they really want, but should you incorporate it?
There's only one question left to ask.
Does it align with your goals?
If so, awesome.
If it doesn't and those goals are still valid, then it's actually pretty simple to explain why you shouldn't do it.
Now, before I came to GDC, I gave this presentation to a few colleagues, and I got some pretty similar feedback, which was, Richard, this looks great.
I love the message.
This list is nice.
It's very in a perfect world.
So what happens when the person is being so difficult that you can't really talk to them?
And I responded, oh, it's the same thing.
Just follow these steps.
No, no, no, no, Richard.
No, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, no, What if this person see is built so many walls around them, so closed off, they don't want to hear your ideas.
If it's not their ideas, they'll let the whole thing burn down.
So, all right.
Think about that passion the person has that's kind of going against you right now.
Now, turn that around and think about that passion going with you.
Think about all the things you could do together and how amazing it could be.
If you're gonna build great games, you need to surround yourself with passionate and awesome people.
So you can't be surprised when sometimes that passion sort of goes down a different path and starts butting against you.
These people aren't the problem, they're actually the solution.
The main question is how do you turn this person into an advocate?
If they're an advocate, they'll not only work hard, but they'll spread that advocacy across the team.
And the larger the team, the more you're gonna need people to drive that vision when you're not around.
To turn this person an advocate, it's easy.
You just listen.
No one is so closed off that they're not gonna tell you about their ideas.
Everyone wants to talk about their ideas.
So all you have to do is say, hey, you want to grab some lunch?
I want to hear more about your ideas.
And they'll go, ah, okay.
And the goal with this lunch is just to listen.
Let them talk, let them pitch you their design.
And of course, the longer they've been thinking about it, the bigger it will seem.
It'll just keep growing and growing and growing to the point where it feels like its own three-year project.
And if you listen long enough, you're gonna see it.
At the center of all this, one major goal that brings everything together, one huge piece that gets them the most excited.
I wanna feel powerful.
I want my actions to have a meaningful impact.
I know I used those examples earlier and it made it seem kind of easy.
Those weren't easy conversations.
And when you repeat that goal back to them, you'll gain their trust.
Because you get it, you listened.
And everything else will just fade away.
And now all you need to do is focus on that goal.
At this point, you're left with three scenarios.
Scenario one, integrate it.
If that goal can't exist alongside yours, and it'll make the game that much better, there's no reason not to put it on the list.
Scenario two, it may be that it already exists as part of your design, but nobody can really feel it.
So if that's the case, show them it's there, and brainstorm ways to make it stronger.
And scenario three, what if it conflicts with one of your goals?
This is honestly gonna be a tough conversation because you need to figure out which goal is better in the overall experience.
And the conversation isn't tough for them, it's tough for you because you have to be open to the idea that your goal isn't the best.
If you walk in there trying to win, you'll get defensive and then they'll get defensive.
But the good thing is that their entire design has faded away.
When you break things down to goals, it takes most of the baggage away and most of the emotion out of it.
No matter what happens at that point, honestly you've already earned their respect.
So to recap, the more we shut down communication, the more we alienate the team.
As designers, we need to be open to all forms of communication.
It's our job to either convince them we're on the right path or work with them to find a better one.
Give me feedback, not designs or solutions becomes give me feedback, designs or solutions.
All communication can lead to the feedback we're looking for.
So make sure to talk it out and make sure that the feedback is understood.
This is the design we approved becomes what are your concerns with this design?
We all know that game development is complex, so there's no point in shutting down someone else's perspective, because they may have seen something different.
The more you use this mindset, the stronger your design will become.
But of course, what happens when you think you resolve the conflict, and that the same issue keeps coming up over and over again across the team?
This takes us to our last soft skill for building a positive design culture.
Trust and humility.
You now have a vision the team is behind, and you know how to incorporate feedback.
You're building trust with the team, but every game hits a wall at one point or another.
When a teammate's play starts to have major doubts, it's not coming together fast enough, maybe it never will.
You believe staying the course is the best option, and you just want the team to trust you.
But what is trust?
Trust isn't blindly following someone because they have the title of game designer.
Sometimes we think it'd be easier that way, but it usually leads to bad games.
To earn trust, you have to give it.
Trust goes both ways.
You have to trust your team to own the experience as much as they're gonna trust you to lead it.
Trust doesn't stop people from questioning design.
Because the moment they stop questioning is the moment they stop caring about what they're building.
And trust is feeling safe.
It's an environment where everyone can speak freely without restrictions.
Safe also means building relationships where it's okay to be wrong.
The final issue is being able to tell when you're wrong.
And that's where humility comes in.
Humility plays a major role in knowing when to alter course.
As designers, honestly, we believe our design is perfect.
We've looked at all the possible outcomes.
Nothing could possibly go wrong.
Except for these few things, you know?
And then this one here, and maybe, you know, maybe I should design that better.
Every designer is guilty of getting married to an idea, of thinking the other developers just don't understand because they're not seeing the whole picture.
The UI team is just focused on the smaller portion.
And a fair amount of the time that may be true because it's our job to hold the entire vision and how everything's gonna come together whereas other teams are focused on specific sections.
But when do we stop trusting our vision and start trusting the skeptics?
Let's take one last look at an example from the war meter in Starlink.
The first feedback I received about this feature came from a tester who was just very confused as to how this was calculated.
The bar shows, and so I explained, the bar shows who has control of the planet and it's determined by the number of bases you have versus the enemy.
Except these dueling bases are not built on the same plots of land.
This was to allow these bases to exist all at once so you get this epic war feeling on the planet.
So as the player gains allies, by building bases, their meter's gonna fill up.
On the other end, you have the enemy called the Legion.
One of our goals, you might remember, was for them to feel oppressive and feel like this dominating force.
Their bar doesn't stop growing when it meets yours.
It engulfs it, just like they engulf the planet.
This overlapping section is owned by the Legion.
At this point, the only way to push your alliance higher is to destroy their bases.
This gives you the room you need to expand your alliance.
After I explained this to the tester, he understood, went on his way, everything seemed fine.
But then the second red flag came from an engineer who repeated that concern, that confusion about how the bar was calculated.
Again, I explained the goals, he understood, and then the third strike came from a level designer.
At this point, I stopped selling the goals.
Something was wrong.
The overlap owned by the Legion was causing confusion and frustration.
There were a few solutions to this problem, but honestly the easiest one was to pull back on my goal of the Legion feeling like an oppressive force and adjust how we calculate this meter.
We ended up making the meter average out between both factions, so there was a constant tug of war.
Now the shipping product had a less dominating Legion, one that just engulfs you easily, and in hindsight though, this was always the better option.
I use this as an example of how designers can get too entrenched in a goal or an idea.
We must have a process that forces us to stop and think differently.
And this one's mine.
Step one, defend the vision.
Every decision you've made up to this point has had a team behind it.
We've built great goals the team believes in.
We follow that up with the design we've built with the devs that achieves those goals.
Step two, listen to feedback with patience and understanding.
Get to the bottom of everything they're saying and discuss solutions.
But the last issue arises when the solution goes against your goals and you still strongly believe in those goals, just in my previous war effort example.
And when three people on the team of different backgrounds say the same thing, it's time to stop and reflect.
The exact number of strikes is gonna change for each team and now that I've publicly announced mine is three, I probably need to increase it.
But the point here is to have a limit when you stop defending your goals and start changing your perspective.
And just let everyone know the reason it's not one is because you can't spend your entire career rethinking everything every time someone brings something up.
So to recap, trust me becomes I trust you.
The purpose of building trust isn't so everyone leaves us alone.
The purpose is to build an environment where all team members can be heard, because we trust each other to want what's best for the game.
And of course, when we falter, the others are going to be there to get things, pick us back up.
Yes, more Saturday morning cartoon stuff.
And there you have it.
These are the soft skills I believe every designer needs to create a positive design culture at a studio.
A culture where everyone feels invested in the game's success.
And these, of course, spark the soft skills.
of the designer mindsets that will dismantle all walls between design and the rest of the team.
Our job is to ensure that every developer on a team believes in each and every one of their tasks, because they understand and believe in the goals that that task will achieve.
They believe in the game that we're trying to make.
The best culture is one with team ownership, a team-driven approval process, and full team collaboration, because the game doesn't belong to designers, it belongs to the team.
So this is a design culture I promote on my teams, and I strongly believe it can help resolve conflicts and promote teamwork across the industry.
And I always like to lend with my contact info so we can keep the conversation going.
If you have any thoughts or experiences you'd like to share, feel free to hit me up.
I hope you enjoyed the talk.
Before I head out, remind you all to hit that review that you'll get your Nemo for.
And I'll be doing a full Q&A tomorrow at 11 a.m. at the UB lounge.
There I'll talk again about all three talks I've had in the past four years.
Also, if you're interested in hearing more about Starlink, that great game I showed you, our lead engineer is gonna be giving a talk tomorrow at 11.30 a.m. about giving the starship physics and controls that feel real.
That's gonna be in room 2001.
And right now, I'm gonna be heading over to the wrap-up room real quick, so you guys can all join me there if you want, if you wanna ask questions and dive deeper into this kind of issue.
Thank you.
