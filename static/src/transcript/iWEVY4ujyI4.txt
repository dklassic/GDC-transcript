Welcome. Thanks for coming out. I really appreciate it.
So you're here to talk about, or to listen to me talk about Broken Age and the animation style and workflow.
Let me start off by telling you a little bit about Broken Age.
If you haven't played the game, it's a point-and-click adventure game.
It's a story that deals with a young boy who is trying to find his own independence.
and about a girl who is trying to save her village.
The way that I'll proceed is I will talk a little bit about my own background, just briefly, and then I'll go into the inspirations of the Broken Age animation style, and then I'll go into sort of the nuts and bolts of how we did it, and I'll try to leave a little bit of time at the end for some Q&A if anybody has any questions.
So I have been in the industry for 14 years.
For 14 of those years I've been at Double Fine.
So I have been there my entire career.
I think in game developer years, that equals somewhere around 800 years, I would say.
I'm the Yoda of the studio.
The hair growing in my ears now and bald head, everything.
In my time at Double Fine, I've...
had several roles, primarily animation, but I've also done rigging and character modeling as well, which came in handy during the pre-production of this game.
Just briefly, I worked on Psychonauts as an animator, Brutal Legend, Once Upon a Monster, I was the lead animator on that game, Costume Quest.
Did some work on that, Middlemanager of Justice, which was the first time I'd done some 2D animation professionally.
And then Autonomous, which I don't know, some of you may have heard of Autonomous.
Worked on that with Lee Petty.
And Hack and Slash was also 2D.
So having that 2D and 3D experience actually came in handy with Broken Age.
So let's go ahead and get started.
In 2012, after a 13-year break from the point-and-click adventure game genre, Tim Schafer saw an opportunity through Kickstarter to return to that genre, and he ran a successful Kickstarter campaign, which you may have heard of, and the game that came out of that was Broken Age.
Tim tapped me early on and asked me if I was interested in coming onto the team and lead the animation group and come up and develop.
of the animation pipeline.
Now I'd worked with Tim on two other games, Psychonauts and Brutal Legend, totaling almost 10 years of my life.
Tim told me this would be a short game, probably one year long.
So we are now three years.
My relationship with Tim is I love him very much, but when it comes to working on his projects, I feel much like this woman.
At the end of this ride, I'm sure she still loved her son, just like I loved him at the end of the projects.
But they can be difficult and painful at times, but also very rewarding.
So.
Tim knew that he wanted the art of the game to be based off of Nathan Stapley's art style.
Nathan had been at the studio for even longer than I had, and Tim had always really appreciated his work.
And I was very familiar with it.
These are actually three paintings that hang in my home that he did.
So I was really excited to be able to come onto a game and actually develop an animation system where we'd be able to bring his style to life.
Early on in the process, we had some studio artists, Lee Petty, who was the art director on the game, Scott Campbell, Nathan Stapley.
Peter Chan, they were all doing just some character mock-ups.
I was not on the project yet, but I was monitoring the forums.
We have some internal forums and I was keeping an eye on those forums and just seeing what kind of styles they were coming up with just so that I could start thinking about what type of animation we'd want to do.
We did know at this point we were going to do 3D, but that's all that we knew.
Lee Petty, who I mentioned before, he and I were...
taking our lunch breaks and we were going into one of the back rooms and we were doing just some drawing sessions. And for a couple of those sessions we were focusing on sort of a mid-century modern style, a very somewhat limited but really beautiful designs. UPA, which you may have heard of, is one of the studios that's known for that. And then I was also really interested in Charlie Harper at the time, the late illustrator Charlie Harper.
I thought his silhouettes were really bold, he had a really graphic style, but also very expressive.
And I thought it could actually work if we ended up going with Nathan's style, which is very painterly.
I thought it would work with those backgrounds.
Then I decided to start doing some animation research, started looking at the old...
LucasArts adventure games.
When I started looking at those, I realized though that they were extremely limited back then.
Really beautiful in their own way, but most of the animation was probably about five frames per second.
I knew that we wanted to have more fidelity than that for this game.
So at the time I was playing Year Walk, as well as Machinarium.
And I really appreciated the level of puppetry that those games had, but I didn't want it to feel like paper cutouts.
Rayman Origins came out around the time that we were starting to develop our pipeline.
I knew that we didn't need it to be that fleshy.
This was an adventure game.
It wasn't a platformer.
We didn't need to have that much squash and stretch, but we took a lot of inspiration from the game and from the UB art pipeline.
One of their animators and art directors actually did a talk at GDC a couple years back, which was very inspirational in what we did.
I also looked at...
shadow puppetry. I didn't...
I knew we wouldn't want something as stiff as that, but definitely took some inspiration from it.
Eventually I went to Tim, and I said, Tim, well, what do you want to see in this game?
And, you know, I wanted to get his thoughts.
And his thoughts were, do something cool.
That's what he told me.
And my response, which is typical, is...
throwing an angry furrow in his direction.
But eventually I realized that was the best advice that he could give me.
He gave me the opportunity to explore creatively without boxing me in.
And so I really appreciated that.
So our discoveries.
The art styles had expanded quite a bit.
I knew we'd need lots of expression and fidelity in this game.
We wanted to show off bold silhouettes.
It would not be a 3D game, so each view had to have a very nice, bold silhouette.
It needed to be compatible with many of our current tools that included modeling, animation, and rigging, as well as implementation.
We didn't have the budget or the time to build an entire new suite of tools.
We knew we were gonna go with 2D planes.
And then we're going to use alpha channels for the soft edges because we wanted to preserve that look of Nathan's painting style.
And after talking to the programmers, it was decided we should use a runtime joint-driven system.
We would get huge memory savings, a much smaller memory footprint.
It would also give us the fidelity that we wanted, knowing that we were going to get lots of dialogue that we would be animating to.
So, my advice, listen to the programmers.
They are probably better at math than you are.
They have the numbers to back it up.
And we would introduce a new system called flipbook animation.
And all that is, it's pretty simple.
It's keyable texture planes that you can just turn the visibility on and off.
So we'd go with a hybrid approach, which we called 2.5D.
That can mean different things at different studios, but what it meant at our studio was flat layer texture planes with transparency, and they're bound to joint chains, and each piece of geometry could be turned on and off, the visibility could be turned on and off.
Next we needed to decide how many views we would need for each character to get the desired fidelity.
So this was an early test.
When Tim did the Kickstarter, he didn't have a story, he didn't have a design, he didn't have any treatment.
He wanted the backers to experience building a game from the very beginning, even before there was an idea.
And so we couldn't just sit idle as a team, and so we came up with this scenario, which we called the Hipster Lumberjack.
And the hipster lumberjack actually ended up in the game because the backers loved him so much.
He went through a little bit of an evolution.
But this was sort of the first prototype version of hipster lumberjack.
It's the first model that we built out, and it's the first rig.
Initially, we thought we were going to need to do three separate rigs for every view.
But ultimately, with this test, we proved, okay, we can get away with just one rig, and we would just put all the views, we'd put the front, the side, and the back views all on the same rig.
So you can see here, I did this really simple walk, and then I'm just turning the views on and off, each different view, and I did very little changes to the actual animation.
You can see it's a little janky on the ankles and stuff, but it did prove out that we could do it.
So, really quickly, so what we have here, I decided, okay, well, I see that we can have a front, side, and back, but how are these going to all work together?
Or would we be able to overlap the flipbooks?
And so I did, okay, let's do a turn, a 180 turn, because the head leads, and then the body comes along, and then the legs come along after that.
And so there's actually very little joint animation here.
It's almost all just flip books turning on and off.
You'll notice though that the arm travels across the body and then just before it gets to the back view, it pops back into the position that it was in before.
Here it is, it's a little bit slower.
And so the character is in the same view, is in the same pose, front and back, it's just the flip books are turning on and off.
Next, we decided, okay, we're going to have a lot of dialogue, let's do a quick dialogue test.
So, I don't know if you know who Chris Remo is, you might know him from Idle Thumbs, the podcast, he was nice enough to do some scratch dialogue for us.
And we ran this test.
With no sound.
That's interesting.
Well, it gets the point across.
That's just flipbook mouth with joint driven. Everything else is joint driven except for the mouth is all flipbooks. Hopefully we have sound for the other slides, I hope, when we get into the cutscenes.
Okay, so front, side, and back view.
You'll notice though that we didn't do straight on views. We didn't do We didn't do a totally front-facing face, or a totally profile face, or a total straight back view.
And we did that because we didn't want the characters to flatten out against the backgrounds, and so it just kept some dimensionality on them.
Alright, modeling a character with this system.
Super simple.
would take just a few hours to model a character out.
So what the 2D artists would do is they would create a character and any piece of the character that needed to be on its own plane, they would just break out.
And so it was this exploded view.
And we would take that exploded view and we would just bring it into Maya and we would build planes around that view.
And then we would just UV map.
the textures onto those planes.
So it's very simple.
Most of the work was in all the painting, but actually building the model didn't take very long.
Let's do a little bit of a closeup on how we did the eyes and the face.
If you look, we just did proper edge loops around the eyes because we knew we wanted to have a lot of expression in the eyes.
All we were gonna have was eyes and mouth for facial expression, really.
And so we...
we made sure to do proper edges, just like if you did a 3D model.
You'll look here.
We cut a hole in the eye socket, and the reason for that is we wanted the pupils to be able to be obscured by the skull, or the brows, however you want to put it.
And then, here's the whole face broken up.
You'll see those are the eyelids.
And then that's what we call the eyeball plate, and then there's the pupil, and then the specularity just sat on top, and those are all just separate planes.
And I like the specularity being separate from the pupil because when the eyeball would move around, I didn't want the light of the eye or the specularity of the eye moving.
I wanted it to stay in the same position as if the light stayed in the same position and the eye would move.
It just gave a nice round, wet look to the eye.
Rigging a character, pretty simple rigs.
Ended up being about 20 to 60 joints.
We were asked to not go over 50 joints, but occasionally we pushed it into the 60 range.
What you're seeing there is we wanted IK on the legs, and we added an extra control above the IK leg system so that we could pull the legs either out, but mostly we could pull the legs in together so if a character went into profile, the legs would be close together.
We broke the arms out as separate They're not attached to the body, but then the clavicle though, let's see if I got into that I can't see it here on my monitor, so I have to look up there and the reason we did that is so the arms that shoulders can actually go across the side of the body to give the feeling of The character would be turning And then I wanted the clavicles, though, to still be attached to the torso and deform, just to give it a more organic feeling, as well as the spine.
And then we could do some scaling in the spine as well.
We could do non-uniform scaling, which was really nice, we could get some squash and stretch.
And the head was also separate, so that we could move it in X, Y, and Z translation.
Okay, so what you're looking here...
This is our flipbook system working with the joints.
You can see when it turns into profile, all it is is just flat plane.
And this character has, so if you look at the bottom of the character, not the head with the bottom, it's actually just flipping between a front view and a side view.
And then the top is using three different views, which is a front view, a side view, and a back view.
And it gives it almost a 3D look to it.
Here it is with just.
These are just the planes without any texture on it.
In the first act of Broken Age, we actually did not have a very good flip book system for turning them on and off.
So you'd have to go and dig through all these menus in the channel box and you had to manually key it.
But then for the second act, because we found that to be such a pain, one of our TDs built this system for us, this tool for us that would.
organize all the flipbooks and you could filter them if you wanted to and then all you had to do is just click on them you could even scroll down anytime it goes yellow that means it's turned on if you have autos key set it just automatically turns it on and off and sets a key for you and so it actually sped the process up dramatically.
Okay, so let's look at the head and facial setup.
So, if you look at these two characters, when we rigged the head up, we made sure to use world orientation.
And the reason we did that is because we wanted to scale the character.
If this character wanted to look from left to right, we would just scale everything in negative X.
And we would hide that, the pop, just by adding some squash and some stretch to the head, you know, blink the eyes.
and that hid most of that.
You can see it here.
This is just with the planes turned on, the textures turned off.
You can see when the eyes blink, there's just a flip book that turns on.
So it's a pretty simple system, but it's effective.
Okay, VisiumSet.
So the way that the mouths worked on the characters is we would just do replacement animation, just like you would in certain stop motion films.
We didn't have a lot of, you could scale the mouth a little bit because it was bound to a mouth joint, but mostly we would just turn the different V-zines on.
And the 2D artists would send us this V-zine set, we would then map that onto just a geometric plane, each one separately, and then we would bind that to a mouth joint.
We ended up only doing front view.
We thought, oh, we'd need the side view too, because characters talk when they're facing sideways.
But we realized you could just scale the mouth a little bit, and that worked just fine.
And so that saved us quite a bit of time.
Do we have sound?
Head east.
There is an extremely territorial snake in the other direction.
Gotcha.
Okay, so that was just a test, um, just showing how the flipbook mouse worked with some dialogue.
Alright, animation types. So we had kind of three main animation types.
We had fully animated cutscenes, which are all hand animated, and vignettes.
And vignettes were a fully animated cutscene, but...
with no camera. The camera was just using the game camera.
And usually gameplay was still going on, but there might be a couple of characters doing something together in the background, so we considered those vignettes.
We did scripted cutscenes, which was...
we would build those. I'll go through each of these, by the way.
Those were built using what we called canned animation, which is pre-authored animation.
And I'll show you the huge time savings that we had because we used that system.
And then stance animations, which would include any kind of like a breathe, also locomotion, we considered stance animation.
Let's talk a little bit about cut scenes and vignettes.
So this was a 2D game.
Everything was flat with the illusion of depth.
And so what we did is, so with our camera we were very limited.
So we thought of it as a stage, our scenes, we would try to think of it as a stage.
but we had a stage with a camera, but it was a camera that couldn't be rotated.
So it could just be moved around like this.
You know, we could rotate the camera like this, but we're not allowed to rotate the camera in this direction.
And so, but that worked out great for the most part, but it kind of started getting a little bit stale.
So we started coming up with some ideas of how we could make the camera a little bit more dynamic.
In this shot, I thought, you know what?
It could use a POV shot.
So I gave it a try.
This is the first time we tried it.
If you watch.
I don't believe she'd leave something this dangerous lying around.
What's that?
Nothing.
So that was a simple POV shot, but it added some dynamics to the scene, and I thought that it called for it.
And all you had to do was, you would just take Shay, and you just drag him out of the way.
just below the camera, and then you just move the camera around in X, like that.
And so it was a really simple solution, but I thought it added variety.
So next...
So our animators kept annoying Lee Petty.
I always bring up Lee Petty, who's here in the front row.
Because what we kept doing is we wanted to push the camera in on characters closely, you know, because we thought the shots would call for it.
But what would happen is the backgrounds wouldn't hold up, so the resolution would start to fail.
And so we came up with a solution of, well, why don't we just build cutouts, or why don't we paint cutouts?
of those areas that we wanted to zoom in on and we would make them a higher resolution.
We would just shove, have them pulled off to the side in the scene and then your camera could just in one frame cut over to those.
So let me show you this scene.
I can't see her anymore.
Forget about the creature.
We need to move you to a safe location.
Come with me.
Okay, so you saw Shay in front of that red console, and you can see the small version of it there in the middle, kind of in the middle, in that middle scene.
And then you can see the high-res version of it off to the side.
So this is actually what was happening. I just pulled the camera way back so you could see what was going on in the scene without the cameras.
So Shay scaled up.
such a simple solution to a problem that we had.
And so our characters are popping, they pop all over the place, especially if you look to the, on the other side you can see, I wanted to do some reverse shots and so we'd build these extra little plates that you could put the characters in front of, just scaled up.
And then the resolution held up for us.
We would generally do a three-stage animation process for our cutscenes.
Most people are familiar with it.
We do a layout pass, and then a blocking pass, and then a polish pass.
I'll just give you a brief example.
Hey, that's all we can do. We're pulling out.
No! I need to save this last one.
Don't make the same mistake you did last time, boy.
You said you trusted my instinct, right?
I don't understand. What is it about this creature?
I don't know, but it's important.
And so when we got to this stage, we could have Tim Schafer, who was directing the game, and he wrote all the dialogue, he could watch these and give any feedback early on, and that way we wouldn't waste a bunch of time doing animation that he didn't actually want in the scene.
And then a blocking pass would look something like this.
We're pulling out. No! I need to save this last one.
Don't make the same mistake you did last time, boy.
You said you trusted my instincts, right?
I don't understand. What is it about this creature?
I don't know, but it's important.
You see those white dots on the back of Shay's head?
Those are actually his specular highlights.
They just didn't get turned off.
That bothered Tim for two months.
Every time we'd play the game, he'd see that.
And he's like, when are you going to turn those off?
And we're like, when we do polish, we'll turn them off.
But just to bug him, we kept him there.
And then final would be the polish pass.
That's all we can do.
We're pulling out.
No, I need to save this last one.
Don't make the same mistake you did last time, boy.
You said you trusted my instincts, right?
I don't understand.
What is it about this creature?
I don't know, but it's important.
OK.
OK, next, scripted cut scenes.
OK, so scripted cut scenes, I mentioned, we would use pre-authored talk animation and pre-authored gestures.
We called it canned animation.
And we would then.
put those together in what we call the cutscene editor.
And I'll show you a little bit of that in just a minute.
So this is just Shea.
We generally do three talk animations.
I'm sorry I used the word animations.
I know that bothers some people.
But we do a 40 frames, a 90 frames, and 130 frames, just so that we had variety, depending on how long the dialogue was.
We didn't have a blending system, because the flipbooks, there was no way for us really to blend from one flipbook to another.
So we had to get creative so that characters wouldn't pop back into their default pose.
But everything would return to their default pose.
And then we'd do these gestures.
A nod positive, a nod negative, shrugs, and points.
Just on a side note, if you look at Shay, when he was doing his nod, this is... it looks pretty three-dimensional.
But all we're doing actually is just...
deforming the geometry with joints up and down, and it gives it that illusion that his head is actually nodding up and down. I just thought that was an interesting thing that I'd point out. This is a side note.
Okay, so this is the cutscene editor.
It's a custom-built tool that we have used since Psychonauts, actually, and Tim's Games have outrageous amounts of dialogue.
This game actually had five hours.
With Act 1 and 2, we're looking at five hours of scripted cut scenes.
And those were all generated by one animator.
So it's a pretty effective system, as long as you have the canned animation to work with.
You can see that it has the characters who are in the scene.
You have the girl, which is Vela, and then the tram priener.
and then it has the dialogue in there, it has the animation, each animation is in there that it's going to use.
The cameras are actually not Maya cameras, you can see there's a camera track.
Those are cameras that were set up in the game, and that the game sees each of those, and then it moves the camera to where it's supposed to be.
We weren't allowed to do panning cameras with scripted cutscenes.
You just have to just pop to the different scenes.
So you are limited by what you can do, but it sure saves a lot of time.
Here's an example.
We use these a lot for dialogue trees, actually, which Tim's games have a lot of.
We have a sound.
Your name?
Well, yeah.
But my dad said, hey, losing an A is better than losing an I.
Your dad's pretty funny.
He used to be, before he joined this cult.
Oh, whoops. Did I say that too loud?
Hey, is there any way out of this cloud?
Think I'd be here if there were?
We used to have a cool feather bedder that went straight down to the forest below.
But Harmony took it out.
So it's pretty effective.
I mean, it doesn't have as much fidelity as a fully animated cutscene might have, but it definitely does the job.
Okay, if you notice, there was lip sync during all those, and we did not have the time to animate all the lip sync.
So let's see.
So, Act 2 of Broken Age, we're looking at over 47,000 words.
Most of those would have to get lip-sync.
And we were a pretty small team, and there's no way that we could pull that off by ourselves.
So we use an auto-lip-sync tool, and it's a third-party tool by AnoSoft.
It's very effective.
What we would do for this game is the 2D artist would give us a visem set.
We would then take that, we would just map it onto a plane and put it onto the character, bind that to a joint.
We would then use what we have, this is an internal tool called the animation toolbox.
And what this does is this lets us save poses out on specific joints.
And in this case, it is a joint and a flip book.
And so those are our phoneme sets that we've set up, which are just poses that are saved.
We then take those phonemes and we match them up with the software's phonemes.
If you look, it's like the ah has A-E-ah, ah, A-W, and A-Y.
Then.
We take that and we open up our custom interface that we've built for the software and you can actually bring in the line codes from the dialog database and what it does is it looks at the line code and then it looks at the waveform and it also looks at the text and it generates a it generates a Maya file and that Maya file, you can just actually open it up and make any changes if you need to but if you open it, all you see is the mouth just moving and talking.
So here's an example of one that an animator hasn't touched.
It's just out of the arcade.
I beat my own high score on 3 Hyper Crit, and I was like, if I can do that, I can do anything!
Right, so that's Gus.
That's actually voiced by Pendleton Ward from Adventure Time, if you recognize the voice.
If you want to know any more about our dialogue system, Anna Kipnis, our lead gameplay programmer, is giving a talk this Friday.
It's a really good talk.
It's on our entire dialogue system, what we've been using for years.
So if you have an interest in that, go see that talk.
All right.
Player locomotion.
I'd mentioned stance animation, which include player locomotion.
Very important in this game.
It's an adventure game, a lot of walking.
Sorry about that.
So we had west and east directions, and we had northeast and we had southwest.
We had northwest and southeast, and that's what we were gonna stick with.
We ran some tests and played it a little bit and realized maybe it was a little annoying to make people always go at an angle.
And so eventually we added north and south directions.
But every direction that we added, we needed to author new animation for.
And not only did we need to author one speed of animation, we ended up having three speeds of animation in the game.
So we had a walk.
I'll show you.
I'll show you an example.
We had a walk, and we had a trot, and then we also had a run.
And these are for our player characters.
We have two player characters.
We have Vela, and we have Shay.
So there were certain times we wanted to use walks.
So here's an example.
A confined space on the spaceship.
he's walking around.
We would not want the character to be running around in there.
Probably not even want them trotting because the area is so confined.
And so the programmer could just lock out the locomotion that they wanted to.
And then to the opposite extreme, we have big hallways, which that's when we determined we needed to have some runs.
And so there's Shay running back and forth because you didn't want the player to have to every time walk slowly through those corridors.
They would get bored and maybe stop playing your game.
What this shows is just, this is all Vela's anims, right here, these are all of her walk anims put together.
So we had eight directions, three speeds, and we needed to author 15 separate animations for locomotion for the player character, for her and then for Shay.
And then for north and north, or sorry, west and northwest and southwest, we could just actually mirror them in the game engine, so we didn't have to author those.
All right.
Perspective scaling, that's perspective scaling to the extreme.
It was something that was very important in Broken Age.
So as the character goes back in the distance, they scale down and it appears that they actually are moving much more slowly.
And that was really important in this game because we didn't actually have real depth.
We were faking it. We were faking it by scaling the character down, but not only scaling the character down, we need to scale the speed down of the character as well.
So, let me show you an example of the game with perspective scaling on.
but perspective, but root scaling not turned on.
You can see how quickly she moves.
So she's actually moving at the authored speed that the animator authored her at.
But when she scales down, it looks like it appears that she's moving much faster.
And so the solution is root motion scaling.
So you'll see here.
This is feeling much better than it did before.
Feels like she's set back in perspective.
But I wasn't 100% convinced by it.
I thought that it could be improved, and so I started doing some tests.
I did this test.
of Vela, just in Maya, this is on one of the scenes on the beach, of Vela walking on the beach.
And so I had felt that before the spacing was wrong when she was back in the distance.
And so I ran this test and I got it looking to where I was pretty happy with it, and then I took it over to, I showed it to Anna Kipnis, who is our lead gameplay programmer, and I also sent her...
images of the curves so that she could see how the curves were.
You know, it's sort of very gradual and then it speeds up.
And then not only that, in this game, this is the curve of the scale of Vela.
And so we had a global scale node that would allow the animators to scale the entire character up or down because we were using perspective scaling and forced perspective.
So here it is. It's a little subtle, but I think you'll see the difference.
This is it with the new perspective, the root scaling that Anna set up.
I just felt like it gave it much more depth than it did before.
Okay.
So, we're getting near the shipping, the first act of Broken Age.
We were running the game.
It could run at 60 frames per second.
Cut scenes were running at 30 frames per second because they were authored in Maya, but the game could go up to 60 frames per second during just, when you're just walking around.
And one day I came in and Oliver Fronsky, he's our lead programmer, he was messing around with this pixelized, pixelated version of the game.
And when I saw this, I was pretty intrigued, and I actually saw a cut scene play, and I felt like everything felt cohesive suddenly.
And so we started talking about it, and what we realized is that the flip books were clashing a little bit with the game, when it's with the character and with the joint-driven animation.
because you had one thing just, you know, that was such a stark change and then you had the joints that were, you know, look like they were being interpolated by the by the computer at 30 to 60 frames per second.
So this is what it looked like.
This is probably running close to 60 frames per second.
Like it looks cool, looks really smooth but it doesn't look, um...
very hand done. It doesn't look like hands touched it, I felt.
And so what we did is we re-sampled the animation down to 15 frames per second.
Can you see the difference?
This ended up working a lot better, I felt, especially in the cut scenes when the flipbooks would turn on and off.
There wasn't such a stark contrast between the joint-driven geometry and then the flipbook driven geometry.
So it's a subtle change.
It was actually somewhat controversial.
Some people didn't want to do it and some of us wanted to do it.
But we ultimately won and we went with this.
So we thought we were golden at this point.
But then we watched one of our cut scenes play, which is this one.
Let's see what we ended up with.
That.
That's what we ended up with.
And so my hopes were somewhat dashed for a moment that we weren't going to get to resample to 15 frames per second because of that.
And what's happening is.
The character's animation is resampled down to 15 frames per second, but the camera is not.
So the camera is still running, in this case, at 30 frames per second.
This is an old animation problem.
If you had a background plate that was moving on 1s, but if you had your actual animated character on 2s, you'd get this horrible strobing effect.
And so what Oliver did is he went in and he set...
he set it up so that the character's root motion would actually move at 30 frames per second or 60 frames per second, whether it was a cutscene, it was 30, if it was in-game, it was 60.
So the root motion actually would not resample.
And that works.
This is what we get when that happens.
So then it's nice and smooth.
So the character's actually moving at 30, but all of her limbs and everything are actually animating at 15 frames per second.
And that was a great solution for us.
Okay, so one of our biggest headaches on this project.
we had no Z depth buffer.
And the reason we didn't have the Z depth buffer is we, one of the big reasons is we needed the memory for transparency, we needed it for the transparent textures.
And everything is pretty much a painting in this game, and we needed as much memory for that as we could have, and so we chose to drop the Z depth buffer.
That caused a lot of animation bugs, because the engine didn't know how to sort all the different planes that we had created, if you rotated them at all, other than what we call the Z, which is the Z rotation like this.
If you rotate them at all towards the camera, everything would just blow up.
We had a couple of animators that were having a hard time with this, because...
When you're working in Maya, we're actually using a 3D camera, and you'd turn the camera, and it looked fine.
There wasn't any problem.
You could even turn the head a little bit on the character, and it would still hold up.
But this is the result that you would get.
OK, that's enough.
What do you mean, that's enough?
Tiny enemy ships are approaching.
I don't see anything.
I need to save this last one.
You're going to endanger the whole mission to save one creature?
Just give me a second.
So you can see, we ended up with lots of bugs.
Most of our bugs in the first act was because animators thought that they could rotate things however they wanted to.
But that's the result that you would get.
Even just a little bit, it would just explode like that.
If you want to know a little bit more about that, Oliver Fronsky, his website, he actually has some papers about it, and you can go and find out more technical details about that system.
You might find that interesting if you're a TD or a programmer.
Okay, so what we learned from this hybrid approach...
to mold your pipeline to your current tool set.
We found that that was very important.
We knew how to use our tools.
Our animators knew how to use the tools.
And so why start over if you don't have to?
We got huge performance advantages from using joint deformation versus sprite sheets.
It was a really easy ramp up for 3D animators, except for the rotating the limbs the way they weren't supposed to.
That was the only exception to that.
Joint-driven deformation, it really allowed the fidelity that we wanted in this game and that made Tim happy.
The 15 frames per second, we felt that that blended really well with the flipbooks.
It was kind of a last-minute decision, but we went for it, and I'm glad that we did.
The scripted cutscenes, it will save thousands of animation hours.
It truly did save us, and it's what allowed us to make this game and to complete this game.
And also I do need to mention we had an outsourcing team up in Oregon, in Portland, called Super Genius.
And Alex Yao and his team did an amazing job for us.
So we worked in tandem with them to finish this first act and the second act that we're almost done with.
So some problems, additional flip books, you know, whenever you'd need a different flip book.
Like if you needed a new hand.
you had a point, but maybe you wanted some horns, you would have to suggest, you'd have to ask a painter if they could do that for you.
They would then paint it up.
We would then have to have a TD apply that to a geometric plane and put it onto the character.
So that was a little bit of a problem, but not too bad if you're communicating well.
And then using transparent objects required us to lose the Z-buffer, and that was probably our biggest problem as far as animation goes, but we worked around it.
Really quickly, Shea memory totals.
These are from our lead programmer. He shared these with me. This is for Shea in Act 1.
So the rig plus all the animation.
you're looking at 10.7 megabytes for the animation.
The rig is only 170 KB.
And then with the textures, the chase textures, 25.3 megabytes.
And I think that includes all of his outfits.
He actually has multiple outfits.
So that's only 36 megabytes for the memory.
And then if we'd gone with the sprite sheets, which I initially was thinking about, we're looking at 15 frames per second.
You're looking at 7.4 gigs, and so it's just a huge difference.
So it was a big savings for us as far as memory.
All right. Questions? I think we have some time. Pretty sure.
Maybe we have more time than I want. How are we doing?
Yeah.
Anybody have some questions?
Yeah, hi. Thanks for a great talk.
I was just wondering, how did you solve the C-buffer depth bug?
Did you work around it or did you come up with a solution?
We worked around it.
So basically what we'd have to do, we ended up writing a script which you could, if you had the animation open, you could just click on it.
What it'd do is it'd remove any rotation that was unwanted.
And that would just go through the entire whatever, if it was a cut scene, it would just go through the entire cut scene and remove any, for us, it was any x or any y rotation that the character had.
And that generally fixed it, the problem for us.
All right, thanks.
Hey, so you were talking about the matching the phoneme data with the mouth animations.
I was wondering, I think you might have mentioned it, did you do that before you implemented it into the game or was that at runtime?
So matching the phoneme data with...
Oh, okay.
So...
What we do, I think this will answer your question, we would actually generate that beforehand, and that would actually create a Maya file.
Then those Maya files, we'd export out to the game.
And then it would play a priority animation just on the mouth, like a mouth joint.
So that's why the rest of the body could move, and it would just play this priority animation on the mouth joint.
Does that answer the question?
Yeah.
Okay, great.
Any other questions?
That it?
If you have any other questions, I can stick around since we have a little bit of time.
You can come up or you can you could always shoot me an email.
I'd be happy to to answer them for you.
So I think that's it. Thanks for coming, you guys.
I really appreciate it.
