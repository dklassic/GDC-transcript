So first, hi everybody.
I'd like to remind you just to turn off your cell phones.
Well, this is my first time speaking at GDC.
Last time I've been here was in San Jose, actually, and it was in 2001 as an attendee, so it's been a really long time.
I'm really amazed at how this event and the community has grown.
It's just insane, it's awesome.
Before I begin, I'd like to say that I'm really honored of being able to share some of my experience with you today.
I hope this talk will really bring you useful information and insights when designing and developing systemic AI.
So my name is Christine Blondeau.
I'm a game designer at Ubisoft.
I've been in the video games industry for now 16 years, and here are some of the games I've worked on that you may have heard of.
So the reason I'm here today is essentially to give you an insight about the methods we use for designing systemic crowd events in ACU's open world.
So this talk goes from the vision we had in mind to the goals we set, and I'll finish off with how we got there and the avenues of improvement.
So in ACU, we built, so ACU was built for next generation consoles, and we had to think about how we're gonna bring the next gen open world.
How do we bring AC's open world to the next level?
To answer this, we first needed to inspire ourselves with what was happening in the streets of Paris during the French Revolution.
And what transcended the most from the research we did was that Paris was heavily populated and highly buzzing with life at all times.
So we thought, Paris should feel as if it's living and breathing on its own.
That was really important for us.
And you'll see why later.
And that our systemic AI should make the world around the player feel vibrant and create emerging gameplay situations.
So for Paris to feel and living and breathing on its own, we first needed to create an ecosystem in which NPCs would have their own sets of behaviors and reactions.
allowing them to interact with each other.
So the NPC's ecosystem and crowd events were designed to be NPC-centric, which means that the player doesn't have to get involved for things to happen around him.
He can be involved and they will react, but he doesn't have to for things to happen.
So this would create some spontaneous situations around the player without requiring his inputs.
We wanted crowd events to have some kind of a catalyst effect on the NPC ecosystem and cause emerging gameplay during free roam and during missions, which was a challenge.
To achieve this, we needed to review our usual ways for developing crowd events.
Traditionally, events were scripted by hand and it was very time consuming to create and maintain individual events throughout the whole city.
Not only did the explosion of content to create and maintain was unrealistic for the time we had, but most importantly, the traditional ways didn't address our desire to generate events unpredictably around the player.
So before we dive into the crowd event system, I need to give you an overview of our NPC ecosystem so you better understand the link together.
This will help understanding how both systems interact together and how they can create emergent situations.
So the NPC ecosystem is composed of four factions, as you can see here, which each have their own sets of behavior and sets of reaction.
Factions are aware of each other and aware of Arnaud and can interact together when they are interested.
All factions can be used as actors for creating crowd events and can be set to play as either the enemy or the victim.
So first off we have allies.
Allies are armed civilians who fight to defend the people and the civilians in trouble with extremist or royal guards that we'll see later.
So when they see Arnaud in trouble, they will come and fight by his side, for instance.
When used in crowd events, allies took the role of victims the player could defend and save.
We have the extremist faction, which are violent thugs that can be found on both sides of the revolution.
They will look for trouble and end up attacking anyone they feel threatened by, especially armed citizens, which includes Arnaud.
Extremists were used in certain crowd events and took the role of enemies the player could fight and kill.
So when seeing allies, extremists will threaten them and try to pick a fight.
They do the same to Arnaud.
When attacked by allies or guards, extremists will start fighting them back.
And if they get outnumbered by guards, they'll run away.
If you want to avoid fighting them, just keep your distance or blend in crowd and they will leave you alone.
So here's a, oh, did it start?
Oh, yeah.
So this is a random encounter.
I was just walking the streets, and above we could see extremists and allies that just meet up and they started shooting each other.
That was totally a random encounter.
So little things like that sparkle in the city all over, and it depends when factions meet, and it's totally random.
So we have Royal Guards.
These act as the police and try to maintain law and order in a city.
Guards are neutral and will only act against those who they see committing crimes and those who they see suspect of doing so.
When we use them in crowd events, they played a neutral role and they would put the players, they would challenge the players' self-skill also.
The player wasn't required to kill them to succeed the event.
We rarely put the guards in like the bad guys situation since they were neutral.
If royal guards see someone drawing their weapon, they will send them a warning to make them sheet it back.
So in this example, we could see Arnaud, just he took out his weapon.
So already they're watching, they're paying attention.
And after a certain time, they will come to you and make you sheet back your weapon.
And they do the same for any NPC that can unsheet their weapon.
So if they see a fight, they will join the party and fight against the troublemakers.
If they see somebody who has recently killed, who has been recently killed, so a body on the floor, they'll start investigating and try establishing a suspect around the body.
So try staying away from dead bodies.
If the Arnaud would be too close to the dead body, they would accuse him, or they could even accuse allies or extremists also, in the vicinity of the bodies.
When being chased by guards, you can lure them into allies, so your allies start defending you and help you escape.
So, yeah, you can see Arnaud being escorted here.
And in this video, we can see guards interrupting its extremist when threatening Arnaud.
Here's another video showing the player luring extremists into guards and guards fighting them off for the player.
And at a moment you'll see also one of the extremists fleeing because he's outnumbered and I can take advantage of the situations while guards are busy and just stab him.
So, civilians.
So lastly, the streets of Paris are populated and animated with civilians.
The civilians wandering the streets can gather around points of interest to form big crowds and can look for things to do.
They can interact with each other and hold many different occupation and activities that we'll see later.
They're also aware of what is going on around them and able to react to situations they see happening.
We created three different reaction packs for them, which reflected different personalities.
So, for instance, we had courageous, cowards, and normal.
So, let's say I'd start a fight, the normal people...
The normal with the reaction pack, that reaction pack would be curious, look, and maybe leave, while the courageous would start cheering and encourage the fight, and cowards would just sneak away or flee in fear.
When using crowd events, they could take the role of either the victim or enemies, and the player can blend through the crowd to avoid being seen by enemies and can also use the crowd to escape.
So, in this video, it's a really early development, but I wanted to share it with you.
You can see a few behaviors we started exploring at the beginning of creating the ecosystem.
So in this example here you see aggressors start taunting and since the cops are here they'll end up stopping and just going away or being interrupted.
Yeah in this example since he's outnumbered, the extremist, he just passed and ignored the ally. He didn't want to cause trouble.
We could instantly spawn factions, so we could test out the reactions and stuff.
So in this case, they were outnumbered, so he fleed immediately.
Okay, so, crowd life was created with many different AI features.
And I need to go through this with you because so you understand better the whole ecosystem.
We'll see all the features built for creating crowd and making the world feel really alive and make the streets feel vibrant.
So, let me give you an overview of the different technologies used for building the crowd life in ECU.
So.
We had wanderers.
Wanderers are put in the streets, so they're meant to navigate the streets and just roam around.
They can be seen stopping momentarily sometimes to interact with crowd stations.
So for instance, you could see somebody just walk up to a shop, being interested and looking around and then leave, or just watching dancers or entertainers for a while and then go back to walking in the streets.
The flow can be modified by level designers to increase and decrease the density of wanderers in the streets.
We had object carriers.
Object carriers were in old ACs too, but we brought something forward too that we can see on the right side.
So object carriers allowed the crowd to carry objects such as boxes, baskets, platters, while they're navigating in the streets.
So in ACU, we developed new types of objects which we could see on the right side where people could carry other civilians.
We had crowd stations.
So crowd stations are used to animate, this is what you mainly see with wanderers to all over the city.
Crowd stations are used to animate the civilians in the street and inside buildings to make them do different actions and activities.
On ACU we created over 500 unique setups.
So, and these stations were all hand placed by city designers everywhere through Paris.
Here's a few examples.
This.
And then some artists, a merchant wanted to sell some things.
We have more complex setups where we see musicians and people dancing in front and some couples just enjoying the moment in the background.
Another view, but a bit more further away.
Also what was new in ACU is that we created an interior so we needed to create stations for these and to animate these spaces.
So here's an example.
And we also had Massive Crowd.
Massive Crowd was a new technique of AI level of detail that allowed us to create thousands of replicated, persistent, and interactive NPCs to see assemble in massive groups.
This tech allowed to swap from low-res NPCs to high-res NPCs without the player noticing.
And was used to create scenes where up to 10,000 crowd NPCs are on the screen.
We have the guys that made the system right there.
Here's a video where we can see a massive crowd.
Francois Cournoyer and Antoine Fortier, which are right there, worked on developing the system and gave a talk last Wednesday.
If you didn't have the chance to see their talk, you should go see it on the GDC Vault.
It should be available in two weeks or so.
And their talk was entitled Massive Crowd on Assassin's Creed Unity AI Recycling.
We also developed AI interactions on ACU, which generated spontaneous social interactions between the civilians wandering the streets.
It dynamically made the wanderers get attracted to each other to perform different actions.
So for instance, a couple of friends would walk up to each other and start a conversation or engage in a disagreement.
And you can also see lovers meet up and walk away together as a couple holding hands.
You can see a couple here on the left side, for instance.
And people engaging in a disagreement on the left.
On the right, I mean.
Opposite.
I thought I would share this with you.
Here's a, we can have a look at a gym, an AI gym we used to test out in our many different crowd-like systems.
We could test out our crowd stations, AI interactions.
and I thought it'd be interesting for you to see.
So here's an AI interaction.
Just wanderers, object carriers, and a couple leading together, holding hands.
Okay, so maybe this is gonna wake you up from the hard week that you have.
I wanted to share with you a little montage that the crowd team made this summer, well, in early summer, about, it's like a montage where we see all of these systems play out together in Paris.
But just keep in mind, it was still in development, so.
So there's music, and so.
you you Crowd events.
So we wanted the crowd events to represent some of the gritty urban realities of the French Revolution.
Challenge wise, these events were designed to be relatively easy since they were optional.
But the ecosystem could create unpredictable situations as well.
So participating in them could potentially bring trouble along the player's way, seen by enemy factions, and make the player, make the event harder to succeed, let's say when you had to kill somebody and you could potentially be spotted by guards.
Or some factions could react to the event and make it easier for the player.
I'll show you some examples along the way.
And also, the different scenarios would challenge the player's fighting, navigation, stealth, and manipulation skills.
In terms of gameplay challenges, the system supported seven templates that could be broken down into a few variations.
And to add variations to these templates, the event system allowed to change who was going to play in the event.
So which faction could play as the victim of the event or as the enemy.
The system was also able to modify the amount of actors inside the event.
Um, yeah.
So.
So one of the two events we had that challenged navigation was tackle the thief.
Similarly to previous ACs, the player can witness a thief stealing from somebody and running off with the goods.
This event requires the player to run after the thief and tackle him down to complete the event.
Here's a small video where I failed.
I got the same bump.
Another one that challenged navigation was catch and kill the criminal.
So it's a variation of catch a thief.
The only difference is the end where you have to kill the criminal.
So in this event, the player can witness a civilian killing an innocent person and running off.
And if he was far away, he will need to chase the killer through the crowd and kill him to complete the event.
The player needs to be aware of his surroundings since killing in front of guards can be deadly.
So here's a little video.
Yeah, and it was funny.
I saw an event triggering in the back, so I wanted to cause a distraction to the guards so I can go kill the dude in the back.
So they're handling the extremists now, so I can just go see them.
We had events that challenged fight.
So every time an event challenged fight, it challenged stealth at the same time because you could have different factions seeing you doing so at that time.
So here the player witnesses two extremists killing a civilian.
The murder is too quick to be prevented in this event, but the player can start a fight with them to avenge the victim.
Here we can see it in action.
We had executions, so this event also challenged fight.
And it puts the, the event puts into staging a bunch of extremists about to execute innocent people.
The player can stop them for killing the civilians this time around by starting a fight with them.
So here's an example of an execution event taken from our E3 video.
And we can also see in the video a bit later that guards intervene during the execution, so it causes some kind of a mayhem.
We had also protect civilians, which in the event, in this event, the player witnesses two extremists threatening to kill a civilian, and the goal here is to intervene and prevent the civilian from being murdered.
We had a stealth kill the messenger.
So in the stealth kill the messenger event, a civilian is being given a message, listing a bunch of people.
listing a bunch of people to be executed.
So the messenger is guarded by either extremist or rural guards and the player has to find ways in killing the messenger without being seen by the bodyguards.
And for social type of events, we had in this event, this is a scare the bully event.
The player will witness bullies intimidating people.
The goal here is for the player to find ways of scaring off the bullies to save the victim without killing them.
So playing around, manipulate the NPCs.
We can see a video here.
In this video, the setup is different.
We had different setups for these events.
We have a lady that's a victim and just two thugs threatening.
And somebody without a shirt.
And last we have the help the beggars.
So in certain districts the player would see beggars asking for alms.
In this event the player must give them money to complete the event simply.
So these short events place the actors in situations where they were either troublemakers or victims.
Now that you know how factions interacted together and how they react to certain actions, you can imagine the effect events have on the ecosystem.
Here's an example of guards passing by coincidence while a protect the civilian event occurs.
As soon as the event starts and the extremists start threatening, they will stop and the guards will stop and watch what is going on.
And then here, as soon as they see the criminals killing an innocent person, they engage into the fight.
Here I have like four videos of different contexts.
So every time you did an event, well, the situations were kind of different.
So earlier we saw like me chasing a thief and falling down, and then you'll see another thief, but it's something, well, events with different situations.
It never played out the same way for me when I was playing it.
So that's the tackle, the TFA.
And at this moment, I didn't realize extremists were there, so they started attacking me.
So I got into a fight.
And then, oh, allies just randomly arrived, and they started helping me take care of the extremists, so I could just take them off easily.
So in this event, in this example, we can see guards intervene as they see the criminal kill a civilian.
So a murder was just committed, and the guards just run after the dude and take care of him.
So the event is actually resolved by the NPCs.
Here again, it's kind of similar.
We have a kill the criminals event triggering and guards seeing what's going on.
So they engage and the event gets resolved also by the ecosystem.
I could have intervened and still earned my reward if I killed them, but I didn't, so I didn't get the reward.
Oh yeah, I hope you see this one.
But this is massive crowd.
And in the background, there was a murder.
And you see people fleeing.
So if I would have been closer to that, I would have seen just people fleeing suddenly and screaming and stuff.
So sometimes it caught the attention.
You were wondering what was going on.
So the goal we set from the start was to require as little level design work as possible.
In order to achieve this, we used a modular approach where each event is built using logical building blocks.
This allowed us to have variations around the same theme.
Chase and kill the murderer, chase and tackle the thief, and quickly have a first iteration running in the game.
For instance, a kill the criminal event would use a staging block that plays an animation on all characters and then a chase block with the kill option enabled.
A chase and tackle use the same exact setup but foregoes the kill option and uses a tackle option instead.
So conceptually, more blocks would be added to the chain to create longer or more complex events.
This approach proved its worth towards the end of the project, when we wanted to add very specific crowd event to live in Up the World.
Thanks to this modular approach, we could essentially assemble it and have it running in the city within minutes.
It was then only a matter of polishing animations and checking for bugs.
So, the crowd event system was divided in three modules.
First, the intro block, the challenge block, and then the resolution block.
So in the intro block, this is where the event looks for available events that can be played around the player.
Then once it has selected the event, actors are either acquired or spawned depending on the event, the needs of the event.
So in this block, actors start playing a scene and establish a context before the challenge is triggered.
So the challenge block, here the challenge is triggered, the feedbacks are displayed, and the player can now participate in the event.
and we had a resolution block where the event has been resolved either by the player, by an NPC, or by itself, and nobody interacts with it.
If the player has resolved the challenge, a reward is given to him, obviously, and the reward feedbacks are displayed.
The victims can also play an animation as feedback and thank the player.
Embrace emergence.
While systemic gameplay is conceptually very exciting, it can sometimes become hard to embrace as a mission designer.
Like when you're trying to craft a very precise gameplay sequence and tell a particular story during your mission and some NPCs appear out of nowhere, ruining your perfectly planned challenge or creating a walkthrough break.
So.
Of course, the easy answer would be just to turn off the events when the player is on a mission.
But in our minds, this would have defeated the vision we had set.
So instead, we developed control tools for our mission friends, so they can control the beast when absolutely needed.
Ideally you want your systemic gameplay to run 24-7.
Unfortunately in practice, anyways in our case, there was always cases where we needed to tune it in a particular way or turn it off completely.
And content creators should be given these options.
It might create some havoc during development, but if everyone is buying into the system, they will create their missions with the system in mind and turn it off or limit it only when it's absolutely needed.
So we created two tools to help control crowd events during missions.
First and foremost is a master switch.
It could be used in our mission tree to turn off some or all events for the duration of the mission.
The second tool was an exclusion zone to be placed in the world that would deny any crowd event from starting within the volume.
It was used in order to prevent events from starting in interior courtyards, around mission givers, and generally in places where it made no sense for them to start.
This was different than simply turning the system off.
As it was a volume in space, an event could still activate around its edges and above.
So it allowed to control really in precise areas where you needed it.
It does go against the principle of minimal level design support, and given more time, we might have looked into at auto-generating the exclusion zones.
While it required manual placement, it did work nicely and covered many different cases where events should have not started.
So the event controller.
We manage crowd events through a system which could control and analyze many conditions before executing an event.
The controller could check the player status, check the player's progression, check the district and time and day restrictions, enable only the ones available for the current location and time.
It would manage the acquisition and spawning of the actors, select the actors available around the player that could be quiet or spawn, or spawn the actors allowed to play in that event.
It could manage the frequency at which events are triggered, and manage redundancy and try cycling to a different template if able, to avoid playing the same event consecutively.
And last, it could manage the event's resolution and rewards.
So about acquisition, in blue in this image you can see these are all the actors, well potential NPCs that could be potential actors for the crowd events.
So our initial vision for the crowd event system was that a given crowd event with pick actors wandering the streets have them meet up and perform some action.
We hope we could acquire existing NPCs to make the events feel more natural.
So what became apparent is that picking people from the crowd was more difficult than we expected.
Depending on the event, we had to find up to six NPCs or of specific factions that were not only occupied within a certain distance of each other and heading in the right direction so they wouldn't navigate wearily to each other.
Although it worked pretty well for events with two actors, there were so many constraints to take into account that events requiring more than three actors would essentially hardly ever be seen.
So what we decided is that we would still use acquisition for events with two actors, and anything above two would despawn in the right spot for the animations to play correctly.
We already had a need for spawning actors because some of our crowd events had prisoners in shackles or were kneeling, which would just look off if somebody suddenly in the crowd just took a pose, you know?
It was therefore no big deal to use spawning more often.
However, we had to find tricks to avoid noticing the spawning of the actors.
So thankfully, our dense crowd helps to camouflage the spawning.
Spawning also created another problem.
Some events involved extremists and sometimes guards, and by adding them randomly to our ecosystem, we ran the risk of creating an imbalance by having too many enemies roaming the streets.
So events with bigger groups of enemies needed to be toned down and happen less often.
The other big hurdle we had to overcome was figuring out where to start the crowd event and have the system recognize if the spawning location is good or not.
So in this screenshot, I don't know if it's clear, but we can see some people in the front that are spawned, but there's also like red bubbles inside the building, so there's other dudes inside the building spawned, so.
Yeah, so the space, some events required to work properly became a concern as we started to implement them in Paris.
So some would spawn half through walls or on roofs or on top of tables and carts.
Another issue we had was dealing with the stairs and slopes.
The animations would be offset and not look right all the time.
Our biggest challenge yet would be to make the system analyze and identify the best locations for event to be spawned.
We had to make the system capable of analyzing the navigation mesh, which already defines accessible space by NPCs.
I'm lagging.
So, this is a view, a bird's view of the analyzer.
Here we can see a bird's eye view from the analyzer in action, the green circle represents the clearance that we have at the particular spot.
And you can see the player, maybe, come to the frame from the bottom, and you can see the spot moving around as the player navigates the environment, so it always is related to the player's location.
Did it end?
Yeah, okay.
All right.
Yeah, in this video, so this is an in-game perspective.
We can see the analyzer slide in front of the player.
The event controller uses the analyzer's computation to know which events are allowed to start at this particular position.
Events that are too large to start will be discarded outright.
When we check the remaining candidates for district time of day and faction requirements and activates one randomly That was a kill the messenger that just happened Okay, so as you may imagine, tuning emergence can be a pain in the neck.
To tune systemic gameplay, we couldn't wait after the stars to align and see how the ecosystem behaved when interacting with events.
We needed ways to force things to happen, so we could start tuning everything early.
So we created tools to make things happen on demand and debug display allowing us to see clearly if the systems were behaving or working as intended.
This helped save a lot of precious production time.
So here's a few example of things that proved really helpful for us during development.
Cheats.
We love cheats.
We had a cheat to enable the event system in the city.
This prevented breaking missions and creating unwanted situations until mission designers had tools to control the beast.
We had cheats to spawn any faction on demand, as we saw earlier in the video, the one where I killed the criminal while the guards are distracted.
Oh no, it was another one.
Anyways, we could spawn any faction on demand.
So let's say an event would play, I could spawn like guards and see how they behave and really early and on demand, so it was super quick to test.
We had cheats to tune the frequency at which the system tries triggering events.
We had debug display, such as like, which I love, visual display to test AI reactions, so we could see the stimuli with a visual display, and see which NPC would react to the stimuli and what type of reaction the NPC has.
So we had that above his head, so let's say I start fighting and then there's a civilian that becomes scared and I want to know why he's scared, I could see.
the stimuli that triggered his reaction and the type of reaction he has.
It was really helpful to debug when there's like a quantity, incredible quantity of people on screen.
We had a visual display to see the actors of an event and we had visual display to see when the system is looking to trigger an event and visual display to understand the reason the event activation failed.
So, in the early stages, we first tested events in a controlled environment.
We had an AI gem, which we saw previously, to see how the AI systems behave together to filter out the biggest issues before putting the beast into the city.
Once our system was solid enough to be implemented in the city, we were still careful and used the cheat to trigger them in the world.
So by default, at first, as soon as they were baked and ready to be put in Paris, we could activate them instead of just having them right away like this and having potentially walk-through breaks and stuff like that.
Since it was the first week, we need to be careful.
So enabling them on ourself, make sure testing them and...
see how it reacts before enabling them by default in the city was very useful.
So it allowed to minimize the risk on production and prevented affecting missions and causing walk-through breaks.
Playing mission in order, we play missions in order also to fine-tune the frequency of events between missions and see how they affected missions.
We also took advantage of upcoming playtest scheduled to test missions, so we can have feedback from the playtesters on events.
And what was also very important for us was to set frequent play sessions with our team so we can all see the bugs at the same time or the good stuff at the same time and identify what needs to be addressed ASAP and on all the priorities.
So ask yourself early, talk to your programmers about the crucial information that could help the whole team to fine-tune your features.
and allow putting more time into quality.
So, avenues of improvement.
So from my perspective, the most important areas to refine would be increasing the diversity and challenges of events.
We ended up developing more events about fight because technically it was just easier to reuse modules and make variations for fight events than creating new modules for types of events that may have been more exotic since it would be harder to recreate variations for them.
For instance, challenging navigation skills had some limits.
The system could not guide the enemy into specific areas that would have challenged the player's navigation skills, such as leading him into massive crowds, water, restricted areas.
The path the NPC took was totally random.
And it did not allow NPCs to navigate on buildings either, so we were pretty limited here.
Sorry, events could trigger a really cool and unexpected situation in the ecosystem.
It would have been interesting if they would have been more connected with the crowd life during their intro block and that we would see them happen much closer to the player.
this would have increased significantly the variety of event stagings.
Since we had more of over 500 different types of crowd stations, we would have benefited from this tech and all the animations being created for those.
And it would have increased the number of events using acquisition and therefore would be seen around the player often.
As an example, let's say you're seeing a crowd station of musicians, so you can see the musician passing the hat after playing their music, and a spectator suddenly just grabs the hat, stabs the musicians, and runs off.
So we could have reused all those stations to create the first staging block of the events.
It would have been interesting.
So as they say, knowing is half the battle.
In retrospect, we now have a much deeper understanding of the system's highlights and opportunities for improvement.
We now know the particularities regarding spawning and acquisition, something that was unclear to us when we first started designing the system.
We went into mocap expecting minimal limitations and afterwards had to make do with the space each animation stood.
So with knowledge in hand, we can tailor our events right from the start to fit with the constraints we have.
Looking back, we only had a handful of events that were small enough and quick enough to work properly with acquisition.
We ended up doing mocap for events that were very interesting, but for which the technology wasn't quite there yet.
And some of our events that needed to be spawned would have benefited from a more customized spawning to suit their individual needs.
While we did have growing pains while trying to make the system work properly, once it all came together, it did create some awesome and surprising situations.
I think designing simple events with a modular approach worked really well for us.
Creating more complex challenges would have been more difficult to communicate to the player and harder to maintain and fine tune.
So in theory, you may want to just mix the ingredients and see the emergent gameplay that comes out of it.
But in practice, and for ACU anyways, we believe that having a certain degree of control for emergence and being able to pull strings behind the scene when needed did go a long way towards reaching the goals we had set.
So that's it.
Thank you for letting me share this experience with you.
I hope you learned something and it maybe gave you some ideas.
Before I go, I just want to finish up by thanking, I would like to thank the crowd team, the NPC team, and the system teams which were all involved in creating ACU's ecosystem.
and the crowd team did an incredible job at making the crowd life and crowd events, while the NPC and the systems teams did an amazing job at making the systems for NPC factions and behavior and reactions.
So thank you all, thank you very much for coming, and that's it, don't forget to give your feedback to the awesome GZC staff.
Thank you.
