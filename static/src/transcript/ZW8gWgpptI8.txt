My name is Adam Robinson Yu, and I made this little game called A Short Hike.
I also want to quickly thank people who helped me work on the game.
Thank you to Don, Andrew, Mark, and David, and also everyone who tested it.
Just thanks a lot for your contributions.
So I guess for those of you who aren't familiar with the game, I'm going to show the trailer right now.
So...
There's the sound.
Um, so A Short Hike is a little video game about hiking.
You'll play as Claire, this bird who's visiting this island from the city, and she can't find any cell phone reception on the island.
So she hears that the only place to find it is all the way at the very top.
So as you go along this journey to get to the top of the mountain, you're going to explore the island, collect items, and befriend other hikers, and kind of just get lost in the wilderness a bit.
So here's a quick look at what the island looks like if you zoom out a bit. So it's like an open world, but it's also not too large. It's quite small, I guess. So A Short Hike.
For this post-mortem, I'm going to go generally over the development of the game.
I'm going to talk a bit about how it got started, a bit about the art style, a bit about my timeline and development practices with regards to meeting my deadline, some lessons that I learned in level design, a bit about the writing, and then the marketing and release.
So kind of just going to go over the whole thing.
So all right.
I guess for a bit of context, I want to talk a little bit where I was leading up to the development of the game.
So when I think back on things, I feel like one of the hardest decisions I had to make on the game was whether or not I was going to make it at all.
So this is me in 2017.
I had just made the questionable decision to leave my software engineering job and move back to Toronto.
And I wanted to take a shot at making indie games full time.
So until then, most of the games that I had released had been kind of small, free itch.io titles.
And I kind of thought that this would be my one chance to make a big game on my own.
So about one year later, I was knees deep in an ambitious project.
It was going to be a large RPG with lots of characters, locations, and battle mechanics.
However, I didn't really have a clear vision for the game.
And after a year, there were still a lot of elements that I wasn't certain about.
It felt like the project would take a few more years to finish and I was starting to get kind of stressed and anxious about it and I never felt like I was getting enough done and it felt like I had to finish this project and I had to do well because it felt like my kind of one shot.
But in December 2018, I decided to give myself a little break.
As sort of like a Christmas present to myself, I decided to put aside my main project and just work on this tiny little project.
So I started just throwing some assets together in Unity and building this tiny little world that I could escape to.
And I was just kind of putting in whatever I felt like would be fun.
And after I shared a bit of this work on Twitter, I got the opportunity to fund a tiny project based on this prototype.
At this time, this kind of felt like a really difficult decision for me.
Due to the sunk cost fallacy, I was feeling really locked into my RPG.
I had already spent a year plus working on it, and I had started gaining a bit of a following for it.
And I felt like it had opened up a lot of doors for me.
So I wasn't sure if it was a good idea to put aside all that momentum for this short, undefined game about hiking. And video game development is full of uncertainty, and it can be hard to tell if a project is really off track or if I just needed to really work through this rut and my RPG would come together.
But in 2018, I also played two other amazing short video games.
And it was inspiring to me that such short and sweet games could still be successful.
So I decided to take the plunge into A Short Hike.
And in hindsight, this was a pretty good choice for me.
I think there's a lot of benefits to working on small projects, especially when you're just starting out.
I think they're less risk if they don't pan out.
It doesn't have to be a huge success to be worth the time you put into it.
The smaller goals feel a lot more achievable.
And also, you can release games faster, which can teach you a lot and possibly get some revenue coming in.
So one of the very first things I did in A Short Hike was develop the look and feel of the game.
As a mostly unknown indie developer, I really relied on social media like Twitter to get people looking at my work.
So I think the aesthetic of the game becomes pretty important because you only have a small moment to capture people's attention.
And for small developers, or small teams, or solo developers, I think getting a look like this can be difficult or time consuming.
So I consider myself limited in my technical skills in art, like I can't do really great drawings and I haven't done a lot of modeling, so I have to try and find ways to make the game look interesting with the skills that I do have.
So I have more of a background in programming, and I have more experience with VFX and post-processing.
So when I started working on this project, I kind of wanted to experiment with rendering a tiny world through these big, crunchy pixels.
Other than the fact that I think this look is cool, it also allowed me really to increase the scope of the game.
I was able to get away with making simpler models, and I could make more of them much faster.
And while this isn't perfect, I think it allows the player to fill in a lot of the details with their imagination while still kind of giving the impression that I'm trying to make.
And to achieve this effect in Unity, the world is rendered to this tiny render texture.
And then another camera in Unity will look at that texture and then blow it up with point filtering.
I learned this technique by using a plug-in called GB Camera for Unity.
And you can look it up if you're interested in playing around with this too.
So early on, I was having trouble trying to pick colors that I wanted to use for the game and convey the atmosphere that I wanted.
I ended up searching for fall nature photos of the Canadian Shield and sampling colors directly from them.
These references really helped me establish the palette for the game and kind of pick that mood and color palette.
But to render these colors true in the game, they can sometimes be distorted under different lighting conditions, so I ended up writing a custom mostly unlit shader that kind of gave me precise control over how all the shadows would look on every single object.
And in general, I tried to ensure that most textures and shadows appeared flat and consistent when rendered in game.
Because if I didn't have that, the pixelated look would become a lot more apparent and kind of noisy, and I think it makes it a lot more clean when you're able to get rid of that.
So here's a quick look at how I adjusted the lighting ramp for A Short Hike.
On the left, you can see what a default lighting ramp looks like.
And then I kind of applied a stair shape to the ramp.
And then I ended up kind of shifting all the colors up towards white.
So that way, they were really close to their original palette color.
Also, by using this flat coloring style, it allowed me to create UV maps really quickly.
By unwrapping the UVs just to fit onto a color palette, it allowed me to save a ton of time that I would have spent texturing the object.
And it was also really easy to experiment with different colors and alternative palettes just by swapping out this texture.
So I tend to use a lot of post-processing effects to add visual flair to my games.
You can get a lot of these effects for free in Unity's default standard asset packs.
And you can kind of quickly experiment with them to change the look and feel of your game without having to actually change a bunch of assets.
So this is what A Short Hike would look like if you didn't have any effects in it.
I think objects in the distance kind of look pretty noisy and it distracts from what's going on in the foreground.
So the first thing I do is add a layer of fog to keep the player focused on what's happening in the foreground.
And then I add an edge detection post-processing effect to kind of pick out the silhouettes of the things in the background.
I think this kind of creates a really dramatic effect.
And I actually stumbled upon this look by accident, just as I was experimenting with all the different filters that were available.
And if you look at the arrow on the left-hand side, there you can see the slight difference that's made when I change to, when I change, when I add a color correction as the final step.
So I kind of add an extra blue to the shadows to try and make it feel a little more alive.
So I guess if you're a small team or a solo developer, here are some things you might be able to take away from this.
Play with the strengths that you have and experiment with the tools that are available to you.
Consider how the art style itself will affect your workflow and what you're able to create.
And your limitations might end up being what makes your work unique.
So most of the art direction work was done in December 2018.
But after I got funding to make it into a tiny project, I committed to releasing the game in just three months.
So I think the timeline management for this game went pretty well.
I wrote up a design document when I first started working on it and kind of planned out three discrete milestones, the alpha and the beta and the release candidate each month apart.
And I think one thing that worked really well for me was that I designed this game with a flexible scope in mind.
So I was able to keep the core scope of the game really tight, so that I knew I would be able to finish it well within the three month deadline.
But there are a lot of features that I really wanted to get in the game, so I kind of considered them stretch goals.
And ideally the game would still be good if the, you know, it would still be fun and playable if those stretch goals weren't made, but it would kind of allow me to, you know...
uh... naturally scale the size of the project to the rate at which work was actually being done um... and a lot of these stretch goals didn't actually make it into the uh...
Humble Original release but uh...
I think the game still worked well without them and I ended up adding some of those for the later Steam and itch.io release And also to keep myself on track, I used a simplified version of the Scrum process.
I would usually re-estimate all my tasks for every week and then also at the beginning of every day.
This helped me get a good sense of what features I would have time for and helped me plan ahead.
And I think it's tempting to skip this step when you're working by yourself, but when I started doing this, I found it really useful to keep myself on track.
So I also had an external deadline to hold me accountable on this project.
And for me personally, I think that helped keep me really focused on finishing something rather than trying to make it something perfect.
But I did really want to get as much as I could into this game.
So I had to take a few shortcuts.
As I mentioned earlier, the art style was something that allowed me to make a lot of assets faster.
But I was also able to carry over many tools and techniques that I'd used on previous projects.
For example, I used a yarn spinner to handle the dialogue system for my game, which I previously used on the RPG.
I'd already established a workflow with this tool, so I could get up to speed really quickly using it.
I also used a plug-in called InControl to handle controller support and automatically take care of a whole bunch of controllers at once.
I used Cinemachine to set up a dynamic camera system really quickly.
So it kind of allows me to create a bunch of virtual cameras for different zones in the game.
And then the real camera will transition smoothly between them as the character walks into different zones.
And I think there's a lot of cost.
There's a cost to learning new tools like this.
But I think it can pay off in the long run, once you become really familiar with them and you're able to reuse them across every game.
I also have my own set of scripts that I carry forward from game to game.
When I find myself writing generic tools or systems, I'll usually move them into a separate library that grows of every single project I work on.
I also reused assets from my RPG where I could, and other things from other games.
The level design for the game was mostly done using Unity's default terrain tools.
Being able to edit the terrain directly inside Unity made it really easy to prototype and iterate on the level design.
It also was really helpful that I used a triplanar shader to automatically texture the terrain.
So this shader effect uses the normal of the mesh to decide which texture to show.
That way I could quickly change the texture and create valleys and mountains without having to re-texture it every time I decided to change it.
My terrain shader also incorporated Unity's default terrain painting tools, so it was really easy to add beaches and paths.
I had to modify the blending code a bit so that I maintained the sharp edges that I wanted to use for this style, but that was one of the changes I had to make.
So I also made a few custom tools for my game.
Some of them were pretty simple, just as a shortcut for moving the player around the map and previewing the look in the camera, or the angle of the camera.
I also ended up building a tool for river and waterfall meshes, so I could create them right inside the editor.
Before this, I would model the waterfalls and UV them in Blender, and then I would import them into Unity, and I'd have to go back and forth every time I changed the terrain.
But by making this tool, I was able to save a ton of time and actually had fun making rivers instead of finding them really tedious.
And creating custom tools like this can take a lot of time, though.
So I'd only recommend building them once your workflow actually demands them.
And one of the last things I want to throw in is that when you're designing big worlds like this, it's easy for things to get a bit buggy.
A Short Hike had its own handful of wonky camera issues and weird slopes.
And I knew about a lot of these issues, but I prioritized adding more content, over-fixing some of them.
And I think players were willing to forgive a lot of these issues if they noticed them at all, especially for a game that was pretty clearly an indie game made by a small team.
So to summarize some of the tips that helped me meet my deadline, I create milestones and update my estimates.
You can account for unpredictability in your scope.
You can reuse knowledge, tools, and assets, and create tools when the workflow demands it.
And also you don't need to fix every single bug.
So next I want to talk a little bit about designing the island of Hawk Peak and some of the lessons that I learned along the way.
I wanted to make a game where getting lost was part of the gameplay.
I feel like the freedom to go in any direction at any time adds a sense of magic to the game.
Every untraveled path contains the promise of something new, and I really wanted to capture the feeling that there's always more out there to discover.
So when I started building the island, I just jumped straight into Unity and just sculpted areas that felt fun to climb and fly on.
This process led to a whole bunch of ideas and inspirations for what I actually wanted to include on the mountain.
So I eventually jotted down all those ideas, brainstormed different activities and regions, and then I made a plan for what I thought the main path of the island would be.
So, this path that I came up with starts here at this cabin.
Since there's only one clear path to take from here, I expect that the player will head this way towards town.
In this area, they'll meet characters that teach you how to play the game and introduce you to the world, but they'll be kind of trapped in this area for the time being.
Eventually, you'll be able to collect a golden feather, which allows you to climb up walls and flap your wings.
And once you've got this, you'll be able to pass that barrier and get to the rest of the game.
So once you've passed that, I expected the player would either go up the left or the right side of the mountain.
And I eventually kind of led the path so that it would eventually lead you to this one meeting point up near the top.
At that point, you wouldn't be able to get to the very top of the mountain unless you had collected at least seven golden feathers.
And that way, players wouldn't be able to beat the game just by running to the end.
They'd have to actually explore a bit and discover the island.
So I knew there were a lot of shortcuts you could take.
Like, I had this main plan, but there are lots of ways you can get around it by finding weird slopes or other routes.
And I wanted to leave these options in the game to maintain a sense of freedom.
Because I think it feels really satisfying as a player when you feel like you're following your own path or maybe doing something the game didn't expect you to do.
But even so, coming up with this rough plan is useful because it helps me control the experience better.
I think one of the playtesters who was trying the game would get bored if they were spent too long just exploring without meeting anybody.
But if they were in an area with a ton of NPCs, they eventually wouldn't talk to them all and just kind of run off a bit.
So I think it got me thinking about the pacing of the game, and I wanted to introduce new characters and places kind of over a period of time to keep the interest up as you went along.
So having that plan helped me structure and pace the game, but things didn't always go as I thought.
One of the patterns that I noticed quickly during play testing is that many players didn't follow this first path.
You know, instead, they just plunged straight into the ocean.
I think that players like to test the bounds of the game when they first start.
And you know, they want to see, will the game let you just swim into the ocean?
And I wanted to say, yes, you can.
And then if you do, there will even be stuff out there for you to find, like islands and stuff for you to discover.
But for some players, you know, this wasn't enough for them.
You know, they just kept going, all the way around the backside of the mountain.
And this behavior was surprisingly common.
You know, it wasn't done by all players, but it was a pattern that I saw a number of times.
So, this is a bit of a problem because many players would get lost on the backside of the mountain and they would kind of miss out on the important tutorial information that I'd put in the way I expected you to go.
And this was even more problematic in earlier playtests of the game because there wasn't really much behind the mountain.
So to solve this problem, I eventually added a cave on the backside of the mountain.
I think if players were heading along that way, this cave would naturally draw people's curiosity and they'd head through it.
And this would lead you right back to the tutorial zone.
Most of the players that had gotten off track would wind up where I wanted them to.
But even for those that didn't, they saw the cave and they were like, that's not for me.
And they just kept going, that's fine because it's an island.
You'll eventually get back there.
So this is one of the ways that I tried to keep the player on track.
I wanted to provide some gentle guidance without feeling like the player was forced to do anything.
There are many ways to guide the player.
I think it helps the pacing of the game if they roughly follow my plan.
So if they're guided naturally by things like curiosity, like a cave or a cool landmark, I think that can make it not feel like the player is following a scripted path.
But there are also more direct ways to get the player to go where you want them to go.
I could use trails of coins or items to draw players off the beaten track if I wanted them to explore certain areas.
But if I wanted them to get back on track, they could stumble across a path and heading down any path would generally lead you back to a main area.
And there were also signs as kind of a last-ditch attempt to get you back on track, because people don't really like reading in games, or they will kind of breeze by it.
So for people who really got lost and wanted to get back, they could read the signs and then figure out where to go.
But otherwise, they'd kind of ignore them.
And also, since the goal of the game was to get to the top of the mountain, players could generally figure out how to get there just by going up any incline.
There's a few different ways to keep people on track.
So another thing was to use gates and block off areas until a player has gained certain knowledge or experiences.
But I think it's, I didn't use any literal gates in my game like this.
I tried to use natural gates.
In A Short Hike all these gates that I used were just cliffs that you couldn't get past without enough golden feathers So in this way the gates feel more natural and also maybe suggest that there's multiple ways to tackle the problem Like if you can't get up this cliff here Yeah, that's you can come back to it later when you've got a golden feather but you could also maybe find some other route if you kept exploring the edge of the the edge of the cliff And it's also clear that when you have a gate like this, that you can't get past.
Once you get that golden feather, there's a very clear correlation between, like, you getting the jumping ability and then being able to get across, get up higher, somewhere you couldn't get before.
So another thing that I tried to do to keep people on track was use silent repetition as what I'm calling it I guess.
So there were, for example, early on in the game there's this toy shovel that you can find and you trade it for a real shovel so you can dig up things across the island.
And it's technically an optional item, but if players miss it, I think they end up missing like a lot throughout the game.
They'll be kind of exploring and seeing all these digging spots that they can't interact with and I think it's more fun if they actually can and it gives them more stuff to find.
So I originally placed this toy shovel at a crossroads that I was certain players would pass and eventually early in the game they would find it, then they would, you know, trade it in for the real shovel and then be good for the rest of the game. But a lot of players would still avoid this.
They'd, for some reason, you know, they'd walk right past it, they wouldn't see it, or they'd just find some other cliff and completely derail my plans. So I ended up placing not just one toy shovel, but I placed five of them all around the starting area.
So, as soon as a player picked one of them up, though, all the rest of them would disappear.
So that way, players would feel like they discovered it on their own, even though it's practically guaranteed at this point, because you can't miss it.
So this ended up solving the problem and that worked really well, but I also ended up using this technique with just things like tutorial information.
So like there's a point later in the game where you have to climb all the way to the top of the mountain, and you can actually get that far in the game without actually learning how to climb since there's also a double jump ability.
So to make sure that players, when they got to that point, if they haven't been able to climb yet, there would be a sign up there that would tell you, hey, this is how you climb, and this is why it's useful.
But if the player had already demonstrated that they've learned how to climb at that point, then it wouldn't bother showing you that information.
So one of the last things that I want to talk about.
was priming the player. So I guess getting certain things into their mind when they're playing your game. So about the climbing, it was pretty difficult to early on to get players to learn to climb. I guess it's not a very intuitive thing because you know most games you can jump but you can't really climb every single wall that you see.
And also it's very contextual.
You need to be pressing against the wall and holding A.
And that doesn't really happen by accident.
So it was hard for players to learn this accidentally.
And even though one of the characters told you this, players would just kind of breeze through this dialogue and then kind of forget what had been said.
So what I ended up doing was I created a climbers club that was in the game.
And if you talk to them, well, you have a golden feather.
They'll walk you through the process of climbing.
But even if players miss this quest, they would still generally, they'd walk by it and see other characters climbing.
And hopefully, when they actually got that prompt to climb, it would be kind of more at the front of their mind because they'd seen other characters doing it and they've talked about it.
So hopefully, I think after I added this club, it solved that problem of players not learning how to climb.
So I want to talk a little bit about the final area of the game.
So this was probably the trickiest area to design.
I wanted this area to be a bit like a puzzle, and a little more difficult than the rest of the game.
So when the player gets to this area, the feathers no longer come back automatically.
So as you use them up, they'll freeze and you'll have to go back to either a hot spring or a warm campfire until they come back.
So in that way, players can't just use all the feathers they've gotten to just run to the top.
They've got to figure out how to ration them and what areas they can stop and restore them and make a plan for how they get up the mountain.
And the original design of this area was a lot smaller than the final one and was also confusing to play I actually ended up having to redo that entire area of the mountain and that was difficult because it was one of the last things that I did so I had to redo the surrounding areas and make room for all this extra space That was something that I think I could have done better was maybe tackle this part first But another thing that I added to the final version was I added this very clear route to the top.
So when players would get to this area, they'd follow the main path and it would eventually lead them almost all the way to the top, but they wouldn't have enough feathers to make it if they had seven at that time.
So it kind of let them see where the goal was, but then they had to work backwards from that to actually plan a route that would get up there without just going the direct, most obvious way.
And I also ended up putting a lot more feathers in the game.
In early play test, they were a lot harder to find, and there were fewer of them.
And it kind of made it so that when players got to this point, they'd end up getting a little bit stuck.
And then they would have to go back on the island and like a scour it for any signs of feathers and I think that really hurt the pacing of the game and I ended up making it a lot more generous so that players were kind of going at a good pace throughout and they didn't really kind of get stuck and I think like maybe the game would have been longer if I made it harder to find all those feathers but I think it was worth it to keep the pacing interesting throughout the experience.
So now I want to talk a bit about the writing.
When I started working on this game, I didn't really expect there to be a lot of writing.
But I ended up writing a lot for this game.
And this was difficult for me, because writing is hard.
At least for me, anyways.
Because when I was working on my RPG before this, writing was one of the things that I really struggled with the most.
I really wanted to write a story and also dialogue itself that was going to be personal or meaningful or at the very least funny.
And yeah, that was one of the main things that I struggled with.
So when I started A Short Hike, I made a few decisions that ended up making the writing process a bit easier.
So for one, I tried to write more natural conversations.
Instead of using these big text boxes with kind of a long monologue, I would use small bubbles without really any punctuation.
This actually kind of felt more like the way that I would write when I'm texting people.
So I guess as a millennial, that's all I do these days.
It was a lot easier to kind of write natural conversations this way.
I also made Claire not a silent protagonist, like other games that I was working on.
And she actually talks a whole bunch throughout the game.
And this was a lot easier to write, because natural conversations have two people in them.
They're usually just not one person talking to you.
And another thing was that I didn't really, I didn't put as much pressure on myself when I was working on A Short Hike.
I kind of approached the writing initially just as a silly improvisational kind of way.
I didn't expect it to really like carry the game and not be a main part of the gameplay.
So I think by maybe like taking it less seriously, I was able to get stuck on it less and just kind of roll with it.
And it also just helped to have a second pair of eyes looking at my work.
Whenever my partner would get home from work, she'd usually look over what I'd written that day or test out what I'd been playing. And during my worst writing blocks, she'd help me draft some conversations and get through with them and I guess get it done.
So now I'm going to talk a bit about the release of the game.
So A Short Hike was originally released as part of April's Humble Monthly service.
And the reception of this was pretty positive.
I can't be certain how many people played this release, but I got a lot of kind feedback.
So I decided that I'd work on a big update for its eventual release on Steam and itch.io, partially because there's a lot of things that I still wanted to add, but also because I hoped it would generate some buzz around the commercial release.
The biggest things that I added to the game during this period were the mini-games, such as the fishing and the beach stick ball and racing.
There was also a bunch of other stuff that I needed to do during this time.
So I tried to get the word out for my game by sharing work on Twitter.
I would try to come up with interesting GIFs that either talked about the development of the game or showcased scenes from the game.
The Twitter ended up being really useful for me.
It allowed people to get excited about my game.
It also gave me feedback on what other people are interested in.
I saw a lot of people really liked the GIFs where the character was flying, so I tried to make sure I put that at the beginning of my trailer.
And it was also just motivating for myself to see other people interested in my work.
I also ended up creating a press kit to send out to journalists.
I tried to reach out to journalists that covered games that were similar to mine.
So for example, I collected contact information of writers that liked the Frog Detective game, and I sent my press kit to them, hoping that if they were interested in that game, they might be interested in my game as well.
I also reached out to anybody who had liked my work on Twitter.
Not all of them wrote an article about my game during release week, but several of them did, which was a big success for me.
And also, I don't think a short game was, I don't think A Short Hike was really a game for everybody.
It's kind of like a slower, more slow-paced game, and there's not really any real puzzles or combat or anything.
And I wanted to make sure I got that across to players, so they weren't expecting something a lot more and came out of it disappointed.
So I tried to be careful with the presentation of the game on its web pages.
I tried to use the word short right in its title.
I also emphasized that it was a little exploration game.
But also, I wanted to make sure that players, when they're playing it, actually approach it with the right mindset as well.
I kind of thought, in the beginning of the game, it starts off with this dialogue that's actually covering up a loading screen.
But it also tries to tell players that they're getting away from the city, trying to take a break from things that are going on.
And hopefully, I would.
this would get players subconsciously in the frame of mind that this is a game that they can relax to, not one that they're going to be challenged by with puzzles or combat or anything.
So eventually the game came out on July 30th.
It released on Steam and itch.io with the extra mile update.
I had modest expectations for how a small game like this would do, but it ended up exceeding those for me.
And the user reviews for the game are really positive.
And during release week, most of the external visits to my game, external visits to my Steam page came from Twitter.
And I think the traffic from Twitter helped get the game noticed by the Steam's algorithm and then drive a lot of traffic to it through Steam.
Over release week, most of the traffic to my Steam page just came from Steam itself, either from the discovery queue or the new and trending thing, so I think that was really useful, the momentum that Twitter pushed to my game.
And I guess that's wrapping up the whole development.
Thank you very much.