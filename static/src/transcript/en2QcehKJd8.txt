You are at the right session.
This is a visual guide to quaternions and dual quaternions.
A quaternion is something like this.
It's a rotation in three-dimensional space.
And a dual quaternion is a slightly broader class of object that we'll be talking about in the second half of the talk, which can do 3D translations and rotation and translations.
First, a little bit about me, though.
I'm a graphics researcher at Imagination Technologies.
we that this phrase, quaternions are four-dimensional, is a useless and damaging thing to say.
I'm not saying that it's exactly false.
I'd say that it's about as true as saying that a three-by-three matrix is nine-dimensional.
But in particular, while I'm a huge fan of 3Blue1Brown and Numberphile, because they give an explanation of quaternions based on this phrase, yeah, it's not a great explanation.
So sections of this talk, first I'll talk about how every quaternion is a mixture of some amount of line, which does a 180 degree rotation, and some amount of identity, which does a 0 degree rotation.
If you don't know what this means, don't worry whatsoever, I'm going to go through it very very slowly and clearly.
And then in section two, we're going to move away from the origin, and we're going to see how and why to use dual quaternions.
This is the identity, by the way.
This is a line, and dual quaternions allow you to do rotations around the lines that are not through the origin.
It allows you to do rotations around arbitrary lines, and also to get rid of this problem that we see here, that we call the candy wrapper effect.
Okay, so part one.
A quaternion is a mixture of some amount of line, which rotates by 180 degrees, and some amount of identity, which rotates by zero degrees.
First we'll talk about quaternions that rotate by 180 degrees, which we visualize as lines through the origin.
So here's a quaternion.
it's All right.
The y-axis, we're going like this, all right?
That's what this quaternion does, which kind of makes sense, because it's got y equal to one, everything else equal to zero, and we can visualize it this way.
This quaternion is a 180 degree rotation around the z-axis, so it turns the cow upside down.
Here's our z-axis, and if I rotate around here, I go from this to this, all right?
And we This seems a heck of a lot like a vector, so why don't you visualize it like a vector, right?
I mean, you could just have the x part and the y part and the z part of a vector.
Well, I put to you that this is a much better way of thinking about at least these quaternions in particular.
The way that we're going, so, you know, it's got x-coordinate, y-coordinate, and a z-coordinate, and the way we go from this vector to what I've got here is that we put an arrow going around that vector according to the right-hand rule.
then we extrude the shaft of the vector, and then we get rid of the head.
And getting rid of the head throws away information.
You can't see how long the vector was anymore, but you do sort of know which direction it was pointing in.
You know, because of the right-hand rule, it was pointing in this direction, because if it was pointing in the other direction, then this arrow would be going around the other way by 180 degrees.
better be careful with my microphone.
Quaternion multiplication is rotation composition.
What do I mean by that?
Well, rotation composition, so we start out with a rotation that's like this one, this is a 180 degree rotation around the y-axis, and if we then follow that up with a 180 degree rotation around the z-axis, so we're sort of going like this and then like like this and then like this, well, whatever, something like that.
It's a rotation composition.
And you can ask the question, what if we wanted to go straight from here to here?
And the answer is that that is a 180 degree rotation around the z-axis.
Do you know what, I think I, yeah, I should have said y-axis and then x-axis, and this gives you a 180 around the z-axis.
And if you want this quaternion based on these two, then you can do quaternion multiplication, right?
And you'll get your lovely composed rotation.
All right.
Adding quaternions is averaging rotations.
What do I mean by this?
Well, averaging, don't know what happened there.
Averaging is basically mixing for colors, if we're talking about colors.
If you, any child can tell you that if you have some amount of blue and red, then you get purple.
Or at least if you have the same amount of blue and red, then you have purple.
then you get purple.
Here we've got two quaternions, and I've already shown you what these are.
This is the y-axis 180 degree quaternion.
This is the z-axis 180 degree quaternion.
This is what they do to the cows.
And we can add these together, and we're adding x plus x gives you x, and y plus y gives you y. And we get this quaternion.
It's got a y part and a z part.
And it turns out that this quaternion is a 180 degree rotation still, but it's a 180 degree rotation around the line that is directly in between the y-axis and the z-axis.
So if we have like, I need to get better at holding this thing.
So we have, there's our y-axis and there's our z-axis and there's the axis that's halfway in between them and this rotation that we've got here is like that.
So this is the addition of this and this.
All right.
and and that matters because suppose that you added blue to a larger amount of red, twice as much red say, you'd get a different color and you'd get even more of that color.
So what this is showing you is that averaging is weighted, right?
The amounts of the color that you have in there matter in terms of the color that you get out the other side.
If we draw this analogy, we've got this one that can be written as two of these added together.
Similarly, we've got a quaternion and another quaternion, and this one can obviously be written as two of these added together.
This one, I already told you, is a 180 around the y-axis.
Now this one is also a 180 around the y-axis.
It's got some differences to this one.
For example, if you add this quaternion to another quaternion, then you'll get a different thing than if you added this quaternion to another quaternion.
And there are some other differences that I won't go into, but if you're worried about the difference there, you can normalize your quaternions or your colors.
Like, if you take two buckets of purple paint, you can turn it into one bucket of purple paint.
Similarly, you can turn this quaternion into what we have here, which is the unit quaternion.
All right.
the identity quaternion, which does a zero degree rotation.
Very important quaternion here.
It looks like this.
X is zero, y is zero, z is equal to zero.
W is equal to one, though.
We're doing something with the w coordinate for the first time.
What will this do to the cow?
Well, the answer is that it does nothing to the cow.
It's like, you start out with the cow, and it gives you the cow, right?
There's no axis to speak of, because, I mean, where is the axis in even doing this?
And we call it the identity quaternion, because if you translate it, if you turn it into a matrix, then you'll get the identity matrix, whether that's a 3x3 matrix or a 4x4 matrix.
And you can also write this same quaternion as just the number 1, because multiplying something by 1 is not doing anything to it, so that sounds a lot like this quaternion.
Alright.
suppose we 90 degrees.
And that kind of makes sense, right?
Because it generalizes this idea of like, oh, I took the, when I added the 180 around the Y and I added it to 180 around the Z, I got some kind of average, some kind of thing that's in between them, but it was still a 180.
This is averaging, in some sense, the zero degree rotation and the 180 that we've got there.
Okay.
This is a quaternion I just bring up for completeness sake.
It's the zero quaternion.
If you apply it to a 3D model, it collapses it to nothing.
And if you turn it into a matrix, you get the zero matrix, or multiplication by zero.
Very, very boring.
Linear interpolation, also known as LERP, for quaternions and matrices.
Linear interpolation is a very important animation technique.
It's also useful if you're a game programmer, because suppose that you've got a cow here, and you've got a cow here, and you want, what you really want is to go from there to there, but by a certain amount, right?
You've got some number t, let's say, and you want it to be the case that if t is equal to a half, then it gets you halfway from this position to this position.
And, you know, even the summer intern could write this.
If you have these positions as vectors, then you just do the start plus T multiplied by the end minus the start.
And that is what lerp is.
And it turns out that you can, you can do this directly with quaternions.
So here I've got an editor.
We've got a cow up here, and we are applying some transformation to the cow to get what the cow in this window.
the transformation But what if you wanted to interpolate from Q1, from this orientation, to the other orientation?
It turns out there's an easy enough way of doing that.
So we're going to define a float called T. And I'm going to clamp T to being between 0 and 1.
So let's dial T up and down.
One second.
Yeah.
If we dial T up and down, you can see in this window over here that it's, you know, sort of staying between zero and one.
And if we lerp, using the formula that I just said to you, if we look at, if we look down in this window, we've got a quaternion that, if I dial T up and down, if you look at this turquoise quaternion, it's going from the bluish one to the greenish one, which is sort of what we want.
And if we apply this to our cow, we get the cow at a different orientation, and if I dial T up and down, hooray, we are interpolating from one orientation of the cow to a different orientation of the cow, and I can have any number in between, and that gives me this quaternion, which, when we apply it to the cow, gives you that thing that's in between the cow in the first state and the cow in the other state.
Oh, but we're going to do another demonstration here.
because there's another way of transforming things.
Once again, I've got a quaternion, if you look down here, and if I dial T up and down, I'm going from one rotation to another rotation, one orientation to another orientation, beg your pardon.
And if I turn these quaternions into matrices, which I'm doing here, so here we've got a matrix, and I'm visualizing it with what it does to the X direction, the Y direction, and the Z direction.
If I, if I, I've got these two, these two matrices which come directly from those two quaternions that we've got in the bottom right, and I can similarly do the first matrix plus T multiplied by the second matrix minus the first matrix.
Watch what happens, though, to the matrix if I dial it, if I dial T back and forth.
So I'm gonna do, yeah, this.
So we've got some green arrows in here, and they're starting out at the, if we look in the bottom, the top right, we start, they're starting out at where the orange ones are, and they're going to where the purple ones are.
By the way, we're not applying this to the cow yet, so the cow is still doing quaternion lerp.
All right.
And you might notice that there's something a little bit uncomfortable going on in there, which is that if I leave it at this state, and we look at just maths interpolated on its own.
Well, that's a little bit unfortunate there.
Both of those vectors are, yeah, problematic.
Let's, let's apply this to our cow anyway.
And we see that the cow has been weirdly, like, squashed.
That's unpleasant.
And if we dial T up and down, well we do start out at the right orientation and we end in the right orientation, but it's doing this horrible thing in between.
There's something else that I want you to notice about the difference between matrices and quaternions in this context, though, which is that when I dial that number up and down, note that the cow is not looking at us, right.
It's going from left to right without turning to face us.
Whereas, if I switch us back to the quaternion version, and now I dial T up and down again, the cow turns to face us.
And it's starting out in the same place and it's ending in the same place, but it's going around the other way.
To which you might say, oh, gosh, well, that sounds horrible.
What, are you telling me that quaternions go around the other way than matrices?
No, I wouldn't want that.
Well, I can actually do what the matrices did, well, a better version of what the matrices did.
So let's dial T up and down again, and now we see that this is quaternion interpolation, linear interpolation that we've got here, and the cow is swinging its bum past us, right?
It's not looking at us, so it's doing the exact rotation that the matrices did, but it's actually doing a better version of it, right?
Because, an objectively better version, because it's not being squashed in the intermediate state.
Okay.
And the reason that I point all that out is because I want to emphasize that clockwise and counterclockwise are fundamental to how rotations work.
And it turns out that you can switch quaternions between clockwise and counterclockwise by multiplying by minus one.
This may sound like a weird curiosity, but it's actually really fundamental to how the quaternions work.
So here you've got another quaternion.
This is the W equal to minus one quaternion.
What's And you're saying that, well, we've got yet another quaternion that does this super boring thing.
That sounds, that sounds like a big waste of time.
Well, it's not exactly doing the same thing.
It's having the same effect on the model.
But I put to you, this will sound strange, but it's true, that this quaternion is doing a 360 degree turn.
It's a 360 degree turn, as opposed to a zero degree turn, which is the difference between these two.
to which you might say, OK, that sounds bizarre.
What on earth are you talking about?
Because surely a zero degree rotation is the same thing as a 360 degree rotation.
I mean, look.
We start out the cow here.
We do a 360 degree rotation, and the cow ends up in the same place.
But look at my arm, all right?
We start out here, and let's say that I want to do a 180 and then another 180.
I get this thing.
The cow is in the same place, but my arm is kinked up.
You might say, well, OK, fine, but you can't go any further, right?
So this is, what, something that is a dead end for rotations?
Well, no, because watch this.
I can go like this and like this.
180, 180, 180, 180.
I can do the same thing for the other axes, so here's a 180 around the X axis, 180, 180, 180, 180, and the Z axis is the hardest one, 180, 180, 180, 180.
Come on, I think I deserve some clapping for that.
Don't ask me to do it again, it hurts so much.
All right.
This is the bridge in Dublin where quaternions were discovered.
It's got a plaque there, and it says this equation on it.
I squared equals J squared equals K squared equals IJK equals negative one.
And when I saw this, I was like, what on earth does that have to do with quaternions, which I only know about from Unity?
Like, But that's what this is.
If you take the y-axis quaternion, for example, 180, 180, so you're multiplying it by itself, you are squaring it.
You're taking this rotation and doing it twice.
You get minus 1.
Same goes for the other axes, right?
And the other thing that we have here is i, j, k. And let me show you that one for the sake of completeness.
So it's i, j, k.
minus one.
All right.
I, J, and K are what mathematicians call quaternions.
We just call these X and Y and Z. All right.
To really hammer the term, here's our quaternion that's at Y equals one.
If you multiply it by itself, so again Y equals one, you compose two 180 degree rotations, you get the 360 degree rotation.
and put this into Unity or any quaternion thing that you like and you will get this answer.
All right, now we want to understand quaternion from axis angle, all right?
And a good way of understanding this function is by plotting the amount of line against the amount of identity for some quaternions.
Here's the function that we're talking about.
We've got our angle and we've got our axis, and the axis has an x part, a y part, and a z part, which makes sense.
It's coming to us as possibly a vector or possibly a quaternion.
It doesn't really matter for the sake of this code.
And we are, OK, we're taking the sine and the cosine of the angle.
That kind of makes sense because it's something to do with rotations.
And then we're assigning, you know, the x goes to the x and the y goes to the y, z goes to the z. Very sensible looking.
But this is wrong.
Don't, please do not type this into your game engine, because what I've just shown you here is not axis angle to quaternion.
This is axis angle to quaternion.
You've got to, you've got to divide the angle by two.
Now why would that be?
Well, it might remind you of the fact that I've got to go around twice in order to get back to the true start.
This is the correct one.
So, to understand what's going on there, we're going to be plotting the amount of line against the amount of identity for some quaternions.
It's very easy to get the amount of identity, it's just the w part, which is a, you know, it's one number.
To get the amount of line, we're gonna take the square root of the sum of the squares of x, y, and z. So, kind of like getting the length of a vector.
All right, let's get on with it.
So we've got our graph of the amount of line against the amount of identity, and we're gonna start with this quaternion, which is the W equals one quaternion, because it's got, you know, no line part.
It's line part is equal to zero, and it's got a W part, so it's the identity.
It's the zero degree rotation.
OK?
Fine.
How about this one?
Well, this is a 180 degree rotation because it's got z equal to one.
I chose z because why not?
I could have chosen any of the others and so long as I had w equal to zero, I could have put it here.
So this is a 180 degree rotation as I took great pains to tell you about earlier.
How about this one?
Well, this has an equal quantity of z and w, right?
Which means that it's a 90 degree rotation, which I also pointed out to you.
but you about And then how about this one?
Well, this is the w is equal to minus one quaternion, right, because it's a minus amount of identity.
It's, yeah, and that, I told you, is the 360 degree rotation, even though that is 180 degrees.
What is going on here?
Well, this is called a double cover plot, and it's called that for a fairly clear reason.
It's because it's showing you what's going on in here.
When you put angle into sine and cosine, you have to divide by two first, because your angle is actually an angle in this graph.
It's not an angle in the game world.
And that, by the way, is the sine, and that is the cosine.
All right, can we use this for anything?
Well, yes, we can use it to think about going from clockwise to counterclockwise.
So we have, for example, this quaternion, 90 degree rotation clockwise, and then this quaternion I put to you is, in a strong sense, the minus 270 degree rotation clockwise, also known as the 270 degree rotation counterclockwise.
and it looks like this.
And to get from here to here, you multiply the x part, the y part, the z part, and the w part by minus one.
So you've got z is 0.7 up here, w is 0.7, z is minus 0.7 down here, minus 0.7 down here.
Okay, so it's kind of like the upper part is the clockwise rotations and the bottom part is the counterclockwise rotations.
And I chose clockwise arbitrarily.
I could instead have said the top one is the counterclockwise and the bottom one is clockwise.
And this matters because it helps us do quaternion division.
First a little reminder, for rotations A and B, B multiplied by A means rotate by B, but rotate by A first.
which means that B divided by A means rotate by B but rotate by the opposite of A first.
We'll see some very clear uses for this.
Another way of saying this is get me to where B takes me but starting out from where A would take me.
And a place that you deal with this fairly frequently is in translation vectors.
So suppose that I've got the translation that takes me from San Francisco to Los Angeles, and the translation vector that takes me from San Francisco to Las Vegas, but what I really want is this vector.
I want Los Angeles to Las Vegas.
How would I get that?
Purely thinking about vectors here.
Well, a thing that would be useful would be getting this orange vector, which is the opposite of the grey vector, which we can put it down like that.
And then, having gotten this orange vector, it turns out that the blue vector is the red vector added to the orange vector, because you go from there to there.
And you can also write the blue vector as the red vector minus the grey vector because it's the red vector plus the grey vector multiplied by minus one.
Okay.
But suppose you were thinking about a longer trip.
You're thinking about Spain to Madagascar and Spain to India.
But what you really wanted was Madagascar to India.
You wanted this flight path.
And these flight paths are, in some sense, rotations around the center of the Earth.
of or to put it another way, you are negating the X, Y, and Z parts.
You're leaving the W part alone.
One way of thinking about this is that you've got any rotation, let's say like that, is some amount of identity and some amount of 180.
And if you instead say, oh, do you know what?
I'd like the 180 that's this way, because, and the 180 that's this way will be this 180 multiplied by minus one, because check it out.
I have this 180, and then I multiply by minus one, I go around 360, and there we have it.
That is the 180 that we really want.
So what we want, instead of having a mixture of the identity and this 180, we have a mixture of the identity with this 180.
And that gives us the going this way a little bit as opposed to going that way a little bit.
All right.
So, can we use that?
Yes, we can use that.
So, if you want, if you've got a rotation like this, but you want a rotation like that, you want to go from here to here in some sense, and then here to here, well, the red one can be written as the purple one followed by the dark blue one.
The red one, and, yeah, that's just quaternion composition.
It's quaternion multiplication.
So that means that you can write the purple, and, well, we know that you can write the purple one as the inverse of the orange one, and so if all you had was the orange one, you could take this and write it as the blue one divided by the orange one.
Alright, let me check my time.
dual quaternions.
This is part two of the talk.
Dual quaternions, which animators like, and I think they like them better than 4x4 matrices, and so should you.
And what we have down here are some examples of dual quaternions.
Because at this point, you pretty much know everything there is to know about quaternions.
We want to do something a bit more exotic.
Dual quaternions let you manage both rotation and translation in the way that quaternions let you manage rotation.
So here I've got a quaternion, what we've been talking about for a long, long time.
This is a dual quaternion.
Dual quaternions contain quaternions as a special case.
So you can take the W part of the quaternion and put it into the W part of the dual quaternion.
We're doing something quite specific with X, Y, and Z, though.
We're going to turn, oh, well, X, Y, and Z represent a line, and it turns out that we actually need now six floats in order to do arbitrary lines in three-dimensional space.
So quaternions only ever let you do rotations around lines through the origin.
with a dual quaternion, it really could be anywhere.
But it turns out that the X part, we've got, for, for reasons that will become apparent eventually, it's, you're best off thinking of the X part as the YZ part.
Why is that?
Well, if I bring myself back up.
So the rotation around, say, the X axis, right, so this, rotates from Z to Y, right?
It's going like that.
So you can kind of think of X as being Z to Y, right?
And you can think of Y as being Z to X. So, like that.
And, yeah, for the other one.
And that's why we rename x, y, and z to yz, zx, and xy in here.
We also don't want to mix them up with these three, which are easily mixed up with x, y, and z. And that's the reason for the renaming.
unifying rotation and translation.
So, quaternions do your rotations.
You often probably think of vectors as doing your translations, so moving stuff around.
But what if you want to think of these as the same kind of thing?
You want to think of translating, but with the composition operator.
Well, this composition operator is dual quaternion multiplication, to which a lot of people will be saying, hey, well, hang on, don't be so fast, this is also 4x4 matrix multiplication.
And that's true.
So 4x4 matrices and dual quaternions both unify rotations and translations, which is great for both of them.
If we compare them, which is what we're going to do in this section, we'll see that there's lots of advantages to dual quaternions.
Inverting for a quaternion you saw is just minus signs on the x, y, and z part, and that's also true of dual quaternions, which is nice.
Inverting a matrix is a bit more involved.
And the reason for that is because clockwise and counterclockwise is still multiplication by minus one.
Here we're thinking about quaternions, but this applies to dual quaternions as well.
Dual quaternions can be applied to points, lines, planes and normals in exactly the same way, which is nice and elegant, whereas 4x4 matrices can actually only be applied to this without conversion.
4x4 matrix animation also has this thing called the candy wrapper effect.
So this poor woman's arm has been twisted up like she's a balloon or something like that.
We call it the candy wrapper effect because it's like we've twisted the wrapper of a candy.
A candy?
I don't know what that means.
Why is this happening?
Well, her skin is made of a mesh like this, of course, and inside her she's got some bones.
And if we twist one of those bones and we try to make the skin follow the bones in a natural way, we kind of see that, oh, OK, I mean, I guess that kind of makes sense as a thing to do.
But that's clearly not what human flesh does.
So we want something different, and this is why Blender and Houdini and Autodesk and Maya have all implemented dual quaternions to some extent in them.
They call it, they give it a specific name, which is preserve volume.
Preserve volume just means dual quaternions, and I mean, I don't work with many animators, but I picture some animator ticking this box and being like, oh, that looks much nicer, and they're like, they don't realize how much work it's creating for us, but anyway.
It's four by four matrices, candy wrapper effect, dual quaternions, no candy wrapper effect, potentially.
4x4 matrices have 16 degrees of freedom dual quaternions have 8 degrees of freedom and this is actually kind of better because shearing is something that 4x4 matrices can do but it's something that dual quaternions can't do so this is the one game I've ever seen where they had shearing on purpose you can see what the car is doing like that it was skewed to the side a bit there that's shearing and whenever you see this in any other game Yeah.
Something's gone wrong, right.
Dual quaternions can't do shearing.
And that's a good thing.
OK.
If I've persuaded you that dual quaternions sound a little bit useful, you might be interested now.
OK.
Six floats for that axis line.
How do you read those six floats?
And it turns out that these are the same things as what you might have heard being called pluca coordinates.
If you've never heard of pluca coordinates, don't worry, because I'm about to explain what these things are.
OK.
Let's go to another demonstration.
All right.
Here I've got two lines.
These are both lines through the origin.
I've got this line here and this line here.
and I can interpolate from one to the other as usual.
So watch the green line in this bottom right-hand window as I interpolate T up and down.
Ignore the cow for a second, we're mostly interested in the bottom right window.
We're able to interpolate the orange one to the blue one just by, again, sort of component-wise thinking about you've got the X part and the Y part and the X, yeah, yeah.
It's just linear interpolation again.
But suppose that you wanted to think about a line that wasn't through the origin, and here it is.
So here we've got a line being created this way.
I've got a 1 here, and I've got a 1.4 here.
And if I change that 1.4 to 0, I get something which looks actually the same.
If we're looking in the bottom right-hand window, the red and the purple look exactly the same.
And that's because the first three floats that you've got here are the same as the first three floats here.
So this is lines through the origin.
If you want lines that are displaced from the origin, then you use floats in this thing over here.
And we can interpolate these as well.
So I'm going to interpolate from one of the lines to the one that's displaced from the origin.
So look at that, again in the bottom right hand corner, we've got the green line going from the orange line to the purple line.
And if we look at the cow up here, this is the cow having had a 180 degree rotation applied to it, but it's a 180 degree rotation around the green line, so it's a line that's not through the origin, so it's translating the cow as well.
But now you, let's ask a dangerous question.
What if I put a zero in here?
So this thing is now displaced from the origin in some way, but it's not, but it's not got any origin part.
So this is a line, still a line, that's very, very, very far away, it turns out.
What do I mean by very far away?
Well I'm about to tell you.
So consider, if you will, the horizon line.
You might be compelled to say that the horizon line is more like a circle, right, because the earth is spherical.
So yeah, this feels like it.
Maybe it's a circle, but actually if you look around, you'll always see it as a line.
Similarly, the Milky Way, in this very lovely picture, forms a line in the sky.
And both of these lines, in a strong sense, are super-duper far away.
And there's a word that we have for lines that are this far away, which is lines at infinity.
They are infinitely far away in that sense.
This line here is infinitely far away.
You can look at it from any angle.
It'll always be surrounding you because it's just so far away.
All right.
Why do you care about these?
Well, because translations behave more like rotations than you might think.
If you've worked with four by four matrices all your life, then you might not have seen this before.
But translations behave just like rotations, except with axes.
Their axes are very, very distant.
In fact, their axes are infinitely far away.
So let me show you what I mean by this with another little toy.
OK.
Here I've got a Lego motorbike.
And I can turn the handlebars.
And first I'm going, I've got some lines going through the axles of this motorbike.
And I'm going to first turn the handlebars as much as I can.
And you'll see that the axes are crossing.
bring you down to here.
If I put the motorbike like this.
Yeah.
All right.
Holding it like that, I'm going to push the motorbike forward a bit now.
And you'll see that it is rotating around precisely the point where these two lines cross.
All right?
It's rotating around here.
If I change the handlebars a little bit so they're still kind of like this, but we go back down here.
These two lines are still crossing maybe somewhere over here, and if I push the motorbike forward, they're still kind of going around that point.
The dangerous question is, what if you have the handlebars parallel, right?
If you don't turn them at all?
And now our lines are parallel.
Our axis lines, well, they're not crossing in the ordinary sense, even if you took them really, really far.
But, and obviously, if you push the motorbike forward now, you get just a translation, forwards and backwards.
Very, very boring.
But, watch this.
If I hold the motorbike like this, how's this going?
it's So here we've got our motorbike and the axes are crossing at this point here.
And the motorbike is, if you push it forward, going around here.
So if the motorbike was going around a traffic circle, then this would be the center of the traffic circle.
This is the motorbike with the lines parallel to one another, and these still sort of meet each other, right?
They meet each other at a point on the horizon.
And so in a sense, you can still think of there being a line, and the motorbike is going not around the line, because it can't go all the way around the line, but it's a transformation which has this line as its axis.
Another way of thinking about this, so here we've got a carousel.
Look at the poles on this carousel.
They're all going around the central pole, the central spindle of the carousel.
It's axis.
And I'm going to show you another bunch of poles.
Here we've got some trees.
And these trees are going from left to right, just like the carousel poles were.
And they're sort of going around the sun, you might say.
By analogy, we can put the carousel like this, so it's like the motorbike is going around the carousel, there's the center of the spindle of the carousel, and this motorbike over here, these lines are crossing at this point on the horizon, and you can still kind of think of this as having an axis here.
All right, let's formalize that though.
You've got a dual quaternion, it's got an identity part, it's got a line through the origin part, and it's got a line at infinity part.
And if you want an arbitrary line, a line that isn't through the origin, or if you want a line that's displaced from the origin, you mix together some amount of line through the origin and some amount of line at infinity in the same sort of way that you mix together a line like this and a line like this.
All right.
You lerp them, if you will.
Finally, it's time to say what this thing does.
I'm not gonna say a whole lot about it, but I think of it as the screwiness.
It's a single number.
and it controls the situation where you've got a rotation and a translation, right, where you're going like this and then translating along that axis, okay, just like what a screw does.
Okay, last part of the talk, how much time do I have?
Slurp Once again, I have two, I have quaternions, and I'm linearly interpolating from one to the other.
If you look in the bottom right-hand window, you can see that, yeah, it's starting out in one way, and it's ending up in another way.
But I want you to look at the cow now.
And I'm going to, I'm going to let you know that I'm trying to dial up the T value as smoothly as I can.
I'm really trying hard to be consistent.
But you see that the cow has inconsistent speed.
It starts out kind of slow, and then it swings its bum past you, and then it ends up slow again.
That is an artifact of lerp.
And I love quaternion lerp, but this is a bit of a problem.
We might want to fix that, because we might want a super smooth animation where the cow is moving past us in a way that's like tick, tick, tick, just like this going along the angle.
Exponential and logarithm are what we're going to use to fix this bug, so to speak.
Exponential is something that you've actually already seen in some sense, in some sense.
So exponential is kind of the same thing as axis angle to quaternion.
Logarithm is then the opposite of that.
So if you take a quaternion that does a rotation and you put it into the logarithm function, you'll get the axis and the angle of that quaternion.
To be clear though, this is just the version for ordinary quaternions.
But we want to think about dual quaternions, so we've got to think in a slightly more advanced way about the axis that we're talking about here when we say axis.
Here we've got our carousel.
So that's a, that one's a rotation.
This one was a translation.
And then this one is a screw motion.
So if you go down a helter skelter, like, is what, that's what we call these things in Britain.
So go down a helter skelter like this.
You're going around the thing and you're also going down the thing as well.
So it's like, if you're going downwards, you're preserving this line at the horizon.
That's the axis of your translation downwards.
It turns out that if you take the logarithm of this rotation, you get the rotation axis, so this line, with amount, angle over two.
So it's like, we've got that line, but if you do x squared plus y squared plus z squared, the whole thing's square rooted, you'll get angle over two.
And this is with a line that's not as infinity, which defines a rotation.
A pure translation, if you take the logarithm of a translation, and it's a dual quaternion, you will get the translation axis, so you'll get that line back there, with amount, in some sense, distance over two.
And if you have a screw motion, as with this helter-skelter, then you'll get a rotation axis added to a translation axis, both of them with amounts angle over two and distance over two.
So we want to make this thing that's called slurp.
Slurp is the thing that's going to allow us to smoothly interpolate our cow from one to the other while not having this thing where it swings past us super fast.
Slurp looks like this.
So you start by saying the ending thing that you want divided by the starting thing that you want, which will get you the Rotation from where the start takes you to where the end takes you.
You take the logarithm of that, which will give you the axis of this transformation, scaled by the angle of the transformation.
You then multiply that by your t value, where your t value is the amount that you want to go from here to here.
Then you take the exponential, and this gives you a rotation from here to here by the amount t, in some sense.
and then you multiply by the start because what you really want to do is to go to the start and then go from the start towards the end by the amount T. And that is Slurp.
Why do they get called exponential and logarithm?
Yeah, I don't have time to go through this.
Because math.
Like, yeah.
If you want the quaternion that's done, that's Q done three times, then you're kind of raising it to a power, and that's a little bit like raising a number to a power.
And so, yeah.
The idea of logarithm and exponential from numbers generalizes fine to this situation.
algebraically.
I mean, I find it hard to think about this geometrically.
But, yes, that's exponential and logarithm.
We wanted to solve this problem.
We want something like this.
We don't want something like this, the candy wrapper problem.
The way that we deal with meshes is we've got these bones inside them.
We've also got vertices.
For every vertex, we have a position for the vertex.
We've got the bones that it's affected by, we might have that as 4x4 matrices, the bones being stored as 4x4 matrices, but I put to you that it's better off as having them as dual quaternions.
and you also have some weights.
So for each vertex here, you want to say, okay, it's affected this much by this bone and this much by this bone and this much by this bone.
And I've got the number four in here.
I don't know how frequently people use numbers other than four, but four is the number that I've seen people use.
You could easily have a different number, but yeah, four.
We're deciding that vertices are only significantly affected by four bones that surround them.
There's one way of blending with dual quaternions, which reduces the candy wrapper effect in comparison with 4x4 matrices, which is where you just take your four quaternions and you multiply them by the weight, and then you just add all of those together.
No biggie.
But this doesn't completely get rid of the candy wrapper effect.
But it is very fast, because you're adding eight floats instead of 16 floats for a 4x4 matrix.
So it's pretty nice.
If you want to eliminate the candy wrapper though, you have to use something like this, which you can apply the same logic to, well, you can derive this equation in the same sort of way that you derive the slurp equation that I said earlier, so it's kind of like a slurpesque blend, but you have to start with an initial guess, which will be probably the quaternion which has the highest weight, sorry, quaternion, the bone that has the highest weight, And then you have to run this through a few times.
So it's less performant, but it does get rid of the candy wrapper effect completely.
And at Imagination Technologies, we are implementing, well, not implementing, it's already implemented, but we are exposing this thing called the sync function, which is used in both the exponential and logarithm, and this will allow you to make it so that you're using exponential and logarithm super fast when you're doing it on the GPU.
So to recap this talk, a quaternion is some amount of identity and some amount of axis line, with the axis line being x, y, and z, and the amount of identity being w. The double cover plot shows us how quaternions can be clockwise or counterclockwise, and how to invert them, because you just take the point down here, and that's the opposite of the quaternion that you have going this way.
And it also shows us how, why some formulae for quaternions have a factor of two in them, which is a bit random.
Dual quaternions, which allow, allow you to have lines around any axis, can be displaced from the origin, whatever you like.
And this can even include having an axis that's infinitely far away, in some sense.
And that is what a translation is.
Compared with lerping matrices, quaternion and dual quaternion lerp is faster, and it reduces the candy wrapper effect, and slurping, which uses exponential and logarithm, though slower, eliminates the candy wrapper effect.
Let me check my time.
I've still got a few minutes, so I'm going to show you this slide, which I thought I had to cut out, but yeah, so this gives you a slightly better intuition for what's going on with the exponential and logarithm.
So if I go to this webpage, if you Let's say San Francisco in the very middle of the map.
If you walk from here to here along this map, then that will faithfully represent the angle that you have to go by on the Earth.
But if you have to walk from here to here, that's not so true because it's impossible to have that with a flat map.
If I get out of there.
this I'm which is that you can do camera projections with them.
So you eventually do need to convert your dual quaternions to 4x4 matrices.
But that can actually be the last step.
Although one thing that Eric Lengel has done is potentially shown a way that you can do camera transformations with dual quaternions.
But this is ongoing research.
Okay, and with that it remains to say these are my socials.
Please get in touch with me.
I'd love to chat with anybody who's interested in this kind of thing.
I'm in San Francisco until the 31st.
That's my email.
That's my Twitter.
Thank you very much for listening.
We do have time for questions.
We've got seven minutes for questions, which I'm amazed by.
Oh, and we've got mics.
There should be some roaming mics.
Are there any issues or suggestions that you can recommend in converting Euler to quaternions?
is in some order that you decide on specifically.
And all you have to do is you take this formula, the correct axis angle to quaternion formula, you figure out your angle around your x-axis, your angle around your y-axis, and your angle around your z-axis, and then you multiply, and so you've got three quaternions from those angles, you multiply those quaternions together.
That's how you convert from Euler angles to quaternion.
And there can be no data loss in terms of converting from one to the other?
Oh, yes, sorry.
Well, I'd severely doubt it.
I mean, yeah.
Cos and sine, we've got very, very accurate cos and sine for the 32-bit floats.
I mean, sorry, have you had that problem?
Possibly, suspecting it, yeah.
Well, interesting.
I'd love to talk to you about that afterwards.
so I don't have any advice there.
Okay, that's good.
Thank you.
It seems like this is a very useful tool for translations and rotations in three dimensions.
Are there equivalent frameworks for higher mathematical dimensions?
Higher dimensions?
Like a six-dimensional... There certainly are, yeah.
So, this is part of what the second talk is about.
I mean, I can't... So, first of all, One way of saying what the dual quaternions are is that there are three basis dual quaternions that square to minus one, which are the ones through the origin, and there are three basis dual quaternions which square to zero, which are the three basis lines at infinity.
And if you then just know... No, I guess it's quite complicated.
You've got to use something called Clifford algebra, which is what I'm talking about in the next talk.
I'll get to that one then.
Thank you.
I think you already answered my question, but I just wanted to... This is equivalent to the other formulation with a number that's quest to zero, like epsilon.
yeah I is this this this formula what you mean what I've been presenting today Yeah, dual quaternions.
I've just seen another one where you just add quaternions with an extended... The reason that dual quaternions are called dual quaternions is because they are the tensor product of the dual numbers, which are this epsilon thing, where you've got a thing that squares to zero, with... there's a tensor product of the dual numbers with the quaternions, right?
Because you... yeah.
If you don't know what a tensor product is, well, I would guess that you do, a look.
Okay.
Just to help clarify something, if the first three values, like 1 through 0, determine, or like a 180 rotation, and how much of that rotation is built on its identity, so it requires both the W and that value, what happens if it's W is 0, but you have something like, say, 0.5, Why is this point five instead of one?
Well, that's, that's the, so you can, the thing that I was trying to say with this slide is that, so these two quaternions do the same rotation, right, which is to say that you can take any number that you like, you know, any single floating point number, and if you multiply it by all of these, if you take, if you, multiply this quaternion by that number, unless the number is 0, you will always get a quaternion that's the same rotation.
So if you had a quaternion that was x equals 0, y equals 0.5, z equals 0, w equals 0, that is still a 180 degree rotation.
If you're going to get all these equivalent rotations, this is why we want to do the normalization so we don't get this confusion when it comes to these equivalent in quotes.
That's one reason to normalize, yeah.
Thank you, that helps.
No worries, no worries.
Yeah, I didn't say a whole lot about normalization in this talk.
One reason that you want to normalize, it's probably worth saying, is that if you are in Unity, for example, and you don't normalize a quaternion well, and then you apply that quaternion to a point, then the point can end up further away, because you've got a quaternion that has a scale part as well.
One reason that I didn't bring that up is because it's a bit confusing in the context of my second talk, because my second talk is significantly about homogeneous points, and homogeneous points don't have that problem.
If you apply an unnormalized quaternion to a homogeneous point, it'll rotate the homogeneous point just fine.
Same with a dual quaternion.
And, I mean, you'll get a point which has a a different, well you'll, you will, you will get a, a point which has different floating point values in there, but it will have the same geometric interpretation.
It'll still be a point in the same place.
OK, cool.
Any more questions?
Sounds like we're done.
All right.
OK.
Thank you very much for listening.
