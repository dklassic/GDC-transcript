I don't know how to start these videos, so I thought it would be more interesting if I was holding a plant when I started.
Hi everyone.
My name is Janessa.
I'm a product manager at Kongregate and I'm going to be talking to you about minimum viable products.
I am well aware that when some people hear the term minimum viable product, their brain fires a synapse that says abort all non-critical function.
And I get it.
Unless you are a huge nerd like some people in the room, then minimum viable products probably doesn't excite you.
But the truth of the matter is it's very likely that you have used a minimum viable product and are may even be using one now.
So in this talk, we're going to discuss ways that you can utilize them strategically in ways that will help your game, help your product, help your love life.
I lied about that last one.
I want my second cup of coffee.
So you're just going to have to bear with me.
So without further ado, let me whisk you away into the.
wonderful world of MVPs.
I guess before we get started, I could introduce myself some more.
Hi, I'm Janessa.
I'm a product manager at Congregate.
Some of the things that I do are I worked on our PC gaming platform cartridge.
I work on the website, data and security, which is super interesting to about 2% of the earth population.
I'm among them and various other tasks that nobody wants to do because I'm a product manager and that's what being a product manager is all about.
If that photo looks kind of familiar, it's because I took it like 20 minutes ago.
So anyway, Kongregate is a mobile publisher and open platform for browser-based games.
You may remember us as the Flash Games website you would secretly log into to play games while you were in high school history class.
While we don't necessarily condone you playing games in high school, we do appreciate you logging on.
Some of our mobile game titles include Idle Frontier, Zen Idol, Animation Throwdown, Bit Heroes, and Pocket Politics.
So I've said minimum viable product a handful of times now. It might even be 20. I don't know. I've blacked out up until this point.
But if we were to put a definition to it, what would that definition be?
Well, I will tell you.
The smallest solution you can build that will bring the most value to your users.
There are a lot of ways that you can utilize an MVP, but in this talk specifically, we're going to cover how you can use it when you're building a new product or when you're adding new features to your games.
I think before we go further, it's important that we do my third favorite activity, which is setting expectations.
What is or isn't an MVP? An MVP is not just something that you've built and that you put in front of a user.
There's more strategy and there's more research behind it.
And the example that I like to use is you have found a problem that your users have, and we have an idea of how we want to go about solving it.
An MVP is not, we made a thing. Let's see if anyone likes it.
Now there's nothing wrong with making a thing and seeing if anyone likes it, but it's not an MVP.
Why is an MVP something that you should use?
Well, to put it lightly, everything is expensive.
Actions that involve resources or time or development or meetings, it all costs money.
And chances are money is something that you have to take into consideration when you're building your product, when you're working on your game.
And MVPs are helpful because they allow you to engage your users while using minimal resources to get immediate and useful feedback. If you were to just build something without knowing anything about your users and put it in front of a person, you may just get feedback that it's bad.
Getting feedback that this is bad is not very usable or helpful. It doesn't really get you anywhere. Starting with an MVP helps reduce the chance that all you learn is this is bad.
therefore saving you time and money as you build.
I'm a visual person and I like to visualize this process and I also think it helps other folks when they're learning about it kind of understand it a little bit more.
This is a very popular diagram that you've probably seen floating around the web or maybe even taped up on your office somewhere.
I think it does a great job showing at a high level what an MVP might look like.
The main takeaway that I want you to have is that an MVP is shipping something useful to your audience.
In this diagram, when you give a user a tire, that's not necessarily the most useful thing if the end goal is for you to get them from location A to location B.
Alternatively, giving them a skateboard, while it might not be the end solution, it might not even be the best solution, it's still a solution.
It gives them something of value. It also gives you feedback which can shape your decision.
the future iterations of your product. To be totally honest, I have a love-hate relationship with this diagram. I think it does a really good job if you were to use it to explain what an MVP is to like your drunk uncle at Christmas or Thanksgiving. It does a really good job showing what a high level of what an MVP is, but I don't think it does a great job showing how an MVP should go. Again, if we were to look at this diagram, the product jumps.
are pretty big, especially like scooter to bike. It's a huge product iteration. Motorcycle to car is a huge product iteration. It's also quite expensive from a manufacturing standpoint.
And frankly, I find it to be a little misleading if you were to apply this practice to your own product. So I like to use a diagram that makes more sense in terms of product iteration, but is also slightly more appropriate for GDC. Ta-da! The Nintendo handheld gaming family.
When I talk about MVP iteration, I really like to use Nintendo's handheld gaming tree evolution.
You pick.
As an example, because it's more realistic in that it's more of a gradual iteration upon each next product.
So there are four components of an MVP.
We're going to talk about each and every one of them.
The first one is starting with the problem, discovering the solution, gathering feedback, and then iterating.
Now, I know that the title of my talk is, start your minimum viable product with a solution, but actually you should be starting with the problem.
You can't get a solution if you don't have a problem.
When you start with a problem for your MVP, the two things you must keep in mind are, one, you know who you are building your product for, and two, you know those users well enough to know what their problems are, which means you have to talk to them.
Sorry. If we were to look at an example of an MVP, Kongregate itself is actually a great example of an MVP. Emily and Jim Greer saw this problem with indie game developers were having with distributing their games, partly because they knew their users, partly because they were their users themselves.
The solution was to build Kongregate, which if you are not familiar by now, is a website that empowers indie devs.
to have more control of their game distribution.
And the website you see today, with the addition of chat, the awards, the companions, is the result of years and years of iteration and feedback from that original MVP.
And actually, the slide that you see here is from Emily Greer's talk a few years ago, in 2016.
She did a post-mortem on the website and the first 10 years of Kongregate, which is really fascinating.
So I pulled that slide from her talk to show what their MVP was and then what was actually next.
So you've built your MVP or you've built something and you're laying in bed, gazing into the abyss, wondering, how do I know when I am done building?
Ask yourself, does this solve my user's problem?
You don't need to solve every solution. You just need to start with one solution.
This part is really hard because it's where you need to flex your saying no muscle.
Remember that the M stands for minimum.
You shipped your MVP, now what?
Feedback.
Feedback is how you help your MVP grow and stay viable, which is also the V part of the word in case you missed that.
What does it mean when something is viable?
Viable means that your product has the ability to grow and function properly.
In order for something to be viable to your users, you need two things.
You need to listen to them.
You need to listen to them in the first place and understand what they need.
And two, you need to keep listening to them forever and ever and ever.
You can't just listen to them in the beginning and then stop.
You have to keep talking to them and listening to them.
Sorry to break that news to you.
How do you know what feedback to listen to?
Depending on how you're gathering feedback, and we'll talk about some examples in a moment, but I can certainly feel like you're trying to drink from a fire hose.
To top it all off, depending on the source of feedback, much of it might not actually be helpful.
For example, like most of Twitter.
Side note, I really hope the man in that photo is okay.
But I do think it's funny.
Well, it all comes down to your vision.
When you are gathering feedback, ask yourself, is this related to our minimum viable product that we started with?
Does it align with our overall product vision?
Most importantly, will this help us add more value?
What you'll find is, you'll actually be saying no a lot to a lot of the feedback that you receive.
I.
Absolutely love this tweet by Insomniac.
I want to cross-stitch it.
I want to hang it on a wall in my living room.
Listening doesn't mean we will always do what people tell us to.
We hear you.
Hearing doesn't mean we act or follow.
Once you've gotten useful feedback from your users, it's time to iterate and add further value onto your product.
It's really important here that you do not iterate just for the sake of iteration.
when you iterate just for the sake of iteration, you're really just wasting money in terms of an MVP.
We've talked about the four steps of a minimum viable product.
Now I'd like to talk about some more examples, specifically here at Congregate, how we gather feedback, how we iterate upon that feedback, so that you can take this and apply it to your real life.
Maybe even your romantic life, I don't know.
Internal testing is a really great way to get quick feedback and eyes on your game simply by recruiting folks within your workplace.
Even close friends and family could arguably looped into the internal playtesting tool.
Here at Congregate, the teams will have a small group of playtesters.
Usually one person is running the playtest and another is taking notes.
Each person will be on their own device playing the game.
They'll start around the same time and as observations come out, they'll say, oh I'm having a hard time at this part or oh I really like the art at this at this point in the game. The person who's taking notes will write all of that down and at the end of the playtest the moderator will send out a short survey to get an idea of how it went.
One of our teams, in the survey they send out, they put the vision statement of the game and ask, does the game you play fall in line with this vision statement, yes or no? I think that's a great idea because it helps give you, the team, a good read on, are we following our vision statement?
Do our users also think that we are following the vision statement we've set for ourselves and for the game? Here at Congregate, we're incredibly lucky to have a seasoned team of community members.
who utilize among many things the power of community forums.
Oftentimes, community managers will create topic-specific feedback threads for new features, partially so that players can stay on topic they want to, but partially also so that the feedback is a bit more organized.
It also gives angry players a place to be angry.
instead of just putting it all over the forums. Additionally, the CS teams here at Kongregate are really good at getting ahead of anticipating questions about new features or changes before the release, and most of that is they just know their players and their communities really well.
It's really true that a good community manager is worth their weight in...
what's worth more than gold? Platinum. Dark matter.
Diamonds? You know what I mean. Time for some real talk. To be perfectly transparent, it's oftentimes difficult for CS members to get all the information they need from a dev team prior to a release going out. And this is really a prevalent trend anywhere you go. I do recommend taking time to ask your CS team how they can be better supported prior to any release. I mean, they are the first line of defense when you get that feedback firehose.
So if they're going to be a human body shield, they might as well be a little bit prepared.
You know what I mean?
Another great option for utilizing and collecting feedback is a player council.
Our team on BitHeroes utilizes this.
It's a great option for a platform that has established audience and or active community.
The BitHeroes council is made up of players who have been elected by their peers.
The community manager communicates with the council via discord and shares the feedback with the product owners.
The console itself is split by roles, such as beta testers, but also includes a panel of meta specialists, such as tank DPS and so on.
The BitHeroes team will often use the console not only as feedback for upcoming features, but recently released ones.
When the team released Elemental Attacks into the system, this update sort of nerfed...
all previous builds in that attack bonuses were now ineffective against any elemental attacks.
Utilizing the player council, specifically the meta specialists, the team were able to change that feature based on their feedback. The end result was changing the previous builds to become 75% effective on a bonus attack. We've talked about a few use cases where feedback has brought a fair amount of success. Now let's talk about the opposite of that.
Cartridge.
For those of you who are unfamiliar, Cartridge is a PC gaming platform.
We wanted to make a community that was very welcoming and supportive for these indie game devs, as well for the people who play their games.
When we were in closed beta, we did what any sane person would do, and we sent out surveys to our users so that we could gather feedback and test the proverbial waters of how we were doing so far.
And this was kind of our first misstep.
First of all, the surveys were not designed well.
There are folks whose entire career is dedicated to designing a good survey.
It's really easy to make a survey bad, I've learned.
I cannot understate this enough.
Invest time in writing your survey.
User test your survey.
If you can hire someone to write the survey, that would probably be best.
Secondly, there was just too many qualitative questions.
which meant there was just a lot of qualitative data to parse.
Now qualitative data is important, but also very difficult to interpret. Again, there are people who dedicate their lives to gathering and organizing this feedback properly, and I have nothing but crazy respect for them. But if you get too much of it, and you don't have someone who knows how to parse it, it can be a nightmare.
Lastly, and I'll touch on this a little bit more, we ignored red flags that we were getting in the feedback.
This is very important. If you know for a fact that you are gathering feedback from your primary users, meaning people who you know your product is for, and the feedback they are giving you is trending in a specific direction, that feedback will not change just because you go from closed to open beta.
it won't. You'll just be seeing more of that data in the same direction. So if we were to look at some examples from our feedback, we really did get a lot of positive feedback, mostly about the design. A lot of people liked it and if you take a chance to go look at the design, it really is beautiful.
The team did a fantastic job there. The thing about design is even the best design will not save you if your users don't see the value in your product, which we will see momentarily.
A lot of users thought Cartridge was supposed to be Kongregate 2.0, aka free to play games.
We don't have enough time to go into this. Like, this could be a whole nother GDC talk, but getting this feedback that your players are so far from your product vision is a huge red flag. You could not get a bigger red flag than this.
As a result, nobody was buying games because of above. Everyone thought this was supposed to be Kongregate version 2.0. Probably the harshest feedback of all was it was slowly becoming clear that Cartridge wasn't solving any problems that weren't being solved by many other established platforms. Like GOG, like Steam, like at the time the newly released proverbial silverback gorilla that was the Epic Games Store.
In this day and age, a new gaming platform is actually perceived by the target audience as a hassle versus a solution.
Ask any developer who's been review-bombed because they decided to release exclusively on Epic.
Many people take severe personal offense when you suggest they have to have multiple game libraries.
I don't like ending on a sad note.
I'm also too caffeinated to end on a sad note.
So instead I'll end on a cute and happy one, which is companions.
Now if you're familiar, they are cute little characters that congregate players can achieve when they earn the badge of the day.
Companions came into the picture when players had been voicing a disconnect between earning the daily badges and some kind of long-term goal.
After Companions were released, the percentage of monthly average users did see a very slight decline.
However, the average badges that were being earned increased.
This means that even though a bit less users were earning them, the badges became more meaningful to the players who were pursuing them.
And thus ends our in-venture.
A lot of lessons were learned today, and only a few of them ended in tears.
As you leave this video, undoubtedly a completely transformed individual, I leave you with a few points to summarize.
MVPs are about who is using your product.
It's only going to be as good as much as you understand your customer's needs.
So if you don't understand your customer, your MVP won't have very much V, if you know what I mean.
Do not iterate for the sake of iteration. Iteration should only be towards further value to your users, not just for funsies.
Remember that development, meetings, planning, it all costs money. Everything costs money. Everything costs money.
Feedback is a double-edged sword. While it's critical to growth, it has a mind of its own.
But finding avenues for you to control the feedback you receive will help you wield that sword more wisely.
Say no more than you say yes.
This is a very difficult muscle to build, but having a strong product vision and sticking with your MVP and not chasing shiny things will help you build that habit.
Lastly, I would like to give a shout out to the folks who helped me make this talk.
I know you just see my slides and my face, but a lot of people actually helped me and the talk get to where it is today, which is on a video, hopefully playing on Twitch, but I don't know.
We'll see.
So my deepest appreciation goes to everyone on this list for all of the help that they gave me.
Usually at this point of the talk if I was doing it in person I would say any questions and some people might have questions But since this is a video and we can't do that the most I can do is give you my twitter Which is that it's at little dova. You can talk to me if you want or just send me a Plant photo because I like plants. Please do not be mean to me. I will cry Thank you so much for watching my talk today I have to tell you it is so weird Staring at a camera and not actually talking to a real human being because the camera just has this one void of an eye that stares at you with no facial expressions.
It'll never truly replace a human. But yet, thank you, anyway. And of course, remember to be excellent to each other.
