Welcome everyone. We're going to start probably on time. We have a lot to cover. It's kind of sad when you go against like Valve and others out there. Some great talks going on, but we hope that you get a lot out of this one. We ask that you please make sure your cell phones are on vibrate and don't forget to fill out the forms at the end. We'll remind you again before you leave.
So the topic here, as you can see, because it's on a big projector, is we're talking about Star Wars The Old Republic, titled There Is Another.
And we're going to talk a little bit about some of the challenges that we went up against, some of the things that we did in our production cycle to make this game actually happen, to come out, and actually make there be some legitimate alternatives to the other three-letter game that need not be mentioned.
In any case, my name is Dallas Dickinson.
This is Rich Vogel.
I have a clicker here that can make this thing go forward, and so I will.
We're going to talk a little bit about ourselves here, because that's what one does at a conference like this.
So I started in the business as a programmer, and kind of grew up from that as a programmer to a designer, then a producer, and worked on console games for the first five years of my game career.
And I've always been an avid online player.
I play Deku Muds a lot, even once a GM of a Deku Mud.
And...
One of the things I realized, I really love that space.
Connected communities are very cool.
And dealt into the opportunity to work at 3DO with Meridian 59, and then the opportunity to help before UO launched to actually be the launch producer of UO and get that out, and then of course, Star Wars Galaxies.
And then I looked at the next generation of the Star Wars game, which is Knights of the Rogue Republic, which is which is what I'm working on right now, SWOTOR and Stars of the Old Republic.
And it was a great opportunity for me to kind of like learn the lessons I did on other games and apply it to here.
And it was a pretty long path to get to where I did.
And now I'm kind of stuck on this genre because I think it's very cool to deal with connected communities and I think it's really the future of online gaming, not just MMOs but connected communities in general.
proud to be here.
So I'm Dallas Dickinson, I'm the director of production on the project.
I'm old, but I'm not quite as old as Rich, so I've only been in the online space for about 13 years.
I actually started in the casual online games, Wheel of Fortune, Jeopardy Online, and then I moved my way along into the massively multiplayer game, and then as Rich has said, we've worked on a massive, massively multiplayer game most recently.
So the big question here is, how do you actually become a genre leader?
How do you get to this place within the massively multiplayer space?
And the answer is, it is not simple.
But these are the principles that we try to apply.
The first is that you have to be able to broaden the market.
It's something that the World of Warcraft actually did very effectively.
It took the massively multiplayer space and made it something that millions and millions of people were interested in playing, as opposed to hundreds of thousands, which is honestly where Rich and I came from in our previous games.
After that, you do need to differentiate yourself.
There have been a lot of games that don't, and they're the ones that have failed, especially in this space.
You need to build enough content.
It kind of goes without saying, but in games like this, these games that are connected, these games that are always on, where people play with their friends, they get through content really fast.
And we took this as one of the challenges.
We needed to make sure that we had not just enough content at release, but that we had a plan to be updating that content consistently and keeping people really understanding why their subscription is actually worth something.
We're not going to get totally into business model talk here, but really the differentiation we're trying to point out here is we are still a game that has this subscription base, and we believe very strongly that there is space in the market for a handful of these AAA titles that are worth a subscription to your players, but you really need to have content and you really need to have it going very quickly and continue updating at all times.
And it's really important to know that since this is a subscription game in a free-to-play MTX world, that they have to value it as a premium service so that people who pay the subscription feel like they're getting their money's worth every single month.
And that's why it's critical for the update phase to make sure people, when they play this game, wow, I'm getting great value for our money.
So again, it's very easy to say these four things.
Here are the big four principles.
But the question is, how do you actually do that?
The first step, and I want to assure everybody that this is the easiest step.
There is nothing difficult about this, is to start with the world's most popular IP.
Just do that.
Once you do that, and I like to joke with, in fact, I wouldn't have said this if our marketing director hadn't actually entered the room.
I like to joke with the marketing department that their job was to actually walk out in front of a microphone and say, Star Wars, BioWare, MMO, and then walk away.
Because that actually gives a huge leg up.
And so that helps when you're trying to get into this premium level.
You need to have something that strong.
You do need to innovate. I mentioned you can't just release the exact same thing, but you need to be very careful about innovating.
And we're going to talk about the way that we chose to innovate and why we chose to innovate in that way.
You need to scale. And this is scale not just in terms of the content that we're talking about.
It's scaling in terms of your team. And scaling a team, we're going to show you the numbers in a bit, it's pretty daunting.
and it changes everything about your processes, about the way that you've actually structured your management, the way you even structure the teams themselves that are working on the game.
And we didn't do it right the first time.
In fact, we went through many, many iterations in order to get to the structure that we currently have.
And then finally, triaging.
And triage is a word that is overused.
I think people think of it in a very narrow way.
What I really mean is you need to be looking at all times about whether the work that you're doing actually serves really your innovations and serves the core market.
We made a lot of cuts as in fact we have some of our partners from Lucas here in the room And there were some cuts that it was painful for us to sort of decide to make But we made it because we wanted to focus the game. We wanted to make sure that the game that came out delivered Very much on our differentiating factors So yeah, it's Star Wars, we get that.
That helps a whole lot.
But that doesn't guarantee you success.
Again, our friends at Lucas know that they've made many Star Wars games, some of which are very successful, some of which are not so successful.
There's a lot more that has to go into a game, especially when you're really trying to become a leader within your genre and space.
So we're going to talk a little bit about innovation and kind of our process, our thought process, as we chose how to innovate in The Old Republic.
In innovation, one of the things that we want to do is we want to make sure that you differentiate yourself. Now, we don't want to act like every other clone after World of Warcraft came out, because we realized if we did that, we would not be able to reach or keep the players we wanted to keep when we initially launched this game.
So it was extremely important to say, okay, what are we doing and what makes our game unique out there that's different than any other experience that people are going to play our game?
We didn't want to recreate everything because we are an MMORPG, which means we have to have a core foundation of an MMORPG.
So we wanted to make sure that when people who played these games get into our game, they would feel familiar with the game mechanics right away.
There's a reason that people don't take a first-person shooter and remove the shooting.
It's because it's a first-person shooter.
And so we took that as a tenet. We are making an MMORPG.
We need to keep a lot of that core.
So one of the things we first do, and this is something that Blizzard talks about too, and it's also something that was our core philosophy going into our game way before Blizzard talked about it, is to make sure that we go for our core audience first.
They are our influencers.
They're the people that are our early adopters in our game.
They're the people that are viral, because this is an online game, they're our viral connection to the community.
And it's very important that we make sure that we treat and aim our target audience carefully in this game so we can get them into the game early, establish the economy, establish the base, establish the life, I call it, the heartbeat of our game.
And that's going to come from your core audience.
We went after that first.
Then, as time goes on with our updates and everything else, you'll see us drift more toward a more casual play style in our game, very similar to what Blizzard did.
Yeah, but you need to be careful.
You can't do it too fast, and you can't do it in ways that are going to alienate that core.
The core is your market.
I mean, they really are your business, and so you need to hold them close while you slowly grow to the outer edge.
Yeah, it's extremely important to make sure that when we talk about things like, anybody's done a subscription-like game, there is what we call the funnel.
And the people coming into the game needs to be constant.
And the levers that you use for that is acquisition.
retention and reacquisition.
And you have to make sure that retention, which by the way is cheaper to keep people than to acquire people, is very important.
That's why you never want to piss off your core as you're moving towards that more casual audience.
So you have to be very careful how you prioritize.
One of the things we did is we looked at what the core is in MMOs traditionally.
And we wanted to know what could we add to that core baseline.
So we all know that there's a kind of a story arc that goes through MMOs, not a real true story in the game, but a story arc.
And then there's character progression, there's combat exploration.
So this is the core feature set that we knew that we had to hit on all three of these, and we wanted to take something more, and we wanted to look at, so what is the audience, and this is the Bartles IV for anybody who doesn't understand, what is the core look for in type of these types?
Again, so we don't alienate them right away and make them feel familiar.
The socializers, we want to make sure we have a really good mechanics in the game, the support crafting and healing and other things that are kind of sort of non-combat related.
We want to make sure that the killers in our game have good PvP to play.
We wanted to make sure that the achievers have a really good level-based system where you have cool loot and it's all about that.
And we want to make sure that the explorers in a big world have points of interest and side quests.
So these things are very important to make sure our holistic core was solid.
And everything, including all our game design, always look back and say, are we hitting this core MMORPG feature set?
Now, we decided, what do we need to do, layer on top of that, to make our product innovative, but not do everything in the kitchen sink, go so broad that we just fail at making, we make a lot of poor systems in the game.
So what we did, is we decided to say, what is BioWare do very well, better than anybody else?
It's about story.
So what we said was.
We're going to innovate and put the fourth pillar in our game and put story in our game.
We're actually going to do it with total voiceover, not only the NPC, but the character voiceover.
Kind of like what I tell people is, it's kind of like what talkies did to silent film.
It's going to make the genre different in the way you play our game.
In fact, we found a lot of people who play our game can't go back into Blizzard and play WoW because they have such a different experience with our game. It's more emotional. This is something we wanted to do. We wanted to make sure we revolutionized storytelling. We also wanted to say, what is another important thing about Bioware games is our companion system. We wanted to make people have the ability to go out in the game and feel like they're not alone all the time.
Now it's important to meet other people.
We had to make sure that mechanic was there too.
But we wanted to make sure that companions added flavor, added color, also added to the storyline, and really made the game feel kind of unique in that way.
The other way we want to do is combat.
Now combat we want to make sure was different than any other MMO before because most of the MMOs had Flintstone type combat and we wanted to make sure our combat was very cinematic, very much lightsabers touching lightsabers and things like that.
also wanted to do something that no other game has done before, was actually put in a true range combat system in our game. Most games are melee with a little bit of fake range, but really it's like 40 meters. We did 70 plus meters with our game with real true cover system as a part of our range combat system.
And again, really the key to all three of these innovations as we sort of chose them, and again, we had a whole list of stuff that we might want to do early on in the project.
We chose these three not just because we felt that they were places that Bioware had some skills and could bring sort of that Bioware feel to the massive multiplayer space.
You'll note that all three of these things you associate with Star Wars.
You associate it with Star Wars before you know that our game exists.
Tremendous storytelling, the sidekicks within the game, and this cinematic, fast-paced combat.
And so, not only were we choosing differentiating factors kind of from the blue of like, these would be cool things that Bioware does, it's also actually what hits the core of that IP.
And the other thing that's not on this list was, after we launched, we put in the legacy system, which is an everyone knows the legacy of Star Wars.
Again, everything we do, the innovative wise, we try to make sure it fits the Star Wars theme.
And our big goal was to make sure that you felt like you could live your dreams in the Star Wars universe.
That was the key goal that drove every design decision that we had.
And these were the pillars that we communicated to our team constantly and made sure our design always focused on.
Now, we're going to talk a little about, this is the area that we want to talk about, is how could we scale to the size we needed to do and the amount of content?
and the clicker comes back.
So first I just want to give you guys an idea of this.
You may have seen some of these numbers before.
This is a ridiculously big project.
This is the amount of dialogue in this game.
As you can see, it's six times Dragon Age, nine times Mass Effect, more than all Bioware games previously made combined.
It is in fact, we're now in the Guinness Book of World Records for the largest voiceover project ever completed.
It takes a lot of work to build this stuff, and you need to make sure that you actually have really, really good systems to do so.
Twenty full planets, some of the iconic ones you see there, Tatooine and Hoth, ninety unique areas.
These are all the adventure areas that you go to, derelict spacecraft, other places that your story will take you.
And it's a tremendous amount of just locations to build in the game.
And they're all fairly unique in their look.
This was the end goal.
And this is actually what we're hitting.
We have now the telemetry that tells us that people play somewhere between 150 and 200 hours in the level up to get sort of to the max level of their class.
This is a ridiculous amount of content.
Those of you who've worked on RPGs before know that RPGs are frequently 20 to 30 hours, or maybe 50 hours if you're really, really pushing it.
That's one.
story, 50 hours. We're doing it eight times at 200 hours. So the only way you can do this is make sure that your pipelines are solid. We had, again, a leg up here. The hardest part, the longest pipelines, were the ones that BioWare already knows how to do. We have a tremendous writing pipeline, a tremendous VO pipeline, in fact, a great localization pipeline.
So all of the stuff that actually kind of bites other groups in the ass when they're trying to build a game that has this type of content, we knew this stuff and we knew how to get it done, we knew the schedule and the timeline you needed in order to get your writing done early enough for all of that stuff that has to happen on top of it.
We also had a tremendous art outsourcing pipeline.
Rich is going to talk a bit more about that.
That's something that we actually sort of brought in, I should say.
Rich had some great experience, and I had some great experience at Sony, where we had done this exploration into how to create large amounts of outsourced art.
And then our environmental artists, they also kind of really got into the mindset early on of how to iterate very quickly and to get these planets built out.
Some places we didn't do so well.
This isn't a full post-mortem, so we're not going to go into details, but we had some very bad technical issues.
Our build pipeline was horrible.
This was impactful not just to the developers, it was impactful to QA.
We had difficulty getting builds in front of QA that were in fact solid builds that they knew that they were testing against the true latest greatest code.
This killed us.
And it honestly is one of the biggest problems.
We're still finally figuring out all of the solutions today.
Same is true of some of the designer tools that we have for our data table management, string table management, scripting.
Again, these are less impactful.
I should say that the third ones, or the second, third, and fourth ones are less impactful.
The build pipeline was impactful throughout the process.
As I say, we spent a lot of time trying to refine it and get it better, but it wasn't perfect, and it actually, you know, it caused a lot of pain in the studio.
The goal here is to actually have enough content to obscure the horizon.
And what I mean by that is we've all played games, specifically Massive League multiplayer games, where you play the first five levels, ten levels, and they're awesome.
They're really highly polished.
You can tell that a lot of time and love and iteration went into making this experience great.
And then you fall off a cliff.
I mean, you literally, you can feel it as a player.
Obviously, you were in the games industry, you probably feel it more quickly because you know what's going on.
But the players, the ones who are maybe not quite so locked into how game development works, they feel it as well.
I just stopped getting quests at level 10.
I just stopped seeing the level of polish in the areas when I left this zone.
It started to get a little buggy and glitchy.
And we knew that, especially with a game that is so much about the storyline, it's so much about having this engaging, emotional piece that pulls you through.
we couldn't have that happen. So not only does the first five minutes need to be awesome, it actually needs to go all the way through. If you don't have a climactic storyline that actually pushes you through, we sort of have three-act structure. And if the third act doesn't hit you with the power of great cinematics, great story, we actually have failed. And so we had to spend a lot of time making sure that those pipelines worked so that we could achieve this goal.
And how you do that is by scaling a team.
So we're going to show you some numbers here that are kind of terrifying.
We haven't said them publicly before, but anybody who actually looked at the credits could have figured this out.
So show us the numbers, Rich.
Yeah, our credits run 15 minutes, which is scary enough in itself.
I had the task of putting that together.
And let me tell you, if you ever do credits, it's like really interesting, I'll put to say in the game.
All the politics comes right out.
One of the things that we had to do is we realized as we went through, and I'm going to talk about each one of these things, what we had to basically do to develop the content that we talked about earlier is in order to do, to manage this, we had to have 30 production people.
These are producers.
DDs, which were Director of Development type people, and also PMs, Project Managers, to help support the team.
We had 75 designers.
We had 80 engineers working on this project.
We had 40 engineers in platform and management, because we had to build a platform to launch this thing.
And we had an audio.
The great thing is we had LucasArts do the audio for us, but we had to, and they had a big team on top of that, by the way, is not included in this.
We also had a team here just to manage the audio and integrate it into the game.
That's why it's the smallest of the groups.
And the art pipelines, we had both outsourcing and also full-time people.
We had about 140 artists together working around the world on this project.
We had 280 QA people at the peak working around the world, both outsourcing and also in-house outsourcing.
In-house, sorry.
QA.
Because.
The one thing we had to do is be able to go through all this content and repeatedly go through this content every build.
You have to have a large team to do that in QA to make that happen.
How do you manage a team like this?
We are craftsmen.
Very badly at first is actually the answer.
It took us quite a while to get to a place where we actually feel like we have a handle on the structure.
Yeah, we grew kind of quickly, and we had the growing pans to show it, and we had the scars to show it.
We realized as we were going through this stuff, we said, oh, we really have to make some changes here because we're not scaling very well.
The thing about it is, is I tell people we are craftsmen, we are not cogs on a machine.
And we all have personalities that we have to deal with, and we all have to learn how to deal with those personalities.
What does everyone do? They take their best programmer and put him in management, right?
He's going to be the lead programmer, even though he's the best programmer.
It doesn't necessarily mean that he should be put in lead structure, because he may not fail very well.
He may not do very well, because that's not what he has in his DNA to do that.
So we learned a lot about scaling a sense of what's appropriate roles for people and about hiring.
So one of the biggest things we did for hiring is we made sure that when we hire people, we want to make sure they have the skill to do it.
But the biggest thing after we checked that off is can they fit in our team culture?
That was more important to us than anything else because everyone does deals with the prima donnas and the ego type people.
We have them too.
We aren't 100% good at that process.
And in fact, sometimes you want those people.
They are highly valuable.
These are the self-described geniuses, or sometimes actually geniuses also.
But if you have too many of them, if that becomes your team culture, as opposed to they're the exceptions, it's really hard to manage an overall team, especially a team of this size.
Sometimes you gotta isolate them a little bit and put them in their own room, and make sure they're not dangerous.
Go do genius stuff.
Don't talk to anybody.
But there's definitely personalities we had to deal with and we had to do a lot of shifting around because some people didn't do well in their roles and some people did.
And actually some people surprised us and did really well in certain roles that we didn't even know they could go up, came up to.
Now What we did in this organization to make this happen is we basically, if you look over here, we basically have these two pillows, which is QA and production over here.
These are supporting the interior thing here, you see here.
We broke it out into one section is content.
The other section is tech.
And what we did is these two pillars right here were matrix organization.
They cut through the tech and design or content, which means content, anything audio, anything design, anything art is all content.
And then, of course, tech goes all the way down into features and programmers.
We made sure these two organizations supported throughout the organization with project managers, DDs, and producers, and PMs.
And QA had embeds working with, and we'll talk about how we broke all this out into strike teams, to make sure they supported the core group here. We learned that this is actually helping us scale a lot. And we'll talk about a little bit how the matrix management works and later on in the presentation. But then we learned there was something we needed more as we grew because we were such a big team is we actually had, this is what I call checks.
and balances on quality and direction.
So quality was QA and direction was the PMs to make sure everyone is stepping in the right direction.
And then technically, we wanted to make sure that we didn't go down the wrong path.
By the way, we did.
And this is why we formed this group so we didn't do it again.
This is a structured.
today. This is not the structure we started out with. And in fact, the last one to come into this was the tech director group. Because we had a lot of people working on really important stuff, really cool features. They were not being brought back into sort of the reality of how to make this all scale within a massive multiplayer engine. And so we developed a full group who really were just the auditors. They do the deep dives into making sure that features, specifically technical features, but also some of the ways that designers work, that it could scale and could actually fit within our engine, because for a while, we were kind of running off the rails in that direction. And the good news about this group is they audited our designers, because what designers will do if you allow them and give them the tools to do it, they will go off the rails to get it done.
And what they realized is when you get something off the rails, it doesn't scale very well in an MMO.
Anyone who has worked on these know that they're very highly integrated systems, and if you mess something up down below, it's going to affect something over here you had no idea about.
So the auditors actually went into all the systems, the big questing system that we had in our game, and fixed a lot of designer zealous going on to make sure it fixed, because designers are impatient.
They want to get it in.
want to make great stuff.
And they want to make great stuff.
If you don't give them the tools that they want, they'll figure out how to make it with the tools that they have.
And that's often exactly the wrong thing to do.
So this was a very good addition.
I highly recommend anybody doing this in a large team.
Make sure you have your checks and balances on your schedule, quality, and tech.
So when we started, that's not how we did it.
When we started, we kept our discipline.
We started totally agile.
So we picked up agile.
We had all the managers change in agile development.
We got Mike Cohen to come down, and we went through the workshops and all the training and everything.
And we formed scrums, and we did the stand-ups and all those little things that you normally do.
We found out.
As we're moving along and we also have the disciplines that not work as true strike teams or scrum teams, we actually, they worked but they didn't work together if you understand what I'm saying.
They were always with their programmers, always with the artist except they would go meet in the morning and do their stand-ups and they kind of work together with the teams in different locations but they never sat together.
We found that they started to form towers and the cultures around them.
So we said, this is not going to scale very well.
So, what we happened was, again, we were spread apart.
did not scale.
So what we did is we looked at it very carefully, and we said, this ain't going to work.
So when we looked for a new facility, because we outgrew the one we were at, we actually designed it from the ground up to be pods, or strike teams.
We actually have areas that are totally mobile.
We have mobile desks, mobile chairs, filing cabinets, they're all on wheels, they all move around.
We've actually configured our pods probably once every six weeks or so, we reconfigure our pods.
And basically what we did is we put.
the everyone together and formed multidisciplinary strike teams.
This is organized around a single deliverable or like in the case of if it's a feature, it would be the entire team that does a feature. If it's content, it would be, for instance, an entire planet. So that would be the pod. It is everybody working on the planet, including audio, including environmental art, including effects. These people would all sit together. Now, one of the things we learned as we were scaling is when you scale so large, There is a problem with accepting responsibility and ownership over a particular item.
And you always find the finger pointing going this way with the groups.
What we found is when we put it together as a single focus strike team, they actually put, they felt like had ownership over it, control over it, and it made it for the large scale team that we had like 400 people, it actually made a single point very solid.
So it worked very well for us.
But again, we didn't do this until way too late.
We started doing this a couple years ago, but we didn't really get all the way moved over into this structure for quite a while.
It took a long time.
And there's some roadblocks that you're going to talk about.
Yeah.
One of the things that took a long time is all the leads were terrified of losing control.
All the leads that I'm talking about, the gameplay lead, the systems lead, all the leads felt like we're going to lose control, why are we doing this?
And so one of the things we did is we said, we're going to do a matrix management across.
So all the leads, like the gameplay leads, and the client lead, and the server lead, would basically say, OK, you control the resourcing for particular strike teams.
You will help control the review process.
But.
You don't control their daily tasks.
That's the strike team's responsibility, the leader of the strike team to do that.
But you control everything else.
So this matrix organization set up by discipline, number one, help transfer single knowledge because one of the biggest things you don't want to do is when you break up teams like this, you sometimes mentor each other. Programmers mentor other programmers. It's really important to make sure you keep that line, art the same way, design the same way. You have designer lunches or programmer lunches. You have different feedback loops so that you don't lose that core knowledge.
and you make sure that sharing happens across your teams is very, very important because if you do this too much, you'll lose sight of that.
So what we did was we wanted to make sure that that's the other responsibility that the leads had to do.
They can meet with their teams and go over things and do white papers or postmortems, other things like that to help provide an outlet for making sure that buyers feel like they're artists and they can talk to other artists and things like that.
It really worked out well.
And it really, I mean, it basically was a 180 flip from what we started with.
When we started, the disciplined teams were all co-located, and they met once a day with their cross-disciplinary groups.
And we just did the opposite.
We got the cross-disciplinary groups actually co-located, and then the disciplined teams could meet maybe not once a day, maybe once or twice a week.
And they would get all of that feedback and knowledge they needed, all of that touch.
But the deliverable was the thing.
That was the thing you were working on, and that's what the guys around you in a pit were all working on together.
So, one of the things we also had to do is scale in terms of, we call RFTs, which are full-time employees, TFTs, the temporary employees, the term we use.
Basically, these are people who work through an agency that we go through and they usually have year contracts.
Normally we hire basically students or we hire some really good people out there who just now, who we hire part-time to come in or they're full-time employees using our system but we hire them for X amount of time, they're not full-time employees.
and we use outsources.
So one of the things when we started off in production, we realized very quickly is we had to scale, but we wanted to scale in a way that's very smart.
We wanted to scale that we could do it quickly, and we wanted to be able to scale so that when things are done, we can pull off.
As the transition of products go from production to launch, there's different aspects of what people do and they change over time.
So we came up with a process where we went to schools and we look at the best cohorts coming out of the schools for art and design and we hire the top 10 or so and we put them on for a year.
They get their year experience.
It's great for their resume.
They work hard with us, it's new blood, and before the cohort ends, which is usually right up in here, we do a three-month training overlapping period where we train up another set of cohorts coming in.
And then the cool thing about it is we pick in these areas the best of the best.
We say, at this cohort, we're going to pick three designers and they're going to become full-time.
So it gives people an opportunity to show their stuff and get selected as full-time.
So it's a try before you buy.
But it's also clear to them, and I think in terms of HR management, it's very clear when you hire these folks that it's a contract position.
I've worked as a contractor, I think many of us have worked as contractors.
It's a very clear deal, and it makes it a whole lot simpler for everyone, as well as emotionally better, when the end of the term is up.
Some people got pulled in, not everybody did, but it allows us as an organization to grow more slowly with the best of the best.
Absolutely. So on top of this, we pulled outsourcing. So we not only had outsourcing for ART, we had outsourcing for QA.
Outsourcing allows us to scale very quickly because what we did is, and we'll talk a little bit more about this later, is in outsourcing, we had the ability to say, you know, design, we design, and we're a very design-driven shop, by the way, BioWare is.
And so when we iterate things, we've blown apart worlds over and over and over again to get the right feel to it and add things to the worlds.
Adding big set pieces to worlds will take a long time to do if you don't have an art ready to scale like that.
So the great thing about it is we use our art outsourcing to scale very quickly.
I need all this armor set that has to go across eight different character type body types.
Okay, fine. We'll get this outsourcing group.
We'll say go to 25 immediately or go up to 30 immediately and they will.
And that's fantastic because it allows us to do fast iteration, scale very quickly without the burn, by the way. One of the things this does is it slows your burn rate on your project, too, your cost. Especially in a big project, you have to worry about your burn rate, especially the size we are.
In outsourcing, the way we manage that is very simple.
We went around the world and looked at all the outsource houses that we could find.
We actually flew.
We didn't run.
And we went to each one because it was important to see, number one, what the work environment was like.
Were the people happy?
What's the churn rate in that group?
Because to be honest with you, a lot of them do have a large churn rate, and you don't want to train people over and over again.
Especially among the leads, especially among the management structure.
If there's a bad, big churn, you don't want to work with that studio.
And basically, what's the feel of that environment?
Can they scale, number two?
And three is, do they have the network infrastructure to support a build every day that we have to send to them or come back to so we can get stuff quickly from our outsourcing houses?
So one of the things is, once we've picked out our outsourcing, which we had one in China and one in the United States and one in Russia.
And one in Mexico.
And one in Mexico.
We also had another one in Romania.
And one of the things we did is we looked at the core team and we formed a group of sub-leads that we made them hire and train for us, that we trained with them.
We brought them to our place.
We trained them up.
and they would be the ones that train others.
So we can scale very quickly that way because they know what we had to do and they can train other artists very quickly to scale up.
This is very important.
including having an art director there that's trained by, that you pay for, that's trained by them as well, that all assets go through for QA and process.
Now the other thing we say is every two months we send a crew up to touch base with them.
So we go out there, talk to them, see what their problems are because face to face is much better than VidCon or communications through email.
A lot of times they don't tell you the problems.
Actually going up there and watching them work is really when you find out all the issues.
Because culturally, some people don't talk about things like that.
And you have to see that for yourselves.
Integrate them as part of your team is extremely important.
Don't throw things over the fence.
It won't work.
You got to give them T-shirts.
We used to go with another luggage of just T-shirts and swag for them and posters so they make them feel like they're part of the team.
The other thing we did is we had pictures on the wall of every outsourcer.
And they didn't know this, but we rated them.
We actually had little gold stars, silver stars, bronze stars, and fire.
And we rated them of how good they were.
And every group of artists that when we built our art team, we said, we're building this art team for 60% of outsourcing of art.
So get used to it.
You have to manage other artists.
And we started hiring for that in the first place.
And these artists had a set of people on the wall they were responsible for, for feedback.
And it really worked well.
And basically, we also had Vidcons.
We made sure that we always provided a timely feedback mechanism, pipelines for feedback was very important to make sure that if they continue doing bad work, we get them corrected.
I hate it when people come to me when we first started out and say, well, they're not doing what we wanted to.
I said, did you train them?
No, we told them about it, then we didn't really follow up on it.
It was, well, how are you supposed to get better?
It takes effort to make this happen.
It's not easy and it takes a lot of communication, especially when you have time zone issues.
I actually had to work art and shifts to make this happen.
Now.
The other thing we found out is different studios have different skill sets.
Some studios are very good on the organic stuff like the characters and things like and creatures.
Other studios are very good at inorganic like lampposts, chairs, buildings.
And we found out it's very good to do that because go to their strengths.
and scale with their strengths.
It's one of the reasons we had so many studios that we worked with.
Right. And the other thing is don't put your eggs in your all-in-one basket.
One of the things I've learned is make sure you have multiple outforcing houses.
If you're going to scale like 60 percent like we did, it's very important because you don't know what the political situation.
In fact, we had an issue with Romania where they had to be shut down a couple of months because of political issues that were going on there.
These are things you have to be prepared for.
Also, it's leverage to you for your outsourcers saying, if they're not doing your job, you say, well, I'm going to shift it over here.
And it makes them more motivated to do your work for you.
Now, QA outsourcing was a little different for us.
When we first started out, it was very hard.
For us, I would say it's the hardest thing we had to do to get right.
It took a lot of effort.
We started very heavily on outsourcing external with leads just in internal.
We found that that didn't work very well at all because what we found is most of the outsourcing houses that we're using just couldn't get what the quality level of gameplay experience that we wanted to get out of QA.
So.
We had also a lot of technical hurdles.
When we send out builds of like 20 or 30 gigs, you know, out to the outsourcers, it takes them almost a day to load it.
So we wanted to make sure that they had a technical infrastructure there, but still, it took up to six to seven hours and sometimes a day to go out and get the builds.
We lose that time.
So what we found out very quickly is we use QA for regression testing because you see how big our game was. We had 1,600 hours of content we had to test plus all the features that wrap around that. They're very good at regression testing, so we actually used them for that. So every time we make a change, especially in MMO where everything is connected, we use them to do that.
They weren't very good at playtesting the game.
So we had to work very hard to get them up to the level, but they still never got up to the level of our internal testers.
So we grew our internal testers into embeds.
So we had QA embeds that wrote all the test plans for the particular pods, and they were responsible for the outsourcers to test them, as well as our...
people inside the company, we had a core group of team that was just there as a strike team to use whatever we wanted to do with whatever publish we had.
So, we found out a good balance for us is more like not 10% inside and 90% outsource.
We found a good balance was probably about 70% or in this case probably 65% inside and then 45 or 35% outside was a good mix for us.
The other thing we did.
is talk about how we scale our production side of things.
I'll let Dallas talk about that.
So this is really, it's a rule of thumb more than it is anything else.
You will have variations within your studio and such.
But this is what we kind of landed on in terms of, if you have more than 15 developers, and this includes designers, programmers, in fact, sometimes UI artists, all working on particularly one of those scrums, one of those little pods, you need at least one production resource for them.
This number is what we work with today.
This is where we started.
It was ridiculous.
It was just, we grew really fast and we didn't grow the infrastructure to handle it fast enough.
And so we very quickly found out that things were dropping through the cracks.
I think we bought into a little bit that if you hire senior enough people, they don't need producers.
Yeah, that doesn't work.
And so this is where we were.
The 15 to 1, it is a rule of thumb.
The reality is we have senior people who can run 25 developers, and that probably means two or three big initiatives that are being worked on by these sub-teams.
Junior people, our sort of associate producers that we bring in, our associate PMs, we start them at 10 and see how much they scale.
It's not the only thing that I grade my people on, but it's one of the most important ones.
Literally is, how much do you scale as a producer?
How many balls can you juggle at one time in the air?
We've actually taken on a mix of, these words are probably different in the studios you work in.
DDs within the EA culture are development directors.
PMs, project managers, they're actually kind of in the same chain, but usually a little bit lower level.
And then producers. And we use them for very specific things.
So again, this is something we grew into.
When we started, I was the producer and we had three DDs.
And it was, as I said, not good in terms of numbers scale.
The producers tend to be the ones who actually own high-level deliverables.
They might own an entire milestone, or as we are in kind of the cycle now where we're producing content on a fairly regular basis, they might own one of those big game updates.
So they are a combination of a scheduled person making sure that things are on track, but they also hold a little bit of the quality vision.
And they are the ones who are wrangling things at a very high level, making sure that QA is embedded, has a good test plan, etc.
Our DDs tend to own our pure tech initiatives.
Again, the DD within EA, frequently they are people who even have programmers reporting to them.
So they have a very technical background.
They're the ones who would actually run like some of our server initiatives.
The things that the players don't actually see, but it's how your game scales.
And if your game doesn't finish this sub-feature that is entirely opaque to a paying customer...
the game will crash.
And so we would give that type of initiative to our DDs.
And then finally, we used our PMs as really the follow-up people, the detail trackers.
And so we have more of the PMs than we have of the other two.
And that's kind of how we cover all of the stuff that we're doing, both on the content side and on the feature side.
What we found, and this is obviously a cliche, everybody knows this, communications is really, really hard.
It's even harder when you're at the scale that we're talking about.
It's still something that we don't do perfectly today, and so we have to be really, really careful.
We have to pay attention at all times to the way in which our different communication methods are either succeeding or failing.
We actually have a communications strike team, and part of what they do is they actually watch email lists.
If you just sort of do a query on all the email lists that have ever been created because someone says, oh, we have a meeting that happens once a week.
We should have an email list for everybody who attends that meeting.
We can talk about all that stuff.
And these people actually track whether or not those email lists are being used anymore, whether they're being actively managed.
Whether people have started sort of concatenating Frankenstein email lists.
This is a list of this list, list, list, list, list.
Because what we're trying to do is we're trying to eliminate spam.
You can't eliminate it entirely, but as a producer, I get so much email I can't even talk about it.
I would like that not to be true for the people who are actually individual contributors, who have a real skill set, because I don't have one.
So we do that a lot.
Meetings.
This is pure Agile methodology, but it's something that we really try to push on all meetings that are going on.
If you have a meeting that does not have an agenda, does not have a timekeeper, and does not have action items that comes out of it, it's a failed meeting.
And we really push that hard.
I try to, any time I'm in a meeting, if nobody is fulfilling those rules, I jump into it to say, hey, I just want us to clarify, what is the purpose of this meeting?
Does anybody actually know, or are we just kind of sitting here and, you know, wool gathering?
And then finally, the wikis, this is just a funny thing.
When you have a team this size, all of us are vaguely technically apt.
People start building wikis, because it's a really cool way to have information that can be shared.
We had, at one point in time, three different software packages running different wikis.
uh... so like you know that someone's like oh we're gonna use that we use this one word it it was ridiculous and and and they would not link and one would just it's a new it's like a the sad blogs were personally i was a blog and they would like right one blog post in six years later you look back at it but we have those wikis and so that the same communication team does that as well that and that's brutal by i i i hate that But, and this is, these are people in my production structure who also have day jobs.
This is the thing they do for fun, because they're that kind of mentality.
That's what producers do.
They're like, I'm gonna go clean up all the wikis.
And I'm like, please, that's awesome.
Yeah, please tell your therapist I'm sorry.
We also have changed our tools several times, and we've done so explicitly because we found that at this scale, certain tools were great for one purpose, they were not great for another.
In the last six months, or a little bit more than that, of the project, we stopped using HandSoft.
Again, we were an agile company before that, but we found that We were so much into the triaging of bugs, that that was a significant portion of our work, that even though we still had some new work, new feature work, working in those two different places was sort of schizophrenic for our developers.
So we just stopped using it. I mean, we didn't stop using it entirely.
Some people who had longer-soaked projects still going were still living in HandSoft.
But everybody else, significant, probably 75% of the studio, just started living in DevTrack.
and we kind of Frankenstein dev track to support new dev as well as bug tracking.
It wasn't a perfect solution, but it was something that we had to do at the stage of the project we were in.
We couldn't rely on the integration of HandSoft with our bug tracking software.
It wasn't ideal, and I've been told that it's gotten better, and so we're kind of reassessing now because we've changed what we're working on.
But as we finaled the game, we had to do this, and it was a big change for people.
Changing processes. This is the thing that probably, you know, there are probably little dolls of me in the studio that have just needles right through the eye.
Because I do this all the time. I take my team and we look at what our processes are and we say, where are we failing?
Where are we running into sort of repeated fails? We have bugs that keep creeping back in, even though we know we fixed them.
We're going to fix that process. We're going to change that process. The processes change a lot.
At some point in time, I'm sort of hoping that the studio will understand that iterative development of a game also means iterative development of processes.
And that's actually healthy. You need to embrace the change.
It's not there yet. There are a lot of people who are very, very resistant and upset whenever we change a process.
And they write giant screeds against, like, Every time we change a process it ruins...
Jesus killed a baby or whatever.
They just blow it out of there.
It's crazy talk, but it is a cultural thing that I'm trying to make sure our studio understands.
You have to change your processes, especially when you're at this scale.
So we're just gonna talk a little bit about production methodologies, because we didn't do the standard thing here.
No, so one of the things we realized too is again, we started out agile, but one of the things as we started getting into production, we realized that not all things fit one package or style of development, production development. So, project management basically. So what we did is we said, okay, we knew things like writing and VO worked very well with Waterfall, because they're very predictable, very much a lockstep process.
We also knew that we wanted to make sure that we developed a process for art and our world design that time boxed, resource managed, and also looked for.
efficiencies to make sure that we can get things done in a timely manner so that we can get our game done and iterate it on because iteration, to be honest with you, was our most important driver. We had to find ways and systems that we can go in and check our work to make sure it was viable in an area. So we wanted to make sure we had enough time to iterate on everything we built. So we used lean process for that.
We used for software development.
It worked very well for Agile, so we kept Agile for software development.
So our core tech and features were all Agile driven.
And so what we learned is there's not one size that fit all at the scale we're working at.
We use multiple different processes.
I said whatever teams work, whatever you use work and you can track it right, it's fine.
We did say that we used Hands-Off.
We actually used Hands-Off all the way through a lot of the processes.
We did go to BugTrack, DevTrack for triaging bugs down, but the burndowns were our most valuable unit in our Hands-Off to tell us how we're doing above the line or below the line when we're talking about tasks.
That's where Hands-Off came in very good as a tool.
Your burndowns tell you a lot, whether you have to crunch or things are not working very well, you're not hitting your deadline.
But again, the point here is, and I don't think this is even necessarily about this scale.
It's probably something that I'm going to take with me no matter what scale of project I work on in the future.
I used to be very strict about, like, we're choosing one production methodology and everyone is going to follow that methodology because it's the methodology.
It's how we're going to make our game work.
And that didn't work for us here, and we started to, we started to sort of pick and choose the proper tool for the proper type of pipeline.
And I'm probably going to do that in the future, regardless of whether I'm working on another gigantic game like this, or I'm working on something smaller.
So one of the things we learned, and this is what Dallas is going to talk about, is the triage process and how important it is.
Sometimes it's hard to fix a lightsaber.
So this is where we get into metaphor and stuff.
Anybody know who Colonel John Boyd is?
Raise your hand.
That's awesome.
You probably don't.
So he actually wrote the book on fighter pilot strategy.
There literally was not a book, and then he wrote it.
It's what they actually use in Air Force training.
And he has a lot of cool shit in there, things about ailerons that I don't understand.
But the core principle, or at least the core principle I took away from the book, is that he believes that the person who wins is the person who makes the most decisions fastest.
The quality of your decision is obviously important, but that's sort of based on your experience.
If you are an experienced person, you're going to make slightly better decisions.
The real...
differentiator is whether or not you made enough decisions. If I made two really good decisions and you made 18 decisions in that time frame, I'm probably dead. So true in dogfighting. I think it's also true in production, especially production at scale. The way that this is illustrated, sort of the methodology that we try to sort of put throughout our studio, is this loop.
You observe, you find a problem, you orient yourself and try and take in as much data as you possibly can, you decide what to do, and then you act immediately.
It kind of goes to that, what I was talking about with our production methodology is changing.
We iterate all the time.
And if you're not iterating all the time, if you are either letting a decision that you made go for a long time, because it must have been the right decision, we thought about it a lot, or you choose not to make a decision because you need to gather more data, you're actually failing.
You are allowing your project to go off the rails.
And when a project is this big, we often talk about how hard it is to course correct in the Titanic, or in a battleship.
It's really, really hard.
You need to be course correcting all the time.
But this is what happens.
These are some of the pitfalls and why people don't want to iterate quickly.
This is very much on the tech side, people do this.
What about the things that we don't know? We should R&D this for a while.
And that's really sort of that observe, orient, decide, and act.
This is the orient stage, where people say, we don't have enough data yet. We need to look more at this.
We need to decide, find out more, let's do some tests, let's do some R&D, let's do a little bit of prototyping over here.
If you do that, if you allow your project to get stuck in that cycle, which is not the cycle of actual action, you're going to A, sultify, and B, you're actually probably going to go off course, because you're not deciding.
We try very hard to get to action.
Even if it's not necessarily the perfect solution, start going, because we can always correct again.
And it leads to this, which is a thing that you've probably seen in slideshows before, and so I threw it in there.
It's the worst phrase ever.
I'm a terrible person.
The other piece, and this is kind of the flip side of that, that we found, is that history is very useful.
Again, those of you who are project managers, you know that this is how you figure out a person or a team's actual velocity.
How much work they can get done in time is based on their historical velocity.
Really, really important.
Where history starts to become a problem...
is in the postmortem process.
I have been in postmortems, and it's certainly even on this project, postmortems that last a day.
And you come out of it with a list of 45 action items.
And guess what? Nobody ever does them.
You spend a full day of a lot of people's time kind of analyzing and saying, what would have been the perfect way to have done that?
And you know what we should do? We should look at this.
And that is not useful.
As a rule of thumb, again, I like postmortems to be an hour long.
If it's more than that, it's actually two postmortems.
You need to figure out how to break it apart into these people should talk about this system that needs postmorteming, these people need to talk about this system or methodology that needs postmorteming.
If you come out of it with more than three or four action items, you're not going to do them.
It's just the list is too long, and you won't get them scheduled, and other stuff will come up.
And again, this is really the other end of rule gathering.
if you're doing this for too long, you're not actually observing the new problem yet. You're sitting there between having acted and then finding what the new problem is and to, to, to make, to make changes for.
So the big deal here, and this is true of all, of all projects, not just projects of this size and scale, is that it's hard to ship a game.
There are all sorts of things that get in your way, things that can derail you.
At this scale, it's a longer road, so there are many, many more of them.
And so what we try to, again, keep our mentality about that iterative process, because you want to solve your problems as quickly as you can, and you always have to keep your eye on the goal, which in this case is roadside assistance for the dude who went off the road.
The goal is to make a great game. It is to make the best game you possibly can with your resources, your time, and your budget.
We are aiming for the AAA title, the AAA sized MMO, but it's the same methodology here wherever you are.
You need to identify those problems and iterate as quickly as you possibly can. Don't let them sit.
These are different tiers of our triage process that we're going to just kind of talk through a little bit of.
So one of the things we did is when we first did Agile development, no one ever talked about the roadmap.
They always talked about what's in front of them or the backlog.
No one really put it all together.
And so one of the things I had to do is I kind of thought about it, you know, when you do Agile, you're so close to the weeds that you don't see where you're going sometimes before it's too late.
So what we did is we developed a...
a release schedule, I call it, which where every six months we look at our current backlog and put it together in a release schedule for what we want to do.
This is number one to get rid of the risk that we talk about in this project, do them up front and early, prototype.
develop things that we can get the unknowns known fast as we can.
So what we did is, in the first release, we did our first playable as our first release.
It was six months of work.
We broke it all down.
We figured out that after the end of six months, we had a playable deliverable called the first playable of our game.
And what we did is we took vertical slices of different things that are risky, and we put them into a six-month cadence.
And in that cadence, we basically had seven-week milestones.
The 17 milestones were made up of two sprints of three weeks in duration.
So, it then led to a six-month- And a bug fix week.
And a bug fix week. That's how you get to seven.
And the bug fix week is when you pull everything and you do the integration.
We know integration, by the way, takes longer.
So, that's why we do two sprints, because we integrate at the end of sprint one and we integrate at the end of sprint two.
And we also, when we put it all together for release, we actually bug fix it.
And We also did something at the near the end of the project.
We formed a DevStar.
The DevStar is where the director of Gantt, where all the top tiers you saw in that first organizational chart were sitting in the room together.
And what we did is we brought everyone to us to explain where they are.
In the background of our room, we had a board that was like 20 feet across.
and had magnetic strips of different things that were outlining what we needed to do to final our game.
And they were tracked daily.
We were moved across the board daily by the PMs and the producers that were responsible for the different strike teams we had going on.
Remember, if you have 15 people on a strike team, we have up to 40 strike teams running at the same time.
So we had to make sure all that was gathering together, and we had this huge punch list that were on the walls at different groups that would come into the Death Star and present where they are and we did this every single day before we launched. Like four or five months out we went into this plan which really helped us. Everyone was together, they came to us and they went to us and explained where we are and we triaged in that room. That's including bug fixing too.
Now, the six-week or seven-week plan gave us the resolution that we needed to do the three weeks, that we needed to do the daily triages that we had.
All this was running concurrently until we finished the game.
And really the whole point is that each scale here you have to be cutting.
You have to be triaging. You say, hey, this is our six-month plan.
Looks like we're going to miss something.
We need to actually talk about a major feature or a major piece of content that is not going to make it. And if you're disciplined, you actually cut it.
Or if you're undisciplined and are working on an MMO where you can do shit later, which is what we did a lot of, you're like...
it in the backlog, that's post launch content. But you need to at least do that, you need to take it off the table. And we do that at each of these steps when we're doing our seven week plan, our milestone plan. What do we want to do? Oh wait, it's twice as much as we actually have time for. Now can we actually cut this stuff? Can we really cut it? Let's really cut it if we can. We were pretty brutal about this, certainly during the finaling.
Yeah, it's very important to cut your babies in half early and often.
And it's very important to also make sure that you don't do nice to haves, right?
That's what everyone wants to have.
We made people cry in Death Storm many times because of that.
And the reason we do this...
You're saying that like he enjoyed it.
Yeah, I did.
Because he enjoyed it.
Because I just love them because you see how upset they get.
They're so...
They...
I gotta have this feature in or we're gonna die.
No, you're not.
Just give me that particular feature and we'll see where we are.
But the issue is, is everyone's passionate about their systems, we understand that.
But at a high level, you have to triage, you have to triage often to make your goals.
The problem with agile development, a lot of times I've seen, is you put everything in the backlog that you can't make in the milestones, you don't realize how big your backlog is because you're not looking at it all the time, and it's huge.
You're epics, by the way.
can be very huge. So we realized, especially in the scale and the time frame that we're working in, we really had to manage that closely. To the end, we actually did daily triage because it really was about bug fixing at that point. So we basically said, what's our A's and B's, what's our C's and D's, what are we going to put in this particular build for beta testing that we would want to do? And we actually did that on a daily basis.
We actually do something that's interesting.
We do a tiered triage, again, with a team this big.
We have actually had to give ownership of not just the work that's being done in a particular sprint, but actually the bug backlog on those strike teams we mentioned before.
So the QA lead in that strike team, the product owner of whatever that feature or piece of content is, and the producer or project manager who's assigned, it's their job to keep that prioritized and actually keep people burning through it.
We had some teams that were very good at that, some teams that were less good at that.
And it really kind of had to do with how strong the producer was and whether or not their actual product owner or lead had that sort of triage mentality.
And so their job was to keep that stuff going as much as possible and then raise up to us in the Death Star any place where they needed sort of a higher level call.
Where they're like, well, we can't get this done in this sprint right now, but I think you guys really want it. Do you?
and they bring that to us and so that would be the next year of the triage and we would do that also on a daily basis is sort of the second year of the stuff that bubble popped.
It's really important, we didn't have enough time to talk about this, what done means.
Done in a lot of different areas means acceptance by a product owner in QA.
It's really important because a lot of people think done means something else.
And it's really done in phases.
A lot of times things don't fit in a perfect milestone.
I wish we had time to talk about that.
But the key thing here is about cutting and scoping all the time.
It's important to think about everything is on the table.
except for your core. You got to look at your core, always evaluate what you're cutting to how it affects your core.
There are certain core features you have to launch with or you're not competitive.
You always have to look about how it affects your core all the time.
And what your core, all the requirements that are affecting your core have to make your decisions in triage.
And then again, cutting the nice to haves early and often are key to doing good triage.
And triage is really what breaks.
In my opinion, the low quality games, it separates them from the low quality games to the high quality games.
And again, what is this all about, to be very honest with you, what we've all been talking about for the past 30 minutes, it's about scope, quality, resources, time and how you balance that out through especially a project that took five years to build, how you balance that out to get done and not dabble all the time.
It's all about tradeoffs.
It really, really is.
You always have to constantly do tradeoffs all the way through your development process, from the beginning to the end, to make sure that you balance against what your core feature set is, making sure that your vision of the game is always stayed through, and make sure you're competitive and differentiated at launch, and have a quality launch experience.
And we didn't touch about, that's a whole topic all together, is how to make a smooth MMO launch.
The things we did were all based on this thing about scope, quality, and consistency.
Trade-offs we had to do, resources and time we had to do, and all the balancing act that we did.
And that's what brought us together.
So we are running over a little bit, but this is the last session.
We actually have a little bit more time.
So if people want to ask us questions, please feel free to come up and answer.
Thanks.
Thank you.
