I'm talking today about crowdsourcing the localization of Gone Home.
So in case you haven't played it, I'll give you some context for what Gone Home is.
It's a first person narrative exploration game.
The player wanders through a static environment, you know, just examining things, reading content.
There's no puzzles, no combat, no NPCs, anything like that.
It's all about discovering a story that's kind of encoded in the environment.
And the main storyline is delivered through these Bioshock-style audio diaries.
That is, the player picks up certain objects and audio plays over the speakers, explaining somewhat what's going on, moving the story forward.
So what exactly was I thinking about, or were we thinking about when we were considering whether to localize our game at all?
Well, first thing is that I was a UI programmer on Bioshock 2 and...
To be honest, on that game localization turned out to kind of be a mess.
It kind of happened at the very last minute and caused a lot of problems for a lot of people, largely me because I was the UI programmer.
So what I learned from that is if you're going to localize a game, you have to do it right and you have to do it early.
That's key.
Another thing we had to consider, Gone Home is a narrative heavy indie game.
So what does that mean? First, narrative-heavy means that if your primary language is not English and you can't really understand this English narrative, you're not going to get much out of the game. In fact, there's nothing else to the game than the story, so if you can't understand the story, you probably shouldn't buy the game.
And it's an indie game, which means that we have a fairly limited audience to start with.
And the more we can expand that audience to speakers of different languages and so forth, the better.
So, you know, that's good.
And then the other thing we were considering is that we wanted to have as accessible of a game as possible.
It turns out that a lot of the...
things that one does to create an atmosphere for localization also help accessibility. Things like subtitles and easier readable text overlays and things like that so we would kind of be killing two birds with one stone by supporting some of those things. But there's was a little bit of a problem. Gone Home's budget there really wasn't one. There were Three of us who quit our jobs and moved into a house in Portland, we lived together in this house and tried to make a game in the basement.
Everything we spent came out of our personal savings.
It was the same wallet that we were using for our rent and our groceries and things like that.
So as a result of that, we were highly motivated to do this cheaply.
We didn't want to spend our personal funds on anything we didn't have to.
So, to kind of continue along that, or further that point, Gone Home's content, there was a lot of it.
Again, it's a narrative-heavy game, right? So there's a ton of text, both important story-critical text, and then just flavor text to kind of give the world a little bit more depth.
All of this text, most of this text, except for the UI stuff, is baked into textures and placed on objects in the world.
So it's not something that can be dynamically manipulated easily. It's, you know, in these things.
And again, there's a lot of audio that is very well voice acted by professional voice actresses.
So...
There was a lot of content. Here are some numbers. These are just very rough numbers because all I did was use a program to kind of do a count of words so it's not accurate at all but it gives you some idea of the amount of scope we're talking about. I did some research and contacted some localization firms and one seemingly middle-of-the-road quote that I got was something like 20 cents a word a language for localizing a game So at that rate Localizing our game would pay our rent for over three years. So that was obviously not an option We did we did want to localize the game But we didn't want to pay for it so How do we how do we do this?
Well, we decided to do crowdsourced localization.
We wanted our users to localize the game for us.
We would put out the game and have people translate it into all their different languages.
And so the next question to ask is, well, what do we localize, given that we're doing crowdsourcing?
Well, again, we had these amazing professional voice actresses who did the voice work for us.
And also we used Unity which packages up audio files into like a big binary file that goes in your game and it's really hard to actually extract or replace audio files from this giant package of binary stuff.
And so we decided to do text only localization.
It's also just a lot simpler to do.
We wanted to use subtitles for all the audio content, for the baked in text on textures and objects and things.
We decided to do an overlay over those and UI text, which is possible to change dynamically, we just would swap out.
So I'm going to show you some examples of what I'm talking about here.
So this is an example of some important and unimportant or flavor.
In this case, maybe artificially flavored text.
It's indistinguishable, maybe, at first.
They both look like just kind of tables of figures or whatever.
But the one on the left helps the player to understand that this family has recently moved into this house.
The one on the right just kind of helps to provide a realistic world where soda has ingredients in it.
This is an example of the text overlay.
So this is the same moving invoice from the previous slide, except it's been, you know, it's got some transparency on it so that it's, you can still see what exactly you're reading, but it's no longer the main visual element.
And then overlaid on top of that, there's much more readable text.
It happens to be in English, but it could be, you know, anything, because it's dynamically swappable.
Here's another example of text overlay. This is a book entitled Making Friends Even When You're Shy and it's got a post-it note on it that says, Sam thought this might help, signed Dad.
So the player from this is supposed to understand that Sam is maybe having some trouble making friends and that Dad is trying to help but he's not very good at it. So, poor Dad, poor Sam.
But you can see how text overlay works here with 3D objects and baked in text.
And then, you know, subtitles are just like subtitles in any other medium, basically.
Right there.
So, yeah, given we wanted to crowdsource our localization system, how do you design a localization system with that in mind?
First things are, it needs to be easy for Steve and Carla who actually wrote all the text in the game to edit it, because they're going to be writing a lot of text and editing these files all the time and things like that.
It needs to be easy to translate for fans who actually want to do that.
It should be really obvious what sentences need to change into what different ones and where to place these various things.
It should also be easy to use for non-technical players, that is, you know, you shouldn't need to do complicated things with your computer or download weird obscure software and learn to use it or anything like that.
So the fairly obvious solution for this is that everything is in just plain text files that are at a particular location in the file structure of the operating system.
XML for subtitle data since it has timing information in it, but also it's really simple XML layout basically, so very easy for even non-technical people to edit all of this data.
The other interesting thing, if you're crowdsourcing your localization, is that...
You never have a full translation of your game that you can play, and so you have to somehow test this without ever actually using it, which is kind of the worst thing to be faced with as a software developer, right? The only way to test something is to actually use it. So, in order to get around this problem a little bit, I wrote some scripts to generate, you know, localized, fake localized content.
One just took English strings and reversed them.
That's really nice because you can still basically read what everything is supposed to be and navigate the game and everything like that.
It's also really simple, obviously, to do.
Another one is lorem ipsum, where you just replace every string with an equivalent amount of lorem ipsum text, which makes the game impossible to play because everything just says lorem ipsum everywhere.
string and everything. It's also really obvious with both of these when they've been translated so you can tell very easily if something is being missed by the system or whatever. And then the last one that I wrote but we didn't actually end up using, use the Google Translate API to just automatically translate strings from one, from English to whatever language and put those in. Obviously that would be kind of the ideal solution because everything will end up being approximately the correct length and it'll use all the special characters that you might find in that language.
It does cost a little bit of money though to use the Google Translate API, not a whole lot.
I did some calculations and I figured out that we could translate our whole game for something like 20 to 25 bucks per language or something like that, which isn't bad, but we didn't end up using it anyway.
Another thing we did was had lots and lots of warnings in the system whenever content was not found so that we hopefully would know right away when something was broken or missing.
And the last thing is we localize the game to English as the default, which means that when you're playing the game, it's running through all of the stuff it would do normally to localize the game, except it's just doing it into English.
So if the localization system ever entirely breaks down, or if there's entirely missing content, you see this because it doesn't work, basically. You don't get to play the game.
Big thing to remember about crowdsourcing is you've got a bunch of people doing a lot of work for you and they're not getting paid anything.
They're helping you out a whole bunch and so you need to help them to help you.
What we did is we made a lot of documentation about this process and how to use it.
We published this on our website as well as packaging it with every copy of the game.
We tried to make the process as painless as possible.
Again, you don't need to download any weird software or anything like that.
All you need to do is go in and edit these plain text files.
It should be really easy to do.
Because we didn't do, again, we never had a fully localized version of the game, We knew that people were going to find bugs, and they did.
And it's really important to respond to those really quickly.
We actually patched the game a few days after shipping it because there were some pretty bad localization bugs.
Another thing that will happen is, you know, your translators will...
probably need clarification on the text in the game, especially Gone Home is set in the 90s and is told primarily from the perspective of a teenage girl, so there's a lot of idiom in the game text and so a lot of that needs clarification as to like, well, what exactly does this mean?
Again, no one's getting paid for translating your game, so the only thing they get is their name in lights.
So you should make those lights as bright as possible.
Lots and lots of credit in whatever form people desire.
So I have here the URL for this localization-specific page that we set up for the game.
On this page we have, again, the documentation.
We have...
basically where people can ask questions and get responses and see you know these clarifications and responses from other users and we also, that's where we put everyone's names for crediting with a link to the actual translation package that they produced so that's kind of the one stop shop for all of this stuff So, um Yeah, we went ahead and we did this. We crowdsourced our localization.
How did that go? Well, what went right was we have been localized into more than 12 languages for free.
That's really awesome. We have a really enthusiastic community doing this stuff for us.
They're super engaged.
The Japanese translators have had, I think, like two interviews in Famitsu so far.
Awesome. That's cool. Which is kind of bizarre because I don't think any of the actual dev team has been interviewed in Famitsu about the game.
So, you know, awesome. More power to you.
It was easy to add additional content to the game. I think I mentioned before that we added a commentary mode a few weeks after the game shipped that was a huge amount of content.
And it went kind of painlessly into the game. It didn't break any existing translations. It just added a whole bunch more stuff without any problems.
And the other thing is that popular languages will get supported.
So, you know, before you ship a game, for all you know...
I don't know, no one's going to play it in Germany, or maybe, you know, it's really popular in Turkey or something like that.
Like who knows?
You know, if you have to pick all your languages that you're going to localize to before you ship, you may not be able to target the right areas, whereas crowdsourcing means that you'll get the languages that people are actually playing in.
Except actually someone did an Esperanto translation of Gone Home, and I don't think there are that many actual Esperanto players, probably. Maybe, I don't know.
The flip side of this, of course, is what didn't go so well with this.
One thing is that the main thing we used for the translations is a very simple dictionary structure, so the English...
Sentence is the key and the translated sentence is the value.
Basically this means that if the original sentence changes, even in the most minor way, like fixing a typo or changing punctuation or anything like that, that entirely invalidates the translation.
And so that's obviously not ideal.
It would be much better to have a unique identifier system so that you wouldn't lose the translation when it changed.
We really screwed up the fonts. One of the things we had to ship with a patch right afterwards was fixing some of the fonts for other character sets because they were just way too big for actual people to use. And then, you know, I mentioned all the stuff we did to test. It was not nearly enough. We missed the font thing, for example. There was a lot of other stuff going on with four people as the core team.
and a couple other testers helping us out.
We just did not have enough people or enough time or honestly put enough attention on testing the localization stuff.
And then we basically intentionally, entirely ignored any sort of problem solving for UI spacing.
So if strings were longer than could fit in the UI when they're translated, then I guess you need to change your translation.
Sorry.
That was the best we could do.
But there are, oh yeah, and then the biggest thing that went wrong is even though we shipped a Klingon font set with the game, no one has yet done a Klingon translation of Gone Home.
It's really tragic.
But there are some more caveats for doing crowdsourced localization in general.
First one is that even though all of the actual translation is being done by...
other people for free. Supporting localization in general as like a system is a gigantic task that touches pretty much every discipline that works on a game and it will take hours and hours of everyone's life more time than you think it will. Especially if you really want to do testing well it will take lots and lots of hours of this. This is one thing if you actually pay for localization.
Excuse me, obviously you not only get people translating this stuff, but you get very good qualified testers to go through and verify that all of this stuff works really well.
The other thing is that crowdsourcing your localization means that when you launch your game you do not actually have any support for other languages, so you can't check the little box in Steam that says this game speaks German or whatever.
And you know what? Maybe you can never do that. If your game just isn't popular enough with certain languages, or people just don't feel like doing the work for you, or whatever happens, maybe you will put all this work into a localization system and no one will ever translate your game. That would obviously be heartbreaking, right?
So yeah, I also have, this is a slide, I don't have a whole lot to say about it, but these are the languages that Gone Home has been translated into so far.
Japanese is actually still a work in progress, but this is kind of really impressive. There's some very surprising things up there.
I wouldn't have picked Czech for a language that people would want to play our game in, or Turkish, you know, but hey, this is amazing.
I'm really, really gratified that the community has...
our game to this degree. I'm really happy about it. And yeah, I don't know that we have time for too many questions right now, but if you want to get in touch with me, here's how you can do it.
That's my email, my Twitter handle and the URL for our game. And thanks a lot for coming.
I think we have a couple of minutes for questions.
Probably we have a couple of hundred questions for you, but we can accommodate at least one.
Sure.
Hi. What avenues did you use to build your community?
How did you get the message out to have people come?
That's a really good question, actually.
Everyone on the development team for Gone Home is really severely addicted to Twitter, and that has been kind of our prime means of community building for the game in general.
And so, we had a number of things.
First of all, right before we shipped the game and the localization system was in place with, you know, how it would work and everything like that, I made a big blog post detailing exactly how...
One would go about localizing with all these examples and things like that and kind of tried to, you know, play it up as much as possible.
So that was, you know, we made that a big single news item about our game in the exciting run up to launch and everything.
And then, like I said, everyone used Twitter and our game used, you know, We tweeted a whole bunch of stuff about that.
Every time we had someone interested in doing a language or that actually finished a translation, we would make a big deal out of it on Twitter and say, hey, here's this awesome translation.
And yeah, we posted on the Steam forums for our game and everything like that in order to try and build this community and get people excited about doing this for us.
Obviously a large part of getting people excited about doing this sort of thing was, you know, people were excited about the game in general, which was obviously really good, and we're very, very gratified for that.
But yeah, I think that, you know, making this a big feature that we kind of sold as like, hey, look what you can do with our game. We're giving you the freedom to...
Take our game and translate it, and actually not just that, but you could rewrite the story if you wanted to because all the story is encoded there in text.
If you turn off the audio diaries and just have subtitles and replace all the text, you can tell an entirely different story inside of our game, which you know, we said, hey, check this out, this is really cool, this is the way you can mod Gone Home.
And no one's ever done that, but you know, the potential is there. I hope someone does.
Okay, thanks gentlemen.
Thank you.
Okay.
