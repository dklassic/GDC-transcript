Hi everybody. My name is Paul Rabicki and today I'm here to talk about, uh, it's kind of a bullshit title. Um, so who knows what this is?
Who knows what the pink line represents? Okay.
Think about how much information you just grokked in like two or three seconds.
So wouldn't it be great if we could do something like this?
for our UX designs.
So maybe I think this is more what I'm gonna talk about.
But before I talk about sort of methodologies and techniques, I just wanna set a shared context of what UX design is, at least to me, for the purposes of this talk.
So we sort of have the four tentpoles of game design, product development.
And we have some levels of proficiency and understanding within that.
And I think every discipline would put themselves in the center of this.
I totally get that.
We have a mixed crowd here today.
Everybody belongs there.
But here's my pitch.
The reason why I think UX sits here is because we're all in the same room.
We as UX designers take the goals of all of these other disciplines and synthesize that for the player experience.
And we're doing that separate from UI, which more sits over here.
So this is my blob.
I've done most jobs in the product development lifecycle.
I started in QA.
I've been a producer.
I wrote some really simple Flash games for set-top boxes.
But for the past several years, I've been doing UX.
And I love how.
where our discipline sits at the moment.
I sort of say every UX designer has a major and a minor.
So we all do UX design, but we come from a variety of different backgrounds.
And we have a variety of different interests along this axis.
So.
This is my UI design partner on my most recent project.
And there's hella overlap there.
Yes, I get that.
I think that's good.
I think that should not be something to be afraid of.
Specifically, game design also generally tends to overlap UX.
There's a lot of room to grow in here.
And this is the blobs of all of the UX designers at Maxis.
And the key, I think, for successful teams is putting together blobs that are aware of each other's overlap and don't fight that, but seek to grow in interesting and new directions.
So, what's your blob look like?
Your team, the person whose job and role you wanna grow into.
And today, I'm hoping that here, what I share with you allows you to grow your UX design blobs.
With that, what exactly does UX do?
Most people think of this, but...
for a successful product development pipeline, I think there's several steps before this.
And I'm talking through this in the context today of starting on a new project or with a new team and building from the ground up.
For me, wireframes are like halfway through.
So let's jump back to the foundation.
Research.
So certainly read all the specs and various documentation, but also interview all of the leadership and the key stakeholders on your project, and find out, I heard this talked about earlier today, find out what everybody's goals are on the project so you know not just where the project is, but where you want to get to and where everybody else wants to get to.
And I want to talk about that third one, deconstructs.
I'm on the mobile side.
We're doing deconstructs all the time.
And I think everybody does this, but a lot of times you'll play a game for a week or two, lunch breaks, evenings, and take a bunch of screenshots, and that stuff sits on a shared drive somewhere.
And that's cool.
You can refer to it later when you need to talk about it.
But I would propose take the half hour and just throw that thing into Illustrator or Sketch.
And all you're doing is laying things out horizontally along the axis of time, and then vertically for states.
And what this does is when you output this, and the key is to make sure this gets output and set up on the wiki or someplace visible, this creates a.
durable, tangible output to your research time.
And that's one thing that I think a lot of times, at least for designers, because we're doing this all the time, but it can be tricky to get leadership to give you time to do deeper research, and by creating an output, that can help in that process.
So audience for this is yourself as a UX designer, but also design and PM.
I've actually talked to the core PM team at Maxis to sort of start doing things or deconstructs this way to make things usable and accessible to other team members.
So once you have done your research, let's talk about information architecture, but maybe in a slightly different way.
I would phrase, there's sort of two steps here, that you're basically thinking about the player journey through your feature, through your game, depends what scope and scale you're talking here.
But you're basically just looking at the decisions that the player would make.
and do one per box, and then think of all the supporting information that you'd need for that.
And this is a great way to get yourself in the mindset of a player based on just the player experience.
You're not thinking about monetization, you're not thinking about any of the other stuff at this point.
And this also maps really nicely to that research piece.
If you're doing deconstructs, being able to reverse engineer those screens and think about what the player was being asked to decide and why they were being asked to decide it.
So time on this is, you know, half hour to a couple hours.
It's all done in text and boxes.
I work in Illustrator or Sketch, but you can do this in any number of ways.
And the idea is something super cheap and easy just to get this out of your head and be able to put it in front of other people, like your design partners, and say, hey, is this like, you know, is this sort of what we're thinking the player's gonna be going through?
It's a good quick way to sort of value check that.
On projects we've done this on whiteboards, we've done this with note cards.
There's any number of ways to do this super cheap and easy.
And the benefit here is it sort of forces you to think through the actual step-by-step portion without getting into full wireframes.
So, you know, quarter day, half day.
But once you've done that, you need to do a second pass.
I call these box wires.
A lot of game designers will do this as part of design specs.
And what you're going for here is just like information areas.
Circle, square, triangle.
It would be nice, because we're all professionals, that your rectangles are, in fact, button-sized, 44 points, fonts, things like that.
But it's just a quick way to sort of take that.
text and color it in and get a sense of is the information, the information order and the information priority making sense from screen to screen.
Again, time for something like this, half day to maybe two days if you're doing something big.
And the audience for this is yourself and your game designers, PMs as well.
I think that's as far as you want to take this, because it's sort of a value check if you're headed in the right direction.
But it depends on the team and studio as to how much you can show this to other disciplines, how much you can ask creative leadership if this is the right direction.
So once you have sort of a quick base idea, that flow that you designed, because designers, we always sort of start in the middle and then we work our way to the beginning and the end, was probably not the first time player experience.
So I call that first, second, loss, and boss.
It's the first time through, because all you're doing is taking your file and just option dragging everything out, pulling stuff out, putting stuff in.
And then you think about, okay, first time through, second time through, but what about when the player actually lost a session, a level?
And then what about if there was a boss or a special win condition?
And those are sort of the four states that seem to catch the most of these little UI changes, UX changes.
And by iterating on all these steps, you wind up with sort of a core flow there that's pretty well vetted against these other states.
Now.
I don't think there's an output piece for this, because it's really just sort of a workpiece for us as designers.
But I will say, take those box wires and put it into a map.
Time is horizontal, states are vertical.
Looks maybe very much like the research piece.
But the idea here is that For this format, especially when shared with other team members in a discussion setting, it really allows people to just sort of focus on whatever they wanna look at.
Engineering will be looking at something different from product, or you might be having a discussion about a particular feature.
But the key to making this thing useful is it can't be in a digital form.
So something that we do is we actually print these out on a plotter.
If you work at a big company, they exist.
You can print to them.
Just don't print on the glossy stuff, because that's like $100 a roll. Print on the cheap stuff, it's like $30 a roll.
We actually buy our own paper so that Undyne doesn't yell at us in Maxis.
We use it for all sorts of discussions around the product development process.
It's really, really great when an engineer has a question on something and you'll be like, wait a second, I don't know if that's really the product direction we want to go.
You can grab somebody else, you can throw a couple people into a conversation, and you can short circuit those, oh, I thought you meant conversations that lose like a half day here and a half day there and make your game like two weeks late.
mobile time frame.
And that, I think, is sort of the key to this type of design deliverable.
So at this point, we're sort of halfway through.
We have a good overview understanding.
But let's talk about the actual details.
Holy shit.
Detailed wireframes.
Finally there.
OK.
Now when you're designing your wireframes, you're designing from a position of understanding what the player journey is, what the various states are, and you can actually spend the time to get your visual language set.
Again, I don't think I need to sort of belabor this point, but UX is not UI.
It's maybe the foundation for UI, it's the framework, Don't think that it adds anything to the UX deliverables to set corner radius, to think about drop shadows, those kind of things in wireframe.
It's similar to, it's a cousin to, but never the same.
And the key here is that each of these screens is numbered and when you're, I'm just gonna go back.
When you're looking at something like this, especially with distributed studios, this is really, really great for having remote conversations because you can be talking to different disciplines in different studios and saying, well, so at the windscreen on like 27, does that go back to the main HUD on 13?
Like, no, no, no, but we also then need to do this power up on screen 12.
Oh, okay, and then you're talking about specific versions of those screens.
And that's where the flow can get messy or also be very clean.
Those misunderstandings can creep in.
So being able to reference your numbers, um, also helps in later steps on documentation.
This also then allows you to check everything out on device.
Um, you're creating all of these files. I'm sure you're shocked by this.
Put it in a map.
take that box flow that you built, and basically fill in with all of your detailed wireframes.
Again, by creating a durable output to this process, you have something that other disciplines can use and listen to, as well as speak to and have that conversation.
It also gives you a nice little checklist of all the stuff that you have to design by whatever date.
And don't tell anybody this, but I've used this in a DD situation where I'm saying, okay, we have this number of screens to design, but we have this amount of time.
And when you have a visual record of this stuff and you can go over to the wall and just kind of point at stuff, say, well, which ones, which, this is sort of part of the core.
I think we need to do these first and these second.
It becomes a very quick conversation to say, yes, we can do that.
Or actually this feature here, it's going to be a little more important.
So.
At this point, you're talking a week, maybe two, depending as to how complex your game is, your feature is, if you're having to build a wireframe toolkit from scratch.
So it's pretty heavyweight.
You really wanna know where you're going before you get to this point.
And obviously, all of these screens can be pulled out for one-pager specs and for the review and the buy-in process.
So I think this is more for a team and product development process, and less for reviews and pitching.
Although again, it depends on your creative leadership and how willing they are to sort of like, wander by and see what conversations are going on and get involved.
Or maybe you don't want that.
In which case, you can position them on roly whiteboards and you can turn them away.
But I never recommend doing that.
So.
There's a point where this physical deliverable, this model, kind of reached its optimum efficiency.
And you really need to move into a new set of deliverables at this point.
But look at how far we've come from sort of the research, we've thought through the player journey, we've done box flows, all that up to detailed wires.
without digging into individual pages in the specs, where sometimes you can lose the continuity from screen to screen or the redundancy of information.
You're able to see all of that in this overview format.
So.
Click mocks.
Again, very, very easy way to just sort of get something on your device, be just tapping from screen to screen.
There's a billion tools for this kind of stuff.
But you already have all those wireframe screens.
You can hook stuff together like this pretty quickly.
This is really great for what we call Kleenex testing, basically talking to people on other teams and getting a directional review.
and sort of a directional sense of where your feature is.
One thing that we've done on a small studio that I think would be great to see in a large studio, and we're still not quite there yet, is we actually had everybody on the team do these Kleenex sessions.
So we wrote a script, And I gave them the click prototype.
I was like, okay, go find two people and interview them.
Talk to them about our game.
And the engineers were awesome.
They were game to try this.
Like, everybody went out and found somebody and talked about our game to other people.
And it really helped.
not only gather data and have that conversation, but everybody felt really involved in the product development process in a way that doesn't always happen on larger, more sort of siloed teams.
So, I'm still trying to figure out how to pull that off on a big team, but we're getting there.
Audience for this is pretty much everybody.
You can show this to creative leadership.
You can even do this as a, like a review for people who maybe aren't able to grok, sort of the one-page spec format.
And showing things in motion is really where UX shines, especially in terms of the internal order of appearance.
So, you know, UX is UI plus time, right?
It's those states in between the wireframes that you've created that really is where your work can be most valuable to the team and to the game.
Whether you do this in, you know, Flash or Flinto, whatever it is, they can be very small mocks, but they have to run on the device.
And all of this stuff can then wind up.
in your specs.
So I'm not saying don't do specs.
You'll notice that this is fairly late in the process simply because the specs tend to become very heavy to maintain, especially late in the game.
Pun not intended.
When you're documenting everything, you have your wireframes, you have your maps, and you can put your click mocks up there.
it all becomes a sort of a good repository, not just for getting engineering up and running, because this is the how you can build it style of documentation, but it's also really useful when two months later, you have to go back and look at a system that you've already designed because you added this new feature or this new system and you wanna figure out where it touches the other stuff, you can look at your maps, you wanna figure out what UI it invalidates, you can look at your click mocks.
And the audience for this is obviously everybody, engineering, QA, it's sort of an ongoing thing, so I don't set a time here.
But the key for, I think, throughout all this is the visibility of the work.
This is going on the wiki.
Finally, you're actually watching quote unquote real people, outsiders, play.
So.
Your researcher is running a test, you have a prototype, and what we're all doing as UX designers is sitting there writing notes and keeping track of just sort of our own direction because the team has a series of, oh, we know we wanna change this thing later, but maybe isn't necessarily in the build.
You wanna capture all that stuff.
And so writing that in a Google Sheet live where everybody can see it and having a Slack chat running where people can add input is really, really valuable in gathering all that feedback from different points of view throughout the team while the user tests are running.
Another thing we do is we have a room dedicated to broadcasting the test sessions.
And we encourage everybody to come by.
Just bring your laptop, hang out and work.
It's cool.
The danger to that model can be if you get creative leadership who comes by, sees a particular thing, confirmation bias kicks in, yes, that is exactly, and then, okay, you've gotta do damage control against that.
So, to that point, we always sort of track the number of instances, and actually, This slide has changed, because this is always sort of an evolving process.
But the idea of the rainbow sheet is something that we're actually trying literally today on our research, and tracking the number of instances of particular reports of behavior. But in the recent past, we've always sort of ranked stuff in a stack rank in a Google sheet, made that visible to the team. And then the key is making sure that you have your sort of three, the stuff that we will guaranteed need to fix, stuff that we're really like to fix if we can, and then the, yeah, who the fuck is kidding ourselves?
We're never gonna do that.
But it's there, and we know it has to be done at some point.
So, once you have this set of user feedback, And you can vet that sort of against the team's assumptions, because there's all these assumptions that you've been making the entire time, right?
And it's all about getting that information, you know, out in a visible way that other people can sort of weigh in and call bullshit on certain things.
And I've run through 10 steps.
in a linear list and I assigned some rough times.
Again, this is based on a, you know, just a simple match three title.
These are intentionally small footprint tools and techniques because they need to be used at varying times throughout the product development process.
You can't just do the early research stuff at the beginning and do your spec at the end.
I've never seen that actually happen.
So really, it's probably something more like this, the reality of what we do.
And the dashed arrows sort of represent the areas where I see studios iterate the most, the things that sort of force that, the rethinking.
It sort of tends to fit into sort of a first.
scope of what exactly are we doing?
What's the framing of this?
And very loose, very rough, very fast stuff.
And then as you get sort of a sense of that, you can get into sort of your more detailed and specific tools and techniques.
But I think that as UX designers, we are most valuable to both the team and to the game, the end result product, when we focus on...
doing lightweight things and techniques that have a tangible, durable output for not just our own design process, but for the team as well.
And with that, I'll end by asking.
So what methods, either that I outlined here or other things that you can think of, would you employ next week, next project in your studio to contribute to both the UX process but to the game and to the discipline as a whole?
So, thank you very much.
And I was told, if anybody has any questions, please be sure to step up to the microphone.
Hi there.
I'm Dana, I work over at Microsoft on Xbox games.
I just wanted to, I was curious about...
I really appreciate the user journey that you kind of mapped out there.
One thing that we tend to do also is we started mapping out the system architecture, so kind of what some of the backend engineering services are and how they integrate.
And I think that kind of also the engineering aspect helped us and we would align it with the user touchpoints and the user journey so you could kind of get a sense of what that whole experience was and what The tech was doing from the backside. So I was just curious if that's something that you guys also add to your journeys?
Or is that something you kind of discuss as a group and that impacts the decisions that you make around your user journeys?
Definitely.
So as I think I said at the start, the idea that UX takes the goals of the other disciplines, but also knowing the constraints.
Like what's our budget, what's our engine, what's our timeline?
All that stuff, I think.
to get the best design has to be considered.
Otherwise you wind up sort of designing and running out of railroad at the end of your railroad, whatever the metaphor would be.
We don't do it explicitly, but we do all sort of sit down with the engineers and with the other disciplines.
And when we do designs, we have a cross-discipline design review.
So we invite engineering to that and we ask, hey, what do you think about this?
Are there suggestions that you would have of other things?
Yeah, and the deliverables you have up front are so lightweight that it probably makes it really easy for you to iterate and change based on that feedback.
Okay, thank you.
Yeah.
Cool.
Well, if there aren't any other questions, I'll be across the way in wrap up, and thank you very much.
