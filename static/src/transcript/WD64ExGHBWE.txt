Okay. I think we're probably about ready to start. First of all, I'd like to thank everyone for coming. My name is Ron Gilbert, and today I'm going to be talking a little bit about Maniac Mansion. The GDC people wanted me to remind everybody to please fill out your evaluation forms. They also wanted to let me tell you that due to a bug in their database, excellent is the only possible choice that you can fill out. So I just want to tell everybody that.
So I'm going to talk a little bit about Maniac Mansion.
And Maniac Mansion was really one of the defining graphic adventure games of the 80s and 90s.
And I started working on Maniac Mansion about 25 years ago.
And I'm just curious, a quick show of hands, how many people in this room weren't even alive 25 years ago?
And I said, don't worry about making me feel bad, because I'm going to stand out here for the next hour and rant like a bitter old man about how much better things were back in the day.
how we had pixels the size of your head and we liked it that way. So when I started thinking about this talk, it started out really being a post-mortem on a game that was 25 years old. And looking back at its creation and looking back at its development and what we did right and what we did wrong. But as I was putting together the talk, it started to become more of this trip down memory lane for me.
And I got together with Gary Winick, who had co-created and designed the game with me.
And we spent hours laughing at all the odd things that we did back then and reminiscing what it was like to work at Lucas Film in those early days.
And I met with David Fox, who I'd not seen in years.
We chatted about programming in the SCUM system for the first time.
We talked about the ups and downs of the project.
We talked about the good times and the bad times.
So this talk ended up less being a postmortem and just an odd collection of memories that are hopefully entertaining and amusing to more people than just myself. Now, Maniac Mansion is a graphic adventure. It came out in 1987. It was for the Commodore 64 and it was one of the first point and click adventure games.
Maniac Mansion allowed players to choose three of these seven possible kids to go into this creepy old mansion in search of a friend.
The game featured several endings and different puzzles depending on which of the kids you chose. Now, over the years, Maniac Mansion has become somewhat of a cult hit for fans around the world. Maniac Mansion has inspired countless pieces of fan art. There's the green and purple tentacle knitting.
This is one of my favorites. This is the Maniac Mansion LEGO minifigs.
This is this very odd plastic doll of Razor that I find oddly compelling. This is a 256-color fan remake of Maniac Mansion.
This is some of the kids done in plastic bead art. This is also one of my favorites. This is Dr. Fred and Nurse Edna done as a cross stitch. This is a fan-made Maniac Mansion poster.
There was even a fan remake of Maniac Mansion, all done in 3D.
This was really interesting.
So people put together a live action movie trailer for Maniac Mansion, which was great fun.
People, of course, love to cosplay the green and purple tentacles, or the green and purple tentacles.
This is why I make video games.
Well, while I was not the first to do it, Maniac Mansion has really been credited with a game that really popularized the point and click interface that LucasArts really became famous for in the 80s and 90s. And Maniac Mansion was the game that coined the word cut scene that we use inside and outside the industry today. Now, of all the games that I've worked on over the years, Maniac Mansion is without a doubt my favorite. It's a very personal game for me. And not because it's a great game, but because it's a very flawed game.
And it's those flaws that make it so interesting and special for me.
Now, when I started working at Lucasfilm, I started there in 1984.
I was a programmer working on the Commodore 64 version of Corona's Rift.
Now, the Lucasfilm games division was a small seven-person team that was a part of the Lucasfilm computer division.
And the Lucasfilm computer division would go on to become Pixar at some point.
And it was there, working in the games group, that I met Gary Winnick.
And we became really good friends. Gary and I both really enjoyed old horror movies. We liked things like Reanimator. We loved things like The Fly. There was this movie called Creepshow which starred Stephen King. And he played this farmer and a meteor crashed into his farm and slowly started to take him over.
And this is really where we got the idea for the purple meteor that crashes and takes over Dr. Fred really kind of came from this movie.
So as Kronos was finishing up, Gary and I started talking about making some kind of a comedy horror game. And the Little Shop of Horrors had just came out. And we were really big fans of that game. And you can see where we kind of stole the idea for the man-eating plant in Maniac Mansion. Now, around the time we were thinking about Maniac Mansion, the Lucasfilm Games group moved from our offices in its industrial park up to Skywalker Ranch.
Now, Skywalker Ranch is this large, sprawling ranch that George Lucas built in the hills of Marin.
And the ranch was designed to look like a big family ranch.
But it would actually house his company, Lucasfilm.
Now, it consisted of several buildings.
There was the main house, which housed George's office.
And behind it, there was a collection of much smaller buildings.
In the very back, there was the stable house.
And the stable house is what housed the Lucasfilm Games Group.
I always thought it was amusing that we were in the stable house, you know, back where the horses and stuff would have been. Now, a lot of the inspiration for the mansion, the Maniac Mansion, came from the main house. This is the main house at Skywalker Ranch, and George's office is up there on the third floor. And you can see a lot of similarities in the main house and the mansion.
Gary and I were always poking fun of things that were going on at the ranch.
And this was just kind of our way of poking fun of that stuff a little bit.
The main house also had a library in it.
And you can see the picture of the spiral staircase that was in the library at the main house and the spiral staircase that is in Maniac Mansion.
The main house also had a media room with a large screen TV.
And back then, that was actually a very large TV.
The main house had a grand piano in it.
We also had a nuclear reactor at Skywalker Ranch.
It's actually true.
You can only get so much power from Ewoks.
They've got those little legs.
So Gary and I did some early concept art.
We did these posters for the game, just kind of showing what a movie poster of the game might look like, just to get the feel of everything coming out.
We also did some early concepts of the kids.
And I often call those seven characters, I call them the kids.
But they're not really kids in the game.
But they actually did start out as kids.
And they were these young kids.
And there's a brother and a sister and their friend and the little brother.
And they were the ones that were going to be going into the mansion.
But someone mentioned that maybe this might push the game a little bit young.
And maybe we should do something about making the kids actually older.
So we started working with making them a little older.
And this is, again, some early concept art.
You can see an early version of Razor and Bernard down there and dead cousin Ted.
And that was Weird Ed and the tentacle.
And in the early versions of the game, Weird Ed was much more of a friendly character that was really helping the kids out.
And he became a little bit more in line with the family as the game kind of went on.
Here's some of the artwork of the entryway to the house that Gary did.
This is the infamous dungeon that you get thrown into. Some more stuff going around the edge of the house. The entryway.
Here's another one of Weird Ed. He changed a lot. This was some very early stuff that we were doing. Just trying to get a feel for what things were like.
This was the concept for what the box might look like.
This was a little bit later in the process, after the game was getting closer to being finished.
And Gary was just doing some mock-ups of what the box might look like.
So besides this concept art, we really didn't have a story.
Besides these kids that just go into this creepy old house, I think we kind of figured that the game would just write itself after that.
We didn't even really know what the genre of the game was going to be.
At this point, it was not an adventure game.
The idea of it being an adventure game really hadn't even occurred to us yet.
It was just this amorphous game where you just went around and you did stuff.
But we really didn't know what at that point.
I clearly remember sitting around trying to imagine what the gameplay was going to be like.
And it just wasn't making a lot of sense to me.
I really didn't know what the players were going to do.
We had fun ideas, but that was about it.
So during my Christmas vacation that year, I went to see my aunt and uncle. And my eight-year-old cousin had a RadioShack-colored computer, and he was playing this game called King's Quest.
Now, I'd spent a lot of time playing Colossal Cave on my university's mainframe, and I played all the Scott Adams adventure games and the Infocom text adventure games. And I really loved the genre of adventure games. But it was watching my eight-year-old cousin play King's Quest.
that really made Maniac Mansion just completely fall into place.
It was like, of course, we're making an adventure game.
And it was this eureka moment where everything just made sense. It's like all those weird, disconnected ideas that Gary and I hate just all completely, instantly fell into place. Now, I spent a lot of time playing King's Quest over that Christmas vacation just to see what they were doing.
And it was my first exposure to a text adventure that had graphics, but they weren't just simple static pictures.
They actually had animation on them.
But there was one aspect of the game that I did not like at all, and that was the text parser.
There were these graphics, and it was more than just a slideshow, but I still felt at some level that I was playing a text adventure.
And I was getting very frustrated playing this game that I called Second Guess the Parser.
You'd see a bush on the screen.
You wouldn't know what to call it, so you'd type pick up plant and it would say I don't know what a plant is. So you'd type pick up bush and it would say I don't know what a bush is. You'd type pick up shrubbery and it would say I don't know what a shrubbery is. So eventually I typed fuck you on there and it would say, you know, do you really need to swear? And I'm like, yes, yes, I really do need to swear right here. So I'm looking at this bush or this plant or this shrub and I can't really figure out what the game designer is calling it. This was not gameplay to me. This was not fun.
It's like, why can't I just point at this thing?
I can just see it right there on the screen.
I should be able to just point at it.
And if I'm able to click on objects on the screen, the next logical step is, why can't I just click on the verbs that are also on the screen?
And really, what despite the backs of the boxes and the marketing departments were telling us, there really was only a very limited set of verbs that these games actually understood.
Now, the Commodore 64 had a joystick.
So I made it so you move the joystick around and you would, you know, hover over an object and you click on it and it would select it and you could go down and you could select the verbs. So now that Gary and I really knew that Maniac Mansion was this adventure game, it was going to be completely visual and there was not going to be a parser, we were really off and running now. Now, the other idea that we had was that you played the game not just with three characters, or not just with one character, but with three, and you could switch off between them.
Even better than that, there were seven different characters that you could choose from.
And you got to pick any three of these.
The characters, there was Dave, who was the first one.
He was loosely modeled after me, just because I dressed a lot like that back then.
There was Sid.
He was the New Wave musician.
And New Wave was all the rage, so we had to have New Wave.
There was Michael, the photographer.
There was Wendy, the writer.
And Wendy was actually modeled after a real person, my neighbor Wendy, who worked in the Lucasfilm games group.
And she did all of our accounting.
And there was Bernard, who I think just represents the geek in all of us.
There was Razor.
Now Razor is named after Gary's girlfriend, whose name was Ray.
So we took that from there.
And then there was Jeff, who was the surfer dude.
And I guess we were from California, so I guess we had to have surfer people in the game.
So playing the game with these three characters, as a group of seven, it was this genius idea that we would come to completely regret later on in the game.
So to get the design off and running, Gary and I made this large map of the mansion. We had each room laid out as a little box on this big giant piece of cardboard with all these lines extending from each box showing how one room connected to another. We had these layered sheets of acetate that you would lay over the top of this thing. And we had every object written on the acetate. We had all these colored arrows representing the different characters and what puzzle they could solve and what object went to solution.
and all of these different things.
And we were really, really proud of this map.
We were so proud of this map that Gary actually added it to Weird Ed's bedroom.
And it was complicated.
And it was a virtually unintelligible mess.
But it was the only way that we knew how to keep this game straight.
Plus, Gary and I had never designed an adventure game before.
I mean, really, how hard can this be?
So after a few weeks of frantic programming, it became clear to me that I was never going to complete Maniac Mansion, writing the whole thing in 6502 assembly language. Now another programmer at Lucasfilm by the name of Chip Morningstar suggested that I create a scripting language. This would allow the logic of the game to be done in scripting language and the engine itself could be done in blazingly fast 6502.
Now, I played around with using a Lisp-like language, because I was kind of all the rage for AI, but I eventually settled on a language that was more C-like in structure. Now, Chip wrote that first version of the SCUM compiler, and I wrote the interpreter and the rest of the engine, and the SCUM system was really born. Now, SCUM stands for Script Creation Utility for Maniac Mansion. Now, several aspects of Maniac Mansion really hard-coded into the scum language at that point. Like the actual names of the kids were hard-coded into the engine, the color that they used when their text was displayed, the actual verbs, this was all hard-coded, really hard-coded into the engine at that point. Now all of this would become abstracted out when Zach McCracken came out and then Indiana Jones and then also with Loom. The system became a lot more independent.
And the whole notions of verbs were completely removed from the SCUMM engine, and they were coded in the language.
And that all really started with Loom, because Brian didn't really have verbs in the conventional sense.
We had to remove them from the engine, and they became a lot more abstracted.
So during this time, Gary was producing a lot of art, and it had no place to go yet.
And we continued to work on the design.
Now, I want to talk a little bit about the art in Maniac Mansion.
Now, it may look very crude.
and unsophisticated by today's standards.
But at the time, this was really state of the art stuff.
The Commodore 64 screen had a resolution of 320 by 200 pixels, and it had 16 predefined colors.
Now, one of the innovations that Maniac Mansion had over the Sierra games were scrolling screens.
As the character moved from left to right, the camera tracked them by scrolling the screen.
And we use this to great effect to reveal characters and objects in the game as the Edison family moved around and the screen would scroll to reveal them.
But this presented a big technical challenge for me.
The Commodore 64 had a true bitmap screen where each pixel could be addressed individually.
But at 16K for one screen, that was just way, way too much memory to actually scroll.
And the really sad thing is, I spent months, months, hand tuning 6502 assembly language to get that screen to scroll. And now I can just do it in PowerPoint. But the Commodore 64 also had what was called a programmable character set that allowed for the creation of custom characters. Meaning that we could redefine what each of the characters looked like to be anything we wanted. And then by using this, we could create all the screens using these 8 pixel by 8 pixel tiles.
And it reduced the amount of memory that we needed to scroll from 16K down to just 1K.
But this presented a big problem for Gary and his art.
Creating the images for all these rooms out of little tiles was going to remove a lot of the charm that we saw in Gary's art.
So I wrote this graphics editor where Gary could paint on the Commodore 64 screen and treat it like a real bitmap.
And he would press a key, and it would go through, and it would try to reduce that screen into a character set.
Now, the downside of using character sets is there was a limit of only 256 characters. And a lot of Gary's art would get compressed down to three, four, or 500 characters. So then the program would go through and it would try to find two characters that looked similar, not exact but similar, and it would just force one to look exactly like the other.
And after multiple minutes of crunching, it would have reduced this image to 256 characters. There would be a lot of glitches. So then Gary would go in and he would touch up those glitches back in bitmap mode.
And after several iterations of this, we had images that had been crunched down to 256 characters, but they still retained a lot of the charm of Gary's original art.
Now, another one of the things that this found in Maniac Mansion also came about from a technical limitation.
And that was the large-headed characters that you see here.
And the Commodore 64 had these 24 pixel by 24 pixel sprites.
And they were all done in hardware.
And by using scanline interrupts, we were able to reuse the sprites vertically down the screen.
So we had these vertical sprites that were 24 pixels wide, but they were as tall as we wanted.
And Gary wanted the characters to really read well, and especially the faces.
So he made the heads as large and as wide as he could.
And if you really look at a lot of the animation in Maniac Mansion, you'll see that as the characters walk and move, nothing ever extends outside of that 24 pixel box, which was the constraint of the sprites.
So after close to a year working on the core of the SCUMM engine, this was much to the consternation of LucanSwim's management, I might add, it was actually time to start programming the game.
Now, the ultimate purpose of the SCUMM system was now time to really put that to the test.
Now, I was originally going to be the only programmer on the project.
But that was just no longer realistic.
So David Fox came on to do a lot of the SCUMM programming work.
Now, I'd done some of the basic SCUMM programming, mostly to test the engine and the constructs of the language and just set things up and make sure it was working. But most of the actual work, the actual SCUMM scripting, really fell to David Fox. Now, one of the first things, or one of the things I'm really proud of about the SCUMM system is that it was completely multitasking back in the day of the Commodore 64.
This allowed the SCUMM programmers to focus on a single object or character.
and code it to run in its own process.
And it's really eliminated the need for complex state engines.
And one of the first things it ever animated in the game, one of the first things it got working, was that clock, that little pendulum that moved left and right.
And that little clock was a 10-line SCUMM script.
And it ran in its own process.
And we used this technique throughout the game to control different characters and logic.
Now, being able to fully multitask and think about the game as small, independent chunks and objects really became a mainstay of how you programmed in the SCUMM system.
So other than this big map of the mansion that we had hanging in Weird Ed's bedroom, there was no design document for Maniac Mansion. We had nothing that was not in our heads or on that particular map.
And this presented a really big problem for David Fox, since he was going to be tasked with a lot of the SCUMM programming. So before David would start working on a room, he would sit down with Gary and I and we talked about what was supposed to happen, and then he'd program it up in the SCUMM language. We called this wiring up rooms. Now, we called the screens rooms because they were rooms of the mansion.
This was a terminology that would follow the scum system all the way through. And even in Monkey Island, we still called them rooms, even though most of them took place outside. Now, one of the opening lines in Maniac Mansion is where Dave says to Bernard, don't be a tuna head. And it's a really odd line. People often ask me about it. And originally, this line was supposed to be don't be a shithead.
Now the head of Lucasfilm Games told us to take it out, that we could not swear in a Lucasfilm game. And Gary and I felt very strongly that Dave needed to say shit. I guess we were young and swearing was probably still cool. Now we protested. We argued about the antistrict integrity of the game and probably how our vision was being destroyed by censorship.
If we couldn't say shit, then this whole game just wasn't even worth making anymore.
So our boss said, look.
You too go off. And if you can come back with a really good reason why you need to say shit, we'll leave it. So think long and hard about why you need to swear. So we did. Gary and I thought about, we thought about it a lot. And we really couldn't come up with a good reason. And in retrospect, it really was kind of silly and pointless and a little bit juvenile. So I changed don't be a shithead to don't be a tuna head. And I think I did it out of protest.
And at the time I figured, well, if I couldn't swear, then I was going to say something confusing and maybe a little bit stupid just to make a point. But it was a line that actually caught on in an odd way. And you talk to, you know, Maniac Mansion fans and you say, don't be a tuna head, and they know exactly what you're talking about. So as the game was finally coming together, we were getting a chance to play it. We started to realize that we had made a huge mistake. Having seven that all had their own set of interconnecting puzzles and endings was a hell of a lot of work. And it was far more complex than we had anticipated. And we were constantly dealing with dead-end situations and odd unsolvable puzzles. And in short, this was a complete clusterfuck. And we were constantly fighting against the desire just to rip out all the endings and just go with three characters or even sometimes just one character for this game. We were way behind schedule.
And there's this point where you're in so deep that you just want to scream, and there just seems to be absolutely no way out. And this is where we found ourselves in Maniac Mansion.
But we stuck with it. We worked out all the odd puzzle issues and we slogged through the programming. We kept the seven characters and all the solutions. In retrospect, I think it really was the right decision. Maniac Mansion is really defined by these seven characters.
Being able to pick the three you wanted to play with allowed players to really customize the game in a way. Players often had dream teams that they would go into the mansion with. And having different endings based on the kids that you chose was a great way to get replayability. Players would talk to each other about the different puzzles they had to solve and the different endings and the different kids and they really want to play it again. Now, of course, none of this was planned. We just thought it would be fun to have seven characters in the game.
Now, one of the other defining elements of Maniac Mansion are really the cut scenes. And it's probably one of the first games to really truly use cut scenes. The other games had scenes that played out when you started or finished a level, but not that happened throughout the game, really as a way to tell a story. Now, the reason I called them cut scenes was that they were scenes that cut away from the game. And there was even a command in the scum language called cut scenes.
And this command automatically saved the state of the game and then restored it when the cutscene was over. This meant that they were easy to be triggered off of timers and other events and we didn't really have to worry about the state that the game was in before that happened. I'm also, you know, it's hard sometimes being the programmer half of an artist programmer duo, so I couldn't resist to show my source code up here since you're seeing all of Gary's great art. Now Maniac Mansion triggered a lot of these cutscenes simply based on timers.
So you could be right in the middle of doing something and the game would cut away and show you a cut scene. And we later refined this in the last crusade in Monkey Island and we had the cut scenes triggered off of events or progressions of the player so they really weren't so jarring. So we're frantically working on the game. We are way, way behind schedule at this point. We're very worried that George is going to show up one day and throw us in this garbage compactor we're pretty sure that he has outside his office.
Gary is cranking out art and I'm working on the scum engine and David is scum programming like mad. This is a seven day a week job, it's late into the night for many months and many, many weekends. And we're thinking, is this going to work? Is this a good game? Or are we just wasting our time? So one day David asked me to come into his office. He wants to show me something. And Gary is standing there with this odd smirk on his face.
David has the kitchen room up and running on his Commodore 64 and Razor standing there next to the microwave. There's a hamster in her inventory. Go ahead, David says. Put the hamster in the microwave. So he put the hamster in the microwave thinking David's going to show me some bug in the scum system that he needs to fix. And then David says, go ahead, turn on the microwave.
So after a few seconds of humming sound and a perfectly timed ding, and we just completely laughed our asses off about this. So if you're upset about that hamster in the microwave thing, that was David and Gary. I love hamsters. But what this really does point out is really the power of the scum system for us. It only took a few minutes to draw and script that gag.
And it was fast and funny to put things into SCUMM games.
And you really see that payoff in Monkey Island, where we were able to make that game in this almost improv fashion.
It was just trying things and taking them out and trying lots of different ideas.
Now, one of the drawbacks of being able to script events so quickly is we wanted to make everything work.
We made it so you could use any object with any other object, and if we thought it made logical sense to let the player do it, we would let them do it.
Now what this did mean is that we wired up a lot of dead ends.
Things that the players might think to do, we'd wire up and let them screw themselves over. Now some of the examples of this, you can pour the developer fluid on the plant, killing it, preventing you from ever being able to climb up into the attic. You can shoot the Edsel off into space without putting the meteor into it. Letting Weird Ed get his package makes the game unwinnable with certain combinations of kids.
If you open the undeveloped film and the lights are on, the film is exposed, making the game unwinnable with Michael. If you waste the paint remover on anything else other than the paint blotch in the room with the man eating house, or if you waste all your dimes in the telescope room, or if you send irrelevant information to Mark Eater, the marketing guy, you won't be able to send anything else to him, making the game unwinnable.
And if you only have one of the kids inside the house who doesn't have the old rusty key and they get caught in the dungeon, you're pretty much screwed. Now there are countless other examples of this. And it's not that we were trying to be cruel or vindictive. We were just naive.
And it was so easy to wire this stuff up that we really didn't think about a lot of the implications of what we were doing.
Now, the worst part of the dead ends is you don't know you've really screwed up until much farther in the game. You just happily play along before you realize what you did a long time ago just completely boxed you in. Now, some of that was just accepted gameplay back then, you treating the save game as a gameplay mechanic. But a lot of it was just us not thinking things through. Now, today a lot of this would be caught by test.
But other than myself, David, and Gary, there was only one other full-time member of the Maniac Mansion team, and he was the sole tester at Lucasfilm Games.
And he sat in this back room, and he played Maniac Mansion all day long.
And we had no bug database.
He would just jot down notes, and he'd give them to either David or Gary and I to fix.
We had no regression testing.
We had no focus testing.
We had no test plan at all.
So other than David and I playing this game, that was the extent of the testing.
which I think is pretty amazing, considering the complexity of the game and all the different endings and the characters.
Other than the dead ends, I guess it all worked out.
There were no major bugs found in the game.
This was long before the days of being able to treat paying customers as beta testers and just patch the game as you go.
So we're getting to the end of the Get project, and Lucasfilm was responsible not only for the game, but also for the box and the marketing for Maniac Mansion.
This was the first game that Lucasfilm self-published. The games they did before this were published by other companies, like Atari or Activision or other companies that aren't even in business anymore. So this whole thing was very, very new to us. Now one of the things we need is cover art. And Gary knows this artist named Ken Macklin, so he's contracted to paint the cover of the box.
And Lucasfilm had just hired somebody to do marketing for their games, who looks a lot like Mark Eater, I might add.
Absolutely no coincidence there. But part of Mark Eater's job includes doing the copy for the box. So Gary and I threw out a bunch of ideas that we had, and one of them involved putting this a story of, followed by just a whole long list of funny things. This was another idea that would come back to bite us.
Now, another great thing about the games from the 80s and 90s were all the cool things that you got in the box besides just the floppy disk.
And Gary and I made this mock-up of a bulletin board that appears in the college dorm where the kids that go into the mansion live.
And it's filled with lots of in-jokes.
There's the town that I grew up in.
Plus, there's a lot of back stories being told on this.
And there's hints to puzzles, like how the radioactive water will make a plant grow.
So this thing is just filled with lots of really, really cool information.
And also, Gary and I made all this stuff.
So if you're ever looking to get my handwriting sampled for something, you just copy it off of here.
It's no problem whatsoever.
Now, the original Maniac Mansion, OK, so the box is finished, right?
And we have this professionally written back of the box copy.
And the game is finally done.
Now, the original Maniac Mansion fit on two sides of a Commodore 64 disk, with each side holding 160K.
So the entire game fit in 320K.
Now, a few years later, while doing Monkey Island, we had this little celebration when Steve Purcell did a single animation that was 380K.
So this one animation in Monkey Island is larger than the entire game of Maniac Mansion.
In the sequel to Maniac Mansion, Day of the Tentacle, you can actually play the original Maniac Mansion on a computer in Weird Ed's bedroom.
So the game goes off to be manufactured.
We're very tired.
We're very happy to finally be done with this.
Now, one of the places the game is being sold is Toys R Us, in addition to computer stores.
They're becoming a big seller of games.
And it's one of the ways that games are starting to work their way into the mass market.
They are very, very important to us.
Now, after a few weeks, Toys R Us pulls Maniac Mansion from their shelves.
because of offensive content. This is our largest reseller and they are no longer selling Maniac Mansion. So what is this offensive content? Is Razor's dress too short? Did they discover the exploding hamster in the microwave gag? No.
Apparently a customer wrote Toys R Us a rather nasty letter complaining that she didn't think it was appropriate for a game to have, are you ready for this, the word lust.
on the back of the box. So that long list of words that Gary and I came up with, she included lust, became offensive. Now, mind you, I don't think she even played the game. She probably didn't even own a computer. She probably just saw the box on the shelf and she wrote this letter. So Lucasfilm redesigned the back of the Maniac Mansion box, removing the offensive word in the process.
Now, Maniac Mansion was then ported to the Apple II.
And a few months later, Gary would redo all the graphics in high res, which at the time meant a mind-blowing 640 by 480.
Then we gained some extra vertical pixels, so we had room for two lines of text at the top of the screen.
Maniac Mansion was then ported to the Atari ST, and the Amiga, and the Mac.
It was also ported to the Nintendo NES.
Now, the NES version of Maniac Mansion had to go through Nintendo's approval process.
And it became heavily censored on things like renaming some of the in-game arcade machines like Kill Thrill. There was this statue depicting the horrors of nudity that had to be removed.
There was this poster showing other nudity that had to be removed. But I think my favorite thing that Nintendo censored in the game was in the credits for the game. It says NES scum system buy. And then it listed the people who worked on it.
And Nintendo was confused why we were referring to their NES system as scum. Why would we insult their console machine like that? We tried to explain to them that it was just the name of our development system, but in the end we just shook our heads and we just removed it. Oddly enough, Nintendo had no problem with putting a hamster in a microwave. Now, one of the great things about the scum system was it was so easy to port.
The game code, or the code that drives the logic of the game, didn't change from port to port.
And if it did, it was very, very slight.
And this allowed Maniac Mansion and all future SCUM games to be ported to a wide variety of platforms.
And now, thanks to the SCUM VM project, which is a fan-driven project, most of the SCUM-based adventure games have been ported to platforms that hadn't even been invented yet, all while running the exact same code that the originals did.
Now, Maniac Mansion was one of the first games to use the SCUM engine, but it was far from the last. The next game that was built in SCUM was Zack McCracken. It was followed by Loom, an Indiana Jones adventure game, and then Monkey Island 1 and 2, and The Dig, Salmon Max, the sequel to Maniac Mansion, Day of the Tentacle, and Full Throttle. Now, after I left LucasArts, as they were now called, I started a company called Humongous Entertainment.
And we continued to use the SCUM system to make adventure games for kids, like Putt-Putt and Freddy Fish and Pajama Sam.
The SCUM system even powered our entire line of backyard sports games, like backyard baseball, football, and soccer. Now, a lot of lessons were learned in making Maniac Mansion. The dead ends and the deaths would all but disappear by the time Monkey Island came around.
Puzzle structure would get refined, and we now had rules and guidelines for what made a good puzzle and how players should discover problems and solutions.
Replacing the convoluted mess of the map that Gary and I had for Maniac Mansion with these well-structured puzzle dependency graphs, where you could look at the entire flow of the design in a single glance.
Now, it's really easy to look back at games like Maniac Mansion or any of the classic games presented this year through this lens of nostalgia.
It's easy to look at what they became and really make assumptions about what they were before they were anything.
But for us, Maniac Mansion was just a game.
It was a game that we spent many long months and late nights and seemingly endless weekends working on.
And we loved it.
We hated it.
And our only dream for it was we really wouldn't run the company out of business.
When Gary and I started making Maniac Mansion, we had a bunch of fun ideas.
But we didn't have a vision for the future.
We were not out to change the face of graphic adventures.
We just wanted to make a game and not get fired.
And I think if there's anything to learn from this talk, I think it's that we had no idea what we were doing.
None whatsoever.
And I think that's an important lesson.
Because sometimes you just need to do things.
And sometimes thinking too much and knowing too much can sometimes hurt more than it can help.
because sometimes I think it really is important to just be too stupid to know that it can't be done. Anyway, thank you very much. I think we have some time for some questions, so if anybody has any questions, I am happy to answer them.
So game development has changed a lot since the 80s and I was wondering how long did Manic Mansion take to make and on a typical day how many hours did you guys spend working on the game before you went home? It took about two years to make the game from beginning to end. A lot of that first year was just getting the scum system working. And we worked a lot of hours. I probably worked 12 hours a day and kind of at the core of the thing we were working seven days a week.
It really was a grueling, grueling project to get done.
OK, thanks.
Thank you for that amazing talk.
I completely agree that sometimes not knowing what you're doing can result in great innovation.
And the fact that you guys hadn't made adventure games and then came to adventure games clearly turned out great.
But obviously, a lot of the time, people who don't know what they're doing, don't create great things at all, they just create crap.
So I wondered if you had any insight into what you think it was about you guys that meant you could come to adventure games and do something really great, rather than just come and make a really bad adventure game.
Well, a lot of that I really credit to the early Lucasfilm games group.
It was a very small group of people.
When I started, there were seven people in the group.
And by the time Maniac Mansion was really going, there were maybe 10 or 11 people.
And it was a really very tight-knit group of some of the smartest people that I have ever worked with.
And we had this very open, free flow of ideas.
And we did a lot of things where we did these little one-page design concepts.
And we'd write these things and we'd pass them around the office and everybody would comment on them.
And it was just an interesting environment to be a part of.
And a lot of that, I think a lot of what you see in those early Lucasfilm games really came from that environment.
And I credit that a lot for what Maniac Mansion became.
Because it really wasn't just Gary and I sitting by ourselves figuring everything out.
It was this highly intelligent group of people that were constantly challenging us on every single thing that we did.
the start about the problems you had with King's Quest. I guess you may have noticed that's coming back. I just wanted to know what your thoughts were on that. And also, perhaps you could talk a little bit about your thoughts on the future of Maniac Mansion with all of these old properties coming back again.
Yeah, when I, you know, when I played King's Quest, I really did not like the parser. It really turned me off to the game a lot.
was one of the reasons that I did the whole point and click thing for Maniac Mansion. Back at Lucasfilm we had a big rivalry with Sierra Online because they always sold more copies than us.
Every game we did they always sold more copies than we did. We were always in second place with them. So there was this kind of almost friendly rivalry in a way that we had with them. What was the second part of your question?
Oh, the future. Yeah, you know, I don't know. I mean, I don't work at LucasArts right now. I would love for them to re-release Maniac Mansion the same way that they did with the Monkey Island games. I think that would be really neat. I've often thought that it might be fun to go through the game and fix a lot of these problems that I mentioned.
to get the puzzle structure and everything more like we had done in Monkey Island. But other times I think, well, do I really want to do that? Maybe the game really needs to have those flaws in it. Isn't that a little bit like George Lucas going back and fixing all the problems with Star Wars? So maybe the game really does just need to be what it actually was back then. But I would love to see them re-release Maniac Mansion.
I just wanted to thank you for the game.
And it sounds like it was an amazing development process with lots of challenges.
And I was just wondering if you'd be willing to recognize the name of that one tester you had, who's in that back room just slaving away and trying to provide the best sort of feedback he could to make a great game.
His first name was Tim.
And I don't remember his last name.
Any other questions?
So actually this is a question more about humongous than about maniac mansion. Software for kids. What's happening with that and why did you stop doing humongous and stuff like that?
Well I think software for kids is kind of in a sorry state in some ways.
What I wanted to do with Humongous Entertainment was really just make adventure games for kids, not educational stuff, not things that taught kids how to read or write or curriculum.
I just wanted to do adventure games, because adventure games are about puzzle solving.
They're about thinking your way through things.
And I thought that those are really important things for kids to be able to know.
And so we very purposely did not make our games educational.
We just made them really, really good adventure games.
for kids. So, yeah, I mean, I would like to see some stuff like that, you know, come around again. But really what happened to Humongous is that as games became a lot more popular, licenses just took over. It was all about Disney product. It was all about Pixar product. It was all about Nickelodeon stuff. And you know, they had these $300 million commercials they were running on television every day.
and it was just very, very hard to compete with that at some level. Thank you. So when I hear and read about the environment at LucasArts at the time, it reminds me a lot of the environment when they were making Looney Tunes way the hell back, which is a creative pool of people being funded by a rich guy who's smart enough to just leave them alone and let them do their thing.
And I'm wondering if you think that's an environment that we will ever see again in video game development.
Yeah, it would really be nice to see that.
It really would.
And when I started working at Lucasfilm, George Lucas told us three things.
He said, stay small, be the best, and don't lose any money.
And that was really all that he told us to do.
And the other thing that was a huge boon to us back then was that we couldn't make Star Wars games.
because Lucasfilm had licensed that to other game companies.
So here we were working at Lucasfilm, and we couldn't make Star Wars games.
And we really wanted to, but I think what that really did was it opened it up for us.
Because now we had to create our own IP.
We had to create our own ideas and our own games.
And that was a big benefit for us, not being able to make Star Wars games.
Thank you.
Hi, you make Death's Bank.
and it was an action game with adventure elements. Do you think that the graphic adventure game is truly dead or do you think that it will, you know, in its purest sense, do you think it will experience a resurgence and be popular again?
I would certainly like to think that there is. And I guess my hope for that is that as the market expands and the games start to attract a much broader range of people, that adventure games will kind of make a comeback. And adventure games are kind of odd because...
Adventure games, to me, it's like the magic of an adventure game is staring at the screen, wondering what to do next.
It's that quiet contemplation.
And a lot of games today, it's really not about that.
And I think a lot of gamers have very short attention spans.
They need tutorials to move them through things.
What they want to do is they want to know where to go, and they want to know what to do, and then they want to get really good at that.
And adventure games are about not knowing where to go, not knowing what to do, and figuring it out.
And I think there's just a conflict there.
But my hope is that as the market grows, because there certainly are a lot of adventure game fans.
We were selling more adventure games today than we were selling back in the LucasArts days.
We really are.
It's just that the other part of the market grew so much faster that it just really dwarfed what adventure games were.
Back when you started doing this, a huge part of your job was dealing with scum in the game industry.
I'm just kidding.
Dealing with a scripting language.
And back then, you pretty much didn't have a choice.
You needed to.
How do you feel about scripting languages now with the more modern programming languages and the need and use and limitations?
I think scripting languages are great.
I think they're the perfect way to build things.
If you're building games in languages like C or C++, It's very, very hard to rapidly iterate with those things.
And scripting language provides this wonderful abstraction layer.
In all of Death's Bank, that entire game was all done in a scripting language that I created, very, very much like Scum.
So there was the core engine, which ran the 3D graphics and the world and everything.
But every single piece of logic for that game was all done in a scripting language.
So I think scripting languages are huge and I think we should always be using them because of that rapid prototyping they allow. Just last, thanks for writing something that inspired me to get into this industry. I'm sorry.
Hi. Do you have any advice for us other adventure game developers out there?
Advice for adventure game developers.
Well, I think that adventure games right now, as I said earlier, that it's a niche market.
It's not the huge mainstream that you're seeing with other things.
And so the key to doing that is that you can do quite well in a niche market.
There's nothing that says you can't sell a good number of games in a niche market.
But I think it's about identifying that niche.
It's coming up with something that's very unique and interesting that will really spark their imagination with things.
And it's also advancing stuff.
A lot of people build fan-based point-and-click adventures today.
But I think we need to take adventures beyond that in some ways.
And games like Limbo are actually, to me, a very interesting look at maybe where adventure games could go.
Because there's a lot of incredibly brilliant things in Limbo.
And I looked at that game, and it floored me when I played it.
But it's very linear.
you know, so what, you know, is there a way to take a lot of that and open that up a little bit? But people were in, you know, enjoyed limbo a lot. So, you know, it's looking at things like that I think are the key.
Thanks. And I want to join the guy saying the same thing about you being the reason I'm in the game.
Making me feel bad.
Hi. So I was wondering if you could give insight.
Where is that voice coming from?
I was wondering if you could give some insight, even if it was only an opinion on the Maniac Mansion TV show.
Yeah, you know, I totally forgot about the Maniac Mansion TV show. That was really an interesting thing because there were a couple of people at Lucasfilm and it was their job to start creating television shows. We had Maniac Mansion and it was a license that we completely owned. So they first did that. Gary and I were thrilled to have a TV show based on our game.
And every week we would get these memos from the production people.
And every week they would change one thing about our game.
And it just became this joke after a while, as one thing after another was changed.
And I mean, I've seen like two episodes of the TV show, and I think they kept, what, Dr. Fred?
I think he's like maybe the only remaining thing from the TV show.
But it was an interesting process. We were really thrilled to see it. But I wish it had been more like the actual game, though.
Thank you.
Hi. So since you were at the forefront of the whole point and click adventure games, I was wondering if you could talk a bit about some of the more interesting steps in games that you've seen in, like, you know, game interfaces and stuff, particularly adventure games.
beyond that that you've seen throughout your career?
What's really kind of stuck out to you as the most interesting advances?
Well, you know, adventure games started with the parser.
And when Gary and I decided that we were going to do the verbs to be point and click, our original verb list was about 40 different verbs.
It was not the 12 that you see up on the screen there.
It was 40 of these things.
And we slowly pared that down to what we thought was the bare minimum of verbs that we could have on the thing.
But as games went on, you know, Monkey Island has less verbs than Maniac Mansion has.
And eventually, you know, Adventure Games was whittled down to one verb, which is the use verb.
And so to me, that's kind of an interesting progression.
And when Maniac Mansion came out, if we had had just a single use verb, which you easily could have done, people would have screamed.
They wouldn't have liked that.
So I think it's a slow progression of things with changing the interfaces and simplifying things down and making things a lot easier for players with interfaces.
Coming off of games like Kuranos Rift and Eidolon, what lessons did you guys bring with you onto Maniac Mansion?
I mean, obviously you couldn't confuse one of those games for the other, but there were certainly big puzzle elements in games like Eidolon.
What was the question?
What lessons did you guys bring coming off of the games you worked on before Maniac Mansion?
I don't know.
That's a good question.
We did the Eidolon, and before that, there was the Labyrinth game, which was based on the Jim Henson movie.
And that was really kind of a first step into getting rid of a parser.
it had these wheels that you turned, where you kind of lined up verbs with nouns.
And so we did learn a lot from that game and what that was doing with things.
But I think just one of the big things that we were always very conscious of was just kind of how you tell stories.
And that was a part of that core group.
We were always very, very fascinated with storytelling and storytelling in games.
And even something like Cronus Rift, which is kind of a shooter-type game, there's still a big story there.
And that was a very important part of that to us.
So I think the storytelling was a very strong element.
Telltale's doing a lot with episodic games.
How do you feel about that?
Telltale's doing what?
Episodic games.
I think episodic games are great.
I wish they were a lot more popular than they were.
I think episodic games kind of allow you to tell these very bite-sized things to people.
And there are a lot of gamers that like to sit down and play 30, 40-hour games.
But there's a lot more people, I think, that would be into gaming if they could sit down and spend two hours playing a game, and they could actually finish it and feel successful at that.
And episodic games, I think, is a good avenue towards that stuff. So I wish Telltale all the success in the world with episodic gaming.
I was wondering what your thoughts were on how to maybe make adventure games more than just single play through affairs, as far as keeping their lifespan to more than just whatever it takes to finish them one time.
I think doing things like multiple endings with stuff.
with Maniac Mansion, you could play the game once, but there were five different endings to that game, so you could then go back and play it again.
Doing some things like that with games could be very interesting.
And one of the things about an interactive story versus a linear story is that in a best case, it allows the player to explore the story a little bit more.
And I'd like to see games where you can get through them very quickly in just a couple of hours, but you can then go back and play it again.
And not just for multiple endings, but that you can really explore.
That you can explore the characters, you can explore the situation, and really explore the world.
Because if people can get lost in a world like that, just playing things over and over, I think that's a good thing.
Thank you.
sort of did wrong and didn't really know about when you're doing maniac mansion. I was wondering how long, what was the point where you sort of realized all the mistakes you made and all the things you didn't know?
It was kind of an ongoing gradual process. Like the thing with the seven characters. That sounded great to Gary and I.
Yeah, seven characters. Woo-hoo, we're geniuses. And then when we started doing the programming, and it was really David Fox that brought a lot of this up because he was really tasked with all this programming.
He would come to us and go, you know, this is like really, really complicated.
And we would go through, and we'd think we'd have something solved, and we didn't.
And you know, it's like pulling a thread on a sweater.
It just kind of unravels at some point.
So it was definitely a slow process that we were realizing a lot of the mistakes we'd made.
Was that it?
All right, well, thank you.
Thank you very, very much for coming.
Thank you.
