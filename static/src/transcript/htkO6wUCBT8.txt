Hi everybody. I'm Zach Johnson. I'm the creative director of Asymmetric.
15 years ago my company started working on a multiplayer web RPG called Kingdom of Loathing.
And last year we released our follow-up to that game, West of Loathing, which is what I'm here to talk about today.
Specifically, what I want to talk about is the tools and workflow and process that we had for actually making the game work, because it turns out when I talk to people about it, it's weirder than those kind of things normally are.
Like, for real, work on the game started about two years before it came out, and in the year or so prior to that, I started out by just spending a bunch of time thinking about the kind of game that I wanted to make.
Put together a document that was a really, like, just preliminary description of what I was imagining the game was going to be like.
This is how a scene is laid out, this is what interactions look like, this is more or less what it's going to consist of.
kind of had a vague idea of how big I wanted the world to be and what I wanted the main sort of story to be about.
Worth noting, I wanted the main story to be extremely nominal.
Like, it has always kind of been.
my dream to play a Bethesda game that had no main quest line, just wander around a world doing side quests, and I don't think that we could have actually gotten away with making a game like that, so we just settled for making one with kind of a bad nominal main quest line, kind of letting everything else be the actual strengths of the game.
After I had kind of put it together, showed it to the team, everybody was like, yeah, we should make a thing like this.
We hired a Unity programmer for, like, an afternoon to make a proof of concept.
I handed him some sprites, he put them in a 3D scene, made a little dude that could walk around in them.
Because we had no idea up to that point, like, this is the same art style that Kingdom of Loathing uses, but Kingdom of Loathing is kind of an illustrated Oregon Trail sort of thing, where you just kind of click a button to say what you want to do and then it tells you what happens.
see a little bit of that in this too, but I didn't know if it was gonna sell at all in an actual kind of diorama 3d space and this prototype was Promising enough that we decided all right. We should definitely make this game So now we should decide what this game is actually going to consist of so Riff the other writer and I got together at the office over a week or so at a big whiteboard and just started laying out like, all right, this is what you're going to do in this game. This is what the world is going to consist of. And this will come back a lot in various ways, both good and bad, that we kind of started with the giant world and what was going to be in it and then sort of added story stuff later.
We laid out the main quest where basically the first part is you have to find some dynamite to get through this pass.
Second part is you have to build a bridge.
And the third point is that you have to deal with a sort of crazy bureaucrat in San Francisco to get him to let you build the railroad the rest of the way in.
And we wanted there to be, because we wanted to sort of diminish the importance of the main quest, we wanted there to be a lot of different ways to get through each of those.
We also wanted you to be able to get through it without combat if you wanted to.
that became much more of an important goal as time went on, but it started out as like, well, it should at least be possible if you know what you're doing to get through this without fighting anything.
And so we just sort of had this list of a bunch of different ways that you could solve each of the main quest line segments.
And we more or less stuck to this.
There's definitely some stuff on here that we didn't do or some stuff that changed over time.
And I think the bottom one on the third list says Cthulhu's butt, which.
That's not a thing I think we ever intended to put in.
It must have just been written down as a joke and I forgot to edit it out of the photograph.
So then we kind of divided the world map up into nine sections.
Later, one of those sections was cut for scope and then we pretended we were leaving space for DLC.
Decided all right in each of these sections What sort of individual areas are you going to be able to go to and we kind of had this list all right?
So in in region a which is the kind of starting area?
There's going to be there's going to be a couple of camps of robbers that you have to go arrest There's going to be a ranch. It's going to be a fort a couple cemeteries a a clown area for the circus progression thing, and a mine.
And we essentially just laid out all nine of the regions and decided, all right, this is the kind of thing that is going to be in each of these.
And then we kind of had like, all right, this is the scope of the game.
There's gonna be a hundred places that you go, and each of them is gonna have some monsters to fight, some items to get, some little puzzles to solve, a little bit of whatever.
This next part gets slightly weirdly out of order because there was not really a good order to do it in.
So once we actually spun up, at this point, all right, we know what this game is gonna be, we know what we're gonna do, so we hired Victor, the programmer, and Wes, the animator, to come on full time and actually start building the game.
We had done some tools work before that, but I'll get to that in a second.
Over the course of development, when it came time to actually implement an area, what I would typically do was take a sheet of paper to the bar at the Alamo Draft House, and in the hour before the movie that I was going to watch started, I would decide what was going to go in an area.
Often this would change in scope a little bit over the course of actually implementing it or something wouldn't work or I would Would have drawn a space too crowded and need to spread things out and make things easier to get to or easier easier to read as a player moving through the space but essentially I wanted on a sheet of paper all of the important interactions in an area so like what this list is if you could read my handwriting is Everything that you can mess with in there that does anything to the game state and every time there's an encounter every time there's a specific conversation that we had an idea for We had this internal Google sheet that sort of kept track of how done all of these regions were The problem with this is that the number of regions that there were kept changing, and so it was very, it was sort of difficult to tell from this how done we actually were.
And also, all the red things are things that never got checked one way or another, because I realized that this just represents the state that the spreadsheet was in when we abandoned it, rather than the state that it was in when we finished the game.
Like sound effects, if you looked at this, you would think there were no sound effects at all in the game, but we had just given up on the spreadsheet by the time we added sound.
The broad categories of stuff that we needed to get done here, like that first column, con, is just like, do we know what this area is?
Because there were a lot of things where we had said, okay, well, we definitely decided there was a mine here, but we don't really have an idea for a mine.
So once we get that idea, we're going to put an X in there and actually give the region a name.
Layout was just sort of...
Do the rooms exist? Is there stuff in them? Is progress blocking objects?
Like, are they wired up to actually block progress and stuff like that?
Scripts are, can you do the stuff that you're going to do in the room?
Like, if you go to interact with the thing, is there at least a baseline version of that interaction coded?
items, if there were any new items in the game that were specific to that region, then that was where I would keep track of whether they were done or not. Monsters is whether there were actually any fights there, which often there weren't. As I said, as we got further and further into the development of the game, combat became less and less of a focus, both in terms of quality and development time and also just importance to overall gameplay.
Way is just, did we remember to hook up the doors to get into this room?
Because when we were testing, we could just teleport around.
So sometimes we would just forget and there would be no way for the player to actually get to this thing.
Second section was all the sort of actual final assets for everything. Is it written?
Is there commentary for... so there's you get a kind of a companion character that runs around with you and we decided that one of the ways that we would create a tremendous amount of extra work for Riff was to make it so every room that you were in with your partner they would have a different thing to say about it and a different little conversation to have. CPG was my...
metric for whether it was a loathing game, does this room have a couple of pointless gags?
They didn't all need it, but that was where, like, in that opening mine, like, there was just nothing going on out there, so then I added this thing where you could explain to your partner how all of this mining equipment worked, even though you didn't know how the mining equipment worked, and it just gave you a perk called mine-splaining.
That's the kind of pointless gag the couple of pointless gags column represented.
And that stuff, I think.
That is where a lot of the kind of memorable soul of the game lives and I think it was It was the right instincts to actually try to track that and sort of try to shoehorn that stuff in even if there wasn't a Great idea for it to begin with Link was whether there was anything in the area that sort of connected you to another area or sent you somewhere else or like gave you a quest that that unlocked a new place that you could go.
Let's see. Art. Art was whether I had done the art for it or not. And yeah, sound effects. And then the rest of that stuff is like if there were monsters in the area, is there something that differentiates them from other monsters? Spoiler, the answer is almost always no.
Do they have basic AI hooked up and have I requested whatever animations?
The animation column didn't really belong in combat because often I would want a character in a scene that was doing something weird and I would need to get an animation from Wes for that that wasn't specifically part of combat.
So, the tools that we had, we built these before we actually hired up the full team.
And Chris Moyer, who has been the web developer programmer for Kingdom of Loading for many, many years, built all these tools for us.
And so this is the thing that we use to actually edit scenes.
And you'll see later, this looks a lot like the tools that we've been using for our web game for a long time.
The basic way that the data works in this game is we store a bunch of stuff in a MySQL database, and then there is a big export that happens into the game client, so we don't need to actually be in Unity to add content to the game, which I think was the single decision we made that made it so this game was able to be as big as it was, which I think is probably the primary strength of the game.
I think most of the reason that anyone who is impressed with this game is impressed with it is because it doesn't look like it is going to be this giant, sprawling, potentially 30-hour long thing, but because we made it very, very easy to put stuff in it, we were able to put a lot of stuff in it in the time that we had.
So like for any object in a scene, there's just a bunch of properties about it.
There's some just basic stuff like what sprite does it use?
If it requires an actual Unity prefab to have Wes's animations running on it, we can have it just kind of replaced with one of those at the time that it's rendered in the scene.
extend forward and extend back are like, can you walk past it without triggering its script?
There's the condition which is like, based on game logic states, does it show up at all?
And that's why you can kind of see like, the house is sort of Schrodinger's arson, like, because there's the non-burned down version of the house and there's the burned down version of the house and they just have different flag conditionals on them depending on what you've done.
In there, if you click on edit on the script link, it takes you to, this is the actual code that the designers wrote to handle all of the game logic.
And this started out as a scripting language that I developed for Kingdom of Loathing so that the writers who were not programmers could do really basic stuff like just dialogue trees, just conversations with multiple paths through them.
We didn't build a lot of extra functionality into that version of the language because we made a thing where it would just let you execute arbitrary PHP code in it, which is super safe, web development practice.
But also, we didn't need to write actual abstracted functions to handle game logic stuff because I had already done it in the PHP code and we could just run that.
This scripting language became, as I'll show you later, way, way more complicated and robust and important and powerful over time and has just been really key to how much we were able to accomplish in the game beyond what I expected to be able to do with it.
We also internally have this tagging system that also came from Kingdom of Loathing, where more or less anywhere in any of the data, we can leave a note for anybody else on the team, and then when that guy logs on to the admin tools, they just see a list of everything that's been annotated to them.
So if there's a thing I put in a thing in an area that Riff thought he was done writing, and Riff needed to do some writing, he could do it.
If I had a guy and I needed him to be dancing, I could say, Wes, make this guy dance.
Sometimes Kevin would leave a note that said, Zach, what were you trying to do with this script?
I can't even figure out what it would have done if it had been working.
So there are a lot of advantages to the way that we decided to do this with just the web tools for developing the content and the game basically being the client.
One that I didn't create a bullet point for, but that I think is actually pretty important is, We tested all of the content by actually playing the game, because that was the only way that we could see it.
We always knew we would make an interaction, and the only way for us to test that interaction was to go experience that interaction the way that the player was going to.
the tools were extremely familiar to us.
On the left is the thing that we use to make an item in Kingdom of Loathing, and on the right is the thing that we use to make an item in West of Loathing.
And you can see that in 15 years, things have gotten a lot shinier.
But the scripting language.
When I wrote the original design doc, I had very low expectations for the kind of scale of interactivity that we were going to be able to pull off in environments. It never occurred to me that we would be able to like make an NPC walk around in a room, because like I was still in this Kingdom of Loathing model where it was like, what would this game be like if it was on an Apple 2 and it was still me making it. But...
so much extra stuff got added to the scripting language that we started to be able to do stuff.
It's not super meaningful to look at, but there's an area in the game where there's bandits that will run around trying to prevent you from getting into buildings, and people that will run away from you when you get close to them.
We were able to do things that I was not expecting to be able to do, which is spatial puzzles that involve moving things around in areas.
The fact that all of that stuff was abstracted out into the scripting language meant that any of us could do it.
It didn't have to be just the person who knew how Unity worked.
we were able to make a change in the data and then just hit R in the build and it loads the change into the data. So it was very much, it was very comfortable to me because I grew up writing games in BASIC and you know there was no debugger. You just write some code and then run the game. If it didn't work you would change something and then run it again. Your changes were reflected immediately.
That's how Kingdom of Loathing worked. I get that's not how software development works, but Victor was able to make it so we could pretend that we were making this game in the 80s.
Biggest advantage, the designer does not have to use Git.
And as the designer, this is the thing that I'm the most happy about, about that whole process.
The art pipeline, kinda similar.
Starting with the hardware.
Pilot Precise V5 Extra Fine Rolling Ball Pen.
Ever since the beginning, that is what all Kingdom of Loathing and West of Loathing art has been drawn with.
I did gradually discover better and better kinds of paper to draw on over time.
This is what I landed on now.
There's no bleed, so the lines are real clean.
And so everything looks great when you put it in the cheapest version of Canon's scanner that they sell on Amazon at whatever time the previous one breaks.
All of that stuff goes into PaintShop Pro 9. Best hundred dollars I ever spent in 2004.
I did at some point update it to version 9.01. Still not totally sure that was a good idea.
A lot of people have asked me, including myself, over the years, why don't I just learn Photoshop?
And I just, every time on any given day, it's like, well, I could spend a week learning Photoshop or I could spend a week making a week's worth of art in PaintShop Pro 9 real, real fast.
And so far, someday a version of Windows is gonna come out that won't run this and then I have to retire.
That pipeline is basically, I...
save the item, like I work on the item, work on the sprite, work on the image, the whatever, in PaintShop. And then I have a macro that saves out a copy of it that is just black and white.
I am not even good at using PaintShop Pro 9, so I have no idea how to actually edit art when it's anti-aliased, so it's literally just a pixel at a time, black and white.
is how all of my editing works.
Nothing in the world wants art to be like that, so that macro also saves a copy of it that's sort of shrunk down so that there's some built-in anti-aliasing, puts it into a repository that gets then synced via Dropbox to a directory on our web server where all of the other stuff is.
And then there is another key that you can hit in the game that.
requests like a tarball of all of those sprites, and then some magic happens that Victor wrote that I don't understand, that then puts those sprites in the game.
So in addition to being able to change the writing and the scripting and the interactions and the locations of things, you can also just add new art, more or less as soon as I save it, it's just in the game, which was just awesome.
Several advantages of this pipeline.
This slide was gonna be about how reusable the sprites were and how we didn't have to have that many of them, but then I looked and there were like 3,400 sprites that I had made, so I'm like, oh, maybe this slide is about how that didn't seem to take very long to make all those sprites.
Again, live updates, like you just have to hit the button, get new sprites in there, and again, I did not have to use Git to make changes to the project.
This was going to be about the writing pipeline, but the writing pipeline is essentially exactly the same as the design pipeline, because all of the writing just lives in those scripts, which probably eventually is going to bite us in the ass if we ever want to do anything like localize, but we'll solve that problem when we come to it.
Advantage there is that the writer also doesn't have to use Git.
The things that I feel like didn't work super well about these processes is a good closing segment for a talk about what went right and wrong.
There was a lot of this by the end the starting with the world first and not necessarily having a like Complete vision of what any of the individual things were going to be Especially as you get further west in the game You notice that things get a little sparser and it's not because we wanted the verisimilitude of that Region of the US being less populous. It was because like man, did we make a lot of mines already and do we not have an idea for what this mine would be and that kind of had this knock-on effect of it was pretty difficult to tell how close to finished we were because It's not like I can just put an item on my calendar that is have an idea for what this mine is it kind of has to happen if it's gonna be any good and it was we should have spent more time actively brainstorming stuff in the beginning and had a better idea of exactly what stuff was going to be. This also resulted in a lot of the storylines, because we definitely came at this from a world-first and not a story-first point of view, a lot of the stuff just kind of ended as a dud because we never really had any idea of where it was going, so never really, we didn't really build up to anything, so we weren't able to pay off what we had been building up to, so it was just sort of...
whatever we made up the day that we had to write the last section of like the Necromancer questline or the cow stuff that At least the cow stuff was so hidden that hardly anybody sees how disappointing it is in the end So on the production side I am sorry Kevin for how rough the last couple of months of working on this game were because it was you know, like, because we didn't have VO, for instance, which I think was a great move on our part, it was possible to change things up until the last second, and so there was not really ever a good way of knowing, like, Kevin was never sure when he was done going through an area because he didn't know that we hadn't gone back and changed something else. I really wish that somebody would make something that would allow a bunch of people to collaborate on a piece of software.
and kind of track the changes that they made in a comprehensible way, but that must be really hard because certainly no one's ever done it.
And the abstraction between the work of actually making the game and the actual code that runs on your computer when you play the game.
basically made it so none of us really had to get all that far out of our wheelhouses, which was great for getting a lot of stuff done in a hurry, but it wasn't really great for sort of growing our skill sets.
Like, I now have this, you know, I have a lead credit on this game that's in Unity, and I know nothing about Unity.
And that...
You know, the game turned out okay and people seemed to like it and it sold pretty well.
So I feel like it's a normal person would sit here and say, oh yeah, we did things that we were supposed to be doing and everything worked out fine.
But I can't help feeling like having to be a little bit more involved in each other's processes there would have resulted in a little bit more growth internally for the team.
And yeah, so if there are any questions about anything other than Unity, I can answer them at the mic's here.
Oh, I'm supposed to remind you, fill out the evaluations for the talk.
Do the first part that you liked, don't remember the last part where it kind of fizzles out.
If you were in here from the session before, scan your badge on the way out so that they know to send it to you.
I think that's all I was supposed to say.
Hello.
Hello.
As a fan of Kingdom of Loathing from way, way back when, I was surprised to see how you guys launched West of Loathing and how much different it was from that ragtag group of people.
You launched on Steam.
You had it as a box price.
I was curious to see what kind of evolved that publishing decision along the way.
We knew we wanted it to be a single-player experience that we didn't have to maintain for the rest of our lives, because we already had one of those and it was already a lot of work.
Basically, a couple years before we started on this, Kevin and I moved to San Francisco so that we could learn more about the games industry and how stuff worked.
We probably would have done something like this earlier if we had had any idea how to go about doing it, but we were sort of isolated in Phoenix, we didn't really know people, and we were very fortunate to...
get the opportunity to share office space with Campo Santo when we first moved here and when they first got started and so they were just this incredibly valuable resource in just telling us how wrong we were about all of the ways that we thought the industry worked.
And so yeah, I think in a lot of ways we got very lucky that we sort of learned just in time how releasing an actual normal video game works.
It was a lot of the same team, though.
There were seven of us that made this game and four of us were original KOL people and were continuing to work on KOL the whole time, so nobody saw that contrast more than we did.
Hey, first I wanted to say that the Spatoon progression was one storyline whose payoff was fantastic.
It's one of the best things I've ever seen in games before, so that was great.
That is all riff, 100%.
Alright, well send him my thanks.
But my question was, you said that at the end it seemed like you weren't able to get a lot of those storylines to land.
Was...
I guess, why weren't you trying to spend more time on that?
Was it like, we have all this other game we have to make, or it's like, this is how good it's going to be?
I think part of it is just a kind of failure at the top of the company, because I don't actually think that stories and games are important.
Important it's not it's not that I don't think that they're good or you know Mature as a medium or whatever, but it's just never a priority for me like that's never what I care about when I play games and I Fail to pay attention to the fact that I am nearly alone in that And so yeah, it was just it like riff is way better at it than I am So I think like the circus storyline which was all him from beginning to end Actually does have a narrative arc because he knows how those work And the stuff that I built most of the first parts of and then relied on him to kind of wrap up Because I don't know how those things work. There was just nowhere to go with the stuff that we had produced. All right. Thank you Hi, I got two questions if you don't mind.
So first off, bringing West of Loathing to Switch, is there anything that you guys have to tweak specifically for that platform?
Like, I know when I played West of Loathing, I played while I was on PC, so I clicked around to see if there's any Easter eggs or things I wasn't looking at.
I'll just click around wherever I was and I found some dope stuff.
but obviously you can't do that with Switch, so is there any tweaks you're making specifically for just gamepad controls only?
So there are a handful of things that require the mouse.
Moving around on the map, it was just literally, you just have to click somewhere.
So there's a bunch of UI stuff that has to be overhauled, and not a bunch, there's a few UI things that have to be completely overhauled to support Joysticks.
But we wanted to make sure that you could play the game with the keyboard as much as possible.
like the combat interface for instance was designed late enough that we were kind of imagining playing it with a controller so that was like relatively easy. Inventory has been a ton of work on Victor's part which it's in great shape but it would it took some blood to get there. There's nothing really fundamental.
We also were demoing it on iPads all of the time.
So there was a thing like in the beginning where there's the cactus guy in the prologue town.
You can get him to tell you that there's a shovel hidden behind this outhouse by the mine.
And it used to be that you actually had to WASD and walk behind it, but because of the way that clicking works, you can't click behind a sprite that's on the screen.
And so we ended up just changing the way that interaction worked so that every part of the game was accessible, whether you were moving around with the keyboard or clicking around with the mouse.
And so the joystick is basically a keyboard.
So.
So there's nothing about gameplay that has to change.
It's just all UI considerations.
And my second question is, how closely did you work with Ryan Icke?
I think one of the highlights of the game is that the soundtrack is one of my favorite soundtracks ever.
So in working with him, was it kind of like, all right, try and capture this feeling?
Or just kind of like, hey, do your thing.
And if it works, it'll work.
If not, we're still going to use it.
So for the sound design aspects, there was a lot more back and forth because.
Because of what this game looks like, Ryan couldn't necessarily look at a machine and actually understand what was happening when you used the machine.
So there was a lot of back and forth about what this kind of thing actually sounds like.
On the music, I sent him a single Sheryl Crow song as reference.
and then just kind of described in a sentence each of the songs that I wanted for Mood.
And sometimes he would come back with one and I would say, well, okay, this is not exactly what I was looking for, but this is great for this other thing. Like, we ended up using everything that he sent, like even some rough drafts of things that ended up being replaced. But it was remarkable how just good everything that he produced was.
Cool.
All right.
Thank you.
Hi.
How was the design behind the combat and stuff like that when you have the three classes and you have all the partners?
How did you guys plan around having all of the combinations of this partner with this class for?
We didn't do a great job with that in the end, right?
Like that's the one thing that we got dinged on in basically every review, was that the combat was kind of uninspired.
The engine for combat was very, very flexible and very robust, and we had a lot of big plans for what we were gonna do with it.
But then it sort of...
Because I have this desire in video games to just...
I want a bunch of things that make numbers bigger, and I want to find those things everywhere, I ended up just filling the world with stuff that made it impossible to balance combat.
And we just kind of ran out of time and ran out of money, and so we decided, well, let's just make it real easy so that it doesn't get in the way of the jokes, and try to do better next time.
I think there's a section of the game where you're sort of playing a tabletop miniatures game with some guys in a fort.
And those fights are pretty good, I think.
And those kind of illustrate the promise of the combat system by being really, really constrained, and they let us set some stuff up as puzzles.
And we kind of wanted combat in general to be like that, but just weren't really able to pull it off.
Okay. Thank you.
Thanks, everybody.
