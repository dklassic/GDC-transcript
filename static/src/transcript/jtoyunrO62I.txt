Welcome to the final day and final session in GDC 2017.
So this is Epic and Interactive Music in Final Fantasy XV.
I'm really honored to be here and Oh, it's crowded.
Actually, how many of you guys are not audio guys?
How many of you guys are not doing audio stuff?
Oh, thank you very much.
So you guys are coming because of Final Fantasy?
So how many of you played this game?
Yeah, great.
And how many of you finished?
Wow, that's great.
OK, so today.
I will talk about the interactive music features in Final Fantasy XV, tools and technique we use to achieve them.
And finally, the issues we faced when synchronizing music to the game.
I will not talk about the composing technique or story because I'm not a composer.
But I think there are some of composers who worked with Final Fantasy here.
Maybe, no?
Maybe they will, but so, I will introduce them at the end of the talk.
So, let me introduce myself.
My name is Sho Iwamoto.
I'm an audio programmer at Square Enix from 2014.
I developed MAGI system, the interactive music system for our audio engine.
So since I entered Square Enix in just two years ago, From where I studied developed Magi system, the music of Final Fantasy XV was partly finished because, you know, the game previously named as Final Fantasy Versus XIII has, in that trailer, already has iconic musics such as.
Yeah, that was before I entered Square Enix, so Epic as a help.
So I, as a developer of this MAGI system, got involved in the game development team and taking the role of designing and implementing interactive music system for Final Fantasy XV.
At first, it was like a crash of Epic music and interactive system.
How can I make this music interactive while maintaining their epic melodies?
So making music interactive could change or even screw up the music itself, or making music not memorable enough.
The thinking about our Final Fantasy music, I mean, in the series, a lot of work done with Uematsu-san, and this time Shimomura-san, but...
They are epic and has a number of memorable themes and has many orchestral concerts around the world, you know, and has strong melody line most of the time.
And I think the music itself is kind of one of the sales point of this game.
So I don't want to lose these good parts of this music.
So our goal is to make epic and interactive music for wide and seamless gameplay.
You know, Final Fantasy series are also known as challenging new systems and technology.
And this time we headed to open world and seamless gameplay.
So it means that music should do the same, seamless transition, but should not losing its epicness.
So this is the goal and move down to our concept.
Okay, so this is a slide for me.
Calm down, show, and speak slowly.
Take water, okay?
So first of all, I want to clarify that the reason we decided to implement interactive music is not for reduce repetition.
Repeating music is not evil.
Of course, it could be annoying sometimes.
But everyone loves to repeat their favorite music.
And also, repetition makes the music much more memorable.
Instead, we use that to enhance the user's emotional experience by playing music that is most suitable to the situation.
And one more thing, make transitions.
musical as much as possible.
To be specific, for bidirectional change, where situation can move back and forth freely, we use vertical remixing, because you can easily move back and forth the vertical layer in any musical situation, basically.
On the other hand, for unidirectional progress, we use horizontal re-sequencing.
This way, the music will flow from A to B and B to C and so on musically as it was composed.
So just in case maybe some of you guys are, many of you guys are not audio guy, the vertical and horizontal is kind of interactive music words.
And maybe it was just confusing.
Let's make it clear.
The vertical is changing what vertical layer you play or mute.
by remixing and horizontal is changing horizontal time or horizontal sequence of the music by re-sequencing.
So I use these two words in this session.
Then here is the list of features we've implemented.
So I will go into the details, some of these features, in this session, but before that, let's see a video of very basic examples that these features were used.
Real nice here.
Yeah.
How about we grab a bite?
Yeah, let's do it.
Come with us, Nacht!
There's more dangerous things prowling about these days.
Sir, try this on for size.
The game's on.
Yeah!
You're out!
It's over!
Hey, are we all still here?
Yep.
Ignis!
Okay, so to achieve these features, I've developed the system called MAGI.
It stands for Music API for Gaming Interaction.
The features of this system is, first, enables vertical and horizontal transition, because, you know, it's basic.
And second, It needs to accept any tempo or time signature and the changes in the music.
I think, despite the fact that not many interactive music systems support this, I believe this is really important.
To setting up the tempo and time signatures can be done by hand, but it's maybe troublesome.
So we had a MIDI import function.
Just by dropping the midi file to 02, tempo and time signatures are set automatically.
And lastly, easy to use.
Because we will use very simple and basic approaches, I want to make it easier than versatile.
So here's our OSILINK tool for interacting with music.
And this is our proprietary tool.
And I guess most of you here will not have a chance to use this, but I will use this tool through the demo.
So please take a look at how we can implement music easily and iterate rapidly.
So let's take a look at our tool.
Here it is.
So this is the view of interactive music, and everything you need to authorize is in this view.
So left side is list of musics, and right side is all of what is in an interactive piece of music.
To test a transition, just hit spacebar and play. ♪♪ Select others and hit spacebar.
That's it.
And to test vertical remixing, just throw a mode in here, top of this.
And just select other mode from these tabs.
And the parameters of these modes are usually folded behind here.
And other options or customization is also folded in here or here.
So again, everything you need to authorize is in this view.
So now, let's take a look at how to implement music into the game by using this tool.
So first is vertical remixing.
We call that mode transition.
What is mode?
Mode is shortly the set of layer volumes.
It lets you play or mute each of the layered tracks.
And also you may have other parameters like total volume or pitch or low-pass filter, et cetera.
And in this mode view, The lower half of this is a transitional parameter, such as fade time, fade offset, fade curve, and sync type, and stinger.
So back to your tool.
So here is the mode tab.
And you can play each layer just by clicking mute button.
And on and off.
Gorgeous.
adjusting the volume, and adjust the fade curve over here, like that.
Okay, so let's move on more concrete example.
We use mode transition in Chocobo.
The mode is changed according to Chocobo's speed.
So there is...
Here is Chocobo's song in run mode. ♪♪ Maybe you heard a thousand times.
And walk mode. ♪♪ Okay, so let's see the transition of this.
you And there is a little challenge about this.
As you can see, Chocobo can go nearly anywhere.
That makes the speed of Chocobo quite shaky, because Chocobo is not only running on a flat land.
So if the speed of Chocobo is reflected directly to the music, the transition would be kind of messy.
So I want to hear the music, but I don't want to hear the transition of the music every time I bump into trees or I just turn around.
So let's see the implementation.
To avoid the messy transition, I set it transition time longer.
I set it from run to walk transition.
There is a four bar transition time.
So.
So four bars transition time.
It's really slow.
And then, if you try to transition back and forth, maybe you almost can't hear the transition.
Maybe bumping into trees, or just curving.
It's not so messy, okay?
But long transition means late feedback.
So actually, we use different transition time for each mode.
Longer transition from run to walk, and shorter transition from walk to run.
OK, let's check it.
From walk to run, we use six units.
transition time. It means one and a half beats. So just quick. Sorry.
And you can see and edit each transition curve over here. Transition time to walk and transition time to run.
And it looks like similar of each other, but actually they has a different time unit.
And you can select time unit from here.
It may be bars or beats or 16th notes or samples or seconds.
So I use bars unit for longer transition, four bars.
And I use 16s nodes units for shorter transition.
So that makes this difference.
So why I made this difference?
Because the player doesn't always intentionally stop running.
Simply bumping into something or making turn will stop Chocobo, but not vice versa.
Pressing the R trigger is going to make Chocobo run, so it is all player's will.
So it's because of player's intention or not.
I believe this implementation is the best way to reflect player's control.
And so this is how we avoid annoying transition while having quick music feedback.
However, when a player lies at chocobo, he or she probably wants to get somewhere quick, indicating that the chocobo will be running most of the time.
So actually, there's few chance to hear the slow version, maybe, except for swimming.
As you saw, while Choco is swimming, walking mode becomes active. So that is a good chance to enjoy walk mode of Choco music. Okay, so let's move on. Next case is Garden Quay. Garden Quay is a seaside outpost and the building you can see at the end of this pier is a restaurant. The music changes between this gorgeous restaurant and relaxing seaside.
It's one of my favorite.
Seaside version.
And restaurant version.
Okay, let's see.
Okay, so this is also a vertical remixing, more transition, but not just crossfading.
It's based on the musical timing.
I know it's basic thing, but because as you hear this music, see.
You can see that musical accent is on nearly every two bars.
So I want to make transition in sync with this musical accent.
So for mode transition information here, I set this sync type to next two bar.
So that makes the transition occurs around the next two bars.
And in this setting, the transition starts two beats before the next two bars and ends at the next two bars.
So that makes this...
Okay, so by making transition in sync with musical accent, it sounds as if not just crossfading, but instead it gives like the impression of as if a pianist and a drummer playing along your game and make the musical change.
So, just one thing you need to keep in mind about this transition is that this causes two bars wait sometimes.
And button.
In this case, it's not a problem.
Okay, wrap up the mode transition.
We use different transition time for each mode in Chocobo run and walk transition, and we use transition on musical timing in Garlin Quay.
So that's it for vertical remixing, and next is horizontal re-sequencing.
We call that section transition.
in MAGI.
So section makes musical progression and there are parameters of section transition such as fade in and fade out and fade curve and entry point is here.
Entry point is our start point of each section.
So if you transition from A to B, section B is always starts from around the entry point.
So back to O2, let's see this.
So each of these tracks are the section.
And you can adjust the fade in and out curve over here, like this.
So, this zero bar is our entry point.
So that makes So this section entries from here.
And we use this section transition, especially in boss battles, which has several sequences in battle, but sequence is basically unidirectional.
And most importantly, end the music in Sync with the Game.
So let's take a look at this boss battle music.
OK, so this music contains three sections, main loop section, and pre-end section, and end section.
So music will be transitioned from main loop to pre-end, and pre-end to end.
So let's take a look at this video.
You Thank you, thank you.
All right.
So in this implementation, there was three challenges we have.
And first thing is time signature changes.
The music from last video was named Invidia, what has a lot of time signature changes.
It's a mix of 3-4 and 4-4.
Actually, there are a lot of time signature variations, or it changes in JRPG music.
So I designed Magi to support them.
Let's see how to implement that.
So it's really easy.
Nope, looks like easy.
Easy for me.
So just divide meter into two.
So that makes the same time signature.
And you can easily input your time signature you want.
And actually, you can do any time signature.
3, 4, 7, 4, or 90, 60, or whatever you want.
So, I mean, it's any.
So the result is like this.
Okay, let's see this 3, 4, and 4, 4.
Oh, I actually have a quick feature.
Okay, that's nice.
And the other case, such as Omnis Lacrimar.
This one.
This music has a lot of tempo changes, I mean, little than those, but you can do that.
Maybe big noise, big sound.
Yeah, that's it.
So the procedure is same again.
It's really easy for me.
Just divide a meter and a divided region and input the tempo or just drag the boundary.
So that makes, that calculates the tempo automatically.
Eventually, this music had no interactive feature in the game, but I think this was a great example to demonstrate.
Now I can use any music in this system.
So the next thing is custom sync points.
The sync points are the musical timing that transitions are allowed.
So let me show you some demo.
So the sync point is...
This red bar is one of the sync points.
Or...
This red bar.
Or this.
So normally, like this music, each bar or each two bars or each four bars, the constant sync point will suffice as sync points. In that case, all you have to do is just select this sync type from this, from here. So this time I set our next two bar.
or four bar, or next bar, or anything.
However, in many of the music we use our horizontal re-sequences, constant sync points will not be musical.
So, like the music of last one.
This music in video, basically has 80 bars constant sync points, but for example.
say, like this region contains the time signature changes.
So, actually this length is like 14 bars, I think.
OK, so this region is not 8-bar, so it's not constant.
So we had to customize these sync points for every music.
Now I will demonstrate setting up these custom sync points.
So first, you had to add custom points from here.
But before that, if you said these are sync type to, say, next to bar or next bar, then you add the custom points.
You already have the same sync points by default.
So all you have to do is just move or delete that you think transitions are not musical.
Or.
add the sync points that you think transitions is musical.
And the result is like this.
Here.
So these are the sync points for this music and the system will wait for the next sync points to transition.
But as you can see, this custom sync point has a disadvantage for synchronization.
Sometimes sync points are hard to find, and you may have to wait 16 bars or more to transition.
So in that regard, we use pre-end section for every music that has an end section.
Because, say, like the last song, he wants to end the music from this main loop section. ♪♪ Yeah, I already triggered the transition, but you have to wait until here.
Come on!
Maybe I already defeated the boss.
So it's really awkward if music keeps playing or keeps transitioning after you defeated your boss.
So that's why we use the pre-end section.
And pre-end section is designed to have more dense and constant sync points.
So that makes.
It's really quick transition.
All right, so transition from main loop to pre-end is music first, because we don't have to make severe synchronization.
But, transition from pre-end to end is synchronization first, because we want to end the music in sync with the boss was defeated.
So this main loop, pre-end, and end structure is same for all other boss battle music.
Sorry.
Okay, so let's take a look at Titans as an example.
Oh, here is our Apocalypse Noctis.
So this also has a main loop, pre-end, end structure, and.
is the custom point and you can see the main loop has not dense but a customized sync point and pre-end section has more dense and constant sync point so that makes yeah easy to synchronize So this main loop, pre-end, end structure, I think is the key to make epic and interactive music.
Okay, wrap up this section transition.
Epic music that has strong melody line needs to, any tempo and time signature support.
And needs custom sync points, but this makes the synchronization issue, so.
We need pre-end section for each music.
OK, so the last topic is synchronization.
But this time is more severe one.
Because last video you see, versus Rocky, was quite easy.
because it don't contain any cut scenes or special attacks kind of thing.
So it's quite simple.
But boss battles with the astral gods, like Titan and Leviathan and Eflit, requires more strict synchronization because each finish blow is scripted to each battle and music must synchronize to each special attack.
So, ah, okay.
By the way, the videos I will show you from now on are possibly spoilers, so be careful.
And if you really don't want to see the spoiler, just close your eye.
Listen to the music, okay?
So let's see the Leviathan's battle theme.
Again.
This music also has our main loop and pre-end and end section.
And transition to pre-end section will trigger when the tornado happens.
And transition to end section will trigger during the ending scene.
So, let's take a look.
OK, let's talk about synchronization.
The last thing, including the finish blow, is about 20 seconds long.
So to make sure the ending music syncs to this finish blow, you have to care about the transition time and transition time error.
So let's see the transition time.
So I want to test transition from pre-end to end section.
Let's see.
So this transition takes at least about three seconds, but it depends on the timing you trigger the transition.
So it may be It may take five or six seconds at max.
So, taking account of this transition time, I said transition trigger six seconds after the last thing started.
So, it looks good.
It has some errors, but will be fine.
But then, we decided to make quick time event.
Just before the final blow, you mean to enhance the player engagement?
Oh, wait, who cares the music?
So transition takes three to six seconds, and we can't trigger the transition after this QTE.
It's too late.
So lucky I confirmed that this QTE takes three seconds at max, but maybe there's three seconds here and three seconds here, so maybe six seconds error at max.
Maybe it's quite big.
So I did the comparison.
The longest QTE completion and shortest.
So let's see the longest one.
I triggered.
Wait for QTE.
Okay, it works I think. And the shortest one.
Trigger.
Sounds good.
So, the two game scenes make actually different music synchronization, but I think both has an impacted ending.
So still, there are edge cases such as music transition go really fast, and the player not pushing any button.
Then synchronization could possibly not work, I think.
Sorry.
But, um, in most cases, player will push the button.
I believe.
You know, so in about a second, so we actually did nothing related to this QTE to help music transition. The transition is already triggered before the QTE, and after that, believe the player.
So, lastly, I will show you the Ifrit battle music, titled Hellfire, which I'm really emotionally involved with.
To be honest, there are no technical issues about this music because the composer Suzuki-san and I worked very close and we already had the know-how to synchronize music to these boss battles.
And I sent him our gameplay video of this boss battle and he wrote our music that has really heroic progression and is easy to transition in power.
Okay, so this is Hellfire.
And first transition from main loop to pre-end happens when you damage ifrit enough and ifrit gets kind of serious mode and background darkens.
And last transition from pre-end to end aims to synchronize the one minute long ending scene of this battle.
So just one thing I have to care about is this long intro of this pre-end section because the transition from this loop region was quite works well, as you hear, but transition from this loop region.
Maybe it's not.
I put these transition sync points just in case if it's really quick.
But actually, I tested this bottle without any debug cheats.
I'm just playing.
And I confirmed that the bottle after the transition of pre-end lasts more than one minute.
So it may be transition from this loop region.
OK, so let's take a look at the epic and interactive music in if we parted.
Oh, sorry.
Before that, we checked the synchronization overview.
And the gameplay after the pre-end section start, we lost more than one minute.
And after that, ending scene starts.
And I triggered the transition to end section at the same time.
and ending music in sync to the finished blog. Again, there is two to three seconds error at the transition time, but ending the music right where it needs to. So, please watch the epic and interactive music in the Eflite bottle. Sorry, this is maybe a huge spoiler.
And this is my gameplay video, and actually all video was played by me.
And I played this game maybe more than 100 hours.
And so I beat Ifrit so fast, actually.
But in most cases, things were not the same as this.
So please take a look.
Hey, what's up? Hey, what's up?
You Oh, thank you.
It was fantastic.
All right.
So wrap up the synchronization.
So if you want to make or implement music for games like Final Fantasy, I mean games that need strong melody line and, at the same time, interactivity.
Be considerate of durations, such as duration of transition and its error, and duration of loop region, and duration of cutscene, duration of gameplay.
It depends on the player, but you can predict and you can believe.
And duration of player's emotional change.
It's not just a single moment, but I think it's the range of time.
And move to conclusions.
Maybe I just say again, so, epic music that has strong melody line needs any tempo or time signature support and needs custom sync points, but this makes synchronization harder, so we use pre-end section to synchronize and be considerate of duration of transition gameplay, emotion, et cetera.
And for the future, depend, sorry, I want to make some new features.
First is custom transition destination.
This time we had a custom transition start point, but the destination is fixed to the entry point, but I think sometimes we need to change that depends on the situation.
And interactive versus short loop program.
Actually, I tried to divide some songs into the sections to make it interactive, but the dividing music leads to short loops and maybe it's annoying.
So to avoid that, you have to make longer songs.
And finally, more interactive music features in the future.
Okay, so thank you for that, and I have to say, ah, sorry.
Thank you for coming today, and welcome your questions.
And if you have questions, please are cued to that sound camera.
And, okay, please speak slowly and clearly.
Maybe my listening skill is not good.
And before that, I want to thank you, thank to these people.
from the main composer Shimomura-san, and Shibata-san and Aoki-san as composer, and Suzuki-san and Nakama-san as additional composer.
Are you there?
No? Really? . . . . . . . . . . . . . . . . . . . .
And Aota-san as arranger, and Kaomori-san as music supervisor, and Osanai-san as music drummer.
So, welcome to your question.
Thank you.
Thank you.
Thank you very much for the talk.
I guess I have a question about how much...
of the music was planned in advance to do this, and how much was figured out later?
How much?
Actually, you know, I entered Square Enix in just two years ago, and it was already composed, and many of these are not planned to be interactive.
So actually, I made the music for the trailer.
And I made that music for the trailer divide into sections and make the end section.
So the last one, Hellfire, is actually planned for the interactive feature.
So I think it was good.
OK?
Thank you.
Hi, thank you so much.
Thank you.
How much of the features that you showed us in the Magi, is possible in FMOD or Wwise?
That's a great question, I think.
All these, hi, I'm Atsushi from Square Enix.
Hi.
Well, all these two is in-house basically.
So you can't do all this Wwise stuff because there's no connection between them.
So you couldn't really do anything like that in Wwise, is what you're saying?
Oh, OK.
I don't really know what the features are on Wwise.
Maybe you might be able to.
You might be able to.
OK.
You might be able to, though.
Of course you can do batch code and follow it into Wwise, but I think Wwise don't have...
I don't blame them, but they don't have...
such as time signature change or tempo change support.
So if you want to use that kind of music, it's hard.
Maybe you can because they has a custom cue feature, so you can manually put the custom cues for each wave file.
You can do that, but it's troublesome.
For each bar, yeah.
Okay, thank you so much.
Thank you.
Hi, thanks for the talk.
I have a question.
I haven't played all the way through the FF515, but was there any music non-diegetic?
Like diegetic music?
source music, like underscore, I think most Final Fantasy have underscore type music, but there was really beautiful bossa nova music in a restaurant, you know, layers, but was there any source music, like music coming from radio, and if so, how did you manage with the regular underscore music, and how did you interact?
Actually we had kind of non-diet music in rest town.
That is one of the outposts.
And there was kind of street musicians.
And all we do is just ducking the other music.
It's a crossway between them.
Okay.
It is interactive.
Okay, wow.
Simple stuff.
Okay, thanks.
Thank you.
This is kind of a new question, is it possible to buy Maggi tool?
Yeah, it's a great question actually. We'll think about that.
Maybe not.
It depends on the money.
You know?
Okay. Thank you.
Thank you. But currently not, sorry.
Okay. That's maybe the last one.
Thank you.
Thank you.
Did you look into or plan to look into adding custom bars for transitions?
Like, for example, the restaurant music, when you switch between the two, you have the sync points to go to the kind of heavier version with the drums.
But are you looking into stuff like being able to specify like a drum roll to get the drums into the music as opposed to just...
starting to play them at the right point.
So just like a custom one bar drum roll that you would play at the time of the sync.
So I don't know if you looked into or if it's too much work on the composers.
Actually, thank you.
Yeah.
And the question is, I think.
can we put the transitional stinger when the transition mode A to B, and I can.
But maybe we couldn't use this because we don't have plan to do that, but I had a function for that.
I call it instrument.
Sorry, where is it?
Okay, see, Garden Quay, and this has our transition here, and these are instrument, and if you add some, say, symbol switch or something into the instrument, you can select the instrument from here and play it with the transition.
You can.
But we didn't.
Oh, sorry.
Is it mostly because the music was already written or is it because it's too much work to use that feature?
Or is it because it doesn't make too much difference?
Maybe I think in just this setting I feel good, so it's okay.
Okay.
The two can do it, two can do it, definitely.
Thanks.
Thank you.
Thank you very much for coming.
