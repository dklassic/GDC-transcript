Hi, welcome.
My name is Paul Vosper, and today I'd like to talk to you about budgets and budget reports.
In 1998, I went to work for a small game studio in Chicago that made games exclusively for the Macintosh.
I worked on Myth 2 as an artist and animator.
I created content within strict guidelines.
All artwork was done on sprite plates.
So you had a limited number of plates, and each plate had a limited number of images.
We didn't have a schedule, and ship games only when they were done.
At that point, I didn't know about budgets or budget reporting.
The limits of what I could do were strictly guided by an engineer.
The size of our maps, as well as the size and number of the sprites, were well understood limitations.
Two years later, we've been bought by Microsoft and found ourselves shipping Halo on a strict timeline that had more to do with the new Xbox console than it did with the game's development.
It was a new engine, our first to move away from sprites, to create a new IP on a new platform.
As our certification date approached, we realized that we were having trouble fitting into the memory constraints of the Xbox console.
We optimized code, we cleaned up content, and we rebuilt the Warthog 37 times.
We did all the logical optimizations we could think of without sacrificing quality, but nothing was really working.
As time ran out, we realized that we needed to take drastic measures.
So we cut the resolution of every texture in the environment by half.
At this point, it wasn't really a choice.
It wasn't even discussed with the artists.
We kicked off another build and checked the memory usage.
We were still not in budget, so we did the only thing we could.
We cut the resolution of the textures in half again.
What we shipped was only a shadow of what we had intended, and certainly not what all the artists had been looking at day in and day out in the weeks before ship.
Most artists never saw the changes until they were playing the final release build.
In 2004, we released Halo 2.
We continue to work in the Halo engine, improving the physics, graphics, and gameplay, but also starting to include budget reporting in our tool set.
Content creators became more of a part of the budget process and began to influence the creation of better tools.
In 2007, we transitioned the engine to the Xbox 360 console with Halo 3.
We continue to refine the game and the gameplay, but also honing the tools.
Budget reporting improved as well, becoming a fully featured system.
We shipped ODST and Reach as we became an independent studio again and started on our next big project.
In 2014, we released Destiny, a brand new engine, but also two new platforms.
While there were significant challenges and plenty of unpleasant choices to be made, none of them were a real crisis.
And none had a negative impact on the quality of the final game.
We established realistic budgets in the early stages of pre-production, and continually updated them as the project evolved into the game that you see today.
Before content memory peaked, we had reporting tools in place, and had already been working with content creators on how to best use them to optimize content.
This is an insanely complex problem.
Destiny is a shared world experience with multiple activity lines that can overlap in different ways at different points in the game.
These new game elements were a real challenge to track and keep in budget.
But our reporting system started strongly and has evolved through the entire development of the game.
For Destiny, I became more involved with budgets and budget reporting than I ever had before.
I found that I really liked it because it provided a fascinating look deep into the game engine, as well as how the game comes together as a project.
My role was classic TA territory of analysis and evangelism.
I fought fires, I dug through reports, I had endless conversations with both content creators and engineers.
About their intentions, I evangelized best practices and functioned as a human UI for our in-development budget reporting system.
More than anything, I had to understand our system and explain it to others again and again.
I made plenty of mistakes and had to continually challenge what I thought I knew about the system.
Understanding any system means learning it from the inside out.
I still spend a lot of time in Excel.
pouring over data to learn as much as possible about our system and how it works.
But no matter how well I know the system, new problems are constantly appearing that require careful analysis to understand why assets cost what they do, where they come from, or why they change.
TAs certainly need to understand the system from the DCC perspective, so you understand where the data goes once you leave Photoshop or Maya, but you also need to look at it from the engine's perspective as well.
These are the hard and often unpleasant facts about budgets in the bottom line.
Any modern game engine contains many complex systems that all have to work together.
These systems are written by different people at different times, each following their own motivations and constraints.
I try to make sense of them to paint a larger picture that can be presented to others.
What you're seeing up on the screen is a conceptual overview of Destiny's content system, from DCC's source on the outer ring to the runtime game engine at the center.
I've drawn it many times at meetings, and this whiteboard became a slide that was included in one of the lunchtime brown bag talks I gave about the content system in our theater.
This puts me squarely between these two characters, part Oracle and part accountant.
This is the territory that TAs thrive, understanding a complex pipeline and toolset, explaining that to artists and designers, chasing down bugs, helping to create better tools.
in trying to make the whole process as painless as possible.
What I'd like to share today is some of the lessons I have learned while working on Destiny.
I'd like to talk about TA roles and budgets, and budget reports, and how we can help optimize assets and build better processes.
But before we start, I need to explain a bit about what content means inside of the Destiny engine.
In the Destiny engine, the system and world art get loaded first, so all of the environment is in and able to run.
Next is the player, including the customizable gear and weapons.
Then all of the designer-placed assets get loaded.
Combatants, loot chests, objects, et cetera.
You can see that most assets in the game, from the bottom of this pyramid to the top, can use animations and effects.
So they get loaded, they get brought in at many levels.
Assets that are higher in this pyramid can share content with assets below them, but not vice versa.
So combatants can make use of world art textures, but world art can't make use of anyone else's data.
Our spaces in the game are broken up into bubbles, with transitions between those bubbles.
When we talk about a loading set, we're talking about two bubbles and all the transitions that touch them.
This means that whenever you're looking at bubble B, you have to think about both bubble A and bubble C as well.
This presents significant challenges to how spaces are laid out, but also in how we manage the budgets for these as well.
In this talk, I'd like to discuss some of the forces that work against keeping assets on track.
These are natural phenomenon and never really go away, but by understanding what they are, and why they happen, you can manage their effect on your project.
As a TA, I'd like you to keep in mind four things.
You need to understand the motivations of both content creators and engineers.
You need to understand the cycles within your project, both big and small.
You need to understand the technology of your tools and your engines.
And you should never stop learning.
And you should always share what you've learned with others.
This might seem self-evident, but it's important to acknowledge right from the start.
Content creators want to create content.
Content creators want to create content.
This includes artists, musicians, animators, and designers.
We hire creative, passionate people who want to make capital A art.
Their strongest motivation is to create assets, not to manage them.
Creating something of wonder and beauty is a joy, but managing the cost for it is a pain in the ass.
No one gets in the art books by shaving 4K off of a texture, or by reusing someone else's geometry to save cost.
These are the folks that will pour their souls into creating magical, beautiful things, yet these are also the folks that will suffer the most from bad decisions and poorly understood data.
While they are working on something, it is the most important thing in the world, but after they hand it off, it must be stacked up against all other assets to be scrutinized, criticized, and possibly cut.
Content creators usually learn by bitter experience that there are dark forces working against them, but at the heart of every artist is that nagging feeling that they just want to create content.
Most people think of assets as having a value that is measured in kilobytes.
But really, the value of any asset has three distinct axes.
It has a memory cost, it also has visual impact, and it has the impact on gameplay.
This makes the value of any piece of content difficult to define and very hard to measure.
The first axis is the easiest.
Bytes are bytes after all.
Even when sharing textures or geometry between assets, memory should be simple to report and easy to understand.
This is the hard data that is the start of any budget discussion.
This is the axis of value that fits into a spreadsheet.
This is the bottom line.
It's black and white, and it all adds up.
But there are other important axes as well, and they evade easy measure.
Visual impact is a huge part of deciding what resources you should devote to an asset.
How large is the model?
How big or massive is it supposed to look?
How close will the player get to it?
A character's face will have a different impact than a tree, and a tree along a player's path will have a very different impact than one at the top of a hill on a horizon.
Size, scale, proximity, and readability will all affect how much resources you'll want to devote to that asset.
But it's impact on gameplay that is actually the most critical axis, and is easily the most difficult to define or measure.
What part does the asset play in engaging the player?
What information does this asset need to convey?
Is it fun?
Does it advance the story?
Does it help establish goals or explain problems to the player?
The radar array you see in the horizon in the upper left of this screenshot is one of the most important assets in the scene.
It's an important landmark that serves as a destination for several missions.
So it's both guidepost and goal.
It has a unique silhouette that can be read from anywhere in the space.
Its visual impact is small, but its gameplay impact is enormous.
All of the things we just discussed, memory, visual impact, impact on gameplay are going to change over the course of the project.
This means that the value for any piece of content will change as well.
When you start a project, everything has equal value.
Anything is possible, and you have far more good ideas than you'll ever have resources to finish.
As the project matures, some assets rise in prominence while others sink.
A minor character is...
Discovered to be unique and compelling, so becomes a star.
A major character flops and is cut.
That hard-edged steampunk theme everybody so admired at the outset is discarded in favor of ethereal futuristic sci-fi holograms.
The story you set out to tell is never the story you wind up telling, which means the assets you use to tell it are going to change in value.
The rate that groups add content to the game will change over time, and the rate of change will vary from group to group.
Environments must be masked out in engine before other work can happen.
World artists are working on palettes and explorations as well, but they must build the physical mass of the game world before anyone else can play in it.
World art will be first in and first out.
Sandbox, that is characters, vehicles, and weapons, follow closely behind and deliver one of each of their assets.
Design starts on paper, and only towards the end can they make full use of the assets that World Art and Sandbox have created.
They are adding assets to the game all along, but the rate they are adding assets peaks only at the very end of the project.
So it's not until design does their work that you see the quantity of content increase to its full extent.
A character artist builds a single character, but it's the designer who puts 50 of them in a scene.
Each asset has its own cycle of cost growth as well.
A door starts off as a gray box, then becomes a wood door, then becomes a wood door with iron hinges, and then a complex locking mechanism gets added to complement gameplay.
This means that the memory cost of the added content will change over time.
Combined with the rate of content gets added, this creates a constantly rising slope whose summit can be hard to predict.
The resources required to remove assets are going to change over time as well.
Every asset will have dependencies which have a huge effect on its creation, as well as any editing or removal later on.
You can't animate a character that hasn't been rigged, and changing the rig on a character that has already been animated can have a staggering cost.
What might be an easy change early on can soon have a huge downstream cost that require extraordinary resources to resolve.
This can lead to having to make pragmatic decisions about cutting assets, not because it makes sense for aesthetic or gameplay reasons, but because the pragmatic action is your only option based on available resources.
It's easy to measure how much content is actually loaded, but what's loaded and why is much more interesting.
For games, balancing the what's loaded equation is actually much more important than the inevitable bottom line.
Balancing within a single asset is an understandable exercise, as you can easily see how all the parts work within a single unit.
Comparing the size of one texture against another is easy to see and balance.
But what happens when you have to balance one asset against another, or against many others?
Given a huge stack of assets, how do you evaluate why one should cost more than the other?
Or which one should be cut?
What happens when a cool new monster that design wants to add means that world art has to compromise on the visibility and playable area in a level?
For Destiny, the disciplines that had the most control over their assets were also the most successful at keeping them in budget.
I want to share two very different stories.
The first is world art, and the second is effects.
You can see world art up here at the base of the content pyramid with effects off on the right-hand side.
World art did a fantastic job on engaging with and owning their budget process.
They controlled the balance for all of their own assets.
So even though they were working with a complex and hard to understand system, they were able to get everything in budget and even handle outside requests for change.
Every action they took reflected on their own bottom line.
So they were quickly able to see cause and effect and mastered their own domain.
Effects had a much harder time.
They delivered assets that are used by other groups.
often beyond the scope of their original intentions.
So effects would be in budget on Monday, but over budget on Tuesday, without them having changed anything.
They had a hard time seeing the causes for the changes in their data usages.
They still did an awesome job in optimizing their content while delivering world-class effects, but we never found a simple, understandable way to balance their budget.
But it was design that had the hardest time of any discipline.
Not only were they at the apex of a complex system, but design itself is made up of many subgroups, each with their own goals and motivations.
Each of these groups affects the other, and yet they all share the same budget.
Communication and negotiation is difficult, as each of the groups is only putting forward the best efforts for their area, and the ones that they feel most passionately about.
Finding a balance here is a problem that transcends design and becomes a project-level problem.
In many artistic disciplines, the rules for proportion and design have been well understood and documented for centuries.
This is simply not true for games.
There is no formula for a fun and rewarding experience.
During the production of a game, you'll often hear people say, this is gonna be cool, or this is gonna be fun.
But you won't know if that's really true until it's in-game and in the hands of players.
Bungie uses a playtest-driven development process, which means that we try out a lot of ideas by playing them over and over again.
Many ideas will get tossed out or get changed until they are unrecognizable.
This is great for the game, but it means that you are trying to balance not only the assets themselves, but also their intention and execution against the actual player experience.
There is no formula to follow.
It's a heated discussion that will go on all during production and even after you ship the game.
Engineers can't create effective budget tools if content creators can't or aren't willing to use them.
The tools have to be built to enable content creators to balance the content budgets, but if they never really use the tools, then no one notices the problems or thinks about the ways they might be improved.
This stalemate leads to an accumulation of bugs that don't get fixed or improvements that never get implemented.
After we shipped Destiny, we asked content creators to list out what they thought were the 10 most important tools, excuse me, we asked the content creators to list out what they thought were the 10 most important tools and improvements the engineers could work on next.
More than a dozen groups took part.
But not one discipline listed budget reports in their requests.
As you might guess, content creators don't ever include building better budget reports anywhere in their job description.
So think about this cycle.
World Art has measurable assets first, so they start using the budget tools earlier and make requests for changes and improvements while the project is still early in the production cycle.
But design doesn't have any measurable assets until late in the project.
But by then, tool support is scarce and everyone's against hard deadlines.
By the time a new tool or improvement might be finished, the project will have already shipped.
So the task gets pushed off until the next project.
So it's no surprise that tech debt piles up faster for the disciplines that finish later.
This accumulation of technical debt creates a problem that is difficult to overcome.
It's often a vicious cycle that repeats itself from project to project.
There's an unspoken pact between content creators and engineers.
Content creators must trust the engineers, and the engineers must trust the content creators.
Engineers are delivering a game engine and the tools to create and analyze content.
They define what the game can and cannot do, including many of the constraints that will face content creators.
They require that content creators be knowledgeable about and monitor their own content.
Content creators are delivering content, textures and geometry arranged in engaging and entertaining ways.
They define the look and feel of the game and look to engineering to facilitate that.
They require that engineers are knowledgeable and forthcoming about their systems and how it affects that content.
In a perfect world, this is a wonderful symbiosis, but that is rarely what happens in games development.
As systems and the fabric of the game itself change rapidly, trust is a fragile thing that must be constantly refreshed and renewed.
Trust is something that is hard to create and easy to break.
It's all too easy for trust to erode and for all sides to retreat into their own corners.
And no matter how much foresight and planning you have, you are inevitably going to stumble upon a poorly understood or completely overlooked constraint that affect the project's development and the goodwill of everyone involved.
All of the ground rules for asset allocation and destiny were laid down in 2009, five years before the game actually shipped.
While this initial set of rules held amazingly true, Adjustments had to be made as the game itself grew and changed, and there were things that simply broke.
We always imagined that content creators would only have to deal with the horizontal axis on this budget chart.
That is, they would never need to know the distinction between assets used by the GPU and assets used by the CPU.
Towards the end of Destiny, we started seeing problems with tags memory on V1 consoles, the Xbox 360 and the PS3.
This was a constraint that the content creators had never been made aware of.
And this is where I learned the definition of the term non-fungible.
Because memory is non-fungible, which means that you can't use CPU memory for the GPU and vice versa.
The GPU will pay a penalty if it tries to pull data from memory that is set up for the CPU.
And the CPU will pay a penalty if it tries to pull data from memory that is set up for the GPU.
So the memory that you use for textures and geometry has to be defined separately from the memory you use for the remainder, and you can't move the line between them after it's set.
That's what non-fungible means.
For last generation consoles, PS3 and Xbox 360, this is about a 60-40 split, where 60% of the memory is used for graphics and 40% for the remainder.
For a current gen, the PS4 and the Xbox One, this is about 80-20, with tags being much less of an issue and leaving lots more room for graphics.
So we ran out of memory for assets being sent to the CPU and couldn't borrow any memory that had been slated for the GPU.
We wound up having to cut assets not because of the graphics or their overall cost, but simply because of the cost of the CPU-bound data.
We didn't find this until towards the end of the project, and although the changes were thankfully small, the concessions were very painful to make.
And no matter how big or small your project is, you have finite resources to make your game.
So the game of project development becomes how you can manage resources in the most efficient way possible, so you can best deliver on your intentions.
This means you have to manage people, You have to manage time, and you have to manage assets and their cost.
There is nothing more frustrating than delivering an asset or experience only to find out that it simply doesn't fit and must be either reduced in cost or cut entirely.
Ultimately, the game of making games is one of resource management.
It's important to keep in mind that you are fighting forces that are constantly mutating and are indestructible.
Yet they are as much a part of making games as the gameplay or the assets themselves.
As a TA, you'll need to learn as much as possible about what drives the technology, as well as what drives the people that write the code and the people that are making the content.
You'll need to help educate both content creators and engineers about what has happened on the project and what's going to happen next.
You'll need to answer questions, many of which you will not have the answer to.
You'll need to evangelize best practices and often remind people of what they should be doing and what part they should play in making a better game.
While the dark arts will never be tamed, there are tools and processes that will help you understand them by better tracking their behavior.
While we are talking about tools and processes, there are four things to keep in mind.
To understand any problem, you'll need to understand the data.
But, raw data is not enough.
Any decision is going to require context.
Different disciplines need different ways of looking at the data.
And always learn from your mistakes.
And tell others what you have learned.
When you load your game, the engine has to assemble a staggering amount of data into a comprehensible experience of sight and sound.
But that same data has to be visualized in other ways as well.
So that it can be managed according to platform and project restrictions.
Budget reports are what allow you to make sense of that data.
to dive in and organize it by location, by discipline, by type, and by asset.
Understanding the data allows you to understand if you have a problem, and if you do, where that problem is, and how best to solve it.
When talking about budgets, you'll need to view data in its raw form, not just from the view of the DCC apps, like Photoshop or Maya, but in the way the game engine itself sees the data.
Going back to this slide a minute, you'll see that the content creators spend most of their time working in the outer ring.
That is, the DCC apps like Max, Maya, and Photoshop, or in Grognok, our world editor.
Think of the outer ring as the intentions of the content creators.
But it's only at the center that you find the real truth that is inside the runtime engine.
Remember that no matter what you thought was going to happen as you were authoring content in Maya, once the game ships, the only thing that really matters is what's happening at runtime.
This is a huge distinction for content creators who spend the vast majority of their time in the outer ring of intentions.
To look at this data, we have tools for analyzing budget costs from DCC apps through to runtime, as well as many steps along the way.
These tools range from carefully crafted user experiences to gritty dumps of raw data.
In this diagram, you'll see the intentions of the content creators on the left, with the runtime reality on the right.
In this ecosystem for understanding data, you're going to notice some distinct areas.
On the left, we have preventative tools, which guide the creation of better content before it ever gets into the game engine.
On the right, we have forensic tools for measuring the data the engine actually sees.
For any content creator, understanding data can be hard.
But when building models.
The geometry data reported inside Max and Maya is actually misleading, and so artists might believe there's something wrong with the system.
How a DCC app perceives vert count is vastly different than how a real-time game engine does.
UV islands, smoothing groups, shaders, vertex colors, skin weighting, and even game markup can lead to doubling of verts in a rendering— real-time rendering pipeline, which adds to the cost of geometry.
This can be confusing for content creators who are looking at the vert count, as reported by the DCC app, and assuming that's what the count should be.
Remember that this is the outer ring, the artist's intentions, and not the runtime reality.
So we maintain vertex estimation tools in both Max and Maya, while still in approximation, and it's close enough to the final in-engine results to eliminate the need for the round trip through the importer.
to measure an asset's runtime costs.
You can see in this example that Max is reporting these meshes as having about 3,000 verts, where in-game this is closer to 5,000.
The tools show the artist which categories are the least efficient.
In this case, the boundaries of smoothing groups.
Having these tools as close as possible to where the content decisions are being made is crucial for connecting cause and effect.
While not perfect, these estimates make geometry optimizations much more efficient and are also a valuable tool for helping content creators understand the difference between DCC and runtime costs.
In Destiny, textures have their compression and MIP level automatically applied.
We also dropped one MIP for the V1 platforms, the PS3 and the Xbox 360.
Artists will often want to override these settings when creating specialized textures or when optimizing textures in order to balance a budget.
So we have budget feedback tools alongside the settings inside of the texture tag editor.
You can see across the top here that the source resolution is listed, as well as the Xbox 360 cost and the compression method.
We allow V1 and V2 resolution to be edited independently from the source.
So the original intention of the texture can always be maintained.
Common parameters are at the top, but more detail can be exposed when needed.
This allows editing of the MIP chain and the compression method.
For the in-game data, you'll need different methods to display the data for different users.
And there are two main roles for budget reporting.
The first is for auditing, an overview of conditions and trends.
And the second is for taking action, forensic tools to locate and resolve problems.
The first is to inspect the data from a high level to get an overall sense of current or future problem areas.
These users are often project or discipline leads who want to create or maintain a visual model of the assets and how they're tracking against budgets.
They need to cover large aspects of the game and easily identify trouble spots.
The second requires a much more detailed view.
These users are often content creators who will be making direct changes to the content.
They need to be able to dig much further into which assets are present, how they got there, and why they cost what they do.
Both groups need to see this data in context, so they can see how making changes to one thing will affect others, or how an asset compares to the others around it.
It's important to note that all budget reports are really a contract with both curators and creators.
It's critical that they be true and accurate, and that they don't change over the course of a project.
For both curators and creators, you need a quick method to identify any problem areas and to put them in context.
The web report provides information on every content build we do.
A quick glance at the color-coded page will show which areas are having issues.
This information is accessible to anyone in the studio.
Content creators, project leads, producers all can use this page for an overview of how the destination and activities are doing.
The contents of the page can also be emailed.
We have several distribution lists that get these reports emailed to them daily.
The web page also allows you to track builds over time.
This allows you to look at trends as well as to find when changes were introduced.
Each point on this graph represents a content build.
Hovering over the data provides basic information about the build, as well as serving as a link to that build page.
When digging into why changes occur between builds, you need to show the difference between the two, one before and one after.
All the reports we're going to talk about support diffing, so you can track down these changes.
Here I'm comparing the activity report for two builds.
You can see items that were added are in green, those removed are in red, and you can see changes in blue with the before and after values listed.
I have two red items selected, So they show up in orange.
And the total for those selected items shows at the bottom.
Being able to pick out and total items quickly and easily is important when trying to track down problems.
All the budget reporting tools exist in a network of database servers with web front ends.
And local tools you can run on the data for further analysis.
So you can see the game build server at the center here in green.
When builds are created.
They also generate budget data that is held on a different server.
Both of these have web front ends to make searching and getting info easier.
All the budget data can be loaded and processed on a user's local machine.
Once processed, any of a number of custom reports can be run for environment, for animation, design, et cetera.
So this is the starting point for the local budget reports.
This tool allows users to browse through a list of current builds from the server and load the budget data for any destination or platform.
Once loaded, you can run reports specifically tailored to each discipline or simply view the raw data.
So let's start with a common case for environments.
A lead scans the overview report in email and sees that the overall data usages for environments is at or near budget.
Using the link in the email, they open the report to do a bit of digging and find the textures are a bit over where they should be.
They check the surrounding areas to establish context and make sure there is no systemic problem.
The lead then tasks an artist familiar with the space to cut down the textures, along with some recommendations.
The artist checks the figures from the top down as well to make sure that they understand the problem and context.
Remember the complexity of this problem.
When we talk about a loading set, we're talking about two bubbles and all of the transitions that touch them.
So if a texture is in both bubble B and bubble C, then removing it from B doesn't actually gain anything.
Every decision must be judged within the loading set and then balanced against all the surrounding bubbles as well.
So knowing which textures are in which bubbles becomes a critical piece of information.
Here's a full-screen view of the environment report.
Up at the top, you can see that I'm looking at the moon in the first story activity, and I filtered it down to show only the loading set of Accelerator Hellmouth.
World art controls a wide variety of assets, from graphics resources like textures and geometry, to pathfinding terrain and geometry.
World art controls a wide variety of assets, from graphics resources like textures and geometry, to pathfinding terrain and visibility data.
Everything here is broken down into logical units according to how World Art needs to deal with them.
In the middle section of the environment report, you can see that each of the categories are broken down into their own tabs.
Textures, geometry, AO, LOD textures, LOD geometry, and game data.
Each tab has a unique custom view of the data according to the needs of the content creators.
Inside of the textures tab here, you can see that all of the environment textures in this loading set are broken down further according to logical units.
So you can see environment textures listed separately from sky, object, and speed tree textures.
You can also see that not everything breaks down neatly, so there's often a leftovers category.
There's a drop-down at the bottom of the section for filtering the detail view.
And here's the detailed view of the environment textures.
When listing out the textures, it's important to put them into context.
It's important to list not only their size, but also where the texture is used and how many times it's used.
A texture that is only used once or twice is much more likely to be reduced or cut, rather than one that is used 98 times.
You'll see on the right side that the bubbles that the texture is used in are listed.
Most textures shown here are used in both bubbles, but that fourth texture, which is only used in one.
After you've answered the question of where and how many times the texture has been used, the next question that needs to be answered is what objects actually use this texture.
Hovering over the usages will pop up a list of all assets that use that texture.
Note that not only the assets listed, but also where to find them in the world building tool.
Being able to connect the reports to other tools is a critical step in taking action.
From this point, you can take several actions that lead away from the budget reports themselves.
From this point, you can dig further into the data, open the texture directly in the editor, or simply copy out a list of the objects that use the texture to paste them into an email.
All of the reports support exporting data to Excel for further analysis.
This way we don't have to duplicate all of the spreadsheet functions within the budget reports themselves.
You'll see here that there are far more data elements listed than what we saw in the previous texture report.
This is a complete list of the raw data, the reality that's running under the UI.
Many of these elements get filtered out because they are of limited use for content creators.
but can be critical when analyzing a problem.
To allow design more flexibility with the combatant races, the graphics for each of those races had to fit into a specific budget.
This meant the designers could be confident that any two races would fit into any of their mission spaces.
This way, designers don't have to worry about the cost for any particular character, vehicle, or weapon.
All they have to worry about is that they never have more than two races per loading set.
So all of the Fallen are the same cost as all of the Cabal.
We limited the budget reporting for sandbox art to graphics resources only.
This allowed those content creators to focus 100% on the graphics and not have to worry about the cost of abilities or AI.
This also allowed the art group to focus on the visuals for each character by giving them easily understandable boundaries.
They had complete control over their own domain and could allocate resources as they saw fit.
To do this, we needed to assemble assets into logical units other than loading sets.
So we created budget sets, which allows an arbitrary collection of assets to be imported into a single package.
Budget sets can include anything, but are most often used as a collection of assets and all of their dependents.
Each race is made up of multiple characters, vehicles, and weapons.
They are considered as a single unit for budgets, but each of these assets can also be reported on individually.
Importing any asset also imports all of the dependent abilities, AI, animation, and effects, so the costs for these are always available even if they are not being reported.
So here's the sandbox report view of the Cabal with the gladiator highlighted for inspection.
You can see the cost of the race as a whole broken down in the upper left column with the selected gladiator on the right.
I've included the cost of animation and effects here, but these are usually hidden by default.
Like the environment report, the sandbox report is broken down into subcategories.
The sandbox artists are mainly concerned with the graphics resources of textures, geometry, and postures, but all of the assets' costs can be listed.
This is the geometry view for a single asset.
While the sandbox texture report is similar to what the environment artists use, they require a more detailed look into the geometry.
The assets themselves are generally more complex and usually include multiple source files.
So the report includes information on triangles, verts, and LODs, but also breaks down the mesh into all of its parts to report on the cost of damage sections and variants.
This is another example of a custom report defined by content creators to make it easier for them to pinpoint problems and identify where to fix them.
One of the elements that defines Destiny is gear, our system for providing a near-infinite assortment of player outfits, weapons, and ships.
Each piece of gear is made up of a number of slots.
Each slot can have hundreds or thousands of options.
Artists combine multiple sub-components called bits to create the options for each slot.
This specific overall configuration is called an arrangement.
So the budget reporting has to list the bits that fill the slots configured by arrangement to show the overall cost of the gear.
While the overall budget for any piece of gear within a class is the same, a shotgun has the same overall cost as a sniper rifle.
The cost for the slots are very different.
For example, the cost for a scope on a sniper rifle is very different than the sights on a shotgun.
This presented some interesting challenges for budget reports.
Here's a view of a single weapon.
At the very bottom of the screen, you can see the gear arrangement that's selected.
In this case, the auto rifle you start the game with.
Above this, the main part of the slide here, you can see all of the bits listed along with the slot that they belong to.
As you can see, even a single weapon can be quite complex.
It's critical that the data be presented in such a way that the user can quickly locate problems and determine what action should be taken to fix it.
Here's a view of a different kind of gear.
This is the personal gear for the player.
Helmets, shoulder pads, capes, and et cetera.
Player gear doesn't have any preset arrangements, so everything is a la carte within a specific class or gender.
All of these reports are based on the same data types, but they are presented in a way that makes the most sense to the group using them.
The presentation is partially driven by process used to create the assets, but also by the preference of the content creators that have to make use of the data.
Each of the five slots here has its own individual budget.
These budgets are individually set by class, gender, and slot.
To report on this, we needed another custom view that would support not only the custom arrangements, but also their associated budgets.
The design report presents some interesting challenges.
As we talked about earlier, design is actually five unique but interdependent groups.
They exist at the apex of the content pyramid and are constantly juggling assets to find the perfect balance between cost and gameplay.
For the main activities on any map, The two design groups are Mission Design, or Story, and Ambient.
Ambient includes patrols, public events, bounties, loot, and other events not directly related to the missions.
So in addition to the complexity of our loading sets, design also has to track multiple activities running in parallel.
Designers can place assets directly, or they can spawn them through squads or behaviors.
Because assets are brought in from so many sources, it's important to be able to identify which of the activities brought the assets into the loading set.
Designers are also pulling together assets from many different sources.
They might place a squad of menacing AI to fight, or a handy pile of crates for cover, or even an enormous spectacle that culminates a battle.
So designers need to not only So designers need to not only know the overall cost of the asset, but how much of that cost is shared with other assets in the scene.
So when reporting an asset's cost, we also need to report on how much would be saved if we were to remove the asset.
The common questions that design needs to answer are what changed between these two builds, how much memory would I save if I removed asset X.
And how much memory, how much would memory increase if I added asset Y?
You learn for your mistakes by taking the time to stop and reflect on what things went wrong and what things went right.
After we shipped Destiny, every discipline took the time to write up what went right on the project and what went wrong.
There was a lot of discussion about what we could do better next time, but in doing so, we uncovered a lot about our processes.
So even if they never change, our understanding has improved tremendously.
These discussions turned into valuable documentation for setting standards and identifying trouble spots moving forward.
So we've talked a bit about the dark arts and some of the spells and potions you can use to defend your project against them.
As a TA, you'll need to understand the technology, not just from the side of the user's intentions, but from how the game engine receives the data.
You'll need to help educate both content creators and engineers about the budget tools and how to use them.
You'll need to answer questions, lots of questions.
Many of these questions will require you to do serious detective work in order to answer.
You'll need to constantly evangelize best practices.
And often remind people of what they should be doing and what part they should play in making a better game.
Remember that humans only absorb and retain a portion of any explanation they hear or see.
Don't be surprised if you have to explain something to the same person several times over.
And don't expect a group to absorb information uniformly or rationally.
Expect communication breakdowns, misconceptions, and isolated pockets of ignorance.
And last, remember that great games are made by ordinary people, just like you.
Thanks for listening.
So I think we're going to do questions now, if anybody has any questions.
I covered everything.
That is awesome.
Or you all are just so tired by this point in the day, you're just like, you're ready for the coffee break.
Sweet.
Oh, one question.
So you mentioned that you've done stuff out to Excel.
Could you give some examples of some of the kind of things you discovered with other forms of analysis besides the stuff you showed here?
One of the things that we often need to do is we'll need to take the entirety of a loading set and dump it out into Excel and then do a pivot table inside of Excel so we can determine the GPU resources versus the CPU resources.
And so a lot of that kind of the breakdown I showed on one of the earlier slides was done by just that, by taking the raw data, dumping it into Excel.
and then pulling it apart into the different types of resources that were present in the loading set.
Cool, thanks.
So, the most of what you talked about were kind of offline reports.
Are there things that you can only gather runtime when the game is running?
There are.
They're usually not directly related to content memory.
The main thing I was just focusing on was measuring sort of the package data that we have, the data that's on disk.
But there's a whole other set of things that we do for the actual runtime costs, and things like the memory that's required to update the game at runtime.
But that's actually a different set of tools.
But we do have those.
There's a whole set of stuff for doing that.
Sorry, that's not a terribly satisfactory answer to your question.
That's a different talk, I think.
Yeah, probably.
Thank you.
Hi.
Over here.
Hi.
Yes.
Yeah, great talk.
Thank you.
Thank you.
I was just curious, from a team organization point, you've got a pretty complex tool system there just for the budgeting, and I was wondering how many personnel maintain that itself?
That's a complicated answer.
Yeah.
Just for the kind of the user facing side of it, just the interface, it's one person.
We're actually shifting a lot of this stuff over now and kind of rewriting a bunch of it.
That one person that's writing the tools that the users see is making use of a staggering amount of data that comes in from a variety of sources.
Whenever we write an import process, and there's probably 15 different engineers that are writing import processes.
Each of those import processes is writing out data that gets stored on all of the assets.
So if you ask an asset and say, hey, how many verts do you have in this asset?
That data was actually written out during the import process.
So there was one of our 15 content engineers was actually the person that actually has to write the data.
So we have one person that's just doing the reporting process, but then we have another person who's actually writing the import process.
So it's very distributed. It is it is.
And then we have individual engineers that are working on all of the web services.
You know storing the data and then also the web front ends is in yet another person that's up there.
Cool, thank you very much for that overview, sure.
Anyone else out there? I'm getting a yellow card held up.
I think it's time for a coffee break.
Thanks very much.
