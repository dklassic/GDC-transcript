A very good afternoon to all of you.
I hope you're having a great day so far.
Very excited to be the first ever UX Summit here at GDC 2017.
A brief introduction about me. I'm Om Tandon, currently working as director of UX at Digit Game Studios Dublin. It's Ireland's biggest independent game studio. Prior to Digit, I've been working as a senior UX designer and researcher for Gameloft's New Zealand and Australia studios.
And before that, I was a creative director, UX UI, for education gaming startup Tap2Learn, which was incubated right here in the heart of San Francisco.
I've been in the industry for over 12 years now, and I've donned many hats during my journey, but I must say I finally found my niche in UX.
UX stands for Players Voice in the game development process.
It's something I'm very passionate about as a methodology, and I think it has great many future applications.
So I think that is enough introduction about me.
Let's see what do we have for you today.
Presenting Ice Age Adventures, UX Diagnosis for Live Operation Games, a Case Study.
This is my elevator pitch, what we'll be looking at, how to gather data and work with other departments within the company, how to analyze the data you have collected and apply heuristic diagnosis, pitching a solution to the stakeholder group, and designing a solution that resonates with both business and user needs.
A small disclaimer, a very special thanks to Gameloft.
As you might be well aware, we are subject to a lot of NDAs in gaming industry.
The case study you're about to see is a reconstruction of some of the work I did on a published project.
However, the data points and the figures that you will see in this presentation are not the real data, they have been tweaked slightly for the benefit of this presentation.
So, before we dive in, let's have a look at what the game is all about.
There was supposed to be sound as well, but...
Ah, it's there!
So that was the fun part, guys!
No, I promise there are more videos.
So as you can see, this game was based on a very strong IP, Ice Age series, which has a huge global fan following.
It was targeted at a casual player base, and the game was all about rescuing animals, building a shelter for them, and the players could do that by playing popular casual games, like Match 3, Infinite Runner, and so on.
The target demographic for this game included IP fans, young adults, parents, and a lot of stay-at-home moms.
A lot of this data was generated to our active community pages.
We had a very strong community for this game, and our community managers interacted with the most engaged players almost on a daily basis.
A few more stats about the game.
During its lifetime, it racked up 40 million downloads worldwide.
We had a super active player base of five million daily active users, and it was one of the top performers in Gameloft's portfolio.
Now as a lot of my fellow UX designers would agree, sometimes when we are moved around projects, we inherit suboptimal designs.
What exactly do I mean by that?
Any game designers in the house?
So with all due respect guys, sometimes the systems you design, though they are functional, they're not the best example of usability and intuitiveness.
One such system which I inherited when I was moved on to the Ice Age team was the existing Even system.
Let me give you a bit more context.
When a game is newly launched, it generates a lot of engagement.
But the fact is, the longer the game stays live, its novelty value starts wearing off, and the players start getting bored of the same grinding mechanics.
So, in order to refresh the user experience, as developers, we have to keep adding new features.
And that is where the Event System comes in.
By looking at usage data, we found that while the average session time was around 18 minutes, which is not bad by industry standards, for those players who took part in the event system, this average went up to 30, 35 minutes, practically double of what we were seeing.
And it is well known, if you can have players spend quality time and effort in your game, it's much easier to monetize them.
So the event system was designed to increase the average session length, which could then have a positive impact on our monetization.
So far, so good.
But here was the problem.
Nowadays when we launch a feature, most companies, there's something called a launch KPI.
It's pretty much like what NASA does with its projects, right?
Based on those launch KPIs, you determine whether a feature launch is successful or failure.
Now the projected KPI for this game was, sorry, for this feature was 45% participation rate of existing player base.
However, the ground reality was only 20% of the players converted, which was of course disappointing.
Now even before I start looking at data to understand where does the bottleneck lie, it's important to start with certain assumptions.
We had to answer two critical questions here.
Why?
Why do we have such poor numbers?
And what is causing this lack of engagement?
Is it the content system of the event?
Is it not appealing enough?
But the content pipeline was designed based on upcoming Ice Age movies, which was pretty new.
And of course, we were talking to our players constantly through our community channels, asking them what kind of characters they would like to see, what kind of adventures they would like to go.
So we can safely say that was not it, because we had a lot of active player feedback on the content design.
Then what was it?
Is it the discovery and usability of the system?
Are players trying to interact with the feature but it's so hard to use that they are getting frustrated and just churning?
Or maybe the events are too hard to complete.
So the players might be signing up but the competition level is so high they're just not feeling like, you know, getting through it or getting frustrated.
In order to validate some of these hypotheses and rule out others, I had to work very closely with other departments within the company.
For example, data scientists, who are looking at copious amount of player data, cohort analysis, and so on. Analytics to understand how players are interacting with this feature, where are they spending time, where are they dropping off. Business performance managers, who design the soft and hard currency gates of the game. Now, just by looking at how much currencies or resources players are spending in a feature, you can have a pretty good idea of engagement.
Because the more engaged they are, more resources they're going to sink.
and of course the community managers.
Working with them, we could design special polls and surveys to gather qualitative subjective data.
Here's an example of the kind of data we were collecting and how we were analyzing it.
Number of people clicking on the events icon, number of people hitting the join button, number of people dropping off from various drill downs, event completion rate, and specially designed surveys and polls.
Now just by looking at the analytic funnel, we could see where exactly in the flow the drop was happening, where the churn was happening.
This of course gives rise to the next natural question.
Why is that churn happening?
Now in order to understand that, we applied a very popular UX methodology which is called heuristic diagnosis.
Heuristics stands for a set of special cardinal rules which when applied to a flow help us understand how usable or intuitive that flow is.
You can find more information about it on the Nelson Norman Group website.
I would recommend that.
So, let's see what we uncover when we apply heuristic diagnosis to our existing event game flow.
As soon as the player comes back to the game, he comes to screen number one, right here.
Now, this information that a new event is available is presented as a notification pip in the bottom left corner of the screen, right above the trophy icon.
To give you a bit more context, when a game is newly launched, as a UX designer, you only want the most important call to actions to be presented, because you don't want to overwhelm the player or create a choice bias.
However, as I mentioned earlier, this is also true.
The longer the game stays live, in order to keep refreshing the user experience, we have to keep adding features.
And what does that imply?
For a game like ours, when the player comes back, he will see five to six notifications, as you can see, waiting for his attention.
These could be the daily reward systems, your alliance systems, help requests, special offers, and so on.
So it is very much possible that this information, that a new event is available, might be getting drowned in that noise.
Now if the player clicks on the event icon, somehow, he'll come to screen number two.
Here the events are presented in a laundry list format.
Now by their very nature, our events were designed to fall into different buckets, like daily, weekly, monthly, and so on.
But tell me, as a player, can you make that out just by looking at the screen?
And that information is important, because different players will engage with different event types based on their preferences.
I may be the kind of player who just likes to play daily events, because that's the kind of time commitment I want to do.
But you can see that I cannot make that decision just by looking at the information on the screen.
If the player clicks on one of the event type, he's brought to screen number three, where you can see some more information about the rewards, some call to actions, and access to leaderboards.
If you click on the leaderboard button, you're brought to screen number four.
Here player can see the leaderboard and his position relative to rest of the players in the game.
Now let's take a step back and try to analyze why is it in the first place a player would like to take part in the event system?
Well, there are two things.
What are the rewards?
What is it I as a player will get if I take part in the event system or sink my time in it?
And second, what is the risk involved?
What are my chances of getting that reward?
And that is what comes through by looking at the leaderboard.
Now it is possible that at any given point of time, we may have three to four events running in parallel.
Let's say daily, weekly, monthly, and a seasonal Halloween special.
Do you really think, as a player, I would like to go through three drilldowns and four clicks in order to gather all the risk and reward information I need for each and every event type?
And we're talking about around 16 clicks and 12 drilldowns.
That sounds like a lot of work, right?
So probably the short answer is no.
And when we looked at our analytics, that's where we found a lot of churn happening, because people were losing their way going down these multiple drill rounds.
It was a big pain point.
The next screen, this is the worst possible screen, by the way, which I've saved for the last.
This is the screen the player sees when an event has expired, and he logs back into the game.
Let's try to see what's going through the player's mind when they see this screen.
Yeah, there's more fun, just wait.
So imagine you are a player returning back to the game.
You see a nice congratulation message.
What are we doing here?
What we are doing here is we are creating anticipation.
We are raising expectation.
Imagine you are hungry.
You walk into a pizza parlor.
What's going through your mind?
The chef is plating up a slice of pizza for you and you're salivating.
You are expecting positive gratification any minute.
And that's what our player is expecting.
I mean, it's a bit exaggerated, but you get the idea.
So, she's expecting all sorts of exotic rewards to fall her way any time soon.
However, let's see what's actually happening.
Here you are, coming back to the game, you see all the smoke and mirror, and then...
the final score is zero.
Your rank is in thousands, and your reward, big, fat none.
You don't deserve it.
Go away.
So, after creating anticipation and raising expectation, when the player sees the screen, She's like, what the fuck just happened?
I mean, while she was expecting positive gratification, and then she sees a screen which is utterly lacking in any kind of encouragement, it seems almost like a dirty trick, almost like a slap in her face.
So, after applying heuristic diagnosis, here's a list of issues we found out.
Three drill downs and four clicks to gather all risk and reward information that player needs for his decision making.
Text walls, which were repeated throughout all the drill downs, that's a suboptimal design.
Busy layouts, confusing CTAs, and event overscreen, which lacks any kind of encouragement.
Yeah, that's a long list.
Now, you saw that how we collected qualitative and quantitative data, which helped us understand where exactly the churn is happening.
We applied heuristic diagnosis, so we know why that churn is happening.
Do you think now I have enough information to start designing a solution?
Not yet, because even before I can think of start designing a solution, there's one more step in between, and that is getting a stakeholder buy-in.
The stakeholder group can vary in composition from company to company.
It can have your product leads, dev leads, creative directors, and so on.
Now it is important to understand that any update schedule, as in the case of our game, has been decided upon three to six months in advance.
So if you turn up at the last minute and say, hey, by the way, we have an important UX fix to push, it's just not going to happen.
Trust me, I can take my word on that.
What we need to do is we need to get a stakeholder buy-in.
So here I am presenting my analysis to the stakeholder group, which is the product manager and the dev lead in my case, and the product has a question for me.
Well, this makes sense, but why do you think it's more important than 50 other improvements that we already have lined up?
And the devs have their own angle.
Whatever solution you come up with, will it reuse existing widgets?
Because if the solution involves creating and writing more code, that can inflate the sprint time, thereby delaying the overall release schedule.
And that's going to be in my head.
I didn't want that, of course.
Now this is where you leverage working very closely with other stakeholders within the company.
Based on the analysis, the business performance managers projected there would be a 15% drop in revenue if we do not push for this fix.
And this helped turn the tide.
The product saw that this is a strong case for UX revamp.
Yeah, the money really talks.
That got them sorted.
And the devs also understood that it's important, but we have to be very smart and efficient about carrying out any changes.
Now perhaps you can understand why it was important to get a stakeholder buy-in, because I'm not free to design just any solution that might be so expensive to build that it will never see the light of day.
Instead, the solution I needed to design had to hit three distinct goals.
Business goals of increasing player participation rate and boosting ROI, user experience goals of reducing cognitive load and making the whole experience feel more rewarding, and of course, the development goal of working within strict budget constraints.
So now we have a green light.
The first thing I like to do afterwards in order to start on a solution is to look at the root cause of the problem.
Even before I consider wireframes or hierarchy issues, the first thing I start with is the logic flows.
This is the existing event logic in our game.
Is there a new event available?
If yes, show player a new notification on HUD.
If player signs up, maintain the new notification.
If not, just show him the remaining time.
Now...
You may well recall when we were applying heuristic diagnosis, I did point out for a game like ours, which has been live for long, anytime the player comes back to the game, he has five to six notifications waiting for his attention. And we deduced it is possible that this information that a new event is available might be getting drowned.
Or it may be the player is so used to the notification spam, he just treats it as white noise and blanks it out. Either ways, the discovery of this system is suffering. So what did we do? We added another step.
trigger an event sign-up UI at launch.
Now, whenever a new event is available, we trigger a sign-up UI.
What that does is it allows player to sign up for the event without going through any further drill downs if he so wishes to.
What did we boost?
We added discovery.
Instead of making player work to discover a critical piece of information that you want him to consume, we have surfaced and brought forth that information for him.
The next flow I looked at was the existing event over logic.
Did player make any progress after signing up?
If yes, display x reward value based on progression.
If not, show a null value.
Now a lot of my programmer friends would say, what's wrong with this logic?
Makes sense, right?
If the player did not make any progress, he would see a null reward value.
But what I would like to argue is while the logic is spot on, from a neuropsychological point of view, we are dealing with a very casual player base, a lot of teen and tween players, and when we show them a reward screen, they're expecting positive gratification.
So what did we do?
We added another step, display minimum participation reward.
Now, even if the player does not make any progress after signing up, we still give him a small participation reward.
What did we change compared to the previous flow?
We added empathy.
What this does is it makes us, the developers, look generous and shows players there is a positive incentive in taking part in the event system.
So the two key changes we achieved in our logic flows, we boosted discovery by triggering a sign-up UI at launch whenever a new event is available, and we added empathy by giving players a minimum participation reward.
The next step was, of course, to do some whiteboarding sessions, some brainstorming.
along with your game designers, producers, and all the other parties involved.
We created some rough wireframes.
Once we were happy with those, we created digital counterparts.
And after we've iterated enough on these, we created a working prototype.
So let's see, what did we change in the new flow in order to address all the issues that we saw during the heuristic diagnosis stage?
Now when the player clicks on the event icon, he's brought to this view.
You can see that each event is now its own bucket using a tabular system.
We rearrange the information hierarchy so it's easier to read from top to bottom and left to right.
And leaderboards is now a smart slide-in slide-out drawer.
What this does is, this layout allows the player to gather all the risk and reward information he needs within the very same view without switch of context and it reduces the number of drill downs from three to just one.
So the key changes we achieved in our new flow, we rearranged information hierarchy so it's easier to digest, we reduced drill downs from three to just one click, leaderboard is now a smart slide-in slide-out drawer, and we reduced cognitive load because we got rid of all the drill downs altogether.
So, we have a solution now, which looks pretty good.
The next step, as per UX methodology, is to test it.
Now you would ask, why should we test it?
We have tested it enough among ourselves, right?
I would like to highlight the mindset with which the designers used to work earlier was about design for people.
And I say I'm not the kind of designer who designs for people.
You might find that controversial, right?
After all UX is all about people.
Let me like expand on it a bit more.
When designers earlier used to say we are designing for people.
They are making all sorts of assumptions.
Yes, this is what the players will like.
Yes, that is what the players would like.
Or they might ask a few people around them, and that gave them the idea, OK, design for people, I know what they want.
But still, they're working just on assumptions.
Instead, UX as a methodology promotes for designing with people.
And that is where focus group testing and usability testing come into play.
Now normally you would go for a full-blown usability test, but since we were pressed for time, we did the next best thing, and that was a focus group testing session within the company.
Luckily, in a studio like ours, we had three different teams working on three different projects.
That meant we had a pool of players who did not know what's happening much in other teams' project.
So we had a perfect pool of players who could give us unbiased reviews.
We tested our prototype with them, we got some positive feedback, and on basis of that, this solution was greenlighted.
The next step was, of course, to work with the UI designer on this project and the front-end engineers in order to make sure justice is done to our vision and to solve any UX problems we may encounter while implementing it.
Happy to say we managed to push this update out on time with this new fix, and we were all very pleasantly surprised with what happened next.
This new update not only managed to meet the launch KPI of 45%, but within a small window of time, we saw the engagement rate go all the way from 20% to 80%, which was a humongous 300% jump compared to the previous update.
Important thing here to remember is.
without redesigning or rehauling the entire event system or writing copious amount of new code, just by applying the correct UX methodology in not only diagnosing the problem, but also designing a solution which resonated with our player base, we were able to have such a huge impact on our KPIs.
Next, there was a debrief session and we had some clear-cut takeaways.
Do not create unnecessary choice biases.
Do not overhelm the player with too much information.
Boost discovery.
If there is a critical piece of information you want players to see or interact with, do not bury it, do not make them work to discover it.
Instead, surface and bring it forth for them.
Show empathy and use reward screens to convert players.
This is interesting because after we added the minimum participation reward, we saw that a huge chunk of players who were just early signing up, but not making any progress, saw a positive incentive in taking part and started interacting with the system.
And this partly led to the huge 300% jump you saw in the previous slide.
Last but not least, leverage data.
Work very closely with other departments within the company.
Because not only will they help you gather qualitative and quantitative data to diagnose a issue, but when the time comes to make a push for the UX fix in front of the stakeholder group, they'll be there backing you up, helping you make a stronger case.
So with that, ladies and gentlemen, we've come to an end of our presentation.
I hope it was informative.
And the floor is now open for questions, I guess.
In case you have any questions, please come forward to the mic.
Hi, I'm James Berg, researcher with EA.
Great presentation, thank you.
You mentioned for this particular example, you're under some pretty severe time constraints.
So I'm wondering, what would you approach differently if you had all the time that you, well, maybe not all the time you wanted, but a realistic amount of extra time added?
What would you have done differently to approach solving the UX problems?
That's a very good question, in fact.
Yeah, so there's a contrasting methodology that you have to apply.
If I had more time, a reasonable amount of time, let's say with UX built in, what we would do is ideally we would like to get players' eyes on the prototype much earlier.
We will not say we have something, we are okay with it.
We will do a proper thorough survey.
And afterwards, once it's designed, as I mentioned, because we were pressed for time, we did a focus group testing session.
So briefly, I'll just expand on that.
Focus group testing session done with six to eight people within your company is not as informative as a usability test session.
In a usability session, you can have actual real world players, you can invite them from outside, and you can observe how they're playing the game.
What you get is a goldmine of information, which is much more reliable and much more solid to work with, rather than coming up with something just for the sake of it.
Both solutions are effective, but I would always prefer having more time beforehand.
You mentioned that you're adding this after launch, and that can be really challenging to get something in and change an existing system.
Did you have any resistance to adding things that were changing an existing system?
Was there anything you did to lubricate that process to make it easier for players to understand the change?
Could you repeat that question?
Yeah.
Was there anything that you had to do in designing the system to make it so that players who were already familiar with the old system were easily able to transition to the new system?
Yeah.
So, so again, yeah, you're right.
So what you normally do is you.
trigger something called a modular fatui, right?
And if you notice, this layout was not that far from the previous one.
It's just that we cleaned it up, we made it much easier to switch between even types, and the only biggest addition was the smart slide and slide or draw.
So for that, we utilized something called a modular fatui, which is triggered first time the players come into the tutorial.
And since it was a much easier system to interact with, it was a hit with them.
Thanks.
All right.
So guys, this looks like we don't have any more questions.
Thank you very much.
