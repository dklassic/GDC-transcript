Two years ago, the Fortnite Quest team was in crisis.
We knew Quests in Battle Royale had a very direct impact on player engagement.
When you've finished your quests, there's a feeling that you're done with the season.
Checked the boxes, wrapped it up, what game's next?
Even if players were still enjoying the game, finishing their quests was a natural jumping off point.
But despite being, oh, let me show you my slides too.
But despite being one of the larger design teams on Fortnite, we couldn't create enough quests to keep all our players busy for the whole season.
We were relying too much on cheap-to-produce quests like get five shotgun kills.
We didn't have time to reframe the system or to make better quests within the system, and we certainly didn't have time to make more quests than we were currently making.
My boss asked me to solve this crisis.
My name is Eric Carter, and I'm a Principal Technical Designer at Epic.
Though I have a background in computer science, I spend all of my time structuring content and using Unreal's designer-facing tools to help Fortnite's design team work faster and better.
Prior to working at Epic, I was a tools and source control product owner at Bungie.
So I have experience designing and leading tools teams, but I'm not a tools engineer.
I'm a game designer, and I use that context and expertise to help game design teams succeed.
As a game designer, the first thing I did when I joined the quest team was to start building quests.
If you remember the Naruto quests from chapter two, season seven, that was me.
I made those and I'm infinitely proud of being able to contribute to the legend of one of the coolest ninjas ever.
I watched a lot of Naruto to capture the right themes and tone.
I read brand documents and poured over partner guidance and IP rules.
Viz Media is very particular about how Naruto characters are depicted.
I also absorbed a lot of wisdom and nomenclature from other designers about how quests work in Fortnite.
And I worked within the design processes that Epic uses to keep our designs consistent with the rest of the game.
But I didn't write a single line of C++.
I tell you all of that just to make it clear that I'm not a programmer in disguise.
I live and work as a designer.
A rather technical one, but a designer nonetheless.
And my design content creation experience is the crux of how we solved our crisis.
As someone who was working in the middle of it, the crisis had a few very obvious causes, but one large cause stood out.
Making quests was fucking hard.
Very few people had the knowledge to do it at all.
There were hundreds of ways to break a quest and only one way to do it right.
The iteration loop from a completed idea to a quest asset to testing was literally days long.
And our workflow led to overlapping work, loss changes, and tons of unnecessary production and testing overhead.
I'm a little ashamed to admit it, but despite being the company that makes the most sophisticated game engine in the world, we were making our quests in a very impressive set of visual basic scripts running in Microsoft Excel.
This is it, actually.
This is actually the version of the spreadsheet that outputted the Nerudo quests.
This GIF won't loop while I'm talking.
This is just me tabbing through all of the required subsheets.
There wasn't any error checking here.
You just had to know what to put into each field and not make any typos.
Our quest team grew out of our systems design team.
And system designers really like Excel.
And so at some point, the spreadsheets they were using just evolved into this whole quest editor thing.
And the result still hurts me to think about a little bit.
The sheet is pretty complicated because quests are, by their nature, pretty complicated.
After five years of dailies, weeklies, seasonal narrative quests, event quests, web quests, MTX quest bundles, and Twitch quests, there's just a whole lot of configurations that are available.
This spreadsheet exported all of these configuration options to an asset that Unreal Engine could use.
And the length and complexity of that asset can give you a sense of why this is irreducible complexity.
This is the configuration for just one quest in Chapter 2, Season 7.
Only one person on the team, the marvelously knowledgeable embedded tester, Hunter Kent, knew what all of these did.
I'm deeply in his debt for his help explaining all of this nonsense.
It's important to point out four dangers in all of these quest features.
First, in some configurations, there are many features that are irrelevant.
For example, daily quests are granted by the lobby.
So the field that specifies what NPC grants the quest has no effect regardless of its value.
Second, some values like the server backend name are auto-generated and had to match a specific schema and should never be tweaked by designers.
But they still needed to be stored in the same asset file the designers were working in.
Third, some of these options were incompatible.
A daily quest can't be in a quest bundle.
A quest can't have both a reward array and a post-match reward box.
And finally, in some configurations, there may only be one correct answer among several choices.
Weekly quests must have a gameplay tag specifying their week number.
A transient quest that gets handed out must also be marked as repeatable.
Now, I've just given you a pretty conventional argument for a situation where a design or art team needs a bespoke tool for editing a specific type of content.
I'm sure many of you are familiar with this kind of proposal being placed on a tools team's roadmap and the very long wait for that tools team's availability.
Believe it or not, Tools team availability at Epic is just as rare as at your studio.
This is an aspect of the crisis that I needed to solve.
With the help of only two already overbooked Quest engineers.
So how's a single tech designer going to solve a tooling problem like this?
Remember how I told you earlier, that my design content creation experience was the crux of the solution to this crisis?
The first important takeaway I want you to get from my talk is that doing hands-on game design work actually gives a game designer a few advantages over a conventional tools team when it comes to optimizing workflows.
In my case, I knew the ins and outs of our quest tooling problem firsthand because I lived it for four months.
I didn't need to do any user studies.
I didn't need to collect feature wishlists or shadow content creators.
These problems were just my daily life and the daily lives of my neighbors.
The usual techniques that tools teams would use to collect requirements for a new quest editor were unnecessary.
If you're a member of a tools team at a game studio, I'm sure you've had the experience of listening to a designer rattle through a long list of pain points in a familiar tool, or been emailed pages of modification requests.
Communication over these points is very difficult.
It takes a lot of thought to prioritize and flesh out each desire from a designer's brain into a programmer's brain and figure out how and when to make that a reality.
Being able to skip this usually important step in tool development is the first advantage I had over a tools team.
Even after that requirements communication was finished, design teams are constantly evolving their vision of the game and iterating on the intent behind the content they're creating.
there will always be a lag communicating this evolving intent to a tools team.
And deciding how to match tools maintenance work to this evolution is one of the hardest problems in software development.
As a game designer, being completely tapped into the evolving context of where our game is headed is my second advantage over a tools team.
There is also an inescapable difference in how content creators are tasked and how a tools team is tasked.
Tools teams, by their nature, move slowly because they require approval, scheduling, and strong justification for their direction.
In every studio, there are many competing desires for tools work.
coming from every discipline.
I've even seen tools requests coming from other tools engineers.
The production process for this represents a very significant overhead.
And no matter how many Agile trainings I do, I've not found a way to make that overhead go away.
But the expectation for content creators is that by the time the game ships, they will produce a certain amount of content.
Whether it's a hundred quests a season, five new skins each milestone, two levels a month, there's no oversight, approval, or objection when a content creator spends one hour working on something that will save them two hours creating content.
VFX libraries, shared textures, reusable blueprint libraries, and kitbash sets are all examples of workflow optimizations that did not require approval or scheduling.
Being able to avoid the overhead of team scheduling is the third advantage I had over a tools team.
The unfortunate reality is that content creators are always in a state of being held back by tools development.
The more advantages we can use to decouple content creator workflows from needing tools engineering support, the more fun, engaging, beautiful, lovable game they'll be able to create.
It's for that reason that we as tools leaders need to find ways to utilize the advantages that game designers have in creating their own tools.
That's why a desire to capitalize on those advantages is the first important belief I want you to take from my talk.
If we find ways to capitalize on those advantages, our jobs will be much easier and our games will be much better.
You might be thinking, okay, that's great, Eric, but we've seen that spreadsheet quest editor that some systems designers built, and that's just part of the problem.
But I think we should understand insufficient tools, like the quest editor spreadsheet, as a product of designers that are not empowered to create their own tools.
A few clever designers scratched together the best thing they could, given the limited resources they had.
They had Excel, and so they made an editor in Excel.
Today, let's contrast that with some of the results that highly empowered designers can make in Unreal.
During my time on the Fortnite quest design team, after I made quests for four months, I switched gears to focusing primarily on creating a quest editor that addressed the most important aspects of the quest design workflow.
We knew the tools team wouldn't be able to create a quest editor from scratch fast enough to resolve our crisis in that moment.
But a friend of a friend in the tech design department, Bryce Lumpkin, told us we should take a look at Editor Utility Widgets, which turned out to be the most effective designer tools empowerment I have ever encountered.
Unreal has a pretty robust UI tool called UMG, or Unreal Motion Graphics.
Pretty much every game in Unreal uses UMG to create their in-game UI.
So it's a very robust system that many people know how to use.
It's a WYSIWYG editor, so UI designers are often building the UI themselves.
And fairly non-technical people can make really valuable contributions without support from engineers.
Behind every UMG widget, there's a fully functional blueprint graph, which allows designers to write UI behavior using the same blueprints they use to make the rest of the game.
Editor utility widgets are actually built on top of UMG, with the key difference that they aren't UI that runs in the game, they're actually UI that runs in the editor.
When I heard this, I was blown away.
I've made UI in UMG, so adoption of editor utility widgets was almost instant for me.
I needed to learn a few lessons about asset manipulation and some of the editor paradigms around CDOs and asset metadata.
But that was basically API memorization I did along the way.
With UMG, Epic has leveraged a well-developed, excellently documented, robust tool, which many people are already trained on, to create rapid, easy-to-use frameworks that designers and other non-technical people can immediately begin to use creative tools.
Anyone who can create UI in Unreal has the skills to create powerful asset editing and management tools.
That means UI designers, technical designers, indie devs, and honestly, anybody who can use Game Dev YouTube can begin making tools.
Without hiring a single tools engineer, these people can solve tools inefficiencies in their own workflows.
In three months of less than full-time work, two people went from this to this.
Our new quest editor took a quest from six pages of tightly packed properties to about two pages.
Not only was it shorter, but it's also organized in a much more user-friendly way.
Moreover, most of this space is used by convenience features that allow designers to make quests with less effort than before.
Things that the previous layout didn't do at all.
Let's dig in to how we made the quick jump into a tool that exceeded quest designers' imaginations.
Earlier we talked about four dangers that I could clearly see from my work as a content creator.
We addressed each one of those four with a solve that was fairly simple in Editor Utility Widgets.
In our new workflow, a quest designer first selects what kind of quest they're making.
A daily, weekly, store, narrative, or bespoke quest.
With that information, we instantiated a different UI with a different set of properties filtered out.
Store quests never expire.
So all the calendar and removal properties are always blank.
The store quest editor just doesn't show those properties at all.
Just getting rid of irrelevant properties like this, honestly, might have hidden half of all prep properties for every quest.
Similarly, it was easy to use a few blueprint string operations to generate the values of properties that must follow a specific schema to be correct.
Like the server backend name, which was just a combination of the release number, the quest name, and objective index.
And on the rare occasion that that schema changes, like when design creates a whole new category of quests, designed to be completely capable of updating the blueprints that generate new values across all quests.
So we can hide those properties from day-to-day work in the editor as well.
This didn't save as much work as the other areas, but boy did it prevent a lot of bugs.
It might have been a bigger gift to our server engineers than it was to our designers.
To solve the last two dangers, we needed something slightly more complex.
Let's look at a specific example.
We knew that daily quests will only ever reward a seasonal daily quest token and XP.
So we didn't want to expose any of the reward properties in the daily quest editor.
That's like five properties right there that we don't need to show.
But XP values that are rewarded are constantly being tuned.
And seasonal tokens cycle out every three months.
So we couldn't just build that straight into the auto generation that the tool does.
We needed a template system that designers could very easily modify for each release.
In our workflow, after picking the type of quest in the quest editor, you picked a quest template.
Quest designers could edit that template themselves, and the values in that template were copied over to each quest when the editor was open.
Instead of maintaining some kind of template asset, we actually used a quest itself for the templates.
A quest designer can edit the quest template directly using the exact same methods they use to edit any quest.
This also allowed for very fine-grained control.
My Naruto quests were weekly quests, but they also rewarded a special ninja event token that tracked event participation.
I just created a Naruto template by copying the weekly template and added a ninja event token to the rewards.
Then that bit of extra work was done automatically for me in every quest I created.
Quest templates also solve the incompatible configurations problem.
As long as the templates had the right set of options picked, all our resulting quests had them selected as well.
And quest designers didn't need to worry about which needed to be set.
When the quest editors had more or less settled into their final form, another quest designer, Greg Metzler, took a visual design pass on them.
The fruit of his work is obvious in readability and general ease of use.
Greg has a lot of experience as a UI designer in Unreal, so he was able to make all of his changes directly in the tool and check them in the same day because of his familiarity with UMG.
It didn't require mockups or translation to XAML.
He just put his existing skills to use between branch locks.
And this amazing improvement came about with no impact on our dev schedule.
The second important belief I want you to take away from my talk is that tooling frameworks that rapidly create tools using familiar content systems, which are already maintained by the gameplay and engine teams, can solve big problems for small costs.
This was not the end of our work either.
The Quest editors were our flagship tools, but we created a bunch of messy, hacky, smaller tools really quickly to solve lower value problems.
Bulk importers, seasonal update tools, specialized string replacement, and migration tools came from start to finish in a single day and saved a few days of work.
These small, ugly tools bred more designer-created tools.
One of our quest designers, Raf Koonin, made an entirely new daily quest bulk updater on his own by copy-pasting an existing bulk updater tool that I had authored.
And today, other people are using his quick fix and thinking of making their own tools for other problems.
These tools are cheap, require almost no maintenance because of their reliance on game systems, and pay for themselves almost every time they're used.
At this point in my talk, I was going to say, there are probably low-cost editor utility widgets solving small problems at Epic that no tools engine even knows about.
But after my talk was written, somebody heard about a problem I was working on, and they forwarded me an editor utility widget.
And they said I could quickly copy and modify this into a tool that addressed my problem.
When I saw it, it turned out to be a modification of a tool that I had built months prior.
It was like tools karma coming back around to help me.
All right, I've been talking for about 20 minutes, so it's time to go on a quest.
I want you to think about a problem at your studios that wastes content creator time, but is probably small enough that it will never get on a tools engineer's plate to solve.
If you're an engineer, find someone who has one of these tiny problems and have them describe it to you.
You have about five minutes to do this.
You can talk to each other.
Yeah, okay, all right, quest complete.
The point of my talk is not about quest designers or any kind of designer going off and building tools on their own.
The point of my talk is about engineers empowering designers to build great tools with lightweight support.
Throughout the Quest editor process, I had a lot of empowerment from folks in other disciplines in order to make these improvements happen.
They are great examples of how a studio can empower content creators to build their own tools.
Chief among them was the support that I got from Jay Nakai, a generalist programmer on the Quest team.
As I came to understand the complexity of Quest setup, Jay cleaned it up at the source and made sure that the editor utility widgets had access to the native types that Quest used in their definitions.
I also had endless questions defining the space of what was possible, what was valid, and what half of these things even did.
Beyond Quest systems, Jay empowered me with improved editor utility widget filtering and drove many of the improvements to the underlying editor utility tech that's been available to the public since UE 5.1.
Because these tools are at their core UMG widgets, they naturally have access to the robust asset ecosystem that underlies all Unreal games.
We easily used Quest assets as templates for other Quest assets, and those templates never got out of date or required their own upkeep.
But we also leveraged other data types that designers were familiar with to help them maintain their own tools' features.
You might have noticed these buttons that allow quest designers to easily fill in complex tag sets.
These tag sets evolve as fast as Fortnite does, and it's the designers themselves who are making the decisions about how they should change and when.
These buttons are actually populated by a standard Unreal data table.
Designers are already familiar with working with these data tables, and each row of the table becomes its own button.
Quest designers can add their own buttons or update existing buttons just by editing that table.
Documentation exists directly within the tool on how to do this, and designers can never leave the editor they're working in to make these instantaneous tool updates.
Their changes can be checked in via their normal Perforce workflow, and they become the new canonical functionality instantly.
Quest designers like Errol Hanham and Kyle Phillips make valuable contributions without ever changing an editor utility widget by updating and maintaining these data assets.
Earlier, I mentioned Greg's awesome contribution to visual design as well.
Artists and visual designers will surprise you with the ways they can support these efforts when they're excited about them and realize how easily they can contribute.
Two of our UI engineers also made very significant improvements once the editors were stood up.
Marshall Beachy used his deep familiarity with UMG design patterns to optimize the sustainability and performance of our editor.
This was a larger engineering investment that was easy to justify once the Quest editor had become a core part of designer workflows and proved that it was going to be an enduring part of our process.
Vlad Golovan made many of his own improvements and extended the underlying Quest technologies with the editor in mind.
One example of that is the Quest map marker custom widget that he created.
Adding map markers, tests, and specific objectives on those Quests has a lot of irreducible complexity in the data.
Vlad used Slate and C++ to create a custom widget that essentially functions as a wizard to guide designers through the available choices.
The custom widget can't be edited by designers, but it makes up for that by being highly specialized and efficient at this particular task.
Our native map marker code has evolved over time, and the native widget has been able to hide those changes from designers, keeping their process the same.
Vlad also added better support for native data type usability, so those data types function better everywhere they exist, including in editor utility widgets.
One great example of that is how we expanded copy-paste for tag containers, so you can copy just a single tag out of a container instead of copying the entire contents of that container.
He also did a much more complex copy and paste improvement, which allows designers to copy an entire quest event from out of our native quest debugger and paste directly into the quest editor.
What this meant is designers are essentially copy pasting an event out of Fortnite into our authoring tools to create complex quests.
All of these contributions empowered a small, efficient and focused team to nail a fantastic tool and immediately pay dividends to content creators.
Our quest quality went up and the number of quests we could produce with the same team increased.
We also subjectively improved the quality of life for our designers.
Improving these tools and offloading some of the maintenance to quest designers also freed our quest engineers to focus more on technology and gameplay features.
Now we're using a similar approach for tooling in areas adjacent to quest design, like battle pass creation and blueprint reviews.
I think I copy pasted my notes some weird way, so I'm trying to get caught up.
It's the slides that are wrong.
And the results loudly announce the value of these methods.
We dramatically increased our quest output numerically, drove quests to be one of the most praised aspects of Fortnite, and were able to refocus our design energy on creating new, deluxe native content.
deluxe narrative content, because we had time to invent stronger and more unique approaches to motivating and rewarding players.
Our ability to produce quests has gone up so much that we've actually been able to create so many quests that we experimented with expiring quests on a weekly instead of seasonal basis.
Strategically, This space to evolve and experiment has helped us recognize the value of quests and the right way to deploy them in service to Epic's goal of building the metaverse.
Today, I'm more excited than ever about the future of Fortnite.
The third important belief I want you to take away from my talk is that by empowering designers with effective tool building frameworks, we can free our game teams to focus on new gameplay, better outcomes, and core technologies.
That includes more complex tool initiatives that can't be built in those frameworks.
The bright future of quests in Fortnite that I just described is a strong contrast to the crisis we were in two years ago.
From my perspective, that contrast is in large part because of the principles and takeaways that I've been talking to you about today.
So let's recap.
Because hopefully some of these principles can cause a similar degree of change on your teams.
The first important takeaway is that doing hands-on game design work actually gives content creators a few advantages over a conventional tools team when it comes to optimizing workflows.
Hands-on content creators, and game designers in particular, intuitively understand their own requirements.
They have much deeper insight into the future and intent behind their designs, and they have open scheduling.
Tools teams should empower game designers to use those advantages to create, maintain, and adapt their own tools.
To empower them, we should invest in robust, designer-focused frameworks like editor utility widgets.
And think about those aspects of the game editor as first-class citizens in our game's tooling ecosystem.
The second important belief I want you to take away from my talk is that tooling frameworks that are powered by game content types and use familiar game systems have small costs but are still capable of solving big or small problems.
Hopefully, by going into some of the expedient choices the Fortnite team made to leverage existing assets in the creation of asset editing tools, helps you to see some of the ways that these close-to-the-content tooling frameworks can help your team make the same efficiency gains.
The third important takeaway is that by empowering designers with effective tool building frameworks, we can free our engineering teams from overhead and maintenance to end up with superior tech solutions instead.
So here are a few practical action items.
If you use Unreal, invest in training your tech designers, tech artists, and tools teams on how to build and support editor utility widgets.
Create tools that rely on familiar game asset types to dynamically and maintenance-free populate tools features, so content creators can expand the tool with their growing needs.
And finally, whether or not you're using Unreal, prioritize developing and supporting frameworks that encourage content creators to make their own tools and help them adopt maintenance problems on their own.
Thank you so much for attending my talk.
This is my first time speaking at GDC, so please leave a review in the survey that they send out to you.
That's how they decide whether to invite me back.
And next we have some time for Q&A, so feel free to come up to either one of the microphones when you're ready.
Someone asked me a question earlier, how are these checked?
Do they have source control?
Where do these things go?
Editor utility widgets are actually an asset in Unreal.
Just like a UMG widget that is open in the Editor, you can edit them and run them in real-time and check them into Perforce.
Let's go here on the left.
Hi, Eric.
Thank you for your talk.
It's really great to hear how, you know, the teams at Fortnite and at Epic are really, they seem very interdisciplinary, and there's a lot of, you talked a lot about mentioning your coworkers and how you've worked together with them.
So, that's just really good to hear, just a comment.
I would kind of like to pass your quest to us back on you and kind of hear a little bit about what's perhaps a process or another tool or something on your team that seems out of reach that, you know, you would love to change if it were possible.
One thing that the question was, what is out of reach for our team?
A lot of it for me is just sort of scheduling stuff.
Like, I mean, I talked about how tools teams are limited in their scheduling, but that's reality for everybody.
So there's a NPC creation problem right now where it just takes a lot of work to make NPCs.
And I would love to build a tool that just spits out all the right data assets and like you check a few boxes, but it's just something I haven't gotten around to yet.
Hey, so I really love the workflow and the process that you've described in this talk and I wondered if there's been any interest from any other game teams within Epic and have you thought much about can you transfer this between projects?
Yeah, so almost all of Epic is working in the Fortnite project.
If you're not working on, like, an engine or MetaHumans, you're in Fortnite.
So, the tools we create just seem to kind of seep around to different people.
I mentioned that tool that came back around to me.
That was on the AI team.
So, like, I didn't even know that they were working on that.
It's just one of my customers had taken that tool and said, can you make something like this?
And then they just started like pulling widgets out and building their own thing.
So it definitely kind of flows naturally to other disciplines.
But one of the strange things about Editor Utility Widgets is they've been around since I think 2018, but almost nobody knows what they exist or why.
And so they haven't been adopted even at Epic very widely.
And that was one of the reasons I wanted to do this talk was just to say like, hey, there's an amazing thing that you can do.
All you have to do is just start using it.
Let's go on the left.
Thank you.
Yeah, I got a real important question.
Is Jay Nakai here?
Where's Jay?
Jay is in North Carolina.
Sorry.
He was going to be really embarrassed when I called him out to answer questions, so he just didn't come to the conference.
All right, real question.
How often did you guys run into problems where the editor functionality that you had wasn't enough to do what you wanted?
Often.
Jay was actually a big... What's that?
Oh yeah, the question was, how many times did we end up with something Editor Utility Widgets couldn't do?
And my answer is often.
There were a lot of things where, like, so native data assets were a big thing for us, where, like, Blueprints just didn't have access to, like, a struct that I needed to be able to set.
And the cool thing was I would ask Jay, like, hey, I just need this struct, and he, like, adds some metadata to it and make it read-only, and it was done.
So there was a lot of times when Jay and I were on a Zoom call for, like, four hours in a row, and I'm building stuff in the editor utility widget and just, like, sending requests to him.
immediately and then he's checking in and I'm syncing and we're ready to go and One of the great things is like you can edit the editor utility widget like instantly.
It's like playing a blueprint It's like play an editor And so I would just move to something else and keep working and he checks in these native changes which for him you know, he's got to get through our like check-in gauntlet and make sure it compiles and I don't have to wait for any of that every time I edit, but those native changes do go through that slower process.
So that's why it's really important to have people supporting this effort.
Right now, and I think this is true of any tech stack at any point in time, it's not possible to just go do this on your own for a lot of stuff.
You do need these quick five-minute changes, add a meta tag, make it read-only, something like that.
Yeah, question.
For some of your bigger tools, like Quest Designer, are you all putting those in their own plugins, or does that all just sort of live in a folder structure in your project?
Man, I wish I had better advice about plugins.
The question was, do they live in plugins?
Where do these things go?
Editor utility widgets as assets can kind of go anywhere, and we are figuring that out on Fortnite as part of a larger project.
What is our strategy for plugins in Unreal?
I think the answer is just use the architectural experience and wisdom you have to decide where these things go.
I am starting to think a lot about how can I organize these in a way that they do not cook or ship, and we can make smart choices around that.
But it is still very much a thing that I am figuring out.
Plugins in Unreal are evolving every day.
Hi, since you're using data assets to drive your quest system, did you ever consider taking any sort of approach where you would, at runtime, like reload your data assets instead of having to come out of Pi and going back in, sort of to speed your workflow up?
Yeah, so the question was, have we considered using these data assets at runtime to kind of update our quests?
And that's actually one of the things that I'm most excited about to be working on now is essentially authoring quests.
We have a quest debugger, which essentially just says every single gameplay message that could be a quest objective just spews there constantly.
And then you can filter that.
And the model of quest authoring that I want to move towards is actually quest designers playing Fortnite and doing the thing they want players to do and then just grabbing that event and pasting in the editor and being done.
And so we're actually like authoring those quests essentially at runtime.
And I think the next step after that is putting those kind of runtime capabilities in players' hands in creative mode so they can author quests like running Fortnite without any of the editor tools.
Hi there.
I'm a programmer who loves the idea of designers making their own tools.
But how do you prevent them from, you know, making the architectural mistakes, you know, programmers make early on?
A lot of engineers ask me, like, well, I want better architectural skills in the tools from the beginning.
And I think that A really smart person talked to me about how designers making essentially leaf tools, is what he called it, is fine.
They can make messes.
It doesn't really matter.
But trunk tools, things that are really core to how tools in our game are built, are much better in the hands of people who are great programmers, people who are great at architecture.
and some of the contributions, so we actually went through that transition where I had made a lot of Editor Utility Widgets and I'm kind of a special case because I studied software architecture in college but you can build a messy, ugly tool in Editor Utility Widgets and when it becomes an important tool like the Quest Editor did You go to somebody like Marshall Beachy and you say, we have a mess that works really well.
Can you just make this not a mess?
Some of our tools, actually, the Blueprint review tool was in Editor Utility Widgets.
And then pretty much the day I released it, the engine team was like, that's really cool.
We like that.
We're going to start building it in Slate.
I was like, I feel bad because I sort of wasted all my work.
But at the other end of the spectrum, that was like the fastest accepted prototype that I have ever done.
That actually ships in Unreal Engine 5.2, which is in preview right now, so you can see that tool.
It allows you to look at a Swarm changelist, like a Swarm review or a Perforce changelist, paste that into the Asset tool, and then you get a list of all of the changes in that CL, and you can diff them right there.
which was a huge speed up for us, and I don't know, maybe made a mess of the editor utility widget, but then a brilliant tools engineer made it into a slate widget.
So I think the short answer is like, some editor utility widgets are better authored by engineers, people who are great at architecture and programming, but you shouldn't let that stop you because one of the strengths of doing it in this little walled garden of Editor Utility Widgets is you're never going to spill that mess out somewhere else.
Hi, I work with Bryce Lumpkin, so I'm glad you mentioned him.
And I'm also talking tomorrow about Editor Utility Widgets just across the hall.
So I'd like to ask, what do you think are the biggest stumbling blocks for people coming new to Editor Utility Widgets?
Oh, what are the biggest stumbling blocks to people coming new to editor utility widgets?
I think, so one of the things that took me a really long time to learn was like, how to go from a class to the asset metadata and then to, so there's a concept in Unreal, which is a CDO, a class default object.
And so you have like an asset living on disk and that, talk understanding how the asset system operates on assets because you've never done any of that in blueprints that you're familiar with or UI that you're familiar with.
And so for me, like one of the tricks is the Python documentation is like auto-generated.
And so you can go to Unreal's Python documentation and see every single function that the asset system has with really good descriptions.
And then you, take that knowledge to the blueprint search thing and you just blah, blah, blah, blah.
And you don't really know, like it's ugly and hard to lay out there.
But if you start in Python, move to there, then you can have a much easier time understanding how asset manipulation works in Unreal.
Which, like I said, if you're a designer, you've never even looked at before.
I wanted to go back to the tools karma and the widget from the AI team that seems like a potential problem space of like with individual teams making their own tools that duplication and reinventing the wheel.
Are you doing anything to solve around that?
Is it a problem that tools are duplicated across other teams?
I think mostly no.
So Epic has a huge, there's a huge team on Fortnite, I don't know, more than a thousand people.
And so we do have people like me and Bryce who are constantly building like underlying widget tools.
So Bryce built a really great file selector.
So when you need a path, you can say like, I want a content relative path or an absolute path or a relative path.
And it's very important to maintain those as like, when I said it's important to see these tools as first-class citizens of your asset ecosystem, that's sort of what it means.
Like you need a good file selector that meets those needs in your project.
And if you're not doing that kind of stuff, yeah, you do end up with 500 different file selectors and they all suck but Replicating an individual tool across multiple teams.
I think is fine.
Like it's sort of messy but develop Like I don't know you made Month later, so Matter that much Solves that problem having good staff like tech designers and tech artists Resolves that quickly because they recognize the areas that are being used a lot We have a editor utility widget scripting channel in slack and that's sort of a nexus of where a lot of those decisions are being made Hi, I'm wondering how much the workload is for the designer to maintain the tool after it's created.
So, for example, when you add new types of requests, maybe you need to update, and whether that would take too much of the designer's time, as opposed to putting them among the content creation, which they're probably more accustomed to.
Yeah, that's a great question.
They're asking, like, what is the maintenance of one of these tools?
And I think that it's hard to describe that in a talk, but it is unbelievably low because so much of what powers these tools are gameplay systems that are already being maintained by like the gameplay engineers.
And so the additional burden of like, how did I keep this tool working is like, oh, we needed a new button or we needed to move this stuff around.
And it's much more about just like, It's sort of the initial cost of authoring it.
Well, we have a new need for that tool, so we authored that again.
There's very little upkeep on these tools because they are so close to systems that are already working in the engine.
Quite a few of the things you mentioned, the downsides there, is something you could also solve with asset validation.
And I think you can do that in Blueprints, and it stops you from saving the assets if there's a conflict, like mutually exclusive properties and stuff.
Did you think about using asset validation instead, or start with that and then move on to editor utility widgets afterwards?
Or what's your thoughts about using that?
Yeah, so about asset validation in like pre-save asset validation, we have a really robust content validation system on Fortnite that does a whole lot of error checking beyond just like, is this asset in a valid state?
We make sure that we can export it to our online servers.
We make sure that it's not going to break the build later.
And we did a lot of that hand in hand as we were figuring out what are the complexities of the Quest system and what are the invalid states.
we were also adding those to our content check scripts.
We have two steps of that.
One is like at save time where it's like, hey, this is really broken, you shouldn't even save it.
And then also at check-in time where it's like, hey, you know, maybe this was valid alone, but when we start looking at all the rest of the content, it doesn't work, like you're missing references or something.
And so I think that was a really important step.
The problem with that comes in with like, you know technically it is valid for content to be transient but not repeatable like we could imagine a time where that could happen so we don't want to like prevent you from saving it but like you you dig in put your fingers in the mud and set it that way if that's what you actually want so we don't offer that in the editor One important part of this whole process was like, you can still go in and edit that huge list of quest assets.
And sometimes in our like prototyping phase, people will just go do that and it's fine and we'll update the editors later.
But we didn't want to like rule out those valid but very uncommon cases with the content validation.
But that was a big important part of our strategy in general.
All right, so that's the last questions.
I'm going to go over there.
If you want to talk and have more of a personal conversation, you just turn right, go to the end of the hall.
I'm going to hang out there.
Again, thank you very much for coming to my talk.
Please fill out the surveys.
