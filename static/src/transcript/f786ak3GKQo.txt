And welcome to this talk on the portal locomotion of budget cuts.
I am Joakim Holmier.
I'm the co-founder and tech artist at Neat Corporation.
So a little short background.
I've been doing mostly programming and tech artist stuff in Stockholm, Sweden.
So I did some work for Avalanche Studios.
I did a Unity and C Sharp teaching course at Future Games, which is a game development school.
I've been doing some work for Quixel on their GPU baking stuff.
And I've also created Shader Forge, a node-based shader editor for Unity.
But nowadays, I spend pretty much all of my time at Neat Corporation developing Budget Cuts.
So Budget Cuts is a first-person stealth VR game.
And it's releasing soon.
It's coming to Steam and Oculus O on May 16, 2018.
Thank you.
I thought I'd just clear that out before people start asking.
All right, so this talk, I'm going to talk about the portal locomotion in our game.
It's mostly going to be about the design, and it's going to be about the tech, and a little bit about the art.
So I thought I'd first show a video of it in action, if it works.
Let's see.
There we go.
Sort of.
OK, it's kind of slow, so I guess I'll explain it slowly.
Okay, so in this case you can see that the player is standing in a blue room and you're holding a device called a translocator.
So you then fire a beacon out of this translocator and then once it lands in the other room, you get a portal in your gun.
So I think it's my internet connection that's really shitty.
I'm sorry about that.
Okay.
Cool Mech 2.
So the portal then opens up above your translocator gun.
So you can then look through into the other room.
So you can see that the other room is the red room, and that's inside the portal.
And the blue room is whatever you were standing before.
And you then move into the room by pressing a button, and then that portal then wraps around you, and you are transported to that location.
I'm really sorry about the video, by the way.
All right, so let's talk about the design.
So as with most VR games, you kind of have to start with motion sickness, because motion sickness is such a big issue in VR.
Like if you try to port a non-VR game into VR, you're going to get motion sick in pretty much all cases.
So with all of these limitations with how you can move the camera, you have to work around that as early as possible.
So we just said no, we don't want to have any motion sickness.
I'm not going to go into details on why we decided that.
It seems like that's kind of redundant.
Like that talk should have happened two years ago.
All right, so I'm not going to talk about motion sickness.
And I'm just going to talk about how we started developing this locomotion system.
So we started with a point and click teleportation.
And that's your laser pointer type of locomotion, where you have your tool handle, and then you point somewhere, and then you press a button, and you instantly teleport there.
So this system had a bunch of problems that we wanted to solve.
So I'm just going to run through all of the issues that we had with this system.
There's no speed limits at which you can traverse the world.
So you can just keep tapping the button, and you'll just instantly teleport wherever you're pointing.
And this is a problem both in terms of gameplay, because it's a stealth game, and the time it takes to move to a certain location is really important.
So another problem with this is that if you move in small enough increments, it can start to resemble continuous motion.
And that's also a problem, because then that's going to cause motion sickness as well.
There's no distance limits.
So if you just point it at a mountain somewhere far away, you can just teleport there, because it's the laser pointer, right?
So you just go there immediately, and then you can go back.
And this is also a problem in terms of gameplay.
So both of these things.
We wanted to solve them in a natural way.
So in terms of the speed limits, we could add a cool down for every teleportation.
But that's really shitty for the player.
It's like, oh, I just have to wait for one second or whatever for every teleportation.
And it just feels unnatural and tacked on.
It's kind of unfair.
The same goes for the distance limit.
Like, we could tack on some maximum radius for how far you can teleport.
But again, that's kind of unfair to the player.
Because it's like, why is this limit here?
Another problem is that it's unpredictable.
It's hard to tell where your head and body is going to end up once you actually teleport.
So let's say you want to teleport to a doorway, and you want to make sure that you don't peek through, like in front of the doorway, just in case there are enemies there.
So where's your head going to end up if you just point the laser pointer there?
And are you moving your tracking space origin, or are you moving your player head?
And it's kind of difficult to predict where you're going to end up.
So that was really crucial in our game, which is a stealth game.
So we need to solve that as well.
And the transition when teleporting is kind of harsh.
So if you make a graph of location A, location B, over time, it's just this really harsh transition in the center, which just snaps over there.
And it feels shitty.
It just blinks in your face.
And it's kind of just not very nice at all.
These were the goals.
We wanted to solve all of these problems.
So we didn't want to have any motion sickness.
We wanted to have a natural speed limit.
We wanted a natural distance limit.
We want to have accurate positioning of the head.
We also wanted to have a smooth transition once you go from location A to location B.
So the Translocator device from the Unreal Tournament series was probably our biggest source of inspiration for this, given that it's using the same name, Translocator.
The Translocator in Unreal Tournament is a device you hold in your hand.
You then press the button to fire a small beacon that flies out.
And once it lands, you can then press the alternate fire to teleport to wherever the beacon was.
So the other source of inspiration was the portals from the game Portal.
So the portals in Portal are quite intuitive.
It just opens up this portal, and it's a window into a new location.
And it's really clear where you're going to end up once you look through them.
So combining these two was basically what led to our locomotion system.
So what did the translocator solve?
So since the translocator fires her projectile, it's going to land after a while, because it's a physical object, so it's affected by gravity.
It's going to land somewhere.
It has a set amount of speed, so there's no way you can teleport faster than the launch speed of the translocator beacon.
So this pretty much solved the speed limit problem.
It solves the distance limit problem.
And it's also doing that in a natural way, because you know how throwing arcs work.
You know how physical objects fly through space.
So you're OK as a player waiting for that to finish.
So we've pretty much solved the first three problems by having this translocator type of locomotion.
So as for the accurate positioning of smooth transition, this is where we start to take inspiration from Portal.
So the transition that's, so going back to the instant, instantaneous transition that's kind of harsh and just popping in your face, we wanted to improve that.
So we had some ideas on how to do that.
So one idea was to crossfade, to show both worlds and just transparently fade out one over the other, which is really shitty, don't do that.
It's just showing two worlds at the same time.
It's really hard on the GPU to render all of these things at the same time, it's just bad, so don't do that.
You can also fade in and out to a solid color.
This is something that I guess most VR games do these days.
You flash to a solid color, and then you flash back.
And it works OK.
And you can put some sounds in there that kind of gives a narrative of what's happening.
So you can put a footstep sound while it's fully faded to the solid color.
And it gives kind of a narrative of what the player's doing during that transition.
But we felt that this wasn't good enough for our game.
We felt that it's kind of mean to the player to just fade out the entire screen.
It still feels kind of tacked on.
It's like, oh, you're just doing this because it's VR.
OK.
All right.
So we decided to go with a portal.
So having a portal gives the player the opportunity to look at both locations at the same time without them occupying the same space in their view.
So for the CrossFade example, you can see both places, but it's really hard to focus on it because they're overlapping and it's difficult. But with a portal, you can actually see where you're going to end up.
You have this window of looking into the new place.
So then it makes it much more predictable, which is good for our stealth game.
So here's a bit of an overview of how the transition works.
So in the first screenshot, you can see that the portal's open above the translocator.
And the player wants to move into this red room that has a small coffee table.
And once you want to go there, you press the buttons to translocate.
And the portal then wraps around you.
You can see that it expands.
And once it's fully enveloped the player, they're standing at a new location.
And this is a completely smooth experience.
So just to give a little bit of a technical breakdown of how the system is set up.
So on the left, you have the little cross is the origin of the play space.
So we're doing room scale tracked VR.
So that's the origin of the play space.
And the thing above it is the eyes of the player or the cameras.
And the things on the right, that's the destination you want to go to.
So let's say these are objects you want to move to.
So you then fire the translocator beacon.
It lands near the objects.
We then create another set of cameras because we're going to have to render the portal as well.
So this one matches your head at all times.
So when you move your head to the sides, the portal cameras are going to move in the same way.
So we then open the portal in front of the player.
And this corresponds to this location at the portal or in the destination.
So then you can look through the portal.
And once you do that, you can see the new objects that you're about to go to.
And in this way, you get a really predictable way of seeing.
where you're going to end up, how it's going to look.
And this one is fully dynamic as well.
So if you turn around, the portal is going to follow along your weapon as well.
So you can always see where you're going to end up.
So then once you press the buttons to teleport, we expand the portal around a sphere that's around the head of the player.
The sphere is like, I think we used like a one meter radius.
And then the portal just expands around that sphere.
And then it fully envelops the player.
And then they're standing at the new location.
So once you press, it expands.
And then you're at the new location.
So this system was super smooth.
We haven't had any locomotion.
We haven't had any motion sickness from this at all.
It's been working really well.
So this was a nice way of contextualizing the movement system in the game as well, because our translocator device has a story behind it.
All right.
So that pretty much solved all of the goals in terms of locomotion.
But we also had some design issues still.
So let's say.
Let's say the player is looking north.
So this is a top-down view.
The player is looking north.
They're holding the translocator device in front of them.
And they open up the portal.
And then you press the buttons to teleport to the new location.
So the portal starts expanding in front of them.
Now, we naively thought that, OK, so as soon as the portal has expanded and filled your entire field of view, we can then move the player object to the new location and just close the portal, and everything's done.
The problem, though, is that the player can still turn around.
So if the player starts turning.
then the portal edge is going to be in front of them.
So we kind of have to keep expanding the portal across the entire sphere around the player head.
So we had to do this full envelope of the player, which had some issues.
So let's say you're looking forward.
You have the portal in front of you.
You press the buttons to teleport.
It then starts to expand.
And once it reaches this point, you don't see anything happening.
Your entire field of view is the destination that you're going to.
But the portal hasn't wrapped yet.
So.
you still have this time here where you don't see anything happening, but you're still waiting for the portal to finish.
So it was kind of annoying to have to wait for that.
So conversely, if you're looking south and you're holding the translocator to the north and you start translocating, then the first half of the translocation is going to be useless because nothing's happening.
You just heard the audio for teleporting, but nothing happens until the last 75% of the wrapping.
So this was something we wanted to solve, because we wanted to have a consistent teleportation time.
And we didn't want to have any sort of weird wrapping where the portal comes in from your periphery, and it squeezes into a small hole, and it just looked odd.
All right, so the solution to this is a word that I've always wanted to use in a professional setting.
It's slurp.
So that's short for spherical linear interpolation.
So on the left, you have lerp, which is linear.
And on the right, you have slurp, which is spherical.
So it's basically interpolation between two sets of data points.
In this case, it's two vectors.
So if you want to interpolate between the vertical vector and the horizontal one by 25% and 50%, you can see that the right one is spherical.
So that's what we're doing with the direction towards the translocator and the player view direction.
So as you can see here, that's the translocator direction, and we have the view direction there.
So what we do is essentially, so if we have this case where the player is looking southeast, and they have the portal to the north, and they start to translocate, they press the buttons.
Then we pivot the portal around the player head to rotate in front of them.
So while it's expanding, it's simultaneously slurping towards the field of view of the player.
So then it just fully involves their field of view.
It's really predictable, and it works really well.
So this solved the problem of holding the translocator behind them and then press the button.
It just kind of gives you this side swipe as it covers your field of view, and it works really well.
So that allows us to give a consistent time to move in every step.
So then we also asked ourselves, what is the portal?
Like, what's the physical nature of the portal, and how do people interact with it?
So this is something that's quite important because the player gets certain expectations of how they can use it.
So for instance, can you reach through the portal?
Can you grab objects if you do that?
Can you throw objects through the portal?
So if you open the portal behind an enemy and you're holding a knife, can you throw the knife through the portal at the enemy?
Should that work?
Or can you put your head through the portal if you move it really close to your face?
So these were questions we had to solve somehow.
Contrary to the portal in the game portal, our portal is not physical at all.
It's only visual.
So photons only.
Nothing else can go through this portal until you actually translocate and press the buttons, I guess.
And this worked pretty well in communicating how things work.
And it also allowed us to save time in not implementing throwing physics objects through the portal, because that's a whole can of worms.
So let's say the player is standing in this blue room, and they teleport to a pair of scissors that's laying on a shelf in a red room.
So if you want to grab that object, you use your grabber, which is the tool you're using to pick stuff up.
And if you move that into the portal, you can see that it kind of gets this hologram effect.
So that's one way that we communicate to the player that this is a preview of where you're going to end up.
You're not actually standing there.
Your controllers are not actually at the new location.
So this was a good way of communicating to the player that, no, you can't pick this up.
And it actually worked well.
We used to have issues with this before when the controllers looked like the physical controllers on the other side of the portal as well.
But in this case, it worked well.
So once you press the buttons to translocate and the portal starts expanding around you, we immediately pop the controllers to the physical versions of them.
So it's no longer holograms.
And you can immediately start to interact with it.
And this is something we actually added later.
So.
The first iteration of the portal, we didn't move the physical player objects until the portal was done wrapping around you.
And we had a lot of issues with players.
Like, let's say you're holding a knife, and you want to throw that at a robot that's standing somewhere.
You open up the portal, and then you want to press the buttons to translocate it, and then immediately throw the knife.
But the problem with this is that if the translocation of your physical body doesn't happen until the portal is done, if you throw the knife while it's wrapping around you, it's going to.
be thrown from the old location rather than the new location.
So we had a lot of people losing their knives.
It seemed like they were just disappearing.
So what we do is we immediately move the player on the first frame you press to translocate, and then the rest is just a visual effect.
So in this case, you press the buttons to translocate, and you could just pick up the scissors, and you're done.
So what about the enemies in our game?
Can they see the portal?
Can they see the translocator?
Like, how do they interact with it?
So this is our translocator beacon.
So should they be able to see that one or not?
And in the demo we released two years ago, we made sure that they couldn't see the beacon at all, because we felt that the game became too hard.
But we later realized that once you get used to the robots not seeing the translocator beacon, the game felt like it became a bit too easy.
You can just move around anywhere, and you could just do whatever you wanted, and there was no consequence.
And the threat of the robots kind of disappeared.
So we did some experimenting with this.
We tried to kind of make the beacon into a character, into yourself in a way, like an extension of you.
So if you wanted to move somewhere, let's say you want to move past this guard, then if you don't want to be spotted, maybe you have to move around the guard, like you have to fire it over the doorway.
So this was something that we experimented with, but it ended up not being fun.
Because in stealth games, when you move around continuously, you can still look around you.
You can still see who can see you.
But if we tried to emulate a character in something that you can't see from, it became kind of... it just didn't work well.
You would fire the translocator down a hallway and like five robots saw the beacon and you had no idea from where they saw them.
And it just became chaotic and shitty.
Yeah, we ended up scrapping that idea.
So they can't see the translocator beacon anymore.
So what about the portal?
Can they see the portal?
How should they react if they see it?
And again, this is something that was invisible in the demo.
But we felt that, again, it kind of removed the threat of the enemies.
Because you could just look inside a room.
You can look around.
And the enemies would not react to the portal at all.
So what we tried for a while was to make the enemies shoot the portal if they see it.
So you fire the beacon into a room, the portal opens up, and if there's a guard there, they're going to see the portal and fire at it, which closes the portal, and then they would start looking for you.
The problem with this was basically the same as with the translocator beacon.
It just became chaotic.
It wasn't really the fun type of chaotic either.
It was just the unpredictable type of chaotic.
So we ended up halfway scrapping that idea of making them see the portal.
So what we did instead was that they can't see the portal itself.
but they can see you through the portal.
So if you're looking through the portal in a room and you're looking at a robot, they can see you through the portal.
And then they would react.
And then they fire at the portal to close the portal.
So this kind of kept the threat of the guards there because they react to the portal, but only when you see the guards.
So that kind of removed the unpredictability factor and made it much more interesting and fun.
So in this case, you get all the audio cues of a guard spotting you.
And then you get this innate reaction that you just want to close the portal and hide, which is really good.
That worked well for us.
All right, so a little bit about the tech.
So we kind of had two iterations of the portal system.
So the old one was the one we had in the demo two years ago.
And then we have a new iteration that's much faster.
So this is the old version, just to go through the two iterations we had.
So in the old version, we rendered the portal cameras.
So when we render the cameras of the portal, that's two cameras, one per eye.
So we render that to a render target, and then we have a portal mesh in front of you.
That's, again, the one meter distance sphere where we cut out using a shader.
And then we render that render target with a shader on that portal.
And then we render the eye cameras, which is everything your eyes can see, and then the portal mesh in front of it.
And then we added all of the effects.
The problem with this, though, is that this is really heavy for the graphics card.
So if you're like, OK, I'm going to render the left eye of the portal, and I'm going to render the right eye of the portal, and I'm going to render the left eye of the player and the right eye of the player.
And it becomes quite a lot after a while.
It's not very performant.
And then you're like, OK, let's add some sort of post effects here.
I want to have tone mapping, and I want to have color correction.
And it's just super heavy.
So we had to optimize this somehow.
So it's really heavy, both in processing power as well as in memory, because we had to have a full screen render target as well.
So our solution to this was to not use a render target at all.
So the final version that we're using right now, we first rendered the portal, which is the black disk you can see there.
And that one writes to the Z-buffer so that everything behind it gets rejected.
So it only renders everything around the portal.
So it renders all the opaque geometry for the eye cameras.
So then we render the transparent geometry to add all the portal effects and whatnot.
Then we fill the z-buffer full screen, and then we punch a hole in the z-buffer at the portal.
So what we then can do is we just render the portal cameras after this.
And everything around the portal will be z-rejected early, so it will only render inside the portal.
So then we render the opaque geometry of the portal cameras, and then the transparent geometry.
And that gives us the full effect of the portal.
And this was much, much more performance than what we had before.
And we didn't have to do any render target hacks now.
So this is kind of an overview of that system.
All right, so let's talk a little bit about the art as well.
So this is a screenshot from the old version.
Since we were using a render target, we could do all sorts of effects that we can't really do anymore.
So we could do refraction inside the portal.
So if you look around the edges of the portal, it kind of distorts what's behind it.
And that was kind of, it gave it this, like a black hole effect, so everything was just sort of worked around the edges.
Which was pretty cool, but it was kind of hard to communicate to the player how all of that worked.
And we, but the advantage was like, we could have the refraction effects, we could have like 2D effects around the edges, because it was just sitting on this inverted sphere around the player.
But we changed that for the final portal.
So just to give a little effects breakdown of how the portal is rendered, we first have the disk of the portal, and we then render a glow effect around the portal.
It's just a quad strip, basically.
So this is on the outside and gives it a nice glow effect.
Then there's a funnel, which is too high poly.
I forgot to fix that, but too late now.
So it has like a funnel shape, which gives it a bit of a depth and gives it kind of a funnel effect.
The effect is kind of subtle, but in VR it feels much better.
It feels like things are going into the portal.
All right, so then we render the eye cameras inside the portal.
And then we have a multiply disk that multiplies in a color from the edges.
I can switch back and forth so you can see.
So that gives it a bit more depth.
It gives it a bit more punch and makes it feel like a sphere and a deep thing you can look into.
So then we have an inner inverted cylinder thing that gives it more of the funnel effect, which is useful.
And then another glow ring on the inside to make the border seem like a really sharp glow, kind of the lightsaber effect, I guess.
All right, so let's see if this one, there we go.
And then we also have a.
bubble shine on top of the portal.
Because in the new version, we want the portal to feel more like a bubble you can look through, rather than a black hole.
Or a wormhole, I guess.
So yeah, that gave it a nice shine.
We had to tweak this one quite a lot to make sure that it didn't outshine the things you were seeing inside of the portal.
And this was kind of tricky when you were moving from a very dark area to a very bright area, and vice versa.
So if you had really bright reflections on the portal going into a dark area, you would just see the reflections.
And it was super confusing.
So we ended up just fading the reflection in the center of the portal and just making it sharp around the edges.
All right, so the physical nature of the portal was something we had some issues with in the demo.
So this inverted sphere I've been talking about before, that was something we had to scrap once we reached the final iteration of the portal.
The inverted sphere idea was basically a, you take a sphere, you invert it, it's one meter in radius, and then we had a shader that rendered the portal in front of you based on the direction from your head to the translocator.
But the problem with that was that it had no sense of depth, it was always at one meter distance, regardless of where you were holding the translocator.
So you could move the translocator around, but the portal would stay at one meter's distance.
And it was really hard to tell, like, where is the portal, how far away is it?
It just felt weird for the player.
So let's see if this video plays.
If not, I'll just skip it.
It's not too important.
No, OK.
It's slow.
Whatever.
OK, so once we change the portal to be a sphere above the translocator.
then we had to solve the problems of the player pushing their head through that one.
Because that was not a problem before, right?
Because it was always at one meter's distance.
You couldn't put your head through it.
But once you have it as a sphere above the translocator, you have to solve that problem somehow.
So what we did was when the player pushes their head towards the sphere around the translocator, we just shrink it down, and then it moves into the controller.
So we had some debating whether or not you should be able to translocate by putting it above your head.
But it's kind of hard to, because you want to be able to look through the portal without moving to the new location.
So we decided that you can't do that.
You have to press the buttons to teleport.
We also wanted to keep the 2D effects we had.
We had these, it was 3D geometry, but we wanted to have all the nice borders and all the nice glow effects.
But if it's a sphere, it was difficult to control all of those in a nice way.
So what we ended up doing was to fake a sphere.
So this is a 2D example of the same case.
So what we ended up doing was to move a disk to a location inside a sphere to make it look like a sphere from whatever perspective you were looking at it from.
And this is done on the GPU, so it's done per eye.
And the effect is actually super convincing in VR.
And here's the code in case you want it.
So you can really easily fake spheres this way.
And it's really fascinating, because when I tried this in VR, I was like, holy shit, this really does look like a sphere.
And it's really bizarre, even though it's just like a disk that's repositioned.
So this way, we could just keep all of our nice 2D effects.
And yeah, we had a lot of control in how we could make the portal look and feel.
And that's it for my talk.
So thank you very much for joining.
