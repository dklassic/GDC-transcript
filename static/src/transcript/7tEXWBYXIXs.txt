Thank you everyone for being here today.
And we're going to be talking about crunch, what it is, how it happens, and things we can do as individuals and teams to help prevent it.
My name is Chris Cobb, I'm the CTO for Pragma Platform, and I've been in games for a number of years now.
At Pragma, we're creating a back-end game engine, which is basically services and tools to help you ship online multiplayer games.
Our team have worked at big publishers and studios, as well as smaller indie shops.
So I just want to share stories about what we've done in the past to create a sustainable work environment, and do that while doing what we love, which is shipping games.
This talk's for anyone who works in games, whether you're leading a studio or a team, or you're leading from the front, you know, as an individual contributor, which is where I've spent most of my time in the industry.
Before we begin, I just want to give a very special thank you to Hannah Zolty.
Hannah's our lead tech writer, and she did a bunch of work tirelessly to help prepare this talk, so thank you, Hannah.
Alright, so for our agenda this afternoon, we're just gonna do quick definitions and cover some distinctions about the ways that crunch can happen, kind of some of the different causes.
We're gonna do a bit of a case study, talk about a large project that I worked on at a big studio and kind of the personal experiences I had there, the good times, the bad, and what we can kind of take out of that.
And I do want to say, like, I think that this is possible.
It's something that I've lived and experienced and I think it's really valuable.
So I'm going to talk a little bit about what we're doing at Pragma in terms of our culture to try to embed this into how we work every day.
Before we dive in, I just want to say, you know, first, summarize our goal, or at least what our goal should be in games, which is, you know, ship something that's delightful and amazing to players that we're proud of as a team in a sustainable and healthy way.
And we have to work on purpose to prevent crunch because it's not enough to just observe this is a problem in our industry and hope for the best.
So two things I specifically hope you can take away today are that it takes hard work to create a healthy culture.
This does not come for free at all.
There's a book called The Advantage by Pat Lencioni and he talks about investing first in your culture and putting your priority there, especially as a leadership team and understanding that the rest will follow.
And it's possible, you can do it.
I do want to say up front, I don't think I have all the answers.
I don't want to pretend to.
And I understand that I've benefited from privilege, and I know that not everyone's situation is the same.
This is not an easy topic, and I don't want to send a message that says otherwise.
I do want to acknowledge that at the outset, and appreciate that we all have a unique circumstance.
I also want to say that it matters.
It's important.
And I don't feel necessarily qualified to talk about this, but at the same time I think it's important that we start having these conversations.
And so we're gonna talk about it today.
What we can do as a community and an industry.
So that's why we're here.
All right, so at its most basic, we might say that in order to hit a deadline, developers are required to work beyond the limits of what's healthy or sustainable.
People are risking their health and well-being to hit a deadline or date.
And we're going to kind of explore two main causes.
So we've got overt crunch mandated by leadership.
I think that's the thing we end up talking about a lot.
But I also want to talk about accidental crunch.
It's a little bit harder to define, but I'm talking about when well-intentioned folks adopt unhealthy behaviors, whether that's from misguided ideals around passion or commitment levels, or frankly, sometimes it's irresponsible management and leadership.
Both can be equally destructive to teams and to our health and well-being.
So a couple years back I was having lunch with some friends.
They all came from the same studio.
Very famous studio, renowned for some of the best games that we know of, but they're also renowned for having a pretty awful crunch culture.
So I asked them about it and said, what were the dynamics there?
Was this like mandated crunch?
What was happening?
And what they described was that, as is common in traditional publishing, a date and budget were picked at the outset and that thing never changed.
We all know that game development's super hard, and we're iterating and creatively trying to learn and adapt and discover the fun and find these things.
But they had virtually no production process.
There wasn't a lot of actual management going on.
And what that meant was folks were kind of left to figure out on their own what to work on.
And so I asked kind of what felt like an obvious follow-up question, which was, do you guys ever throw any work away?
And they were like, oh, all the time.
Sometimes like six months of work would just get torpedoed, you know, kind of in a drive-by.
And so, you know, that continued later in the project, the studio head might drive by at nights and weekends and keep track of who's in their seats and who's not.
So, you know, the point of this, and ultimately broadcasting to the company what the expectations were and what the commitment level was being required of the team.
So the point of this is that overt crunch is very real.
Anyone who's trying to say otherwise or dismiss it is, you know, needs a reality check ultimately.
Especially if we're talking from studio heads and executives.
But I don't want to spend an hour just complaining up here.
I don't think that's gonna help or fix anything.
So I do want to focus on practical things we can do as individuals on our teams to help make things better.
So we're gonna talk about the dynamics between these different causes for crunch and kind of dive into that in the case study.
One idea I do want to introduce is called win-win or no deal.
It comes from the seven habits of highly effective people.
And our goal is to find a win-win outcome.
The studio is happy and so are we.
We're able to live lives as developers that are sustainable for us.
It's a really simple concept, but it is actually really powerful.
Oftentimes when we talk about compromise, it quickly can turn into a win-lose circumstance where one side or the other are experiencing a problem of some kind.
And I think we're all in games because we're passionate.
We wanna make stuff, we wanna delight players.
but we have a unique circumstance, so I don't think there is a universal win that we can all define and agree on, but it's really critical for you individually to understand what it takes for you to be in a winning situation.
And the alternative is no deal.
I don't make, mean to make this sound easy.
I appreciate that we can't all just like rage quit our jobs because we're mad about what's going on.
But at the same time, it's really important to understand that, you know, they're basically to find that individual win and really seek that out.
This has really benefited me in my personal life.
So to tell a quick story, my first startup was in educational games.
It's something I'm still very passionate about.
We didn't have a plan.
I just quit my job, gave it a go.
I had a few friends that joined me.
And we started fundraising and received a term sheet.
It's really exciting.
But we started negotiating the contract, and it was really difficult, and it became apparent that our investor had different incompatible needs between us and our team.
And so we were struggling to find that win-win circumstance.
For us, we wanted a certain amount of creative control and freedom in what we were gonna work on.
For the investor, they wanted to protect their investment.
They were gonna outlay millions of dollars and trust us to build something.
But ultimately, we couldn't find a circumstance in which both parties felt safe.
And it was like the hardest thing in the world, I promise, to walk away from the chance to work on something that I was so passionate about.
But we kinda stuck to this framework of win-win or no deal, and ultimately had to step down from that.
And there wasn't blame on either side.
It wasn't about one person being right or wrong.
It was just that in that circumstance, we couldn't find a situation that worked for both of us.
So this was one of the hardest choices I've ever made, but this framework has been a really useful thing for me to remind myself.
Like, I need to find a winning circumstance for myself and hope that the other party can too.
So having touched on some overt crunch ideas just briefly, I do want to talk about the more subtle signs of a crunch culture.
First, I do want to say it can be just as destructive.
You know, I don't want to be, I think the overt crunch is the one we focus a lot on, and I think it matters, and we need to work on that.
But I've also seen situations in which it wasn't a mandate from leadership, but I still saw destructive behaviors in and around the teams I've been a part of.
So I do want to spend time there, because there's a whole lot we can do individually to do better there.
This idea was seeded from an experience I had early in my career.
where I was working on a great team, uh, morale was high, and you know, it was early evening one night, engineer on the team was kinda in the zone, he was just kinda jamming away, and one of our colleagues, teammates came along and was like, hey man, don't burn out, you know, clock out, take care of yourself, and this was totally a reasonable thing to say.
Fast forward six months, and we started coming up against the deadline of this really large project.
And that engineer was feeling pressure from the schedule.
He started raising this in team meetings, like, hey, I'm really getting nervous about the scope of what's happening.
You know, he's worried about getting crunched.
And that same colleague that had encouraged him to take care of himself said, hey, you know, don't worry about it.
I'll just make a grocery run, I'll get snacks, we'll load you up so that you can kind of stay here, heads down and focused.
And this really struck me.
With the best of intentions, our teammate was enabling an unhealthy choice for the team and for this person in particular.
And it raises the question, are we going to advocate for healthy decisions just during the good times, or can we do it during the difficult times as well?
Nobody was being ill-willed in this circumstance, but it is up to us as individuals to look out for one another and take care of each other.
And ultimately, I think that it takes some personal courage to speak up and say, hey, wait a minute, why is it that months ago we encouraged one another to keep balanced and stay healthy, but now that there's some pressure, we're suddenly creating enabling behaviors.
And so that's kind of the idea that I do wanna spend some time exploring and talk about the management and leadership side and how do we run our teams.
So let's launch into the main part of the talk.
It's a breakdown for a project I work on called Team Builder.
And we're gonna talk about the tension between the overt and accidental pressures and then specific processes, like how this team ran and operated in a way that ultimately I was really proud of.
I want to say, this word Agile has been around for 20 plus years.
I think it's lost a lot of its meaning at this point.
And we all say, Agile's great, but you know, or we tried Agile, but we just moved too quickly to make it work.
Or Agile is too restrictive and not flexible enough for our team.
Or sometimes people say, oh, we do Agile, hard stop.
But they're still over budget, they're still stressed, we're still getting crunched at the end of our project.
So I just want to say at the outset, process should serve the team.
not the team serving the process, which means people should be thankful for the activities you're doing.
One thing we do at Pragma is frequently ask people, is the time we're spending in meetings useful?
And if we're all just ripping our hair out in conversations that are not productive or helpful, it's just a huge waste of time.
And another thought I wanna throw out, probably breaking the rules of giving a talk, but I wanna say you might be doing it wrong.
What I mean is that there's like really complex math behind estimation and planning and projections and Teams will oftentimes adopt a process that kind of looks okay on the surface But once you dig in you'll find out that it actually violates these underlying principles and ultimately the result is that we have Estimations and dates that don't work. They don't matter. It feels like a waste of time and nobody really gives any You know and then our projects become late and over budget Morales poor and you know results in crunch So, Team Builder was a project we worked on as part of League of Legends, and we had a couple goals at the outset.
The first was to eliminate negative experiences when forming teams.
League of Legends was a 5v5 competitive game.
We'd stick five strangers together, give them 60 seconds to agree on what position and roles people would play.
Oftentimes you'd get in a fight with your teammates before the game even started, and then you're playing this like competitive 40-minute PvP match.
It was really rough and we recognized that we were not giving players a shot at working together as a team.
We also wanted to give players a lot more control over their game experience.
Give them tools to express the style of game they want to play and the experience that they want.
It was about 18, eight to 15 members throughout the project.
This was cross-discipline between engineering, design UX, QA, art, production, and the rest.
There were more than 150 people involved in getting this thing out the door.
We worked across about 20 different product and publishing and feature teams to get everything done.
It was a very large-scale thing.
And ultimately, it was about 15 months from concept to launch.
It scaled to support a massive number of players.
And we ultimately were able to avoid crunching in this project.
We shipped without player-facing bugs, something that the team was really proud about.
We had happy players.
We received high ratings on the user experience and the actual feature.
And at a time when most features came with thousands upon thousands of player support ticket requests complaining about bugs and problems and issues, we only got a handful and most of them were to say thank you for the feature.
What we're gonna do is break down how this team ran, explore the mechanics of how the team operated.
I wanna talk about the good times and the bad.
It was not smooth sailing, even though, you know, I was very excited about the result.
And hopefully there's something practical you can take away and take back to your teams.
So at the outset of the project, I was asked to give a gut check estimate.
I was told this was not a formal commitment.
And we did some story mapping, we had a design doc that we reviewed as a team and we broke some stuff out.
And we said, you know, we think this is about a six month effort.
We then spent the next three months just trying to get an internal test environment.
We had a reboot and false alarm on our client technology that caused us to like a multi-week rewrite.
So in no time at all, we were already approaching our six month mark.
And suddenly the tone changed.
We started being asked, you know, why aren't you done yet?
What are you gonna do to fix this?
This was a pretty scary moment.
I hadn't been at the company very long, and I got this secondhand message that said, well, leadership says that your team had better crunch because how else are you gonna get this done?
So I went home and talked to my wife.
We had actually just moved across the country, had young kids at home.
I was really scared.
And the conversation I had was like, hey, are you okay moving back home?
Because this may not work out.
I had made a commitment to my family about the boundaries of my work life.
And that wasn't something I was ready to compromise on that time.
But I was scared.
Very scared. So our team kind of rounded up back at the office and we put together kind of everything we had. So we brought back to stakeholders the schedule and the timeline we had built. We showed our velocity and the progress the team was making. We had a running version of the feature always available so we could boot it up and show everything that was working. And there were pieces that were already online and functional but clearly we weren't done yet.
And we had projections that were useful.
We actually, at that point in the project, were able to say, okay, we're not done yet, but we do see ourselves landing, based on everything we know, at this period of time, nine months later.
And importantly, we had enough data and information at that point to make that prediction in a way that was actually powered by data, which meant we actually knew how fast we moved as a team.
And it was really interesting because in this circumstance, when we showed real useful data, we had a working version of the feature, things settled down in terms of the stakeholder kind of pressures.
They had the confidence to see that we did have a plan.
And ultimately, kind of the appeal I made was like, if you need somebody who can go faster, I don't know how to help you in this, you know, because I think we're doing everything we can sustainably, but we do have a plan and I think we can deliver.
And so once they heard that message and saw that we had real substance behind our plans, you know, they actually started supporting our team.
In this circumstance, being disciplined in our process and our planning gave us the ability to push back, and we actually got a different message that came down the pipe later that said, hey, if anyone's trying to crunch your team, that's unacceptable.
And I wanna be clear, I know that this is not the circumstance all of us have lived.
So I'm not saying that this is somehow a magic silver bullet that's gonna fix everything.
But in this circumstance, it was really interesting to see that once we were able to create some confidence within the stakeholder team, some of that pressure was alleviated.
All right, so we're gonna basically pose a question.
This would be like a starting point to have a conversation between yourself, your team.
And we're gonna kind of propose that, and then I'm gonna break down what we were doing as a team to kind of address this idea on the project.
So first is the question, do you have realistic estimates?
And I think this probably strikes a, might feel a little sarcastic, but it's not.
I think that most of us deal with estimates that are basically useless.
You put a date on it, and either you just blow by that date and it doesn't mean anything, or it's weaponized, right?
And suddenly you're being held to, you know, your feet to the fire.
But estimates are really important if we're gonna manage budgets, right?
And we don't always talk about the money involved in games, but it is true that, you know, it costs money to build games, and so there's, somebody has to be tracking the budget, make sure we don't run out of cash.
I think a lot of us don't know what estimates are for.
Right? We just said it.
It's like, either they're useless and they're just stale, sitting in Jira somewhere, or they're weaponized and used against us.
So in our case, we were able to produce estimates that actually let us predict nine months in the future and stick the landing.
And we did so without crunching at the end.
So how did we produce those useful estimates?
The first thing that is really, really critical to understand is estimates are not a commitment.
You're asking somebody to predict the future of something that is complex.
Games are just incredibly complex, as we all know.
It's technology, it's servers, it's clients, it's graphics, it's 3D, it's art, it's animation, it's narrative.
Like, it's all of it.
It takes so much to create games, and that's hard.
So estimates are not meant to be a commitment to when the work is done.
They're meant to represent an average.
If we did 100 stories that are about this difficult, what is the middle point on the graph of how long it takes?
And this is, gets into some of that complex math. I will have resources at the end of stuff to kinda check out. It gets pretty wonky and math heavy. But if you wanna understand the underlying reason why there's a fundamental difference between understanding that this is on a, a, a, a bell curve of averages, it, it's useful to know. Um, you could also just trust me and just kinda stick to it. But uh, but it's, it's tough. So, let's use 3 days as our example, as, as we see up here. And it's important to recognize, sometimes it'll just take a day.
You know, it always feels like you get lucky when it takes less time.
But, you know, sometimes it'll take five days and that's okay.
In fact, it's not just okay, it's actually expected.
Like mathematically we expect variation in how long these things take.
And so that's gotta be part of our process.
And another thing to consider, though, is that you could just throw away estimates altogether and just say, oh, the game's done when it's done.
But that gets really hard.
So we do have this bell curve, right?
Three days is our average.
If you start getting up to day 10, that is a time to check in and say, wait a minute.
We're now three times longer than we thought it would take.
And it's worth having a conversation at that point and say, wait, did we just load up on six new features and that we shoved into this after we did the planning?
That's something you have to be really careful and disciplined about as a team.
I'd say scope creep causes a huge amount of challenges.
Sometimes it's just discovered complexity.
The task was actually harder than we thought it was.
And that's okay to understand, but now we have to check in because what was valuable to us as a three-day story...
may not be worth it if it's gonna be 30 days because there's so many other features we could be building.
So checking in, you have to watch how far away from the average you're getting and there is a moment where you do need to have a discussion and sometimes you do need to pivot or make changes.
So, you know, and this happened to my team not long ago.
We made a two-point story.
It was meant to be like, unblock us in one or two days because we had this really complex feature we wanted to work on later, but we didn't have time for it.
So we said, let's just unlock ourselves and then we'll get back to it later.
Well, somehow, four weeks passed and we still weren't done.
And we didn't really check in at that 10-day moment or at some point on the journey.
Because of that, we kind of let this thing run too long.
And of course, there was like massive amounts of scope creep.
We had basically shoved all those complex features that we were trying to wait on, had gotten added back in.
And, you know, and it was significantly complex.
Like we had some tech debt we didn't account for and all the rest that I think we're all accustomed to.
But my point being that, while we're not treating estimates as commitments and trying to hold people to it, you know, hold people's feet to the fire, at the same time, you do need to watch.
And once you get out of bounds, like you should check back in and make some adjustments.
All right, so I think this is how most of us plan.
You put the features on a list.
Oftentimes we stick a date on them, and we say, okay, we'll do them one, two, three, four, five.
You might look at the end of that estimation and say, okay, the project's gonna take six weeks long.
This doesn't work at all.
I think all of us do this, and I promise you it won't work.
I mean, I think we've all experienced it.
It never works this way.
Just think about it, because you're putting a fixed date on a schedule, and you're saying it will get done in two days.
Let's just pretend the very first feature you work on takes three days.
Your entire schedule's busted.
Every single date on your entire calendar is wrong, and you're going to go rebuild it.
If you try to maintain this thing, you're going to be rebuilding your schedule multiple times a week.
This is an effective tool for planning and delivering.
So, you know, this spiral's out of control.
The other thing is it puts your team on the back foot.
Everyone feels like they're late and behind schedule.
on the third day of the project, right?
Because when you use these fixed dates, it makes it feel like something's broken when it takes longer.
But we know it's gonna take longer, right?
That's what we all live every day.
Now, this is a little bit of a weird graph.
Don't try too hard to parse it.
It's just, we're putting these overlapping bell curves, right, the averages.
And there's a couple really interesting things to observe about this.
Because on the one hand, we still have a list of features that we wanna build.
We still have, you know, some kind of ultimate, like we'll get it done eventually.
But the important thing to understand is like this does not predict whether feature one or two gets done first.
In fact, it literally doesn't even predict when any of the features get done in the individual, right?
And there's this really interesting property that says every single estimate for every single story can be wrong.
Like we just don't know it's we're predicting the future.
But all you have to do is measure how much work gets done each iteration.
And what I mean to say is, you'll get some work done, some of those stories will clear, but you're not predicting order, and you're not holding somebody's feet to the fire just because the one thing they thought would only take a day turned out to take three.
Now, what's amazing about this then is you can actually measure progress.
You can say, well, we always get five to six things done every iteration.
Sometimes it was the one that carried over from last time, sometimes it was something that came in at the last minute, but the team was excited and just chased it down.
And so you can actually create real, durable, valuable, useful velocity that helps you.
predict how long it takes, but what you're not doing is pinning everyone to an individual completion time on an individual task.
There's another consideration when we're talking about estimation and planning, and it's called the cone of uncertainty.
When an idea is brand new, you don't know a lot about it.
And making firm commitments at that point is risky, because frankly, you're going to learn a lot about your game and your features as you go.
So, what I like to do is separate, we call it a low-resolution estimate and a high-resolution estimate.
the first time an idea comes up, just throw out a number.
If you have two or three people who are subject matter experts, just let them put a number on it without too much deliberation.
You don't want to spend time planning for something that might be months away from being worked on.
But when you're a couple iterations away, it's going to get worked on in the next few weeks, that's the point where you want to start breaking it down in more detail.
And what's valuable about that is you've learned a bunch over the last weeks, months.
And so by the time this particular story gets close to the top of the backlog, that's the time to break it down in detail and agree what's in, what's out, what's in scope, what are the completion criteria, right?
What are our requirements?
So the idea then is that you put a number on everything that comes into the backlog, but don't spend a ton of time on the stuff that's months away.
It's just a waste of time.
Let's talk backlog for a minute. Um, I don't know, backlogs are kind of terrifying in my experience. Often times they're, like 75% of it is like, I don't even know where any of these things came from. Like the number of times I've checked that JIRA ticket and I'm like, who wrote this? It was me.
Like, it happens all the time.
Maybe I shouldn't confess that, I don't know.
But backlogs, again, they take work to manage, and so there's a couple ideas.
The first is, you do want all the known work you have to be in the backlog somewhere, but we just talked about the cone of uncertainty.
So if stuff's like a ways out, you should just have a big chunky sentence that describes some big group of features, right?
An epic or something.
And you should put a big number on it that's kind of in the ballpark, and just leave it alone.
What you shouldn't do is fill up your backlog with, you know, 50 or 75% kind of noise, which was like one specific edge case for one specific feature that we decided to defer, and it's been six months.
If you can't in your head, like, predict working on the thing...
within the next like 6 months or so, probably just delete it or kinda group it back up into some epic. Because what's gonna happen is if you open up your backlog and half of the stuff in there is kinda irrelevant or hard to, you know, really grok, then it's just gonna feel like a mess. So we have to maintain a backlog. The other thing is that we want a stable backlog in the sense that we've got a prioritized list of work to do.
But it's a super dynamic list.
So being stable should not mean static, right?
Because literally all of games is about discovering, right?
We're trying to find fun things.
You might spend a bunch of time working on something, realize it's not working, and you're gonna have to move on.
So when we talk about maintaining the backlog, the thing is gonna be evolving and changing all the time.
But just keep it clean and tidy.
If stuff's too far out, either delete it or roll it into one of these epics so that you've got some sanity.
For me, my sense check is if I crack open the backlog, I should be able to browse and everything should resonate.
I should be like, okay, these are all things that are understandable, like they're in the context of what we're working on.
And if I start seeing a large amount of just kind of junk or noise, then we gotta clean it up.
This one is a little bit technical.
A consistent measure of estimation.
Now people have used t-shirt sizes, Fibonacci, there's all sorts of different frameworks.
Fibonacci does have some really nice characteristics.
The nice thing is that those smaller numbers at the beginning, one, two, three, five, they're kinda high detail, so you have a little bit of separation between how hard something is.
But then they kinda scale up.
You know, you get to eight, 13, 20.
The whole point is that the larger the work is, the less precise it is, right?
We don't have a 20 and a 21 and a 22.
It's just like, eh, it's about 20.
And then we go to 40 and 100 and infinity.
So I do like Fibonacci, but the critical thing is if you're trying to use your, if you're trying to build a process that lets you predict when you're gonna be done, just stick to one measure.
Don't change it every couple months because people have decided, oh, if we change to ideal work hours, that'll be a better system.
You wanna be really consistent.
The other one, this is a huge thing to watch out for.
Do not change the original estimate after you've done the work.
We already agreed that estimates are gonna be an average completion time.
So when that thing that you thought would take three days takes a week and a half, don't bump the number up.
And this, it's a hard one to explain, but basically what you're doing is turning your backlog full of estimation into that fixed schedule, right?
If you change the number after the fact, you've actually erased the estimate.
And what happens then is that your future estimates won't work.
Basically, it's a lot, Yeah, I'll point you at the resources at the end of the talk, but just trust me that if you're backfitting your numbers after the work gets done, they're not going to be predictive anymore.
And that means your schedule won't work.
So just keep the estimates as they were.
You will oftentimes, though, find that scope creep has happened, so you break out a new story and put it back on the backlog.
So there's a lot of opportunity for you to account for that work, but don't just change the numbers.
The last piece, I know we spent a lot of time on estimation, but I do think that this gets to that responsible leadership and management.
The reason this stuff matters is that if we put ourselves on a good footing in terms of how our team runs, it gives us so much better chance to kind of close in on landing our launch without accumulating all this pressure and stress and hidden work that we don't find out until a month before release.
So the last piece is discovered work.
And this is the idea that when you're trying to solve one problem, you'll find two more.
probably more true in games than anything else as far as I know.
This is called discovered work.
And it's really, really key.
If you're trying to predict when your milestone's gonna be complete.
And let's imagine your team does 20 story points every iteration.
And you've got 100 points left.
And you think, ta-da, it'll take us five iterations.
You have to know exactly how many story points are being generated every iteration, right?
Because you're going to be adding new stuff to the backlog.
So if you're completing 20, but discovering 10 new points, then every iteration that passes is going to be accumulating new work.
And I'd say this is probably the most common.
Mistake I've seen when people are trying to build these roadmaps these projections is that they're not factoring in the average amount of discovered work That they have each time each iteration.
And this is a really powerful tool also to measure your team's discipline.
When your project is brand new, you're gonna have so much discovery.
Oftentimes I think you have as much discovery as you're getting work done.
So like, at the beginning of a project, you're not even getting closer to release because the team is figuring everything out, you're learning.
And so what you'll see is, well, we got 20 points of work done, but we discovered 20 new points.
And what has to happen as you approach your deadline, as you approach your milestone, is you have to start saying no.
So that discovered work needs to decrease over time.
So your discovery measurement needs to decline as you get closer and closer to your milestone.
That's the team one, learning amongst each other, you know, this is the feature we're building, and learning how to kind of say no and be clear.
And it's also just demonstrating discipline that if we always, you know, add new features, we'll never finish.
I do want to talk a little bit about team composition and stable teams.
It's a huge value that we have at Pragma is long-lived teams, which is like keep teams together.
I would say most studios talk about this, but then you look at what they do, and what happens is every couple weeks, they're like, oh, but I need a UX designer, and so they go grab one and rip them out of the group of the team they're working on.
I think we all understand, or at least, if you follow any competitive sport, you know that the best teams in the world are not composed of the five players with the highest stats.
Never works that way.
Teams are built out of our relationships and our dynamics with one another.
Like it's about the personalities and the strengths and weaknesses we have.
And so you're only gonna get that experience as a studio if you let your teams gel and build a chemistry together.
So the other thing that happens oftentimes on the side of estimation is you might have like open head count for a few new engineers or artists.
And it's really tempting to use those individuals that don't exist yet in your projection of how long the project's gonna take.
So it's crucial, no matter how hard you're trying to hire, you need to be really disciplined about not trying to incorporate your open head count as though they're gonna actively support finishing the milestone.
In particular, we all know how hard hiring is.
It takes a huge amount of time.
If a team is fully loaded trying to hire, in my experience, that can take 20 to 30% hit.
to the team's productivity.
So you're actually going slower as you attempt to hire.
Not to mention onboarding.
We also know that it takes months, oftentimes, to get up to speed.
So if you're bringing new people on the project, you're gonna go slower.
Your team is onboarding those new folks and teaching them.
So your experts are not gonna be going as fast.
And long term, of course, you're gonna get payoff because you've got a new team member.
But you'll be going slower in the short term.
So please be aware of that.
Definitely do not incorporate open headcount.
into your prediction on how quickly things will get done.
All right, so here's the big recap of all the things we're trying to think about with estimation planning.
And we'll kind of speed up from here, but this one is just kind of near and dear to really doing a great job operating our team day to day.
And unfortunately my notes are not written correctly, so I'm gonna lean in a little bit here.
So we're talking about estimates are averages and not commitments.
We're talking about not changing our numbers after the fact.
We have stable long-lived teams.
All the known work, everything we understand has to get done is accounted for, but only high-resolution estimates on the stuff we're about to work on.
We're gonna maintain a relevant prioritized backlog, and we're gonna measure that discovered work.
Easy.
All right, so we're gonna move on to a few other topics.
And the first one is about knowledge silos.
You know, I'd say every game team I've worked with says like, oh, we don't wanna have silos, right?
But in practice, it's like, oops, like.
You know, one person on the team knows this area and they're the only one who can work on it.
You know, when we talk about maintaining a healthy work-life balance, if your team is gonna be held hostage when one person is missing, it creates a lot of pressure for people not to take time off, right?
It's scary to take, you know, PTO if you're the one person who knows something critical.
And it can create a lot of trouble, I think, across your team, and it creates a really...
imbalance to situations where it's hard to operate as a team and instead we become this like group of individuals.
So, I inherited a legacy matchmaking system. It was really complex, gnarly code base. And this thing had been entirely siloed. Only one engineer worked on it at a time. Usually they'd own it for a handful of months before passing it off. But there was no knowledge transfer. There was no cross training. And it was a super complex code base.
very difficult to understand.
So we had this feature that if a player came back after like six months, we wanted to give them a break.
Like we don't wanna give them really tough, you know, sweaty matches because we wanna let them get back in.
It's unlikely that their skill rating is actually as high as whatever number we have for them.
So we had this nice feature that would give you a little bit of discount to your rating as you came back in.
And it would work for a while, but we saw this weird side effect where you'd have some easier matches to kind of ease back in, and then bam!
You'd get kind of slammed with like really tough matches, and you go on a big losing streak.
And most players would just give up at that point and leave.
And by the way, so this was happening during the Team Builder project, so we had to maintain the old system as we were trying to build some of the newer features.
So...
Basically, nobody on our team could change this codebase without breaking it.
I literally mean 10 out of 10 people attempted to go in and make changes, all of us broke it.
So it was a really tough situation.
And what happened then was we kind of neglected trying to address this issue because it was so complex and hard.
And ultimately, it just meant that we were causing this problem for months longer than we should have because this siloed codebase made it really difficult for anyone to work in.
And ultimately what had happened was there were basically two copies of the calculation logic.
And so we had fixed the part where we gave you the discount on getting your match.
But when we came to updating your skill rating, we didn't run that same calculation.
What happens then is every win you got against an easier opponent, we were still bumping your skill level higher and higher.
So by the time we take away the discount, suddenly you're actually like 100 points more skilled in theory than you were before you left, which is not reality.
And then we would just punish those players, unfortunately, and cause a lot of pain.
And so in this case, we created a real problem for our players because we had this siloed code base that was really complex.
And it changed how we thought about it for the Team Builder project.
So one practice we use as a team is called pair programming.
And this is kind of engineering specific, but.
It's an unusual practice, I get that not a ton of teams use it, but it was actually born out of the desire to say, what if we took a good idea and then took it to an extreme?
In this case, we all tend to agree on the engineering side that code reviews are good.
And it said, what if we did them constantly?
And what's really interesting about this idea is that when you have two brains solving the same problem, obviously the siloing is, you know, eliminated by default.
It was actually a really powerful thing.
When I moved on from this team that I was part of for a lot of years, it was really reassuring to me to know that there was not a single thing in the entire system that only I knew about, right?
And it made it feel a lot safer to move on to my next team because we had that coverage and expertise built in.
The other thing is we shipped less bugs, you know?
Obviously we're not primarily focused on quality here, but...
Quality affects our lives a lot with respect to crunch, right?
Oftentimes we get into the hardening phase on a milestone or project, and then suddenly it's like, oh, wow, everything's broken.
And then we're kind of jammed at the end because we're trying to fix all these things.
And so it also increases your quality in a really positive way.
So we are, I guess we are going to talk about quality after all.
Quality as you go.
So I would say that something I think I've observed and others have too is that QA can get treated pretty poorly in how we run things sometimes.
We have a team called Quality Assurance.
Sometimes they're siloed as a group and they get brought in late in a project and they're told like, assure quality, make sure it's great.
But at that point they weren't part of the product development and they didn't have a seat at the table when we're planning things and when we were creating these ideas.
And so ultimately, they're oftentimes in a situation where they just point at something and say, that's broken, that's broken, that's broken, which is a really disempowering place to be.
And ultimately what happens then is we're discovering all of these quality issues right at the end, and nobody budgeted the extra six months we needed to polish the six months worth of.
features we just built. And so that we end up with this absolute pressure at the end of a project. So one thing we talk about is a whole team, right?
So it's one thing to say we want logging lift teams, another thing to say that we want everybody at the table at the outset.
So we had QA embedded as part of our team during the kickoff.
They participated in that original mapping.
They participated in the design review and the plan so that incorporating how we were gonna test and make sure this thing was actually ready was built into the team.
And this was a really, really powerful thing that helped us, and it meant that we didn't have the same kind of surprises that oftentimes we encounter.
So another angle to take on it would be, do you catch errors as you go?
Or do you kind of shunt them to the side and say, oh, I'll deal with that later?
One practice we use is called test-driven development.
Again, it's a pretty frequently talked about thing, but it's a really interesting idea.
What you're doing is you're writing a test that says, hey, I'm gonna give a player a discount if they haven't been back for six months.
And you run a test, and it fails because you haven't run that feature yet.
And then you start coding and trying to write the feature.
And what's really powerful about this technique is that you're thinking through how to deliver the feature from the get-go.
And you have this really interesting suite of tests that help your team and cover you.
You can run that test 1,000 times before you go live.
So if you come back to make a different change to your system later, you've got this regression suite that's really interesting and really powerful.
So.
Just bringing it all back, I think that what we're looking out for is the 80-20 rule that says, you know, we think 80% of the features are done, but then somehow, like, we get hit, you know, on the wrong side of this equation, and there's, like, the other 80% we didn't account for.
And when we start talking about embedding quality as you go, I think that's how you can account for, like, hey, once we say the feature's done, we're going to move on and work on the next feature, and we're not afraid that we're going to get jammed at the end with all of these things that didn't get accounted for throughout development.
Continuous integration and delivery.
I think the word continuous integration right now, most people think of it as like, oh, it's Jenkins or TeamCity.
And those are technologies and they're useful ones.
But the idea is basically like, we just have to ship a single video game, right?
And so.
What happens oftentimes is people want a little sandbox to work in.
They're like, hey, I want to be able to work without stepping on my colleague's toes, my teammate's toes.
And what happens today, at least, is we get into these feature branches.
And that can be a useful tool to experiment, but you have to ask yourself the question of how long is it going to take after the feature is done to get into the actual build?
And what you'll find as your team grows and gets bigger, you'll have people out in the woods for longer and longer.
Teams can be out for weeks and months.
In fact, the most extreme story I've ever heard was a team that did feature development for about six months, and then spent two and a half years.
integrating those features in.
And it was just like a crazy knife fight of politics about who was allowed to put their code in first.
It was just the most wild story I've ever heard.
And so it's really important to think about, if we're just building one game, how do we work day to day in a manner that lets us put new code in the system and add features?
And this applies to art and animation.
and game behaviors, all the different things that go into it.
Now, so there's this idea called trunk-based development, which is just like we all put our code in and we put our art in and our assets in.
Now, a lot of us, I think, are used to that being a very unsafe thing.
It's a very scary prospect.
And so the idea is, well, if I just have my sandbox on the side, I can work on it, and when it's ready, I can bring it in.
But there's a lot of challenges with that, and particularly the two and a half years of integration costs, apparently, for that one team.
But it's more than that though.
The question is, can we build something as a team together?
Basically, can I add a new feature to the game that isn't going to break everything?
It actually makes you think in a different way.
If I'm gonna prototype a new character and I'm using temp models and temp animation, temp assets, have we built tools so that that's safe to do?
Can I add that in through configuration and through data as a designer?
And can that be done in a way that's not going to immediately crash the game for everyone?
Can I turn it off and on, right? Feature toggle is a really powerful tool because if you can basically make your new features exist without causing harm, then they can be present and the people working on them can look and see them, but you're not delaying all of that complexity of like how does this actually get into the game.
And so, again, there's a whole suite of things to think about here, but just the high-level idea is, we're building one video game, let's learn how we can add new stuff to our game every day without breaking it.
And it changes your mindset.
And you can think in a way that says, like, I know how to do this.
All right, so...
Basically, we broke down a handful of questions.
I think these are fine starting points.
Again, some of this could be self-assessment, where you're at as a team.
And it could also be a starting point for a conversation.
And we're gonna look at how we do our estimation.
We're gonna prevent knowledge silos in how we work as a team.
And we're gonna build quality in as we go.
And we're gonna build one video game together and figure out ways to add to the game in a way that's not destructive.
I do want to say that this is possible.
It's really hard.
I mean, games are a really brutal industry.
And frankly, we've lost a lot of great folks who have become burned out and left.
But I do want to say that for myself, I've had some great experiences in my career and some scary ones, but it is important for us to say that we can do this.
We can build sustainable environments and ship awesome games.
I do want to talk a little bit about how we're trying to embed this in our day-to-day culture in terms of how we work as a team.
I do want to say that value statements can be like really hollow and empty.
As we started Pragma, I was pretty reticent to have the conversation about values because you see these lists.
Integrity, communication, respect, excellence.
It's like, yeah, of course I want those things, but that's kind of what I just expect.
Like those should be table stakes.
That's not very special.
And Netflix had a culture deck, and in it, they put up those exact culture words.
And then the next slide points out that that was...
That was the cultural values of Enron, which was this company that famously defrauded a ton of people.
So when we talk about values, I think the best way to do it, or at least the way that's effective for us, is talk about behaviors.
You can, if you said, are we excellent?
I'm like, I don't know, I hope so.
It's really hard to assess that.
So we try to define our values as statements of behavior, which is like, we do this, or we prefer to do it this way over that way.
That way we can check in.
These are all aspirational, right?
We're not gonna nail it on our first try.
So that's just a little bit of framing around values.
So, the theme is customer triumph.
Again, this is, for us, we make tools for game developers, so it's, we're ultimately, I hope, benefiting players.
But that's just a bland statement.
But we talk about a few different behaviors underneath that.
The first is, we'll prioritize a customer need over a theoretically perfect system.
If you've ever worked with any engineers, some really like to come up with a grand, perfect plan of the most beautiful technology that has ever existed in all of history.
And the problem with that is.
it's hard to create.
It's really not very practical.
So in our case, we have trade-offs to make because we're trying to make a product that's useful for lots of game studios.
But at the end of the day, we say we're going to prefer to make it work for this one game ahead of trying to create something that's theoretically ideal.
And that's something practical we can measure because we get to talk to our studios and say, hey, are you getting what you need?
And we had a circumstance in which we were trying to create this nice API and we had this for crafting.
And it was basically like, okay, we came up with a few basic crafting scenarios, and we built a nice little feature to power that kind of system.
And then, you know, one of our studios came back and like, yeah, but we have this very specific thing that our crafting wants to do.
And, you know, a couple members of the team were like, well, could we just like, tell them to work around it and figure it out themselves?
Because like, we had this beautiful, like, nice little system.
But we came back to this value and said, no, we got to unlock what they need.
And so in that case, we came up with a plan where we had this like...
powerful version of crafting that was kind of, it'll let you do anything, and it takes a little bit more work from the studio.
But then we kept our simple crafting system there, so that it would be more data-driven and easy for the basic cases.
So in this case, we kind of found a compromise where we still want to make great things that we're proud of, but ultimately we have to measure, are we solving a real problem?
And it's, yeah.
The connection to Crunch, of course, is that we don't also want to just spin our wheels building a bunch of features that nobody ever wants or uses.
Part of the reason as a company we started with a few studios as partners was that I wasn't excited about building technology for three years and then hoping somebody would like it.
Quality at speed.
The trade off between speed and quality is very real.
You know, It's interesting. I think there's two kind of profiles for for engineers and one might be like the cowboy coder that just like You know slaps things in really fast, and they're just going you know shooting from the hip And then we got all these like problematic ideas around that But the important things like speed and just moving fast And then we got these like architecture astronauts who just want to plan and plan and plan and right in this comply to game designers As well, you know somehow there's like brilliant ideas But we never built the game and so we're talking about trying to create a balance of like we want to work on features Like on the first day, we want to start working and start building.
At the same time, we do want to work with discipline and make sure that we're building in quality, we're reducing silos, and we're integrating all our work together into one.
Basically everything that we went through as part of the team builder process review.
So...
At the end of the day, basically what we're trying to express here is that we want to strike a balance because we do want to move fast, right? We want to iterate, we want to create, we want to make new things.
But we also have to keep in mind that we need to make sure that when we build something, it's done in the sense that we can actually ship it.
You know, it's easy to call a feature done and say it kind of works as long as you don't look too closely, and suddenly you've got like months and months worth of hardening and bug fixing and stuff right at the end of your deadline, right? Nobody ever builds that into the schedule.
Unlock teams. This is probably the most difficult one, but I think really, really key.
And the idea is that, you know, we want to...
We would rather a team build their own solution for a problem than we would getting tied up in bureaucracy.
It can be so difficult if you're at a bigger studio or publisher when it feels as though you can't get your work done without being on like six different committees.
and negotiating with 10 or 20 other teams to get priority and get the tools you need.
And so we really talk a lot about, if we're going to embody a culture in which we are trying to work together and build something healthy, we need to create an environment that feels safe for people to solve their own problems.
And again, this happens in games.
You can have issues with this.
League of Legends had four different systems for measuring time, which made the game extremely complex to operate and run because we didn't know what happened.
Worlds in, I think it was season two worlds, like the game kept crashing in production in like the world championship games and we just couldn't stop it.
So there are real problems that can happen if you create a lot of technical debt and messes.
But at the same time, if you're working on a team, you just need to be free to solve your own problems.
So we absolutely want people to get together and create shared solutions, but we're not gonna put up a lot of artificial boundaries and barriers.
Our hope is that building up a team of high morale and ownership can help people feel like they have control over their destiny and create an environment where we all want to show up every day and work on hard problems together.
So this is just the final bits.
We did talk about having long-lived teams and not treating people as resources that we shuffle around.
you know, one thing we do in terms of team stability is we actually give people the chance to create their own names.
I worked on a lot of teams where we had to be named after the feature we worked on.
And as soon as our team shipped the feature, then our name got changed.
And it's like, how do you have an identity if your name changes all the time?
It's just really interesting.
So it's a small thing, but I think it kind of reflects that value of saying, no, you're a group.
A lot of us have picked different gods from, I mean, we were all playing Hades at the time, so a lot of people picked different, you know.
But importantly, they're arbitrary names.
They don't mean anything other than just that that's the name of the team.
It's really fun.
We do not do individual performance reviews.
This is like sacred for most companies, but there's a lot of harm that can come from it.
And at the end of the day, it's like, as a business, we wanna know that we have healthy teams.
And so we can look at the team and say, are they shipping, are they delivering, are they doing what they need to do?
And we can trust them to self-manage.
If somebody on the team is struggling, we hope that they get coaching and development.
But at the end of the day, we can just say, we expect the team to deliver and do great things, and we'll let them manage themselves.
It's really empowering, we think and we hope.
You know, we do have a flexible PTO.
This is one thing that comes up though, is like, hey, maybe people feel afraid.
Again, some of that gets into the siloing stuff we talked about, but my co-founder and I, we do take time off, and we put it on the company calendar.
We let that be visible to people so that they can see.
It's safe to take time.
You know, we do remote work. It's hard, though, because I think being in person can be really valuable, too.
So we actually try to be really encouraging of if people want to get together and work in person, we absolutely support that.
But we're remote first because of the flexibility it provides and the fact that we've obviously been in pandemic.
But we're trying to embrace that and really invest in the tools.
You know, Discord has one really great feature, which is you have persistent voice channels.
And so it actually is a fundamental difference.
If people are already in channels throughout the workday, then dropping in is not all this friction and slack of like...
should we make a call, should we make a call, Zoom, Google, Hangouts, like Slack calls, you know.
So there's small things that we try to do, but it tries to make it feel like there's some actual presence. You know, we're remote, but we try to make it so that communicating is as frictionless as we can get it.
Sustainable hours, you know.
I mean, at the end of the day, we just have to make a decision about what we're doing.
I think games are so, so complex.
There's a lot of domains in which working harder just produces more output.
In games, we can literally destroy value, right?
If you can break a bunch of things, create crashes, you can take whole teams offline.
We recognize that when you're doing really complex work, it's worth protecting people's health so that they can actually continue building over time and not creating huge problems that end up becoming something we have to chase and catch up with.
Here's a list of resources, you know, these just are scratching the surface.
There's fantastic books and talks out there about a lot of these ideas, Agile processes, organizational health, and I highly encourage you to invest in the leadership and communication stuff because it can be really useful to learn how to be an effective communicator as part of your teams.
So absolutely, you know, just spend time learning and growing in these different areas.
This does conclude the talk. I really appreciate everyone for taking the time to be here.
We do have a booth at the expo, so we'd love you to stop by and say hi.
I will be at Alcove 305 here in the South Hall for 15-20 minutes afterwards, so please come by and talk more. Thank you very much. And that's it.
We've got about six minutes for questions if anyone. I think we've got a...
Mic up here.
Looks like we got one on either side.
Hello.
You were talking about pair programming and I was wondering how do you do that when you are working from home?
Yeah, pair programming from home?
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah, it's a lot harder.
I mean, we do use a bunch, we've tried a lot of different screen sharing technologies, but there are some that are dedicated for just screen sharing.
If you're using a video call feature to do a screen share, they're not very well optimized.
So there's a few tools out there.
You know, there's one called Pop and Drovio, there's TeamViewer, but I would look for the ones that are very specifically meant for doing screen share and not the ones that are just general, like video chat apps.
It is tough, but other than that, it's just being on that Discord call and then using the screen sharing tools.
Okay, thanks. Just one other quickly.
How do you ask your co-workers to pair program with you without making them feel like they don't know what they are doing or like a burden to you or maybe you being a burden to them?
Yeah, that's a great question.
And yeah, it's a lot to sit down next to somebody and work together every day.
There's a lot of social pressure.
And we try to make that, I mean, one, we're very vocal about that culture up front, just hoping that people are willing to give it a try.
And we try to set that expectation and make people feel safe.
In practice, I mean, obviously, again, some of that comes to having the humility and just being kind to people.
If people give it a chance, oftentimes you'll find that like, oh, there's no mystery.
Everybody else is also, you know, scratching their head and making mistakes.
And so if people give it a chance, oftentimes I think they can see and learn that it's okay to not know the answer.
And actually it's a really fun problem solving to actually do it side by side.
But there is a real hurdle of getting people to start.
And so the best you can do is just kind of invite that and ask people to give it a shot.
And you do want to make it as safe as you can.
Cycling through, if you're pairing with the same person for weeks or months, that can be really tough.
So also having a little bit of a schedule can help too.
Okay, thank you.
Hi, this is a great talk on the pair programming since we're going off that.
How often do repair program. Do they do it all the time? Would you do the start of a feature and then kind of break off?
Yeah, our team is quite extreme, so we basically will pair more or less full-time, but I don't think teams have to go that length to get value from it.
I do think at the outset of establishing new foundations and patterns can be a really great thing.
You know, there's this idea of mobbing, where you actually have more than two people working on a problem.
I think that that's a very hard thing to sustain, because it's hard to pay attention if you're not in it.
But when you're setting up, you know, breaking new ground, that can be a great time to kind of try to get everyone on the same page from the outset.
So I think that that is a great place to start.
Hi, great talk.
I had a question about the scheduling.
So you had a slide where you're like, forget this, this doesn't work, you don't have story one, story two, you have overlapping stories.
And so my question about that is, how can you plan that sort of schedule with dependencies?
Yeah, so this is something that there's like, pure Agile theory that says like, just don't have dependencies, which is ridiculous.
Like it just doesn't happen that way.
And so.
I mean, one way to think about that is, you're probably gonna have a through line of who's working on what, and so that sequencing is gonna be somewhat natural in the sense that clearly, if one thing has to come before the next, especially again, we have the pairing thing, but we will try to have a through line, meaning one person might stay on and they have pairs rotating in and out.
And so, at the end of the day, You get into certain theories where they get into swim lanes, and it's like, oh, we have all these different threads of execution at once.
The only caution about going really hard on that front is that that very quickly turns into very siloed work, where everybody has one assignment on their own lane, and then everything's just going at its own different pace.
So, it's reasonable to think about swim lanes in terms of like, okay, but there is a through line of this kind of shared thing with dependencies.
But I would say that...
Try to make that a little bit more the exception, in the sense you still want it to feel like the whole team is solving the main priorities together.
And then if you have to deal with, I mean basically it's just saying, yeah you will have that, be aware of it.
Try not to get yourself in a circumstance if you can, where you've got like three hard dependency separate threads, because then it gets really siloed.
So I don't know if that helps all the way, but.
I appreciate it, thank you.
Thank you.
Hi, I really enjoy the talk.
I run a startup with several people working alongside me on a game we've been working on for a few years.
And we have kind of developed a crunch culture just because we have such a lack of resources that it feels like every update really is important.
We don't have any backing or anything, so it's super big.
I mean, I'm, as the director of the whole project, I'm obviously responsible for this sort of culture, but...
I wonder, is there a balance?
Because there are some times where it's like, no, this is a really critical time.
Like you might need to come in on a weekend and work.
And I mean, is some of that acceptable or.
Yeah, I mean, again, I think we all do this because we love it.
And if I said that I never like worked late in my career, I think that would be pretty, pretty false.
I think the question there are two things that you have to account for as a team, which one is sustainability, which is like.
This may work, may work for six months or a year, but are people slowly getting burned out to the point where they're ultimately gonna have to quit or leave the project or move on?
And so you really have to weigh that.
So the question becomes like, are you genuinely pushing in a moment and in a time where it's just like, hey.
you know, this is key to what we're doing.
Because there have been times where I've been in the room with folks under some kind of crisis, and there can be some camaraderie built.
But if you're trying to sustain that every day, I think it's really tough.
And one thing, you know, I was actually talking to somebody on the plane over to GDC, and he asked about like publisher pressure, and he's like, well, what if they cancel your team and your project's done?
And so, you know, One thought there is that you have to have a steady state so that you can push when you need to, and you hope that pushing becomes an opt-in part of the passionate team choosing to do so with intentionality and a plan.
I've seen teams that are just like, well, we're gonna go eight or nine hours a day.
They're not pushing crazy on hours, but they're locked in.
They're like, we're gonna schedule lunch very precisely, and we're gonna be here in our seats committed.
And even that can actually be hard to sustain, but you can get a lot from being more kind of disciplined in the moment, but if you don't have any pressure like release, then I think ultimately it's just gonna be rough.
And so I don't know how useful that advice is, but I would just say, of course, there will be a time and a moment where you're just like, well, but I gotta get this thing done.
But really ask yourself, is this an exception?
And are the people who are there, do they have the capacity to try to make this thing come to life, because they want to make it real.
And they've had the safety and the, you know, with the day to day.
Thank you.
Thanks for the talk. I had a couple questions. One of them is regarding the discovery work.
So you mentioned that when reaching a deadline you should basically have less and less discovery work. So should you go to like a nice to have backlog or something?
Yeah, absolutely. Right. And that gets like Games are so creative, so it's like sometimes the funnest things happen because somebody put it in there because they were just really excited about it.
And so I think having that kind of nice to have, there will be moments in time, again, some of this gets to dependencies.
Sometimes you got really critical stuff that's kind of.
is single threaded, you can't work on it in parallel.
And so that, you know, there's an opportunity to pull in some less lower priority work that just polishes things out and makes it nice to have.
So, you know, I think it's critical to have a prioritized backlog.
You have to know what's most important in order.
But that doesn't mean you're not gonna go deeper in the list and pull something up because it happens to fit who's available at the moment or what, you know.
So it's a dynamic.
thing, so absolutely.
Sometimes those become graveyards, and that's okay.
Like, accept that those things are probably not gonna get done, but sometimes there is those like, really interesting little, you know, nice to haves that people will just put in because they've got, you know, time in between larger efforts.
OK, and then the next question is regarding pair programming.
Do you mean actual streaming one dude typing and the other one looking at it?
Or is it more like a code review?
Like I'll submit this PR, or I'll work on this feature, or this tech doc in which we'll plan together and then proceed to build it together?
Yeah, so I mean we do like full pair programming in which we actually are coding together and switching between who's kind of driving and Obviously having that whiteboard session doing some planning together can still be totally effective. So right we do some of that as well So it just kind of depends I think what you don't get though when you do a review or a whiteboard sketch is that you don't get two Experts in the system. You're still gonna have that knowledge silo. So, you know, it is a trade-off again I'm not being hyper prescriptive saying you have to do it this way, but So truly doing the work together is the way that you walk away with two experts.
And doing those collaborations and code reviews, again, can help.
They can create some knowledge sharing.
So they're absolutely useful as well.
Thank you.
Thank you for the talk. At the very end, you were talking about some of the cultural, I guess, statements that your company has been going through.
But you didn't talk about the process of developing those as more like, just like how did you structure those conversations and those organization points to like, decide, oh, this point needs to be refined, or this point is missing the general goal of this cultural statement.
Yeah, I don't think I listed it in the resources, but the book I mentioned at the outset, Pat Lencioni's The Advantage, it's actually a super practical framework for building company culture, and it gives you some very nice advice about like, here, you know, like, go do it like this.
And so there's some different activities that, you know, none of them are crazy, but it's like, we all got in a room, we all kind of put together our own cluster of ideas and conversations and then talked about it as a leadership group.
It has to be living.
So we have a literal Google Doc with our, it's called the company playbook, and those values are in there, and we change them, right?
And we talk about them.
And we do a weekly all hands, and I will kind of, spend some time with the team saying like, oh, here's what I observed this week.
Like, hey, we saw that some folks helped this game studio and kind of went above and beyond.
We're like, hey, that's the customer success.
So talking about it every week makes it way more real than most of what I've experienced, which is we have these four bullet points that we write down once, nobody ever looks at them again.
So that can be really helpful.
Yeah, that's the thing we're really hoping to avoid moving forward.
So thank you for sharing that.
Yeah, the weekly, yeah, all hands has been a really cool way to talk about it.
And sometimes we do talk about it in the negative, like, oh, we said we'd do it like this, but the unlocked teams is hard, right?
Because we want coordination, too.
Thank you.
Thank you.
Thanks for the talk.
I'll ask you something.
How to avoid knowledge silos in leadership positions and places?
And also when you are, for example, like I've seen many companies, especially smaller ones, in which leaders crunch so that the production team won't have to crunch.
So how to share this with the team without it being a burden to anyone involved in the process?
Yeah, I think that this is probably the hairiest part of the conversation that we don't go deep on.
There's a couple different things that I'll think about.
And part of it too is, now that I'm a lot further away, I'm not writing code every day.
The two things I'll keep in mind are...
you know, across your leadership team, one, you do have to have intentional processes and plans.
Like, we have to get together and talk about things.
But of course, you know, I think we all have some kind of meetings.
There's a couple things.
So one, there is this idea of like, what if you paired on other stuff too?
Which is an interesting one.
I can't say I've ever totally tried that.
But it is like how we're trying to build our cultural statements and values.
So we do two day off sites with the leadership team to really sit down and talk at length about what's important for the business and how do we run our teams and who needs help and support.
And I know that none of those are very tactically valuable.
So I guess when we bring it back to running a team and then maybe leadership not being connected to that, what I will say, and it kind of came up in the story about the crunch conversation at the outset of the Team Builder Project was, if you're a leader and you can't see the team working every day, there is a lot of fear that a leader is gonna have, because they can't watch the team running and operating.
And so there is a lot of work you can do, especially if you're a frontline lead.
Try to make the team's efforts and experiments and iterations visible, and that takes extra work.
So I'm not gonna say that that comes for free, but I will say, I've seen it both, we now have VCs and investors, and we have a board member who shows up once every three months.
They can't see what's happening at the company.
So there's real work you can do to try to make the team's work visible.
And I do think that that can create a lot more safety and trust.
I mean, a lot of us have lived the bad publisher relationship where the publisher shows up once every three months, six months, and they're just like, show me all those features you committed to.
And you're like, we're trying to build a video game and it can get really difficult.
So I do think, not easy, but you put time and energy in making your work visible, even the failed experiments, right?
Even the stuff that didn't work because then it makes it a little bit more real.
Thank you.
Alright, I think we're over time, so let's do this as the last one.
Thanks Chris.
So I was hoping you could talk one more time about the keeping teams together and some of the team switching points that you made.
So in some of my recent experience, we have had some team switching and that's been largely based on like moving from milestone to milestone or feature to feature and those have kind of required different resources or different groupings of people together.
I was wondering, you know, from your perspective, is that always a flaw in the planning or is that a necessary kind of just step in the development phase?
Yeah, I think that's a great call out.
Because first of all, like, you know, especially there are certain roles that are probably, you don't have a full-time need for that person on the team every day.
So I guess I shouldn't try to make it sound like hyper-prescriptive, where like, teams never change.
And we're growing as a company, so our teams have to change, because quite literally, if we bring on more people, you know, we can see the size of what makes a healthy team.
So, there are two things that I've seen work reasonably well.
You know, we had motion graphics and UI, and some of those...
creative roles that support specific parts of a project, those tend to be more shared resource.
But the way you approach that can vastly change how that dynamic works.
What I've seen work very poorly is that person is assigned to four jobs at once, and they're just like ripping their hair out, running across building to team to team, trying to do everything at once.
So that would be a very poor structure for that.
What we would always like to do and prefer is like you embed the person on the team, and they may not be that long lived team member based on the nature of the work they're doing.
But they can still show up Be present. If you're in office, physically they should be co-located with the team if you've got that.
If they're not, whatever the team's rituals are, they should be a part of that for the time that they're there.
And of course, you know, you talk about, like, yeah, but we've got too many things to do.
But at some level, if you ask somebody to split their time across too many things at once, you know, so it's like maybe somebody could split across two teams.
But even that, if they're going to every planning ritual and everything, that gets exhausting.
So, 100%, your teams will change composition and maybe the next initiative, you just need a different makeup of people, but you wanna be making small changes to the composition to make it work.
And it also changes how you look for people.
We do really prioritize generalists who aren't afraid to work across boundaries.
You know, they may not be the most efficient if they're not a deep expert, but if they're comfortable just solving problems, it does let you keep your teams more intact.
Thanks, Chris.
Yeah.
Well, thank you so much again.
Appreciate everyone taking the time to be here.
Thank you.
Thank you.
Thank you.
