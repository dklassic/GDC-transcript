Hello everyone.
Thank you all for joining us.
My name is Bart≈Çomiej Wasiak.
I'm a senior software engineer at Respawn.
And in this presentation, I'm going to discuss different methods of using physics for animated characters in Star Wars Jedi Fallen Order.
So what is actually physical animation?
So instead of simply playing an animation, we can use physics to move rectal bodies to follow the animation pose.
And one of the consequences of that is that with physics, we can include collisions.
So we play the same animation while at the same time, we can detect collisions and prevent clipping.
So in this video, we have two characters playing the same animation.
So the character on the left just simply plays the animation as usual, but the second character on the right, it uses physics to play the same moves.
So we can see that the character on the left just clips through the environment, while the character on the right avoids collisions by slightly changing the animation.
So in general, we have three main methods of driving physics to follow the animation.
So the first method is using motors. So the motor is a part of the joint constraint between regular bodies.
And they use a specified animation target to generate the local force between connected bodies.
And that local force drives bodies to follow the animation target.
The second method is using velocities. So in this case, we compute a velocity needed to move the body from one place to another during a given frame time.
And in this way, we can force the body to move to reach the animation target.
And the third method is using constraints. So in this case, we create a new constraint between a dynamic body of the ragdoll and the animation target. And all parameters for this new constraint, they define how we force the dynamic body to follow the animation target.
And in our game, we started adding physical animation using motors. So this is the first method on this list.
And we added it first on stormtroopers when they are force pulled by the hero.
In this case, he bodies kinematic, so it strictly follows the animation, but all the other bodies are driven by motors. And red pose, so red objects, they represent a pose only from animation, so without any physics added.
And we can observe how, thanks to physical animation, legs are nicely colliding and interacting, actually, with an environment.
So two-way interaction.
And pure animation, without any physics added, so red objects, would simply just clip for collisions.
And our game uses Unreal Engine 4 and NVIDIA Physics.
as the physics engine.
And I would like to share some essential details of our implementation.
So first of all, there are a few physics parameters that are important to set up correctly.
So the first one is the number of solver iterations.
So default values in Unreal are 8 and 1.
And for motors, nothing really works as you would expect with these settings.
And in our game and overall, when you create your own implementation, you need to go higher with these settings. You need to find the best one that fits your implementation and your needs. And in our case, it was 64 and 32.
Also, going forward, we are using a flag e-acceleration, which is enabled for every joint. It makes it easier to set up all parameters related to mass, especially.
And the topic of friction and restitution.
So these parameters, they tend to cause a lot of problems for physical animation, because higher values of friction, they make harder for physics to reach the animation target.
And by default, we use just low values for friction and restitution.
And in the case, actually, of that force-pulled Stormtrooper, we actually use no friction at all to make it easy for the physics to reach the animation target.
And another big topic here in terms of implementation details is continuous collision detection. So it needs to be enabled to have really high quality results, but it is better to disable CCD between bodies in the same rectangle.
The problem overall, big problem here is that with CCD enabled, constraint projection does not work very well in physics.
So what we did, we actually ended up doing that we wrote our own piece of code to perform linear projection for all joints.
So just for every joint we kind of bring two bodies together if they separate too much above a given threshold.
So in our game, after force-pulled Stormtroopers, another case where we started to use physical animation is the death of Stormtroopers.
So here, we just simply play a death animation.
And as you can see, we have really big flips and acrobatic movements from animations.
And in the base case, we were just enabling red regular physics near the very end of the animation to have that like free fall with the gravity. And this solution, it worked really well for open space, but close to other collisions, as we can see here in this video, it does not give good results. So, limbs are clipping through collisions.
and kind of overall the sequence it does not look very natural.
So to improve that depth sequence we enable physical animation on the whole character and we are using motors for all joints but the main question was what to do about the root body which is in this case the hip body.
It can be kinematic because it would easily penetrate walls as the animation would just simply go through the wall But we wanted still like to make that root body to follow the animation strictly to perform this big acrobatic So we need both collisions and we need we need that root body to follow the animation.
So the solution was to keep the hip body as physically simulated body and create a new constraint for that body.
And the constraint is between the hip body and the given animation target.
So this new constraint kind of drags the physics body of the hip bone to follow the animation target.
And for that constraint, for that new constraint, we remove all degrees of freedom.
So we lock both linear and angular movement for that constraint.
It gives the strongest matching with the animation to perform all these big flips.
And the question was, with this new solution, what happens when we have an obstacle?
So in other words, what to do if the hip body hits the wall?
and the animation target still pushes forward.
So what to do about that physical body, which is just colliding right now with the wall?
So what we do, we monitor the distance between the actual position of the root body and that desired animation target.
And if the constraint drive for that hip body is unable to reach the target within some we just turn ragdoll to a free fall mode with the gravity.
So this is how it looks, the same sequence using physical animation.
So we can see how the root body detects that it is unable to move through the wall, and it turns the ragdoll into falling with gravity.
So it worked really nice for our case.
So these previous scenarios, they were focused on matching the animation pose closely and supporting collisions. So that was the case for stormtroopers in our game. But right now I would like to move to physical animation we did for the hero. And for the hero, actually collisions ended up as not an important feature.
And actually, the fluidity of natural movement and the smoothness of natural movement was actually the top priority for us. And so we started with a ledge hang for the hero, so the special navigation for the hero. And here, hands and forearms are kinematic, so we strictly follow the animation. And all the other bodies are fully physics-driven, just by So we can, yeah, we can actually observe how just pure animation pose, so this red object is more static.
And physics is adding this nice looking layer of motion.
Also because of that, actually animators could focus more on just on core poses and add and use physical animation to add that additional fluidity to the motion.
So it worked really well.
We had really great results with these settings.
So using only motors to drive physics to the animation pose really gives nice looking results.
It really adds a lot of fluidity to the motion. And we tried to extend the same approach to other hero navigations. And the results were not so great.
So I have an example of sliding with weak motor settings.
So whenever there's an obstacle or some fast-changing motion, the hero just swings way too much.
So we tried with stronger motors.
In that case, character was just too stiff, and results were also not really satisfying us.
And we also tried different approaches, mixing motors with velocities for all bodies.
But still, we didn't have substantially better results.
So we tried something different.
we came up with a different solution. We tried back weaker motor settings to get that springy fluid behavior and the new solution for us was a local space blend with animation pose.
And in case of this sliding we just blend 50 percent of the physics pops.
So here is the final result.
And it started to look really better, especially the feeling of it when you were controlling the hero with the stick.
The character really nicely reacts to your movement.
It isn't too stiff.
At the same time, reactions are not too swingy.
And here is how it looks in the final game.
We have different pose for the hero, but the whole, action sequence, really physical animation gives a lot of additional fluidity and reactions to every change in movement direction or every collision that happens. So with this new kind of approach, we started to use it in other cases. So here is climbing where we blend just 40% of physics.
So here, kind of the final result is subtle, but it gives that nice fluidity to the whole movement.
Here we have wind fields, and in this case, we blend 45% of physics with the animation.
And here ropes where we blend again 40% of physics.
So we can see how legs nicely have some inertia after we stop the movement.
And additionally, it gives really nice additional motion to the hero.
And After that, we started again to have challenging cases.
So this one was balanced beam hang.
It was really challenging to make it right.
We can see here that it is 50% physics bland.
But it was really hard to find stable movement for this case.
It is because of these like very aggressive characters moves and the character just swings way too much and the whole final position of the hero is just way too off from the animation.
So we tried here a different approach.
So, what we did, we added a partial velocity drive for just one body to stabilize the movement.
So here's the code how we did that.
So...
We compute first the desired linear velocity.
So this is the velocity needed to fully move the body from the current position to the target position from the animation in one frame.
Then we read the current linear velocity of the body and we perform just linear interpolation between that current velocity and the desired velocity computed in the first line.
So this is the way we kind of like feed current velocity, whatever is happening from physics point of view currently to that body, to the desired velocity that is just tries to move exactly as it is, as the movement looks from the animation. And the variable t is just the amount, it is just the amount of the blend. For the balance beam, we use 50% of the velocity drive for the hip body. And Here are the results of this new solution.
So using dispersion velocity drive just for the hip body nicely stabilizes the whole movement, actually without affecting the behavior for all other bodies.
So it kind of keeps this fluid behavior for all other joints, which are just fully driven by motors.
And still, we don't go with too swingy motion.
So we can really see how nicely the overall character reacts to the motion.
So these previous cases, they were enhancing some special navigation state for the hero.
But what about the ground movement?
So we tried to do something with a normal hero walking or running on the ground, but we did not see much opportunity for improvements in running or walking cycles, except that starts, stops, and turnings were promising to try our new technology. So here is the video.
And we focused only on the hero's arms. And overall, we have more complex logic.
when to start a specific physical animation either for start, stop or turning.
And every physical animation lasts for 2 seconds and blends out during that time.
It is a subtle effect as we can see on the video.
But it smooths out some transitions between different animations and adds some inertia to the movement.
And here we achieve really good results with blending just 40% of physics.
So we can see how sometimes the arm lags behind the red object. So lags behind animation target.
Or...
after a while it kind of like with additional inertia just is a bit farther than the animation target so it's really giving nice little touch physical touch to the whole movement Still, however, for some cases, for some occasional things, we had a too big difference between physics pose and the desired animation pose.
So we didn't want to add any velocity drive because it would change the overall behavior for motors.
and we came up with something new.
So we added again a new constraint, this time between a wrist body and the animation target.
The constraint allows for free angular movement, but it has a distance limit for linear movement.
So in our case, it was 25 units.
So the arm is free to move within the threshold.
in this case of 25 units with free angular movement and linear movement limited to that distance.
So if it is too far away from the target, this constraint, it is bringing back.
the constraint is bringing back closer to the animation target. If it is within the distance threshold the arm is free to move as desired. So with that constraint edit we can see on this image that the arm is not so far away as it is on the on the left image. So really it is giving us results exactly what we needed here.
And we had also a similar solution to simulate physics on the hero's arms during walking on the balance beam. So in this case, it gives really a nice soft feeling that reflects that careful movement along the balance beam. It was working really nicely in this case.
And the third big case of physical animation in our game is BodyDroidBD1.
So this is a special character companion droid and spends most of the time attached to the hero's back.
And we wanted to add a kind of relaxed physical animation to make the droid react naturally to every hero's move.
So here is how it looks in the game. So the bottom parts of the droid's legs are kinematic and all the other bodies have full physics and there's no animation blending. So this is 100% physics. And there are no angular limits for any joints.
So we can see how Yeah, nicely and naturally the droid behaves with some additional inertia and it reacts to the hero's moves either doing action or just movement. It is especially visible here during sliding when the droid, yeah, nicely swings with the hero. It was working really, really well here.
Still, for some very fast hero's moves.
We had some problem to support physics on the droid.
Physical animation could become unstable in such cases.
So somehow we had to restrict droid's moves.
So again we add a new constraint but this time between the droid's head and the animation target.
But this time we change the distance limit, the distance threshold dynamically.
So if the body moves slowly, the distance is getting bigger to allow more free movement.
But if the body moves too fast, the distance to allow that free movement is getting closer to zero to keep the head very near the animation target.
And actually, in the case of strict zero for very high velocity, we just switch the constraint mode from limited to locked to give the strongest watching.
And this is how it looks for this hero, like very fast movement here.
So we have a comparison on the left where there is no constraint enabled.
So we can observe how the droid's head clips almost completely through the hero during that little moment. Yeah, exactly here. And on the right where the constraint for the droid's head is enabled.
we can see that it nicely stays in place and still the droid keeps his physical behavior at slower speeds. So we don't really alter somehow this behavior during slower movement.
But whenever very high speed action happens that could potentially make the droid to clip through the hero or just become unstable.
that constraint is limiting almost to zero its distance threshold to keep the droid's head where it should be, where the animation target is.
Overall, actually that implementation of physical animation for the droid was really challenging. There were a few reasons behind it. So We have 85% scale on the droid when it's attached to the hero and working and dealing with some custom scale settings is never really fun.
We had also a problem like the order of the execution with attaching. So potentially we have physics running on the droid when also we have physics active on the hero. So that was actually the case during sliding navigation when we had hero with some physical animation and we had also the droid with physical animation.
So there were really challenges to try to properly execute it in order.
Also, we had a problem that the droids physical animation was looking a bit differently with variable frame time.
We had good looking behavior at 30 FPS, but we had very steep behavior at 60 FPS.
So all these settings, all these things were making the droid really challenging in terms of implementation.
And we came up with these solutions.
So in our game, every physical animation, which does not require collisions, which is the case of the droid and in many cases for the hero, is running within its own physics scene.
And the physics scene is simulated at a fixed frame time, regardless of the hardware.
And we add predicted movement for the remaining time left to simulate.
And because we have these exclusive physics scenes we can control when they are simulated.
So we run physical animation on the hero first and having these results from the hero we prepare and run the physical animation on the droid.
So this was our third big case for physical animation in Star Wars Jedi Fallen Order.
I'd like to summarize the things I presented here.
So I described a few important details about physics integration.
So the numbers of iterations, friction on institution, and CCD with constraints projection.
And I described how we use the constraint to drive the ragdoll root body, the heap body.
So that was the case for stormtroopers. And if that root body diverges above some threshold from the animation target, we turn the whole ragdoll to a free fall mode.
We also use a lot of local space blending between pure animation and motor-driven bodies.
And actually we prefer weaker motor settings to achieve that fluid behavior.
We also, in some cases, we also use partial velocity drive for just one body to stabilize the movement.
and we create a new constraint between ragdoll body and the animation target to set movement some movement limits like it was the case for a wrist bone for the ground navigation for the hero and for the droid's head. And in the case of the droid's head, we also dynamically change that movement limit depending on the head velocity.
And kind of implementation detail, but it was important also for us to make it right so that we have separate physics scenes for the attached droid to control better the flow of the physical animation. And there are a few things actually I wish I knew before we started to work on physical animation.
So at the beginning it is really good to know, it is a challenge but it is good to know what is your goal of adding physical animation in your game.
Do you want to support collisions while playing the animation or do you want to change visual outcome of the movement?
Because both cases they require quite different approach and different set of settings, different features from physical animation.
And also...
All physics parameters, they kind of influence each other.
You change one parameter and it makes something else to work better or worse.
And you need to revisit previously failed cases all the time.
You need to check your new knowledge.
Is it working better or worse?
Just to apply your new solutions to some previous cases.
And when you have...
Active Ragdoll physics, which is active almost all the time, things that normally work, they kind of tend to break.
So for example, order of updates for your actors, entities, components, some dependencies between physics and other systems.
So for example, cloth needs to be after physics for some cases.
or animation notifies.
These are things that when you don't have physics running all the time, they kind of work correctly.
But when you enable physics and you have a lot of dependencies with other systems, you need to really be careful with these things to make it work correctly.
I'd like to highlight and mention two previous great presentation on a similar topic.
So this is physics animation in Uncharted 4 at GDC 2017 and physics-driven regdos and animation IDEA from GDC 2018. Please check these great presentations to find some other implementation details how they did physics for their characters.
And Respawn is hiring.
Please check our website, respawn.com careers.
And I strongly encourage you to do it.
So Respawn is always hiring.
So please check, maybe there is something interesting for you.
So thank you so much.
And I'm happy to answer all your questions.
