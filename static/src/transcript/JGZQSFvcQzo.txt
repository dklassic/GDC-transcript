Hi everyone, my name's John.
My name's Ryan.
And we're gonna teach you some amazing stuff over the next little while.
We're gonna teach about what narrative greyboxing is.
We're gonna show you how to save time and money and write better stories.
And we're gonna show you how it's a good idea for writers to be programmers, even just a little bit.
So I am John Manning, I work at a studio called Secret Lab, we're based down here in Tasmania, Australia, and we're best known for having worked on Night in the Woods, and I'm also the lead developer of a project called Yarnspinner, which you'll hear quite a bit about over the next little while.
And I'm Ryan, I'm the author of a couple of choose your own path books, which are nonlinear versions of Shakespeare, like To Be or Not To Be, Romeo and or Juliet.
I've also written a bunch of comics and in terms of games I've contributed to Destiny 2 DLC, Stick It to the Man and Ava which is a fun game where you play an avocado and I've also got some development experience too, not just as a writer.
So lots and lots of dialogue tools are node-based, and node-based means that each line of dialogue is a node on a graph, and those nodes are connected from one point to the next, and if a node has multiple connections coming out of it, that means there's options.
This is the paradigm used for lots of great commercial tools out there like ChatMapper, ArticyDraft, lots of particularly great dialogue tools on engine-specific asset stores.
Plus of course there are lots of studios who create their own tools to suit their own needs and there are a lot of great GDC talks out there about these internal processes.
So for example Kari Patel and David Simchick gave a great talk at GDC 2019 about the Obsidian internal dialogue tool.
Elon Ruskin did a great talk, Rule Databases for Textual Dialogue and Game Logic in 2012 and also Jason Gregory did a talk which is also fantastic about the internal dialogue system used in The Last of Us at Naughty Dog.
Now, all of these are effectively structured data entry.
You're working with a data structure that your designers have put together and that you're filling in.
And we can call these graph approaches to branching dialog.
These are very, very easy to visualize.
You can show someone the graph and see the structure.
These are less easy to write because you're often going in and out of node views and you're drawing lines between them and it can get fiddly.
One of the most popular tools for this is spreadsheets, where you simply have a grid of data with lines dropped in.
It works really well for simple things, but for branching dialogue, it's less effective.
I've used these tools as a writer before and they get the job done, but you kind of wonder, is there a better way?
Spoilers. So something that we've been working on is a bit of an alternate approach. Rather than working with a graph or a table, we're going to talk about tools that combine a writer-friendly screenplay approach with a programmer-friendly language approach.
And we'll focus on a particular tool as our example, but as we'll make clear, this is a pretty broadly applicable technique because we want to have flow control and ease of writing.
So Yarnspinner is our tool that has been in use for a while now.
It is a combination of a screenplay and also a gameplay flow language.
It is designed so that you can write lines of dialogue and just stop there if that's all you want, but you can do more as well.
It's funny you should mention screenplay format because I've used that before.
Spreadsheets are often used when the game is constantly calling out this state of line, give me the next line.
And with screenplay, it's more like the game is saying, scene, give me the next scene.
And this works great when you have sort of linear chunks of back and forth for your story, if it's more like an interactive movie.
But you kind of get the sense of...
You know, this is the tool we already have, so this is the tool we're going to be using.
It's not designed for gameplay, it's designed for screens, for screenplays.
So to augment the screenplay format, Yarnspinner is also a full programming language.
And here's where it gets interesting, because when you turn your writers into programmers, that's the title of the talk.
Then you enable some really interesting workflows and possibilities.
So Yarnspinner isn't the first system out there that tries to create a story programming language.
Games going back to the Infinity Engine and earlier, so games like Baldur's Gate and Icewind Dale, those kinds of things, use a scripting language to control their dialogue.
Double Fine also has got some great talks on the on the GDC Vault about how they did a similar thing for Brutal Legend and Broken Age.
And sometimes you're not even that fancy.
I've done writing for games in Word documents, I've done it in Google Docs, and when you're writing a branching narrative in a flat structure like a Google Doc, it can get a little messy.
As you can see on this slide, here's a situation adapted from a natural game I wrote where we're keeping track of whether or not this professor has chalk simply by saying if the professor has chalk in the document. It made it decent for me to write because I could keep all that state in my head, but you're copying and pasting by hand into the game at this point, and it's not a super terrific workflow. All right, and also how do you encode player can't progress? So Yarnspinner is an open source project. It is released under the MIT open source license. It's available on GitHub, and it's heavily inspired by Twine and was used first in the dollar system for Night in the Woods.
Entwined can be a bit of a mess.
This is a screenshot of my book To Be or Not To Be, where you can see the nodes, but it's very hard to get a sense of what's going on.
I try to keep things organized by using the horizontal axis as your position in the narrative of the story.
and the vertical axis is basically being what character you are.
But even with that, I'm reduced to stitching together screenshots and circling to say which point represents which place in the story.
And it only gets more complicated when you add in things like variables to keep track of state, which are going to be invisible in this sort of view.
One of the really good things about Twine though is it's got a really, really simple and approachable syntax that is great for people who are not full-time programmers.
So we basically just took that and ran with it.
So Yarnspinner uses Twine-like syntax combined with screenplay semantics to create, well, its entire language.
So in Yarnspinner, lines of text are individual lines of dialogue.
This means that a screenplay is valid Yarn code. We have a minimal syntax for options, we have flow control, we have commands, and it scales to compact systems quite well as you'll soon see.
So what do we mean when we say a story programming language?
Well, Yarnspinner works like this.
You, the writer, write your dialogue out as yarn script in a text file.
It looks very similar to a screenplay with occasional flow control syntax.
It's quite easy to pick up and read.
The editor tools or the engine at runtime reads that text that you've written and parses it into nodes. So the individual nodes on the graph that we were talking about earlier. During gameplay Yarnspinner moves from node to node, sending the game lines of dialogue, options to show to the player, commands to run, and also makes decisions on which node to move to next based on player choices and on the game state.
So here's an example.
Here's a chunk from Night in the Woods that shows all of these elements.
So up top, you've got some flow control.
So we're checking the value of a variable called Angus, and then we set some new value into that variable Angus.
We do another test on another one called Did an Angus Investigation Quest.
A command there, close all, which in Night in the Woods happens to be a special command that gets rid of all of the dialogue boxes on the screen.
Then, after that, we've got some lines.
So we have lines back and forth between Angus and a character B.
Then at the very bottom, we've got options.
So the player can choose to say lasagna or brownies, and based on those choices, different lines are run.
So Yarnspinner is just running this script much like it would if it was a program, because it is a program.
So arrows are a feature that we really quite like in this because you don't have to create nodes and connect them with lines.
It makes creating branching dialogue super, super cheap to do, which means that writers are a lot freer and they don't have to go, oh, I could add a choice, but that would mean a whole 10 more clicks.
Yeah, and it also lets you experiment with the story quickly when you're writing.
You can throw in a choice and see where it takes you and then decide, you know what, this is great, I'm going to follow up on this, or you know what, this is horrible, I'm just going to cut it and keep going with the narrative.
It's very much an experimental sort of play space for the writer.
We also found it to be really useful for cutscenes.
So every cutscene in Night in the Woods is a yarn script, and it was really, really useful for solving the problem of general linear content delivery.
So in addition to having lines run, we also have stuff like, in this script here, we tell a fountain to stop playing an animation, we fade out the music over the course of three seconds, and we also wait for three seconds, and then we run some lines of dialogue.
So when you're writing, it lets you imagine the kind of things you'd like to see and even drop in roughed in code for what that might look like, which lets you just build the story and then have these pieces left over for the developer to, you know, actually develop for you.
So story languages like this are kind of the halfway point between screenplays and graphs.
You're writing a top-to-bottom text document in a text editor in a very familiar way for most people to write, but you're also expressing more complex branching structures much like a programmer does, and you're doing both of these in the exact same place.
So with that in mind, as we were building this, we went, hey, this is getting more interesting, more popular, more people are using it, that's great.
And it turned into a full project.
So why not make a cool demo game for it?
So this is where I come in.
John contacted me and said, hey, are you interested in writing, say, a short five-minute sort of demo game just to show what Yarnspinner can do?
And I said, sure, and then came back with this pitch for a story called I Feel Fine about a robot pinned to the floor.
of this space station that's going to be destroyed by an asteroid in three days.
So it's very simple. One room nailed to the floor. You can't even move.
We'll just have conversations with characters throughout this story as we go.
And this is what I sent to John at the end of the pitch saying, hey, you know, what do you think? There's a lot of options here. It's very open.
I presume we're going to iterate on this and there'll be a whole bunch of conversations we'll have to have. Where do you want to take it from here?
And where we took it from there was John basically just sending me a little Unity app that I could drop scripts into and saying, have fun, let me know what you come up with. Which I was not expecting, but made for a really interesting development cycle because I could just start writing. I started writing a game. What John sent me is what you can see on the screen here, basically a little demo script that showed here's how characters talk, here's what choices look like, here's some basic controls, and go for it. Have fun. Let me know if you need anything.
And based on the system that we had put together, it actually honestly didn't really occur to me to send Ryan anything different because we'd already built up the system that allowed a writer to just sit down and write.
So yeah, I was surprised that he was surprised that I was surprised.
So we built this thing.
It took about a day to throw together this little demo thing and I sent it off to Ryan.
And Ryan took that and turned it into something just staggeringly huge.
Yeah, I sort of ended up with about an hour worth of gameplay, a three-day structure, multiple endings, character romance options. It turns out by giving me the tools to do that, I would start doing things like that. And here's an example of the game code as it is today. If you look, it's the exact same stuff that John sent me, the same control structures, the same ways to make characters speak, only now it's for an actual game having passed through the hands of an actual writer.
This is what the tool that John sent me looks like.
And to use it, I would just hit the reload script button in it, which reloaded the game and let me debug my story exactly the way a developer would debug their code.
And once I got used to that, once I was used to this development cycle, I asked him to send me a new version that displayed the content of variables.
in the game on the screen, which made it even easier for me, which unlocked this standard development cycle of test, correct, test, correct, this iterative process, until I could get the story to a point where it's done, it's ready to go. In the same way, a developer would debug their code to a point where they're confident with it to send it off to somebody else.
And I'm the writer doing this instead of the developer doing it.
So here's what worked well. It was fast authoring and easy editing even at a late stage.
This was a game with a three-day story structure that I wrote in about three days. I just could go off in a corner of my computer, get in the zone, and just write. It functioned effectively as a story document, a text file that I could play, which was great. And of course, since it is just text, it's really easy for any sort of version tracking software to work well with this.
But it wasn't perfect.
The sandbox the Arran Spinner gave me wasn't quite as big as I would have liked.
There was one point where I wanted to use an array and I emailed John saying, hey John, how we looking on arrays?
And he wrote back and said, hey Ryan, how we looking on if statements?
Which actually speaks to the power of the Arran Spinner because I could implement what I needed using that workaround of if statements.
And I'll give you an example.
Here's a shot of the tool at the beginning of the game.
Well, there's a couple of characters who want to speak to you. There's Annex who's rich who says I'm waiting in line I want to talk to you. There is beef chief. I got to name my own characters who's also waiting in line There is Chomsky the dog who's saying I do have been waiting in line. It's my turn and NX offers to pay you to go first and you have to choose who goes first. And what I wanted to have was an array where you just kept track of who you've already spoken to, but I didn't actually need it. I could emulate that as you can see on this slide with just a series of if statements, a variable for each character keeping track of whether or not we spoke to them, and you built effectively the same structure out of a simple series of ifs and else.
So lots of programming languages think in terms of domain-specific languages, so syntax and APIs that are good for describing a solution to a very limited problem domain.
Yarnspinner is a domain-specific language for branching dialogue.
This is really useful in many narrative games because the logic of a scene, so who says and does what, is the story of the game.
And this leads us to a thing that we've been calling narrative greyboxing.
So level designers are used to greyboxing their environments, blocking out their geometry with rough shapes to get an idea of the shape and flow of the environment, because you can figure out that environment before you commit to the production of expensive art.
In lots of narrative games, the logic of a scene is the same thing as the scene's story, so control over the logic of a game is useful because it means that a writer can set up whatever small-scale mini-systems that they need without having to wait for a programmer to add support.
And the inverse is also true.
A programmer can anticipate a need for a system, build it, and then add in some temporary placeholder lines that a writer can come in and replace.
So this screenshot is actually what the ending of Night in the Woods looked like initially.
The ending was completely temped out and very, very easily replaced towards the very end of development.
So this scene in Night in the Woods, the logical structure of it didn't actually change, but the content of the lines actually did, it got filled out. And so this kind of temping out can be done very very early on and you can fill in the rest of the lines quite late.
John mentioned this idea of greyboxing narrative systems and that's actually something that fully organically happened during the development of I Feel Fine, I wanted to have these multiple endings that were chosen based on your reputation with different characters.
So I just built a very simple reputation system using variables, keeping track of points for each character you've spoken to that would then unlock endings.
And it was very simple, very easy, very natural for me to just build this as I decided I wanted it.
That's the kind of system that normally you'd need to plan ahead for.
This one, it's very rare for an entire system that affects the ending of the game to organically develop on its own.
But we did it!
We did it!
And a few ways in which we designed this language to support this kind of workflow is not a huge amount of information is required to be carried through.
Lines in the Jansmann are just strings and we send the entire string.
Anything that does need to be user-facing, so for example a line code for localization, can just be encoded in a hashtag that's attached to the end of it.
This is very easy to write, it's very easy to understand, and quite intuitive.
It also allows us to do stuff like, again, in the woods, you can use emoticons to control facial expressions. So you can see that happening here in the scene right now.
We also don't need to nail down ahead of time what commands can be sent to the game.
They can be built as needed, case by case with a generic command syntax.
The writer can script the game in their heads, working ahead of the developers, and anything that needs changing can be done and tested quite quickly.
If the feature isn't available, you can just write around it.
So the result is highly iterative narrative systems development, where the writer can go off and explore and iterate.
and build systems until they've found the system that they want, that the story needs, and then they can lock it down and complete what they're trying to do.
It also keeps developers from trying to solve interesting problems, which are a lot of fun and very cool and very fast to work on, but they're rarely immediately useful.
Yeah, it insists that developers build the scaffolding for the game while letting the writers to sort of go off and explore it.
It gives the writers powerful tools but still sandboxes them.
And it also keeps the writers from becoming developers, which I imagine can be a danger.
What it's less good at is data that really should be in a table, so just as it's kind of fiddly to store lots and lots of hard-coded data in C Sharp, it's fiddly to store non-linear data in Yarnspitter.
This is the kind of thing that's better stored inside tables and when I feel fine and night in the woods, and I imagine most of the Yarnspitter game need to do this, it turns into a gigantic.
huge if-else tree, which is a mess.
That said, support for storylets and condition-based content selection is a feature that you could conceivably add to the language.
So how do you get started doing this?
Well, building a parser for a language is actually slightly easier than you may think, because really it's two separate independent problems.
One is build a tool that reads a text document and converts it into a syntax tree.
And then the second part is you walk that syntax tree, sending data to the game as you go, skipping over other parts of the tree based on game state. It's very, very easy to get too excited about this, like I just mentioned. So big thank you to my colleague Tim Nugent for hitting me with a rolled up newspaper every time I got too excited about language features.
So we use a tool called Antler, which is a tool that lets us describe the grammar of the language, and then generates the source code to a parser for us. Then we feed that parser Yarnscript, we get an abstract syntax tree, and we work with that. Antler is very popular in the programming language development community. It's not essential, we just find it very useful. In fact, the very first version of Yarnspinner didn't use this at all. It used a handwritten parser that I wrote and gave me headaches and nightmares.
But using a parser generator Means that it will take care of a lot of edge cases for you, which is quite quite handy As a tools developer you also don't need to solve every problem Certain questions are totally fine to just leave open and you can avoid building overly ornate systems by Punting on entire design questions. What data do we need per line?
I don't care that you send the entire string you can attach whatever data you need to inside that line What data needs to be captured in an option?
Don't care! You can attach any non-user facing data as a hashtag at the end of the line.
It's a string.
What signals do we need to be able to send to the game?
I don't care! You can use commands, which are just basically strings that are never shown to the user, and it's up to the game to interpret them.
So my advice for tools developers is don't try to build a full programming language.
You are not trying to make a replacement for C sharp. You're adding logic to dialogue.
Yarnspinner doesn't support half the features that are required for a systems programming language.
It barely supports adding data. It doesn't support functions.
It thinks only in terms of numbers, bools, and text.
Don't try to solve the interesting language problems, solve the specific problems that your writers are facing. Your job as a tools developer is to build the scaffold and then stand aside. What it's great at is letting writers and developers focus on their core competencies, do what they're good at, without having one arm tied behind their back. It leads to easy and rapid prototyping, easy and rapid development, and easy and rapid testing.
Because we're also working with the same kinds of tools that full programming languages and compilers work with, we also can explore some interesting new areas.
So for example, we can do things like basic block analysis, control flow graph analysis, and all kinds of things to analyze the dialogue trees in a really complicated and interesting way.
Yeah, it let us build a narrative in a few days, and most of that time was spent on writing, not on struggling with tools.
And of course, once the narrative exists, then the engine can be enhanced, assets can be brought in, you can build everything around that scaffold that you built.
And of course, once you've seen those assets, you can easily alter the narrative if you want to.
So we're really, really excited by this approach.
It's already being used in a lot of games, including the ones you can see on screen right now.
And there's some huge potential for letting games be written almost as fast as stories are.
And also, even more excitingly, we can onboard traditional writers into non-linear storytelling even faster.
And that's great.
Are we possibly overselling this?
I don't think so. I think we've just solved all storytelling forever.
Thank you all so much for watching. Hopefully you found this interesting, at the very least thought-provoking. We're looking forward to seeing where this technique goes in the future. I'm Displacer on Twitter and you can follow my studio at secretlab.games.
And I'm RyanQNorth on Twitter and you can find me at ryannorth.ca.
Don't forget to leave a rating. It really helps speakers like us come back to GDC and deliver great talks. And so with that, thanks again. Bye!
Bye!
