Okay, so in case you guys are in the wrong place, this is the talk called Super Time Force, Solving the Time Travel Paradox.
Okay, so just a little bit about myself first.
Who am I?
My name is Kenneth Young.
I'm the technical director at Cappy Games.
And I'm also the lead programmer on Super Time Force.
Before Super Time Force, I worked on titles like Might and Magic, Clash of Heroes, Critter Crunch, and before that I worked on a mod called Max Payne Kung Fu.
If any of you are familiar with that.
This computer is laggy, it's not me waiting for applause.
Quick show of hands, how many people here are quantum physicists?
Please leave, because I am not a quantum physicist, so I may butcher things that...
you study all the time.
Okay, so what is this talk not about, first of all?
Well, it's not about the technical implementation of timer winding, although that is an interesting thing that could probably take an entire talk by itself.
John Blow did an amazing talk about his timer winding mechanic in Braid in 2010, so check that out on the GDC Vault.
It's also not about building real-time machines.
If you want to do that, talk to John Carmack, because as we all know, he is a robot from the future.
So what is this talk about actually?
It's about the game design problems of time manipulation, because to me those are the more interesting things, as opposed to the very pragmatic, you know, technical programming kind of things.
and how we tackle it using science and I put science in quotations because I'm not actually a scientist but, you know, maybe I can pretend to be one in front of hundreds of people.
So, solving the time travel paradox in a video game to be exact.
Okay, so what is Super Time Force?
Well, if you're not familiar with it, I'll give you a quick video of what it's about.
So Super Time Force is a 2D run-and-gun shooter in the vein of like Contra or Metal Slug, but it has a time-traveling twist.
So at any moment in time you can stop time and rewind, and in doing that you can sort of alter the past.
And every time you rewind you also add a new iteration of yourself.
So as you're rewinding, you're sort of building up an army of yourself to sort of fight alongside into something that we call single-player co-op.
So you're sort of playing with yourself, as we like to say.
Okay, so that is super time force.
So the vision of Super Time Force was we wanted to make something simple, easy, just like a fun, quirky action game.
But in reality, when you're talking about time bending, you're dealing with really complicated, paradox-filled craziness that is not that easy to communicate.
So the challenge for us was to make this complicated, paradox-filled mess feel simple and fun.
So what's so bad about time travel?
You think, okay, yeah, just rewind time, it's pretty easy.
Well, there's a few issues with it.
First of all, altering the past and preventing vital events from happening.
That's a bad thing.
Nullifying any challenge by knowing the future, that's also a bad thing.
Accidentally dating your mom, depends how hot your mom is, I guess.
So in other words, time paradoxes.
Sorry about that.
Okay, so when we were building this game, we realized there was two main components to building a sort of time manipulation game.
The first component is build an engine capable of time rewinding, or as I like to call it, that's the easy part.
The second part is building the systems to deal with time paradoxes, and I call those the fun parts.
Now I say easy, not because it's actually easy, but because it's easy compared to the fun parts.
So what we realized was that you can have a solid engine and you can have a solid idea, but without these sort of fun systems in place to handle the time paradoxes, your game will for sure break down.
When we first finished our first prototype, you know, we had a really solid rewind mechanic and we were like, oh yeah, this is cool, this is the greatest idea.
We'll finish the game in six months and, you know, it'll be the best thing ever.
And then we realized the game itself, the mechanics just sort of collapse under the weight of all these paradoxes that bring everything down.
So why do I call it fun?
Well, I guess, uh, this short form that I use for facilitating the unintuitiveness of non-linearity.
So, essentially, what that means is that you're making systems to sort of make all the weirdnesses of time paradoxes transparent to the player so that, you know, they can just focus on playing a fun game.
Uh, also because it's f'd up nonsense that you're constantly having to deal with when all you want to do is, you know, make a simple game.
But you've got to deal with all this stuff all the time.
So, how do you create fun?
We broke it down, we broke down the problem of paradoxes into three things.
Number one, causality violation.
Sounds kind of fancy.
Number two, butterfly effect management.
And number three, the quantum measurement problem, which I will explain all these things.
Okay, so we'll start with causality violation.
First of all, what is causality?
It can be defined as the fundamental one-way relationship between cause and effect.
Essentially what that's saying is it's the reason why time moves forward.
It's sort of the underlying principle of deterministic systems progressing forward.
So that's pretty important.
It's pretty fundamental.
What if we just don't worry about that?
What does that mean?
Well, it means allow an effect to occur even if the original cause no longer occurs.
Okay, what does that mean?
Well, let's talk about quantum mechanics.
So in quantum mechanics, there's a phenomenon called quantum entanglement.
It's where you can have two particles set up in such a way that changing the state of one of them will instantaneously change the state of the other, even if that other particle is somewhere on the other side of the universe.
It's a very strange phenomenon that caused quite a controversy when it was first discovered.
So yeah, it's counterintuitive, but it is actually how reality works.
So how does that affect us?
So we came up with the idea of entity entanglement.
So it's sort of along the same lines except that what happens is that two entities can become entangled, as we say, from certain important timeline events that are happening.
So that brings us to our entanglement system.
So what does this entanglement system do?
First of all, it entangles entities together at key timeline events.
Things like, you know, something spawns a power-up or something, if a player collects a collectible or if an explosion propels a player forward.
Those are key timeline events.
Then we store all of these entanglement events from all past timelines, and the last thing it does is that it forcibly reinserts those outcomes back into the current timeline.
It's a little hard to explain so I will show you a little demo video of this in action.
So here we see Zacasaurus, he's skateboarding around as a dinosaur does.
He sees this red enemy and he decides to head stomp on him.
He reaches this blue enemy, kills him, grabs the collectible which opens up the door which lets him through.
Okay, pretty straightforward.
Now let's rewind and change the past and introduce some paradoxes.
So what happens now?
So let's say Amy McKillen decides to come and kill that blue enemy sooner.
So she kills it, spawns the collectible, and it crashes into the ground.
So now Zachasaurus has nothing to kill, no collectible to collect, which means the door doesn't open, which means he falls to his death.
And that's a bad thing.
And we could even take it a step further.
So let's say you spawn another Amy and you decide to kill that red enemy right away.
So now, as you can see, Zachasaurus will immediately fall to his death and everything is screwed up and all the work that you just did is for nothing.
So let's see the same situation with entity entanglement.
So again we see Amy kill the red enemy and the blue enemy, but as you can see Zack still is propelled by the enemy, still kills an imaginary blue version, still collects the collectible which as a result opens the door and everything is fine.
So that is how the entanglement system sort of handles the way the world works.
So you may think things may not make temporal sense anymore, and that's true, they do not.
But the game will feel more correct.
Which is kind of weird.
So the next thing we'll talk about is the butterfly effect.
So what is the butterfly effect?
Well, it can be described as when a small change in the initial state of a system can result in a large change in the final state of that system.
It's also a 2004 psychological thriller starring Ashton Kutcher.
I actually enjoy that movie.
So anyways, the butterfly effect essentially is saying that when you change something earlier on, the effects will cascade and it will result in a really large change later on.
So how does this affect our game? Why does this matter?
Well, we can alter the past.
So when you alter the past, you'll cause pretty much everything in the future to play out differently.
And when you say differently, that can either be in a helpful way or in a detrimental way.
And you'll realize that pretty much 99% of the time, it's going to be detrimental.
So what does that mean?
Does that mean time travel is completely useless as a gameplay mechanic?
So what can we do about this?
So the idea is to somehow manage all of these negative timeline effects to prevent this sort of cascading effect from happening.
So we came up with this idea of level entropy, as we call it.
So first of all, what is entropy? Well again, this is a concept from quantum mechanics.
It's defined as the measure of how a thermodynamic system progresses towards equilibrium.
Okay, what does that mean? Essentially it means that energy in a system will tend to sort of spread out. For example, like you have a hot mug sitting on a table, the hot mug will cool down, the air around it will heat up, and it will reach an equilibrium which is called the highest entropy.
It's also so important that they call it the second law of thermodynamics, which states that entropy must always increase.
So that's entropy.
What is level entropy?
Well, we take the same idea, but we redefine what equilibrium means.
So for level entropy, equilibrium is a state when all players are alive and all enemies are dead.
and we must enforce that levels must always progress towards this equilibrium or in other words, the entropy must always increase like the second law of thermodynamic states.
So what does this mean exactly to the game?
It just means that any modifications to the timeline must follow these two things.
A, it must never cause past enemies to be better off than they were before, and it must never cause past players to be worse off.
So that brings us to our level entropy system, which has three jobs.
Number one, monitor all events happening across all timelines.
know the entropy of each of those events, and disallow any events which would decrease level entropy in a past timeline.
So essentially it's just saying, don't allow things to happen that will mess up your previous versions of yourself.
So again, there's a video example showing this in action.
So once again we have Zachasaur skateboarding around, scoping things out.
So he moves forward, sees that a door closes behind him and an enemy appears, but he's safe.
So he decides to jump on some crates and get out of there.
Simple enough.
So let's start introducing some paradoxes.
So let's say Amy, once again, decides to run ahead and say, hey, I like those boxes.
Boom, shoots them.
Now what's going to happen?
Well, Zack says nothing to jump on.
He falls to his death.
You know, same old thing with Zack.
So let's take it one step further.
So let's say Jean Rimbaud, you know, he doesn't want to wait around, so he runs ahead, closes the door early.
Now Zach and Amy are stuck, they get shot, they're killed, and now Jean is standing there by himself wondering what's happening.
So now we have the level entropy system.
So you'll see again Jean Rimbaud running ahead, closes the door, but you'll notice that both Zach and Amy are able to run through the door.
and Zack is even able to jump on crates which existed in his time, but not the current time anymore.
So that is the level entropy system in action.
And again, you may think, things may not make physical sense anymore, but again you'll realize that this makes the game feel more correct, which again seems counterintuitive.
Okay, so the third thing is something called the quantum measurement problem.
And this one is kind of a bit more difficult to explain.
An easy way to explain it is sort of the adage, you know, if a tree falls in a forest and no one is around, does it still make a sound?
Most people would think, yeah, why wouldn't it make a sound?
But in actuality, the answer is no, it does not.
Well, according to quantum mechanics, at least.
So we're back to quantum mechanics again.
So what is this quantum measurement problem?
Essentially it states that particles do not exist in a definite state until they're actually measured by an observer.
What does that mean?
Well, normally you think of particles as things that have a definite position and state, but according to quantum mechanics that is not the case.
Particles don't actually have a definite position and exist sort of in this weird spread out region, like a wave, and strangely, the moment someone tries to observe it, that's the moment that they spontaneously decide to have a specific position.
So that's really weird.
It caused quite a stir again, because there's this weird connection between how something exists and something actually observing it.
So a famous sort of thought experiment to illustrate how weird this is, is Schrodinger's cat.
So how this works is that, say you have some kind of box, inside the box, you can't see what's inside the box, but you put a cat in the box, and you also put a weird device which can poison the cat based on the state of a specific atom.
Now according to quantum mechanics, that atom hasn't decided what state to be in, which means the poison...
has or has not killed the cat.
In actuality, you have to say that the cat is both alive and dead until someone observes it.
Then the cat will finally decide to be dead or alive.
Okay, cool.
So what?
What does that have to do with our game?
Well, this concept actually helps solve a major problem in our game.
So what is this major problem?
Well first of all, since you can rewind and sort of run anywhere in the level, that means that players can exist anywhere and at any time.
And because of that, that means everything in the world must be persistently active.
So no matter when you are in the level, all enemies may be on the other end of the level, they still have to be doing their thing, because players could be there.
And because of that, you can have unintentional interactions happening all over the place.
And what's wrong with that?
Well, you lose the ability to control the flow of a level.
So players will be interacting with things that they haven't seen yet.
They'll be doing things in areas that they're about to reach.
And it sort of is a level design nightmare.
So again, think about quantum mechanics.
So our idea was to sort of treat enemies, or treat entities, like quantum particles.
So what does that mean?
So it means that entities are actually only allowed to interact if they have an observer, in the same way that particles only decide on their state if they have an observer.
So that leads us to the Schrodinger system, as I like to call it.
So it has three jobs.
Number one, calculate the sum of all regions of the world observable by any player.
So that just means it has to be able to know where in the level a player may be looking.
And that includes all players in all of the previous timelines combined.
So number two, store all of these observable regions for every moment in time.
And the last thing it does is that it only allows entities deemed observable to be able to interact.
Okay, so once again I will show a video showing this in action.
Okay, so here we have a simple setup. We have a bunch of Time Force members fighting these two brown bots.
And it's pretty crazy. Bullets are flying everywhere.
But eventually, Jeff Leffert survives.
And he runs forward and sees this door.
And he says, hey, what's going on? There's nothing here.
There's nothing he can do and he's sort of stuck.
So let's see what happens when we do introduce the Schrodinger system, and you'll see what is supposed to happen.
So once again, they're fighting off the two Bloundbots, bullets are flying everywhere.
And once again, Jeff survives and decides to run ahead.
Oh hey, this is what was supposed to be there, there was supposed to be enemies and destructible crates.
So finally he's able to kill the enemy, grab the coin, which opens the door.
And as you'll notice, bullets from off-screen are actually now interacting with these crates because they have an observer.
So once again, things may not seem physically consistent, but it will make the game feel more correct, which, once again, you know, sort of counterintuitive.
Okay, so in summary...
Number one, making a time manipulation game fun is hard.
It's not trivial, it's not straightforward.
Counterintuitiveness can sometimes feel right.
So, it goes against your instincts, you know, to do something that may not be consistent, that may not be logical, but in some cases, feel is more important than something being logical.
And last but not least, science rules.
And that's it. So, does anybody have any questions?
might cause a player to survive, but then later on actually causes two players to die, or something like that.
So the question was, how does the level entropy system work?
Well it's actually not as complicated as it sounds.
It's pretty much...
as things are happening in the world, you're creating events, and these events are sort of relations between two entities, and you can pretty much know ahead of time whether these events have positive entropy or negative entropy.
So you pretty much never want to allow a player to die before, you know, he was defined to die originally.
You want to make sure that players who walked a certain distance are still able to walk that distance, and players that didn't fall.
do not fall when they didn't before. So those things are usually enough to handle most of the situations but yeah it's not as complicated as it sounds.
So do you kind of like run through all the possibilities through some certain depth?
Essentially yes, but we sort of simplify the problem a little bit with game design.
So in our game, the only interactions a player can have is either he can die on something or he can shoot something and kill it.
We don't have the ability to use things or, you know, to push and pull things, because those things would make this system a lot more complicated if we had to deal with those things.
But you still have to like run the simulation.
Yeah, essentially we're rerunning the simulation for all the players and sort of fixing it as it needs to be fixed.
Gotcha.
Hi, I was wondering just how do you guys avoid players from taking advantage of the entanglement system and start breaking the game?
You know, trying to get infinite power-ups, infinite health, and all that kind of stuff.
So the question is how do we prevent players from sort of exploiting the system?
Yeah, that was a big problem, but fortunately because of resource limits, you have to put limits on the ability to rewind.
So there's a certain amount of time that you can exist and there's a certain number of times that you can rewind.
So that sort of naturally puts a cap on these things.
But also for any events, such as grabbing a power-up or grabbing a collectible, those things cannot be stacked.
So as soon as they've been done by one person in the timeline, then only that person will do it and that power-up becomes unavailable to all of the...
You would say it propagates across all timelines then?
Yeah.
Cool. Thanks.
No problem.
In your video examples, it seemed like the difference after you applied your systems was that your previous cells played out exactly as they did when they played in the first place regardless of whether there were things they depended on no longer existed.
Are there any examples where that's not the case?
I.e. how is your system different to just making all previous cells play out identically to how they originally played out?
Essentially that is what we want to do. We want players to play out exactly what they did before.
But it's not just simply a matter of putting them in the correct position with the correct velocity.
Because they could be doing things like spawning a power-up or grabbing a power-up and going into slow motion or...
Yeah, so it's not just about position and velocity, it's about how they change the world around them.
Right, so are there situations where you would be helping a past self so their life would actually play out differently because the change you made to their situation is actually positive rather than negative?
Yeah.
Right, cool. Thanks.
Just a quick question.
Okay, alright, I guess this will be the last question.
Just, how do you do the survivor problem? So if you...
died and then you then a later version of you helps that person survive and there's no recording for that past your original death, how do you solve that?
So the question is what happens when somebody dies and then you rewind and prevent that death from happening.
Well that's actually one of the key gameplay mechanics in the game so you can sort of save yourself and when you do that we don't do anything crazy we don't sort of give you AI that player that you save becomes a powerup and you can go and collect them and take their powers and now you're essentially two people at once.
Cool.
Cool.
No problem.
Alright, thanks.
