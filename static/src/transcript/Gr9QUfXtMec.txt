so We're going to talk about Bear and Breakfast.
For those of you who haven't heard about Bear and Breakfast before, it's a laid-back management adventure game where you build and run a bed and breakfast, but you're a bear.
And that on its own doesn't mean much, especially since PC Gamers said that a laid-back management adventure is whatever your boss is off doing when he takes a two-hour lunch.
So to give you a slightly better clue, we're going to have to watch a very, very short trailer.
So as you can see, the game has some crafting, it has some building, some decorating, some talking, some walking, some heavy UI action, and even a map that we added way too late.
But of course, it has its central element there.
And before the game could look like this, unfortunately, it had to look like this.
I don't know why the universe works the way that it does, but it just needed to look this bad so we could all be in a room together.
But anyway, by talking about our game and how we got it from point A to point B, I'll attempt to answer a question that was on my mind while developing it, and maybe some of you have thought of as well before.
How do you approach an increasingly saturated indie scene?
There's so many games out there.
I'll do that by kind of showing you how we tried, failed, and sometimes succeeding at standing out by mixing and bashing a few game genres together.
And I know what you're all thinking.
It's pretty simple.
Just add a bear.
Of course, it's a tried and true tactic that worked for a lot of extraordinary games.
Of course, I'm talking about EnviroBear 2000.
A masterpiece that's such a high level that I still aspire to reach one day.
But before I get too excited about this, I'll tell you a bit about myself.
My name is Rares.
I'm a 30-year-old developer from Romania, which is in Eastern Europe.
I don't know why I picked this photo.
This is in France.
Anyway, in 2016, I also started a company called Gummy Cat.
It's a game development studio also based in Romania.
And for the first few years, it was just by me, by myself, just kind of screwing around.
And eventually, we kind of began developing Bear and Breakfast as more of a team in about 2020.
With me was Ioana, our art director and my partner, and Andu, who's our programmer, lead programmer.
But wait, we're an indie studio.
That means we wear a lot of hats.
And sometimes against our better judgment.
Um, but wait, we're an indie studio, which meant that we were actually more than just three people.
We were five, but it wasn't for the whole period of time.
It was just, so it's weird to define the core team because not everyone worked for the same amount of time, but wait, we're an indie studio.
So, uh, that meant that a lot of people actually worked on the game from QA localization, contractors, our publisher also helped.
Um, so it was something like 50 people in the end that just touched the game at some point.
And in any case, I'm going to tell you the story about how we got to doing something that everyone here has either done or aspires to one day do, which is to push this little green button in Steam's backend.
And this, as you all know, is a very relaxing and peaceful experience.
It's comparable to a day at the spa.
And in order to do that, I'll just quickly present throughout the whole presentation what we pitched to publishers and investors in the summer of 2019 and compare it to what we eventually launched in the world.
kind of to see if we kept our promise and if we had a through line that survived the whole process.
And as a side note, our pitch was sent to something like 70 publishers and investors, out of which 15 never got back to us at all.
About 25 responded.
And after talking and negotiating, we refused, or we were refused by about 24.
But that's all right, since in the end, we only needed one to sign the game and make it happen, which we did thanks to Armor Games, our publisher.
which some of them are here as well.
And also, our pitch deck is online.
You can actually see it, see the exact thing that we used to pitch the game and get a deal out of it.
It's on this website from a company called Hey Glitch, who have a thing called Founders Kit, also has other pitch decks.
It's really good.
It's a great resource.
You should really see it.
And from now on, if there's ever an image or a slide from our original pitch deck, it'll have this handy little annotation.
Cool.
Just to give you a little bit of insight of what's coming up, I'm going to talk about what blending genres meant to us and kind of our process.
And then we'll tackle the genres that make up Bear and Breakfast, so adventure and management, and kind of like how we blended them together, how we smushed them, what really worked in this process, and then what didn't, or the mistakes that we made along the way.
Cool?
Cool.
Let's go.
So mixing genres.
It's not a novel concept.
It's not like a top 10 secret tactic that publishers will hate you for.
There's plenty of games that implement multiple elements from multiple genres all the time, but mostly with budgets much, much higher than what a first time studio from middle of nowhere Eastern Europe could realistically aim for for our first title.
This, like the original pitch back in 2019 promised roughly the same thing as today, a management adventure game.
But if you really think about it, combining genres seems like a straightforward idea for about three seconds until you realize there's like no way you can actually bear the weight of what this kind of combination inherently implies.
And it can be like a very, very daunting and prone to over promise process.
So within the context of a small team, with limited budget, limited development time, limited space in our brains, the more genres we aim to combine, the more we'll have to strip away from each of those genres in order to actually ship, let alone to ship something that you're happy with.
um and especially something that players would like because given player expectations and based on like common knowledge and games they've played previously you could easily find yourself in a mess um like too far gone to realistically bring it all together before you launch And yeah, how exactly did we measure or decide on the features of or elements of the genres that we needed to take away from for the game?
I think it's a more complex answer that I could realistically say in a 30 minute lecture, but for us it boiled down to perceived player expectations.
So we had to make a decision pretty early on in the process on which expectations we really aim to fulfill.
and which we were okay with kind of disappointing some players on.
It's impossible to meet everyone's expectations anyway and this just added another layer of complexity to the problem.
And then, once you do all of this, you have to hope that your original vision, that you had from the start, is strong enough to hold through all the circles of game development, from pitching to production, and especially marketing.
But let's talk about some concrete examples.
So what makes Barren Breakfast an adventure game?
Let me ask you, what thing pops into your mind if you think about a shooter tag on Steam?
That's pretty straightforward.
But what about adventure?
We called it an adventure game, but we quickly found that it's like, you know, trying to categorize dishes in a restaurant by which ones you salt.
According to Steam Tags, VRChat is an adventure game, but so is God of War, and so is Terraria, and so is Valheim.
And that's not really helpful when you're trying to explain what your game is in more detail.
So because of the weight of that adventure qualifier, we decided to focus our efforts on a specific part of the genre that we could actually realistically deliver.
Specifically, we wanted to signal that our game had a rich narrative that would help immerse you in the world.
So for us, adventure in the end just meant story and characters.
Now, I was born in Romania, and it had a pretty rough time up until like 30 years ago, and it wasn't exactly known for its rich and outstanding characters and stories.
But I was born right on time for Western pop culture to kick in and fill my tiny child brain, which was starving for an escape at the time.
So for me, shows like The Simpsons were peak comedy and almost a religious experience.
Homer Simpson, as you know, as you maybe know, is a naive and lovable but a little dumb kind of character So I'd like to introduce you all to Hank Hank is the main character in Burn Breakfast.
Now I'm going to talk a lot about Hank.
And quite frankly, because I want to drive home a point that is very important to me.
And I think that it's important in developing any story-based thing, but especially video games, which is build your character.
And I mean really build your character.
Define them.
Develop them.
Give them lives.
Give them quirks and features.
Just make them funny.
Make them sad.
Whatever you do, don't make them boring.
Make them interesting.
Super easy.
When we developed our pitch, we had a pretty good idea of what Hank needed to be, and we knew we'd need to spend some serious time polishing him up, both for his art direction, his animation, his personality, and I think it was one of the best decisions we could make to build him up as much as possible.
It took about 12 months out of our process to just get the final Hank.
We kept pushing his design forward, kept iterating.
We needed him to feel right because the game centered around this character who the player had to actually perceive and not just project themselves onto.
So one of the core parts of Hank is his adorable walk cycle, which this was not it.
We kept iterating.
We invested a lot of time and effort in.
There were many walk cycles.
Arguably, this was the second best after the one we actually picked.
But we took some really serious time in exploring all the ways a bear could walk until it was funny looking enough, weighty, and made this kind of happy to just walk around in the world with.
And after all of that, we finally landed on Psych.
There were even more walk cycles.
It was a lot of walk cycles.
But anyway, we finally landed on something we were actually proud of.
And I really want to emphasize how important this long period of constant iteration turned out to be, because Hank is arguably the most successful part of the game.
And I think a lot of the game's achievements rest on his little shoulders.
Now, the game also has a handful of other varied characters, some of which were created to kind of subtly support a role within the game's mechanics, which I'll talk about a little bit later, beyond this narrative box that they needed to fill.
Even if it didn't matter to the gameplay though, characters always needed to serve a purpose, either moving the story forward or supporting the main character.
And like I said, we designed characters that ended up actually informing mechanics rather than the other way around.
For example, this little person right here, his name is Took.
This little dumpster raccoon would obviously be associated with garbage.
And as a side note, you'd think that the name Took comes from a combination of Tom and Nook, and you'd be right, but he also has kind of a duo character that hasn't been revealed yet, but like they're kind of a pair and it's kind of a love letter to Peregrine Took, and there's also the past tense of the verb to take because he's a little thief, and I'm very proud of that.
Anyway, in the game, the player has to deal with the plague that is human beings, specifically tourists.
Worst.
I am a tourist.
If you haven't played the game, the guests rate their vacation with you through a simple point-based system for things like comfort, hygiene, food, and also decoration.
Humans also, unfortunately, really like to leave garbage everywhere.
It negatively impacts the decoration score and it just makes things ugly.
And as a player, you have to find all the garbage and pick it up.
So while developing this, we realized that, hey, our little dumpster diver could serve a very logical, mechanical role in the game.
We could turn the garbage you collect into currency and then exchange it for decorative items in a shop that Tuk would own.
After characters, the second part of our adventure qualifier is the story of the game, which is a very linear one, and that's arguably an odd choice in a game like this, mainly because a linear story doesn't usually mean a lot of replayability, and that kind of is an important part of a management-style game.
You can also make choices in a game, but they're not real, just like real life.
Instead, we use them as kind of a progression gate, or as a way to break the dialogue, to give the player a bit of like a rest in between the more text-heavy conversations, but also as a way to showcase Hank's personality.
So for example, whenever Hank talked to humans, as opposed to talking to other animals, no matter what the player chose in the dialogue option, the result would always be bear noises.
and sometimes make them more personable through text formatting.
We also used comic book style cutscenes.
This was really important for us to be able to have a lot of flexibility in defining some story moments, which we otherwise couldn't have done with a team of our size.
And there's also some secrets here and there in the game.
There's diverse areas and you wouldn't really find any of the secrets if you didn't look for them, but we felt it was important to add.
And speaking of secrets, there are also plenty of secrets in the story of the game, but they're all optional beyond the main part of the story.
And last but not least, the ending of the game is pretty open-ended, which we did from like a desire to tell a deeper story than we could ship originally.
So we left a lot of loose threads that we could hang on to and we're still like kind of developing.
And also let the player be able to continue the management gameplay once they're done with the story.
So in my mind, based on what we had in our original pitch deck, we've threaded the needle on story and characters decently well, and even if we don't have puzzles or combat, this wasn't an issue, because we satisfied everything, all the elements we wanted to highlight from this genre, and we were kind of happy with the distillation of having adventure in our game To summarize the main pillars we had to define the adventure, elements of the game were a very polished main character with a well-defined cast of supporting characters, a strong linear storyline mainly told through secondary characters with some added mystery for spice, and a very varied and interesting world with small secrets to reward exploration.
Cool.
But what about the meat of the game, the rest of the game?
What about management?
Well, management is far easier to categorize in your head.
For me, it brings up things like Roller Coaster Tycoon or City Skylines, but it still kind of bears a lot of weight.
It's arguably more than adventure because management games have historically attracted players who are looking for deeper mechanics, kind of, and they can sometimes be pretty hardcore about it.
Barren Breakfast plays a little bit like a game called Theme Hospital, which is one of my favorites growing up.
And instead of being like an all-controlling figure in the sky, you use Hank to do crafting in some of the buildings, mostly.
And when we were picking the loop for pitching the game, we had a pretty straightforward one in mind.
And I'm pretty happy with how it turned out eventually, because we have a game where you can scavenge for materials, craft furniture, place it in the hotel rooms that you build, and then accept guests and manage them.
And if you get tired of all that, you can just do a little exploring for more materials and secrets.
So in the end, a pretty complex overall tight game loop, right?
I'm so happy we didn't do something really dumb like overscoping and adding a card-based cooking minigame or a clothing and trinket system that further added complexity to the gameplay loop.
An unfortunate reality for modern developers, I feel, is that you're kind of playing to the tune of successful and influential games that came before yours.
So for us, that meant that there are a lot of quality of life expectations for modern management games, especially in UI and UX.
And this adds on top of your already really heavy workload.
Terraria has an auto-sort inventory button.
Why doesn't yours?
World of Warcraft has auto-loot on containers.
Where's yours?
So while we kept having to add and add and add things to the game, I felt like we couldn't afford to de-scope because I felt like we'd risk losing the player's interest in the management mechanics.
We also sprinkled new mechanics from the start of the game all the way throughout the end in an attempt to kind of keep things fresh so even in the last area as you discover it you still found a new mechanic that you didn't have like 20 hours earlier in the game.
To summarize the core of the management aspect of the game, we kind of prioritized a very tight loop that didn't rush the player to progress and allowed us to introduce new gameplay all throughout the game.
We had a pretty simple resource system that felt familiar enough and felt like it provided a familiar and satisfying crafting experience, and it didn't really become a grind.
And managing groups, rooms, and guests was simplified to like a point-based system that was pretty relaxed.
But we had just enough room for the min-maxers out there.
So now with the two genres covered, let's talk about how we kind of blend them together with some specific examples.
Like I mentioned before, combining genres is a very deliberate choice to make your life harder.
But when you can get it to work, it can make you feel very smart.
And that's like the kind of small wins that you need to feed on during game development.
For example, we realized that we could automate some of the micromanagement mechanics we introduced very early in the game, and it would go a really long way towards freeing up the player in the endgame and allow them to spend more time doing things that maybe they found to be fun, like exploring, decorating, min-maxing, whatever.
We made four possible automations around accepting guests, around garbage, around food, for example.
We realized that instead of going like the generic route that some management games do of hiring staff in the game from a randomly generated pool, we could instead make it more like a more personalized experience with the characters that you kind of grew up with in the game and kind of connected through.
For instance, instead of going to every hotel in the whole game and kind of making sure rooms are booked and turning a profit, you could hire Gus, the possum.
as a concierge.
And he would welcome your guests and be an all-around helpful and kind presence.
Or instead, for instance, if you didn't want to clear the garbage in every single house by yourself, you could hire Wade the rat.
And Wade would just run around and gather all of the currency for you simultaneously, kind of giving you passive income and keeping your cabins clean.
Of course, Wade is a much cuter connoisseur of garbage compared to Took the raccoon.
And all of these services in-game cost money.
Well, in-game money, obviously.
And you couldn't just hire this character from the start, but you could instead progress their quest to a certain point, which allowed us to kind of pace the game intuitively and give the player, like, get them acquainted with these characters.
And the micromanagement tasks first, and then give them a choice to be like, spend some profit and have an easier life in the game.
And then they could make this choice.
Our pitch also had an element of progress and difficulty, which translated well in the final game.
This is Pinefall.
Pinefall is the very last area, and it had three full cabins, all the mechanics unlocked, and you basically had the task of making as much money as possible in order to advance the story and finish the game.
We also pitched the story progression through bigger and bigger areas, which also translated well into the game in the end.
In this original slide in the pitch deck, this wasn't about progression, this was about making the game a roguelike management game, which I'm so happy we didn't do.
So in the end, this kind of combination really worked out.
and it was because of the compromises we made and not despite them.
We wouldn't have been able to deliver like a fully fledged adventure game, whatever that means, or a very deep management game, but we did end up with a very solid blend and players really seemed to appreciate that.
So that brings me to what actually worked.
The overall success and perks that we got due to blending genres.
Well, it allowed us to kind of synthesize the essentials of each game category and kind of pick our desired elements and let us be focused on each of them.
It helped us play to our strengths, both creatively and throughout production.
Although, as you'll see towards the end, not all the time.
And the things like I mentioned earlier, like hiring established characters as staff in the cabins was a really big strength point.
It gave a deeper sense of purpose to the task itself because it was a character you cared about.
And this could be a talk in itself, but I really want to mention some small marketing beats, specifically on Twitter, that I really love.
Catherine, who's here today, our community manager from our publisher, had a talk on this subject, which was really good.
But basically, using Hank as a voice for our Twitter account was a really solid choice, given how complex of a character he is.
There was also a moment when Unity decided to award us like a third place most anticipated game in 2020 after Silksong and League of Legends Wild Rift.
We had to announce a delay in the game at one point and we were really really surprised to see that our community rallied behind us really hard and these last two ones like don't aren't really related to mixing genres but I still love them.
But I do think our approach gave some of our bigger partners the confidence to showcase us multiple times.
Like, for instance, Nintendo always helped us by putting our trailers up on their channels, and it helped us immensely throughout.
It put a lot of eyes on us.
So in the end, the perks of kind of mixing the genres for us, mixing adventure and management, Our team was kind of better positioned to take on production of elements we picked rather than try to do everything at once from just one genre.
the combination of elements from each genre kind of complemented each other even from the concept stage and it made like our overall vision stronger so it was a great tool to validate and kind of make that vision better and the game was kind of originally born out of a desire for more management games with a more developed narrative and this really gave us a really concrete niche to feel it really helped us find our place in the world Overall, the positives really shined through for us, but as you all know, it can't always be rosy.
So what about what didn't work?
Or better yet, like I like to call it, what about the mistakes?
Well, for example, The start of the game is really slow.
Like, there's a bunch of front-loaded story, which I'm still very happy about, because you meet some of my favorite characters at the start of the game.
But it can take players, like, up to 30 minutes before they get to build anything, and that can turn off a lot of people, like, just looking to start building something.
In addition to the slow start we chose to add like optional quests very early in the game and we didn't give a specific explicit pathway to progress in the main storyline and You know and not being very explicit about the optional quests being both optional just this kind of led players to being very confused as a start and getting a lot of support tickets for people saying they were softlocked despite that not being the case this came like from an over indulgence in trying to mix the narrative with the management.
We also tried our best to mention that the game was on the casual side.
Even in the first description text you see about the game on the Steam page for instance.
But I don't know if we could even actually fix this if we wanted to.
Because we had players that were pretty upset that the game didn't offer more, for instance, freedom in time manipulation and didn't allow for a more straightforward management-only experience because that's what you'd expect from games in this genre.
And our desire to keep the story and management progression so intertwined forced us to limit these freedoms.
There's no sandbox mode yet.
But on the other side, we had players that were kind of pissed off that we didn't have enough character interaction, like there's no dating system, there's no gifting or anything like in Stardew Valley, for instance.
So we kind of had complaints coming in from both ends, which we were expecting, but still.
And finally, the big one and kind of by far my biggest regret in the development of this game is the way we handle production sometimes.
In our pitch deck, coming from a place of relatively little experience as a team, we pitched a development time of 12 to 14 months from prototype to ship.
which was a wild plan to begin with, but in the end it took us over 30.
And I know that doesn't sound like a long time anyway, but it was like over double what the pitch was.
And with the delays, of course, that meant more budget and our budget kind of exploded, which is a lot.
It was quite a big margin and we were only able to do this because our publisher was cool.
And in the end, we'll always be thankful for that.
Despite all this, it kind of still led to a lot of difficult times during production, which I feel personally a lot of regret for.
We had moments that felt pretty hopeless and very anxiety-inducing, like this screenshot from a Zoom call.
Midway through development, we were obviously having a great time.
and the personal failing of mine was taking on way more jobs than I could handle at once, which led to certain aspects of the game falling behind.
I had to finish writing the game at this point, but I was making these.
These pieces were way less stressful than having to actually write a good story.
Anyway, in the end, I'm happy to report that this wasn't always the case.
We were able to stick together, we were able to learn from our mistakes as we went along, and I know that not all teams are able to do that.
But having the game resonate with a lot of people very early on kept us kind of together and focused on shipping, and combining genres served as a tool for us.
It allowed us to explore more facets of game development, perhaps making the game stand out more and give us more opportunities for marketing.
And we did have happy moments during development as well.
In the end, on July 28th, 2022, we launched the game, still together as a team.
Quick recap to finish up.
Why would you blend genres for an indie game?
Well, throwing currently popular genres in a bowl and seeing what blends can be a valid approach for quick prototyping or like it can define your whole game.
It's always a gamble though.
It has to be utilized as a way to come up with an idea rather than a method to strengthen an existing one.
You should have a good vision.
More and more games come out and studios become more and more specialized in their niche.
So kind of trying to mix and match genre elements feel like it's becoming more of a method to stand out.
And it's a great tool for a small team with limited resources, but it should probably just not serve as a replacement for like that strong vision and like sturdy base.
Thank you so much.
