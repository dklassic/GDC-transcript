All right, I think we're about ready to get started.
Hi, my name is Anthony Newman.
Welcome to my talk about the melee system of The Last of Us.
Thanks so much for coming.
We're going to talk about some of the techniques and decisions that went into creating the hand-to-hand fighting system of The Last of Us.
It's going to be a pretty broad talk.
We're going to be talking about some aesthetic stuff, some mechanical design, and then getting into the nitty gritty of some script syntax.
So let's get started.
First, fair warning, this talk is rated M for mature.
There is quite a bit of violence.
Melee system is a system of choreographed violence, so it's kind of unavoidable when talking about it.
So fair warning.
Also, spoiler alert, if you haven't played later sections of The Last of Us, I'm gonna be showing some of that stuff off, so fair warning.
So before we talk about how we did it, let's take a look at what we did.
Let's look at what we shipped.
So we had melee for two playable characters being Joel and Ellie.
We had three different ally types, so Bill with his machete, Ellie with her switchblade, and then Tess, Tommy, and Henry with just their fists.
We had five enemy types being humans and the four infected classes, seven weapons.
And all this added up to nearly a thousand individual melee moves.
And that was just for single player.
We had a totally separate melee system for multiplayer PvP.
And all this never exceeded a 4 megabyte memory footprint.
So this is just a graph visualization of the melee system.
This is just single player.
So as you can see, it's pretty large.
There's a lot of moves.
It's pretty complex.
So in Naughty Dog we always try to do more with less.
We try to get a lot done with a really lean and mean team.
So let's take a look at who we had working on Melee.
So we had one designer, yours truly.
We had two animators, this is Lee Davis who specialized on the technical side of animations.
And this is Ryan McGeary who specialized more on the cinematic side, so facial animations, the more cinematic moves.
We had one programmer, Ian Jones, who has the brain of ten ordinary programmers.
And he also did a lot of work on player control, so aiming, movement, crouch, stuff like that.
So we really only used like a third of his time.
So that was the team.
About three and a third people to make the system.
So let's take a look at our overall direction.
We had two goals that we were trying to hit.
First we wanted to support the tone we were trying to establish with The Last of Us and build on the world we were trying to create.
We wanted melee gameplay that was brutal and visceral and conveyed the high stakes, survival at all costs, world of the game.
Secondly, we wanted melee to take on a greater role in combat.
In the world of The Last of Us, people aren't making bullets anymore, so ammo is much more scarce, and so melee becomes a lot more important.
Also, with the infected classes, who obviously don't use guns, melee becomes a lot more important for them as well.
So, there's really two stories I want to tell today.
The first is the story of design.
How do we create satisfying mechanics?
How do we hit the aesthetic tone that we're going for?
The second story is implementation.
How are we going to ship this?
How are we going to get it to fit into memory?
How are we going to actually do this?
So let's take a look at design first.
So when we're talking about design, it's not just about mechanics, it's also about the look and the feel of the combat.
What's the tone that you're trying to hit? How do you convey an emotion through your combat?
So in Naughty Dog, the game's story is the spine of all our decisions.
And that doesn't just mean the plot, like the narrative of the story, it's also the tone and the genre that the story is trying to establish.
The Last of Us is a story of human struggle in a harsh, cruel world.
The setting is just a backdrop to a story about humanity.
The pandemic isn't what's important, the infected aren't what's important.
What's important is how human beings react into these harsh situations.
To emphasize this harsh, cruel world, melee has to be brutal.
The world has to be high stakes and that's what really brings out the human struggles of these characters is the pressure of these high stakes situations.
So how do we do that? One of the first ways is through creating a sense of impact.
If you want people to get invested enough in your combat to feel an emotion, they have to believe it, they have to feel it.
So let's take a look at some techniques that we used for that.
So we started out by looking at a lot of MMA reference. So this is arguably some of the hardest impacts out there, these MMA knockouts.
And there's something interesting you'll notice about what's physically happening here, which is that most of the velocity of the impact is expressed through the person's head.
Their actual body moves very little comparatively.
And this serves, ironically, to make the impact feel much harder, but it also makes the people feel heavier.
You know, it gives them a sense of weight that makes them seem more believable.
There's a problem with using real world reference all the time, which is that real life is incredibly confusing.
If you've ever watched YouTube videos of street fights or MMA fights, often it devolves into this chaos that's not really going to work for a game.
So how do you make a fight readable and have a sense of impact at the same time?
So this is kind of what we settled on.
Notice the really long pauses on the wind-up and on the follow-through of the punches.
This is what makes these punches seem distinct and readable.
The actual swing itself is only like two or three frames, and that makes it feel really fast and impactful.
And then again you can kind of see from the enemy's reaction, we were kind of following from the MMA reference of moving the head and the upper shoulders way more than the rest of his body, kind of trying to make him feel a bit heavier.
Another way of creating a sense of impact is with sudden and drastic changes in momentum.
In these clips...
Can we lower it down just a bit?
In these clips you can see there isn't a lot of bounce from the head when it hits the surface.
Let's take a look at this in slow motion.
So what's happening here is that the kinetic energy of the guy's head moving towards the wall or the counter isn't going anywhere. The only place it's going is internally as trauma.
All of that energy is transferred completely into his cells.
And you don't think about this consciously, but if you're looking at it, you kind of feel it.
You understand it, that that is hurting.
If he was bouncing off of the surface, it would look like WWF or something, and it wouldn't be as believable of an impact.
So earlier I brought up humanity as a concept that's important to the game's story.
This is true, but humanity is also something that makes everything in the game much more affecting. It really punches up all the action that you're seeing.
The humanity that's expressed through the characters makes you empathize with them.
And when you empathize, you feel what is happening to them along with them.
And that makes the actions seem a lot more impactful and real.
So we wanted our fights to come off as life or death struggles between real human characters driven by self-preservation.
So how did we do that?
One major way we expressed humanity was through facial animations.
So we choreographed the combat systems so that there were a lot of opportunities for the camera to get up close to see the faces of these characters as they kind of expressed their humanities.
I personally think this does way more than any amount of blood or gore to make your combat seem impactful.
And it went a long way into helping us establish the tone we were trying to go for with the melee combat.
so our next look and feel concept is motivation and i'm not talking about acting like what's my motivation uh... what i mean is make sure that characters have a physical motivation for everything that's happening to them So you'll find as you're creating a melee combat system, there's a lot of stuff you want your characters to do to support a mechanic or to make the game more fun.
You'll need them to be in a particular pose, or you'll need them to be a little bit to the right or to move them around.
What I'd suggest is to always make sure there's some kind of physical reason for them to be doing the things that they're doing, some kind of physical excuse that motivates what they're doing in the game.
Let's take a look at what I'm talking about.
So this is kind of a counter example of what not to do.
Here we have Ellie jumping up to stab a guy.
I love this move.
It's one of my favorites.
But something just isn't quite right here.
It's something subtle.
Let's take a look at it a little slower, and we'll see what I'm talking about.
uh... so what's happening you'll notice that the guy is standing up to get stabbed and that's kind of ridiculous why is he like presenting his neck to you uh... in order to be killed that doesn't really make a lot of sense so this is what i'm talking about there's no motivation for him to be doing this This was kind of a necessary evil because this move could either be done from a brick stun, which has the guy doubled over, or it could be done as a stealth kill, in which case the guy would be standing up.
So there was kind of no way around this. Ideally we would have had a different animation that could have handled this a little bit better, but it was a necessary evil to ship the game.
Let's take a look at a better example.
So here's an example of moving a character with motivation.
As you can tell here, the enemy is standing facing ninety degrees away from Joel.
If we slow it down, you'll notice that the pop is pretty significant when he pops into the first pose of the reaction animation.
The thing is that your eye hides it because he's being motivated by the axe through his neck.
So there's something that gives a physical reason for him to pop into that pose.
And when you look at it full speed, you don't notice the pop at all.
uh... so this is Joel slamming a guy into the wall and we really like these wall moves, we wanted them to happen as frequently as possible so we were very generous with the amount of distance that you could be away from the wall with the guy in order for this move to trigger we look at it from the side you'll see how long that distance actually is.
That's a pretty gnarly lurk, like he's going pretty far.
The thing is that it's hidden by the fact that Joel is pushing the guy forward, that Joel is like moving along with him.
And so your eye interpolates that as it's happening.
So again, from the player's perspective, it looks fine, and you don't notice that it's happening.
So of course, something important to consider is how we're going to frame this action to the player.
So let's talk about cameras for a little bit.
The base melee camera in The Last of Us is a systemic camera that can'ts off to one side and tries to frame both the attacker and the defender by looking at the midpoint and keeping the defender on screen.
So let's take a look at what that looks like.
You see as I punch the guy the camera moves kind of off to the side framing both characters.
As I move around it kind of centers a little bit more on Joel into my normal navigational camera.
When the camera starts off on the wrong side of the action it slowly orbits around until it's in the correct spot.
So this was the way we found to frame the action consistently without doing a lot of hand placement of cameras.
And it was something we found was the smoothest way to frame the action.
So for special moves like finishers or grapples, we used animated cameras for emphasis and a greater cinematic feel.
That's kind of an old technique, they've been doing it since God of War, maybe earlier, but it's great and it works.
For even more impact, we used cut cameras, but we only used them for deaths, and I'll talk about why.
So the great thing about deaths is it's shocking. The camera cut is really shocking, which synergizes well with the shock of being killed.
So there's a great synergy there.
The other thing that's awesome is that cutting the camera is very disorienting.
But the great thing about using it for deaths is it doesn't matter that the player is disoriented because they're dead.
So cut cameras are a great thing to kind of really emphasize and punch up a death moment.
As a bit of trivia, the clickers and the camera cut were inspired by the chainsaw guy from Resident Evil 4, which also had a camera cut, which really made him a memorable enemy.
One last and just stupid simple technique is camera shake.
I know it's easy.
I know almost every game with Melee in it has it.
But there's a reason.
It is awesome.
You should use it.
Camera shake is great.
So here is the same combo from before.
Just seems a little flat.
Something's not right.
Something's not amped up.
but just a touch of camera shake on all the impacts and suddenly it just feels way more impactful and way more real.
So, camera shake is great.
So that's the visual element of the design.
Let's talk for a little bit about mechanics, about the design of the actual gameplay.
So the story of the development of the game's melee mechanics had a lot to do with me overcoming some ego issues.
Like any game designer, I wanted my part of the game to be amazing, to be rich, deep, and complex.
I wanted some rock, paper, scissors gameplay.
I wanted some Yomi in there.
You know, I wanted it to be complex and interesting.
I wanted Melee to be able to stand on its own.
I wanted there to be encounters where it was just Melee, and that the combat was satisfying enough and complex enough that it would carry.
For most of the development on the game, we iterated on block, counter, and evade.
We had so many different varieties of these mechanics. We had timed counters, we had evades where we had to evade a particular direction to avoid different attacks.
A lot of different versions of this idea.
This was based on the assumption that you know a core element of any melee gameplay is the critical strategic choice between attacking and defending. I mean that's something that you just have to have in any melee system.
Don't you?
This is some footage from a pre-alpha build of The Last of Us.
One of the first things that's most apparent is how far away the camera is.
There's a lot more switching between different enemies as you're fighting.
And you'll notice that I'm able to evade attacks. This is when we still had an evade mechanic in the game.
You also see guys getting into this goofy stance, and that was the way to telegraph to the player that someone was about to do an evade.
And so there was this rock, paper, scissor gameplay, where you were then supposed to grab him instead of punching him.
The grab gameplay was also a lot deeper. You could throw guys around, you could grab them and headbutt them, which would stun them, and then open them up for an even bigger grab.
There was a lot of complexity there.
Let's take a look at what it was like to fight the infected.
So this was an early build of the tilted building.
And you'll see I can evade these clickers, which probably would have been nice in the shift game.
and you can see we also had this like goofy kill move uh... that was our way of making the clickers which were supposed to be scary so much more challenging because it took a really really long time to kill them uh... so obviously all this looks pretty gnarly uh... but maybe we could have polished it you know maybe we could have just iterated a little more and figured out a way to make evade work But there were some intrinsic problems with block and evade that we just couldn't get around.
The first, it was really difficult for us to find any kind of meaningful challenge.
So we were very limited on buttons because we're a shooter.
So if there was going to be a defense button, it could only be one button.
And so the way you would think to add some challenge to it is with timing.
The problem that we ran into is that the timing was either trivially easy, in which case why have it at all, or it was impossibly difficult.
There was no middle ground that we were able to find in our focus tests.
So that was one problem.
The other thing is that blocking fights against the camera system that we're trying to put into the game.
So we wanted the camera to be close and over Joel's shoulder because that gives you this feeling of intensity, this feeling of, you know, again, empathizing with the humanity of the character.
If you can block someone, you're going to want to see them.
An attack from off-screen is unacceptable if you had the opportunity to defend against it.
If you don't, then it doesn't matter that you couldn't see them because there was nothing that you could do about it anyways.
So that's why in these builds you saw the camera was so far away.
It was because people wanted to see these enemies.
The other thing about that choice between offense and defense is most of the time in single player games that relies on one versus many fighting.
So if you look at God of War, Devil May Cry, these types of games they center around the player fighting a lot of different enemies and figuring out when to attack one person versus defend another person.
The thing is that combat in The Last of Us doesn't really support that.
Because of the way the stealth works and the shooting works, you very rarely get these one-on-many fights like Batman or something like that.
You're most of the time fighting one person, maybe two.
So that also didn't work.
Finally, blocking waters down the sense of consequence that we were aiming for in the game.
You know, you saw with the clicker enemies, you know, the consequence of being nabbed by a clicker is way more significant if you can't block him.
You know, if you're able to defend attacks, that kind of waters down the sense of you messed up, now the game is hurting you.
So, it watered that down.
So finally we cut the Gordian knot and we cut block. This was like kind of a really tricky decision to come to.
It really required us to throw out a lot of our assumptions about what we were doing with the melee system.
But it was the best design decision we made.
The thing is that that choice between offense and defense is critical to a melee game.
But The Last of Us is not a melee game. It's a shooting, crafting, stealthing, and melee game.
So, and just as kind of an idea how Naughty Dog works, we cut block four months before ship.
So we kind of totally changed our game mechanics pretty late in the game.
So if you don't have offense and defense, how do you create at least some kind of a sense of complexity?
How do you make it so that the player doesn't feel like they're just mashing buttons?
We're restricted on buttons because we're a shooter.
So we didn't have a lot of opportunities for different kinds of inputs in order for you to vary your attacks or anything.
So one potential solution to that was timing attacks.
This is a mechanic that's in Ninja Gaiden and Devil May Cry where you can attack, attack, pause, and attack.
And that gives you a different kind of combo or some different move.
Another idea we looked into was charge up attacks where you like hold down square to get a, to unleash a bigger move.
So there's this implicit like risk reward thing that happens there which is kind of cool.
Maybe we could do something with strategic placement, so no new buttons but lining up enemies in certain ways or throwing guys into each other or something like that.
Maybe we could get something there.
The thing is for The Last of Us, these ideas are terrible.
None of this worked and the reason why is they were all just too complex for the player to keep in their head along with all the other things they need to worry about from stealth to listen mode to crafting to all the other complexities that form the whole of Last of Us combat.
So how were we able to find good complexities, some depth that actually worked?
So the first rule of thumb was to avoid any new inputs.
So any mechanic that we were trying to put in, we would have to avoid any kind of complex or intricate input.
A great way of doing that was using context.
So what kind of weapon you're holding, what kind of enemy class that you're fighting against.
That was a great source of some depth and it was very easy for people to understand.
Another great thing to do is to handshake with other systems. So melee is a subsystem of the last of us and a great source of depth was handshaking with other subsystems. So for example, the shiv and the modded 2x4 interacted with the crafting system. You could grab guys and take them as a human shield which would then interact with the gunplay system. So those worked out very well.
Another thing to do is to try to create predictive strategy.
So what this means is some kind of mechanic that doesn't confer an immediate advantage, but confers some advantage a little bit further down the line. So an example from fighting games would be launchers.
It's not the launcher that's important, it's the juggle moves that you do after.
And so setting up this kind of future advantage is something I find players really like and makes them feel clever.
And finally don't hog mind share. Make sure that whatever mechanics you're putting in are something the player can keep in their head reasonably while they're dealing with all the other stuff they have to deal with in the game.
So let's take a look at an example. So the brick was an example of this in action. So it creates a predictive strategy. It allows you to grab enemies. Sets up more powerful moves. You can instantly kill a clicker if you have a 2x4.
uh... so it links up with the scavenging and stealth systems of the game uh... because you can throw it as a distraction uh... you hunt in your environment to find them uh... it requires no new buttons uh... you throw it just like any other throwable and it doesn't require much from the player to understand how to use it so yeah that was the brick So, just in general, there were a ton of different mechanics beyond what I've mentioned that we tried to put in the game.
And we had to be really comfortable with cutting them in the name of simplicity and elegance.
You're always going to have some idea that's your pet idea and just be really comfortable with cutting that and letting go of it in the name of making the game simpler and more accessible.
Always think big picture. If you're working on a subsystem, remember that you are not the system.
Try to harmonize, try to make your thing fit into the larger whole, ideally synergizing with the rest of the game.
So how does melee fit into multiplayer? Let's just take a look at a quick clip.
This guy is stunned by a smoke bomb.
He's chipped in the neck.
trying to flee, get nabbed by a modded 2x4, crawling away, my friend is on fire, and then I get executed.
So as you can see, Melee ended up giving our PvP combat a very unique feel.
It really helped to separate us from other third-person shooters in multiplayer.
But we had to selectively adapt our mechanics.
For example, there's no hostage taking, there's no human shield, because that's really not fun for the other guy in multiplayer.
It's no fun to be dragged around.
There's also no bricks because you can't fool a player as easily as you can fool an enemy AI.
So instead of using bricks to stun, we use the smoke bomb.
Changes like that.
One of the biggest changes was that when you punch someone, instead of playing a nice full body animation, they play just a flinch.
Let's take a look at what that looked like.
So we did that to allow the person on the receiving end to move around.
Again, to keep things fun and fast paced for both players, instead of just the person doing the attacking.
So obviously there's a downside to this.
It doesn't look fantastic.
And it doesn't look as good as our normal melee combat.
This is especially apparent when two people are punching each other at the same time, which looks gnarly.
And I'm very sorry about this.
But it was a necessary evil to make PVP fun.
It was just kind of an unavoidable thing.
Overall, though, we lose a lot of the cinematic feel.
We lose a lot of the tone we were trying to create with the game.
So how do we bring some of that back into multiplayer?
So the answer is the fatal moves.
So again because, can we turn it down just a little bit?
Again because the person on the receiving end is being killed, it doesn't matter so much that they can't move because they're dead anyways and it doesn't matter.
Also a lot of these moves were a little bit longer and it allowed us to bring in the camera a little bit close and kind of regain some of the intensity that we lost in multiplayer.
Okay, so that's design. Let's talk about how we actually did it.
So obviously in console development, memory is crazy important.
Even though we've got a ton of memory on next-gen consoles, believe me it's going to dry up really quickly, so you'll always have to worry about memory.
The memory footprint for the melee system in The Last of Us was four megabytes.
This is the same footprint that Drake had for his melee moves in the Uncharted series.
The thing is that Joel has all these weapons, there's the infected, he's got the human shield, there's just so many more mechanics in Melee, so we had to be really strategic about how we used our memory.
I could go on and on about memory management, but these are the basic top level strategies that we used.
The first is modular loading.
So this is basically breaking up all of your assets into tiny chunks and then only loading exactly what you need at any given time.
This is how Naughty Dog in general is able to make their games without any load screens in them because we are able to kind of be very meticulous about only loading exactly what we need.
So these were all the animation bundles in the melee system.
And there's some pretty logical divides here.
You might be able to see there's the Ellie versus David fight in there.
There's horse melee.
So that makes sense.
You can kind of split things based on where they are in the game, and that's a little bit easier.
Something that's a little bit more subtle is this division.
So, AnimJoelMelee is what Joel could do just by himself.
So if he's alone in a level and he has a pipe, it's him swinging it through the air.
It's basically so that you have animations to play when you press square even if no one's around.
AnimMeleeCommon is anything that requires both Joel and someone else. It doesn't matter if it's an infected or a human, just some other enemy.
So this is Joel swinging the pipe through the air and it stops on a body when it hits it.
And then AnimNPCMelee is anything that...
require both droll and an enemy.
So when the enemy reacts to the pipe swing, that's an anim NPC melee.
So at the start of the swing, I'm an anim droll melee.
On the impact, on droll's side, I'm an anim melee common.
And then the reaction is an anim NPC melee.
So why do we do this?
We do this because in areas where you're transitioning from human combat into infected combat, it absolutely ensures that we're not doubling up on any memory if there's an overlap between those two sections when both types of characters need to be loaded.
So these are the kinds of strategies we had to do to fit in memory.
Another interesting memory thing is we had both male and female infected in the game.
And they required different animations because their skeletons were slightly different.
And so not only did we have different animation bundles for the female and male versions, but we had them split out into four for female clicker, male clicker, female runner, male runner. So that way if you're in a fight with male runners and female clickers, you only load exactly what you need again.
We also used animation streaming. The Last of Us leaned really heavily on streaming. The game had a reputation for destroying older PS3s. And Melee was no different. We leaned really heavily on it. The stealth kill, the machete moves, the grapples, anything that was longer than 80 frames was a candidate for streaming and this was a huge win for memory.
We were also very strategic about our sample rates.
So most of the animations in the game are sampled at 10 frames a second, except for certain hero combos that you saw very frequently like the fist combo and the pipe combo, and those were sampled at 15 frames a second.
The great thing about streaming is once you're already streaming the animation, it doesn't matter how big it is, and so we were able to sample those at 30 frames a second, which made those moves look a lot better.
So let's talk about the implementation of our cameras for a second.
So for a lot of moves with animated cameras, if the camera didn't trigger, the move would look absolutely terrible.
So when you're slamming a guy into a wall, if the camera doesn't work, then the normal in-game camera gets pushed up by collision, and it'll be in the character's faces, and it'll look awful.
So, and we also needed to make sure that the camera was never behind collision, because then you'd see back-faced polygons, and again, would look awful.
So what we had was a system of fail-safe cameras.
So this is the clicker kill and those little locators around them are possible camera locations and you can see the system has chosen the one on the far right.
So if any of those points are behind collision, it'll have a backup and it'll have a backup to the backup and there are seven in this move.
So that was our way of ensuring that these animated cameras would fire and make the move look good.
So there are a lot of areas in the game that are very dark.
And so it was kind of a tricky issue to make sure that melee was visible when you were in these sections.
So we had this special flashlight that we used to make sure that things were visible.
So here we can see the normal flashlight.
You can see that it's coming from Joel's right shoulder.
It's one of those clip-on flashlights.
And it's facing away from him.
So when he gets killed by the clicker, something magical happens where now somehow this flashlight is in his face and like how is that happening?
So for moves like this we would hand author a point for the flashlight to be and we would turn off his shoulder flashlight and turn on this fake melee flashlight.
and it doesn't cast shadows so it was pretty cheap.
And so this was our, you know, kind of hand-done solution for hero moves like this one.
But for more generic moves like this grapple, we would just position it behind the actual camera, wherever the game camera was.
Because if the camera can see it and the light can see it, odds are you can see it because they're going to line up.
So if we take a look at what this looks like in game...
You can see that the transitions between the normal flashlight and the melee flashlight are relatively seamless and you can consistently see the action.
So getting two animations to play in sync together is obviously a really important part of making our combat look good.
So let's take a look at some techniques for that.
So our system from Uncharted was basically, it was kind of just like any other scripted animation that two characters would play together.
It was, each move was authored as a pair of animations that would play around a single point.
And that point was placed in the world, and those characters would play those same animations together, and that was how we did our syncing.
Every melee move was built as a pair of animations, a pair that were always meant to go together.
uh... so for a lot of reasons we kind of broke away from this system uh... so as i'm punching this infected or this human they're playing different reaction animations and in the uncharted paradigm those would have been two distinct pairs of animation if the guy was facing away from me that would have been another pair of animations So what we switched to instead is a system where I do attacks and I trigger reactions on the enemy.
And those reactions play independently from me.
And so what that meant was we had to move away from a system where both people know about one common point.
What we moved to instead...
was a system where each character knows where they expect the other character to be.
And so what this did was it created like kind of a system of interlocking joints where the attacker would place himself relative to where they expect the defender to be and the defender would place himself relative to where they expect the attacker to be.
So it would kind of join them together and sync up nicely.
There were a lot of other benefits that we didn't expect from splitting up and kind of unsyncing these moves.
The first was it allowed us to create some new mechanics.
So again I was talking about flinching before and we were able to bring that to single player as well to create the runners.
So this was useful in establishing them as kind of a lighter melee class. You're allowed to keep moving around, you're allowed to punch them back while they're still punching you.
And this wouldn't have been possible in the Uncharted paradigm.
The runner is playing animations, but I'm not actually playing animations, I'm playing these kind of flinches which was enabled by this new system.
it also created some solutions to the problem of uneven terrain which had always been a problem for us uh... so you can see here that there's a like a vertical range to the expected location of the defender and what that allowed us to do in situations like this where an enemy would be standing on top of one meter cover uh... it would allow us to still be able to do damage to that enemy uh... in our old uncharted paradigm we would try to offer synced animations for every possible situation that could happen uh... which just wasn't feasible in the last of us this doesn't look as fantastic as the rest of our combat but it's kind of a necessary solution to you know fill in the gaps when we couldn't afford to make uh... a synced animation for everything You can see what this looks like going downhill.
So again there's like a vertical range here and this guy is able to play independent reactions for me which really helped to generalize our combat and make it work on weird terrain and in a lot more situations.
So the whole system was implemented in script.
So for some of you this is going to be the most interesting part of the talk and for the rest of you it'll be over soon.
So scripting is awesome. I started out as a gameplay scripter on Uncharted 2. I did the Wounded Cameraman sequence and a lot of the other puzzles. So I'm super into scripting. I think it's great and I really love doing it. The great part about script is that it moves work onto designers. Programmer time is absolutely precious.
Whereas designer time is essentially worthless.
So, I mean, really, like, are you going to ask a designer to hand optimize your assembly code, to move more stuff onto the SPUs, to win back precious milliseconds until you're rendering, like your rendering engine is running in frame?
You're not going to do that.
You need programmers for that.
You can move work, less intense technical work, onto your designers.
Script also gives you faster iteration.
So there's the classic benefit of not having to recompile the whole executable.
But what's great about script is it removes the barrier between inspiration and implementation.
The person with all the crazy ideas is the one actually putting them into the game and there's kind of an emotional thing here where you've got your ego attached to these ideas and you really want to get them in the game.
And you're the one doing it so odds are they will get in the game instead of having to convince the programmer please please get my feature in.
And finally, all true gangsters know, you've got to keep it text-based.
Making a graphical scripting interface is tempting, but it's going to take a ton of your tools programmer's time, and it's just never going to be as fast or as flexible as a text-based scripting system.
So let's take a look, let's compare workflows between graphical and text-based interfaces.
So here we have a graphical scripting interface.
As you can see it's pretty slow, there's a lot of mouse movement.
And it's just not that fast.
I'm pretty sure this is Kismet.
But in a text-based interface, it's just way faster, you get a huge speed increase.
So let's talk a little bit about the overall architecture of the script.
So it all starts with attack lists. Because Uncharted only had one button for melee, we wanted a lot of variety. We wanted something cool to happen every time you press the button.
So the structure is built around lists. Like every time you press square, there are all these things that could happen.
So in the Last of Us, when you press square, this is what happens.
There's a massive master list, and it contains these sub-lists, like playable LE attacks, and when you're a playable LE, you use those.
Level-specific attacks, so if you're in some level, like when Joel is wounded, he has a different set of attacks there.
And finally, Joel's basic attacks.
A couple levels further down, these are the players pipe attacks and you'll see at the top there's something that says func, that's the start func and basically what that is, is a boolean function where if it returns true everything in the list is allowed to happen. So in this case it's checking to see if the player has a pipe and now all these moves are allowed.
Now let's get down to the actual melee move level.
uh... so A melee move at its core is an animation, either one or two animations.
In this case, this is a synced move, so there's an attacker and a defender move in this animation.
Each move has a priority, so if multiple moves are valid, this is how the system chooses which one should fire.
So this is based on which move is the most desirable.
So hits are more desirable than misses, finishers are better than hits, wall moves are better than finishers, that kind of thing.
And finally, each move has a start func, just like the lists.
And this is again a function that if it's true, the move is allowed to fire.
So this move is a synced move, so the characters have to be close enough together for it to be valid.
So this is a range check to make sure that they're within four meters of each other.
And finally, the event list.
This is the meat of the move. This is what actually happens over the course of the melee move.
So in this case, this move is very simple. All it does is deal five damage on frame zero.
So that's the basic structure of the melee moves themselves. What about the AI and their melee behaviors?
So, when the AI decides to go into melee, they have a list of behaviors.
You can see at the top there's an array of behaviors.
I'm only showing one here, but they choose from a list, just like a player chooses from a list of attacks.
And what a behavior basically is, is dirt simple.
It's an enemy running at the player and trying an attack list, and as soon as one of those attacks is valid, it fires.
So here you'll see there's a priority, just like with the moves, and this is where I'm specifying the list of attacks the NPC is allowed to use.
There's a start func just like lists and attacks, but there's also an abort func which tells the NPC, hey, you shouldn't be doing this anymore.
Either someone else is attacking the player or the situation has changed in some way that you should stop doing what you're doing.
Let's take a look at an example of how all this works.
So when you get grappled by enemies, your allies will try to come to your rescue.
Here we have Ellie rescuing Joel from a human enemy.
This is a great way to give a player a feeling of attachment to these characters.
Let's take a look at how this works under the hood.
uh... so this is Ellie's rescue behavior uh... the AI scripting is exactly the same for friendly characters as it is for enemies here's the start func so basically what this is doing is it's checking to see hey is the player being grappled is he in one of these grapple like those grapples that i can rescue him from uh... there's also a kind of story consideration here where when you're still with Tess it doesn't make sense for Ellie to be rescuing you because she's kind of new she's unsure of herself but once Tess dies now Ellie is able to use these behaviors So down here there's the abort func.
First there's like a sanity check like if too much time has passed something's probably wrong so you should abort.
And if the player has escaped from the move by themselves then this behavior is no longer valid.
At the bottom you can see the attack list ID which is telling Ellie which rescue moves she's allowed to use.
uh... this is one of those moves uh... this is uh... an off-screen version of Ellie's rescue move uh... you'll notice something interesting about the start funk which is that there's no range check uh... so the reason for this is we want this move to happen as much as possible and if she's off screen if you can't see where she is we can cheat her over to the rescue uh... so there's no range check as soon as she decides to use this behavior if she's off screen she can come in from ten twenty meters away To make this work we also had a blend time of zero so that she just pops into the move and doesn't lurp across the map.
Our other allies had this behavior as well which I think really made them seem dynamic and added a nice feel to our combat.
So we script in a proprietary version of Lisp, which is a language that allows you to really easily establish syntaxes, which are basically like big code macros.
This allows us to templatize our melee moves.
Since there are lots of moves that fall into distinct categories, hits, misses, finishers, you can establish kind of a taxonomy and edit these moves as groups.
So let's take a look at how this works.
This is a defined syntax and you can see inside it there's a fight move definition in there and the way the syntax works is at the top you specify what the inputs of the move are like this is what's going to make each move unique so in this case it's a very simple move all it has that's unique is a name an attack animation and a defense animation and you can see how these values are then copied and pasted essentially into the move definition.
this is what that syntax looks like at the end of the day as you can see it's very compressed it looks very nice uh... and this is kind of the comparison you can see how i specify the input in the on the lower right and then that gets copied into the move using the syntax and this isn't just about more readable code or less typing. What's great about this is it allows you to make sweeping changes across your system very, very easily. If you have a bug, you can fix it in one place instead of a thousand. So let's say I went to this talk and I was like, wow, camera shake is really great, I should add it to my moves. And so all I would have to do is add it to the template and then when I compiled my code, now it's everywhere. Now every simple fight move will have camera shake.
I know this stuff is pretty dry, but it was crucial to getting the game done.
It was like a really essential technique in managing all the moves and all the behaviors that we had.
It was really, really essential.
So something we got a lot out of is uniting our melee scripts with our normal scripting language.
So obviously Naughty Dog is pretty famous for our one-off custom crafted setups.
So we have a lot of power in our scripting system.
And we got a lot of mileage out of hooking the melee system into that power.
So let's take a look at some examples.
So when you shiv a guy and your shiv breaks, the blade of the shiv will actually be embedded in the guy's neck.
This is my job.
So let's take a look at how that works.
So this is a script event which is a special melee event that allows us to hook into the rest of the game's scripting system.
And basically the embed weapon function is a wrapper function that uses the same functionality that allows us to put flashlights in our character's hands or put Joel's gas mask on his head.
And so yeah, it was just a really simple thing to do that added a really nice detail.
Some of you may remember this climactic moment from our E3 demo and Evan Wells wanted me to make this move as easy to perform as possible to make it almost automatic.
So let's take a look at how this works in the ship game.
So when you knock a guy down to a knee when you aim your gun you'll automatically aim at his head.
When you aim at him it transitions him into this begging for your life animation and then you kill him.
So this NPC knee recover is the move the enemy is in when they get knocked to a knee.
And you'll see there's this event here, allow auto-aim, and this is something we needed for easy mode to help easy mode players get through certain scripted sequences, like the snare sequence gives you auto-aim.
This part detects when the player is aiming at the head joint of the defender, and then transitions them into the begging for their life animation.
And then you kill them.
uh... so here's another cool detail uh... when jules melee weapon breaks uh... he'll throw it down to the ground and if you see it in slow motion you can kind of see it a little better So there you go, kind of seamlessly throwing the handle down to the ground.
So the crazy thing here is that because it's happening while he's moving around, you're not in melee anymore.
So I can't do that animation as part of the melee system. It can't be a melee event because you're not in melee anymore.
So the way this works is there's this attacker end funk.
uh... and what this means is if the attacker has left the move for any reason if they've been shot if the moves over naturally if someone else hits them this is like a guaranteed thing to fire so it's like an on exit or something uh... and what this does is it actually spawns a script process uh... that handles the throwing a weapon down so it's like a uh... fadeaway pass uh... to the rest of the scripting system outside of the melee system So here's that script, the drop weapon script.
It's really simple, all it does is it plays a gesture of the player throwing the weapon down, it breaks the weapon which causes it to physicalize and fall to the ground, and then it just cleans itself up. All it does is just remove the script process when it's done.
So let's take a look at one more example.
This is from multiplayer.
So all of these animations are the same and there's nothing implicitly about firing these different weapons that gives them any different behavior. They're hand scripted to make all these different things happen.
So here I'm popping the head off.
In this one I had to script the body charring and the flames on the ground.
And then finally there was a move I really was hoping we could get into the game but this weapon just didn't make it into the game. It was just a prototype.
It's a grenade launcher.
Sorry, mom.
So let's take a look at that last grenade launcher one.
So basically what it does is, again, pretty simple.
It spawns an explosion at the defender.
And this is a special explosion that doesn't do any damage to the player, because that would suck.
And then it uses my favorite functions, the dismemberment functions, to kind of destroy all the limbs and the head of the defender.
So just a couple of things about what I was talking about in terms of script.
Those kinds of small details are exactly what I'm talking about when I say that it's great to move this work onto the designer.
Programmers don't have time for stuff like that, like embedding a shiv in a guy's neck.
It's like a small detail and they have way more important things to do.
They've got to worry about the level heap and that kind of stuff.
So, moving on to the designers allows you to get these kind of cool ideas into the game cheaply and it allows you to kind of add a lot of personality into your melee system.
So if you take away anything from this talk, just remember to design for the overall package.
Make sure your mechanics harmonize with the rest of the game.
Don't be like an amateur drummer playing too loud and drowning out the rest of the band.
Find a way to level yourself off and harmonize with the rest of the systems in the game.
Design good complexity. Design complexity that doesn't consume too much mind share.
Try to create elegant and simple mechanics that still give you great gameplay.
I highly recommend implementing your system in scripts and having a designer implement it.
I think it's the way to go.
And seriously, camera shake is awesome if you're making a melee game, put it in there.
So finally, I just wanted to throw out some thanks.
I wanted to thank a couple people.
This is Chris Robbins and Ruben Langdon, our awesome stunt actors.
We worked with quite a few stunt actors, but these guys were with us from the beginning and they really helped to shape the melee system.
Chris was the attacker and Joel, and Ruben was the defender and the infected.
And these guys were great.
I wanted to thank the rest of the Melee team, Lee Davis, Ian Jones, and Ryan McGeary.
I also wanted to thank Ikki Ikram, who hooked me up with all these awesome portraits.
I think this is him from Movember.
And finally, I wanted to thank my fearless leaders, Bruce Straley and Neil Druckmann, for all their guidance and support.
These guys are a blast to work with and inspire me every day.
They're great.
Finally, there's some other Naughty Dog talks.
You should go see Rob Ruppel talk about art direction at 3 o'clock, Max Decoff talking about Ellie and AI, Buddy AI and The Last of Us at 4 o'clock, and Vivian Ding talking about in-game and cinematic lighting at 5.30.
You can hit me up on Twitter, I'm at BadData underscore, and yeah, that's my talk.
Thank you all for coming and enjoy the rest of the conference.
I think we got a couple minutes for questions. Maybe like five minutes or something for questions.
Just going to let that run.
I'll ask a question.
Oh hey, yeah, how's it going?
So, with your, with the really intimate synchronized animations and, you know, the interacting with the environment and the walls, what was your guys approach to making sure it was safe?
so that people weren't split by doorways or...
you know, I'm not sure I know what you mean. For example in the choke out, what did you guys do to make sure that the general space that the two characters were in was safe before you actually allowed the animations to play? Yeah, so what we did is there's, I don't know if you've been to any of our other talks, you know we have this, I mean it's a common thing, nav mesh, right? So we've got nav mesh on the ground and instead of using collision which had all kinds of problems, people would just slide themselves away from the borders of the nav mesh.
And if we had moves that had like a really large area, like the choke out, exactly like you're talking about, we would just raise that tolerance, you know, so we would give the player and the enemy a wider berth, so they would slide a little bit further away from it.
So in some situations it's not ideal, you get a little bit of a slide, but most of the time you don't notice.
Thanks.
Go for it.
How do you sync the loading of animations with the script that fired them?
Like if the screen is firing an animation or triggering it and it's not loaded yet, or is it the script that loads?
No.
Everything is manually loaded.
It's like a really full-time job for, well, it's not a full-time job, but it's the responsibility of the level designers.
It's like a really intricate balancing act of loading stuff.
And they would just have to know, if I have these characters in this level, I'm going to need to load these exact Melee bundles.
Okay, thanks.
Yeah.
Hi.
Could you talk about the process that brought you from this really complicated system and how you ended up being like, there are, in cases, you know, you're just mashing the button to make the thing happen.
From a design perspective, what happened at your company to help you realize that that was the right thing to do, you know?
Like how do you get there?
So, yeah.
I mean...
so really what happened is we were about to put the game in the hands of the press like people from outside of Naughty Dog were going to play the game and talk about it to other people uh... and this just changed everything like it was like okay no more screwing around like let's make this happen uh... and it really uh...
it kind of cut the BS, you know what I mean? It really forced me to make decisions that actually worked and actually made the game work well.
And that was kind of the thing that pushed me to kind of get over like all the things that I was too attached to.
Of, you know, I want the system to work this way or something like that.
And it was kind of a teachable moment for me to really kind of let my ego go off to the side and do what's best for the game.
Anyone else? We've got like two more minutes.
Awesome. Well, thank you guys so much for coming. I really appreciate it.
