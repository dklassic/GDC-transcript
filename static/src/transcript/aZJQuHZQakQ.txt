Hey guys, thank you so much for coming this last day at GDC.
It's awesome to see all of you here, a lot of people.
And I'm excited to share with you guys some of the things that came out of the development of our latest game over Naughty Dog, Uncharted 4.
By the way, I'm Andrew.
That's as much of an introduction as you're going to get, because we're going to jump right into it.
So first of all, I'm just curious, right out of the box, how many people are excited about the new Uncharted show of hands?
That's awesome you guys, thank you.
Now here's a question, how many people came to this talk?
Mostly because it was about Uncharted and not like the other things.
Oh yeah, that's, no that's good, that's awesome.
So then I'm assuming most people came to this talk because it was about technical art, is that right?
Right on.
And then how many people came because the talk had the word culture in its name?
That's actually impressive.
A couple of hands, that's good.
That's good.
OK, so since a lot of people here are excited about Uncharted, I figured we'd actually start with our story trailer, just in case some of you guys haven't seen it yet.
And that should give you some of the context about the things we're talking about and the graphical fidelity we're shooting for, and all kinds of things like that.
We were meant for this, Nathan.
We were destined for something great.
For those who prove worthy, paradise awaits.
Took a long time for him to get out of this game.
He's meant for this life.
Oh, oh crap!
Last I checked, we're all a bunch of thieves, digging around where we shouldn't.
Shame we're not on the same side.
I am a man of fortune and I must seek my fortune.
So, are you ready to seek your fortune?
Hang on, Nathan!
Murder the artifact.
Heads up!
I made a promise that I was done with this life.
How long have you been chasing this thing?
A long time.
A real long time.
Just you and me.
No offense to these guys, but they don't get it.
If you're done lying to me, then you should stop lying to yourself.
The biggest pirate treasure of all time is within our grasp.
Watch out!
Look, Nate, I'm gonna make you a one-time offer.
Drop everything.
Go home.
Live your life.
Or we can just end it right here.
There's gotta be another way.
I need you on this one.
Sam!
You ever wonder, like, different choices, how we might have ended up?
No.
I like the hand we've been dealt.
Yay.
So that was that.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
The entire team at Naughty Dog appreciates that you appreciate this.
Okay, so technical art culture.
And, first of all, well, Uncharted was obviously a big project for us.
Four years since we released a game, basically if you don't count the remaster of The Last of Us.
And it was also the first project that we built from ground up, working for Next-Gen.
And that was obviously a lot of work.
But the one thing that's interesting to me is something that I wanted to accentuate in this talk, mostly was the lessons that we learned culturally.
We are gonna talk about some of the specifics of tech implementations, but it's not gonna be super detailed about that.
But the one thing that's really cool is we might have some time at the end, so if you guys feel like you're super curious to find out about one of the other tool or feature that you've seen here, just write it down, ask me a question, I'll be happy to elaborate.
end. And we'll probably also hang out in the wrap up room.
So that's awesome. But, oh, also a tease.
just so that you don't fall asleep until the end of the presentation closer to the end I will reveal a secret, it's not a marketing secret or anything like that but it nevertheless was kind of a revelation for me because Uncharted 4 was my first project in Naughty Dog and figuring out what is sort of the secret sauce of making these kinds of games and I'm going to talk about that but not before we talk about all the other things So, this talk is broken up into a series of takeaways.
Specifically seven.
And yeah, basically we're gonna talk about these points in the context of sort of cultural takeaways and then kind of amplify with the examples from the real production, like the tools that we ended up developing or approaches that we ended up taking.
And so, first one is a game developer versus a specialist.
And I'm sure you guys have encountered something like this throughout your career.
Maybe you haven't sort of, kind of verbalized it or just analyzed it in this particular angle, but there are different people in this industry.
Some of them care very deeply about their specialization.
They are bad-ass at characters.
They are bad-ass at textures.
And this is what they kind of pay the most attention and the most time to.
But also there are sort of a different group of people that is interesting to see emerge Considering that we get more and more people that actually grew up with video games. They're actually in the video games Precisely to do just that to make video games and making like having a specialization is more of a vehicle for them to be making games They care about making a game more than they care about making the best textures in the world for example And something that we do at Naughty Dog, and you guys probably heard about it, is that we don't have managers, we don't have producers, we have an incredibly flat hierarchy.
It's very self-managed or mismanaged most of the time.
But it's fun, it's the approach that we find to be creative, and also it eliminates a lot of bureaucracy, where if there's a cause that you feel extremely strongly about, you don't have to go to your boss, who in turn will go to his boss, and then he'll talk to the other boss of the other department, they'll figure something out.
If there's an issue that a texture artist finds with like how lighting makes, he can just go talk to lighters and programmers right away and they're gonna figure it out.
on the spot. And what happens, what emerges from that kind of scenario a lot of the time is that different people at different times basically become kind of micro-producers of certain features that they're most passionate about. And I think that kind of allows that mentality of being a game developer more than you are a specialist to flourish.
because that way people can actually see through a feature for the game that they're most passionate about without actually having the capacity to do the entire thing on your own.
So this kind of number one cultural takeaway, I guess, is that at least in our experience and in my personal opinion, it's really great for kind of fluidity of problem solving in your company.
when that ability is only limited by the capacity of the individuals to self-organize and to get buy-in from other people in other departments.
And yes, that sometimes becomes pretty chaotic, but we choose to roll with it and sort of deal with the aftermath.
And yeah, organizations tend to be pretty big, so shifting focus is hard and takes a lot of time, and that kind of helps alleviate that, where like, okay, something needs to be done super quick and it does get done.
And that was our takeaway number one.
Okay, this one is a bit more interesting.
Or maybe not more interesting, but nevertheless interesting.
So doing programming for features that are inherently visual, you can very clearly see a difference in approaches between programmers and people coming from the art background.
And it's quite prominent and at the end of the day, something that we found in this project is, the programming of these features can actually rely on a lot of art fundamentals that artists sort of bring over from their discipline into the logic and their approach to creation of that code.
And so, one example, and I probably bring.
So this is a picture by Robert Ruppel, our director.
This is his Graphical A-Series, and I probably use an image of his like every single talk that I do, because it's really fucking badass.
But on top of that, it also illustrates a very good point, and that is you can be very graphical, you can do a minimal amount of brush strokes with them being very deliberate, and you can get something that looks very detailed and very realistic, even though you don't have to invest in all the details.
that go along with making a realistic image.
And as far as production, that's an incredibly helpful methodology and that also does apply to producing technology.
And a good example of that would be our wind system.
The first implementation of the wind system we had in Uncharted 4 was written entirely within the confines of the programming department.
And it was all about multiple layers of...
of complicated three-dimensional noises that had their own frequencies and scales and you had to balance them out using like a sheet of float values to get something to work right.
And eventually, it was just too complicated for the artist to handle.
It was too cumbersome.
So we ended up revamping that system and turning it into more of an artist-based iteration where all we did was a super simple, almost sign-based function for ambient motion that was just slightly tweaked by like a 3D noise.
and the only parameters that we left exposed were the wind intensity basically how far the wind can push a particular sub-object and the speed of it.
and that covered the entire game.
And so the cool thing is, I'm actually gonna share with you guys some of the videos that we do internally and that we do for like other Sony meetings, partly because the release of Uncharted 4 got shifted, so I can't show you a lot of the things from the game that you haven't seen yet.
So it's cool, because you're gonna get a sort of a behind the scene look at some of the stuff that we've done, and this particular video will feature a lot of the WIND stuff that I just talked about, so you can kind of take a peek.
Take that, Neo-Gap.
Thanks guys, that was one of the internal videos we made for like a Sony get together.
And so you're probably some of the first people to see it outside of Sony, so yay.
But yeah, so as you can see a lot of that foliage tech that we've shown, like even something as complex as like a palm tree that has sort of multiple layers of inheritance.
was entirely done sort of within the art department by just utilizing vertical shaders and big pivots.
And the final implementation I think allowed us to have sort of up to four layers of hierarchy as to how we can kind of construct that motion.
And yeah, it was pretty transparent and in general ended up simplifying the work for the artists a lot.
I'm assuming there might be more questions about this, but we can talk about them at the end.
So, to move on.
You guys have probably heard the saying that when you're a hammer, every problem looks like a nail.
And I think part of it is you're really, really smart.
You kind of want to solve a problem in a really cool, smart and sophisticated way.
And this is something that is very curious because something that I found on this project is being ignorant in some subjects actually ended up helping quite a lot.
Because, and I actually had to tone down the title because it actually initially was being stupid pays.
I decided to go for something less incendiary.
So basically, there are problems that have complex solutions.
And sometimes you just cannot afford the proper solution.
Or for example, if you're aware of the proper solution, your mind might just be conditioned into pursuing that similar avenue without actually branching into all these other interesting creative directions.
So something that helps and something that I try to do as an exercise at this point is whenever I'm researching a new feature.
or just a piece of technology that we need to implement, instead of going and researching the living crap out of it right away, you sit down and you brainstorm for a little, you write down every crazy idea of how you think that can be achieved, and then you go and you research a little bit more so that they can kind of drive your creative ideation process a little further and a little further, and then when you think you have a handle on the problem.
you go and you actually look at how other people do it entirely.
And that way you kind of end up with a lot of tangents and weird ideas that might serve a different purpose or just be a more simplified version of that feature.
And that helped us a lot because we solved issues that were not necessarily trivial.
And actually some of them you've seen, right?
Like the shirt simulation that was in the previous video with the wind, that was like an entirely shader hack.
Our hair wind is 100% the same tech that you've seen on the grass.
It ties into the same system. There is a global world gust, so they're kind of integrated together.
And basically all of these creative solutions that, like, say the hair gravity, because you guys have seen like the Drake's hair, when it's wet it gets droopy.
So like, we never in...
in our lifetime could probably, well not in our lifetime probably, but in the development time that we had could figure out a cheap enough solution to simulate like individual strands of hair as far as how they behave. So just doing super cheap hacks like this which was literally three lines of shader code when you have the correct data as to like...
Where's the root of the hair?
What's the normal of the head underneath?
And we just had to pack it all into build, and we have access to that.
And then we just sort of just droop it down a little.
It looks convincing.
It even looks dynamic, even though it really isn't that much.
There is no secondary motion to it.
But it works, and it's super hacky.
And the only reason we did it is because it was very apparent that we're not going to be able to do anything that's really smart and sophisticated and kind of the proper way to solve it.
So I guess it just helps to step back and sort of re-evaluate what you actually want from a feature.
And this is another one. It's once again one of those little videos that I send out to the team as to like, hey, look at this thingy.
So we wanted to have more interactivity in the world.
I don't know if you can actually see, but the individual planks under Drake's feet shift and move as he walks on them.
And it's a fairly subtle effect, but it's something that we couldn't have done without this tech.
Because it would be just hundreds and hundreds of physicalized objects in the world.
But now, it's also a shader trick.
And it's fairly easy to author.
Artists just create sort of a target blend shape that they want for their objects.
And then every time Drake goes near, we just transition, and then we transition back.
And if we need to, we read an additional buffer that provides persistence.
As to like, where have you stepped a couple of frames ago.
and that allows us to have more variety than we could have otherwise.
And it's not physicalized, it's not really smart, and once again, three lines of shader code, but it's a very silly and simplistic solution to a complex problem, but it ends up paying dividends.
So that's pretty cool.
And I think we're gonna move on to the next one.
So this is also slightly incendiary.
And I do apologize.
But I think what the kind of the biggest point that this takeaway is trying to drive home is, and I don't think it's entirely obvious from the get-go, but it's at least my firm belief that in a creative game development environment.
The things that we actually produce are not the goal in a sense.
I do believe that they're a byproduct of relentless self-perfection and the love for the process.
They're essentially a byproduct. At least that's what I tend to call them because I think that if you want to stay competitive and if you want to stay hungry, if you want to keep studying, then you can be in love with the things you do. You have to be in love.
I mean, the results. You can't be in love with the results of the things you do.
You have to be in love with the actual process.
And that's why sometimes when faced with a decision on whether to throw something away or not, as far as piece of work goes, I mean, we all know as technical artists who probably do art, you know how you can get attached to art and how it's hard to cut levels.
and looks and stuff like that.
And the same goes exactly for code and for tools.
But something, once again, that I found on this project is that every time we cut a particular implementation of a particular tool, we had to rewrite it and it was way better.
And the idea was that by the time we arrived at a realization that we might need to cut it, we've probably outgrown the previous implementation.
So if you're ever faced with that choice, and you have the time and resources to do that, then it pays off.
And a good example, and you've probably seen in that video at the very end, actually let me go back.
We're not gonna watch the entire thing.
Not the watch.
But, okay, so this is like a little snippet of our imposter pipeline.
And imposter.
Oh, oh, sorry.
There you go.
So, imposters are basically flat cards that are meant to represent 3D objects.
There we go.
So, you're now looking at a flat card.
And what you do is you bake a flip book of, all the frames from different angles of this object and then you just transition through that flipbook based on the angle of camera.
And our very first implementation of that was horrible.
At first I had to write all the shader code that did that, which was like, hey, yeah, that's cool.
But then after that, there was a Photoshop script that would arrange all of them in a manner that we could use for a bake.
Then you'd have to save.
it as a level, you build a level, you run a level, I had a designer write a script that would actually capture all the material passes for that, and then I had to write a Photoshop script that combined all of them and spit out all the textures, and you actually had to go into our shader editing software, plug all those textures in, and then you would have something.
And then if you had to change something and iterate again, you'd have to wait for another 10 minutes.
It was horrible.
It was entirely dumb.
And even before rolling it out, even though a couple of weeks had been spent on it, it was clear that we just need to throw it out.
And because we did, the next iteration, as you see here, literally takes one button click.
I was able to go back to the drawing board, re-evaluate, figure out how to make it better, and that ended up creating a lot of framework for a lot of our other Maya tools.
And that was really awesome, because at this point, all you do is you select a mesh, you hit the bake imposter button, and everything's done automatically.
It captures everything in Maya, it sets up the shader, it creates the imposter card, it actually cuts off the verts to reduce overdraw, it puts them in a LOD group, and it even gives you the advisable LOD distance for that particular card, based on the acceleration of the...
of the card and the size of the object.
So, stuff like that was really awesome.
Every time we ended up throwing something out, it was always for the better.
So I wholeheartedly recommend throwing shit out.
It's awesome.
What else?
Yeah, and I guess in general, the takeaway from that point is that culturally shifting into a mentality of realizing that tools really don't matter.
What matters is how they solve problems.
And so, if you apply that as a cultural thing, it can help a lot.
This is a weird analogy, but I couldn't come up with a better one.
You sort of create a trail of tasks that you think leads you eventually to bigger and better tools, essentially.
And this is very important at the beginning of a console generation, because you're probably going to be stuck with your tools for a good decade, or at least some of them.
So having the forethought and foresight to kind of put in the groundwork into that is...
crucial and something that was really interesting is we did not really anticipate how some of the tools transitioned into solutions to other problems that we had.
And sometimes it wasn't really obvious how, while making a progression of different tools, you would end up at a place that's entirely different.
As a simple example, that proxy thing that you've seen ended up un-gating an entire proxy lot pipeline that we had for our buildings.
If you've seen our E3 city demo, all of those buildings were actually allotted out to a super cheap representation of the building at like 50 to 70 meters, and you could hardly tell the difference because it was hand-authored geometry with hand-authored UVs, and then we just automatically bake it out using almost the exact.
pipeline that we had for impostors.
The only different thing that we would do is we would generate a new QV set and we would unwrap the original mesh and then we would just capture it as if it was an impostor.
And that basically gave us a very controllable proxy-logged pipeline made in three hours.
That gave us enough flexibility to ship an E3 demo and later on the game.
It did have its kinks, but at the end of the day, like, those things are not fully anticipated at the time you create the original tool, but it can lead to so many more things.
If you're curious, or actually, you know what?
I think I might show you the next video first.
And this one's gonna be a bit longer, but it's gonna mention a lot of tools, and then I'll be able to illustrate how we went from a tool to a tool to a tool, and how we ended up in a particular point.
So, there he goes.
Also, there are going to be jumps in sound because I had to cut a couple things out because we're not allowed to show them. Sorry.
She came, started a song, Spread her gray neck, About the one she loved, About the one whose letters she kept.
To the one whom you loved, To the one whom you cherished.
Sing a song, sing a song, my love, And fly over the bright sun.
Let him remember the simple girl, Let him hear how she sings, Let him save the native land, And love for Katyusha will save.
Let him save the native land, And love for Katyusha will save.
Goodbye, my dear.
For the glory of the Foreign Power!
The one who was loved by the one whose letters she kept.
The one who was loved by the one whose letters she kept.
Sing a song, a song for the beloved, Go and fly over the bright sun of light.
Look up!
Look up!!!
Look up!!
Let him remember a simple girl, Let him hear her singing, Let him save his native land, And love for Katyusha he will save.
Let him save his native land, And love for Katyusha he will save.
Goodbye, my mother!
Music The one whom I loved, the one whose letters I have guarded The one whom I loved, the one whose letters I have guarded Sing songs, songs for the great, and go for the bright sun of light We'll go to the border, To the land of our forefathers.
We'll go to the border, To the land of our forefathers.
Let him remember a simple girl, Let him hear her singing, Let him save his native land, And love for Katyusha he will save.
Let him save his native land, And love for Katyusha he will save.
Goodbye, my dear!
The song was played, the song was started, About a blue-necked horseman, About the one who loved him, About the one whose letters he had sent.
Thank you for watching.
sorry it was a bit long. But yeah, it just has a lot of tech.
These are awesome programmers by the way. I don't know if they're here, but if you see them, feel free to hug them.
It's fine.
But yeah, so as you've seen, there are a lot of tools that we had to develop.
And what's interesting is, so one of the things, and you probably were wondering why decals were there, Naughty Dog never had decals before.
Also, Naughty Dog never made a game with LODs before.
So it was all these interesting challenges that we had to solve that seemed kind of trivial, but sort of our engine setup wasn't there because we did things so differently for such a long time.
So some of the most unexpected things ended up arriving at a point that was very helpful.
And so just the list here goes like this.
We started with the imposter attack to generate impostors.
Then we transitioned to the proxy lods.
From there on we transitioned to texture capture.
As you've seen you can take any number of game objects, arrange them on a plane, assign game materials, have them automatically tile, and be...
turned into another game material in turn.
So we can populate all kinds of rubble and stuff like that using actual in-game assets.
So from then on we figured, hey, why not do like a pattern generator that's sort of like Substance where we could take in-game objects, 3D objects, and then populate them into like a tileable rock texture or a brick texture.
And we made all this tech.
And then from then we realized that, hey, we have this tech to populate things, so why don't we actually do it for like, terrain or any other game objects that you want.
So that transitioned into that.
And the moment we did that at tool times, it was running Maya, then we figured, hey, why not just have it run in game so we can control density and stuff like that?
So we ended up porting it into LiveCode.
And then after that, we realized, and that's the one thing Naughty Dog also didn't have, live update between Maya and the PS4 DevKit or even PS3 DevKit.
You had to assemble your scenes in Maya, build, and see the result.
But after we got that tech in, we actually managed to get everything moving in Maya and the game simultaneously.
And that ungated our decal problem, because we couldn't have a decent preview of decals in Maya, because projected shaders with whatever we have in Maya is horrible.
And I'm not even sure we have a depth buffer in there to actually generate the UVs.
So once we did that, we realized that we can have an in-game solution and have it be updated runtime, so we actually finally added decals.
And from then on, the list kind of grew.
And what's interesting is some of the tools in the middle there, like generating patterns, right, like generating tileable textures, we ended up not using very much.
Probably just a handful of people at the studio used them, but the fact that we went through that stepping stone allowed us to ungate more things.
So I guess this is, in general, just an argument for being aware with every new step that you take that you might have ungated something that you had locked before that you want to consider or reconsider developing now with all the new tools that you have.
And also that no work is lost if you learn something from it.
If you made something that no one used, but it ended up yielding you some further benefits down the line, then it's great, and it's awesome, and we shouldn't treat it as a failure, per se.
leverage that experience for all the other things.
And one thing that helped us a lot also was that all of these tools were eventually at like a sort of third or fourth offshoot of the ideas rewritten to have a common sort of class base and they were very flexible and modular and we could add functions and reuse the common functionality across all of these.
And yeah, that ended up helping a lot.
And that would be it for this section.
So we're gonna go to takeaway number six.
One thing that we've mentioned is that communication at Naughty Dog flows very freely.
You can go and talk to any department, any person at any given time.
You can go to talk to the co-presidents about how our particular stats gathering system works and they'll listen to you and one of them will actually go in and implement it, because he does that.
And one thing that we found that was exceptionally useful is extending that communication to the technology.
One of the bigger things that we did was allowing our particles to freely interact with our materials.
And there are a couple of fun videos to hopefully illustrate some of the ideas, and this is from our E3 demo.
But.
Manpower's at the bottom of this hill.
Come on down.
doing stuff like this which seems minute and most people probably never even noticed that in the demo but because we've invested the time at the beginning to develop a communication pipeline between effects and uh... shaders we were able to ungate this technology very fast.
The entirety of our E3 demo was made in about seven weeks.
And that includes the development of the proxy tech for buildings and stuff like this and actually producing things.
So it's pretty crazy, pretty hectic.
But the way this works is...
As you run into things, what we do is we...
leverage our existence systems to create a particle.
And that particle is attached to the vehicle that you're shading.
But what that particle is doing is, it's only writing into a buffer that's being read by the shader.
And so the shader reads that buffer and uses it as a layer blend for damage.
Now you can see the buffer.
Or it uses it as a blend for a vertex color baked blend shape on the geometry.
Once again, we have the, I mean the plane shape tech is super easy to do.
Like you just bake positions into vertex colors, get into the game and lerp between the two.
These objects were skinned so we had to do some hacker on top of that, but the fact that we had this available to us basically allowed us to have like a damage model for vehicles that was super easy to set up because our foreground artist would just crumple a vehicle and then just bake that data into the original mesh.
And then we just had the particles reveal that deformation every time you hit the.
hit the car. So it took about three hours to implement because we had most of the pieces in there in the first place. And that was really cool that crosstalk ungated a lot of things like you've seen in the video with a foliage when you throw a grenade what we do is we spawn a particle that actually just have sort of direction vectors for where they actually gonna move the foliage and foliage does move and then as Drake walks through the foliage will leave his footprints as persistent data in the same buffer And same goes for all the NPCs and all kinds of interaction because basically at this point any additional interaction is virtually free because the particles themselves are fairly cheap and we're doing the texture lookup in the shader anyway so you can add as many objects to form in and affect the environment without actually adding any additional cost.
So that was really cool.
We also use that for ambient effects like when, say, we add a dust blend on the environment as you walk around.
And then what we do is we just have a particle that spawns footsteps that actually exclude from that blend mode, so you're actually removing dust as you're walking through an environment.
And it creates all these kinds of cool effects.
And the other thing we do is we can have our designers script shader values, which is...
Also very helpful, ended up leveraging a lot for characters for when they have to be sweaty, muddy, dirty.
Then we have our programmers who actually write into a runtime texture that generates masks that we can also use in shaders.
And we do that for characters for our dirtiness or wetness.
That is also procedural.
We have water detectors and mud detectors on joints, and those just fill in pixels that are easily available in all the shaders.
So we can just go, oh, like Drake's dirty at the right knee but not the left knee.
and same for muddiness.
And actually, if you get Drake dirty and then go into water, it will wash away the mud, but then if you get muddy again, it will actually dry up.
So it's a whole fun, convoluted system, but it's really cool.
And that kind of technological cross-communication allowed us to do fun things.
Like, another example, I guess, would be we took the fatigue system that animation had for when Drake's running and he's tired and he's changing his animation to look tired.
We actually used that to drive a blend value in the shader that made him really, really sweaty.
So cool stuff, really easy to do, and definitely, definitely very advisable.
And actually, the last takeaway that we have for this talk, and this one is a pretty big one, but before we go into that, I'm actually gonna finally reveal the Naughty Dog secret.
Which is interesting because when I came into work at the studio, right?
You're kind of thinking, okay, so is there a secret sauce?
Like how is this made?
Why is this so fun?
And at the end of the day, what it ended up being...
is that the secret of Naughty Dog is 100% entirely the people.
They are so relentless and tireless in their pursuit of perfection.
They never, ever give up. They never, ever take compromises.
And that is also part of the studio culture.
Up to a point where I'd be waking up a texture artist at 3am when he's asleep face down on his Cintiq, saying, dude, you want me to get you an Uber?
And he'd just go, no, I'm napping for an hour and I'm going to keep working.
And they do that for a month.
So, and it was a lot of work, but what I was relieved to see, I guess, is the fact that there is no secret.
The secret is that I've never seen anyone work so hard or so much in my entire life.
And that's what we all did.
And in that context, when you think about the responsibility that technical art has, it becomes very, very...
scary because the responsibility there is immense because pipelines are horrible and you have a group of people that's not gonna quit until everything's perfect you just end up making the miserable for months and months and months that people don't go home and see their families And that is not a way to go.
And I don't think, and if there's one thing that you guys take away from this is that, that responsibility I don't think should ever be taken for granted.
I don't, and maybe Naughty Dog is more of an extreme case, but every place you work at, you have the power to either make everyone miserable or make everyone feel inspired and empowered and to do great and creative things.
And that should always lay pretty heavy on your minds because it is a very big responsibility.
And.
Yeah, I guess being very acutely aware of that is something that you definitely need.
But something to tie into that and kind of go back to what we talked about is, I know we said that there is no final product per se.
The final product is your relentless desire to make something better, but I think in light of that responsibility of a technical artist that we talked about, the one thing that I can attribute to the goal and kind of the endgame of technical art is actually the people.
Because technical art does not have to be about tech or it does not have to be about art.
because the end game there is making sure that the people can use what you write.
It's not.
right when you're just write a tool and throw it over the fence and go use it why aren't you using it and you're upset and angry that people don't use it because your job is not writing tools your job is making people empowered with the tools you write your job is making them happy your job is making sure that they can execute on the things that they need to execute better because you did this so keeping that always in mind i think is crucial and at times can be helpful then than kind of writing super fancy, sophisticated tech that does not take that into account or being more oriented towards keeping the team engaged and empowered.
And one of the things that we did that every single tool that we've written had were these two buttons that you see there.
There's the help button and then there's an A button.
So every tool at all times has to have a help button that will take you to the web page with all the videos, with all the explanations.
It will explain to people how things work and it's a huge chore to maintain.
All of you probably know, but it's something that is extremely important, at least.
as far as I see, because it makes the life of the people on the team better, and that is your end goal.
And not the fact that you've written something that's just going to lay there on the shelf and no one's going to use it.
But the other part of it is that little A button, and that is...
you ended up calling it a bad signal. Basically, every time you press that button, I get a message that tells me who pressed it, what my scene they were in, what tool they were using, and I make it a point to be at their desk within a minute from when they've pressed it.
Just so that everyone on the team knows that there's constantly a channel of interaction and it's not a one-way street where we just throw things over the fence and expect them to use it.
It's always about them being engaged and empowered and it's always about being there for them in the first place.
And one of the other things...
that we did that I find really interesting is a couple of months before crunch hit really hard I implemented this little tool. It's not even a tool, it's a button that you click and it just prints out like a prints out a random quote of an Uncharted 4 player from online that I basically went around and assembled.
And they're not kind of the ask Hissy type of quotes, they're actually there to help people remember what they're doing this for, because when we're in the midst of a super hectic and crazy production, Everyone's thinking about getting their work done.
Everyone's probably thinking about how we want to do the most polished, the best game that has ever been made.
But it's not about that.
The creative people that you have, they're not motivated by what they do.
They're motivated by why they do it.
Technical art does not have to be all about technology.
It can be about people, it can remind people why they do it in the first place.
That you're not just making polygons and animations, you're making memories for people.
You're allowing people to experience things together that maybe they'll remember and cherish for the rest of their lives.
Yeah, and if there's another thing I'd hope that you guys could take away from this is that there's a sort of a field that we can experiment with more as far as trying to transcend the disciplines and have technical art not only be a solution for technical problems, but also to help and empower people even as far as motivation goes.
And I guess this is it for me.
Thank you so much.
One fun fact, I don't know if you guys want to hear it, there's a bonus.
Do we have time?
I think we have time.
So that quote system that we had, one of our lead designers ended up implementing that into our script editing tool.
And so it would just randomly print out one of these messages sometimes, like occasionally when you compile a script.
And so eventually we had an email thread going where our designer was telling that Sublime, our script tool, was telling her what to do because one of the quotes was, you guys should really do a dinosaur game.
And she's just compiling a script and Sublime just goes, you should really do a dinosaur game.
And so it was fun, it was unexpected.
You end up entertaining people, having all these emergent situations, and apparently Alex is pretty down to do a dinosaur game, so new IP from Naughty Dog confirmed, maybe.
But yeah, so I guess that's pretty much it.
If you guys have any questions about any tech that you've seen, feel free to line up at the microphones.
And I'm assuming we're also going to do the wrap-up room after.
Thanks for listening.
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
All right.
There you go.
I got a question about your relationship with the developers, because you're a technical artist, and sometimes technical artists have to make some proof of concepts, and the developers have to make it real in the game or in the runtime.
and sometimes your work is directly used for the final product.
What's the part or the proportion between the number of times you need a developer or not in the final result in the game?
Is it clear? Sorry.
So what you're asking is how much, like what's the proportion of the time that a technical artist at Naughty Dog would have their work directly in the game versus writing the tools?
Exactly.
So what's very interesting about Naughty Dog, we don't have a dedicated technical art department.
It just doesn't exist.
We have what's called technical art department, but within the studio we call it foreground department because they handle explosions, like destructible physics, collapsing things, because we have a lot of that.
So basically what it boils down to is every team has some team members that are more technical than others, and they end up taking up.
that works, so you kind of cannot be in a situation at Naughty Dog where you're only doing tools or only doing things that are like the production.
You always have to be contributing to the final project and I think that's kind of a point that we make in the company where we don't just have people who don't have their labor directly in the game most of the time.
Now that being said, depending on the time we are in production, like when we're gearing up for crunch, I'd probably spend more time writing tools just to make sure that artists hopefully have to crunch less.
So it also varies based on time.
But apart from that, you still have to do art.
Hope that answers your question.
Thanks for that.
Yeah.
OK.
Thanks.
Thank you.
First, awesome talk.
It's really good stuff.
Oh, thank you.
Also, you guys should definitely do a dinosaur game if you can.
But from the E3 demo, one of the things that really stuck with me was how awesome the destruction you guys have.
Like, the bullets will tear apart wooden cover.
And the best one is that if the sand bag gets shot, the sand will start flowing out of it.
It really stuck with me.
Could you speak some more about some of the tools you used to get the destruction?
Sure, sure. So that is mostly in our program department.
They use Havoc a lot, obviously, for all of our physical destruction.
They pre-set up the chunks that will disappear as you shoot them and physicalize and fly away.
So that's how we do that part.
And then we basically have environment artists actually populate those, like specifically based on where you're going to be shot from and all of that to help performance.
But as far as the grain bag goes, that was...
I'm pretty sure it was on joints, and we played an animation when it got hit, but then as far as the pouring of the green out, we had to do a bunch of other things.
So there was a particle effect that got spawned on one side, but then we didn't have tech to actually spawn it on the other side, like the bullet hole, so we had to hack around it where we would just do like a gigantic decal that would go through, as far as I remember, so we would actually project on both sides, and then...
where actually we did a second decal that was rotated 180 but was big enough to cover the radius of the grain back.
But then we would just spawn a particle effect on that other side that would do kind of the sipping grain and then we'd have a different mesh that would actually get spawned at the probe collision with the ground from that point and then it would start growing based on the animation of that effect.
And then on top of that...
We had to add a feature in the physical shader that we had separate shaders for particles and just regular background geometry.
So we had to add a feature for that that would allow particles to drive the animation of that pile of grain so that it actually flows down as the pile gets bigger.
And then once the particle stops, the animation will stop.
And that was a lot of work for one tiny effect.
And that is kind of how we do things at Nighthawk.
And that was very interesting, because one thing that I had to very quickly unlearn working there is compromising.
Like any other place I worked at, you go, well we have that much time, so we can probably do that many things.
Doesn't work at Nighthawk.
You have, no matter how much time you have, if it's awesome, we gotta do it.
And we'll make sure that it happens.
And yeah, I guess there are plenty of effects like this in the game that hopefully you guys will appreciate.
Anytime.
Any more questions?
Oh, there you go.
I was wondering what UVs you used to look up into the dynamic mass that's generated via particles.
So how are the UVs laid out?
Oh, so we had actually two implementations of that.
And one of them was a top-down projection.
Literally, we just used the world space position of the vert or a pixel to look up the texture.
We just had to sort of get it into the range of the camera for us to.
And then the other one was actually screen space.
So we have just a screen space buffer, and I used the depth buffer to project some of the, it's basically like a separate buffer with decals projected into it that we use for blending.
It ended up still being fairly expensive because of all the overdraw, like we put it on gunshots.
So they would crumble the material around them.
And the more you shoot, obviously, the more decal cubes we end up creating.
So we had to do all kinds of sophisticated things to make sure that we actually look up into that buffer, make sure that the pixel that's in there is not maxed out, like it's not full brightness.
And if it's not, only then we spawn an additional decal.
But basically, these were either screen space or top down.
Yay, done.
Thank you so much, guys.
