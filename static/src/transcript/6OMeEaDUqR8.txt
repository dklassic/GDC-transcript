Hi, welcome to GDC virtual talk.
So my kids have been staying home this week, just to be safe from coronavirus.
And what is the better time than to introduce them to Minecraft this week?
And they've been absolutely loving it.
Uh, so we have a, we have an iPad, we have a switch, we have a, uh, we have a laptop and, and they can play together and, and they've been having a great time.
But I think like the best thing about.
This whole experience for them is the fact that they can play together. They can play with me. They can play with each other They can play with their friends the neighbors that that is the beauty of it and that is the beauty of cross-platform is the fact that they can Focus on playing and not worrying about what platforms what kind of consoles they have and things like that Hi, my name is Raymond Arifianto I work in XLByte right now.
I've been in the games industry for quite a few years, mostly in the online space.
Online space is something I'm super passionate about.
And one of the topics I've really, really been passionate about is actually cross-platform.
I got a chance to work in cross-platform in 2014 when I was working in Lionhead Studios.
We were working on Fable Legends.
We were trying to get Xbox One and Windows 10.
And we got pretty far.
And that's when I realized that cross-platform gaming, it's a topic that has been discussed for quite a bit in the consumer space, in the gamer space, but not really in the game development.
communities. There's not a lot of articles and understanding of the basic things that is needed to make a cross-platform game. Now cross-platform is on the rise. There's been more and more games that's been shipping with cross-platform features, right? I mean like all these games that you see they're all having some level of cross-platform features.
They have different scopes, they have different implementation But the point is that it is gaining traction It is more accepted in the mainstream and here's an article from Anderson Herowitz blog Like he's basically, the author is basically saying that like games Historically speaking has been siloed and segmented by different platforms But now with the with the rise of cross platforms what what the author is noticing is that multiplayer games, the growth of multiplayer games is even getting faster and larger because of it.
So that's pretty cool.
So why cross-platform?
From the gamers perspective, it's great.
Just like my, just like our kids, like they don't have to worry about what device they're playing, what platform we're playing.
They can just play.
They can just play, they can connect with their friends.
They don't have to worry about if the friends is in a certain platforms and things like that.
They can just play together and anywhere.
Whereas for you, for us, for the game developers, it is great because instead of having your user base to be segmented in different platforms, now you have a large pool of players that you can build larger multiplayer sessions with.
And as you and I know, fuller multiplayer sessions, especially in the long tail of your games, if your game has been out for a few years, that's a positive thing because you can build a more rich multiplayer experience with fuller sessions.
Alright, so you might think, alright, that sounds really good, so let's add cross-platform to our next game.
Well, I don't know about you, but I really love Lord of the Rings in the Fellowship of the Rings.
If you remember, like, Consul of Elrond, they were saying this, like, let's make...
our next game to be cross-platform enabled.
And Boromir said, one does not simply cross-play.
It's because he knows that making a cross-platform feature games is not straightforward.
It's kind of tricky.
So this is why I made this talk in the GDC, is for you who are thinking of making your next game to have multiplayer features.
This is NFG.
If you have shipped games before, you have dealt with submitting your games to the different platforms.
You know the platform capabilities.
So that will be a good basis for this talk. And also this is just to...
Hopefully this can help you jumpstart your research and planning.
So with that...
Let's jump in. Here's nine things that you need to know about making cross-platform games enabled. Let's talk about terminologies.
There's been a lot of terminologies. Everything starts with crosses, right?
Cross-play, cross-progression, cross-buy. What are the differences?
Cross-play is what a lot of people think about when they're thinking about cross-platform. It is basically getting people together into the same multiplayer session.
But the players can come from varying platforms.
So this is literally Xbox players can play with, PlayStation players can play with, Steam players can play with, Epic Games players can play with.
Cross-progression is basically you play in one platform, and then you can continue your game somewhere else.
That is loosely what the definition is.
It applies to both single-player and multiplayer games.
And the third one is cross-buy.
Cross-buy is all about you're purchasing some stuff in one platform.
And then you expect that those stuff that you bought in some other platforms will available for you when you start playing your game in another platform.
There is a cousin for this, which is called Bopa, which I will also talk about.
Bopa is the buy once, play anyway.
So there is a I found this chart in the internet.
Whoever wrote this chart, whoever made this chart, you guys, you are awesome.
So thank you.
Obviously, this list will grow.
But I think like there's just the fact that people are really thinking about cross platform.
So kudos to whoever did this.
Number two, let's talk about mastering your own online domain.
What I mean by that is that when you are shipping games in different platforms, there are platform capabilities, there are platform services that's available for you to use.
And they're great, right? I mean, like Xbox Live, you have your Steamworks, they have robust capabilities.
Now, if you want to make a cross-platform games, unfortunately, you cannot use most of those.
because the stats in Steam is not compatible with stats in Xbox or stats in PlayStation.
So that's why...
it will look kind of more like this, where basically you have your set of services, your set of identity and stats and matchmaking and all that, and then it links behind the scene, it connects to the different platform services with service-to-service calls.
So what can you use from the first party platform? You definitely have to use their identity and the account, and we will talk more about that. You also have to...
connect and use their e-commerce services, especially if you are intending to monetize your game with in-app purchase.
And then the third one is basically anything that the platform requires you to use.
As an example, if you ship games in Xbox One, I'm sure that you know that you have to use their MPSD, is their multiplayer session directory, even though you have your own matchmaking service.
Because they're using all that information that you put in the MPSD to power the dashboard information about whether you are in a session, whether that is joinable, and your rich presence and all that.
Third one, you got to know your players.
This is one example. I have a Steam account. I have an Epic account.
I have an Xbox, PlayStation account. I have a Switch account. If I play the same game that has cross-platform capabilities, how does the game know it is me?
And that is done by something that's called account linking.
Account linking is just basically, you want to be able to link your common account with the different varying platform accounts.
You probably already seen some of these, you've been using them.
Like, you know, if you have Ubisoft, you play account, it's like, you can go to their website and that's where you actually link the different accounts.
And then also the same thing with Epic Games.
If you play Call of Duty, the latest Call of Duty has cross-platform capabilities, right?
And this is one Reddit post that I saw that actually is very relevant.
When you're looking for...
your friends in Call of Duty, you have to use the Activision ID.
Even though you're playing on Xbox, you cannot search your friends if they are playing in PlayStation with their PlayStation game attack, because it's not going to know about it.
But what you can do is you can actually use the Activision ID to look them up.
And this whole unified account system, identity and account system, is the fundamental piece for the rest of your cross-platform games. This is why, like just the diagram, it's basically it's your centralized account system that links to the other platforms.
A couple of tips, you want to consider compliancy early on with the GDPR, CCPA, there will be more so you have to take those into consideration early on you don't want that to bite you at the very end and also there will be new platforms coming so you want to have the ability to add new platforms as they come in This is one example on how to implement account linking to Steam.
So basically your IAM service is the one that basically exchange the token, the Steam token to your own token so that you can use that.
Your client can use your token to connect to the rest of your services.
Now you can now you have identified now you have successfully identified the players With account linking the next thing you do is get them to play together, right? So this is the you know time to cross play in order for You to connect those guys into the same multiplayer sessions with all their friends You would need to build all these things like you need to build matchmaking and session management stats leaderboards It all kind of depends on what your games need, but you will need these kinds of services to get them together.
This is a typical matchmaking flow, so basically you get your identity and behind the scene that might actually federate to the other platforms, but then from that point on you use your matchmaking service to get people into the same sessions. A few notes about multiplayer and connectivity.
If you have the option to choose if you are in the position to choose your game engine Make sure that the game engine that you're choosing Is is friendly with cross-platform what I mean by that is it has already a built-in mechanism to do client-server synchronization If you choose to build your own game engine absolutely you can do that, but just keep that in mind And when you want your clients to start connecting to the other players to play, I would suggest not going with the direct peer-to-peer route, especially the fact that you cannot use the built-in platform libraries, like, for instance, the Xbox Secure Device Association, Secure Device Address.
You cannot use it if you are making a cross-platform games.
It gets pretty hairy, especially when we're talking about console connecting to a PC.
PC right and then you have to deal with the net restriction and all that so I I would I would suggest Go with either dedicated server or you use some kind of relay server assisted peer-to-peer to build your To build your mesh And and last but not least because you are now dealing with multiple powers, essentially, from all your clients, PC, consoles.
You want to have the simulation to be locked at some number.
30 frames per second is the one that everyone seems to be using right now.
So use your simulation to be locked, but have your rendering to be whatever you want, 60 frames per second, 120, or even unlocked.
All right, tip number five.
Let them continue playing on the other platform.
I like a lot of people I'm a big fan of Witcher so I played Witcher in Witcher 3 in PlayStation I've spent hundreds of hours and then when I pick up my switch I have to start over right because there is no way to continue my progression in another platform So, you know, this is this is I found a post that kind of captures the same question.
The good news is they have implemented a cross-progression, cross-save between Steam and GOG to Switch.
So I think that's fantastic.
That's great.
That's definitely a step in the right direction.
It didn't help me in particular because I was playing in PlayStation 4, but I think it's heading in the right direction.
So this is the value that cross-progression gives you, right?
It's a quality of life for your players.
Now, how do you store the data itself?
It's really up to your game.
Do you want to store it as a blob?
Do you want to store it as stats values?
Do you want to store it as a string?
It's really up to you.
But first and foremost, you still need to identify that I'm playing in Switch, I'm playing in PlayStation, I'm playing in Steam.
They're all actually me.
Again, it goes back to the unified identity.
Now, when you're talking about cross-platform...
cross-progression which basically from one platform you do a save and then from another platform you do a load and then you save again you have to deal with S-pop and M-pop. S-pop is the single point of presence it's literally you're only allowing a single connection to the same account to the same logical account at any given time so you would One implementation will be like if you log in with one platform and then you log in from another platform You would log out the other platform, right? So that's that's just one Behavior that is expected from an S-POP. That is all of it is Useful to protect yourself so that you're not riding to the same location At any at any given time. So you're you're doing stomping at that point Now M-POP is is actually the other way around. M-POP is Allowing you to do that, allowing you to have multiple connections That's pointing logically to the same account. It can be done It just means that it's a little bit more complicated, but it's definitely doable The next one is you want to unify your commerce if you go to Minecraft and then you go to their store, you would see that it's a very consistent experience.
I took the screenshot a couple of weeks ago, and this is the experience that you see.
Regardless whether you use the Switch or the iPad or the Windows 10, it's like they're all the same consistent experience.
Let's talk about the difference between primary store and secondary store.
Primary store is, the store that you have to configure on the platform side that results in real money transaction.
Whereas the secondary store is everything that you control within the game.
You want to make the secondary store to be as rich as you can.
And you want to simplify the things that you rely on in the primary store to the minimum.
The reason being is the fact that you as you can probably guess, you have to configure the primary store in every single platform.
And then you would go into the different regions and then the different pricing and all that.
It gets pretty complicated.
And also, as we will talk about it in the next chapter, sorry, in the next point, there's no APIs to do it.
Like, this is a very, this is pretty much still a manual process that you need to go through with every single platform.
So I would suggest keeping it simple.
A lot of the implementations these days are using it for virtual currencies like V-Bucks or the Minecoins.
That's why, right?
That's because you want to simplify that one and then you have a richer experience in the secondary store.
This is an example of fulfillment flow, where basically the game, you let your players from Steam or from PlayStation to buy the consumable or durable from the platform store, and then you use your unified commerce to consume on behalf of the players with the secure service-to-service calls.
This is the example calls that's happening for Steam.
That's basically your commerce service is the one that's going to finalize the transaction.
It listens to the callback.
And then your e-commerce is the one that basically confirms that transaction is done.
Now I'm going to grant this user this much in the wallet or grants this entitlement.
The next one is a platform certification.
There are three things that is guaranteed in life.
The first one is, well, especially for a game dev life, death, taxes, and failing a certification on a very unfortunate time.
Because if you have gone through certification before, certification can be pretty tricky.
It's quite a long list.
It varies from platform to platform.
And one thing to keep in mind about making a cross-platform game is that there are actually an extra section that talks about cross-platform games platform certification for each of the platforms Here's one example. This is on the left hand side you have This is Call of Duty by the way like on the left hand side you have Xbox right? Yeah Xbox and the right hand side you have PC The difference is very very subtle, but if you see like in the right hand side of the PC You actually like they will tell you if the people that you're playing with is an Xbox or in play PlayStation whereas in the left hand side The requirement states that's like either either they are playing in the same platform as you are which is Xbox or they're playing in another platform which at that point you cannot actually say which platforms they're from.
So it's a subtle UI difference and that's something that will fail you your certification if you actually didn't catch it.
So my recommendation is just provide yourself enough buffer to go through the platform certification and actually understand what is required.
The next one is separate release and deploy.
This is one example.
Fortnite has this black hole event that's basically it's for their transition from season 1 to season 2 at some point people just suddenly like the whole world just suddenly started like collapsing and Absorb into black hole and it happens in the exact same time and and I would this is a time event right and and the reason this is interesting is because they don't rely on this event to be activated with the title update.
If you have gone through title update ritual, it is pretty involved when you are submitting a title update to the platforms.
And also, when you were releasing a title update, a binary change, You cannot really synchronize it across all platforms right now. It's a very manual process There is account manager that needs to be involved. There's spreadsheets Sometimes you have to go to some portals you have to pass the certification test. So it's it's in general. It's it's very hard to synchronize uh the the release of a title update um now But title update is not the only way you can change, you can release a feature to your games.
There is also data only patch, which is like sometimes you will see that it starts downloading assets.
So that's really useful.
But also, we're going to be talking about server-side toggles.
So what is server-side toggles?
Server-side toggles are basically server variables that you define on the server side and then have the games, game clients, and game servers to react to the changes to the server variables.
If you have that capability in your game, what you can do is you can deploy the title update earlier.
So you deploy your title, your binary changes to your game.
and your binary changes will now understand these extra server variables ahead of time.
Then when you are actually ready to activate the time events or other changes, you can just change the server side variables or feature toggles.
What is it used for? It's used for scheduled events, it's useful for game balancing data, it's useful for kill switching certain things, or even enabling certain features.
This is a diagram of how it would look like.
It should be pretty straightforward.
You have the server variables that is served from your services, have your game clients and have your game servers to be ready to react to it.
Push notification is a nice thing to have.
But in theory, you don't really need push notification.
Technically, you can poll, but polling.
And then you have live designers and producers or developers who configure those server variables So what that means is that if they need to tweak something if they need to kill switch something if they need to activate Certain events they can just go through from the server variables, right?
All right, so we're at the last tip right now. This tip is is this is an uncharted territory So I want to be clear about that It is by ones play anywhere I'll What it enables you to do is basically, it lets your consumers to buy your game in one platform and have it available for him or her to play anywhere else in any other platform.
Alright, so why do we care about it?
Like from players it's great, right?
I mean like from players it's basically, it's literally they don't have to worry or think about what platforms I need to buy this particular game for I can just buy the game and I don't have to worry about it because I can just go to another platform and I can play it there For you, for the game developer it is a goodwill it is mostly like to get to get the your fans to get your players to really embrace your brand, drive engagement, and if you actually have your own store, you can actually drive the traffic to your store this way.
So here are three steps to enable Bopa. The first one is unified identity. Again, everything boils down to the unified identity. The second one is being able to kind of keep track of entitlements.
And the third one is being able to call another platform's API to grant entitlement.
Now, this API, the third one that I mentioned, the keyless entitlement, that is not widely available.
Only a few platforms support it.
And even that, you have to go through your account manager to use it.
But I believe that this is where the industry is heading right now.
That's an example.
The first one is you buy it in your store and then you want to show up in Steam.
So this is the flow.
So basically you have to call, eventually you will call the grant package to Steam.
Again, this API is not available publicly, so you need to talk to your account manager if you really want to enable this scenario.
The second one is you buy the game in Steam and then the game will show up in your store.
So this one is a little bit more straightforward.
This one is basic, but you cannot listen to purchase events in Steam.
So you have to rely on your player played the game once first in Steam.
Maybe at that point, you're also gonna trigger the account linking, for instance.
And then at that point, you know that's like, all right, this player has logged in.
He has the entitlement in Steam.
I'm gonna give him an entitlement in my store.
So, key takeaways.
Should we or should we not do cross-platform?
I think cross-platform is ideal for developers who want to make several cross-platform games in the future, or if you want to make a game that you are going to maintain for a long time, that has a long life service plan.
Why is that?
Because.
Building a cross-platform games is not trivial.
You need time and you need effort and also you need investment to actually have the proper infrastructure to support it, like all those services that we've been talking about.
Where do you start? Just like the concept of game engine, like Unity, UE4, and all that.
Basically, it gives you a jumpstart.
Can you build your own game engine?
Absolutely, but you don't have to.
There are definitely some solutions out there that will give you a jumpstart to enable this, and some of those are actually cross-platform ready also.
Which one are you gonna use?
Just like when you're evaluating game engines, there are pros and cons that you need to evaluate.
There is no one solution that fits everyone, so you definitely need to check out what you need, what is important for you.
So I listed about seven, and I'm sure there are more too.
It kind of depends on what you need.
If you would like to learn more about this topic, about the backend as a service solutions out there for online game dev, check out the Discord channel.
And so last question is, where is this industry heading?
This is my opinion.
My opinion is platforms are taking the backseat.
There will always be new platforms coming in.
But I think that platforms are taking the backseat.
And it is really about the player experience is the one that's going to take the central stage.
Just like my kids, they don't really care about platforms.
All they care about is having a good time and playing together.
And I think that is where the industry is going.
So if you listen to my talk.
Thank you so much.
That is my email address.
I would love to hear more from you, especially if you have any thoughts, or any comments, or any questions about my talk, or any cross-platform in general, or about online game development.
like, you know, I would love to hear from you.
It's a bummer that I don't get to see you in March, but hopefully GDC 2020 summer is happening and I get to see you then.
Until then, the company I work for, XLByte, we actually have an online event going on in March 16 to 20.
So check out our website.
Hopefully, I will see you in the online event that we have.
We're going to be talking about cross-platform and other things too.
and a special thanks to Mark and Ed who have reviewed my deck and gave me a lot of good feedback So thank you for that and also the rest of the GDC crew. I know it's not been easy So thank you so much for coordinating this and making it still Still happening and for you. Thank you so much. Bye All right, right, so what do you like about Minecraft?
Well, I like it because I can play with my dad and my friends and sometimes my little sister.
