turn off everything that makes noise and reply to the survey when you get it in the mail. Wow that's super loud.
All right, I'm going to talk about technical direction.
Some of you may have heard that if we say that if you're expecting a programming talk, you will be disappointed, because that's not at all what we'll be talking about today.
So my name is Mike Acton.
I'm the engine director at Insomniac Games.
You can tweet me there, Mike underscore Acton.
So, what am I talking about? Why am I talking about this? I'm not going to be really saying anything new.
I don't know of a real breakthrough in technical leadership or human communication that's happened in, say, the last 5,000 years.
So, I'll really only be talking from my experience and my perspective on the problems.
This is what I've learned and the things that I think are important.
So, what is my experience?
In this particular case I've been the Indian Director at Insomniac Games for a little more than 10 years, which I think is long enough to have both have seen the problems, tried to tackle them and seen them through to the end, which means that I've seen the results of the things that I've done.
I've seen the mistakes that I've made, I've seen the impact of what I've done.
I've been able to see how all that stuff has either fallen apart or worked or not.
So I think that's valuable experience.
I've had to live with those decisions.
So why am I talking about this?
I think this is a very hard subject to talk about.
I don't know, in terms of us sitting here and discussing this topic, I don't know if we're on the same page, when we mean leadership, when we mean technical direction, when we're talking about teams.
So it's hard to even have the sort of the same, the shared vocabulary on the subject.
And there's a lot of things that are, you know, that I might say that sound like cliches, you know, super obvious.
You should, you should spend time with your team.
You should have one-on-ones.
Like this is all stuff I think everybody knows, but the gap between knowing something and the practice of doing it every day.
is often very, very wide.
And that's partially what I'm going to be talking about, is just that practice, that day-to-day practice.
This is the stuff that I've learned, and sort of dealing with that gap between the obvious and the practice is what, really, what I want to talk about.
So, when I proposed this talk...
last year, one of the pieces of feedback that I got from the GDC committee is, often when you talk about leadership, you're not giving a clear takeaway.
The audience wants something clear to take away from your talk.
Here you go.
Here's your easy to remember takeaway from my talk today.
Hex 999990.
Moving on.
So what does it mean to me to manage technical direction?
In an unnecessary form, we will say the five C's.
Confidence, cost, commitment, conflict, cooperation, and all those things depend on context.
So I'll be talking about what it means to me to manage each one of these things.
In terms of context, this is really what I want to talk about.
And that's, I want to start with providing an example of what I mean by each one of these things.
What does confidence mean to me?
What does cost mean to me?
I want to talk about the risk profile and how I evaluate that.
What about each one of these things is hard for me personally, what may be hard for you is different, and what I focus on in terms of training each one of these things.
So let's get right into it.
So we'll go through the examples of each one of these, what it means to me, and my personal rules of thumb.
Confidence.
So in terms of confidence, what I mean is you've certainly heard this at some point in your career.
Somebody has said PM, or the producer, or somebody, or my manager is making unrealistic schedules.
And he's been really upset about that.
I want to talk about schedules and how I view them.
The only thing that schedules are for is about building confidence.
That's the purpose of a schedule.
Schedules are one tool to build confidence.
So what we need to be doing is focusing on managing confidence.
not managing a schedule. The only reason I make a schedule, the only reason that I am asked for a schedule, if I'm dealing with a publisher or whatever, is that somebody somewhere can have confidence that we can build the thing that we say that we're going to build.
That's the purpose of the schedule. That's the tool. So instead of focusing on the schedule, focus on confidence. Where are you not confident?
Where are you confident? What do you need to do to be confident?
One of the things that helps me to build confidence is what I call the 80-50 rule, which is if you are not 80% of the way done, if you do not feel like you are 80% of the way done, when you have used 50% of your resources, you are way behind.
And I find this true the vast majority of the time, and it's super helpful in terms of practice for me.
Talking about cost.
You almost certainly said or heard somebody say, you can't know how long it's going to take to solve a problem that you haven't solved before.
So we can't possibly estimate the cost of solving this.
I'd like to suggest that it's not the.
that's so much the problem, it's the value.
If you don't know how much it's worth solving, knowing how much it's going to cost to solve is not a meaningful number.
So you have to start here.
You want to start by sitting down with any particular problem that you want to solve and say, how much is this worth solving?
If I spent two weeks on it, would it be worth solving?
If I had to spend two years on it, if I spent five years on it, if it took me 20 man years to solve this problem, would it still be worth it?
Whatever it is, that's the number you have to start with, or the cost is completely meaningless.
So along those lines, I feel it's important to have a cost profile for things like development versus research in general.
So for me, for instance, right now at this point in time, it's about an 80-20 mix.
You have about 80% focused on development and about 20% focused on research.
And by research, I mean problems in which you don't know what the value or cost profile is.
You're saying, maybe this is going to be valuable.
I don't know.
I'm not going to explore this space.
And about 20% of your time mixed in with various individuals or various projects spent on those kinds of problems.
In terms of development problems, I feel it's important to have a rule of thumb on what your expected return is. So for me that rule of thumb is 5 to 1.
If we invest a day into a development problem, I expect five days in return.
And that may be five days of production time, that may be five days of that individual's time saved through maintenance over the course of the next two years, whatever.
But a five to one return is a good rule of thumb for me.
Building versus buy.
This is always the perennial question.
And not just on the engine scale, but on the individual systems or individual feature scale.
How do you decide when you're going to build or when you're going to buy?
And I suggest that this is always going to come up.
You're always going to have to deal with this question.
So you should have a function for dealing with this question.
It's not going to be a surprise that at some point you're going to have to answer this question.
So for me that function is about answering the question of whether or not we can create as a team a competitive advantage by knowing our context better than anyone else.
I think, you know, we look at ourselves as an engine team and as a tools team.
What we should be able to do is solve all problems better than anyone else.
We know what our production teams are doing.
We know what kind of games we're making.
our studio better than anyone else.
And in fact, if we cannot solve our problems better than you could solve them by taking something off the shelf that's generic and doesn't have that context, we fucked up.
Like that is, we should have that competitive advantage.
But look in terms of your studio and your problems, like could I create a competitive advantage by knowing my studio better or knowing our problem better?
If I can't do it, then yeah, buy it.
That's the point.
That's where the value is.
Commitment.
So what I mean by this is, starting with, like somebody asked, can we do x, whatever x is?
And you have either said or heard somebody said, well, it depends.
It depends on what the art's doing, animation's doing.
There's a lot of variables.
It totally depends on all this stuff.
Or you may answer, well, anything is possible, right?
And I want to point out that there are always lots of variables.
Like you will never, ever be dealing with a problem where there isn't lots of variables.
So that's not an excuse to hedge.
You cannot hedge in terms of, or I find that it's, it's problematic to hedge.
People don't want a probability table.
They don't want to say, all right, what's the percentage chance of each one of these options happening and sort of go through a probability cloud to figure out whether or not they should read how they should be responded.
They just want to know what they can plan around.
So you give them, as a director, your best guess, right?
And you say, this is what's going to happen.
It's understood that there's a lot of variables.
You do not have to excuse that every single time you speak.
But you want to ask yourself, in terms of those probability tables, in terms of that probability cloud, what are you willing to stake your reputation and your job on?
Because every single thing that you say, every time you say, every time I say, where this will happen, you're staking your reputation on that thing happening.
So be confident.
To going back to schedules, figuring out a way to increase and improve your confidence is the thing that you're focusing on.
And I find it helpful to ask this question.
What would you be proud to say you did five years from now?
Thinking forward, these are the things that I want to do.
These are the things that are important to me.
These are the things I'm willing to stake my reputation on because this is what I really want to accomplish.
And to ask the same things of your team, right?
Also know that choices aren't forever.
You're going to make a decision, and that decision is going to stick.
But choices last way longer than you hope they will last.
And I think, I find that 10 years is a pretty good bet.
You make a fundamental choice, and it's going to get spread around, and it's going to get into the code, and it's going to get into the data, and it's going to, you're going to have tools or whatever, and you're going to build stuff on top of it, and all kinds...
There's no way you're going to unravel, like, whatever.
You're going to live with that choice for 10 years, on average.
Some things last a little longer, some things you can rewrite and fix, but the ramifications of choices last way longer than you hope they will.
But they aren't forever.
Within that 10 years, you should have a chance to fix it, if you screw it up.
Conflict.
It's hard to talk about conflict these days without talking about Uber, right?
So the question you can start with asking yourself is, how do you not be like Uber?
And that's a question that I've been asking myself over the last few weeks, right?
Is you have this sort of very toxic environment, and you do not want to replicate that in your environment.
Or at least me personally.
It's not an environment that I want to replicate.
That's not the kind of thing that I'm looking for.
Or, let's say on a much smaller scale, you have the kind of response where you have an individual that just doesn't want to work with somebody else because they feel that they're just too abrasive, or they're just not working well together.
So how do you deal with these kinds of situations?
Or how do you deal with these conflicts?
How do I deal with it?
So for me, it's important to put process in place to protect people on my team from my personal biases when they when they conflict with my values. Ultimately, my values are are what's going to be driving my team as a technical director. These are my values. This is how it's going to be, but when.
Things that I do conflict with my values.
I want some process to stop me from doing that.
So I put things in place like the leads are in charge of telling me when this is not working.
And they can basically outvote me on things like.
hiring practices, right? When my bias is showing through and I'm saying, like, this is not, you know, I don't think this is the right person, but they're saying, no, you're wrong, this is the right person. Put that process in place. Or that I don't think this person is ready to be a senior engine programmer and they're gonna tell me, no, you're wrong because of this. And they have the opportunity to outvote me in that process.
I also feel like in order to solve for this kind of thing, I need to represent the company well.
In order to do that, I need to know what the company stands for.
I think in terms of, if we're going to sort of harken back to Uber, it's the same sort of thing.
What are the values of the company?
What is it that I'm trying to represent?
And for Insomniac in particular, one of the things that's important to us is this phrase, to be a force for good.
And so I have to think about this when I think about the process I'm putting in place for my own team.
And in terms of the smaller conflicts, it's important for me to remind myself that if there are, you know, if someone thinks there's a problem, think, there's a K, imagine there's a K there.
If someone thinks there's a problem.
There is a problem.
It is a real problem.
Even if it's just a perception problem.
And I put just in quotes there because that's a real problem.
And it's something that has to be dealt with immediately.
So anytime somebody says there's a problem, you don't dismiss it just because they're technically wrong.
They said, this person did this, and I feel bad about it.
That person actually didn't do that.
It doesn't matter.
It doesn't matter that the reality is different.
It matters that they feel a certain way and that they're having trouble with that, and that needs to be resolved.
A question often comes up, and I think in terms of technical direction, you need to answer this, about what is accountability?
You'll hear lots of people say, people need to be more accountable.
Okay, well, what do you mean by that?
I don't know.
We should fire somebody.
So, as a technical director, right, you need to have an answer for what accountability means to you.
And for me, it means you have to be prepared to accept the cost to fix mistakes that affect others.
So when you make a mistake and it affects somebody else, it affects other people, the studio, whatever, what's the cost you're going to pay for that?
And that may be the time I'm going to spend to unravel this and fix this and to work with people to make sure that it doesn't happen again.
Whatever, there is a cost and I'm willing to pay it.
In terms of conflict, one of the things to watch out for constantly, I find what I call conflict cockroaches.
These sort of insidious, stubborn, and very, very hard to kill conflicts.
when you have people just sniping at each other over time, or people just being maybe passive aggressive over email.
When you see these sort of small things, this is the point in time when you really have to jump in and you have to kill it at its root as fast as possible, or it's only going to get worse and it's only going to last even longer.
Cooperation.
So you may have heard or said, it's just not working because they're not using the tool or engine or system correctly.
Or I had to rewrite it because they couldn't tell me what they wanted.
Stuff like that.
So, I know that people will often say surprise is good.
Like, we want to over deliver, so we want to offer a surprise.
And I'm here to say that in my experience surprise is very bad.
Surprise is the enemy.
You want things to be as boring as possible.
You want it to be clear, you want it to be obvious and evident what you're doing, you want to communicate, you want people to know what's happening.
So every day, I'm focused on trying to find a way to make something even more boring.
To find a way to eliminate surprise.
Nobody can say, I didn't know that that was happening.
No matter what, you cannot eliminate surprise.
There's always going to be things that people don't know.
There's always going to be things that didn't work out.
Communication pathways that you didn't know about, whatever.
But just that constant vigilance and looking for ways to eliminate surprise, I personally find a helpful approach.
One of the big lessons I learned, say over the last 10 years, is that about 80% of the thing is selling the thing.
It's not doing the thing.
It's not working on it.
It's not building the feature.
It's selling the feature.
And by that I mean, you know, working with the team to, you know, that this is the right thing that we should be doing, working with the production team to, you know, that they understand how it works, that they want to use it.
that it will be built into the design, that you can design around it, whatever the situation is.
You're going to spend most of your time selling the things that either you're going to be doing or you've already done.
And I think it's important to, when you're doing this, is to one, know what people say they want, which is not the same thing as what they want, but you should absolutely know what they say they want.
And you should be able to paint a picture of the future.
So you say, this is what it's gonna look like when we can do this thing.
You should be able to articulate that, and that helps people to see where this is going.
In terms of the super boring.
and making things super boring, I find it helpful to have a quarterly, two-yearly, and five-yearly roadmap, at least a sketch out, for people to know where things broadly are going.
I've also found it, in terms of cooperation, super useful for every feature to have a user side champion.
So when you're building something, find somebody who's among the people that will use it that will champion for that while you're building it, while you're, you know, you can work with them while you're building it, and then we'll go out and help other people learn that thing.
but always have a champion for the thing that you're building.
And again, you can't over-deliver in this scenario, right?
You're completely eliminating surprise.
You're working with somebody who will be the primary user of the thing that you're developing, but you're going to be developing the correct thing because you're working with them.
So let's talk about risk profile.
And this is all about how I approach trade-offs in general.
for confidence.
So the question is, okay, if you have too much confidence, what happens? If you have too much confidence, you're not doing anything interesting.
I know how to do all the things.
All these things that we're doing, in terms of real confidence, not fake confidence, right?
I'm actually confident that we can do all these things.
So if I'm confident 100 percent, we can absolutely do this, we can do it in time, we can do it on budget, you're not doing anything interesting, because the only way you have that level of confidence is if you've done all this before.
And if you have too little confidence, I'm not sure that we can do any of this, then you're not going to be getting anything done in that process.
So how do you strike that balance? How do I strike that balance?
So for me, it's about three things.
One is, like I said, having that R&D profile.
So how much I'm focused on things where I know the cost value is worthwhile, and how much am I focused on the things where I just don't know what the value is.
So for me, that's about 80-20 right now.
For others, it might be a different mix.
The second thing is shifting things to learning opportunities.
So finding things where an individual is supremely confident in the thing that they're working on, and finding somebody who would be much less confident in the same task and giving them that.
So shifting the confidence profile down just by giving to somebody else who has a chance to learn that thing, which then opens up the first person to do something potentially more interesting or something new.
And a focus on commoditization.
which is to say that find the things that we're always confident that we can do and let's get them completely off the table.
Let's stop working on them forever.
If we're always confident, it's essentially rote at that point, then let's get this completely off the table.
Let's figure out how we can get rid of this from our profile.
So that may be, okay, we're going to buy middleware for this because we never want to deal with this again.
Or it may be that we're just going to build this into a sandbox system that doesn't have a lot of dependencies, so that it's essentially bulletproof for the next two years or whatever, and we never have to look at it.
Whatever the plan is.
What's the cost-risk profile?
So in terms of, you know, we're spending too much money, you're, well, obviously losing money.
You're not spending enough money, you're losing an opportunity to make things better.
Now, granted, I'm kind of making up the part where I have more money than I know how to spend.
That's not an experience that I've ever actually had, but I assumed when I was making these that somebody, maybe somewhere, had had that experience.
So in terms of balancing cost, what are the things that I find most useful?
One is triage.
And that's focused on everything on triage.
Everything that comes across my desk, everything that comes on the team that I'm aware of, everything goes through a triage process.
Which is to look at it and decide, first of all, is this worth solving at all?
And that's often not true, right?
It's often true that you don't need to solve a problem.
Somebody may say, look, this is sort of annoying.
If I have to go through these three clicks, let's say a tool, I have to go through these three clicks and it would be really great if I could only do two, okay?
And we say, great.
you do that process once a week, and you and three other people do that process once a week, we could save you approximately two seconds.
And so if we add that up.
And over the course of the next five years, we could save five minutes.
So unless we can make that bug, unless we can solve that issue in less than one minute, which seems super unlikely, we're just not going to do it, right?
That's a sort of process of thinking through things when we do triage.
Or it may be just how much it's worth comparatively to other things, right?
We have all these things that are higher value, we're gonna, this is gonna fall off the, this is gonna fall to the floor.
And this is harder, I think, than people think.
The ability to say, no, we're not going to do this because we have other things that are more valuable is hard.
It's hard to say and it's hard to hear.
But it's absolutely necessary if you want to get the right stuff done.
Another high value item I find, process I find in balancing cost is in measuring the user experience.
So measure workflows, measure how long people spend doing things, you know, to give you a sense of what the value and cost of various things in production are, what's worth solving.
It's also super valuable for me in terms of just, as I mentioned before, ruthless editing.
And sort of saying, this is not going to happen.
We need to get rid of this.
This needs to be off the table.
We need to, you know, we need, or we absolutely do need to do this.
And as I said, that's really hard, right?
People have a hard time hearing that.
And how to give that feedback to people to say, No, we're not going to fix the feature that you are really excited about because to be honest whenever somebody submits an issue, it's important to them, right?
It's always important to them or they wouldn't have submitted it in the first place.
And so they do want it solved and they're committed, you know, they have an investment at this point in that problem.
So you don't want to dismiss it out of hand and you don't want them to feel like, you know, they wasted their effort in terms of submitting an issue.
So you do need to figure out how to communicate that to them well, but at the same time it does need to be cut.
Commitment.
So if you overcommit, right, you're likely to burn yourself out.
Or if you're not successful in your overcommitment, you're just going to be a long-term failure in whatever it is that you're trying to do.
If you under commit, no one can work with you, right?
Because they don't know what you're going to do.
You're not committing to anything.
They have no idea how to work with you.
Or they're going to fill the gap of the things that you're not committing to with their own implicit promises.
They're going to say, since you didn't say anything, I'm just going to assume you're going to do all the things that I think you, you know, that you're going to do.
Which is often dangerous assumption, right?
So how do I balance these two things?
One, for me, as much as possible, it's about steady pressure on the team.
Constant, steady pressure, not waves of pressure.
And that comes back down to that 80-50 rule, right?
Just sort of constantly reevaluating things.
Are we at the right stage?
Are we spending enough time?
Are we where we think we should be?
Letting the team drive their commitments, so this is about every individual on the team saying what it is that you want to commit to, what it is that you feel that you can commit to, and having that be driven and not be given to the team.
But still going through that process and reviewing all those commitments and ultimately vetoing them if they don't work for either our direction or what's, you know, either that our direction or our cost value ratio or whatever.
but having all those always be driven up on the team.
And the third thing that I find most helpful is always, from my point of view, providing problem and the value to solving that problem to the team, and never just the solution.
Never just do this task.
But here's the problem that we want to solve, and here's the value for solving it, so it's worth solving it if we can solve it in less than two weeks.
It's worth solving it if we can solve it in less than a month.
It's not worth solving it if it takes it longer than that.
So if you can come up with a solution in that space, great.
If you can't, we're going to put it aside.
Conflict.
So, too much conflict, right?
You have a toxic environment.
Nobody can work with each other, everybody hates each other.
Not enough conflict, you have no creative energy and no critical review.
Everybody trying to be super nice to each other, walking on eggshells, and you can't, you're not actually getting any critical review.
And the first time you hear about a problem is probably going to be on Neo Gas somewhere after you ship the game.
So how do I try to balance these two?
One, I try to survey the team constantly, as often as I possibly can.
How do you know, what do you think?
How are you feeling?
What are the issues that you're dealing with?
That's both in literal surveys, so emails and things like that, and in one-on-ones.
Just keep constantly questioning what the environment is like and what you're dealing with.
The second thing that I find helpful is intra-team, so inside of our team, trying to get the team comfortable as much as possible with reviewing each other inside the team.
So that may be, I mean, on smaller groups, dealing with change lists on smaller groups and talking about their designs and being super comfortable and being honest about those things.
Or maybe in a broader sense, and sort of the whole core team, is us standing up once a week and doing a change list review in front of the whole team and having people be able to hear and talk about other people's work.
every week. A third thing that I think is critical, at least for our team, is having a totally unfiltered feedback firehose from the whole studio. This is what everybody thinks of everything that we're doing.
That's not always good, right? I'll tell you right now.
In reality, there's stuff that people really don't like about the choices we make and about the things that we do and their frustrations and maybe bugs in the tools or whatever.
But that fire hose is totally unfiltered.
Everybody can see it and everybody can get comfortable with the fact that in fact we want all that feedback.
We want to know what people feel and what they're thinking.
And that's super helpful for us as a team.
And I think it helps people relate to the rest of the production.
Cooperation.
Too much cooperation.
uh... and what you know you and it was on the committee uh...
and i know some people think that's probably a good thing but i'm not a mechanic uh... not enough cooperation and you have a bunch of pieces that don't fits together right uh... you have a bunch of a billion independent things they don't fit they're not working together So how do I try to balance these things?
One is the practice of leadership.
And I think that's not just sort of the, in terms of technical direction, right, it's not just the lead of the team, but it's everyone on the team.
Everyone on the team, in my opinion, needs to be a leader.
You need to be leading something.
So focusing on that as a practice.
What is it that you think is important?
What is it that you are, you know, being the champion of on our team?
From the most junior programmer to the most senior programmer, everyone needs to be leading something.
So, from my point of view, for every feature we have both a champion for and a champion of every feature.
Somebody on our team really wants to do this and they found somebody in production who really wants it, ideally.
And they can help work together to see it through all the way to the end into use.
In terms of cooperation, as much as possible, and while again this may seem super obvious, I try to work backward from the production schedule.
And that may not just mean our game schedule, right?
But it does, often. I look at the game and say, what does the game want to accomplish when, and so how can we provide the right thing for the game at the appropriate time?
So the better the schedule out the game is, the better that I can schedule.
And it's often true that those things change over time, so I doubt.
But it's also other production schedules, so looking at, say, hardware releases and new consoles and whatever, there's always some sort of synchronization points that you need to be working from.
And just paying attention to those things in the future, over the next year, the next two years, the next five years, what are these points that are going to happen that I need to deal with and start working backward from them.
Now I'm going to talk about the things that are hard for me in this spectrum.
And so what are my weaknesses in each one of these areas and how do I try to shore them up?
So, in terms of being confident about the production and what we're doing, for me, the thing that's hardest is the scale of communication.
And by that I mean, when you look across the studio, I want every single person in the studio to have confidence in what we're doing.
To be able to say, yes, I believe that they can get done what they say they can get done.
But the problem with that is that every single person, how to give that person confidence is unique to every single person.
This one animator with this much experience with these particular systems wants to have different information than this environment artist over here.
And so figuring out how to scale communication appropriately and how to get the individuals confident is hard for me personally.
So what do I do?
So the one thing that I do is make sure that the leads on my team know the messaging.
These are the things that I think are important for people to know.
So that when they're out and about and they're talking to various teams that they can communicate those things.
And they often do that better than I do.
So having people prepared to give the same message that I would give, but in a way that's better than I might give it, helps me to, so delegation, basically, helps me to shore up some of my weaknesses there.
It's also, I found, in practice, that it's way easier for people to react.
So if I say, you know, should we talk about this design now?
People are going to say, yeah, I'm really busy, I can't really talk about the design now.
Maybe next week.
And the next week comes along and I say, should we talk about this design now?
No, look, I've got a demo, I've got these things, I can't really talk about the design now.
Maybe next week, right?
That happens.
And people are really busy.
But if I say, here's the design.
Or, we're going to do X. This is what we're going to do.
I say that, people all of a sudden are like, no, you can't do X.
I got this, I'm going to stop right now, we're going to talk about this, right?
So I found that if you make commitments loud and early, people are much more willing to talk about those things because they'll see clearly, concretely, what it is that affects them.
So it's not a trick as much as it is the reality, right?
The reality of the situation.
You want to be loud and you want to be early so people have the chance to react.
And just all the one-on-ones.
So talking to everyone on my team as much as possible to share the messages of what I think is important.
But also across other teams.
I spend time on one-on-one with other people in other departments to try to spread the individual messages as much as I possibly can.
What's hard for me in terms of cost?
For me, the hardest thing are subjective measures of value.
How much is one millisecond of time worth in the game?
If we spent a week to reduce GPU by one millisecond, would that be worth it?
If we spent five weeks to do it, if we spent six months doing it, would it be worth it?
Figuring out what that number is, in terms of how much is a millisecond worth, is really hard.
for me personally.
And in terms of individual frustration, right, I'm just frustrated.
I just, you know, I'm frustrated by this extra third click that I have to do for no good reason, right?
It doesn't cost us anything really in terms of workflow, but I'm just frustrated by it.
So how much is that frustration really worth solving for?
So how do I battle this?
Personally, I start with, again, lots of surveys.
Always asking questions.
Send these out to production, send these out to our team.
Just keep constantly querying people about how they feel about things.
And then I can sort of try to turn a subjective measure into an objective measure.
Well, the general feeling has been this for a while, but now it's getting worse.
So we should probably do something about that.
But I think the broadest approaches that I have for this are one is just to block out time and say, here's a bunch of time we have for low-hanging fruit.
This is like, here's, you know, we're gonna spend two weeks on this stuff that was essentially low-value, but is super, super frustrating for people.
So how are we gonna get this stuff off the table?
And a similar block of time for things like optimization.
Like, let's just make it as fast as we can in the next two weeks, or whatever.
Commitment.
What's hard for me in terms of commitment?
I think we would all agree that autonomy is important.
It's important for people on the team, your whole team, to be as autonomous as possible.
The problem is you have people, you almost certainly have people who will burn themselves out given the opportunity.
And you will have people that will probably over commit given the opportunity.
They'll say, oh, well, you know, somebody will ask them, can you do this thing?
They'll say, yeah, that's probably easy.
We can probably do that.
So you have to, I feel, I find that you do have to manage that autonomy.
So for me, the things that, you know, I find that difficult, and the things that I do to balance that are, one, I strongly encourage time off as much as possible.
So try to get people to take vacations.
That's hard, that's often harder than you would think.
But you just keep encouraging people.
It's your time.
Okay, I'm going to take a second to rant here, real quick.
On our software that we use, which I won't call it by name, for managing vacation requests, One of the things that it has are exactly that.
It says vacation requests, right?
That language pisses me off.
Because it's not requesting, it's not a request.
It's your time, it's already your time.
You already earned it, it's in your pile.
You're informing me that you're going to take a vacation.
I assume that you are going to handle all, that you're a professional, you're an adult, you're gonna handle all the issues related to not being here.
You're gonna make sure things are.
done, that people know that you're not going to be there, we can talk about whether or not this is a good time, whatever, but you're not requesting it, it's already yours.
So just the language behind that is super annoying.
Anyway, that had nothing to do with anything.
We don't want to, it's important in the terms, I don't want heroism on the team.
I don't want the guy going in at the last minute and spending all the hours trying to get this gold disc out the door.
That's exactly the process that I do not want on the team.
Again, back to surprise.
That's a surprising result and I would like things to be as boring as possible.
And every time that that happens, it represents a mistake for our team.
It represents something that went horribly wrong.
So every time that this happens, that's how it has to be represented.
I have to be talking about the team, what went horribly wrong that you had to be doing this?
And represent it as a problem to be solved.
It's not...
Look how, you know, thank you for doing, well, yes, thank you, but it's not look how great a job you did.
It's something went horribly wrong and you were forced to do such a great job in order to solve for it.
So the language around this is really important.
And, you know, talking to people about, constantly talking to people about examples of implied promises.
It's not always obvious to people when they imply something.
And when they say something like, oh, that might be easy, not realizing that as soon as you say that, somebody's going to assume that you're going to do it.
And, or you say, yeah, you know, we could probably do that.
It's the same as saying, I absolutely will do that, and I will do it right now, and it'll be on your plate by tomorrow, you know, on your desk by tomorrow, whatever.
So, just constantly looking at what people are saying and letting them know when they are in fact implying things that they may not have realized.
What's hard for me in terms of conflict?
uh... i it's fair for me to say that i'm not naturally a warm person uh... my first my instinct which my daughter will happily tell you my first instinct is to say suck it up uh...
i absolutely know that my first instinct is almost always wrong uh... so this is a battle that i personally have to fight constantly so what do i do?
One, I think it's just time.
It's time with the team, it's time with individuals, it's time for them to know and build that trust that they believe that I actually do care.
Ultimately, over time, people hopefully see that I do actually care.
And I actually do wanna make things better and wanna make a difference to them personally.
And I stop myself from saying anything before I ask if that person is looking for suggestions or advice, right?
Sometimes people just want to rant, sometimes people just want to bitch, get stuff off their chest.
Is there any, you know, are you looking for anything from me in this, right?
Before I say anything.
Certainly before I say, suck it up.
Um...
And a reminder both to myself and to other people that perception problems are real problems.
If somebody feels like this is a problem, it is in fact a real problem.
And that constant reminder to me that that is true is helpful.
Cooperation.
It's true, I think, in our studio and probably true in most studios that the next thing is always the most important thing ever.
This is the most important demo we have ever done ever.
It's always true.
That's true by necessity, right?
And it should be true.
It should be.
Hopefully you're not saying...
Yeah, whatever we did two years ago, that was the most important thing.
This is way less valuable than whatever we were doing two years ago.
Like, that's kind of dumb.
Hopefully, it's always ratcheting up.
It's always the most important thing, right?
But you can't crank it beyond 11.
Like, you're always at 11.
That's not a meaningful statement, right?
So in terms of dealing with that timing, and dealing with that issue, for me I find best practices personally is one to stay out of the way of whatever the next thing is as much as possible.
So especially in our particular case, in terms of an engine team, like prep people, get whatever they need there, there in front of them so they have a chance to solve those problems that they wanna solve, but don't get in the way.
People are under a lot of pressure to do whatever it is that they're trying, whatever the next big thing is.
Don't make it harder.
I also find it super, super helpful to build reference targets. Again, I know it seems really obvious, but it's easy to forget. Not just art reference targets either, but also things like audio reference targets.
What do you want this to sound like? Before we begin building this, Let me see what you want this to sound like.
So we can all hear it, and we can see how this is supposed to react.
Always, as much as possible, build reference targets.
And to having dedicated resources to immediate concerns.
So resources that are absolutely dedicated to whatever it is that's happening right now, this minute, this issue, somebody's gonna jump on that.
And not spread that across the whole team.
Training.
So what do I want to make sure the team knows in all these individual areas?
So in terms of confidence, the thing that I think is most important for my team to know is how to pitch.
Again, I think that 80% of the thing is selling the thing.
So knowing how to pitch an idea is super, super important.
So I can answer the question of what do I personally need to know in order to be most confident?
And this is the thing that I want to teach the team.
And I think these things should be included in any pitch.
You want to paint a picture of where it is that you're trying to go.
I want to be able to imagine that future.
You want to identify the cost, the value.
You want to identify, if it's there, whatever the opportunities to learn are.
We're doing this partially because we will learn these other things.
Super, super importantly, what's the strategy for transition?
If you're pitching a change, I want to do this thing that we're, you know, differently from what I'm doing now.
Great. How are we going to get from where we are now to that?
And often that cost is much bigger than the doing the thing in the first place or whatever you're doing now.
That transition is a super expensive and lengthy process, often, that's an important part of the pitch.
Cost.
What do I want to train the team?
in terms of cost.
Dealing with cost value metrics, even if this is at a very high level back of the napkin kind of approach, you should be able to articulate what the return on investment is for whatever it is that you're proposing.
And that may be in general high-level terms, but the things that you should be able to point out are the development cost, this is how long it's gonna take us to do, the maintenance cost, this is how much maintenance I think this will take over time, the cost of entry, we're just doing this because it's the bar, like we need to hit this bar.
And this is most often true in terms of, say, graphics or something like that, we just need to hit this bar.
And then we'll talk about what's above and beyond that bar.
Efficiency return, so again I'm doing a feature here and I'm trying to make production more efficient, so what's my return there?
Player value, often we're talking about, less often, but it still comes up, that we're talking about this is just going to be cool for the player.
So what's that value, can we identify it?
And learning value for the team, as I mentioned.
We're doing this partially because we're gonna be able to learn about this other thing.
commitment.
So there's this very webby kind of appropriate for San Francisco phrase, right?
Minimum viable product, which is not a phrase we use internally to the team.
But conceptually I think that we have this kind of thing.
Which is just to be clear, concretely, on what you're actually providing.
Minimally, right?
What is it that you're promising?
Do you want to be able to say concretely, you will be able to do this, right?
And that's what you're promising will happen.
You want to separate those sort of would-be-nice things from the absolute guarantees that you're trying to make as part of the pitch.
So these things should be part of your commitment, right?
You want to propose, say clearly what those concrete changes are.
What are you going to be able to do that you can't do now?
State those clearly.
state the problem and the part of the problem that you've solved.
This is the problem that I'm trying to solve, this is the part of that problem that I've solved.
But also be super, super clear about what you're not solved, what you haven't provided.
I haven't solved this part of the problem yet, we'll get to that.
Or I'm not providing this feature X, Y, and Z, we'll get to that later, or not.
But if you don't state clearly what you're not providing, people often infer that it's going to be there.
So it's as important to say what you're not providing as it is stating what you are.
Conflict. For me, the most important part in terms of training related to conflict is setting clear expectations in terms of values. And one of the things that comes up, especially when this hits home for somebody individually, is, you know, somebody might say, I don't want to change my personality. Right? I'm just like that. I don't want to change my personality. But it's.
For me, it's not about changing your personality, right?
That's not the issue here.
Nobody's asking anyone to change their personality.
But it's about the realization that you need to be effective.
And to be effective, you need to communicate well.
And you need to communicate in a way that's effective for each person.
But it's also about what's right.
And the fact is, you should say, well, who's to say what's right?
I'm to say what's right.
that ultimately, right, my values are driving what this team is, and I am saying that these are the values that are important to us.
So, yeah, fair or not, I do get to say what's right, and these are the values that are important to me.
And I think that the time for, say, corporate neutrality is over.
We are ultimately taking sides.
We're saying these are the things that are important to us as a company, these are the things that are important to us as teams, and those values help to drive the people that we work with, it helps to drive the things that we do.
Stating those values super clearly and making sure that everybody's on the same page with them is important.
things that, you know, that should be part of setting clear values.
One, what's being able to say, what do you believe? These are the things that I believe.
I often find it useful to connect to news and current events. This is what's happening. Here's an example of what I'm talking about.
So that people can just over time get a sense of those values. Because just saying something like people are important, connecting that to the reality, what you mean to it, is very difficult.
Constantly setting part of the sort of review process and the one-on-one process that, you know, you're comparing those values and your expectations and how people, you know, how people met those expectations over time as part of your review process and part of your one-on-one process is important.
And whenever there is a conflict, small or large, knowing who will take action next is an important part of the process.
Immediately, who will do something about this?
Cooperation.
For me, the thing that I want to teach most to the team about cooperation is just being able to champion a solution, which means being willing to say that I'm going to lead in this area, being willing to say that I want to make this happen and follow through from end to end.
And that's just not once the feature's out, you're out, but working with production, working with the game, making sure that the thing that you imagine, the future that you imagined would happen, happens.
And that means you keep babysitting this thing as long as it takes to see that future happen.
And I find it helpful practice to give for everyone, including myself, to find other people to sign off on that process.
To say, if you're building something for animators, find animators that are going to be willing to sign off on whether or not you met those expectations.
And don't let yourself off the hook until they're willing to sign off on it.
So the things that should be part of championing solutions, one, being able to articulate how the studio or game or whatever it is that you're trying to accomplish will be radically different.
Sort of the part of that telling, painting that picture of the future.
Articulating why this is important to you personally, I think is important.
To say, I want to change this because it's meaningful to me because whatever.
And knowing how to gather support. I think this is an important part of the training process.
Like, how do you get other people involved? You can never do things in...
You're not doing things in a vacuum. You're doing things with a team, for a team.
So how do you gather support? Especially if you're not the lead on that team.
How do you get other people to know what it is? And I think part of that is that being able to pitch properly helps to gather support.
So, to review, these are the things that I find most important to deal with in terms of technical direction.
That's managing cost, managing confidence, managing commitment, managing conflict, and managing cooperation.
The things that I've talked about here are the context behind those things, the things that I think drive those individual things.
I did mention that I had an easy-to-remember takeaway.
999-990. If you remember, we have, which should be no surprise to any of you.
Thank you.
I'll take questions if you have any.
Okay, I guess we're done.
Quick question.
What do you think about work-life balance for yourself and then how do you think about it for other people on the team as well?
The question is what do I think about work-life balance for myself and what do I think about that for...
Yeah, you talked a little bit about it in terms of vacation but like more on a daily basis.
What kind of hours do you expect from yourself and then other people on the team?
So, okay, what kind of hours do I expect from myself and for other people on the team?
I mean, I think that the expectation is that what we're talking— the expectation is that I'm working with adults.
Professional people, professional adults, right?
That's the base expectation.
I'm not counting hours. I don't care.
What we're talking about are problems.
You know, here's the problem.
Are you willing to commit to it?
How much are you willing to commit?
That sort of thing. We're talking about these things, right?
So, I don't want people to burn out, right?
I don't want people there all night, every night.
That's not the thing that I want, right?
So again, we're looking to say, you need to take time off, you need to go home, you need to deal with those things.
But I'm also not counting hours.
So I think fundamentally, the question is, the answer is about just treating everybody like adults and talking about the problems and solutions and letting them work those details out for themselves.
That's not a detail that I, you know, that's not a problem that I need to be solved.
I'm not, I'm neither forcing them to stay or, you know, worrying about it unless I see a problem with them, they're too long, right?
Does that answer your question?
I mean, I realize it's a tricky kind of space.
Don't want people to crunch.
I mean, if that's the bottom line, the question that you want to ask, like, no, yeah, crunch is bad.
We don't want to do that.
You want to follow up?
So I guess one thing I've seen on my team is one person that worked way less hours than other people definitely got stuff done.
But I think overall, culture was like.
I don't know how I felt about it and that person left and I like the culture better without that.
But again, if it's a high performer, maybe just live with it.
So one person got stuff, was getting stuff done and a high performer and worked slightly less than everybody else and that was a problem?
It's more like he would hit 100% and everybody else was knocking at 110-120% all the time.
Yes, it was solid all the time, but compared to the rest of the team, including myself, who was putting in...
So you have a guy who's knocking out 100%, and another guy who's doing 110 or 120%...
We could say 90 to 100.
And that's a problem.
First, our percentages are kind of fucked up here.
Yeah.
But I think, again, this isn't about time, right?
And if it's about time, you're wrong.
It's not about time.
What it is about the commitments that that team is making, and the expectations that you're setting.
It's like, this is what I think that we need to commit to.
This is the expectations I have for the problems that we're willing to solve.
If he's not meeting those expectations, you're not solving hard enough problems.
You're not solving problems in terms of cost value.
You're not providing enough value over time here.
That's fine.
That's a separate question.
That question is about, are you solving the problems that we need you to solve?
And are you solving them in a way that's valuable for us?
It's worth doing if you can solve this within two weeks.
Great.
I don't care if you spend three hours a day doing it if you've solved it in a way that's valuable to me.
We've already talked about the ROI.
Like, that's cool.
If you're not having those conversations, if you're not talking about those expectations in terms of value, and you're counting hours, you're just doing it wrong.
OK.
Out of your 10 years, have you had people that stuck with you?
And how did you deal with fatigue or like renewing their experience?
that stuck around with you for that 10 years?
Sure. Do I have people that stuck with me for that whole 10 years?
Yeah, we have people on the team, for sure.
Oh, that people on the team that have been there the whole time.
Yeah.
And how did you deal with fatigue or, you know, renewing their experience or keeping it fresh?
All right, how do I help them keep things fresh?
Yeah, exactly.
Sure.
I think that's individual, right?
But often you'll find that, again, sort of that commoditization process or the process of making something a limited opportunity.
So you take something that they have invested in, like, OK, look, you've been working on this.
You've been working on collision for two years, right?
Or three years, or whatever.
This has been your baby this entire time.
You know what?
It's time to give this to somebody else so that you can focus on a new problem.
And that transition is super, super hard.
People get super invested in the problem space and maybe they want to dedicate their whole future to that.
And they want to say, look, this is the domain that I want to be expert in.
Great, and then we can just keep focusing them being an expert in that domain.
But often it's, I've been working on some area and I want to work on something fresh and renew and whatever.
And so we help them transition.
So, I mean, I think that we have a group of really dedicated people and professionals who really are, you know, they are focused themselves on training and growing and learning new things.
Like, that's not something I have to drive, because they're all curious, fundamentally curious and growing people, right?
But helping them to be able to take a step back so they don't get overwhelmed by these things that they've been working for so long on and giving that opportunity to somebody else is important.
Does that answer your question?
Yes.
Thank you.
Oh, sorry, I didn't see that through your head.
Hi.
I have two questions.
The first one is about the size of your team.
How many engineers you have in Insomniac?
And what is the split, like tools render, core?
All right, so how big is the team and what's the split?
So the short answer is we have approximately 20 people on the team.
We've had approximately 20 people on the team for 10 years.
We don't really change size.
We hopefully just get better at what we do.
It's just the engine team, right?
Well, it's just the engine team, yeah.
But engine also includes tools and all those things, right.
So we're divided into five groups with approximately three or four people, or five people on each group, depending.
Okay, uh, and, uh, the second one is, uh, so I'm sure you encountered problems, uh, like that, uh, you have some legacy big, uh, something that developed for years and, uh, you really want to rewrite it to make it simpler to support better, but it really doesn't work the rule like five to one.
uh and uh but at the same time you have one two engineers constantly distracting on fixing something uh in this like legacy system. What do you do in this case?
You have a legacy code that you want to ultimately get rid of, and it's really hard to see the practical value in doing that.
Right?
Yeah.
So I think that where you're looking for is the practical, where you're still, if there is in fact no practical value in doing that, you don't do it.
Full stop.
Stop thinking about it.
This is never going to happen.
We're going to live with this forever.
Ultimately, you're going to wait for some other excuse that forces you to do it.
And that will eventually happen.
Or you say, there is a value, we're just having a hard time articulating it.
It just may be this sort of constant maintenance cost over time, and things are getting harder and harder to change, and harder and harder to fix.
And so at that point, you can evaluate it.
You can say, look, over the course of the next five years, this is going to be impossible for us to work with.
So we need a strategy out from under this.
And that happens, and we had to have our two-year strategy for getting out from under these particular things, or our five-year strategy for getting out from under these particular things.
So you just create a long-term roadmap.
You don't stop and say, how are we going to do this right now?
You paint a picture for the future, and then you build a roadmap for that, right?
It doesn't have to happen today.
So we're out of time, but I will be outside.
Thank you.
