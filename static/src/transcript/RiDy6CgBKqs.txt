I am Derek. And I made a little freeware PC game called Spelunky and it turned into a much bigger XBLA game by the same name.
And when I think about how that happened, how I started with this tiny little game and how it became something so much bigger, I'm still pretty amazed. It still feels pretty incredible.
But in this talk we're going to try to make some sense of it.
So I started working on Spelunky pretty soon after I finished Aquaria with Alakaloka. And that was a game that we released on December 2007.
And it was, the project took us over two years, and it was a really intense and difficult development as I think Alec would attest to also.
It was about as stressful as it was wonderful.
So after that, I really wanted to work on something a lot lighter, something small and kind of fluffy.
And it's kind of ironic because Spelunky's now turned into a bit of a monster itself.
But when I think about it, with all of my big projects, and those are Eternal Daughter, Aquaria, and Spelunky XBLA, those games all took at least two years to make. Between all those projects, I always made a lot of small games and released them. And when I think about it, those small games always led to the bigger ones, whether indirectly or directly. So, for example, with I'm OK, working on that is how I met Alec, and that eventually led to Aquaria. And all the small games that I made before Eternal Daughter, you know, they got progressively bigger and they gave me the confidence to do a project of that magnitude. Spelunky, the freeware version, of course, led to Spelunky XBLA. So small games led to bigger games. And Spelunky itself I considered, the freeware version, I consider it to be really like a refined prototype. And that refined prototype came from a number of even smaller prototypes that I never finished.
So when I approach prototyping, I like to treat it like drawing. You know, with drawing, if I want to come up with an idea for something to draw, I'll just pick up my sketchbook and a pen and I'll just start doodling all over the page. And I'm not concerned about trying to create something that's going to win IGF or create something that's going to make a million dollars or even create something that is going to make people like me or that people are going to approve of. The key, I think, is really just to zone in on what I'm enjoying at the time, things that I'm interested in.
And when it comes to making games, tools, game making programs like Game Maker for some people it's Unity, for some people it's Flash and libraries and frameworks like Flash Punk and Flixel, those are like the equivalent of a sketchbook for me because it lets me get my ideas out very easily. So this is, these are screen shots from the a roguelike prototype that I started working on before Spelunky. And the goal for this prototype was really just to have fun. I had a lot of fun making the graphics and I was trying to boil down the essence of roguelikes into something that was just simple and fun to play. And if you're not familiar with roguelikes, they're dungeon crawlers that have random level generation, permanent death and a lot of variation. And it's a really compelling genre.
Because those three things really make the game very exciting and infinitely replayable. And even though it's a pretty niche genre, it's had a lot of influence on a lot of really popular games like Diablo, Minecraft, and ToeJam and Earl. I really love that game. Those games are all based on rogue legs. I think the reason why they're still niche is because they haven't really advanced in terms of their interface beyond the original rogue game.
which is just, which was just ASCII graphics basically.
On the other hand, platform games is, you know, they're a really well understood and well loved genre.
They're action based, they require reflexes and precision timing and memorization of the levels.
And I think, you know, everyone is pretty intimately familiar with platform games.
So here are a couple of screenshots from just, really simple platform games that I was working on at the same time that I was making those roguelike prototypes. If you look carefully, you can kind of see some little elements actually made their way into Spelunky freeware. So, you know, working on platformers and working on roguelikes at the same time, working on these small prototypes, it really didn't get very far. I came up with the idea of combining the aspects of roguelikes that I really liked that I thought were really compelling, the random level generation, the permanent death, the variation, the fact that you get into these unscripted situations that are really fun to get yourself out of. I wanted to combine that with a platform game, you know, and I'm a big fan of that genre and as I said before, it's a very accessible and well-known genre. I wanted to make something that was...
new and exciting but also accessible. And the big challenge I think between reconciling those two genres was the level design because platform games really depend on their levels, on their platforms and roguelikes are exciting because they're randomly generated. So I thought I'd quickly just go through the algorithm that I used to generate levels in Spelunky. So each level in Spelunky really starts with a grid of 16 rooms, four by four, just like this. And then we draw a path from the entrance at the top of the level to an exit at the bottom of the level. You're always going down in Spelunky for the most part. So we generate this path and mark each room as being part of the path. And for each room, we have a set of template rooms that we can pick from. And what set of templates we choose depends on the area of the game that that the level is in and whether the room falls on a path.
So for example, you know, if we want to have, if we need a corridor that connects to other rooms, then we draw from a set of corridor templates and put it in there.
And within each template, there are these little randomized chunks that are specified.
And that kind of, it just adds variability and more interesting...
things to these set templates and at the very end we add monsters, treasure, traps and whatever else to kind of complete it. And that's about it. So working on a game like this is really fun. It's very satisfying because you can create a lot of content with a small team. You know, if you look at a game like Dwarf Fortress, it's essentially programmed by one guy. It's a two-person team. And they're making entire worlds, you know, like it's just it's really awesome. And as a developer, it's really fun to work this way because you're always surprised by your own game. You know, even playing Spelunky now, like having worked on now two different versions of the game, I'm still having fun with it because I'm always running into things that excite me. So it's really fun to develop. Spelunky is not the first sort of refined prototype by any means either that turned into a bigger project. We see examples of this in all kinds of media. Super Meat Boy, for example, started as the Flash, the free Flash version called Meat Boy. And Google, they've got this thing called Google Labs, which they describe as a playground of experimental prototypes that people can just give feedback on and, you know, if anything good comes out of it, they turn it into a full-blown product. It's a great way to test out ideas.
And it extends even into other creative mediums like writing.
The author Haruki Murakami, in the intro to a collection of short stories that I think is called Blind Willow Sleeping Woman, but I might have gotten those mixed up. But anyways, in the intro to that collection, he describes his process and he says that right after he writes a big novel, the first thing he does is he writes a bunch of short stories and he keeps writing those short stories until he comes up with inspiration for his next big novel. So making these small prototypes and then refining them into something and releasing them is a great way to test out ideas. It's a great way to refresh yourself after a long draining project. It's a great way to, you know, get that relief creative tension, you know, and it's also just a great way to get into.
your next big project. So Chris Hecker, who I know loves to be quoted out of context, in an interview with Edge that he did with John Blow, he described small independent games that don't fully reach their potential as mulch. And he said that big, you know, big games, bigger games that reach their full potential, he described those as trees. I really like that analogy. But...
The way I feel about it is that you can be a mulch and a tree person and it actually goes really well together. So if you're someone who wants to release big games, and I really define myself and my work by the big projects I've released, but at the same time, working on the small games on the mulch has allowed me and given me the opportunity to work on the big games. So on that note, I'm going to hand it over to my friend and partner Andy Hall. He's going to talk to you about the XBLA version of Spelunky.
So as Derek said, my name is Andy, that's true. This is a picture I drew of myself. I was a little bit generous with my hair. But other than that, basically despite that, what I mostly work on on Spelunky XBLA is the programming, although I am helping with the other aspects as well. So I thought I'd start with how Spelunky XBLA came to be. And basically it all started with a man we all know and love, Jonathan Blow.
Jon was a big fan.
It took a while. You guys had a pause while you read down the list. So John actually was a big fan of the original game and he contacted Derek and said, hey Derek, would you be interested in doing an Xbox Live version of Spelunky? And of course Derek said yes, of course. And that kind of got the ball rolling with the green light process with Microsoft.
The green light process was fairly easy because Derek already had the original game to send into Microsoft. They could play it, see what made the game fun, see what made it work, and also they saw that the game already had a built-in audience. There were players that were already enjoying it and loving the game a lot. I think a lot of people, myself included, feel tentative about releasing smaller projects that maybe don't express the extent of what we think our abilities are.
But I think Spelunky really shows that people will see the game for what it is and be able to appreciate the things in the game no matter what level it's at. And I think that the feedback from those games helps improve the games so they'll get even better. And, you know, the game and the ideas involved will evolve as you work more and more on the project.
John also actually offered to let Derek use the braid engine for Spelunky XBLA. Derek took him up on this and actually had a very early version of the game running in the braid engine.
And that's when I came on board. We spent about a month and a half working with the braid engine and we were having some problems understanding some of the code. There was unneeded features such as the timer winding which we weren't using that were complicating matters.
And when we contacted John to ask about some parts of the code, he had moved on to other projects and really wasn't familiar with the code anymore.
So it made it difficult to get information on what was going on.
At that point we decided that it would be best to start again with an engine from scratch.
Because we had the original game to look at, we knew the features and scope of the engine that would be required to make it.
And we felt pretty comfortable that the two of us could handle it. And we also liked the idea that we would be able to reuse the code for later projects that we work on after Spelunky. So as we're working on Spelunky, we're really treating it more as a sequel to the original Spelunky than trying to just do an HD remake of the game.
And this might be scary to hear, but we can't be afraid to change things from the original game.
And this took me a little bit of time to get used to, because I love the game, and I think it felt awkward at first, feeling free to change things in the game.
But that's the only way we can really evolve it and make it feel different and special.
This was made easier by the fact that the original game will still exist.
We're not deleting it by making the Xbox Live version.
people can still go back and play that and appreciate it for what it is. That said, though, we don't want to break what worked about the game. We want to improve it. So we want to keep the complexity and interactions and things that made it really fun to begin with. So obviously we're trying to improve the game in all sorts of different ways. And I think the most obvious, and I think most of you have seen a lot of the screenshots that we've put out so far, is the art upgrade to HD.
less obvious is that we're really working on streamlining the controls and the interface to make it easier for players to get into it. When I first played Spelunky, I didn't stick with it very long on the PC. I had a little bit of trouble with the controls and it wasn't until I kept reading on the TIG force forums that people were raving about the game that I said, oh, okay, I need to sink some more time into this and really uncover what is so great about the game.
We wanted to eliminate that hurdle of the controls. So as an example, in the original game, if you want to go into a shop and buy something, you have to use two different buttons just to pick up the item, just to check the price to see if you want to, can purchase it and want to purchase it. If you do want to purchase it, you have to hit a third button. If you don't want to purchase it, you have to hit another two-button combination to drop the item, and you risk hitting the shopkeeper, who will become enraged and shoot you in the face.
So to make the shopping experience a little more pleasant, now when you're in the shops, if you're overlapping an item that's on sale, it will immediately pop up with the price.
And if you can buy it, there will not be that little red mark over the RB button and you tap it and you'll immediately purchase and equip the item.
So roguelikes are founded on this idea of having tons of different monsters and items in the game and all the different interactions that come up between them is what makes the game interesting and fun to play. So we're going to be adding more of that stuff to make the complexity go up, keep the variation of the games up so that not only is the game fun for new players, but existing players will find new and exciting things in the game as well.
There was one feature that was probably more requested than any other feature from the freeware game. And we decided we had to do it for the Xbox live version. And that is multiplayer. So...
So the game will support four player local play.
And it really fits in the kind of chaotic nature of the game.
If you're playing with someone, you're able to toss them up to a ledge they wouldn't normally be able to reach. But if you mess up, right, they might ricochet off the wall and fall into the spikes. But maybe that's what you intended all along because you want their jet pack. So basically we'll have more information coming out about the different multiplayer modes as we get closer to release.
So in conclusion, the freeware game really acted as our design document in making the Xbox Live version. And it made it easy for me as the programmer because I didn't always have to contact Derek about small details with the game. I would just refer to the original design and make it function in the same way. I also used the Spelunky wiki a bunch for everything from finding out how much the different gems cost to the different interactions with monsters. And I think Spelunky really shows that.
There's more benefits to releasing these games than I think people realize.
And that even though you have these small, polished games that you think kind of are these small projects, they really can go hand in hand with the larger commercial projects and grow into something really cool.
So I think if we can take some questions now, that would be great.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
I have a very simple question, actually. I was just wondering how long did the original Spelunky take to make from like once you got like, oh, I know what I'm doing to and compare that to how long is the current Spelunky taking?
I started working on the first version of Spelunky like the summer of 2008. And I think I released version 1.0, like I don't even remember, actually. When I first released the game, it was like version 0.6 or something, and I kept working on it for a while, and I think I ended up releasing a version 1.0.
It probably took me like a year and a half for the original freeware game to get it to 1.0, and this version is probably going to take around two years. So it's actually pretty similar for the first version of the game and the XBLA version.
I think that's because the first version involved a lot of design work, which can be really difficult and you have to kind of like go back and forth a lot. But the XBLA version is just a lot of like, you know, there's a lot more technical work and stuff like that. So it ends up evening out a bit, actually.
All right. Thanks.
make more sense to bug you about it in front of 500 people.
So when you talk about Spelunky and your development process, it all sounds very loose, right?
I mean, you're sort of creating these systems that are going to procedurally generate all sorts of stuff that you can't even imagine what the final layout is going to be like and so on, right?
And you're surprising yourself every time you play.
But if you go and study Spelunky like I have, there's a lot of very tight.
things that happen in terms of the design. The reason you want to play just one more time and you end up playing 100 times in a given evening is because it seems like there were decisions made about how rare certain things are, how likely you are to see a damsel, how likely you are to find a shop with a shotgun just waiting there to blast the owner with. And it doesn't just seem like just anything goes, like just throw all these random things together. It seems like there's so many tight game design things that come in there. How did you come up with that stuff? Were you conscious of it or did it just kind of roll out of the procedurality and that kind of thing?
You know, I got to say it wasn't too strictly planned a lot of that stuff. Like, for example, how often does a certain thing appear every time? I kind of just went with what felt right, you know? One out of ten or something like that. And it tended to work. You know, I just tried it and it would seem to work.
you make decisions at a certain point where you tested it and found like, oh, God, you know, having a damsel come 50% of the time is too much and I'm going to tweak it down because it feels like it's ‑‑ I want it to be more rare than that. Did you make decisions like that at certain points when you were testing?
I did, but I can't say that I remember anything that was so significant that I added it and then it was just completely broken the first time around. I think part ‑‑ one of the things that helps is just having ‑‑ So many things going on and not having any one thing kind of dominate everything else so that, you know, even if the formulas aren't completely focused test, tested to a T or anything like that, it still feels really compelling.
Right.
So I guess we just have to chalk it up to genius.
I wouldn't say that.
I didn't say that.
So.
In fact, in a lot of ways I feel like it's maybe a lack of genius that helps you come up with solutions for some of these things. Like for the level generation, I really just tried to do what was simplest and what seemed like the most just brute force way to make a level that worked. So I'm no genius, quote Derek Yu.
Could you talk a little bit about the production requirements for the XBLA version? Is it just the two of you?
Yeah, it's just the two of us. And we have dev kits. And Andy actually lives in Connecticut, so we usually, you know, he'll come out here and we'll jam together for like a couple weeks at a time. But usually we just work over Google video chat and pass code back and forth. I think I'd be pretty embarrassed to actually go through our entire production process because it's pretty ghetto fabulous.
So definitely got our indie cred going on.
Do you guys have to worry about, you know, like marketing and PR of this or are you kind of relying on the community?
That is something I worry about and it's something I worry about because it's honestly something that I'm not that interested in when it comes to.
You know, I can't say that I'm really passionate about marketing at all.
I like talking about my game and I'm really enthusiastic about working on it, but I'm just – my personality, you know, I don't know, my personality, I'm just not – I kind of – when I'm working on games, I kind of really like to put my nose to the grindstone and actually kind of – my inclination, I think, is to really just hideout. So I am worried about marketing and we're trying to think of things to do that fit our personality and our fun. But it's something that we really have to work on, I think.
Yeah, I mean, I come from a more traditional product company. I was a toy designer for a while. Five years. For five years. Five long years.
But I, when we're talking about how we're going to promote the game, I'm very much in line with traditional ways of marketing it. And, you know, suggesting things, I mean, I see Derek's side of it, that, you know, we do want it to fit the aspect of the game, you know, kind of the feel of our team and you don't want to kind of do something that's not in line with the game. But at the same time, we don't want to be too understated as well. So I think we're still trying to find that balance.
I do want to mention that there's a third person on our team and that's our musician Eric who is in Norway right now.
He runs the pause indie music, indie game music label. So anyways, want to put that out there. I think we got one more question. In the last few years there seems like there's been a resurgence in the more difficult games like Spelunky and Demon Souls, that sort of thing.
What do you think has caused this resurgence and how do you balance like difficulty versus frustration in your game?
Right. I mean, I think it goes back and forth. So, you know, it feels like games are getting too casual. You hear people really complaining about not having games that they can really enjoy. And I think the key to making a challenging game that's not frustrating is just to give the player all the tools that they need to overcome the challenge and never make it the game's fault that they lost, essentially. So, you know, with games like roguelikes, one of the things that's so fun about them is that you have all of these tools at your disposal. You never know when you could get into a situation where, you know, I don't know, you're surrounded by monsters and all of a sudden you have to use a tin of goblin meat to get yourself out of it and you feel really smart about it. Roguelikes give you lots of those tools so even though they're really tough, it's always fun. And I think that's it. So thank you very much.
Thank you.
<p begin="00.0333.333.333"><p