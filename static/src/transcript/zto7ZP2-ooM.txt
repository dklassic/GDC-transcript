Hello, I'm Drew Ehrich and welcome to GDC 2020 in my living room.
We're going to be talking about building online services for independent games today.
And first I'd like to start with just talking about what that is, why you might need that, and whether or not you should keep watching this video or stream.
So why would independent games need online services?
There are in fact a lot of great options out there right now for independent games to start working with.
PlayFab and GameSparks and lots of things that offer a ton of functionality.
But, at the end of the day, there tend to be things that are unique to your game and things that you might want to offer yourself or things that you want to take control of so that you can do them differently.
One of the common ones is people want to have their own matchmaking algorithms or things like that.
At any rate, I've had a lot of experience throughout my career working on online services sort of from the ground up.
in independent games with the release of a project called The Maestrooms, which I'll talk about today, and we'll kind of follow that game's journey from a student project to a hobby project and some of the things that we learned along the way, because I interestingly had a wonderful gift of hindsight as I was going through that process and working in AAA studios, working at Riot Games, building the same kind of online services.
but at a much larger scale.
And I took a lot of those ideas and a lot of thinking from AAA and I applied it to my independent games, sometimes successfully, sometimes not successfully.
I wanna give you some of the things that I learned over that process, so that if you go to implement some of these things yourself you can do better than I did.
So yeah, this is just a little bit of my timeline.
I started working on Maestro's in pre-production in 2012.
I started working at Riot Games in 2013, 2014 time frame and spent about five years there.
I shipped Maestro's about two years ago, a year and a half ago now, onto Steam in early access.
And today I run my own work-for-hire and consulting shop doing online services for independent games.
So, you know, companies that need backend services as a platform for their games.
Me and my team come in and build those things.
So I've gotten to see this at a number of different companies at a variety of scales and see how it's done.
So onto the project we're talking about. The Maestros was a hybrid real-time strategy game and MOBA and we had these great aspirations for it. I mentioned briefly that it was actually a student project.
This was sort of my senior project, my capstone in college at University of Southern California.
And we had huge aspirations.
We bit off way more than we could chew.
We learned a tremendous amount.
So we were going to build a three versus three online multiplayer game.
We were gonna run with dedicated servers.
And it was going to be built in Unreal 3, which was the Unreal developers kit.
Because at the time, Unreal 4 was not announced yet.
I think maybe nine months into our development or something like that, after we had gotten a huge amount done, they announced Unreal 3.
So the next thing was the composition of the team, the size of the team.
We were pretty large for an independent game.
We were all working part-time, hobbyists and stuff, but there were 15 engineers on the project, but only really two people at a time, at any time, were working on the platform itself.
So pretty small group there, and I think one to two people was probably what you'll have working on your back-end services at any given time, especially when we were committing 10 to 20 hours a week.
And eventually after we graduated and turned it into a hobby project, the team got a lot smaller.
Just sort of a unique circumstance, something to be aware of as I'm talking.
But the team got a lot smaller.
We still had one to two people working on the platform at any given time, though.
So for this game, online multiplayer, we had a lot of features we needed to support.
We knew that we would need a login, a way for logging in and storing accounts.
We knew that we would need lobbies and folks could chat with each other.
And we'd have to manage dedicated servers because we had kind of bought into that as a better user experience.
And we needed a lot of other things.
It turns out there's a lot that needs to be provided when you're building what amounts to a game as a service.
Anything that's going to be online. There's quite a lot of features kind of under the fold or under the covers when you go to working on this.
Let's rewind to the time frame we were at and when I had a fantastic haircut.
This is my business partner, Sean, who worked on that project with me and still works with me today.
Both of us had much better hair at the time.
But back in 2013, more than just funny pictures, the circumstances for building services were really different.
The first bullet will not surprise you.
Unity was still really hot five years ago.
Five, seven years ago, gosh.
Seven years ago.
Unreal wasn't out yet.
PlayFab and GameSparks were, I believe, both present, but not in a big way and their feature sets were much much smaller.
I wasn't even aware of them at the time.
Steam Greenlight wasn't available. So you couldn't really use Steam's systems if you weren't approved to publish on the platform. And Itch.io, which is another distribution platform, wasn't around in its current state.
It didn't have a lot of downloading capabilities and patching capabilities that it has now.
Great platform for that now.
In the services side, Node.js was getting really hot.
Google and Microsoft had started to make their plays into the cloud space and there was no serverless. There was no Kubernetes. So we're still dealing with some pretty basic primitives in the infrastructure space like virtual machines, you know, basic offerings from EC2, things like that.
And so that brought us to, you know, we're looking at that space and this is also what we're looking at in terms of what languages we're trying to decide on.
There were two or three of us in the room saying, okay, how are we gonna build this platform?
These are some of the things we evaluated.
PHP and Java are kind of old standbys and Java specifically is used by quite a few AAA studios and enterprise software organizations for building these kinds of systems. Lots of great tools in place very verbose.
Rails is extremely fast. It's really really popular around that time for buildings.
web applications really quickly.
And we fall, of course, very much in the realm of web applications.
Node.js was nuking on the block, and it was squarely targeted at this space, but it had a lot of things that got us really excited.
So we ended up choosing Node, and the reasons are, go back for just a minute, the reason that we chose Node were that, A, we were really excited about it, was sort of a primary one.
We were students, we're still trying to learn new things.
and this looked really exciting.
It seemed to solve a lot of things that we were unfamiliar with at the time and it had actually some really good frameworks even in its early days.
So the question is, is Node an India approved choice?
Would I recommend this to other people having gone and built services again and worked with other independent studios?
The answer is actually a resounding yes.
I really love working with Node when I'm on small teams, when I have the type of constraints and time.
And the type of concerns that you have as an independent studio. I've recommended to multiple people since then and they definitely I actually just got a text the other day from someone I had recommend this to, it was sort of a one-man programming shop And he was like 24 hours after I told him to go check out node to solve some of your problems with the lobby system He 24 hours later he came back and he was like that was awesome. Thank you so much for that I think this is gonna, you know, get me all the way to launch and they did end up launching shortly thereafter And it was really some of the things we were excited about and some of the things we didn't think about.
So we were excited about Express, and it does turn out to be a really great, really easy to work with web framework with lots and lots of sort of plugins and middleware that you can use.
The biggest thing that I didn't know at the time that I know now.
is that Node sort of solves is a strong word, but it definitely targets the hard problems in online services development.
So if you're building a platform that consists of matchmakers and account systems and all these different things, multi-threading and asynchronous IO on the network or against the disk or to a database, those are the hard, hard problems.
And Node acts as a single threaded system.
It's event-based.
So you feel like you're writing more single-threaded code, which was really, really important for us to just make progress quickly and not have to solve really strange edge cases.
Obviously, the devil's in the details if you try and go deep on certain things, but we found this to be really, really useful.
And again, we were just excited about it.
So we worked harder.
Motivation cannot be underplayed when you're working on independent games, and anyone who's done it for any length of time knows that's a really important thing to consider as well.
So, no, definitely indie-approved.
There were some obstacles, of course.
It was very, very nascent at the time.
I generally don't recommend choosing a pre-1.0 software for independent games development, because you're going to be at the forefront of fixing other people's bugs.
And that's generally not your primary concern.
In fact, building a game is your primary concern, and the platform needs to facilitate that.
All of your online services are just meant to facilitate that.
So if you can remove hard problems from that space, I highly recommend it, especially as an independent developer.
Maybe a personal taste thing, but as any code base grows, I find that static typing is extremely helpful.
Eventually we introduced TypeScript to Node.js and that helped us grow the code base and maintain it over time.
So that's like the big decision, and I know a lot of people have a lot of, spend a lot of calories on this and ask that question first.
There's actually a number of great choices, and pretty much everything I put up there is good for that.
But once we had that done, we were super stoked, and we're like, let's get to work.
And so we had our HP framework with Express and our language with Node, and we just started hacking.
First thing we needed to do was log in, as most systems do.
username and password.
So we said, okay, we've got an HTTP framework, let's make an HTTP call.
And in fact, it's gonna send a password up, so let's be secure.
Let's make an HTTPS call, which was super easy to do with Express.
So we set that up, made a call with the username and password in there.
Awesome, cruising.
Step two, we need to host a game.
And so let's make another HTTP call.
We'll post up the name of the game that we want to create.
I'm making Southeast game.
Awesome.
And people are going to join it.
I'm going to, you know, add people to it or what have you.
And then I need to change what map I have.
So I'm going to change to the map Terra.
Oh, huh.
How can I do that with an HTTP call?
I can send up the map Terra, but then how do all of my buddies in the lobby get notified about it?
It's actually not a trivial question in HP because HP is unidirectional.
You send up a request and you get a response back.
That makes it a little bit more complex for how you would send an update or a notification that's sort of out of band that no one requested anything for, or at least that the particular user didn't request something for.
And so posts and gets in HP are not enough.
Again, it's unidirectional.
One thing you could do is you could start polling for updates and say every five seconds I'm going to ask the server if anything changed in the lobby so it can let me know.
Obviously this is kind of inefficient and you don't get your updates for maybe up to five seconds after something happened and overall not an ideal pattern.
It absolutely can work and I've seen it scale but I would not recommend it.
I don't think it represents the domain super well for what you're trying to do.
The other thing that's a little bit more subtle and over time I've that experience this you don't have this idea of a session. So you don't really know if someone is present because you're making HTTP calls and you open a connection make a request response and close a connection.
In between making two requests you actually don't know if a player is still present.
So in order to keep them out of the lobby, you don't have sort of an event.
You again need to rely on some sort of polling and so some sort of heartbeat.
to note that they're alive, there's no native session.
You're sort of implementing a session on top of HTTP.
So again, knowing when to kick somebody out, knowing when they've left, harder to know.
Someone turned off the power on their computer, you actually don't know until your timeout happens, and that timeout's something you had to implement yourself.
So you need another protocol, or you need to work with HTTP polling, implement sessions on top of it.
And there's a lot of options out there.
especially today. So you could go the polling route. You could use TCP, which is a native, reliable socket connection.
It's been around since the inception of the internet.
You could use UDP like the rest of your game is implemented in. There's no session, but it's known to be really performant, etc.
Web sockets are really cool, and this is sort of a newfangled thing where you can upgrade an HP connection to be an open socket that you can have bi-directional communication over.
And gRPC is sort of similar to that, except for it operates on newer HTTP2.
And this is a protocol buffers and remote procedure calls.
Really any of these can solve this problem.
We were using HTTP, and so we definitely thought about HTTP polling, but in order to get that out of band stuff, we actually decided to use TCP.
It was just easier to implement in Unreal 3 at that time.
And of course, we were still using HTTP.
So we basically making, calls up to the service in HTTP and receiving messages back over TCP primarily.
So is that an IDE approved path? We certainly were able to do it and ship with it, but I wouldn't recommend it. It sort of poorly represents the domain that we were in. It poorly addresses the problem. So if that's not a good way to do it, what is?
This is such an important question because the process that we went through, I've actually seen multiple studios sort of repeat where they do the obvious thing and they start making HTTP calls.
But then they realize later that they really wanted a session and they really need to notify people out of band. So having a socket open is really important.
Again, how should we do it then? What should we choose? I think we need to look at our criteria.
We know that we want a bi-directional communication.
over ideally a single socket connection because we shouldn't need more than that.
We want something that's gonna be easy to set up. It's gonna have you know native implementations in a lot of our languages.
And it's gonna have support for a session.
UDP for instance not as good of a option because it doesn't have native sessions and we don't really want to reinvent the wheel on that.
Time is of the essence as an independent developer.
So I would actually recommend any of these three.
I think they're perfectly great options to do this.
TCP sockets being sort of the most low level, perhaps you should consider gRPC or WebSockets first.
Excuse me.
But any of those three things meets those criteria and I would recommend them.
So once we've decided on our protocol for communicating and over what pipe we're communicating.
the question of what we put in our messages, and especially what do we put in messages when we're in a lobby.
So we're just talking about the create game flow, and then I update a map.
What should that look like?
What should I send the server, and what should I receive back?
There tend to be a couple of schools of thought on this.
You could put in just the changes.
So if I say update the map to Terra, it could tell all of the different players that are there.
It's like there's a new map, and it's Terra.
You can also send down the entire state of the lobby and be like, this is all the players that are in it, the map is Terra, and then they could just diff, sort of look at the delta between the two payloads.
So, or you could do a hybrid of the two.
But let's look at only the changes.
So, I've sent up a message, and this is the message that's coming back down to all the players.
It just has an action, it said, somebody updated the map, the new map is Terra.
And so on your client, you flip the image of the map, you know, change the name.
That seems appealing.
It's certainly a lot less data going back and forth.
And if you've got a reliable connection, it seems like this should work really well.
The opposite would be to send the entire state at once.
You make a request of change the map, and it tells everyone the entire state of the lobby all at once.
And they're just looking for the Delta.
So, obviously, more data in there.
You have this.
thing where you need to look at what changed from one payload to the next.
So the question is which what should we put in each?
I actually sort of counterintuitively and especially for independent developers recommend sending down the entire state of the lobby and this goes for a bunch of different things. It could be a lobby. It could be there's a whole bunch of different things, but anything that's not going to grow exponentially in terms of its size, it's gonna have a pretty fixed state for its size. I actually recommend sending down the whole state in platform land. Don't do this in your game for sure. But in platform, sending down just the state or sending on the entire state is great. It removes a lot of edge cases. And if you have unreliable connections, missing a message means that you need this whole protocol.
to implement to send the entire state anyways.
So it turns out that implementing just sending the deltas is actually implementing that plus implementing sending the entire state.
And again, times of the essence.
So the difference in size is not going to be measurable under bottom line.
So yeah, this is the India approved thing, is sending the entire state.
Cool.
We implemented some basic features, and then we kind of took a step back and said, all right, what should our architecture overall be for this?
We've been writing code in a Node.js server, but how should we implement all of these features that we're gonna need?
You saw that large list.
Well, there are many different schools of thought on this right now, or different approaches.
The old school way is known as the monolith, and you just have one sort of large code base.
I've seen these get up to a million or a couple million lines of code, and all of your functionality lives in one code base.
You tend to need to have multiple of them if you want to scale, or you're deploying multiple of the same piece of code.
Alternatively, microservices got really popular around the time that we were.
working on this, and that is a mechanism where you'd have maybe a dozen different projects and each project is tackling a really specific feature set.
So you've got one project for your player account, and you've got another project for matchmaking.
Some of the properties of this that people like are that it can scale because your most intensely used project can be separated from all the other ones.
Your performance in your lobbies could be really good if all of the CPU is really just being used on your matchmaker.
And then there's serverless. Can you use lambdas or some other mechanism for executing code remotely without having to manage all the operations of servers?
It's really, really appealing.
I can only tell you what we've worked with and sort of evolution that I saw. This is where we started with the maestros.
There's, it looks like there's a lot here and platforms tend to kind of grow large in the number of different pieces of technology that they're using and deploying.
So we've got a client talking to our mega platform.
This is kind of where we started. We've got one Node.js project.
That Node.js project serves up a web page that we can use for administrating and making changes. It talks to our database, it talks to a cache.
We did have a separate project for our chat server because we realized that also needed to be on the TCP connection prior to learning that we would need our main game to be on the TCP connection.
And the game servers themselves had another little node just executable to manage starting and stopping the UDK or the Unreal process on them that had to live on the same boxes.
So we had three projects at this point, and our client talked to you about a couple other pieces of technology that were deployed as sort of supporting systems.
And we looked at this and we said, okay, what are the problems with the architecture?
Let's do a little review.
Well, we know we don't have enough redundancy.
There's one server that kind of underpins the whole thing that does the lobbies and the logging in and a whole bunch of different things.
So there's not a lot of redundancy.
If we lose that box, If we were on Azure at the time, if Microsoft Azure decides to turn off that box, our game is down.
So that's not good. Our game server management was kind of buggy, and so we wanted to change that around.
The deployment system we were using was copy-paste, which was not very robust, and we tended to have errors in that sometimes.
And it probably won't scale.
Not the biggest concern as an independent game, but you would love to know that, given you were having scale, there was some way that you could just throw money at the problem to scale.
In this case, that would have just been increasing the size of that one box.
But even more specifically, with Node.js, we would actually just need to be increasing the performance of a single core of the CPU, or a single thread performance.
So it doesn't scale super well, and that's the thing that we're thinking about.
Our solution, because we were so infatuated with microservices and I was learning all about them in AAA land, was to apply a microservices philosophy to the platform that we had.
And what we ended up with was our player stats and player accounts and player lobbies turned into three separate services, three separate projects.
They were deployed behind load balancers so we could have multiple of each and that gave us that redundancy.
And yeah, I mean we had this whole.
new fangled deployment in microservices.
We didn't get all the way through, so our chat system was not multi-serviced.
It was not turned into microservice.
But we implemented this whole thing, and so the question is, was this the solution or not?
Again, hindsight being 20-20, I think that we did encounter a lot of unknown effort.
underneath the covers of deciding we're gonna be a microservices ecosystem.
It actually ended up costing me months of tooling, especially on the deployment side, where copying folders felt bad with a single service, but worked, it was just impossible.
When I needed to deploy, I think we ended up with seven microservices on probably seven microservices across multiple different boxes.
You're talking about maybe 14 to 20 deploys.
Not ideal.
And then all of our projects had to look identical in order to be deployed the same way, operated the same way.
We needed a lot of tooling to monitor.
Sharing code was a lot less easy when it was actually sharing libraries or copy pasting files across, and much more difficult than just reusing a class, for instance.
And it made the code a lot more complicated in a lot of ways because where we used to have a method call between two classes just calling function now we might have to call overHP.
A really specific use case for this was when we separated player counts and player stats.
It felt like a really great idea at the time and I think for large-scale games it's really important to do that. For an independent game you incur a specific cost so creating an account means that you're gonna have to create a row in your database or a document in MongoDB, which we were using, for the account and the email, et cetera.
And then you're going to have to tell the PlayerStatsService as well to create statistics for this player, saying that they've played zero games, they're at level zero with zero experience, et cetera.
And now you have this multi-hop asynchronous situation where the player calls up to the server and asks for an account to be created.
Player accounts calls to its database and says, make me a record.
Then player accounts calls to the player stats service who says, go make some new stats.
And then the stats service, let's go back and take a look at this.
Then the stats service calls to his database and says, make a row for their stats.
And then that returns and then that returns and then that returns.
So we've just introduced something like five to six hops just to create a new account.
The problem comes if you have a failure in any one of those links.
You have to walk back each one of those creations one at a time, or else you'll end up in sort of a corrupt state with half of a player created.
So, lots of code complications and where does the data live and who owns it.
Lots of interesting questions there.
Hard problems to solve that we didn't know going into it.
So.
Which of these many different paths are indie approved?
I certainly felt like I put a lot of effort into that but the system we ended up with was really a great ecosystem to work in which we solved some of the issues. So the answer is I'm not sure and in fact for your particular case, I would recommend you go and read some literature on this.
Listen to some smart people.
Martin Fowler wrote an entire thing about microservices premium, which this article talks about the cost of implementing microservices.
And that's sort of things that we experienced naively sort of charging into this space.
And Paul Hammett has an interesting article on cookie-cutter scaling, which addresses this notion of, well, what if we were to build a monolith and replicate it so that we have three of these monoliths so that we can scale?
horizontally by adding more boxes.
What are the costs associated with that? How does that compare to microservices or even a single server things like that?
Definitely be mindful of your time and know what you're getting into.
So having talked about all of this, I think that there are some really key takeaways here.
One is that as you'll probably learn or maybe you already have your most limited resources your time. It feels infinite, but for every day that you're working on your game, especially if you're doing it as your primary job.
You've gotta pay your rent, you've gotta pay for your food, and time is also important in terms of market timing.
So things that take a long time are things you should second guess as an independent developer.
And it's hard to be mindful in a space that you're not super aware of, but hopefully this has highlighted some things that can be black hole for your time.
motivation is sort of equally important because a lot of times the amount of time that you spend is really determined not just by how much time you have but also how motivated you are by the project and by the ideas so choosing Node.js for us was a great motivator and allowed us to learn new things and get excited.
We made mistakes along the way, but I would say the trade-off as an indie is that you get a little bit more your players hopefully are a little bit more lax about your bugs and are more just excited about the ideas that you're excited about and of concepts you're trying to get across.
The other one is sort of to beware the hype train.
There are definitely dragons in the hype train.
The hype train for us happen to be microservices, I think.
And specifically about being aware of the hype train is, as an independent developer, you probably have some fantastic game mechanics that you want to be on the bleeding edge of.
But you can only be on the bleeding edge of so many things.
You probably don't want to be on the bleeding edge of online services as an independent game because it's going to cost you a lot of time and it's not going to give you the value that it might give a AAA studio or a publisher where they're getting cost savings across tens of thousands of players or millions of players and multiple games and things like that.
So your goal should be to release your game.
And so beware of the hype train because there are unsolved problems in new technologies and it's probably not your best use of your time to be solving those problems unless that's your jam.
Cool, but thank you for your time.
