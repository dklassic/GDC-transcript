OK, so welcome, everybody, and thank you for joining me for my talk, Virtual Insanity, Lessons Learned from Creating Virtual Reality Engine.
So let's get started.
So the agenda for today, I'm going to take you through the horror engine, which is the technology that this talk's based on.
So I'm going to be talking about what it is and what it does.
And then the inspirations behind it, so the developers and the existing applications that informed its development.
And then I'm gonna give a technical overview of the minimum viable product.
So just underpinning the key functionality of what it does.
So then that should give a great background to the lessons learned.
So I'm hoping that if you're here because you need to know more about creating your own technology, that you should at the very least, by the end of this talk, have the confidence to go away and get started.
So, hello, yes.
I'm Liz McCurrey.
I love dinosaurs, first and foremost.
And I'm an educational evangelist for Unity.
But I'm.
But I'm actually a super recent graduate too.
So I graduated from a master's last year in computer game software development.
So all the lessons that I'm sharing with you today are super fresh.
And I'm also a Prince William Scholar, so that's a partnership between BAFTA and Warner Brothers.
So if you are wanting to continue into higher education in the entertainment industry, I'd definitely look at the initiatives they offer because for new talent, because it was a game changer for me.
So the horror engine, what is it?
So it was the focus on my research project of my master's.
And it's...
An overall concept, so it's a set of ideals for what would be a fully formed engine that we may all be familiar with and it was informed by my research into virtual reality and horror and how the mechanics of virtual reality can really lend themselves to the horror genre.
I like to define it as a prototype which shows the potential of social virtual reality through the use of an interactive social screen.
So to add a little bit more color to that, I'll go through what inspired it, who and what inspired it.
Unsurprisingly, virtual reality inspired it.
So last year was the consumer release of virtual reality.
We finally welcomed it into our homes and it has us now.
So we saw the commercial release of the PSVR for example, and the Vive, and we've also got mobile VR at our fingertips.
So as this all became more commercially available, it also became more available to developers and educational institutions.
And so with me starting my masters at the crest of this massive new wave of VR, There were so many amazing experiences being made, and not just in the games industry, but from TV, and also educational and financial sectors.
So there was a massive wealth of inspiration there being created for me to get to get grips with.
As I did my research though, it was often said that virtual reality was a very isolating experience.
So you're there in your headset and you're goofing around and doing whatever you're doing, and your friends can only kind of watch you and guess.
But we've seen with the commercial release of VR that this idea has been addressed.
So, there's like the rec room for the Vive and the playroom VR for the PlayStation VR, which has addressed this more inclusive and social idea of virtual reality.
So when I was doing my research, the biggest area of inspiration was a company called Triangular Pixels, that I don't know if you've heard of.
They did a talk last year too.
And they used this idea of a social screen, which I think was a term coined by Sony.
And so what this social screen does, as you can see here, if you have a player in virtual reality, the social screen gives you a window into that virtual reality world.
So you can have access to information about what's going on.
So this game here is called Smash Hit Blunder.
a plunder, and so you're sort of in a dungeon and you're going around collecting treasure and smashing things up in the process, and they found that by using this social screen and by giving information to the players outside of VR, that the players in VR may not be privy to, such as a timer or a leaderboard for example, it just really organically created a more inclusive virtual reality experience and I just found that concept super interesting.
And then finally, horror.
So I could talk about horror forever, so I'm gonna stop myself right there.
But I went around asking friends and other developers what scared them, because horror's super subjective and a lot of different things scare a lot of different people.
But I spoke to Lizzie Atwood.
And she told me that her company, Furious Bee, had created this little tech demo of what scared her.
And so you were in a house, and you had an object in the house.
And every time you went looking at the object, and it was outside your field of view, its position updated, so it was kind of like you were being followed, like those creepy angels from Doctor Who.
And I just absolutely loved that.
And I thought, this is scaring her, and it would be so cool if I could be the one that's placing that creepy angel and scaring her.
And so that's really where the idea for the horror engine came to life.
So going back to the original definition then.
So it's a prototype, it's proof of concept for social and more inclusive virtual reality.
through the use of an interactive social screen.
So the idea that while one of you is in VR, another one of you on a separate machine can manipulate that world and place objects as an aim to scare your friends.
Because I'm terrible at that.
So why did I create it, other than the obvious?
Well, As I said earlier, I started university at this peak of this amazing new wave.
So virtual reality in itself isn't a new technology, but this new wave, this new iteration of it is.
It was just the perfect time to get involved.
And as a developer, this newness of it really fascinated me.
Which meant that I naturally wanted to get a better understanding of it.
I was one of those kids that couldn't just have a radio, I had to take it apart and put it back together to understand why the radio was a radio.
So, I could have...
used existing plugins and an existing engine to create this experience.
But as a programming student, I really wanted to create that code myself.
I wanted to write it myself, get an understanding of it, and not just take for granted and at face value what this plugin was telling me it did.
And I think as developers, it's super important to understand more the technologies we're using every day so we're able to leverage it and just make better experiences.
And finally, giving back.
So, yes, virtual reality is ever-evolving and we're finding out a lot of new developments, but actually our industry is like that as a whole.
And I think it's really great that anybody can contribute to that.
And it's important to do so, to sort of keep the potential of what we're all making.
So now, onto the technical overview of the minimum viable product, the MVP.
So I set out with this big goal that by the end of my master's I'd have made this engine.
But actually that doesn't just happen overnight or in a very short space of time.
So what I did was I started off with the minimum viable product for what I wanted to create.
So this is like the minimum functionality that you need in order to validate what you're creating.
So I split this into three areas, which was the virtual reality integration, the networking, and the rendering.
So this is what it built up to be.
So everything was built from the ground up in C++ libraries using the Visual Studio's integrated development environment, the IDE.
For the rendering, I used DirectX 11.
For virtuality integration, I use the C++ SDK from Oculus.
I use Windows Sockets libraries for networking, so the communication between two machines.
And I use direct input for player movement.
So let's just take a little moment.
to consider what this minimum viable product is compared to what I overall wanted to create.
So you'll see straight away that it's missing quite a bit.
There's nothing, for example, for collision or audio.
And you'll also see that everything is set in stone.
So there's no abstraction, for example, to allow for the integration of another virtual reality headset or rendering API.
And also setting in stone like this really limits the release platform.
So there's all these considerations that you would take for granted having used an engine.
So the MVP then, the minimum viable product, is the minimum functionality before concerning itself with all the outer intricacies that you're going to have to consider when you make your final project.
And just a word of advice that I learned from doing it this way rather than using plugins is that when you use a plugin, more often than not, the person who's created it has an appreciation of the pipelines of the engine that you're going to integrate it into.
So sometimes you don't have to alter too much what you already have to be able to accommodate it or get it to work how you would expect or you want it to.
Whereas if you build up a product in this way, you really have to have a deep understanding of what you're using.
So just because the Oculus SDK supports DirectX 11, just by integrating and referencing that in your existing DirectX 11 project means it's gonna work as expected or at all.
There's a process of identifying the code that you need and integrating that together appropriately.
And so the minimum variable product as a concept looked like this.
So on one machine, the product would load as a virtual reality experience.
So this is where the SDK was used, Oculus SDK.
And then on the mother machine, you would have this interactive social screen.
So the player on this machine could use the grid system to be able to place the objects.
and the network libraries were used to facilitate this data transfer between the two machines.
So while the player with the interactive social screen could place the object and it would send the geometry type and position to the VR machine, which would manifest it in the VR world, the VR world was always sending back the position of the player in VR so that the player with the social screen could more strategically place those scares.
And you'll see there's a Twin Peaks kind of aesthetic going on, that's my doing.
So in reality, it looked like this.
So this was the first time that I showed it to anybody, actually.
So you can see the two-way machine communication that I've talked about, the DK2 there.
And then the picture on the left was some concept art done by my friend whose concept art is called Bradley.
and he mocked up a number of scenarios for what the MVP could be the mechanics of it could be used for so he came up with the idea of a detective game where you could place clues and move the clues and that kind of thing so it was really cool so this is the reason you're all here so the lessons learned I learned a lot doing this, some good, some bad.
And so what I've done is I've taken all that and I've tried to condense them down into what I think were the key important parts.
that I'm hoping will be useful to some of you.
So I've split them into three areas.
So one is pre-development, so things to consider before you even get started.
Then development is early on in development and iteratively throughout.
And then finally, just more personal lessons learned about just being a developer and looking after yourself.
And all these are going to sound really obvious as well, but actually when you get into that development headspace, they quickly go out the window.
So it's worth remembering them.
So clear goals.
Yes, they sound obvious.
What do you want what you're creating to do?
But actually it goes beyond that, and it's about what you want to achieve from it too.
So is there something that you want to collaborate to, or something that you want to learn?
So for me, yes, it was an academic project.
And I wanted to create this multiplayer virtuality experience.
That's what I wanted the technology to do.
But what I wanted personally was the ability to learn more fundamentally how virtual reality code worked.
So then that leads quite naturally onto resource.
So you've identified what you want to do, but now you need to think about how you're going to do it.
And there'll often be things that you forget.
So if you're not at university, you need to sort of think about the software and also the licenses, and not just the development software.
Is there anything that you need outside of that?
There's also the consideration that if you're using virtual reality, you're going to have to think about what headsets you have available, but also the hardware to be able to run those headsets.
So for me, my machine at home didn't suffice, and I had to make sure I was in the computer labs at university all the time to be able to support the Oculus.
And this also extends to any research journals or articles.
Because if you're working in something fairly new, there might not be the resource that you are used to having if you use an established engine, for example.
And what do you already know?
Because I think it's really important to, at this point, to address your strengths and play to them.
So for example, I'd already had experience with networking and rendering, so that allowed me to more fully apply myself to learning those virtual reality elements.
So if you have a project that you already have that you're wanting to build on, or a strength that you really want to play to, it's a good idea to get started that way.
Oh, have I gone backwards?
How do I go forwards?
Oh no, am I spoiling it?
Don't worry, roll with it, roll with it.
So, research.
So this is gonna start very early on in your project, but it's gonna carry on iteratively throughout.
And so, this is adding color to what you're creating.
So the inspirations part of this talk was my research.
It was existing products, existing processes, and developers that inspired what I was creating.
And this also went into research journals and articles as well.
And then starting small again seems obvious, but this is why I took this overall concept and started off with the minimum viable product.
What I did then when I had the minimum viable product is I broke each concept down further.
So for each of those elements, I broke it down until I couldn't break it down any further.
And this sounds mental, because I would have a million tasks to do.
But actually having tasks that took two minutes or two days or two hours was a great way to keep having that constant positive reinforcement that I was going in the right direction.
And I think that's really important for momentum and morale when you have a big project ahead of you.
So how can you do this?
This is really dependent on developer or team or individual.
I know some people who've used burndown charts in Excel or just kept a diary or written on a whiteboard every day and cleared it down and started again the next day.
But for me I used Trello because I thought it was a really great visual representation of what I was creating.
I could color code each of the areas of that MVP.
And as you can see with this tiny articulus, this is what I mean about that constant positive reinforcement.
I could break each task down even further, so I always had that visual representation that it was going in the right way.
Code design.
So when I start out on this and I establish the minimum viable products, I was like, this is fine.
I've been prototyping those bits in separate applications, separate projects.
I'll just throw them all together because that's the sensible thing to do.
And spoiler alert, it very quickly crashed and burned and was a nightmare.
So don't do that.
What I ended up doing was having to go back and think more about, think more smartly about my development process.
And some advice I was given, which I used and I recommend, is to have a visual flowchart of what you're creating.
So what I did was I took each object, each element of my project, and I popped it down on a piece of paper.
And so I very quickly built up a roadmap of the areas that I needed for my project.
And once I had all these pieces of paper and I could move them around, I could very quickly identify the data flow between them I may need, what objects needed to be aware of each other, any commonalities in the relationships, and I moved them around until it made sense.
And only then did I transfer that into code.
So to illustrate that a bit further, I'll just give a really high-level overview of the networking element of the project.
Sorry, I keep doing that.
So I needed a way to be able to control the application if it was launched in virtual reality, but also if it wasn't.
So my first piece of paper was virtual reality integration.
So let's say that translated into code, I called this VR application.
So then I needed to think about what that class would need in order to work.
So then I started thinking, well it's gonna need the virtual reality integration, that's another piece of paper.
There's gonna have to be some sort of player class, that's another piece of paper.
The geometry, that'd be a selection, more pieces of paper.
And so it's starting to build up.
And then I'd think about the other side, the non-virtual reality side, and I'd repeat the process.
And so I could clearly see quite early on that there's gonna be commonalities between these two applications, even though, these two classes, even though they were fundamentally going to be doing the same thing, rendering geometry and taking note of the player.
So when I had these classes defined, I started to think about how they could be aware of each other, when they needed to be aware of each other, and how to facilitate that.
So what you may find, again, if you use engines, is that it's usually a good, well, in code constructs, it's a good idea to have an overall class that has an appreciation, a visibility for everything that you're creating.
So in this example, we could call it the manager.
So the manager could have an instance of or a reference to every other class within your application.
So it instantly is able to access the state of it and facilitate that communication between all the other classes.
It could, for example, detect when a headset is attached to the machine, therefore trigger the virtual reality classes implementation to get started.
So then if I look a little bit more at this area of code reuse, so like I said, both these applications share attributes.
And usually when that happens, it means that we're rewriting the same or similar code.
And so to reduce that, we usually have a base class which holds that generic functionality, but which still allows the derived classes to be able to utilize or override that, and also maintain their individual elements and behavior.
And this is likely to change, even when you've got all your pieces of paper laid out and you've translated it to code.
As you find new elements that you want to add to it, or areas that you, sticking points you come across that you didn't consider, it will start to change.
But having that roadmap, that visual representation already mapped out, just makes it a lot easier to be able to identify where you're gonna be putting in these new resources or changing it.
So then testing.
I found from very early on that it was important to have testing from very early on in the project and iteratively throughout.
Especially with virtual reality, it was really important to have as wide a test base as I could because virtual reality was affecting a lot of different people in different ways.
And I also found, because I had my head in virtual reality all the time, I was more forgiving of it.
So it's really important to keep testing on that wider audience so you don't get caught in that trap of sort of getting used to it and just going with it.
Usability was a big one for me because I remember when I first showed my project to people and I was like, hey look at this, it does this and it does that and it's super shiny and they just went, yeah but how do I use it?
And I was like, I've been sat in my little cave, really hammering on those technical elements with no consideration for how the wider world would use it.
Like maybe I just assumed they were psychic.
And so it very quickly became apparent to me that if what you're creating isn't intuitive to use, then people just really aren't gonna take the time to get to figure out how to use it.
So these more personal points.
I actually heard a talk with an engine programmer, Tamir Tabori, who did a talk last year.
And I don't often hear these iterated.
And again, they're obvious, but I think they're really important to point out.
So the first is to pace yourself.
So I'd find I'd start developing mid-morning, like 11 a.m., and then I'd look up and I'd look at the clock and it'd be 4 a.m. the next day.
And like, I hadn't gone out, I hadn't eaten anything, I hadn't had a cup of tea, I hadn't spoken to another human being.
And this was usually when I was trying to figure out how to solve a bug or implement something before I went to bed.
But what I found is that if I took a step back and had a break, I went and got something to drink and I ate properly, I went for a walk or I spoke to someone, that I'd had the headspace to be able to go back to that problem and approach it in a lot more open-minded and different angle.
And it just was great for productivity.
Again, when you're on any sort of project, you learn what you're good at and what you enjoy, but you also learn what you're not very good at and what you hate.
And I found that really tough to take.
It took me a long time to be able to turn that into a positive and identify it as areas for improvements, but also as a way of identifying what I really enjoyed.
And I think it's really important that if there's something you enjoy, to take that passion and run with it.
and celebrate too.
So like I said about taking off those many achievements, share and ask your friends and your peers and share it on social media too.
Like social media is a great way to get that immediate response and feedback and feelings for the response to what you're creating from the active development community.
and ask.
There's no such thing as a stupid question, and even if you think the person is the smartest person in the world, they don't know everything.
Asking is all part of the learning process, and nobody ever stops learning, so don't be afraid to ask.
And also, this is important, so believe in yourself.
If you're doing something that you're emotionally investing yourself in and putting a lot of your time in, you can often get to sticking points where you think, do you know what, I can't do this anymore.
I'm not smart enough for this, I'm not good enough for this, I can't do it.
But if you talk to the development community, you'll find that everybody feels that way.
It's supernatural.
So you can do it, and you just have to keep at it.
So, in summary.
Set your goals clear.
Please do code design.
Just please remember you're a human being, and collaborate, share, and celebrate.
And thank you for joining me today.
And I hope that there's been something useful for you to take away.
I'm going to be in the wrap-up rooms if you have any questions.
I have a summary PDF of all the lessons learned part.
Or you can just throw a tweet at me.
But thank you for spending your time with me today.
I really appreciate it.
