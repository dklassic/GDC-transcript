This is a perennial favorite.
We love doing the rants.
It lets us get things off our mind.
Things get said that cannot be unsaid.
So lots of fun, lots of fun.
And we're going to just get this going right away and just kick this off with Brian Schwab.
All right, so you guys know kind of how this goes.
Usually you put up some awesome title, I talk about a problem y'all have, I offer some sort of solution, I make loud noises, I pause dramatically, then I give a surprising blurb!
And a final twist involving current events which then leads to a timeless truth.
Rousing call to action.
Nope, fuck all that.
This is mine. You're in my house right now, and I just want to yell a little bit.
And I realized that I'm actually one of the oldest people I know in Game AI, so I get to do an old man rant for the first time ever.
So, back in my day, I got a computer and a sleeping bag. That was the day one.
And by the way, I had to take that computer home nine months after the company folded because they didn't pay me that last month.
Network? Nope. We had no network for the first two companies I worked at. If you wanted to actually use version control, you stood up and you said, who has the game? And somebody gave you three disks with a rubber band on it. And if you had the disks at your desk, you could check in, check in code. So don't bitch to me about like not wanting to use version control. Imagine not having it.
So by the way, no network also means no internet.
There's no reference materials.
You know that big box of books behind your desk that give you all kinds of stuff?
Nope, none of it.
You know that few people that work at the company that have been there for 10 years or maybe some website that has a buttload of information?
None of it.
You guys live in a freaking world soaked with information.
When I was back then, none of it.
In fact, this conference was horrifying back then because you would come here, everybody was scared crapless to tell each other anything.
And so I remember the first two round tables I went to, everybody stood there looking at each other.
They were afraid to not come to the round table in case somebody did give up a deep secret.
But nobody gave up any deep secrets.
They all just stood there like horrified poker players with $3 in their pocket.
And quality of life?
I actually thought that that meant I was in the game industry until somebody described what quality of life was.
And then I realized, no, that's not for me.
That's not why I went into the game industry.
I'm not sure why there's a square on this screen.
Anyways, that's another thing to rant about.
All right.
Finally, what I wanted to go over for you young'uns is some vocabulary lessons, things that maybe you've never heard of before.
The first one, optimization.
And I'll say that word again because I don't think a lot of you have ever seen it in print.
Optimization.
This is when you take your game and you scrunch it down so it runs in a good fashion.
You make sure that the assets are meaningfully sized.
You make sure that the code runs at a good frame rate.
All of the things, instead of just waiting for next year's computers to get twice as fast and memory to go down in price.
Restrictions are actually good for you.
They actually force you to do a better job.
We barely had any memory and CPU when I was first in games.
My first game, I think the entire game engine fit in 32K with the data.
It was ridiculous.
Like, I have icons on my desktop that are bigger than that.
I actually built a mechanic into a game once, which effectively had the players choosing the people that went into a mission so that it would budget out the video RAM for me.
It forced me to come up with things that would actually help make the game better that took into account the restrictions of the system.
We didn't have any polygons.
We had to make good behaviors because we couldn't do it in art.
We could not do it in art.
We barely had anything.
We barely had any people.
That's one of the things that bugs me the most is when people are like, oh, well, but my game has three million man years of content.
And it's like, yeah, and you've got 700 people on the team.
Back in the old days, I was not only the lead programmer and the designer, I was also head of HR and the janitor.
And let me tell you, I still have my broom and I'm proud.
My first game had less pixels than your average tweet litter count.
That is dangerously close to true.
Second word, debugging. I don't know when this became a lost art, but it is a lost art.
Coding is only 8% of the battle.
When I was around, a debugger was actually just log statements and you had to pray that it wouldn't slow the machine down enough that you could still actually find the bugs.
And a profiler?
That was even lamer.
Like you were printing out a counter during loops or during different parts of pauses so that you could determine how much time was spent in between chunks of your code.
Nowadays you've got beautiful debuggers with hardware breakpoints and all sorts of crazy goodness and profilers that visually show you code.
stack traces and the whole nine yards.
This needs to be taught.
I can't for the life of me understand why this has never been taught in schools.
I've never seen a class in debugging.
I've never once in any curriculum I've ever seen a class in just debugging.
And we don't need to just teach programmers this.
I have, because of the profligation of design driven content, a lot of designers are doing a lot of scripted, logical sort of notions, and they don't know how to debug it either. I have literally had this conversation with a designer, with a fairly high-level designer. I'm now a high-level designer. The AI is broke. The AI is broke. Did you just pull down code? No. Did you just change something in your script? Yes. Did it work before you did that change? Yes.
At which point, I fight down the urge to throw them into outer space.
The queen is not amused with your debugging skills.
And the awesome thing is, once we actually start teaching debugging skills, once we actually start putting more debugging systems into our games, we can get more people to debug our games.
We can have QA people that can actually help debug.
Even your mom can help debug.
Because if we don't start teaching people how to debug, I am going to finish the infinity snippet, and I am going to get rid of most of you myself.
And don't make me snap more than once.
Finally, the last one, innovation.
And I don't mean innovation in games.
We're actually in a fairly nice renaissance for innovation in games.
There's so many indies pushing so many different types of games right now that innovation in games is not the problem.
What I'm talking about is actual game dev.
That is really horrible.
And it's because of two things that I say, not invented here syndrome and game education.
And what do I mean by that?
Right now, a lot of people just learned how to code.
They quickly went to school, they learned how to code.
They don't really know how to program.
They know how to code in maybe one language.
When I went to engineering school, I actually took a single course in assembly language programming where they taught us 11 different processors in one semester.
And what did that teach me?
It didn't teach me 11 processors.
It taught me a data and code flow with different types of architectures all over the place. It taught me that syntax barely matters, that what matters is what types of inputs, what types of outputs, how much time do you have, blah, blah, blah. All these things, it taught me how to program.
We don't do that much anymore, and it makes me sad. The other thing that sucks is that In, especially in game AI, we kind of had this quote unquote revolution where we stopped kind of using state machines and we started using a different structure.
And you know, when Damian Isla, as much as I love him, as much as I love him, when Damian kind of introduced everybody, or a large chunk of you, to behavior trees, I really get the feeling like he sort of traded out cubicles for an open floor plan.
He kind of took us from one hell to a slightly different hell.
And the sucky thing about it, like, cause I agree that for a huge swath of video games, behavior trees are actually better than state machines because of their reactivity and because they're easy to add to for a long time.
But that's when games were like that.
Like nowadays games are barely like that and I see talk after talk after talk of people that are like, well we started with behavior trees and we spent two and a half years getting around the problems of behavior trees. And then the next talk is somebody doing the same thing from a different direction and on and on and on. One tool is not the only way to go and you really need to sit down and realize again what is your inputs, what is your outputs, what are the types of...
things that you want to do because most games nowadays are not as reactive as behavior trees want you to be.
And you spend a lot of time trying to make sequences, a lot of time trying to make more authored content, all of those things easier to do without blowing up your behavior tree.
And lastly, I really, really want, like I said, to get a full curriculum in education.
Right now I see too many classes being, quickly teach them a little bit of CS, quickly teach them a tiny, tiny bit of game design, and then.
jam them into a game engine and start making a game.
Nobody's teaching anybody how to do the actual things that are right, and nobody is teaching debugging, like I said before.
And then finally, I think the reason that they're doing this is because they're trying to say, it's so easy, it's so easy, you can do it, you can do it.
But the other part of this realistic expectations that I mentioned is that there's not as many game jobs as there are people getting game job education.
And we really need to get around that problem as well.
It's because.
I think if people understood that there isn't a lot of jobs, they might actually work harder at becoming better at the job in order to go out there and become the people that we do choose to work in the industry.
So finally, any questions?
Because the only answers I have are, get the hell off my lawn, get off my lawn, and yes, get off my lawn.
Right, so I wanted to draw attention to this title.
Seen this title before, but I wanted to show it again because this is a rant session, and I have to say that I find the rant format extremely challenging.
Because even though there's a lot of encouragement out there for women to express rage and really put out what they feel angry about and own that feeling, I'm really shit at rage.
I'm just bad at it.
I've never been that good at anger.
If it were a skill, I'd roll low.
I mean, I do feel anger about quite a lot of things, and quite serious anger.
And I think these are kinds of things that we tend not to talk about in this rant session because they're terrifying and maybe they feel a bit off topic and who really wants to bring down their day with this stuff.
I am going back to live in the UK and I'm not sure in two weeks whether it will be part of the EU or not.
That pisses me off, okay?
But what I struggle with here is the effectiveness of the form.
Like an angry rant is basically a bug report.
You're letting people know what is wrong with the relationship or the community or the institutional system that you're part of.
And maybe if you're a ranty person, you get the reputation that you file all of your bugs as critical.
and there's a huge backlog anyway, nobody ever has time to clean up, so, you know.
And besides, you can hurt people's feelings. Again, a blank slide, it's on purpose, I didn't screw up. It's because I'm bad at this, right? You can hurt people's feelings by being angry, I'm not keen at doing that, but there are times when it's necessary. The thing is that the expression of the anger doesn't fix anything by itself, it's not a patch for the problem.
And wherever possible, I'd like to be suggesting possible solutions, although for some problems, I have to admit that I'm really out of my depth.
So, last year I did the rant session, and I thought, okay, I'm not good at anger, but the rant is a genre, it's a format.
You get up here and you do a kind of stand-up routine about something you'd like to see changed, and everybody who's coming to the rant knows how that works, and it's a particular context, so this is fine.
So last year I wanted to do a talk about how we need to do a better job of inserting nuance when we're asked broad questions about AI that miss the point of what AI is and how it works.
And I wanted in particular for fellow devs to think about how we pick what to say about AI, how we represent it to the public.
and even to each other within development teams.
But it was a rant, so I picked a ranty title, and the consequence here was that Games Industry Biz published coverage of my talk with this headline.
Which gets better if you read the subtitle.
And the journalists did get in a number of quotes where I think it's clear that I was talking to devs about the role of devs, but naturally people honed in on the title.
So the next day I had a bunch of annoyed journalists on Twitter asking if I realized how hard their job was and complaining about my contempt for laypeople, which was not the point.
So, obviously that was a relatively low stakes case where no one really got that angry or offended and it was basically fine, but it has me thinking about the way that our format shapes what we communicate and how.
There's an interactive fiction author I greatly respect named Porpentine who recently said that she writes fiction more than she writes nonfiction because stories allow her to be more truthful.
And now she didn't elaborate very much on that statement, but what I took from it is that when you're writing an essay, the genre of essays takes over from you a little.
So if you're writing an essay or an opinion piece, you're supposed to have a thesis statement.
You're supposed to support it with arguments.
You're supposed to know what you think, and it's supposed to be orderly.
You might have some nuances.
You might admit some exceptions to the case you're making.
But structuring all of that information into an argument means that you're enforcing a hierarchy of meaning.
on the thing that you're writing, you're saying some of it matters more than the rest.
And in fact, one of the things that I like about writing is that it forces you to come to that kind of understanding.
To write an essay about something you're not sure about is a way to understand your own thoughts.
But there are things that are hard to communicate that way, and the same thing is true for telling a story, except that a story invites you to present struggles that might have no simple answer or describe character experiences as they are without putting an interpretation or a priority set on them.
And of course, there are a host of other genres and sub-genres we can use, depending on what exactly we're trying to communicate and how much we care about wearing shirts.
not only to entertain and amuse ourselves, but to structure different types of information and different meanings.
Now, at this point in the rant, you may be thinking, I see the AI Summit logo at the top of the slide, but are you sure this is an AI Summit talk?
I mean, Emily, are you lost?
Did you wander in here by accident from the Narrative Summit or the Game Educators Summit or maybe the Advocacy Track?
Could you say something about machine learning now, or at the very least, procedural content generation?
And to be honest, by the way, the climate change pictures kind of ruined the mood.
But maybe some of you are ahead of me, because what I want us to think about sometimes is AI as a practice that lets us understand the world and communicate in new ways.
Simulations are how we write about systems, how we imagine possible functioning worlds, and ask ourselves whether we've imagined them right or gotten something terribly wrong.
Last year I argued that we could do better at not exaggerating what AI is actually doing, that we shouldn't present decisions as belonging to human-level thinking when they don't.
We should be precise as we can about what it means for an AI character to think about something or prefer something or like something.
But to pair with that, I want us to think about the practice of AI as an art form and as a means of expression.
So when we talk about metrics for machine learning models, we often use words like false positives and accuracy that make it sound as though there are no human being was involved in determining what counts as a positive in the first place, when in fact that is often the most important thing that is going into the system.
And if we are going to solve the really big problems, it will be through the practices of data science and AI.
Not because we'll reach the singularity or build an artificial general intelligence capable of perfecting the world's broken systems, but because the discipline of thinking towards good artificial intelligence requires us to understand the important features of our data, requires us to seek and actively work against biases in our information.
requires us to decide what experience we want our systems to produce and how many failures we're willing to accept for which users.
And the thing about game AI specifically, and finally I bring it back to actually this summit at this conference, the thing about game AI is that in games, we're allowed to talk about the fact that we're building aesthetic experiences on purpose.
We can admit that the AI we are building is not objective, and it is important for us to tell the world how that works.
Hey everyone, I'm Ben.
I actually wasn't sure whether to put this talk here or in the simplest trick in the book session.
Like, it's helpful advice, but there's a lot of fuck words in it.
Anyways, so here's my one simple trick for a way to improve your AIs, is tell them to shut the fuck up.
It's enough with the rants.
Ever since, I think maybe the game Fear, we've been giving NPCs all these lines where they're just describing the situation they're in, which is fine I guess, even members of an elite paramilitary force sometimes just gotta tweet about their feels, but these barks are not helping you.
You've been doing them for all the wrong reasons.
Like, we're not usually making games, to be honest, where intelligence really organically comes up.
So instead we feel a need to just shove it in there.
Like the player throws a grenade, and so an AI character says, shit, a grenade!
I guess so that the player's supposed to think, wow, he comprehended my grenade, what incredible AI.
Listen man, you saw me holding that thing for like three seconds, and you didn't mention the topic then, let alone try to take cover.
If I see somebody holding a grenade and like imagining parabolas at me, I'm not gonna stand there and see how the situation plays out.
And if they end up throwing it at me, I'm not gonna waste time yelling at the thing.
Now, one idea behind Barks, I will admit, is reasonable, if a little cowardly, because players can misinterpret the AI, right?
Like, a character decides to flank, but from the player's perspective, what's happening is the guy ran off, and then later on, somebody else magically appeared behind them and shot them, and that's not fun.
Whereas, if the character says, I'm gonna flank left, no, the player's left, while he's rather lost the element of surprise, at least you get some credit for what your AI's doing.
Also, the idea of companion AI in a mixed world game prompting the player where to look.
That's a really good idea.
A really bad idea?
Well, okay, so true story.
I was playing a game, a stealth game, and I was hiding, and somebody was looking for me, and the character said the line, and this is the line, he's gotta be around here somewhere.
What? He's gotta be around here somewhere is not a sentence you use with grownups.
It's something you say if you're playing hide and seek with your five-year-old and you hear giggling coming from behind the couch. It's not something you say if you think there might be somebody hiding in the rafters with a gun. People, your fellow developers are doing their best to make the player feel immersed, like they really are hiding in the rafters. And then you gotta come in and deflate that balloon with he's gotta be around here somewhere.
Of course, what the guy is really saying is, I'm in search mode so the player knows to stay hidden.
Even in the midst of showing off his intelligence, he's undercutting it by showcasing the stupid, unnatural limitations that the genre places on him.
He's got to be around here somewhere.
He's got to be around here somewhere.
Must have been the wind.
It's OK, guy.
I'm back to patrol mode.
No.
The real irony is that we think of Barks as a one trip.
as a one simple trick sort of thing.
Like, it's an easy way to bump up the intelligence quotient just by playing sound files.
It's like we're trying to cheat on a Turing test.
Like, instead of having an actual conversation with the player, the player can't talk, and instead, our guys are just monologuing about taking an arrow to the knee.
Like, if the player could talk, that's what they would be asking about.
Well guess what? Your one simple trick, it's not fucking working.
Of course it's not. Ask any artist, what's the hardest thing to draw?
And they will say, the human body, or in particular the human face.
Not because the human face is...
inherently complicated, but because we humans are so good at analyzing human faces, at picking out small problems.
Well, we humans are also pretty good at communicating.
We know that people don't walk around saying, must have been the wind to nobody in particular.
And we certainly understand the risks of sharing information with somebody who's trying to kill us.
And this isn't about having good writing.
It isn't about having good voice acting.
You can have those things, and it doesn't matter.
Even when it doesn't sound artificial, it still sounds unintelligent.
It has to because it is.
You cannot make someone seem intelligent and threatening if you make them complicit in their own defeat.
It's like what Brian Schwab said a few years ago about game AI's job being to lose with style.
Fuck you, Schwab!
Lose with style. There's no such fucking thing.
A character losing with style means that their style is to lose.
Don't patronize your player. How is that challenging? How does it engage the player?
He's gotta be around here somewhere. That style?
How do you imagine the player reacting to that?
Well reasoned, my friend. I do have to be around here somewhere.
You truly are a worthy opponent.
Enough with the barks.
Enough with the insincere, I'm gonna get you, play acting from characters designed and programmed to be shooting gallery targets.
If you wanna show the player how intelligent your AI is, make it outsmart them.
You wanna challenge the player, engage them.
Give them opponents who shut up and try to win.
Thanks.
All right, I'm gonna channel some anger.
Might have forgotten to make it funny.
Um, I've been talking about this for a long time.
And for those of you who saw my session earlier, there might have been a bit of a disconnect because I took a lot of anger from that session.
And I brought it here.
So, let's get started.
A couple of years ago, maybe five years ago, somebody came up to me and they were like, oh yeah, yeah, yeah, Game AI. 90% of Game AI is A-Star.
And I was like, what the fuck are you talking about?
And then more recently I got given this quote, 90% of AI in games is NPCs.
And that's fucking bullshit.
So, if you take a very myopic view on what AI in games is...
Yeah, okay. We'll sit here and we'll talk about NPCs and we'll talk about pathfinding and we'll talk about bugs. Not that I'm picking on you, Ben.
Who fucking cares?
We stifle ourselves by focusing on NPCs. We limit our impact.
And if you think that 90% of AI in games is NPCs, it might be because you've only thought about NPCs.
This is what the games industry looks like.
2.4 billion gamers in 2019.
The sector revenue is $148 billion.
Half of that is gonna come from mobile.
That means we've got a big secret here.
A significant percent of our industry doesn't even have NPCs.
And our industry is an industry.
And our studios, our businesses, and our games are products.
Maybe, just maybe, we ought to think about AI in bigger context than just fucking NPCs.
The AI revolution is here.
The AI as a sector is going to hit $168 billion in the next six years.
We're adding value across all sorts of sectors.
Autonomous vehicles, home automation, you name it.
AI is adding value right now.
And in this city in particular, AI practitioners are the gods of modern technology.
We have the capacity to rethink and reshape how we do things.
And you know what?
We've been doing this shit longer than everybody in this city calling themselves a machine learning expert.
We've forgotten more than they fucking know because we've been doing it for 30 fucking years.
So, you can focus on your NPCs if you want, I guess.
If you want to chase a cool line in a review somewhere about, oh, and then the NPC said, oh, he threw a grenade.
Like, what's the point?
You have the capacity to add millions of dollars of value to your businesses.
So if I hear one more fucking talk about pathfinding, I'm gonna lose it!
So yeah, that's it.
All right, so, Nicole Lazaro.
And this is, yeah, we're gonna see about this.
All right, so this is my rant.
So I've worked on, in games, emotion for 26 years, about emotion and interaction, so that's where I'm gonna channel.
We're working on creating an emotion engine for some of our games.
And therefore, my rant is about self-driving cars.
Now, I don't know what about this is, or why we are so obsessed as a Silicon Valley and as a planet with this concept of self-driving cars.
But it seems to be grabbing a lot of lion's share of industry and what we're trying to do, or what some companies are trying to do.
And is it, I mean, what is the value proposition of a self-driving car?
Some people, you know, claim that we'll reduce traffic.
Maybe.
It'll be, you know, a couple of iterations down the road.
Is it that we want to read our comics, you know, as we drive to work or as we get driven to work?
Do we want a Facebook on the back seat like Michael Jordan here?
Or do we want the cheery face of a automobile saying, hey, I'm on my way on the grill as it picks you up?
By the way, I think that there's something wrong with her because she looks like she's in a neck brace.
And I think that this problem is like, is this a problem to solve?
And that really is the heart of my rant.
Is a self-driving vehicle with all of the expense that goes into it, all of the earth resources that will have to be created or mined in order to create, replace the entire ecosystem of cars, is that really worth it and is that a problem we're trying to solve?
And then the problem we're solving is not this one either, which is on the AI aspect of like, how do we keep them safe?
How do we make it more efficient?
How do we get people from here, from point A to point B?
No, you wanna think about, well, what is the real problem?
What are some real problems that we have as a society?
And as us, as interactive entertainers, our mission is to help people imagine.
It's our mission is really to help people of that next generation come up with new ideas, to be able to see the world in a new way.
So what I say is that the real problem.
is this. We are a planet where depression is a worldwide epidemic.
We are losing connection with each other, with our loved ones.
We are getting sucked into things like social media.
And because I think there is an opportunity, because I am both a ranter and a solution provider, is that because there is a connection between how we act and how we feel, what we do in games and what we don't, there really is a, if you saw my talk earlier, there is a really opportunity to create new feelings, new emotions, new patterns of behavior.
The problem to solve, I think, in AI for games is not this problem either.
It's not, you know, the threat of life is just one emotion that we have and that one emotion that people experience.
It really is the relationship with others, sort of a human-centered approach to AI.
It's a people first.
Like, what could, what sort of value could AI add to this interactive experience that makes us a better human, that improves our quality of life, that makes us smarter, that makes us, you know, enjoy more time with our friends?
And WTF, where's the fun?
Where's the fun AI?
We want that emotion to come forward.
And so with the opportunities in narrative AI, sentiment analysis, and making players happier, I think there's a real opportunity to create not just more believable AI, more better pathfinding, and more intelligent barks, I guess.
But it really is to craft emotion and allow players not only the opportunity to experience the emotion that you have, but really give them the steering wheel to create the emotions that are missing in their life.
which is possible through the interaction design and through AI.
So with the four keys is just one lens into this space, but we can actually through the actions in game help create different emotional states, move them, and they choose what actions they take so they can actually move themselves to different emotional states.
So much of WITH is rather, it's not just really a choice between the red pill or the blue pill.
It's really a choice of a different order, in a sense that we could provide games that give players their daily dose of dopamine, oxytocin, serotonin, endorphin.
These are wonderful chemicals that feel good.
Oxytocin is, of course, the cuddle hormone, but it's also produced in angry situations as well.
Social bonding.
Social ranking is serotonin.
It's what drives the likes on Facebook.
And endorphins, of course, mask emotions.
And so you can actually get...
quite a long way if you give players these different emotions in sort of every layer of your gameplay.
So imagine if your AI was really skilled at precisely targeting different emotional states and that through the player whether or not they were consciously aware or at least behaviorally aware of moving and using the game in this way or that way could really round out their life.
You know, really could improve the quality of their interaction with their friends, could make them feel more associated with their fellow peers, and that we could actually add, you know, these mechanics to create different emotions in the player at every level of the game and, you know, connect us all as a planet.
We can create meaning in games.
We can create significance, the feeling that I matter.
And an AI that's trained to do that, that helps a player even, to train themselves to give themselves, you know, encouragement and move through the world, is a much better, I think a much more nobler goal and a higher stretch.
And I think that's something that we're all very, very capable in this room.
And so it's not so much, you know, what Tomb, you know, Tomb Raider, Lara Croft raids.
It's really what makes, what really, really matters is how you feel after the game, you know, playing with your friends.
So, thank you.
So some of these rants, like that one, were very feel-good type of rants.
Mine will not be that kind.
Um, several, what was it, like three years ago or something, Brian Schwab did a rant where he's like, everyone has like this point to make.
I have no point to make.
I'm going to complain about five things that annoy me.
I could have easily made it 10, 15, whatever.
But these are five things that have been pissing me off lately.
And that's the entire rant.
That's what it is.
So let's get started, all right?
Number one, a lack of tools.
If I come onto your project and there are no tools whatsoever to deal with the AI, that's going to be the very first thing I advocate for.
I was on a project once that was pretty far along, and the only AI visualization was setting a breakpoint.
Setting a breakpoint.
What dystopian horror is this?
Like, really?
I can't even see, like, you can dump a debug log to a console window.
In fact, I am so annoyed by this that tomorrow I'm giving a simplest, my simplest trick in the book is how to create a really simple debug log.
And not just a console window, but like mixing a C sharp thing.
Like, you can do this trivially.
So if you don't have tools to actually see what your AI is doing, then what's the point? You're gonna step through, like, walking through your horrible behavior tree? That sounds terrible.
Even on The Sims 4, in the very, very beginning, when all The Sims looked exactly the same, and it was a green, flat plane, and that's all we had, at least we had a console window where I'd spool out a bunch of debug logs of, like, why did The Sim make this choice?
At least do something, right?
Don't fuck us over on tools, come on.
What are you doing?
Okay, number two, and this one has gotten me some interesting looks.
Single letters for template parameters.
Did we lose a war?
Like, what the fuck is this?
Single letters for, okay, T.
Really?
Okay, sure, it's type, all right.
Follow me here.
Bad, bad, bad, right?
These are all bad.
Why is this okay?
It's a slippery slope, right? Now there's this one. I don't know what that means. Sure, T is type, but what is this or this or this? Like, and maybe you think it's hyperbole, right? You're like, oh, come on, Rez, you're just using letters in the alphabet. Well, I mean, this is EASTL's hash table, right? Or it's insert, you know, it's hash table type. I mean, come on. Like, I know what many of these do only because I know how it works on the inside. But just looking at this, I can't tell what any of these fucking things do. Like, really?
So please, name them something useful.
Anything useful.
All right.
Good God.
Number three, shitty interview questions.
Yeah!
Thank you.
You know who you are.
And when I first started interviewing, I gave shitty interview questions, right?
Are you really gonna have, like what value is it for me to stand in front of a whiteboard and like write out in a pen some algorithm that I could look up in two seconds in any book?
Right? Like, okay, it's fair game to have me generally describe A star, but to sit there and implement A star on the whiteboard with five high-status engineers all staring at me?
That's exactly like my programming environment at home.
I don't know about you guys. Like, fuck you!
I mean, let's take something trivial, super trivial.
Binary search, right?
Super trivial.
If you had me go up and implement a binary search on a whiteboard, there is at least 50% chance I'm going to have some off by one error, certainly.
And what is that really showing you?
Because this is probably how I would implement binary search in an actual game, right?
I would call binary search across whatever that structure is.
So what are you doing?
Like what is that actually telling you about the quality of that engineer that you're hiring?
Like, really?
Maybe a better thing to do if you want to check their coding ability is to give them a game design and say, make this game design.
And then go away while they sit there with their headphones on and Google in front of them so they can remember how some API works and like actually implement a thing in Visual Studio or whatever your, your poison of choice is.
That's maybe a better representation of how you write code.
All right, number four, and I can say this one because I work in academia.
Yeah, and I'm going to look at you on this one as well.
Schools that focus on high-level CS concepts rather than actual practical software engineering.
Right?
It's true.
Like, okay, great.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Fantastic.
You can do a whole proof on exactly why this algorithm is perfectly theta of n squared or whatever.
That's fantastic.
I will never ask you to do that in any job anywhere.
I ask you to understand the basic concepts of how that stuff works, but some of the really deep stuff, especially to the exclusion of actual software engineering techniques.
So one of the classes I teach is assembly language and optimization.
You're welcome.
And there's a question that I give them.
I actually got this on an interview once, and it's a really interesting question.
This is, I think, proves my point.
So bear with me here, because you're all about to get an interview question.
Ready?
You have this function.
This function, all it really does is it takes in three parameters, right?
Has some, takes in three parameters, an array, a size of the array, and a value that we're looking for, specifically a sum that we're looking for.
So it's gonna return true if any two values in that array summed together equal val to find.
It returns false in any other case.
That's it.
That's the question.
How do you write this function?
So there are many ways to write this particular function.
There's sort of the brute force way.
So we can do that one.
And that's n squared, sure, if we want to get into asymptotic complexity, which where we just churn through the whole thing over and over and over.
That's fun.
There's a sorting method.
We can sort the array.
And then we can basically take the.
The val define, subtract the value that we're looking for as we walk through the array and then do a binary search across that array.
So now we have, okay, I'm gonna call it 2 n log n.
You know, if we're going super froofy here, then it would actually be n log n because multiplicative constants and so on, right?
Okay, moving on. Hash map, that's another way of doing this, right?
It's basically the same thing, except it amortizes towards more constant time, but now you have n in memory, right?
Who gives a shit?
Because here's the reality.
I can take that input array and change the values, just some constants, the values that are in it, the range of the values that are in it.
I can change how big the array is and all sorts of different things.
By just changing a few of these constants, I can make any one of these three in a real computer greatly, vastly outperform any of the other three.
And that's the demo that I do to prove to them that like, okay, asymptotic complexity, you know, big O notation, that's a place to start.
But in real actual computing, It's completely different, right?
Because there's CPU cache and there's all this other stuff that comes into play.
There's, what about all the memory?
What about all the allocations that are gonna happen in the hash map, right?
Does the hash map have to regrow a bunch of times?
Do we have to rehash everything?
All sorts of things come into play.
So, OK, sure, write your proof that shows me the exact perfect asymptotic complexity of any of these methods, and I can show you a data set that will blow that completely out of the water.
Because that's the reality of how computing works.
OK.
Designers, and I love you designers, but designers who are unwilling to learn technical things.
That's number five.
We are in a technical industry, right?
I have had designers who are unwilling to learn how the AI works.
Really?
I've given it, I've around Maxis and I can say Maxis because all of the designers there were wonderful, so I can say only positive things.
But there were many designers and I would say, okay, here's how the AI works.
And I would draw like math on the board and I would watch like the eyes go more and more glassy as more like Greek letters started coming out.
And it's like, okay, let's distill this a little bit.
But to their credit, each and every one of them stepped back and said, OK, let's really understand this.
Let's explain.
Walk me through this step by step.
And I see a lot of designers, especially new designers, who come through and they're like, no, that's programming's problem.
Our job as programmers, as AI developers, is maybe not even to make the next cool thing.
My job, hopefully, is to enable designers to be creative.
But in order to give you those tools, you have to meet me halfway.
I can't just miracle this thing in front of you.
And I'm not saying that you have to learn all this stuff.
You don't have to understand any of this stuff.
Any designers in the room?
Are there any designers in the room?
Okay, like three, oh yeah, a handful.
Right, I love you guys, I really do.
And you don't have to understand anything that I said on the previous slide at all.
I don't care about that.
But I do expect you to understand the basic idea and be willing to learn very basic things.
And here they are.
If you're a level designer, especially basic vector math, basic vector math, not crazy, basic.
And for the love of God, probability theory.
If I will, I will just, and I'm gonna lose it if I see one more designer that doesn't understand the basics of probability theory, right?
And just basic probabilistic math and that sort of stuff.
Because that's the world that we live in.
Anyway, I don't know.
So that's me, thank you.
Okay, so to kind of end this, for my rant, maybe it's not so ranty, but I wanted to really think hard about moving the ball forward, about pushing game AI really to the next level.
And really, Ben already ranted about this two years ago, and he had some great things to say.
He said, what are you doing to save game AI?
Because no one is coming to save us.
That was, and then he further went on to say, a little bit more inspirationally, but we need to build it into something worthy of notice.
We need to get over our ideas of what is and is not possible.
We must do things that we do not know how to do.
We must create experiences that we thought were not creatable.
And we need to push the ball forward.
And I started thinking back to when good old behavior trees first came on the scene.
what happened back then?
And planning happened just around that same time.
And so, as another old man in the talk, I think I will regale the tale that what was happening at the time was games were starting to get more complicated, more NPCs, more, oh, I said NPCs, more characters.
And state machines weren't cutting it and independently people were trying to solve this problem.
It was sort of a crisis. And so behavior trees from Halo 2, planning from fear or GOAP.
So what this really comes down to is if you want to move the ball forward, it feels like there needs to be incentives. Right? Incentives to make new things happen.
So, I mean, we all know about deep learning.
What the heck is going on with deep learning, right?
It's in the news all the time.
We're hearing lots about it.
We keep wondering how it might affect all the parts of our industry.
But with deep learning, what's really happening is the incentives are right.
And it's not necessarily the game industry, but what deep learning is about is it's about predicting things.
It makes the cost of predicting things cheaper.
And so Harvard Business Review, in an article, thought that deep learning could actually deliver something like almost $6 trillion in annual revenue to businesses, which dwarfs the game industry.
And so in the article, it said, follow the money.
This is what's happening.
And so where in business is this happening?
Well, it's retail.
It's retail with serving ads and promotions to the right people.
It's in operations.
If you can predict better, you can reduce inventory costs, which can save a lot of money.
And manufacturing, if you can predict which machines are gonna go or fail, you can keep everything going.
Now, just very recently, AlphaStar was developed by DeepMind to play StarCraft II.
It was a deep neural network trained with supervised learning, reinforcement learning, and it did beat some top players, and it was an impressive feat.
A little less impressive when you find out what it took, right?
It had to train on half a million human games.
That's a lot.
That's a lot, a lot.
And the agents that they trained started playing against each other and experienced up to 200 years of real-time StarCraft play.
Which kind of makes us like, well, how do I ship a title with any of this if I have to collect all this training data and let the...
and then be done with the whole game before the bots can play each other too, right?
And is this really the biggest problem, trying to beat the top players, right?
And this wouldn't have made StarCraft 2 such a better game that it would have sold more.
What is DeepMind doing?
Right? Well, they don't care about games.
They like games, but they're using games as a platform to prove their tech.
So then they can apply it to the six trillion dollar industry, right, where there's a lot of money.
So thinking about incentives, well, how do we move the ball forward?
Right, well, we're gonna need to create some incentives.
It might be what we can do.
So Ben gave his rant two years ago, and his incentive sort of was, his incentive strategy was shame.
Right, shame, to shame the audience, which that might work, but it probably won't.
It'll make him feel bad for a little while.
Oh, okay, so what are some better incentives?
Right, so, well, just trying to make a groundbreaking game is an incentive, right?
We saw with Spider-Man earlier this morning, and we're gonna see tomorrow with the Division 2, right?
Groundbreaking games do push, do move the ball forward, and that is one way, and that is great.
How about AI Summit Talks?
Right? Maybe, maybe they spur some innovation.
We're gonna have an experimental game AI session tomorrow, which you should totally check out.
And hopefully that does help move the ball forward.
And we're doing what we can at the AI summit.
Maybe we should just get a billionaire to pay all of us.
That might.
Yeah. Yeah.
That might create some incentives.
So it's certainly on the table.
if we have any takers.
A game jam or a hackathon.
I haven't really heard too many game jam or hackathons completely centered on game AI.
So that might be some incentives or just maybe a well-designed contest.
So there have been some well-designed contests that have moved the ball forward.
This is Nathan Sturtevant.
He worked on the, or he created a grid-based path planning competition.
This is not a memorial picture.
He did it.
I was reviewing my slides and I felt slightly bad.
He was not born in 2012, and he did not pass away in 2014.
He is still alive.
He was able to get real maps from real games.
a bunch of StarCraft maps, Dragon Age Origins, because, well, he had worked on the game, and Warcraft III.
And he had those maps, and he could use those maps in that contest, some real world examples.
And because over those short few years, a lot of neat algorithms were tested and they could be compared against each other and we could really understand, you know, what's the deal, what should we pay attention to?
And it did spur things.
I worked on Jump Point Search Plus with Goal Bounding and I gave a talk about it here in 2015.
And that contest kind of helped me, you know, work on that problem and even be able to compare my solution with other people.
So that's something.
This is Ben Weber.
He is also currently alive.
So in 2009, he started the StarCraft AI competition, which was wonderful.
But recently, over the summer, he wrote an article called The End of AI Competitions.
And what his, he kind of cited some issues with what's going on is, there's a lot of games where you still have closed APIs, which make it very hard to program what you need to program if you wanna make competitive AI within a game that's a shipping game.
With deep learning and a lot of these new techniques that are kicking some ass, the compute is very expensive.
So Luke told me that, so Ben works at Zynga, and Luke told me that Ben uses way too much compute at Zynga.
I didn't say too much, I said a lot.
Oh, he uses a lot.
A lot of money goes.
But the problem is researchers can't do that, students can't do that, normal people can't do that.
They can't pay thousands of dollars a day or something to pay for compute or for a project.
And you need access to a lot of training data.
right, for these techniques.
So it seems to be this problem that is, and then DeepMind came along, and who's gonna compete with that?
Who's gonna compete with hundreds of the top AI researchers for deep learning in the world?
So here's what he said.
He said, in a way, my initial call for research on open AI problems failed.
It was an open problem, but I didn't fully encourage participants to be open in their approach to the problem.
So sometimes people don't share what they did accomplish, or even if they do share it, it's very hard to use.
Have you heard of Kaggle?
I've got to pronounce that right.
It's not Kegel, it's Kegel.
So this is a, well it's a website and a group where there's hundreds of competitions with real world open data sets to solve data science challenges and they give big money, like $50,000 to the winner.
And what happens is they get corporations to come up with a problem, give away their, open up their data sets and then see if people can apply machine learning to it and come up with something that can help them make their business better.
And Google has purchased Kaggle, so as they do, also own, I believe, DeepMind.
But Kaggle has shown the power of certain machine learning techniques.
And it's only by having these kind of contests out in the open that you really see and can test some of these things.
So competitions do seem like there's some kind of incentive there that's interesting.
So it would be interesting to think more about competitions for game AI.
But what are some good incentives?
You know what?
I think.
People already love to make new things.
We all end this because we love making new things.
Sometimes maybe the right incentive is just knowing what to make, right?
Lots of us just don't maybe have the right ideas.
So maybe the first step in moving the ball forward is making a list.
Make a list of really great challenges, right?
We need to start with a list.
Challenges, aspirations.
Goals, right?
And as, just to kind of recap what Ben said, you know, build game AI into something where they've noticed.
Get over our ideas of what is not possible.
Do things that we do not know how to do.
Create experiences that we thought were not creatable.
So right, we don't want to maximize winning, right?
So the whole StarCraft competition is sort of, Sort of flawed.
We're a little interested in maximizing performance.
A little optimization there.
Definitely speed of development.
We want to do more with fewer people, right?
So we can make more interesting games.
We want to basically maximize entertainment, which is a very hard fitness function, right?
That's very hard to measure.
That is... we're in trouble.
Is what we're... we're in trouble.
No, we need to max, but if you think about it as maximizing wow moments, right?
That would be something.
So what are these things? I tried to list them out and I was a little disappointed in myself.
But we'll see what I have.
I want to author behavior quicker than I can do with behavior trees, right?
Behavior trees, as Ben said in the previous— can't be the end of the line, right?
This is not it. It wasn't invented 14 years ago and that's it.
Although in a way, play devil's advocate, behavior trees are a programming language.
And we use programming languages that are old, like C++.
There's reasons, right?
They're solid, they're dependable, there's certain reasons.
But we do wanna author behavior also that's more nuanced than I can do with behavior trees.
And I heard the word nuance from one of the speakers.
So there's something there too.
But, and be able to just script wow moments faster and easier because sometimes that is, the way to do it is hand authored.
And create innovative tools to create interactive dialogue or just all tools, so another shout out to tools.
So I really think that all those kind of land in the realm of improved tools and languages, right?
So if you could create incentives around that, if you could create contests or even just list out the challenges, I think there's something there.
Here's some more.
So use game AI as an innovative gameplay mechanic.
You don't see too many games that do that.
There's a couple, like Damian Isla's Third Eye Crime.
But to be able to see more like that would move the ball forward.
Better ways to converse with the NPC.
It seems troubling that we can't really get farther on that.
Better ways for the NPCs to express themselves.
And heck, NPCs that grow as a person over time, why not?
But we need kind of more loftier goals, right?
You have to kind of make them a little out of reach or else you don't, you're not reaching.
And so those kind of go around improving AI and game design, right?
This means.
like AI programmers need to talk to game designers more, like a lot more.
I was just at our function party last night and talking to an AI designer and I found out that they in Seattle have a local meetup.
And our AI programmers used to have a local meetup in Seattle and we didn't know about each other.
Which is very weird. So now we got to get, we should try to get the designers with the programmers and just start talking.
So I think my call to action is that we need to define the challenges, right?
That's the first step.
That's the first step to moving the ball forward.
We need, let's inspire each other to create those wow experiences.
Because, and then, and then the end of this is simply, well, this is not the end.
We've got to keep the conversation going.
But this is the end.
This is the end of the first day of the AI Summit.
So, with that, I wanna thank you, and tomorrow is a big day.
We have a lot of great sessions.
So let's give a round of applause to all of our speakers.
