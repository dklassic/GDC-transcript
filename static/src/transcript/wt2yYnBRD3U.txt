All right.
I was told everyone should turn off their cell phones if they want.
It's always funny when those go off during a talk.
OK, this is sand rendering in Journey.
Here are some images of Journey.
And to give a little context for those of you who haven't played the game, it's a multiplayer PlayStation Network game.
And one of the things you're trying to do with the game is recreate the feeling you get when you're out in nature.
hiking, and you encounter someone else on a trail after not having seen anyone for a while.
There's this desire to connect with them in some way, to say hello, maybe even to journey with them for a while. You want to acknowledge them on a human level, which is something that is strangely uncommon in a lot of online video games.
we thought the best environment for this would be a vast and barren desert and so we spent a long time on the technology to make the players feel like they were really in that environment to trigger that desire to actually make a human connection with the other players So the structure of this talk here is, this is an image of the shipping game.
And first thing I'm gonna do is I'm gonna sort of peel away the various hacks we use to do the sand rendering one by one so you can just see them quickly.
And then I'll spend the majority of the talk going over the hows and whys of each of the various hacks.
So let's get started with that.
First one we have here is we have a mipmap sharpening effect.
You can maybe see that it's a little bit smoother in the distance.
This is the original image again.
It's grainy, and then it gets smoother in the distance.
Next, we have an anisotropic failure masking hack here.
It's that kind of radioactive oatmeal on the silhouettes of the dunes.
Next is our glitter specular hack.
Sand has gotten less shiny.
Another ocean specular hack that beam of light by the players going away.
Then switching to a Lambert shader for diffuse, we have a custom diffuse shader here and this is just a vanilla Lambert.
And then finally our detail height maps. This is sort of a displacement map we put on the sand.
Notice it gets very smooth and with all the effects removed it's just kind of maybe a big bowl of pudding here.
I'm going to go through that again quicker.
This is a different environment.
Journey is full of many scenic environments, and this one is a bit sparklier and spookier.
So, ship and game are mip maps, the anisotropic mask, specular number one, specular number two, switching back to Lambert, and then removing the height maps, and this is, you can't even see the terrain anymore, Journey in the Void.
One thing I should say, I was calling a lot of these hacks, and I'd sort of like to address that before moving on with the family vacation photo portion of the GDC talk.
There's a good reason for this.
Bear with me.
Early on in development and journey, the whole team took a trip to the Pismo Dunes, which are just south of here in California.
And we spent a few days just sort of like running and jumping and diving through the sand to get a feel for it.
And that actually served as the primary reference for all the technology development of the visuals of the sand.
uh... we didn't use photo references until very very late in the project because we're never going for a a photo real look we're going for a sort of a a feel real look we wanted to generate an authentic real feeling in the player so they would behave like real people when they encountered other players in the game and they they'd want to sort of make a real human connection with them Okay, so with that said, on to the first hack here.
This is sharp mipmaps again.
You can notice that with them turned off, the sand in the distance is much smoother.
And actually, this is probably more photorealistic.
If you take a look at pictures of the sand, this is a photograph of real sand dunes.
or really more like a bland dune if you look at it. You can't really see much detail at all here. It has that pudding-y consistency.
And we can actually do some math to kind of see why this would be.
If you look at this screenshot here, the character is a hundred pixels on screen. And if you imagine the character is about a meter tall, because the journeyers are short and like round numbers, then each pixel by his feet is one square centimeter.
uh... and then this is actually a assumed in view of real on pismo beach sand where the team went uh... for that the reference and you can see that maybe on average each grain of sand about a half a millimeter wide which should mean that uh... there should be four hundred grains of sand uh... in each pixel by the characters feet and at least for the diffuse shading if you imagine four hundred uh...
just different grains of sand facing different directions that should all even out to create that nice smooth uh... look you're seeing on the photographs But the first thing you notice when you actually go out into the dunes, the first thing you feel is just how grainy sand is.
And I think part of that is the fact that eyes are still higher resolution than TVs.
There are a few years left of that.
But mainly I think it's that you're literally feeling the sand on your body, you know, in your hair, in your clothes, in the places where sand was never meant to go.
And so we pushed that graininess out as far as we could, which ended up meaning a different sand grain per pixel.
The way we did that, by the way, is we used this sort of detail normal map here.
It's just basically noise.
There's a histogram of the normal map on top, and you can see that most of the normals are pointing straight up, and then there are fewer and fewer pointing off in either direction in sort of a bell-shaped fashion.
And so normally, if you generate a mipmap using a very simple box filter, you'll get something that looks like this.
And you can see that the histogram here is much tighter, which means that the normals are more pointing straight up, and you're going to get a less grainy looking texture.
But if you look between these two things, it appears that the second one's about half the size.
And so we multiplied the normals by two, and we got something that looked the same.
And I'm not a mathematician.
If there are any mathematicians who want to explain how come this is true to me, my email is john at that game company dot com.
For anyone else, you can just, if you want grainy normal maps, you multiply by two.
The next thing you notice when you go to the dunes is just how sparkly it is.
And pictures do not do this justice.
You can see a few sparkles we managed to capture on camera.
But when you're actually there, it's just sparkles leaping to your eyes.
And so here's another image of the game, the sparkles are turned on.
They're turned off here, and it's probably hard to see, so I'm gonna zoom in.
This is sparkle turned on, and here's sparkle turned off.
And it's maybe subtle, but when you're actually playing the game, it's very, very important for capturing that feeling.
And when we were initially trying to implement this effect, we sort of thought it through logically for some reason, but we thought okay What's going on? What's making those sparkles?
It's probably the sun is shining down and there are certain grains of sand that are oriented just the right way So they'll reflect the sun directly into your eyes, and then you'll see that brilliant glint And you know, the graphics program was like, oh, well, we know what that is.
That's just, that's specular reflection.
We know how to write specular reflection shaders.
And that was the actual initial attempt.
It was just a straight specular shader on a very sort of noisy normal map.
And it looked like this, which is pretty good.
I mean, that looks like glitter.
And so it worked fine for still shots, but the problem was in motion.
Hello.
Join GDC.
So you see it in motion here, and it's just got a very noisy look to it.
It's like you were clubbed over the head about to get a migraine kind of look.
So...
And I think the problem is that the just fidelity like the maybe the bit depth of our normal maps and the number of pixels we have on screen and just not enough to use the realistic equation.
So it would just alias too much.
So we thought about the feeling of this effect and really the important part was that when you moved your head.
the sparkles, the glitter, would move around.
Like at its base, it's just this glitter is a view-dependent thing.
And so we just swapped it.
On the left we have the standard, sort of more physically based specular equation, n dot h.
And then we just switched to basically the most view-dependent you know, basic view-dependent thing we could think of is normal dotted with the view.
And that ended up looking like this.
Which...
may actually still look very alias to you.
If you're actually playing Journey on a real TV, you can see that it's a bit smoother and it's much easier to control.
Here are some equations which may or may not explain why this is the case. Again, mathematicians, it's john at thatgamecompany.com.
There was a big problem with that last glitter effect.
And you can see it here.
It's that radioactive oatmeal kind of look.
And I mean, this was actually such a huge problem it gave us a lot of headaches.
We nearly canned the whole effect.
took us a while to even figure out what it was.
But sort of to lead you guys through that thought process, Journey has 16 tap anisotropic filtering on all the sand textures, which 16 taps is the maximum that the PlayStation 3 allows.
And just to get a sense of why, I'm gonna show you the same scene with no anisotropic filtering.
And it's actually a little bit easier to see in this spooky scene here.
So here's kind of how we shipped, and then here's with anisotropic filter turned off.
Kind of has looked like maybe a giant ate the oatmeal and forgot to use a handkerchief when he sneezed so anyway I think this might illustrate an interesting visual phenomenon though and that's if you have detail that is pixel sized or probably just uniformly sized the player will interpret that as graininess so if you have uniformly sized detail the pixels by the characters feet don't look like four hundred times too big sand boulders they just look like nice grainy sand But as soon as the detail becomes non-uniform, people start to take it literally.
And so, as soon as your sand is one pixel too big, it stops being a nice rolling dune and becomes, you know, a giant pile of radioactive boogers.
That, then, is explaining what's going on here in the circle section.
Even the 16-tap anisotropic filter was not enough to...
properly get per pixel detail on these edges.
And we spent a long time trying to improve the anisotropic filter, which proved to be a task we lacked the cognitive capacity for.
So instead, we swept it under the rug.
We just detected where this was failing and stopped drawing the pixels there.
The way we did that was using this kind of texture here.
This texture, this is the texture in its MIP chain.
It has a specific property where it will have very predictable values of color based on distance from the camera, assuming perfect anisotropic filtering.
And you can see the terrain here with the texture applied to it.
We added some dithering, or some noise to the texture for dithering.
But anyway, you can see that it's very dark close to the camera and gets lighter and lighter farther away, except in certain spots where the anisotropic filter is failing.
And so we use this to generate a mask.
And the white areas now are where we know that it's safe to render things that need full anisotropic filtering, and the black areas are where the anisotropic filter can't quite keep up.
uh... any graphics programmers in the audience at this point uh...
maybe asking the question well why'd you go to the trouble generating this texture we could have just use the derivative functions in cg there's a a good answer for that that we didn't know about the derivative functions which uh... i think this whole episode is kind of a a heartening lesson in the fact that to be a graphics programmer you need neither intelligence nor competence which is a line for all the artists in the audience to take back to their studios.
So all right, we'd fixed the anisotropic filter problem, but if you look at this image, a lot of the screen is actually blacked out, and that meant that we still weren't getting the glitteriness we needed.
So we added more glitter.
This is this beam of light here.
I've never actually seen it on sand in pictures or in dreams.
It's completely unrealistic.
What it is, though, is it's basically the same shader you would use to reflect the sun or the moon off of water.
It's kind of like an ocean specular.
And we just sort of tried this out one day in our deep despair.
And we noticed that it felt correct.
And so I think maybe one of the reasons that is, is because when you're actually out in the dunes.
it has this very fluid kind of feeling.
This is a video from our Pismo trip, and you can just kind of see the sand is rolling down the hill, or it's flowing down the hill.
You sink into it, it feels like a fluid.
And when you're standing on top of the dunes, you really get this feeling like you're actually in an ocean of sand, which is not a unique idea.
There are quite a few hits for that when you search it on Google.
Nearly as many as Ocean of Lard.
uh... by the way we also ended up throwing on a uh...
well a fluid simulation it would simulate neither ocean nor any known fluid but uh...
it still had a good feel just adding that additional amount of fluidity made it actually feel more authentic even though it's totally uh... away from reality okay and so that's done sparkle is done we finally solved that problem so now on to the diffuse shader here's what we used in journey here's uh... Lambert notice the journey shaders uh... quite a bit higher contrast And one of the things that we realized sort of over the development of Journey, and I'm surprised it took as long as it did, but basically Lambert is a terrible shader for almost any situation.
Like, any, literally any change you make to it is going to be an improvement.
And so once we realized that, we started looking into alternatives.
And one of the obvious ones is possibly using Orinnaire, which I think has gotten pretty well known now.
But it's a physically-based shader for diffuse lighting.
And we did end up using it on the cloth, actually.
but the problem with Orinnaire is that it's actually pretty expensive and the thought of this being over half of our screen made our RSXs shrivel, so instead we took some some inspiration from my favorite way to reverse a string which is the random shuffle verify method which basically means you just try out random stuff until it works and so here's kind of a time-lapse view of the diffuse development on Journey. We started off with the ugly Lambert uh... I added a 4 here and multiplied that by 0.3 and that was the shader And I'm not sure if there's a lesson in this.
Uh...
If there's anything, I think it's that especially, you know, as programmers and graphics programmers, we like a certain amount of rigor, and that's good. That's admirable.
But, um, sometimes you just need to random shuffle verify, and that's good enough, and we should admit it.
Okay.
Now the final effect, and I'm not going to call this one a hack because this one we actually only added after looking at photo references.
And so I guess, you know, photo references are good too.
But late in the project we decided the sand needed something else and we started looking at pictures and we realized it was that little sort of fine-grained geometric detail that you can see.
And the way we did this is, well, so the dunes in Journey are represented by a height map.
And actually, each level has a very low resolution 256x512 height map, which when we are sort of streaming into the vertex buffer, we are using a B-spline filter on, which makes it incredibly smooth.
It's actually a second derivative continuous, which allowed us to use second derivatives for ambient occlusion.
But anyway, on top of that very smooth height map, we added these high-resolution tiling height maps.
These are the ones we used in Journey.
There are four of them.
And this is just sort of, by looking at the photo references, we saw that on shallow, sort of like not steep areas of sand there were these very tight little ripples that were kind of going against the grain.
And so we used the top textures for shallow sand.
On steep sand, there were very low frequency waves going sort of with the slope of the sand.
And just, you know, we detected sort of the slope and the X or Y orientation of the derivative and applied one of these textures.
And that's actually it for the sand effects.
And I don't think...
Well, I don't expect that everyone here is going to run back to their studio to implement more sand games.
They're cool. There were a lot of them actually in 2012.
So I think if there's anything to be taken from this talk, it's that that game company process for visual development and it's sort of approaching it not from the physical or photographic but from the actual human experience going inside the player, approaching it from the feel and letting that be the guide for all of your graphics development.
Okay, that's it.
I'd like to thank Martin Middleton, who did a lot of the terrain work on Journey, and art director Matt Nava, who's here as well.
There are actually a couple more Journey talks happening.
Design of Journey is happening later today.
Creative director Genova Chen, and Matt Nava giving a talk tomorrow.
Oh yeah, and we're hiring, by the way.
graphics engineers can apply to we got a lot of engineering positions.
So check that out all right guys that is that is all.
Oh yeah, I was supposed to say if you are going to ask a question please go to the Mike's.
Hi there. So I actually did try to implement this system based on a blog post that I think maybe you wrote, or someone from the team wrote.
And the sort of important thing I guess that I got from the blog post was these multi-layered, multi-leveled height maps where you had a large height map for the dunes and then the smaller high resolution height map for the sand waves.
And I found that basically in order to actually represent the high resolution waves, you had to well, I just needed a crap ton of vertices.
You should get some SPUs.
So yeah, this was on the PC and I was using a tessellation shader that kind of fell off over levels of detail, but still it just didn't quite do it.
Was there any sort of magic that you guys worked to get the mesh resolution sort of in a manageable way, or is it just the PS3 being awesome and being able to do that?
Pretty much everything we did was probably in some way in error. We just had a fair number of verts. It wasn't a crazy number. You just need enough tessellation to stop looking ugly. I'm sorry. Yeah, it was all in vertex. The only normal map was the actual grain texture. Everything else was geometry.
Dude, can you briefly elaborate on how the hell you made the sand roll down the slopes when you walked in it?
I'm not talking about the polygonal thing.
Yeah, well, yeah, I didn't cover that here, but...
for the actual sand grain normal map.
That was generated by a 2D particle system that we rendered on the SPUs.
So it was, I think, around 10,000 particles.
They were like 32 by 32 little particles with a sand texture on them.
And we just, we had a little physics simulation and a renderer for generating that texture.
And so when your guy walked over it, he would exert forces on the particles and...
It was toroidal, so it could tile.
OK.
But that's how we did it, yeah.
Cool.
Thanks.
All right, I think, wait.
Yeah, I think that's it.
Thank you.
