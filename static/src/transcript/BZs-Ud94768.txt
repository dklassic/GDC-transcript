Okay, my name is Becca Saltzman, and I'm the CEO and co-founder of Finji with Adam Saltzman, who is also my husband, so no, we're not brother and sister, thank you.
People who think we look alike, I appreciate that.
I'm going to talk today about how we maintain good conflict and avoid toxicity in everyday decision making at Finji, with both of our internal development projects and our partner publishing projects.
So give me a second, let me actually start my timer, because I forgot to.
Okay. So who am I? I'm going to go through some stuff that we've done, stuff that we're working on so you have a little bit of context. Because sometimes, especially me, I'm completely invisible generally with Finji. So we've worked on a lot of projects over the years. Some of our previous titles at Finji and our previous iPhone company.
include cannibals, which is sort of like the first endless runner, gravity hook, hundreds and capsule, which is like seriously niche horror. We've also done a lot of weird turn key work in advertising and the education and research space. So with old spice, hunger games, stuff like that. We're currently building overland with a small distributed team all over the United States. And after three years of development, we published night in the woods last week. So I Sorry if you didn't play it. Apologies. Adam hasn't played it either. Long story with that.
I have played it though ten times. Or more. Okay. The problem. Okay. Adam and I get asked regularly how we can possibly stand to work together day in and day out since we're married and we run an indie development studio which we've been doing for like a decade because we're straight up old.
Way older than most people think I am.
And this talk is not going to cover ways to be a nice person or words to use to not be a jerk.
I'm straight up going to assume that you've been to preschool.
But I am going to tell you about a problem.
We've noticed with our development teams over the years and our friends' development teams.
We've seen the wrong kinds of tension and conflict produce catastrophic outcomes.
We've seen canceled games, wrecked friendships, sleepless nights, wasted life savings, and Adam and I have actually experienced all of these things over the last decade.
And we've, over the last couple of years, have found ways to collaborate, but lower the risk of disastrous results.
So based on our experiences of the last two or three years, especially, there are some solutions that we propose that can help avoid some of the most toxic team conflicts that we've encountered.
So one, use a planning and design process that emphasizes problems and solutions and downplays ego.
Two, maintain flat and concrete discussions of plans, I'm sorry, maintain flat and concrete discussions of plans and design merits.
Three, learn how to postpone contentious decisions as long as they're not bottlenecks to current development.
Four, trust but verify your experts within each discipline.
And five, always engage external mentors, especially for long-term planning.
you're thinking, whoa, that sounds awesome, but how in the hell do you do that? It's all great. That's cool. So first we're going to start with like the very, very, very first one which is keeping ego out of your pitches when you talk to your team on how to solve problems. And this is our methodology that we use. Oops, I'm sorry. So, so, so, so, so, so, so, so, so, so, So there are three things that we do.
One, we identify the problem.
Two, we develop a solution.
And three, we present it to the team, which seems really simple.
However, identifying the problem.
For example, a problem that you may come across.
This thing we've already built totally sucks, happens a lot.
This part of the game is missing something, also happens a lot.
We have these things to do but no time to do it, pretty much our life.
Our players don't get it, yes.
It isn't fun when we get to this part of the game, obviously.
Basically, which problems or issues are you even trying to get rid of?
You have to identify that first and you have to be specific.
Second, you need to develop your theory on how to fix it.
This isn't necessarily the team's theory, this is your theory.
You identify the problem, you develop a theory on how to fix it.
You have to put in the work.
This isn't like, hey dudes, this shit's broken, you fix it.
You identified it, you must have an idea of how to fix it.
So some things that we do internally, we make thumbnails, we draw comics, we hack together test levels, we build tiny prototypes to test mechanics.
It's a requirement for our teams that if you believe in your idea, you must also do the initial legwork so the team understands where you're coming from.
Sometimes this is just like a really carefully phrased suggestion, but often it's much, much, much more in depth.
And finally, you need to present your idea, which is actually one of the scariest ones because we all have some form of social anxiety and not like, ha ha, we're video game developers, but like we're straight up humans, guys.
Like we're putting ourselves and our ideas on the line and that's scary.
So yeah, you are required on our teams to present your ideas.
It's awesome, you've identified the problems and figured out a great way to solve them, but now we really need to hear them.
Now, I need to clarify here that these aren't formal things that we go through.
This isn't like a process or a checklist like you need to identify.
And that's not how we work.
We're like human beings and we're friends.
And this is a collaborative process.
So these are guidelines that inform the way that we work together.
So one, when you're at the present part of this, we explain up.
This means that you're explaining the pros of the solution to the problem that you've identified. Basically you've fixed the existing problem or you've introduced something that's new and interesting.
Two, you explain down.
This means that you are identifying as many downsides as possible to the theory that you have already worked through.
This might include development time, it's gonna take too long, infrastructure changes, which is pretty scary, affected functionality of the other systems in the game, which for something like Overland is like legit terrifying because it's like a balanced strategy game, changes to the asset pipeline, which...
I'm not even going to get into that, with some of the games that we've worked on.
It could take a week to fix that sort of stuff.
But these are the downsides of making any sort of change in your development process or the design of your game.
Three, you need to engage the team in the discussion with an open mind and mutual respect.
And this is going a little bit back to preschool, but this is also being a grown up.
People have ideas, and you may not like those ideas, but you really do need to hear them out.
And that goes both ways.
Should we do the idea that you proposed?
Are there downsides that you haven't considered because the people you work with are smart, brilliant game designers, and they are gonna come up with things and poke holes in things that you think are ironclad.
Can we tweak it to have more pros and less cons?
And is your idea a good fit and why?
Now, why does this method of communication work for our Fingy development teams?
Now this only works because from the very foundation of our development team, we have a shared goal.
And the goal is that the game matters more than our egos.
And basically, everything else that we bring from the external in, the game matters.
And we need to be true to what the game wants to be.
So.
We have a shared goal on what the tone of the game should be, what the audience is going to be, and what the actual goal from the very beginning is going to be.
If the team isn't on the same page when it comes to tone, then you're not building the same game.
You're building a different game.
If you're not on the same page when it comes to audience, then you're all building a different game.
And if you're not on the same page when it comes to your development goals, you're also building a different game.
Engage also only works when suggestions and counterarguments are concrete.
We talk about a lot of things that, or we talk about things that are answerable in our discussions, our development discussions, and can be backed up by side-by-side comparisons, paper prototypes, very strong logical arguments or observations.
We treat design discussions like science.
We make falsifiable claims, and this means that you're making claims that can be proven or disproven.
And finally, this only works the way that we talk to each other is if you are able to demonstrate in clear terms for the specific game being built why things are contradictory or complementary. Talking about things that are good for game design in an abstract is super cool and you can do that over beer like later on at the bar. But that is frequently extremely counterproductive when you're trying to solve a single problem that's been identified. Now why?
Why do we run our development team in this way?
This produces features that can include support from the whole team, and everybody understands what the new features are.
We also get buy-in and understanding.
Basically, online and the new features are important.
Team members have a chance to contribute to the design of the game.
And this one's really important for us.
We've actually been asked over the years, isn't it awesome that Adam totally hired all these inexperienced people to work on the game so we can tell them what to do?
And my brain is exploding because I'm like, are you kidding?
We hired these people because they're brilliant and we need them to contribute to the design of the game because it's better and more amazing because they're working with us.
And equally important, we can make changes and provide feedback before implementation when it is very, very cheap to do so.
So I'm going to go through some examples real quick.
Well, not real quick.
It's part of the talk.
Of some of the ways that we've used this, specifically in the development of Overland.
And I'm going to show you some really ugly stuff, and I'm sorry.
It gets uglier, I promise.
So Overland has a roster.
So this is like a real-time strategy game that we've been building for.
like half my life it feels like at this point.
three years. And it's getting there. It's getting so pretty and so wonderful. This is our old roster. I'm going to show you the old roster which is what you're looking at and then I'm going to show you the new roster. So we had these little icons that totally weren't selling it.
They had annoying screen size problems. They were super repetitive. It cluttered up the screen. There was just like junk everywhere. And it didn't solve the problem where we needed our players to grow attached to their crew. We needed them to have empathy for their little dudes on the screen.
or dudettes or doggies. We totally have doggies. Obviously.
And yeah, totally wasn't selling it. So, uh, so, so, so, so, so, This is our new overland roster. We proposed a group photo with the current player highlighted. It's turn based game so Cletus is our highlighted player. And we talked to the pros basically showing group togetherness and groupness a lot better. This is down in the corner of the screen. And the cons which was seriously a lot of extra work. We didn't have any ‑‑ I mean we had some like ‑‑ code that we could kind of reuse for this, but we straight up had to build this from scratch and it took a while.
But this combined ideas from Adam and Heather Penn, who's like a magical, our art director, to produce something better than we could do individually with really in the long run not too much investment or work.
So that's like one of my first examples.
The next one.
So in Overland, as you're playing, you go on your little 9 by 9 grids.
And then the higher level strategy board is, or strategy level screen, is our map screen.
So I'm not going to actually talk about the map screen.
I'm going to talk about that fire right there.
And you're thinking, yeah, OK, whatever.
So we got all these really, really cool animations because for the longest time, like our dudes just like slid around the screen and Yurka, our animator in LA, sent us all these animations and we built up the map screens to show the car would drive in, it would pause, it would park, the passengers, all of them, would get out, walk over to the campfire, which is like totally thematically appropriate, sit down, and we just kept going.
It looked awesome.
It looked super cool and it was totally keeping with the thematic, with the theme of Overland, which is like you're survivors on a road trip across, you know, post-apocalyptic America.
Except, thank you Heather, as she pointed out, it created legit horrible pacing.
You had to sit there forever and it was boring.
It looked awesome, but it was so boring and it took forever.
You were already done strategizing and people were still moving.
So she suggested that we should basically just jump cut it.
We absolutely could not agree on this because it's really hard to cut your babies that you think are really cool.
So we're like, whatever, we're gonna program this up.
It took five seconds and she was absolutely 100% right, which is a theme with Overland.
Heather's always right.
She really is an incredible game designer and no, you can't have her, not yet.
Nope, she's ours.
She's ours for a little bit longer.
All right, here's another Overland example.
We had an entire cast of Overland characters, which looked like this, who are like super cool, super iconic, and they were in the game for quite a long time.
We spent a lot of time designing them in the first place.
It was super easy to produce, and most importantly in any game development, it was done.
We were done with game characters.
And in our, the way we work, if it ain't fixed, don't touch it.
Like it's not broken, it's fine.
And this was 100% Adam's stance, and mine to be perfectly honest.
But.
These are the new overlaying character models.
Heather, who's always right, proposed a new direction for the models.
It took a lot of time to put the new idea in, but once they were in the game, it was immediately obvious that this was a much stronger pitch.
It solved a ton of design problems that we had, and even with Adam's adamant anti-stance on this change, he had to admit vast improvement.
Also a theme.
It's like, let's prove Adam wrong.
But yeah, these took forever to redo.
I mean, we had to put new clothing and eyeballs and different colors, different outfits, and you couldn't tell immediately, like, hey, that dude's a mechanic.
He's got the thing on his head.
So it changed a lot of the rules and design discussions that we had on the iconography on the UI, which we've been designing for years.
So these were super, super important.
And it's, just Heather, it's like, we're gonna fix something that's not broken.
Okay. So those are some of the ways that we've used this to fix things in overland. Okay. So I'm going to tell you a little bit about what happens when we just can't agree. Which happens, I mean, all the time. Sometimes all the time. We're pretty flexible, so, I don't know, only a hundred times a week instead of 200.
This is when we're backed up into something that is definitely turning into a contentious decision. Our feelings are getting super hot. People are digging in because they think their idea is best and the only way forward. And that's a really awful place to be.
So this is when we decide to circle back. And there are two ways that we do this. And these are really, really important. And I'll get to the end less than a second. One, we postpone.
This means that we postpone the decision until we have more information to circle back.
This means that it's not necessary to have this feature in this design discussion right now because we can continue development without it.
We don't have enough information that we can come to a consensus.
So we can just postpone it and circle back.
Just make a little note.
We'll revisit this in like, I don't know, two months when we have to again.
The other one is intermediate impossibles.
We use something called intermediate and possibles when it is necessary to move on through a development bottleneck.
And I'm going to go a little bit more into that because it seems like kind of a crazy term.
So postpone.
I'm going to talk a little bit more about postpone.
Probably going to go over just what I just blurted out at you because I went a little bit too fast.
This is only possible when the design decision is not bottlenecking development.
And most importantly, it's only possible if you have room and flexibility in your budget to postpone this.
which is usually possible if it's not huge.
But what happens when you actually postpone the decision?
You learn.
Your brain is always redesigning this game as you're making it.
Because we're indies, we do iterative design, nobody starts out with a design document, like this is what I make, and three years later that's what happens.
Like that just doesn't happen.
So your brain's always learning more about what you're actually creating as you go.
So each passing day you're getting more and more and more context on how you could possibly solve that problem without the contention.
So the other one is intermediate impossibles.
So this is what if you can't postpone the decision.
What if that problem is blocking development and you can't come to a consensus?
And this is when you use an intermediate impossible.
This is when you seriously, you hack together whatever garbage solution is easiest to do to make sure that you can go from point A to point B. And who cares what that middle part looks like?
because you don't have enough information to fix it properly. But you must continue development. Time is money. If you're arguing over some stupid bridge that you have to get across, just build the damn bridge. In any way, because you can always rebuild it when you know what you're building. Because you can ‑‑ get it? Are we there? Okay. And we do this all the time. I'm going to show you some intermediate impossibles and how awful two years of staring at them can possibly be.
Okay. So this is overland, basically one of the earliest digital versions of overland. Make special note of those pink monsters. So this is, I don't know, 2014ish maybe. Now, we needed monsters, so we just hacked those suckers together in like, I don't know, five seconds.
We eventually got this thing on to a 3D board and we still didn't know what kind of monsters we were going to have.
They didn't have really mechanics, we just knew they appeared from the outside.
So we just brought those ugly things over.
This method obviously is going to require a lot of circling back.
Eventually these things are going to have to get out of this game.
So this is our first 3D space.
Here's our next 3D space and we're seriously now 18 months into development.
And this is before GDC of 2005.
15? We put these monsters in a hot minute before we actually put it in the Mild Rumpus.
And this design was in form for an entire year of development.
But these were super weird placeholders as well.
This was our second intermediate impossible for our monster designs in Overland.
But they did get much closer to the final monster design once we knew more about what the game was actually going to look and feel like.
So this is what our monsters look like today.
Well, some of them, there's a couple on the field.
These have hopefully final models, animations, and colors, but it's entirely possible that in like three months, Heather may come back and be like, we might need to fix this.
So these might actually be intermediate and possible.
I don't think so, but we always leave that open that something small may change as we learn more about Overland as we design it.
So within our development on Overland, we still have postponed elements that aren't bottlenecks, yet, we have a lot of things that we've just straight up postponed until we know more about the project.
But when they are bottlenecks, we will hack together some sort of solution until we can fully flesh out the context of the right solution.
For example, we all have different ideas about Overland's ending and zero consensus on it.
There's no obvious right answer right now, given what we know about the game.
But yeah, even at this point in development, which we've, I mean, we're like three years into Overland, the ending for the game is not fully fleshed out at all.
So yeah, it'll be a surprise to you too.
Now, but Becca, what if nothing worked?
What if we tried to identify the problem, we tried to develop a solution, and we presented the solution to the team, but we can't decide what to do, what do you do?
You need to, sorry, oops.
You need to lean on your leads.
This means that you need to learn how to trust your leads to make calls so long as you are within budget.
You have an art director for a reason.
You have a producer and biz dev member for a reason.
These are your experts.
Lean on them, learn to trust their judgment.
You also need to trust your team and not the hierarchy.
I don't really care how many games you've shipped.
When we're developing and designing something, like that doesn't matter.
I don't care about your ego.
I don't care how long you've been in the industry.
What I care about is that you have the same shared goal and are you moving to the same place.
Now, Finji does this all the time.
Some of her most recent examples, Jocelyn, our audio director, wants a more rhythmic soundscape.
And this is 100% her call to make.
Heather, our art director, wanted to redo all the color palettes.
Totally her call to make.
We had a lot of disagreement about whether or not Overland should allow diagonal movements on the board.
Heather suggested it and Adam trusted her design judgment.
Again, because Heather's always right.
And it was easy to test and she was right.
And that's trusting the team and not who's the lead designer.
If somebody has a good idea, it doesn't matter where that idea comes from.
Okay.
Now...
It's important though, like trust but verify.
That your leads are actually right.
This means that once your lead implements their solution, discuss the strengths and the weaknesses as a group in the same way, the same mutual respect way that you've developed your team in the first place.
For example, we implemented Heather survivors even though they seemed way too cute for Overland when we were initially discussing them.
And we removed the campfire animation because it just didn't work.
And we spent a lot of time making it and then threw it away.
Okay, so finally, indies often work in a vacuum, obviously.
We forgot to or feel like we shouldn't seek outside's perspective, and this can lead to poorly constructed ideas on what the industry actually looks like.
This can also lead to poorly constructed ideas on the financial viability of our projects.
Also, it can lead to toxic partnerships with creative collaborators.
This can also lead to quick burnout with project abandonment.
So, why do you need mentors?
You need them to play your prototypes.
You need them to look over your business plans and you need them to provide feedback on your studio practices.
So prototype viability, we worked on a game called Portico, which we did a failure workshop on a couple years ago, for over nine months, and it was fundamentally broken.
We misread the industry, we wasted a bunch of money, and if we had taken this to our mentors earlier, we could have probably saved ourselves months of development.
For Portico specifically, we had no strong reactions to the gameplay, like when we did take it to our mentors, there's a general sense of like, ehh.
This isn't that fun.
And to be perfectly honest, we didn't listen right away.
We just kept going on it.
So ask yourself these questions.
How long have you spent on a game that others told you just wasn't working?
How long did you work on something that you knew wasn't working, but refused to vet with someone outside yourself or your team?
How much time did you waste avoiding the inevitable?
You need a mentor or 10 to help you vet your work before you waste months of resources.
For business plans, Overland needed a ton of alpha players and we needed to vet the alpha and early access programs.
So we actually leaned on our mentors and did a ton of research of our mentors, some of whom are actually in this room right now.
We needed to create a way to build a sustainable growth for our tiny team and get real players providing valuable feedback on our strategy game.
And we interviewed and researched other devs who had run alpha programs of varying success in our genre.
to find threads and best practices in the current market.
And then, studio practice.
Mentors can help guide and fix the ways your team or studio functions.
They can help alleviate partnerships that could have gone toxic.
This is just basically called peer mediation, before things go too far.
Mentors can also provide an outside perspective for team members to keep development teams clean.
With workflow struggles, miscommunications, design decisions, honest assessment of whether you are reasonable.
which also is very important, and not in the way that you're, or if you're being unreasonable with the way you're interacting with your development team.
So I'm going to tell you a quick story actually.
So we provided a mentorship to the obviously the Night in the Woods team over the last like three years.
And they're distributed on multiple time zones across the United States.
And they're basically operating solo.
So they had like legit workflow problems.
The thing that they were doing just had Adam and I completely speechless about 18 months ago.
And there was absolutely no way that that workflow problem was going to allow them to finish the game.
And if they hadn't brought that problem to us, like there is no way that Night in the Woods would have come out last week, and probably would never have come out if that hadn't been fixed.
So yeah, and we also, specifically with the Knight in the Woods team, have advised on all sorts of quality of life issues over the last three years, because we don't have, we have skin in the game, but not that kind of skin in the game.
So yeah, in conclusion, these are the practices we rely on to avoid toxic conflict and engage in good conflict and productive arguments about the best things to do in our project.
The upsides, in our experience, this is the way of following through on the promise we make to our collaborators.
We're part of a team.
And it's a way of taking advantage of all the intelligent folks on your staff.
The downsides, it can be super time consuming in the short term.
You have to think about your design meetings with more rigor and more thoughtful.
It's also a hard system to force onto people.
You really have to lead by example.
It also means it can take months in order to get this machine up and running.
For us in the medium term, it works.
And if we find a better way to do this, we will absolutely switch over.
All of this talk was built using this exact design process.
This has helped us produce better collaborative decisions.
And we can't not work this way at this point.
So, thank you very much.
Um.
So, I knew this talk was going to be sort of long, so I don't actually know how much time, we don't have any time for questions, but I do have a wrap up room, which I will be at for the next 45 minutes.
We will go to 2018 if there's room.
2022 if there's not. If you have any questions feel free to follow me. I'm also bringing Adam with me. We'll both be there to take questions.
