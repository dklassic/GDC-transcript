Thank you for coming.
Do all the things, turn off cell phones, remember valuations, and let's get started.
This is applying 3D level design skills to the 2D world of Hyper Light Drifter.
My name is Lisa Brown.
I'm an independent game designer at the moment, but for the purposes of this talk, my relevant history was as a designer for Insomniac Games and more recently my work with Heart Machine on the game Hyper Light Drifter.
Today I'm going to talk about the transition I made from working on large AAA 3D action shooters such as Resistance 3 and Sunset Overdrive to Hyper Light Drifter which is a 2D overhead action game and what level design processes and principles carried over between 3D and 2D.
A few quick caveats for this talk.
The focus of this talk is going to be on action combat games.
So everything I talk about will be through that lens.
Also I'm going to be showing several full‑sized maps from Hyper Light Drifter which will reveal secret areas.
So if you care about that thing, be advised.
And I also want to call out all of the example levels I give on all games I show.
There's a fair amount of collaboration involved in the level work.
So many of these works, many of these rooms show things that were touched by multiple designers, multiple members of the team, not just me, especially in the later polish phases.
So with that, let's get started.
So this was the spring of 2015.
I had just left Insomniac to go indie, work on some of my own projects.
And around that time, the Heart Machine team approached me.
They were working on the indie action RPG Hyper Light Drifter and needed additional help with level design.
So they came to me and they asked if I would be interested.
And so I thought to myself, okay.
All my level design knowledge and skills for action games thus far has been on big 3D games.
I've done zero level design for 2D games.
And I have no idea if any of my experience will apply at all.
So I said, you know, yes, of course, I would love to do level design for you.
So, they gave me their design test and I ran into a few struggles off the bat.
These screenshots show the sort of 2D overhead but also from the side perspective of HyperLite and I started struggling with this when I was doing their test.
In fact, I was so inexperienced in making 2D maps that I ended up mocking up structures in SketchUp and tilting the camera to help me figure out what that might look in this partial overhead view world.
It worked out okay and once I got the hang of things, I was more easily able to lay things out for the test.
And I ended up with a map that I thought was pretty okay and the team liked what I did so they brought me aboard.
However, I was still worried a lot.
about how a lot of my level design staples wouldn't translate from 3D.
These were the sorts of design habits that by now were second nature to me, and I knew they wouldn't be applying in the same way.
One fear, of course, was that I was very used to dealing with an outward facing camera and thinking about things in z-space, especially with things like.
using distant landmarks to help player navigate through a large space, which of course landmarks don't work like that in an overhead game, so that wouldn't apply.
Also, all of my experience setting up combat spaces was from this perspective of a forward-facing cone.
So everything I knew about establishing front lines or mitigating player awareness about what they couldn't see wasn't necessarily going to be useful in this case.
I also tended to rely a lot on verticality and spaces in 3D to make things interesting.
But this was limited in the engine for Hyperlite.
There was no way to make it possible to walk both under and over the same space.
So a lot of the sneaky sort of wraparound things I had done in my design test wouldn't even be possible because of the engine constraints.
So those were my big fears going in.
But after I got started building some levels for the game, I realized there was still a lot of transferable skill going on from 3D to 2D.
And ultimately, I ended up finding many, many parallels.
But for the sake of this talk, I picked three big ones that I'm gonna talk about.
So the first thing that carried over was my personal initial construction process.
And what I mean by that is what I do when I start work on a brand new level from scratch with nothing but an empty scene before me.
I'm mainly going to talk about my process of using established metrics as constraints for the very first parts of building a new level.
So many designers I know when they're working on a new level, they sort of approach it like you would a subtractive sculpture.
They block out big general shapes first and then go back over and shape those big blocks down into more detailed spaces.
And I know a lot of level designers who work this way, but for whatever reason, I don't tend to use that approach beyond a very rough suggestion of what a layout might look at.
And so my process is when starting a new level from scratch, I'll start laying out objects according to established distances that we've already figured out for the game and then growing the level outwards from those attached pieces.
So then those shapes end up driving the bigger, more general shape of the whole level.
And by metrics, I mean things like, you know, what's the minimum width of a corridor for an enemy to be able to navigate through it?
Or what is the jump height and what is the jump distance and things like that.
That's what I'm talking about when I say metrics.
Here is an example from Sunset Overdrive.
If you haven't played it, Sunset Overdrive is a very fast‑paced open‑world 3D shooter with a focus on traversal, so things like rail grinding, wall running, bouncing on things, et cetera.
And this example is from a moment very early on in production where we had just decided that we were going to integrate combat with the player's move set.
Before they were very separate and the combat was much more like a traditional 3D shooter.
but we decided we were going to combine them.
And all the designers were tasked with prototyping some spaces to figure out what that would feel like and what impact it would have on level design.
So I ended up making this sort of food court prototype.
It's very rough and focused on mechanics.
And when I had sort of a rough idea, I wanted to do something with multiple heights that sort of spirals around some central feature.
And specifically I was trying to make a space that would work in multiplayer.
So let me walk you through my metrics as constraints process, what that looks like when I was building this.
So I would start out with, say, a traversal piece, this bouncy awning the player can bounce on.
And I'm thinking, OK, if the player bounced off of this, what's the range, like where they could land?
And somewhere in this ring, so I'm going to put another bouncy object there.
And I want a few options for the player, so I'll paste a couple of them, but I need to make sure they're at the right width so enemies can run through them.
So now I have a couple more.
Okay.
You know, what's the next range of ‑‑ where the player can land.
I want to put more stuff there, but I don't want things to be too flat.
So let's elevate a little bit.
What's the standard stair height?
Okay.
We'll put those in.
You know, make sure there's more traversal options right in that area.
And then again, I want to link this up with something else and here's the range and here's the width it has to be for enemies to navigate and so on and so forth.
So it ended up sort of just like branching out paths from one traversal element to another.
And as I mentioned, in this way, this construction method is a bit like a branching tree traversal in how small additions of connected spaces end up shaping the whole general space rather than the inverse method of starting with big general blocks and carving them down.
So this metrics‑driven process for me ended up coming to play on HyperLite immediately with the first room the team had me build. So for context, they had been building out the east region, which is the water region in the game. They wanted something to contrast a lot of the tight, linear underground combat spaces they were making. So they said make a huge room that has multiple paths you can take through it and that features this particular new enemy.
So I'm going to talk about this room called Mega Huge Lab, which you can see in its final form here.
And for reference of how mega huge this room is, this rectangle here is the player's viewport.
So this is how much they can see on screen at once.
So it's quite big compared to a lot of rooms in the game.
But before it made it to that state, it had humble beginnings here.
Actually, technically it had even more humble beginnings.
It was a super rough sketch to have a relative idea of some different connected spaces I want to do.
But we're going to start here because this is where that carryover from my insomniac process started to come in.
When I was faced with a blank room and had a vague idea of sort of what I wanted for the space.
I found myself falling back on the same process that I did with that Sunset Overdrive prototype, which was start laying things out at distances that were already defined by existing metrics in the game and see how they connected.
So in this case, the main metrics in question were the drifter's dash distance, like how far, like maximum, you could get across a gap.
There were some fixed stair dimensions that had already been established that I used for distinguishing vertical layers.
And then of course, just the viewport size for the player.
That ended up being the most useful constraint when building.
So similar to the Sunset prototype, I started out by laying out blocks of the viewport size to get an idea of how much would be on screen in each chunk.
And it just sort of connected out as I was building it apart.
And when laying out a section like this, which, you know, this is very early and went through many iterations later, but just to get something started to iterate on, you know, I would start with the drifter over here and measure what's his max dash distance here and here and just branch out.
So if you're curious, this is what the evolution of that room looked like over time.
It went through a number of iterations, driven by some enemy changes, a couple of hazard changes, but ultimately that rough initial connected structure, you know, still retained even in the final version.
Alright, so even though that's a sort of specific thing to my personal work style, the basic steps and principles of how do I just initially get started constructing carried over quite well even though there were a lot of differences between 2D and 3D.
So the second thing that carried over was this idea of using player defense and survival instincts to shape how I approach making the level.
When I was at Insomniac, I worked under designer Drew Murray, and I remember him once saying this quote to me.
Defensive capability of the player and shooters is more important to level design than offensive power.
Which is very interesting.
I had not considered that when I was a young fledgling designer.
So in other words, how a player survives and how they feel about survival has a really big influence on how you build the level.
Sometimes even more so than like enemy or weapon design.
And this is things like, does your game have a health regen system?
Do you have an explicit cover system?
Basically, when the player is about to die, what mechanically do you expect them to do?
And it has a huge effect on how you shape the space.
So sunset overdrive was kind of weird because in this game, the more you were moving, the safer you were.
You survived by traversing and going as fast as possible through all these chain traversals.
And as a result, the level design doesn't have a lot of those traditional places of safety that the player might hide in that you might see in a more traditional third person shooter.
But Resistance 3 and Hyper Light Drifter have more similar defensive models.
So there's no regenerating health, and the things you have to do to replenish health tend to be pretty risky, be that run out and grab a pickup in a dangerous situation, or using those stocked health syringes in Hyper Light.
And thematically, the world in both is meant to feel dangerous as a whole.
So there were some elements of the level design that were similar as a result of that.
So as a brief aside, a lot of the terminology I'm pulling from this section is from the book An Architectural Approach to Level Design by Christopher Totten, who I believe is in the room somewhere.
There he is, right there in the middle.
This book does a great job of generalizing a lot of level design principles so they apply across many genres.
And there was a section in the book called Emotional Level Design Through Survival Instinct.
And as I was reading it, I realized it was giving terminology to things that I'd been doing many years just from intuition or experience.
So it was great to have those terms.
One of these things is this idea of prospect and refuge space.
So to quickly paraphrase, this boils down to prospect space is being vulnerable out in the open versus feeling safe in a hidey hole.
And that's just the general gist of it.
In a lot of situations in action games, you'll see these patterns where you'll have someone in a safe space have to go out in danger to get to a secondary refuge space further out.
I really like this generalization because it's a principle that can apply broadly regardless of the camera, whether it's 3D or 2D.
It's just a way of giving terminology to a natural habit of mine in level design.
So like in Resistance 3, contrasting spaces of danger and safety were a frequent pattern.
So you would often seek cover in these edge spaces that were concealed and often next to very open, tall ceiling spaces and this was a very common way of representing refuge versus prospect space.
This is a safe space and this is where the danger is.
And one thing I want to point out is the player feeling really comes across in the relation of these spaces to each other.
So if you are crawling through a vent with a very low ceiling and not a lot of maneuverability, this in and of itself does not necessarily convey safety, especially because if there were combat in this space, it would be very dangerous.
But if you're in that same vent that is adjacent to an open combat space and you have the high ground, it feels very safe.
The enemies aren't aware of you.
It gives you a good vantage point of how to approach the combat and it's just a very safe feeling compared to that's where the danger is, here's where the safety is.
And then of course once the combat starts, it's no longer safe to stay up there and player gets driven out into the prospect space.
So when making spaces for Hyper Light, I found I was relying on the same principle of appealing to that survival instinct when creating combat spaces, even if the methods were quite different between 3D and 2D.
For example, I didn't have ceiling height as a tool to differentiate prospect and refuge space, but I also found that it was more simple to create a feeling of the player being safely enclosed.
So here's an example.
There's a little refuge space after a haul of these crushed blocks that you have to dodge.
And it's just a little moment of safety before you have to go back out and deal with this turret up in the corner there.
And it's really only conveyed by how it's blocked in and how you have to go down and around to move out rather than going straight through.
It just makes it feel more enclosed and safe.
And as I mentioned earlier, I did find that in this 2D overhead view, it was a lot simpler to make the player feel enclosed and safe with relatively minimal construction compared to 3D.
And I think that's because you don't have to worry about conveying safe space that's outside the feel of vision like you do in a 3D game.
And that sort of thing often requires some exaggeration to point out the surrounding space that you can't see.
You didn't have that problem to solve in an overhead view.
Also, I want to make it really clear that this isn't just about cover.
So here's that same area, but on the right I removed the pillars that reach into the frame and the little block on the bottom.
And even though they both have the same technical safety because of the range from the big bad bird up there, they feel a little different.
The more open one feels slightly more connected to the combat space and more dangerous as a result.
So you don't have to do much in this view to just make the player feel enclosed.
So even though the technical implementation was different between 2D and 3D, this idea of building prospect and refuge spaces to sort of hone in on that survival instinct still came into play in both contexts.
Last thing that I think carried over quite well is how I used the space to control combat pacing.
And by this I mean a lot of the level design strategies that I used in the 3D games to pace out individual combat moments were still applicable in this 2D game.
One of the big ways you can do that is finding ways to isolate combat moments.
So this is a pacing chart from Resistance 3.
And in this case, isolating meant physically distancing when combats happen throughout a level to achieve like a level‑wide sense of pacing.
It can also mean just like physically enclosing a combat area from surrounding areas.
It can also mean isolating in terms of time, so things like controlling waves, spawning in the middle of a fight, just to get a particular pacing for the individual encounter.
One thing I want to mention is you can isolate combat space without that meaning like walling in an enclosed combat arena in a linear sequence.
Sunset Overdrive took place in an open world.
It's a big city.
It's fairly dense.
But the combat spaces were still built as distinct isolated spaces.
You could access them from multiple places, but they were still constructed in a way that separated them from the surrounding area and really sold it as this is a self-contained space that sort of focuses inward on how the combat plays out in that space.
And there's a couple of these throughout the game, but you can sort of spot them when you go through.
They just feel a little more encapsulated from the immediate space.
So you know very distinctly when you are no longer in the combat space.
In Hyper Light Drifter, one way we isolated combat was through the use of camera locks.
For example, here's a space in the south.
You enter from the top.
The main fight carries you through that combat space on the right.
There's a secret over there on the left.
But we used camera locks.
You can see this in the red square space there.
and so it locks the camera there and part of that is to keep them from seeing the secret over on the left, but it also focuses the player on the combat and really makes that feel like an isolated moment. It ends up looking like this where the camera is locked horizontally and it just sort of like encapsulates this is its own distinct combat moment. And we did this sort of camera work all over the game. It ended up being a really, really important tool to pacing throughout the entire game.
Another way I often use space to control combat pacing in my 3D games refers back to that previous section, which is this idea of denying refuge space in order to ratchet up tension for that particular moment.
So I often did this by introducing enemy access to a space that was normally a safe cover space.
In Hyper Light, one thing we did was have these sort of trap arenas, so you would enter into a space and you would get blocked in by blocks.
That meant you had to fight with no access to any refuge space, and it ended up being a really good tool for adding tense punctuation moments to combat without needing to vary enemy composition or anything like that too much.
It was a really quick tool for getting that intense moment.
Another example, there's this one room where you have to go out on a raised platform.
There's no walls.
There's no cover.
You fight flying enemies and the ground shifts underneath you.
And this lack of access to any refuge space at all helped really sell this area as a sort of final challenge after a series of connected rooms.
So it's great for punctuation marks like that.
And again, like the previous one, even though implementation was different in both cases, the principles behind my use of space to controlling combat spacing was really something that came naturally into play in both contexts.
So briefly, I want to mention again that there were actually many more things that carried over nicely from my 3D experience to the 2D level design.
And I want to call out this book again for once again giving terminologies to things that I had been doing as a designer for years and years based on intuition.
One of its strengths is how it's able to generalize level design principles and show how they can apply in many different genres and viewports.
So there will be bonus slides after GDC for all the things I had to cut.
To wrap up, I'm going to go through a walk‑through example of a Hyperlite Drifter room from start to finish and talk about how each of these principles and processes carried over and came into play when we were building this room.
This is the room I'll talk about.
It's a room in the north region of the game where you're fighting cultist birds and it's one of a series of linked to underground combat rooms in the north.
Here's a quick time lapse of how this room developed over time.
Just to note that my examples won't necessarily be in chronological order, but just so you get a feel for how it's shaped over many iterations.
Here are the goals I was given when tasked with building this and similar rooms in the North.
We were trying to figure out what environments the North enemies worked best in and experiment with there.
We were experimenting with different combinations of North enemies.
In this case I was mostly focusing on these short range powerful combat cultist birds but also brought into play this little rifle Dirk here.
He's a relatively weak but long range enemy and I wanted to play a little bit with that.
And then for these rooms I was also supposed to keep them fairly tight and focused more or less on one idea at a time.
So no mega huge labs here.
So this was sort of the process. After coming up with a really rough idea of what I wanted to try, I started with those metrics similar as I had in the other level from earlier.
I blocked out two screens worth of space for the two main beats of the room, tried to keep it small and tight. And this was nice because it naturally made a little corner space over here that was a good place to stash a secret.
Then at the room entrance, I started out by laying out several platforms at the maximum dash distance from each other to see what I would need to sell as these are precarious cliffs on the edge there.
And that sort of showed me, okay, that takes up most of that first square.
So the primary combat is going to happen up here.
I'll have a little combat down there, just a little flavor combat.
But the big fight is going to be up here.
So, in that first pass of all these rooms, you know, I was keeping them really tight just to focus on the combat.
But even in this first pass, I was still starting with the player in a safe place.
It was a disconnected platform.
It's out of line of sight.
And it didn't really convey safety too much.
But once we decided we liked the combat here, we're going to keep this room.
One of the first things we did was expand the opening of that refuge space.
So now there's like a little opening alcove to the left and through some iteration we made this little section right before you get to the first enemies feel much more tight and closed off and a lot safer before you get out into the open.
Eventually this opening ALCO got expanded.
You know, it had this drop floor moment and this like elaborate entrance, but in the end this little space right before you got to remained with that really tight blocking that we tried in earlier iterations.
So now I'm going to talk about this combat moment up here and a few things I did to make it punchier and feel more like a peak in the room's interest curve.
On the front of isolating combat, when you enter this section, we do a camera lock on it.
And it's in order to really focus your attention on this fight and highlight that it's a more significant combat moment than those first two birds that you just dealt with.
And it also conveniently, like, hides the secret over in the corner.
At the same time, we're also denying access to any refuge space because you get up on this platform and we wall you back in.
In practice it looks like this.
As soon as you get up there, you get closed in.
The camera lock, it clicks into play and it's like, okay, now I have to really be on my game here.
There's no cover.
And it's a more dangerous scenario.
You're forced to react more quickly.
In an early version of this level, I had the right side of the gap completely open.
So you were also having to deal with dodging the long‑range attacks of the rifle derks.
while fighting the close range cult birds. It ended up being too much going on at once. It was a little bit sloppy. So we isolated that part as another pacing beat. So you can see there's more combat to come. But, you know, we isolated it from this main part and opened it up partway through. So it just sort of eases out of the climax nicely. It means there's a new threat to deal with, you know, the long range guy, but it's not like too intense and it just eases out super nice.
All right, so hopefully that walkthrough gave you some context for how I was applying some of these things.
Many of them are connected and support one another, but the point is that these level design muscles that I had built up doing 3D work still definitely applied in my workflow for the 2D stuff and how I constructed space and how I made decisions.
So, conclusion.
The fears I had going into this project proved to be unfounded.
Yes, there were a lot of specific methods that didn't necessarily translate, like anything relying on ZSpaceView or my considerations of spatial awareness had to change or even stuff like using those, you know, close ceiling heights to make the player feel enclosed.
But the more generalized processes and principles that I referred to when designing the levels very much applied to both contexts.
My intuitions I built up making 3D games still worked and applied.
And once again, these are but a small sample of the things that carried over.
There's actually a lot that was generally applicable.
And again, I'm going to recommend this book if you haven't read it.
It's great.
It's a ‑‑ it really helped me clarify a lot of things and give some terminology that was useful to me.
Thank you.
And I appreciate it.
Thank you.
Thank you.
And thank you for listening.
And thank you for your attention.
And I'm going to go ahead and close out the session.
And I'll be back in a minute.
Thank you.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
And then lastly, if you're a designer that's practiced in making levels for a very specific sort of game, don't fear if you find yourself in a situation where you have to branch out and do something different because your skills are very much transferable.
You just have to trust yourself and look at the general principles behind the things you're doing instead of like the specific implementations.
And thank you very much.
That's my talk.
So we have time for questions if anyone wants to come up to the mics and ask a thing.
No questions. Or I could do a little dance. It's fine. Oh, right, right. Hello.
So, I was actually curious, like, were all of the enemies in this project virtually complete by the time you started designing levels around them, or was there a little bit of iteration on those in the process?
So the question was if the enemies were complete when I was building levels using them.
weren't totally complete but there was a lot that had already been done. In fact, when I was building those north rooms, one of the reasons they put me on that was they had prototyped some north enemies already and they wanted to see like, you know, what was the what are the spaces like that we're going to use these? And we ended up like taking several of them and sort of combining their functionality to like cut individual enemy types and figure out how we could get one enemy doing the same job of multiples. So there was like a pallet of enemies, but there was still iteration to be done, you know, after trying them out in the levels and seeing, oh, this guy actually isn't very fun. We should probably cut it and this guy can, you know, also do that job.
Over here.
Hi.
Excuse me.
One thing I've noticed frequently happens when doing levels in 3D is that when art is applied, many of the things break and have to be redone or adjusted.
I was wondering, first of all, you recognize this situation and going to 2D, does the same thing happen or does it happen differently?
Could you speak to that?
On this particular project, I didn't notice it being as much of a problem.
So the question was about how in 3D games, often, you know, when you go from the gray box to the environment art gets in there, then a lot of things break, you know, like visual cues or like cover heights or stuff like that.
And did the same thing happen?
And I don't think it did, but part of that is because it was a small team.
We were all working really closely together.
And they had already set up a pretty good established metrics for this is the sprite size, this is the collision box.
We can't change that, but we can change the art.
I think Alex is somewhere here in the audience.
You know, we'd done a lot of it.
He still had a lot of time to iterate and polish on the visual look, but it didn't really disrupt the level design much at all.
But again, I don't know if that's a quality of 2D or if that's just a quality of this team's process that they made.
OK, thank you.
In 3D level design, things like object placement, lighting and weenies can guide players towards their goals and prevent them from getting lost. We transferred to 2D. I'm curious how many of those lessons were transferable and what you discovered along the way.
So the question is about basically how in 3D, like placing objects to like lure players' places or, you know, show them like the goal of where they're trying to get to and did that apply in 2D? It did. Actually that was one of my cut sections was about using rewards, like denying rewards to like get the players curious and interested. It's just a different approach because of the view. So, for example, there was a part of the level where, you know, you have these blocks. You can see the exit.
And you see up here, like, on a different level, it's like, you know, it's one of the big things you're trying to collect.
And so you're like, oh, I need to get up there.
But rather than I need to get there and, you know, this is the steps I'm going to take to get there.
It's I need to get there.
I know it's there.
I need to, like, go and explore, like, off screen to find the way to get up there and have, like, a ‑‑ general relative idea of where to go. So it served a similar function of navigation, but the way the player, like, carries it out was a bit different.
Cool, thank you very much.
All right, I think I have time for one more?
One more?
Two more, two more, okay.
More, okay.
Yes, go.
Hi, thanks for the talk.
You said that there are situations where an environment artist break your work because they do whatever too much or they don't care about block out forever.
But how do you approach this kind of cooperation with environment art while you're doing the block out and the first pass on?
when you start to work on your blockout, do you try to grab the feedback from environment artists to see how they feel and how they see the level?
How does it work?
So the question was, how do you sort of cooperate with environment artists when you're building the level to get their input so that things don't just break when art goes in?
And it was different depending on the project, depending on the company.
a lot, you know, on the games I worked on in Insomniac, we worked really closely with environment artists on the linear games. So, you know, I remember, you know, going to the environment artists with my very initial maps, being like, I'm thinking something like this.
Can you see any problems? And he was like, oh, you're going to have line to draw problems in this area. How about doing it this way? So working really closely one on one, like throughout the process helped. Sunset Overdrive was a little different because since it was an open world.
It was more that we had like our main designer in charge of like the world traversal and the main environment artists.
They were like, you know, had this symbiotic brain relationship of building the world together.
And it was a lot more like using modular pieces from that.
And again, similar like owning certain areas and communicating with the artists from those areas from the beginning.
And like I said on HyperLite, the team was very small.
So it was just sort of naturally implied communication.
You know, we would.
At the end of the day, after I marked something up, I would have them come play and Alex might be like this is going to look kind of janky, try and avoid jagged corners.
He had a set of metrics for visuals for how to make things look the best way they could and so what things to avoid.
So that had already been sort of established before I got on the team so it was very useful in that regard.
All right.
I think that's it.
Thanks again, everyone.
Thank you.
