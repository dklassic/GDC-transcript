Hello, thank you for coming.
So I'll talk about designing gameplay with a theme in mind and how I utilize it to conjure mood out of systems and numbers.
It's also a study of design problems that came up when we assumed that theme comes first.
So I've been designing games for almost 13 years now and I recently co-founded a new company.
Artificer previously I was the lead designer of games like Phantom Doctrine and hard West and before that I worked at Techland did multiplayer design for all of course all call for his games except the good one.
So I was told I'm supposed to have a talk agenda at the beginning but mine is like.
It's really bad so briefly here's what to expect as you can see it's about the themes themes systems and themes.
So I'll be talking using examples mostly from our latest game, Phantom Doctrine.
Phantom Doctrine is a strategic turn-based espionage thriller set at the peak of the Cold War.
And we've received some high notes, including a 9 out of 10 from GameSpot.
Got a decent meta and user score, respectively 74 and 73.
And occasionally I will compare Phantom Doctrine.
with our previous game called hard West.
It sold over 400,000 copies.
Hard West has got 44 Metacritic reviews, which in this league is a lot, at least like two times more than average.
And similarly, decent meta and user score, respectively 74 and 77.
So here's how Hard West stacks against Phantom Doctrine.
Funtime took almost twice as long by twice the team and it seems quality wise it's exactly the same thing.
So throughout this talk I'll also try to answer the question of what the hell.
Strong theme and mood have been listed as major positive in over 90% of press reviews for both games.
However it occasionally exploded.
So here's how.
Theme and scope. So the main kind of feedback we got for hard West was no territory management No base building no character development. So basically not XCOM enough So in Phantom Doctrine, we added all that increase the budget increase the time, increase the scope.
It has base management, roadmap, character development.
It just like XCOM, it has multiplayer that no one ever plays.
And all the systems and features were there to support the theme.
And all systems are very interconnected.
And so we did encounter a lot of problems when we wanted to cut down and scale down some of the features.
Cutting meant that the theme and the structure might fall apart.
So in order to preserve your theme and structure and still be able to modify scope, you should start building features in a modular way.
So we start with defining the minimum viable project, MVP for short, that is like the smallest possible version of a feature that still does the job.
And we treat all other ideas that come to mind, and obviously there are a lot, as expansion modules that may or may not be implemented.
This way you don't risk damaging your theme and you don't risk your structure falling apart because instead of cutting out features, you can scale them down a lot.
The consequence of thoroughly implementing your theme is that it can explode in your face, once again.
So, to talk about this, I'll start with explaining a system that is called sidesteps.
So, way back in the day, in classic XCOM, you could accidentally run straight into your enemy.
And accidents like that are not very tactical.
In general, strategic and tactical gameplay is about how you handle information.
So you need information to be able to play tactically.
So nowadays characters, in most games like this, characters stick to cover, peeking out, it's called sidestepping.
However, that doesn't solve everything.
Consider a single...
tile of hedge, right?
And hedge isn't cover, so there are no cover sidesteps.
If this was indeed solid cover, sidesteps would work, characters would peek, and would see each other.
So we added what we call the free sidesteps.
Characters can peek not only when sticking to cover, but anytime, anywhere, in any direction.
Now, given that Phantom Doctrine, being a Cold War spy thing, is predominantly interior-based, this solved a lot of unwanted surprises, like the one I described at the beginning, and made the game far more tactical.
That sounds good, right?
But here's how this solution occasionally backfires.
Characters just shoot through walls.
It's not that frequent, but we got a lot of lag from that, a lot of negative feedback.
So in order to fix systemic design issues, it's good to go back in time and analyze your trail of thought step by step.
You'll usually find a couple of weak links and weak points that you could improve.
So we wanted the player to have more information.
And for tactical gameplay, in terms you need more information about enemy position.
But you have to see a character to reveal them.
So we broaden the definition of seeing someone with the three sight steps.
And because line of sight equals line of fire, as in if you see someone, you can shoot them, thus more unclear cases of line of fire.
And there is a result of that.
Occasionally, characters shoot through walls.
So to untangle this situation, you have to take a step back and find a point that you can deviate from most easily.
So for example, we could also reveal enemies that you hear instead of doing free sidesteps, which would probably be a better, cheaper solution.
So I have no idea why it came to me like the moment I was writing this talk.
So anyway.
So there's also a more general lesson to be learned here.
So in systemic games, ludonarrative dissonance pertains to rules.
So the theme in your game will get the player in a certain mood.
And this mood will affect how the player interprets the rules of the game.
Because the narrative is built by your systems, in forms of player stories.
So game rules should go hand in hand with the game theme.
If your theme is realistic, players might expect realistic rules.
If your theme is abstract, players will be okay with abstract rules.
Okay, so I wanted to make luck an important pillar of Hard West because it works with the theme, right?
Luck is very...
wild westy and people have a lot of ideas about how exactly luck works and often you can use the common understanding of an abstract concept and make it into a game mechanic so that's exactly what we did and hardware slack system works like this that's that's my funny gif I have one and this is it like like you if you were planning to laugh at some point during this throughout this presentation this is this is the moment Excellent, thank you.
So characters have luck, and luck helps you dodge shots.
When you shoot, target luck is reduced by the amount equal to your accuracy, and when the target's luck is depleted, you hit the target.
The reception of this was, in general, very good.
It catered to the group of XCOM players who didn't like random number generation.
It gives you compelling predictability.
It's new, it's fresh, and it sets hardware apart from XCOM, so exactly what we wanted.
So we did a similar thing in Phantom Doctrine.
As we all know, like real life agents and spies like Jason Bourne and James Bond are trained to have great awareness, constantly aware of their surroundings.
They never get surprised by an attack.
You need to really wear them down to be able to shoot them.
So in Phantom Doctrine, awareness system replaced the luck system.
So our characters can dodge shots when they see them coming.
And mathematically, it's almost the same system.
But for some reason, a lot of players didn't like it.
Why?
Like, why did this system get good feedback in Hard West but bad feedback in Phantom Doctrine?
Now, consider what is the common standard system for a chance to hit.
Accuracy is a percentage chance to hit.
make a role lower than that percentage to hit, simple as that.
So Heart was straight up lied about this.
We added the percentage symbol and called it chance to hit, which it wasn't, like at all.
There are no random roles here.
And it was far better received because this was a simplification good enough for beginner players and expert players, so right through and appreciated the clockwork mechanic behind it.
So how to do it right.
How a system works and how it's presented to the player are two completely different things.
How it works is for the power players.
How it's presented is for the new players.
System mechanics and its presentation are two vastly different things.
So in other words, if your new mechanic behaves like something familiar, just make it look familiar.
Lie about your mechanics to onboard the new players.
And never let your theme confuse the player.
The rule of thumb, when in doubt, just clarify the mechanics, even if it will damage your theme.
So about balance structure, which is something super complex that no one knows how to do, and sometimes it just works.
And people have spreadsheets and shit.
So there are two main gameplay layers in Fandom Doctrine, the tactical and the world map.
And.
In the world map, enemy AI will create events that the player has or chooses to react to.
And with almost all event types, one of your actions is to start a tactical mission where mission type is determined by the event type.
Okay, you got this?
We're good?
Okay.
So, for example, if you attack an enemy agent on a mission to find your hideout, you'll have a tactical mission where you have to kill a single enemy agent and hunt them down.
Or if enemy is plotting to assassinate an informer of yours, you'll start a mission that is basically a VIP rescue.
So we have a decent variety of mission types that are quite different.
And ideally, given how many mission types there are, there should be variety.
and players should, on average, play similar amounts of different missions.
Yet we got, obviously, a lot of backlash for repetition, and players said it's boring because they only play one mission type over and over.
So, turns out, with this structure, this could not be fixed because there are two conflicting ideas.
balance frequency of world events, and balance frequency of tactical missions.
Balance in the world map was tied to mission type balance.
So when I balanced the frequency of the world map events, I broke the balance of tactical mission variety.
World map events could never be equally balanced because they have different frequency and different conditions to be met before they could even appear on the map.
So the big lesson here is to just balance system separately.
Tactical missions and the world map missions should have been just unrelated.
Each of those should have been balanced in its own regard, in its own right, and then tied.
This, obviously, would hurt the theme because that's why the connections were there.
But always watch out for situations where theme affects the balance because they will be problematic.
Okay, so we wanted the game to be possibly endless at any point.
Okay, so you don't have to proceed unless you want to.
You can collect loot, you can gather secrets, you can level up your agents, and when you feel ready, you can move on.
No pressure.
Obviously, a lot of pressure because there's, like, a conspiracy that is plotting to destroy the world, blah, blah, blah.
But in terms of gameplay and numbers...
No pressure and our estimate was 40 hours for a company play through and the feedback was obviously surprising.
So the people of course it's a boring repetitive repetitive grind with 100 hour play throughs.
Why would the players take more time to go through the campaign and complain about it.
Why would they make their path boring and then complain that it's boring.
So to untangle this, you must first know how the big campaign loop, how does the big campaign loop works.
So the game is split into what we call campaign stages and a string of perils structure.
And campaign stage is the open part between two story missions.
That's the loop, okay?
where players can take on generated missions, as many as they want.
And for each stage, there's a finite pool of stuff they can find at random, like weapons, new technologies, shit like that.
And when player chooses to do so, they proceed to the next story mission, to the next campaign stage, where they unlock the new pool of loot.
So, players can play infinite number of missions with finite number of random loot drops and random unlocks.
But the problem is, they don't know when they got it all.
And they don't know when it's okay, when they should proceed.
No, the reason for this is, well, the player is kept in the dark because that's the theme.
you have a organization and you're looking for a secret conspiracy that is like out there somewhere and they have secret documents so like it doesn't make sense to know how many secrets do they have right so that's part of the fantasy not knowing what's out there but at the same time players will want to know they got it all like in pokemon probably or something if they accomplished the goal So clearly communicate game states of theme.
Well-paced means something completely different for every player.
So just tell the player when it's OK to proceed, simply put.
Um, okay.
Systems based on theme.
So in Phantom Doctrine we have this super, super cool feature called investigation, which I'm super proud of.
You're supposed to love it when you play it.
So you collect bits of information, files, photos, and you make the connections to figure out the key information, like who's the bad guy, and so on, so on.
So the feedback is pretty good, like this is just like the movies.
I should have made this a gif as well.
Anyway, so we put a lot of effort to turn this prototype into something good.
Still felt wrong. It was it was It was papers out of scale laid out on a desk connected with abstract lines So, you know not looking crazy at all like at all So then it it would turn it into something much better that would deliver the right fantasy with the right details so with themes details are super important and To do this right, you need to pick one interaction that you want to simulate for your player and really get to the bottom of it.
So for example, in Ace Attorney, the key interaction is finding the contradiction in the statement, right?
But you don't have to learn the law, right?
It's really simplified, and it really boils down to one simple interaction.
So find a winning game.
Actually, I have one more funny gif.
I find it very funny.
So find a winning game state and a failing game state that feel just right.
You have to get these moments right because these key moments will deliver your theme.
Because everyone who played Ace Attorney recognizes exactly that.
Maybe not that well.
You get the idea.
So this went right, we got the fantasy right with correct details.
What it really means to do, to perform this action, the investigation board is about connecting related things.
But of course, there were other issues with this, so again, a lot of backlash.
So on average, about 20 hours into the game, players no longer were surprised by the content it provided, and got bored.
So we kind of anticipated that and we feared that the players will grow tired of it because obviously there was finite number of content in it, although it was generated from pieces, but still.
So we made it possible to automate and skip the whole thing, okay?
So you can assign your agents to do this for you.
And when you look at the achievement stats, at least 91% of players did use the skip mechanic.
which sounds about right, but is like super wrong because players wanted to play this so much, not to skip it, right?
So they wanted it to not get boring in any foreseeable future.
So the problem here, the longevity of the feature.
So there are two conflicting ideas, two conflicting goals here.
One, players can solve infinite number of case files on the investigation board and it never gets boring.
which is, you know, impossible because everything will get boring eventually.
There's will flow through any amount of content you can prepare and eventually it will get boring and they will whine that it got boring and it's your fault that they played it too much because it's so good, so good.
But anyway, so the solution here, so how to do is right is, write out how many times the feature supposed to ideally show up in your game.
It is not a number.
Yeah, three is a number.
Three thousands is a number.
And plan exactly how much content in that feature do you need for this many uses of this feature.
And plan precisely how many actions the players will perform.
How many times they will see a piece of information.
And encourage and reward the players to stick to your schedule.
Or, well, if you don't want it, you can always enforce it.
Because you need to keep the audience hungry for more.
Like, if I, for example, if I knew best, the number one magic trick in the world, and you saw it once, you'd love it, probably.
Well, assuming it's good.
But if I showed you, if I showed the trick to you over and over 100 times, then you'd get to the point where you'd say, well, it's not that impressive, really.
It's kind of boring, even.
In order for your gameplay mechanics to be magical, keep the audience hungry for more and carefully plan the pacing.
Systems adjusted for team.
Like, these titles are really bad, but it's like version 3.0, and they're like so much better than they used to be.
Anyway, Phantom Doctrine has this feature called support powers.
So before the mission, you can assign agents to support powers, like sniper, spotter, stuff like that.
You can place them outside the mission area.
And the gameplay-wise, these are just...
very simple direct global cast abilities with a nice cut scene that was super cheap.
So it went well because it was just enough.
It's a very, very simple system, very cheap system with simple directional cast abilities and cheap cut scenes relatively because we reused a lot of content for that and the character in the cut scene has the visuals of the agent that you assigned to do this.
So, the lesson learned.
So the final effect was exactly the same as the first trivial prototype that we did, plus all the bells and whistles.
And the prototype was very effective and perfectly accurate.
So too often prototypes we all make have very little in common with the final result.
And the more they differ, the more messy the production is bound to be.
So make sure your prototype is exactly the gameplay you intend to have and not like half of it.
Prototypes should always be abstract.
Making a feature fit the theme is so much easier than making a good feature.
It's easy to convince yourself and the team to a bad mechanic that is wrapped in a good theme.
So remember, first the gameplay, and second the game, a coat of theme paint.
So every theme is a context in which words mean different things.
The initial goal for a feature we had, called simultaneous orders, was to provide change in the term-based monotony.
So the idea was to give the player an option to act out orders simultaneously.
Players could give out any orders to all agents and have them do them have them do it all at once.
Now the problem is it was it wasn't particularly good at anything so sure I can do a couple of things at once but why would I like it even takes more clicks this way so like no one used it and second if your game is based assuming it a real-time mechanic is a technical nightmare So we narrowed it down to a single context, a single use, and we called it breach, which means have all your agents enter and shoot everyone at the same time, basically.
That's what this word now means in the context of Phantom Doctrine.
And it's useful because it counters, Overwatch counters the enemy defense and they won't trigger when you come in.
And it's just three clicks, so it's actually less clicks than if you were to do step by step.
So you just choose to breach, choose the room and confirm, that's it.
Now, because that's what it means in this theme, to enter a room simultaneously and neutralize everyone in range.
So how to do this right?
Make one use case work perfectly well and like if you've got the money, do more.
But ask yourself this.
Can your feature be shown and importantly experienced at the push of a button?
And can you name it like the right way to be part of the fantasy and not just a feature like tagged on top of the game?
Okay, so last part.
Oh wow, I'm perfect.
So.
In a setting that fully depicts a realistic situation or context, you'll be constantly wondering how far can you go with your own inventions.
So it's like biography movies, where usually the plot falls apart somewhere towards the end, because no real life is written according to the three-act structure and so on.
So give your setting a unique spin to allow for anything you desire.
You need to give yourself means to channel any loose ends into where unresolved logic problems die.
So for example, in Phantom Doctrine, it's a game about spies, but also have a massive worldwide conspiracy going on.
And the key mediums here are this could happen because he was brainwashed, for example, and no one knows how exactly brainwashing works because it's like kind of fantasy.
allegedly, who knows.
But anyway, and the conspiracy theories, they were all true all along.
So we're suckers for conspiracy theories, and a small part of us all wants them to be true.
And in case of Hard West, it's Wild West, but with demons and the occult.
So we made the assumption that the world of Hard West is where all myths and legends were true.
And when you do that, any idea you have will.
Because it doesn't have to make sense.
That is it.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you, Kasper.
If you have a question for Kasper, please come to the mic in the middle aisle.
We've got time for a couple questions.
And I've got one myself to start things off.
Hi, I'm Ryan. My question is about the difference between Hard West and Phantom Doctrine. You talked about how you had such a larger team and things for the second game and so many more features and what not.
What do you think the result would have been if you kept at the same scale as Hard West?
Do you think, you know, the review scores and things like that would have been about the same?
Like, was all that extra effort, you know, did it amount to something?
Okay, so given how many times I was so wrong guessing how a game will do, I'm not talking only our games, but like all the games in general, I have no fucking clue.
Could be perfect, could be next to nothing, no idea.
But there's, like, once we're here, like, given that we're at this topic, so there's one thing that we could have done, like, mid-production to avoid many of the issues because we didn't adapt for the pace at which we were able to hire people.
and that was one of the biggest problems in the development.
We needed to develop the game, but we didn't have the whole team yet.
So for future games, if you made a game in a similar genre again, would you do a similar sort of thing, like go in the full sort of XCOM route?
In our new studio that is super cool, what we do is we...
The scope can 100% be delivered by the team we have right now.
And if we get more, then we use the expansions that I talked about, and we can always do more.
But we definitely can deliver what we have, and what we have, what the plan is, with who's on board.
Right, okay, and with your new game, are you planning the gameplay first, or the theme first?
You doing what you mentioned?
Well, we usually do this at the same time.
So it's a gameplay plus theme, and it has to work together really well.
Awesome.
Question?
Yeah, it's actually related to that last question you just asked, which is when you're starting a game, you made a really good point, which was when you prototype, don't put art in it, because that will trick you.
Just do the gameplay.
But can you talk about how you develop a game from the ground up?
Like if a theme is a big part of your idea, origination for a game, do you do art tests in parallel with gameplay prototypes, or how does that process come together in the beginning?
So.
Should I repeat the question?
No, it's recorded if it's all right.
So the process more or less goes like this.
First, in general, I really don't like waiting for ideas to happen.
So I usually steal ideas.
I refactor ideas.
I reuse ideas.
And maybe no one will notice, whatever.
But I try not to wait for ideas, apart from game ideas, where.
I just look for, or actually wait for ideas to come for pairs of gameplay, like base gameplay mechanic and theme.
That was the case with Hardwest, where the theme works really well with this gameplay because, you know, it's kind of empty, like the towns are small and it makes sense.
There's not many people around, the buildings are low, and so on, so on, so on.
And the combat is slow-paced as well.
So that's like step number one.
And then we sort of note down all the possible ideas we might have.
A lot of them are stolen, obviously, from games, from movies, and we make a huge fucking list of stuff that we could possibly have in the game.
And the rule of thumb is we try to get it all in, in some way.
Like, for example, for Hard West, we wanted to have some, you know, poker cards in the game.
But obviously...
The most obvious idea would be to put in a minigame, which would be super fucking expensive, and why would we do that in a turn-based tactical game?
So we used the cards to represent character abilities in character development system.
And it works pretty well.
So that's the process, more or less.
Cool, thanks.
All right, last question?
Oh, yeah.
So in your presentation, it seems like trying to identify the problems and gather solutions you think might fit.
And it turns like it's become better.
So what if you are carrying the current experience and transfer yourself back to the past?
So basically, are you going to do the same thing faster?
Or is there something else you want to do?
So I definitely would like to come back to the genre at some point.
But there's so many games I would like to make.
But the thing is, I always try to do a really solid post-mortem that is super critical and super negative.
Because I believe that either you succeed or you learn.
And there's a lot of learning here.
So it's kind of unrelated to our future plans.
Alright, thanks so much everyone. Make sure you fill out your email survey forms to let Casper know what you thought.
Only if you liked it. Thank you so much, Casper.
