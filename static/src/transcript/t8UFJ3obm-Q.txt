Good afternoon, everyone.
Sorry about the heat.
Welcome to Practical Contract Law for Indie Developers 201 Not Scary Edition.
Or actually, Moderately Scary Edition.
Last year was Not Scary Edition.
So before we get started, I want to remind you this will be in the vault.
And also, please fill out your session evaluations.
My name is Chris Reed, and I'm the founder of Chris Reed Law.
We're a firm that works with game developers and game industry professionals, helping them with a wide range of legal issues, including today's topic, which is contracts.
But before we get started, I would like, with the help of my co-counsel, Mr. Phoenix Wright, to remind you I am not your lawyer, and this is not legal advice.
It's legal education, and I hope it will be helpful.
My goal today is simple.
I want to help indie developers be less scared and understand more about the common contracts that they're going to encounter.
So, we're gonna cover some legal basics, and then I'm gonna go over five contracts that you're likely to run into as an indie developer.
For each contract, I'm gonna tell you when it comes up, what you need to know about it, why you should care, and how that gets scary if you don't, and what terms we need to look after.
Last year for my 101 talk I estimated that we'd need probably about this much time to go through everything you'd need to know.
And it turns out that was an underestimate.
Just to get over contracts, we're probably going to need about this much time.
So unfortunately, we still only have enough time for two games of Hearthstone.
So consider this more of a tutorial.
Let's start with a couple of basics about contracts.
A contract is a voluntary agreement between two or more parties to do something reasonably specific with an exchange of value for something that isn't illegal.
Sorry, Dark Brotherhood.
So when do you need a contract?
This one is very simple.
Before you do anything with anyone, please remember this.
Contracts are everywhere in the game industry.
We've got the five that we're going to talk about today.
But there's also a host of other situations where you might encounter a contract and need to know about it.
I know that most people hate contracts.
You have the same opinion that Mr. Torg does.
Mostly people say they're written in legalese, it's impossible to understand, what's wrong with lawyers, why do they write that way?
There's probably a lot that's wrong with lawyers, but for the programmers in the audience, I'd say you wouldn't write crappy code just because someone said it looked programmery.
The words are there for a reason, they do things.
Specifically, contracts help provide clarity and predictability in a business relationship.
They also get the parties thinking and talking about things they might not have considered just by negotiating it, which means it's less likely that there's going to be a dispute.
And if there is a dispute, having that contract provides for the worst case scenario, but it also provides for unexpected success.
If you start making millions, if there's this runaway success, it's important what those percentages are suddenly.
And finally, some things require a written signed agreement to accomplish, specifically the transfer of copyright interests.
This is incredibly important.
You can't do this with an email.
And if you don't have that contract, you don't own that code.
Basically, contracts are a rule book for a business relationship.
You may not need it very often, you might not have to look at it if things are going well, but you're gonna be really glad that it's there if you have a dispute.
And on a related note, my friends no longer play board games with me.
A word about boilerplate, the so-called boilerplate sections.
This is generally in the general section at the end of a contract.
A bunch of small, boring-looking fine print.
I want to urge you not to skip it.
There's a lot of important settings in here.
Are you agreeing to arbitration?
Where do you have to go to court?
Does one side have to pay attorney's fees?
So look through this section in any contract.
And finally, some practical concerns.
My number one rule here is that contracts don't enforce themselves.
They're not magical.
It's not Harry Potter.
You actually have to take action.
It's not going to stop someone from failing to pay you, even if you have a good contract.
And enforcing that legally might take time and money if there's a dispute.
And my second point here is please don't use what I like to call Franken contracts where you get something off the internet and then your friend sends you a contract and you put a couple things in from there and then someone else sends you a clause and then you say that's probably good enough. This is often worse than having no contract whatsoever because you're now effectively using code that you've never read. You have no idea what it's going to do and it may not even make sense if there's a dispute.
So let's get on to our first contract of the day, the non-disclosure agreement, or NDA.
This is between someone disclosing confidential information and someone receiving confidential information.
It comes up in a couple scenarios, perhaps if you're interviewing a contractor for a job and you don't want them to be able to disclose info about it if you don't hire them, and also if you were making a confidential game pitch and don't want them to reveal details about the game idea.
So why do we care about one of these agreements? Well, first off, it's the only way to really protect abstract ideas and mechanics. As a note, these are things that are not protectable under regular copyright law. It's also a good way to protect trade secrets. That's a type of IP that covers things like customer lists or pricing models. And finally, it's just a way to keep certain stuff secret. You know, maybe the launch date or some details about the main character that you were hoping to save for a marketing splash.
And these can be scary. Just recently, Oculus lost a $500 million verdict in part because they were found to have breached an NDA. These contracts have teeth just like the cock a demon. So what do we want to put in one of these? First off, you need to know if it's going to be a mutual NDA or a one way NDA.
Meaning are we both sharing information or is only one person receiving that information and the other one sharing it?
But the core of an NDA is going to be the definition of confidential information.
You're sharing some stuff.
Well, what is that stuff?
How broad is that definition?
Everything I tell you?
Or is it narrow?
And do I have to mark it?
Is it going to be saying confidential on the top of every document?
What happens if I tell you on Skype?
Do I have to email you later?
These are things you have to consider.
You then have to think about what the permitted uses are.
So what can they do with this information?
Are they signing the end age just so that they can look over your stuff and decide if they want to work with you and they're not allowed to use it for any other purpose?
Or is this something where you're working together and they're going to put it into a game?
And finally, you need to know what their obligations are for keeping it secret.
How long does it last?
Is it for a year or is this to their grave?
And who can they tell?
How narrowly do they have to keep this information from their employees?
Finally, a couple of practical concerns.
First off, they can just say no.
Not everyone's gonna agree to sign an NDA, so then you still have to decide if you wanna tell them.
And, like I said before, enforcing costs time and money.
It's not magical.
They're not gonna be forced to not say anything.
They could still disclose this stuff.
So let's move on to our second contract, work for hire agreements.
These are incredibly important, and they're between a developer and a contractor, or really anyone that's contributing something to a game, which actually includes the owners of a studio.
There's a related type of agreement called an invention assignment agreement.
And the owners need to sign this, as well as contractors signing work for hire agreements, because.
This is the agreement that allows the studio to own the IP that's created. Brief copyright lesson. The default rule is that if someone creates something, they own that copyright. Meaning your artist owns the art, your sound person owns their sound, coder owns the code. Unless you have this exception, which is that it's work for hire and you need this written signed agreement to accomplish that in most cases.
It also helps with some tax issues, but I would say ask your accountant. I don't do tax.
These can absolutely lead to disasters.
I've dealt with clients who've had games pulled from Steam and an angry former contractor with a bad or non-existent contract did a DMCA.
I've seen very expensive fights where they've had to pay people off.
You just wanna make sure that it's clean and clear up front to avoid this.
So how do we make that happen?
Well, first off, we got to look at the IP rights section.
It's called work for hire agreement because it sets up this work for hire arrangement where the company is the owner of the IP.
You also want a little backup clause that says, look, if for some reason a court doesn't agree to that, then you agree to assign it.
One way or another, company owns it.
There might be an exception if an artist wants a license to display things in their portfolio, and that's fine, but just make sure that you have some control over when they do that and what they display.
You don't want them putting art assets up before you launch the game.
Then you gotta figure out how you're gonna pay this person.
Normally, you'd pay them either hourly or maybe with milestones, maybe there's a cap, or with rev share, which is quite popular among indies.
Let's take a little bit to talk about RevShare, because this comes up a lot.
RevShare's fine, but you can't just say 10% of the game.
That doesn't mean anything.
You need to think of a couple of key details here.
First, 10% of what?
What is net revenue?
So what are you deducting from that?
Is this before Steam's cut, after Steam's cut?
What happens if a publisher's involved?
Those sorts of things.
Then you need to think about whether this takes time to vest.
So are they immediately entitled to this money, this rev share when the game comes out?
Or do they have to have earned it by working for the game for a certain amount of time?
You need to think about which platforms are covered.
If they're working on the Steam version and you think maybe it'll be on console later and they're not working for you, do they get console revenues as well?
And finally, which products does this cover?
Are we talking just the initial game or are we talking sequels, prequels, DLC, that kind of thing?
This can massively change the scope of what you're paying.
Speaking of scope, you also need to have a written statement of work that describes the scope of work, what someone is delivering to you.
What is this contractor doing?
Not just a sentence, some art assets.
You need to list it, because then they know how much they have to do, and you know what qualities need to be delivered for you to pay.
And if you're not satisfied or honestly if you need to cancel the game, there needs to be a clear right for the developer to terminate. You don't want to be obligated to pay people for work you don't need. And then you're going to need to think about what happens when you terminate them. Are you going to pay them? Look over these things. That can lead to a big dispute.
And next, we have a trio of very scary sounding sections called Representations, Warranties, and Indemnities.
Basically, this just means, what are they promising, and what happens if it's not true?
Specifically, you're gonna wanna make sure that this is about intellectual property infringement.
They promise that they didn't steal this stuff from Disney, and if they did and Disney sues you, they're the one that's on the hook.
The contractor's on the hook.
And that's doubly important because as a developer, if you do a development agreement for a third party or you have a publishing agreement, you're going to end up making this exact same promise to your publisher.
And it needs to be true.
And finally, sometimes you'll see non-compete and non-solicitation clauses in one of these.
Some people don't like them.
Some states won't enforce them if they're very broad.
But be aware that they could be there.
So let's move on to development agreements, which I just mentioned.
This is often between a client who is paying for development and the development studio that they're hiring.
It's gonna come up sometimes when a publisher foots the bill and it's more of a hybrid model, but more often for indies, they might be hired just to make some money by say, Cartoon Network.
They want you to make a game.
Okay, great, so why would you need a development agreement?
Well, because this game could take you a year, two years to make, and it's gonna ensure that you get paid while you're doing that.
It's also gonna make sure that you know exactly how much work you're signing up for.
This is one of the ways that studios go under.
First off, they get a project that ends up taking twice as long and they don't get paid a single cent more, which could sink you.
Or I've seen studios go down when they had a project canceled right in the middle and they had to fight to get paid what they were already owed from that project and they had to look for new work.
So we can avoid this.
First off, a familiar face, intellectual property rights.
In an agreement like this, probably the client is hiring you to make the game for them.
So they're gonna end up owning the rights.
That's fine, but with two key exceptions.
First off, you don't assign these rights until you get your final check. And that way you have leverage if they decide that they don't want to pay you. Which can be very important practically. Another important thing that you need to have in this section is what's called developer tools. This is an ownership right that you have and what I would call your special sauce. So basically engines, code libraries, know-how that you've developed while working on this game that you might use in your own games in the future or in future projects.
you want to state that the company that you're working for doesn't get to own this. They get a license and the developer keeps ownership of this. That way they can never stop you from using it in the future and in fact they can't even reverse engineer it.
Next, you want to know how you're getting paid. That's why you're doing this, right? So you're probably going to get paid some flat fee for the project, but you want to make sure that some of that's up front. Ideally 50 percent if you can swing it. And then you're going to get paid the rest in milestones as you deliver the content. So first playable alpha, beta, that sort of thing.
Make sure that there are clear terms as to when you've delivered.
They can't just sit on it for three weeks and then tell you they don't like it.
Five days.
And if they don't tell you, then it's deemed accepted.
That's the kind of thing you want.
If there's rev share, make sure we do all the same sort of math that we did before when we talked about rev share.
You've got to think about those details.
And you also again have to think about scope of work.
This could be a big project.
You need a game design document, tech specs, that list the features you're developing.
Not just what the features are, but how many.
Are you doing five levels or 50 levels?
Two character models or 20?
That's a big difference.
And to go with this section.
You want a section that allows for what are called change orders, meaning if they want more stuff outside the scope, they have to sign an agreement that says they're going to pay you more money.
You tell them how much it costs.
And if they don't want to sign that, you don't have to do it.
This prevents what's called scope creep.
And that can be the death of a studio, death by 1,000 cuts.
Clients don't understand game development.
They think it takes two minutes to change something.
Really, it takes two weeks.
So this protects you.
And likewise, you are protected by a good termination section.
You need to be able to get out of a bad deal if someone is not paying you.
So you should have an ironclad right to get out of the agreement if you have a late payment and the right to claim what you're still owed.
Additionally, your client is probably going to want to know if they can have the right to terminate for convenience.
What this means is essentially they need to stop the project because match threes aren't hot anymore, whatever they decide.
That's fine, but you want to make sure that you're going to get paid a kill fee.
That means they're going to pay you a flat amount that you agree to, or maybe all of the next milestone.
This gives you a cushion so that you're not caught with no money when you're looking to find a new project for the studio.
And finally, I told you you'd see reps and warranties again.
They're definitely going to make sure that you promise the whole game you deliver is free of infringing material.
And for that to be true, you've got to make sure that you've signed all those work for hire agreements.
They're also going to make sure that you don't have any Easter eggs hidden in the game.
They do not like hidden features ever since the GTA 3 hot coffee issue.
So make sure that you disclose this, because you could be on the hook if there's liability there.
So some practical concerns about development agreements.
If you're not getting paid, don't wait.
Contracts don't enforce themselves.
You need to speak up for yourself and assert the rights you have.
So give them notice of breach as soon as they have a late payment.
Stop working, don't do work for free.
And if it's the last payment, don't hand over the code until they've given you that final check.
To politely paraphrase one of my fellow lawyers, F you, pay me.
So let's move on to publishing agreements, which I'm sure you're all familiar with.
It's between a publisher and a developer with respect to a game.
These come up basically if the publisher's funded development, which is sort of the old school AAA model.
You still see that.
And then it's more of a development publishing agreement.
But a lot of indies end up with a mostly finished game.
And they need a publisher just for things like distribution or marketing or help with QA and that sort of thing.
So why do we care about a publishing agreement?
Well, if you have a publishing deal, you want to define how broad the publisher's license is, how you're getting paid on your game, because it's your game, and what exactly the publisher's actually doing for you.
These can easily get scary.
Games can get stuck in limbo with a publisher that doesn't care about them and no way to get out.
I have had, for example, two clients who both came to me wanting to get out of publishing deals with the same publisher.
One of them got out, I sent a single email, took one day.
The other one, it took months and they had to pay a lot.
And the difference was a single sentence that was in the termination section.
So, let's make sure we know which terms to look out for.
By now, I think you can all guess what is coming first.
IP rights.
You want to make sure, A, that you're not assigning the rights to your game.
So if you're assigning the copyright, that means you've sold the game.
They own it now.
And also make sure there aren't any sort of gotchas where if you're late, they suddenly own your game.
But if it's just a license for them to sell your game, that's not good enough to say it's a license.
You need to know a lot of things about how broad this is.
So first, how long does that license last?
Forever?
One year?
How broad is it geographically?
You may not want the same publisher in China that you have in the EU.
They may have different connections.
And then you need to know which platforms it covers.
Does your publisher know anything about mobile?
Then why are they entitled to publish you on mobile?
And finally, and this is huge.
Which products is it covering?
Is it just your game?
Or are we talking about sequels, prequels, DLC?
Or maybe we're even talking about games that you make later that have nothing to do with this game.
I have seen all of that sneak its way into the IP right section, so have a close look at that.
Also have a close look at how you are getting paid.
Normally, this is done in a publishing agreement as revenue share.
You'll see 30-70 in favor of the developer as the standard.
I don't buy that as a standard.
I think that you should argue for every percentage point, and that they should justify what they're doing for you.
But as it's going to be revenue share, you need to think about all the things we talked about before.
But you also need to consider one additional key point, which is recoupable expenses.
So your publisher may say, hey, we're going to give you an advance to finish the game.
We're going to spend x thousand dollars on marketing.
Great.
But if those are listed as recoupable expenses, it means they're going to get paid back before you see a cent.
So now your 30-70 split is as, you know.
is 100 zero percent split in their favor and you don't see money for a while. You can negotiate this and you can make sure you know which things are recoupable. Next, make sure the publisher is actually promising to do specific things. I see this all the time. It drives me nuts. The developer's obligation section is like one sentence that says we're going to, you know, publish and promote the game. That doesn't tell you anything.
They should be telling you how much money they're going to spend on marketing. And if they're not going to tell you that, they should be delivering a detailed marketing plan that you have approval rights over. They should be telling you things like are they going to be flying you to GDC in packs? Are they going to put you in the booth? Are they going to pay for that? How often are they going to put you on the website? You need to know these things. They should be promising specific stuff. Because you're giving them your game and they're taking a cut.
And finally, if they're not doing a good job, you need an escape hatch.
The termination clause that I talked about before.
Ideally, you want the ability to walk away with 30 days notice.
But if they're not okay with that, at least limit the time that they have this license for.
Try them out for a year and then renegotiate.
Or you could ask them to guarantee a certain amount of revenue per year.
They said they'll make it a hit.
If they can't do a good job, then kick them to the curb.
They shouldn't be your publisher.
Finally, some practical concerns.
It's not 1993.
You don't need a publisher.
But if you do have a publishing arrangement, you definitely need a contract.
And you need to make sure that they earn their percentage and get out if you're not happy.
Our final contract today, End User License Agreements, or EULAs, this is between a developer and your players.
You need to have it in place before anyone downloads and installs or uses your game, and that includes your beta testers. And look, I know that nobody cares about EULAs. You basically have the same opinion as the Doom guy has of expository dialogue. Get out of my way, let's get going. But these are important because they're the only way you're going to impose legal obligations on your players with respect to your game. And that's the way that you're able to control what liability you might have.
They can easily get scary. Users can and do sue game developers and publishers, as famously happened with Linden Labs and Second Life.
So what do we put in one of these things that nobody reads?
Well, first off, it's a license agreement.
It's not a sale.
You're not selling a copy of the game.
You are selling a license to use it as long as they play by the rules.
You can then set some of those rules.
You need to make sure that players aren't doing things like uploading malicious code, hacking, impersonating the server, doing hate speech, griefing people.
All of these can be laid out in your EULA.
It's also a good place to talk about IP rights.
Make sure you know and that they know that the developer owns the game.
If they don't have a license to steal your stuff.
But you might want to let them use it for machinima or for streaming and that's fine, but you need to be able to impose rules so that you can stop it if they're doing something that's offensive with your game.
Likewise, if your game involves user-generated content, as many games do, either people uploading things that are their own or creating within the game, you've got to think about two things.
One, wrap some warranties again.
Make sure they promise that they're not uploading copyrighted material.
You don't want to be on the hook for that.
And two, you should have a think about whether the company owns what they create or the player owns it.
If the player owns it, great.
But.
you want to make sure the developer has a right to use it, because it's going to be on their servers.
You might want to use it for things like future development or marketing campaigns.
So you should have that license in there.
Likewise, if you have virtual items or currency in your game, it needs to be crystal clear that these are not real property.
They only exist in these people's accounts and you can delete them if they break the terms of the license.
Sorry, not sorry.
Okay. Finally, or penultimately, you might want to put age restrictions in if your game has adult content or if there are privacy concerns as we talked about last year in the 101. And lastly, this is the place where you limit your liability. You need to disclaim certain things. Limit how much you can be sued for. Explain that you're not guaranteeing anything about the game, that it's going to be the best game ever, that multiplayer is always available, that the servers will be eternal, that sort of thing.
And of course, you really need to address zombies, the most important part of the EULA.
What happens if organized civilization collapses due to a zombie infestation?
Well, I would ask that you look at the Amazon web service terms for lumberyard for a good example of how to handle this.
This is real.
So finally, some practical concerns on EULAs.
Third parties like Apple and Steam will require you to put certain language in your EULA and forbid you from having certain things.
And lastly, make sure that they actually click through.
I know, I know, crazy.
Some people don't read the EULA, insane.
But you need to be able to show that they clicked I accept each time that you update it, because that could be a barrier to enforcing it if there's a dispute.
So, we've reached the end here.
What have we learned?
Well, I need a time machine so I can advise my six-year-old self not to sign this contract that my brother provided me with.
And in all seriousness though, if I leave you with one thing, don't cut corners on contracts.
I know it seems like that's something that's for later, but it is so much cheaper to get this taken care of in advance than to deal with a rolling dumpster fire later, which basically might not be able to be fixed.
I want to thank my paralegal for all his help.
And with that, we're at the end.
I'd be happy to take some questions now and in the spillover room, and please make sure to fill out your session evaluations.
Thank you very much.
Really quick, on behalf of a friend of mine who's starting something new, better to have a verbal agreement or to scratch things on a piece of paper if you can't afford a lawyer?
It's definitely better, I mean, the answer is it's better to talk to a lawyer, but to the extent you can think through some of the things I talked about and try to put it in writing, that's always gonna be better as long as you've thought through that writing.
Because...
If it's an oral agreement, you're just not going to remember.
Both sides will think they remember, and they'll remember different things.
But there's a lot that people don't think about.
So yeah, better to have it in writing, but much, much better to have a formal contract.
Yeah.
So if you get rid of a contractor before you even finish signing the contract phase, but they've actually done one round, which you don't use, can they later come back and make a claim?
So, well first off, anyone can make a claim.
No, and that's not just a technical point, because I've dealt with situations where people who basically have no legal rights make a stink, right?
And those practical problems are real.
They cost time and headache and money, but you're gonna make it less likely that they come back angry if there was an agreement, because then they can look at it and be like, oh right, I don't own this.
You can always try and fix it retroactively.
I mean, basically what's happening is if people work without a contract.
you're taking on risk that they might become angry. If you don't use any of the stuff that they created, you're probably fine, but there's always the chance that something else that's in there was inspired by it and they'll make an argument that it's a derivative work, so it's better just to have the contracts. Yeah.
For enforcing the EULAs, is it sufficient to just show that the code or that the process requires them to click through the EULA or is there some kind of record that needs to be maintained?
I just realized I'm supposed to repeat the question.
So the question was, for making the EULA enforceable, is it good enough to basically just show that there's code and that you have a flag that resets when it's a new version?
Or do you need to really show that they clicked?
I think that, so this is mostly going to come up if you're actually in litigation.
The only time it's really going to matter is if a judge is deciding, is this an enforceable contract?
And the reason that there's an issue here is that normal contracts, you sign between two parties, so you can show they talked about it and then they signed.
A EULA is kind of a take it or leave it, and so that's already on thin ice, legally speaking.
So you really want to make it clear that there was no way they installed this without being aware of it and making it clear that you're supposed to agree. In fact, at the top of the EULA, there's usually really bold text just to double check to say, this is a license you don't own the game, don't install it if you don't agree. So that you can argue that even someone who just kind of looked at it has to have known. There was no way they could have avoided that with their eyeballs. That's what you want to be able to show.
Thanks.
Yeah.
Okay, so I'm a freelancer and I sign contracts all the time, but I never write them myself.
And the truth is I wouldn't know what to write if I had to start one myself.
So the question is, is there any resources or like any templates, any place that it's like, if I had to start a contract myself, I have a guide.
So the question was, if you're a contractor and you need resources to figure out how to approach creating your own contract, presumably because you don't want to go get a lawyer, don't have time, what are those resources?
That's a tough question for me, because I'm torn between wanting everyone to do the right thing and have these contracts in place, but you can screw them up if you kind of do a hack job of them.
I'm not going to lie, of course there are people post contracts online all the time. Some of these sites are better.
If there is something that actually has comments on it that explains what's going on and it looks relatively professional, that's probably less sketchy. But I don't want to tell you to use stuff off the internet. It's easy to become a franking contract. And a lot of my worst scenarios that I've had to deal with come from, oh, we've got a contract, and then I look at it, and it's, you know, it doesn't even apply to the situation they're using it in, and so it actually makes both sides think that they totally have rights that they don't.
So.
I don't have a clean answer for you there, unfortunately.
OK, so is your suggestion just a lawyer, basically?
Yeah, if you can get a lawyer.
Again, it's not like you're going to have to have them draft it from scratch every time.
When I do a work for hire agreement for a studio, it's not going to be like I spend two hours every time.
They're going to get a form.
you know, put the settings the way they like it, and then slight tweaks depending on how they're gonna pay different people.
But it pays, if you do a lot of work, it pays to get a form once, where you've talked to a lawyer and said, look, here's what I want, here's the protections I want, what should I be thinking about?
And then you can use that going forward, right?
And that's sort of a tool, it's like buying a copy of Photoshop or something like that, right?
Okay, thank you very much.
Yeah, no worries.
The whole get a lawyer thing makes a ton of sense for all the contract work if we're just a small Studio for the EULA is that something that's a lot more approachable from like a template or you know hey This is what everyone on Steam does sure so The chances that you're going to have a large litigation based on your game, well, it depends on what the game is and how big it is and what the features are, right?
If it's multiplayer and there's all this virtual currency and people are putting in micropayments, you can see there's probably a lot more risk than if it's this couch co-op game.
rule that applies to all of this. Obviously scale what you can do to your budget. And EULAs, yeah, there are some fairly just cut and dry very simple EULAs. The biggest thing is just have the limitations on liability. Make clear that it's a license. All that other stuff I talked about, though, you should think about it if your game has those features.
Yeah, it's not top priority.
If you're a small studio, top priority is having those work for hire agreements, making sure you own the IP, and not signing random publishing agreements without reading them.
But all of it's important.
It's just, yeah.
There's triage.
Yeah, Yule is probably not as important if your game's simple.
Thanks.
The whole idea that these things are not magic and you need a lawyer sounds great, but how do I find a good lawyer who can respect an indie's budget and actually know something about games?
Sure, so the question was, it sounds great to say contracts aren't magical, get a lawyer, but what do you do on an indie budget to find a lawyer that understands that indies don't just have piles of money, to paraphrase.
So two things, one I would say that As far as them not enforcing themselves, some of that advice is actually just about once you have the contract, remember to stick up for your rights that you have.
And as far as finding a lawyer that will respect the fact that you're an Indy, I would talk to them.
I do initial consultations.
I think most other attorneys do things like that.
I would ask them hard questions and say, look, we're an indie, are you okay with this?
Are you flexible?
That sort of thing.
And make sure they understand the game industry and they're not just like sort of a general contract lawyer.
So I maybe don't spend as much time with lawyers as you do.
Where would I find them?
Well, I am one.
So you found one.
Is it good to have someone local to where you live, though, so you can meet in person?
Sure.
So there are a mix of topics.
The question was, is it good to have someone local?
To what extent do you need that?
And where do you find them?
Right, so as far as finding them, I would say Google.
Most attorneys are going to put their name out there and advertise what they work on and what their practice area is.
As far as locality, there are some, lawyers in the US anyway are licensed to specific states, but a lot of what I talked about is general principles of contract law.
There might be small differences between states, but.
a work for hire agreement's gonna look the same in almost every state.
And things like IP are federal law.
So if you're forming a business though, probably get a local business lawyer.
You know, you don't have to, you probably don't want to use someone from a different state.
Okay, I swear this is my last one.
Yes.
Are there like professional organizations maybe that specialize in games and indie game development?
Like, is there a place I can go?
Because I have tried Google and even Bing.
Like, I've tried many search engines.
What?
And I still don't have a great answer.
AltaVista perhaps?
HotBot?
Excuse me?
Ask friends in other studios. I get whatever it is all the time.
Yeah, and I would say that, I mean, I would say, normally the answer would be go to the bar association, but They don't really know a lot of people who do what I do.
The truth is there should be more of us for the game industry given its size.
But yeah, I would ask around if there's any kind of like the local IGDA might have connections.
I know I'm involved in that.
I'm involved in an organization that Indies work with called PlayCrafting that's in New York.
So like lawyers, if they're in the industry, they're going to be enmeshed with the developer community.
So you can ask through that.
Sure, okay, we have time for one more and then I'll take the rest and the spillover.
Hello, you briefly mentioned like independent contractor versus employee classification issues and you've said it was Very briefly.
And you said it was kind of outside your wheelhouse.
Who would you talk to in more detail about that?
What kind of person am I looking for?
Sure, so.
Easy two answers.
One, talk to your accountant, a tax person, someone who understands tax.
Could be a tax attorney or just like a CPA.
And businesses definitely need a tax person.
Two, I just want to note a tiny bit more detail.
It matters, the difference for tax purposes.
This contract cannot magically make them an independent contractor.
A lot of indies want to classify them because if they're an employee, it means that there's other obligations, paying taxes, that sort of thing.
The fact that you write, this person is definitely an independent contractor, doesn't naturally make it so.
There's a lot of things, so basically the IRS is gonna say, okay, that's nice to know.
I'll take that into consideration, but I'm gonna look at these six other things.
Does it look like you're treating them that way?
So just be aware of that and definitely talk to an accountant.
Okay, all right, so we'll.
CPA or tax attorney. Someone who knows tax. Thank you very much.
I'm happy to go to the spillover room.
