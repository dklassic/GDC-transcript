It's really an honor to be able to talk about Flash Games today, to be here at GDC.
I was just thinking about coming in today how 15 years ago I was trying to pay for college.
I was struggling, trying to make rent.
And we had a community.
We had developers.
We had sponsors.
We had a group of individuals who not only let me eat, but also eventually pay for college.
pay down my debt and just pretty much survive.
And this is the Flash Games Postmortem.
This is a talk about the indie spirit, about an industry that rose from the most chaotic place to make games and then the fall of sponsorships and the fall of technology and what happened next.
So my name is John Kinney.
I work at Kongregate.
And I'm just gonna get right into it.
So we've always looked at Flash games as these kind of lunchtime time wasters, these distractions, these things that we kind of take for granted, but in reality, Flash games and developers, we really formed the foundation of the modern indie game scene.
We built really incredible things, and we saw that many games and developers were born out of flash. We had games like super meat boy, evil land coming out of game jams. All these games had their foundations in Flash and building content quickly and easily to the web. As Flash developers we blazed new trails, we defined what it meant to be Indie and we pursued really innovative content and this kind of content that directly enabled the greater industry to move forward in pretty colossal ways.
When we're talking about the Flash games post-mortem, this is the story of the prototype indie.
This is the story of this ubiquity, this insane technology, this impact on our industry that was really unlike anything else out there.
My name's John Cooney.
I've been a Flash game developer for 15 years.
I've developed over 100 Flash games and I've produced 20 to 30 more.
I've worked on games like Achievement Unlocked.
This is the only level, Hedgehog Launch.
I was the creator of my own studio in college, which helped me eat and pay for bills.
During that time I also worked on Flash Rites, which was a resource for helping developers find ways to figure out how to protect their work and to learn about fair use.
talk about copyright.
I moved over to Armor Games and was head of game development there.
Worked on about 70 titles while I was there and then I'm now a congregate working on our premium games initiative and our launchpad program, which is our incubator for experimental games.
really quick housekeeping. We're covering about 19 to 20 years in an hour, so I'm going to go really, really fast. There's about 150 slides, so I'm going to go nonstop. I'm going to put the slides online because I think it's really important for you guys to go back and take a look at the games and just kind of everything that's been written. We're also going to post it to the Congregated Developers Blog, so you can get it there after this presentation.
I also really wanted to clarify that this talk isn't to talk about why Flash is dead and to make arguments.
We could spend hours doing that.
This is really to have a conversation and to talk about the amazing things that came out of the Flash games community and to really reflect on the last 19 to 20 years.
So okay, let's go.
In 1998, we saw the birth of Flash and it was because The internet was really slow and it was really young.
And back in 1998, we were using America Online and Dial Up.
And this was really the normal thing to do, was to have a Dial Up modem and hope your mom didn't pick up the phone so you lost your connection.
We were downloading illegal MP3s, but they took 10 minutes to do because they were so big.
And we didn't really have broadband at the time.
Broadband was not really what we were having in our homes.
Just for cultural context, this is the year that Titanic won the best picture as well, just to kind of show you how far back this was.
And this is when Flash came onto the scene.
It was 1998, and Flash came into browsers and said, we're going to have this lightweight and powerful plug-in.
so that people can create animations and interactive work.
And we're gonna make it really lightweight because the internet is so slow.
And it could do that because it leveraged vector technology.
It really found ways to really push a lot of data and information through, instead of sending bitmaps or large image files, instead it's...
wrote the instructions for how the compiler should actually recompile the information back into the plug-in.
So instead of sending 60 frames of animation, which was really heavy at the time, it would just send the first frame and the last frame and use math to interpolate where that should be.
To give more information on that, we can take a look at these two photos and say, oh, these are kind of the same photos, but in reality, the flash vector that was being sent was just a quarter of a kilobyte. It was tiny for the time, and this technology was really cool.
Flash came in two parts. There was flash, the program which you used to make your content, and there was flash player, the free plugin that you used to display that content. Flash content required the download of the browser plugin.
But luckily, this was the late 90s.
And in the late 90s, you could get anyone to download anything.
We had browser plugins.
We had Bonsai Buddy.
It was a great time for the internet.
And what that resulted in, along with that compelling content, that animation that was really clean, crisp, 30 frames per second, is we got.
ubiquity. We got a plug-in that could be played pretty much anywhere. By 2009, 99% of computers connected to the internet had flash installed. But flash was still young. It was an animation tool. We didn't really view it as a games tool.
But game developers are smart, and we saw that they were creating quizzes, point and click adventures, these sort of really bare bones, almost early hypercard sort of games, and putting them up on the web.
And in 2000, we saw ActionScript arrive, and this is when we really got our hands dirty with programming.
It was very easy to use.
If you're already a programmer, it was very accessible.
If you've never wrote code in your life like I did, I could figure out how to make really bad games with really very little amount of code.
And.
What we started to realize is that we were stumbling upon the holy grail of game development.
This was a tool that was easy to script.
It was easy to draw.
You could deploy immediately.
There was a huge audience that was really excited about this content, and it was accessible.
Everyone could pull up a browser, whether they were at the local library, their school, their home computer, there was a way to get to this content.
And this was really a cross-platform dream.
And this was in the 90s, in the 2000s, the early 2000s.
And this was cool.
We exported once and it worked everywhere.
And we didn't even test it half the time.
It just magically worked everywhere.
It was awesome.
And that brings us to the first really important cultural part of Flash Games, which is Newgrounds.
And in 2000, Tom Fulp released the automated Flash Games portal, which allowed you to immediately upload and view and engage with content immediately.
This was...
immediate. The moment you hit upload, you saw a spinning bar, and it instantly was on the site running. This was before YouTube. In fact, this was five years before YouTube.
This was in a time where screens were pretty static. This was really early on the edge of what we call Web 2.0 or the interactive web.
And it really opened up the idea of instant communities, being able to communicate with our users, but also communicate with other developers, to get feedback on our games, for people to get engaged with our content.
There were scores, and reviews, and rankings, and forums.
And there was artists in this massive community, which was really incredibly important to Flash starting.
Newgrounds began to see a swell in the Splash game content as developers, programmers, animators, musicians were coming together to work on really small projects and to be creative together.
And one of the things we saw was the emergence of the collab, which is short for collaboration, which was really just setting up this one-time project together and working on it and seeing how it goes.
And it was really cool because we could continue to work with other developers that we had never worked with and to get to know a bunch of people inside our community and work together.
And this may sound familiar because this is really what the prototype indie is.
This was really developers creating what they wanted, self-publishing, gathering this massive audience, making fans, finding their own unique voice in games and then delivering it on their own.
So as developers, we built a lot of games.
And we worked with a lot of people.
And we especially worked on small ones.
And in fact, 75% of developers were working on games that were less than two to three months in duration.
And a quarter of that were in less than a one-month cycle.
The question I always get is why are Flash games so small?
There's several reasons.
The first one is that the file size had to stay small.
We're still in a restricted bandwidth time for the internet.
Flash took forever to compile really large files.
One of my favorite stories is I had to run to school to compile a file because my computer was under.
performing and compiling. So every time I had to go compile the game, I had to ride my bike to school and hit compile and then run home to be able to upload it.
We also saw that long Flash game development was getting outpaced.
There was a lot of games coming out, the art was evolving, the technology was evolving.
Everything was evolving really quick and if you're working on really long games, we weren't... they were getting outpaced by the progress of Flash games at the time.
And we weren't making any money, we were just doing this for fun.
This was just our sending things out and seeing how it goes and really enjoying the process of it and just making games.
So we started asking ourselves, how are we going to get paid to do this?
How can we make this our living?
Because this is really a rad process.
And the first place we started was web page ads.
We found out really quickly that you could go on to Google AdSense and go download the code and put it on your page.
And magically, you're now earning money on your games.
And ads at the time were really good.
We were getting $2 to $10 for every 1,000 page impressions.
So if you had a viral title, it was really doing well for you.
So we just put a couple of banner ads around the game, put it up, but we saw this other correlation. We realized that when we're making good games, we're getting a good amount of traffic, and when we're getting good traffic, we're getting those ad views, and those ad views are giving us more income.
So there's this direct correlation that the better the games were, the more innovative, the more interesting, the more standout the content, we were basically making more income, and we were getting paid for it.
That was really cool.
Other people who weren't making games also figured this out.
Website owners around the internet were discovering that these flash games are getting a lot of traffic, they're getting a lot of revenue, so they started collecting this content into places called game portals.
And very similar to Newgrounds, there were either long lists or large places with tons of icons.
And they got this content in a lot of different ways.
The first thing they did was ask a team to build it.
If they had a specific idea for a game, they would pay that team to build it.
They would license it, they would find a game already existing, and then pay to have a version of that game directly for their site.
They asked for it.
They said, hey, your game's really good.
Would you mind bringing it over to our site?
I might give you a promotion for that.
Or not.
Or steal it, which was a really fun way of getting a game as well, because it didn't cost anything.
You didn't have to ask permission.
So funny enough, that was the most popular way to get content.
What we found was this kind of pirate culture around games. Stealing games was the cheapest and easiest way to get your games. So stealing was really rampant. Just an example of stealing, we have a number called time to steal, which is how fast did your game get stolen. The fastest game my content was stolen was in ten minutes. So the moment I put it up on a web page, someone took that game, They removed the URL lock, which meant you could only play it on that page.
They decompiled the file, they removed all my logos, they recompiled the file, they blocked all my outgoing links, and then they put it on their website, and then they tried to get that Google SEO to drive all that traffic to it.
And that was in ten minutes from releasing the game on the page.
And the reason that we do this is because the first person to mark it was the one who ended up getting the traffic, getting the Google juice to get them onto that page.
Because we had that community on Newgrounds and other places, players were really worried about us.
When games got stolen, we got a ton of emails.
We had players that said, hey, I really love your games, but I'm really worried that this other website is stealing your content.
Do you want me to go talk to them for you?
No, I can go talk to them, but that's super great, and I really appreciate that you care about me.
We just had these sort of interactions with our players, and this was a really cool thing.
Traffic and revenue was driven to these larger websites and portals and was being taken away from us.
So developers had to start thinking, how are we going to make money on this stolen content?
And that's when we saw the birth of the sponsorship market in 2005.
We realized that there was a stolen game economy here, that games are going to get stolen.
There was a way to make money off of that.
And almost as a really cooperative initiative, portals started paying developers for putting their branding in their games.
When that game got stolen with the branding on a different site, it drove traffic back to the main site.
And it actually worked really well.
For example, this is Kingdom Rush with the Armor Games branding.
The traditional sponsorship was really around just an exchange of funds for a logo, a little bit of an animation, usually some sound effects.
Developers would co-brand or they would find some special arrangement.
Really depended on who you were talking to as a publisher or as a sponsor.
But at the time, the sponsorships were really meager.
I retrofitted a game with a logo and some other things they asked for, and I earned an incredible amount of money. I earned $25 for that, and that was for an exclusive title.
Now, for me in college, this was an amazing amount of money, because I already made the game and I was just looking for a little bit of income. And I started replicating this model. I realized that if I kept giving this game to other people, that I would get more money. So anyone want to guess the second?
It was actually less, it was $20.
Well, actually it wasn't because they never paid me.
They ran away with the game and I never saw them ever again.
And the hard part was this was normal.
Developers were constantly getting screwed over by these really shady portals, these people asking them if they can have the content and then never responding after they give them the content.
And it was getting really bad.
In 2005 it was bad, but going into 2006 it felt like it was getting worse.
games were getting stolen, payments were not getting made, like I said before, the decompiled, recompiled code.
We started finding eBay listings for our games, like self-starting websites, have your own flash game portal and they were selling our content.
Websites were blocking our outgoing links, there was hostage tactics, that was a really fun time when I would have my game stolen and someone would say, I'll remove it for you if you give me some money.
And that was a real thing that portals did.
And there was a really strong feeling of, you owe us.
We're giving you the traffic.
We're featuring your game.
This is the kind of relationship we should have.
And this was kind of gross.
And I really want to say that this is really a handful of bad portals.
This isn't everyone.
This isn't Newgrounds.
This was just a really set of bad portals.
And they were all rising up together just because there was this gold rush on the flash game economy.
But luckily in 2006 there started to be a turnaround.
Developers were getting treated terribly, there needed to be a champion.
So there were really three companies that really stood up and said, it's time for change.
The first is Mochi Media, which opened in 2006 by Jamison and Bob, and it was a self-service approach.
You could go online and get yourself some in-game ads, some analytics, some distribution.
You could check on where your game's being stolen and located, and the other interesting part is now that games are getting stolen with ads in them, you can now make money when your game got stolen with those in-game ads.
There's different opportunities that were starting to rise up because Mochi Media came in and disrupted the model.
This is kind of a homework pick, but Kongregate is also a really important part of Flash Games rising up.
When founders Jim and Emily Guer opened Kongregate, they really wanted to create a place where devs could get a rev share on the games that they post to the site.
So every developer would get a rev share of the banner ads and later in-game purchases when those became available.
And Kongregate also really saw the importance of developer communities, player communities interacting with each other and engaging.
It's a really important part of making games.
And the final champion is Flash Game License, which was opened by Atom in 2007.
And it was a place where you could go onto the website, post your game, and sponsors could openly bid on your game or would openly offer up how much they're willing to pay.
And what this did is it really made the Flash Game model really transparent.
We started to see how much developers were making.
It made sponsors really.
start to battle each other to try to get the best titles.
And we started to see a shift back towards the developer.
We started seeing that sponsorships were getting competitive.
Around 2005, sponsorships were reaching $1,000.
But by the end of 2006, they were topping five and maybe $10,000 for content.
And the high quality content was always in demand and they were always getting pit against each other on FGL and other places.
This was the first time we started seeing developers reaching full-time status.
They started being able to pay to do this full-time, and their hobby is now suddenly the thing they're working on every single day.
And this also really, in a really strange way, strengthened the relationship between sponsors and developers.
Sponsors started to, the best sponsors started to stand out, and developers started to get to know those sponsors, and there was this happy sort of relationship that formed when you found the perfect publisher or sponsor.
The new options that started to open up from this was revenue shares, mostly media ads and content, contests and competitions, and then site licenses.
All these sort of evolutions of the original traditional sponsorship model.
And with this swing back to the developers in the forefront, with this innovative content continuing to come out, and people becoming full-time developers, it really started the Flash Game Renaissance in 2006.
And it was a really pivotal point for Flash Games, where this really insane collection of developers and websites and fans and people in this industry became an industry.
The Flash Games weirdly became a game industry, and it was really awesome.
And it attracted so many new talented developers and games were getting jump started through Flash.
Games like Dad and Me by Tom Fulp on New Rounds with artists Dan Paladin and Dustball was a collab that was one of those games that really set the bar for, wow, this game feels like it's a PC console title.
This is a really high quality Flash game and really kind of defined the quality bar for 2005, 2006.
We saw games like Kitten Cannon, which was this really early viral title by Dan Fleming.
And it kickstarted an entire genre of launch games and really got people creating this sort of content that went viral and was quick play, but had a lot of depth to it.
We saw games like Triachnid by Edmund and Florian, who it was one of the earliest physics-based games in Flash and was this really artistic vision and really kind of changed the way that we look at games on Flash.
This innovation continued to grow, especially under the sponsorship model.
Developers could be really creative and build whatever they wanted because they knew that the most innovative work, the most creative work, the most polished work was gonna be the one that got funded.
So they continued to have free reign to work on pretty much whatever they wanted without a ton of guidance.
And portals kept pushing the developers to be more innovative, to do better games that are more polished and to stand out because when the developer was winning, the portals were winning.
And this innovation and this push for innovation iterated so many genres in Flash.
We had games like desktop tower defense that really innovated the tower defense genre.
We had launch games like hit and cannon, defense games which were more one-sided tower defense game, puzzle physics games, I said that backwards, escape the room games.
Yeah, we just had all these genres that were erupting from Flash and were continuing to be innovated in Flash.
And we started to see that developers were using Flash as a benchmark to see if their innovative ideas worked.
One of the earliest ones we saw was N from MetaNet, who created the game in 2005 in Flash and was a cult classic immediately.
It was one of the first browser games to win an IGF Audience Award or an IGF Award in general.
and it hit consoles and handhelds in 2008.
It was one of the first Xbox Live titles.
But seeing the success in Flash was what let that game end up on Xbox Live and continue to let it continue to live on PlayStation 4 and other platforms.
Similarly, Super Meat Boy was originally a three-week development project in Flash that was launched on Newgrounds.
weeks we actually were seeing that it was getting close to half a million to a million downloads just playing this game and that was a really clear indicator that there is something special here and that's why Edmund went and made it into a full title.
This is like the early story of Indie Game the Movie that you may not have seen. This is what was behind the scenes going on before Edmund was on camera doing that.
This really opened up the idea of virality, that great games would rise up, get shared everywhere, would get posted on social media or different websites.
And viral was becoming an accepted real way to make games, and it was wrecking our websites.
We were getting on Dig and Fark and StumbleUpon, and it was a real mess.
The amount of traffic we were getting was taking down our websites.
In fact, one of the scariest things in college was I had no money, but I had my game on a website, and I got a call from my bandwidth provider saying that you're not only out of bandwidth, but you're double up on what you're doing.
and you didn't deploy your banner ads yet, so you weren't making money on this game yet.
So I immediately had to turn off my website, and I couldn't turn it on for over a month until the ashes were scattered, and I was really sad.
Yeah, it's a sad story.
Some games went extremely viral.
We have all played QWOP by Bennett Foddy.
It's this really wonderful, bendy, joint-controlling running game.
And it broke the internet.
It was just this incredibly easy game to share and to play with other people, even though it's a one-player game.
It's one of the most viral flash.
games of all time and we all rallied and cheered when it was featured on a television show.
It was on the office on NBC that you could see the office workers playing co-op in the background. It was also the inspiration of maybe the best Flash cosplay ever done.
We saw games like Line Rider, which was one of the first games to have that sharing culture, building tracks freehand, sharing them, playing them.
Currently, Line Rider has 1.7 million videos on YouTube.
And with some of the earliest pieces of YouTube content being shared, you can look at videos that are over 10 years old on YouTube that were from Line Rider.
We continue to see our community grow.
As we were more innovative, as we attracted more people, we worked with different people, and these communities started to appear all across the world.
There was micro communities in various different countries, there was online communities through Newgrounds, Karupa, TIG Source, and developers hosted their own player communities.
this really amazing time where we could talk about games over AOL Instant Messenger, which was our chat program of choice.
We were talking on email forums, we were learning how to program together, we were growing together as a community.
And it was really important for Flash to have these communities growing together.
And Ludum Dare was another community that was growing.
And we found that a lot of games coming out of Ludum Dare were Flash games, because it was just a natural progression for these tiny little experimental games that you could work on.
We saw a lot of Flash developers between Ludum Dare 19 and 28 building great Flash content.
And the younger developers started to rise. We saw developers like Tyle Glale, who worked on Closure and Aether, start to come out of the scene because he was given the opportunity. He was 15 or 16 at the time and he created a procedurally generated physics-based terrain game called Crazy Car at age 15. And it was at 2 million plays by the end of 2005. Another developer that I know personally, Chris Chaps, he sent me a quote and he said, I never.
I never even knew I'd fall into games industry at the age of 16.
Having full creative freedom to make games that anyone could play in their browser was insanely cool.
And without Flash, I wouldn't be doing what I loved.
He was given that opportunity to stand out and to do things in games, which was a really powerful part of Flash.
Here's a longer quote from Anya, who was the developer relations manager at Nickelodeon or Addicting Games.
This is one of my favorite stories in Flash, so I wanted to share all of it.
We had a developer who made.
irreverent, slightly minimalist games. We found based on his humor and skill, he was maybe 25. But his dad always signed the contracts, which we thought was really odd. And then one day he sent us an e-mail saying that he bought his first car.
And we were like, oh, that's kind of late for buying your first car. But it turns out he was only 16 and not only was he buying his first car with the money he had received from licensing his flash games, but he had just got his driver's license.
The Flash game community really let young developers rise up and get their first titles out there and succeed.
A lot of this was due to the fact that tool sets started to emerge around the Flash game scene.
There was a lot of really great titles coming out of these tools as well.
Tools like Flashpunk, who was Chevy Ray Johnson's library for making Flash games, it really helped elevate developers and get them past the initial problems that Flash developers had to figure out.
Like, how are you going to deal with delta time or animation or collision?
It resulted in titles like Give Up Robot by Matt Thorson, the creator who went on to make Tower Fall, or Radical Fission by the Vlambeer team and Super Puzzle Platformer.
And then we had tools like Flixel, which was this gorgeous tile-based editor which pretty much covered everything you had to do in games and if you were gonna make a tile-based game.
And that was created by Adam Saltzman and ended up with titles like Cannonball and Looming and Tower of Heaven.
And then Starling came out later in the game by Gamua, and it was a really nice tool because it leveraged the access to the GPU for the first time, which was amazing, because everything was on the CPU before that.
And we had games like Incredipede and Samorost and Haunt the House come out.
And we saw Flash evolve as well.
We were in ActionScript 1, we were moving into 2, but now we're in 3, which was object-oriented programming, more mature tools, and animation performance was getting better.
So everything was on an upward trajectory.
And Flash gave us all these robust tools, but they also gave us a bunch of really weird tools. In some ways we weren't sure if they knew what we wanted or what we were going to do with these things. I feel like they kind of gave them to us just to see what would happen. So as curious developers we just kind of ran with it. One of the first examples is Flash had local save objects. These wouldn't reset with your browser cookies. So a developer named Raytendo created a game called You Only Live Once.
And the first time you play through the game, you get as far as you can, and once you die, you're dead.
And players could not figure out how to reset the game.
Every time they reset the browser, it would show a different scene of what was going on in the game.
The first time there was a funeral, the second time you see the body getting buried in the ground, each time the player frustratingly trying to figure out how to reset the cookie so they can try to get further in the game, they would see another scene.
I think there was like six or seven scenes, it was really hilarious.
We knew where you're loading your Flash files from.
And players didn't know this.
And some portals didn't even know this.
If there was a portal we didn't like, we did things like mess with the difficulty, or flip the screen upside down.
Or we just played these practical jokes as developers.
But we also used that to our advantage.
We sometimes created specialized content.
For example, if we knew the game was being played on New Grounds, which is somewhere we really liked, we would put in special features or kind of pander to New Grounds a little bit.
We were very much a pandering audience in Flash.
flashed to this insane thing where you could load a flash inside any other flash file.
And you could have that flash file load another flash file inside that flash file.
And you could do that at runtime.
You could do that whenever you wanted.
And there was this really weird thing that you could build these nested experiences through.
You could also talk to other flash windows.
I had a game called Achievement Unlocked 2, where I had one window.
open where you're playing the main game, but if you just weirdly opened up another window, it would take you to the iced coffee mod, which was a counter to the hot coffee mod from Grand Theft Auto.
And there was iced coffee there.
And there was secret achievements in that window.
Another fun thing that we got access to is Nintendo Wii's Opera browser decided one day it was just going to support Flash.
And we decided that we were going to take advantage of that.
So a lot of developers started creating their own portals around Wii-based Flash games.
And it wasn't an amazing experience.
In fact, it ran kind of slow, and it was kind of awful.
But it was the first time that we got to say that we made a console game, and then just smile at our parents.
And Flash was kind of crazy and players were really engaged with us. But one of the funniest things that also happened a lot is players mistook our bugs as features. A developer named Oliver Joyce made a game called Swords and Sandals. And he was using an array but didn't really realize that if you put commas in the player's name box that you could kind of screw with the array that had all the save data in it. So players started creating this phenomenon called the comma hack.
And they would create these videos that were getting quarter of a million, half a million plays in them to explain the comma hack.
And this culture around hacking this game opened up.
And when Oliver went to go make the next Swords and Sandals, the biggest question he always got from players was, is the comma hack feature going to be in the next game?
Because that was our favorite part of that game.
So Flash had really weird features, but it also kind of let us be weird ourselves.
We created all these really odd, interesting, kind of out there games.
One of the best examples is Don't Shit Your Pants, which was a text-based adventure.
it's a 20 second simulator of walking to the bathroom as a text-based adventure.
And it was one of those games that was just really obscure and really different, and we point out and say, oh, yeah, that was Flash.
That team went on three years later to make Rogue Legacy.
And if you're walking around inside the castle in Rogue Legacy, you'll actually see pictures from this game.
We had games like Robot Unicorn Attack, which for me, I think it really defined the kind of games that Adult Swim worked on and the style.
And the song Always by Erasure was a song that I can still hear in my head in the middle of the night.
And this game just kind of blew up into the stratosphere and had this really nice cult following and had ports to iOS and Android.
And this is going to be the one slide where I talk about myself.
I worked on a game called Achievement Unlocked, which was a game where all you do is collect achievements, and that's really the goal of the game.
So just doing really dumb things inside this environment, and whether it's typing in the Konami code, whether it's refreshing the page, whether it's...
not touching any buttons for five minutes, like those sorts of things that aren't really a game, but players seem to really enjoy collecting and filling out lists, so I made 500 things to do and just let players spend their afternoon trying to figure out what those were.
It was, my favorite part of the game was there was a guinea pig stuck in a hamster tube.
That's just me, though.
The flash game industry continued to grow and by 2009, 2010 the trajectory was insane.
We were seeing popular releases for games getting over a million plays in the first 24 hours.
Mochi Media at the time was serving 40,000 portals.
There's a ton of tiny flash game sites and we were seeing our content spread across thousands of websites.
And we had our first Flash Gaming Summit.
We met up in San Francisco here back in 2010.
And we, for the first time, were face to face with each other.
Because we had never seen each other.
We worked on the internet.
And every once in a while we sent chat messages.
I didn't meet the artist I worked with for three to four years until Flash Gaming Summit.
In 2009, these portals were getting crazy traffic.
Miniclip was hovering around 250 worldwide.
Newgrounds, Armor Games, Kongregate all top 1,000.
Addicting games pulling up on Miniclip.
And the new models for making money were still rolling in.
There were sponsorships with bonuses.
There was pre-roll ads, interstitial ads, and microtransactions were starting to come into the game, too.
And by 2010, we were seeing sponsorship prizes rising to over $100,000.
This is just a reminder.
These are games where.
We just are going to do whatever we want.
We're just going to put in all these features.
We're going to do the art in the way we want to, the team we want to build.
And we're going to get paid up to $100,000 for this game.
That's a pretty remarkable thing.
And the sponsorship deals were getting even more complex.
And developers were starting to get their rights secured for sequels, because the best developers were starting to get locked down by a platform.
By 2009, we were seeing that 30% of Flash game developers were using this as their full-time job.
And 60% of developers were just working on their own.
They were just working solo on a lot of their projects.
And the other fact we started to learn is that 16% of all developers were making more than $1,000 a month on their games.
We started to see lots of different regions start to benefit from Flash games.
A lot of smaller, it wasn't just US, it wasn't just Europe, we started to see these smaller game communities start to rise in other countries as well.
With Flash Rising, by 2011, we saw over 18,700 titles on congregate.com in just 2011 alone.
That's averaging 50 a day, and that's around every 30 minutes someone is uploading a new game to Congregate.
It's also worth noting that Newgrounds at the time was peaking somewhere around 200 for games coming in every single day, or sorry, animations and games coming in every single day.
There was a lot of content being made.
We also saw the rise of social games, which were all flash-based and were starting on a new platform called Facebook. And Facebook games had this big bang that started with a gold rush and many larger companies were exploding on the scene trying to cash in on this new social media thing that was going on.
the age of microtransactions begins, and we start to see that these microtransactions were starting to be used in casual social games, but also MMOs and RPGs.
And we started to see that flash games were making a lot of money.
Farmville in 2009 made a billion dollars in revenue by 2013.
It's pretty safe to say this is the highest grossing flash game we've ever seen.
And then additionally, Candy Crush, while it was also a mobile title, was seeing somewhere around $1 to $1.33 billion in revenue a year.
We started to see MMOs and RPGs rise up.
The East was starting to localize in the West.
We had games like War Toons, Rise of Mythos coming in.
We saw that AAA games were getting involved in Flash.
Autodesk's Scaleform allowed you to build your UI and pieces for your game inside Flash and then export to whatever you were working in, C++.
And games like Elder Scrolls Skyrim and Borderlands and StarCraft were building all of their UI in Flash.
One of the funniest things is, I'm skipping ahead a little bit, but players used to get really worked up and saying, I don't want Flash games on Steam, I don't want to be playing those Flash games, and then you look at their library and it's full of these titles, so they just never knew that Flash was part of the games that they already loved and played.
We started to see reactive content start to emerge.
PETA created a game called Cooking Mama, Mama Kills Animals, which was right around Thanksgiving.
It's a game about...
cutting open a turkey just in time for Thanksgiving.
It was real gross, but it got a lot of press and news.
And we started to see other controversial titles and reactive content start to come out.
We had games like VTech Rampage come out, and the news went absolutely insane for that.
And games like Smuggle Truck, which is also known as Snuggle Truck, for platforms who wouldn't accept Smuggle Truck.
Sorry.
The Flash game art scene was evolving as well.
The art in Flash games went from these really beautiful rainbow gradients and static-y 12 frames per second tweens to these really gorgeous frame-by-frame animated.
titles. We had games like Alien Hominid, Dad and Me from Dan Paladin. Nitrome was finding their visual style and it was gorgeous and continues to be gorgeous in the games they release for iOS. I really like Nitrome because they really embody the Flash game spirit and a lot of the titles they make for iOS and Android.
Amanita Design was building these really lush, beautiful environments in a place that was normally just reserved for vector and for hand-drawn vector animation.
So this was a really cool piece that was starting to come in.
Jim, who is a developer I worked with for a very long time, created these really gorgeous, artistic, cartoony, poppy animation styles and art, and games like Sushi Cat.
came from him.
We also saw this throwback to this 8-bit style.
Terry was working on games like Hexagon and VVVVVV and Don't Look Back, that was six, okay.
And we also saw Oracinal, which is one of our favorite Flash portals.
And these really gorgeous, beautiful, cute animations.
This is a game where you have to raise and lower your head as a giraffe to kiss the various giraffes that are going by, it's really great.
So that brings us to 2010 and the arrival of mobile, which is a very fun time for Flash.
Flash was struggling with mobile.
Apple and Google was opening their smartphones to third-party creation, but they was hesitating towards allowing Flash content onto the devices.
And Apple especially was really worried about how content was gonna be used on their devices.
This was a brand new device, and it made a lot of sense that they were concerned.
They were so concerned that Steve Jobs wrote 1,700 words about Flash.
This was really odd for the time because at the time as developers we were thinking, well, Flash is just this little plug-in that we use to make games.
To have someone like Steve Jobs who just released this incredible smartphone to be talking about Flash in this way was kind of hurtful.
We didn't really understand it.
But he said Flash is a cross-platform development tool.
It's not Adobe's goal to help developers write the best iPhone, iPad.
and iPod apps.
And we start to see this emergence of this war, this war of Apple versus Adobe.
This photo's a little gruesome, maybe I shouldn't have used that one.
It was during a time when the iPhone was drawing a lot of attention, Steve Jobs said flash isn't the right way forward, HTML5 is, and he brought up a lot of shortcomings, which were true, we had shortcomings in the flash game space.
Heavy CPU usage, everyone's had that like, laptop fan turn on and start worrying and then the battery dropped really low because we were using CPU. A lot of games were based in CPU because that's how it was originally written.
There was constantly these security flaws and patches having to be deployed. Players don't like updating Flash every three days. It's really not fun. But it makes sense because when you have 99% of machines, you can't do it.
having this technology, it's obviously going to be the thing that hackers are going to target and try to get into.
But Flash still tried to go to mobile, and Flash landed on several Android phones and the Palm Pre and other devices.
But it didn't last long.
Conrad attempted to create a small portal of games on Google's app using a lot of phones were using Flash at the time, and Google shut it down, saying that it violated their app's terms of service for creating an app store environment.
So there was really this pushback against Flash content going anywhere near mobile phones.
And Apple outright blocked the export of third party tools to create apps.
They wanted you to be building games in their ecosystem in the way that they wanted to.
And so Adobe responded by running these ads that were a little backhanded.
They said, we love Apple, but we just don't like how they do business.
It was a really odd thing.
The media outlets started to say Flash was dead.
And this was the first time we started hearing, Flash is dead, long live HTML5.
And this was the first death of Flash.
And I put death of Flash in quotes because there will be a death of Flash every three months from 2010 all the way to now.
Nearly every week a news article was running saying Flash is dead.
Another stake in the heart of Adobe.
And there was websites popping up called Occupied Flash, which was trying to get people to uninstall Flash off of like computers from people who don't know how to uninstall Flash. They want you to go around and help get things uninstalled. It was this really weird movement to get Flash off of people's computers.
people were calling me worried saying why are you making games that are going to break my computer? Why are you making flash games? My relatives were worried about me. They said are you going to have a living because flash games are dead, right? It was this weird heavily covered rally by the news organization about a browser plug-in.
which is really bizarre.
And the industry was scrambling to hide Flash.
We started to see a lot of these brands starting to obfuscate the Flash part.
Flash Game License became FGL, and Flash Gaming Summit became FGS.
And devs were starting to remove Flash from their studio names because they didn't want that associated with them.
And even Adobe Flash at one point decided, yeah, we're going to become Adobe Animate.
So there was this kind of backpedaling on Flash.
And Adobe responded by saying, we gotta compete, and started ramping up their tech.
And at one point, you could export Unity into a Flash file, and it was really cool.
And they started announcing that they were working on ActionScript Next or ActionScript 4, depending on how you like to look at it.
And we started to see a new generation of flash programming start to emerge.
And there was GamePad support coming, so we could make GamePad games.
And that was the coolest thing in the world.
But they also, around the same time, started saying that they're going to charge a 9% rev share on anything you make that makes over $50,000, but only if you use these certain technologies in this order, which was really confusing for developers.
And developers were already paying a monthly fee for these games, or to make games with Adobe, or were paying $700 a year for the upgrade every year.
So.
were really confused on why they had to pay a rev share on top of paying for the tools. Later Adobe would drop action script floor plans. Unity would pull out their Adobe flash support.
So it wasn't looking really good for flash. And developers were really worried. And they didn't know what to do. They were confused. They didn't know how to go forward. Flash felt like it was dying, but only because everyone was telling them it was dying. In reality, the flash portals were still doing really well.
Do they stick with Flash, the tools they know and love?
Do they move to native code to try to be on mobile?
Do they move to Unity, which was starting to appear and was starting to export to web?
No, HTML5, our savior, was being rallied super hard by everyone.
Everyone wanted HTML5 to come into existence and to replace Flash into, even Steve Jobs called it out like seven or eight times in his very long essay on Flash.
And HTML5 was really a good idea.
It was going to usher in non-proprietary game development.
We were going to be able to get in there and create new tools around it.
It did video streaming.
It had multimedia support.
It sounded like a good idea, but it wasn't there at the time in 2010.
In 2010, HTML5 was still a draft.
It wasn't widely adopted by browsers.
It wasn't uniformly adopted.
There wasn't that tool parody.
There weren't the things that we enjoyed in Flash.
available to us in HTML5 and CSS and JavaScript. So it was a little early. And there was starting to become this gap in technology because developers were worried about flash. HTML5 wasn't there yet. So what are we going to do? And in 2013, we start to see the collapse of sponsorships.
As sponsorships started to decline, it was a lot of things.
But one of the biggest ones is that web ads started to decline in revenue.
This was from a few different factors.
Mobile was up and coming.
Adblock was coming in and wrecking havoc on people's ads.
Developers needed to start using in-app purchases and other things to supplement their monetization, because it was no longer feasible to just build whatever you wanted, send it out there, and hope that banner ads were going to drive the revenue for it.
Less games were coming out, because there was less money there, and lack of sponsorships meant less traffic.
So there became this decline from 2013 to 2016 to now of all the portals starting to slowly decline in traffic.
To kind of simplify this graph, I just averaged all of it.
There was this slow decline downward.
The sponsorship market pretty much slows to a halt.
The large portals slow down or even just stop on sponsorship.
There was no longer enough value to be working on these really expensive games.
The smaller portals have to start folding because the large portals aren't creating new content.
And there's no way for them to get new content if the large portals aren't sponsoring.
And by 2014, we saw Mochi Media shut down.
And the company was one of those early companies that really came in and helped us make games and be creative and be able to self-serve with these tools and services.
So that was a really painful moment for our community.
And it happened right before GDC.
In addition to that, FGL in 2016 announced that they were going to slow down and stop the sponsorship marketplaces while there.
FGL is still working on other tools and services for developers, but the main sponsorship portal is down.
And we start to see developers leaving Flash.
And they spread out in all directions.
We had developers who were staying in web games, working on HTML5, working on Unity export.
We had others working on mobile PC games.
But many developers actually just got up and left the scene.
They went on to work on careers.
One of my favorite developers became a travel agent and loves being a travel agent.
But some still remained and made games.
They made it work.
They adjusted to this crazy collapse of sponsorships by finding ways to continue to make profitable games.
And it was really this amazing thing that even today, Flash game developers are making money on their games.
After Flash, we continue to see the exports of Unity and Unreal and all these other really great technologies.
3D is starting to become more commonplace in browser games.
And we really start to see this shift in technology usage on Congregate, especially around the turn of 2010, when the panic over Flash really began.
And even now in 2017, a minority of our content coming into Congregate.
is Flash. But it's still coming in and it's still being enjoyed by our players. The biggest uptick we've seen is HTML5 taking off. And that's a really great sign for the web platform.
New tools emerged for those developers who were working in Flash.
We have Haxe, Flixel, and OpenFL.
And we got a lot of great titles out of that, games like Papers, Please, and Defenders Quest, and Cardinal Quest.
We start to see new portals arrive.
We get to see Itch.io and Game Jolt come in and provide these really great user experiences around downloadable games.
And we start to see portals also move into publishing.
A lot of these portals were working.
with developers who are making really great games on a daily basis.
So becoming a publisher made a lot of sense for them.
Kongregate, Miniclip, and Armor Games are some of the bigger ones that turned into publishers as well.
And Flash continues to slowly get phased out.
We continue to see first banner ads were starting to slow down and then we start seeing ads getting paused.
Soon games will be clicked to start.
There's been this slow progression of Flash functionalities becoming less functional.
So now that we're in 2017, what have we learned from all this?
What has everything we've done since 1998 really taught us?
And what has Flash Games really done for us?
We learned that ubiquity is incredible.
We learned that being able to put your games anywhere for anyone to be played across the world is an incredible experience.
Spending time porting, getting your game ready, doing all that is a lot of work, but being able to export once and get your game everywhere is an amazing thing, and we haven't had a technology reach that level of ubiquity yet.
Through Flash, we learned that sharing culture is really important.
Being engaged with your users, being engaged with other developers, trying things you're not willing to try with people you haven't met before, but that you really want to work with, and then sharing your work with others.
It's a really important part of being a game developer, and it's a really important part about being creative and thinking outside the box and being comfortable with what you do.
We learned what it meant to be an indie.
We learned that...
We learned that the modern indie game scene was really influenced by Flash, and we saw that we could make money to eat, we could become business owners, we learned how to do taxes, we made quirky little games, and we ran our own businesses, and we were innovative, and we embraced it.
We set a precedence on how game developers and their games should be treated.
We thought about our relationships with publishers and sponsors and how it used to be awful.
We found a middle ground.
We found a way to work together.
We found a commonplace way for really great content to be featured so that it was a symbiotic relationship.
We were collaborative.
We weren't aggressive towards each other.
And we continue not to talk about Flash's impact on games enough.
I feel like that under the stigma of Flash, we really don't give it the chance to breathe and to talk about games.
Or being here right now is a privilege for me, because I get to talk about Flash games.
And we just do not talk about it enough.
And I have a constant fear that Flash games one day won't be with us, that we'll lose millions of games because browser support will end, or that we won't remember all the important things that Flash games have given us.
And the reality is that ubiquity is going to die with flash if we don't find ways to encourage our platforms that we work with now to try to reach ubiquity faster.
Flash games have pushed indie games forward in a really big way.
It's a big part of our history.
And it's always lived in the shadow of the indie game movie and the uprising of the modern indie, which is a really great story and is a really great part of our industry.
But it's important to look back just one further and look at Flash games.
But ultimately the thing we need to really focus on are the things that we're gonna lose with Flash and making sure that in the future we have these things for ourselves but also for the future generation of developers that come after us.
Those things like community, working together with other developers, showing your game, being.
feeling like you can do that in a way that's productive and working with players to make sure your games are fun.
Accessibility, making sure that everyone can get to your games, making sure that your games are not only accessible to the players that are playing at the library, but are also maybe playing on their phone or somewhere else.
Rapid innovation, the ability to just game jam, to just make stuff.
That's the most important thing you can do as game developers is to make.
And rapid innovation, rapid iteration, getting your games up is so important.
And of course, ubiquity, the ability to be anywhere and everywhere that you could ever, ever want to be with your game is so important.
And these are the things we need to chase as an industry and these are the things that are really, really important for us to support.
And that's it.
Thank you guys.
I have a few things to remind everyone about.
Please fill out your surveys.
It's really good feedback for me.
This is my first time talking at GDC, so I'd love your feedback.
I also wanted to point out that if you want to talk to me after this talk, there's a meeting area right outside the hall that I would be happy to meet you guys at. And I think that's it.
So I think I have like two minutes, so maybe two questions.
Go ahead.
Thanks, Joan. That was a fantastic and very bittersweet lecture.
So my name is Mark. I have been making flash games for about 8 to 10 years.
And my question is more specifically on Kongregate on the user side.
So that graph was very informative. It seemed like...
sure HTML5 was spiking and the swift was declining slightly. But what is the demographic of congregate on the web? How do they feel about flash games? Like do they play a flash game still and they're happy about it or they're like the media press that think flash games are evil and they avoid them. So I'm curious to hear your thoughts of what the congregate user base thinks of flash now.
Yeah, the reality is that...
The reality is that Flash games that were made 15 years ago still work today.
And a lot of the games on our site still function just the way they did 15 years ago, which is pretty amazing, especially as a developer being able to look at.
I uploaded my first game to Kongregate and Newgrounds.
And man, it's an awful game, but it still works.
And players.
What we've realized on Kongregate is that players who want to play the games that they're coming there to play will actually go and whatever way they have to, go and play those games.
When we saw...
the Unity web player start to get pulled out of Chrome, we saw a shift of about 10% to 20% of our users switching over to Firefox so that they could still engage with the Unity web player games.
Players want to play this content.
Players have voiced that they're nostalgic about this content.
Now that games are much older, maybe they started playing these games and it inspired them to be a developer.
So developers are really still excited about this content.
They're still excited about Flash games.
They're excited about where.
the future of more 3D titles for web will be going.
For the most part, they are not voicing their anger towards it as much as they're worried that the developers won't be making games in Flash anymore.
Thank you.
Yep.
Hi, my name's Matter.
I ran a company making Flash games and animations every two weeks for seven years.
So that was where I started.
This year I'm a speaker talking about your play stuff.
Which is great fun.
One of the things that really struck me about flash games a decade ago, especially in the George W. Bush era, was how many developers were using flash games and gameplay mechanics as a form of political commentary.
And I would love to see a talk later on, maybe next year or something like that, about political commentary through flash games.
Yeah, sure.
People like that idea apparently.
So what do you think the future is of games?
Because there was such an easy on ramp to making games with Flash.
Do you think there's a future of political games that would never be picked up by a publisher?
Is there a platform where people can do this as a future, do you think?
As long as the web is an open marketplace where we're all able to access it in the same way that we do now, that there's not any sense of.
Some people get priority over the internet over others.
I think as long as we have that, we'll continue to have a place where we can create games without the struggle of a platform saying, no, you can't do that.
The ability to upload our own games to our own websites.
I think it's incredibly important that the web stays open and that it continues to be a place where we can voice our opinions through our titles.
I might have time for one more.
Hi, my name is Judd, I'm a journalist.
You voiced a fear earlier that Flash games would disappear and not be preserved, even though they're an integral part of the history of indie games.
Are you aware of any efforts to preserve and maintain an archive of Flash games in a playable form?
Is that logistically feasible, and is there anything that Kongregate can do to help that?
Yeah, it's something that we've talked about internally, about what will be the future of Flash games.
But we haven't landed on anything.
And I know that a bunch of various portals and developers are also thinking about it as well, whether it's porting content or moving it towards something else.
I don't think we have a really good plan in place yet.
Emily's looking at the microphone, who's the CEO of Kongregate.
on how to preserve Flash.
There's not a good plan yet, but there's a...
Emily said that she had several meetings this week on how to preserve Flash, and it's gonna be an ongoing conversation on what to do with it.
Cool.
All right, I'll be right outside.
Thank you so much, you guys.
