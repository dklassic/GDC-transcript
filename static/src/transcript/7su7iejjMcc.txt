Alright I think we're gonna get started.
A couple of housekeeping notes first.
Make sure to fill out all your evaluations, not just for my talk, but of course, all the talks at the conference.
Silence your phones so you're not blowing up at any point throughout the conference, cause I will throw things, there are a lot of water bottles up here.
Wrap up room afterwards if anyone wants to keep talking.
on the second and third floor, I think on the other side.
And then everything will be up on the vault at some point as well.
All right, let's do it.
Hi, I'm Mike Jungbluth.
I'm lead animator at Volition, and specifically on Agents of Mayhem, which I'm here to show you today.
Some of you guys might be asking, what is Agents of Mayhem?
Well, let me show you.
The way I personally like to think about it is G.I. Joe meets Saints Row.
It's an open-world game with vibrant, diverse characters and 80s cartoon aesthetic with the over-the-top, irreverent tone of past Volition games.
Working on this game specifically has been a dream project for me because it requires the animation department to focus on the character development that integrates both narrative and game design in what we're communicating.
And we have the ability to implement and drive game feel and fluidity of the characters.
And it's all wrapped up in this really great stylized, aesthetic and tone, which is for me, like everything an animator could ask for and want in a project.
So we're gonna let this finish, just so you can kind of see the rest of it.
It's almost done, Hollywood doing his pew pew.
And then I'm gonna break down the entire process.
We go from the name of the character, how do we see that finalized in the game?
So like I said, this was a dream for me, but as with every dream, there are going to be challenges that threaten to turn it into a terrible nightmare.
And for us, the scary part of our dream was the large cast of unique, diverse, playable characters to be set in an open-world game.
And this specifically was because each character was going to need, out of combat movement, combat movement, combat abilities, interactions, vehicles, essentially all the things that you would do in an open-world game.
Which means the million dollar question was, how many characters do we want to play as and how many can we actually let you play as?
Answering that question for animation meant defining and understanding a number of variables.
A good place for us to start answering those questions and understanding what the expectations were going to be for us were by looking at some other games that were out there at a time to see what they were doing.
But we really had no direct competitor to give us all of the answers.
Wouldn't that have been nice?
Games with multiple hero characters are largely arena-based, focused on one primary mechanic, which is often combat.
The fluidity and feel of multiple mechanics and all this crazy traversal was fairly limited, so there wasn't a whole lot to pull from there.
And open world games are largely focused on one playable character with a really deep suite of moves that fluidly support all of the mechanics.
Our directive was that we wanted to focus on the unique individual personalities of characters in a MOBA, but with higher fidelity of movement to be competitive with other open world games.
So again, we wanted all of the things.
But the one thing we did know was the team and the tools that we had at hand.
This is the largest animation team Volition's had on a single project, with twice the number of animators and dedicated technical animators, focused entirely on the editor side for the majority of the project, specifically two technical animators in that case.
This was also the first project to use MotionBuilder, as all past games had used 3ds Max and BiPed.
So we certainly had the support of the studio, but again, a number of new variables to take into account.
But before you can even sit down and start animating a character, you need to know who they are.
And what we needed to know was how to understand both the design and narrative of each character so that we can communicate a fully realized and cohesive performance.
And the way we like to make sure we're consistent and clear with these is that we establish the character one sheets.
With these sheets, we can quickly define all of the core aspects of a character that we need to communicate with our animation.
We see the art, the gameplay design, the high-level narrative goals, their personality, and their motivation.
Instead of having to refer to a big wall of text anytime we wanted to get to know a character or reacquaint ourselves with them, this provided a consistent and clear reference point for everyone on the team.
So let's break down each portion of the one sheet to see what we consider necessary and important when animating an agent of mayhem.
So here we have Fortune.
First up, what you see on the sheet, and it's pretty straightforward, the character's name, where they're from, their concept art, and their signature weapons and equipment.
So Fortune is from Rio de Janeiro.
She has her drone Glory, and she has two pistols.
Next, we use Maslow's Hierarchy of Needs.
This is used to quickly define the driving objective of the character, and define the core motivation as to why they're fighting Legion.
The color of the level is then going to be used throughout the rest of the sheet to make sure that the core objective is carried throughout everything.
So Fortune is all about esteem.
She's driven by her confidence and her achievement.
She doesn't really feel or need to worry about having to fight for things like family, security, or basic physiological needs.
Below Maslow's Hierarchy Triangle is the agent's favorite music.
Fortune's favorite music is reggaeton.
And figuring this out, what their favorite music is, really became one of my favorite elements of the character.
See, a big part of a performance is being able to maintain the emotional state of the character.
For actors, maintaining that emotional state throughout a shot or action can be measured in minutes.
For animators, it's hours or days.
This is where knowing their favorite music becomes really important.
Listening to their favorite genre or artist allows you to stay in their headspace for longer amounts of time.
It can speak to and influence timing and personality choices.
And it helps to unlock additional depth to their character as you search out new artists and become more immersed in the culture of their music.
Even if it's a genre of music you really dislike as I initially did with reggaeton, sticking with it actually can become a really important part of the animation ritual when you're working on the character.
With Fortune now, if I'm not listening to reggaeton as soon as I need to do something with her, it just doesn't feel right anymore.
All right, so next on the design on the character one sheet is this middle part, which is the character's gameplay pillars.
This is kind of a chart Voltron that is meant to show how the core agent gameplay relates to the agent's personality.
So let's start with the ring on the outside of it.
This is specifically their ability ring, which is broken into five sections.
In the top left is the agent's special ability.
This is meant to be used multiple times throughout a battle.
Here, Fortune fires off an AOE blast.
And in the top right ring is their Mayhem ability.
This is meant to be used once every few battles.
For this, Fortune has her drone create a Death Blossom stun blast.
The bottom three sections of the ring are the agent's passive abilities.
Now, while these often don't require any specific animations, it does speak to their play style and personality, which is really, really important for animators to keep in mind, as those help to define the characters and the player's in-game performance and play style throughout.
So knowing where we should lean into certain parts of the character's combat or movement suite is important.
Okay, so now looking at the big triangle in the middle, at the very top of it is what we call the trait force.
And this itself is broken into four sections.
So we're gonna enhance it CSI style here.
Amazing.
So this is broken into four sections.
The triangle at the top is the character's must-have defining characteristic.
This is their high-level pitch.
Fortune is a high-tech pirate.
That's who she is.
The triangle at the bottom left is the strength of the character, either in personality or in gameplay that we wanna make sure is often highlighted and that we lean into.
Fortune has a really carefree attitude.
That's important.
The triangle at the bottom right is potential pitfalls.
We can see the character falling into.
These are areas we really want to make sure that we're always kind of weary of, as it could make the characters unenjoyable or too stereotypical.
We didn't want Fortune to be too much of a pirate, so no Rs and ahoy mates or peg leg or anything like that.
The triangle in the middle is the character secret.
This is something we don't always overtly state to the player or in the game at all, or even that this character would tell another character in the game.
But it's something we use to help round out character and kind of give them depth when we're thinking about them and working on them.
So with Fortune, she's really just doing all this for the money and tech.
We found that if it's a really serious character, giving them kind of a silly secret helped to keep them a little balanced in her head and then vice versa if they were really silly, giving them something a little bit more serious.
All right, so the next triangle is the agent's unique traversal type, fortune canaridash.
That's important to know since we gotta animate it.
The triangle in the middle are the range triangle, which signifies what range the agent and the character is best suited for their weapons and abilities.
Fortune is a short-range character.
And at the bottom right is the combat triangle, and that defines the play style and role of the agent's abilities and weapons fall.
So this is within regards to mayhem, lethality, and durability.
Fortune lies between mayhem, which is how much they should use and rely on their abilities, and lethality, which is how much damage they can output.
And then finally on the sheet we have our coordinate graphs and these represent the inherent personality and ability of the characters.
The way these work is that on each line of the graph are two opposing sets of traits and then you plot the character on the graph where they fit.
So specifically on the left is the personality graph which from top to bottom has reserved to showy.
This describes how flamboyant or over the top an Asian is.
Are they more willing to be the strong silent type or are they super boisterous in everything they do?
Fortune's pretty damn showy.
From left to right, we have lawful versus chaotic.
This describes how much an agent follows a sense of order.
Are they more honorable or are they more reckless?
Fortune's rather chaotic.
On the right is we have the ability graph.
And this is where at the top, natural versus tech.
And this describes the agent and their inherent ability set.
Are they naturally capable of doing everything that's going on, or do they really need to primarily rely on their tech to be successful?
Fortune's right in the middle of this, meaning that she's as naturally capable and gifted as she is at using tech.
From left to right, we have team player versus loner, and this describes how well an agent gets along with others.
Are they the type that rallies around teammates, or do they prefer to hang out on their own?
Fortune's much more of a loner, reflecting both her placement on Maslow's hierarchy and her secret as well.
So, once you know all that, stepping back, it means that you can get a really quick read on who Fortune is very, very quickly.
So what we're gonna do is we're gonna look at the other four agents that we've announced so far in the game, as well as are gonna be showing up throughout this talk.
First up is Hardtack.
We can see he's a social, crass sailor from America that doesn't fuck around.
He loves classic R&B and doesn't keep any secrets from anyone.
He can wall climb, he has a short range shotgun and is armed with a teleharpoon and explosive depth charges for his abilities.
He's pretty lawful, only a little showy and a born natural along with being a team player.
Next is Hollywood, he's from Van Nuys, California and he's the face of mayhem.
He has an automatic rifle that fires off grenades and lives for the glory and attention of others even if it's negative.
He loves trashy radio pop music, the animator working on him loved that.
Is on the lawful side of showy and is more of a born natural than tech person in his abilities and skills, which includes air dashing.
And finally, we have Rama, who uses her bow to fight and secure her homeland from India, from the scourge of Legion.
She uses different types of arrows, she enjoys crunk music, she's one of the most lawful and reserved members of Mayhem, and by that nature, makes her more of a team player, having her use her tech and everything she can to sort of help out those that need it.
Okay, so once we had those, and we were able to have our characters more defined pretty easily.
The other core part of the tone we really needed to understand to be able to communicate was the game's art style, which is defined on a high level for the game as theatrical, simplified, and vibrant.
So our animation style needed to match that.
And what that specifically boiled down to for animation was the idea of the ordinary versus the extraordinary.
The ordinary would be things like walking, running, standing, turning.
That could just be sort of standard mocap polish.
We could get away with that.
The extraordinary were gonna be things like jumping and dashing and special abilities.
These were things that we knew we wanted to get a little bit more exaggerated with the style.
And what's key about this is that this approach allows style to be used in a non-arbitrary way, attaching more pushed animations to clearly defined gameplay systems, which is necessary because stylized animations, just by their nature, take more time than standard mocap polish.
So we needed to be smart in how and when we could embellish.
And that intentionality, I believe, is what helps to create a unified experience and quality bar across the project.
So with that in mind, our first style pillar is simplified, which we interpret on animation as a limited 2D style matching our overall aesthetic.
That means the timing of extraordinary movements will be snappy, faster through the motion with longer held poses conveying the key moments of the movement or ability.
This means really super simple lines of action during quick movements, sort of think of them like smear poses and less as individual storytelling poses throughout the actions.
Now, when I say smear frames as reference, we aren't using any literal smear frames or shader tricks like a lot of places.
What we're doing is we're thinking about the poses like smear frames, where we want to reduce the noise and complexity of the pose through those snappy transitions.
For example, this is a front flip that was done early on that would show what it's like to be animated in more of a traditional style, right?
On the way up, you have the arms and legs offset as they rise, leading into the spin, and then unrolling naturally as she descends.
You know, nothing wrong with it, pretty straightforward.
But when thinking of the poses in a simpler, more smear mindset, on the way up, we want the body to have the limbs brought in, creating a cleaner, singular line of action, removing any of that complexity and noise that's going on.
Same getting them into the ball at the apex, it should happen a little bit quicker.
Coming out of the ball, the character should, instead of unrolling naturally, they should snap into more of an iconic in-air pose.
And then when they begin to stretch into the fall, again the character becomes more of that singular clean line of action.
This is really the essence and intent of smears without having any tech that gives you smears.
In regards to theatrical, by attaching our extraordinary actions to gameplay systems, the exaggeration of abilities and personality moments will help to draw focus towards the theatricality of the character just naturally.
With Fortune's special ability, how her guns create a large ball of energy really isn't as important to us as making sure the action just fits her personality.
wildly launching it forward while jumping with a double bounce land makes it feel like it makes sense even if it makes absolutely no sense how that ball of energy is coming out of those pistols.
And then this leads just naturally into our vibrant pillar.
And this means that the personality of the pose is just as important or even sometimes more important than the functionality of the pose.
Instead of animating a traditional jump, for instance, which hits the proper mechanical poses along the way, we like to think of the characters more like Spider-Man.
His poses when jumping through the air say far less about the mechanics of a traditional jump and more about that character specifically being in the air.
By clearly defining ordinary versus extraordinary, we hope that we'll be able to strike both the bold and balance that we're trying to get with the style without feeling at odds with the mocap and hit that vibrant pillar.
So with all that in mind, jumping was pretty important to nail down early on.
And to me, I really feel like it's the definition of our extraordinary style and what we use to establish it, first thing.
So this is a jump test I did really early on and pretty quickly to show how jumping in our game could look and feel a bit different than a traditional jump.
Fortune was the first character I was gonna be working on and this model was one of our early test meshes.
We knew we wanted multiple jumps with air dashing.
Come on now, keep playing, you wanna play.
with jumping, with air dashing, and when everyone on the team responded to it, it was like, all right, let's figure out how to break this down so the animators can match this and designers know what this would take to tweak in game.
So, let's break down the very first jump.
And this actually ended up being really close to Fortune's base jump in the final game.
Again, notice the simple line of action on that first stretched pose.
It's also worthwhile to note that she has zero anticipation on her jump on button and press.
As she begins to blend to the top of the arc, she begins to hit her personality pose.
Her crossed legs at the apex, of course, are not mechanically true pose for a jump, but they do help to start to speak to her more fun, freewheeling nature.
Remember, we always want to be asking how does this character specifically look when they're in the air?
As she squashes at the top of her jump, the core of the air pose is held, and it's really the follow-through of her limbs that keep the momentum alive.
As Fortune begins to release into her descent, the legs drop first.
This helps to give a sensation of gravity, pulling them down, but still allows for the feel of the hang time to be believable because the upper body and the core strength of the character stays the same in the air.
Notice also that the arms sort of maintain a similar world space, even as they begin to rotate up to help further sell that held pose and sense of hang time.
And then going into the fall proper, we have the reduced body to the clear line of action.
We do have the arms bent to keep some semblance of control and strength within the character, but to help with the blend, we found that if we left them straight up, it would give some pretty ugly flashing and tripolation as they tried to settle, so it helped to bring them down a little.
Which all this really just comes down to examining the spacing and timing is as the second important part beyond posing.
So for reference, here's a pretty standard Muybridge jump, 12 frames, shows you how many frames make up each part of the action from rising, hanging in the air, and then starting your descent.
And here are the 27 frames for a fortunes jump in comparison.
And you can start to see some numbers there, but better than numbers, right, is always just an image.
So what we're really getting at is that instead of a standard parabolic curve, we want more of a plateau.
A faster up, a longer hang time, and a heavier drop.
And this timing helps to sell the style of having just an in-air pose instead of the standard jump, because posing means nothing if the physics of the world seems the same.
And because of this, we also get the benefit of bringing the jumps into style, meaning that we can use the same for standing jump versus move jumps, because mechanical function isn't important, isn't what we're trying to convey here.
It's the personality of the character.
And because we're doing that, it can function for both standing and jump and running.
So after implementing and tweaking this in game, this is what a jump curve looks like for us.
The top one is the base curve that I just went through, and the second is her double and triple jump.
As you can see, the rise and hang remained pretty consistent with that first test.
The only thing we really changed was the drop off, we eased that a good bit, as having such a harsh drop made gauging jump distances a little more punishing than we really wanted to have in the game.
And this is what it looks like in game.
Here's her triple jump chain.
And because triple jumps are considered extraordinary, it means that with each jump, we can push the pose and personality further with each in the chain like you might do with an attack combo in a fighting game.
So it allows us to really kind of get more and more wild with it.
But how wild we can get goes back to the one sheet and how showy they are in their personality.
Since Fortune is more showy, she's totally within her character to do flips and spins and all manners of flourishes in her movement and poses.
So if somebody comes up and says, I think that's too crazy.
No, no, no, no, we established she is already crazy.
It's fine.
All right, so next, key framing and style, pretty straightforward, but we knew we'd be using mocap as a base for a lot of the combat animation suite.
So we wanted to know what it would take to take some mocap and bring it into style.
And we started with her melee ability as the first place to do that.
So here's the raw mocap that we got from our actress Maggie McDonald.
It's a solid spin kick, but of course we need to edit it to get it working in game.
So if we were gonna bring it into more of an ordinary style we're gonna of course speed it up about twice the speed of the raw mocap with attention being paid to some spacing and timing.
And here it is with a style pass.
We adjust the timing to shave off another seven frames, but a lot of what this style is comes from the posing and timing before the point of contact.
So let's break that down specifically.
Again, like the jump, we're gonna start with that stretch pose, try and keep it super clean.
The height of the in-air motion has been lifted overall to give it more of that hang time and anticipation to feel similar to the jump.
And that leg, of course, will just be starting to drag immediately.
The body has largely hit that held in air pose that's important to the character, even as that leg breaks that hip, entirely not worrying about it.
And again, the body is really maintaining that overall sense of pose while we're still letting that leg drag around so that it helps to read more clearly.
So when you watch it again, what you can hopefully feel more than see is that attention spent in that initial lead up to it, to make it feel more snappy and exciting overall.
So it was pretty much then at this point in the style of conversation that, well how far can we actually push these things beyond timing and spacing and poses?
Those conversations started to happen.
And of course for animators that.
usually comes to squash and stretch, right?
And so we needed to make sure we defined that before people started going too crazy with it.
Using MotionBuilder and not custom rigs, that inherently limited us to how much we could do.
But again, with MoCap being a large part of our movement suite, it couldn't really be too over the top.
So like our overall style, we needed to be rather purposeful and non-arbitrary in its use.
So here's Fortune's dash left.
There's some squash and stretch built into her spine, but it's more to carry the energy of the motion through the spine than to make it feel super snappy or over the top.
You know, we really want you to sort of feel it more than see it and not have it instantly jump out at you.
It isn't even also meant to be used on everything that needs to be brought into style, only when you need to sort of keep that pose or energy alive.
It needs to serve the core functionality of the style.
Posing and timing are really what are at the core.
This just supports it.
Okay, so we know more about the characters.
We know more about the style of the game.
we can now finally start to digging into what the overall quality of the animation is and start to find some more of those answers as to just how many characters we can support.
So one last thing we really wanted to do before we got this was establish two rules.
First, we agreed that out of combat needed to have higher quality visuals versus in combat.
This was because the player character is really the focus of them out of combat.
You're watching the character as you're playing with them.
But.
During combat, right, you're watching the reticle, the character is in focus to that.
So we decided that was a pretty good balance to strike as to where to really spend our time.
And then second was that that would, we wanted to start with on-ground movement because that's really something that's pretty common in every game and has a lot of expectations in regards to fluidity and responsiveness that we knew we needed to be able to deliver.
So what we did was we started with the bare minimum of just a idle jog and blends to see how terrible it would look, and of course it looks pretty terrible.
But it allowed us to identify the exact areas that annoyed us the most that we really wanted to target.
And what that ended up leading to was four directional jog starts, two 180 jog turns, walk, jog, and sprint stops.
We also have additive leans, additive head looks, additive torso looks.
Establishing a standard like this allowed us to define gameplay metrics and markup on the assets for universal responsiveness to ensure turn rates at different parts of the animation could be leveraged by all characters.
So for jog starts, every character needs to have turned by frame 10 to 12.
And they need to be at full jog speed by frame 11 to 13.
No matter the character's size, they needed to match this metric to match this system.
which means selling weight and speed is entirely aesthetic like Hardtack here.
After animating Fortune, one of the smallest and most agile characters in the game, Hardtack was my second character, which worked out really well because it allowed us to prove out that the metrics we defined with Fortune could still work for characters of any size.
And what's really become one of my favorite things on the project is that during internal and external play tests, we usually always get some feedback from somebody that says, yeah, when I was running around the city, I always just switched to Fortune because she was faster and more agile than Hardtack.
Even though under the hood, they are 100% at the exact same metric, no difference at all.
Another example of meeting metrics, but selling the weight through animation is jumping.
Unlike Fortune's base jump, which has no squash at the beginning, just that straight clear line of action, for larger characters, we do have about three frames of squash compression that happens at the beginning.
And what that does is that covers the duration of the blend at the jump.
And it helps them to feel just a little bit heavier on that first button press.
They still hit the same height metric overall, they have the same overall time in air, but those three frames at the front, again, help to elicit that same feedback from playtesters that they do on ground movement that, well, if I'm jumping, I'm also gonna switch to one of the more agile characters.
And again, it doesn't matter.
They can get around the world with equal skill and ability.
which really sort of led me to one of my favorite mindsets on the team, which was, let's solve it with universal systems, not tons of crazy unique assets if we can, because with multiple player characters, the number of unique assets we could support per suite was going to be limited.
So the more common AAA approach of just throwing lots of animations into a unique suite for each system, it just wasn't gonna be possible for us.
So the first big test of this was going to be out-of-combat stand turns.
These are, of course, one of the deepest, darkest holes you can try and fill with animations for the rest of your life.
Slow turns, fast turns, upper body versus lower body, keeping the feet locked down versus allowing slight translation.
We just knew there was no way we could support a complex turning system for our characters.
So we didn't.
We, in fact, didn't make any animations for it at all.
What we did is we used walk stops and we just let the system handle the rest.
When you deflect the stick, you're getting a couple of frames of the additive head and torso look as well as that blend into the jog start.
So the character has at least some facing of their body on stick deflection.
And if we author the walk stop to have some additional foot shuffles back into place, what it does is it helps to sell the momentum of the turn.
Sure, it's not gonna be as pretty as a turn system, of course, but it is free and it is responsive.
And as a general rule, if there are a couple of ugly frames on input, as long as the follow through looks and feels good, people are gonna be okay with it.
So vehicle entries are of course another huge investment with animations.
Once you take into account multiple vehicle types that you need entries from, from different angles and different versions, and if they already have drivers or maybe passengers inside.
What can be a giant suite and investment for even just one character across multiple characters would just be scope crushing.
So when realistic functionality for us becomes too much, it's really time to lean into style and tone.
And for this task specifically, we had two animators, Josh Behrens and Nick Kneebling light the way for us.
Teleporting and swapping characters is a core part of the gameplay and tech that Mayhem uses.
So using that as a cheat for vehicle entries made sense.
Josh and Prototype had implemented it, but.
It was really with the addition of Hollywood giving those finger guns as he cheeses to the camera that Nick added that extra bit of personality that really made the feature fully embrace the style and tone of the game.
At which point, these have now sort of become more and more of signature animations for the characters as we kind of continue to one-up and show how they would cheese it up to the camera.
The other place that we couldn't afford to add additional assets was turn fidelity while running.
Designers and world builders, of course, wanted more narrow areas to move and controls needed to feel tight and responsive in those situations.
And, of course, they still needed to look good when you're running down a wide open street.
So instead of giving two entirely different suites for different situations or additional transitions based on different stick deflections or speeds, one of our senior animation programmers and a professional chicken wrangler, Isaac Veneer took a approach similar to out of combat versus in combat.
See, when you want responsive controls, you're usually near ledges or doors, and you're more likely to be looking at.
where the position of the character is and not at the character itself.
But when you're in a wide open space and you want the character to look more fluid and weighty.
So Isaac's solution was to toggle a near versus wide mode dynamically and in real time that adjusted the turn speeds based on very specific factors.
If there was going to be a wall nearby, the character goes into near mode.
If you want to turn the corner to go into the door, you would want it on.
If you have a large thumbstick deflection while moving, it's gonna turn on, and when you start moving it again turns on.
And it stays on for about one or two seconds in each instance, at which point it can switch back into wide mode.
What this did was by adding it, it meant moving down narrow corridors, making tight turns and small adjustments to interact with an object were no longer an issue.
And since the turn speeds governing this were being controlled by switching between different blend trees in the animation graph, it meant we could also then adjust our additive head and torso looks between each mode.
So what this means is in wide mode, we have the body turn at a slower rate to look more weighty and fluid in game.
So what we do then is we lead with the head and then the torso.
And this gives the visual responsiveness to the player of their input of them looking as well as breaking up the overall order of operations on what's happening in the character so it doesn't just feel like you're turning a character on the stick.
Essentially it's what we established in that original quality video.
Notice the order of operations is the head and then the torso and then the full body turn while she runs.
But in near mode, the body turns at a faster pace to allow for that positional responsiveness.
We also wanted the head to turn fast to make sure that the character looks like they're aware of their quick directional heading.
But then what we do is we have the torso counter rotate to simulate some drag and again break up that order of operations that's necessary to do. And at a certain point if running in a circle then we allow that torso to catch back up so that the head and torso are again leading the body.
So this is what it looks like if I just turned it on even though I'm in a wide space.
It of course looks twitchier than before and it's not as fluid or as appealing, but again, this is only triggered when the player cares about that need for twitch movement and fluidity and weight of the motion could actually get in the way.
And you notice here as she runs in the circle that the torso drags behind the head and the body.
Being to break up those order of operations is really key in making any of this stuff look in any way convincing or compelling without spending a crap ton of time on new assets.
Another big animation asset sync is combat aim movements.
Even though we decided not to focus as much on combat movement as we were going to out of combat, one area that we really wanted to address was those legs crashing through each other as they cross from front to back moving angles.
But the traditional eight animations used before the studio per speed for this would really even add up across multiple characters.
Enter at this point the mad genius of senior animator and cat lover, Clay Mathews.
I don't know if he loves cats.
The previous approaches used at the studio was to capture the four cardinal directions and then some diagonals as shown here to cover the transition of the character changing from that forward running gate to the backwards pedaling.
And you would put them all into a single blend tree and blend them all smoothly as the thumbstick rolls around.
Then in game, there was IK aim orientation with the upper body used to keep the character aiming at the straight ahead at the reticle.
And while this certainly works, it still wasn't an ideal method for quality or even scope.
And of course, not certainly at the release, in any way competitive with other approaches at other studios that use even more assets.
So with the Matthew method, we can get away with only six animations which are all diagonals and requires no IK aiming to stay on target.
The way this works is, instead of capturing the four cardinal directions, we capture back left and front right as single assets, and then the crossover angles of front and left, front left and back right.
The three front moving animations are put in one blend tree and the three back in another, and then a state machine sits above those, switching between the two as they're driven by stick deflection of angle.
There's a 10 degree overlap on those angles that switch between the forward and the back so that if someone's hanging out on that angle, you're not getting some ugly bounce, right?
So we're gonna look at those animations before we actually see what this looks like in game so that people have a better idea of what we're doing.
So this is what we consider a forward animation, which is, as you can see, 45 degrees forward right.
The gate's pretty straightforward.
The character is aiming at the camera relative, which is where the yellow arrow on the bottom represents.
Here's what we would consider forward right, which is 135 degrees to the right.
More than being a forward animation, this is really just a sidestep where the left leg crosses in front of the right leg.
Here is the back right, which is again that 135 degree angle, but while also being a sidestep, it's the right leg crossing in front of the left leg this time.
Here's a pretty standard back run, but this time it's at 135 degrees to the left and fairly straightforward back pedaling motion.
I promise, even though it's not moving.
Here's the back left, which is another sidestep, moving at 45 degrees left.
And here it's the left leg crossing the right, and then the inverse for the forward left, which is right foot crosses in front of left.
So here's what it looks like in game.
Six animations for the jog, and then we'd have six more for the walk.
And that gives us all of our combat movement for a character.
Doing this takes a little bit of time getting used to when directing the mocap and authoring the animations, but once you wrap your head around it, you get everything you need for even less assets than what we had before.
And it's entirely animation driven by the animation and the poses, so no IK tech is needed to keep them locked on that front reticle.
We do have it for up and down, but again, most of the time it's right in that sweet spot and you're good to go.
Okay, so since we're already talking about graphs, let's really just indulge our techie side completely.
Beyond the evolving animation graph improvements and additions, the big gamble for us on this project was going to be procedural, as inspired by David Rosen's animation boot camp talk a few years ago.
Check it out in the vault if you haven't seen it before.
And what this meant specifically for us was IK modifiers, as created by another ace animation programmer and dude lookalike, Rob Ripka.
And it really all started with Jumplands.
Jumping is of course a big part of our game.
And jump lands can account for nearly 40 animations per character.
Jump land stand, jump land walk, jog, sprint.
Aiming jump lands in all directions, across all speeds.
For what is largely a functional animation, it can be a giant time sink.
Looking around, some games might just play the jump land stand while moving to get the compression of the land and just blend out of it sooner, but that still wasn't going to meet with our overall visual quality needs by saying out of combat was what needed to look the best.
So we decided to try our hand at procedural jump lands.
So here's a jump land in our game when you're standing still with a procedural.
Everything that the body and head are doing on the land is in fact procedural.
We do animate the arms and they're exported as override animations.
But under the hood, this is just the default idle animation that you're seeing with arms only playing.
And here's that same jump land while you're moving.
It uses the same arms override animation, but with an earlier blend out.
But other than that, this is just the run animation that you're seeing when they land.
And this overall saved us about 30 animations per character.
Not to mention, it maintains full player control and velocity of the character while you're landing, which of course design and us game feel nuts just absolutely love.
So how does this work?
Well, I'm not Rob, I can't speak to the code underneath, but I can show what he exposed to us and how to adjust the knobs and dials so that we can manipulate what it does.
It starts with defining a set of curves, or one curve specifically, and these are created in MotionBuilder.
For the purpose of jump lands, we have ones defining how heavy we want that land to feel.
The curve will drive what the bones will ultimately do.
So in the light land at the top, the large value followed by a smaller value sort of represents a bit of a double bounce.
For the heavy land, there's a large value that holds for a bit and then settles back without much of that double bounce, and this gives a land that holds a bit before rising up.
Then what we do is we set a control parameter that we want to fire off.
In this case, it's gonna be a bool, like round bool equals true.
The function that I'm setting there is the motion builder file containing those previous curves, and then the function float track is the curve itself.
And then you can see here, we can adjust some global values for it that are gonna be the length and output scale of the curve.
Next is where we start adding in the specific operations on each bone.
First we'll set the axis that we want to modify the bone on, then the bone name, as you can see there, the hips.
Next up we can set a delay so that they don't all happen at the same time.
Again, we can now set on a specific bone operation, the length and output scale, and then the offset.
And the offset can be in translation, scale, or rotation.
We can also set the space as you see here, which is model, which is T-pose, or bone, which is whatever pose they're in at the time.
So instead of just walking through all this stuff, let's actually just make one.
So this is what a jump looks like without any modifier on it.
Like you see, it's just a stand with those wiggly arms going on, nothing too great feeling.
Let's add that wide translation down on the hips, right on impact.
And you can see already, all right, we're getting that curve as defined by the land heavy.
Then we can add some rotation forward in X on the spine with a delay set in there to happen later than the transition.
So we can break up that order of operations again that's really important.
Having these live update is really a must as there's going to be a lot of iteration that needs to happen and being able to quickly compare and edit is really what's gonna be key in making this worthwhile.
And about 15 operations later, we arrive at our jump lands.
Obviously, creating these still takes some time and iteration to get it right.
So the really big way that we win with these is that once we have a heavy and medium and light done, we can just add that to any character and their jump lands are complete.
We just author some of that wiggly arms, which of course takes hardly any time at all, and character is jumping and landing and good to go right out of the box.
The only time that we don't use that is during long fall lands.
There's no fall damage for agents, and they're gonna be locked in place for a bit when they land, so that means it's a perfect time to add personality to the character.
So for Hollywood, who by his very namesake, strikes a three-point landing, because how do you land in a Hollywood movie?
Three-point landing.
I swear he's the only one that we do that with.
It was at this point, oh, sorry, missed an important part.
All right, it was at this point then that Rob said, wait, I'm not done, I can do more.
He made it that when you toggle sprint when jogging, a modifier plays that compresses that character a bit on button press to give that feeling of pushing off and exerting some force into speeding up.
Since this is layered as procedural on top of the sprint that's blended in, again, it's not gonna change the velocity or give you a hitch or anything like that.
It just makes it feel fluid while still having that weight of like, yeah, I kicked into sprint.
At which point then I fell madly in love with modifiers and they quickly became the Frank's Red Hot Sauce of animation tech.
First we added it to the out of combat to combat transitions.
That blend to aim is only a couple of frames.
So the modifier gives us a nice bit of follow through and overlap on the character without delaying the combat responsiveness of going directly into their aim suite.
We contrast this with those bespoke animations we make when transitioning out of combat.
And again, what this does is it matches our overall decision to focus on out of combat animation.
Showing how they transition from combat to out of combat has sort of become a fun little way of adding just that little bit of personality to draw the attention and focus back onto the character after combat.
Then we use them as combat move starts and stops.
We have four cardinal starts and a single stop.
Since again, combat movement quickly just ramps up to desired speed of the character.
What this does is this gives us a bit of a push off like that jog to sprint transition does and to settle like the out of combat to combat transition.
And then what's great about this is this is just these five modifiers are shared across every character.
Everyone has it.
We don't have to make unique ones for them.
We could if we wanted to, but again.
combat isn't the focus where we spend a lot of time.
Weapon fires have also become a great place to use these.
And because as the library grows, we can just add these to characters or quickly dupe one and edit it to get the unique fire per character.
What's also great about these is that they're easy to adjust as the shot fire speeds are iterated on by design.
So instead of having to go back in and adjust an animation, we can just play with that global output scale or.
or anything like that, and now weapon fires are good to go.
This also gives us additive hit reactions, which you can see here compared to the larger hit reactions that actually do interrupt them, like there.
And by the nature of the modifiers being procedural, it means they can work while the character is standing still, moving, crouching, mandaling, jumping, whatever.
It doesn't matter what state they're in, they're still gonna play the hit reaction.
And of course, then we can also use these on the player without interrupting the player control.
Then we got the ability to scale bones with the modifiers.
So I added some squash and stretch to the agents when they swap out.
You can see it easiest on hard tack where he kind of, bloop, which was pretty fun.
And again, that way, swapping no longer required an animation.
So as you're running through, swap to the character, the next one comes in, fluid, responsive, we're not interrupting anything.
At which point then we can get really silly and just add procedural squash and stretch to anything in the game that has a rig, because why the hell not?
Okay, so finally, the last big hurdle that we needed to solve was facial animation.
The tech solutions and expectations that are out there with facial are, of course, incredible.
And while we definitely wanted higher quality animation than previous games at the studio, investing in facial capture or lots of custom hand-keying animations just wasn't gonna work on so many characters.
So again, it seemed here like leaning into style was going to be what made the most sense.
What this meant specifically was focusing on strong, emotive personality expressions like this iconic Glen Keane expression she created for Tangled.
We would try to hit poses like those as much as we could and then just sort of animate within those.
Specifically, what we would then do is, this meant expression changes are what really just take the most amount of time to sell, right?
On a physicality and emotional level, those are hard and iterative.
So we just didn't have the bandwidth or as much as we might have the desire for it, not necessarily the need.
So it was best to just sort of make a scrunchie face like in the top second left picture there to sell that contrast of changing from one emotion to another and this was great because it also keeps it consistent with our extraordinary style of the strong personality poses carried by some of a more clean smear mentality between them.
We were also cool with the fact that procedural mouths would be okay because people can deal with that really.
It's the dead eyes and expressions that are going to make people go, that character doesn't feel right.
If we can make sure that the eyes feel alive, the expression feels alive, then we'll be okay with procedural mouth and most people probably will be too.
So what this did was it meant we were going to lean into the seven universal emotions.
This is anger, disgust, fear, happiness, sadness, surprise, and contempt.
Every human in the world has these things.
And while each expression has very specific traits that you need for those to be able to read by everyone, everyone sort of has their own unique version and take on it.
So this is what we did for each character as well.
And much like defining their music, figuring out, taking the time to really figure out which actors are characters, parallel our characters' own personalities meant we had another really great, quick touchstone for finding and communicating performances when working together on the team.
These expressions, along with the Anisoft Visemes, were all outsourced to animators with a past working in film.
The reference expression picture is what we gave them as their initial direction, and what they gave us back were these solid building blocks that we were able to use by the rest of the team that were handcrafted, essentially animation-driven blend shapes, as demoed here by a tool written by our animation tech lead, Evan Cox.
And with these, what we can do is we can bring also the Anisoft generated lip sync animation into getFirstPass lip sync for anything that requires.
So very quickly, we can start to add facial animation.
So outside of a few specific animations shown here, which are idle, fidgets, emotes, mayhem ability, and front vehicle entry.
where the player can easily move around and look and want to see that the face is matching the motion.
Everything else is authored with just no face.
And we let a default expression play underneath so that when you're running and jumping and all of that good stuff, what you're seeing is that default expression under there.
Which meant it became really important and we created an eighth pose, which you can see here as demoed by our lead bad guy, Dr. Babylon at the end, the personality pose.
And this would be the one that lives underneath.
It could be separate from the normal expressions or even a variation of the expressions.
It was also then at this point that we decided, well, if we're already making some changes to it, it would be great if we could break up the sliders to have the full expression, eyes only and mouth only.
And this was using Scott McCloud's approach to facial expressions as sort of inspiration, in that being able to mix and match the eyes and mouths of different expressions and even visemes would mean that we could quickly create new combined expressions to give extra depth and variety to the characters pretty quickly.
So, with Fortune, getting her to reach her full Rihanna potential took nearly no time at all.
With those static expressions now crafted and implemented in the tool, it seemed like being able to leverage them software side was only really gonna be half a measure.
We would want to maybe see some of these expressions in life, in game.
So we had our facial outsourcing gurus give us a single living expression to keep the face alive for each character.
Again, having them focus on it meant that it would meet a consistent higher quality than if we tried to rush it internally, because balanced against gameplay needs, this just wasn't as important.
Then what we can do is we can copy multiple takes of that animation in MotionBuilder and drop each one of their unique expressions on a layer over it, and now we have all of those eight expressions alive and at a fairly consistent quality level.
It's at that point that we have a system to call all of those expressions in the game.
Is the agent gonna be happy to pick up an object?
Play their happy expression.
Are they angry that Legion is around?
Play that angry expression.
Or did they just witness something weird?
Drop that disgusted expression on them.
Fear even when they're at low health, right?
Facial animation really I feel like is something where it's the definition of solving something with a system and style, and then leveraging that in as many places as possible across the game.
All right, so after defining the characters, the style, the quality, and tech, we're finally able at that point to extrapolate just how many of these damn characters can we make.
What we did is we ended up with just shy of 100 animations per player character.
And this is all of them, copied from character Excel doc, because I know everyone in here loves to animate in Excel sometimes, don't lie.
Specifically, something that we tracked and defined here is which assets can be shared from one character to another.
And this is managed by having all of our character animation sets live within a hierarchy.
So as long as one character is complete, if everyone else is underneath them, every character will inherit those animations, allowing design to start testing that character right away, and then we can just plug and play in animations as needed.
So with weapon holds, characters that are Large male, underslung, cool.
If you want another large male underslung, you've got complete access to one.
We'll just start plugging in stuff as it's necessary.
We also call out here which things will be animated internally versus externally.
A lot of those ordinary classified movements are and can be outsourced, including jog starts and turns.
Since the mocap really gives us a solid base and direction and our metrics are so well defined and precise, communicating our needs to external studios is relatively straightforward, as well as using the one sheets to say, and this is their personality on top of it.
Sure, we still have to do a final polish pass on all of those being implemented, but what it does is it helps to make time for us to focus early on on nailing those extraordinary personality-driven animations while still getting some runway laid for the rest of their suite.
So after leveraging style, sharing, outsourcing, and tech, 100% unique characters are estimated to take about 10 weeks internally to create and implement all animations.
Shared weapons holds can save us five weeks.
Three weeks of polish and iteration are then added to each character so that we can react to any needed design changes or iterations or playtest feedback.
And this is how many characters we have in total.
Beyond the 12 playable characters, the four that we've shown today and the remaining silhouettes that you can see, we have 10 enemy troopers, seven unique NPC, and multiple bosses.
And I cannot stress important enough how great it's been to have this diversity of all these characters on the team by us being able to leverage a lot of these things.
Bringing the characters and the animation process to life on this game has required for me the perfect mix of art, design, and tech, which really speaks to the heart of game animation as I see it.
Taking the time to fully define the character's style, quality, and tech up front has allowed us to fully realize what I saw in my head when I started on the game.
And moving forward, it's given us an amazing foundation to build upon.
I hope you've all been inspired by our techniques, and I can't wait for everyone to not only see more of the characters that we've created, but actually get to play it when we release the game later this year.
I personally could not be prouder of what our animation team and our team has accomplished with everything that we've created here.
Speaking of which, if you'd like to hear more about the art style on Agents of Mayhem, there are two more talks today in West Room Hall 2002.
At two o'clock, we have senior VFX artist, Brianna Lindsey.
She'll be speaking about how VFX approaches the art style of the game.
And at 3.30, we have principal artist, James Taylor, who will be speaking about physically-based material rendering in a stylized game.
Thank you all for listening.
We've got about six minutes for questions, if anyone has any.
Going once, going twice.
Yeah, go ahead, there's mics in the middle if anyone wants to jump up.
I saw a hand.
All right, well if you, oh, go ahead.
How many unique blend trees do you have or just for locomotion?
Oh man, so what we do is we've got essentially one monster graph that we're using for all the characters.
And we then layer in between all of them.
It's gotten pretty beefy.
What started on early with every animator being able to just jump in and like, hey, I need this specific thing for this character, so let me add a new node and a unique transition, started to break things as stuff got really interconnected.
So at this point, we've got like two people that own it.
um, and uh, I'll go in and I'll test a thing and I'll be like, hey, I want to do this like additive arm only pull out a thing and they, I was like, I think it goes here. I'll shelve it in Perforce, they'll take it out and go no, no, no, no, no, you don't want it there, you actually want it over here. Um, but at least I can get the, the functionality of it going. So as to how deep it goes, it's, it's pretty gross. We needed to uh, actually create a second one just for pedestrians in the game that's just one flat uh... graph so that uh... each pedestrian wasn't calling each one of these monster graphs that then had to go like multiple layer deeps every time they like got stumbled or something right so uh... I can't give you the specifics of that but it's a lot Who came up with those like character sheets was that done in like concept early on or as you guys were animating and working?
Were those being developed along the way those were developed pretty early on?
So I'd done a talk here at GDC a couple years ago at the animation boot camp Where I developed some of the ideas behind that on shadow of Mordor And so when I started on this project They had the traditional thing of here's some concept art and here is a giant wall of text that writers just went just went ham on and Very quickly, I go, that's a lot to read.
And when you've got a lot of characters that you're trying to understand, it's what are the core things?
What's important?
What do we need to communicate?
And so I spent a lot of time early on going, okay, what are we doing?
And working with writers and designers and trying to say, what are you trying to communicate?
What is the system?
do you feel like this visual approach that I'm creating is correct?
So they're certainly one of my babies and it's something that I still maintain and sometimes other people go, oh, I'm going to update it over here.
No, no, no.
So it needs to, let's, let's keep this consistent because especially with outsourcing, when we bring in somebody quickly to do a character piece, I can send them that along with some of their music and the expression sheet, have a quick Skype call with them to be like, this is who the character is and they, and they can grok it pretty quickly, which is really important.
Hey.
Can you hear me?
Yeah.
Did you guys end up splitting the animations, the upper, lower sort of locomotion, and then any kind of upper body actions like shooting, et cetera?
We do have a couple upper body versus lower body reload.
We do a stand reload version, so we can get the hips and stuff.
And then we also just do an upper body as well, so that you can reload while you're running.
Some of the special abilities, if it doesn't feel right to cancel the movement to do an attack, and it's something you want to be able to do while you're moving, we also create an upper body for that.
But those are about the only times, right?
And were you like splitting them straight out, or was it like an additive on top?
It's just a straight up override. We do have additive, so there are a couple characters where we will do additive, but we'll do that and then we do have some eye case, like spine bending stuff that we can do to say, okay, if this is what the hip's doing, then we want you to orient and be aware of that.
Thanks.
Similar question about the procedural jump landing.
Yeah.
I assume you did some tests with additive animation versus the procedural landing. Can you talk about like pros and cons using one or the other?
Yeah, so with the additive going on, it was something that they'd kind of been doing on the side.
And with the procedural, it was something that having seen it a couple years before and having talked to David, it was kind of always my head, oh, this would feel so good and I really want to learn about this more.
So we kind of were developing them in tandem and the procedural came on a lot earlier.
Once we then started to wrap our minds around all the different places that we could leverage this in different avenues, we just really leaned into that heavy and went from there.
Yeah, it looks cool.
Awesome, thank you. I'll let Rob know.
Hi.
Hi, I was just wondering if the movement in the world of the character is driven by the animation itself or if it's a physics based movement in the world.
Yeah, so out of combat is entirely animation driven, which is why it was really important early on for us to nail down, okay, at what frame do you turn by?
At what frame are you up to speed?
Because we want that consistency and it's really easy with animation driven movement to get a little sloppy with that and not have it feel consistent.
So we locked that out early for in combat.
it is 100% physics driven.
You know, they want that ability that if somebody's shooting at me, I want to move out of the way and not have to worry about a nice, pretty animation.
So we let that get right up to speed and just blend between whatever the walk speed is up through the run speed.
And then, yeah, we use that procedural.
So we at least get that little bit of depth that every animator wants to show that kind of push off and transition between them.
Cool, I think, oh, one last question, time for one.
Thank you.
I saw you had this root node under each character, so I wanted to ask how did you keep it consistent between characters, and how were you animating orientation of that node?
Basically.
How did you make animators' life easier?
Did you automate this stuff somehow, or did you just hand-key it?
Yeah, so in MotionBuilder, we just have a tool that will align it right underneath the hips throughout all of it.
And then we'll check that.
And then usually it's like, OK, that doesn't look great with the camera.
And we'll make some adjustments there.
But at least we can do that.
to get a really quick base.
And then we also have a tool in Motion Blur that allows you to save the offset from any bone to another bone.
So once you create a character pose and you feel, ah, actually I like it when the run's a little bit forward or back from it or whatever, we'll save that offset as a pose list and then you can share that to the network and every animator can pull that down to make sure that that stuff's consistent in game.
All right, everyone, thank you.
If you have any other questions, you can meet me up here afterwards or we can go to the wrap-up room.
Thanks for attending.
Have a good GDC.
Thank you.
