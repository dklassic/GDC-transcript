Before we get started, we'll introduce ourselves.
I'm Carrie Patel.
I'm a senior narrative designer and writer at Obsidian Entertainment.
And I'm Dave Simchick.
I'm the tech director for our tools team.
And today we're going to talk about the key features of conversation editors that can aid in the creation of branching dialogue.
Our main reference point here will be Obsidian Entertainment Incorporated Tools, which we refer to as OEI tools, which Dave and his team have iterated on for years for the purposes of helping us better create branching dialogue.
Our hope is that you'll leave this talk with a better understanding of how good software can facilitate both the creative and the technical work of authoring branching dialogue, and that you can use that information to either guide in the development of your own in-house tools or to seek out third-party options.
There are plenty of alternatives to Microsoft Excel, and our goal is to encourage developers to build or seek out more robust options.
So, what is branching dialogue?
Simply put, it's dialogue that does not follow a single linear path.
This is a screenshot from OEI tools.
We'll get into specific features over the course of the talk, but here you can see the dialogue tree in the main editor window, which is made up of dialogue nodes that we can individually write and edit.
And on the right-hand side of the screen, panes to set properties and scripts which can allow us to fine-tune the behavior of individual nodes and branches.
Now, why is branching dialogue important?
That's a talk all of its own, but suffice to say that it allows us to build stories that are reactive and player-driven, and it allows players to drive the flow of conversations and to define their characters in those conversations.
We've used some version of this conversation editor for over eight years to ship titles, including Dungeon Siege III, the Pillars of Eternity games, South Park, The Stick of Truth, Tyranny, and our upcoming RPG, The Outer Worlds.
While you can see that the presentation of dialogue varies between games, all of them require some level of branching, and the conversation editor allows us to build that structure.
Without further ado, let's get into how the conversation editor allows us to turn a dialogue tree like this into a conversation like this.
So the conversation you see on the left is part of a file from Deadfire with a character named Zuhira.
And the video that's playing on the right shows the highlighted path of that conversation playing in-game.
Now you can see the editor's strengths are not only that it optimizes the creation of dialogue, but also that it helps us integrate the presentation of that dialogue in-game.
So for the first part of the talk, I'll discuss how narrative designers and writers use the Conversation Editor to structure dialogues, to quickly write and revise dialogue text, and to script the flow of a conversation.
And for the second part...
Dave will cover the conversation debugger and the script tracker, which are two of the tools department's most recent innovations.
The first thing the conversation editor allows us to do is create a conversation structure.
And here I'm going to show you an example of what it looks like to create a very short, simple dialogue tree in our tools.
So here I hit insert and that automatically creates a talk node.
I can quickly add in some placeholder text.
Right click, drop down, and I can place three player response nodes.
Quickly writing some placeholder text that someone can come by and do a better job of later.
I'm selecting the top node, insert again, and there's another talk node.
Write some text, correct my typo.
And now by holding Control and dragging, I can link that node to other branches in this file.
So for the purposes of our examples, this is a simplified version of the Zuhira dialog you saw earlier.
It's what we refer to as a stub.
the conversation editor builds trees out of different kinds of nodes.
And as you could see, OEI tools automatically spaces these nodes for us and builds from left to right and top to bottom, which makes the creation of a dialog tree very fast and easy.
Now, this sounds like a small thing unless you've worked with a tool that looks more like this.
This is an example flowchart from GoDiagram, which is the foundational software of our conversation editor.
The size, spacing, and flow of nodes is chaotic, and managing them becomes a chore for the developer.
It's an annoyance for a small file like this, but the problem gets a lot messier when you consider a dialogue of 100 nodes or more.
A structure like this, in which the designer need only adjust the ordering of nodes, allows designers to quickly create dialogue trees, and for other designers to understand the size, complexity, and flow of a conversation at a glance.
This makes it a lot easier to both create dialogues and to pass them between designers, which is often crucial on larger teams.
This also helps designers diagnose potential problems with a dialogue at a glance.
This can include long stretches of the NPC talking at the player, moments where we're branching too widely, or moments where we aren't offering enough player dialogue options.
So to understand how the conversation editor helps us structure a dialogue, let's quickly look at the types of nodes designers can place.
Talk nodes are the most common.
These are for NPCs.
Each talk node is assigned a speaker, and that's the NPC saying the line, and a listener, which is usually the player.
Player responses are dialogue options for the player character.
You can include as many or as few as you'd like, depending on the role-playing experience you're offering, and also on the limitations of your in-game dialogue display.
You can also link nodes, talk nodes and player nodes, to other parts of the conversation.
The faded nodes you see here are all linked, and they'll preserve the same text and scripting as their originals.
This allows us to funnel the player to a central branch from any number of alternate dialogue paths.
For instance, in this stub example, we're giving the player three options to greet the NPC, but we still want to guide the player back to the critical path of the conversation so that the NPC can deliver key quest information.
Similarly, we may choose to link a player response to another point in the conversation, as we've done at the end of this stub.
This allows us to account for different paths the conversation might take, possibly due to the presence of a companion, as in this example, or to the state of a quest, while preserving the player's ability to pursue key topics.
Linked nodes allow us to create large, branching, reactive conversations much more cleanly and readably than if we had to depend on following flow chart arrows across the screen, as in the Go diagram example you saw.
And all of this means that any designer with the knowledge of our conversation editor can set up a working draft of a conversation to progress and iterate on content, and also that a designer can understand the scope and flow of a conversation before the final writing is in.
The second key feature of the Conversation Editor is that it's easy to author and edit text directly in the dialogue nodes.
And this is beneficial for a couple of reasons.
The first and most obvious is workflow.
Because we don't have to write dialogue in a separate interface and then port it into the Conversation Editor, this simplifies our work process, which is especially critical when we get to the stage where we're making numerous small edits and revisions.
Changes can be made quickly and easily.
which means we can fix bugs faster and get from first to final draft more efficiently.
The other advantage is that the writer is working in a structure that closely mirrors what the player will experience in game.
So it's easier to keep tabs on the scope and pacing of your dialogue.
You can see when a particular node is getting wordy and revise as needed.
And as you're writing, you can see the content of your node next to the nodes that proceed and follow it to help you maintain a smooth flow.
especially in situations where you may have several different nodes funneling back to one.
Compare that interface with this, which is from an older version of our conversation editor.
You have to open a separate window to edit node text, which, again, may seem like a small thing until you're doing this across dozens or even hundreds of nodes within a conversation and thousands across an entire project.
So what are the features that make it easy to write and edit?
The first is this convenient text box.
It feels like a simple but functional word processor, which is what most writers are used to.
Conversation files and individual nodes are protected through source control, which helps prevent developers from overwriting each other's work.
You have to check out a node's text, but once you do, you can write and edit just by clicking it.
You can select, copy, and paste blocks of text, and you can use keyboard shortcuts to quickly exit out of editing mode.
It even has a spell check feature.
The point is, it feels a lot like writing in a small word processor, so it's relatively easy for writers to adapt to it.
The editor also has a zoomable interface.
You can get as close to nodes as you need to read them clearly, and then you can zoom out as far as you need to see their placement in the greater node structure.
The conversation editor also has a collapsible hierarchy.
You can hide and expand all of the child nodes that follow a particular node to focus on the part of the structure you're writing.
So in the example I'm going to show you here, I want to see how well the three nodes near the center of the screen that are vertically spaced flow from their parent node.
However, the number and positioning of those child nodes makes it hard for me to read these all together.
So let's see what it looks like to collapse these in the editor.
I'm just gonna scroll down a little bit and zoom in, click a button in the corner there, and it collapses those child nodes.
Do it two more times.
Now all of these nodes are close together.
I can zoom in, read them together, and see how well they flow.
Once I'm done, I can easily click the same spot and expand everything again to restore the original structure.
The editor also makes navigation very easy.
You can move around the file with scroll bars and with clicking and dragging.
And if you want to find something specific, there are keyboard shortcuts to find nodes based on a text search or to jump to a specific node number.
Finally, the Conversation Editor allows designers and writers to integrate scripting directly in the dialog tree.
Now, if a dialog tree is a network of conversational roads, then conditional scripting is what allows designers to regulate the flow of traffic between those roads.
Without conditional scripts, many of our conversation branches would be useless because there would be no way to set one branch to play instead of another.
In the example pictured here, we have three different branches that can play depending on the background and chosen skills of the player character.
Specifically, a character with the mercenary background or with a decently high insight score can observe additional information about a battle-fatigued soldier.
So here's a video of what it looks like to add these scripts in the editor.
For 309, I'm going to search for the is background conditional script, which is highlighted here.
This lets me look at the background the player might have chosen for their character.
Going to select the mercenary option from this list.
And then for 308, I'm going to search for the is skill value conditional script, which as you can see, I can also find by typing in the search box.
This lets me check the value of different skills the player might have.
picking insight from that list, and then I'm inputting a value of three here alongside the other parameters, and the operator is already set to greater than or equal to, but I could adjust that if I wanted to.
So, based on the order of these nodes, if the player chose the mercenary background for their character, 309 will always play because it's on top.
If the player did not choose the mercenary background for their character, but has an insight value of 3 or greater, then 308 will always play.
And if neither of these conditions are true, then 318 will play and the player will get no additional information about the NPC they're talking to.
We can also connect multiple conditional scripts with and and or operators, and we can even nest these scripts, giving us an incredible level of control over the possible game states we are checking.
In terms of the player experience, these scripting functionalities allow us to implement reactivity to choices the player has made in the game and to events that have occurred.
This facilitates our ability to cleanly progress and branch content.
And as you can see from the list in the middle of the window, there are a lot of different conditional scripts we can use.
Some of the most common include checking to see if a particular conversation node has already been played, checking for the presence of a particular companion, checking a custom game variable.
Three of those are pictured here.
Checking quest status and checking the player's skills, as you saw a moment ago.
Now the conditional scripts we just looked at will control the flow of branching by determining which nodes can play.
But we can also set other scripts that activate certain in-game behaviors and game states.
This includes setting global variables and updating the player's journal, giving or removing items and money from the player, and adjusting reputation and disposition values to name just a few.
And once again, as you can see from that window, there's a lot we can do.
It's incredibly useful to be able to set these scripts within the conversation editor.
It allows the player's conversations to have meaningful impacts that are reflected in the rest of the game, which is one of the key goals of reactive dialogue in story-driven games.
And now I'm going to hand it over to Dave, who can tell you about some of the exciting features our programming team has recently added to the editor.
Hey everyone, I'm the programmer that worked on the conversation editor.
And do you know what question I get most often from our writers?
Why doesn't my conversation work?
So here's what usually happens.
A writer plays the game and their conversation isn't behaving as expected.
They look at a complicated flow chart and everything appears to be fine.
So they find a programmer and ask for help.
The programmer uses Visual Studio to try to figure out what's going on, and this can take up to an hour to set up and profile.
This is very frustrating to the writer, and it can make them feel helpless.
This is also time-consuming to the programmer, who has their own tasks to work on.
So our solution was to create a conversation debugger.
The conversation debugger communicates with Unity or Unreal using a UDP listener.
It automatically attaches to the game when it's opened and provides users with a ton of useful information about the current conversation.
It shows which conversation is playing and what's the current node.
It shows the current state of all nodes in the conversation.
Has a node been previously visited?
Does the node pass all of its conditions?
If a node doesn't pass its conditions, the users can click on the node and see the result of each individual script call on that node.
The live values for all global variables in the conversation are displayed here.
All of this data is updated in real time as the conversation plays.
Users can even manipulate the conversation through the debugger.
Users can jump to any node in the conversation at any time.
They can change global variables in the debugger and have them updated in the game.
In this example, a writer is expecting four player responses to appear, but only two are showing up.
We can see that two of the nodes aren't passing their conditions.
A deeper look shows that a script is checking if a global variable is set to four.
But it's currently set to zero.
So the user is going to update the global variable value and go back a node.
And now all four player responses are showing up.
So there appears to be a scripting problem in the game where a global variable is not being updated correctly.
So using these tools, writers can usually figure out what's wrong with their conversation and don't need to go to a programmer for help.
One issue with branching dialogues is there are a lot of possible player builds to test.
And we wanted a way to quickly test these builds without generating save games or having to restart the game.
So we do this with profiles.
A writer can quickly set up a character to simulate gender, race, class, stats, skills, and who is in the party.
Profiles can be saved and loaded on the fly, allowing users to quickly test various branches of their conversation.
In this example, we're going to load a fighter profile, and we're going to take a look at the fighter's intellect stat, which is currently set to five.
When we play the conversation, we get a fighter-specific line.
But one of the player responses is disabled because we failed the intellect check of 12.
We're now going to load a wizard profile.
And you can see that the wizard has an intellect stat of 14.
We'll go back a node.
And now we get a wizard-specific line.
And the player response is enabled because we passed the intellect check.
Another issue that arises is when we have play days, where everyone on the team plays the game for a day.
If a non-writer is playing the game and something unexpected happens, they'll go and grab a writer and show them what's happening.
The writer will ask, what were all the choices you made leading up to this point?
And the usual response is, I don't know.
It's like, I don't remember what I did.
So this is a crucial piece of information that's needed to track down the issue.
So what we can do is we can open the conversation debugger and we can go to the history pane.
There the writer can see the exact play order of each node.
They can copy the history to the clipboard, or they can save that data to a file.
So this has been really useful for helping reproduce bugs.
Now I'd like to talk about branching balance.
We've seen that player responses can be conditionalized by skill checks.
It's very important that we have about the same number of skill checks for each stat type.
Otherwise, certain skills become more valuable than others.
If a player gets more dialogue choices for investing in skill A than skill B, then players who invested in skill B will feel like they made a mistake with their choices.
So how do we figure out how many times each stat is used in the game?
Pillars of Eternity had over 1,200 conversations and over 25,000 nodes of dialogue, so it's not practical for someone to open up every file and check every node.
So instead, I wrote a script tracking tool.
It parses every conversation in the game and gathers every script call from every node.
In the scripts pane, users can see each script type in the game and how many times it's used.
In this case, we're looking at a skill value comparison call, which is being used 1,646 times.
Here we can see every individual skill check call in the game.
There are columns for the file the call is made in, the node ID, and each parameter passed in.
Double clicking one of these calls will open the conversation editor and select the node calling the script.
There's also a set of filter controls.
Here we can force the tool to only show scripts with certain parameter values.
Here we are specifically looking for skill checks referencing their survival skill.
This limits the display to only calls with survival as the second parameter.
So now we can see there are 112 survival skill checks in the game.
In about five minutes, our game director was able to get counts for all stat, skill, and ability checks in the game so he could make a balanced pass.
So one additional benefit of the script tracker was I was able to validate every script call.
Here we can see all the scripting errors currently in the game.
These usually come from game objects or global variables being deleted, but are still referenced in scripts.
There's a repair feature to correct the scripting errors without having to open the conversation file.
So if your studio is using Notepad or using Excel to write branching conversations, I highly recommend moving towards a flowchart-based authoring tool.
If you don't have the resources to create your own, there are some good third-party tools available, such as ChatMapper and Articy.
So I'd like to thank everybody for coming today.
And if you have any questions, you can come to the microphones.
And again, thank you very much.
Hi. So I was really struck by the contrast between the diagram, the Go diagram, I think you said it was, and the main diagram you've been exhibiting here. It was clear that the Go diagram was a mess, and this one wasn't. But I wasn't exactly sure why it wasn't. It seemed like the main thing that was different was that in this tool, when you have...
Two... when you have two nodes that link to the same place, in Go, the arrows would cross, and that's what's going to make the mess.
But here, the nodes would be duplicated?
Would they be completely duplicated, including all of their children?
Yeah, they would be, well they wouldn't be duplicated, they would just point to each other.
So if you had two nodes referencing the same node, there would just be an arrow pointing to the exact same node which could be across the entire conversation.
With the way that we're doing it, is we just have one single node, and that points, you can make a reference to that other node, and you'll see it in the tool as a grayed out version of that node.
And so that there was like one of the slides had an example of this.
I didn't look great out.
Was it great out?
It was, it's just a little bit more faded than the others.
Um, and a lot of these visuals you can adjust in the tool if there's something that's easier for you to see.
Uh, but yeah, if you, if you double click one of those slightly faded nodes, it will take you to the original node in its place in the conversation, and you can follow from there to see where that node branches.
OK, so I see.
I think I didn't see the fadedness.
So in fact, is that reference the key thing that makes this diagram readable, as well as collapsing children?
Those are the two?
Yes.
Right.
Thank you.
Hi. Our company is working on an authoring tool.
It's not just for conversations, it's for controlling game objects in the world.
I'm an engineer. When you said that companies should move to flow chart or flow-based conversation authoring, I totally agree with you. I mean, I totally understand you because I'm an engineer, but don't you think that a writer who might come from like a movie, like you know, film background or like books background would be more familiar with like writing scripts for movies, like you know, just linear white page?
I mean, speaking as a writer who had a background in novels and short fiction, for branching, I really like a tool like this.
We actually have a feature in our conversation editor where you can export any dialogue file into a traditional screenplay format.
But following the progress of that branching dialogue through basically pages of Microsoft Word.
becomes very tedious, it's very easy to lose the flow of the conversation because you have to, you know, jump from one node to back where that's continued elsewhere.
This just makes it a lot easier to visualize the structure and flow of that conversation in a way that's easy to see without having to jump around.
I mean, I wouldn't write a linear novel in this format, but for a branching dialogue, I think it's very easy to use.
And how, like, so if a writer that's not really familiar with software development, how long do you think that, like, this person would, like, you know, need to get used to this?
I don't think it takes that long because at the very least, even if you don't want to get into the scripting yourself, all you really have to know how to do is add nodes and the talk nodes and the player response nodes are the two main kinds you're going to use.
So once you know how to add those and just how to move them around the file...
you can write in those nodes.
And then I think the challenge is really just getting a better sense for how something feels in the flow chart versus how it feels in the actual game.
But that's an issue anyone has to conquer by playing their content.
One final question.
Is this tool available?
It is currently not available.
All right, thanks.
Hi.
I was wondering, when you were mentioning the variables, like is background or is intellect, I'm not sure if this, just I wanted to confirm, is that something that is, since you work on a lot of different types of games with the narrative inside of it?
Can you change the variables or add new variables within the tool or is that something that gets separated out into outside of the tool itself?
So all of the scripts are actually authored by programmers inside the game.
So we have a script class.
where we can make static functions and put attributes on them to allow them to be displayed properly in the tool.
And for each game it's going to be different.
And so for a Unity-based game, we'll load up the assembly DLL, use reflection, and get all that data from the game and get the exact same information that's in the game into the tool in an easy-to-see UI.
For Unreal, they have a similar thing, but we do have to do an export where we have to use their Blueprints exporter and get all that information.
And that's how we get our scripts into the game.
Thanks.
Yeah, I was curious if there were any organizational or like process barriers to getting some of your tools prioritized for development.
I'm coming from a place where I'm being tasked to sort of envision the future of authoring tools for our company.
And I wondered if you could speak to like making the business case because I thought it was really interesting.
how your tools went through multiple iterations, like they seem quite different, and I was just wondering if you could speak to that.
So this really started when we worked on Neverwinter Nights 2, and we used their conversation editor, which is pretty much a tree view, where you just have nested, just.
Nested pluses and minuses and if you have a hundred nodes or whatever in there It's just very difficult to use and see the flow for and so are like from the top We recognize that this was not a good workflow for making games with a million words in it that we needed a faster way To to author dialogues and so the from the top down we recognized that and wanted to go And we have time for one more question from each microphone.
Yay.
Hey, you're great.
So quick question for you.
As an engineer, what was the engineering resource cost of making this tool in terms of time?
In terms of time, we've been iterating on it for probably about 10 years, but if I were to make it from scratch knowing all the lessons that we've learned, it'd probably take one person probably about four months to do.
Okay, thanks.
Okay.
First off, when you were showing some of the playtest footage, was it actually like an engine playtesting where you were able to work on the dialogue and see what it looks like in engine?
So there's two separate applications running.
So the game is running, and then the tool is a separate application that's also running.
But they're using a messaging system to talk to each other.
OK, so how long does the import, export, and what's the functions like to sort of get those things connected?
So we just use a C-sharp UDP listener where we specify an exact port.
And so the designer doesn't have to do anything.
So we're automatically doing the connection behind the scenes.
So whenever we start up the tool, we send a message looking if the game is running.
And the same thing with the game, that's always looking at the conversation editors running.
And we'll sync up things automatically.
That's really cool. Thank you.
And if anyone has other questions, we can move to the wrap-up room to address them there.
