My name is Patrick, and I'm here today to talk about discoverability, as you might have guessed from the somewhat cryptic title of the talk.
I run a small studio from an even smaller town based in New Zealand, and so you might be wondering what I'm doing here.
Our most recent title with Dry Cactus is a semi-casual bridge-building kind of simulator titled Polybridge.
As we were developing Polybridge, we very quickly realized that there was a fair amount of competition in the indie scene.
This is a Steam title that released in early access a few years ago.
So we tried to kind of implement a number of techniques that we like to call community-driven discoverability, meaning a number of kind of game design decisions that try to kind of cater to empower the community to help us promote our title in a very organic and socially driven way without trying to fall under the marketing umbrella.
I should have clicked on this.
I'm very professional as you can tell.
There we go.
So, yeah, Polybridge, again, this is quite a small title.
You might have seen it a few years ago because it went viral, we might say, on Reddit and Twitter and so on.
Talking about discoverability is pretty vague.
Of course, it's not a new topic by any means.
It's, you know, it's, we've kind of been dealing with discoverability ever since games existed, probably used to be very old school in retail and so on.
Obviously, now everything has moved digital.
I guess the main issues we're facing as independent developers these days is that we've identified a number of trends that have been very quickly solidifying in recent years, and so discoverability as a whole has taken really center stage.
You might have noticed, in fact, that throughout this GDC, in particular like in the Indie Summit, but also in the general talks at GDC, there's been significant talk around discoverability.
There was even discoverability day, whatever that is.
And just kind of, we're all kind of on edge thinking, oh my God, how am I gonna make my game discoverable?
Marketing doesn't really work anymore.
There's so much saturation and so on.
So some of these trends that we don't really love, but they have to be acknowledged and we have to kind of start working with.
are obvious, you know, the more obvious one being platform saturation.
We've been seeing that for a long time occurring, but of course with the semi-recent changes, particularly on Steam, with Greenlight going away and Steam Direct and new stores coming up, they are kind of allowing a fair amount of self-publishing, kind of, and lack of curation in general.
So that's, you know, one thing we're battling against constantly.
The other thing which I'm not a big fan of, but it's just the way we're going, is kind of algorithmic curation.
So we're moving away quite aggressively and quite quickly from being able to reach out to establish dev relations and to kind of hope, or to try and maneuver some degree of hand-curated featuring when we go to release a new title or a major update, or whatever it is.
And we've moved quite a lot into this kind of algorithmic curation of recommendations and so on.
And so again, we need to kind of think a lot about these things while we think about discoverability and how these things affect the games that we're making.
Also not a big fan of the lack of cross-promotion, in particular I guess this applies to the recent launch of the Epic Store, which is very interesting.
If you notice, you go to the Epic store, and possibly also Discord, but I'm not too sure, actually off the top of my head.
But they do no attempt to do any degree of cross-promotion within their store.
So if you go to the page of Game A, it doesn't attempt to recommend any similar games that you might be interested in.
So literally, if a customer reaches Game A page...
there is no chance of game B kind of getting promoted, even though there might be lots of overlap.
We're very used to seeing these things in Steam, on the Apple Store, on Google Play.
It's all about cross-promotion, but it seems like some models seem to be moving away from that as well, so.
Basically, I guess what's happening and what we really need to be mindful about is that we need to be driving as much traffic as possible to the stores ourselves rather than kind of being able to rely on internal factors within the platform that can help us kind of surface in that kind of discoverability queue and so on.
Sorry, click, there we go.
I guess discoverability as a whole is a pretty vague term.
Often it falls under the kind of marketing branch, we could say, and hopefully by now most of us have realized that trying to tag on marketing towards the end of the development life cycle is a way to hurt ourselves quite actively.
Again, hopefully we all realize that marketing, whatever that means, is a thing we do from day one.
Marketing, the marketability of a game is lots to do with the game design, game mechanics, and how they appeal to certain established audiences.
And so discoverability is really no different in that sense.
But because of all the things we just mentioned, it seems to be really that discoverability has kind of branched off from marketing and become its own thing.
Trying to identify what makes good discoverability is almost impossible, I would say.
I tried very hard in recent years, but it often falls flat on my face.
Although we can identify some broad areas that are obviously very valid and apply to pretty much every game.
I'm not going to talk about them because they deserve and have their own talks.
So specifically in this year's UDC, you might have noticed there is talks about how to manage effective email lists, talks about how to start and manage a Discord community, talks about how to do outreach to YouTubers and streamers and so on and so forth.
these are things that we all need to be doing very well, but they're not the topic of today's talk because obviously they take up their own segment and so they deserve their own time. So ideally if you have access to GDC Vault or you attended these talks you learned a lot from these. What I was doing today and what I'm hoping to be able to kind of communicate is what choices can we make and what things do we need to think about when we're talking about discoverability in a community sense?
And particularly we're thinking about how do social aspects of our games can impact discoverability and help us surface above the noise, basically.
Before we jump into a few examples that I've identified, I just wanted to touch on a couple of topics which I feel are kind of the foundational pillars when we think about discoverability, at least they are for us in our small studio.
Whenever we make game design decisions with discoverability in mind, we always try to think about how do these decisions impact a couple of these pillars.
The first one which is relatively recently become a huge thing is driving external traffic.
Basically what I mean is, as I was touching on before, even just a year ago we might have been able to release a game on Steam, for example, and maybe by having a developer relation or anyways by kind of choosing a smart launch window we would be able to get a certain amount of visibility because there is in-platform promotion.
This is kind of going away over time, replaced by algorithmic recommendations and so a very important metric which is not kind of very often said, but it's become kind of a huge key factor in recent months and just is external traffic.
And that doesn't mean that you're trying to drive external traffic to your website.
It means that you're trying to drive external traffic to the platform specifically.
So again, in the example of Steam.
you're trying to bring people to Steam, ideally these are people who don't even have a Steam account and so a very significant metric by the algorithm gods, as we call them, is external traffic that then translates into a new account on the platform.
If you are somehow, obviously it's easier said than done, but if you're somehow able to drive significant traffic to Steam through your game, you can be sure that somebody will notice and your title will magically surface up on the top of the recommendations in algorithmic curation.
So I guess if you're a distracted person like myself and you forget most things that you hear, one thing you could take away from this talk is that the main thing you're trying to do is drive external traffic to the store page.
With that said, the other goal that I always think about when thinking about discoverability is how do my efforts in game design and discoverability translate to community and how does my community interaction feed back into discoverability.
It's a bit of a loop, so of course, trying to get that momentum going initially isn't necessarily very straightforward, but it just helps, I guess, to always think about how can I do things in my game that will help the community make my game more discoverable, and how can my discoverability feed back into the community in a positive sense.
Ultimately, I guess what we're trying to do with games in general, I guess, particularly, well, in our studio, we identify as probably the main value that we try and promote is healthy community.
This doesn't necessarily mean just having, you know, a Discord server where people don't insult each other, but in general it means a long-term community is kind of the foundation of what your fan base can be for your studio, so any further titles already have a fair critical mass that is in a positive sense and want to support your work.
Obviously having a healthy community also brings along many other advantages such as you know they can be your advocates, they can do a bunch of customer support on forums for you so you don't have to do it all yourself. If you're doing an early access period they might be contributing really meaningful ideas into game design and so on.
So yeah, community is number one.
We want a healthy, happy community.
Did I go far too much?
No, here we go.
And so now I wanted to quickly look at three practical examples.
So of course, as I was saying earlier, trying to identify a number of things you can do to affect discoverability is generally very inefficient apart from the obvious, let's do a healthy Discord, let's do email lists, let's try and drive lots of traffic to our coming soon page, and so on.
Those are.
I would consider those obvious, I guess.
The less obvious ones, to try and kind of communicate the importance of a community kind of helping discoverability of your game, I try to focus on three practical examples, giving some data points around these.
The first example is fairly obvious, so to speak, but it has been around for a very long time, so it's by any means nothing new, but...
I think it's still extremely valid these days and there are lots of examples of games that work very well in this kind of area. In fact the talk just before this one also touched briefly on similar topics in the sense that you make small games for your community, you don't try and do something massive. So catering to a niche or a niche depending where you're from.
To me, it means kind of thinking about game design in a relatively narrow sense and identifying your audience beforehand.
This can have huge benefits, of course, because the main one is that we tap into an existing community.
This obviously has more or less value depending on game genre.
There are certain genres that obviously cater very well to this.
If we think of, as an example, which we're going to look at just now, if we look at simulators, particularly if we think about maybe a car engine simulator, you could tap into a community of enthusiasts about car engines.
These are not people who generally play many video games, for example, so you're not competing in the space of video games.
you're actually bringing something new to an established community that has a very specific hobby and is generally quite hungry for quality content.
And so if you come along and you give them a video game of this topic, chances are that they'll be very enthusiastic about it and kind of back you right from the start and also help you shape the game design and game mechanics in a way that is meaningful to this kind of community.
The other big thing I feel about working with the niche titles is kind of, I guess if you've been doing game design for a while, you might be familiar with the fact that when you're doing games, you try and give players a relatively constrained set of rules to work within.
If a player has too much freedom, they often find themselves confused, which leads to frustration, which leads to anger, which leads to one star in the refund, so to speak.
This same concept applies extremely well to game development, of course.
If as a game developer I'm just trying to do something entirely new, that doesn't have an established design language, doesn't have an established audience...
The chances of, you know, obviously having a huge hit are tiny, although of course, there are people who work in that area and that's great for them, but for the rest of us mortals, helping, it's really helpful, I guess, to work within an established set of constraints and a language that's familiar to your players so that you can kind of tap into that.
And it's more about, I guess, iteration and improving rather than trying to come up with something entirely new.
And the third fairly obvious one is we're trying to avoid that market saturation as we were talking about before.
We don't like market saturation.
It's a real thing.
But if you can cater to a niche in a small community and you can add that value, you know, you're kind of avoiding at least that significant pitfall.
A couple of things worth mentioning is, of course, you need to know your subject matter well.
There are lots of examples of independent developers trying to cater to niches, but they don't actually know the niche.
It's in a sense, if you know nothing about airplanes, for example, and you try and make an airplane simulator, chances are that you're not going to do a great job.
And of course you must provide value and quality above and beyond what already exists.
So I guess the risk here is that if you're trying to compete in a small space but there's already a golden standard so to speak, you really have to either improve or offer something that is different enough to have its own merit.
A practical example of that...
Okay, there we go. I can see the images all garbled but they look right over there and it's great.
And so Automation, you might have heard of Automation maybe a bit more recently on Steam actually.
Automation is a relatively small game made by a small team from Australia that moved to New Zealand a number of years ago.
And they're a great, great example of doing this kind of niche thing super well.
As I was saying, the car engine simulator example works really well.
So basically they did a game where you design engines.
and nothing else. Eventually they also implemented a way to design your whole vehicle, so modifying every parameter of the body, modifying every parameter of shocks, wheels, you name it.
Everything is fully simulated and very accurate. But they started off with engines, which was kind of where their main audience was. The marketing they did was entirely non-game, like they did nothing to try and push the game in a video game kind of marketing sense.
They reached out to a number of car magazines that were very eager to cover the topic, and car enthusiasts on YouTube, and so on.
And that worked really well for them.
They've been in development for about six years now, and they're still going strong.
Initially they were released on their own platform, eventually moved on to Steam about four years ago, which did really well.
It's just, I guess they're a very, very good example of catering to a niche, tapping into an existing community that isn't about video games and finding lots of success.
Another quick thing they did recently, you might not know a game called BeamNG, or Beam.ng.
BeamNG is, again, a car simulator, but it doesn't focus on the engine or building part of the car, it just focuses on the driving aspect.
So you drive a little car on your racetrack and you can select from a number of vehicles that were made by the developers.
If you think about this, automation did build your car, BeamNG did drive your car.
Both of them did very realistic simulations and specialized in different fields.
But as you can imagine, there's loads of overlap.
So what they did about eight or nine months ago, they decided to kind of team up, so to speak.
Automation implemented an exporter, so the vehicles you make in automation can be exported.
BeamNG implemented an importer for the automation vehicles.
So what happens is you can design your vehicle in automation and export it and drive it in BeamNG.
You can probably guess by looking at that sales graph from Steam, which we're now allowed to share.
Thank you, Valve, for clarifying the terms of conditions.
Flatlining, as you can see on the left, that's actually not a bad flatline.
That was a daily average of 20, 30 sales a day.
A $30 price point, so not bad, but definitely not enough to support a team of 708 people as they are currently.
The little bumps you start seeing there are the announcement, both BeamNG and Automation did announcements of on this day we're going to be releasing this awesome thing and obviously on the day you can tell what happened.
There was a massive spike, 450% increase over the similar period of the previous year.
The tail kind of increased by five or six times currently.
Overall, I guess, again, a really good example of showing a niche, a different niche overlapping, some platform support because Steam did do a loyalty coupon, so the owners of automation, they didn't have BeamNG, got 30% off and vice versa. So basically that did really well, as you can tell from that massive spike there. The metric on the left is units, so we're spiking at about 4,000 units on that day. If you can do numbers, you can figure it out. So very good.
The other example I wanted to quickly look at is user generated content.
User generated content is a very vague term.
I think we're running low on time so I'm just going to slam through this.
User generated content can mean lots of things.
When I think about user generated content, I primarily think about content that is made in video games where the player has a lot of creative ownership over.
So not necessarily, UGC is often talked about like a mod or a level for a game.
I'm referring to UGC as kind of creative ownership of content, so Minecraft, the obvious Mirror Maker, all the same games where you get to build your city or your ant colony or whatever, like they all.
fall into this category really well.
Roblox, of course, is a huge one.
This has lots of value, I think, to kind of tie communities together, enable very meaningful social interactions between players that like these games.
And we're riding on the wave of the maker movement, which was quite big a number of years ago, but it's still going strong.
So things like the Arduino, which is an open source electronics prototyping platform, and the Raspberry Pi, which is a tiny computer.
All these things kind of...
strongly indicate a desire from game developers and game audiences to kind of find a common language and be able to interact and share content in a very meaningful way.
I'm by no means a psychology expert, but I do often find a very strong relationship between kind of human emotion and this kind of desire to share and to some degree even kind of brag, I guess, with your friends or wider social media circles about what you did. If we think of paintings, for example, your tool would be a paintbrush and your canvas and your colors.
but that's not what you're showing people.
You're showing people what you made with these tools.
The tools become completely transparent and almost invisible, so that's what I'm talking about here is in an ideal world, if we can cater to this kind of human desire to be creative and own the creativity and then showcase it to your friends in social media circles, the game really just becomes, takes back stage, but is inherently promoted all the time.
And this has been huge, so we're gonna look at an example with Polybridge, which is a game we made.
You can hopefully see the animated GIF playing at a very crappy frame rate, but it gives you an idea.
So very simple, in Polybridge we just implemented, just before releasing in Early Access, we implemented this simple frame recorder.
It records at 15 frames a second, and it keeps it in a buffer.
Whenever you fail or succeed in a level, you get a prompt to share your replay.
You share your replay, you can upload it without leaving the game to a bunch of social media platforms that you can authenticate in game.
I had a bunch of stuff that was going to talk about tech, but I do think we're running a bit low on time.
Anyways, you can find some open-sourcing corridors made by Zach.
And so just to give you an idea of the impact this had, this is from July 2015, which is when we released in early access.
Try and take a guess.
Guess what happened?
So you can see to the left we had a relatively minor launch, which was still great.
I was just working on this myself, so I was like, yeah, I can finish this game.
I don't have to go back and get a real job.
I'm really happy.
And then you can start seeing some kind of ups and downs.
The first little spike happening around the 10th of July is Twitter picking up on it.
We had lots of Twitter activity.
The second major spike, the graph on the left, or whatever you call it, the column on the left is US dollars, so I left dollars because again, we're now allowed to share monetary value from our Steam back ends.
And so we can see, you know, for a very small, semi-casual, independent bridge-building game, which is like, who the hell is going to even care, because we had this mechanism where we identified that players were really...
quite strongly kind of sentimental about the bridges they built.
And so if we just said, oh, let's just empower these players and give them the ability to share the content that they made onto their social media platforms, and that was much bigger than we thought.
And obviously you can see the spike, you can see how much significantly the tail picks up after that.
There are a number of other spikes after this, but I just wanted to focus on the first big one.
That big one in the middle is the front page on Reddit, I think, once Reddit started also sharing stuff.
And then, you know, Polybridge GIFs were a thing for many months on Reddit, where then people started saying, you know, not again, not more Polybridge, please.
But it did work really well.
And the last thing I'd like to touch on before we have to bail is Twitch streamers.
Hopefully we all know by now that Twitch is not going away and we all love Twitch.
Hopefully Twitch is listening.
Love Twitch.
There's lots of material out there on what you can do to approach Twitch streamers, so that's definitely not what I want to talk about.
There are talks, there are forum posts, there are blogs, there's so much material out there.
The general rule is you start small, you don't try and reach the large audience, you don't try and reach the large streamers.
There's also an article recently that was showing kind of the crystallization, as they call it, of the Twitch streamer scene, as in, As with any kind of capitalistic model, the number of small streamers that are succeeding, so to speak, and able to do it full-time is decreasing, and the number of large streamers is becoming smaller, but they're getting most of the audience or most of the money, so to speak.
So this is a bit of a worrying phenomenon, but nonetheless, we focus on starting with small streamers.
We want to get them enthusiastic.
We want to have a good relationship with them.
And we also very strongly, hopefully, understand now that attempting to involve influencers, which is a word I highly dislike, at the late stage of marketing is complete nonsense.
Again, we're trying to, well, we're talking about how do we make meaningful gameplay decisions and integrate these into gameplay mechanics to allow this to happen quite organically.
This obviously doesn't apply to every genre.
If you're doing a single player narrative linear story, your appeal to Twitch streamers is already extremely low, so there's not much point in thinking about it, but different games work differently.
And again, with Twitch, we definitely noticed a very strong kind of human connection, or desire for human connection, and so we tried to enable that as much as possible.
So again, a use case for this specific thing.
In Polybridge, we integrated a kind of a way for streamers.
A streamer is playing Polybridge and is building a little bridge, and the viewers are screaming at them in chat saying, no, you're stupid, you're doing it wrong, move this here, do that there.
And then there's a stream of text, and it's impossible, and everything gets lost.
So there was like, OK, there's an issue here.
So we implemented just before release.
a WebGL version, which means an in-browser version of PolyBridge, super minified, no textures, nothing, everything was ripped out.
But what that means is that as a viewer, you can load up this kind of in-browser version of PolyBridge, you get a mirror version of the bridge that the streamer's building, you can modify the bridge, you just can't simulate it, you can only modify it, and you can submit it back to the streamer as a suggestion, who then gets a pop-up saying...
this person just submitted a suggestion.
So basically we created a very easy way for streamers and audience to collaborate together and play together in an asynchronous way while the streamer stays in control, which is obviously very important.
If you're interested a bit in the tech about this, just email me and we can talk about it later because we're running out of time, I believe.
Use case again, with a nice little graph, because we all like graphs.
If anyone knows who that on the left is, they get 10 points.
I didn't know until recently.
That is a Twitch streamer, or streamer in general.
His name is Faker, and he's from South Korea.
Those two big things you see behind him are the, kind of his world champion things of Leagues of Legends.
League of Legends, rather, I should know what I'm talking about.
League of Legends is a relatively large game, as you might have heard.
So what Faker did, and this was completely, you know, I didn't do anything, this is two years after release, the Twitch thing was going on.
So basically this Twitch integration we did made it so that...
Polybridge became quite a common staple within the Twitch community, so small streamers would often play Polybridge because it would allow them to interact with their audiences in a more meaningful social way and allow the streamer to cultivate their own community because that's what a Twitch streamer obviously wants to do.
They want to have a healthy community too, just as much as we do.
So...
Poly Bridge allows them, Poly Bridge becomes a tool for them to cultivate this kind of healthy community more so than other games because other games are very passive when the audience is just kind of watching.
And so because we integrated this, Twitch kind of became a common staple and two years after release, Faker started playing, before doing his League of Legends streams that are quite huge, he started playing Poly Bridge for half an hour to an hour and he's actually still going because he's determined to finish the game.
And so if you look at the graph, this is the graph for the steam cells in the Asia regions, so primarily China, South Korea, Japan, and a bunch of smaller ones.
You can see to the left, we're kind of flat-lining there.
We're, I think, five or ten units a day, pretty negligible.
And you see that first little bump, that's Faker's first short stream.
You see the second bigger, but all of the spikes you see in this graph are because Faker is playing Poly Bridge.
These are no longer dollar values, these are Steam units.
The Steam backend doesn't give dollar value when you're doing regional for some reason, so...
Very impactful, I guess. Obviously from the spikes, but you can see the long-term tail tends to creep up and without giving it a dollar value.
If I could buy something for Faker, it would probably be a gold statue of himself because he did...
do a lot to help us financially without even ever thinking about it.
We've never been in touch, but the fact that a large streamer just decided to play PolyBridge because of this Twitch integration, because of the social value we added, has been huge for us as a game studio and our ability to continue making games.
And I think that's us. If anyone has any questions, I think we have one minute.
Otherwise, I will hang out for more time later.
I'm still on the one question.
Sure.
Have you heard of Twitch extensions?
I have heard of Twitch extensions, yes.
I would love to see a Twitch extension for VolleyBridge.
Probably, yes.
I think, so the question being Twitch extensions and so on.
I think Twitch extensions are a great tool and a clear indicator that Twitch has picked up on this kind of social value.
I haven't worked with them too much to be honest, because for this thing the Twitch extensions did not cater at all.
So we had to implement our whole server back end with a REST API and so on.
But I'm actually meeting with Twitch tomorrow and we're going to be talking about how we can do this and so on.
And I think that's us. Beautiful. Thank you.
