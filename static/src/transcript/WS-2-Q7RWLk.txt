Hello? Can you hear me?
Alright.
Too loud, too quiet.
Everyone who was out last night is like, too loud, too loud.
So a couple things before we get started.
Please turn off your cell phones.
If it does ring, I will mock you incessantly throughout this presentation.
And at the end, you're going to get that electronic survey.
We've all gotten them.
Please fill it out.
Let me know what I can do better.
If we need more content, less content, some sort of synchronized dance-off, whatever.
And it helps me come back next year.
Also, I can talk a little fast when I get nervous, so if we get to the end of this thing and you guys are like, what the hell did he just say?
We'll have time for questions, so don't worry too much about it.
All right, my name is Scott Shepard.
I'm the technical art lead for the 3D department at Bungie.
I've been in the games industry since about 1999, and I've worked on everything from fantasy MMOs to survival horror, the sci-fi first-person shooters of Halo.
But for about the past four years, I've been focused on building customizable characters for Destiny.
To talk about Bungie's future, we first have to talk about our past.
The Master Chief is one of the most recognizable characters of the modern video game era.
His image was developed across 10 years of projects and thousands of man hours of work.
He has appeared in games, books, animated and live action films, as action figures, even on soda cans.
His green armor and orange visor ingrained in the minds of gamers both young and old.
His faceless design allowed the player to really imagine themselves as the hero of the Halo saga.
I call that out because that point stuck with us in particular.
So where do we go from here?
How do we on one hand build off the successes we learned from developing the Master Chief, but at the same time create something entirely unique to Destiny?
Who is Destiny's main hero?
Well, the answer is, there isn't one. Destiny isn't about a singular hero or story. Our mantra throughout the development of this project has been to create a world that people want to be in. To go back to. This is a place for players to tell their own stories.
In short, our hero is you. This story is yours. The idea of telling these player stories were the driving points for all of our decisions regarding our player characters.
It was important for us to feel, important for us to let the player feel like they were part of this world, invested in it. That we weren't handing them a role to play. They were creating their own role.
To accomplish that, we needed a system that enabled the player to discover and shape their avatar in the world of Destiny. That meant allowing each player to stand out from others and encouraging them to grow and change their character over time.
To succeed at this, we needed a deep and satisfying customization experience that went well beyond anything we've ever attempted before, and something we hadn't really seen in a shooter to date.
Early on, we talked a lot about power fantasies.
These are the heroes and adventurers that inspire us.
At an early age, this may be as simple as a game of Cowboys and Indians.
As we were exposed to different types of heroes, it grows to include the likes of space marines, pirates, wizards, knights, ninjas, what have you.
We took these power fantasies and tried to wrap them into archetypes that fit well within our world.
What we emerged with were three classes we felt best represented the types of stories our players would want to tell on Destiny.
These are the Hunters, the Warlocks, and the Titans.
To begin our explorations, we broke our character bodies into four slots, the head, chest, arms, and legs.
As players progressed through the world of Destiny, they would be rewarded with different pieces of gear for each slot.
This gear would alter their appearance and abilities, allowing them to make choices that affected both their visual as well as gameplay experiences.
These four slots offered a balance between gameplay progression, visual customization, and aesthetic harmony.
We chose basic silhouette shapes for each of the classes to help make them more readable.
These shapes formed many of the ideas behind the initial concepts and served as guides for ensuring each class maintained a unique identity.
To further separate the classes, we added a fifth class-specific gear slot.
The Hunter's Cloak, the Titan's Badge, and the Warlock's Bond, or armband.
The hunters are our frontier scouts, scavenging and exploring in the world outside the city to bring back valuable technology the citizens rely upon.
They are hacker cowboys, bounty hunters, and recon snipers.
They carry themselves with style and swagger.
Hunters scavenge much of their gear, so we decided on an almost mix and match haphazard look to their designs.
Like the wandering adventures of old, they wear heavy cloaks and combine utilitarian accessories such as packs and straps with trophies of their adventures, both functional and fashionable.
We drew inspiration from survival gear like gas masks and hazmat suits.
So we chose to design their helmets with a focus on goggles and breathers.
Their armor is lightweight and fitted to allow for mobility and speed.
It is often comprised of a hard chest plate over a flexible Kevlar-like midsection.
They wear loose-fitting pants with pockets and sturdy walking boots.
The warlocks are our warrior scholars, searching for answers to the mysteries of the Traveler and a mastery of its power.
They are mystics, seers, and wandering monks.
They are mysterious and secretive, with the ability to harness the power of the Traveler to devastating effect.
They wear long overcoats and robes, and while they generally rely on their abilities more than heavy armor of other classes, they still pack a fair amount of hardware on their persons.
They're scholarly, but also practical, and they are no strangers to the heavy firepower required to survive in the wild.
The warlocks had many influences and inspirations, from wizards and shamans to the trench soldiers of World War I.
We tried to combine all of these elements while always maintaining an air of mystery about them.
And finally, the Titans, our equivalents to the Knights of Old.
Heavily armored and bearing the emblems and heraldry of the city they protect.
They are noble and brave, with a culture steeped in tradition.
The Titans considered a great honor to protect their city.
They are the most heavily armored of our three classes.
Their designs are most often comprised of a tight-fitting rubber suit layered with heavy metal plates, with large pauldron-like shoulder pads and sweeping visors inspired by medieval and renaissance armor.
Large armored thigh pads and boots are also a common trait of the Titans.
The badge they wear at their side, the symbol of their achievements, lineage, or allegiance, much like the tabards worn by knights throughout history.
OK, so we had a distinct look for each of our classes we were happy with.
But we still had a lot of questions to answer.
What did different versions of these classes look like?
What parts would change?
And what components were key to the class identity?
How do we break up these awesome designs to fit into an investment and customization system?
We generated countless drawings to help us answer these questions and more.
And we use these drawings to set targets for our customization system.
But an old colleague of mine used to say, designing games is as much about deciding what you can't do as what you can.
Setting limitations was just as important as setting targets.
For example, many of these designs called for a great deal of overlapping pieces, which was technically very challenging.
We did some tests in this area, but in the end we felt it was significantly limiting the artists.
So we just simplified it and moved on.
We've done customization before with some success.
With every iteration, we've gotten a little more complex and a little more expansive.
Naturally, this is where we started.
Could we build off what we had created for the Halo franchise?
In Reach, we broke our characters into helmets, chest armor, arm accessories, and thigh packs.
This was not unlike our plans for Destiny, different pieces of gear for different parts of the body.
The problem, however, was the scope.
The sheer amount of content we had to produce for Destiny meant we needed to be thinking outside the box, to approach this problem from a different angle.
During the course of building Helmets for Reach, we created special add-ons intended to add extra variation to each helmet.
This worked pretty much as we expected.
But a funny thing happened.
We accidentally put the add-ons from one helmet onto another.
And surprisingly it We found that a lot of these add-ons could just be Z-buffered into the base helmets to quickly create new variants.
This got me wondering if we could create an entire character using that approach.
So I started mocking up a system in Maya, building pieces and layering them on top of each other, until I ended up with what you see here.
Twenty-five or so pieces used to build twelve different helmets.
Using these pieces in different colors, I was able to create a variety of helmets very quickly.
Adding in textures and decals in Photoshop, I created this proof of concept image.
This is what we presented to our tools and graphics engineers to kick off our early discussions.
Going into these discussions, we had several goals in mind for our new system.
We wanted to save as much time as possible in both creation and maintenance of our content.
To have a base of common assets that we weren't rebuilding every time we had to make a new piece of gear.
How many artists find themselves modeling basically the same pair of boots ten times throughout the course of a project?
If they're smart about it, they reuse their high poly and kitbash some of their previous assets together.
But even then, they're generally still ripping new maps, laying out new UVs, and retexturing things countless times.
We needed to be more efficient than that.
That meant the ability to build a shoulder pad one time and use it freely as many times as it was needed in the game without additional work.
We also wanted to remain as flexible as possible.
If near the end of development, we realized the same shoulder pad was over budget or didn't deform properly or people just didn't like it, we needed to be able to fix that piece once and not open every piece of gear that shoulder pad was used in.
We knew that this was a franchise we intended to grow and develop over the next decade.
The system needed to be expandable, something we could build on as we added content in the forms of DLC, expansions, and sequels.
We knew we couldn't afford to rebuild everything for every release.
We were spanning console generations, which meant we needed the system to be flexible enough to take advantage of the higher poly and texture budgets that would be afforded by the new generation of hardware.
And we knew that even within the same generation of consoles, tech improves, tools improve, artists improve.
It was important to be able to address old content quickly and easily down the road.
From our design team, the desire was for player characters to pick up different pieces of gear, what we call arrangements, for each slot and swap them throughout the course of the game.
When this happened, we wanted the player to notice a significant change to their appearance.
Because of this, artists needed to be able to change assets significantly without having to worry about breaking skinning or affecting animation. In short, we needed the ability to create something that looked completely different with little to no wake on other teams.
So after some lengthy discussions with some very smart people, we had a plan. We needed to stop thinking of our characters like this.
and start thinking of them like this. The idea was to break our character designs down into their most base elements. Things like belt buckles, shoulder pads, visors and straps would all be modeled and textured as self-contained individual assets.
So building this became much more about building this.
These individual pieces, what we call bits, would be stored as separate files and assembled by an artist to create a new arrangement of arms, legs, helmets, et cetera.
If the design for a particular arrangement called for a buckle, rather than building a new buckle, the artist would simply load an existing buckle bit and place it where he or she needed, with the system handling many of the technical aspects behind the scenes.
To control the material properties of each bit, we created dyes.
The dye assigned to a bit controls its color, specular qualities, detail maps, et cetera.
We decided each arrangement would have a dye for armor, for cloth, and what we call suit, which is generally leather or rubber.
Each bit within an arrangement will be flagged as one of these types and the material properties set accordingly.
So we had a plan.
We knew how we were going to break our characters down.
Now we just needed a way to put them back together.
Enter a mashup.
Mashup is our custom character assembler.
It allows for any bit created by any artist to be brought in, placed, rotated, scaled to fit the arrangement as needed, all without affecting the original bit geometry.
It really is the heart of our player character building process.
So this is an example of an artist working in mashup.
We start each arrangement by bringing in a core to build off of.
There's nothing particularly special about the core, but it is the foundation of the arrangement.
Much like the foundation of a house dictates the basic layout of the structure built on top of it.
The artist then begins loading in bits and placing them where needed.
Each arrangement has a set of predetermined points to aid in placement.
Things like front, back, left upper arm, right upper arm, et cetera.
Bits can be set to default to a certain point, just to make things a little easier and faster for the artists.
As you can see, the artists can scale, rotate, or mirror the bit in a variety of ways to accommodate the needs of the arrangement.
There's no hard limit to the number of bits an arrangement can be made of, as the bits are combined at export time to save performance.
As long as the overall arrangement still fits in its allotted memory and performance budgets, we're all good.
After we've established the basic geometry of the helmet, there are a number of properties that can be set on each bit to alter its function or appearance.
We can set what type of material the bit takes from our die system.
We can set whether the bit draws in first person or not.
We can set whether the bit, excuse me, what platforms the bit is drawn on.
We can also override the bit's default shader, allowing for texture and shader variation unique to that arrangement.
And we can even add vertex animation to give the bit sway or movement.
After properties are set, we need to skin the bits.
They can be quickly rigid-bound or skinned using our custom one-button skinning tool.
Optionally, the bit can be custom skinned by one of our riggers, and the skin weight stored within the bit and applied the next time an artist brings it in.
Now this video is sped up to about five times normal speed.
And I'm not going to lie to you, I've built this helmet before.
But it comes in in about three minutes and thirty seconds.
So what you're looking at is a new piece of helmet content in about twenty minutes.
So the other tool you saw in that video is Gear Manager.
Gear Manager allows us to browse through arrangements, bits, and bobs.
A bob, or a bunch of bits, is essentially a group of bits stored as a preset.
It allows artists to put together pieces that are more complex than a single bit, but simpler than a full arrangement.
A pair of boots including straps and armor might be a good example of this.
Most importantly, Gear Manager gives us a variety of methods to find useful bits.
The most obvious method being to simply scroll through pages of thumbnails looking for something interesting.
But there's much more to it than that.
I can filter and search bits by name, by folder, by class, or by artist-assigned keyword.
I can also mark bits as favorites to easily find them later.
For example, I can search for metal bolts, limit that to a certain class, quickly scrub through thumbnails, and even rotate and zoom a preview of the model, all in Gear Manager.
Once I find one I'm interested in, I simply double-click to send it to Mashup.
Going back to our Lego analogy, how many hours did you spend pawing through that giant container of Legos looking for that perfect piece?
Gear Manager allows artists to focus on building their arrangements rather than searching for pieces.
Cloth setup is generally the last step of our process.
We use Havok Cloth, and a custom wizard-like interface that allows artists to define cloth regions without delving too deeply into technical setup.
Artists pick the type of cloth gear they are making, the type of fabric, and the wizard guides them through selecting the appropriate verts for skinned, simulated, and anchored regions.
In the end, once it's been imported into the game, it looks something like this.
So now that we've built our helmet, we need to make sure it conforms to the geometry and texture budgets we've allowed for it.
Because there's the potential for every player in a given space to be wearing completely unique gear, we decided to assign each player their own texture and polygon budgets.
Memory within a mission could then be set aside based on the number of players it required.
More than that, since each player can swap out different parts of their character, we had to further break those budgets down into an amount per slot.
These were then tailored to best fit each class.
For example, a Titan's arm slot allows for a 1024 by 512 texture on the PlayStation 3 and Xbox 360, and roughly 170K memory for geometry.
A Warlock's arm slot, which covers less real estate, allows for a 512 by 512 texture and 110K memory for geometry.
However, the budget for all the combined gear of the Titan and the Warlock is the same.
Okay, understanding that, let's take a look at this Hunter's chest arrangement, shown in our texture plate preview.
On the left is the empty plate.
The green area is the texture space I have to work with for this chest arrangement.
On the right is the built plate.
The engine takes each bit's textures and UVs and programmatically arranges them on the plate.
Anything that doesn't fit is displayed in the red area on the right side of the preview.
So here you can see I have three bits not fitting on the plate.
At this point, I have a couple of options.
I can remove some bits to make more room on the texture.
I can swap out some of the larger resolution ones for smaller.
Or I can change the bits texture size.
Generally, the first two options are my best bet.
If I change the bit's texture size, it's going to affect every arrangement that bit is used in.
So increasing or decreasing resolution of a bit is handled with extreme care.
In this case, though, the orange highlighted bit on the left was using an inappropriate amount of texture resolution relative to its physical size.
So I reduced it down.
And that change gets propagated to any arrangement that bit is used in.
And it allows my three remaining bits to fit nicely on the plate.
So that gives us a handle on our texture budgets.
Now let's take a look at our geometry.
Here you see the geometry memory profile for our hunter chest.
Unlike the texture memory, each instance of a bit has to be counted.
So each instance is shown along with a breakdown of cost.
Since many things like UV borders, hard edges, and shader assignments can affect the amount of memory associated with the geometry, we try to give the artist as much information as possible.
If I'm over budget, my options are similar to that of my texture budget pass.
I can remove some bits, swap them out for cheaper ones, or I can open one up and make some changes to the actual geometry.
Many times we'll find that something simple, like a bit containing a large number of unwelded UVs or unnecessary edge loops, in which case, it's a simple matter of right-clicking the bit, selecting edit, making my changes, and saving.
With that, I've just made an optimization to every arrangement that bit is used in.
Now that I've got my helmet built and budget, I'm in done, right?
Wrong.
Part of player customization means allowing for both genders.
So now we have to look at building the female version of our helmet.
We initially experimented with taking a fully built piece of male gear and using a combination of wrap deformers and blend shapes to create a semi-automated process for building female gear.
There were several problems with this approach.
First, since it combined all of the bits into a single piece of geometry, to then be conformed to the female physique, it lost a lot of the flexibility and benefits of the system.
Second, to meet our high quality bar, artists were spending longer and longer massaging the geometry by hand, rather than relying on the automated mesh.
So after some careful consideration, we made a direction change.
We decided that with a few modifications and additional tools, our current process was quick enough and strong enough to use for both male and female arrangements.
We added the ability for a bit to have a female version.
This is particularly useful for things like chest plates and pants, where we want geometry that more closely conforms to the feminine proportions.
However, the majority of things, ammo packs and the like, just needed to be slightly scaled down and moved into position.
This allowed us to use the vast majority of the content we built for both males and females.
Now, if you noticed on the texture preview slide, all of our bits are textured for the most part as gray scale images.
This is to allow for the additional customization layer brought in by our dye system.
Before I get into that, I want to talk a little bit about the textures associated with a bit.
Like most modern 3D assets, our primary maps are diffuse and normal maps.
But for bits, we also have what we call a gear stack texture.
Here's a sample gear stack texture for one of our hunter capes.
Pretty, isn't it?
What the gear stack is, is three different black and white masks stacked into a single RGB texture to conserve memory.
We've evolved these masks to be used in a number of different ways, but the general usage goes like this.
The blue channel holds a fringe map, or alpha test map.
This is primarily used on cloth bits to create tatters and holes, hence the name fringe.
The green channel stores our specular roughness map, which works in conjunction with the assigned spec material to control specular roughness and intensity of the surface.
And finally, in the red channel we have our scratch mask.
The scratch mask is used to control what areas are affected by the dye assigned to the bit.
We call it a dye, but it controls significantly more than just color.
Areas that are white in the scratch mask get affected by not only the dye's color, using an assigned blend method, but also the dye's diffuse and normal detail maps, as well as the specular material response.
Speaking of which, let's talk a bit about how we handle specular.
Our spec response is comprised of three elements, the gear's specular roughness mask, as we saw on the previous slide, and the die's specular lobe intent.
The specular lobe controls three aspects of the material's spec response, the shape of the highlight, the brightness of the highlight, and the falloff of the diffuse light.
Instead of using a standard Phong model, we map a content-driven gradient ramp to the surface to define the appearance and shape of the specular highlight.
The ramp textures shown at the bottom of the image are applied to the sphere above, beginning at the point of reflection and extending 180 degrees around the mesh.
The outlined orange area demonstrates how the ramp textures correspond to the highlight they produce.
The Specular Tint is also a content-driven gradient ramp, and it controls four aspects of how Specular will render on the surface.
the color of the specular highlight, how the diffuse texture influences the specular response, the brightness of the highlight based on angle, and diffuse brightness scaling.
Unlike the lobe ramp, which maps based on the position of a light source, the tint ramp maps to the surface based on viewing angle.
The ramp extends from the surface perpendicular to the view, 90 degrees to the glancing edge.
This is what allows us to change specular color based on angle of view.
Again, the orange outline demonstrate how these ramps get applied to the spheres above.
The tent also sets how the specular highlight is modified by the underlying diffuse.
These spheres above are rendered in a debug spec light only mode.
The one on the left allows the diffuse texture of the sphere to modify the specular color and brightness.
The middle image modifies the specular response based on the diffuse luminance, so only adjusting the brightness.
And a third white overcoat image ignores the diffuse entirely in regards to specular response.
Put this all together and it looks like this.
Lobe multiplied by tint plus diffuse.
However this image above assumes a pure white specular roughness mask.
The spec roughness mask modifies the spec result.
Generally white pixels in the mask produce a bright sharp highlight and dark pixels produce a dim broad highlight.
This combination of elements gives artists a huge variety of interesting spec responses to work with.
When you combine this with the additional elements in the die, it looks like this.
As you can see, this allows us to apply a range of materials from polished chrome to worn leather to Kevlar to tattered cloth, all on the same base texture and geometry.
All of these are materials we can quickly and easily apply to any of our player gear.
In addition to the dyed areas of gear, we also have controls for the other side of the scratch mask.
The areas that are painted black can be assigned their own specular properties, as well as detail, diffuse, and normal maps.
This helps us achieve things like matte paint being stripped away from shiny metal or a shiny metal buckle on a leather collar.
Each arrangement gets assigned three different dyes, a dye for suit, for armor, and for cloth.
Each dye has both a primary and secondary color associated with it.
These parameters are set on a per-bit basis throughout the arrangement.
The dyes assigned to an arrangement help to control the color palette, homogenize all of the bits into a cohesive piece, and allow us to form larger graphic shapes within the character.
The initial design of the customization system called for each player to have three dies assigned across their entire character.
This was based on the artist's desire to avoid every color of the rainbows showing up.
The idea was that players would pick up different die items that would fit into the three slots, armor, cloth, and suit.
These dies were then applied to the arrangement across the entire character.
Unfortunately, this was a case where the design needs required us to adapt our artistic plans.
What we discovered was that when a player picked up a new piece of gear, even though we were changing the silhouette fairly significantly, the visual impact wasn't enough to produce the emotional impact we wanted from the player.
In other words, the player just didn't feel as excited about a new piece of gear as we wanted them to, because we were only changing one of the visual axes of the character.
The human eye reads changes in color better than it reads changes in shape. And changes in both color and shape are necessary for maximum impact. With this it was decided that each tier of player gear would be assigned a different color, so that it was obvious to the player when they picked up a piece of gear that it was of higher level.
The challenge here was to create color palettes that were distinct enough individually, but worked well together from one tier to the next.
Here we have our initial passes at creating these color palettes.
We used simple block representations of our classes to assess color compatibility and distribution.
These palettes have been continuously adjusted in InGen to better communicate to the player.
Using this color and shape approach proved to be pretty successful in creating bold enough changes to meet design needs while still feeling good to the artists.
So after building all these fantastic assets, we needed the ability to quickly view and manage these arrangements and die assignments in game.
So we created Mantini.
With Mantini, we can quickly select the designer-created investment item that a player would pick up in game and set the arrangement and the default dies assigned to it, all within the same UI.
I can quickly change and browse arrangements and dies on the fly, as well as check both male and female versions of the arrangement.
This proved invaluable for checking various arrangements for color compatibility, as well as finding issues such as clipping or missing pieces.
Using Mantini, we put together this video to show off some of our very early work in progress content.
You So, that's a pretty solid overview of the system.
But I'd be lying if I told you it all went perfectly.
Let's be honest, it never does.
We faced a number of challenges throughout this process.
The system is fairly abstract and complex.
Destiny has been heavily concept-driven, and both the art director and the concept team are far more comfortable with designs of full characters rather than a modular system.
Though we tried as best we could to create modular pieces that worked well together, many of the designs led themselves to unique, specialized bits.
As a result, I feel like we've still only scratched the surface of what we can do with the system.
content creation got too far ahead of tools and engineering work.
For much of the production cycle, the tools were very much a work in progress.
Missing features and stability issues made working with the system early on somewhat of a nightmare.
This caused a lot of frustration and slowdowns for the content creators.
And finally, we lost some of the joy of building characters.
To be honest, this is a problem with any customization system I've worked with.
It's difficult to maintain a sense of creative ownership and excitement for artists when they're building small parts of a character rather than the full thing.
Since geometry and textures needed to stay modular, it kept the artists from really being able to hand craft assets to the level they desired.
OK, so what went right?
Overall, the system itself works quite well.
At this stage, a new and unique looking arrangement can be created in a very short period of time.
For something like a helmet, that may take as little as an hour from start to end game.
We've also seen the system get better and better the more content we add to it.
This bodes extremely well for a franchise we plan to carry on for a number of years.
The flexibility the system provided us has proved invaluable in fixing bugs and reacting to designer and art director feedback.
Don't like the color of something?
Change the dye.
That sleeve not deforming properly?
Fix it in one place and it's fixed everywhere.
This fits in extremely well with Bungie's approach of rapid iteration.
Lastly, the system helped to unify content.
With so many different artists working on player characters, the system proved a fantastic tool for helping to set the ground rules to bridge different artists' styles.
Since artists were constantly seeing and working with each other's content, they quickly picked up on the design language and style we were striving for.
The additional layer of the Dye system assured color and spec responses were also unified.
So an entirely new type of game, an entirely new engine and tool set, and a largely new team set the challenge for us.
And we learned a ton.
How to best work with the system, what tools and features we're missing.
We also learned a lot about our strengths and weaknesses as a team, and where we can do things smarter and more efficiently.
It's been a tough road, but we've set ourselves up incredibly well for the future, and I'm very pleased with that.
So now that you have an idea of the system and its challenges and successes, let's take a look at what happens when you put it all together.
These are just a few of the player characters you could see when you're playing through Destiny this fall.
hram mam the the that that OK, so where do we go from here?
There are key things we missed out on, opportunities to make the system stronger that we didn't have time or resources to take advantage of for this project.
First and foremost on our list is a more advanced decal system.
Decals are a great way to allow players to customize their look.
Games like Forza have built entire economies on player-generated decals.
Our current system requires placement and geometry to be created by an artist specific to each arrangement.
A system allowing for projected decals based on both artist as well as user generated content would be a huge tool in allowing players to express themselves.
Developing for four platforms simultaneously is a difficult task for any developer.
To make content more efficiently, we need better tools to allow artists to focus on what they do best, making amazing art, and not having to spend time dealing with separate budget and performance goals for the individual platforms.
We would also benefit from an expanded dye system.
Additional features in the dye to control things like environment maps, adjust wear levels, and blend in multiple sets of detail maps would greatly improve the system.
Something we've strongly desired is the ability to add an accent color that appears in small controlled amounts to give an arrangement that extra little pop.
In conclusion, Destiny is a hugely ambitious game, and our player customization system is no different.
Like all ambitious efforts, there were challenges along the way.
Overall, I believe we've achieved something completely unique to the shooter genre and developed a system that will only grow in power and flexibility as we continue to create content and expand the franchise.
So obviously, a system like this takes a bunch of people pouring their heart and souls into it.
And most of them couldn't be here today.
But I have to say, thank you very much to the team back at Bungie for allowing me to come here and share this with you.
That's it.
So if anybody has any questions, I think they want you to use the microphones.
But they're not going to turn them on.
I'll pretend it's on and hopefully you can hear me.
Oh, there we go.
Does this system extend beyond the character to things like weapons or world doodads and why or why not?
It does.
We, we're trying to use the system as much as possible.
We do use it on our hard surface assets as well, like weapons and player ships and that sort of stuff.
When you end up changing a bit, how long does it take to propagate that across all the helmets that might use that bit?
Like you have to rebuild all those assets, I imagine.
The bits are loaded when you bring the arrangement into Maya.
So from a content creator standpoint, it happens instantaneously.
As soon as it's checked in and you get latest, you load up that arrangement, the new bit is in there.
But then when you make the, like, when you go to use it in the game.
So for the individual artists, they will re-export the geometry, and it'll come in game.
Other than that, we do nightly builds.
So for people on the other side of the team, we'll see it whenever they get the next content build.
OK.
So my question is, will we ever see Tiger Man DLC?
And if not, how does your team go about deciding something doesn't fit the world you're building?
Sorry, what was that last part?
How does your team decide something that you've been prototyping doesn't fit the art style you're taking the game in?
So, I guess I'm supposed to repeat the questions, which I totally forgot the first one.
The first part was, will we see Tiger Man in DLC?
The answer to that is, you never know.
If we do, you can guarantee I'll be using Tiger Man first before you guys.
Second part, how do we decide if something doesn't fit the art style?
Bungie, as I said, is very much about iteration.
We put things in game and we try to do it in the smartest way possible, but if an asset doesn't fit within the art style or within the gameplay, we cut it.
So you have a lot of, you know, mix-and-match hard armor pieces like an upper chest plate and a lower chest plate.
How do you make sure that, you know, all the different possible combinations don't end up self-intersecting and doing bad things and so on?
Mostly just quick and easy tools for checking animations.
We have in Maya animation previews.
So I can be working on an arrangement and hit a single button to see that arrangement start moving through some base poses to test for clipping.
Other than that, we have another program which I haven't shown called Lightbox, which goes through all of our content, creates screenshots through various poses that we can then check for any issues.
I was more concerned about like the combinations of them, you know, could people mix and match things that...
Right. So, sorry again. The question is how do we handle clipping of the various combinations of arrangements. This was something we decided early on we were going to have to deal with a little more clipping than we were used to in previous games. I think any customizable game is going to have to accept a little bit of that. We don't have a good way of prohibiting certain things from clipping into other things. We just use our eyes and try and best guess is that okay, is that shippable, is that not.
Let's go back over here.
So, in the start of the game you actually choose a character race.
Did that end up actually affecting the way that you're building gear?
Like did you have to actually build gear differently over different races, or?
No, the race is sort of a separate part of our character building process, although it actually uses the exact same system.
The exos in particular are a perfect example of how we can use the system for that.
Awesome, thank you.
So this is a really powerful tool for your side of the fence.
How does this level of customization and content generation trickle down to the player's ability to customize and leverage the amount of flexibility that you have?
The question was, this is a really powerful system for us as content creators.
How does that affect the players, and how do they make use of it?
right now for the most part it affects them in the fact that we can build a lot more content than we could otherwise. We can build a lot more armor sets, a lot more pieces of gear for them to choose from. Pushing forward, exploring the ideas of players being able to create their own arrangements and stuff is something we've definitely thought about and I would personally love to explore, but it's a long ways out.
How does the bit system affect the concept pipeline?
Does the concept artist then create more of a kind of keynote versions of everything and then the variations on the individual bits are more on the 3D artist than create on the fly?
So the question was, how does the bit system affect the concept development and how the concept artists work?
It's a great question.
And you're exactly right.
The concept artists create what we call theme.
So they have a set that is like, here is what the sort of, the spirit of this set.
And then the variations are all built by the individual 3D artists for the most part.
We try, we very much at Bungie don't like to limit our concept artists.
but we also want to educate them on the system. So, um, they start to know, like, what we can do and, you know, what things are easier and faster for us. Um, but still they have kind of free, free range to explore their ideas.
Yeah, I was wondering about upgrades and if there was a way that you guys had like rules or some way of defining like what an upgrade would look like, since like color doesn't necessarily denote hierarchy.
Were there other things that you used?
So the question is about upgrades.
And honestly, I'm not a designer.
So the investment designers choose sort of the upgrade paths and what pieces they want to use for those.
That stuff, since they're constantly, constantly iterating, a lot of times.
We, you know, we try and put in the best pieces we think possible for things, but they're much more focused on the stats and the abilities and that sort of stuff, so I don't know if that answers your question, but...
So you didn't have any, like, ways of defining, like, what those upgrades would look like, necessarily?
Um, it, the way the system sort of played out, we're very flexible and reactive.
So if they say, hey, we have this thing and we're gonna do an upgrade to it, then we can quickly go in and say, all right, let's add a few more pieces, make this thing a little, more burly and a little cooler looking.
Okay, cool.
So it's, it's more like they establish first and then we kind of follow what they, what they're looking for.
Okay, cool, thanks.
So with the bits, you said that it would go back and change other bits that were already put into other sets.
So was there any instances where a bit being changed in a newer set changed an old set for the worse?
So the question was, since we can change a bit and it affects other arrangements, were there any instances where this was bad, where a bit was changed and it broke something?
The answer is definitely yes.
We had some interesting cases where someone would...
The most dangerous aspect is the texture resolution.
Someone would decide, hey, this bit's too low-res, and so they'd double it.
And then suddenly we have 20 pieces of gear that aren't importing because their texture budget's blown.
So that was something that we, through a certain part of the production we dealt with.
And then artists just kind of got smarter and better about knowing what they can and can't do, and also better tools at checking the content afterwards.
Thank you.
So I think you said that the bits get combined at export time and then so I'm assuming the arrangements get Stored and loaded by the engines that every arrangement is a separate piece. That's rendered by the engine. Is that correct or that's correct Sorry, go ahead. Oh, yeah, I just wanted to check like isn't that More expensive than rendering a traditional character perhaps or so there are more draw calls associated with rendering each arrangement So the question is, you know, does the engine render each arrangement individually, and is that more expensive than sort of a traditional full character arrangement, or full character setup? The answer is yes, it is more expensive. We've done a lot of things to optimize the gear shader process and, you know, the skinning and all of that to try and get that as cheap as possible, but definitely the characters, the player characters are more expensive than a lot of them say.
civilians or combatants or anything like that.
Can I ask another quick question?
Just, I think you said you had a lot of problems with wraps and blend shapes.
Can you go, but you didn't sort of elaborate what the sort of problems were with, you know, because I would have thought that would give you close fitting cloth if you could deform layers of cloth over a deformable shape.
So the question was about, I mean, I think using the wraps and blend shapes, wrap deformers and blend shapes to create female gear and whether or not, why that wasn't successful.
And you're right, like, for things like cloth and soft organics it worked very well, but as you can see we have a lot of hard surface shapes and things like cylinders that, you know, would get stretched and shapes would get deformed.
And the main thing for us was...
that in order to really use that system, we had to combine everything together, and that just wasn't efficient.
Okay, thank you.
I had a question about the color customization.
If I understand correctly, originally a player could choose three colors for their character, and then you guys changed the system to colorize the gear, so it would represent the different scale of upgrades.
So does that mean that in the current design, there is no color customization for their character?
So the question is, we initially had it so that players could choose three colors, and then we moved to a system where that, where we established the colors to, to communicate the tier. Does that mean players can't customize their color?
So, no. We, we, we definitely established what we call default dyes for system, for things, and the, the idea is that players will be able to customize their color choices later on.
So you can take their upgraded gear and then tweak it from its current value, basically?
So I can't go into too much detail about this because it's actually something that's still being worked on, but as I said, the idea is that players will have some control, for sure.
Hi, I was just wondering about the merging process you talked about.
So when the bits are merged together, is there, at that time, is there a lot of inner penetrating surfaces or do you do any kind of ray casting to make a new mesh?
Or if one arrangement overlaps another arrangement, do you make a bake that has like nice AO under the overlapping or do you just try not to make them overlap?
I guess that's two questions.
Sorry, the first part of the question again.
Like the helmet you showed with all the bits together, if it generates inner penetrating surfaces, is there a bake process that makes a new mesh, or it's just OK to have the inner penetration?
So the question was, do the bits have inner penetrating surfaces?
Is that OK?
Do we bake things down?
They do inner penetrate, and we rely primarily on Screen Space AO to kind of seal everything together and make it feel like it's a nice, cohesive piece.
And then, uh, the second part, sorry.
Well, that kind of answers it.
All right, well there we go.
Like a gun.
All right, thanks.
Justin Quimby.
Hi Scott, great talk. We work together at Turbine. So I'm curious about the production side of things in terms of dashboarding tools or how do you, how does the production side of the house track, you know, you mentioned, oh, suddenly someone changes texture density and blows the budgets for stuff. What kind of tools do you have on the production side of the house to keep track of all the craziness that you could do given this flexible tool set?
So the question is, what kind of tools do we have from the production side of things to keep track of all of these changes and all of the things that can be done.
Honestly, nothing terribly fancy.
We have fantastic producers, really, that are just very on top of their game.
We don't, as a 3D team, we don't micro-track stuff too much, as our tasks tend to be, you know, this armor set will take four weeks or three weeks or whatever.
And then we just try and remain as reactive as possible.
The good thing is, is that because the system is so fast and flexible, when we do run into those issues, it doesn't take much time to fix it.
Hi, first I want to say, great talk.
I was wondering if the current system for creating like different pieces through bits and stuff allows for the addition of like normal map details, such as adding like screws or different like vents or valves on like a helmet or something, or if that's part of the decal system you guys are looking towards in the future.
So the question was if the current system allows for adding sort of normal map details like screws and things like that.
Actually, it does in a different sort of way.
So we have a layer of what we call detailed geometry, which is set as a bit.
So certain bits can be flagged as detailed geometry.
So they're high detail, high frequency type of bits that then fade out quickly at distance or don't get exported to the older platforms kind of thing.
So we do a lot of that with those.
Thank you.
One quick question I had, because this system, it actually reminded me a lot of Borderlands 2's gun system, where they built completely modular guns, and so each player who started up their game was able to have their own unique sniper rifle.
Would this system allow for players to have completely unique, randomized helmets, or is everything built beforehand?
So the question was, does the system allow for players to have completely unique randomized helmets or pieces of gear?
The answer is no, actually.
And that was a very conscious decision on our part.
We wanted artists to still maintain control of the overall design.
We wanted to try and make it as fast as possible for them to create something cool, but we always wanted it to feel like it was a conscious decision that we put this piece with this piece.
Thank you.
All right, any more questions?
You guys are free to go.
Thank you very much.
