Hello, and welcome to my talk.
I'm going to talk about IT Syndicate and how we built the city.
So I'm Damien, team lead tool programmer at Ubisoft Quebec.
So first of all, I will give you an idea, a general idea, of the city we built and the kind of game we did for IT Syndicate.
So it's set in Victorian London.
We built a city almost six square kilometers.
with almost 80 kilometers of drivable streets, a little bit more than 8,000 intersections, and we placed around 8,000 buildings.
I'm speaking about generic buildings because it excludes the landmarks, train station, factories, and kind of big buildings.
So the presentation is going to cover the different aspects of the solution we developed to build London.
Instead of a simple list of topics, let's watch a short video that introduces the London we built and all the features.
Yeah, the sound is kind of weird, but you get the idea of the feature we are.
So in addition of the video, I'm going to talk about the user interface, how the user interface evolves throughout the project.
For each subject, I'm going to introduce the context, explain what we did, and some information about the postmortem and feedback we get on these features.
So, but first, a little bit of franchise history.
We narrated all the technology from AC Unity.
Unity was set in Paris during the French Revolution.
Their solution for city building was focused on house blocks.
They were organized, there was, sorry, no organized traffic in Paris.
Therefore, the width of the street had no real importance.
If a street was a little bit too large or too small, it would only be perceived as organic by the player.
The streets were directly attached in front of the building in a slightly downward slope to the middle of the street.
And the AC Unity tools only supported creating streets on the grid.
You can see the blue lines on the pictures.
So as a consequence, streets.
were always constrained in length or in angle.
So length and angle were not very flexible.
When we set the goal for Assassin's Creed Syndicate, we decided very early that we wanted a more realistic street simulation, meaning that we had to change the way streets were handled compared to the previous Assassin's Creed game.
In simple words, we wanted organized traffic.
For instance.
If you played an AC game before Syndicate, you might remember the street could have different widths, and the crowd always fill out the entire street.
We had to move the crowd simulation and circulation on the sidewalk.
The Assassin's Creed engine, called Anvil, had never been used to create any driving or racing game before, and the team has no prior experience in this kind of game.
We knew we were going to need an easy way to iterate very late in production, an easy way to edit it very late in production.
The last goal was to reuse as much as possible the IC Unity technology for obvious reasons.
So in the franchise, the ground was usually manually created by artists.
for AC Syndicate, since we needed to enforce some very strict metrics for the driving experience.
We decided to have and to generate all the street meshes automatically.
We started by using a debug display to prototype all the features we wanted.
Let me show you a quick video of the prototyping phase without audio this time.
And at the beginning, you are going to see a situation after intersection, and I will attempt to fill the AC unity solution on the whole network.
Not good.
OK.
Sorry.
I'm trying to fix it.
Okay, it should work now.
Okay, so that's the debug display.
Intersection, so remember it's only in debug display, so that's a...
network, that's a building, so.
In the last frame of the video, we tried to fit the AC Unity to the Paris house block on the new street we just created.
I highlighted in blue the house blocks.
And as you can see, the orange arrow is pretty wide offset between the building location and the edge of the street.
This is due to the strong angle enforcement of the AC Unity technology.
We could enforce the street to be at certain angle, but we realized pretty quickly that if we process that way, any change in a city layout would altering much more as was intended.
We would have a domino effect that would spread addition point until the far reach of the map.
As you can imagine, this content was pretty drastic, and we needed to get rid of it.
I will show you later how we managed to address this.
But keep it in the back of your mind.
After our first attempt in using debug display, we started looking into proper mesh and collision generation.
Here is a quick video of the first time we were able to drive on the street.
Of course, it's in debug display.
It's programmer art.
But this is real geometry generated.
It's the first time we are able to drive.
The solution we settled for the road mesh generation is based on slices, small chunks of road from different sizes carefully polished by artists.
To generate the street from any length, we calculate the best combination of slices to approximate the length and stretch.
all to slide a little bit to achieve the desired length.
During this process, we also handled slopes if one end of the street is higher than the other.
For the intersection, we created unique slices for each type of intersection.
To reduce the number of intersection, we were able to move the extremity of the street from plus or minus 50 degrees.
If we take a top view of the street, very schematic one.
It's a T-shaped intersection, and we could move the end of the street in the red cone, and it would be the same for all other street entry.
At the end of the project, we added a curvature, a very small curvature in the center of the street.
This picture is, oh, sorry, oh.
This picture is very exaggerated.
The curvature is very big, but you get the idea.
To conclude on the street mesh generation, the final generated result was very satisfactory.
In terms of graphical fidelity, the small stretching of meshes was not noticeable at all.
However, we had made the street mesh generation very easy, and we did not do anything for the lot besides the street meshes.
It was a major production issue.
On one side, we made sure it was very easy to move the street around and to iterate fast on driving.
But each time we move a street, someone had to redo the ground around it.
The intersection were very tedious to create.
Even with a small angle correction, so plus or minus 50 degree, we had to create more than 100 intersections.
And at the end, because everything was generated, it was very easy to add the curvature.
When we tackle the next big challenge, creating the building placed along our on-the-road network, when building London, we had to account for some major iconic element of the city.
The first is, you can see in this design document.
The building has not always the same depth.
It's an iconic element, and you can create some interesting parkour situation at the back of the building.
So we wanted to reproduce that in our version of London.
In London, we have a lot of pedestrian back alleys will allow people to walk from sidewalk to the courtyard.
Sometimes we overpass.
And another iconic element are the moats.
in front of some buildings.
And we also tried to reuse the modular solution created by Unity.
Buildings are split in multiple parts, each being a key element of the building.
The front, as you would expect, represents the facade of the building.
In a similar fashion, the back represents everything behind the building.
Contrary to Paris, we separated the front and the back to allow level designers to switch front and back independently because you could have a very nice representation of the street side but you want to change the parkour situation on the back by changing the type of stairs you have at the back.
So you could change the front or the back independently.
The roof was the last indispensable part to complete the building.
The basement, unfortunately not very visible here, could be added automatically if the building is in a slope.
So if one side of the building is not at the same level as the other side.
The garden could be added in front to increase the space between sidewalk and buildings.
We also used this garden for the moat.
And finally, the parkour part, since it will not be an Assassin's Creed game without traversal, we had reusable preset props group used for parkour navigation and route alongside the facade.
Building parts are dependent one to another.
This means that if we change one part, all the dependent parts will also change.
For example, if you try to add an extra floor on the front.
you will have to change the back to add this extra floor.
This back could be a different depth, so you end up changing the roof, and so on and so forth.
In some cases, the building could be a pass-through building with open window in front and in the back.
Contrary to the regular building, the front part also contains the back information.
And you can see the holes in the window and doors.
We had no editable back to ensure that the building, the wall inside will always fit.
All the interior wall are in a separate part.
I will remove the walls to see the interior.
A separate part, and we, the, OK, the interior part.
And the props are stored in a different part that allows with a given interior wall part.
to have different props variation.
The props part also contains NPC placement inside the building.
And the roof, similar as for regular buildings.
And we, of course, have also all other parts, garden, basement, and parkour.
And the last type of part combination is the back alley.
In order to replace some back alley.
some building by Bacali.
Here you can see a building.
And now I can replace it by a Bacali.
The tool will automatically generate the ground between the two buildings to fill the gap.
And you could add a building overpass as an option.
The buildings are built using small modules.
We have two main type of modules.
The first are the three meter wide module used for every important piece of the building, windows, doors, every features.
You can stack some modules one on top of the other to create different floors.
The second main type of module are the columns, half a meter wide.
You can have as many columns as you want.
With a little bit of imagination, the facade of the building is taking shape.
And for some specific module, for a few feature of the building, we had wider modules, always multiple of three, in this case, six meters.
And street level store are built using the same technique, the same solution, so three meters modules and columns, but with another design.
And if you add decals and columns on each side, you have a pretty nice reusable building.
It's a combination of three meter modules and half a meter columns here in top view.
You can create your first three meter wide building.
But however, if you put the column on the other side of the wall, you can create a four meter wide building.
And if we apply the same solution using two 3 meter wide modules, you will get a 6 and 7.
For use time and budget constraint, we were looking at procedurally generate some parts, essentially the very tedious and low creativity one, like the basements.
Thanks to a very strict naming convention, for each module, we were able to extract its exact location in the building and its exact purpose.
For example, here we have a residential house.
B stands for Victorian.
One F stands for 34.
DR stands for Dome.
And one for variation.
By creating a basement apart using a matching naming convention, we are able to generate all the basements around the city.
You can see the naming function is the same.
The only one F is replaced by 0F.
In London, the front of the building are from diverse architectural style.
But the back all shares the Victorian style.
Since that interesting fact is working at our advantage, it made sense to increase, to find a solution to share the back part throughout London and find a generation solution.
For each back building.
We created a polished and single template.
A template is then cloned and adapted to each architectural style.
In London, you have two type of Georgian back.
You have the yellow one and the red one.
Just by changing the color, just by changing the module, using the naming convention to other modules, we were able to generate backs for the other Georgian style, the red one.
And if we add a kind of a small item on the top, you can see we can increase the size of the building.
In case, this was used in the case of neoclassical building were a little bit taller than the Georgian one.
And we use the same generation process for the roof because they share only four different shapes throughout London.
To conclude on the building parts, with this module solution, we could produce a lot of building for a lesser production cost.
With all the part generation solution, we were able to save time, increase significantly the number of back roof and basement we were able to create.
Working with smaller modules, they are easy.
Replace, reproduce, copy, fixed.
It's a much easier way to work.
And module offer a great.
separation for taking advantage of the hardware instancing.
Now that we know how the buildings are built, it's time to explain how they are placed along the street and how we are able to fit any length and any angle.
The London is split in seven districts, each having its own artistic direction.
To support this action, we created seven databanks.
one data bank for each district.
And each data bank or team contains three building styles.
For example, if we take the city of London, we have the three styles we have inside, we also call the style kit, are the Victorian one, the Georgian one, and the neoclassical one.
All districts are limited to only three building styles out of the seven we have in the game for memory consumption purposes.
The City of London district ended up containing a little bit more than 200 straight buildings and a little bit more than 80 corner buildings across these tiles.
Buildings are split in different sizes.
Here we are going to explore the Victorian kit.
We started by creating the straight building in seven different sizes.
Three, four, six, seven, ten, thirteen, sixteen.
five different heights, two, three, four, five, and six floors.
And we also created all the corners between 30 degrees to 270 in 10 degree increment.
A kit can hold more than one building for each type, but can also not hold a building for each type.
So you can have multiple buildings.
For example, the Victorian kit has.
three 7 meter wide, two floor height building, but had no 10 meter wide, two floor height building.
So each kit can contain more or less buildings.
Building are placed one next to the other.
That mean that given the available width of building, so three, four, six, seven, et cetera, we could only result in street lengths in integral.
the same way it was in Paris.
Since we needed to be able to create street from any length, we introduced the concept of adjustable building.
Only one per frontage.
I'm going to talk about it in the next slide.
And a frontage describes the group of buildings of one side of the street.
When the user resizes a street.
We try to keep as many existing buildings as possible.
So if we reduce the street from three or four meters, we are going to remove a 10-meter Victorian building and try to reinsert a six-meter Victorian building to keep the street as consistent as possible.
Let's focus on the adjustable building.
The adjustable building is capable to assume any size between three and four meters.
Let's check out a small video.
Look at the building with the light green cylinder in front.
His side is going to shrink until it's reached under three meters.
In fact, the building is split in three subgroups, one for each side containing the columns and the wall perpendicular to the street, and a central group containing the rest.
We slide the subgroup into the three meter center to reach all the size between three and four.
So if we take a graphical representation of all the street lengths we could build, if we add the building we have at the beginning, so three, four, six, seven, et cetera, we ended up with this kind of street we could create.
If we add all the combination of buildings, we can create almost everything over nine meters.
And if we add one adjustable building in each frontage, we were able to create everything between three and four meters, everything between six and eight, and everything over nine meters.
In order to have street at any angle, we had to have corner buildings capable to match any angle.
To generate the general concept between adjusting building to an angle is to rotate the wall.
around six pivot points.
Here you can see a 90-degree building in top view.
And the six pivot points are located here.
We use only rotation on the building, no scaling, in order to avoid creating unique geometry for each corner.
Since we already have created building for each corner in 10-degree increments.
we needed only a rotation of plus or minus 5 degrees.
We thought that such a minor deformation will not be noticeable.
Only the roof needed to have unique geometry.
The geometry is generated deforming a template, and the coefficients decrease with altitude in order to keep the roof ridge.
So let's check out the result of the deformation together.
Here is a screenshot of the back of a 90-degree building.
At first, a 1-degree deformation.
Remember the top view from the previous slide.
The 1 degree is between this wall and this wall.
Let's continue our journey.
2 degrees, 3, 4, 5.
At this point, it's pretty clear we cannot use this solution in an EEE game.
The result makes no sense.
Nobody would build a building with a window that close to each other.
And if you look at other parts of the roof in front, doesn't look that bad with a five degree deformation.
But the back is pretty much destroyed.
And even the columns are stretched too much.
So we had to find another solution.
We concluded that it was not possible to have an adjustment of plus or minus five degrees on the corner building alone, so we decided to split the load in three buildings.
The corner and the two buildings adjacent the corner.
Two degrees on each building adjacent the corner and one on the corner itself.
The corner building is the last to be alterated in order to avoid generating roof geometry as much as possible.
If we look at a building next to the corner, he split in three parts, like the adjustable building.
And instead of just sliding the wall inside and out, we just rotate the wall next to the corner.
And it's going to adjust to the angle correctly.
To conclude, on the building placement, I'm going to bring back the.
diagram from four slides ago.
With the introduction of the angle solution, we had new limitation.
We needed a minimum of three buildings along a street, one next to each corner to account for the angle deformation, and one in the center to account for the fractal part of the street length.
So everything under nine meters was not possible anymore.
To sum up, we ended up having to build much more building adjustable as the three meter we originally intended to create, because it looked weird to always have three meter buildings next to corners.
So we ended up having to create three adjustable buildings, not only for the three meters like we originally intended, but also for four, three.
7, 10, 13. I think we don't create any 16.
And these buildings are 30% more expensive to create because you have subgroups to manage and that kind of stuff.
In order to have 9 meters between corners, because 9 meters is now the minimum street length we can create, we had to produce smaller corner buildings in order to try to give to crop some size of the corner.
So.
And we ended up creating a smaller corner.
And at this point, you are probably asking yourself, was it worth it, all this job?
Placing building next to the street was definitely worth it for our project.
We had early playable buildings.
We could drive very early in production.
And the city was ready sooner as any other Assassin's Creed game before.
But definitively, there is a lot of room for improvement.
Let's continue on the props and crowd life we placed throughout London.
In addition of the parkour group, you remember from the beginning, we needed to be able to add props in front of buildings to create some new parkour road or simply to add some variety.
We reused the modular structure of the building in order to add magnets at some key modules.
You can see in the picture.
This column has four magnets on it.
At this point, you're probably wondering, why is he calling that a magnet?
Magnet solution was originally created for the highway bridge to snap two segments of bridge together to avoid gaps between the segment for the overpass.
I have a small video about that.
It's very short, so be aware.
Up, snapped.
In addition of the magnet on the building, we added magnet on the props.
We very early discovered that we had to filter everything because when we added magnet on honing and we didn't filter it, we didn't have honing only on top of store.
We had honing everywhere.
So filtering is key.
The first implementation of the magnet solution.
was for the user to select an item and try to drag it along the wall until it snapped somewhere.
It was very similar to the solution we used for the bridges.
But we quickly realized that it was not a good solution.
We had two mini-manettes, one close to another.
And the placement was very tedious.
We switched to display all the available slots on the wall.
And just by selecting one, a list of all the compatible props will be displayed, and you could choose whatever you want, and move to the next.
The list is always curated depending on the flags on the props and the item you want to place.
For the chimney, we use the same magnet solution, with specific tags of course.
And as you can see, we had some chimney variation.
We originally intended to have a cascading magnet for chimney, one for snapping the chimney wall on top of the roof.
And on this wall, we would have other magnet to snap the chimney exhaust on the top of the wall.
But after using the magnet, we realized that it was sufficient to have.
only one snap magnet for the chimneys.
So we didn't do cascading magnets, but it would be fun.
And the crowd life is a big part of the Ars Sanct Crid experience.
They create the living, bringing world feeling throughout the city.
Crowd life is made up of station, like a guy reading his newspaper, two people talking about the weather.
placed throughout the city.
In order to ensure proper station placement, we created slots for crowd station at ground level.
The usage was very similar as PropMagnet.
The street creation tool automatically generated a first path of crowd life when the buildings are built.
And as you can see, the idea is the same.
You have slots.
They are much bigger because Cloud Life is much bigger.
But it's the same idea.
You have slots.
You have lists.
You select another Cloud Life, and you can cycle between all the Cloud Life.
The main feedback we received on the building props is that it was available too late in production.
The postmortem revealed that it was a very efficient way to add items on the wall and roof.
It encouraged diversity, since all the available props are clearly displayed.
On previous Assassin's Creed games, because of the difficulty to find props, level designers tend to reuse what they knew, even if more were produced.
Crown Life slot ended up not being used that much.
Not because of the implementation, but because of the restriction imposed by the size of the sidewalk.
We did not have enough space on sidewalk to add a lot of crowd life.
Many station ended up in location not covered by the road network.
Parks, back alleys, and this kind of stuff.
As you can see in this design document, ooh.
As you can see in this design document, street lamp and lampposts was part of the game early on.
It was one of the last feature we implemented in the road network pipeline.
Sidewall props are generated based on rules.
Rules are defined once and used multiple times throughout the city.
Rules are very simple parameters.
If we start from an empty street, we could.
use a rule to add bollards next to the street.
Every props will be placed directly on the sidewalk.
We also could alternate between two props.
In this case, I added some lampposts.
The ratio doesn't need to be one-to-one.
We could have two bollards between each lamppost.
But as you can see here, or rather as your artistic director is going to tell you, finishing a street with a ball art is not very pretty.
So we quickly realized that enforcing strictly the space between props is not very important.
It's the fact that starting and finishing with one specific prop is more important.
So we ended up having kind of an auto-scaling rule.
try to have a lamp post at the start and the beginning.
The lamp post is defined by the rule.
The rule could also be placed next to the building or in the center of the street.
And of course, you can adjust density and the end point of each side.
The post mortem highlighted that the bigger challenge we faced was the whole description.
A lot of level designers needed to use the rule once to look at the result to really understand what it did.
This was noticeable in rules placing props on both sides of the street in an alternating pattern.
We also did not have a proper solution for items placed only once, like mailboxes.
We ended up putting a big value in the distance between fields of the rules.
We also made the mistake to not strongly enforce the rules to have only destructible objects in it.
And we ended up having indestructible objects on sidewalks.
It was fixed later.
But at the end, it was a big success because we ended up placing a little bit less than 8,000 props throughout London with this solution.
The user interface is the last section of the talk.
It's a journey through the evolution of the user interface during the project.
The user interface was designed in two parts.
First was the 3D representation.
We decided to use a lot of debug display to represent the editable, all the editable information, starting by the streets.
Here is a picture.
In this picture we can easily recognize a street.
A street is a group of edges that share the same color.
A street shares the same configuration like pavement style and width.
Each street can be named and level designers choose to use the real name of the street in London.
If we zoom a little bit further, just after creating a new street.
There are no buildings placed on the frontage, but the representation is already present.
If you select the frontage, it's highlighted in yellow, and then an orange and yellow sphere appear.
These spheres are used to offset the building construction along the frontage.
Using this offset, we could expand or restrict building placement alongside the frontage.
It was very useful in case we didn't have any corner building or we wanted to fill empty space with straight building.
We choose two color instead of left and right offset because it was less confusing.
When building are generated, the frontage is split into lots.
Each lot holds only one building with an inter-alternation between green and dark green.
The only light green lot represents the adjustable building I mentioned previously.
Please look at the first lot.
When the user selects a lot, he was able to do very simple operations like splitting or merging some lots.
In this case, I'm going to split this lot into three smaller lots.
So just an action pressing one key on the keyboard.
And of course, you can convert into back alleys, convert into open building.
You can do every operation just by selecting one lot.
And once more, the section is highlighted in yellow.
The props or the props rules are displayed on front page, too.
They have their own representation.
Each slot has a small representation, and you can select it to remove it in case it's in front of a back alley entry, for example.
Since the whole goal of this project was to have traffic roaming throughout the beautiful city, we had to find a way to represent and edit its flow.
We choose to use common representation of crosswalk and arrow.
even if the historian was pretty, pretty scared by that, because it was not used during the Victorian era.
But it was very easy to grasp for a level designer.
The crosswalk will be moved along the edge from this original position.
So you could move the location where the.
people are going to cross the street.
And to avoid any traffic jam, we could configure every lane in only one or multiple direction.
For changing building parts, we started from what was developed on AC Unity.
We used the cycling world to describe the action of changing buildings from one part to another.
The process on Unity was very simple.
You use your mouse to click to the part you wanted to change, the roof or the body, for example.
And you press up and down on your keyboard to change between the variations.
It's called cycling for this reason.
To improve on that, we decided to focus on LUT instead of building parts by allowing all the parts to be changed by only selecting one LUT.
When a lot was selected, we had a cycler appearing on the top left of the screen.
And for the type of part you want to cycle, and a cycler for the value on the right top side of the screen to cycle between all the values.
So this time, the level designer could know what part is coming next.
And each cycling wheel clearly contains a key you have to press.
and you no longer need to use your mouse to change between parts.
You probably remember this dependency graph from a couple of slides ago.
It indicates dependency between the three major parts.
If you change one, the other depending parts are going to change.
If we look at this simple case, it's a Victorian house, three floors, grammar hall, roof.
And if you want to keep the same parameters, but try to convert it into a Georgian one, you would have to cycle the front.
As soon as that happened, all the other parts would also change.
This would result in frustrated level designer and a pretty destructive process.
In order to address this problem, we introduced a new cycling mode not directly related to a specific part, but more to a concept, the concept of style.
It allowed the user to change the style without having to cycle throughout every part.
So it just changes the side once, and the front, the back, and the roof are going to change.
We also applied the same concept to the floor height.
But at this point, we realized that the cycling was not the proper solution we needed.
We needed to be able to go from one point in the list to another without having to pass throughout every building in every item in the way, and needlessly altering stuff in the way.
The caddy is a solution we finally settled on.
It was a floating panel that appeared on your right.
whatever you select in the 3D representation.
The CADDIC always contains a custom made UI for the situation.
Here are some examples.
The first is a street configuration.
Because we only had a limited number of street widths, we had to provide a simple way to edit.
The total width is calculating depends.
depending on the parameter provided by the level designer.
The second is the crowd life slot.
The third is the caddy for lots in basement configuration.
The top part is for general configuration, the type, the style, the number of floors you are going to have.
The bottom is for basement configuration specifically.
The fourth is for building props.
Here, we use the thumbnail view.
It encourages variety.
by presenting all the props in a simple and understandable way.
And the last, similar to the third, but this time in front configuration.
The top is the same.
You have style, so on and so forth.
But the bottom displays all the thumbnail for the building part to allow the user to move quickly from one to another.
And once more, he had the interesting side effect to encourage diversity because everything was clearly displayed.
The first thing we learned is that in order to have a 3D view, we absolutely need performance 3D debug display.
We ended up having to do a lot of optimization in 3D debug display, rendering, and picking.
I cannot emphasize enough how important it is being able to render in 3D, open the new field in UX possibilities.
Probably the majority of the game editor, I would say, is very property-grade based.
But the CADI with its custom UI tailored to every specific job was the most praised feature of the postmortem.
Users were asking of this kind of edition in other parts of Envil.
So takeaways.
Road generation is not enough.
If you create a similar system, consider generating the entire ground, not only the street.
It resulted in a lot of time spent in back and forth between artists who build the ground and level designers who move the street around.
So consider building, generating everything.
One of the biggest success is the possibility to drive in the game very early on.
Even if the road was gray, flat, we were able to test and improve the game.
London was the first city in all the brain front history to be played as early in production.
We think that it's a major ingredient of the success of our first Assassin's Creed at Quebec.
Modular buildings are a suitable solution in our scenario.
However, I personally think we didn't push the boundary enough.
We should have assembled all the buildings by code.
not by hand.
And we would have, it was a major time consuming for the project.
And last, custom UI as a way to go.
The post-mortem revealed that custom UI that suits needs of each class of users, level designer, level artist, audio designer, and all the classes you could have.
Built with a combination of clickable 3D elements and custom design panel tailored for each job.
is the way to go.
Every game editor has a property grid to edit complex object, but please not underestimate the gain of carefully designed user interface.
Thank you, and if you have any questions, feel free to use the mics, send me a mail, and I will be tomorrow at the Ubisoft lounge from 11.30 to 12.30.
Yes?
Hello.
I have a question about optimizations of these generated buildings and cities.
How did you deal with the level of details, like lots and these kind of things?
The question is about how we optimize the modules.
We use the SampleGon for the majority of the job.
The LOD1 and LOD2, we use SampleGon.
Hi, thank you for the talk, it was great.
I was wondering when you were talking about the placement of the lots.
What about the depth and the negative space that it creates?
Because of the depth of the buildings, how do you manage that actual part of the placement of buildings?
Behind the building?
Yeah, behind the negative space or the empty space.
That's a part that was done by the solar kitchen.
It's about what we do behind the building.
So that's the part we've generated by hand.
That's part of the problem.
All right.
Thank you.
Thank you.
