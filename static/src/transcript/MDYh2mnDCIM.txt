your attention please. I'm Alexis Kennedy this is what I'm talking about and in a nutshell this is my motto for many years it's not a bad motto but I think this one is better and that is I hope what I'm going to help you do today is to learn from my mistakes the ones I made and some of the ones I didn't make This is my biography slide.
I've been making software like 20 years.
Only 10 of that is in game dev.
I founded Failbetter Games, which is where you'll have heard of me from if you've heard of me.
I made Fawn in London, I made Sunless Sea.
I really enjoyed running Failbetter and then.
I needed a change, I wanted to do more hands-on work.
I'll talk about that later in the talk.
But I went off and did a kind of Ronin year, doing a bunch of work for AAAs and learning a lot.
And now I have founded, with Lottie Bevan, who's sitting in the front row, Weather Factory, another studio, where we are making a game, which you may notice some subliminal messaging attached to.
which has already won a design award, although we haven't finished it yet, which is really nice.
And we do a lot of mentoring of other indies because there are things I wish people had told me coming up.
So here's the roadmap for today.
First of all, I'm gonna talk about what I mean by growth, which isn't necessarily the traditional San Francisco definition.
I wanna talk to you about what you want out of running a studio.
I want to talk about the specific advantages that indie studios have that others don't.
We have disadvantages, but we have advantages too.
I want to talk about staying human because I think two things.
One, doing the right thing is the right thing.
Two, doing the right thing is the best way to get value out of your team.
So do well by doing good.
I want to talk about why I left Failbetter and hopefully highlight some lessons that might be useful to you if you did the studio you founded.
And I have one more piece of advice at the very end.
So growth.
I do not mean being an ex-Facebook.
I don't mean the kind of aggressive 10x growth that you'll hear about in Silicon Valley.
I am not rich, and I cannot give you advice on how to get rich.
What I can talk about is how to build a human scale studio where people.
enjoy doing interesting work and have enough financial stability to be able to continue doing interesting work.
Because that is key.
Without financial stability, nothing else counts.
One of the myths that leaks into IndyCulture is this idea that we are not subject to the same rules that big corporations are.
We are.
Kindness isn't enough, creativity isn't enough, good intentions aren't enough.
They're really important, but everybody is subject to gravity.
And what I mean by gravity is crunch.
I mean, you start out with good intentions and people end up working overtime, which fucks their lives.
I mean, being one of the 30 odd percent of Kickstarter games which don't deliver.
I don't believe most of those 30% of games that don't deliver started out as crooks.
I think people have good intentions and sometimes fall prey to gravity.
And that's the last thing you want to happen to you, right?
Running out of funds is much, much worse than not getting funded in the first place.
And above all, gravity is people not being paid, not being able to make payroll at the end of the month, whether it's you, whether it's your team.
If you take nothing else away from today, Before you write another line of code, before you write another line of dialogue, before you draw another picture, make sure you have an answer for each of these questions.
How much is it gonna cost to make the game?
How much money is the game gonna make?
And when's that gonna happen?
So I am very confident that a number of people sitting in this room going, well, duh, it's a business, of course I have those things.
But I'm also very confident that a number of people sitting in this room going, Ah, I don't actually have answers to every one of those questions.
You must. Otherwise, you're not running a business, you're not making a project, you are engaging in an act of faith.
And if you have a team, that's irresponsible.
So you should be able to answer every one of those questions without referring to documentation. That has to be the bones of the thing you build to survive gravity.
So the reason that you are here today is, unless you are press or unless you've strayed in here looking for the bathroom, which is on the left, then it's because you want to run a studio or you are already running a studio.
This is why people want to run studios, indie studios.
But that's just the how, it's not the why.
If you spend eight hours a day, five days a week making games, Making games is a really kind of broad category of activity.
What do you actually want to spend those eight hours a day doing?
Managing people, coding, drawing, designing, marketing stuff, giving talks at conferences.
Often, people seize onto an inspiration, a studio that they want to be like.
You see people do good work, you want to do similar work.
You see people out in the industry who seem to be having a good time.
You want to be like them.
This is a good place to start, but you can't replicate a studio by looking at the shape of it from the outside.
If you put wings and a nose and a tail and a cockpit on something without thinking about how it actually works, what you get is unlikely to clock much time in the air.
Here's a concrete example of what I mean.
I'm going to show you a quote, something somebody said to me back in about 2010, 2011.
They weren't a stupid person at all, they just didn't know what it was like being at Failbetter.
At that point, Failbetter barely generated any revenue at all, let alone, you know, floating happily through life with sheer creativity.
It's very easy to look at a studio from the outside that has published games and that has like a website where they look kind of professional, where people show up at conferences with badges and assume that things are serene.
And if you copy them, you'll end up in the right place.
It's very dangerous to do that.
Even when you have a more detailed idea of what you want to do on a project, again, if you try to copy the detailed idea without understanding why decisions have been taken.
you can end up with something that isn't fit for purpose.
This was my business plan, if you can call it that, in 2009 when I found a Failbetter.
Here I am.
Has 10 million players.
It's got a shit story.
So I'll make a game that's kind of a social Facebook RPG, because that's what people were making in 2009.
It'll have a great story.
So it'll do twice as well.
Yeah, so that didn't happen, because I completely failed to understand why people were making social RPGs and what made some social RPGs successful.
As it happens, I'm really glad I didn't, because if we had got 20 million players, I'd have ended up trying to run a business that was servicing 20 million players and not making games.
But there was no chance of that happening, because I was doing this.
So this is a pithy insight I am indebted to Lottie for.
You wouldn't sit down and say, I'm making a game and it's gonna be kind of like that game.
I mean, you might, but it's probably not gonna be a great strategy.
You want design pillars, you want key goals for what you're doing.
You want reference points for what you're trying to do.
So do the same with your business.
You're building a studio, think about what you want the studio to be and do and build it around that.
Here are some contenders for design pillars for a studio.
Take a moment to look at this and see which of these things apply to you.
All of these are perfectly decent ways to run a studio, perfectly decent things to focus on.
So me, broadly speaking, I'm in the left-hand column, which isn't a particular category, it's just a list of things that I like.
I do enjoy the biz side of things, but it's not my main focus.
I like getting hands-on, more about that later.
I'm a story guy, and I really enjoy developing in the open.
I like crowdfunding, I like working with the community to get feedback and to find out how to improve games.
I find it very validating and I find it a very clear way of fixing my mistakes.
On the other hand, take someone like Subset Games who made Into the Reach and FTL.
They do great work, they are world-class devs, and Justin Ma, one of the founders, told me a couple of years ago that they are never going to run, he said at the time, another Kickstarter after the FTL one.
The FTL Kickstarter was successful, they made a really good game, but they just didn't enjoy developing in the spotlight.
So they went away and they made Into the Breach over four years and polished it in the dark till it glowed like a star and they released it, which is again a perfectly acceptable way of doing it if that's the kind of thing you want to do.
So think about how you want to approach your work.
There are a dozen ways to skin a cat.
Think about it not just now, but over the next decade.
What you want to do today may not be what you want to do next year.
This caught me out.
So always keep an eye on what you're in this for, what you want to spend your eight hours a day doing.
These are the design pillars for Failbetter that we iterated towards.
2015, this was a slide at the all hands end of year thing.
The key things here were everybody keeps their job.
Everybody enjoys their job and we do great.
So the third one is the aspirational thing you put at the end of a mission statement.
Because God help me, this is a mission statement.
Design pillars for a studio are a mission statement.
When you hear the phrase mission statement, you tend to think it's some bullshit on a plaque somewhere.
And frequently, it is some bullshit on a plaque somewhere because it's what people have compromised to fit on a plaque on the wall of an office.
So what you want in your mission statement or your design pillars is a clear idea of what your priorities are.
Don't make your mission statement, we are going to succeed, because everybody wants to succeed.
Nobody puts a mission statement on their wall saying, we are the kind of company that fucks up.
Think in terms of priorities.
These are those things, restated, safety, fun, and profit, in that order.
And that's important.
There's no reason those three things needed to be in that order.
We really wanted to make sure everyone stayed employed.
We wanted to make sure people had a good time.
And after that, money's nice.
There's a difference between going for the kind of money that keeps everyone paid and the kind of money that buys you a big gold house.
These are the priorities at Weather Factory, which Lottie and I run now.
And you'll notice we switched the top two, because Weather Factory is quite well funded and it's got a very small team, so it's a low burn.
The whole idea was to do a bunch of interesting experiments fairly swiftly, get them out the door.
So we're taking more risks, we're compromising the safety a bit in order to have more fun.
Think about what's important for you.
And one of the things...
I realize this can sound extremely theoretical if you're at the start of your career or the start of your studios journey.
If you are thinking, how the fuck can I get paid next week?
Then when I think about whether I'd rather be safe or having fun, this can seem theoretical, but I wish I paid more attention to it in 2009, 2010 when I was getting started.
And it will become, if you are successful, a practical problem much, much quicker than you think.
So you've probably seen the documentary film Aliens.
Here are the two of the characters from Aliens.
On the left, we have the Colonial Marines M577 armored personnel carrier.
On the right, we have Rebecca Jordan, also known as New.
They have different character builds.
And if you've seen the film, you'll know that one of them gets a lot more screen time than the other because one of them leans into her strength, hiding from aliens and ventilation ducts, and the other one doesn't get to employ its fire-resistant polymer armour or its outward-facing laser ablative tile in a useful way.
Think for a moment about which of these characters you would tend to compare to Indy Studios and which you'd tend to compare to AAA.
So, every talk you attend during the next four days, think about whether the advice you're listening to is useful to Newt or to the other personnel carrier.
One of the mistakes I made a lot in the early days of Failbetter is I'd go to talks given by people from big mobile studios, for example, and they'd say, you need to do these eight things in order to increase retention by 0.03%.
I'd do that, and we'd increase retention by 0.03%, and that would mean we kept four extra players each week because we were a tiny studio without big numbers, so that was useless and didn't show up in our bottom line at all.
Here's good advice.
It's good advice in the context of this talk.
I think it's good advice generally.
I don't know if paradox qualifies Indy.
I don't know if paradox know if paradox qualifies Indy, but you are going to have dozens and dozens of things your company is bad at or unremarkable at and a few things your company is good at.
If you try to spend your energy fixing all the things you're not great at, you're gonna waste all your energy.
Here's some bad advice from a much more talented and eminent game designer than me for indies most of the time.
If you are making Nintendo's crown jewel platform launch exclusive game, and you need to hold it back for six months to get 10 out of 10 rather than nine out of 10, this is probably good advice.
If you are three indies working from their back bedrooms and you're gonna hit a negative cash flow in three months, then you probably won a game that isn't great rather than a game that isn't hell.
Same guy.
Great advice for indies.
Just because it's not an indie source doesn't mean it's bad advice for indies.
This I wish I'd listened to, I wish I'd known when I was making Sunless Sea.
Sunless Sea, we made the home port for London first and then did everything else.
And it worked out okay, but what we should have done, and what I think is often good advice, is to get the core loop of the game, the core activity right first, and then go back and look at the introductory experience.
Here is some more bad advice from an unimpeachable indie source.
And I know it's bad advice, or I believe it's bad advice, because Rami said it was bad advice when he gave a talk last year here, I think.
Rami told a group of game design students when asked, should I stay in school?
No, you should drop out because then you'll learn more stuff and you'll get life lessons.
And afterwards, the talk organizer came up to him and said, for God's sake, this is not the Netherlands.
South Africa does not have...
a social safety net, and what you've just told these students, you know, could destroy their lives, because staying in school is their best chance of having a good life.
Every talk you attend, think about whether it's going to be useful for you.
The biggest trap is, you know, big studios will have advice that may not be useful for you, but even other indies may give advice that isn't useful for your specific circumstances.
Think about it critically.
These, I think, are the things that most indies have in common as advantages that big studios often don't.
You don't have to spend all the money.
You don't have to do all the things that big, real, serious studios with lobby art do.
You are not prevented from making decisions quickly by five layers of management.
You're also not protected from the consequences of your decisions by five layers of management.
I'll talk about that in a moment.
You've got a small team.
for the people who are engaged, you will have a deeper bond than you will in a big organisation where people only meet at the water cooler.
All else being equal.
Low budget, it's really straightforward.
This is a UK based entrepreneur who I asked for advice a few years ago.
What I said is the thing you would say to a studio first that is trying to grow.
And he said this.
If you put more pounds into, or more dollars, into a project, you don't necessarily get more dollars out.
There is a relationship, of course there is, but the relationship is much less direct than people think.
And if you really, really, really, really want a game to succeed, it's easy to start playing your whole budget into it.
Every pound you spend on the game, or every other currency of choice you spend on the game, is...
a pound you have to make back in sales at the end.
If you don't spend it, you don't have to make it back.
Always bear that in mind.
Constraints.
So you will hear people say, or you will say yourself something like this.
What does a proper business do?
So first of all, proper business has budgets, schedules, revenue projections.
And you want those.
Those are essential.
Proper business has employees.
You probably want employees, even if you're the only employee of your studio.
You need a team.
You can't make games without personnel.
Proper business companies, proper businesses have offices.
You don't necessarily need an office.
Lots of indies work from home, remotely or from their living rooms.
You probably need payroll.
You probably don't need a payroll department.
You probably need an HR policy.
You probably don't need an HR department.
You definitely don't need lobby art.
Don't.
copy what proper businesses do without thinking about it in an attempt to become a proper business.
And here's a really good example of what I mean.
Press releases that look like this.
And I've put out press releases that look like this.
And I nod off rereading them.
We know what press releases look like.
We know what press releases are supposed to look like.
If we want to be taken seriously, we tend to put out things that look like this.
When we could do this.
Dan Marshall's a solo dev in the UK.
He's a very funny fucker.
And you know, you can't say this in a press release, I'm not wasting my time day in, day out, knee-deep in football without some sort of kickback.
We're very excited to release our new football game.
No, I don't know how well Kickman did, pretty well I think, but I'm telling you about it at GDC a year after release, because he did something unusual and distinctive and he didn't just try to copy other press releases.
Not everyone is as funny as Dan Marshall.
I'm not.
So not all of us can make entertaining press releases, but don't just do things because they're done that way.
This is me in my living room with Sonia, my daughter, doing a live stream for the Cultist Simulator Kickstarter.
Sonia is explaining what her Beanie Babies names are and which one she likes more.
Because I was doing a stream and she wanted to get involved and she insisted on getting in.
If you are doing a stream, if you're recording a Kickstarter video, it's very easy to get sucked into the idea that you need to look professional.
You need to have a printed backdrop and you need to sit there and look serious and give the impression that you're in a meeting room in a AAA studio.
People who are backing your Kickstarter know you're not in a meeting room in a AAA studio.
They know you are one or three or five people sitting in a room somewhere.
You don't need to pretend to be a proper business.
This is how Counter Simulator did in Kickstarter.
It wasn't a problem, Sonia being in the live stream.
It was a problem, Sonia being in the live stream, because she now wants to be in every live stream I do, ever.
That's a separate issue.
Right, immediacy.
I said earlier that you can make decisions quickly and you are not protected.
from making bad decisions by five layers of management.
So what you've got as an indie is very short iteration time.
Make a decision, act on it, see the effects, change your decision, act on it again, see the effects.
In order to make this useful, in order to catch the bad decisions you're not protected from, everybody has to know these three things.
What they're doing, why they're doing it, and why they want to do it.
So your job as a studio head or a team lead.
is to make sure they know those things.
This is your number one job, right?
It's managing information flow.
Think about how you would manage information flow if you were designing a game.
A lot of information flow in companies works like this.
You get an email explaining what you want to do, and you do that for the next month.
Imagine designing a game where you get a big text dump at the beginning of the month.
Never refer to it again, and then check in the end of the month, see where it's done.
So you want small snippets of information constantly.
You want to work and inform people all the time.
You want to check their understanding to make sure that they know, not just what they're doing, but why they're doing it, so they can change direction intelligently so nothing goes wrong.
And here's a really useful tool for giving people information constantly in small digestible snippets, design pillars.
Safety, fun and profit, of course, we're making a game that is going to have a modest budget.
in order to ensure that we all have jobs, rather than pushing the boat out and ploughing money into it.
Same with actual game projects, same with actual design pillars for actual games.
Loneliness exploration survival was the core pillars of Sunless Sea, and I banged on about this all the time.
And the effect of this was, when I said the boat needs to look really small in the middle of a vast, dark ocean, My UI developer said straight away, of course, yes, because loneliness is one of the core values of the game.
And you can have design pillars, snippets of information you keep revisiting, decisions you make up front and then refer back to.
for periods of time as well.
So last year, the game sold well.
We actually have more money than we expected.
This year, we're not gonna focus on improving our cashflow, because that's okay.
We are going to focus on finding bigger audiences.
Everybody in the studio knows that.
Everyone in the studio acts on this all the time.
When you give somebody a jump button in a game, you immediately give them a wall to jump over to check that they've understood the jump button.
If you give somebody a crouch button, there will be a pipe.
If I'm trying to make sure my daughter knows it's her bedtime, I will say, what are you gonna do, Sonia?
And she'll say, clean my teeth and get into bed.
I'll wait for you to come and read a story for me.
Ah.
You need to check understanding with your team as well.
But if you check understanding with your team by saying, repeat back to me what I've just said to you, they'll lose patience fairly quickly.
So here are three non-annoying ways to get them to indicate their understanding.
One is to have them explain it to somebody else while you're present.
This is the added advantage, they will probably understand it better while they're explaining it, and the other person will understand it at the end of it.
You can pick up on issues of confusion.
Another is to get them to write documentation.
Another nice outcome of that is that you have documentation at the end of it that other people can refer to.
And another is to build out a really quick prototype.
Do you get what I'm saying?
Okay, let's see how it looks in the build.
Let's spend half an hour doing it.
That's not quite what I meant.
Let's sort this out before we go further.
And one of the other advantages and disadvantages of having an indie studio without five layers of management where people are making decisions on the floor day to day, is there is nowhere to hide from responsibility.
And that's great because you want people to be responsible for their tasks.
To make them responsible, you need this thing, the buck.
Every task...
If you want people to be responsible for it, one person has to be responsible for it.
If three people are responsible for it, nobody's responsible for it because everybody thinks it's somebody else's job to do and they will focus on the task that they are solely responsible for.
So make sure anything you want to be done in the studio has one person responsible for it, whether it's you, whether it's a member of the team.
And they can pass on the buck, of course they can.
You ask a team, need to get something done, they will pass that to their team.
But it needs to be passed, not thrown.
Somebody needs to acknowledge they have the buck and that they're responsible for it.
If somebody doesn't acknowledge responsibility, they don't have responsibility.
And this is what you need to make sure everybody understands.
If you have a buck, the task's problems are yours.
You have to ask for help or to call out delays.
That's essential.
If.
A team member has too many tasks or the tasks are delayed, they need to be able to flag it and you need to listen to that because deadlines come in two kinds, lions and sharks.
Deadlines that you can see coming, deadlines that you understand your liability for, whether you are gonna hit them or not, are lions.
They can kill you, but you can see them coming a long time off.
Sharks, just as dangerous as lions.
but you won't know they're there until your leg is already gone.
So deadlines are not less dangerous if you think they're okay.
You need to make sure people can flag when tasks are being delayed and when deadlines are at risk.
Right, the next four slides or so, I'm going for possibly the highest profanity to minute ratio of IndyTalk so far, so I apologize if you have a sense of disposition.
Everyone fucks up.
Responsibility means that if you fuck up on a task, it's your fuck up and you have to fix it.
You need to give your team room to fuck up.
If you are looking at people's shoulders to the extent that they don't have room to fuck up, then you are fucked because you have paid a team full of people to do work that you are now doing yourself.
If you give somebody ownership of a task, that means giving them room to fuck up.
If you give them responsibility, they will learn to avoid the fuck-ups themselves without you doing care with their shoulder.
But if somebody fucks up in an indie team where you have a number of self-motivated people who care about what they're doing, are engaged, usually the most you need to say is, please don't do it again.
Let them know they've fucked up.
Don't belabor the point.
Don't try to make it a big deal.
Move straight away to how the problem is gonna be fixed next time.
There's two reasons for that.
One is so that the problem will be fixed next time.
There's good intentions, please don't do it again, often aren't enough.
If they were, they probably wouldn't have made the mistake to begin with.
The other is that you give somebody a way to save face and channel their embarrassment or their annoyance into fixing the problem.
Give them room to fix the problem.
Don't make a drama of it.
You very rarely need to make a drama.
Super important, when you fuck up, and you will, tell your team.
There are three reasons for this.
Number one, they probably already know.
Number two, people respond very positively.
to leaders who admit their fuck-ups.
If you keep on admitting fuck-ups, then you're probably incompetent and need to change jobs.
But if you do a good job, except when you don't, people respect owning it.
The third, and by far the most important thing is, psychological safety again and again comes up as one of the things that makes teams work.
People need to be able to admit they fucked up.
If you, as the boss, find it embarrassing or difficult to admit your own fuck-up, it is gonna be twice as hard for your team who aren't the boss and don't have higher firepower.
So if it's ever difficult for you, it's more difficult for them.
Show the way.
So often this is fine.
Often everyone's on the same page.
Everybody wants to make a good game.
Sometimes people keep fucking up.
Here are some really practical pieces of advice on how to deal with somebody who keeps fucking up.
Don't procrastinate.
If you lead the problem, it will just get worse.
As soon as you have, three is a good heuristic for a number of things to bring, three specific examples and then fuck you up.
And I mean specific, I don't mean I don't like your attitude or I don't think your work is of a standard that we think we should be doing.
Or I mean, this thing happened, this thing happened and you said you wouldn't do that and you did.
As soon as you have three specific things, sit down with them and talk about how you can make sure things are going to be different in the future.
Come on with suggestions about how to change stuff, but listen to theirs.
You never have the whole picture.
Maybe they didn't fuck up.
Maybe they did, but there were reasons for it you're not aware of.
Maybe they have a better idea of how to fix problems than you.
And make sure when they leave the meeting, whatever steps you take to resolve it, there is at least one thing they can focus on.
Indie studios are places of complicated, intellectually demanding, absorbing work, where people think about a lot of stuff all the time.
If you give them five things that they need to do in order to fix the problems, they'll forget four of them before they're out of the room.
They'll forget the rest of them by the following morning.
Give them one thing they can focus on in between their other tasks, so it makes it possible and practical.
You've got a team of five.
You're managing five people directly.
I think five people is about the number you can manage directly.
You should be having a one-on-one with them every week, and you should be spending probably half an hour.
That means two and a half hours a week.
It means 10 hours a month.
For an indie studio head, that is a lot of time.
If you're anything like me, you can probably feel the creeping finger of panic at the idea that you're spending 10 hours of time away from doing the other things you need to do.
But look at the middle bullet point.
Remember your job as a studio head is to manage information flow above everything else, and it's to make sure that everybody else works as effectively as they can.
You can focus on your own work being as effective as it can be, or you can focus on five people's work being as effective as it can be.
The multiplier effect is much more powerful.
So one-on-ones take lots of time.
but they are a really valuable way to spend your time.
And here are two things about one-on-ones that I think people often get wrong.
I've got them wrong in the past.
Don't think because you're sitting at the desk next to somebody 40 hours of working week a week that you don't need one-on-ones.
Let me say that without double negatives.
If you're sitting next to somebody 40 hours a week talking to them all the time, you still need one-on-ones.
The kind of things they say to you when you're alone and not in front of a team will be different.
there are things that you won't be comfortable raising in public.
The kind of things they will say when you ask them specifically to reflect on What the problems are at the moment, how the thing worked out last week you agreed to do, are different from the kind of things they will think about when they're sitting staring at a copy of Unity trying to get the damn build to compile.
So give them space to think about what their block is, what their problems are, what the things in the studio you haven't noticed are, what the relations with other people are, what their concerns about the upcoming deadline are.
Give them time and space to tell you that.
Secondly, Don't skip one-on-ones.
It's very easy to do.
You've got lots of stuff you need to do.
If you skip it, if you have to change it, schedule it the next fucking day or the next fucking afternoon.
Because if you skip a one-on-one, you are saying to your report, you are not my top priority.
And as a manager, your priority is your report.
You want to make sure they're as effective as possible.
Talking of which, mammal warmth.
One-on-ones are a really good way to build rapport.
I could have said rapport, I really like the phrase mammal warmth because it annoyed the hell out of my old co-founder.
But I like the greasy feel it gives.
If you're working in a team of less than two dozen people, it's very hard to hide bad news.
And I've just spent several slides telling you how important it is to share information as effectively and constantly as possible.
If you try to hide it, your left hand is hiding with your right.
And you probably won't succeed.
People who work in indie teams are smart.
People who work in game dev generally are smart.
It's an intellectually demanding job.
People will gossip.
People will find back channels to find information.
They'll either find out the bad news you're trying to hide or they'll make up worse bad news.
And they won't trust you.
and when you have to give them actual bad news publicly, they won't trust what you say about it.
So be as transparent as you can at all times.
I have a lot of other advice in this talk.
It's not just about doing the right thing, although it is the right thing.
It's also about doing the pragmatically best, most effective thing.
It takes a lot of effort to hide information in a small team.
Another.
pragmatically, another morally appropriate, but also pragmatically useful thing is credit people by name.
Not every sentence you give every time you mention the game recite the list of credits, because that turns into an Oscar speech every time you open your mouth.
But when somebody has done specific work, when somebody is responsible for a piece of really great art or UI work, when somebody is responsible for keeping the backend stable, and that's underappreciated, because nobody ever looks at a really stable game and goes, wow.
That's some great work as a player.
Mention people by name, be generous.
It costs you very, very little.
It's always tempting as a studio head to get egocentric.
And people really appreciate it when you don't.
So back to doing well by doing good.
Here are some ways to ensure that your team feels well-treated and build rapport better.
This is an unglamorous one.
Every decision you make that affects how your team is going to interact, how the business is going to work, get it in fucking writing.
And it doesn't have to be lawyered up.
Obviously, often you want legal contracts, but if you just put something in an email so everybody understands what's going on, you're going to clear the ground for people having better relationships.
Some concrete examples.
Lots of teams get going.
They make a game.
People are...
coding together, they've got a prototype.
It's gonna be on Steam at some point, and there's the indiepocalypse, so we don't really know how much money there'll be in it, and it's a bit vague, and we'll decide how, fuck that.
If somebody offered you a job, and you said, how much does it pay?
And they said, Oh, you know, we'll work that out later.
And you said, when do I get paid?
When's pay down?
They said, well, you know, it'll be at some point.
You shouldn't take the job and you shouldn't make that arrangement with other people as well.
Decide what the compensation is going to be for working the project upfront with your team.
Be specific.
IP assignment.
You're all working on something, people are doing little bits of writing, somebody's done some art, it's all coming together.
The game might never be finished, it might never be worth anything, so you haven't talked about the IP belongs to the company or the individuals.
Get it in writing.
Next week, somebody says, I think this really should be science fantasy, and somebody else says, no, we agreed it was film noir.
How do you decide who's right, who owns the IP?
One of you wants off the project.
they still feel they have some sort of involvement with it because they drew all that great art.
You need to know who owns the IP.
Even if you then do something generous, you need to have a basis, a firm basis to do something generous with.
Lots of indie teams have loose structures.
You'll get people who are core, you get people who are salaried employees, you'll get people who are doing bits of freelancing, you'll get people who have stock, you'll get people who are sort of hanging around, helping out.
If you go to GDC with a colleague who's a freelancer and they want to give out business cards, whose business cards are they handing out?
Are they promoting your company or are they promoting their own freelance work?
Both are perfectly reasonable approaches but I've seen people fight over this because their expectations are different.
You're at GDC, you're on my dime so you should be handing out my business cards.
Well, you know, I need to make a living.
Make sure the relationship is clear.
This one's lethal.
We trust each other, so why do we need to put things in writing?
If you are working with a trustworthy friend you've known for years, who does not and will not screw you over, what happens when a close family member gets ill and they need to leave town and they can't work on the project anymore?
Maybe they do, and maybe you come to a really generous arrangement where they draw a salary while they're off for six months, or they keep their interest in the project.
But you need to have a firm basis to make that decision on.
Agree with them up front.
Things that proper companies do and don't do, things that you might do.
People need to get paid.
There are a bunch of ways you can motivate people by paying them that aren't immediately obvious.
The pink ones are the things I tried at Failbetter.
The lavender one, the attractive lavender one at the bottom left is the thing I wish I had tried at Failbetter.
So I'll talk about that first.
I think in an indie studio people should know how much each other are paid.
I chicken out of doing this at Failbetter, I don't regret it.
It's hard to share this information.
People generally know if somebody is paid what might seem to be over the odds, whether it's because they're a founder, or whether it's because they have an unusual skillset, or whether it's because you had to pay them to make them come on board more than you'd expect.
People want to know that.
If you get some sunlight on it, at least people have a chance of understanding it.
Hiding information often breeds resentment.
Lots of projects have revenue share arrangements.
If you're running a studio, I kind of prefer having a profit pool for the whole company, to revenue share for projects, for a couple of reasons.
One is that if the company does badly, it doesn't make much of a profit, you can just withhold the profit pool.
But the other is that if you've got several projects people are working on, one of them makes all the money and one of them doesn't, that could be resentment very quickly.
Everybody gains something from a and the company doing well, everyone feels some participation in the business.
When you motivate somebody by paying them, giving them a salary rise is quite an inefficient way to do it because they get a salary rise and the next month that's the salary they've always had.
You have to keep on giving them salary rise in order to keep on increasing their motivation and that's usually not sustainable.
Profit pools are nice because they happen once a year, because people get a burst of enthusiasm for knowing that they have benefited from the work they did over the course of the year.
Minimum decent salary.
This is one of the things we did at Failbetter that I believe they're still doing now, which I'm quite proud of.
We decided a number that we needed to be able to pay people for them to have a fair shot at renting a reasonably nice place and being able to cover transport and not having to worry too much about money.
We never paid anybody less than that once we'd established that policy, however junior they were.
So that meant people understood we had a basic commitment to our staff's wellbeing.
It meant that junior people at the start of their careers were living in relatively comfortable circumstances.
And it meant that we could actually expect a better quality of work from people who didn't have to commute necessarily for the very long periods of time that you might need to live in London.
So you'll notice I put that at the right-hand end of the cost axis, because you can only do that if you're a reasonably successful studio.
It's completely impractical for a start-out studio, but think about it.
Talking of things that tend to be irrelevant to startups, and very relevant to studios we've been going for a bit.
Think about benefits.
It's easy to think these are the things proper companies do, but there are reasons people want this stuff.
Some companies, some countries, it's more important than others.
Some countries are better social security than others.
Family friendliness is something that's very easy not to think about when you are starting out, especially if you have a young team, and it becomes more and more important as the years go on.
Catch us up with you.
Sun and Sea wouldn't exist if we hadn't been a family-friendly company.
I was having to pick my kid up at half past three.
and then work Saturdays.
It's also a concrete, tangible signal where you can send you are interested in gender parity on your team, because disproportionately, although of course not exclusively, maternity leave tends to be a point of tension in companies.
So it is if you are interested in diversity, there's a tangible commitment you can make to say that women are welcome on your team.
Right.
A topic I have strong feelings on.
This gentleman is Alexei Stakhanov.
Alexei mined coal in Soviet Russia in the 50s.
And on one occasion, he put a few hours extra in, he worked really hard.
On a single shift, he mined 227 tons of coal.
Single-handedly person.
He didn't, of course he didn't.
He had a team of helpers.
The thing was a propaganda operation to encourage people all across the country to break their backs, putting in extra time.
This obviously has some similarities to labor practices persistently in...
the software, in the games industry.
Myth of the hero.
And as I said at the beginning, all of us are subject to gravity.
Just because you mean well, doesn't mean that you are immune to the allure of crunch and the dangers of staff burning out.
So I'm really proud of this.
This is a thing I posted in the Slack channel and fell back to when Sunless Sea was nearly done.
People responded very well to it.
The game launched on time and did well.
But, this is the key point.
I could give that speech because the hay was in the barn.
Because the game was in a place to be released.
If I decided the game actually needed eight more weeks' work in order to launch in two weeks, I couldn't have given that speech.
20 years ago, somebody said this to me, I've never forgotten it.
The point at which you decide to crunch as a team is not two weeks from release when you say, well, can you put in a few hours extra at the weekend?
It's when you don't build an accurate enough schedule or when you don't require your team to build an accurate enough schedule.
And don't get me wrong, estimation is fucking hard.
I've been making software for 20 years.
I'm still not very good at estimating time.
A couple of good talks yesterday about people having problems with estimation.
It's difficult to do.
I've got some tips about doing it.
But first of all, I want to address this.
It's a very tempting myth.
You have to bleed into your keyboard or the magic phoenix of art won't arise.
Nobody says this.
Nobody says this.
Buildings are late, but nobody pretends you can't schedule a building.
And nobody thinks the Moscone Center is less complicated than the average game.
I do not believe that the human body is less complicated than the average game.
All these are complex, difficult fields of endeavor.
All of them, people have to estimate for.
We can estimate for things.
We can build better schedules.
The fact that it's difficult should not dissuade us from trying because it's vital.
And if you don't believe me, believe this man.
Google it.
You may have seen this on Gamasutra a year or three ago.
Money points there are.
Crunch generally makes things worse.
Of course, if you manage to drag the game over the finish line, you'll feel you saved it.
Maybe if you hadn't crunched.
would have been a better game, it's very hard to say that.
But again and again, Tuzor found that the 770 projects his team reviewed, ones where people had crunched did worse.
And crunch fucks people up.
Look at this, health, productivity, relationships, morale, employee engagement, even increases the risk of alcohol abuse.
So don't do that.
The reason...
There are lots of reasons, but the biggest reason that we are so bad as humans, as game developers, as software developers, at estimating stuff, is that estimation is something you tend to do at the beginning of a project or a sprint, and then you don't think about it again until you next estimate something, and you don't know whether or not the estimate was right the first time.
So in terms of the iteration loop, in terms of improving your skills, it's very hard to do.
So fix the loop.
At the end of every sprint, are you assuming you're using some sort of agile methodology every month, some other time period if you're not.
Look at the estimates you did in the previous sprint.
See how accurate they were.
Use that information to feed into your next set of estimates and make sure your team does the same.
Nobody wants to.
It's one of the least fun parts of game development, but it stops people crunching.
It's like flossing.
Nobody enjoys it.
Here are three ways to try to make people, including you, do it and do it a bit better.
First thing, another pithy adage from Lottie, which really struck home to me when I first heard it.
You can be in the business or you can be on the business.
It's very hard to be both at the same time.
You want, ideally, somebody who is on the business, looking at the big picture, thinking about deadlines and estimates, and people who are in the creative and technical trenches.
Ideally then you want a producer or a project manager or somebody who's interested in the biz side.
If you're in a small team, you can't always get that.
That's life.
In that case, put your producer hat on maybe one day a week.
Stop thinking about when you're gonna add this feature and exactly how the code is gonna work.
Pull back, look at the estimates, look at the deadlines.
Don't put it off.
Top down and bottom up, everyone's bad at estimating.
I got better at estimating when I started thinking, top down, okay, this level will take three days.
Other similar things have taken about three days.
Bottom up, also, this level contains.
these many assets, each of those takes that many hours, add 10% for this, add 15% for that.
Okay, these are ballpark, same, let's meet in the middle.
It's a really fudgy way of doing it, but it gives you a basic cross-sanity check.
And any estimate is always better than no estimate, that's really important.
The third thing is a dirty trick to use in your team, when they say, oh, I don't know, you know, how long does art take?
And you say, OK, well, I put that on our Steam page.
How long does that take?
Release date, I don't know.
And at that point, they may, as they often do, but it's how I left fail better, say, fuck you, Kennedy, I know what you're doing.
But often it's, fuck you, Kennedy, I know what you're doing, OK, it'll be five to 10 days, but don't hold me to that.
Brilliant.
Five to 10 days, it's more information than you had two minutes ago.
Also.
Next time round, you say, last time you said five to 10 days.
And they say, oh, yeah, actually, it was about six days.
So it's a bit pessimistic.
Maybe I can work with that.
Most important thing about schedules, this, 20% contingency.
You put together a schedule.
It's 100 days.
You've only got budget for 90 days worth of work.
You need 20% contingency, because people say that's a good heuristic.
Broadly speaking, you can expect that kind of overrun.
So you put in 5% contingency, 105 is closer to 90.
Remember deadlines, remember deadlines are sharks or lions.
Contingency is time you put in a project for the stuff that will go wrong that you don't expect.
And you can't know it to be 20%, but after two decades of making software and having talked to a bunch of other people who do the same, 20% is the, broadly speaking, the number that keeps coming up for this kind of thing.
Not.
Yeah, some of you's recognizing some of this stuff.
Not you're a bit slow, or you're a bit lazy, or you could have worked harder, but shit happens that you cannot predict.
It doesn't snow in England.
It snowed in England over Christmas, and I lost two days because I had to look after my kid for two days out of a 10-day spring.
20% contingency.
The only chart in this, I'm very proud of this.
This is headcount at Fowl Basset during the time I was there.
Only one person ever resigned because they...
Actually, their spouse got a dream job in the US there to move away.
We lost three people in 2012 because the company was six weeks away from not making payroll and had to lay people off.
Some things about that.
You want to retain people if you possibly can because the longer they're with the company, the more valuable they are.
You treat people decently.
This is the doing well by doing good thing, right?
If you build a human studio, people are more likely to stay.
And every time an employee of two years or three years or five years standing walks out of the studio, they have a head full of detailed information and knowledge about the processes, relationships they've built with other people, understanding of how the team works, all this stuff.
You want to keep that.
People get more valuable as they go on.
People will eventually move on, and you need to bring in fresh blood, but keep people as long as you can.
And if people know that you're keeping them a priority, then they will trust you more.
Sometimes, shit goes wrong and you run out of money.
Here is some basic advice for the day that's a studio head you will probably have to face at some point.
Get it done quickly.
Do not leave people lingering.
Give them an answer as soon as you can and get it over with.
Think about how not to have a colleague walking past a desk full of other colleagues, island table full of other colleagues, carrying a cardboard box and weeping.
If you have to send people to lunch early, or you have to meet with somebody early in the morning so you avoid the humiliation of the last day people will remember your team, find ways to do that.
Never say this, it's not true.
If you are letting somebody go, you still have a job and they don't.
And if you tell them that it's hurting you more than them, they won't react well and they shouldn't react well.
And really important, when you are interacting with the people in your team who may become friends, who may invite to your house, whose shoulder you may cry on and who may cry on your shoulder, always remember that you may have to have this conversation with them.
So I ran Failbetter for seven years, and it was my dream job for a lot of that time.
And towards the end of that time, I became aware gradually that I wasn't having fun anymore.
I had lost track of why I was doing what I was doing.
I was spending less and less time doing hands-on work, more and more time doing managing managers.
And the thing about Metal Pedigree...
The thing about chronic human fatigue is it builds up over time.
I'd be running the studio for seven years, so it'd be very tough times indeed.
And I gradually started to realise I wasn't enjoying it, and then I quite suddenly realised I wasn't enjoying it at all.
So I decided really quite suddenly to leave.
It took me a week of thinking and soul-searching, having serious conversations, and then I wanted out.
because I wanted to do something with very little responsibility during the roaming year I mentioned at the beginning, working for larger studios.
And I wanted to do smaller projects I was more hands-on with again.
We had a problem.
And this is one of these problems that's theoretical and sounds like a great problem to have until it happens.
I wanted to walk away.
I owned most of the studio.
There wasn't enough money in the studio to buy me out.
We did have a couple of preliminary conversations about selling the studio, but nobody wanted to be sold.
So what did we do?
Fuck it.
Boo fucking hoo, I only get 360K pounds.
It's still more money than I expect to see in my life, honestly.
I left a lot of money on the table so that the company could continue to exist without going bankrupt.
Because priorities.
Because you decide at the beginning, whether you're in this to make a lot of money, or whether you're in this to build a human studio, you decide which is safety, fun and profit is most important.
And I think this is true.
And this may be relevant to you someday.
The fact that you've been in the studio from the start doesn't mean that you are all there is to the studio.
Quick advice.
Plan for it, get a shareholder's agreement or whatever the equivalent is in your country, just in case you need to leave.
Don't make the mistake I made as a typical founder mistake of acquiring jobs over time, accruing things I didn't quite trust to give away, so the fatigue built up.
Keep your email addresses for your company and your home address separate.
I nearly didn't come to the US to do this tour because my ESTA, E-S-T-A, Reminder, went to my old Failbetter address, my personal address.
And my ex-wife still gets mail addressed to Failbetter, which annoys her to this day.
So keep it separate, even if you're convinced you're gonna stay with the company forever, it's just good sense.
And do think of it like a divorce.
It's gonna be weird when you walk away, even if you do it in amicable terms.
Always, always keep track of this.
Why you are in it, what it's for.
Illustrative statistic about probably the number of things you'll want to do on any given day or any given week running in any studio.
Illustrative statistic about the number of things you will actually get to do.
Time or resources or energy.
100 minus five.
So you are going to have to reject most of the things you want to do.
And either you can let that happen by accident, you can just let it fall on the floor, or you can decide which things to drop.
So decide which things you focus on, make that a conscious decision, know you cannot do everything, and fix on it.
And here, if you remember nothing else in this talk, are the five things I think are most important.
Have a fucking budget.
If you already have one, great.
If you think you'll get around to one, do it before you write another line of code.
Never forget why you are running a studio.
Making games for a living is the how, it's not the why.
If you fuck up, own it now.
Put everything in writing, and not 10% contingency, 20 fucking percent.
And that's it.
Subliminal message.
We probably have time for one or two questions.
If you'd like to ask Alexis a question, please come to the mic in the middle there.
And I have one myself.
So on your list of new priorities, it's the hands-on auteur kind of thing for your new studio.
Does that mean you're trying to hand off more of the studio head kind of things to other people in the team so that you can do more of the direct design, direct hands-on work?
So right now, what I'm doing is the team is on this stage and in the front row.
There's two full timers and half a dozen freelancers.
So we're working more with freelancers, which keeps the studio small and it means that there's less management involved.
In the longer term...
I will want to grow. And I think, yes, one of the mistakes I made at Failbetter was not handing it off enough. It was a little bit of a benevolent autocracy. And I think that what I said about giving people responsibility also applies to management responsibility.
You mentioned one-on-ones being a really important thing, sitting down and taking time with people.
Can you give me an example, one or two examples of questions or topics that you brought up that you felt...
Yes, so there's two things you should do.
And this will basically get you three questions, really.
One is, how's things?
But the two questions to ask people are, what problems do you have right now?
because everybody has problems and everybody, if they don't have problems, they'll invent them and they want to talk about them.
So ask people what problems they have, what's stopping them doing their job.
And ask them, the problems we talked about last week that we agreed these things to fix, how did that work out?
Because it's very easy to forget doing that.
It's very easy not to plan for one-on-ones and just kind of say, how's things, what are the problems?
And then people feel like they mention the same problems week to week and you don't address them.
So specifically address the things you raised the previous week.
Okay, thank you.
I had a question about fucking up. You talked a lot about the idea of being comfortable saying when you fucked up. But on the flip side of being comfortable being able to tell somebody like, you know, you fucked up, don't do it again kind of thing. My experience shows that fucking up is never black and white. And there's a lot of...
grey areas where somebody doesn't think that they fucked up, but you think that they fucked up, and that kind of, that whole realm of grey areas. Just curious about your thoughts on that.
My thoughts are it's a whole other talk, honestly.
I was aware that there were simplifications, I did that slide when I was rehearsing it, I was very conscious of it.
But it's...
The key point, I think, is that you have to be open about this stuff.
It is the most important bit, but you're absolutely right.
You may be wrong when you think somebody's fucked up.
You both may be going in a different direction.
You may not have the whole picture, all this sort of stuff.
And, yeah, a whole other talk.
I don't have anything useful to say over the next two minutes.
I think being open, I think that is.
Yeah, I think that's it really is.
People have to be able to talk about this stuff.
And the moment.
The moment anybody feels criticism is shut down, the moment anybody feels that it's not possible to point out things being wrong, that's when the studio starts to rock from the feet up.
Okay, thanks.
Okay, that's gonna be our last question.
Okay.
Sorry, if you have further questions for Alexis, please come up to the front, and if we need to, we can take it to a wrap-up room.
And make sure that you fill out your email surveys to give Alexis feedback on his talk, but before we go, let's give him one last round of applause.
