Hi, everyone.
How's it going?
Before I kind of get into this thing, just to take a poll from the room, how many of you are video game specific AI developers, like game AI?
OK, a significant percentage, which I would expect.
Now, how many of you who are game AI developers spend the majority of your time in something that you would consider to be combat-oriented AI, something that's murdering the player, basically?
basically the same percentage of people, almost the same number of people.
Cool.
I consider myself kind of an outlier.
I've spent the vast majority of my time in the industry working on non-combat systems, simulation systems, background characters, the backup dancers, you know, that kind of stuff.
That's where I've spent most of my career and most of my time.
So that's kind of why I was super excited to do this type of talk.
The desire for this, and really the catalyst of this, came from a couple of different places.
The first time was in anger, when I did a rant.
Maybe it would help if I'm on the right thing.
Nope.
Success.
When I did a rant, this was in 2012, many years ago, where I said, why don't we have more ambient AI characters in games, right?
Why are we doing these sort of looping idols?
Why are we doing these random walks?
We can do even just a little bit better.
So movie time.
I like movies.
So I'm going to show this little movie.
This is from Pillars of Eternity.
And we're just going to watch this briefly.
So here I'm getting jumped by some people in a town.
And I promise this is about non-combat stuff.
Notice those people at the bottom right.
They're just hanging out like lightning is raining from the sky.
Is it not playing?
Oh no.
Sorry.
Let's try this again.
Yay.
Oh no.
Great.
That seemed to work well.
Okay.
That's because i'm on double monitor here. Let's try this again. There we go. Okay, now Those people at the bottom right.
So they're basically doing nothing, right?
They're hanging out, they're just doing their idle, like lightning is raining from the sky, fire, people are exploding, right?
It's like a whole thing.
And they're just like, meh, it's cool, whatever.
This shit happens all the time, it's fine.
This is like, this is my pet peeve in games.
I see this stuff constantly.
All right, let's see if I can somehow recover this thing.
No, it moved this guy.
Oh, he's over there.
I'm back.
Okay, we're back.
So, let's dig into this just a little bit, right?
So, Pillars of Eternity actually has a whole really interesting reputation system.
You can do all sorts of cool stuff with reputation.
I'm benevolent, for example, so that means that I can choose more benevolent type of things.
How awesome would it be if me as a benevolent character, those two people turned around and said, this super awesome benevolent character is being jumped.
Maybe I'll do something about that.
So that's the ambient AI.
And for all of those of you who rose your hand about the combat side of things, that series of slides was for you.
Second motivation came from Alicia.
Alicia Lidecker gave a rant two years ago about what she called artificial intelligence, which I love.
And it's about why aren't we doing more of this kind of stuff?
And I'll very briefly speak to that and answer that, because I was asked the very same question.
A senior producer came and said, why on The Sims, you know, we're working on The Sims 4, why are The Sims AI characters so much more expensive from a man-hour point of view than something like Battlefield 4?
Well...
because my characters are on screen for a really, really long time and have to look good because they're the focus of the character, they're the focus of the camera.
The player is constantly looking at them.
Whereas something like Battlefield...
characters on screen for how many seconds?
That entire fight that you saw in that last video was 20 seconds or something.
Your average fight is less than a minute.
Whereas these deeper, richer AI characters need to last for longer.
So that's your first kind of lesson about if you want to build deeper, richer background characters, be prepared to pay that cost because it's, you know, you can kind of fake some stuff, but.
You know, we are all sort of wizards in the background.
And it does take a little extra time.
So this talk is gonna be T-shaped.
That's the way that I like to think about it.
I'm gonna talk about a myriad of different techniques.
Things that are in some ways understood.
And talk about how I piece them together.
to form these types of background type of characters.
And then we're going to talk about one particular system, which I have not seen a lot of talks or literature on, which is a scheduling system for scheduling AI characters in, which would actually work for either of those types of things.
I've used it for deeper simulations, and I've used it for small, like, background type stuff.
The important thing to realize is that we are illusionists.
We're not gonna actually simulate human behavior, at least that's not really our goal, right?
It has to run 60 frames a second.
So it's not about realism, and that's not what we're trying to do with trying to simulate these background characters and trying to dissimulate non-combat type stuff.
It's not about creating something that is real.
It's about creating something that is immersive.
things that are interesting.
Okay, so when I try and create this kind of stuff, there's one giant button that I hit, and anyone who's seen any of my talks or know the crowd that I associate with is probably gonna guess exactly what's on the next slide.
But the big shiny button that I hit at the very core of my AI when it comes to anything related to this kind of nuanced behavior is the utility button.
I use utility theory and utility behavior type things and utility curves and all that fun stuff.
You know, there's tons of talks here.
I'm not gonna, this talk is not gonna be about utility theory.
But that is the essence of it.
Because it's really good at giving you really nuanced behaviors.
It can be I should say and really good at giving you emergent behavior, which is I think what we really want to see That's kind of the magic. That's like the the Holy Grail. I think of a lot of this kind of stuff So let's think about that. So how many of you out there use a utility-based system in your AI?
a hell of a lot more than I thought, to be honest.
How many of you in that utility system do any kind of randomness whatsoever?
Is it just deterministic, as in max of whatever, or is there some randomness?
How many of you do randomness in your AI?
Okay, about less than half of that same group.
If you're gonna try and get the kind of nuanced behavior, I think you have to have some kind of randomness in there.
I think it's the only way that it works, because if you choose max of whatever the decision is, then at that point, what you're choosing is a truly deterministic thing.
So there's many ways that you can do it.
The simplest way is a weighted random across the top scoring actions, which is what we did on The Sims 4.
Richard Evans on The Sims 3 did something very similar.
He just built a different curve to push lower scoring actions lower and higher scoring actions higher to get a more sharp sort of choice.
But even just a simple weighted random across the final scoring actions is going to really, is gonna add that bit of nuance.
And I'll prove it to you.
I'll prove it to you with this example.
This happened to me, I sort of recreated this, but it happened to me just totally accidentally while I was just working on The Sims.
So I'm like, we wanna test sort of invite-in behaviors.
And one of the wonderful things about working in AI is you spend a significant percentage of the game just watching what happens.
So I went out into the street, found a random person, and said, hey, let's be friends enough, and then come on in.
So what happened is they stayed out there and spoke about books for a short amount of time, and that makes sense, he's a bookworm, okay.
Then he went in and started reading, and she did the same thing.
It's like, oh, that's super cool.
They went and they read together.
They spoke about a book, a series that they love, and they went and read together.
Of course, none of that actually happened.
That was just the emergence coming through.
That's a story that I as a player told myself about what was happening.
What actually happened is he got sick of socializing, decided that fun was a, that he wanted to score fun.
Fun won.
And he's like, okay, here are all the things that solve for fun.
And he had a better than 50% chance to choose reading.
She had about a 25% chance to choose reading.
And the gods of the random number generator decided to smile upon me that day.
And there they are, they're reading together.
So a big part of this is trying to make, fit all of these things together.
That's gonna be a running theme of this sort of part of the talk.
All these little moving pieces fitting together.
So that was kind of magical for that.
I'm gonna talk not super long about this part, because I've already spoken about this stuff, but stats.
are another huge thing.
So all the different stats that you can attach to your game that are little things that I can hook into, skills, relationships, wants and needs.
The bottom one is like city health and things like that.
So any of these types of things that you want to be able to attach.
Really, there are basically any value that you can attach and they can sort of decay over time or do any of those types of things.
They can be attached to people or they can be attached to objects or they can be attached to concepts.
Food on The Sims 4, for instance, was one of the things that decayed.
So the quality of the food went down.
Tags are the other thing.
I've spoken about this stuff as well.
So are we lovers?
Are we best friends?
Are we soulmates?
These are just little bits of information you can attach to people.
And they can drive behavior.
And this is where the subtlety really comes into play.
For example, if I'm a glutton or if I'm a bookworm, I can generally score those types of actions a bit higher.
And it doesn't mean it's always going to trump those things, right?
It doesn't mean that he's always going to choose to read.
It means he's going to tend to choose that.
And it's those little tendencies.
It's the gentle push in that direction.
That's the thing that you're going for.
And again, for a nod for some of the people who are working on more combat-oriented stuff, over on the right, I have the, those are the actual buffs on my particular character when we were fighting those guys.
So any of these types of things, these are all just tags, tags that you can tag people with.
And I could talk forever on this, I did last year.
So if you have Vault Access, Daniel Brewer and I did a talk on knowledge is power, and that's where I spoke in depth about this kind of stuff.
Okay.
The next thing I want to talk about is relationships.
So if we're having all of these people, what I think we're really trying to do is creating an ecosystem of different entities and different people that exist in this world.
And those people should have their own relationships.
How I feel about you may not necessarily be how you feel about me.
If you kind of don't really like me that much, but I super like you, I might follow you around like a puppy.
If we like each other in the same amount, then we may converge and really want to talk to each other.
You can feel different ways about objects.
This is my chair.
This is my bed.
This is my guitar, or whatever.
So relationships can do quite a bit of, again, it's all subtle hits.
I'll give you another example.
No matter what that sim chose to do, if I went to go read, if she was able to, she probably would have sat next to me on the couch because we were friends.
So the posture scoring that says where do I want to go, that feeds into the Pathfinder that says where exactly, what is the actual location that I want to be at, we weighed higher for those types of interactions.
It gets even more fun when you talk about negative relationship doesn't necessarily mean that I don't want to talk to you.
On The Sims Medieval, we had a depth that we used.
So if I really liked you or really hated you, I wanted to talk to you.
Which meant that we got brawls and things happening in the tavern, which was really cool.
So that's the kind of thing that you're going for.
If you're either crazy or you already have a game that supports it, influence maps are a really good way being able to have more reason about the environment and all that kind of stuff as well.
This has also been spoken about quite a bit by Alex and by Dave Mark and various other people.
So you can check out those resources as well.
What we're trying to do is we're trying to take all of these little pieces and fit them all together so that we can create something that is more than the sum of its parts.
All of these things working together will create this machine that allows for these types of emergent behaviors to come into play.
We're creating this sort of fertile ground so that emergence can come through.
And I think that's the secret of creating not believable, but immersive behavior.
non-combat AI and simulations and that kind of thing.
That's what we're really trying to do at the end of the day.
Okay.
We have to talk about LOD a little bit, I think.
If you're trying to create a big simulation, one of the big things you have to deal with is level of detail.
And there's tons of ways that you can handle all of that stuff.
The one that I wanna focus on a little bit is basically statistical simulations and statistical planning and that kind of stuff.
If you have this whole ecosystem of utility curves and all these things all working and measuring together, you're going to create this general trend of how Sims or whoever you're doing it, like your characters behave, your simulation behaves.
If this city that's over here is starting to decline, and the player goes way over here, so now I'm in low LOD mode, then that city is probably going to tend to trend lower, and I can get updates from that city, and I don't have to obviously simulate that.
So those types of, basically you're building a curve that you're just walking along as you go through.
And that can be useful for tuning as well.
Examples on the Sims, if a Sim is in low LOD mode, then we're not simulating their motives at all.
When they come back into high LOD mode, we figure out what time it is, and then look on a curve that a designer built somewhere, and figure out, OK, this is what the curve says they should be at, and we'll tweak it a little bit either way.
Those types of things can really help.
OK.
I'm gonna show, this is just a few tools that I use for this kind of stuff.
This is Desmos, but any graphing calculator can really help with these types of things.
Laying utility curves on top of each other is the only way that you're gonna really be able to understand how all of those curves line up together.
It's also a way for me to say, okay, so let's say that I'm a bookworm, for example, and I wanna score these actions times, I don't know, 1.1.
That seems good.
And you can play with it and iterate without having to like dick around in the actual code itself.
Here it is, mathematical formulas.
And these formulas mean nothing here, I literally just threw them in there.
But I'm sure yours will mean a lot.
Moving on to the next thing, sort of the next level up from that, and this is an often overlooked thing I think.
is Excel. I've done entire simulations literally in Excel, which is really cool. It can be a little painful sometimes, but I mean Excel has a random number generator. How many of you knew that? It actually has a random number generator. Oh, like half of you. Okay. That's a lot more than I thought. So you can actually just keep refreshing it, refreshing that line, and it will just regenerate your simulation.
I had an amazing thing, I couldn't get a hold of it to show, but I had this amazing one.
It was my favorite that I ever built on The Sims 4 was, I called it Commander Tomaloc Throws a Party, which is a Star Trek joke for those of you who know and love Star Trek like I do.
Commander Tomaloc was just, for all intents and purposes, was a sim.
And I had a bunch of other sims that were along in there, and the entire purpose of it was to simulate what happens when I throw a party.
So we need a caterer, we need a DJ, we need all these different roles to be filled.
So how do we choose an appropriate sim to fulfill those roles?
And so I created a system that did it, and I tweaked it for a while, said, okay, this feels right, all in Excel, and then I handed it over to design and said, here's what I'm thinking.
And so they got to play with the different skill values and different motive values and just whatever stats that they wanted to play with, keep regenerating and say, yes, these sims are appropriate.
Kick it back to me and say, OK, great.
Now I have the model.
Now I can do what I want.
So it's Overlooked.
This one's more for newcomers.
This next one is more for newcomers.
Sort of less experienced devs, I think, Overlook.
things like prototypes, so that's why I mention it here.
These prototypes, god, sometimes I feel like I write more prototype code these days than I do real code, because this is answering whatever question that I need to answer.
So like, on a Starship simulation game I'm working on on the left, that's how all of the crew are generated there on the left that you see.
I have a story simulation and story generator based loosely on propositional logic on the top right and a whole star system generator on the bottom and they're just silly little like C sharp or the one on the left is Python, like just little apps that I did.
You know, it's in a thousand lines of code or 500 lines of code.
I can prototype this thing before I have to like, okay, let me architect it into this thing that I have to care about.
So never underestimate the power of things like prototypes.
Also, probably my biggest piece of advice for prototypes, throw it and, yeah, throw it the fuck away.
Really, like throw it away once it's done.
Please, how many of you have taken a prototype, built a prototype, and then taken that forward to production?
Be honest.
How many of you, was that a positive experience?
One person!
So one person out of the, what, 200 people in this room.
So half a percent.
I worked on a game called Brain Quest, which has nothing to do with AI.
And we built the prototype, and before I got there, the prototype was built in Flash.
So we're using ActionScript and stuff like that.
And we're like, okay, this looks good.
And they're like, well, we don't wanna throw this away.
The game was for the original DS.
We built a flash interpreter for the DS.
That was the solution.
It ran as quickly as you thought, and it's the only project I've ever been on where depth of function calls was a real performance hindrance, and literally unrolling loops, hand unrolling loops was a thing.
It was amazing.
So throw your prototypes away, please.
Good God.
Okay.
Let's go a little deeper.
Now we're gonna talk about a scheduling system.
So this scheduling system, you know, I've spoken about this a little bit in other things.
Humans follow a schedule. Like, that's just sort of reality.
You will generally throughout the day, you know, and this is definitely not my schedule, I'm not awake at 8.30 in the morning.
You'll definitely follow some kind of schedule, you know, you go to work around the same time and so on.
On the Sims we followed mostly a weekly schedule.
On, you know, the Starship Sim that I mentioned earlier, they follow a daily schedule because it's a military ship.
So...
You know, this allows you to constrain or whatever the opposite of constrain is, like expand your horizons in terms of what you can score.
Okay, the basic architecture works like this.
You have an agent which has some number of schedules and those schedules have some number of entries which in turn wraps some kind of time.
That's basically the idea.
You can have any number of schedules, you can have any number of entries within those schedules.
Here's an example, this is a schedule.
You can have overlapping entries, as I said, so these entries can overlap.
This row represents one single schedule.
And so here you see that there's a split, so there's two entries that are overlapping.
You can have white space here, which is a totally blank space and you have to consider how that works.
Entries themselves have the start time and end time, as I said, and they have a set of tasks.
Tasks I can't tell you how to do.
That's totally up to your game, right?
Whatever your tasks are.
They're interactions on The Sims, for example.
But it's whatever it is.
Sometimes it's as simple as, I'm going to walk over here and run some animation.
Like, it could be that easy.
Or it could be super complex.
Generally tasks can be chosen in, if it's like, if you're trying to do this as part of just like background AI, just a basic weighted or even uniform random is probably fine.
It's not gonna hurt me too much in my soul.
But I tend to go more the utility curve route as you've probably guessed.
The Sims Medieval heavily used a scheduling system and we just used a utility curve kind of standard Sim scoring to figure out what we wanted to do once we hit that.
Tasks are, and forgive this, because I enjoy math, tasks are basically union of all of the different task sets from all of the different schedules and all of the different entries that you're in.
So if I'm in three different entries, then I will basically have the union of all of the tasks in those entries.
Those are the ones that I'm looking at.
So, let's look at another example.
So we have this thing here.
We're going to, can't even see what it's doing on the screen.
Yes, so we add a new schedule.
Then over here we have these kind of overlapping sets.
So these are the overlapping ones in this particular case.
So if we're at 10 hundred hours, for example, then we're gonna take all of the tasks from all of those things.
13 hundred hours is all the tasks from those guys, right?
Schedules can be prioritized.
So this might be a high priority schedule, for instance.
this high-priority schedule is going to change the way that we're going to process.
So, for example, just as a simple example, we're at 8.30 basically.
So, if we're at 8.30, then we're going to look at our high-priority schedule, we're going to ignore it because this is a blank entry, right?
And we're going to go to the next set, and then we're going to basically choose something from within this set.
If we take a different example, we're here, then we're gonna look at our high priority set.
We're gonna completely ignore anything from our lower priority set.
This allows us to have schedules that overlap and overwrite other schedules.
So we can say, here's your general default schedule.
This is how you act every day, but you are a traitor to the rebellion, and so here you are going, like during this particular time, you're gonna go and do traitorous things.
It allows us to do those types of interesting things.
This is an example of what a priority might look like.
The only reason why I'm showing this is because please, this is a big gotcha.
This hit us in other projects I've been on.
You want to have a very small number of priorities.
This is actually maybe too many.
I don't think I'm even using critical.
So, like two or three priorities, not like the Sims which had like 30.
That gets nuts.
Okay, so let's talk a little bit about how these blank entries work.
That's up to you.
What do you do?
On The Sims, we said that was your free time.
It was part of the design.
We said you're just not constrained.
You can do whatever you want.
For other projects, it could be an error state.
So it's a conscious decision you have to make of what happens when I'm out of a schedule.
Because even if you design your characters to always be in a schedule, there will always be some bug where they're not.
Oh, and generally add schedules through tags and things like that.
OK. Updates.
So the way that updating...
We have to talk about how updates work, because we don't want to do, like, for each character in the world, for each schedule in the world, for each entry in the world, update.
Right? That sounds terrible.
So...
you know, we can do some kind of time slicing, we can do some kind of threading, but I think the more interesting thing to realize is that schedules have discrete moments where I actually care about anything that's happening in the schedule whatsoever beyond my task set changing, right?
The task set that I'm scoring against only changes at these very specific cadences or these very specific moments.
So we have to define a new system.
I'm gonna define it kind of generically, because that's how I think.
So I've created this little system, this is like delayed callback.
You know, it's just, it's basically a function wrapped in a time call.
You have this manager that has this heap of callbacks, so you know priority queues are all the rage.
You can add and remove callbacks, right, it's just an API for doing this stuff.
And you have an update.
So the way that it works is it's global to all of your schedule, to the entire schedule system.
Or maybe even your entire game, why not?
And you can add, so it can, for all the schedules, for all the characters, across everything.
you have this sort of priority queue of all of the different updates and when they're going to happen.
So the magic here is that you're not doing this order and like update across everything.
Most of the time you're doing constant time.
Let's look at the first one, I don't need to update it because it's sorted based on time.
The one gotcha that you have to deal with is, you know, if you're making, like that was great on The Sims Medieval where they had very different schedules, but in a military sim, you know, you still have to do something, some kind of time slicing.
So just be aware of that.
So, new schedule's added, here it is.
That's our new moment that we have to care about.
We throw it into our little callback heap, and we're done, that's it.
That's basically the idea of how this core system works.
Now, if you take a step back, And just squint your eyes at this scheduling system.
Like really just squint your eyes at it for a minute.
Kind of looks like a state machine somewhere.
Except it's where the transitions are based on the constant march of time.
The ideas are that the states sort of define what different actions that I can choose from, whether constrained or expanded, change the set of tasks that I have the ability to choose from.
So you can think of those as different states.
So even if your game is not directly tied to time, the idea is to create these small little discrete like states really that they're in.
What if you're in a heist or something like that and then there's like different events that happen through there, so it could even be event-based.
So that's a thing that you can kind of squint your eyes and see that a bit.
So that's the idea.
I spoke really fast, but I think I have, what, three minutes?
Yeah, sweet.
That's actually only two minutes over than my practice time.
So thank you very much.
If there's any questions, there's microphones.
Thank you.
Great.
I'll stand here and stare awkwardly at the audience for three minutes then.
Thanks for your talk.
Yeah.
I was wondering if you could speak to.
I guess the nature of time inside the Sims and just like how you do it relative to like wall time and real time and like and then how you actually like the mechanics of the click I guess.
Like the mechanics of like actual simulation time?
Yeah and how you accelerate it.
Do you have your own calendar system?
Like I'm just kind of curious how you.
Yeah.
Move stuff forward with its own time.
Internally, literally, it is a double of ticks, essentially.
There's a date and time object and a time span object and that kind of stuff.
So you could get different dates and times and that kind of stuff.
Yes, we had our own, basically, internal calendar system.
That's right.
So it was like, how many, I'm trying to remember what it was.
It was, yeah, seconds, minutes, hours, days, and then I think weeks was in there, and then months, certainly.
So those were all the different ones.
It was approximately one real-time second per simulation minute.
in single speed, and then double speed was actually times, I don't remember what they got tuned to, but something like times three, and then three times two was something like times 10.
I don't remember exactly what the values were specifically tuned to.
But that's basically how the ticks worked.
Does that answer your question?
Yeah, yeah.
I was just curious because you can't use the system time necessarily.
No, yeah, we can't use the system time.
Yeah, we had a whole time system, basically, that worked.
Cool.
Great, well that's it, I'll be around.
So feel free to come up and chat with me about stuff.
If you wanna know about any of the other stuff that I spoke about more in depth, I'm happy to go more in depth on that kind of stuff.
But yeah, that's it for me.
Thank you so much, thanks for coming.
