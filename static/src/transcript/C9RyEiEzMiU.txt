So I'm going to be talking about maths.
And it's maths.
You do your GDC talk, and you put it in.
And I had one piece of feedback.
And that piece of feedback was that I had a typo, that it's math.
It's like, it's not.
There are multiple types of math, it's math, you know?
So, what I wanted to talk about is this thing that I worked on, a unified method of noise generation.
Right, so, firstly, I'm gonna talk about some of the problems that we had to solve making No Man's Sky.
So I'm going to give you a little bit of history first.
And that's because we were a super small team and we had this problem to solve which is that we made kind of one of the most played games of last year with just this really tiny team.
And so that brought this whole set of weird problems, right.
Secondly, I'm going to talk about one of our solutions to that problem, like just kind of one specific small part of that, which is a way, a new way of kind of generating noise that I worked on.
And the reason that I've flown in because I want to talk about it is because I hope that other people build on it and I hope, you know, I hope that that is useful to people and I would love to see more in terms of procedural generation, more in games.
And that's the third thing I want to talk about is I've got thoughts on where I think procedural generation could go in the future and where we at Hello Games would love to go with it.
But first, some history.
So I started out at Criterion, which is now EA.
I got bought by EA.
And I sat down to write this, and I realized, to write a little bit of history about me, I realized I'm really old.
I'm so old now.
Like, I don't know what happens to old programmers.
Like, as in you don't generally see them, but I presume I'm about to find out, right?
Like, I think...
I think they come for you in the night, I don't know.
Something happens, you get disappeared, but I'm near that time now, right?
Because I started digging out some of this.
So I worked at Criterion, and Criterion, maybe not so much, maybe not as much now, but at the time was kind of becoming known for engine and kind of cutting edge tech and stuff like that.
And there's a reason why I want to explain this.
So like I started out there at 21, as like a junior programmer and I left when I was 25 and I had done stuff like engine coding, engine lead, tech director, stuff like that at various different places on various different games.
The reason I discovered that I'm old is because the first quote about RenderWare, when they say next generation graphics, they're talking about PS2.
So that's how old I am.
Like, they're coming for me soon.
And when they talk about Black, a next generation engine on current generation hardware, that was an engine that I was engine lead on and something I worked on a lot.
And that was PS3, like was next generation then.
you know, I'm like one of those old farts that talks about the spectrum all the time.
So, I worked there, I actually worked on a whole load of math stuff, so I didn't work on RenderWare, but I ended up writing like this math library that ended up getting used in RenderWare, which was in...
like games that you might have played like GTA and Call of Duty and Battlefield and stuff like that.
And you'll know this because I did the, I optimized the animation code and it's got a bug in it and I saw it in so many games and it was horrible. You would see arms pop inside out and if you saw that then you would, you know, that was me. That's my mark right.
So the reason I'm explaining this is because I think engines really dictate design decisions.
And that's almost your first decision, your first design decision on any game is what engine you're using.
And loads of things cascade from that.
And like I said there, before somebody lynches me, it's totally fine if you use Unreal or Unity or whatever.
It's just not something I have ever done, really.
Like I think they're great and stuff, but...
Before starting No Man's Sky, when I sat down to write the first lines of code, the previous seven years, every single year of those seven years, I had been part of writing a new engine from scratch.
So I had done that like seven times across seven different games.
And like, it begins to get a bit boring, and you're solving the same problems all the time.
And so, I...
guess I wanted to do something a bit new.
So No Man's Sky started as a hobby.
It was like a hobby project.
It sort of still is for me.
I love riding engines and I think it's a real craft and I would hate to see it die out and I would hate to see us all use Unreal.
Because I think like almost every new genre, when you think of any new genre, it was.
created in a new engine right like when you think of doom and things like that, you know, I'm we need The zombie apocalypse is going to come and then who is going to write our engines, right?
Somebody needs to remember how to do that. So I think it's a really cool thing and I could never not see doing that but it was starting to get boring and we have Gravitated towards a certain place in games where things are are are quite iterative, you know, like you look at, if anyone watches like, looks at Digital Foundry or something like that and they zoom in on images, you know, comparing two games and they're comparing literally pixels and between one engine and another, you know, in terms of like the anti-aliasing method.
So I just wanted to sit down and write something completely different.
Mainly, selfishly, because I just thought of the things that I wanted to learn about.
and then I started to write an engine that had those things in, I guess.
And that was fun, like, that was really fun and a really fun period of my life where every evening and weekend I was coming home from coding all day and I would go and I would write my little engine and that was really fun.
Then we showed it, we showed the first trailer and from then on it was like...
It was like we were building a rocket ship on the way up, like to the sun, being fired into the sun with like the skin burning from our faces, right?
It was like, it was a bit of a rollercoaster ride from then on.
But at the start, it was genuinely just a hobby and something super enjoyable.
And so it was something new, right?
And that's the thing that's easy to forget when you're playing it, is this.
if you are playing No Man's Sky, then you're getting an experience you kind of can't have anywhere else, right?
Like, don't get me wrong, I'm super excited that this area is being explored now and that you have Star Citizen and Elite and Astroneer to help loads of other games who are doing things in this area and solving similar types of problems.
But at the time, as we were going through it, we were going through it reasonably on our own without a reference point.
And it was super technically challenging and that makes it super interesting.
And I think that's like selfishly as an engine programmer, that's fun.
Like there's interesting problems there and I had kind of lost that a bit.
So, actually if I just take some examples of what I mean by that, or just even one little example, right.
Like when you're working in No Man's Sky, when you're working in the engine, like one, you were never within floating point accuracy, right?
You were always outside the bounds of what the computer is actually able to compute and understand.
Your Y is no longer up, which is way more...
It's way more difficult than what you realize, and I'll try and get into that.
Nothing can be pre-baked, nothing can be pre-calculated.
Like, every solution to even the smallest problems is really unique.
And I find that quite interesting, like, really simple example, okay, if you are in any normal game, any normal game, and you want to put like a little marker over the top of a building, and then that's really simple you just get the building get its position and put the marker there right like that is an easy problem uh... in no man's sky you go to get the building and let's say the building is on the same planet as you uh... which is one problem but let's say the buildings are the same planet as you you have to account for the curvature of that planet that building might be directly underneath you or it might be you know on the other side of the planet so now you're gonna have to cast that marker up onto the horizon of where you're stood.
So to do that, you remember that your Y isn't up anymore, so you're going to have to calculate the tangent and bitangent.
You're going to have to think about how close you are to the pole.
You're going to have to bring that marker up.
So that's okay, that's not too bad.
But maybe it's on another planet, right?
And maybe it's on the back of that planet.
So now you've got to cast that round to the side of that planet.
So that's a little bit tricky.
But then there could be another planet between you and that planet.
So you've got to bring it around the side of that one.
But then both of those planets might be underneath you, because there's planets underneath you.
So you've got to take that marker, bring it round, bring it round onto the horizon.
And then as you fly towards it, it's got to move to the right place.
So that's OK.
That's not too bad.
Except none of those buildings exist right now.
because they're all being generated, and they're quite expensive to generate.
So now you're going to say, find me the nearest building of this type.
And to do that, you're going to have to start generating where buildings are.
And that's really expensive.
So now you've got to multithread it, and you've got to run it over a longer period.
And you're going to have to start generating actual terrain of planets and working out where buildings are.
and getting the nearest one.
That's too expensive to do, so you need a bunch of heuristics to do that.
And now you've got the building, but you have to take into account, is it perhaps unable to exist there because it is underwater, because it's on too steep a slope, something like that.
So these really complex, expensive things to work out.
And then even then, when you finally get the position of that building, it's not in floating point accuracy, so you're going to have to move between multiple different spaces in order to get it. Then you can place the marker and then the player can fly towards it.
And I love that, like that is fun.
It means everything takes way longer than what you expect and it's a whole bunch of different problems, but it's cool, you know, at some point...
any game developer here must have hit that point where it's a bit like falling off a log every game that you make you kind of just doing the same things over and over again and this was new and different and exciting and now that we've done it like it gives us a great kind of power and capability going forward for other things that we can do you know if you're a company and you can generate an entire planet in like the press of a button in moments then it's so freeing in terms of what kind of games you can make and what kind of problems you can explore and stuff so I'm just going to click through some images and people have taken from the game I just kind of want to get across the diversity in the game at the moment.
These are all just from people who've played or taken screenshots.
So what's interesting about that, which I think there was a really diverse world, is that No Man's Sky is really big, but it's also really small.
It was a 2 gigabyte...
Steam download, but actually most of that was audio.
Another 200 megs was like pre-baked UI.
So everything that you saw there in those screenshots, because they don't show UI and audio, like that was generated in about 300 megs, right?
And that's super fun, like I find that super cool.
And like by contrast, when we uploaded for Steam, we had to upload our like, you know, XE, and that's two gigs, and our goddamn four gig banner.
PSD, you know.
So think like in terms of, there's a bunch of different unexplored areas or areas that are super cool right now in terms of procedural generation, like web games or things that you download, I think is super interesting.
So it's small, but it's also a game that was, it was played quite a lot.
So if you take, I'm just gonna talk about some of the games that I've worked on, so if you take Joe Danger, of which there were like.
for Joe Danger, right?
You take all the Joe Dangers and you put them all together.
We sold about a million copies of Joe Danger.
And it was played a lot.
It was really well liked and well reviewed and stuff like that.
But the total number of hours is like this, okay?
And then this makes me a bit sad.
So there was a game I worked on, Black, which sold really well, like exceptionally well.
And this is the total number of hours that Black was played for by comparison to Joe Danger, which is kind of annoying.
and you know having just come from there.
So before that and a bunch of time in between some of the team that I work with, we worked on Burnout.
So Burnout in particular, I'm taking Burnout 3 here, which was like probably the most played Burnout.
Really highly reviewed, sold incredibly well, and that's what that looks like.
and tons of total number of hours played and you're talking about roughly similar numbers of copies sold between black and burn out and uh... things like that uh...
black was a shorter game uh... so this is this is sort of depressing for Joe Danger uh... but no man's sky dwarfs them in terms of uh...
hours played And in fact, if you look at Steam and things like that, you know, compared to a lot of the big releases of the year, like Deus Ex or Far Cry or something like that, you know, No Man's Sky is, to my surprise, significantly above those, you know?
And he's, like I said, one of the most played games of the year.
And that, I think, and the reason I'm bringing that up is not some boast or something, it's because I think it is down to the diversity of the worlds.
And it's really interesting to me, the sheer amount of time that people can play for.
Like, we have a...
kind of scary number of people who've played for 100 hours or more.
Like so far beyond any other game that I've worked on.
And loads of people, like I'm not sure how to feel about this, who have played for a thousand hours, which is like the game has been out six months, it's like five hours a day, every day or something like that.
Except presumably it's like three solid weeks of not eating and not sleeping, or something like that instead.
And we were a super small team.
I probably harp on about this a lot, but I do it to give credit to the team that worked on it.
Like actually, if you average it out, there was only about six people working on the game.
You know, like as in average.
It was an incredibly small team, and that, you know, we are publisher and things like that, so that includes production, publishing, marketing, and all that, not that we're.
you know, very good with that kind of thing.
So that gives you a little bit of an overview of like the history of the game and my history and stuff like that.
So I wanted to get into the kind of like how we created that diversity.
And I'm going to pick one thing in particular.
So I wanted to talk about actually noise generation.
So this is a gross simplification, but basically we generate a whole bunch of noise, which is like the terrain and a bunch of other stuff, clouds and populations of stuff and things like that.
That all goes into some voxels, then we polygonize it, then that goes to render physics, population, that kind of thing.
Ines did a.
good talk earlier and it's way more complicated than that but I don't understand it all and no it's it's just just because I'm going to talk about the noise generation and so I'm going to talk about a bunch of different ways that I tried to solve this problem.
And the problem was creating diverse worlds that would surprise me when I'm playing and would kind of surprise anyone who played and keep them interested and meant that they could play for hundreds of hours and see something new, but also remained playable and also remained, like, predictable in a way in that I needed to know how much memory they were going to take and...
what kind of performance they would have and stuff like that.
So, my first attempt, this is like way back, five years ago, I just copied Minecraft.
That was quite popular at the time, to clone Minecraft.
So, by that I mean the same method as Minecraft users, which is trilinear filtered, kind of low density.
Perlin noise fields stacked on top of each other.
So I was actually, like, Notch has talked about this a bit, but at the time, what I did was I got Minecraft and I disassembled it, and then I named all the variables and I worked out how it was working, which is probably bad, but we didn't use it, so it's fine, and I can't be sued, right?
I hope, I think, I hope, right?
But yeah, it was really interesting.
And the reason I did that is because no one talks about this but Minecraft is amazing.
Like in terms of the worlds, like I think that is the secret.
And anyone who clones Minecraft, they always forget that and they end up with way less interesting worlds.
And I think it is the core of why Minecraft is so compelling, right?
And why it's been such a phenomenon.
Now the problem is we were polygonizing these worlds and we were making something that was more realistic.
And the thing that makes Minecraft really interesting is all this kind of terraced shape and makes it play really well.
And the reality is that when you put something realistic over that, it's like draping a cloth over that.
And these are low-density points.
on a Perlin noise field and then trilinear filtered off.
So effectively what you have is just a load of mounds and pyramids when you put that cloth over the top.
And actually it doesn't work in a realistic sense.
So it didn't play particularly well for us and actually you expect to see way, you know, instantly you want crevices, you want erosion, you want you know, you want this kind of thing, which is actually built in Minecraft.
But you want this kind of detail, this more realistic shapes and mountain shapes and things like that.
So I abandoned that and then I just tried something simpler, so just high density rather than low density, high density noise fields.
Straight kind of Perlin noise.
This is what Space Engine uses if you're used to that.
It's the classic image of a terrain sim.
I'll show you what I mean.
This is a render from Terrigen and this is Perlin noise.
I go through like people's CVs and demos and stuff like that when they apply and like this is the classic thing that you see which is just unaltered Perlin noise and it sort of looks like mountains but it also sort of doesn't.
I used to apply loads of image processing to this to pick out features, highlights, add more contrast, things like that, layer loads of things on top of each other and in some of our earlier like videos and demos and stuff like that we were...
using some of these methods but the worlds aren't that interesting and actually the real world isn't like this the features are extremely repetitive in Perlin noise and they also are unrealistic in that the slope, the gradient is reasonably constant and that's not what you see in the real world, in the real world you see sharp cliffs, you see way more distribution of noise which brings me on to the next thing that I tried So DEM data is digital elevation map data.
And you can just download it online.
And it's the real world, if you know, real world data just like captured, it's kind of what Google Maps and things like that, it's contour data from the real world captured at various points.
and I thought it would be cool and somebody else had already done it in Parbury way better than me but download this and actually extract data from it so parse like just take Utah or something like that right and then parse all the data from it and work out what's the rate of change of slopes and shapes and try and get some of that data out and then feed that back into noise generation.
Work out the distribution of shape change because I decided that the distribution of shape change in parallel noise isn't very realistic.
And these shots are taken from that.
paper in Parbury, which is a really good paper.
And his conclusion, and mine's the same, that noise in the real world is exponentially distributed.
And you'll see what I mean.
Okay, so this is normal Perlin noise, and then this is when you train Perlin noise basically on DM data.
So you get something that's much more realistic.
right and and this like if I had my time over like I would love to put more time into this this is such a rich area for investigation and it is however unfortunate the real world is super boring and so we would put this into our game and I don't know if anyone's ever been for a walk but it turns out walking in the real world is super boring.
I hadn't been, but I realized that playing the game, right?
Like, you walk for ages and nothing happens.
And so that's what was going on.
And I said that I'd used Utah, and I said it to my friend who lives in Utah, and he said, like, oh, you can, like, Utah's so flat sometimes that you can see the back of your own head, right?
So, but this is a video from that talk.
And you see, it looks awesome, it looks real.
And this is what you want, but you just want it at a different scale.
These are the kinds of shapes that we want, right?
But you can see, that is pretty boring.
Okay, so, I went from there to a thing called UberNoise.
I call it UberNoise.
And that's this kind of unifying method of noise generation.
So, the reality is all that experimentation before, and that happened over the course of about like, three or four years, informed what we needed and what we didn't.
what we wanted from this and what was possible and what was what makes something fun to play what doesn't what controllability we want and things like that okay so and I say over the course of four years like I can't explain this enough but No Man's Sky was such a small team in the majority of the time there's only a few programmers on it and Any one programmer like myself, we were doing a million different things.
So this would be like every once in a while I would get a week to work on this, or I would work on it in my spare time or something.
And so let me take you through some of the things that I'd used previously, and then I'm going to talk about how I kind of brought all those things together and what that leads to.
Okay, so here are the current noise methods that you see really commonly used.
Lots of different places use this.
So Perlin, Simplex, Billow, Ridge, Worley, analytical derivatives, domain warping, and I'm just gonna take you through a couple of those.
So, Perlin, this is what you've seen.
Everywhere this is that like and I don't mean to sound bad about it Perlin super amazing, right?
And Ken Perlin one is like Oscar for this and stuff like that and everyone still uses it and it's cool What's going on is basically that you are taking random noise, which looks like your TV when it's tuned to static, and it's just completely random noise, and then you're kind of creating gradients from that, and creating something that is more cohesive, and ultimately has this kind of shape, right, almost like a sine wave.
And...
But...
it is kind of cohesive and it is fractal.
So if you take fractional Brownian motion, you put multiple layers of this noise on top of each other at different amplitudes and differing frequencies.
And so you can imagine if you did that here, you would start to get something that looked much more mountainous.
But I'm just gonna go with one octave of noise.
But obviously you would use multiple, multiple octaves.
So below, so like this, this like, I'm embarrassed by this, but this is this graph, and then you just put in an abs, okay?
So you just abs everything that's underneath, and you get something that looks more like rounded hills.
So we want, sometimes as we're walking around the terrain, so when I talk about Uber Noise, sometimes you want it to look like this, and sometimes you want these nice round hills.
and kind of create rolling hills and uh...
like sharp creases and stuff like that so it's really simple so you just abs it as you go and then taking the complement of that so just one minus you start to get like like these really sharp ridges.
So you get ridge noise, which people talk about and use.
And actually, this does a disservice.
This obviously looks really simple, or it looks like.
kind of like Bart Simpson's hair or something like that.
But in real terms, if you do this in 3D and you do enough octaves, it looks super realistic.
And it's the kind of terrain sim noise that you've seen before.
Normally this would look genuinely like Alpine mountains.
If you've used Terrigen or something like that, or Worldbuilder, you see that kind of thing.
This, though...
This is the good stuff, right?
So this is really important. Anyone who's doing noise and who's not using this, like, you absolutely should, right?
So, what we want is to have our features change in relation to different octaves of noise.
Like, that's what happens in the real world. So, I'm gonna explain a thing, but it's probably really obvious.
we have this massive array of voxels, like billions of them, and we are gonna generate one voxel.
So we're just gonna pick an X, Y, Z position somewhere in the universe, and we are going to say, fill in this voxel.
And when you do that, you cannot, as part of that equation, you can never query the voxels round about you.
Because if you had to do that, to generate this voxel here, like in this world, to generate this one, you needed to ask this one what was in it, then that cascades, because to generate that one, you need to ask that one, to generate that one, and it goes on and on and on, and it's an intractable problem, right?
So because of that, it's really hard to have erosion, which is what you really want, because in order, it would be simple to have erosion if you knew that when you were generating a voxel, that it was on a mountain, or that it was high up or low down, or that it was perhaps at the bottom of like a lake or something like that, but you can't find that out because you can't ask any of the voxels around you.
And it seems like this almost unsolvable problem, and it's a real problem if you're generating caves, or you're generating erosion, or you're generating rivers, because one feature needs to flow into another, and it needs context, and you can't get that context.
But what you can guess is the...
derivative, if you had that, then you would know the rate of change of noise at that point.
When you have that, you know that you are on a slope, or you're on a flat, or you're trending upwards or downwards.
And if you have that knowledge, and you can return from Perlin Noise the analytical derivative, then you're going to be able to have certain features.
much more prominent on slopes, so you can make them much more noisy or much less noisy.
You know, if you were in a desert, then slopes are very smooth.
If you were, you know, in the Alps or something like that, then slopes are very, very craggy and noisy.
And that's exactly what we need.
And it's kind of, it's an awesome trick, and once you have that...
then there are so many things that you're unable to do.
We also, from this UberNoise function, we need the analytical derivative returned from UberNoise.
So even after it's calculated, all this billow and stuff like that and ridge, we need to know that analytical derivative so that we can feed it in further to other things.
And I'm just gonna shout these out because this site's IQ, who probably everyone knows who works in.
It works at Noise, it used to work at Pixar, and is now at Oculus, I think, and runs a Patreon, whichever one's your sponsor.
These sites explain this far better than I do.
And I actually am about to steal some images from those sites, so don't sue me for that, because they lay it out really well.
Here's an example.
This is what like...
kind of normal, boring, repetitive Perlin noise looks like.
But then if we feed in the derivative, we can start maybe smoothing out some of the slopes.
Having little pockets of detail in there.
And this looks, I hope that's obvious, but it's really obvious when you're down in amongst this, playing the game, is way more interesting and is way more realistic.
And gives way more variety, and this is the kind of thing we want.
When I'm talking about this, by the way, I'm going to talk about it as if we're generating one layer of noise, but like, in No Man's Sky we generate so many layers of noise.
Like layers upon layers, and each one feeds into the next, into the next, into the next.
So the other thing I'm going to talk about, and I'm going to steal some images here as well, is domain warping.
This is super cool.
And this is basically distorting the domain of the noise that we're generating with another function.
And often feeding noise into itself in kind of successive octaves.
So this is a little snippet.
This is what normal Perlin noise looks like.
So let's feed in another function, warp it, and you start to get something that looks a bit more realistic.
I don't know if that's obvious, like, I've looked at this for so long that that's really obvious to me.
But I'll try and show you. So let's do that again.
And now, hopefully you can see, that looks a little bit more like an aerial photograph of some terrain.
And in case that's not obvious, here it is blown up.
And you can start to see things that look maybe like rivers and things like that.
We actually use this to create our coastlines, our rivers, and also if you look really closely you can kind of see shapes look like they're flowing into one another.
It's kind of like, you can see why it's called warping.
You're just warping the image.
IQ has an awesome image on his site where he has colorized these.
And I think I could easily be looking at an aerial photograph of some terrain, right?
Like, if I just flick to some real terrain, like this is real terrain.
Real terrain's really fractally, right?
Like it's so, you know.
It's awesome.
But just going back and forth between them, you can see really similar kind of shapes evolving.
And like with this, if you were to start filling this with water, if you imagine water coming up from this, that you would see all those little cracks start to fill in and you would get little rivers.
You can see some of them up in the kind of top right and stuff.
And that looks really nice and starts to not look like, you know, kind of a classic terrain sim at all.
So, what we want from our UberNoise is we want domain warping, like I just explained.
We want erosion on our slopes, we want control over altitude erosion, we want ridges, plateaus, terraces, rolling hills, we want non-repeating features, and we want an analytical derivative returned at the end of it so we can go and feed that into more layers of UberNoise.
And this is kind of how, this is the function for how.
terrains are generated in No Man's Sky.
So this is the function that we want, right?
We want each of these to be a little individual control and in case it's not obvious you would take yet more noise over the top.
and generate these floating point values.
So you're going to vary the warp over time or the sharpness or the amplification of features or whatever.
Which gives really varied features as you walk around.
So sharpness is really easy.
That's just like I explained before.
Just getting your ridge and your billowed noise.
and then just kind of blending between them. So now instead of just being binary we can just blend between them.
Slope erosion, just like we were talking about before, again this is where you're going to be able to control the amount of noise and kind of detail on your slopes.
You also have altitude damping, so things that you want to do sometimes is you want to have like a basin that flattens out or maybe some, you know, kind of like you would guess in I guess, erosion that comes, like, because you have various different types of erosion.
And a lot of these can be used to mimic that.
So you can have tectonic erosion or glacial erosion.
You get these more smooth shapes coming in sometimes.
And what you're doing is you're varying the amplitude based on the derivative.
We're gonna perturb the domain, so like domain warping, those are gonna create our nice little flows of rivers and things.
and amplifying some features.
And this is really simple and it drives me crazy that I didn't think of this earlier and I didn't work on it more.
As you go between octaves, The lesson that I learned from the exponentially distributed noise, a really nice trick is to have different emphasis on different octaves of your noise.
And to have certain features really stand out and damp down certain features.
It creates... So, like, a really nice trick is to have your first octave not actually be that prominent, because that's what's giving you these really repetitive sequences of mountains.
Varying that makes a huge difference.
Having some of the lower octaves have more impact.
Now that's an area where we could have, and we didn't, where we could have taken the learning from exponential distributed noise, take some DEM data and start feeding it into this, and have every octave have a different kind of emphasis as we go through the terrain.
So I'm going to show you some images.
And these are just, I just screenshot of these a minute ago.
But just booted up on a planet and flew around and took some pictures.
Okay, so you can start to see some of the features that you're getting involving.
So when you have 3D noise, you're also getting at the sides, you can see sheer cliffs sometimes, and other times not.
Really round shapes sometimes.
So that's coming from our amplification of features sometimes.
and also I'm talking about noise as if it's being generated in 2D the reality is we mix 2D and 3D a lot so that's why you get these kind of overhangs and that's something that a lot of kind of demos that you see like of planet generation and things like that they're in 2D and and two-dimensional generations, a generation of height fields, is so much easier because literally, you go from having to generate millions of voxels to having to generate billions of voxels.
But it's worth it to get caves and overhangs, and we needed that because otherwise the terrains aren't interesting enough.
And the real core part of exploration is to have those shapes, to have...
these non-smooth shapes and to have things like cliff edges and stuff like that.
So here you're seeing that domain warping, you're seeing that kind of snake through, and a huge differentiation in noises there, where you're not seeing those repeating hills, right?
You're seeing massive hills sometimes, other times not.
And we have, you know, kilometer, two kilometer high mountains sometimes, each with like little caves inside them and things.
These overhangs again are super cool. I haven't really talked about caves, but caves is a super difficult problem, much like the erosion was, because you need to know when you generate the cave how are you going to break through so that it actually has a hole that comes out when you generate that hole. Because remember that when you're generating any voxel, you cannot know about the voxels around it. To generate that cave and to generate it breaking through the terrain is a difficult problem.
This is a nice image.
So this is just actually, I happen to know, is one layer of noise.
So this is just one layer of Uber noise.
And you're seeing so many different things going on there.
So down in the bottom, that's domain warping that's giving you those nice shapes.
If you were to fill that in with water, you would get really nice little rivers and things going through.
You're seeing steep cliffs, and then at time round edges.
You're seeing in the far distance a real change in terms of like heights of mountains and things like that.
And actually their shapes are changing.
I don't know if that's obvious, if you can make that out.
They're going between quite round to starting to be quite sheer.
And this is one of the things that I think really works in No Man's Sky.
One of the reasons why people play it for so long is because we get it all the time.
We get people saying, I played for a hundred hours and then I landed on this planet and it looked like something I hadn't seen before.
And so I think that's cool, that's interesting.
And people know because they know they haven't seen it before that it's different.
It gives a real sense of exploration.
It's important to the game.
Okay, there's loads of stuff that I haven't talked about that if I didn't hate talking to you all that I would love to talk about some time in the future so if people want to ask me about it, they can.
Creating SDFs, maintaining that, that's a difficult problem.
Caves, features, terraces, erosion flowing into rivers.
And the really difficult one is noise is very unpredictable and non-evenly distributed.
and okay so let's go through this real quickly, I'm probably running out of time so I wanted to talk about how difficult it was to build this and to test this So, we're talking about testing the untestable, right?
An infinite number of planets and permutations, you can't possibly test them all.
You've got limited memory and performance.
Every player, I mean, think about what a nightmare this is.
Every player is going to boot up into a different star system and have different memory requirements.
And we can't know.
Like, we cannot know.
We can guess.
We can use heuristics.
What we did in the end was...
flying little drones out, you know, effectively.
We had a smoke test and that would run and it would return how the overall performance of the game was doing after every check-in.
And it would also, like, send back info, right?
And we could just do it by numbers, but we can't possibly.
test every single permutation.
So we tried to generally fire out about as many and run as much tests and stuff like that, test as much as we could to the kinds of numbers of players that we thought we were going to have.
So we were trying to guess how many players that we would have.
So we kind of looked at what was out there at the moment.
So we were looking at like the two previous games that had come out on Steam, right?
that we had no better way of doing it, right?
So Inside was an indie game, we're an indie game.
It felt like everyone was playing it when it came out.
It is an awesome game.
They beat us at every awards.
They deserve us.
It's beautiful.
So they had had about 3,000 players concurrently.
That's kind of where I thought we would be.
But Sony would occasionally say to us, like, well, this is kind of a triple A type product.
And so we were looking at things like Far Cry.
So this was like the game that had just come out.
It's a huge game obviously, I love Far Cry.
So they'd had like 14,000 players, max concurrent.
And we kind of, that made us feel a little bit nervous in terms of our servers and the amount of people, sheer number of people booting up day one.
You know, like 14,000 people are gonna play, are we testing it to that degree?
We had more players than we expected.
So we had around 250,000 when it launched on PC.
But the other problem, which is a lot, and the other problem was that people were still playing on PS4 when we launched.
So at the time of launch of PC, there was around 500,000 people playing.
Which is difficult when they are all booting up on planets that you haven't been to.
And it's extremely nerve-wracking.
And when, like, the networking team...
who is handling the uploads and connection to the server.
He's like one guy, and it's only one of his jobs.
And we had like half a billion discoveries uploaded.
It was like insane numbers that we were dealing with.
But it was super fun, and it's a super interesting thing to do.
When we launched, we had.
about 1% of players on PC having crashes in terms of crash dumps that we were getting and stuff like that.
Most of those were people operating at a min spec, but there was a bunch of things in terms of like as you would guess, memory and stuff like that. It was pretty much on par with games that I've released before, so games like Burnout and stuff like that, but we were just operating at a different scale.
It was far beyond what I'd experienced before in terms of people playing a game kind of thing.
and by the time foundation came out which was our update and we had far far fewer so it was about .01 percent and we had about a million people playing on the day that foundation released and a really small number of kind of crash dumps from that and again most of that was just playing outside of min spec and things like that and but we've kind of learned that lesson a thing that that is a little bit crazy is to fix some of the bugs but also because we wanted to really embellish the worlds that we had and we rebuilt the universe which meant just doing it all over again and so rebuilding the universe, resetting all the players So no matter what you're doing in the game, we've got to take you and place you somewhere safe.
Maybe you're just repairing your ship, maybe you're just about to get to crash ship or you're in the middle of a battle or whatever and you've saved your game.
We have to sort you out even though the entire universe has changed.
And that's a fun thing, when you know that people are going to update and just go through a million different edge cases.
But it's a really unique game and there's, like I said, unique problems that come with it.
But that's something that we're going to keep on doing is actually continuing to work on this terrain.
And it's something that people can't quite put their finger on.
So with the Foundation update, something we kept hearing was that the game feels a little bit more epic, or that there's a different feel to it, and that...
is the terrain. I know because when our changes went in, everyone on the team started saying it.
And it's hard to put your finger on exactly why, but you know that you're visiting more interesting places and things you haven't seen before. And that's something we're going to keep doing. Which is fun and scary and a very unique problem. Most people don't update their game and have every level change entirely in construct kind of thing. It's weird. So yeah.
The thing I wanted to say is that we're hiring.
This is, I guess I know that procedural generation will be a small part of games in the future.
I mean, loads of the talks at GDC, whether it was Horizon or Wildland, were talking about procedural generation components to their games.
Super cool.
For us, it is a big part of our future.
And making really unique, weird engine decisions, and then allowing that to dictate a cascade of problems, it's cool for me to be able to stand up and say to talented people like yourselves that we're looking for that kind of thing.
And we want to continue going forward making new impactful technology.
We know how hard it is to make games.
I personally, you know, had to break into the industry and that was hard.
Then I worked on some AAA games and that was really hard. That was like the hardest thing I'd done in my life and so stressful, something that you care about so creatively, to work on it and to finish it. It's a really intense experience. Then I started a company.
and had the additional bonus of running out of money and having to finish under those horrible constraints and making sometimes bad decisions, sometimes good decisions because you have to because of money constraints and funds and things like that.
And then I know what it's like on top of that with No Man's Sky to do something new and weird and experimental on top.
of, you know, also running out of money and also trying to finish something you care about really creatively.
So if you are, like, interested in working on stuff like that, then great.
But let's say you're interested in working on that kind of thing, but you also want to start up and do your own thing, then we're going to try and help with that a little bit as well.
So we're starting this thing, it's super low-key at the moment, but it's HelloLabs.
And we're going to try and fund and support a couple of projects.
We've won already in development.
And the focus is going to be on procedural generation.
And kind of experimental games.
Games research, that kind of thing.
More details will follow, but if you were there and this is the kind of area that you're interested in, we would love to help people.
avoid some of the pains that we went through ourselves, kind of thing.
It's something I care really passionately about.
So, that's my talk.
If you're interested, come and mail me.
flew in, I now run and fly out.
I'm not doing questions and stuff like that, but you've got the email addresses, and I will hopefully try and be out in one of the break rooms later if people have questions and stuff.
And I'll let everyone leave, finish up their GDC day.
I'm sure you're sick of people talking.
Thank you.
