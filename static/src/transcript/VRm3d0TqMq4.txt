So, hello, everyone. Thank you for coming.
I'm Robbie van Storm, and I'm here to talk about improving tool design through Editor Triage.
Now, who I am in a quick nutshell.
So, I'm from the Netherlands.
I used to be a game and level designer.
I worked at Ximion, Team 6, through games.
I worked on all kinds of titles like racing games, to shooters, to puzzle games, to platformers, which the most well-known I was probably through.
I noticed during all that work that sort of time and money was being wasted by missing UX and UI solutions and level editors, and I couldn't see anybody else doing anything about it at the time, so I decided to do something about it myself.
I decided to do something about it myself, and I became a freelance tool designer.
I've done QA and UX design for Realtime CSG and Saber CSG, which are two level editors on the Unity Asset Store.
Now, I did a talk also at GDC about improving level editors last year, after which I got hired by IEO Interactive.
And I'm now there as a full-time tools designer.
Now, so I gave that talk, I compared Source, Unreal, Unity, 3ds Max, and the Creation Kit, and I showed the good and bad sides of the UX that they contain.
And if you want to watch it later, I linked it on Twitter, so you can grab it there.
There's no need for vault access, it's on YouTube, and my handle is at rystorm.
But I'll give a quick overview for those who did not see that talk yet.
So here's how good tools can save time, save money, and improve the quality of your games at the same time.
Your tool's health affects your developer's probable work quality output.
I'm not saying tools are a replacement of developer skill.
They are both important.
For example, if your developers are good and your tools are OK, you get a times one modifier on the quality your developers can output.
But if your tools work slowly or have many issues, or they're just sort of like lagging a lot, you might get a modifier of times 0.5, in which case you need to hire many more expensive and hard to find designers to make sure that you can make something great.
But if your tools are fast and deep enough, you might even get a modifier of times 2, which means that your developers' qualities are amplified to make your games an even higher quality.
And this is not some kind of new idea, of course.
For example, in 2010, Jim Brown, a designer at Epic Games, gave an example of what happens when you improve tools even a little bit.
So in this case, 2.4 minutes a day times 100 employees, four hours a day, 20 hours a week, becomes one year of your time on a project.
So fixing small things is a big deal.
So producers, this is something important to look at if your developers are not doing it yet.
And level designers, there's your facts to push change.
So the talk was very well received, and it even hit YouTube.
I'm really happy about it.
But one question kept on coming up, which is I cannot hire 10 more tool programmers.
What techniques can I use to solve these level editor UX problems quickly, cheaply, and efficiently?
Now, instead of looking at the programmers, I looked at the designers.
And that is where tool triage comes in.
Tool triage is how you make sure the correct features get created and worked on for your team and project.
For definition, triage is a process for sorting injured people into groups based on their need for, or likely benefit from, immediate medical treatment.
Now, we too, as developers, have to allocate limited resources and still get incredible results.
But are game developers actually triaging their tools?
And if so, how are they doing it?
And what contingencies did these methods have?
And so to answer these questions, I went around the game industry in the last years And I talked to experienced developers who work or have worked at many different companies to find out what kind of triage processes they've personally used or witnessed.
And every single person that I've talked to has seen or used different ways to triage tools, but are unaware of what other developers are doing.
It looked like a mostly silent topic.
Now, these are developers from all over the place.
So all these logos are just to quickly identify how broad this research was.
It does not mean that any of these opinions in this talk are part of these companies, much like what you read in a lot of Twitter bios.
I talked to them, and they represented themselves.
Now, of course, some people were happy to represent themselves.
For the sake of simplicity, I'm just going to say no one did.
And also, for some companies, such as Guerrilla, I did not talk to developers there, but their developers talked publicly about their systems in interviews, podcasts, or GDC talks.
Now, in the end, I found many different ways that many different companies do their tool triage.
But I'm not going to say what is the best objective way to do it.
And the reason for that is the variables.
So many variables count when working to make tool triage better.
It's company culture, country culture, production methods, publisher relations, deadlines, communication structures, hiring practices, etc.
For example, on the last one, hiring practices can affect what to do when it comes to tool triage.
How many people are let go and hired affects that a lot.
Like for example, if you hire and let go only two or three people per year and have your developers in a company for 15 plus years working with tools that have been iterated on for 30 years, then doing a tool triage method that rapidly changes things a lot is probably not a good idea, it's gonna cost time.
But if you have a huge amount of studios all over the world with hundreds of developers coming in and out every year, of course, they need to find a tool triage approach that makes sure you can change things fast and make things work directly when they join your company.
And also, a thing is culture.
Not just company culture, but country culture.
Different cultures have different ways of bringing up new ideas.
For example, in the Netherlands, we can be very direct when talking about or accepting or declining ideas.
We'll just say no.
In the US, there could be a lot of talking to soften the blow of an idea not being accepted.
Americans might say, that's interesting.
It means the exact same thing.
So this also shapes the way tool triage works at your company.
There's no one size fits all approach.
As with anything UX-related, it depends on your target audience.
In this case, your target audience is your developers.
You probably know them best.
So you know what works for you.
Now, there's a couple of problems to consider.
No approach is perfect, but these were the problems most developers ran into when using any kind of tool triage.
So let's go through them before we talk about the actual solutions so we know what we have to solve.
First is time and money investment.
Some approaches worked, but they're very time intensive and money intensive to get a good return on investment.
Canvassing and politics.
Canvassing apolitics can create suboptimal solutions or compromises.
If you have a flat hierarchy or an approach where anyone can triage, you might not get the best solution because some people are simply better at social constructs than others.
A quiet person who does not talk a lot may have the best idea, but be shouted down by someone who's way better at canvassing their ideas, while those ideas may not necessarily be as good.
Join multidisciplinary teams can create huge time investments.
If you have all kinds of disciplines talking to each other on a set time interval, you will lose time and simply due to having to communicate between them.
Programmers, designers, artists, et cetera, they all have different ways of thinking and different ways of talking.
If you put those together and try to make them find a solution, you might get there, you might get not, but you'll be spending a lot of time.
Set special meetings.
Special meetings are kind of annoying for everyone.
Nobody likes to have a lot of meetings.
So if you're using an approach that makes it like you have to do particular meetings every week, like every month, it might not be the best idea.
Communication between non-physical teams.
Communication between non-physical teams will be neglected over time.
I mean, human beings are used to communicating with those in their physical circle.
So if there's a barrier of entry, such as technology or time zones between teams, then that communication will be very clear at first, but sort of deteriorate over time, or maybe even just stop outright.
a faceless system.
If it's not clear who is assigning what is happening with the tools in editor, then there's a faceless system, which makes it very difficult for users to know where to request a kind of feature or something that they want, or who to talk to about problems they're having.
Having a person, a team, or even just an email address that can help give a face to where you can go to if you have tool problems can really be awesome for people.
A person, so in the constant change, a person to physically go to is better than a faceless system and a faceless system is still better than constant change.
Now this is something that most people are actually doing, which is that multiple people or different people over time are deciding what to do.
This changing of the guard creates a layer cake of different ideas and concept over time, which is very unhealthy for tools.
Because tools need to work in such a way that they complement each other, that the UI and UX are the same.
So if a different person is doing the tool designs or the tool triage over every month there's a different person, the end result will not mesh together as well.
Mid and low priority items.
You will almost never get to mid and low priority items.
The high priority items will keep on piling up, and you'll have to continually fix those.
If you're using an approach that constantly creates a list of high, medium, and low priority items, then it can be safe to assume you'll never get to mid and low.
Having a time investment to make these lists might actually be wasting your time and money.
You might as well be doing something that quickly gets rid of those.
And also, it means that programmers are constantly seeing these useless items going higher and higher and higher.
And they see how much they are behind.
And it just feels bad, because they know they can't reach those.
OK.
So those are the problems to consider.
And I shorted them a little bit and added some info as well.
So at the bottom, I have big team, medium team, and small team.
So what that means is, is this approach viable for a big team, a small team, or a medium team?
Now, let's get into the meat of the talk.
What are these different methods?
And what are the pros and cons of these methods?
So the Ticket to Moscow approach.
So this is an approach used by many companies.
It's really kind of the basic approach.
So this one can have big time investments, can have multi-teams, special meetings, constant change, and fail to reach mid or low priority items, but can fit any size team.
So in this case, anyone can submit tickets, and they're gathered in one place.
The tickets then undergo the Moscow method of must have, should have, could have, would have to figure out low and high priority.
Now, of course, a large amount of other priority calculation methods can be used as well, but in the tool programmer, simply implement high to low.
But the thing is, again, you'll never reach low priority, and high keeps piling up.
And it's difficult to find out who performs this priority check.
Is it the users?
Is it the tool programmers?
Is it some kind of different team?
So it's very time consuming to get those people together to do checks if you have a bunch of them.
Another approach is the programmer checkup approach.
This is used by two companies that I talked to.
So this one can have big time investments, requires special meetings, and can have constant change, but it can fit any size team.
So in this case, you have weekly or monthly meetings, and the tool programmers and level designers meet together.
They then go through the levels in editor.
So in this case, the tool programmers can check on how things are built using their tool set inside the editor.
So then they can discuss what can be done more efficiently.
Like, for example, show different approaches the user might not have heard of.
Like a level designer shows how they built a thing, or shows something in the editor, and the tool programmer goes, actually, I have a way better way of doing this, but you've got to go in this menu down here to this thing, and then there's a thing over here that makes you do that.
They might not know.
This is a good way to find that out.
And the level designers can also discuss what's difficult to create and difficult to maintain.
There might be specific sections of a level that are really hard to constantly redo and redo because it constantly keeps breaking.
Now they can talk face to face and solve these problems.
So it's sort of in-person triage.
The design by committee approach.
Now this one is used by one company that I talked to.
This one can have big time investments, can have multi-teams, special meetings, constant change, and fail to reach a lot of priority items, but again, could fit any size team.
So in this case, any requests that the users have go to a committee first.
And this committee can be made up of whoever is necessary.
Could be leads of the project, producers of the project, key tool users and programmers.
whatever works for you.
And this committee decides which requests go to the tool programmers.
Now, design by committee has a tendency to come up with an average of solutions that are the best solutions.
And anyone on the committee needs to have knowledge of their entire department, if they're the leader of them, to make accurate decisions.
And of course, it can be slow, depending on how many times the committee meets.
So if there's a huge problem right now, you might only come to it and talk about it when the meeting between these people happens.
The in-the-room approach.
This one was used by one company I talked to.
So in this case, you can have big time investments, can have multi-teams, constant change, and it can fit medium and small teams.
In this case, one level designer is put into the tool programmer's room, or area for open floor plans, or Slack chat channel for online teams.
So if the tool programmer has questions, problems, or any just curiosity for the level designer, they can discuss with that level designer right away.
So solutions are brought up, accepted, or discarded face to face.
Now of course, the user has to know their user base and not make personal decisions.
So you have to find the right person.
And time is saved as no meetings are scheduled and communication is instant.
But it has to be done for all user bases if you want to do this not just for level designers, but for other people as well, like modelers, lighting, any other kind of tool users.
And of course, it can also be reversed by putting a tool programmer in a user department for a month or two so that they come back to the tool programmers and talk to the tool programmers in their own language, talking to each other in a way that they both understand.
The point assignment approach.
This one is used by two companies I talked to.
This one can suffer from politics, non-physical communication.
It could be a faceless system and fail to reach mid and low priority items.
But the really best fit of this is really big teams.
So in this case, every level designer gets a limited amount of points.
And when suggesting features, level designers spend those points.
So suggestions have to be balanced by the suggester.
But this can result in really difficult and time-consuming programming tasks.
But it works well if there are many features in contention.
If you have a lot of features, a lot of people want a lot of things, you can give the limited points and find out the best stuff.
But it can feel like you waste your votes if you don't vote on one of the two big things.
It could feel like your voice isn't heard if you're one of many.
So, and of course, users might not have the best idea on what features to make.
There's the age old quote that apparently isn't actually a quote of Henry Ford asking people what they wanted and they asked for faster horses, he made a car.
Your users might not always know what the best thing is for them.
The brute force approach.
Now this one was used by two companies.
Now, this one can have big time investments, can suffer from politics, constant change, but can work well with small team sizes.
In this case, you hire only the best of the best, just 15 plus years of experience only.
And there's no pipeline for triage.
You just keep the teams or the decision makers very small and give them almost unlimited time to just figure things out.
Now, in this case, developers are experienced enough to take decisions themselves.
But of course, this is heavily limited to the amount of funding and time available.
And of course, the loudest voice could win.
So the great ideas might not be implemented due to canvassing.
the dedicated QA team approach.
So this one was used by two companies I talked to.
This one can have big time investments, can have multi-teams, can sometimes become a faceless system.
It can face constant change, but can work well with really big teams.
So in this case, a separate QA team is created.
And tool updates are not pushed until QA verifies them.
So this prevents bugs from being rolled out.
But if these people also know a little bit about UX UI, they can also see what is easily reachable and what is not reachable.
So in this case, they can make sure features are well-rounded before use.
But it costs considerable time and money to maintain.
the command center approach.
So this one was used by three companies.
This one can have big time investments, suffer from politics and non-physical teams, and fail to reach mid and low priority items, but fits big teams.
So in this case, multiple studios are using the same engine and tools.
And especially if multiple game genres are being made on the same code basis, works really well.
In this case, there's a single location and team of tool programmers, and all feature requests go to that location.
Then the team works together to implement features.
And such a team can also help other first-party developers, like, for example, the ICE team at Naughty Dog does, if I recall correct.
Now, this can be, of course, be adapted to multiple locations as well.
And there's consistent communication.
And if feature requests are similar between studios, you can simply copy and paste the same solutions, because they all work with the same tools.
But it can be difficult to figure out which parts to keep and cut.
Who makes that decision?
And it's, of course, never as easy as just copy pasting.
There might be specific things they want.
But a command center can help to make merges clear, so we know exactly like these people decide in this location.
The DIY approach.
So this one was used by two companies.
So this one can have big time and money investment and constant change, but it can fit any size team.
So in this case, you create a powerful scripting language, and you make it easy enough for non-programmers to use.
then your users implement features themselves.
And the features, so the features depend on how much users are willing to work for them.
And the user can also prototype these features and then make it so that if it's really awesome and everyone likes it, a tool programmer can make it to a fully-fledged feature.
But the backbone of this is really good hiring practices.
And of course, it's difficult to find enough capable devs that can apply, that can do these kinds of things.
the focus approach.
This one was used by one company.
This one can have big time investments, suffer from politics, constant change, and fail to reach mid and low priority items, but can fit big and medium teams.
So in this case, requests come in through JIRA or just word of mouth, and then the tool programmers are asked what they like to work on.
Now, work on that request, bug, or issue can be short or long, sometimes even like six months long.
But that tool programmer that's working at knows the context very well.
And that person is then the contact point for any features or requests that are clear to that.
So there's a personal communication point.
But of course, it's completely not agile at all.
And again, smaller issues will pile up.
The Indie approach.
So this one was used by two companies.
This one can have big time investments, non-physical communication, constant change, and fail to reach mid and low priority items, but it can fit small teams.
So in this case, you have a single programmer.
You create a list of requests.
You go through them to find the severity of the problem versus time of implementation.
You do progressive releases, so you sort of find out what is currently necessary.
You keep continual communication with users, so Slack, email, or Twitter.
But there's large differences in qualitative and quantitative feedback.
I mean, big UX issues will be brought up by our users, but the small issues maybe not as much, so you won't know exactly what to fix.
And you sort of have to make it up as you go along, which might not be the best way of doing things.
the double prioritization approach.
So this one was used by one company I talked to.
So this one can suffer from politics, can feel like a faceless system.
There's a constant change, and you can fail to reach mid and low priority items.
But it can fit big and medium-sized teams.
So in this case, requests are submitted by users, and the user states benefit with numbers, like one to five.
And for a request, I go to the tool programmer, and the tool programmer states the cost again with numbers one to five.
For example, if it ends up three to three, it goes into the backlog.
But if it's low cost, good benefit, like five to one, we're going to implement it right away.
The problem here is though, is that cost and benefit may change over time, depending on how the project progresses.
Maybe big things change.
That happens in game development.
So then it's hard to make an automatic system that goes through them like the old ones and sort of reassesses them and see what has changed and do we still need these features.
The tool designer approach.
This one was used by two companies.
So this one comparatively has less time investment as you hire a person to take these tasks on them, but there is the monetary investment of hiring a new person.
So in this case, any and all features can be requested at any time, and the tool designer or tool designer team looks through all of them.
The tool designer then continuously communicates with all departments, artists, game designers, level designers, producers, engine programmers, tool programmers.
So the tool designer decides to remove, change, but also approve or combine.
If there's multiple things that people are suggesting, that person knows, oh, this person requested this, this person requested this.
Actually, we can solve this with one feature that covers all of these things.
So the tool designer is a sieve in this case.
It slows down the process but removes unnecessary items and makes them digestible.
Now, so in this case, tool programmers do not need to think about what it looks like or how it works.
It's about how it works.
But it can be difficult to find a good tool designer because you need to have a person that has the wide experiences over all those areas.
Now, mind that this should be a permanent position.
Not someone to just put into this role for a few months and then a person is pulled off again.
Because again, the changing of the guard.
Otherwise, you're going to have that layer cake problem again.
And of course, it's going to be difficult for people to actually find that person.
Who is currently the tool designer?
Who do I talk to about issues that I'm having?
Now personally, this is the approach I would recommend simply because it solves the issues that most people are having.
It has the least concurrent issues.
It's hard to find one, but if you can find one, I would say go for it.
It will certainly help you out in the long run.
And if this approach sounds interesting, go buy that book.
It will help you immensely.
David Lightbound, the guy who wrote this, is also in the audience around here.
He's right there, so go talk to him if this sounds interesting to you.
And this book is also available in the GDC store.
So go take a look at it.
It's really good.
So those are all the approaches that I found.
But of course, there's other ones out there as well.
For example, the one that I use at IOI is a combination.
I am a tool designer, but I also do in the room.
I move my desk to whoever currently needs my help.
So for example, I'm currently sitting with level designers to improve their system.
Now, the reason I'm doing that is because I can then overhear what people are saying.
Sometimes there's an issue and they don't know who to talk to or they are afraid to talk about it, but I overhear it and I go, hey, I can help out with that.
And we also use the focus system.
So there's a specific tool programmer working on specific issues.
So in this case, also for me, I know exactly who to talk to if there's a specific problem somewhere.
And of course, you can make your own combinations.
So for example, the tool designer plus a command center, meaning you have multiple teams or studios, but a single tool designer and tool programmer team.
Or the committee and in-the-room approach, where a committee of leads decide which team members should sit with who for a set time to figure out issues with tools.
Or the point assignment approach plus the double prioritization approach by giving the level designers and the tool programmers both points to spend on what they think is important and what they think can be done.
Or some other combination or something new.
I mean, this is only what I've been able to research in a year for those who are willing to talk about it.
I mean, who knows what else is out there?
And every team, of course, tries to make their own way.
So, of course, you need to find out what works best for your team.
How?
Again.
Company culture, country culture, production methods, publisher relations, these are the problems most people run into.
So which ones of these are a problem for you?
Or which ones don't you care about?
Maybe you have a lot of money and a lot of time on your hands, and you can do the brute force system.
Or maybe you don't.
Maybe there's other things you care about.
But the core is this, finding an effective filter is key to good tool triage.
You need to find out for yourself what works for your team.
And be critical about this approach.
Change it if it happens to not work in your specific team.
This is your team.
You can save your team time and headaches.
You want to hire the best, you want to give them the best office environment, so make that effort to give your level designers the best tools and level editors that they could have, because it's possible.
Thank you very much.
I'd like to give thanks to these people for feedback and helping out.
It's awesome.
And also, this talk was about tool triage.
But I'm also doing two roundtables about tool triage on Wednesday and Thursday.
And we will discuss these approaches and discuss what problems you have been having.
Come talk to us.
It's an hour long.
We can talk about it and see what works for everyone.
So if you're in the audience here, you're a level designer, you think, wow, these problems is what we're having.
I'd love to have better tools, but I don't really have the power to change things.
Cool, send your producers, send your executives to these roundtables.
I have the figures.
I'll talk to them and convince them that these are really good things you guys probably need.
All right, are there any questions?
Yes.
One question.
You didn't mention anything about narrative tools.
Would you view them as the same treatment as level design tools?
Just from experience, a lot of narrative design tools, quest design tools in general, seem to be a very overlooked part of game design and they happen very late and then it's very, you know, it's always a difficult situation there.
I would say, yeah, the same approaches.
Especially in this case, I'm also doing some, looking at the narrative tools at IO Interactive.
And it's really a thing of, if you have a person doing this, if you have a tools designer, they are communicating with all these teams.
So in this case, they know that the narrative team is having a problem with the tool.
So if they're then in a production talk somewhere, they can go, actually, we might be overlooking this thing right here, because there's not a narrative person in the room.
But I know about it, so we should probably look into this, because they can find out, like, is this a thing we currently need?
Is this a thing we do in the future?
Could it be part of the level design editor kit?
Like, do we need to combine these things?
So definitely say, like, all these different kinds of tools.
whatever works for you and your team, but in this case, the tool designer can look at all these things and make something that works in this case.
Does that answer your question?
Yeah, that's great, thanks.
All right, thanks.
I have a pretty simple question, but I was curious, since everything's sort of framed with big team, medium team, small team, I was just curious, what you consider the thresholds of each of them, like how many people would you consider a small team, medium team, et cetera?
So for big teams, I would say like 300, 400 plus.
Like you have a lot of people.
For medium teams, I would say about like 100.
And for small teams, I would say about 10 to 15.
But of course, this also goes with the teams within teams.
I'm not saying company.
I'm saying specifically team.
If you have a really big company, but working with small teams, that's sort of what I mean.
Like you can use one of those approaches that fits the small teams.
Any other questions?
Well, I did tweet out that anyone who would come would get a stroopwafel, so I have a couple of them here.
If you like them, come and get them.
Also, don't forget to fill in your forms at the end.
So, thank you very much.
