OK, thank you, Squirrel.
I feel like I'm really lucky each time I get to come to GDC.
And I hope that what we have here, I think, maybe will open your eyes to some more ways that you can do things and give you some ideas about how we might be able to do some indexing of our spaces.
And what I'm going to start out is just a high-level overview.
What do I expect you to get from this talk?
And so there's a set of assumptions here.
And then we're going to get into the technical details.
So, the first assumption is that there's a lot of design problems that we see in games that are underlying, can be modeled as combinations or permutations.
So that's our first assumption.
And the second assumption is that for many of these problems, being able to do some precomputation can really help us solve the questions that we're trying to answer.
And if I'm doing that sort of computation, then what I want is a perfect hash function, because this will allow me to do a direct mapping from these permutations to an efficient use of memory, where I don't need to use chaining or other things in my hash tables.
It's just a one-to-one mapping from my combination to some sort of thing in memory.
And so, what you're going to learn in this talk is how to use or how to build perfect hash functions for combinations and permutations.
And the structure of this here is we're going to look at both of these.
We're going to look at an example problem.
So what are some problems that we're going to look at that would fall into this mapping?
And then I'll talk about how we count them.
Counting is something you tend to do in your math classes growing up.
But the things that you don't tend to do is how do we do this ranking and unranking that allow us to then build these tables and things.
And then we'll look at an application.
So we're going to do the structure twice, once for combinations and once for permutations.
So we're going to start with combinations, and combinations, an example of a combination problem would be, say, I have a deck of cards, and with this deck of cards, what I need to do is I need to select some hand that I'm going to have here.
And when I select this hand, my assumption is that I'm getting some group of cards, but I don't care about the order in which I get them.
So combinations, we don't care about order, but I just want to know what cards did I get in the end.
Okay, so that's one example. Another problem might be like I have puzzles and I want to look at puzzles that I could possibly design.
What would be interesting? What would not be interesting? And so this is an example puzzle that would fall in this category.
It's something that I'm working on and here what I'm going to do is I'm just going to roll these guys against each other.
I'm trying to knock them all off the edge of the board.
And there's lots of different puzzles you can build from this.
And we can ask questions about this, and I'll talk about that at the end of this section.
So we could say, for instance, what are solvable puzzles?
What are puzzles with one solution?
Are there queries on top of that?
And knowing how to do this ranking and ranking of permutations and combinations are crucial to being able to do that efficiently.
So another way of looking at combinations then from this example is that I'm trying to place pieces on the board and I have lots of ways that I can put them.
Now notice that if every board position here actually had a card on it, you could see that putting four pieces on the board would be equivalent to choosing four different cards.
So this is sort of where those are the exact same problem, but we're going to use the board here because it's a little bit easier to look at and reason about the board.
So as I said, the first thing we're going to look at is counting.
This is stuff I expect you probably have seen at some point in your life.
But we can think about, I'm going to put this first piece down, I could put it really anywhere on the board, and that means there's 20 ways I can do that.
The second piece, well, it could go anywhere except that piece that is already occupied, so 19 ways for that one.
The next one, again, has 18 ways that I could put it down, and then 17.
Now the thing about this though is that there's many orders in which I could put these pieces down that would result in the same ordering or same board position at the very end.
So I have to account for the fact that I've actually over-counted the ways that I could do that.
That is, the first piece could have gone into any of these four locations and I could still generate exactly the same board in the end.
So we have to factor that out by dividing by four, dividing by three for the second piece, the third piece could have gone into two possible locations, and the last piece could go into one.
And so that just gives us 20 factorial over 16 factorial, gives us a numerator and the denominator is 16 factorial, which is, of course, more commonly known as 20 choose 4.
Okay, so that's the basic math of how we can do the counting.
And now what we want to do is we want to talk about a ranking.
So a ranking is more commonly known as a perfect hash function, but that's a mathematical term.
And it's a function that we're going to take a combination.
So I'm going to give you a board pattern, and I'm going to say, what is the integer that corresponds to this?
And this will be an integer between n minus 1 if there's n possible combinations.
So let's look at how this works.
If the upper left-hand corner, I'm going to call this location 0.
We just have to establish how we're going to lay out our board.
And the bottom right-hand corner is going to be location 19.
So there's 20 possible locations on the board.
And if I start by putting all my pieces in the far upper corner of the board, then that's going to be rank 0.
And if I put them in the far bottom of the board, then that's going to be rank 20 choose 4 minus 1.
In this case, there's 4,800 combinations.
And now let's sort of build up on this to try and build an intuition of what happens when I'm trying to do this sort of ranking function.
So what I'm going to do is I'm just going to take my last piece here and I'm going to shift it over by one spot.
And what that does is it increases the rank of this particular board position by one.
So we went from rank 0 to rank 1.
I move it over again, I get rank 2.
I move it again, I get rank 3.
And in general here, at least for the last position, what I can do is I can count the number of spaces between the second to last piece and the last piece, and that will tell me the ranking of the board, at least when the first three pieces are in those positions.
And so if I jump the last piece down here, I get ranking 16.
Okay, now the question is, of course, how do I generalize this if I want to put the space at the beginning instead of at the end?
And the way we're going to reason about this, at least here, is going to be recursively.
I'm going to think about, you know, when I moved all these pieces over, we were just thinking about how many possible ranks did I skip when I moved the last piece down.
Now I want to know how many ranks did I skip when I moved over on this first position.
And so we're going to ask, what is the count of the number of positions that have a piece on the first spot in the board?
Well, if we think about that, there's three pieces now that I'm going to place on the rest of the board.
If I'm fixing the first position there, then really this is just a recursive sub-problem.
And there's 19 choose-three ways of putting the other three pieces on the board.
Okay, so coming back to this problem here, what I'm going to ask is how many possible boards did I skip over that had a piece in that first position?
Well, as I said, that's 19 choose 3, 19 factorial over 16 factorial, 3 factorial, that's 969, and so that tells me that the rank of this position is 969.
Now, if you're following along with me, then you should be able to guess that if I move this bottom piece over by one, then we're going to see the same effect.
My rank's going to go from 969 to 970.
Now the question is, well, what if happens if I move the pieces around and I put the spot somewhere else?
That is, I put the gap here, and we do the same computation.
What if I put the first piece in the second position, I put another piece in that blank position that I'm skipping over, and I want to know, well, how many ways could I arrange the rest of the pieces?
Well, there's 17 remaining locations, and there's two pieces that I would have to put on the board.
And so that tells me there's 136 ways that I've skipped of arranging pieces when I didn't put a piece in the second, that position that's being pointed to there by the arrow.
And so the rank of this is 969, which is the first skipping, and 136, which is that second hole that I skipped there.
And so the total rank is 1105.
So the general procedure of saying, look, here's a board, and I want to know what the ranking of this particular board is.
And again, I'll show you some applications that I can use this in a moment, is I'm simply going to go through and count how many locations, or how many combinations, did I skip in each of these sub-areas of the board.
And when I count them all up, and I sum them all together, then that will be the ranking of this particular board.
So I'm going to just go through this pseudocode here. I don't expect you to read it and understand it, but I just want to show you the structure of what's going on.
So this is a recursive implementation of a base case. If I have no pieces, then the rank is zero.
If there's a piece in the first possible location, then I just continue to rank the rest of the board.
In the first possible location, I basically don't add anything to the rank.
Otherwise, I count how many locations am I skipping by not putting a particular piece in a particular location, and then I recursively say, okay, now I've got a slightly smaller board, and I continue to rank that.
Notice that this runs in linear time because I have to go through the entire board.
It's linear in the board space.
If we do some special caching about the combinations here, we can run linear in the number of pieces, and that's not too hard to do.
We just have to do some caching in our code.
And this code will... I'll give you a URL for all this code a little bit later.
Unranking is the reverse process to this, that is, I want to give you an integer and I want to get back from it the board position.
So the way this works is we're going to reason about what we've been doing here.
So here I have my first board position, we know this is rank 0, and we know my second board position right here is rank 969.
So given that I gave you a number that's say 803 and I want to say unrank this 803 and tell me what it is, well I know that if it was in the first position, the rank would be somewhere between 0 and then the second position, with the first piece being in the second position, would be somewhere higher than 969. And so since my value that I'm going to unrank here is 803, it's between 0 and 969, which means the first piece must have gone in the first position and then I'm going to recursively worry about where I'm going to put the rest of the pieces.
So we'll put our first piece in here, and we're going to continue with a rank of 803, and we're going to actually do the same computation again recursively here.
So now, because there's fewer pieces to place, if I put the next piece in the second position, it would start with rank 153, but I'm looking for rank 803, which is much larger.
So I know that the first piece doesn't go in this first position with the left arrow there.
So what I'm going to do is I'm going to subtract 153 from my rank.
I'm going to get a rank of 650, and then I'm going to continue the process at the next step.
So I get here, the rank is, and I ask, now is my rank of 650, is it between 0 and 136?
The answer is no, so I subtract 136, and I move down the board.
I continue to subtract, subtract, and move down the board every time I'm doing this, until, here, I do my subtraction and I move down, and now I find that my rank is 54.
The ranks for the next position start at 55, and so my next board, my next piece on the board is gonna go right here.
And now again, I continue down the board now. There's very few pieces left to place. So these ranks are fairly small again I do the same process over and over again until I get farther and farther down the board every time I'm decreasing this rank and Eventually I get down here I have a rank of zero the ranks are gonna start at one on the right hand side and in fact actually have two pieces Left to place there's only two pieces left on the board So I put those last two pieces in and I finished the end ranking So the code again here is recursive.
My base case is if my count goes down to zero, I'm done doing the unranking.
That is, I'm putting it inside the piece array.
I'm going to count how many pieces I would skip if I skip the next location.
And then I say, look, if my rank is higher than this range, zero to skipped, then I'm going to just keep going.
Otherwise, I'm going to place a piece on the board, and then I'll recursively unrank the rest of the board.
Okay, so the question is, for a board like this, what does it allow me to do in terms of design decisions here, and how did I actually come up with this level?
And it's actually one of a very few set of very interesting levels that happen when I define this set of mechanics for this level.
And here what we're going to do is an idea called retrograde analysis.
What we're going to do is we're going to work backwards from all levels that we know are solvable or not solvable, and we're going to work up until we get more and more complicated levels to use the solved levels as sort of guides to the solution to the higher levels up.
So in particular here what we do is we're going to go through all possible states and what we're going to say is, look, you give me a state number, give me the board that's associated with it.
And here we're going to decide just what are the levels in my world that are solvable.
So I get my board out of this particular ranking.
As I said, in practice this isn't a very compact hash table, it's just an array sitting in memory.
And then for that particular board, I'm going to look at every single possible move, and after I apply the move, I'm then going to get a new board state, like I took some action on that board, I have a new board state, and so now I'm going to get the ranking, which is going to go look up somewhere in memory, and it's going to say, is this board state, is it solvable or not?
And if that board state is solvable, then I know that is the next state I got to by taking an action, then I know before I take the action that if I take that action, I'll actually be able to solve that board.
And so if I'm looking for all the positions that could be solved by taking, you know, that there is at least one action that leads me to a solution, then this procedure here is going to then store, as I keep reading it, I have to run it over and over again until basically the result's subtle, it's going to give me all solvable positions.
And these are going to be positions that there is at least one action that causes them to be solved.
But I might want to ask much more interesting questions about how things work here.
For instance, I might want to say, well, what are the set of boards for which all moves lead to a solvable position?
And you might say, well, why is that interesting?
Well, if you're trying to train people to play your game, if you give them levels that they can't actually make any wrong decisions in, then they're learning about the mechanics of how your game work without actually ever being penalized for making incorrect decisions.
So I give this to people and they think, wow, I'm just playing this game so well, actually I've just given you levels that you can't not solve as long as you take legal actions, and all legal actions lead to a solution.
So how do we do that?
We assume that this board is going to be solvable, and then we go through all moves as before.
And if we find that any move doesn't lead to a solution, then we say, ah, this isn't one of the states that I want that's fully solvable.
And so I say, this isn't solvable at all.
So this is a way that you can take design problems like this and you can start to classify what's going on.
And you could make a slightly different version that said, what has two solutions, or two unique solutions, or different things like this.
Or maybe I want one solution all the way down, but at the very beginning of the board there's two solutions.
So you could specify anything like that as a design question and we could build a retrograde analysis to figure out what puzzles met those conditions.
Now, there's also a lot of problems that are related to this that have to do with what's called multisets.
And multisets are combinations where you allow duplicates.
I don't have any time today to talk about how to handle multisets, but I wanted to show an example of this and why you might be interested in using these.
So let's say that you're building an AI for a card game.
So I'm going to be dealt some cards, but my cards may be like I've got lots of mana cards, and so I might get multiple manas in my hand.
And I've got to think about how am I going to, like what is any particular hand going to be?
And my AI has to make a decision.
It says like, you know, should I make this move or make this move?
And what is my resulting hand going to look like afterwards?
So something you might want to do is instead of trying to do extensive online analysis in an offline phase, you analyze all possible five-card hands, you say how good or how bad they are, and then when you get at runtime, instead of having to try and do that analysis on the fly, I just go look this up at a table, I compute the ranking of all the possible hands that I could get to, and then I look them up and I get the answer there.
This could build a much stronger AI that was actually much less expensive at runtime to do the computation.
So if you're interested in multisets, they can be built on top of everything we've been doing so far.
I encourage you can look up some more data about that.
The next thing then, so that's combinations.
The next thing we're gonna look at, permutations.
And permutations are like combinations, except they're ordered.
So we're gonna go back to our deck example here.
I've got a deck of cards.
But what I wanna talk about is all the ways that we can mix these cards around.
That is, these are all the ways that I could shuffle this.
And we mentioned shuffling algorithms this morning.
Those are exactly permutations, and we'll see how this connection is made here a little bit later.
So from here we might talk about like dealing cards out.
There's some notable examples where people writing poker programs have used broken methods for, you know, shuffling cards and people have been able to take advantage of that to make a lot of money.
So we want to avoid that sort of thing by making sure we're using very sound techniques, like we're really careful about how we do our permutations to make sure that we are that we're truly getting a random permutation.
Now, there's games actually, so this is a game, Cogs, that came out in 2009.
This game ends up that it's basically a reworking of a classic sliding tile puzzle where you're trying to slide the tiles and get them into the right locations.
And it ends up in these sort of games you can actually use permutations, again I'll mention this at the end once we've gone through the details, we can use them to help us build solvers for these.
And so for instance if you look at Jesse Schell's book on game design, what he says is that When you're building puzzles, it's very useful if you can help the player out, maybe even give them the solution.
And so if you can build a solver into your game that anywhere the user gets stuck, you can help them along in the solution, then that's very, very useful and powerful to do.
And in order to do that efficiently, you're going to want to know some of the math that we're doing here.
So we're going to go through all the math, and I'll come back and talk about how we do that in practice.
So again, we're going to start out, how do I count permutations?
And I'm just going to use permutation of four items here.
So I have 0, 1, 2, 3.
And we're going to say, what are all the orders that we can put this in?
Or what is the count of them?
If we think about it, there's four numbers here.
I could put any of the four of them in the first location here.
Then when I put the first one in, there's three remaining to go in the next location, and then two remaining, and finally one remaining, and so this is factorial here, so just a straight factorial.
And so you can see with permutations, there's many more ways that we can arrange them than a relatively equal size of combinations, and that's because we, if I think about the same set of numbers, it's because we care about the order, where in combinations we don't.
So here we're going to take the factorial to count them.
Now, if we want to understand ranking and unranking, there's something we have to understand, which is called mixed radix numbers.
It really helps us to understand and get an intuition for what's going on.
Now, probably most of you here haven't heard of mixed radix numbers, but it ends up that all of you do it every day, all the time, when you look at your watch.
your count of the time is actually a mixed radix number.
And the idea is we just have numbers that are in different bases that we combine together.
So time, if I say it's 7.12 in the morning, that's seven base 24 and 12 base 60.
Or if we think about currency, if I have $15.39, that's 15 really in an infinite base because ideally I could have an infinite amount of money.
Of course, not in practice.
But, and then I have 39 cents, and that 39 cents is never gonna be more, I'm never gonna have 100 cents.
So that's really 39 base 100.
So we're familiar with that and that's what's going to be sort of a key for part of this conversion process.
So the first thing I'm going to talk about is how we do the conversion for mixed radix to mixed radix and then we'll actually look at the ranking and unranking and these do this as part of the process.
Okay, so the first thing we're going to look at here is what I want to do is separate out the left hand side or the right hand side with the numbers and the left hand side here and What I'm going to do is basically say, look, I want this 0 to be base 4.
But I want everything else on the right-hand side to be a lower base.
So I'm going to start out by taking the 0 and making it base 4.
Everything on the right, I'm going to convert it to base 3.
But I want this to be a permutation in base 3.
And right now, it's not, because in base 3, I only have 0, 1, and 2.
So I'm going to actually subtract 1 from all of these numbers so that it is then a permutation.
Notice here that actually my original numbers were 0, 1, 2, 3, which is sort of the most basic permutation that you can have.
And so if you're working in lexicographical ordering, which is this natural alphabet ordering, then that's actually the zero permutation, and you'll see this as we finish going through here.
Okay, so now I'm going to just take my next number here.
I have 0 in base 3, and I want to take that and leave it in base 3, and I want to make the 1 and 2 be in base 2.
Again, I need this to be a permutation, so I need 0 and 1 here, so I'm going to subtract 1 from each of those, so then I have a permutation of the elements 0 to 1.
And then the last one just becomes 0.
Your last digit's base 1, so that's all with 0.
I also, in the last session, we were talking about mod by 1.
We want to do that here too.
So this is what we're doing when converting to mixed radix.
And let's look at how we do this overall in the ranking process.
So I have this permutation 2, 1, 3, 4.
And I want to map it to a numerical value.
I'm going to take 2 on the left.
And I'm going to do that first.
And we know, I mean, this is very similar to binary, where we would take 2 to some power.
But now on the right, we don't have powers of 2.
We actually have factorials.
So I'm going to take 2.
And then there's 3 factorial values to the right.
So I get 2 times 3 factorial.
And then I need to convert the values to the right, do the conversion in this mixed radix format.
Then I'm gonna continue this, so I have one, and then there's two factorial combinations of values that I can have to the right of there.
So one times two factorial, and then again, conversion to the proper mixed radix here.
And finally, one times one factorial, and at the end I always have zero.
So once, if I know how to do this conversion, or if I just have it in mixed radix, it's really easy.
Instead of multiplying by powers of two, which is what we do in base two, we're multiplying by factorials, because our bases are going 4, 3, 2, 1 here.
The pseudocode is relatively easy.
I start out with a hash value of 0.
I take my first piece, and I multiply it by the factorial of the number of entries that are left.
And then I have to do this conversion, this mixed radix conversion.
And the problem here is that this loop makes this entire process run in n squared time.
And so we're going to continue looking at, because that gives us an intuition for what's going on.
But then I'll show you a really cool algorithm, or at least I'm going to show you half of a really cool algorithm that allows us to do this in linear time with some trade-offs.
OK, so if we want to go backwards, we just reverse this process.
OK, so how am I going to reverse it?
I take 15, 15's my rank.
I'm going to look at the first digit here.
And I'm going to mod it by 1 to get the first digit here.
Well, the first digit is always 0.
And then I'm going to divide it by 1 to get the next rank that I'm going to work off of.
So that's 15.
Again, now this is base 2, so I'm going to mod by 2 to get the next digit here.
That gives me 1.
And then I'm going to divide by 2 to get the next rank, which is 7.
But notice here I'm in a mixed radix format.
I don't want my result to be in a mixed radix format because this is not generally what we want.
So now I need to go here and make sure that this is a valid permutation, which it is, so I just leave that as it is.
So I get 1, 0 there.
Now I'm going to take 7, I'm going to mod by 3 to figure out the next digit, that's going to be 1.
And I'm going to divide by 3 to get the next rank, which is 2.
And now I need to put this again into a, I want this to be in a fixed base, so I want it base 3 all the way across.
And so this 1 here is going to have to be increased to actually be 2.
And I do this one more time, actually now I just have a rank of 2 here, and I take this digit that's there already, I increase it by 1, and now I'm back to my original permutation.
Okay, so the code looks almost identical to what I did in ranking, but here I'm going to say piece x is going to be basically my hash mod the number of entries, I take my hash divided by the number of entries, and then I do this conversion for a mixed radix.
OK, so as I said, this is n squared.
What could we do to do a better job of this?
Well, we all hopefully know this algorithm for how do I randomize a deck.
I choose a random card, and I'm going to put it at the end of the deck.
I'll choose another random card.
I'll put it at the next space.
And I choose, again, my last card is going to go in the last space.
So, Merbill and Ruski, they came up with this algorithm where they basically said, look, I'm going to use my ranking as my so-called random number generator.
And as long as my ranking goes on the right range of values, then I'll be perfectly fine there.
So my rank here is going to be 4, and what I'm going to do is I'm going to choose a card to put at the end.
There's three cards to choose from.
So I'm going to mod it by 3, and that's going to tell me, take card number 1 and put it at the end, and then move the next card over.
OK, then I'm going to say divide by 3 to get 1.
And that's going to tell me my next rank.
So I'm going to mod this by 2 to give me the next my next so-called random number.
that's going to put the next card in and then of course the next the last card goes in the last position. So this algorithm basically takes this shuffling algorithm that computes a correct shuffling but instead of just choosing a random number or doing this with random numbers we can actually take a rank and we can do it. Now the reverse process is more complicated you need to know something about dual representations of permutations and I don't have time in this lecture to go over it but there's some I have a link to the paper which I'll give to you shortly.
And there's code as well that I can give you.
But the actual code for this is really simple.
I just swap a particular piece with a piece on the end, and then I divide the rank by i.
So this is useful, again, going back to this COGS game or many of the other puzzles we might be working on.
I'm just going to use the sliding tile puzzle as an example.
What we would do for something like this is if we want to solve it, we need a heuristic that guides us towards the solution.
And so what we're going to do is we're going to basically ignore most of the pieces on the board.
Because there's far too many combinations.
There's like 10 trillion ways that you can arrange a 15 puzzle like this.
But I can choose a small subset of this that I can actually solve this subset very quickly.
I can do it offline and it doesn't take very much space or even do it on an online step.
And it's faster to do this solving all together than it is to try and solve your original problem.
So what I do is I solve this sub-problem.
And once I've solved this sub-problem, I basically, I completely solve all ways that I could arrange this subset of tiles.
And then when I come into the full problem and I'm trying to solve it, at every location I look up that subset of tiles and I know their distance from that particular board configuration to the goal.
And so that gives me a really, really good estimate of what is actually the optimal path going to be to the goal.
There's a huge literature on how to do this efficiently, so I'm really just going to point to this here.
I'd be glad to talk to people, in fact, about all of this stuff.
I'd be glad to talk to people about it later, because there's just tons more I couldn't put in the talk here.
Software that I've shown in the talk here is on this website, and I haven't put all the software.
I've implemented all these things five different times in five different frameworks, and what I'm doing is I'm in the process of extracting it all out and giving it in very clean formats and efficient formats to you. So some of the software is up here already.
I will be adding more software in the coming days.
And this is to do permutations, k-permutations, lexicographical orderings, this merveled rescue.
There's a number of other algorithms that will all be here.
both for combinations, permutations, rankings, unrankings, and you're free to use this however you want, wherever you want, so no license at all, or the most unrestricted license possible on using this code.
Basically, I want you to be able to use it and to be able to find power in using this to solve the problems that you have in your design spaces.
The last thing I would just recommend, there's this good book by David Mazur.
As I was trying to look in this space, there's just...
the depth of the work that could be done here is incredible, and the amount that I know of that is a relatively small fraction.
But this is what I've used and found really useful for my work, and so if you're wanting to go even farther in depth, I would recommend this book.
And then again, this is the URL where I'll be continuing to place my software.
Thank you.
And I think we have time for one or two.
