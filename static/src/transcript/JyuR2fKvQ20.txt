I talk to Errors to Play, Human Error and Game Design, just a little bit about me.
I'm a Lead User Experience Researcher at Epic Games.
I have a PhD in Psychology, specifically in Human Factor Psychology, which is the psychology of how people interact with technology.
And I'm a Kiwi, which means I come from New Zealand and also that I cannot fly.
If you'd like to get in contact with me, you can reach out to me at that email or on Twitter.
or please, I love to play games, so there's all my various game IDs.
Add me, we can play together.
So today, we're going to talk about error.
Here's an academic definition of error.
It's a bit long-winded, so we can shorten that down to things going wrong that you don't want to go wrong.
And that is an important thing about error, is that it is that you don't want to go wrong.
And in industrial settings, when we talk about error, We want to prevent all error from happening.
However, the thing that's interesting about working in games is that we want to prevent some errors that happen, the errors that are unintended, that we think make the player experience worse.
But we do actually want the players to make mistakes.
That's part of the challenge.
Different types of errors can be, in fact, not bugs, but features.
And that's part of what I want to talk about today, rather than just how to prevent these things.
So.
What do we know about Aero? Well it's been studied for quite a long time.
It's an important thing. Typically it's been studied in transport to make sure that these things don't crash.
It's been studied in industry to make sure these things don't blow up.
And it's been studied in the military to help these things blow up other things.
And there's been a lot of work around it.
And of course, anything in psychology will have a nice model.
So let's look at a model that we can use to talk about error.
As with most models in psychology, this is a simplification, but it's aimed at trying to talk about how people go about their everyday life and cognition.
The idea is when you encounter a problem for the first time, what you'll initially try and do and see if it can be solved automatically without you really thinking.
Do you have a solution to this that's fast and automatic and doesn't take much effort?
If you don't, you'll move up to the next level where you apply if-then conditional rules, which is to say, if this happens, then I should do this.
So it's not quite automatic, it's a little bit more thinking, but it is on the way to becoming automatic.
It's like, this situation means I do this.
Only then, if both of those have failed you, will you move on to...
what we would think of as thinking with logic, reasoning, rational thought.
This kind of slow processing that takes a while to do and has a lot of inefficiencies in it.
And the general idea is humans, like most other animals, are satisfying.
We don't like to spend time and effort if we can get away without doing so.
So we like to operate at the lower levels if we can manage.
And it's really important that we do so.
These levels can be called the skill level, the rule level, and the knowledge level.
And within each of these, there are different types of errors that can occur.
And what I'm going to do today is I'm going to go over these types of errors, and I'm going to talk about examples of how they can be prevented, and examples of how they can actually be used.
And I do want to put a disclaimer up front.
I'm going to use lots of examples from lots of different games.
And when I use one that's in maybe a negative context, I'm not saying they shouldn't have done this, or this is the worst example.
It was just a good example.
The same way if I say, hey, here's a use of it, this may not be the best use, it was just a clear example.
I want to make that clear.
UX is sometimes accused of trying to make everything simple, remove all the errors, and that's not what we want to do.
We want to help games be the best.
So as I said, another title for this could be Errors, How to Prevent.
and how to use them.
And that's going to be the structure of most of the talk.
Also at the end of the talk, I'm going to talk about a kind of holistic approach to dealing with this and why cheese is involved in that.
So to start with, skill level.
As I talked about before, this is the fast, automatic level of performance.
If you think about it in terms of fighting games, it is what is often referred to as muscle memory, where If you're operating at the skill level, you're in that flow, you can just hit the combo buttons and get the combo off and keep on playing.
You don't need to think about it.
That's skill level operation when you're playing at that kind of muscle memory level.
So when we talk about errors within skill level, there are generally two types.
There's inattention errors and over-attention errors.
Inattention ones are the ones that come to mind very easily when we think about people making mistakes.
And that's the.
There just wasn't enough attention paid to something, and something goes wrong.
Over-attention errors we think about less often, but they are when you're using these higher-level cognitive processes that take a lot of effort, but you're trying to apply them to something that should be automatic.
So, again, a fighting game is a good example of this.
When you're first learning a fighting game, you're really, really thinking about which buttons you're pressing, very aware of all your actions, and that actually makes it harder for you to learn and harder for you to...
execute them, then when later on they become automatic, and you can actually basically not think about them and go with the flow.
So the first type of inattention error is double capture slip.
I'm going to use these scientific names for them because it's helpful, but you don't necessarily have to remember them.
It's more about what they're about.
This is where there's a couple of potential fast things you could do, and because you're distracted or overloaded.
the stronger one takes over. So let's go for an example.
Say you're playing Fortnite and out of the darkness comes this terrifying pink bear.
Now what you want to do is you want to hide from the bear, so you want to crouch.
Now in Fortnite, crouching is pressing the right stick. Click it in.
But, you know, this bear's really scary.
And you're quite distracted and under load, and instead what you do is you press B, which quite common is crouch in a game.
That's a stronger automatic rule.
You crouch, you press B, that goes into build mode, not crouch in Fortnite, and then the bear takes you out.
This is an example of making a double capture slip.
To prevent double capture slips, it's relatively simple.
This is why there is so much emphasis on standardization and consistency.
If your game is consistent within itself, or within frameworks set up by the industry, then double capture slips are less likely to happen because the strongest rule is the right rule.
So if we look at this fidget toy, the green button down the bottom, if I asked you what it does, a lot of you would say that it jumps or it confirms, right?
Because that's pretty much a standard.
Not in all cases, but it is in a lot.
The red button, a lot of people would say that it cancels because, again, that's pretty much a standard.
The other approach you can take here is to allow customization.
Customization is great for accessibility, but it also means that people can bring along their own strong rules and set it up as they like.
So on the next slide, very quickly, what button would you press to jump?
In Nintendo, it's different from the other games, from the other platforms.
And that's not necessarily a bad thing, but it is if you're not used to it.
But for Nintendo, it's good, because it's been consistent that way for a while.
So how can you use double capture slips?
Well they get used a lot of the time in any game that requires this fast-paced twitch action.
Something like Rock Band will be throwing a lot at you and it's part of the challenge that you're to choose the right action under a lot of pressure.
A more kind of direct example was in Dead Space, the original Dead Space, when you fought the boss in that.
the boss would grab you at one point and pull you upside down.
And when it pulled you upside down, your control was inverted.
Now that's going to cause a lot of extra difficulty for you because these double capture slips are going to take over.
You're so used to aiming that now you have to think about something that used to be automatic, much increasing the load.
All right, so that's double capture slips.
The next is omissions following interruptions, or the walking out of your marching outpost without your keys problem.
This is kind of like.
You're going along and you've been in a zone killing monsters for a while and you decide you need to go hand in a quest.
But on the way to the quest, you get interrupted by some more monsters and then two hours later you're killing those monsters and you've never handed in that quest.
Because that automatic thing you've been doing more often took over when you got interrupted.
So to prevent it, we can of course put in, are you sure prompts for...
You're trying to exit right now.
Have you saved?
Have you remembered to do this thing?
Because exiting can be quite an automatic thing.
You can have in-world reminders of activities, like quest prompts or where to hand in objects that are pushing the player forward.
There's not many cases you'd want to use this.
So I'm going to kind of skip over that.
Delay reducing control.
This one's kind of a very familiar error that a lot of us have.
Imagine you're a.
You're a wizard in Skyrim and you're in your lab and you're making a potion and you work out you need some Nirnroot and there's none there and you go out into the field to collect it and then you get out in the field and then you're like Why am I here again?
And the reason that this happens is that cue that you had back in your laboratory of No Nirnroot is now missing when you're in the field where there's plenty of it So that you walk into a room and you're like, I don't remember why I came in here, but I had a good reason.
That's this error.
To prevent this error, it's very common nowadays to carry affordances, carry queues with us wherever we go in a game.
So in Assassin's Creed, for example, they always show the in-context action you can take at any time, what your current mission is, this kind of thing.
In Fortnite, we also can do the same thing, where you can pin quests or you can pin activities.
that you want to do. This is to reduce this error you can take these cues with you so you always know what you need to be doing. You can use this of course if you do want memory and people to have to rely on these higher level processes in your games. This is often used in adventure games or hidden object games. Games where you don't want these cues carried with them because part of the fun of the game is having a good memory and being able to overcome this usual problem of...
operating on automatic and therefore forgetting things.
Perceptual confusion is a straightforward one.
It's essentially this thing looks like that thing.
I know this isn't a problem for lots of people, but for me personally, one dude in camouflage looks quite like another dude in camouflage.
Like the American soldiers on the bottom look like the Russian soldiers on the top, right?
Probably made someone really mad with that.
Americans on the top, Russians on the bottom.
It really, to me, it doesn't stand out.
But it does to a lot of people.
Again, these examples are not, hey, this is bad.
Of course, you can make military shooters.
Just an example of how someone could get confused.
And of course, in Battlefield, they overcome this in some ways with the spotting mechanic, where if you see an enemy, you can hit a button, and they get highlighted for your team and it makes them stand out.
So to prevent perceptual confusion, you can use distinct shapes, silhouettes, and animation.
So in Fortnite, there's not much chance that someone's going to.
mistake that black knight for the bright bomber.
They have very distinct silhouettes, they stand out, they don't look too similar from each other.
You can also use animation to make enemies move in ways that look evil or threatening, and allies move differently.
Or you can do highlights, such as in Paragon, when you targeted an enemy, they would have a red highlight on them, or you could see them through the world.
These are all ways that you can overcome these problems.
You can, of course, use perceptual confusion, though.
You can add load, spot the difference games do this all the time, hidden objects games do it, lots of things that look like other things, and spies and ambush enemies are an example.
The Bob from the old Marathon games was an ally you could have on your side, but sometimes they could be taken over by the aliens and they would run at you and explode.
They look the same, so therefore a lot of players would just kill every Bob that they saw no matter if they were friendly or not.
But this is a way of using perceptual confusion.
Our next error is interference error.
This is where two thoughts and actions enter and a kind of mixed up combination emerges.
So for example, when my uncle was at a wedding and wanted to welcome and thank people, he stood up and said, I would like to wank.
These are often called Freudian slips, but they aren't anything to do with wanting to sleep with your parents.
They are just part of how cognition works with, if you have several things that could be a possibility, they sometimes combine into each other.
To prevent this, really it's having low task load and only one choice or task at a time is the best way to do it.
Again, this tends to help with other errors as well, but in this case, this is one of the most effective things to do.
But to use it is slightly more interesting.
We do this again in games with a lot of similarity or high task load.
If you're in a quiz game, what you'll often do is the questions get harder as you'll make sure that the options start looking very much like each other and you'll increase the time pressure so that this error is more likely to happen where someone's going to pick something that looks right fast, quickly, automatically without really thinking because they're under pressure to do so.
That's all the inattention errors.
So now we'll talk about the over-attention ones.
There's only really three.
There's omission, which is you're paying so much attention to one part of a task that you miss another.
There's repetition, which is where you'll repeat multiple parts of a task.
So maybe you'll go and open a door multiple times even though you didn't have to do it because you're just so focused on what you're trying to do.
And then there's reversal, which is a little bit rare, but you always feel really stupid when it happens.
It would be something like...
you know you have to throw some guns out, but you throw the gun out, and then you're, because you're thinking about that gun so much, you pick it back up again off the ground, and then you're like, I need to drop it again, and then you put it out.
And a mission example is why I've got this picture up here, and that would be, you're lining up a sniper shot, and you're really trying to account for bullet drop, and the way the character's moving, and then you pull the trigger and it goes click, because you didn't think to reload, you didn't think to check that.
And hopefully you're paying so much attention to me.
You also didn't notice that that wouldn't count in this because it is reloaded.
But to prevent over-attention, onboarding helps a lot here.
An onboarding ramp that's smooth, that doesn't overload the player too much.
This can be interpreted some ways by don't use tutorials or don't give a lot of information to new players.
But actually new players tend to need more information.
It's more about gently introducing them to it rather than hiding it or saving it for too far later.
Flow state is kind of the opposite of over-attention.
It is the point you want people to be in.
If you want to get rid of over-attention, you can give skips.
Here's a nice example from a recent game, Deadbolt, where they've got this message popping up saying like...
you'll have a harder time to play when frustrated.
They're pointing at this over-attention problem.
But there maybe can be problems with that.
So if you want to use over-attention, if you really want to make your game hard for people and they're supposed to be operating at an automatic level and they're failing, tell them to try harder.
Do the opposite of use the force, Luke.
Throw stuff at them.
Point out obvious failings.
Add time pressure.
Metal Gear Solid had this thing that if you played it on lower difficulties and died, they put this hat on you.
That probably actually made it harder for people because it's reminding them that they're not very good.
God of War, it had this nice feature in it that if you died a lot of times, it would suggest to lower the difficulty.
That's great, except if you were dying from a jumping puzzle and you couldn't do the jumping puzzle, lowering the difficulty wasn't going to help you.
So these suggestions popping up may have made you focus a little bit more and not relax.
So moving on to rule level errors, here's an example of a rule level system from Dragon Age where you could set up your tactics for your squad to say if an enemy is elite, then this squad member does this.
And that's what to think about how rule level operation works.
If then rules.
Again, there's two types of errors here.
One is mistakes caused by good rules, which are rules that generally work in most situations, but then you encounter a situation where, in this case, for whatever reason, the rule wasn't appropriate.
It wasn't that you had a bad rule.
It's just the situation changed, or you hadn't encountered the situation before.
The other instance is if you formed a bad rule.
So there's been something poorly explained to you or something miscommunicated, and the if-then rule you've formed is just inappropriate.
So the first type of good rule problem is first exceptions.
Now this is simply that exceptions are exceptional.
And so when you encounter something that's different from what's usually worked up until now, you can't have taken into account in your rule system and so things can fail.
We've all heard of Murphy's Law, but actually language's law is more commonly encountered, which is that everything that can go wrong actually usually goes right.
The world actually usually accepts your mistakes and accepts your errors.
And so you can sometimes get along with nothing going wrong, and then suddenly things will happen and the exception will come up, everything falls over.
To prevent first exceptions, have no exceptions.
Be consistent, be standard, similar to at the skill level.
The Dark Souls games in the Souls series, for all their reputation for being difficult, are fantastic at this.
They are deeply consistent games, which is how people can play them and overcome them.
Enemies move in the same way, they attack in the same patterns, they're always in the same place.
Your character moves in predictable, consistent fashion that does not generally have exceptions.
This lets you overcome this problem and learn good rules.
You can of course use first exceptions.
by adding exceptions.
This can be a way to break up the gameplay pattern.
The classic example is having fire-type enemies or ice-type enemies that are resistant to different things to force the player to change up their tactics.
An example from Destiny is the Vex enemy that gets shot with criticals in the stomach rather than in the head.
This swaps up how the game is played, how the flow of the game goes, depending on what enemy that you encounter.
and makes the game feel a little bit more dynamic and means that these exceptions are shown to players and become part of their repertoire.
Another reason why a good rule can get misapplied is due to signal retention or counter signs, no signs and information overload detection.
If you look at these pictures to the right there.
The llamas in there are kind of hidden by a lot of noise and if you're colorblind you may not be able to see llamas in all four squares.
This is a colorblind test that we have in fortnight for the colorblind mode so you can adjust things until you can see the llamas.
And this is generally the idea of detecting a go signal from a no go signal which is like an alternate activity you could take or from noise.
So you come into a room in a shooter the objective in that room is to go press the button to open the door But a lot of enemies come in.
And previously in the shooter, maybe you're used to killing enemies to clear rooms.
But these enemies are going to keep coming until you press that button.
The press the button would be the go signal.
The enemies would be the no go signal.
Don't spend your time shooting enemies.
And then all the textures and lighting and everything would be the noise that you have to detect these things amongst.
So to prevent this, clear teaching.
making it clear what the player needs to do, prompting in the world, highlighting information, making your go signals, the signs, really stand out from the alternatives.
To use counter signs, you do just add noise, make it a noisy environment, do small differences between right and wrong.
Again, this is very common in hidden object.
games but also for invisible enemies that often have a noisy pattern and move amongst the textures and don't stand out. Another reason that good rules can get misapplied is because of rule strength, general rules and rigidity. These are three categories but they're very similar to each other. Essentially, the rule that you use the most becomes the strongest and therefore becomes the thing that you rely on.
That's because, generally speaking, if a rule works and if it isn't broke, don't fix it.
Like, good enough is good enough.
And if you've ever seen this in your games, it's relatively common that, say, players will come up with a dominant strategy very early on and then they'll stick with it.
They'll use 400 ammo in the gun that they like rather than swapping to the gun that would have been more effective in a situation that has just come up.
So to prevent this, you can either make multiple viable paths so this never comes up, like whatever tactic they want to take always works, or if you do want people to task switch, you need to provide really clear feedback.
One issue we had in Paragon is that generally speaking, the rule was you use your automatic attack to attack things and do a reasonable amount of damage.
But for a lot of characters, you used your abilities if you wanted to do a lot of damage.
That was a good rule.
However, when it came to towers, your abilities didn't work on towers.
But people would try and use their abilities and they would waste their ultimates and waste very high cooldown abilities.
And we had to, even though no damage numbers came up, even though there was this feedback.
that was not enough to stop them using this otherwise good rule.
So eventually we really just had to add huge big immune feedback whenever they did that.
Like, this does not work, really get in their face to do it.
Another way you can do it is offer help on failure.
You can have hints pop up.
So they're trying their dominant tactic and you detect that and you can gently steer them towards other tactics.
To use rule strength...
You can add exceptions. You can also understand and subvert expectations.
You can essentially set players up to really demonstrate to them, hey, cool, you can play how you want. Here's a dominant strategy, use it.
And then you can surprise them by mixing things up.
So, Metal Gear Solid V had the adversary system, I believe it was called, where the enemies would actually start to adjust to your tactics.
So if you got a lot of headshots, they'd start wearing helmets.
If you snuck around, they would wear night vision goggles. These kind of things.
Another reason why good rules can sometimes go bad is redundancy.
This is essentially if a piece of information when it's presented to you is not useful, you won't integrate it as part of a rule system.
So this can often happen in games where maybe in a tutorial or in an early onboarding we teach something and then we're like, okay we taught that but then the person doesn't have to use it until an hour later or until a significant time later and the teaching...
or the object is not introduced close enough to where it is useful.
An example of this from Fortnite is the Outlander fragments.
These are objects you find around the map, and what they do is once you have an Outlander hero, you can use them and it gives you special abilities.
However, they are introduced with very little explanation way before you can ever have an Outlander hero, meaning that a lot of players just kind of learn to ignore them because they don't do anything, and even once they get an Outlander, they...
continue to ignore them. To prevent it, you can give extra volume on rare information.
You can only show information when it's needed or remind them about it later. So maybe you give, this is the example of the Metrovania games, right? You give someone a new tool and then you immediately show how to use that new tool and then that will trigger them to go, oh wait, I've seen those rocks with the cracks on them earlier on. I thought it wasn't important but now I know it is important.
Or maybe when they walk past those cracks earlier, they shimmered or they had a message that said come back later to help prompt and remove this redundancy problem.
You can also approach it with unflowering, onboarding, where things are generally taught over time and as close to when they're useful as possible.
It's generally best to not just teach something once and have the player use it once, but to teach something and then have the player use it a couple of times in a useful, beneficial way.
There's not really many cases you'd want to use redundancy, so I'm going to skip over that and move on to encoding and action deficiencies, which is the primary reason why bad rules exist.
This is an if-then rule you've created based on bad information, generally because the system or the game you're interacting with is not giving you the information you needed or is letting you progress via an incorrect tactic.
You can think of these as superstitions, like don't open an umbrella inside.
They're a rule, but they're an inadvisable rule.
We had an example of this in Paragon.
Due to the way that we taught players how to level up their abilities, and then how to use their abilities on controller, a lot of players believed that the button press you had to do to level up, where you had to hold down a trigger and press the button that was the ability, was also the way you used that ability.
And it did work, you could hold the level up button and press the ability button to use your abilities, but it was inelegant. You didn't need to do that. You could just press the ability button once you had it learned.
The weak points in Fortnite.
This is when you're harvesting in Fortnite. Sorry.
When you're harvesting in Fortnite, these blue circles appear and then you hit them to harvest faster.
This was a massive problem for Fortnite, probably one of the longest lasting kind of low level UX issues.
These weak points went through massive number of iterations to get where they are today and people were still not picking them up.
Because what people were doing was learning a bad rule associated to them.
They'd hit an object, a spot would show up on the object and that like...
okay this is just telling me I've successfully hit this object and this object is now marked so I know which one I'm harvesting from. That was the bad rule that they learned. And the only way we were able to eventually overcome this is rather than give this ability to people right at the start, you play a little bit without it so it's not there and then it unlocks in the skill tree and then there's a little video and then suddenly we saw even though this has gone through massive things with numbers on it and bright lights and all this kind of stuff, that was when people got it.
And of course, if you look at people playing Fortnite Battle Royale, where there is no unlocking of this, you just do have it from the start.
A lot of people don't know that it exists.
However, in that mode, it's less important.
So, again, onboarding, which was an example there, you progressively unlocked, and Cloud Area Feedback really helps stop these bad rules being formed, and they can become good rules right away.
There's not really a reason to use them, so let's move on to knowledge level errors.
Again, knowledge level is this higher level of operation, what we typically think of as thinking.
Errors at this level are often referred to as cognitive biases.
Here's just a logic puzzle from Divinity Original Sin.
Here, they're going to want you to think about it, think it through.
Now, often a lot of game developers are people that like to think things through.
They like to optimize, they like to be rational, and they feel that this is the major way that encounter things and it can be the case. But what is more often the case is players will look to, there will be some players that optimize your system, take advantage of your system, then other players will learn off them. It's not that all players will try and do this.
Most of the time players are just trying to get by rather than to optimize. Across all the knowledge level issues.
And the previous ones, but particularly impacting knowledge, is workspace limitations.
This is really where the fact that we only have limited cognitive capacity comes into play.
Working at the knowledge level is very inefficient.
It takes a lot of cognitive capacity, but it is also what's fun, like it's that like intense concentration that really struggling with the game and thinking it through.
It has a meta impact on all these things.
So every example I'm going to give, it's like caused or could be helped by reducing load.
And I'm going to try and not talk about that, because it just would come up every time.
So the first of these areas is selectivity.
That's attention to psychologically salient things in the environment rather than to what might be logically important.
So a straightforward example of this would be The cake is way more psychologically salient.
It's got emotion attached to it.
You want to eat that cake.
But logically, probably, for your health, it's better to eat the vegetables, which probably don't have the same emotional impact.
They don't have the same psychological saliency attached to them.
Now, an example of how this can happen in games is the loot cave in Destiny.
This was not the optimal way to get loot in Destiny.
Look at all that glowing loot.
Like, that's such an emotional, such a psychologically salient thing.
And players will do this.
They will do activities that are not optimal, that are grindy, that are otherwise not really particularly fun, if the psychological saliency is high enough.
So to prevent it, make the logical psychologically salient.
In Fortnite.
The chests and the safes and different things where you find objects and materials in the world, they glow.
They have this lovely sound to them.
You can hear the sound through walls that attracts you to them.
And they have real world analogues, right?
A chest is where valuable things are.
The same thing for our weapons in Fortnite Battle Royale.
You can look at a weapon, it's got a nice glow on it, it lets you know it's rarity.
It looks kind of like the real world weapon.
You can have the psychological impact of this gun is better than this gun from how it looks.
You can add tips, gameplay clues.
You can highlight new information.
If you can't make it really psychologically salient, if you can't make it emotive and attractive, then at least point it out through highlights or other ways.
You can use selectivity against players using traps and distractors.
A mimic is a really good example, right?
Players see chests.
This is a very.
Emotional thing for them they run over it to the activator. It's jumps up and it starts attacking them They didn't spend the time to think about it They didn't notice that it's in a funny situation or whatever It might be you can take advantage of the fact that these items will stand out. You can also use them as this detractors Distractors, sorry, I should say in hidden object games you put like nice glowing things and really pretty things amongst Where the players actually need to click and drag their attention away from where they need to be if they're supposed to be thinking it through.
Out of sight, out of mind is also sometimes called the availability heuristic, which is just simply the things that come easiest to our minds when we're encountered by encountering an issue will be typically the things we think are most important and also the things that we tend to focus on, whatever pops into your head first.
To someone with a hammer, everything looks like a nail.
And again, this is similar to the rigidity problem.
Players will use the tools that you give them, and unless it's very clear that it's not hammer time, they should, they'll stick with that.
So to prevent out of sight, out of mind, you can encourage solution switching by mixing up enemy types, by making certain things immune, and giving strong forcing functions to move them away from route.
Or you can provide failure-based hints.
Again, similar to the rigidity, you can pop up, oh.
the enemies that are red take more damage from ice items or whatever it might be that you want players to think about that would not usually easily come to mind.
You could of course use out of sight, out of mind by presenting a lot of now looking problems.
We do this in games all the time.
You give someone a big gun that's good at shooting a lot of people and then the very next room they go into has a lot of people in it.
This is using the availability heuristic by proving that it's true.
I have this thing.
I've just walked into a room with a lot of ammo and a lot of crates.
I know there's probably a fight through that door.
You can also use it as kind of like a fun part of puzzle games.
Portal would do this in some cases where you'd come into a room and there'd be all this complicated stuff in the room that looked really important, really like something that you should be thinking about to solve this puzzle.
But the actual solution was very, very simple.
And this could be an amazing thing for players to have worked it out this complicated way But then maybe see this really simple way to do it Confirmation bias is so well known. I almost left it out, but it's essentially that people put efforts towards what they expect The joke example here is that Tilted towers and in fortnite battle royale if you don't know is Somewhere there where a lot of people like to land it was it's a high loot location A lot of players land there at the start of the game.
We introduced a new location called Lucky Landing and this was kind of a meme that come up as, hey, why are still people landing at Tilted when they could go to Lucky Landing where it's a little less hectic but there's still good loot there.
And that's because they know that Tilted Towers is the place to go.
They already know that so they're just going to keep doing what they expect to work.
Whatever confirms their expectations.
And when they do land there, there is loot.
To prevent confirmation bias, understand your players' expectations, make sure they're met, and strongly predict contradictory information if you want them to not have this bias, which is a very natural one.
So another example from Paragon is that when Paragon first launched, we had these really lovely towers.
It's a MOBA.
And they're these beautiful, art-crafted towers.
They look amazing with this huge bubble on top, and when you're approaching them, they tag at you, and they shoot at you.
It looks really awesome.
But the thing you have to destroy to take out the towers is that little crystal down in the bottom left there.
So what we would see is players would actually try and attack this huge big thing, and it does nothing.
It was what they expected.
It's where they put their effort.
Even with contradictory information coming in of them getting shot, of doing no damage, they would go for these big towers.
So eventually over time, we moved to this design where it was a little bit more complicated.
The tower was the crystal and this big tower was replaced by a turret that would open up and have a gun in it and track you around.
Because this lined up expectations with what the players were after.
Alright, another one is overconfidence. Now, this is typically an error.
And I think this is one of the strongest examples of one that's not an error in games in most cases.
Overconfidence, where we disregard signs that are saying, hey, you're doing the bad thing, is actually what we want players to be doing nearly all the time in our games.
It's really natural to be overconfident.
In our games, when they see this, I have a gun.
I'll shoot you if you come in here.
We don't really expect our players to turn around.
We want them to keep on going when they see these messages written in blood on the walls.
If you do really want to prevent this.
If you feel there's situations where people, you want to knock someone down or you want to show that maybe their character's not very powerful, there are ways to do it by putting fortune functions in or having the player be defeated.
You do have to be careful about them.
This is a classic thing that many of the Bioware games have done where they give you a boss fight partway through the game and you get beaten by that boss.
And there's nothing you can do about it.
There's no way to beat the boss.
And this is to try and reinforce that maybe you're not powerful enough at this point.
But...
If handled incorrectly it can feel like a real cheat to players.
So you do have to be careful with it.
Because remember all the time your players think they can do it.
That's why they keep playing your game.
If you really convince them they can't, they're probably going to stop.
But you can use it.
Every game, every day game design relies on this.
Things getting harder.
Throwing challenge spikes at players.
They'll keep on going because generally speaking we're overconfident.
In Dark Souls, there's this huge boss you meet early on.
but players are going to attack the boss because, well, why else would it be there?
Like, we can take it, and then they get killed, which introduces the death mechanic in the game. You do have to be careful around this to make it clear what's happening, make sure that it's fair, but it is just part of everyday game design.
Bias reviewing is simply you're thinking through what you need to do and you go, I've thought of everything that I can think of, so, yep, cool.
But you can't think of things that you can't think of or that you don't know, like unexpected information.
So of course to prevent this, very simple, it's very well used in a lot of games.
You provide actually check-off lists that have nothing left out that the player can carry with them.
They then don't do this bias reviewing because there's no bias.
They have the review list, they go through it.
You can use bias reviewing against players by not providing progression logs.
If you do think it's important for your game, that part of the challenge of your game is to actually think of all the things and keep them in memory and be able to do that.
Or you can provide progression but leave information out or change things up.
In the Shadow of Mordor games, you build these examples of orcs, you find out what their weaknesses are, and then when you go to fight them, maybe another orc shows up that you don't know about.
Or maybe partway through the fight, the orc...
weakness changes or their tactics mix up.
So, this is using the fact that the player feels prepared and then throwing them a bit of a loop.
Halo effects are that good attributes in one area rub off onto others.
We tend to think that people who are attractive are also smart and kind.
People who are less attractive are dumb and mean.
This can also apply to games. You can use this in your game.
If your game looks nice and polished, people will actually be a little bit more forgiving to it than if it looks rough and unpolished because of this halo effect.
We can prevent this by subverting and challenging expectations.
Halo effects exist because of the society around us.
So for a long time orcs were bad guys, then orcs started to be shown as good.
This was subverting the halo effect.
And probably nowadays the good orc is actually an expected thing, so this may not apply over time.
But this is one example of going against Halo effects.
And of course, we use them all the time by making good characters look good, make evil characters look evil.
We always want to punch Nazis.
The last two things here are related to each other.
One is problems with causality.
This is essentially that players tend to underestimate future irregularities, which means they tend to think how things are going now is how things will go in the future.
They have the representative heuristic, which is the idea that big outcomes should come from big causes, and small outcomes should come from small causes.
So they should expect if something blows up, there's something big that caused it to blow up.
But if something small and subtle happens, they expect something small and subtle to have led to that.
Illusion of control is essentially that if you give players control, they'll feel like they can have more control over random outcomes than they actually have.
Correlation is causation.
People, as not causation, people tend to associate things that happen at the same time together.
And hindsight bias is simply that once something has happened and you think back on it, it becomes kind of very obvious that it would have happened.
And it feels like you should have known beforehand. It can be a very big problem in UX And for people giving talks about these kind of things because they seem very common sense after you've heard them For event problems with causality, this is why we put so many feedback systems in games. This is why we Put progression systems power growth mapping systems. We match players expectations. We help overcome these cognitive biases by providing systems in the game that accurately let them see how their progression will go, that things are going to change in the future.
And we of course use this all the time by just giving players control and feedback. By doing that we involve them in our games.
It makes them feel like they have more power than they actually have when we really make them...
their actions matter through strong feedback. So...
Match 3 games are a really good example of this.
You have very little control over what's going to fall in when you make a match.
But because you're the one making the match, and the game makes so much big deal about it with all these popping things, it feels like you're really smart and in control.
The last one is problems with complexity.
This is essentially, we're really bad at delayed feedback.
So if we press a button and nothing blows up or nothing obviously happens, we're going to have problems working out what happened.
Things need to be close to each other for us to understand them in most cases.
We tend to think in causal series. We like to think that this causes this, which causes this, which causes this, which we know isn't true in game design, right?
We make systems that have all these emergent properties where systems all interact with each other and aren't necessarily causal. But your player is likely to think they're kind of very causal. And we have difficulties with exponentials.
We're much better with linear growth than we are with exponential growth.
which is partly why exponential progression can feel very unrewarding to players.
And there has been a recent move towards more linear progression systems as they're more understandable and more in line with player expectations.
So to prevent it, feedback, visualization, and clarity, really letting the player know what's really happening in the game.
Same with the similar thing, the last issue.
Here's an example from Ubisoft's game, For Honor.
where they're just showing the monetization, a lot better than a lot of games do, where they actually just put a simple bar graph in to show, hey, when you mouse over things, it shows you how much base you'll get and how much bonus you'll get.
This is so much better than making the player do maths by adding things up by like 20% off and plus 100s and whatever.
This actually clearly shows the benefit of going at each stage.
All right, so to finish off, I'm going to talk about a systems view, which is kind of a holistic way of dealing with error.
The systems view at its heart is a safety culture view versus what would be a more traditional blame culture.
And it's a recognition of the fact that errors are caused by system interactions, as I was talking about.
Errors arise out of a lot of complicated things.
And this error that we make naturally to think in causal systems also applies when we think about error.
We like to think that errors happen because someone did this and then this happened and then that happened and then that happened.
But that's not how errors happen.
They tend to come about out of much complicated systems.
And so the idea is rather than look to one person or look to one cause and then blame that and stop, you look to the system, you look to what caused that to occur.
Blame stagnates things.
It stops you at that point.
Whereas a systems view, a safety view, lets you learn, it lets you improve and innovate.
Where cheese is involved is a.
Common model used in this is called the latent failure model or the Swiss cheese model.
And while this is still kind of a linear line, what it suggests is within organizations and also within games, there's all these different systems interacting.
And most of the time, they're solid, they're good systems.
But within each system, there'll be holes.
And then when certain systems all line up with each other, an error will occur when all those holes line up.
It wasn't just one piece of cheese, all four pieces of cheese had to be in a line.
Now, a system view on players is kind of the heart of usability and the heart of UX.
When we write UX reports, we don't write the player was confused because that puts the blame on the player.
We write what the issue was, so for example, this color, the color blue was not readable on the background.
Then we write what the outcome was, the player couldn't read it.
And that's how we present a UX issue.
It's not putting the blame on the player, it's looking to what the systematic reason is.
It's not to say, get good or players are just dumb.
We look at the system to see what is causing it.
Look deeper so it won't happen again in the future.
And one thing I do want to end on is, we can also apply all this in workplaces.
That's where human error is applied, generally speaking, outside of games.
And within our own workplaces, we should also be thinking in a systematic way and not looking to blame.
It can often be the case with our players, right?
If something goes wrong in a game, they may find just one dev and just pile on them and blame that one dev who they say was responsible for it.
But it happens within our workplaces too.
We sometimes have a tendency to just look at somebody and blame them for a mistake.
And that's not to say that people aren't responsible.
But within our own workplaces, the errors that occur are due to systematic problems.
Crunch is an example.
Crunch happens because planning wasn't in the right place or whatever it may be.
Lots of factors deliver into it, not just one individual.
And with my own team, I lead the UX team, when something goes wrong, when somebody makes a mistake and an error occurs, I talk to them about it, and I talk to the wider team, and I try and find out what were the circumstances around that?
What were the demands placed by different things?
What were the systems going on?
Because if I can find that out, rather than just shouting at one person, I can make sure that that does not happen again, and I'd never have to deal with it.
Whereas if I just blame that one person, they may not let me know next time something goes wrong, they may leave the company, they may not work better, they may just become resentful.
These errors may happen over and over again because I haven't changed what actually the problem was, which is systematic.
So, a summary. All humans make errors to err as human.
Errors are what make human behavior interesting, unpredictable, and fun.
We use errors all the time in game design, and we want those intentional errors, the errors that are part of challenge, part of the fun of games to occur.
What we don't want...
is the unintended ones that make players frustrated and leave our games.
And to do that we can embrace fun error, prevent unintended error, and look to systems both within our games and within our workplaces to really improve and not just focus on individuals.
Thank you very much.
So again, please remember the evaluation.
And I think I've got 10 minutes for questions.
No questions?
OK.
I know that in some of the cataloging schemes, they look like outright blind to you about some of the systems.
Okay.
So, the question was, I didn't quite catch the developer but there's a developer that pathologic?
The void?
Okay.
they have NPCs lie to you as part of a tutorial, presumably because the NPC is unreliable?
Is that what they're trying to establish?
They're trying to establish characterization.
The NPCs benefit if you do this.
Okay, right.
I mean, fundamentally, what you're trying to do there is you are trying to give players false information to form bad rules.
That's fine as long as the feedback is clear what's happening and what's happened.
Once they do follow that, like I assume the NPC laughs at them or informs them that they've been tricked or do they never find out? I'm not sure, I haven't played these games but again, if that's the intent to make these NPCs unreliable then that's perfectly fine.
It's okay for people to make errors and be tricked by your game, it's fun.
You just don't want that to happen and them to feel like they don't know why it just happened There's a there's a mic there if you could use it, sorry Hi Portal 2 I think does a version of this where in the beginning When you wake up Wheatley is trying to get you to do I forget what it is like talk maybe and he keeps you get the instruction on screen like press a to talk and when you do it you jump and then he's like no no what you're doing is jumping and then again it says press A to talk or whatever and he keeps saying like you know no that's a jump and then eventually he's like oh let's move on but basically it's just taught you A is jump and you're going to use that from then on and it's hilarious so yeah that might be a similar yeah and also that's a really good example of psychological saliency we tend to remember things that are funny or make us laugh And with that clear feedback loop of you press the button and you jumped and then there was him saying that you jumped and the repetition of it, that helps it be something that you learn and something you're not going to make a mistake about in the future.
Any other questions?
Okay, doesn't look like it. If anybody does want to talk to me, I'll be up front here a little bit and then I'll go around to the area.
