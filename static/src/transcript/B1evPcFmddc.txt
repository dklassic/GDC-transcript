With that said, our next talk is Randy Smith from TigerStyle.
With that, just going to go ahead and start.
Thank you.
Hi, I'm Randy.
I'm in TigerStyle, the studio that made Spider, The Secret of Bryce Manor, which you might have seen at last year's IGF.
And this is my friend Rob.
Rob is an avid gamer. He's also a very funny and creative guy.
And he loves the apocalypse, of course.
So his favorite game is Fallout 3.
This is his Fallout 3 character.
But most of the time, his character doesn't look like this.
Because if you know Fallout 3, you know that you can have different pieces of equipment, like a helmet that might give you a special ability or extra protection or something.
But it also changes the way you look.
And Rob chooses his equipment for looks.
And so most of the time, his character actually looks like this.
which is he's wearing a ghoul mask and he's got a George Washington wig on, although normally he sort of prefers the Abraham Lincoln top hat.
And so Rob has completed all of the good as opposed to evil side quests in Fallout 3.
So everywhere he goes, everybody's always like praising him and thanking this ghoul-headed Abraham Lincoln guy.
And at some point after he'd finished the game and all the optional content, Rob decided his character had gone crazy.
looking for more good deeds to perform in the world and thought that all the teddy bears were victims in need of saving.
All these teddy bears you can find around the capital wasteland.
So he would, for example, perform home invasions on innocent civilians to like liberate the teddy bear hostages.
Ideally in a stealthy way, but if necessary, he would mop up the victims and, I'm sorry, mop up the witnesses so nobody knew what happened.
Here's a wonderful scenic vista Rob made with his teddy bears.
Here's him chilling out with them.
So this is what I mean when I talk about player expression.
Like there's something very uniquely raw about the way he's approaching Fallout 3.
And I'm sure all of you can think of similar examples.
To me, player expression includes any time the player makes a choice from a range of valid options.
So it includes stuff like customizing the look of your avatar.
It includes customizing the gameplay abilities that your player has.
It can involve picking dialogue from a menu.
It can involve crafting and manipulating the world.
It also includes where you place your webs in our game Spider.
So there's this interesting thing that when you take these level complete screens at the end of a Spider level, and you take one level but multiple players, and you start to overlay their level complete screens, you notice that there are certain spots on these maps that every player has placed a web.
And then there's other spots where no player has ever placed a web.
But if you go to a different level in our game, that's not always the case.
So in this level, for example, there's only one spot that every player has placed a web.
And so this is really fascinating to me because it shows that player expression is the kind of thing that you can get a little bit of an objective measurement on, like sort of a temperature gauge on whether your game is expressive and where it might be expressive.
So you might be sitting there wondering, does this have anything to do with the game I'm working on now?
And that's a bit of an overstatement.
But I did want to bring this topic to the Indie Summit for a few reasons.
The first of all, unlike something like a big fancy renderer, player expression is the kind of thing that's mostly the output of thoughtful design.
And it's pretty easy to implement a lot of the time.
So that makes it within the reach of even like a modest indie studio.
Two is, I think as an example like Minecraft shows us, There's a lot of, you know, I believe that player expression is an area for innovation and growth.
It's like a frontier.
And it's hard to imagine the mainstream studios backing something risky like that, you know, like having been the studios that made Minecraft.
So I feel like indies are the one who are more likely to come up with these new ideas.
And lastly, because player expression is really close to the heart of what makes our medium unique.
This idea, you know, the promise that you can not just passively observe, but also participate in the art form.
So how do you do it?
I'm summarizing the approach I like with this expression, leave enough room.
And I'm going to break it down into three parts, the first of which is a don't.
It's don't tell the player what to do.
So what are some negative examples of cases where you might tell the player what to do?
Well, obviously, there's the so-called string of pearl games, which are these heavily gated, crafted, bottlenecked games explicitly for the purpose that every player has the same exact exquisite experience.
Obviously, that's not leaving any room for the player's creativity.
Similarly, certain types of very mathematical, mechanical puzzle games where the whole point is that there's only one right answer, also not much room.
But there's some more insidious stuff too.
Such as in the case of Scrabble, when I first started playing Scrabble, I felt like it must be a really expressive game, because you're given this random collection of letters and you get to make your own words.
So it could be more expressive than that.
But when you really get deep in Scrabble and you're trying to optimize for score, you find that you need to be proficient in words like this.
which, for example, two-letter words are important for Scrabbles because they give you extra flexibility so that you can place your really high-scoring tiles like Qs and Zs on the multiplier spaces on the board.
And there's all these other sort of mechanical advantages to these types of words.
But, like, you know, nobody who knows, who doesn't play Scrabble has ever heard of this word OE, which is a whirlwind off the fairy islands.
And that includes everybody who lives on the fairy islands, wherever those are, right?
you wind up doing this thing that's not especially, you know, doesn't seem like your own creativity.
If you go look at the worldwide global leaderboards for Scrabble, and you check to see who has played the highest scoring word of all time, you find that there's a ton of people who are all tied for first place with this word, oxyfenbutazone.
And it turns out this is the theoretical highest scoring possible word in Scrabble right now that they know of.
And it actually takes a lot of game mechanical contortions to prove that this could ever possibly be played in a Scrabble game.
Leaderboards, I think, are very revealing.
Like, you know, Mario Kart's this other example of a game that you get to choose lots of different characters, lots of different vehicles, but when you go look at the global leaderboards, you see that people who are really heavily trying to optimize have a much narrower range of choice available to them.
So, this is the problem with score, you know?
It takes a much more open-ended experience and it applies this numerical judgment to it.
And it's kind of, it's doing its job as a game design tool.
You know, it's us telling the player what we think is right and wrong.
in terms of how to play our games.
And there's some things beyond just like the pure numerical score that can also do this.
Stuff like the goals and tasks and objectives that we give the player, especially when those things are connected to the player's success and failure and progress through the game.
So this is a good point for me to start showing some of the stuff that TigerStyle is working on now.
I just wanted to mention that it was really intended in sort of this academic context to share with our fellow developers.
So if you're a press person, we'd ask that you contact us.
We can give you some more appropriate materials.
So.
Our new game is, like, the concept is you're, it's the future, and you're an astronaut, and you're sent on this mission to Mars, but something goes horribly wrong, and you're trapped in this cave where you discover life on Mars.
And not only do you discover life, but you find this whole ecosystem of these exotic alien life forms that all have, like, different strange behaviors.
And the structure of the game is you're trapped in each area of the cave until you...
generate enough biomass to open this thing we call an airlock so you can proceed to the next area.
And so the types of activities the player might do involves, you know, throwing seeds to plants, plants, you know, to grow new plants or like growing them with their light that they have on their head or like watering them as we're gonna see here.
There's watering this plant which is then going to generate some more seeds so the plants can reproduce.
You can feed the creatures in the world and after they've eaten they then reproduce as well.
So the different types of things the player can do to generate this biomass, which then lets them proceed.
And I'll watch a video for a second.
So there are these activities in our game that are connected to the player's progress.
They have to do things to proceed.
So it's a little bit like telling the player what to do.
So what's our approach to avoiding telling the player what to do?
We're actually extending this thing that worked really well for us on Spider, which is essentially that there's a very low threshold for success.
Like the player, in this case, doesn't have to grow much biomass in order for the airlock to open.
And every single plant, creature, life form in the game contributes at least a little bit of biomass.
So the player really just, we're kind of just asking the player, like, look, we don't care what you do, just make sure you at least play the game, all right?
And then you can keep going.
And there's a ton of depth on demand attached to it as well, where like.
You can always exceed the minimum requirements by quite a lot.
There's all these different types of bonus objectives, like balancing the ecosystem in certain ways that you might be able to do as well.
So that's one example of trying not to tell the player what to do.
A potentially more interesting example is this thing I call agnostic unit design, which is essentially like, unlike designing enemies in a game where the only thing they are is enemies and the only thing they mean to the player is something to fight, we tried to be more agnostic.
it's hard to tell if a given life form in our game is an enemy or an ally, if it's a tool you can use to accomplish something or if it's a hazard.
And the answer is always that it depends.
It depends on what the player's current goals are and it depends on what context they're in.
So for example, these little yellow blobs that you can see attached to the walls are these creatures that we call crabs.
And crabs like to eat seeds.
So when plants spit out seeds like this plant is about to do, the crabs will come and eat them.
And after they've eaten the seeds, they'll reproduce.
So this is terrible if you're trying to grow plants because they're kind of like the crabs are the enemy to the plants in this context.
But crabs also get eaten by other types of creatures in the world, such as this thing, which will then cause this thing to spit out seeds and reproduce.
So this behavior right here is great if you're anti-crab at the moment, and you're pro this thing if you're trying to grow more of these and less crabs.
So it all just depends on what you're trying to accomplish.
The behaviors are always the same.
It's just that the player's goals change from time to time.
And if you watch that crab on the left, he's gonna, after he gets done eating a seed, he's gonna reproduce.
Which isn't very sexy, I'm sorry.
We're working on that part.
It's like a little porn music.
Okay.
So the second part of Leave Enough Room is give the player tools to say things.
I like to say that when the player's being expressive, they're trying to say something, you know?
But I'm gonna phrase it a little differently.
I'm gonna say, empower the player to generate data, because it's gonna match up better with point number three.
One of my favorite examples of this comes from a series of games I worked on called Thief, which are these adventure story stealth games.
And here's a really typical mission of Thief, is that you're breaking into this guy's castle, and you're here to steal his special treasure, and there's all these guards that you have to sneak around, right, that he hired.
And so we found that this one player went around the entire castle and knocked out every single guard in the whole place, and dragged them all into the dining room, their unconscious bodies, and sort of like left them on the tables and...
you know, leaning on each other and everything.
And then he went and got all the wine bottles in the level and he threw those in the dining room too.
And so, you know, the idea is that when the Lord of the Manor comes home, he's gonna find all of his treasure missioning and he's gonna find that all of his guards apparently had this long debaucherous night and that's why the thief got to break in, right?
So I really love this example.
It's pretty similar to the example with Rob and his teddy bears.
And it can only happen because, you know, unlike some games where all of the detail in the environment is sort of baked into the walls.
or it's only destroyable.
We actually supported the player picking objects up, moving them around, putting them in different places, changing their state a little bit, which seems like an extravagance sometimes, but it is an example of empowering the player to generate data.
The problem with something like dialogue trees is, yeah, the player gets to give you some data here, but it's easily enumerated.
There's just three choices.
And by that same rationale, our game on Mars, It has a lot of expression in the sense that you can take any seed that you find to bring it to any other part of the cave, you can plant any plants in any level, which is a lot of freedom.
But you can only actually plant things in certain spots that we call fertile terrain.
So theoretically, you could enumerate all the different combinations that were possible in this level.
Two million is a nice number, but we can do better than that.
So there's other ways that you can modify the plant's data.
So there's even more data available to the player.
In this case, you know, this, this creature spits out water, and if he spits it off to the right, then he's going to water this other plant, and that thing's going to reproduce.
If he spits to the left, he's going to hit the fertile terrain, and then he'll be reproducing himself.
And the player has control over which way this thing is facing by using their headlamp, as we just saw.
We thought about doing a few other things, too.
Maybe you can experiment with different plants and feed them different things, and they would wind up with different abilities.
Maybe this guy winds up being able to spit his seeds much further, or he actually spits them out in a balloon, so it floats up.
Either way, this would have a pretty significant impact on how this life form proliferates through the space.
We've talked about giving the player some pretty subtle types of visual, aesthetical control over the creatures, just enough to give them a sense of organic variations so they don't all look identical.
And really the point of all this stuff is that in addition to which plant is where, you have this little packet of data that's very much under the player's control associated with each plant.
And so it gives the player much more range to express different solutions or different types of combination behaviors that they're trying to create, or just craft the way the environment looks.
And it becomes very impossible to find all the potential combinations.
It's no longer innumerable.
And so the last part of Leave Enough Room is responding to that data.
The player has said something, and you're going to notice.
The player has generated data, and then you're going to try to make use of it.
So kind of an obvious example of this is, hey, if you customize your avatar in Rock Band, then he doesn't just disappear.
You get to see him up there on stage doing his thing all the time.
It includes the level complete views in Spider, which are like this special view mode that you only get when you finish a level.
It's the only way to get it, and we're sort of saying like, hey, look at all the cool stuff you did.
And of course, in games like Fallout, you have a lot of camera control, and when you give that to the player, they're able to generate their own screenshots and share them with people.
This is another great metric of when you know you've been successful at player expression.
Like Minecraft is clearly successful in as much as players are sharing their creations with each other.
I really like achievements as a way to notice what the player is doing.
So if a player is playing on one of the very small levels in Spider and they start to say like, hey, I wonder if I can fill up this entire space with my webs.
At some point, they're going to get an achievement called Crowded House.
You know, and that's just us saying like, hey.
we saw that you're doing that thing, we noticed, and we think it's cool.
You can take achievements a little bit too far, right?
The problem with achievements is that they make it really clear that the designer already thought of this creative thing that the player thought maybe that they were the first person to think of, right?
So you have to be a little careful with it.
The point isn't to anticipate every single thing that the player might do.
Instead, we like to use achievements as a way to sort of suggest different directions that the player can explore.
So we are giving the player style points for trying to play the game in this cool way, or we're noticing that they're trying to accomplish something really difficult.
But we still leave lots of room for them to follow up and explore more space.
I like stats as well.
I think they're even more open-ended than achievements.
They're kind of like this measuring stick that you give the player that they can use to validate their own ideas about what might be possible in the game.
Spider tracks stats like the largest web the player has ever managed to create, or the longest jump they've ever done, and also tracks their score.
So I mentioned before, like in Scrabble, that score has this profound psychological impact on the player.
And I think one of the things we did well in Spider is that we sort of tried to position it more like a stat.
It never blocks your progress.
We only call so much attention to it.
So it's another one of these depth on demand features that's available to players who are interested in that kind of mastery.
The concept of noticing and responding to the player's data is the area in all of this stuff where I feel like there's the most potential for innovation.
It's like the frontier, because I don't think we're doing nearly as much as we could.
So here's just some ideas that we've been thinking about lately.
We have this idea that one way you can respond to the player's data is by sort of like heaping more data on top of it when certain conditions are met.
In the case of our Mars game, if you plant sort of like a combo of three plants right in a row, maybe that attracts ambient creatures that have some sort of gameplay significance.
Or it could change the plants in any of those ways I talked about before, the appearance of them, their movement, their gameplay relevant abilities, all that stuff.
So the idea is that you're taking the player's data and you're bringing it even more to life in ways that they might not have anticipated.
This is something that Dwarf Fortress does really well.
It's like any little object that you drop into Dwarf Fortress.
your little ant farm of dwarves that you're working on will always respond to it and have something to say and do about it.
And here's some questions I'm still wondering.
Like, what is the appropriate response to this scenario?
Like, what did this player want?
Like, maybe they wanted to get to the mission debriefing and hear that the Lord of the Manor has fired all of his guards.
But much like the achievement, that feels like a very specific response.
It's very limiting.
It tells the player that somebody already thought of that.
So that's assuming we could even detect that case.
And if we could, maybe we could make a stat out of it, like number of guards fired.
And that would be maybe cooler, because unlike the sort of the dead end of the achievement, this feeds back into the player's sense of creativity.
Like, oh, now they have a new stat to explore.
And if we could do that, then what else could we do?
What are the different ways that we can respond to the player?
And in this case, what did Rob want?
If somebody walks up to him when he's doing this, Does he want them to say, hey, why did you collect all those teddy bears?
Well, I think probably not, because again, that's a dead end achievement kind of a response.
And also, it seems like it'd probably be impossible to implement, right?
But you could imagine implementing AIs that can detect collections of objects.
So you can imagine him saying, wow, lots of teddy bears.
In which case, Rob might think to himself, what else can I collect and get them to respond to?
You could imagine AIs knowing that different objects have different properties.
And so they could say.
that looks soft, and then, you know, maybe Rob thinks I should knock the guy out and throw him on top of my collection of teddy bears.
Because he obviously needs a nap.
And lastly, you could do a stat, you could imagine this guy saying, like, you are the sixth craziest person I've ever met.
At which case, Rob might wonder how to become the first craziest person that guy has ever met.
And that is it.
Thank you very much.
We've got five minutes for questions.
You got to use the mic.
That's how we know it's legit.
Yeah.
Question.
OK.
When you think of a game, then, do you think of this aspect first?
Or do you think of the concept itself first?
Or how linked are they?
When I think of what?
When you think of when you start a game.
When I'm in the conceptual stages of a game?
Right.
In the conceptual stages of a game, do you just think of an idea for a game first?
Or do you actually think, I want to make this type of game first?
I'm sure this answer varies from designer to designer.
For me, I think at the very origin of a game's idea, it's a lot of different things.
It's sort of like fictional concept.
It's mechanic.
And I would think of these things are more like the principles or philosophies that are in the DNA of me as a designer in my studio.
They come pretty naturally.
I would never make a String of Pearls game.
Do you have a follow-up?
No.
Okay, cool.
Another question, please.
One.
Okay, cool.
How crazy would it be, in your opinion, to...
Five.
Excellent.
Next question.
I'm sorry, go ahead.
To try and create an AI that can respond to these customizations in such a way where I mean, conceivably, if you had a smart enough system, it might respond to the exigent circumstance of the wine bottles and the guards being there.
Now, that would be a pretty robust system.
It's like, no, beyond Watson level.
But if you can respond to things in the way that a person would, it can actually have creative responses that are deeper than just a programmer trying to outthink the possibilities that a person could come up with.
I'm not sure what your question was.
I mean, I guess a pretty important caveat, right, is I don't know if it would be smart to pursue any of those things at the end.
Like, they seem like they would be really challenging.
But also, as I said, I really do think this is like one of the frontiers.
Like, I think Minecraft kind of shows you that people are really interested in expressing themselves, and people really like the features in Minecraft that are more responsive, where like you place an object that has gameplay meaning, as opposed to just is visual, or whatever.
And the things at the end I was suggesting were some more sophisticated potential thoughts, concepts about ways we might respond.
Some of them might be more possible than others.
One thing I didn't mention is that, I'm not going to give any spoilers, but we're thinking about using some of the ideas that were present in the thief example to try to drive multiple endings in the game we're working on now, in the Mars game.
OK.
Cool.
Hi, Randy.
Trent Custers.
Hi.
Basically, I'm just wondering in terms of.
the generating data and what it sounds like to me is it's just ensuring that there are those feedback loops for player behaviors that they go out and they design an experience themselves. So it's about them reaching into the game and the game I guess touching them back when they put their hand out. So with something like Minecraft you could imagine that the feedback loop is actually in the community where Minecraft doesn't actually provide the feedback to you for building these you know, building the USS Enterprise to scale. It's the community that does that.
Is there a way that you...
could balance this between, say for example, stats are a brilliant thing to put into the community, onto leaderboards and stuff like that.
I guess my question is, how do you know from the start and whereabouts do you start in development planning whether these things are social community feedback loops, this data, or whether it's actually in the game encoding these systems?
Um, you know, anybody's guess might be as good as mine.
One thing I would say is that, um, the Feature, there's sharing features, right?
There's features which are like, take a screenshot, post it on Facebook.
Like, hey, here's the Tony Hawk video capture editing suite.
Like, those are clearly features which are intended to help the player record and share their experience.
Those are obviously always gonna, to generate more involvement with the community.
On a personal level, I'm more interested, I think multiplayer and sharing and community and all that stuff is great.
But I would really like the games, even on a single player capacity, to be able to respond more to the player.
Yeah.
Because then you're just multiplying when you add the community.
Yeah, exactly.
Thank you.
Thank you.
I think we have time for one more question.
Evan Ballster.
What are your thoughts on sort of the the incompatibility between single player gaming and expressive gaming whereas as opposed to the incompatibility between a single place single player goal-based game and an expressive game.
A single player control-based game in an expressive game?
Goal-based. Goal-based game. Based on a specific objective the player needs to accomplish as opposed to these.
I'm going to try this answer.
And if it doesn't work, just come back up after and talk to me.
I mean, I think it's just kind of a question of how strongly you're suggesting what the player needs to do.
Like, if you're very specific about what the player's supposed to be doing, and there's only a small number of ways to accomplish those goals, then, of course, you're narrowing the range of options for the player, which is really just leaving less room for them to be expressive.
It's only telling them, like, here's how you're supposed to play our game.
Whereas if you give them much more open-ended goals, or if you don't give them goals at all, which is sort of the Minecraft approach, or the Dwarf Fortress approach, where there's kind of ambiguous goals, there's much more room for them to be creative.
The thing is the player will sort of decide for themselves what the game is, what they're supposed to be doing.
Minecraft, it needs a lot of guidance, but one of the things that works is once you realize your job is to stay alive, then you're like, well, now I'm staying alive, what else should I do?
I've learned how to build stuff, maybe I'll build some more stuff.
Superficial stuff.
I don't know.
I'll check it out.
You should follow up just because we've got to keep rolling because we've got really tight presentations.
Thank you guys very much.
And come up and talk to me if you have more questions.
