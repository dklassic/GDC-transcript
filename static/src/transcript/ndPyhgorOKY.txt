All right, we're live.
Welcome, everyone.
My name is Linda Fane, and I'm the senior agility coach at Bungie.
So I've spent my whole career helping teams of creative people collaborate more effectively, and had the opportunity in the last two years to help Bungie transform their ways of working to agile and lean methodologies.
So I'm essentially an agile coach, but I'm internal to Bungie.
So I'm here today because I wanted to share with you what's been really a powerful, yet simple practice that we've experimented with at Bungie that's enabled us to achieve the level of synchronization that we need to make such a massive, unified game at scale like Destiny 2.
I've nicknamed it Epic Sync.
because Bungie's Destiny 2 syncs can be epic, because Destiny 2 is epic.
But I'm hoping that you'll find the concepts and approaches useful, no matter what size your studio may be, or what level of synchronization you want to achieve with teams working in parallel.
So show of hands, how many of you attended Patrick Kelly's talk on Wednesday on Bungie's transforming their methodologies?
Excellent, about 50% or so.
I'm going to recap a couple of items from that and then pick the story up from there.
So throughout his 20 plus year history, Bungie's had a process for making games that was successful and served us very well, served our players very well.
We started with a typical smaller studio model with our work organized primarily around disciplines.
So art, animation, design, engineering, test, with a producer organizing their work, managing the handoffs between the disciplines in a fairly traditional waterfall workflow.
So we carried this structure through from the Halo days into the original Destiny development.
As one of our producers said in a post-mortem, right when the original Destiny was shipping, it said that the hardest thing to do at Bungie was anything cross-disciplinary.
Well, that wasn't great because many of the rich, integrated experiences in Destiny involved work produced by multiple specialty disciplines.
So to meet this challenge of more tightly integrating disciplinary work for Destiny 2, we started conducting early experiments with integrated small teams.
So this is our icon for small teams, and you'll notice the disciplines are all in the team unit.
So Bungie reorganized the content developers into small teams following the Agile Scrum model.
These teams were designed with the characteristics, they were cross-discipline, so you had level designers, engineers, world artists, tests, working in close-knit unit, physically co-located, attending daily stand-ups, et cetera.
Typically seven to nine team members, that's a sweet spot for managing collaboration and communication.
When you get beyond about ten people, the communication becomes, the overhead starts not having value, becomes unwieldy.
So the teams had a clear mission and focus.
Even a unique identity.
For the first time we had cross-discipline teams that had a unique identity.
They were semi-autonomous, and I say semi-autonomous, some localized decision making within appropriate constraints.
As Connor Crawley said in his talk yesterday on change, on managing change, he said, he called team autonomy freedom in a box, or freedom in a frame, I think he called it, which is a really good way to look at it because people think, ah, autonomous teams, we're just gonna have people running amok.
But no, you can allow autonomy or freedom.
You can release the teams into clear constraints.
So then we also focused on creating holistic player experiences so the individuals weren't focused just on their individual discipline contribution.
They were actually now focused on a unified player experience and actually wrote the requirements from the perspective of the player in the user story format that's known in Agile.
So we were achieving close collaboration amongst people of different disciplines, breaking down silos.
This provided visibility into an understanding of each other's workflows and unique challenges.
So an artist gets to know what a designer's workflow is, and it develops trust, empathy, and they share common goals.
So cross-discipline teamwork is where the real magic happens for creative teams, in my experience.
All right, so here we are now making the massive unified experience that is Destiny 2 with roughly 40 plus of these newly formed small cross-discipline teams.
The next challenge we took up was how to best synchronize these semi-autonomous units.
You can imagine.
I made it.
It looks like a mess.
We've got all of these small teams who are really focused.
They know who they are.
They know what they're doing.
but they're all producing work that goes into a unified game.
So I wanted to illustrate the sheer scale of Destiny 2 team collaboration by showing you different moments in Destiny and allow you to see some of the teams that touch these moments.
So for some of you that are familiar with the game, this is the PVP, the crucible.
So we have a PVP team, PVP maps, weapons, armor, lighting, VFX.
Those are all small teams of seven to nine people, then collaborating with, in this case, eight other teams.
Destiny's environments.
We have a massive playable area spanning several planets, each with their own art palettes.
We have concept art palettes, skies, et cetera.
Public events.
So you can meet players, tackle shared challenges, and you'll recognize the spider tank boss on Titan.
So we have the abilities team, audio, progression, economy, et cetera.
The director, the underlying destination maps, allows players to explore the solar system.
Complex social systems in Destiny 2, including matchmaking, clans, guided games, social spaces like this, you'll recognize the farm.
And then character vignettes, cinematic sequences.
This one featuring my favorite character, Hawthorne.
So we achieved the benefits.
Here we go back to, wow, you see all these teams.
You saw what we're producing and how integrated the world of Destiny 2 is.
So we needed a team structure that was as integrated as the world we were creating.
So we achieve the benefit of focus and of cross-discipline, tight-knit units.
So those units, then, working in parallel, are driving a complex web of interdependencies between teams.
Some of you might recognize this in your own work.
The red lines represent the dependencies.
Just keep building, building, building into a web, web of dependencies.
So it's a little jargony, but dependency is work that your team requires from another team in order to complete your features.
It's normally hidden work, hard to track.
Sometimes you just might have a stomachache and you're just thinking, oh, there's something we need from some other team.
I don't know what it is, but I don't feel like we can complete our work.
So dependency is a thing that calls out when you are dependent upon another team.
Textbook agile scrum teams don't have dependencies, but unified experience teams building experiences at scale like Destiny do.
So it can be overwhelming. How do you sort this out?
So how to synchronize these team units with each other?
How do you provide the measure of autonomy?
and maintain continual alignment while managing these dependencies.
So how we do it is what I'm going to share with you today.
First, why is alignment so important?
So this is a cartoon by Henrik Nyberg, one of my favorite agilists.
Why is alignment important?
Would you say it's not funny?
Yeah, I know.
You just feel, oh gosh.
So in this, like in any large scale human endeavor, you have teams working in parallel.
Alignment is key.
In this example, you have two teams working autonomously.
And it's clear they understood the end goal, right?
They needed to cross the expanse of water.
So they had that end goal.
Like they started out maybe in a huddle.
Hey, guys, we're going to cross this expanse.
Yeah, we know what to do.
So they started out to achieve their goal, but they clearly lacked some sort of regular communication or coordination to stay aligned.
Also dependency management.
So the teams working in parallel had a huge dependency, right?
They needed to connect or hook up.
But that dependency was clearly not identified or managed.
Famous example of a lack of alignment causing problems.
Do you know what this is?
It's the Mars Orbiter in 1999.
So NASA lost $125 million Mars Orbiter.
And the core problem was that Lockheed Martin, the engineering team that was building the software used, building the thruster software for the orbiter, used imperial English units of measurement.
Well, the agency's team, building the software system, taking in the information, actually used the metric system of measurement.
This caused the orbiter to lose navigation and actually crash into the planet.
So they finally got there.
It went all the way to Mars.
It finally got there.
They were going to celebrate.
And then all of a sudden, it couldn't move, and it just went down and then crashed.
They investigated and quickly found the misalignment.
And that misalignment had existed for nearly 10 months, yet it had gone undetected.
They didn't realize that they were using different systems of measurement.
So the main point, teams of very smart people can get out of alignment and cause problems.
So it's important to understand that when we have semi-autonomous team units working in parallel, there's a natural drift that occurs as time progresses.
So I did this animation to.
illustrate you have small divergences in understanding about scope or areas of responsibility that become wider as development goes on.
If teams get more and more out of alignment, after a certain point, there's no one individual team has the power to correct it.
They could maybe even see it coming and they just can't do anything.
At Bungie, Patrick, the head of production for Destiny 2, would use the analogy of a fleet of sailboats.
The teams were like fleets of sailboats, an armada, all heading to the same point.
We just needed to coordinate them.
So with our new structure, 40 plus small teams developing in parallel on Destiny 2, we asked ourselves what could we do to ensure that we stay in alignment, in sync.
So to search for answers, I went back to the fundamental Agile values and principles.
So another show of hands, how many of you are familiar with Agile values and principles?
Quite a few, about three quarters.
Yeah, we, you know, there's a lot of wisdom there.
There's four values, twelve principles, and some of them you scan over and go, oh, that doesn't apply to me.
But you look in there, there's some real nuggets.
So I went back to the values and principles to see, you know, is there something in there that could help me with this issue that we were trying to solve for?
So the first value from the Agile manifesto is people and interactions over process and tools.
So it's not saying process and tools isn't important, it's just that it's not a replacement for high quality human communication and interaction, collaboration.
You add to that the Agile, sixth Agile principle, which is face-to-face conversations are the most efficient, effective means for communicating.
Research shows that 93% of communication effectiveness is actually determined by nonverbal cues.
So body language, facial expressions, tone, inflection.
It contains a ton of information.
Furthermore, face-to-face communication is found to be the most efficient.
You can achieve maximum productivity with minimum wasted effort.
In this digital age, we think that asynchronous, indirect communication like...
group emails or shared documents up on a share where people contribute asynchronously.
We think that's more efficient.
It's a more efficient way to communicate with groups of people.
We think it's more efficient because it feels more efficient.
You know, you add a bunch of people to the CC line and hit send.
There, we communicated.
But if you really look at it, it's not high quality communication.
Communication is a sender and receiver, so you need to, you have something you want to say and you have to get, the receiver has to actually receive it, and face-to-face communication is the best way to actually have communication work.
Face-to-face communication with all its social cues has also been proven to deepen understanding and empathy.
and help develop trust.
So empathy, trust, collective understanding, those all have been proven to speed up the work of teams.
In addition to the values and principles, I also looked at the agile practices of rituals and ceremonies.
So in agile, we have rituals or ceremonies, a cadence.
of team collaboration.
Agile teams use rituals to keep synchronized within the team on a daily basis, so you might have daily stand-up, the demo review, you've got backlog grooming, team retrospective.
It's all built in.
You have a plan, do, check, and act, plan, do, check, act.
You've got this ritual cadence.
So I'm familiar with those, the Agile Scrum rituals, but those were actually to help teams stay aligned within themselves.
You know, was there a ritual that could help create a situation where teams can align cross-team, not just within themselves, but with other teams?
So could these concepts, the values and principles, rituals and cadence, you know, could these concepts hold the key to synchronizing 40-plus teams on Destiny 2?
So I did this calculation, face-to-face communication plus regular ritual plus many teams equals what?
You know, was there an Agile ritual?
So to look for the answer, we explored the frameworks that were emerging that applied Agile and Scrum concepts at scale, like the Scaled Agile Framework.
Scaled Agile Framework is known as SAFE.
If you want to go to the website, Scaled Agile Framework, it's an incredibly overwhelming enterprise solution for Agile.
Very kind of scary and overwhelming.
So I just consulted that and started to see how it might apply to Bungie.
So essentially, briefly, it looks at Agile practices in three levels of your organization.
So you have the team layer, the program layer.
and the portfolio layer.
So this is converted for Bungie's purposes.
Team layer, program layer would be an area or a feature in the game.
Destiny franchise would be the actual release.
So at the team layer, scrum teams are the atom.
They work for the most part in two-week increments, sprints, and deliver user stories.
The first generation scrum cannon focused almost exclusively on this layer, describing the practices, roles, rituals, exhaustive literature.
You just, you know, look up Scrum, you'll see a lot of information about this team layer.
It has time box iterations, we use at Bungie two-week increments.
But what I was really interested in is in the program layer.
So I asked some SAFe experts, I said, is there, you know, is there a ritual in SAFe that helps synchronize teams at that layer?
Sure enough, there was.
It was called Program Increment Planning, or PI planning.
So bear with me, it's a little jargony, PI planning, Program Increment Planning.
So what is a program increment?
It's a collection of work that is the output of many teams.
It has a time box iteration like a sprint, but the time box is in 12 weeks, or what would be six sprints.
So it's typically.
There was, so the PI planning ritual brings teams together in one place, one time to roughly plan a quarter's worth of work together and identify and resolve interdependencies.
So the collection of quarterly scope in SAFE is called a release train.
So we have the program increment planning happens at the beginning of the quarter. The quarterly release train, think about it as a container, like use the analogy of a train.
It's a container like a train car.
of work for that quarter.
You put stuff onto the train car, and it's planned in that big room PI planning exercise.
And then like a train, it leaves the station to get developed over six sprints until it pulls into the next station 12 weeks later.
So PI planning then is a process of determining what do you want to put on the next train that's leaving?
You can think, what is the most important feature that we need to learn from this quarter?
You know, are there features that contain a high amount of uncertainty that we need to reduce?
What are some of the big bets we want to prove out?
Let's put it on the train, get it done, pull it in the station, and then we'll reassess.
So PI planning, I had a name for it, but how does one do PI planning?
I wanted to know more.
So I stumbled onto a case study by Henrik Nyberg, who's an influential agilist and agile thought leader.
who has a really playful, accessible approach to scaled agile, which you need because it can be pretty daunting.
He's worked with both Spotify and Lego, and you can go online, I see YouTube videos.
He'll walk you through some of the scaled agile rituals that he has experimented with.
So I took the case study for Lego.
I was like, literally I took the case study, I got the YouTube video and I transcribed it and put it into a document and worked with Bungee production.
We looked through it and we figured out how could this work for us?
How could we do PI planning or big room planning?
So we used it as a template for starting PI planning at Bungee.
This concept of...
quarterly big room planning exercise, an epic sink.
What could this get us?
We had to weigh the cost-benefit.
So instead of drift over quarter, we would tightly sink every 12 weeks.
And then we would develop and then sink, develop, sink.
A wonderful byproduct is that we could actually allow a measure of freedom and autonomy for the teams during the development cycle, during the sprints, knowing that we'd be regularly coming together into alignment in 12 weeks to tighten things up.
So it reduced the amount of micromanagement every sprint.
It's like, no, give them freedom.
They're getting their up, and then we get on course.
Like the analogy of a flotilla of sailboats.
You know, one goes off, you rein it back in.
Our pitch, so the concept of PI planning in hand and understanding the mechanics, Bungee Production made the pitch to the Destiny 2 development teams and leadership.
The pitch was, what if we got everybody in a room at the same time, face-to-face, to sync on the vision for the quarter, plan the team's work, identify and discuss and resolve dependencies?
Bunjee's first planning day was born.
So our Epic Sync, our PI planning, we call, it took us a long time to come up with the term, planning day.
If you try it, you can come up with something different, but we call it planning day and it stuck.
So as you can imagine, there was initial skepticism.
Take the entire development team of Destiny 2.
offline for a day. Are you kidding? It was a new idea and fairly large undertaking. It was a bold move. So you might be wondering, you know, how did you convince people? Well, there was a general recognition that the way we planned and communicated, largely through indirect means, was not optimal for the highly integrated development work we were doing on Destiny 2. So we had an idea to try that had been proven successful in other companies.
Most all were willing to try it at least once to see how it goes.
So that's how the production worked.
It's like, OK, let's just try it once.
If we hate it, we'll never do it again.
The spirit of being willing to try something bold like this and learn from it is one of the many things I love about working at Bungie.
So we went from this to this.
So what are you looking at?
This is the table layout for a hotel ballroom.
All of the content teams working on Destiny 2, 300 people in the same location for a full day of planning, and face-to-face cross-team discussion, and agreement, and commitment.
So all of those dependencies that were previously in people's heads, or in their notebooks, or free-floating anxieties.
were converted into physical entities, post-it notes, gathered in a central location in the room, what we call the dependency board, transparent to all.
So here's, you can see where planning day occurs in our build cycle.
So we had already had.
well-established seasonal build cycle.
As Patrick mentioned, we had winter build, spring build, et cetera.
So that comes at the end of a 12-week cycle.
So we put planning day at the beginning of the quarter, internal play test at the end of the quarter, learned from it, and then decided what we wanted to put on the next train going out in the next quarter from that, and so on, and so on.
So if you look at the case studies about PI planning, you'll see that some people do it in two days.
So they take the whole company offline for two days.
We couldn't do that because at Bunchy, we have so many releases in flight, we couldn't take a whole team off for more than one day.
So what we did is we ended up breaking planning day into essentially three different steps.
The first step is one to two weeks before we prep with the leads.
So we have the game director and design directors get all their ducks in a row as far as what's the product vision for this quarter.
And then they talk to the area product owners, they break the epics down to features.
The features are then given to the teams, the product owner of the teams.
And the teams talk through features, make sure they understand what they're trying to do.
Also, what's their capacity for the quarter?
You know, who they have to actually produce the work.
So that's done.
And then we get on site for cross-team planning day.
And that's when we plan the sprints out, identify the dependencies, have the face-to-face conversations, and revise team plans and commit.
Then afterwards, you can follow up on conversations, work on stories, and also check in on the dependent work.
But the actual day is the focus, and we don't let anybody leave the room until we've resolved all of the dependencies that have been identified.
Here's an example of our agenda.
I just thought it would be useful, a practical thing for you to have.
Essentially, there's four parts of the day.
The first one is welcome and goals for the day.
So this is where the creative leads will get up and talk about the pillars, the goals, the vision for the quarter so that then the teams can figure out at a more granular level how their team feeds into those pillars and vision.
Then we have the small teams get to just focus within their team and their table and do their planning for the quarter, make sure that they've got the.
capacity understanding and also what their scope is.
Then comes the dependency discussions.
Once the team has figured out essentially what they're doing, they've realized, ooh, we need this work from this other team.
So this is when we now have the cross-team communication.
And then lastly, we wrap up, share major decisions made during the day.
So kind of bring it full circle.
So we played with other components for the agenda.
For example, we used to have an activity that Henrik Nyberg put in his case study where the teams share their plans around the room, like a science fair.
You have each of the teams have their boards and you go around and we just found it took too much time and it wasn't super valuable for us.
So we changed it to essentially sharing major decisions that were made during the day and people like that better.
All right, so I'm going to talk you through some artifacts.
Trying to make this really practical.
So there are four artifacts that we use for planning day.
The first one is the team board.
The focal point for the team members planning out five or six sprints worth of work at their tables.
It has the team name, their mission, their commitments for the quarter, and a place for dependency Post-it notes.
So summary user stories then go onto the boards in the sprints where they're essentially slotted.
And the team does a costing exercise, so they know how much, roughly, effort each of the user stories will take.
So that's a team board.
The second artifact is a dependency board.
So you'll see it's a grid that has sprints down the left-hand side and all the teams across from right to left.
And it's a big piece of butcher paper you'll see, I'm going to show you a video, towards the end where you can see it in action.
So it's a big thing of butcher paper with grid lines.
And I actually can reuse it over and over.
And we put it in a prominent place in the planning room.
So the third artifact is electronic tracking or TFS.
So we use Post-it Notes to help facilitate the face-to-face communication and collaboration, because there's nothing like that.
Eventually, all the work goes into what we use, TFS, and people might use JIRA.
So that is the single source of truth coming out of planning day.
And you'll see teams, we actually have monitors on each of the team tables, and you have someone that's inputting the items for their backlog.
That way you don't come out of planning day feeling like you've just created a bunch of work.
You get the work done.
So last artifact is RiskBoard.
So this is how we escalate things to leadership, to the release leadership team.
If there's something that teams can't figure out themselves in cross-team discussion, it gets put on the risk board.
And managing the risk board and resolving those risks is ownership of the release leadership team or what's called the triage team.
Okay, so those are the artifacts.
So I'm gonna go through the roles.
Planning day roles.
So this is the team structure that Patrick showed you yesterday, scrum master, product owner.
At Bungie, scrum masters are roughly producers, maybe more junior producers that do a specific team.
Product owners are often designers, but not exclusively designers.
And then you have the other disciplines represented.
So each of those teams have a table at planning day.
The product owner's role is basically to prioritize a team's scope.
And they do the negotiations and the trade-offs and ultimately own the prioritization.
And then if new work comes in, they determine, should we do it?
The Scrum Master Producer facilitates the team planning and dependency identification.
They drive feasibility discussions.
So let's say new work comes in, a dependency gets put on the team, they ask, can we do it?
They determine, can we do it?
Then there's a couple of other roles that the team can self-organize to do.
We've got dependency runner, this person who brings the red post-it notes.
We use the color red for dependency.
So whenever you see it floating around in the room, you know it's a dependency.
So they check the board for their team.
Someone who manages the team board as well as someone who's entering work into TFS.
All right, so that's artifacts.
the primary roles and these are the support and helper roles.
So we have a game director and design director on site that provide clarity on vision and pillars.
So they've given their presentation, but you know, that's great.
You see a PowerPoint that says these are the vision, but then sometimes you have trouble as a team figuring out, well, how do we connect to that vision?
The people that essentially own that vision are in the room so you can go right up to them and ask, how does my team, I'm on the sandbox team, how does that feed into the vision that we have for this quarter?
I mentioned the release leadership team, we at Bungie also call those the triage team.
So there's a cross-discipline leadership team that is final, kind of buck stops with them as far as decisions on release planning and they can unblock the teams.
The amazing value of planning day.
I just can't overstate this is the fact that you have all of the decision makers on the release in one room.
I mean, imagine, you don't have to imagine, but how hard it is to get attention and decisions made just through indirect means, through email, trying to schedule meetings with really busy people.
You can get one person, but not three of them, and then you get all of this triangulation.
At planning day, you have everybody in the room.
So we even had one team report that they had an issue that was lingering for literally two months.
They got into planning day, had all the decision makers there, they got it done in 10 minutes.
It's very efficient.
People think, oh my God, it's not efficient to get all these people in a room.
It's more efficient, trust me.
And then there's the agility coach or the chief scrum master, that's me.
You'll see me in action in the video I'm going to show later in this presentation.
So I'm like a sheriff.
I don't let anybody out of the room until all the dependencies have a resolved sticker on it.
I chase them down.
All right. We talked through the artifacts, the agenda, the roles.
I now wanted to illustrate how one user story or...
dependency might move through planning day.
So that way, I've given you all these kind of explanations, but now I just want to show you if we take a user story, how does it move through planning day and how do we use artifacts to get the work committed to?
So I wanted to use a user story that would relate to Destiny 2 campaign.
We had something called Zavala's Ward of Dawn.
which was this in-game vignette that was really complex.
It wasn't an external vignette.
It was an in-game vignette.
So what I'm going to do is I'm going to show you the sequence as the player experiences it.
And then we'll break it down and see how this collaboration worked to make this possible.
This is the really loud one.
Incoming!
Fall back to my team!
So in that you noticed that you were just you're shooting cabal at the opening campaign then all of a sudden Zavala starts talking and then he spreads his bubble shield and you have the cabal coming at you and their missiles are being deflected by that shield.
Why is it so complicated?
So the campaign team would normally be able to take care of most everything within their campaign, but that required in-game play adjustments.
So there were individual adjustments that had to be made, as well as game objectives that were impacted.
So that required them to basically be dependent.
on what we call the NPC team or the vignette team.
So in order to execute on this, they needed help, very clear help from the NPC and vignette team.
So how would this user story and its dependencies be managed during planning day?
All right, so let's say this is the campaign team.
They're at their table, they've got their team board, they've got their backlog.
So they had a campaign team.
We build the first six missions of the game.
That's their mission.
So what they do is they create a sticky note for the user story, for the overall experience.
And using the user story format, we do it from the player's perspective.
So as a player, when I clear the enemies in the tower, Zavala's protective ward of dawn is triggered.
So that's the end player experience.
So though the campaign team is responsible for the overall experience, Award of Dawn, Bubble Shield itself is created by the NPC vignettes team, not their team.
So they create a physical dependency in the form of a red post-it note.
To NPC team, from campaign team.
And they'd say what sprint they would like it in.
Okay, then the dependency runner from the team.
which is considered the requesting team, goes to the dependency board, puts the post-it note into the column for NPCs and in the sprint that they wanted.
So it would look something like this.
The requesting team would add the post-it note in the NPC column.
They want it sprint six.
So the providing team then checks the board and picks up the dependency.
The main job of the Post-it note, the Post-it note artifact, I as an Agile coach, you know, Agile coaches love Post-it notes.
But they're really useful because so much that we do as knowledge workers is invisible.
So Post-it note actually makes a thing, makes a physical thing of a thought.
And then that physical thing comes into being and then you have to deal with it.
And in this case, in planning day, it basically gets handed around, and it actually represents a conversation that needs to happen.
And eventually, it represents a commitment.
So the main job of Post-it Note artifacts is to drive a conversation.
It's very effective.
So driving conversations and bringing them to resolution is the main point of planning day.
As someone said to me, the process and the ritual is a way to engineer human proximity.
I really like that.
We were engineering human proximity.
So engineering human proximity would provide just a lightweight structure, some tools, to more efficiently get problems solved face to face.
Alistair Coburn.
coined the phrase osmotic communication.
So it's communication through osmosis, through proximity.
So here we have, in this picture, we have a producer at the dependency board talking to a member of the UI team who happens to be in this room.
And there are other members of the team in proximity, you know, tuning in or tuning out as needed.
These are quality two-way conversations that happen.
They might not, they might otherwise.
get lost in emails, or not even happen at all.
So after the conversation between the campaign and the MPC team, the red dependency note is then brought back to the providing team, considered and placed on their backlog.
Okay, so then we go to the providing team.
This is their backlog.
and they do a costing exercise and they're able to actually accommodate it.
Put it into their electronic backlog, which is the ultimate source of truth.
The work is a thing.
The work is on their backlog.
It will get done.
So the dependency sticky is then brought back to the board and then a notice added resolved.
So this might be kind of silly to you, but we actually learned it's seriously, it's really helpful to have a physical thing that says something is resolved.
Because we open up so many of these issues that we need to deal with.
We wanna close some that we have, so we have some more cognitive capacity.
So it's really important to market resolve, get that closure.
And what it says to everybody else is that there's a commitment that was made.
So it's a public way to make a commitment.
Literally, we can't leave the room until all the dependencies are resolved, either resolved by the other team accommodating the work, or if they can't accommodate the work, the future work of that team is then adjusted, and the expectations are adjusted.
So the intricate player experience, the in-game, a word of Don Vignac can now be worked on by two teams in parallel, and that coordination is set up at planning day, making rich, intricate Destiny 2 experiences like this possible.
Incoming!
Fall back to my team!
More refugees!
More refugees!
OK, last bit of this and then I'm going to show you a video.
So, complex problem solving at planning day.
So I just described what can be considered the golden path.
The team realized they needed help.
They talked to the other team, they had a conversation, they understood it, they cost it and they were able to accommodate.
But what happens when things come up and the teams can't agree?
Maybe there is a difference of opinion on what is a priority.
So what happens in this case if the teams can't sort it out?
So let's say the MPC vignette team says, we're all full.
There's no room at the inn.
We can't do your ward of dawn.
But the requesting team feels that the ward of dawn is really important.
So they're stuck.
Well, as I said, what's unique about planning day is we have all of the decision makers in one room.
And trade-offs can be discussed and decided right there on the spot.
So in case of an issue, then the dependency goes to the risk board.
So I mentioned the risk board.
You'll notice in proximity the release triage team is right next to the risk board.
Their job is to look at the risk board and when something comes in, they jump on it in that wonderful servant leadership mindset.
So then they talk to both teams and they understand the trade-offs and priorities and make a decision.
So it goes to them if sometimes there might be some follow-up discussion needed, but it's considered resolved because somebody on leadership owns solving that issue.
So those are the mechanics.
The dynamic ritual called planning day, the agenda, the roles, the artifacts, an illustration of how it works.
Do you want to see Bungie's planning day in action?
We've seen a ton of positive outcomes from doing planning days here at Bungie.
We have hundreds and hundreds of people at Bungie all working in all sorts of different disciplines and teams.
And even with their best intentions, they can run afoul of assuming that other teams are doing work that they are counting on.
Having everyone sit in one room and really work through their problems so that you can come out of a day with a really clear understanding of what your team is doing and what all your team needs to focus on.
Yeah, yeah, yeah. We're going to do Tantrums.
It requires them to go and talk to their teammates and figure out what they need to do and really make sure that the problem is fully solved.
And then we've instituted things like making sure they're resolved so there's that follow-up.
And so it's exposed it to the leadership, to their team, to every other team.
It really does increase that accountability.
You're really challenging yourself to ask the question of, is the students doing this? Does everyone know about it?
You come out of this understanding your priorities and really challenging yourself to see what you can build.
Those people can then go out of this day with a really clear mandate about what they're doing the next day.
The rancor that you add by really forcing yourself to drill down and ask tough questions can allow for the project to be better scoped and ultimately more successful.
Yay, dependencies resolved.
Celebrate.
You celebrate.
All right, so I just want to wrap up with a few additional slides and then some lessons learned.
And then I'd be happy to answer questions in the overflow area afterwards.
So you may be wondering, how do we keep tabs on these dependencies after planning day?
Because everyone gets excited.
You can see they're collaborating and having fun.
And then it's like, OK, where did the dependency go?
Well, it's in their backlog, but it's tracked separately with a midpoint check-in we call dependency check-in.
So this is done on-site at Bungie.
We have a conference room you'll see here.
We have teams set up in different parts of the room.
And you come there, you prepare basically the product owners and the producers only, so we don't have the full teams there.
We prepare to check in on dependent work.
Go around the room, have conversations you need.
And your team is done when those depending on you have gotten what they need from the sink.
So we actually do this ritual where you're about to leave the room.
It's like, OK, I'm on the combatants team.
Anybody need to talk to me?
No, OK, I'm leaving.
Or yes, I do.
So it's really an agreement between the people in the room that they get what they need out of dependency check-in.
So we've done this almost 12 or 13 times now with many different releases and we've tweaked it. We've never done it the same way twice but it always has the same elements as I said those basic elements of planning and dependency resolution but we played with some things I wanted to share you share with you what we learned. So one of the things is how much prep do you do? How much prep do the teams do? Because you have that that part of the agenda where the teams get to actually work together and plan out.
So the first time we didn't do that much prep, and then we overcompensated the next time, and the product owners did all the planning and the teams felt left out, so we then just had to loosen it.
So it's like Goldilocks.
It's too hot, too cold, just right.
Wrap up, how to share out the team's plans efficiently.
So you have all the teams, the plan, how do you get that visibility?
It is in TFS, but that's not really effective.
So at first, as I said, we tried that team science fair format, but it just was unuseful.
But what we did is we brought those team boards back and we would display them back at Bungie so that anybody that wanted to actually look deeper into the team's scope for that quarter could.
Do all team members have to stay for the entire day?
Getting an artist to stay in a room planning for a whole day is not the easiest thing.
So while people really saw the value, it was important when we first did it, we had mandatory.
All the teams have to show up.
We gave them snacks and food, so, you know, made it worth their while.
But once we did it, people saw the value.
So it was not as much of a hard sell after that.
But what we've done is we allow the teams to self-organize.
They can determine who needs to be there for the dependencies check-in section.
So I really recommend if you do this, gather data after every planning day.
This is something that you'll want to continually refine and reflect.
So I use SurveyMonkey, send out SurveyMonkeys.
Here's an example of one recently.
Crossing planning day, was it valuable in gaining crossing visibility and identifying dependencies?
So we have roughly like 89% said yes.
Also, does your team have a winter build plan that they believe in?
Because that's what we want to come out with.
Do you have a plan that you believe in?
I can't believe it.
I can't believe it.
90% said yes.
So that confidence that they're exuding, we have confidence in our plans.
Briefly, many configurations of planning day.
We've done large off-site, mid-off-site, mixed off-site, on-site, and all on-site.
So you can do this, you know, if you have a big room at your studio.
There is a value in taking people off-site, so I'd really recommend trying that first because then people are away from their...
workstations.
OK, so I wanted to just recap here, and then I'll give you some takeaways, and then we'll be done.
Planning day ritual, what did we gain?
So we saw a positive effect.
Our first major winter build, after the first two planning days, had more complete work in it than we had previously.
So we had regular alignment with all the teams, with the product vision and pillars.
What we got from planning day, we had dependent work identified and tracked for the first time.
We had authentic cross-team commitments made face-to-face, so we did that human proximity engineering to get those commitments face-to-face.
And there's nothing like someone, there's nothing like the combatants team telling, or the, you know, the visual effects team telling the combatants team, you're going to get that effect.
Like face-to-face, there's something that increases the accountability.
And it's efficient and transparent decision-making with the decisions reported out to everybody.
All told, it increases the predictability.
Now we know better what we're getting at the end of the quarter in our quarterly build and our agility, our ability to pivot if need be.
This was a quote from our D2 team retrospective.
Planning days are now a vital part of shipping our games.
Actually, it had an expletive in there, but I had to take it out.
Fucking awesome!
Key takeaways I want to leave you with.
The first one is as your game grows in size and complexity, the benefits of well-designed, well-executed sync rituals are huge.
So whatever your size and complexity, whatever that growth is, whether it's from 5 people to 10 people, or 10 people to 50, Never underestimate the value and impact of face-to-face communication.
Do not use size as an excuse not to talk face-to-face.
I think that's the biggest takeaway.
You can engineer really efficient face-to-face communication with dependent teams.
Spending a whole day planning feels like a huge investment, but it's well worth it.
Be bold.
Take a bold action to get your team synchronized.
And lastly, don't get complacent.
Continuously inspect and adapt.
Listen to the benefits.
Measure the benefits of planning day.
Measure people's engagement, how you can make it better.
Like we do surveys, and somebody said, no more oatmeal cookies.
It's like, OK.
Now we know, let's make chocolate chip cookies.
So there's lots of stuff that will help you reduce your blind spots.
That's it.
My hope is that you take something away from this that you find useful or inspiring to try and experiment with in your own studios, whatever the size, to keep your teams synchronized.
Thank you.
