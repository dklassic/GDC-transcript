Okay, it's 3 p.m. now, so I guess we'll just go ahead and get started.
So welcome to Level Design with Impossible Geometry.
Oh, and before we continue, if you have cell phones or sound-making devices, it'd be great if you could turn them off now.
So my talk is level design with impossible geometry. My name is William Cheer. I am an independent game developer based in Chicago. A bit about myself. My background is in physics.
That's what I studied in school. And as a student I worked briefly at the national institute of nuclear physics in Italy.
in a linear accelerator lab just outside of Padua, which is close to Venice.
That's a picture of me.
That's actually not what my office looked like.
I was just in front of a computer, but that's not as exciting.
After school, I actually, instead of going to physics, I went into installation art and did that for about four years.
So they were primarily large-scale installations made out of balloons commissioned by art centers and science museums.
And I did that for about four years and basically became typecast as the balloon guy.
which I didn't want to do.
And I actually didn't play games before I started my current project.
And I was looking for another medium.
I tried glassblowing and metalworking.
And none of them really worked out well.
And games, because I knew some programming, I knew a bit of design, I thought it'd be a really good medium.
So I started on a project to learn Unity.
I thought it would take three months.
It's been 3 and 1‚ÅÑ2 years, and here I am.
So the project is called Manifold Garden.
What is Manifold Garden? It is a game. It's a first-person exploration puzzle game. It has unusual physics, impossible geometry, and crazy architecture.
These are screenshots from the game.
So the game, I see it as a, those are kind of like the key features, and I see the game as a metaphor for the last 400 years of physics.
Because at the beginning of the game, you are learning how gravity works.
It's different from gravity in the normal world.
And by the end of it, you get an understanding of the shape of the universe.
inside a room working with rear gravity to, oh, this is how the space folds upon itself. So the key features of the game, there's a lot of stuff going on in the game, but the two key features I'm going to focus on for the purpose of this talk are the traversal mechanic, which is gravity shifting, and the geometry, which is 3D world wrapping. So let's talk about the gravity shifting mechanic.
I'm sure many of you have seen this film inception and this is a scene in the film that takes place in the dream world and they take Paris and fold it upon itself, fold it in half. And then later we see these two characters start walking up the wall. And when I saw this scene, I immediately had a ton of questions. I was like, okay, let's say Leo is carrying his wallet and he drops it.
does it fall in the direction of the surface he's currently walking on now, which is the blue arrow, or does it fall in the direction of the surface he was previously on? How does his wallet know which gravity field it now belongs to? And what if I'm standing on the previous surface he was on and I take his wallet, does it still fall in the direction of the blue arrow or does it transfer onto my gravity field? The film, unfortunately, doesn't...
address these issues, these very important issues, but that's where I thought a game would be a very great medium to explore this. Now, inception takes a lot of visuals from M.C. Escher's work and that scene specifically is based on relativity. And originally Manifold Garden was called relativity. So let me tell you a bit about how that gravity shifting mechanic works in the game. So we're going to start with a 2D example. Basically, say we've got four surfaces. Each one of them has a different color, blue, red, green, yellow. And all objects in the world belong to one of these four colors and they fall in the direction of the wall. So a blue object falls in the direction of the blue wall. A red object falls up in the direction of the red wall.
Green falls to the right. Yellow falls to the left. Or the other way around. I'm looking at my computer screen. So Now, not all of these gravity fields are on at the same time.
And which one is on depends on the player orientation.
So right now, the player is oriented this way.
The blue gravity field is on, and all the other gravities are off.
So those objects are frozen.
And then the player can walk up to the yellow wall, then the yellow gravity is on, and all the other ones are frozen.
and so on and so forth.
This is, now the game is in first person, so this is what it looked like.
You can see the characters walking forward, they switch gravity, and whichever direction is down, that surface becomes colored.
So the color helps the player orient, and it also lets them know which gravity field they're in.
so that's the traversal mechanic. Now we're going to talk about the geometry which is 3D world wrapping. So eventually you start off in the game inside and eventually you make it outside. And when you fall off, instead of fading the screen to black or killing the player and respawning them, the world actually just repeats itself infinitely. So you could be, you could just keep falling forever. You do have air control. So this is what it looks like in one of the levels and here's another level where this is happening.
And we'll come back to this.
But first, the title, Level Design with Impossible Geometry.
What is impossible geometry?
So for the purpose of this talk, we're just going to say impossible geometry is any weird geometry that we don't see in real life.
It is very hard to generalize.
And also, this talk is not supposed to be the guide to working with impossible geometry.
the stuff I'm talking about, they deal very specifically with the way the mechanics are implemented in manifold garden.
So I just want to give you guys a taste of what it's like working with it, some of the problems and challenges I face and some of the techniques that I found to be useful. But you might, you know, your mileage may vary. One thing I want to clear up is that impossible geometry is not non-Euclidean geometry. I see non-Euclidean geometry kind of thrown around a lot every time people see anything weird. And that's not always the case.
So what is Euclidean geometry?
Euclidean geometry is just flat space.
So that's kind of space as we perceive it on the human scale.
Some of the properties are that the shortest distance between two points is a line.
The sum of all angles in a triangle is 180.
And parallel lines don't intersect.
And non-Euclidean geometry is just everything else.
So you can have hyperbolic elliptic, but it's also not that unusual.
So the surface of a sphere is actually non-Euclidean.
And if you were to draw a triangle on the surface of a sphere, you would find that the angles don't add up to be 180.
And a good example of this is the surface of the Earth.
Now, if you were to draw a triangle on the floor right now, the angles would add up to be 180.
But if you were to draw a triangle the size of a continent, then the non-Euclidean properties start to show.
So now we're going to transition to start talking about world wrapping and we'll start with 2D world wrapping. So you guys probably all know asteroids, right? You're shooting asteroids with a spaceship and when you get to the bottom side of the screen, you're teleported to the top side and if you hit the right side, then you're teleported to the left.
So this is actually a two-tour, so it's on the surface of this and I'm going to come back and explain what I mean by this in a bit. Here's an example. We see the spaceship go up, comes back down from below. So now what we want to do is we actually want to make that path seamless. So we want to connect the top and the bottom and the right and the left. So what we're going to do here is we'll start up and we'll take the top and the bottom sides and we'll glue them together.
And then what we'll do is we'll take the right and the left sides and we'll glue them together.
So here on the right, you can see that's happening.
So first we're gonna glue the top and the right side so that we form a connected loop.
So you can see now why the ship is looping in that direction, and then we'll glue it in the left and the right side.
So now we get the shape, basically a donut, and the ship is on the surface of it.
So we can see that it consists of two loops in two different directions, and that's how you get 2D world wrapping.
But we need to go deeper.
We're going to talk about 3D world wrapping.
So I explained here how by connecting the top and the bottom sides, and the left and the right sides, this 2D surface is really the same as this 2-torus.
But how do we work with a 3-torus?
So to start with a 3-torus, it's 3D, so we're actually going to start with a box instead of a surface.
And in this case, what we're going to do is we're going to take the top and the bottom faces, and we're going to glue them together.
and we're gonna take the left and the right faces and we'll glue them together.
And then we'll take the front and the back faces and we'll glue them together.
How do we visualize this?
I don't know, it's actually, it's very hard because it's in 4D.
But one good analogy I found is that in 2D world wrapping, you are a 2D character stuck on the 2D surface of a 3D donut, and in 3D world wrapping, you are a 3D character on the 3D surface of a 4D donut.
So while it's hard to visualize the structure, the 4D donut, we can visualize what it's like to be inside the surface.
So let's say the Earth, we have the Earth, and it's in flat Euclidean geometry.
This is what it would look like.
Now if we were to put it, we've already added 3D world wrapping to this, this is what it's gonna look like, because the light rays are gonna loop back around.
So you'll see repetitions of the Earth, they're all the same ones, continued infinitely.
And here's a version with the grid, so you can see the partitions.
Now this is a screenshot from the game. You can see this is what it looks like.
Here is another version where the distance between the instances is zero.
So it just looks like one continuous building.
And here's what it looks like when you're falling through it in motion.
So you can see that the level just keeps repeating itself.
Now this leads to some very interesting physical properties. For example, let's take a box and we'll drop it off the ledge. Now you'll actually see that box come down from above because it loops back around. And the box is now simultaneously beneath you and above you. A lot of games have waterfalls. This is my drawing of a waterfall. The direction it goes forward and then it falls off. In our game, in Manifold Garden, there actually isn't waterfalls. There's water loops because that water comes back down from above.
Here's a screenshot of a water loop in action.
So you can see it basically forms one continuous strip.
Now a really fantastic book if you're interested in this subject is The Shape of Space by Jeffrey R Weeks.
I actually have a copy of it, so if after the talk you want to come and check it out.
It's written, it's like an advanced book, but written for the layperson, and it really talks about how to visualize this stuff.
He also has a website, geometrygames.org, which has a bunch of small games to help you visualize this kind of geometry.
There's kind of 2D examples and 3D examples as well.
OK, so how did 3D wall wrapping get added to Manifold Garden?
Originally, the game was all about the gravity shifting mechanic.
It all took place indoors, and all you did was change gravity and put boxes on buttons and solve puzzles.
the problem though was it's very hard in first person games to get a sense of depth and people were having a hard time seeing when they dropped the box where it was going to land. So they said why don't you add shadows to the box. So I said okay, I added a directional light so that you can, you know, there are shadows. And then people were asking, well, where is the light coming from? So I said okay, I'll add windows to, you know, provide an explanation for the source of the light. And as a result of the window, people were able to see the outside.
This wasn't intentional on my part. I just built a bunch of rooms together in one scene. However, everybody was very excited about what was going on outside and they were asking, hey, can I go outside? And originally I didn't want the player to because it would add all this complexity, but everybody kept asking for it, so I allowed them to go outside.
This was also at a time when I introduced the edge detection shader.
Now this of course introduced the problem of players falling off the world. And the one thing I did not want to do was I didn't want to add invisible colliders. Because there are some games that have it and it's very frustrating. You want to explore and it's constantly preventing you from going to places. And I also wanted everything you can see in the world that you can get to. Because I remember playing Sky Rim and one of the most magical moments in that game is when you see a mountain in the distance and then later on you're actually on that mountain. So...
So I couldn't put anything in the sky, because that meant I'd have to create additional content.
And I got this problem of a very blank sky, which is very boring, and I added a skybox, and it just looked absolutely terrible.
However, at some point I realized that by introducing 3D world wrapping, I've sort of solved all those problems, because now I can have things in the sky, and it's not new content, and I can allow the player to get there.
And yeah, it's not new content, because it's the same thing.
So it solves the blank sky problem.
It ensures that everything you can see is still a place that you can get to.
And it's also just a much more interesting level in general.
So these are some of the early screenshots of the game when I introduced world wrapping.
And this is one of the earliest implementations in motion.
It is very slow here, but you can see.
in this case you've got the button, you press it, it drops a box, and then you jump off the ledge. And what you'll notice in this implementation is that the distance between instances is very large. It's very clear where one instance begins and where another ends. This fall is going to take quite a while, but basically it repeats. So we're going to continue on. Let's just watch it through. Okay, we've landed.
Now, when I introduced world wrapping, it created a lot of unexpected solutions to previous problems, which is very nice.
This is an image by M.C. Escher, a cubic space division.
And the original inspiration for the game was I wanted to make a game based on M.C. Escher's works, and I wanted to put this level in the game.
Now, here's an implementation of it in July 2013.
So this was before world wrapping got added.
World wrapping got added about a year and a half into the development.
Now when I made this level without world wrapping it was actually very painful to play so the game, the level basically consisted of all these lattices that repeated and you went in and you just had to find an exit. So very simple.
But the problem was, it was very hard to orient yourself because everything, basically all parts of the level looked the same, and also if you fell off the lattice structure, you landed on the floor.
And there was a floor because it took place in a room.
And then it was just like very tedious walk to get back up to a lattice.
Another problem was that in order to make the level look interesting it had to have a certain scale. But any increase in scale resulted in an increase in navigational complexity. So I played it a bit and it just really wasn't fun and I got rid of it. After I introduced war wrapping all those problems went away. So this is December 2015.
And now you can see the, so one of those boxes is one instance of it, and you can go to any of those instances.
It doesn't matter.
So in this case, what happens is it removes, you do not need to orient yourself.
There is no way, there is literally, it is literally impossible for the player to get lost because it doesn't matter which direction you go in, you are stepping away and also towards the objective.
And it also means that I can increase the scale of it.
In this case, it's basically infinite.
And it doesn't add any navigational complexity.
In fact, it removes a lot of navigational complexity.
And it's also, again, just a much more interesting level for the player to experience, because this is not something you see often in games.
Here's another example of something that I wanted to put in the game before, but couldn't.
These are Indian step wells.
And I saw these, and I thought, well, wouldn't it be amazing if these just went on forever?
Once I introduced world wrapping, this was impossible.
So in this space, you can keep going down these stairs or climbing up.
There is an achievement if you get to the bottom.
But.
So what is something that's very interesting about this is that instead of having the world wrapping happen on a grid, it is actually offset.
So this is the basic unit that's repeated.
So we have a set of stairs.
Now, if we just have normal world wrapping where If you go down, if you drop from the bottom right, you'll come back up down from the bottom left because we have everything on a grid.
In this infinite step wheel world, when you drop down from the bottom right, you actually come back from the upper left.
And the reason why that's happening is because instead of putting everything on a grid, we've offset them slightly.
Because when you're going down these stairs, you're not actually going straight down, you're going down and forward.
And this is what it looks like when you're climbing up.
And then you can, because of the gravity rotation mechanic, you can also choose to just fall down the level from the side.
Now, of course, adding roll wrapping also introduced a lot of new problems.
One of the problems is gating.
Basically, when the player is outside, the entire level pretty much opens up.
You can go anywhere.
And everyone would say, isn't there, can't the player just skip all these levels and get to the end?
And yeah.
So this is, let's talk about the 2D example.
So in this level we want the player to get to the star.
And what we'll do, this is too easy, so we'll put a wall here.
And now maybe the player's gotta go get a key to open the lock, or they have to learn double jump.
When you introduce wall wrapping, though, that wall is no longer a barrier because the player can jump to the right and land back on the other side, or they can jump down and come back down from above.
And the reason why that's happening is because of the repetitions.
and now I actually got, so this caused a problem with pacing for a long time until I played Skyrim, and in Skyrim, when you are outside, you can get to anywhere on the map, but then once you go inside a dungeon, it becomes a very linear experience, so the game is open exploration and linear adventuring.
And I actually took that for my game, so when you are outside in the space, I allow you to go anywhere.
I just sort of embrace that.
But then there are these islands with puzzles, and once you get there, then it's a linear path.
And once you're indoor, you can't whirlwrap, so that removes the problem of players skipping areas.
Another problem you'll find is that height and direction basically become meaningless once you introduce weird geometry.
A lot of games will have something like a tower, right?
And you might get a mission that's meet me at the base of the tower.
So let's go back to our 2D example.
If I were to ask you where the star is, you'd say it's near the base of the tower to the left.
Once you introduce war wrapping, though, that direction doesn't really make sense because the star is also to the right of the tower.
And now what if we started to decrease the distance between the instances so that they start touching each other. So now in this case, base of the tower doesn't make sense because this tower does not have a base. It's disconnected. This is one implementation of it in manifold garden. And here you can see this is literally a building without a base.
So once you introduce war wrapping, a lot of things, you know, words like northeast, southwest, up, down, left, right, that we use for directions, they get tossed out the window.
Now what I found is you want to embrace the problems.
So you want to design with the geometry instead of against it.
For example, what works really well is designing your levels to be radial, thinking of something as inside and then outside and allowing the players to get there between these two places from any directions instead of...
This is much better than having something that's just a single direction. I just put directional as a word for this.
Now what I want to talk about now is a number of techniques that I found to have worked well. And these fall under two categories.
The first is macro, which has to deal with the big picture, the way you organize your level.
And the second is micro, the second group of techniques is micro, which deal more with moment to moment, not necessarily when the player is stopping to think, but when they're moving through levels, how can you help them, how can you help guide them?
So in macro, you want to have an iconic party.
The word party is the layout of a building.
I got that from Robert Yang's level design histories talk last year, which I highly recommend.
And you want to have logic to your level.
and with micro you want to have intentional architecture and you want to utilize patterns and architectural elements. So let's talk about the first macro technique, iconic parties. So these are some examples of architectural parties. You've got the layout. This is kind of roughly what the building looks like. When you're designing a game based on M.C. Escher's work it's very tempting to kind of overwhelm the player with a lot of staircases and tunnels and weird stuff. And I think that works very well in a print because you kind of want to, you know, look at it in detail and discover things you didn't see before.
However, this does not work well in a level.
So this is my very first attempt at the opening level of the world.
And you can see I was just putting staircases and tunnels everywhere.
And it looks and feels very MCS-sure.
This is another example.
But if you were to draw, if you were to ask me what the party of this level is, well, this is what it is.
It's very messy.
There's no clear structure to it.
This is the same level now.
And you can see in this case what we have is a central tower surrounded by four islands.
And what's really great about this shape is you can see that from any direction.
And also with the world wrapping, you can see the repetitions of it in the distance.
So I don't have a mini map in the world.
However, because you can see the repetition of the world, from where you are, you can, by looking at the other instances, you can figure out what the current shape, what the current structure of your world is.
And so it helps if you have a very clear design instead of just a mess.
So a comparison of how the levels changed.
And these are examples of levels with very clear parity.
Like you can see this one, and right away you see that these are stairs that continue on forever.
I see very clearly now this is just the lattice structure.
And you don't have to be simple.
You can get more complex, but you always want to have this very clear overall design that the player can see and recognize very clearly.
Now the second macro technique is you want to have logic to your level.
Now the opening level of the game consists of a series of four rooms indoors to teach the player the mechanics and then they go outside.
And when I was play testing, there are people that are really good at puzzle games, and there are people that are not so good at puzzle games.
And the people that are good at it would finish those four levels in about 10 minutes.
And others might struggle and take about 30 to 40 minutes.
However, when they got outside, and the outside consisted of two rooms that they had to find, there was no consistency in how long it took people to find those two rooms.
Some people would blast through the first four puzzles, and then they'd get outside and stumble for 30 minutes until they found a room.
And some people might struggle for 40 minutes.
with the indoor puzzles and then they get outside and come across the room right away.
And this is because there was no logic to the way those two rooms were placed.
They were basically random.
So, it was basically a matter of luck in which how you found these.
And they were also a lot of like based on sight lines.
So, for example, you know, this is what you saw when you first came out and there's a door at the very end.
and you basically had to get the box and go to the door.
And if you didn't do that, if you kind of turned around or jumped off or changed gravity, you lost sight of it and there was no way to figure out, use logic to figure out how to get back.
With the current level now, there is a very clear sense of logic.
You have this tower and then the puzzles, there are four islands with puzzles in them.
And so you go to one, you solve it, and you turn on a laser beam and then you can come back.
So the way the level is laid out, once you solve one puzzle, you can figure out where the next ones are.
So as you can see, this is kind of the center tower, and just from where the laser beams are pointed, you can deduce, okay, in this case, I finished the blue and the red islands, and there are these two other ones that are still missing.
So having a logic to your level is very important. Now we're going to talk about the micro techniques which are not dealing with the big picture but with moment to moment as the player is navigating through the world how can you help to guide them to the right places. Okay. So we're going to go back to this opening level and one of the last things I changed is this one piece of architecture at the very edge of the island.
So it used to be just this block and I changed it to a bunch of stairs and with a platform at the end.
And the idea for this was because you're on that central tower and I need you to get to the blue island where the puzzle is, in this case the star. And in order to do that, I needed the player to rotate gravity to get there. You had to jump. So you can see this is it with the block. And the problem with this was it was not very clear what it was doing.
So this is the thinking. I was thinking you'd walk up to this block.
and you would rotate onto it, change gravity, and then you jump off onto the island below. If you played Assassin's Creed, it's sort of like those little things where you jump off into the pile of hay. However, what happened was a lot of people just kind of walk up to this and look around and then walk away.
And the problem is that this piece of architecture does not communicate its intention. It's just this block. It's not telling you what to do with it.
However, what I did was I changed it to a set of stairs with this platform at the end, and now everybody, like it becomes very clear, oh, I see the stairs, I'm supposed to walk up them, and then when you walk up the stairs, then you rotate to the platform, and then right away you see the island below.
So the difference between the block and the stairs is that this tells you how to use it, how to walk on it.
The second micro technique is you want to utilize patterns in architecture.
So this is what hallways used to look like in the game.
And this had a lot of problems.
Basically, because you can change gravity, we have hallways that also bend upwards.
The problem is, in a lot of first-person games, a lot of people don't tend to look up.
So players would come to this, and then they'd turn around thinking it was a dead end.
So that was one problem.
And another problem was, if you started going backwards, the hallway looked exactly the same.
And that happens a lot because of the gravity changing mechanic.
It's very easy to get turned around.
So a lot of people would backtrack through an entire hallway until they got to the room they were in previously, and then be like, wait a minute.
This is not where I wanted to go.
So when I started adding windows in the game, I would put windows and hallway to be equal in length, directly opposite one another.
And I showed this level to Brandon Chung, who is the creator of 30 Flights of Loving, and also talked about wayfinding in levels.
last year here and I recommend that talk highly as well.
And he suggested taking one of the windows and sliding it down, offsetting it so that it's like this.
So you can see it, you know, it touches the end of the hallway.
And this immediately solved a ton of problems.
So now when you open the door and you're looking down a hallway, you see the brightest thing on the screen is the window, right, and the window offers a vista to the outside world, which is much more interesting than the blank walls.
So it actually makes traversal through hallways feel a lot faster.
and it attracts people towards the end.
And then the window kind of guides your eyes into the direction of the bend.
And this solves the problem of hallways that bend upwards because now players' eyes are guided to look up.
And it also solves the problem of players going backwards because now when you're going backwards, the hallway looks very different.
You're no longer seeing this window of light at the end.
So just the way the hallways are designed, you can figure out the direction you're supposed to go.
And I actually, you know, sometimes in games they'll want to vary corners and hallways.
And I actually have this in every single hallway because having the player get lost inside hallways is not something that I want to do. So in summary, you want to embrace the geometry. Don't work against it. If you start using impossible geometry you're going to find unexpected solutions to previous problems. You will need to rethink a lot of things like gating.
You'll need to rethink direction, northeast, southwest, up, down, left, right, those all go out the window.
Utilize a very clear layout for your level.
The shape of it should be easily recognizable.
You want to create logic in your level so the players can figure out where they need to go next by looking at the architecture.
and you also want to have intentional architecture.
Everything you put in the game needs to tell the player how to use it, and use established patterns that the players can rely on to figure out where they need to go.
And a lot of people will play the first level of Battle for Garden and say, you know, I thought this game was going to be very confusing, but it actually turned out to be not bad.
So we've been sitting here talking about impossible geometry.
I just want to leave you with one thing, which is you mustn't be afraid to dream a little bigger.
So all of that has kind of helped me to make manifold garden what it is. And I just want to say manifold garden is playable here at GDC. It's actually just outside in the day of the devs area. So if you want to check it out or watch other people play and see how they work their way through the level. And finally, my name is William cheer. Here's all my contact information. Feel free to come up and ask questions now if we have time. Yeah, I think we have a little bit of time. If anybody has questions, you can come up to the mic.
Thank you.
So the question is whether I did any paper prototyping.
And I did initially do paper prototyping for the puzzles.
But then when it came to designing the levels, I'm not a very good drawer.
And so even to do a 2D drawing is very difficult for me.
And all these levels have to be designed in 3D.
So I just build them inside the game and then walk through them and play test them and figure out where the issues are.
So I haven't done paper prototyping.
And years.
Yes.
Oh, yeah.
Hey there.
Who else worked on your team?
Did you work by yourself?
And how did other people get involved in the later stages when you were sort of defining an art style?
So I worked on the game alone for about two and a half years and then I got backed by Indie Fund.
about a year ago, and I brought on a programmer, David, who's actually in the audience. David worked on the game part-time last year and joined full-time at the beginning of this year.
And the art style actually was just a lot of iterating over time. There was never a clear direction. I wanted it to be inspired by architecture, so architectural drawings were an influence, but were an inspiration. But a lot of it is just kind of tiny things added up over time to get to where it is at now.
Thank you.
Hi, thanks for this. So there's like a recurring trend in games that are based on like some twist of mathematics, which is that they're really, really hard to pitch. You know, like whenever you talk about a four-dimensional game, of which there are many, I'm making one, you're like, oh, the four-dimensional game, like that other one, like MediaCorey or so on. So I'm wondering how you deal with that when you actually talk to people about it. And the other thing is, what would make it easier for you in a game engine to do what you did?
So the question is how to pitch a game that has a weird geometry, weird twist.
I actually, so.
Yeah, I've been working on the game for about three and a half years now and a lot of that is just talking to a lot of people.
In 2014, I went to about 14 different game conventions.
And the way I would used to talk about the game is I'd say, okay, you know, there are six gravity fields and each one is based on a different surface normal, and when you're going this, it's red, and you can just see people gloss over, you know, and when you mention surface normal, they're like, I'm done.
But then I started to say, okay, have you seen Inception?
And you know that scene where they full Paris in half and they start walking, but then immediately people are like, oh yeah, you know, I know that.
And so I think it's about like communicating, giving people clear visual imagery to help them imagine more of the consequences of that as opposed to explaining the math.
Hi, you just said that you don't draw much, but I had a question concerning how do you go about designing your architectures? How do you... what's your process to establish all this architectural language that you have now in the game? And we saw the evolution, like we saw the previous prototypes, very blocky, simple cubes and stuff, and now it's very much more on it.
Sure. I was wondering how you go about creating those.
uh... the two biggest architects who've influenced the game are Tadao Ando, he's a japanese architect who works a lot with concrete so that helps with kind of the the layout of the levels and then and frank Lloyd Wright who kind of helps fill in a lot of the ornaments and the ornaments are there because i don't have textures and so if you're moving through flat, like a big chunk of flat space and you don't have textures, players can't see stuff changing on the screen so it feels very slow but once you start adding kind of these variations in height um...
that really helps speed things up.
I think their earlier question was about engines, how engines can help.
I think providing, you know, the biggest problem that we have are now dealing with rendering.
So I think having kind of low level stuff in the pipeline that's opened up that we can tweak is most helpful.
But just in terms of 3D and scripting, those are pretty standard.
OK, just one more question.
Hi.
So yeah, you just said something about rendering causing an issue.
I wanted to ask, you guys are instantiating everything, right?
They're all instances?
Yes.
So how exactly were you guys getting around the rendering issues?
Well, we've actually rewritten that system.
And I'm probably not the best person to answer that.
But we We do have a 3x3x3 and sometimes 5x5x5 grid of the same level repeated. We actually do not have one standard system. It sort of depends on the geometry of the level. We have hijacked the play pipeline in Unity now so when I hit play it actually creates another level and merges all the meshes and deletes all the unnecessary stuff and creates an optimized version of that.
But yeah, David is in the audience, and feel free to ask him technical questions.
Yeah, so thank you all very much, and fill out the evaluation if there is one.
