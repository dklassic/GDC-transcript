Thank you everyone for coming.
This is Cursed Problems in Game Design.
I'm Alex Jaffe.
So, how do I go forward with this thing?
Cool.
This is amazing, okay.
So, welcome to GDC, where we make good games gooder.
With talks like, how I balance my shotgun in 90 days, and you can too.
Quest markers that even filthy casuals can follow.
And eight hot loot table distributions for 2019.
So these are actually great talks that I love, that have done a ton to improve my ability as a game designer that I've learned a lot from.
And I think this is what a lot of our work as game designers is, it's making games great, making great player experiences.
But these problems that these are trying to solve, a lot of them feel more like, they feel kind of like pearl diving.
Like there are all these solutions out there, and you have this huge array of them to pick from.
And what you're looking for is the best, shiniest pearl to make your game as perfect as it can be.
And that's great, and it's really important.
But I've often found myself more drawn to a different kind of design problem.
One that's more like wandering the desert.
For days, months, maybe even years, looking for a solution, wondering where one might be, and thinking maybe one doesn't even exist.
So, the thing that's gotten me so maybe interested in these incredibly hard design problems is my own background.
I'm Alex.
Hi.
I used to be a mathematician for a few years.
And when I was a mathematician, you know, I would spend so long on like one problem.
One problem that maybe people have worked on for decades.
And you'd usually make no progress.
You'd spend, again, months or years on it, just kind of banging your head against it.
And eventually you build a sort of Stockholm syndrome with a problem.
Like, you come to love the way this thing tortures you, and you think, maybe I can learn more from this problem than I even can from the solution.
And I think there's really some truth to that, right?
Problems realign our thinking when they're really well-posed.
Sometimes finding the solution isn't the most important part.
And so that's what's inspired this talk, and for years I've kind of wanted to focus on this topic.
And I've thought about it as I did my PhD in essentially computational game balancing at the University of Washington.
And I've been a designer at Superbot, Congregate, and Spryfox, as well as a data scientist.
And now I'm a designer at Riot Games and R&D in the Bay Area office.
It's pretty awesome.
A lot of you may not even know it exists, but it's a great place.
And so all this time I've been thinking about hard design problems.
And what I've wondered is, all these different problems that if you pay attention to game design you start to notice.
I'm wondering if there's anything kind of shared, any shared DNA between them that causes them to be so hard, that causes them to maybe even be impossible.
And yeah, I think I know what that is, at least for many of them, and that, you may not be surprised, is that they are cursed.
I'll get to a definition in a minute, what this means, and I'll also get you some examples because I know you want to know what at least one hard problem is, but first an outline.
So.
There are basically two parts to this talk.
In the first part, I tell you what curse problems are and where to find them.
And basically, this is important because, look, the problems I'm going to talk about today, the category of problems, they really don't have a clear solution.
You can't just go in and solve them.
You really have to know that they are right in your face so that you don't waste your time and your team's energy on them.
And so this is the most important part of the talk.
The talk where we understand what curse problems are and can actually identify them.
And that's what I do. I define them.
I show you an example.
And then I sort of give you maybe some intuition for how to identify them through the use of a bunch of examples.
Okay? So that's the first part.
But the second part is defense against curse problems.
It's what to do when you come up against a curse problem, and you have no choice but to bear right ahead.
Or hopefully, what I'm really going to tell you you have to do is you have to tilt a little to the side, because you can't solve the problem.
But maybe you can give up some part of what you're trying to do, and you can solve that.
And so what I'll do is I'll tell you a model for how I think about games in this context.
And then I'll talk about four techniques for addressing curse problems.
Remember, I said I'm not going to solve them because they are unsolvable, but there will be ways to handle them.
And these are techniques that I've sort of...
I've taken a look at all the techniques game developers have used over decades to address problems like these and kind of bucketed them into these four categories.
And I think it's a helpful framing for what to do when you encounter one.
And finally, I'll show some more applications of these techniques so you build intuition for how to apply them if you ever get there.
All right, everyone on board?
Here we go.
Let's have a definition.
This is actually a sub-definition I need, real quick.
Player promises, you may have heard of them.
I consider them a game's essential experiences.
Why did the player actually come to play this, right?
What is the core of this game?
Zach McClendon has a talk, Welcome to the Yard Sale, which talks a lot about player promises, if you want to learn more about them, it's a great talk.
But for me, the key thing that's happening here is that promises live in the designer's heart.
It's the thing that is driving us to make this game.
It's what we care about at the fundamental level, the stuff we don't want to give up.
But often, weirdly, they also can lie in the player's heart.
Sometimes you give a player something really simple, just a few mechanics, a few systems, and then they immediately come to believe that the game owes them something specific.
And you kind of have to accept that.
You have to deal with the fact that you've made this promise to a player whether you meant to or not, and you have to adapt.
So, now that we've outlined what promises are, the curse problem definition.
It is an unsolvable design problem rooted in a conflict between core player promises.
You're going to see this slide a lot.
So it's basically any time I'm trying to solve a design problem and I have implicitly or explicitly promised two things that cannot coexist, it is surprisingly common.
So one of the properties here is there is no direct solution.
One does not simply solve curse problems.
You have to instead, you have to work around it.
You have to give something up.
Like the Gordian Knot, you kind of have to cut through the problem itself and find a kind of a strange non-solution.
So, that's the definition.
And now you finally get an example.
Thank you for your patience.
The example will be a little hypothetical at first, but it will become more concrete as I move through it.
So I'll talk about Free For All Politics, which I consider a cursed classic.
So a cursed problem often begins with a dream.
Say it's the 90s, and you love beat-em-ups.
You love the punchin' and the kickin' and like a crowd control, lots of enemies to defeat.
And it's also the 90s, and so at some point, Street Fighter II comes out, and you're like, wow, this is amazing.
I get all this really high-skill execution, all this tactical choice-making, knowledge tests.
I get to read my opponent's mind and act accordingly.
And you think, maybe these are two great tastes that would go great together.
How about we give a controller to every one of these characters and we make this huge martial arts brawler game, everybody fighting it out with the technical execution and the tactics of a fighting game, but the kind of crowd control and chaos of a beat-em-up.
This seems like I think a perfectly reasonable hypothetical game, something that would sound exciting to me.
I think it's a nice fantasy.
But as you go to make this, you want this really, really high competitive integrity game that's all about managing your opponents.
You notice something weird, which is the best player, say, Gene's dude with the jump, that player, the one who's great at tactics and great at buttons and great at mind reading, isn't actually winning.
Other players are winning.
And the reason why is politics, which I'll define as competition through social negotiation, alliances, and manipulation.
And there's some great treatment of politics in Characteristics of Games by Elias Garfield and Gushera.
This is probably my favorite, or at least one of my favorite game design textbooks and it is sorely under read, so please check it out.
What happens is players start to play this game, they sit down to play, and you realize that they immediately figure out who the best player is in terms of the core gameplay.
And instead they start forming alliances against this player, they gang up on them.
They maybe pretend to be their friend and betray this person.
They play down and pretend not to be too strong and then at the last minute they strike and kick ass.
And what happens is you realize that the core skill of playing this game is not the skill that you were emphasizing.
It's not the game you thought you were making.
This is a game of Thrones.
This is a game entirely about politics and manipulation.
And maybe punching well is helpful, but it's not really what you cared about as a designer, and probably not what the player expected.
So, remember, a curse problem is an unsolvable design problem rooted in a conflict between core player promises.
So in this case...
A player looks at this game, they look at all the, you know, the difficult execution, they look at, you know, all the moves you can do, and they think this is a game about combat mastery.
I want to focus on combat mastery and be great at this, and I want the game to, you know, emphasize that correctly.
But it's also, it's a, you know, we've made this really competitive game, it emphasizes the winner, I want to play to win.
These are both reasonable promises to take away from the game I've described.
But these promises are incompatible.
Because playing to win in a free-for-all game requires politics.
It is the optimal strategy from a game theoretic standpoint, from a psychological standpoint.
But the focus on combat mastery is not compatible with political play.
They're different player emphases.
And so you end up with this big nope.
You can't make this game.
The game is cursed.
All right?
This game you have in your head is cursed.
So.
You're probably wondering, well, can't I do something?
And yes, you can do something.
You can get out of the situation.
But it requires giving something up.
It requires changing something about your core premise.
So it's a fantasy.
What do you do?
You let go of the dream, at least a little bit.
So one thing you could do, just an example, is you could weaken the promises.
So we said the promises were to focus on combat mastery and also to play to win.
But maybe we change our game a little bit to weaken these.
We pour in a little bit of chaos, and we end up with a game where you kind of want a chance to do some cool moves if you can, but you don't really expect it.
And you want to win if possible, but it doesn't feel like something you can really, really guarantee just by being the best at the core skills.
And when you do this, you make these changes, you change, weaken the promises here, you end up with something that might even be better, even though it's not what you initially expected.
You end up with Smash Brothers.
This is a very good beloved game.
It basically takes this premise I described and says, screw it, just like let it be crazy.
I'm not talking about the 1v1 game without the items on, you know, Final Destination.
I'm talking about, like, the party game.
The four-player game with random items and stage hazards and smash balls.
Like, this is the game that initially made this game big.
And it's a great game because they knew what they were making.
They had a box of constraints.
They had a box of promises that they could actually fulfill.
And I'm not saying that Nintendo saw they were in a cursed problem situation and they cleverly found their way out of it, though that may be what happened.
I think it just aligns with their values, right?
The game they wanted to make happened to be a game you can make.
But you can totally imagine another designer in this situation like, really, really focusing on that initial problem I described and just wandering the desert, cursed to wander for years, just looking for that one solution to make their game perfect.
And the worst part is that they might be dragging a whole buttload of teammates with them.
This is not a good situation.
You want to recognize curse problems before they really cost you.
You don't want to get stuck in them.
But you also want to understand your options to move forward.
So that is what I will continue to talk about.
So let's talk about how to identify curse problems now.
By the way, I'm sorry for the Harry Potter references.
I've never seen a Harry Potter movie, so I feel like somehow that makes it more justifiable.
So I'll give you two more curse problems and throughout the talk I'll show you a bunch more curse problems as it becomes relevant.
And some of them you may look at and kind of like look a stance at because I'm going to talk about really great games that are really successful and you think they can't possibly be cursed, right?
But even no game is perfect, right?
And even great games can be suffering in a large way from some failed promise.
And, you know, maybe you want to make a different game, maybe that game.
And then the other thing is also we'll see some games that are what they are because they made the sacrifices necessary to get out of a curse problem situation.
So one example is the quarterbacking problem.
This one's pretty well known.
Say you're playing a turn-based cooperative game.
If you've played a game like Pandemic, you try to put out viruses spreading around the world.
Everyone's having a good time.
I'm going to Australia.
You're going to...
I don't know, Canada, and everybody's kind of doing their own thing in this cooperative experience, until one player, who's real clever, has this idea that everybody should go to different countries than where they planned.
And, you know, we're all good people, good friends, so we go along with it, and we actually perform well as a consequence. And slowly this person takes more and more responsibility until they're essentially running the entire show. And we're playing a single player game, effectively. We're just the hands of this one person with all the clever ideas.
This is sort of a fundamental property of turn-based cooperative games, that this can happen.
Because on the one hand, you want to have this cooperative experience.
I want this harmonious Ocean's Eleven feel where everybody's doing their own part, like I'm the doctor and that means I'm thinking doctor thoughts.
You can't think my doctor thoughts for me.
But it's a strategy game, so one person sort of can do the whole thing, right?
We want to play to win, and the best way to play to win is actually centralized decision making, at least in a game like this.
And that centralized decision making is fundamentally incompatible with the interdependence between players that's part of the fantasy of a co-op game.
So even though this is a great game, it fundamentally kind of breaks its own promises.
It is a cursed problem.
And a lot of games like it are.
Okay.
And let's look at one more for now.
I call it the skill inflation problem.
So this occurs for evergreen competitive games, sort of PVP games you want to exist for many years.
Games like this launch and they are often awesome, you have an amazing time, you have all kinds of different players playing at different skill levels, but slowly as the game matures, the audience matures with it, right?
And all the players get better and better, kind of in lockstep.
And what's worse, the players who aren't getting better, they tend to leave.
Maybe because they're not as invested or because it's frustrating.
And by the time you're years into one of these games, like, you may still have a great game, but it's very, very hard for new players to break in.
Because all the players they see around them are incredibly good, they maybe have a hard time matchmaking with players at their level, and even they go online and they watch Twitch and everybody's good and they just feel like a total fraud.
This sucks.
Even an individual player, even a really serious player, suffers from this.
Because this player wants a long journey of mastery.
They want to be able to get better for decades.
But they also want a stable, vibrant community.
They want players coming together and playing together and new people coming in.
And they want to be able to play this for their whole life.
These things are incompatible because a long journey of mastering naturally results in a rising skill pool.
But a stable, vibrant community requires a broad variety of skill levels, right?
These don't go together, and again, it's a curse problem.
Now, as I said, right, all of these curse problems, they have answers, but the thing I'm gonna show you is how these answers end up requiring giving up some small, sometimes large, piece of the fantasy.
Okay, so what isn't a curse problem, you may ask?
It's not all design problems.
It's not like any time you're weighing any two things against each other, we have a curse problem.
I really want to make this clear.
Let's just consider any common degenerate core gameplay pattern.
Like for example, this is Hungrybox playing Jigglypuff in Smash Melee.
Now we're at the 1v1 version of Melee.
And this pattern is extremely frustrating to a lot of players, including pros, right?
He plays Jigglypuff in this way that's extremely defensive, very reactive.
You make one mistake and he just jumps on you.
Other players are forced to play his game, basically.
And a lot of them don't like it.
And so you as the Smash designer may be totally fine with this, like, cool, this is the game we're playing.
But you might want to remove it.
What can you do?
You can tweak any number of things.
You can tweak attacks, defense, movement, the pace of the game, map, all kinds of changes you can make to basically make this play pattern just go away.
Either by making it impossible or disincentivizing it.
And there's nothing to stop you from doing this, because there's no fundamental rule of Smash, there's nothing, like, deep within your heart about this game that tells you you have to be able to play this incredibly annoying keep-away game.
Like, it is just an emergent property of the choices they made.
So they can go in and fix it, and it's still going to be the same game.
Can we do a similar thing with free-for-all politics?
We cannot.
Because no matter what I do to kind of tweak the main tuning parameters of the game or change the content, we're still going to have this fundamental incompatibility.
The politics, it does not go with no politics.
And there's no little change you can make to a move or something that makes these not go together.
Makes these go together, excuse me.
We're gonna play a game, alright?
You, the people, are gonna tell me what is hard and what is cursed.
And this is important because I want you to build intuition for these.
And it's not like some objective thing, it is a little subjective.
So, you know, reasonable people can disagree about what's cursed, but I also think that reasonable people, having had enough time to become familiar with this concept, will mostly agree about what's cursed and what's not.
You have to identify two promises that are incompatible with one another, and you have to convince yourself that they're actually incompatible.
And the second part is actually where you might have more disagreement.
But, you know, all you need to really know is that they're incompatible enough that I have to take a kind of different approach to dealing with the problem.
So, first example.
Exploration games with millions of worlds.
So No Man's Sky had this huge promise, right?
Everyone was so excited about this incredible exploration game, traveling through space, seeing millions of planets, seeing all kinds of diverse flora and fauna, lots of stuff to do.
It was really exciting.
But when it launched, people were disappointed.
Felt like the promises were not kept.
You know, there was millions of worlds to explore promise, this vibrant, diverse, interactive ecosystems promise.
My question is, are these fundamentally incompatible promises?
Is this a curse problem?
Or are these just hard to simultaneously satisfy?
So, who thinks it's cursed?
All right.
Who thinks it's hard?
All right.
Frank's wrong.
Yeah, so it is, they do, I think they go together.
And the proof that they go together is that a year later, this is kind of a spoiler-able question, because a year later, No Man's Sky came out with an update that was really successful.
People felt like that promise had been delivered upon.
You just take so much work to make the game they had promised.
There's nothing, there's no contradiction in it.
It's just really hard.
All right, question two of three.
Loot games with efficient trading.
This is the Diablo III auction house.
So, besides from the audience.
So despite what you may think, I think this is a cool idea.
Because Diablo is a game about, you know, gathering lots of loot, killing monsters, finding all kinds of cool stuff, and then often, I think, when you're collecting so much, this commerce fantasy naturally comes online.
You want to trade with your friends, you want to buy, you want to sell, you want to feel like you're part of this big global marketplace.
But when it actually launched, people felt like it didn't really land, and it kind of like, the game didn't work out.
So the rich loot experience and the ubiquitous marketplace fantasy.
These are these two promises that you get when you put an efficient trading market into a loot-based game.
Are these fundamentally incompatible? Is it cursed?
Raise your hand if it's cursed.
Alright. Now raise your hand if it's hard.
Okay, so a little more disagreement.
So I'm gonna make a pretty strong claim that this is cursed, because varied loot drop experiences is kind of the core theme, core piece of a rich loot experience, right?
I need to constantly be able to kill a monster and then wonder what's gonna come out of it, and then see this amazing thing pop out and be like, this is great, this is the best day of my life.
But on the other hand, this marketplace fantasy means items are fungible for one another.
Every item is essentially just worth to me what I can buy it for in the auction house.
So what's happened all of a sudden is now every monster in the game is basically just spawning gold.
Over and over and over again, effectively.
So I claim it's cursed and I think in the end there was nothing they could have done to tune this to make the core fantasy work out.
One of the producers of the game, oh I should say this is a special case of what I call the commodified reward problem.
One of the producers said that the auction house undermines Diablo's core gameplay, which is to kill monsters to get loot.
And I endorse that statement.
OK.
So the third and final quiz question, always on location based games.
This is the preferred method of playing Pokemon Go.
So I mean, this is a spicy image, obviously.
But in general, I think location-based games have this interesting situation where the promise is, hey, you go into the world and it's an overlay on top of your life.
It's like this extra magical layer in your life where everything is a little bit different.
And at any moment, I might want to pull out my phone and catch a Pokemon.
And that sounds cool, but also has this tension, which is that I might be driving and die or kill someone.
I might just be walking down the street and trip.
I might go out of my way, maybe in a way that kind of inconveniences me.
Or just in a more banal level, I might not really be present in my daily life.
I might not pay attention to my friends.
So what I'm wondering, these two things, the game kind of demands rewards at specific times and places to make it feel like it has that magical overlay, but also there's this need for personal safety and convenience and also mindfulness at some level that I think is a basic need that the game doesn't promise, but we assume games will not violate.
So, who thinks it's cursed?
All right. Who thinks it's just really hard?
Alright, I want to know how you guys want to solve this, because because for the life of me, these two things seem fundamentally incompatible.
So, I think the... Now, I know why this might happen, why it might seem hard.
So I'm saying that this is cursed, because you sort of need to be able to play anywhere at any time in order to satisfy the first promise, but to satisfy the second, you need to play when appropriate.
And I know why it might seem like this is just a hard problem, because you're like, well surely we can put limits in the game, right?
We can make it so you only see, you know, monsters at times that are appropriate, or when other people are playing around you, or something like that.
And I think that all of those, once we get a little further into Chris' problems, we see that all of those kind of are violating that first promise to some extent.
And so that's why I say this is cursed, because the moves that you have to make to actually make the situation go away kind of turn it into a different game, at least a little bit.
And I think that's why you still have these problems in these games years later, right?
Because you don't want to break that first core promise.
Okay.
So, generally, I'd call this like the life disruption problem, and there are other very different games that encounter these problems.
So this is where we are.
The big ocean there is your game.
It's a wide sea of possibilities, all kinds of things for players to do, have fun.
And that eldritch horror living in the heart of your game is your curse problem.
They're just there underneath the sea, kind of corrupting everything around them.
And it's not like a fish, you can't just like spear it and pull it out.
The thing about Cthulhu is he's not leaving the ocean, like he's just there.
It's core baked into the premise of your game.
So what do you do when you encounter an eldritch horror that won't leave?
You make sacrifices. You kill your babies.
And that's what we're going to do.
There's four little kinds of sacrifices down here we can make.
And each of them is a little different, right?
They're different ways of giving up some subtle, sometimes implicit piece of one of your promises.
And that's the rest of the talk.
OK?
So we've talked about curse problems.
We've talked about why they are hard, why they will likely screw you over if you don't notice them.
Now we're going to say, all right, well, if you still are dealing with one, if you still want to make this game, how can you make a sacrifice, give up some piece of your fantasy, and make a slightly different game that hopefully still makes you happy, still is good enough?
So first I'll present a game model.
How I think about a game that will build these techniques on top of.
And it will look scary at first, but it won't be scary.
So remember, a curse problem is an unsolvable design problem rooted in a conflict between core player promises.
And I'm gonna talk about a common special case of this in which these two promises aren't just anything.
One is an experience and one is an objective.
So by experiences, I mean moment-to-moment gameplay.
What is this game like to play?
But by objectives, I mean like the goals of the game, the driving forces, the things that I'm trying to get out of the game in the end.
And so these objectives are kind of pulling us through, motivating us through different experiences, whether we think they're great or not.
And I think it's okay to limit us to just...
This definition of curse problems for now, because first of all it covers a lot of the cases, probably more than half, but second it's just a much simpler case to talk about.
The techniques I'm going to talk about are easier to explain in this context.
They do generalize to the general case that looks like this, any two player promises.
But we're focusing on this.
Remember the free-for-all politics problem?
So in this case, we have the desire to focus on combat mastery.
That is an experience.
And the desire to play to win is an objective.
That's the kind of contrast I'm talking about.
So here's my model.
It's a game.
Start state is S, and the objective is wherever you're going, O.
And the objective can be given by the game, but often it's at least partially supplied by the player.
And all the nodes in between are the play space.
It's all the things you can do in the game.
Kind of like a state machine, but you should think of these nodes as including kind of the player's mental state, as well as the digital state of the game.
And these objectives, they pull players through the game.
As I said, they kind of guide you into certain places one after another.
And they guide you through this sort of golden path, like this is the right way to play.
And you might not want to play this way, but it's what you're going to do.
And there might be multiple golden paths, but I'm going to use one as an example.
So I've abstracted a little.
This here is your game.
And this is your game on Curse Problems.
This is the situation we get into, where the fire represents promises not being met.
The experiential promise that was given by the designer or just the player imagined themselves is just not being met, but the player is taking themselves through it because they want to get to that objective.
So to make this concrete, in this case, the fiery hellscape is political play, the grassy lovely area is unrestrained combat that players were promised, and the objective is winning.
So, you notice by the way that they might spend a little bit of time in unrestrained combat.
You're not doing political play all the time, but there's enough of it that this probably isn't what the players signed up for.
So what can we do? What out are our options?
Well, that is where these four techniques will come into play.
Games have faced curse problems throughout time.
Often, of course, people didn't know that they were facing them.
Sometimes they didn't even know they were facing a hard problem at all because they naturally found their way into a way to address some previous hard problem.
But along the way, nonetheless, designers have made sacrifices needed to address these problems.
And really, I think these sacrifices really bucket nicely into four techniques.
You don't really have to worry about it too much here.
This is what they'll look like.
This looks absurd.
I know, it sounds absurd.
Barriers, gates, carrots, and s'mores.
Those are the four techniques I'll talk about.
I'm going to go through them one by one so that they make sense.
All right.
So the first technique is barriers.
This is cutting affordances that allow players to break promises.
Basically, if a player is doing something that we don't want them to do, just make it impossible, if you can.
And then they're going to have to spend time in the grassy happy land.
So let's look at an example.
For free-for-all politics, one thing you can do is limit players' agency over one another.
So for example, in a foot race, it's very hard to play politics because you can't do anything to affect the other player's state for the most part.
But there are software examples too.
Battle royale games are actually kind of an incredible innovation in free-for-all games because players are so far apart and there's so much hidden information and there are so many players and lethality is so high that it's just not viable to play a political game.
I can't be like, ah yeah, I know which player I'm going after.
I mean, maybe you can, but it would be an insane idea.
And you can't make alliances with people because they might just shoot you at any moment.
You can try to do these things, but it's basically not a viable option.
Instead, you're forced to play hard.
You play the game of shooting and jumping around and bullying.
That is what this game promised.
It's limited your agency over other players, basically, through spreading you apart.
And as a consequence, you don't get politics.
So now the important part is, remember I said you always sacrifice something.
even if it's a subtle implied goal.
In this case, what you sacrifice is some of the PvP fantasy of control.
A big part of PvP games, many of them, is being like, I own you, you are gonna do what I say, and I can take you down exactly the path I want to take you down.
And this just isn't really, it's definitely not possible foot race, and it's sort of not possible for most of a battle royale game.
You've limited agency over each other, and so naturally players cannot impact each other as much.
Okay.
So now let's see a second example, which I call gates.
Gates are basically a softer touch version of barriers.
You don't completely lock the player out of the actions that might allow the promises to break, but you do make them very difficult to perform.
And challenge is something we get to add in wherever we see appropriating games.
It's a nice, specific affordance of the medium.
So for example, you might spend most of your time not in political play, but players might figure out a way to do it a little bit.
So in the case of Free-for-All Politics, one thing we can do is limit visibility of players' success.
So in PlayStation All-Stars Battle Royale, which I was a technical designer on, it's another brawler for a player brawler.
One of the things we did was we hid the player's scores.
Notice there's no score in here listed, and not only did we hide it, we actually made it harder for players to reason about.
Your score in this game is twice your kills minus your deaths.
So that means that it's kind of hard to play this game, play as hard as you can, and also keep track of everybody's score and know who's in the lead.
And moreover, you sort of have this plausible deniability that lets you just go hard.
Because you're like, nobody knows how well I'm doing.
Like, I'll just go ahead and just kick as much ass as I want.
And that's what lets players play freely and not go as hard into politics.
So what do we give up?
Well, among other things, we give up some of the tension of buzzer beaters.
We don't get these situations where we know all the players are really, really close together and you wonder who's going to win.
Because you kind of just don't know.
And then the game ends, and you're like, oh, turns out Jerry won.
OK.
So the third example is carrots.
This is where, you know, we change the objective.
If the objective is what's drawing them through these problematic states, let's change it or let's create some new goals that help keep them following these objectives all the way to the goal without spending time doing political play.
So, how can we do this with free-for-all games?
One way is to add metagame effects.
This is kind of not a well-known technique, I think, but, you know, I found my way here through using this framework and I looked for examples of games that did it.
So an interesting case, it's actually in a tournament context, for settlers of Catan tournaments.
They don't use, you know, whether or not you won a game to determine your placement in the tournament and how you move through it.
They actually use your performance in an individual game.
So if you win a game, you get four points.
But if you get third place, you get two points.
And all of these points end up determining how you move through the tournament and how well you perform.
So this weird thing happens where I'm not so incentivized to play politics because I don't care as much who wins or who loses.
What I really care about is raising my own performance up.
Just getting from third place to second place is, like, great for me.
And I think politics is naturally diminished as a consequence.
But there's also the side effect, which is you kind of diminish the magic circle of an individual game.
Right? Like, the game doesn't have this win or lose clarity.
It's just kind of like, oh, OK, more points for the point bucket that's going to end up determining maybe what I really care about, which is whether I win the tournament.
All right.
So the fourth technique, again I'm going to say these are pretty much all you can do to deal with curse problems, is s'mores.
Which is to say, okay, players are violating the promises that we think we're making for them, but maybe we can just make that fun. Maybe we can lean into that so much that the promise kind of dissipates and players understand that they're playing a different game.
So you basically give them marshmallows to melt in the fire and then you got s'mores. Yeah, okay.
So, you know, players will spend their time here and it's still great.
So, how do you do that with free-for-all games?
Well, you've probably seen games like this before.
You can give players tools to actually lean into that political play, make it really deep and fun, through, for example, adding secrecy, which is sorely missing from brawlers.
Especially if you don't mind your players never being friends again, you can give them diplomacy.
And they'll have a great time for one game.
And you know, what happens here is like, they have this incredible game of Game of Thrones-esque intrigue.
And you can see it right there on the box.
It says, The Game of International Intrigue.
It's very intriguing.
But the consequence is that you have this lack of emphasis on moment-to-moment action.
Right? It's not so much about exactly where I place my units.
It's really about the relationships I break along the way.
So.
And I also want to call out, by the way, that first example that I showed you of creating smash through weakening promises.
This is another example of s'mores.
We've said, okay, we had these hard promises that this game seemed to imply.
What can we do to change our game so the game itself no longer makes those promises to the player?
So another instantiation of s'mores.
Okay.
So you've seen the four techniques.
Barriers, gates, carrots, and s'mores.
I want to call out that these are, they are general purpose design techniques.
It's not like you can't use these for uncursed problems.
The thing that I think is interesting is that this is sort of all you can do in a cursed problem setting.
I really want you to think of this as a tiny design framework.
Something to apply when you get into certain kinds of situations.
It's not going to tell you how to do the work.
You're not going to be like, oh god, what do I do?
Oh, I know carrots, now I know how to solve this problem.
But it gives you a structure for a difficult creative process.
This has worked for me many times.
I'm looking at a problem and I actually think through these four categories.
It prompts my brain to think about directions.
that I never would have gone down otherwise.
Because your brain doesn't want to make these sacrifices, right?
It wants to solve the problem exactly as defined, and it can't.
So you need something to tell you, like, hey, have you, you know, considered, like, refinancing your home or something?
So, um, that's it.
Now I'm just gonna give you a few more examples.
That's all we're doing right now.
We're just doing examples so you can build intuition for how these techniques work.
And I'm gonna show you exactly one more example for each of the techniques.
I already showed you all four techniques on free-for-all politics.
But now I'm going to do two for another problem and two for one after that, just in the interest of time.
You can apply all of these techniques to all of these problems.
So I'll talk about the co-op abuse problem.
This sucks.
So high stakes co-op games often involve a lot of terrible treatment between players.
And I think, you know, as game developers we have a responsibility to do what we can to make this better.
And some of this, as Meg Giantso eloquently said yesterday, involves, you know, telling the worst players, like the Nazis, to get the fuck out of our games.
But there also is, I think, we have a responsibility as designers as well.
to say like what can we do in our games to make this behavior less likely.
Now unfortunately, it feels like there's this fundamental incompatibility.
Players want to play to win, right?
These games signal themselves as sort of win-oriented.
But a lot of players also, they come for social belonging.
The reason why you're playing a co-op game, among others, is because you want to feel like a part of something.
These two things, they often don't go well together because players who want to play to win will not be satisfied.
Human beings feel like a game is fair when they win 70% of the time.
And that's probably not going to happen in your PvP game.
So if that player also is lacking anger management skills and tends to blame others more than themselves...
You're gonna get them feeling dissatisfied and frustrated.
The social belonging needing player wants psychological safety, needs it for that to happen, but these things don't go together.
And I say sometimes here because it depends on the player, depends on the player's state of mind.
It feels like there's this fundamental tension in any co-op game that has high stakes, PVP or otherwise.
But of course, so the problem is curse, but of course as I said there are things you can do.
You just need to be willing to give something up if you really, really want to go down this path.
By the way, it was funny, totally independently, a couple of my colleagues at Riot, Naomi MacArthur and Kenny Shores, gave a talk yesterday or the day before, Impact of Social Systems in Game Design and Player Interactions.
She talked about a similar topic, what you can do in your design to de-emphasize player abuse.
That's a cool one to check out.
So, we're gonna look at barriers now.
All right, so.
One approach is to just limit player communication.
Right?
Uh...
And you can see a great example of that in a game like Journey.
It's not a high-stakes co-op game, but we can still learn from it.
They basically said, hey, we want to create an online game in which everyone can have a beautiful time together and they cannot treat each other like shit.
And they did it.
They made this game where basically you can run around and walk and jump and make beautiful pings.
And you feel connected to someone.
And it's a huge success.
And you can generalize this to PvP games, even though we haven't seen much of it.
I think Apex Legends is proof that you can, because they have such a kind of communicative ping system that you could easily imagine just turning off voice and text communication in this game entirely and still having a great game.
The sacrifice here, among others, is the rich social channel for relationship building.
Like, we play co-op games.
One of the reasons is so that we can build relationships, make friends.
And it's very hard to practice disclosure when you can't use your words.
So maybe there's some way to tie this together into a game that slowly opens up into more communication.
But you see that we are giving something up by doing this.
Alright, so technique two is gates.
Can we make it difficult to abuse each other?
And yeah, I mean, one way to do this is to limit individual responsibility.
And Heroes of the Storm, I think, does this very intentionally.
They take the MOBA formula and they say, let's have players share responsibility more.
Let's make it so everybody contributes to a shared gold pool, for example.
And as a consequence, I don't even know who is doing well and who is doing poorly, at least on this front.
And it makes it that much harder for me to pick someone out to abuse, to blame my problems on.
There's an even more extreme example of this in something like, a game like Werewolf or Mafia, or any social deduction game in which, you know, one of the teams doesn't know who else is on their team.
It's really hard for me to flame at you for not helping me out, if I don't even know that you're supposed to be helping me out.
At the end of the game, players may all hate each other, but at least during the game, it's all kosher.
So here we give up some of the fantasy of harmonious cooperation, right?
Like because players are less individualized, there is less of that Ocean's Eleven feeling of like, you know, I'm using my bomb skills and you're using your not werewolf skills or whatever they are, and each of us is coming together to contribute individually to this fantasy of cooperation.
Okay, so we saw barriers and gates for co-op abuse.
Now, we are going to see carrots and s'mores for what I call the quantified creativity problem.
So this is The Sims 4.
It's an example of a creative game with goals.
Now, I had this experience when I bought The Sims when I was a teenager that might resonate with you, which is I was super excited by it initially.
I loved the, you know, the weird storytelling and the relationships and building crazy houses and so on.
But slowly I got sucked into what almost felt like another game, which was the rat race of improving my Sims career.
And he was a scientist and I really, really wanted to get him to level 10.
Because when he got to level 10, he was an astronaut.
And I was so excited and finally I got there and I spent all this time and all this effort just focusing on leveling him up and, you know, living the life I needed to to get him there.
And he goes into space and I'm like, yes.
And he comes down and like I think both of us got post-space depression.
because it was like, what's left to do now?
We got there, right?
Like, my life dream is complete.
And I noticed I completely forgot about what initially interested me about the game, which was this creative play, this wild storytelling and fun and expressiveness.
And this is the problem, is players see a game like this.
They want to express themselves.
The game clearly signals they should.
But the game also wants to draw them in with goals.
And that ends up making players want to progress their character or whatever form the progression takes.
And these things are in conflict because expressing yourself involves following intrinsic goals, kind of like following your heart, basically.
And progressing your character involves following extrinsic goals, doing what the game says you should do.
And it's pretty well known that...
Extrinsic goals tend to subsume intrinsic goals, right?
The more time I spend focusing on getting those carrots, the less I really care about what I came for in the first place.
It's just kind of...
Seems to be a rule of thumb in games and in life.
So these two things don't go together.
The problem is cursed.
And note that The Sims is obviously a wildly successful game, as I said, but I suspect that the players who really latch onto this game are the ones who completely ignore the progression, right?
For whom it basically does nothing, and who just really focus on that self-expression.
And I think the designers clearly here want to create a game in which both of these things can come together, right, into this harmonious union.
So can we do this with these techniques?
Let's try carrots.
So can we incentivize players to be creative?
Well, yeah, we can actually give them concrete reasons to be creative.
And this is super weird, because this is going to turn your game into a very different game.
But it might still share some of the DNA.
Like one game that kind of does this is Clash of Clans.
It's a game about building all these towns, putting all your little stuff down, and you can make really wild and creative shapes and layouts.
And you actually are incentivized to.
because you want to play off meta.
If players are going to come at you with a specific, you know, set of armies that are there to destroy whatever the typical maps are, you benefit from doing this weird creative map, this weird layout, right?
You're going to tend to win.
It's like bringing a magic deck to a tournament that no one was prepared for.
So, that's cool. Like, you still get to be creative, but the game is actually telling you to, at least to some extent.
For a very different example, you can look at AlphaBear, which we made at SpryFox.
And this is a game, it's a word game, you spell words from tiles on a grid, and the tiles expire, and you want to use up all the letters before they expire.
And there's this weird tension where players, they try to win this game by spelling, using all the words, but they also...
really like spelling funny, weird words.
Like, that's a kind of creative self-expression to get through the game.
And the game was not incentivizing at all.
There was nothing pushing players towards this kind of fun, creative play.
And then, for totally unrelated reasons, we added this Mad Libs feature that would take words that you spelled in the game and then put them automatically into a Mad Lib.
So you spelled YETI and it says, I code so that someday we can afford a YETI of our own.
And maybe if you're really lucky, you can afford a whole town of yetis.
That's some industry humor.
Look it up.
It's a bad story.
Okay.
So the thing about what's happening here is players actually got really incentivized.
to make these funny, weird words, right?
To spell them out, even though it has nothing to do with the incentives of the actual game.
We've created this sort of social, intrinsic meta-game around the kind of extrinsically motivated internal game.
And even though there's no real scoring or anything in this social game, you know, there are likes on Twitter or whatever, people would share these a lot, and it felt like the players could play these two games simultaneously in harmony.
And it almost seemed like the fact that they were separate games made it easier to hold both of these things in their head.
Players really enjoyed looking forward to spelling the words that would make these math labs.
Okay, what do you sacrifice? You sacrifice the safety of unconstrained creativity.
Obviously in both of these examples, I don't get to just go wild and do anything I want, right?
I'm really, I still am trying to win, you know, and that means I'm going to be way less expressive than I would be otherwise.
But maybe that's okay for you as a designer. In each of these cases, you're developing your game, you have to decide what kinds of sacrifices you're willing to make.
Alright, for a final example, how do we use s'mores?
How do we say, okay, maybe the lack of creativity isn't so bad.
Well, you'll end up in a very different place here, but I claim there's still a connection.
You can create rich, deep goals around the simulation in a game like SimCity or The Sims, and maybe get a totally different game.
What you actually get here is Civ.
Civilization in a weird way is SimCity with the creativity kind of sucked out.
It's not that you can't be creative in Civilization, it's that you wouldn't be.
This isn't the game you would pick because they realize that there's so much depth there in the core gameplay, there's so much strategy and so many interesting constraints and goals, that they just lean right into it and say, okay, we're going to make a different game.
But it still has some of that core DNA of what, say, SimCity is.
And, you know, you focus a lot more on winning these games than you do on, like, making a really weird Civilization.
And of course, here you've given up most of the original self-expression goal, right?
This is kind of the most extreme of the sacrifices.
But you want to know the full spectrum, because you might find yourself in a really cool space by being willing to relax your goal.
So, that's it.
These examples I've shown, two examples for each.
There are a lot more out there, but it's as much as I have time to show you, so you can build this intuition for how to use these techniques.
So to wrap up.
Curse problems cannot just be solved.
They require a sacrifice.
You have to give something up.
But, there's kind of an exciting silver lining to the existence of these curse problems.
I've talked about what to do when you run into one, right, and you kind of stare it face down.
But you can also seek them out.
Curse problems are the highest hanging fruit out there.
Like, people are ignoring them because a lot of people think they're impossible.
But they're also the ripest problems.
They have so much potential for finding new ways to create games.
And if you actually seek them out and decide to pivot a little bit, you find this whole new open area.
So here are some challenges.
Just a few things that people have told me are impossible.
There are many more cool ones.
So one is making a multiplayer game with player-generated content that somehow lives in harmonious balance, that isn't totally broken.
Another is creating PvP games, like I said, in which all players feel there was a just outcome, despite the fact that they want to win 70% of the time.
And the last one is a game that maintains a sense of mystery and discovery in the age of the internet in which all secrets are laid bare.
These sort of seem fundamentally contradictory, but the idea is when you have a contradiction, you only have to pull out kind of one pin of those promises and you get this whole wide open space.
So, the next time you find yourself wandering the desert, This cursed to search forever for the solution to your problem.
And maybe with your whole team with you.
Stop looking.
Turn around.
There is a lush forest of possibility behind you.
Thanks.
Also please fill out your speaker forms.
Okay, so I think we have time for questions.
It's 4.48.
We have 12 minutes of questions available.
All right.
Does anyone have questions?
Hey, how's it going?
What's your name?
Ibrahim.
Ibrahim?
Cool.
Can I see a situation where adding monetization would conflict with the player goals and create a curse problem?
Oh yeah, definitely.
I mean, that's definitely one of the canonical curse problems that I think of in the modern era.
There are a lot of ways to frame it.
There are multiple pairs of promises that break.
Even for an individual player who...
Sorry, the question was, can I see monetization creating curse problems when you add it in?
And yeah, even for an individual player who is, you know, promised this opportunity to make their game more exciting by spending money, like, you can create that, right?
I think, like, that player might be satisfied.
But you sort of naturally create a fundamentally devalued experience for other players, right?
We're very well aware of that.
The fact that other players can pay to win or improve...
brings down the sort of feeling of value for the other players.
You have this natural conflict between promises, for sure.
Yeah, and I think it's a great area to actually try applying some of these techniques and figure out if you can find clever ways to make monetization work for everyone.
Any other questions?
We have another question over there.
Hello, thank you for the talk, it was interesting.
Thanks, what's your name?
My name is Anatoly, nice to meet you.
I wanted to ask, are there any examples of you using this example in your actual Riot work?
I thought someone might ask that, and the answer is I cannot talk about it at all.
Sorry, that's the funny thing about giving talks when you're in R&D.
Yeah, but thank you for asking. I'll tell you in a couple years.
Hi, my name is Matias. I was wondering, there was a talk during the board game design track about a defense for king making.
Yeah.
What did you think about it and do you think it's a viable approach to this curse problem?
So I love that talk.
That talk, I went to see it because I was related.
This is a talk by Cole, I don't know how to pronounce his name, Wuerl, who was a designer on Root, which is a board game that seems really cool.
They haven't gotten to play yet.
And basically he talked about kingmaking, which is a special case of free-for-all politics.
where players get so far behind in the game that they know they're going to lose, and the only thing they can do is basically decide who's going to win.
That's where they get their fun from now.
It's considered kind of a dark anti-pattern in games, and his whole talk was like a defense of kingmaking, how this is actually a really cool form of gameplay that's really unique and offers a lot of individual potential.
And yeah, the talk was awesome, and I recommend you check it out.
In general, so kingmaking is itself...
It's a curse problem, but it doesn't fit the framework that I talked about, where experiences conflict with objectives.
Kingmaking is actually...
It's a curse that applies...
I'm trying to remember exactly the framing, but I think it applies across players.
Because you can have these curses where one player's promises are in conflict with another player's.
And so finding solutions to it kind of is naturally harder.
But yeah, you can apply these techniques.
And you know, you can make games about kingmaking.
And that can be super fun.
He gives some good examples in that talk of games where, you know, you know that's what you're there to do.
So it doesn't feel so bad when at the end of the game that's all you can do.
OK, that it?
All right, thank you so much everyone for coming.
