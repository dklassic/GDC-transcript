This is Tricks of the Trade.
We have exactly six animators.
They have exactly five minutes to give you the best tips and tricks they know.
Please do not clap in between each one.
Save all of the applause for the very end.
We are animators and we need every second you have.
Take it away, Benson.
Okay.
Hi, I'm James Benson.
I worked in AAA for five minutes on Fable, and then the canceled boy simulator.
Then I made Ori and the Blind Forest, and Firewatch, and now I'm making In the Valley of Gods.
I'm going to talk specifically about some Unity system stuff, but the gist is all sort of broadly applicable.
So tip number one, avoiding state machines and trying to keep your animation sets within a single blend tree.
So the problem with state machines basically is that they give you these kind of binary possibility states where you're either standing or you're crouched.
And this isn't just a visual problem, it's a controls one.
Why are blend trees better?
So you can exist indefinitely in between two states.
You can transition non-linearly by driving floats.
Mechanin by default, when you go in between states, you can only do linear stuff.
It's completely hard-coded.
There's no way around it.
Most importantly, they synchronize the footfalls and they'll scale time so that everything is seamlessly in sync.
So that's sort of the basics.
Using these bits of knowledge, you can replace almost all of your locomotion transitions with dynamically controlled blends.
So here, when we hit the ground, we're blending into the crouch movement state that we used for the previous little GIF.
And we can also define how far you're going to blend into that crouch movement by how fast you were going when you hit the ground.
So you can actually get a much more dynamic thing than you would have just by authoring a single clip.
Think of your blend tree like a flowchart asking a series of progressively more specific questions.
So here, we're also asking how far away are you from the ground?
And because the answer is not very far, rather than throwing you into a new state with a big falling loop and your arms in the air, we just put you into a slow falling walk where you have one foot out to catch you when you fall, and then we do the little crouch bounce.
And all in the same blend tree, it keeps you in the same foot phases, and it's a seamless thing.
If the ground's further, you can go into more traditional falling loops, and if it's really far, you can do these kind of I'm going to die when I hit the ground animations.
And again, when you do hit the ground, you know that the feet are going to perfectly be in phase and it's all going to be nice and seamless.
By putting your time into variations on your loops, for different directions, accelerations, etc.
You can skip a lot of individual clip authoring and management.
And you'll also find that because you've made so many movement cycles, you'll just naturally create much broader possibilities for movement for the character.
So tip number two, build multiple layers of dynamics into your idle behaviors.
So keeping an NPC alive is really hard.
Baking a character's awareness of the environment into the clips, it works very, very well in a game like World of Warcraft.
But if you need your NPC to be able to dynamically direct their attention, like say into the player's eyes in a first person game, you're gonna have to have some kind of dynamics.
However, if you build your look at stuff as like a single IK chain, it's going to be very rigid.
There's going to be no overshoot or overlap.
So if instead you split your character's attention into say the eyes, the head, the chest, the equipment they're using, even if you want all those things pointed in one direction, they're going to get there with different timings.
And even better, you can point them in different places.
So for example, they have their torch on an interesting thing in the environment, and then they dynamically look back to you with their head and eyes to sort of signal, look at this interesting thing I'm pointing at.
Combined with locomotion, you can create interesting behaviors like dynamically looking over their shoulder when they're walking backwards, or tracking the path that they're moving along to give a sense that the character has some kind of forethought.
Those sort of systems work nicely with full-body IK, terrain kind of stuff, and you just generally build up a sense that the character is animated within the space in the game and not like a series of clips in Maya or 3ds Max.
My next tip is facial capture.
This is mostly a thing for small teams, but my assumption until relatively recently had been that face cap stuff was gated by enormous budgets and team sizes.
And it turns out that's just not really the case.
The software and hardware can be gone for a few thousand dollars, and largely it's the same kind of stuff that big teams are using.
It's more expensive just like.
getting lots of people to crunch the data.
But I think that it's not something that's super commonly thought of in small teams as a feasible option.
We've got two animators now at Camposanto, but even when it was just me and I was doing these initial tests, it still seemed like a very feasible thing in the pipeline in terms of the time it takes and so on and so forth.
So those are all my tips and tricks.
If you didn't like any of them, hopefully you'll like Jalil Sadul's tips.
No, we're good, we're good, we're good.
Hi, my name is Jadul Sadul, and I am the CEO and co-founder of Stimulant Studios.
It would be presumptuous of me to tell you how to build a successful company.
I've only been doing this for three years, and I have a feeling I need 10 more to really get the big picture.
And it's even more ridiculous to be doing this in five minutes, but here we go.
Most people ask how long since we've opened Stimulant Studios, and usually I say three years, but in reality it's taken over 14 years, my whole career.
A good reputation is crucial.
Someday if you want to stand on your own in this industry, like running a studio, a strong network and a good rep will be extremely, extremely valuable.
It's a very small industry where everyone knows everyone.
How do you keep a good rep?
You work hard. This is Lee, our Community Manager.
Focus on the achievable dream, not the blue sky dream.
Each step you take, make it your best step forward.
If you find yourself wanting status, then you are doing it wrong.
The title of supervisor or director will find you when you are ready.
You want to be remembered as a hard worker.
If you're given a C-shot, don't complain.
Just do the best you can.
You will get noticed if you put your heart and soul into it, and it might be something that your colleagues never forget.
Keep in mind, the best animators out there can turn C shots into A shots.
Now, that's a skill that will get you noticed.
Be remembered as someone reliable.
Nope.
Wrong.
I got it.
There we go.
Da da da, yeah, be even harder.
It's difficult to get your first job, but it's even harder to keep a job.
Make yourself invaluable to your team.
If you are new to the team, your chances are limited.
Yes, most supervisors play favorites.
Therefore, work towards getting yourself noticed.
We apply the same philosophy at St. Moyer Studios.
If we work hard for our clients, they will always remember us and point others in our direction.
Integrity is a huge part of building a strong team.
Be honest.
With your clients, it's better for your brand if you don't take a job, then take the job and do it badly.
Treat your team and clients like they are a big, happy family.
There will be ups and downs, but in the end, the product, as well as the process, will represent your brand.
Don't just partner with your best friends.
Partner with people who are as hardworking as you are.
Leaving your big ego at the door is the first thing you do in a partnership.
Know whether to trust your instincts or not trust it.
Use a good 10 years of your career as a guide.
Study decisions you've made and where they've led you.
But also do the same for your leadership team.
Sometimes you have to trust in your business partner's decision even if you disagree.
If a member of your leadership team makes the wrong call, fix it, learn from it, and move forward.
Easier said than done, but it works.
Animators can be a bunch of drama queens.
I know, I'm a bigger one myself.
I speak their language.
Happily walking around the studio and bothering everyone means your shot is going really well.
Putting your headphones and hoodie on means your animation is not looking so good.
The trick is knowing how and when to help them.
Sometimes you just need to let them be.
Other times, jump in or that grumpiness will spread like the plague.
My point is, know your team well.
Without respect, it all falls apart.
Too many companies promote based on seniority.
It's a touchy subject.
You want to be respectful and promote your senior employees, but how many of you have worked under supervisors you just didn't believe in?
Promoting someone only because of seniority will disrupt the team and put a needed pressure on that person.
Promote based on merit, and respect will follow.
Three years ago, we all took a big pay cut.
Luckily, being in Florida, we were able to survive.
But when your studio finds stability, make sure you re-evaluate everyone who made sacrifices at the very beginning, or you will lose the same people who helped build your company.
Have a strong philosophy.
At Stimulo Studios, we believe in never being scared to fail.
Arnold said it, I live by it.
In the past, I only had my family to worry about.
Now we have 40 people and their families.
As a small studio, we have to take risks, but they have to be calculated risks.
Make sure your leadership team understands your company's philosophy.
If they do, everyone else will.
If I tell you that high quality of work and a family-oriented company is our philosophy, you'll say that that's everyone else's motto.
But before making any decision, we ask ourselves, can we produce the quality of work that represents us?
And can we also do it?
Can our team also do it within the deadline?
We don't take a job if it's going to hurt our team with a lot of overtime.
Well, if you give me $10 million to risk in Pong in a week, maybe I'd take it.
In the end, our team's well-being and the quality of work we produce is our brand.
Thank you very much.
And next, we have the lovely Al Mudena.
Okay, we're okay.
Hello, my name is Almudena Soria, and I work at Naughty Dog.
Today, I want to give some tips about motion capture, starting with what to do before the shoot.
Often, motion capture sessions are done externally.
We pay for space, actors, data, so it is very important to plan ahead of time.
Before shooting, you should have a very clear idea of what you want to capture and how.
This doesn't mean you can't experiment in the stage, but the bigger decisions should happen in advance.
It is important that you talk to designers, game and creative directors to discuss how the performances would be, what speeds and height are required, and what is the tone of the scenes.
Before you shoot, preview the scenes and implement them in the game.
These will answer a lot of questions before the capture.
The more accurate the previews, the better the capture would be.
Once you know what you want to capture, create a shot list.
Have different fields for all the information you need.
Name, description on the move, characters, props.
Try to keep all the information in one place.
Also, try to organize the shots so you don't have to jump between them.
Use a good naming convention so you know what you are capturing by just looking at the name.
Have in mind the actor's endurance.
Don't have them doing a crouch move set for five hours or a sprint right after lunch.
So mix it up.
Not only will it help the actor's well-being, but also their performance.
When shots require a build, try to sort this in order so you don't have to take those builds down if you're going to leave them later.
My next tips are related to the day of the shoot.
We work in empty spaces, and that makes it difficult to communicate what we want to achieve to the actors.
So take references with you to show them.
Things like footage on the game, concept of the characters, environments, script of the scenes, and previous.
When giving directions, start by describing the context and what the situation is and let them act.
While reading this book, directing actors have learned that if it doesn't work and it's absolutely necessary to give some more details, use verbs, not adjectives.
For example, don't say something like, act more nervous.
Instead, you could say, move faster, try to breathe heavily, fidget with your hands.
I want to emphasize though that it's better to let them act instead of giving such specific directions.
Also, listen to what the actors have to say.
All the time they come up with ideas that are very, very valuable.
Have someone that is not directing the shoot taking notes, so when the data is delivered you don't have to look through all of it to know what you like in the first place.
When capturing gameplay, there are specific requirements.
These are speed, movement trajectories, beginning and end poses.
These restrictions can make the performances stiff and very unnatural, but they are necessary.
I like to start by not giving much direction at first and start restricting from there.
Getting an accurate data on the stage will save a lot of animator time.
You will need to find the right balance between the time spent at the stage and time spent adjusting the animations.
Here are a few tricks we use for gameplay captures.
Guide on the ground to keep the actors on a straight line, cones to measure the speed, and guides to make sure the actors end up with the correct foot position.
When capturing movements or scenes in parts, make sure you choose a good branching point.
Match the poses and momentum, and make sure you have enough data so you can do a good blend between them.
And finally, some tips to manipulate motion capture data.
When assembling takes together, make sure you spend time on assembling face before committing to polish.
Avoid foot sliding big lerps or pops.
Ideally, if something wasn't capturing properly, you would recapture it.
But if you can't, try to do your best while working in non-linear editing, such as tracks or time editor.
When a designer asks you to make an animation faster, doesn't mean make it faster, just mean make it shorter.
So instead of speeding up the animation as a whole, you could try to make just some of those parts shorter.
For this, I use a trick, which is blending the animation with itself in tracks or time editor.
I look at the original data and analyze where it would be okay to collapse time.
Places like struggles, long recoveries, settlings, anticipations.
These methods allowed for a very fast iteration without losing data and it's a very, very visual way.
And my last tips, while working on a scene, use video reference from the shoot and keep the original data so you can always compare it to your edits.
And next on, it's Johan.
All right, hi.
OK, let me do this.
Hi, everyone.
My name is Johan.
I'm currently a principal animator at Riot Games, working on League of Legends.
I first got into animation by taking a 2D animation course.
And many of the ways I approach authoring my 3D animations and problem solving is still from a very 2D perspective.
These next tips, or I should really say my habits, are things I noticed myself doing on a day-to-day basis.
So here we go. Trick number one. Draw on your monitor. I use a dry erase marker to dry over my animation as a way of tracking what I've done so far or to plan what I want to do next.
Here's what you need.
Dry erase markers, whiteboard cleaner, cleaner refill, microfiber cloth.
And I just want to say I haven't run in any monitors so far, but I work on Dell monitors.
I don't know about Apple ones.
They use special coatings.
I don't know.
So use discretion.
Here are a few things you can do with the marker.
Well, we can create a line of action, ID to pose.
And basically, you can rough in your pose and line up the character to the drawing.
It's fun.
Another thing we can do, keep track of contact points, like foot contact and hand placement.
Basically, you mark the point and you slide your post back in place. It's a really great way of tracking swings and arcs. By dotting the key frames and connecting the dots, you can visualize the path. This also lets us visualize timing.
By tracking the spacing between the poses, we can see how fast or slow something is moving, which kind of leads me to my next tip, tip number two, use evenly spaced key frames.
And so what do I mean by that?
When doing this, I set keys along even intervals, like in this case, every three frames, and delete anything in between.
And I should emphasize this is usually for a small range, like a swing or an attack.
And why is this useful?
Well, it lets you visualize your timing in your animation when jumping between your keyframes.
I'm gonna try to explain using this movement.
Here you can see the object is accelerating in the beginning and slowing down near the end.
And I'm gonna show you the keyframes in that movement.
You can see how different the spacing is at the bottom.
And let's just say we were to key evenly for the same movement like every four frames.
And I want to compare these two and show you how we can actually see the timing visualized.
And looking at the spacing of the non-uniform poses, I have no idea what the speed is like, because there's no constant where the key frames exist in time.
Looking at the example on the right, we know each pose is four frames apart.
And then when looking at the poses now.
We can clearly see that the ball is moving slowly in the beginning, zips across in the middle, slows down near the end. I hope that made sense.
My last tip, orthographic views. Use orthographic views. I'm not sure, I'm sure you guys already do this, but I just want to emphasize how important it is, especially when you're working on 3D games where your animation...
will be shown from multiple angles.
And by no means are these views accurate representations of the final animation, what they will look like.
But it's a really good way of gut checking your work by eliminating depth.
It can help reveal posing mistakes and other flaws in your animation.
Here's an example of a pose that looks okay in perspective view.
And look at it from front view, and we can see that the pose is off balance.
In orthographic view, it's really easy to correct this pose.
So let's do it.
Here we go.
Orthographic cameras can also be used for tracking movement.
Here's an example of a character flying through space.
The animation is shown in normal perspective.
Here it is from front and side, orthographic views.
And this is a really useful way of tracking arcs.
And I can worry about making changes, a dimension at a time.
I can track gravity as well by looking at the vertical spacing between the keys.
You can also track him up top to see if he's moving in a straight line, and he is.
And generally I found that overall if you can make your movement look pretty decent inside front view and sometimes top, it'll generally look good in most angles.
You know, I found myself in the beginning not using orthographic cameras due to how inconvenient the interface was. Maybe it was because it took too many clicks.
I've then, I've since created myself hotkeys to quickly switch between the different viewports.
So, and, you know, definitely something I use every day and I'll include a link to the scripts and hotkeys at the end of this. So.
Let's see, to summarize what I just rambled about. Draw on your monitor using dry erase markers. Use evenly spaced key frames. Use orthographic cameras. And if you wish, follow this link and it should take you to my scripts. Thanks for your time. And next up, talented Kyle Chittenden.
Okay, hi, my name is Kyle Chittenden, I work at Certain Affinity, and today I will be talking to you about animation tests.
Animation tests, we all do them.
We all lose countless hours of sleep doing them.
And at the end of the test, we all feel like we needed more time and it could have been so much more.
But we go to bed fairly happy with our completed animation until we wake up literally three days later and come to fool ourselves into thinking that what we've just submitted was utter trash.
So if you're a student looking for a job, an employee looking for a new work, or someone who just got laid off and is maybe looking for their next step, listen up because I've been where you've been and through it all I've learned some important things.
So here are my animation tips and tricks that have helped me out through the painful moments of animation tests.
Pre-production.
Pre-production is like your best friend, an adorable pet, and a pint of ice cream all combined into one delicious Palico companion.
I urge you to take a good chunk of your time for pre-production in searching for references relevant to what you're animating.
Don't know where to look for references?
Well, I've got good news for you.
You can basically look anywhere.
Games, movies, novels, comics, videos of you doing the actions, indoors, outdoors.
Honestly, you can put your dog in a mo-cap suit and film him.
Anything to make sure that you have the best animation background possible to what the test entails.
Now, also, while you're doing this, be sure to come up with a background bio for your character.
if they don't already have one.
This will help you a ton in knowing how they interact with their environment.
Ask questions like, what are their motivations?
What are their strengths and weaknesses?
What are their current views on net neutrality and the authorities that govern it?
The deeper you delve into the character's background, the more you can give them a unique personality and an animation test that defines who they are.
Second tip, double-up on controllers to avoid gimbal lock.
All right, so if you're an animator like me, then you love doing animations full of flips and spins.
However, if you're only using one controller to do this, then you might notice something a little bit unnatural.
And this is because of gimbal lock, which gives priority to an axis while rotating an object.
If you're having gimbal lock issues during flips and spins and you can't send it back to a rigger to fix it, such as during an animation test, well then, you might wanna try out this simple trick.
Create a new noob circle and scale it so you can easily see it around your character.
Then parent the original master controller to the new controller you just created.
Use one controller for all the flips and the other controller for all the spins.
Because you're dedicating each controller to rotate in only one direction, gimbal locks shouldn't be a problem anymore and you can go about making your sweet animation.
Use reactive objects to clarify animations.
Okay, so a test entails that you have a two-prong combo attack, but you're not really sure if everybody is able to see the second attack land.
Well, the first thing you want to make sure of is that you clearly portray that second attack landing.
However, if you're still a little bit paranoid, then it doesn't hurt to add a static mesh that reacts to the character's attacks.
So go ahead and make a mesh and have it represent the enemy.
It doesn't need any crazy animation, just make sure that you give it a representation of weight.
This is cool also because depending on how much weight you give it can show how much power each attack has when it lands.
Lastly, play-blast the animation and send it into the company noting that the mesh is there as a representation of the enemy.
This lessens your anxiety and shows that you were thinking of how to do the attack with an enemy in mind the whole time.
Four, twinning the correct way.
No, I'm not talking about twins here.
I'm talking about when two objects move in parallel at the same time.
Thank you, Mr. Obama, for demonstrating.
If you're an animator, new or old, then you've probably heard that twinning is bad.
However, I'm here to tell you it isn't, as long as you do it correctly.
Tim Ritter goes into this concept more in depth, but let me reiterate that if you're twinning, that's okay.
Just make sure that you're breaking up the animation to account for it.
Space your timing so that the poses land at separate times, lead the motions into different directions, offset one part of the body so that it makes the character less symmetrical, avoid consecutive twinning poses throughout the shot, and be intentional with your movements.
Many successful games and animations in movies have done this successfully, so you'll be in good hands when you're trying it out for yourself.
And also, and lastly, don't commit until you're ready.
This isn't marriage advice, this is advice on when you should start a test.
If you're currently in the middle of finals week, if you're crunching at work, or if things just feel a little bit more hectic than usual, don't start an animation test.
Companies will often send you a test and give you an allotted amount of time to do it.
However, they're usually pretty flexible about when you could start the test itself.
Take them up on their offer, and don't be afraid to say that you'd like to start the test a few days down the road.
Also, if there are other candidates trying to take the test the same time as you, they're not going to pass you up in line.
As long as your animation is good, that's what matters.
And the only way you can make the animation the best it can be is if you have the time to commit to it fully.
And that's my talk.
Hopefully these tips will help you, as they have helped me.
And if you didn't like it and you fell asleep throughout the presentation, well then hopefully I've at least assisted you in a five minute nap.
All right.
Lastly is Gwyn Frey.
Thank you.
There is one rule.
All right.
My name is Gwen.
I am a technical animator.
I am a studio founder for the Molasses Flood, and I'm the sole animator there.
I'm going to showcase tips and tricks I used while working on this character, Scout.
She's a prototype character we had in game.
Or she's just a prototype character we had.
When I started out with her, I wanted to make a character that had absolutely no transition animations at all.
A transition animation is an animation that takes you from one loop, like a run or a walk, to another loop, like an idle.
It tends to slow down your iteration because you have to update it every time you update either loop.
Instead, for her, she has four animations total for her locomotion.
An idle, a run, a walk, and a kind of hard stop animation.
If you look at this video, you'll see that the moment Scout stops moving, the foot she has planted on the ground still stays on the ground.
The foot that's in the air plants, and she'll shift her weight onto the newly planted foot, and then slide the foot that's on the ground.
to match where it needs to be for the idle location.
The way I did this is I made two float tracks in the walk and the run cycles.
One float track is for the left foot and one is for the right foot.
And they'll blend from one when the foot is planted on the ground to zero when the foot is in the air.
Whenever the scout stops moving, I freeze her locomotion animation and I can query these two tracks to see if a foot is planted on the ground or not.
I also added a remain planted float track to the hard stop animation.
This track is one for the first half of the animation and blends to zero over the time I wanted to move her planted foot to the idle location.
Now all I have to do is multiply that is planted float track for each foot by the remain planted track in the hard stop animation.
And I can use that to drive the blend for the IK target bones.
I just said I'm using IK target bones, let's talk about IK.
This strategy requires that I have IK running on my character at all times.
This is pretty typical for me.
And I tend to set up IK in a similar fashion for all of my characters.
I have bones in the rig for the leg IK targets.
These bones are constrained to the ankle bones but parented under the root of the character.
Since these are in the rig, they're automatically exported for every animation I make.
So anytime in engine I need to figure out where the feet should be in root relative space, I can just query the location of these bones.
I also have bones parented under the pole vectors for the leg IK.
I figure we're, as animators, we're already managing the pole vector.
We might as well bring that information into the game, into the engine, and use that to drive our pole vectors for the in-game IK as well.
I use IK for run stop, but I use it for all kinds of other things as well.
Here I'm using it to make a quick and dirty kind of slope variation for all of our locomotion.
All I did here was I took the IK target bones, parented them under a world orientation bone, and every tick I cast a ray down to the world and find the normal angle of the world to set the orientation of this bone.
This will obviously orient the IK feet to the ground.
You'll notice if you're watching here very carefully that as her feet approach the ground, they blend into the IK and they blend out whenever she takes her feet off of the ground.
Also, whenever she's jumping, for instance, in-game IK will turn off.
Guess how I'm doing that?
I'm exporting that from Maya as well.
So I actually export the blend between IK and FK in Maya, and I have that float track drive the in-game IK in Engine.
What this means is, when I'm animating something like this jump here, I'm thinking, as I blend from FK to IK, that her feet in IK might be slightly manipulated by slope variation or something else in game.
I just keep that in mind as I animate.
Speaking of jumps, for a traditional jump, you have a looping fall animation, and then you kind of hit the ground and you blend really quickly into this landing animation.
You don't have a lot of frames to play with if you do that.
You can't really give the character a lot of weight.
I generally think this kind of looks bad.
I saw a talk that Loren did for Paragon, and I kind of stole his idea.
Instead, I animate the land from a much higher point off of the ground, and I have her feet reach through the collision cylinder and touch the ground before she actually makes contact with the ground.
I don't actually play this animation.
What I do is I query the distance she is from the ground, and I use that to select a frame of this animation.
So, to reiterate, that animation happened, it started with her 100 units off of the ground.
So, in Engine, what I'm doing is I'm detecting how far she's off of the ground, dividing that by 100.
and playing the frame that is that percentage through the animation.
This animation does not play.
I am selecting a frame of the animation based on an input variable, which is in this case, the distance from the ground.
This is important because, like, say, she could be falling at different velocities, they could manipulate the arcs.
It doesn't matter what the designer does, because the animation is data-driven, her feet will never penetrate through the ground.
I use this concept for all kinds of things.
For instance, I dislike how turn-and-place animations are usually set up.
It's usually a lot of different footfall animations blending together in some kind of hot mess.
Instead of that, what I did for her was I made one turn-in-place animation that turns her 360 degrees.
And I queried the world space orientation of Scout at all times.
And I used that orientation to drive the frame that I'm selecting of this animation.
So for instance, as she's turning, and the engine detects that she's turning left or right, this animation will play forwards or backwards.
I'm constantly selecting a frame of this animation based on her world space orientation.
What you're seeing right here is actually only three animations.
One where she has her feet moving, one where an identical animation to that, that just has her feet planted on the ground that I blend to anytime the world orientation is not changing.
And then an additive idle that plays over the whole setup.
So with three animations, I can actually make a pretty decent turn in place.
All right, this has been.
tricks of the trade. You may now everybody stand up.
Thank you. We hit it perfectly and have no time for questions. Have a wonderful day.
