We are here to set the record straight as technical designers on what this role is all about.
Too many people still stutter when talking about what a tech designer is supposed to do, how to manage one, let alone writing an accurate job description when hiring.
So in true tech design fashion, instead of taking this endeavor on by myself, I've called and assembled my Avengers of tech design, whom I've had the benefit of either studying with or working alongside of.
I consider them not only dear friends, but role models and mentors.
Together, we combine for just shy of a century's worth of experience in the industry, performing this role.
across many different projects and studios to hopefully give you the most holistic view possible.
Welcome to Avoiding an Identity Crisis as a Technical Designer.
On this panel, we're going to get into it and lay a firm foundation on what a tech designer is.
We're going to share what a typical day tends to look like.
We'll then carve clear lines in the sand on how this role differs from the other design families.
We'll talk about whether we also talk about what it means to generalize and how that leads to being as effective as we can in this role, and also contrast that with specializing which is sometimes also necessary.
We'll point out some of the common pitfalls that tends to arise in this role and how to avoid those.
And finally, we'll wrap up with advice on how you can get into, grow in, or even nurture this role at your studio.
I'll invite you to jump in on the chat, say what you currently do, and mention what you hope to walk away with from this panel.
A little bit about me.
I'm John Diaz, a technical designer at EA on the Frostbite engine, which powers some of our franchises like Need for Speed, Madden, FIFA, Battlefield, Show of Hands, or even in the chat of who has seen the latest Battlefield trailer.
And there I do all the usual things in tandem with engineering, enhancing workflows, designing dev-facing features, providing general support to our devs, be it in the form of documentation, examples, and tutorials.
I've been at this since I graduated from FUSO in 2006, just shortly after Rusty and Anne.
I thought I was going to break in and be a gameplay or tools programmer.
Turns out my first gig actually came in the form of a game designer at Midway Austin, scripting content on Unreal 3, alongside our then technical designer, Rusty.
And honestly, I attached myself to him and modeled what he did, enough that eventually he gave me a chance and took me under his wing to get my first taste of doing tech design.
And since then, I've never looked back, despite what my role officially said.
At Rockstar, I moved into more of a player-facing role, scripting content and missions in San Diego.
So that's where Alan was actually a prominent voice on the technical portion of my interview gauntlet.
So I worked alongside him there and Alicia on Red Dead Redemption 1, Undead Nightmare, onto GTA 5, and about a year or so on Red Dead 2.
After that, I ventured over the border, got in at WB Games Montreal to do AI systems.
And that's where I met the powerhouse Jerome Perrant and worked a little bit on Gotham Knights and got my first taste of Unreal 4.
Eventually Amazon enticed me to come over into the world of engine development to get back into my roots into dev facing development as a tutorials technical designer.
showing the world how to use Lumberyard, and which, funny enough, made me a prominent candidate for the Frostbite UX team over at EA. A little fun fact about me is I produce a game dev podcast that focuses on sharing our stories and experiences as game devs to hopefully leave the industry a little bit better than when we came into it.
With all of that said, I'm going to get out the way for the real stars of this panel.
So I'll turn it over to our Bruce Banner, aka Alan Blaine.
Hey, John. Thanks. Hey, everybody. My name is Alan Blaine. I am a staff technical designer at Bungie, where I've been for the last five years, and I help build activity and pursuit design tool sets. Currently, I'm the team lead of a technical design team called Frameworks and Rituals.
where we have two roles.
We define the rules and best practices for all the various kinds of content we build on Destiny and help build tools to support those rules so that when people build new strikes, they're consistent with old strikes and they work the same way.
Second, we actually maintain and enhance the live game, evergreen ritual gameplay, things like.
adding Nightfalls, Crucible, Gambit.
So I've been designing and building and shipping games for 23 years.
And I have design credits on every PlayStation, every Xbox console, which is kind of interesting.
I actually got into tech design in college.
I was working on a Quake total conversion as one of my projects.
And back in those days, the only way to get new models into the game for enemies and guns was to, you had to have an SGI machine, which I think at the time cost 15 to $20,000.
Id luckily put out the source code for their export tools.
So I took that source code and actually built 3D Studio Max and Lightwave exporters for models so that people could add new guns.
and new enemies to the game.
And I believe those were the first tools put out publicly to do that with anything beyond SGI.
Anyway, that was a long time ago, and I've been doing tech design on just about every project ever since.
So yeah, I'll hand it off to Alicia.
Hi, my name is Alicia Thayer and I am a lead technical designer at Crystal Dynamics. I've been at Crystal for almost nine years now which is kind of crazy. And I've been in the industry for about 12. I worked with like John said, Alan and John at Rockstar previously on Red Dead Redemption and Max Payne 3.
Currently I'm working on R&D at Crystal Dynamics. I can't really say much about what I'm talking about but previously I worked on the Tomb Raider reboot games and Lara Croft and the Temple of Osiris which is very near and dear to my heart. As for how I got here, I kind of face planted into technical design. I took a very academically oriented path.
And the reason for that was because I started really early on my path.
I wanted to get into games, probably down, starting at like 10, 11, 12, somewhere in there, because I remember having this profound moment where I realized that people make games and I can be one of them. So I wanted to go to school for it. There weren't any programs that were near me that really did video game design yet. So I kind of did like a special undergraduate graduate program.
at California State University Chico.
And it was pretty crazy towards the end.
I finished my thesis on a Monday.
I had a job at Rockstar on a Friday.
Rockstar was one of the many companies that I applied to.
I got a job, I think, as technically a content creator.
It ended up being more of a tech design role, but I didn't even know what a tech designer was at the time.
And yeah, I worked as a scripter there for a while and then ended up making it up to Crystal, where I am now a lead tech designer and I'm trying to get a tech design department established.
So I'm going to pass it over to Anne.
Hello, I'm Anne Childen.
I am a senior technical designer and project design architect at Volition.
I've been at Volition for about 11 years now.
I've been in the industry for about 15 years.
have done everything from missions, design, system design, open world design.
And about six or seven years ago, Rusty had pulled me over to help work on creating our own visual scripting system for our editor.
And I have been in tech design ever since.
And I will just pass it over to Jerome.
Hi, I'm Jerome Parent. I'm currently working on Gotham Knights as an advanced technical level designer at WB Games Montreal, where I've been for about five years now.
I've been in the industry for about 14 years, the first six of which have been in QA.
So I didn't take an academic path into the industry, but I still more or less accidentally became a tech designer.
After working at EA, I worked at a small indie studio and helped them ship their first game.
And after that, we started using Unreal 4, and I was able to kind of pick it up, and that gave me the opportunity to switch over to the dev side.
And one day, my boss came to me because he needed to renew my contract, and he didn't know what title to put on it because he wasn't sure what I did.
And I had heard that technical designer was a thing, so that's actually how I became one.
And last but not least, Rusty.
Hi, my name is Rusty Simstrad, I'm the lead technical designer at Arcane Austin.
We are working on something that I can't talk about yet but I can say that what I'm doing there now is kind of trying to start or have started a technical design group there.
I'm one of two technical designers there so that's exciting now.
And my kind of path in the industry was, as John mentioned, went to Full Sail, graduated in 06 and started at Midway Austin, where I got to work alongside a whole group of Full Sail alumni, including John, and got to find out about the technical design role, because I didn't even know about it prior to that. Similar to John, thought I would be a programmer, got into mission design, but then at Midway quickly transitioned into technical design, and fortunately have been able to do that.
in some capacity ever since, including a lot of time alongside Anne at Volition, building a technical design group there, and doing a lot of iteration on our tools and pipelines there.
And so just trying to bring all of that kind of process and mentality forward into whatever team I'm working with.
So that's a bit about me.
Thanks, Rusty.
So let's start out by defining what this role is.
I think we've all agonized over writing the best job description, so in hiring for this role.
And the best way I like to convey it, I like to compare it to if you take a classic game now, like Team Fortress 2, and you ride that spectrum of taking a tank heavy, where we're at the forefront trailblazing and taking damage and dealing damage, or ride that onto the other end of the spectrum on the support meta class, where we're reaching designers' health and helping boost them to new capabilities on the role.
And I can only speculate on the types of games that come out of volition that your designers are well equipped with some sweet tools developed in tandem with tech designers.
As the tech designer and now project architect, how do you define what a tech designer is?
The short and sweet version that I use to describe a tech designer is our job is to get as close to the make game button as possible.
Ultimately, our job is to make it as easy as possible to integrate so that people have more time to iterate on the content that goes into the game.
So our primary customers are designers, but we also, you know, keep all content creators in mind when we do stuff.
Essentially, we just want to spend as much time as possible, you know, making games fun and less time struggling trying to get what's in our head into the game and It comes down to who's your end user, you know as a game designer your end user is The player as a tech designer your end user is the content creator and so that's what our job is to you know design for the content creators whether it be new tools adjusting workflows and pipelines, anything that can make it so that they are not using their brain space just struggling to get something into the game but just making it as fun as possible and you know making the game as the best that it can be. I know Rusty and I used to always talk about this when we worked together so Rusty what are your ideas on it? Yeah I mean it's I think that the point that you made about focusing on sort of like the tech designer's customer, so to speak, is the content developer. Just like that's kind of the end user that we're focused on. And once you kind of know that and have established that in your mindset as a technical designer, I think it really helps inform just kind of how you approach problems and the kind of things you choose to prioritize. So as you said, like focusing on iteration and support there's been lots of talks in the past at GDC and research on, you know, the more iteration that goes into a game, you know, the better the resulting player experience.
I've always liked to say like, you know, good ideas on paper become great ideas through iteration.
And so as a technical designer, my goal is to try to support and encourage as many iterations as possible in my content.
So that can take the form of.
trying to reduce the number of steps to getting, say, a feature in or getting a piece of content into the game.
So that way, instead of spending maybe a week doing that, you can spend two days getting in and have those three days to iterate on and really kind of tweak it to what a designer wants it to be for the player experience.
As you said, kind of just thinking about that brain capacity, like the cognitive load that is part of a given workflow, whether that's the number of steps I have to remember, documentation, anything that tech design can do to bring that cognitive load down, means that that's more brain space for the designer to not only have the hopefully the time to focus on the iteration but also just to think about what they want to do, what they want to change, how they want to improve it. And another thing that always has to I think be kind of like a guiding principle for tech design is to recognize that in most engines, there are multiple ways to do a given thing. And so we have to think about the path of least resistance. And that's part of the cognitive load, which is saying, okay, which is the path of least resistance to getting this thing implemented? That's the thing we need to focus on, not make sure that we support three or four ways to do it and they all work just as well. We should prioritize and make sure that there's one way that's like the best way and sort of the natural way that people want to do it.
And the last thing is actually something I picked up from another technical designer, Evan, while working at Volition, which is the idea of the local maximum versus a global maximum.
And tech design is in the prime spot to always be thinking about how do we reach that global maximum.
So if we're taking a feature of the game, a feature of the engine or the tool set, don't just think about how do we make this a little bit better, but be willing to take a step back and say, what if we rethink how we even do this workflow?
Could we achieve something much higher as that global maximum once we do that?
So that's kind of what I think of a tech design and sort of those guiding principles that help you kind of frame everything that you're going to be doing.
Thanks for that.
My day is very rarely what I envision it will be, save for what's actually on my calendar.
I feel like I often get the rug pulled out from underneath me, yet we always make advances towards moving the needle forward.
I need to know is it just me.
Jerome, I'm curious how your typical day tends to go, especially now that we're working from home.
I remember early on on the WB dev floor, if I saw you at your desk before like 4 p.m. that evening, you know, that was a rare sight.
Now that Gotham Knights is deep in production and got a current date of 2022, I wonder how that's changed.
Yeah, I think it can vary greatly depending on what stage of production you're at.
It can go from much more proactive earlier on to much more reactive later.
Right now, the only thing that's typical about my day is that usually by like 10.30am, my day looks very different than I thought it would look like when I sat down at my desk at 8.
I think that's a pattern you'll hear from most tech designers.
It's mainly a support role, so that's normal.
And for me, and probably for most tech designers, it's what keeps the job interesting and fun.
Every day is different, but it can be a challenge.
In pre-production, it can be more about like 30% kind of unscheduled support and 70% time spent prototyping new features, mechanics, helping others with their prototyping.
helping with the design of kind of larger scope tools and kind of higher level problems or content production pipelines, like you know your game needs a mission system, well what are the components that go into making a mission from the tech point of view?
that someone needs to design that.
Tech designers kind of live in between all the other departments, so we usually inherit a lot of tasks that touch everything and that don't have a very clear owner.
So there's usually lots of talking to lots of different people to gather information.
That's maybe something that I didn't expect when I first started this role is just the sheer amount of talking to people and kind of information gathering that you need to do.
An example of that is, you know, during pre-production, I spent a lot of time working with TechArt and all the other departments to create a data validation system where we can write and run scripts to automatically check for errors when people are trying to submit stuff. And that required talking to basically everyone on the team and asking, OK, for your type of content, what kind of checks you want to run.
That's usually a task that kind of ends up in the tech design pool.
And then that split gradually turns into more of a 70% unscheduled support and 30% planned tasks when you go over to production and post-production. By that point, a lot of the game systems and features are up and running. Chances are you've had your hands in a lot of them in some way, so you automatically become kind of the point of contact for that feature or that part of the game.
And so late in production, it's a lot of time fixing bugs, helping other fix bugs, and just generally kind of unblocking people as fast as you can and keeping the wheels of that production train well greased.
But at least I'm only in one stage of production at a time.
If you're working on a live game like Destiny, you've got all of those stages at the same time, right, Alan?
Yeah. So, I mean, it really is like my day sounds a lot like yours, except that at any given time, we've got a live release over here that needs bug fixes. We've got the next patch we're working on.
We've got the next seasonal release that's closing down production and trying to ship.
We've got the seasonal release after that, that is in the middle of production. We've got the seasonal release after that, which is in content validation, trying to figure out whether all of the design ideas are technically feasible.
And then on top of that, we've got the yearly release that's going to be coming out at some point in the future that has its own production cycle. And slamming all those together is a really complex task. So we lean heavily on our producers, obviously, but to try to fit all of those dates and all those priorities together is really complicated. You know, Destiny's been live in some form for almost seven years now.
And it was in production and pre-production for years before that.
So there's a huge amount of normal technical debt built up.
And that's a lot of what my team does is trying to go through and mine all that technical debt and fix it all up.
And one of the interesting things we do.
is oftentimes if we change a workflow to make it more stable, to make it better for the players or better for the developers, we don't actually have time in any one of those releases to go back through and fix all of the content that's live.
So we'll put the workflow out, do a little content fix up for one release, and then slowly roll new content fix up so that designers have enough time to make those content fix ups and QA has enough time to test them.
And that's a huge burden in and of itself.
Just trying to go back through and fix all of the old content that lives in the game.
Yeah, it's very complicated.
Well said, guys.
I love seeing the spectrum of what a day looks like in production and on a live beast like Destiny.
I've dabbled all over this amazing chart, I feel like.
I've done system design.
And I always feel like it can easily get kind of muddled up.
And there's this, you know, you paper design a feature, you work with engineers to get it built, you shepherd it out, you roll it out, teach designers how it should work, and be mindful to abstract as much technical details as possible.
Alicia, it's been a while, but at Rockstar, you're responsible for implementing a fair amount of key open world systems and encounters.
And I think you even had to fix your title at Crystal.
Fix is a strong word, but I think I am one of the first technical designers in name at Crystal.
We have a few now, so that's pretty cool. I think we are up to like five or six, which is really exciting.
Yeah, so what I wanted to talk about is kind of the difference between technical design and system design, right, because these, these two things are often confused, even in my studio I mean I can think of recent discussions that I've had where people, people get the two confused and I think that there are two big aggravators to that. One is that the wording is confusing right, people often confuse a technical designer with a technically leaning designer.
And those are very, very different things which we'll get into in a minute.
The other one is is that sometimes you see technical designers kind of moonlight assistance designers on projects, because they tend to have generalist backgrounds, but you don't often see the inverse.
And so the assistance designer tend to really put a lot of effort into workflows or content authoring patterns right.
So when I was preparing for this question, I started to do some reminiscing and thinking about my previous interviews of trying to interview technical designers I even talked with my peers, and some commonalities bubbled up right.
from their day-to-days, what they consider their jobs to be, the service that they provide to their team.
And so I made this mirror board, which we have on the slide right now.
I've showed it around to some people, and it seems to be really useful in helping not only technical designers themselves understand how to communicate what they do, but other designers understand really the role of that person on their team.
The thing that I'm most excited about with this graphic is that it has, on my team at least, really cleared up the role for my juniors.
I have some engineers that think that they're interested in, like, hey, I think I want to be a technical designer.
And I can show them now this graphic and go like, well, this is what this job means.
Is this what you want?
They go, oh, wow.
Yeah, OK.
That makes a ton of sense.
That's great.
So, I want to highlight some things on this board that just kind of clear up the difference between a tech designer and assistant designer and kind of what we do right. The, the biggest thing that I think is important to highlight is we are a liaison between design and engineering, but we are an advocate first and foremost for design. Right, so that's, that's our client, that's our team.
These are the people that we represent.
We often do a lot of investigation into good content offering patterns for our team.
And we advocate those to our team we make sure that we educate our team on those things and and we try to hold them up to a content offering kind of bar quality bar, so that we're, we're all making kind of the same stable content.
We work a lot on early game prototypes.
I mentioned the generalist thing earlier.
That tends to be because we have generalist backgrounds.
We have a knowledge of a lot of the production pipeline.
We can do a lot of things, at least at a basic quality.
We, at least I have in recent history, contributed a lot to tools and workflow improvements on my team. I know certainly Anne has.
And when used properly, a technical designer, like they augment a team, right, and a phrase that Rusty coined during prepping for this talk was force multiplayer, which I love so much that I have used just constantly at Crystal.
Since starting, you know, like the preps for this talk I think they're probably sick of me actually using it. But I love that it's a it's a really good really succinct way of communicating, you know what we do for our team and the role that we serve on our team.
Anyway, so the last thing that I wanted to bring up was that since tech designers are often generalists, they do hop around text task wise right, but they do even they specialize right so that makes that makes the problem even more confusing.
If you might have a technical designer that specializes in systems. So I know and has a lot more to say about this so I want to go over and hand it to her.
Thank you. I love this board so much, and I'm definitely using it myself over at my studio, because You know, with specifically tech design and systems, the easiest way to describe it is that, you know, a systems designer designs the system and a tech designer basically acts like Dr.
Strange and has to try and envision as many different possibilities that that system can be used in the future of the project or of the entire franchise.
And.
needs to make sure that the system is architected in such a way that we're not going to limit designers in the future from expanding on that system. But like you said, a lot of it is more of the technically leaning or as I say technically oriented designers. I get a lot of questions. It's like well this person's very good at scripting, should they be a tech designer? Or this person's very good at prototyping, should they be a tech designer? And this is where I pull out this graphic because it's very easy to point and be like, yes, this is one part of what we do, but where are they on all the other parts?
And it is really important to realize that we do have all these other parts that we do.
We may not be visible, because our job is kind of to be in the background and you don't really want to be super visible unless you're training somebody or bringing something new in.
I do think that is one of the big things is like, you know, there is so much and it is so wide reaching.
And yeah, I absolutely love this graphic because it explains it perfectly.
Well said Alicia and Anne.
Yeah, this graph is money.
And I love that Dr. Strange analogy, right?
I like to imagine myself as a sorcerer, but it'd be so cool to have all those kind of parallel dimensions and being able to kind of see ahead, to be like, this is the one that we want to go down, right?
And so there's- I'd tell my team to start calling me Dr. Strange.
Yes, absolutely.
So what has always attracted me to this role And I'm sure many of you out there is the opportunity to kind of get your hands in all the different parts and see how things work and go behind the scenes on them, right?
There's constantly new systems, applications, SDKs, things like that.
Recently, like I've never had a chance to really set up a character from scratch before, right?
And so now I'm deep in the weeds on the horrible handshake that happens between animation and physics and dealing with like, so how far we want to data define our input handling and things like this.
So I asked myself, is this the best way to kind of take on the role, right?
Are we more effective as generalists or should I specialize?
We joked, but we actually seen a few different roles pop up while we were preparing for this, right?
We saw technical audio designer, technical narrative designer.
I had never seen tutorials technical designer before, and I ended up in that role.
Rusty, I've been waiting a long time to confess this to you.
And now I'm going to take this advantage to do it.
But I blame you because, again, you were the first technical designer I worked with.
And I modeled myself after you.
Like, all right, whatever, Rusty, is going in.
And I saw you hands in on everything, never shying away from opportunity to learn something from the ground up and wrestle with it.
So.
What do you think about the spectrum of like generalizing versus specializing being effective in this role and what are some examples?
Well, first off, thanks.
That's very nice of you to say that.
Yeah, I think so.
It's kind of interesting, right?
Like inherently technical designers generally are going to be fit into that category of glorified generalist because the generalist nature helps inform so many of the discussions that we need to be a part of or that we get pulled into.
and will even help inform your thought process on how something might need to be put together if you're looking to solve a new workflow or a new pipeline problem for a content dev or for a group.
But it can also be a vacuum, right? So we have to be careful. I think a part of the glorified generalist question is that it's part of the role, but you have to make sure that it doesn't become the role. And that will somewhat change over time as well, because I think...
A good kind of litmus test for technical design as it relates to the glorified journalist question is, and Alicia mentioned this earlier, is that kind of idea of being a force multiplier.
So glorified generalists can do many things and that's great, you know, jack of all trades kind of thing.
But, uh, if the work you're doing doesn't necessarily fit into that kind of force multiplier idea, then maybe it's worth evaluating is this, is that that thing that you're doing right now, the highest priority thing that you could be working on as a technical designer.
Um, and so.
I think early on, being a glorified generalist is kind of just part of it.
A technical designer, as you gain more experience and more perspective, and can really start to key into how to be a force multiplier in that role, that's when you can sort of also use that generalist nature to help inform, like I was saying, but kind of start to be a little bit more focused on what you're investing your time in and what you're prioritizing, just to help support the team, make sure that you're delivering the best thing you can to support the largest number of people.
The other thing, of course, and Jerome mentioned this earlier, is that technical design obviously will shift a little bit based on the phase of the project.
So sometimes you need to be a glorified generalist because that's the time of the project.
And later you'll need to really lean into that hyper-focused kind of force multiplier mentality.
So I can give one example, during my time at Volition, that I felt like was a kind of a good use case or case example of this, which is when we were working on the Agents of Mayhem project.
the VFX team, we were working with, as Anne mentioned, visual scripting that was new to the whole team. And we also had a very robust prefab system. And so they had reached out to technical design to say, hey, we need to implement beams, you know, ribbon particles.
how are we going to script this and how should we script this?
And so, of course, that was like the light bulb moment of like, hey, we need to make sure this is highly reusable for you so that, you know, the VFX artists who we had excellent VFX team, but they were relatively small for how many VFX we had in the project.
So I needed to start thinking about that, like, they need to have quick iteration, they need to not have a high cognitive load for this type of workflow.
They should be able to plug and play as much as possible.
But as soon as you start thinking about that, you start to realize, well, beams are, you know, at the request point, it was purely a ribbon particle, but there's a lot you can do with that.
And so we started opening that up to like, Hey, this would just be a great tool in the toolbox that designers could use for maybe content gating or helping to draw a literal line between, you know, connected pieces of content, like a shield generator and the thing that it's shielding.
instead of it being abstract, we could just literally point the player right to it and do it in a very visually compelling way. So we started to bake that all into the process.
The workflow was built to be able to be used by any content group. It was prefabbed for high reusability with hierarchy.
so that we could say, hey, you've got different variations on this.
So I am not a VFX artist, but being a generalist allowed me to say, hey, I understand the workflow.
I understand what you're wanting to be able to achieve visually.
Even if I could never do that myself, I can support that.
And of course, that meant working directly with engineering to make sure that we had exposed the things from the particle system that we needed to, to be able to do all this in script.
So that's an example where it was one request VFX based that sort of snowballed into in a very positive way, a full kind of feature of the game that ended up being used in a lot of different ways for everything from gameplay to purely visual elements.
Um, so Alicia, I think you had some things to add to this.
Thank you. Yeah, so I think it's actually really good to be a generalist. It makes for a more flexible team member.
Generalist kind of have the potential to advocate for other teams right on pretty much any project because they, they understand kind of every bit about everyone's workflows and what they're dealing with on a day to day basis that's actually why they're prototyping right it's really good to have someone with that kind of background for your early game prototypes exploring.
new workflows, and new game features.
I personally have a generalist background, and it's helped me be a more versatile functional collaborator on my teams.
A few examples of that, I'll give Max Payne 3 as an example.
So back on Max Payne 3, I helped work on most of the game.
But in particular, the really cool slow motion sequences, where Max jumps.
and does a little slow motion shooty shooty, that sort of thing.
Those were really, really complicated sequences, right?
And so people from all sorts of disciplines needed to jump in on those and dog pile.
I needed, you know, we had the animation, we had the effects guys, we had the audio guys, design, everyone.
And so what I ended up doing is I ended up creating these little widgets, these little workflow enhancers that would allow them to scrub the sequence backwards and forward.
Because there was one in a police station, right?
So Max jumps onto a little cart thing.
He's rolling.
And these guys rappel into the room.
They break through windows, right?
So there's windows breaking.
There's all sorts of stuff happening all at once.
And it's really a drag on a developer to have to play that front to back just to get one little edit in.
So the widgets really, really helped.
Back on Lara Croft and the Temple of Osiris, I did all the boss fights.
And so we were a really small, lean team.
I ended up doing a lot of the animation, modeling, skinning, effects, early sound stuff.
Not the really crafty things.
Like that should definitely go to my experts.
But since we were kind of all tapped out, the fact that I could jump in and do those things, the really easy versions of those tasks meant that my teammates could focus on the things that really required their attention.
Not only that, though, it helped us jam, right?
Like we had a common language, we riffed off of each other, and working together was really smooth and really productive.
Yeah, Alicia, I actually think that being a generalist is really good.
I think it actually might be necessary for this job.
I actually prefer to think of myself as a hybrid, not a generalist.
Even my first job in the industry was game designer slash engineer.
I've had like on the Warriors, I actually got a tech art credit in addition to tech design, just because I helped out with a lot of the collision mesh generation and some, some of the sprite generation for smashed windows on the cars.
Um, my personal process really is to like do a deep dives on things and really understand, uh, the guts of the task. So I understand the pain points that I can build the workflows to make, uh, to make mission designers jobs easier to whomever, uh, like I like building the first version of a thing and really understanding, um, back on red dead.
Uh, when we started the rock star engine.
basically doesn't have any of the game concept in the engine at all.
It just says, hey, the player's ready to spawn.
And then it's all scripts from there on out.
So when we started, there was no game.
There was no skeleton for the game.
So one of my tasks was actually building the skeleton for the game.
What is a mission?
Build a skeleton for mission launching, put the spot in the world, have the companion there.
But like, actually, what is a mission?
Does it have checkpoints?
Does it have phases?
How do you spawn the actors in the thing?
How do you spawn all the props?
So now then I'm building tools in Maya to actually generate all the different things in there and then get it in the game.
But, you know, Red Dead Open World is a huge game. So we're talking random events, mini games, towns, roadmaps, treasure chests, all those things.
I roll in to build the skeleton, build the very first version of that thing.
Then I can start building the API out. Like, what are the other designers going to need?
How are they going to build those things?
So I prototype everything.
But sometimes that ships, like the very first random event in Red Dead was the coyote being chased by a guy on a horse shooting a gun at it.
That was sort of the simplest random event I could think of to spawn in the world.
Nice and simple. Spawn three actors, make them aggro on each other and go.
And that ended up shipping in the final game.
I know they did some polish on it, stuff like that, but like that ended up shipping.
Every once in a while you get a prototype that is just good enough to ship.
It might not be great, but like sometimes you need a lot of content.
I would argue it's way more than every once in a while.
So, yeah, so one of the one of the core philosophies I always had is I hate to hand people work that I wouldn't do myself.
I hate to ask people to do something that I really wouldn't do something myself.
So if I go into something and see something where I'm like, if I had to do this more than once.
I would be annoyed.
I'd go fix that.
Go fix that right away.
Like make sure that when you're giving people work to do, that it's something that you'd totally be willing to do by yourself.
And then if you can do that, then I think you've got good workflows for everybody.
I think that's a really strong thing.
Great.
What really well said.
I think that's a key part of this whole conversation.
I think that's where you get kind of the price of admission at this panel.
Now we can step into some of the potential pitfalls you'll face in this role.
At the root of this, we are problem junkies.
I've never seen people say no to more problems to solve and tinker and learn how things work, especially living between engineering and design, always seeking to be force multipliers, right?
And that inherently kind of ends with you being the default owner for a lot of things.
So the problem is what happens when you remove that times four multiplier on the team? You know, if you want to take a vacation or better yet, you hit the lottery and want to retire.
So Alan, back to you.
I cringe at thinking how we would have ever shipped Red Dead Redemption if it wasn't for you at those last kind of last tail end of those months.
I'm curious to know what you've learned since then and hopefully at Bungie to kind of mitigate this huge risk.
Sorry, it is a problem. I love knowing all about the project. I love being the person that everybody comes to to ask questions of. I love being the person that is like going after new things. But if you don't find a way to hand those new things off, then you're stuck with all of those new things.
Recently, I've started, you know, people always said, you know, you've spent so many plates.
This is really great.
How do you, how do you manage all of it?
And the real answer is you either crunch a lot or you do a half-assed job at some of them and you figure out how to prioritize.
So I've actually started seeing that, like spinning plates comment as a real backhanded compliment.
And it's time for me to start handing things off.
If I'm doing too much work, I need to give that to somebody else.
Yeah, like on so you can be able to take a vacation, you can take a sick day here and there.
I had that happen on Red Dead and I took a two week Australian vacation.
And they gave me a BlackBerry so that I could answer questions on email just in case something came up that they couldn't handle by themselves or that the knowledge was there. So I spent, because of the time difference, I spent my first two hours every morning after I got up drinking coffee and answering emails on my BlackBerry. And I want to stop that.
I, you know, crunching is bad.
Being the sole linchpin is bad.
So you have to get, find ways to get rid of it.
You need to innovate yourself out of a job.
Can you find another tech designer to own some of that stuff?
Can you find a technically oriented designer to own sort of the, to be the proponent for that stuff and teach other people how to use the tools?
Find a QA person who's really good at that, that wants to learn how to use the workflow, and can be the person that everybody goes to, to talk about.
If you're building scripting documentation, build self-documenting APIs. Build it so that your functions and your parameters actually kind of explain themselves what the function does.
Yeah, start building your workflow documentation early and make it usable.
Uh, oftentimes you can build the skeleton as you're doing the first pass of it, um, and have that be good enough.
Then that first person that you teach it to that technically oriented designer, the QA person, they run into problems when they sit there.
Like I was following the documentation and it didn't quite handle this.
you go fix it.
Now you have somebody that actually can own and feel some responsibility for maintaining that documentation and knows it really well.
So at Bungie, we have this idea of shepherds.
So because Bungie's been, Destiny's been in production for so long, some of the systems we work with, the people that originally authored them haven't worked at the company in five years or longer.
So you have to be constantly developing new experts in all the different technical systems of the game.
And so we use the concept of shepherds to be that.
You need to have one or two shepherds in everything so that they can hand off that knowledge, they can tell people about it.
And then if one of those shepherds leaves, you have somebody that's ready to step into that role, and then you start training another shepherd.
So there's always somebody to answer the questions, and there's always somebody learning.
So that you never have that that kind of brain drain and you get away from tribal knowledge which is a real problem on long running long running projects long running games.
Yeah, those are some of my thoughts.
I think Jerome you had something you wanted to add.
Yeah, I mean, I think one of the biggest challenges of being a tech designer is finding that balance between how much stuff you want to keep on your plate and how much you want to hand off. That's a daily, you know, struggle for me. I think one of the most valuable things a tech designer brings to a production in general is the knowledge that you kind of accumulate over the course of the project. And that bird's eye view you have of either the entire game or parts of the game.
and your ability to instantly answer people's questions or point them to whoever has the answer.
I'm sure everyone here regularly prevents hours and even days of unnecessary work by just being present in discussions about new features and kind of pointing out, hey, we could combine these existing systems to do that instead of just creating something new from scratch.
The problem is when you're the only person on the team that knows this stuff.
And as a tech designer, it's just extremely easy to become that person because people will just get used to coming to you for information.
And it's just it's a lot easier most of the time to just tell someone that, hey, like that problem you're having, you're asking me about, just give me five minutes, I'll fix it myself and you'll be immediately unblocked.
That's a lot easier to say than to take 30 minutes to, you know, 60 minutes to sit down with that person, explain to them what the problem is, how to fix it so they can actually fix it themselves, like Alan said.
But I think it's really like if you don't do that, every time you don't do that, you you're accruing like knowledge sharing debt.
kind of like tech debt, and you have to pay that back at some point on the project.
So I think it's important to regularly take a step back and evaluate kind of how vulnerable your particular area of ownership is and, you know, plan time in your schedule to pay that knowledge sharing debt back. I don't particularly enjoy spending an entire day, you know, documenting a feature that I made a couple weeks ago, but in my experience, it pretty much always pays off in the end.
Plus, it feels really good to just be able to paste a link to documentation whenever people ask you a question.
It saves you a lot of time, saves you from getting derailed, which can be a really big problem in this job.
And that's something that I wish someone told me when I started this role, because it's a very insidious problem where you don't feel the effects of all those, I'll just do it myself decisions that you make over the course of the project until...
much later in production where it's very difficult to solve that problem.
Yeah, and I just want to jump in on this really quick and say if you are watching this panel because you're thinking about creating a tech design department or building up your tech design department, this is one of the biggest things because ultimately we love supporting people and love helping people and if we're left to our own devices we will try to support everyone at the same time and I think this is one of the things that I have seen burn out tech designers the most and so I think this is just really a huge topic that we can probably do a whole other talk on and but yeah it is this is one of probably the most important things if you're looking to build your department. Yeah, I like to think of it as like, learning how to become a senior tech designer is really learning how to be that person that everybody wants to come to to answer. But learning how to advance past senior tech design is learning how to never be that person ever again, handed off to somebody else constantly. That's a gem right there. Now I know how to get myself to the next level. Awesome.
After all of this, if we've somehow not scared you off and actually sparked an interest to get into doing this for yourself, you may wonder, you know, should I go to school?
Do I need experience?
And those are totally valid questions.
Personally, I know I was much better equipped after going through a whole production cycle on Blacksite, shipping that, working in the tool, seeing where they came up short, and understanding how I can help that, right?
And kind of offering that up.
Also, my programming background came in pretty handy.
So a question for you, Jerome.
You came up from Dev QA and getting deep, deep, deep into indie development, which harmed you pretty well for this.
So what would you tell an aspiring tech designer what they should focus on, or even a current one, how to level up?
Yeah, I think it's probably difficult to get into tech design as your first role in the industry.
It's not impossible, but I think it would be difficult.
Normally it's game designers and level designers that kind of discover tech design and maybe that's just because tech design is still a fairly young role in the industry.
I think, I'm biased obviously, but I think Dev QA or QA in general can be a good path into tech design because there's a lot of overlap in the mindset of a good tester and a good tech designer.
It's a lot of like, you know, trying to think, you know, several steps ahead, being able to reverse engineer things.
Indie can be a great introduction to kind of the hard skills of tech design.
You know, scripting, prototyping, touching a little bit of everything, a little bit of animation, that kind of generalist side that we talked about.
But I don't think it prepares you for the advocacy and kind of pipeline design that only really comes with scale.
And I would say the most important thing as someone who's trying to get into this role, maybe fresh out of school or not, is show your ability to learn quickly.
Strong technical skills are definitely a plus, but I think there's a direct correlation between your ability and desire to learn and your potential as a tech designer.
You can join a mod team, you can pick up one of the freely available game engines like Unreal or Unity, pick up some assets on the marketplace, and build something small but complete that kind of demonstrates your understanding of the various parts of game design and how they interact with each other.
And I would say lastly, ask yourself if you're okay with being in support role.
This is not a role where you usually get to point at something in the final game and say like, hey, I made this.
It's a role where you get to point at lots of different things in the final game and say, I helped these other people make this.
And if that prospect of empowering other people sounds exciting and fulfilling to you, I think you're a great candidate for this job.
And I know Alicia took a different path into this job than I did, so maybe she has more input about that.
I do. Yeah, when we were preparing for this talk, there was a lot of debate about whether or not it was possible to have an entry level tech design job.
I did a lot of thinking about that and I do think it is possible to go from school into a tech design career, but it'll probably be a few good years before you're doing your job really effectively, since so much of it is in service to your team, right?
If you are coming from school, I do have a few pieces of advice as someone who came from school themselves.
I don't think it's necessary for one that you're a great coder, but I do think it's important that you have some engineering background or familiarity with coding.
That doesn't mean that you're an incredible programmer.
Just enough of a foundation that you can apply it to your work and be a better communicator with engineering.
Because remember what I said before, we are a liaison between our design department and between engineering.
So that will just help that communication happen better.
Another thing I think is really ideal to dial in and Jerome mentioned this right is that advocacy thing and team education. I think that honing your skills there is critical to a successful design career tech design career right drum said that that was something that he just wished that he knew earlier and I fully agree with him.
Lastly, I think that if you can find a tech design group, and I know we're kind of hard to find, but we'll talk about some social networking after this, right?
If you can find a tech design group to hitch your wagon to, absolutely do. Soak up the experience of those around you.
Twitter's actually a really good place to find us, you know, but like really hone in on something and become a subject expert.
And then once you're comfortable, broaden your skill set.
Yeah, I think Jerome and Alicia hit all the main points, especially pointing out that you can kind of do it from school or not, but knowing, being comfortable with the idea that getting into tech design right out of school may be challenging, whether that's because you just need a little bit more experience to sort of build up that generalist nature that will help you do the job.
or it just might be because those roles are a little hard to find still.
I know many of us, like Alicia mentioned, she sort of established technical design at Crystal.
The same with Felicia and the technical design group we started there was new, so the role is still kind of new and up and coming.
And so hopefully as we continue this conversation and stuff, you'll see those roles start popping up more and that might provide opportunities for people coming out of school.
But in the interim, just know that preparing yourself to be a good generalist, whether that's going through school and getting some solid engineering background, or doing some self learning online, just trying to build up your knowledge base and understanding our all things that you can do to help prepare yourself for the role.
And then as Jerome mentioned, I think really understanding that idea of it being a support role is pretty critical because you want to make sure that you're feeling validated in the work that you're doing.
And so if you're good with being able to point to multiple features and say, I enabled those to, to either be there or to be as good as they were, that for some people is extremely validating like myself.
And if that is you too, then you probably will enjoy this role.
Yeah, I'll mimic that, like get a learn to mod, learn to code, learn how to use 3D programs, learn how to use 2D art programs, learn how to use sound programs, learn all those things.
If you're on a team already, the thing I've always done is to be a better tech designer is find the thing that nobody's doing.
Find the thing that nobody's doing because they don't know how or are afraid to do it.
or don't know that they need to do it, but find that thing that nobody is actually doing and you'll be a super useful tech designer.
There you go, there you go.
I'm getting notes for my tool belt as well and I've been doing this for a while.
So identity crisis averted, right?
I hope that.
you have a better understanding of what this role means, what it can be for you, how you can transition into it, how to talk to your team about maybe getting more help and bringing some additional ones on so that your current one can take a vacation.
It's a EA's frostbite team.
Sometime before they figured out they could really use one.
So we're all still trying to figure this out.
We've also covered how to best utilize this in a developer facing support role, where we can be force multipliers.
Often something we talked about as well was that you should try to only kind of allocate 50% 50 70% of a tech designers time right because that whole communicating.
and talking that always goes untracked and off the charts.
Nobody wants to see that in a burned down chart, but it's a very real part of our time and key to the role.
And ultimately.
We've identified important processes to save us from ourselves and burning out or overextending ourselves, right?
Our instincts are always to jump into fires and and and support to our detriment.
And finally, we ended on some key skills that will serve you in pursuing, growing and nurturing this role.
There's a ton we had to omit to fit this into the one hour slot, but let's make sure to keep the conversation going.
Come join our dedicated Slack community by jumping over to that URL you see on the screen.
So, bit.ly game dev tech design.
We've also fortunately snagged a live Q&A session slot later on today, where you can speak directly with us one-on-one live.
I know there is a ton of questions in there.
We're eager to hear them and try to answer them in true tech design fashion.
Also, fortunately, most panelists have already gotten the clearance to come on to my Autoplay area podcast and do one-on-one interviews where I'm sure we'll dive deeper in on the craft, go deeper on how they got here, and share more war stories for your benefits. So please follow so you don't miss out. Available everywhere you listen to podcasts, Spotify, even on YouTube.
And now finally, I want to take this opportunity to extend my eternal appreciation for you guys and answering the call to make this panel what it is.
I hope it ends up being a very valuable reference for us all going forward in this craft.
I would have been super happy if like two or three of you said you could do it.
And I'm so ecstatic that all five of you said yes, we're in and we'll do it.
And props to your employers and studios for jumping in.
You guys are my heroes.
Please fill out those evaluation forms so that we can continue coming back and diving deeper in on this topic.
Thank you.
Stay dangerous, fellow devs.
