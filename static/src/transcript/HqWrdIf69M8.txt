Good afternoon. My name is Oliver Franzke and I'm here today with Marc Cook to talk about some of the lessons we learned from remastering the classic LucasArts adventure games Day of the Tentacle and Grim Fandango.
And we're going to be talking about the general philosophy we used when working on these projects as well as the kind of the process we were following.
And of course there will be lots of like unique challenges we're facing.
You know when working on these games and just in case it's been moving out 20 years since you've seen the appendix of an angle. Here's just a super quick reminder.
When those the U.S.
All right so not fancy but just want to give you an impression of what we're going to be talking about now before we're going to get into the middle of the talk just a few words about us as the speakers as a set. My name is Oliver and I was the lead programmer on that the technical be mustered.
And for the last 7 years I've been working for Double Fine Productions in the role of the lead programmer on various projects like, for example, Broken Age and most recently Full Throttle Remastered.
Before Double Fine, I actually used to work for LucasArts, where I was part of the team that brought you the Monkey Island Special Editions.
So for me as a lifelong adventure game fan as well as a program. It was a really cool opportunity to kind of you know help to bring these games to a whole new generation of of players as well as like hardware and to make them accessible again and this also allowed me to kind of see how the adventure game John rest of the evolved over the years as well as kind of the development process behind these games.
And hello everybody, my name is Mark Cook, and I am the CEO of a studio here in San Francisco called Shiny Shoe that I founded five years ago.
And like Oliver, I've worked on a bunch of different games throughout my career, but recently we've been working with Double Fine on all of these Tim Schafer designed classic adventure game remasters.
So Grim Fandango, Day of the Tentacle, and now we have Full Throttle in production.
But today I'm here to talk about Grim Fandango.
And if you look closely at my little game list here, you'll see that it pops up twice.
And that's because not only did I work on the remaster as both a producer and as an engineer, I also was an intern at LucasArts in 1997 and worked on the original, writing code that I'm certain was thrown in the garbage can the second I left for the summer.
But that does give me a little bit of extra perspective about kind of some of the challenges that we had during the remastering process.
So I'm gonna hand it back to Oliver, who's gonna go over our philosophy of what we think goes into making a good remaster, which is really the kind of thread that ties the two games together, and then Oliver's gonna talk about Day of the Tentacle.
So take it away.
All right, thanks, Mark.
Well the most important point I want to make here is that everyone on the remaster team really was a huge fan of these classic games, you know we all played them and we were younger and you know you like the writing and the humor and the puzzles and out some we really didn't see any reason to change that what we did want to change was to you know how easy it is to play these games and most specifically to make them available on platforms that they previously went on like you know contemporary consoles or mobile devices.
While doing that it was important to us to stay true to the original artistic intent so that the games would end up releasing would be something that we would be proud of but also the development team would be happy with.
Now of course we're talking about remastered versions so we want to improve the fidelity wherever it was possible.
Now doing this you know while staying kind of close to the original art style, but still using you know the hardware that we have and its capabilities to create a kind of a beautiful modern version of the same game.
Now there are some features that really didn't hold up very well over the 20 years and we wanted to modernize those delicately so that you know the game conforms to modern standards, but still the original gameplay is preserved.
And of course it's not a big surprise when the original games ship back in the 90's, they ship with bugs. And we want to take the opportunity we had with these remastered versions to fix as many of these bugs as possible to create a much more polished experience. And of course lastly we want to do something for hardcore fans of these games. I'm sure there are many people here who played these games a whole bunch of times, know all the puzzles inside out, and for you we wanted to add features like the developer commentary or the concept art gallery.
So that's something extra to explore.
And I want to point out that this is not just a kind of theoretical framework we made up here for GDC because we needed something for the talk as a takeaway point.
But we really believe that this is a set of rules that helps you to take a good classic game, or even a great classic game, and turn it into a very strong remastered version.
And thankfully, both players as well as the press seem to agree with us and we got a lot of positive feedback from players and the press and both tentacle and going to combine move more than 5 million units which made them actually more successful than the original versions. So that was kind of a real big honor.
But now let's see how this applies to you know real project and the next 20 minutes or so I'm going to talk about how we got from this to that.
Now the original version of the tentacle was released in 1993 and was called that by industry legends. Tim Schaefer and Dave Grothman and in this sequel to make mention you return to the mention this but not live in a hoagie to investigate and stop a tentacle invasion.
And this came off and come up if you ask people what their favorite venture game is you know people just you know a lot of doubt style and the human to kind of historical context so it really was you know made this a prime candidate for a master version and the most of it was released last year. So you can now play the tentacle remastered on places for and be the you know desktop platforms as well as I was mobile devices.
And with all of these remastering projects, our process really starts with game archaeology.
And what I mean by that is we essentially have to go through and identify and sort through lots of files associated with the original project.
Or if you want, we have to excavate gaming artifacts, which is a much more cool way of presenting the same thing.
Now in this case is meant to the team could go up to skyrocket ranch North of San Francisco to look at the physical archives to scan some of these original concept of paintings for the concept of gallery of course for me as a programmer what's much more interesting is the digital game archaeology now the way the archiving process worked in the 90's that looks out was that at the end of a project the argument he would come up with make an image of all of the developers computers.
and this is what we got back from the occupying team. So the first that really was to go through dislike long list of files said that often like conflicting or complimentary and sometimes uh...
redundant to come up with some kind of master list that would uniformed of foundation for uh... the remastered version.
Now for the remainder, I'm sure you're not very interested in various documents and design documents.
So for the remainder of the discussion of data tentacle, I'll focus on the source code needed to compile data tentacle, the original version, as well as the original binary pack files.
And before I'm going to show you how we use that to create the remastered version, I want to take you on a brief historical detour to talk about the engine used to create the original version with.
Now probably many of you know that the technical was created with an engine called Scum.
Now scum is an abbreviation that stands for script creation utility for maniac mention so as the name gives away it was a piece of technology developed in the mid to late 80's at LucasArts for the cult classic adventure game maniac mention and in many ways come really was a revolutionary piece of technology and I'll go into that a little bit more in just one 2nd, but of course what's much more important is that scum powered a lot of great games.
So here you can see all the 12 games made a look is also a course of 10 years. And the I consider all of these kind of classics. Now I'm really curious who you in the audience has played at least 2 of these games please raise your hand.
Wow nice nice all right wait wait that's one more who in the audience has played every single one of these games. Wow fantastic well then awesome.
Now one thing you notice is that Grim Fandango is not in this list and that's not because I want to be mean to Mark. Actually Mark will later cover why Grim is not in this list. Now as me as an adventure game fan as well as programmer the first question I ask myself is you know what made SCUMM so special like why was it used for so many fantastic games and what we figured out pretty quickly was that SCUMM really was the first major reusable game engine.
because you have to bear in mind in the mid to late 80's it was still pretty common to write your entire game, including the gameplay, in C or even assembly. Now with SCUMM the developers went a completely different direction by moving all of the gameplay logic into a high-level domain-specific language that they called SCUMM.
So in other words being mentioned introduced scripting or at least popular scripting in the games industry. Now of course scripting but then had the same benefits that it has now that's much faster and easier to you know right script and iterate on that and I really believe that this like improved turnaround time really kind of.
empowered the development team and like you know help them to be more creative because they could try it various ideas a quickly like you know check this out and if didn't work he could just move on to something else.
Now the whole bunch of other things that's come really you know have mind blowing features and I'm going to be teasing you because I don't have time to talk about it, but if you're interested in that please find me off to the presentation and I can talk about some of those.
Now one thing I do want to mention those just like today, the actual gameplay scripts, the text version wasn't used when you know running these games instead they were turned into a by code representation that was then executed by the speed and engine layer now in addition to you know running the gameplay scripts. Sputum also did other engine the things like you know create a frame but for and it was already an input and memory and father on but not.
Now one thing that's kind of important here is that Sputum was very portable and that was despite the fact that a lot of the code in Sputum was actually implemented in assembly so that it would run fast enough on, you know, a Commodore 64 and other platforms.
But due to a design decision made from the very first version of SCUMM, that was that every single function in Sputum had to have a C implementation. It made this very, very portable.
activity helped us with the this the remastered version because all we need to do is to get to see code and you know make it compiling this one compilers of course you know there were some changes yet to make because compilers had changed over the years. But you know we had the game compiling pretty quickly.
Now like a sudden beginning one of the goals was to stay true to the original version and we want to go further we actually want to run the original gameplay scripts this division of that against the original game play against the original engine in other words we want to run the game in the sandbox so as far as they have attended those concern it is still running on a dust computer in 1993.
and then our remastering framework essentially just wraps around that so every frame we look at the internal state that's come has and then reinterpret that using the remastered content so for example in this case we asked the game you know which environment I and well it's the office so we're going to look up the textures associated with the office background and draw those instead of the original image same for characters you know which kind of visible and when what's animation state.
you know we find it out and then we use them high resolution of a master animation sprites instead of the original sprites and of course you know the same applies to audio. Now this design has one major benefit and that is that the original game still produces a completely valid frame buffer which means we can very easily you know blend between the remastered version and the classic version.
Now here's a specific example how that looks in the game.
And this really very quickly became a fan favorite, you know people love like toggling back and forth between these 2 versions and kind of comparing them and as a program I kind of find it a little bit amusing because all we do is blend between 2 textures and do some translation. But it just shows you that sometimes you know the simplest feature really can can add a lot of value to your to your game.
Now I mention that we draw from us a content rather than the original one, but so far have any talked about where that comes from and despite what some people on the Internet might claim the remastered does not credit to some kind of automatic process upscaling filter or something like that people on team will get very angry if you are some that.
Every single image in all of the our most of games has been hand crafted by an artist and this process really starts this content extraction so in other words we run some code on the original a binary pack files to extract and all the images associated with the different backgrounds and the animation sprites and other things like you know audio and you know compiled by code and stuff like that.
and because this will be the foundation, the starting point for the art team for their remastering process. At this point, we also do apply content upscale.
So here's a quick comparison between the pixel density of the original version on the left and the remastered version on the right. So you can see there are quite a lot more pixels that we can play with.
you know this is really you know what we wanted to do as I said we wanted to you know improve the fidelity but not you know TV a too much from the outside we wanted to stay true to that original version. But just you know make it more high resolution.
Now we can finally start actually looking at how you know these assets were remastered for environments. These were painted in Photoshop and we had an automatic import process that would take these extracted upscaled images and turn them into a Photoshop file.
Now you can see on the right inside the the scene layout is actually very well defined and using for the shop folders and layers and naming conventions there and this would later become helpful for the exporter.
Now once we have this we can hand it off to an artist and they will go and paint over.
the original version and once the happy with what they have for just want to see how the current version looks in the game they can run an automatic export process that will then use the matter information stored in the same structure to export all the remastered high resolution sprites at this point office can also add additional images that might be necessary like for example, the outlines for the object highlighting feature is one of these examples or particles rights. Although we didn't really use them all of them.
Now before going to talk about how what tool the use and come to pipeline behind the most of the animation data and one of a briefly talk about how scum represented animations internally characters were represented to data structure called actor and actor really was just a packet of values that had like position and scale and which environment they win, but also contain the point to a costume.
So just like a real actor, you know, performing in a play, before you step onto the stage, you're going to put on a costume.
And through the course of a play, you might actually wear different costumes.
And so this kind of similarity to a stage play, you'll actually see multiple times throughout the design of SCUMM.
Now a costume internally really just kind of contains all the animation data necessary for a cut scene or a certain game play action.
So internally it's a tree structure that can have one or more animations.
Each one of these animations can have one or more animation instances called chores and I'm going to get back to those in just one second.
And then finally each chore or animation instance can have one or more animation layers that were historically called limbs.
And this layout structure was used mostly to make it much easier to all for those animations back then, but also to save like memory runtime memory as well as you know performance to have optimal performance because for talking to make sure you can see here really only love and said is moving so the game represented this animation was one animation later had just one Sprite like a static body and then one initially to just contain the head that would just to kind of various bombing animations and what not.
Now getting back to the nation instance, this is essentially represents as an animation within a specific context so an example you can see here for walk animation, the different shores would represent a different directions because he would need to display different sprites obviously you know depending on which direction you would walk in.
Now the point I want to make you is that the nation that is actually pretty complex and we need to represent this for throughout the mastering process.
But not only that been a day of the tentacle which we ship the 93 was considered to have a very fluid. Animation style. And this meant in technical terms there are lots and lots of unique animation sprites that had to be remastered so you can see all the nearly 8,000 unique animation sprites that had to be painted or repainted of course all like scale down.
And we knew right from the beginning that we wouldn't be able to handle this internally.
Like, our art department was actually pretty small, and they were all busy just remastering the environments.
And so, this really drove our decision when it came to the tool.
Now, since costumes represent 2D animations, we quickly decided to use Flash, which seemed like a very obvious choice.
So just similar to to the environments, we have an automatic import process that takes all of these extracted upscaled images and brings them into flash. So there's one flash file for each costume and you can see there's actually the animation structures represented in this flash file. Layers are kind of represented vertically through folders and layers and animations, animation instances are represented through frame sequences horizontally.
And this layout allowed the animators to kind of scrub through the animation very quickly and also toggle on and off layers to kind of compare the current version against the classic.
So as I said, we sent those off to the outsourcing company.
They then painted over those and created like handcrafted representations.
And once they were happy with that, they sent it back to us and we ran an automatic export process that, similar to the environments, would extract out all the remastered sprites.
And so again this is a environments and animations are like 2 very specific examples how we improved the fidelity and the remastered version while staying true to the original intent.
And staying true to the original version was also important in this room.
because as rumor has it when the original team was working on the tentacle one given came by one day and notice that one environment and at the tentacles actually as big as the entire game of maniac mention and so you continue to want to be funny if you could just play make mention within the tentacle and of course if game developers we always do the most important thing first so of course this feature was added and you can actually play make mention in the original version of the tentacle now.
The way it was done back then was pretty interesting because when the player interacted with the computer and we had ads room, the game would essentially suspend the execution of the Day of the Tentacle process and then launch the Maniac Mansion executable. Now the player would interact with the Maniac Mansion executable until the player was done with that and then it would resume execution of the Day of the Tentacle executable, restore the state and you would continue playing Day of the Tentacle.
Now I still have to admire like this is a pretty nifty easy way to like essentially embed a completely different game in your own game. But for the remastered version we really didn't want to go down this route because doing this process he's like that was did not seem like a very smart way, especially on consoles and embedded devices.
So instead. We chose the second most painful way by using or including the entire source code for many mention in the game in addition to the entire source code needed for the technical now admittedly they both use the same engine. But different versions and while they are some similarities between those 2 versions that were actually pretty significantly different.
Of course, you know, SCUMM is a scene assembly code base, so that means there's a lot of kind of global state.
And even sometimes these functions, they have the same name, they might have a very different implementation internally.
Of course, we all know the technical term for this situation, which is of course that.
So we solved this by painstakingly detaching these namespaces and making sure that Maniac Mansion uses unique namespace. And this took us a while to make sure that we didn't access random memory and whatnot. But it does work. And in the remastered version you can actually play the original unremastered version of Maniac Mansion. So I'm actually quite proud of that.
Now I want to shift gears a little bit because I want to talk about strategies we used to modify the classic game.
And as I kind of hinted at in the beginning this is supposed to fix box that people could run into back in the 90's that we wanted to fix as well as issues that really only became apparent in the remastered version.
And I don't unfortunately don't have time to go into the reasons behind it, but while we had a text representation of the gameplay scripts we were not able to recompile those so in other words we had to deal with the the binary byte code that was included in the pack files and this left us with 2 options to modify the original game now the solution used most often was state mutation in other words of the allowed to remastering frame but not only to look at the internal state and re interpret that.
But to actually push values back into the original scum sandbox and therefore change, you know, the behavior.
Now, another approach we used, but not quite as often, is bytecode patching.
In other words, we would change the compiled gameplay scripts before they would be executed by the scum interpreter, and therefore changing the behavior.
Now, I'm going to show you, essentially, examples in this kind of combination.
Although, in reality, every possible combination can be used.
Now, the first bug I want to discuss is this one.
Now, in this puzzle...
Sorry, there will be some spoilers.
Unfortunately, if you don't want to hear spoilers, you know, you want to cover your ears now.
In this puzzle, you have to catch these T's that are moving away from you with Bernard.
But there's a back that if you leave the room and kind of too quickly the game actually ends up in an able state. So you can see at the top of the incorrect behavior and actually pointing this man out at the teeth, but again reports, I'm pointing integrating.
What is supposed to happen is what you can see at the bottom where the game actually correctly reports that you can interact with the trapped teeth.
And this is important because this is an object that's needed for the critical path of the game and if you can't pick it up, you cannot finish the game.
Now by looking at the original again they scripts for this puzzle we quickly figure out what's going on.
So every frame all these teeth are kind of moving away from you to gain a century checks, you know well not that close enough to at the grading in the floor and if that's the case than again was had a variable called teeth caught a true.
then it will stop an animation that's supposed to move these teeth from wherever they are to the center of the grading that will wait for that and once that is done it will set a touchable flag meaning that the player can now interact with this object again.
Now as a program I won't take long to realize that there's a race condition here because of script execution is terminated for whatever reason like for example leaving the room. The touchable flag will never be set and therefore you can never pick up this object.
Now this may seem like a pretty bad issue, but it was surprisingly easy to fix because all we need to do is find identified a specific instance. So if you in a convention room this burnout that he's called able said is set to true but a touchable flag set defaults then we found this issue and changing it was easy because the touchable flag is just a bit in a long bit array in the speed and engine so be just essentially over a debate and therefore the game, you know could be could be played.
Now the second bug I want to discuss is one that we fixed using bytecode patching and that was an issue that only really appeared in the remastered version.
And it had to do with the intro cutscene. Now if you take a look at the top right corner, you'll see there's a bird just kind of hanging out statically. That's wrong.
And then it starts moving and then eventually they'll just kind of all disappear at the end.
Now I'm going to focus for the remainder of the discussion, I'm going to focus on just this bird's disappearing.
Now again looking at the original game play scripts. We quickly figure out what's going on essentially what the game does every frame a checks whether or not the exposition of put to which is the burden top left corner you can still see is smaller than the center of the camera minus 175 pixels. 175 pixels. Well this behavior comes pretty obvious when you over once you overlay the original 4 by 3 aspect ratio on top of this.
So what the gameplay program a bit back then is essentially call against the original 4 by 3 a few for us them obviously you know the person could know that we're going to be most of the game is a 60 by 9 aspect ratio later on.
So we need to fix that we have extra pixels of that you know left and right side of the screen.
So the problem is the 175 is not available so we can't use state mutation like a showed you earlier.
There would be other ways to solve this problem.
For example, we could change the implementation of the comparison operator or the subtraction to essentially trying to fool the engine into believing that the state is different.
But that seemed pretty hacky for a bug like this.
So we really wanted to change 175.
Now, thankfully, this is a little value, which means it's actually stored in the bytecode.
Now, here's the bytecode for the code sample that I just showed you.
So what we need to do is we need to find 175, which means it's time for a hex quiz.
Now in case you've been looking at this spot, you absolutely right. This is the 175 looking for if we change it to something bigger for example in 250 indeed the birds will continue to fly to the left and you know this bug was solved.
And you know solving an issue like this was by could patching was pretty gratifying for me as a programmer because it make you feel like a real bad hacker you could go in like you know modify the bytecode.
All right, so this is all the time I have to talk about the identical.
I hope you found this interesting.
And now I'm going to hand it off to Mark, who's going to talk to you about Grim Fandango.
And you'll see there are actually a lot of similarities, but also a lot of unique challenges that we have faced with this project.
So there you go.
Thanks, Oliver.
So we're going to take a trip from 1993 when Day of the Tentacle was released, all the way up to 1998 when Grim Fandango came out.
And we're going to do a very abridged kind of evolution of technology and design that changed in the industry during this time.
So the next major evolution of the Sputum SCUMM engine was full throttle, which incorporated full motion video as its kind of technological advancement.
which came from the rebel assault game and the insane technology is what is called and so that was like one step in the direction but then between full throttle and grim Fandango came quite a big change in the game industry and I I think anybody who was a gamer at the time or a game developer probably remembers what was going on and that was the rise of real-time 3D.
So Mario 64 was released, Tomb Raider was released, Resident Evil, desktop PC graphic accelerators were starting to become a thing.
And these definitely had an influence on the design of Grim Fandango and on engine changes that took place in that game.
I'm going to guess that probably everybody here is familiar with Grim Fandango due to the number of hands that went up for Day of the Tentacle and Scum games, but just briefly in case you don't know what it is, it's an adventure game.
It's a story about Manny Calavera, who is the character standing in the middle, dresses death.
And he's a travel agent in the land of the dead.
And what travel agents there do is help people transition into the afterlife who are recently deceased.
And kind of the quality of your transport to the afterlife depends on how good of a person you were in the flesh world.
So if you were a bad person, you get shipped up in a crate.
If you're a good person, you get a ticket on the number nine train.
And like all great adventure games of the era, gameplay involves navigating through the land of the dead, talking to characters, solving puzzles, managing your inventory, and so on.
And it was very well-reviewed at release, and many people consider it a cult classic or just a classic, and so it's definitely primed for remastering.
But the original team decided that they did not want to use the sputum slash scum engine because they wanted to add real-time 3D to the game.
And that was an interesting decision, I thought.
And because I had been an intern at LucasArts and because I had talked to the lead programmer, Brett Mogilevsky, before, I wanted to ask him more about that.
So I've got some details on why that happened.
Yeah, they created this new engine called the Grime engine.
And the Grime engine supported pre-rendered backgrounds at 640 by 480 with 16-bit color and real-time 3D characters composited on top.
And it was the first adventure game at LucasArts to use real-time 3D.
Now like the Sputum engine, its engine core was pretty darn game agnostic.
It was written in C. It handled typical engine things like memory management, resource management, animation, and so on.
And it really didn't know very much about what an adventure game was.
So very modern.
But given that, you must imagine that there had to be some kind of scripting language to actually implement the game.
And you would be right.
And given that there's this domain specific language that had proven itself over many years and had shipped in many successful games, you might think that they would use Scum.
Well, that's where you would be wrong.
They switched to Lua.
And I believe this was primarily driven by Brett, and if you want to ask about more details, he's actually here now.
But yeah, this was interesting historically, I think, as Brett told me that there was a lot of kind of internal contention to make this switch both to a new engine and to a new scripting language because some teams at LucasArts had tried to make the switch in the past and it hadn't worked out.
But Brett said he had a good dose of naive conviction and was able to convince stakeholders and switch over to the new technology.
And so that affected our approach in the remastered engine.
And there are some similarities to what was done in Day of the Tentacle and some differences.
We started out very similarly.
We took the Grime engine, we had the full source for both the C code and the Lua code.
and we got a compiling on a modern platform and so most of that was stubbing out a handful of things that you know we're old windows technologies that didn't make sense anymore initially and also fixing some compiler issues a similar to day the technical there were some you know undefined behavior and compilers to change so but it didn't really take that long to get up and running.
The major difference between what we did with day of the tentacle and with Grim Fandango was instead of trying to mostly sandbox the original engine.
We made a lot of modifications to it directly and there's a couple reasons for that.
But we added things like a modern renderer to it and we added the ability for it to emit draw calls both to the original software renderer as well as to our modern renderer to support things like toggling between the 2 render modes like Oliver showed in Day of the Tentacle.
We added, you know, we threw away all the direct calls to Windows because it had only shipped on Windows in the past, and added modern interfaces to interact with the seven platforms we shipped on.
We shipped on PS4, PS Vita, Windows, Mac OS, Linux, iOS, and Android.
And here's where the big difference was.
When we added 64-bit support, fixed bugs, and added new features, we did that by modifying Grime directly, including the Lua code, unlike the tentacle project where we didn't really touch the original SCUMM code.
And part of the reason for that was that there were vastly more bugs in Grim Fandango.
But you know that we also changed I think more about the core gameplay in a way that couldn't be modified the state inspection only so that was another one of the reasons why we needed to modify directly.
So like Oliver laid out in our philosophy one of the key components is improving fidelity and staying true to the original artistic intent.
So this is an image from the classic game.
And although I think it still looks cool, there are some things that are starting to look a little bit old about it.
Manny's face, for example, the texture looks a bit low resolution. There's you know, some stair-stepping and so on within his face.
Also the edge of his head on the 3D model is pretty aliased.
There's stair-stepping up and down both sides there as well.
His shadow is a bit of a rectangle and we felt that we could improve all of these things in the remaster and I think it's important, especially for a game like Grim Fandango where a lot of people are going to be familiar with it to have an immediate visual impact when people put up the game and immediately see something that that's striking. So this is ultimately what we ended up with in the remaster and we're going to go into detail about how we accomplish this.
So at a high level in the remastered render, one of the most important things we wanted to add was deferred shading.
And the reason for that was.
Old 3 D games typically had very primitive lighting and Grim Fandango was no exception.
And we really wanted to try to ground the characters into the pre-rendered scenes better.
The existing pre-rendered environments had really cool lighting, it was really beautiful.
But the characters felt a bit like they didn't quite fit, or any of the real time 3 D, which included some objects as well.
And so by implementing differentiating, we kind of gave our artists leeway to add a ton of lights into the scene, like a new lighting rig for the remaster to try to really make the characters feel like they fit better into the scenes.
We added shadow maps to try to improve the shadow quality.
You can see some of that there on the left.
Of course, we had to implement arbitrary high-resolution support.
Grim Fandango was originally 640 by 480 only, so on all the different platforms we shipped on, we had a whole bunch of resolutions we had to hit.
We implemented FXAA to improve edge quality on most platforms.
We had plenty of GPU cycles left over, so this was kind of an easy win.
But critically, I'm going to keep reiterating this, we tried our hardest not to go crazy with graphics features and just throw all kinds of things at the game that didn't really feel like it would have made sense within the context of the original.
We wanted to do a better representation using modern technology of what we think the original team would have done if they had access to the same tools.
And here's a side-by-side comparison of the two.
On the left is the original game, and on the right is the remaster.
And I don't know how well you can see it exactly, but I hope you can tell that it's higher resolution on the right.
The lighting hopefully feels like it fits better within the scene.
The shadows are definitely very different.
But there is one kind of big elephant in the room between those two side-by-side videos.
And that is the backgrounds are exactly the same.
And that's because of a roadblock we hit in the archival process and the archeology process.
So the backgrounds were, the pre-rendered backgrounds were authored in 3D in a program called Softimage.
And that's where they were modeled, that's where materials were applied.
I believe that's where they were rendered out of as well, and all the lighting rigs were set up.
But we had none of that data.
None at all.
And as far as I know, it doesn't exist anywhere.
So Brett if you know where it is I wish we had gotten access to it because I mean at at a minimum it would have been awesome to just like open that data backup and re render those scenes using like a modern ray tracer or something.
But given our budget and timeline we couldn't totally recreate this data from scratch that it was just not an option.
So we did what we could but we were left in kind of a similar position of did the technical all of the remastering came from extracting assets from the game that had shipped initially And then we that kind of causes to have to come up with some creative ways to to be able to to improve the fidelity.
So one of the easiest wins that we thought we could do immediately was improve the texture quality. So we wrote a little tool that would extract all the textures from the original game blow them up to much higher resolution often going to like 1024 by 1024 maps. And so here's an example of that.
This is many space. It's the same face texture we saw earlier and you can kind of see why you know the texture looks a little bit faceted and and it's not very high resolution. So what it's many close the camera it's going to look low res and so we had these off to the artist and.
This is the result for that texture and I'll admit that this doesn't look super exciting really because it's just literally a higher resolution version of the exact same image. But that's again coming back to the sticking to the original intent. We didn't want to make many look different or shiny or anything like that we just wanted it to be a higher resolution many but still totally keeping the original art style intact.
But when we're dealing with this kind of low resolution source data, there are some interesting things that can happen.
And I want to show you an example from this texture.
So this is a tiny texture that was used on an object in the game.
And after it went through our process and got blown up, it looked like this.
And this is what was handed to an artist on our team who was tasked with remastering this texture.
And they weren't told what the context of this was.
They were just handed this and asked to paint it over.
And this is what we ended up with.
And this says Golo Flake.
This texture is not supposed to say Golo Flake.
And unfortunately, this slipped through the cracks, and we ended up shipping this.
And here's some of the fan response.
Yeah, fans weren't happy, so we did, and we're sorry about that, but we were able to fix this in a patch, thankfully.
And we were so tickled by kind of the response and the silliness of it that we put a bottle of Golo flakes in all of the remastered games.
So there's one in Day of the Tentacle, and we're sneaking one into full throttle as well.
All right, let's talk lighting.
So like I said earlier, lighting in early 3D games was often very primitive in comparison to what we have today.
So we're still facing a major problem that we wanted to remaster the lighting of the real-time 3D, but we had no source data for the backgrounds.
We had no reference, really, to create a real-time lighting rig.
So our challenge was, how can we create an artist-friendly authoring pipeline to author lights for the remaster?
So what we did have, though, is the extracted data.
We had 640 by 480 color maps at 16-bit color for the pre-rendered backgrounds.
And we had 640 by 40 Z bit maps as the original team called them which were essentially pre calculated depth buffers and in the original game these were used for occlusion mostly so that the real time 3 D would like if many was standing behind the chair on the lower left that it would include the the pixels rendered through the real time render.
But what we did was we took these 2 maps.
Oh, we had one other thing, I should say.
We also had the camera position and the orientation for where this was rendered from.
And so I want to give a shout out to a guy named Brandon Dillon, who is an engineer at Double Fine and came up with this idea.
But what we did was we took every single pixel of the Zbit map, one by one, created a quad in Maya, and then mapped one pixel of the color map onto that.
kind of doing like a reverse projection of that so if you're thinking like what would that look like and you're thinking this is going to look like some crazy mess of quads uh... just floating in space that kinda does look like that there it is so this is Manny's office and this is a composite it's not just from one camera angle I believe there were four uh... pre-rendered cameras in this scene and this is the sea of little quads for all four of those And although you know clearly we're not going to be exporting this back into some kind of game format. This was enough reference material for our team to be able to place lights.
I mean as I look at it and I hope it's it's obvious you can kind of see like where the walls are where the desks are with the windows are and so on.
And here's that same scene again with some of our remastered lights in there.
And to try to to match what was authored in the original backgrounds, we had to add a number of different light types to try to to kind of capture the mood.
So we had directional lights that could be bounded within a box or a cylinder.
Sometimes it was a little bit hard to tell exactly what was going on in the original lighting rig, so this helped control that and allow us to try to match it more closely.
Of course, supported point lights, spotlights.
Something we call the gradient light which is essentially a ambient but also has a height component so that we could try to often darken the characters towards the bottom of the ground to make them feel more grounded in the scene.
And finally we added a little bit of light animation, although this was really sparingly used in the remaster.
It was just kind of like a nice little thing we could put in a little bit of extra polish here and there.
We didn't go crazy with it, we only put it in places where it felt like it would have made sense within the context of the original game.
All right, let's look at shadows.
This is the original game, and Manny's got his boxy shadow underneath him.
And although it certainly helps ground him within the scene, we thought that we could improve this as well.
So like I said before, we added shadow maps, and we took those z-bit maps and used them as a way to have a depth buffer available to us for when we're rendering from the light's perspective.
In addition to that we added a feature we called light blockers which was essentially geometry that would be rendered when you are rendering from the light's perspective that would block light and create shadow and that was used for 2 things, one to try to make the shadows match more closely to where the shadows were in the pre-rendered environments.
But it was also used in a handful of places to try to add some extra cool shadow fidelity that wasn't really there to kind of really, I don't know, add a little bit of extra polish.
And here's what it looks like in the remaster for the scene.
All right, let's change gears and talk about controls.
This is one of the places where we really wanted to try to modernize delicately.
The original game shipped with something that is now notoriously known as tank controls.
That was the default control mechanism.
And I think there are some good reasons for why Grim Fandango shipped with tank controls.
But most gamers these days don't really like tank controls that much.
So we felt that this was an area where we really needed to make a change to change the default in the game.
So this is what it looks like in the original.
Make little tank sounds.
Chugga, chugga, chugga, chugga, chugga.
And you can move forward.
makes it out of his office and got turned to go down the hallway.
It's a little bit unintuitive for people.
So like I said the original game shipped with 10 controls as its default, but I had forgotten this, but it also had an optional camera relative control scheme.
And you know when I saw that I was like oh whoa, I totally forgot about this.
It's like let's just turn this on and see what happens.
And it had some serious problems that we had to address to make this the default, which of course is what we wanted to do.
And I'll show those in just a moment.
But as a brief side note, I thought it was amusing that, this is the function signatures from the Lua code.
You can see where the inspirations came from.
So tank controls were called Tomb Raider control.
because the early Tomb Raider games had 10 controls and Mario style control was the name of the camera relative, clearly from the inspiration from Mario 64 I think.
So I'm going to show three videos in a row here and I need you to trust me that all of them were recorded on the PC and I am only going to do one thing. I'm going to put my finger on the up arrow and just hold it and then we're going to see what happens with the controls.
This is the first major problem.
in the original camera relative controls.
So you can see many bouncing back and forth across this camera transition.
And I think anybody who has worked as an engineer on a 3 D 3rd person game probably knows what's happening.
As soon as the camera changes and in this case it's almost perfectly rotating around the up axis by a 180 degrees. The frame of reference for how your controls are calculated flips and so many is popping back and forth across this camera transition because.
he's just bouncing back and forth and yeah, your controls are flipping and it just it feels very bad frankly for for a player and so I think this is one of the good reasons why the game was shipped with 10 controls because it didn't suffer from this and I don't know what genius programmer designer came up with this between 1998.
when grim finding it was released and sometime later, but the solution to this is to maintain the previous cameras orientation as the frame of reference for your controls until some later point for example, when the player completely let's go of the controls or has modified the controls enough to indicate that they've recognized the camera has changed and they're changing their intent. So that's what we did for the remaster.
Here's the second problem.
Many doesn't slide against walls very well in the original camera relative controls.
Eventually gets where he's gone.
All right, he made it out.
I don't have time to really go into the details as to why that's happening, but clearly something wasn't working right with with how he slid against a walk boxes as they were called which kind of define the the walkable space.
And you know most modern games do this a bit differently and although it's not really realistic what games typically do is just slide characters along walls to kind of make it easier to navigate and fumble your way through environments.
So that's what we did so typically if you're moving against a wall directly perpendicular you won't really make any progress, but if you're coming at an angle, you'll scale the players velocity by the angle of incidents and then kind of slide them along to make it so they can move smoothly through the environment.
And so here's a video of both of those things in the remaster.
And while it's not that flashy, I think this was really a big improvement and quality of life improvement for the remaster.
So he makes it across the transition, slides along, makes it out of the office.
So that became the default control scheme for gamepad and keyboard.
But one thing that was surprising perhaps in retrospect is that grim Fandango had no mouse controls every other adventure game the Lucas arts had produced up until that point had had mouse controls.
And since we knew also that we're going to be shipping on Vita and on mobile platforms who wanted to add touch.
So we're really blessed to run into this guy named Tobias faff who was a grim Fandango superfan and was essentially modding mouse controls into the original game.
And he was doing that right around the time when we started the remaster and we asked him if he wanted to join the team and he graciously said yes and help us get this into the game.
But when you're adding a totally new control scheme to a game like this, you can't just enable the mouse.
I mean, there's a lot of work you gotta do.
And one of the things you have to do is give the player a way to interact with the world.
So we added a verb skull.
This is something that Tim Schafer requested we do specifically and the verb skull was something that Tim put into full throttle initially as a new way to interact with the world in that game. Whereas the previous Scum and Sputum games had all pretty much used a verb bar that was, I guess Tim felt was starting to feel pretty archaic so in full throttle you click on things and this flaming skull tattoo pops up and you can select different verbs to interact with objects in the world.
And so since Manny's a skeleton, Tim thought that he deserved his own verb skull as well.
So it worked really well.
But I will say that we kind of knew this going into it, but I want to warn you in case you do a remaster that if you're going to put a totally new control scheme into an existing game, you should expect to run into a lot of special case problems.
These were just all over the place in Grim Fandango.
And it's not a problem with the original game.
It's just things that had to be solved to add mouse controls or touch controls.
So, for example, this is Manny's inventory, which previously had no UI on the screen at all.
You could interact with it with the keyboard.
But we had to add a bunch of things on screen to to do all the different types of interactions and navigation that were necessary.
So I want to show one classic bug fix that is interesting more for historical purposes and gameplay purposes than it is technically admittedly. But this is an image from kind of in the middle of the game and this is from the original and that's many on the left and a character named domino in the middle.
And there's a bug in this scene where many is supposed to be able to come in and talk to domino and be able to have a dialogue tree with him that kind of gives you critical story information and you know there's a bunch of deal recorded for this and it's it's really an important scene but unfortunately in the original game many put me to depend on what players do but almost everybody when they get here can't talk to domino and I'm gonna show you why.
So here's a script called dlg underscore domino dot lua.
And these are the first two lines of code in that file.
So there's a comment that says avoid loading this file twice.
And there's a function called checkFirstTime.
And then there's a string called dlg domino dot lua that is passed in.
And checkFirstTime is something akin to a C-style pound include guard.
and will prevent the Lou interpreter from loading this file twice.
I actually don't know why this was here, because it is valid to reload the same Lou and replace functions that had already been defined.
In fact, that's how patching worked in Grim Fandango.
But it was there.
And so this was from the script that controlled the dialogue with Domino at the beginning of the game.
Here's DLG Dom 2.Lua from the same scene.
look familiar. Yeah, cut and paste air.
So this was thankfully very easy to fix, but I thought it was kind of interesting in a historical context that uh... this was able to we were able to add content that kind of had been hidden for a long time from players and in addition to a ton of other things that we're able to address but I thought this was the most interesting because of the extra content.
So to recap we went through our philosophy and kind of showed how it was implemented in both games we've stayed true to the artistic intent in both day the tentacle and grim Fandango not going crazy, even though we sometimes had some temptation.
We improve fidelity where we could with higher resolution.
Better lighting improve textures and so on.
We modernize delicately we showed you the controls in Grim Fandango. We didn't talk about this, but in Day of the Tentacle we also change the default controls to to make it more intuitive.
We fixed original game bugs and showed examples in both games.
And and although we didn't get a chance to talk about this really. Yeah, the extra extras were kind of like taking inspiration from the criterion collection. So from film, it's like, you know, people who are really familiar with this material to try to give them something something median, valuable to chew on.
So Oliver and I both want to say thanks to Sony, Disney and Lucasfilm for helping make these remasters happen.
Thanks to Tim Schafer and Brett Mogilevski for helping us prepare for the talk.
Thank you, of course, to the classic game teams, to the remastered game teams at Double Fine, Shiny Shoe and Super Genius.
And thank you to Two Player Productions for help on some of the videos.
And thank you all for coming.
I think we have time for a few questions.
Yes.
And then we're going to go to the wrap up room just outside of the room.
So either you can find us here and we go there together, or you just go there and we'll find you there.
Maybe somewhat a strange question.
Now you're armed with all this experience of remastering, are you planning to make new games?
Or is the adventure market completely dead now?
We cannot talk about that.
Hey, so regarding the backgrounds in the Scum Game remasters, it's my impression that the backgrounds were originally hand-drawn and scanned.
Did you experiment with trying to recover either the original drawings or the original scans and use those, I guess, or since you didn't end up shipping with it, what ended up being the blocker that made you upscale and retouch?
Yeah, we didn't really investigate that and I think what probably would have happened is we would have found a you know 60% of those and then the remaining 40% would have been lost somewhere throughout the archiving process and you know for us it was really hard to say because we want to be consistent and then we would have the issue like RL we have some of them we can rescan them but how we how do we recreate the other ones at the same style that Peter Chan and some of the artists like create them originally so.
The answer is no, because we kind of knew that there were some holes in the archiving process, specifically the physical one.
Thank you.
Hi, were there any technical reasons for not increasing the frame rate of individual animations in Dave's Tentacle?
You can take that.
Any technical reasons know this was again trying to stick to the original artistic intent. We actually did some experiments early on with increasing the frame rate. I think the 30 that's right.
Yeah, but decided that that was moving in a direction that made the game feel too different from what they were trying to accomplish originally so we decided against it for artistic reasons.
So hi, I'm Brett.
I am the lead programmer of Grim Fandango, by the way.
This is the crew shirt, by the way, the team shirt, the GLaDOS shirt.
So I have a question about the animation in Grim Fandango.
We had awful data loss from soft image animation to the real-time game engine, because at the time, the only math we could really afford to do was linear interpolation.
So did you do anything to improve the actual keyframe interpolation in Grim Fandango Remastered, or to stick it?
Just because it was too, I mean, was there a reason to stick with it?
We did not, no.
Yeah, I mean, we would have loved to have done something more with all of the 3D data, but not having access to the source material kind of.
put us on a path where we decided to try to make as many improvements as we could within the context of everything outside of that but not push harder on trying to replace the models or the animations.
Yeah, keyframe animations should be valid data.
I would love to see this presentation actually end up as add-ons to the game at some point, like this is actually really good information. So thanks a lot for doing it.
I also want to say the bug about pushing forward and having him go back and forth.
I swear to God we fixed that.
I swear to God that game did not shift like that.
And when you saw it, when you held it down, I'm like, yeah, and he keeps going in that direction.
And then like you said, he did.
I was astounded.
So...
What added to your bug tracker?
Yeah, I don't know. I'm trying to figure out who's responsible. I think it's Kevin. Thank you.
So in some other remastered games you know they've talked about like recovering like you know a bunch of the different types of assets and interesting stories around even audio like recovering old voice, like you have stuff that's like from the original game data wise but in some remastered games they've actually taken those and tried to enhance them, either remastering, either the music, even digging into like the old technology at which these audio files were recorded on which is like, you know, pretty ancient stuff for that. I was just kind of curious if you could touch on that at all.
Yeah, I can so actually the guy who worked on all that stuff is sitting right here if you want to talk to him, but yeah, there was we were using I'm use which in both games which is the original LucasArts technology that supported all kinds of dynamic music and in the remaster all sorts of things happen yet there was extraction from the original debt tapes correct me if I'm getting anything wrong Trevor for like the V o 2 because we didn't want to use the compressed material in the games that it shipped For Grim Fandango at least, there was live, okay we're running out of time, but there was a live band recorded, extra music to really try to improve the fidelity and Peter McConnell, the original audio director was involved in all that, so yeah, there was a lot of stuff.
Unfortunately we couldn't fit it into this talk, but yeah, if you wanna talk more after, we're available.
So yeah, I'm sorry, but we're out of time because we just tried to jam in as much information as we could and talk.
So thank you again, everyone, for coming.
And you can find us outside.
Trouble with that sort of thing, and because we don't localize graphics, that is something we have to worry about because we can't change it for another language.
And I'm sorry, the second question The web portal, yeah.
So I don't know a lot of the details, because again, that's stuff that engineers implemented.
What I'm told is it redirects based on the locale from your IP.
So if you don't, I believe there's a cookie that gets set.
And if you're a first time user and you don't have anything, it tries to figure out where you are in the world based on either IP or browser settings or something like that to initialize it.
Cool.
Thank you.
Yeah.
My name is Jidaika Kawai from Japan.
And I just want to, you know, considering a lot of developers and publishers in the States are kind of ignorant about localization.
And usually localization happens in the end of the production.
And considering that, it seems like there was a huge leap from 2012 to 2015.
And can you tell me what exactly happened to change that mindset?
Yeah, well, I mean, I think at Bungie, a big piece of it was they went independent.
So the last game that they'd published, they were still a part of Microsoft.
And being internal at Microsoft, they had Microsoft's localization team to work with.
Localization had never really been something they needed to worry about internally.
It was something where, towards the end of a project, someone who had another job would just be tasked with, OK, get the strings together to do a localization handoff, get those assets implemented back into the game.
But there wasn't a need to have dedicated internal people.
So it was a combination of that, I think, and also just building this new IP and wanting to do things right and build a global brand.
They wanted to make sure that we were taking a good approach to localization.
Was it just for this game or was it just as a Bungie company itself?
It's hard for me to say because I came on after they'd already decided to start building a localization team internally.
Yeah, half answer but...
Sorry.
All right, thanks.
Yep, thank you.
I'm sorry, I apologize, but it's now time to end the session.
There is a wrap-up room in cell 300.
You're welcome to ask additional questions there.
All right, thank you.
