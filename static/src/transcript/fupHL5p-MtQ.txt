Hi everyone, welcome to GDC.
And today our topic is the art of not reinventing the wheel in Wild Rift Asset Pipeline.
Hi, my name is Sean Lo, Technical Art Director at Riot Games.
So happy to be back again to GDC this year.
Last year, I gave a talk about UX of art tools development in general.
So this year, I thought maybe we can talk more about pipeline and specifically on what happened in WoW Rift.
And before that, quick intro about myself.
I started working on games when I first joined Disney Interactive.
and work on Disney Infinity 2 and 3 as a technical artist in the tools department.
Infinity is a massive project, where we got to work with studios like Disney, Marvel, and Lucasfilm in everything related to IP.
And I learned a lot from these projects.
As you can see, there are still a lot of toys that I collected during Infinity times.
Those are sweet memories, and it's so great to have them working alongside with me throughout these years.
Alright, and there were also many amazing prototypes and ideas that I worked on, but those belong to the unpublished titles here.
I then joined Unity Technologies, serving several internal demo teams before I got pulled into the Atom project.
It was a very ambitious project because we want to prove that we can use game engines to produce high-graphic fidelity films.
And after the success of ADAM, our team got to work with Disney TV this time.
We want to prove that we can use game engines for long-form animated content, like Baymax Dreams.
My last project at Unity was to overhaul the entire Unity editor's interface, which is official starting 2019.3.
Another super ambitious task where I got to work closely with many engineering and designer teams.
It's a long process, but I'm glad that we put it off successfully.
It is now official and default in the Unity you download today.
So hope you all enjoyed it.
Now I'm with Riot Games, working on Wild Rift, which I wasn't fully aware when I first joined.
So if this is also your first time hearing about Wild Rift, please allow me to briefly explain it here.
Wild Rift is League of Legends, but on mobile.
It is a 5v5 mobile or multiplayer online battle arena genre.
Here you log in the game and form a team of five, so does your opponent team.
Everybody got to pick a champion to play. Then the 10 will get sent to a battlefield, or we call it summoner rift, to battle. You work as a team and fight for the objective, that's to take down enemies base, or just as fun fighting each other.
Very straightforward, but because each champion that you choose is so unique with their abilities, there's a lot of time you can sort off your 200 IQ gameplay and skillful control mechanism.
And when you outplay your opponent successfully, it becomes the highlight.
But when you don't, it goes to the funny moment compilation then.
And all these memorable moments is the reason why players are engaged with these games, enjoy playing it as well as enjoy watching pro players playing it in the esports events.
I myself love this trailer very much because I think it captures the light tone, the fun, wild times we hope players can enjoy it here in Wild Rift.
Alright, so to reiterate, Warwick is on mobile and we rebuilt it entirely, the art, the code, all new.
This means we got the opportunity to revisit many parts of the game, like the design and gameplay, to make it refreshing and fun.
But this also means we got tons of works to do, because not only we have to do the new works.
We also need to ramp up our content to match with what we have in League of Legends PC, whenever makes sense.
And for myself, joining this team while it is scaling or exploded from an R&D prototype to global live games presented one huge problem that I need to solve.
which is how do we keep thousands of art assets each with huge dependency in a trackable state.
So for today, I'd like to share my experience in solving these problems.
We'll go through the context, scopes, actual implementations, and finally, the learnings.
All right.
First, I'd like to explain about Wild Rift Champion Asset because it's a pretty unique structure to serve this mobile genre.
For a Champion Asset, it mainly consists of the Icon, Splash Art, In-Game Model and Turntable Model.
The Icon, Splash, Turntable are the ones players will see before an actual game or battle.
But when a battle starts, it's all about the in-game asset here.
That's why it is the most complicated asset we have, and also the one that we will spend most time talking about for today's topic.
And when inside the game, each champion has four abilities to learn and level up.
You can think of this ability as the champion's power.
For example, Fire Cannon, causing AoE damage, or Heal.
And for each ability, we will have a dedicated set of animations, effects, and sound to pair with it.
Take Leona, our support tank for example.
Her first ability is Shield of Daybreak.
So you'll see her animations and the effects assets that we need to play when it got triggered.
Second ability, Eclipse.
And the third ability will be Janne's Blade.
And the fourth, or her ultimate, Solar Flare.
You'll see over here when triggered, her animation of her pointing the sword up to the sky, followed by the decals that we need to project onto the ground.
And that's for a champion, as a base.
We will further expand the fantasy of a champion.
We will have skins that visualize the champion with different thematics or styles.
For example, here we have Leona, the Radiant Dawn, as a base champion.
While we have Barbecue Leona as a skin, which we reimagined her as a chef.
Now her sword becomes a huge fork, and her shield becomes a grill.
And to do the skin technically, we will have to rebind the new Barbecue Leona mesh onto the base Leona skeleton so the animation files can be shared.
there would be also time that we need to add bones for unique animations or effects designed specifically only for a particular skin.
So basically when we look at a champion asset hierarchy, it will be something like this.
We have animations and effects assets for each ability for a base champion.
And for skin, we might reuse everything on the base, but do a special ability for the ultimate, like what we see here for skin one.
And for skin two, we might reuse more than one base asset, or we might even create a whole new set for everything, like what happened here for skin three.
Also, bear in mind, this is only a simplified version we showed here.
in the actual full asset hierarchy, we will have more skins as well as more animations and effects set for different actions that we need in the game. Therefore, if we want to track an asset of a skin in our game, it could be really confusing and tricky. Yes, just for a champion.
Currently, as we speak, we have over hundreds of skins in our game.
When we zoom out, it will be more like this.
Well, again, this is also a very simplified version of the reality in the productions.
All right, moving on.
Expanded scope.
Wild Rift started as a small R&D project.
In the beginning, our main goal is just to figure out what, figure out how should we, what are the things that we need to do if we want to put League of Legends on mobile?
How do we make it right?
From there, one features after another, one milestone after another.
Suddenly, we were greenlit and moved to closed alpha and open beta at several regions in the world and start to serve millions of players now.
So in order to live up to our player expectations, we have to pump up more content, meaning more champions and more skin.
For example, during alpha, we only have 40 champions.
with no skins. Now we have 68 champions and 189 skins in our recent release and the number is still counting. So as we need to produce more content, we also need a whole lot more people to help us in doing this. And now our teams also got scaled up rapidly.
But in a relative small R&D skills, team members were able to manually track and update the current state of a particular asset and keep communications consistent through regular sync up.
However, with current state of well-resized, to coordinate the production works with multiple internal and external teams, the previous method immediately becomes unsustainable.
To illustrate the situation clearer, this is a very true conversation I have with team members.
Happened so many times, especially with those outside of the core dev team.
So say, someone will come and ask me, hey, can I get the ARRI model?
I'll say, yeah, of course.
Which one?
The latest.
Then normally I will ask, I mean, do you want an in-game or turntable model?
Ah, the turntable. Got it. Just a base skin, right? Oh, actually I need the KDA skin.
Guess what? Okay, but which one? KDA the OG or KDA all out, the new one? Yeah, we have two versions of KDA skin line. The original one in 2018 for PC and the new one that we released in 2020 both for PC and Wild Rift.
So confusing.
Hopefully, now you can understand the pain and why we absolutely need to solve these problems.
And how things could be worse.
Well, pandemic.
Bye-bye office, and hello, working from home.
Imagine having to deal with this crazy amount of information while the working environment has changed from.
everyone working in a closed office environment, like a part of 10 people, to everybody working from home.
No longer you can lean over to your teammate beside you, less than six feet apart, for a quick answer.
Now everything needs to go through Slack messages, video calls, like Google Meet or Zoom meetings.
This makes the process of getting a simple yet rewritable answer suddenly become so much harder and time consuming.
So to summarize our problem space, Wild Rift has a complicated asset hierarchy to deal with.
Our teams got scaled up rapidly, more human, more questions needing more answers.
And working from home just make communications harder than how we used to.
In the end, simple yet crucial tasks like tracking a state of our asset is a huge pain.
And now to the goal.
What we need is a tool that can quickly help us to get all our asset information both broad and deep.
Broad as in things like how many champions we have now, or say, how many support tanks we have for the current build.
Deep as in, what are the list of animations that we use, say, for barbecue Leona ultimate skills, for example.
Then for the restrictions, the big caveat of this task is that we can't afford to revamp the current workflow.
Because production is full steam ahead, we have deliveries to meet.
We can't afford to ask artists or PM to help us fill out those data through their daily routine, or even train them to use some new tools to help us gather information.
That means reinventing the wheel or introducing new process at this point is a big no-no.
So to start, what do we need to know now?
And where can we find those answers?
This is our discovery phase.
My first approach is to survey existing tech that we have in the project.
This is a very important step.
I need to know what we already have or even what we might have in the near future.
I dare not to make any assumption here.
So through reading a lot of documents and checking in with team leaders from art, engineering, and even design, I was able to capture a broad knowledge of where and how our art assets are being used in the project.
So one important thing that I learned is that we have an internal game logic system that is used to set up every champion in our game.
For example, which character animation clips and effects are supposed to play during a champion ability?
Or which model is supposed to load when players select a champion skin?
The systems were separated into few different places for different usage like we mentioned just now.
But that's ok, I just need to know where to look for them.
And guess what? The best part is...
These data are serialized in separate JSON files, which means I can pass them directly without any additional tools.
Therefore, in this case, a very specific and custom-made tool in our project helps me in verifying the first and major parts of my hypothesis.
And I'd like to emphasize that this kind of very niche, deeply integrated systems is typically very hard to understand at first.
Documentations might not be available, and even if they exist, they might be outdated because how fast things have changed to meet the production's needs.
So whenever a document is not available, I have to check in with relevant teams or even individuals to find the answer.
And when both document and person is not available, what should I do?
Yes, we have the code.
The answer is right inside the code.
What I will do is deep dive into the code, set a break point for each step.
to prove my guesses and get the answer by myself.
It is hard, but it's definitely rewarding too.
If you can make it through the steep learning curve of this kind of in-house tools, the benefit will definitely outweigh the cost, at least for me.
All right, next is what I got for free, the established asset system within Unity.
For example, in this case, what helped me are the prefix systems and the meta files.
And since this is universal, I mean, same rules apply for all Unity projects out there.
Therefore, I can safely rely on these generic systems and use it to build my tools around it.
In a Unity prefix file, it actually stores a GameObject.
complete with all its components, property values, and even the child game objects in it.
It is like a template, and we use it to configure many assets in WildRift, including our champion.
And as for the meta file, it is created alongside with each asset file, which is used to store the unique ID or GUI ID that Unity assigned to it from the beginning.
These two Unity files helped me in developing the solutions, which we will explain in more detail later on.
And good things about this kind of established system is that their relevant knowledge is publicly available, either from the official documentations or community forum.
Therefore, the learning curve of this is much lower than the in-house tools that we discussed before.
And the last part of discovery is the naming conventions.
You've probably heard this a million times already, but it is still a very true thing.
And since what I'm trying to solve here is related to asset, the naming conventions is even more important here.
And the way I've built it is from two categories.
One is system facing like a folder and file names.
The other one is more for art asset, like how the rig, animations, and effects objects is being named inside a file.
For example, for a rig, we might have prefix like L, R, or C to indicate which side of a rig control or skeletons belongs to.
Animations might have in, out, trends, while effects might have things like heat or buff to explain their usage.
With strong and clear naming conventions, a lot of questions can be answered right away.
However, we must also admit that this is extremely weak.
Because if anyone in the team is not committed to these conventions, you know, like wrong folder, inconsistent names, or even like typos, it will immediately break and make things worse and confusing.
I'm just super grateful that our team did a very good job in this.
So whenever I have to, relying on these naming conventions did help me to solve the other parts of the problems when the previous two methods were not able to.
All right.
So now that we already did our homework, survey, and gather enough information, let's get to work for a solution.
And the solution is an asset analysis tool, which is able to scrap the entire game project for relevant champion asset data.
And in this process, we will first ingest all JSON files that we use to set up our champions through the logic system that we discussed before.
And this stage 1 files contain general champion info, like their name, their attack range, or lane.
We can also know their skin and skill names, along with their 2D and 3D assets, and more importantly, their path in our project.
Because with this asset path, so in the JSON file here, we can now use it to load the asset for more detailed information, maybe something like the mesh and animation data in a FBX file.
Then based on this raw data, the tool will then create containers for each asset type with proper structures that reflect our asset hierarchy as we discussed before.
So we have the top levels, which is the entire project, right?
Then we break it down into the champion levels.
Then we have the skin level with their respective assets.
For example, again, you know, like their animations and effects list for each action that we have.
Again, idle, run, recall, things like that.
Pretty standard OOP here, but with these structures, we can treat each container like an actual asset object, which make the next step so much easier and user-friendly.
Yes, the next step is an easy API for the user to interface with.
We really want this tool to serve as an easy data point for user to access.
So just import the module, call it AAT.
It's our asset analysis tool.
And point it to the project report.
And basically, you are good to go.
So for example, once we set up, we can ask for a very specific champion like Ari here.
After that, we can continue to gather details, data like her specific skin, say, get me the first one.
or even all her skills in a list form.
The nice thing about this method is that now data could be obtained in an organized format.
And at the same time, it is easy to customize for many different purposes.
The possibility is quite endless here.
And we will look at some examples later on too.
And the reason we can achieve this kind of result is through many integrations.
You might already notice that we write this tool using Python.
So first, what we did was integrate packages like Unity, Puzzle, and YAML to help parsing the Unity side of system files.
So in this case, Unity Puzzle is for us to parse the prefab.
So now I can know which components are contained in that prefab.
For example, like a mesh or material.
With that, we can continue to trace the actual asset that is being used in that prefab.
This is where we will use the YAML package to help us in verifying the GUI ID of the asset that we are looking for.
So once the asset is verified, we can now safely ingest or load the asset.
For example, we have a lot of FBX files that we use for models and animations.
So what we did was having these tools to integrate with the FBX SDK.
This enables us to get detailed data inside FBX, like the mesh data, animation curve, and even other custom properties that we store in there.
This is so great, because now we can query the state of an asset entirely.
This even gives us the ability to QA the R asset if we want to.
For example, we can ask the tool to scan for any model with a word count that exceeds certain limits.
So you might ask, why Python then?
Your project is in Unity.
Why don't you stick with Unity's C Sharp?
Yes, that would be the straightforward choice.
But launching a Unity project at this scale, it normally takes about 5 to 10 minutes before we can even start navigating inside the project for an answer.
So what I really wish for is something that is light and fast.
Basically, I just hate waiting when I need an answer.
Also, I like to keep this tool as standalone.
So what that means is it doesn't need any tech dependency from our actual projects.
We don't even need to install Unity in order to run these tools, for example.
What I just need is a Python IDE, and outside of the project.
and start coding.
Not to mention, iteration times is faster as well, since we don't have to wait for Unity to compile the script every single time.
Having these extra layers of flexibilities makes our tool development a lot more efficient.
And this is our final result.
Now, tech artists have the ability to track asset dependency easily, provide quick and accurate answers to anyone who need it directly.
And it can be customized to fit any specific need and to find any specific answer.
For example, it can allow us to do a project-wide asset analysis like what's shown here.
We can get all champions available in the current project, look through the list and ask for maybe just a base model.
In this case, we just have to throw in the ID of zero.
And that will give us access to every base model FBX files immediately.
From here, we can do many analysis like, hey, just calculate the max or min word count in the mesh, or get me the key frames data in an emissions clip.
So one real scenario I may share here is in a Zoom meeting that we had, someone asked the group, hey, which champions has the highest poly count in our project now?
So what I did was quickly launch Visual Code and write a few lines similar to what we saw just now.
Get all champions, right?
Go through all skins, and for each skin, grab the in-game model word count, append it in a dictionary, sort it, and tell me the max.
And all that was done while the group is still talking.
And before the topic changed, I was able to inform the group and say, Seraphine has the highest poly count.
I guess thanks to her long hair and floating stage.
Imagine if I were to do this directly in our Unity project.
First, I'll have to launch Unity.
Five minutes in, say, even if I have some tools ready to scan all champion FVX, But I'll still have to modify the C Sharp script to get me the max word count model and wait for it to compile.
Now, compiling even a simple editor script like this in a project of this scale is going to take maybe a few minutes.
Therefore, having this standalone tool is definitely easy to modify and faster to get an answer.
So with the data that we gather from this tool, we can now output it in whichever format we want, like a spreadsheet, a CSV, or Excel for other teams to use.
Since not everyone in our team is able to write a Python script, but that's OK.
They can still benefit from this tool with the data provided in a format that they are familiar with to continue their work.
Not only that, we can even directly connect this data or this tool to any framework or applications that we need, like Perforce, Maya, or other standalone tools that we have.
For example, we actually used this tool to populate our Shotgun asset database when we started using it early this year.
It was a breeze to see how easy and accurate the asset data can be migrated over the new menu.
All in all, these tools help us in getting the single source of truth for internal use, as well as help us in cross-team collaborations.
Because now we can share info and tech easily with other teams like console and PC, or basically any team in Riot, or even with our partners.
Looking back, What are the lessons that I've learned?
So in order not to reinvent the wheel, the first thing I learned is to understand your playground.
And here's a picture of a playground that I took during pandemic, just in case some of us already forget what a playground looks like.
OK, now, the playground I'm referring here is the existing data and tools.
There will be tons of data laying around in a massive project like this.
some data is ready to be used.
Like in my case, the JSON files are already there to be ingested.
There are also data that are not existed.
So we'll need to find a way to formulate that and fill in the blank.
So in my case, naming conventions and those tribal knowledge helped me to bridge the missing gap.
Also, understanding what tools are at your expense is equally important.
Some tools are custom-made, like the game logics that we discussed before.
And some tools are generic, just like the Unity system file.
Once we have gathered this kind of information, it will not only provide a broader view of your playground.
More importantly, it will reduce the urge of building something from scratch.
Yes, we prefer to build something on existing foundations rather than start from zero.
Not as an invention, but as an integration. The pro of doing this is definitely faster development since the amount of work and code that we need to do is normally broad but thin.
We are linking many working parts together and drive from there.
The con of this approach is that you might have to upfront a lot of communication costs to fully understand the overall picture like what we discussed before.
This really depends on how easy you can obtain the information from existing documentations or code base.
But even in the worst case scenario, I'll still believe that the cost is absolutely worth it when we look at the benefit we gain in long term.
Second thing that I learned is choosing the right tool and construct a plan that is future-proofing.
We want to make sure the tech that we choose can be easily supported in long term, rather than something that might not be even relevant in the next five years.
We also want to make sure something that is flexible to make necessary adjustment if we need to.
It will be nice if it is easy for us to pivot to accommodate any future production scope.
And along these lines, we are looking for something that has very little dependency so we can move things around without too much restrictions.
Travel light is what came in mind when I am thinking about this.
Again, I think I really need to get out from this house because I got stuck in here during pandemic for more than a year now.
OK, so for our case here, this is so true when we choose to use Python to write this analysis.
First reason is because there are already many Python users within Riot, which means it is a relatively low barrier in terms of the learning curve.
But this also means that it is easier for us to get help in working on these tools whenever we need to.
Just have to call someone from other teams and we can learn them.
So we have sufficient support in terms of both tech and people.
And talking about support, Python also has a lot of publicly available resources and an active community.
This makes the development a lot more easier when we have this level of confidence.
And at last, even before working on the actual code base, I know that it is best for us to make this tool with less dependency in terms of tech, meaning we want it to be more of a plug and play kind of easy mechanism.
Also, with this loosely attached interface, we are able to change or expand so this tool can connect to other applications or engines so we need to pivot in the future.
Last, but also the most important lesson, at least for me, is to start small so we could start fast and possibly also feel fast.
Keeping your goal too ambitious sometimes makes things really sluggish to even kickstart.
By scoping things accordingly, you can at least focus on a well-defined area to start with.
Prototype something really fast, so your result to team members and stakeholders make sure everything is aligned and informed.
Then go back, reiterate, and keep building the next block.
With this approach, I was able to keep expanding the features while fixing the bugs, or even remove some features that we thought was a must in the beginning.
Another thing that I benefit from this approach is it keeps reminding me to make sure the code base that we write is always modularized.
Smaller Lego blocks that are put together to form bigger blocks then fit into other moving parts.
We can reuse, and even it is easier for us to take out the blocks if we need to in the future.
And talking about pivoting, we are currently in the phase of evolving this analysis tool into something bigger and even more integrated.
Remember, we talked about using this tool to build the foundations of our Shotgun database.
So now we want to use it to extend our Shotgun workflow.
And this will let us build a more streamlined workflow by layering this analysis tool on top of the Shotgun database, give it a thorough knowledge of our asset conventions and rules, integrate many processes and automations via the Shotgun API.
I'm confident that Wild Rift Art Production is going to have even more potential after this.
So to summarize, the art of not reinventing the wheel, for me, it is all about integrations.
You might heard me saying this repeatedly already throughout today's presentations.
Yes, the way I view this integration is like a partnership, and partnership is more important than ownership.
I like to think of our code base like having many people working and collaborating together.
Each person has a dedicated task to complete, but it also needs to work well with other people.
And this is so true for our WoW team.
We work with many partners around the world.
And only with this kind of strong relationships, we are able to achieve such a WoW project and bring the best mobile experience to our players.
And as for tech people.
This partnership genetic lives deeply in our blood.
We are the bridge, and our job is to bring the tech and the art together in order to make things better.
And also, because working together is more valuable and more fun than working in our own silo, especially when we are all working from home for more than a year now.
I just hope to take this opportunity to encourage everybody to actively reach out to each other, even in a virtual format.
Just like this one, we are all here in GDC virtually.
These temporarily physical separations won't be the reason we stop working together to solve difficult problems.
I want to believe this.
And we are not far out when the pandemic is over.
we will be able to hang out together again and come to GDC together in person this time.
Lastly, and truly, 1 plus 1 is more than 2.
We are better when together.
So hope this presentation helps you all, either in your work, pipeline, game, or even working relationship with your team members and partners, people around you.
Let's make more awesome, more fun, and more world games.
Thank you all, stay safe, and see you around.
