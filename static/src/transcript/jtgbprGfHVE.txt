This is Don't Change a Thing, the challenges of evolving solitaire.
Thank you for coming. I'm super excited about what I have to present. I hope that you will love it.
My name is Russell Carroll. A little bit about me. Well, I like to go by the name Russ.
And I like green. I also like Nintendo. I came up as a producer and designer.
So you'll hear a lot of design background and producer background.
The thing I like most, the title I like most, is vision holder.
I like to think about projects from the beginning all the way to the end and try to encapsulate that.
And then I have a lot of awesome people I work with to make it all happen.
I'm old by GDC standards.
This is my 14th GDC.
So I guess that makes me old.
I have some gray hairs.
And I love fun.
This series of icons you see here are from games I worked on before I joined my current employer.
You'll notice a theme, which is some planes and googly eyes.
I used to say, if it doesn't say fun, it needs to be redone.
It was just a quick phrase for me because I love things that were happy.
And I also like making games for everyone. Some people call these casual games.
Games for everyone works for me, and that's the main reason I work at my current employer, Mobilityware, an awesome place.
That's enough about me. About it. Solitaire!
Solitaire has had over 270 years of playtime today and every day.
We've got over 200 million downloads across Android and iOS.
The game is the number two installed game on iOS.
And if you remember when Pokemon Go came out?
Everyone was playing it.
And there was a company that did a quick look at the market to determine how much people were playing it versus everything else.
And they released the top five games played on iOS.
When they did that, we were happy and not super surprised to see that Solitaire was actually the number three game played.
And the number four game played was our Spider Solitaire.
So these games may not be quite as flashy as some of the ones you have heard about.
We have massive numbers of people playing our game, which is a great opportunity and also presents some challenges that we'll talk about today.
Some more about it.
When I say the word solitaire, I often refer to five games.
We have a solitaire suite of five different apps.
They are TriPeaks, Spyder, FreeCell, Pyramid, and Klondike.
Klondike is the one that everyone calls Spyder, or sorry, solitaire.
except some people may call patients those of you from the UK and other places.
There are 16 SKUs.
We have those on Amazon, Apple, and on Google.
I run two different teams doing the development for the game.
And that is across three development environments.
We work in native iOS, we work in native Android, and then also in Unity.
And to the question of, are you still developing this game?
The answer is an emphatic yes.
We had 40 updates across the suite last year.
We're going to have more than that many this year.
Some of those updates are small, but we try, I try really hard to have a feature in every single update.
So yes, we're still developing a lot, which gets into about my job.
When I tell people I make Solitaire, I usually get the question of, well, what do you really do?
Great salt has already been developed it's been around for a long time what's your job. Well when I was getting hired I was told what I was going to be doing.
And that is add features to solitaire add users to solitaire and don't mess up the revenue.
Yeah a little bit of fear there.
So this actually creates the first challenge in working with this large title.
And that is, how do we make changes that increase the revenue without making changes that decrease the revenue?
I'm going to start telling you about the second challenge.
And to do that, I have to tell you about her.
This is Lisa.
It's a pretty good likeness.
This is Lisa.
I met Lisa when I was in a parking lot.
We were both picking up our sons.
not shared we're picking up our sons and so we're waiting and we got to talking and is usually the case she asked what I do and I said well I make games and she said oh well I I don't play games so this is Lisa not a gamer.
And then she found out I made Solitaire.
And she was ecstatic.
She got so excited.
She's like, I love Solitaire.
And she went on and on about how much she enjoys it.
Specifically, she loves a feature called Daily Challenges.
Daily Challenges is a feature where we have a new winnable deal every day.
And there's a calendar.
You can win the deal if you check off the calendar for that day.
If you complete enough deals within a month, you get a big trophy.
he complete more deals you get bigger trophy nearly all the deals in the month you really big trophy we call that gold pretty straightforward stuff she told me about how much you love the game and then she said don't change a thing don't you anything now this is an irony right because if we haven't changed anything the future she loved wouldn't have existed we would never made it to begin with And so this is really that second major challenge we deal with in our game, and I'm sure many of you do in your games, which is we have customers who resist change.
They tell you they don't want change, but we also need to make changes.
And so these create a tension.
So these are the two challenges.
Players resist change.
Companies, they only want positive changes.
The question is, how do you handle those challenges?
They're not unique to us, so you can kind of ponder how you do it.
I'm gonna go through some of the effort that we do.
And that is a focused effort to first off, protect the player, and then to protect the revenue.
Let's talk about protecting the player.
And the way I'm gonna first talk about this is with in-game surveys.
I love in-game surveys.
I hope that you're using them.
I've heard a couple of people talk about them but no one who really was using them a lot.
So let me tell you what we did with them.
To do that, I need to first tell you about a feature we put into Solitaire FreeCell last year called progression.
Now this feature was actually a multitude of smaller features all put together.
The first is that we have XP.
So every time you complete a deal, we give you XP.
You can see there's an XP bar, normal meter.
We also have daily goals. Each day there were three goals, an easy, a medium and a hard goal.
You get XP for completing the deal, you get XP for completing a goal, and if you complete all three goals in one day, you get even more XP.
So there's a bonus that you're working towards.
There are levels, so you can level up, you can be level 14, level 42.
And lastly, there are titles.
These are mostly just for fun, but they provide a goalpost.
That's kind of the idea behind all of these, is creating goalposts, creating a progression for users that they can move through.
So every five levels, you would potentially earn a title.
So let's go back to in-game surveys.
When we released this feature, we wanted to know how customers felt about it.
We want to protect the customer.
In order to do that, we need to understand, how's the customer feeling?
What do they say?
What do they think?
And in-game surveys are a great way to do this.
They're unfiltered from a player.
where you go to a review and you might have to put your name on it and the consumer might be a little scared to let their friend know how they really feel about a game.
When we get a survey response back, they are very honest.
They're brutally honest.
They will tell us exactly what they think and how much they hate us.
So this is good.
We get more information.
In fact, six times more information.
So this means that when we ran this particular survey, we get six times as many people who responded to this survey as who wrote in reviews.
Okay?
So, more data, much better.
It's also targeted.
We were able to write the questions to get the information we wanted.
So we didn't have to parse through all the reviews and say, well, what are they talking about and what are they talking about?
We were able to drive the users to specifically what we wanted to talk about.
And they're super easy to do.
The way we did this, we actually used SurveyMonkey.
So nothing hard, right?
We created a survey in SurveyMonkey.
And we have a file up on a server that has that URL in the file.
And it also has a couple of other pieces of information.
We just change that link.
And we change the other information.
And it puts the survey in the game.
It shows up in a web view.
The players can respond right there.
That's it.
It's that easy.
Because it's in SurveyMonkey, we can immediately go and analyze the data.
How did we do it?
We had a 5 question survey we started with 4 like or scale questions if you're not familiar to like or scale a big fan of it.
The scale you have a statement and then the player responds by saying whether they strongly agree agree neither agree nor disagree.
disagree or strongly disagree with your statement.
We broke out those four questions into two parts, two about progression and two about the UI, which we had to change as we did progression.
I wouldn't recommend, by the way, doing those two things at the same time, but we had to in this case, so there it is.
The last was a comment box, and this allowed users to say whatever they wanted about whatever they wanted, and they did.
We ran the survey for about two weeks.
We got many, many thousands of answers.
many, many, many thousands of data points.
And then we analyzed it.
This is actually a word cloud of the comment box data that we got.
It's not really useful, but it's kind of pretty, so threw it up there.
We looked at the trends and the opportunities that we identified from what people had said.
And then we pulled the team together.
We had a meeting.
We talked about the problems.
We brainstormed ideas.
And then we put in together a plan of how we were gonna address the feedback.
We'd spent many, many months putting together this feature.
We'd now gotten back what the customers thought about it, how they felt about it, what they were saying about it very honestly.
And we went out on a two-week development plan.
It's not even two weeks.
We planned for one week of engineering time and a week of QA time.
All right, so we dove right in to try to improve things.
And I'll tell you how we did.
When we first released our progression feature, based on the survey data, 80% of our users liked we were positive neutral towards the information we had in there.
They liked it, but 20% didn't like it.
That's one in five.
That's not a really good number.
So we took this one week period to try to fix that, which is kind of crazy, because that's not enough time to do a whole lot.
But we did.
By just listening to what the players were saying, by protecting the players, by understanding what they wanted, we were able to cut that number in half so that the next release, and it took the weeks with the QA and then getting the data and whatnot, was 90% of our players liked what we were doing.
That's a huge change.
other way to protect the players a be testing I'm sure all of you do this if you if you don't shame on you I like to a be tested I like to be test features not whether or not the pony should be blue or red I like to identify should we have a pony all.
I'm gonna tell you about one test that we did, which is on the EasyRead card front.
Now, I told you a lot of people have this game installed.
In fact, almost 10%, just a little over 9% of people who have an iPhone have our Solitaire game on it, which is kind of crazy.
That means about one in 11, which means a number of you do, and not just because some of my coworkers are here with us, a number of you probably have this game installed on your phone.
We get anecdotal information because we talk to everyone as we're out and about.
When we see them with their phones, we talk to them, and we see if they have our game.
And if they don't have our Solitaire game, and they have another Solitaire game, we ask them, well, why not?
Why don't you have our Solitaire game?
One of the pieces of information we kept getting back was, it's hard to read your cards.
It's hard to read your cards.
That was a reason why some people weren't installing our game.
They're hard to read.
Now, cards are the character of our game.
there are Mario or Super Mario brothers that may seem strange to say, but our players look at these cards all the time.
That's all they ever see.
That's all they interact with are these cards.
So changing the cards in solitaire, super hard.
When I first joined Mobility Aware and we talked about changing the cards of solitaire, I had people that start shaking their heads and they're saying, you cannot change the cards in solitaire.
Not that you shouldn't, you can't do it.
Cannot be done.
Well, we want to listen to what our customers want from us.
We want to protect those players.
And we want to do that not just through listening, but also seeing the actual data.
Not just what they say, but what do they do.
So we did a test.
And we did it as a 50-50 test of new users.
Now, new users, of course, because this means we're not exposing all of our existing users to it, right?
It's safer already.
And we did it on Android, which further shrinks down what we're doing.
I'm just going to run through the results really quick, because it's kind of interesting.
There is a black line you'll see on this graph.
That black line's a baseline.
Anything above that line was an improvement.
Below that line was not an improvement.
So it's an interesting little piece of graph here.
The blue, if you see, is the phone.
For the phone, having this new font increased our retention across the board.
Day one, day seven, day 14, day 28.
Pretty awesome.
For tablets, which is the yellowish orange.
It actually didn't increase retention.
It decreased retention up until day 28, where it randomly went way up.
Well, that feels really uncomfortable.
So what we ended up doing is acting on what we felt really good about, which was we knew on phone this font was making players stick around longer.
It was retaining users better.
So we made it the default on phone and made it available to all of our existing players as well, let them know it was there, so they could choose to use it.
So that talks about protecting our player.
This looks at what they say in in-game surveys and what they do through A-B testing.
I want to go back to the challenges.
I said that players resist change.
And companies, they only want positive change.
So I want you to think about that for just a moment.
As a developer, how does that make you feel?
If you're thinking as a developer, I'm gonna make changes, but the players don't want them.
And if I do anything wrong, my company's going to get angry at me.
How do you feel?
Well, the answer is, you feel afraid.
As a developer, you are fearful.
And the response of being fearful is, play it safe.
Try not to do anything that will rock the boat.
I heard this when I joined the company.
I'm going to go through a few quotes here.
First one, you have to be careful when you talk to management about changes.
I heard that right off the bat when I joined MobilityWare, which has been some years now.
We once changed the font by one pixel, all.
Notice it's underlined, because all the players complained.
All millions and millions and millions and millions of our users, they all complained when we changed the font by one pixel.
These types of stories end up being culture.
They communicate to new employees how you interact with your games and what you can do at the company.
In this case, what we were communicating was making the smallest, most minute change was not a good idea.
Don't make changes.
And lastly, I still hear this one sometimes, so I'm still working on it, is you can't change anything on Solitaire.
So you can hear the fear through these, right?
You can hear that there's some discomfort in trying to make changes.
I'm gonna quote Ed Catmull here multiple times.
He wrote an amazing book called Creativity Inc.
about managing creativity.
He's the president of Pixar, if you're not familiar with him.
Now president of Disney Animation.
He says, in a fear-based, failure-averse culture, people will consciously or unconsciously avoid risk.
They will seek instead to repeat something safe that's been good enough in the past.
And if you're looking at this and you're like, Russ, what's wrong with safe?
Isn't that OK?
What's wrong with it, really?
Well, here's the problem.
Another quote from him.
Copying what's come before is a guaranteed path to mediocrity.
In our industry, there have been hundreds of games that have come out on mobile today.
There are thousands of games coming out every month.
You cannot afford to be mediocre.
You cannot afford to play it safe and be just like all the other titles.
There are thousands of failing, mediocre, safe titles.
They're failing every day.
You've got to stand out.
You've got to be willing to make the risks that will help you stand out.
So when I look at the two challenges I talked about earlier, we have making changes versus players who resist change.
And the second one was making revenue increasing changes versus revenue decreasing changes.
I actually think that second one's wrong.
The real other challenge is making changes at all versus a fear of failure.
So now we have three ways to address these challenges.
We have protecting the player, protecting the revenue, and defending the developer.
But if you were listening to what I just said, protecting the player and protecting the revenue comes at the expense of the developer.
It makes them fearful.
Those two don't work together to create the third.
And if you put all three together, you have a mess.
So what if we protect the revenue and defend the developer?
You do that at the expense of the player.
The player leaves, the money goes away.
Both of those are fails.
So this is my belief.
In order for us to really grow, we need to protect the player and defend the developer.
And I strongly believe if we do that, we do protect and grow the revenue.
Because we allow the developers to try new things and to find opportunities to improve the products.
So I'm gonna talk about this.
I'm gonna talk about how we defend the developer.
And the first way is with guardrails.
Guardrails are very familiar because a lot of the same things that are guardrails for our developers are helpful for our customers.
They protect our customers as well.
So A-B tests, they provide our developers a safe place to try things out, and they also protect our customers from getting something they might not like.
Multiple applications.
I mentioned we have five games that are solitaire games.
We can test a new feature in a smaller title before we roll into a bigger one.
We're not unique in this.
King does this.
Supercell does this.
It is a very common thing to do.
And then also we have multiple platforms.
If you put this all together, we can put something into a smaller game on a smaller platform, and then A, B, test it down to a small niche of the audience.
We still have a lot of users in that niche, but enough to test it.
But what it means is we can create a totally safe test environment.
Our developers can feel totally comfortable trying something, and if it doesn't work, that's OK, because we are not risking anything.
We are protecting them.
The result of this is really confidence and freedom.
This is only the first step.
We've gotta work with our developers as well in something we call success through failure.
I'm gonna call this failing forward, which is that we need to have a philosophy that if we try something new and it doesn't work, that's okay, in fact, that's what we need to do.
We need to try things that don't work to find the things that do.
I'm going to talk about a crash bug that we had.
About three weeks after I joined the company, we were trying to release a bill just before our company tripped to Hawaii.
Which is a cool thing MobilityWare does.
We had a crash, though, in this build.
We'd already submitted to Apple.
It was sitting there just ready to go live.
But we were testing right up to the last minute because, well, we needed to get all the testing done.
As we did, we found that it was crashing consistently over and over.
So we tried to fix it.
We tried to save it.
We have passionate developers.
They want to get it right.
So they tried to save it.
They made new builds, and those builds crashed, and more builds crashed.
And we thought, well, maybe we can just submit it to Apple.
And then when we get back from the trip, we can then be able to go live.
But as we went on through the day, we came to realize that this feature was not well implemented.
We did not do a good job putting this one in.
How do you respond to that?
If you're a manager, how do you respond to it?
If you're a company leader, if you are a team developer, team member, how do you respond to it?
There's a lot of ways to respond to it.
I'm going to go back to Ed Catmull for a moment.
He says, failure isn't a necessary.
evil. In fact, it isn't evil at all. It is a necessary consequence of doing something new. So what we did is we met as a team. We talked about how to fix the problem, and then we put a plan in place and we tried to fix it. The next day, one of the engineers came and he pulled me aside and he said, hey, I wanted to talk to you. He said, you know, I've worked at a lot of different places, and usually when we do something wrong, we get yelled at.
We get screamed at and told like, dude, you totally messed this up.
We already know that, right?
But that's what usually happens, is that it was really refreshing because you just said, how do we fix it?
How do we make it right?
And I'm not going to say I'm perfect at this.
I am not.
But I believe in the principle and I keep trying to become better at it.
Which is that as we try new things, we should expect that we are not going to get them right all the time.
And we should have confidence in our developers.
We should have confidence in each other.
As we fail forward, what we do is instead of having people who are fearful of making mistakes, which by the way leads to mistakes, we have people who are focused on getting it right.
They're focused on trying new things and making things awesome.
To do this, we have to create a culture.
We have to actually say it explicitly.
Whenever I say explicitly, my team giggles.
There's multiple meanings to this word.
What I mean is...
We have to specifically state it.
We can't just assume that everyone's gonna see us and they're gonna just absorb that this is our philosophy because we act a specific way.
We have to specifically state, this is what we want.
We want to try things and we want to move forward.
When we released that progression update, I told you that we met as a team and looked over the feedback.
The feedback we got, some of it looked like this.
I hate the update.
Hate it.
You absolutely ruined my enjoyment of playing.
I have a whole lot of these.
I could spend an hour just going through them, and many of them are not fit for reading.
There's another one.
My old high score records are gone.
Very disappointing.
Notice they put this in all caps.
I assume that's because it's important to them.
Assume.
So as we meet and we talk as a team about this type of thing, our lead designer mentioned we need to have thick skins and soft hearts.
That is to say, we're going to be receiving feedback from the customer directly.
We need to not take it personally, which is hard because we're passionate and we really care about what we're doing.
We care about those customers.
And that care feeds into the second part, which is the soft hearts.
We need to listen with our hearts, try to understand what are the customers really saying?
right? What are they really feeling? How do we help them through this?
We also need to remember that we win and lose together as a team.
This was a focus. It's really easy when you see this type of feedback to go, I didn't suggest that. Remember when I said not to put that in, it's real easy at this point to bicker about, well, we should just take this out entirely, right? It's failed. It's totally failed.
Give up, move on.
What we did is we took it as an opportunity.
We met, we identified what people were saying, and we responded directly to it.
Here's a quick example.
In the top right-hand corner, you're going to see that there's a button.
It's a kind of a round, long oval with a star in it and a number next to it.
This is where you get to the leaderboards after we made our update.
This button doesn't look like any of the other buttons in the game.
It was moved from the toolbar at the bottom to the top.
It used to be just one big star.
Now it's a star with a number next to it.
And our customers, many of them, couldn't find it.
They didn't know where it was.
They could not find their high scores.
They could not get into the leaderboards.
So this one's kind of an easy change.
We changed that to be just a big star button.
And then we put an overlay on it.
And it pointed up and said, hey, here's the button.
On the left side, you'll notice that there is a gear.
Now that's our Settings button.
It's pretty obvious.
We moved it a level under when we did the UI, one level back.
And guess what?
Some players couldn't find it.
We'd had discussions about whether or not we should do this ahead of time.
And we decided to go for it.
So when it comes back and it wasn't the right thing, this is another moment where you can say, I told you it was a bad idea, right?
That's a fail in my mind.
Because what we did is we wanted to try something.
It's a safe try.
Let's try it.
Let's see how the customers respond to it.
Didn't work?
OK.
Well, how do we make it better?
And then we made it better.
And that's really the focus of everything I've been talking about, is improvement little by little.
And we have improved.
Since I've shared so many negative things, I wanted to share some positive ones.
This is how the customers are responding to the progression feature today.
I just love it.
I love to do my daily goals.
Brilliant game.
Thank you.
And those are kisses, I believe.
I don't think they're trying to cross me out of existence, but I wonder sometimes.
This one.
I actually really enjoy the goals.
I wish there were more.
Which tells us what to do next.
And this last one.
Now I have got used to the new free cell.
It is OK.
And I'm really OK with this one.
And the main reason why is because as I look at it, we got to 90% of our customers liking what we were doing.
90% liking plus 10% being OK with what we're doing, that's 100% good.
In summary, we have two major challenges that we confront.
We have player resistance to changes.
We have developer fear of failure.
And just one big resolution, which is do change things.
We do it in a couple of ways.
First off, we use what players say through surveys.
And we also look at emails and reviews, of course.
And what they do through A-B testing and all of our data analytics.
We use guardrails to make it safe for our developers so they can feel comfortable trying things out.
And then we encourage failures.
That's part of learning.
It should be part of learning.
That's how we try new things.
If you are not able to fail, you're not trying new enough things.
You're not trying.
things that are going to be more impactful enough for your company.
Some cool stuff if you like this by the way, creativity Inc. I quoted it multiple times.
I had like more quotes that I cut out of this slide presentation.
There's so many good quotes in there.
Absolutely love the book.
Intuition.
intuition pumps and other tools for thinking.
This is Daniel Dennett, who is a philosopher.
There's a piece in there about how mistakes are the only way we learn, which I think's a really fascinating concept.
And then Make Good Art by Neil Gaiman, which is a commencement speech that he gave.
You can just check that online super easy.
If you'd like to talk about this kind of stuff, please be in touch with me.
My name is Russell Carroll.
I work at MobilityWare, as mentioned.
And speaking of, we are looking for people who want to change things.
So if you are passionate about customers and love trying new things, also enjoy fun environments where it is sunny all the time in SoCal.
Give us a ring.
And with that, thanks for coming.
I have two minutes, so if there's anyone who wants to jump on, I think I have enough time for one question.
If there's anyone who wants to jump for dinner, this is the time to run.
The question is, how big is the Solitaire team?
So there are two Solitaire teams.
And the first team is about 14 people.
And the other team is maybe six, seven.
Those are the core client teams.
We also do a fair amount of server work.
And that is held through tools teams.
We also have monetization work that is done through a separate team as well.
So if I start totaling everything together, it actually ends up being quite a large number of people.
Many of those work on multiple projects.
Please.
Quick question. When you're talking about receiving feedback from your surveys, do you get most of that feedback and ideas from like the agree, strongly agree, disagree statements or from the free form comments?
So the question is, where do we get most of the information back from the surveys?
Is it from the questions with the specific answers or the free form?
And we get it in both places.
The free form obviously gives us lots of trends to look at and specific data.
The questions with the specific answers give me trends.
So when we did the first one versus the second one, this is how I can tell the 80 versus the 90%, right?
So I'm looking at both the data of what are people saying and how does that relate over time is usually where I get those.
Most of the information is gonna be in the comments that we act on.
All right, I think that is all we have time for.
Please fill out your evaluation forms, let me know what I should change.
And thank you.
