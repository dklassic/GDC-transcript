So, uh, hi, my name's Ryan Duffin, as you can see.
I'm an animation lead at DICE LA.
I know this is a very competitive time slot.
Excuse me, sorry.
And I do appreciate you all choosing to be here.
This talk was officially named before it was written, and it named drops as appropriate, but as the talk started to coalesce, I found this title more appropriate.
There are so many things that we don't do in games because we're so far from them being easy, but we made our tools and systems so flexible that I ran out of excuses to not go crazy.
So this is gonna be a story about my descent into perfectionist madness with a lot of video examples.
A little bit more about me, I've been working in games since 2001, most notably worked on Spider-Man 2, Killzone 2, Alan Wake, and a bunch of other stuff here.
Green Lantern movie, I hope you all saw that one.
I've been working at DICE since Battlefield 3, then on Battlefield 4, most recently Battlefield 1.
I do a lot of different things at DICE, but First Person has, for the last six years, been the most measurable output of my work.
I've spoken at GDC a few times before, at the Animation Bootcamp, since the beginning.
If you're going to go back and watch any of these, I'd recommend the 2016 one, because it's the shortest.
But I think it's also my most important message, if I was a broken record, this would be the thing that I say the most.
It's about caring about the details as much as the biggest fan of your game, and not just necessarily as much as you do.
It's very bright up here.
That's an important frame to view this talk through, because I'm going to show you a shit ton of details that you might have a hard time convincing some people the importance of.
I've just decided to roll with the fact that I'm bad at naming talks and aspire to double down in the future until it just doesn't fit on the slide anymore.
So I'm not a technical animator, but maybe more of an animator technically.
That's always a fun conversation.
To me, tech animation has become a word so broad that it's lost its meaning.
I'm not here to talk today about animating in the way that some of you might think.
Anybody who knows me has probably heard me say this.
My belief is that a good gameplay animator animates in the engine, not in the content creation tools.
And every year, more and more of you seem to agree with me.
And I'm sure that came from me agreeing with somebody else before who was smarter than me.
This will be a talk about the advantages of data-driven systems creating forward-thinking solutions to specific problems.
and then the kind of crazy shit that your content creators will be able to do if you let them.
And when I put it in bullet points like this, it does sound boring, but this talk will be pretty much nothing but examples.
So, I work on Battlefield games, as you know, but this is not a talk, you don't have to care about guns, or war, or horses, or even Battlefield to get something out of this.
My examples are soldiers and weapons because I work on a war game.
But you didn't need to care about this stuff specifically to get something out of this talk.
I'm gonna try my best to not assume too much familiarity with the Battlefield franchise and the process, so you can all follow along.
This is the stuff that I care about and that I want you to care about and hopefully that this will inform the talk.
That said, the examples that I'm going to show are in two sections. One, guns, and one, horses.
To set this up a little bit better, Dice LA, the studio where I've worked since its inception, did That's not the right word.
But did three of the five expansions for Battlefield 4.
DICE LA was involved in the last nine months of Battlefield 1, including two of the six single-player stories, and then some of the multiplayer weapons.
Contrary to some perceptions, DICE LA is not only a support studio.
We do have other things cooking.
This is just the part that I work on.
We have taken over the life service aspect of Battlefield 4 and Battlefield 1.
So there's some unique challenges to building on the back of what's essentially someone else's game.
Being creative in this situation isn't as hard or as bad as you might think.
We had a lot of say in what we include and what we don't.
You don't necessarily chart the course, but you can steer the ship.
On the technical side, taking over a game can be tricky.
To put it crassly, post-launch can be a bit like dumpster diving.
The team that wrote this stuff that you need has already shipped and they're already on vacation or they're busy on the next project.
You often get stuck doing asset archaeology and trying to figure out the previous team's intent, assuming good intent is always important in these situations.
You can curse lack of documentation like you can curse the weather, but it doesn't take too many productions to understand how your confluence page gets out of date.
On top of that, there's a small matter that whatever you ship is set in stone in the old ways of game development.
Now your bugs or your pet features may linger forever as I can fix this.
In fact, there are things in Battlefield 1 that are now fixed in the live game because I found them while putting together this talk.
Balancing new content with fixing or tweaking the old is always tricky.
So, animators at Dice work pretty technically with Ant, our proprietary animation software.
I can't show you that, but the important thing is that it lets animators do a lot of crazy stuff without having to ask for code support.
We're very empowered in EA with our animation tools for animators.
That is not to downplay the awesome engineers who have our backs.
I had help through all this, and I couldn't have done it without them building the tools first.
But lots of the solutions I'm about to show were possible because I was empowered by my tools.
And I'm not talking about Ant to brag about EA or Frostbite.
I'm just suggesting that you push for tools that allow you to do more without asking for other people to support you.
Most of what I'm about to show wouldn't have happened if I had to convince somebody else that it was important at every step of the way.
So let's get started with the actual examples.
DICE LA's history of repurposing things is most easily traced back to Battlefield 4 with our shield and bow, which I've talked about publicly at GDC in 2014, and the bow a bit at Consul in Norway last year.
I actually had a whole segment on this, but the talk was an hour and a half with that, so I'm going to skip all that.
What we're really here to talk about is Battlefield 1.
So this isn't a first-person talk or a gun talk, but I wanna frame the rest of this with a little more of my philosophy on the subject and why pushing the bar here matters.
The Overwatch animators get to infuse character to their first-person animations.
Genji is Genji, Mercy is Mercy.
We unfortunately don't have that luxury.
Our soldiers have to be pretty generic.
The kind of gun, the gun kind of has to be the character.
Thankfully for the era of Battlefield 1, the guns themselves have an enormous amount of character and variety, maybe more than any other time in history.
And as militaries and weapon manufacturers tried to figure out what worked and what didn't.
We have several weapons in the game as far back as 1870, and maybe even earlier.
And we have other weapons that were used well in the 20th century and even into the 21st century.
There wasn't much consensus or standards about different actions, magazine types, et cetera.
They hadn't even figured out yet if the bullets go in the top or the bottom.
This is maybe the only major war that every type of action of firearm was used.
There were guns that were tested by militaries and failed because they were too powerful.
The militaries asked for changes and the answer from the engineer was, no, it's fine.
And they lost millions of potential sales in the process.
I'm sure there's more than a few game developers who can relate to that.
Some of the guns have never been seen in a game before until now, and some may never be seen in a game again.
In short, my mentality towards these guns was portraiture, basically.
It's not self-expression, but you're just trying to capture what's already there.
And a big shout-out to Ian McCollum of Forgotten Weapons, who, at least to me, was the best instructor in this stuff.
So, when LA was asked to help finish Battlefield 1, it made sense that we would help out on the guns.
Our lead weapon artist, Chris, is as OCD about this stuff, about the models, as I am about the animations.
We made somewhere around a third of the weapons in the main game, and already there were some fun and interesting opportunities to do something different.
For example, this handgun, the M1912, loads with a stripper clip from the top like most rifles of the day, but it also had a novel way of dumping your unused bullets.
So this 8 round reload is correct for reloading the gun when it's empty, which is what the manufacturer clearly intended.
But our game lets you reload whenever you want.
So we could have loaded any bullet count less than 8, one bullet at a time like our shotguns work in previous Battlefield games.
We have a system for that like I'm about to demonstrate, but that'd be potentially slow and worse it'd be boring and kind of samey.
Ian, whose hands these are, showed us this unique feature of the gun, allowing you to eject all the ammo currently in it to make room for a new clip of 8.
And so we used that instead.
It's potentially slower than a start loop end, depending on how deep into the magazine you got, but it's a little more unique.
So this animation is always ejecting its full payload of 8 bullets, up to 8 bullets.
I hooked it up to compare the magazine size with its current ammo count, and then I just hid the difference.
Voila.
And I didn't have to convince a tech animator to support me on this.
I just did it.
uh... the correct number of bullets always ejects and now we're telling a story that only this gun has to tell uh... despite the slow ass reload some people love this gun and nobody's really complained about it if it's not worth it then uh... we have many faster pistol options in the game there were other places where we got to have fun in an otherwise very hectic schedule this is the Calibri pistol uh... I swear when we got this we just all assumed it was going to be an Easter egg it turned out it's just one of the guns that everybody gets Credit where credit is due, the concept of the Calibri's stupid animations were my blocking, but the full glory of this animation is the handiwork of one of our animators, Barbara Rojas.
This was a hard gun not to keep for myself and an important lesson as a lead that sometimes you have to hand off the good stuff.
Shipping Battlefield 1 was a hard project and like any production, there was definitely a line to walk of what was going to be good and what was going to be extra cool.
Knowing that we'd be doing some of the DLC for this game, I kept a list of all the things I felt were holding us back, hoping that we'd be able to improve on an already solid foundation.
So In the Name of the Tsar was the first post-launch pack from the LA studio.
We had a bit more time to muck around than usual after shipping Battlefield 1, while the Stockholm studio did the first DLC.
I wanted to start building up new features for the DLC weapons.
And I'll explain why.
I did mention how much character the weapons of the era had, and that is true sometimes.
We've definitely added some guns with a lot of character since the Battlefield 1 launch with our three expansions, and I'll talk about these soon enough.
But we're not just a game set in the early 20th century, we're a World War I game.
And we had to include the standard infantry rifles, a lot of which we weren't able to ship on launch.
The Russians, the Italians, the Canadians, the Japanese, they all had very iconic rifles.
that were in this war and just couldn't fit in the main game.
So we knew the three packs would include these six bolt action rifles here.
But the standard rifles of the day were very, very standardized, a lot more than some of the weirder guns that I've shown and I will be showing.
Basically they all work like this.
With some small differences, it's how they still work today.
The American Springfield rifle that we had in the main game is so similar to the German Mauser that the Germans actually sued over it as a copyright thing.
So for the rest of this to make sense, I need to explain a little more about the original system and a little more technical stuff about guns.
But I promise this is not a gun talk.
A clip versus magazine.
So this is a systems talk, not a gun talk, but for it to make complete sense, we need to clarify the difference of a clip and a magazine, and there are some other lessons of development here for anybody.
A magazine is where the gun stores its bullets.
They can be external, like most modern guns, or internal, like many older guns.
Clips are for grouping bullets together for the purpose of loading into a usually internal magazine.
You'll hear me say the term stripper clip.
That is where you just strip it away afterwards.
That's how most of these rifles worked.
You might think this is pedantic, but let me tell you how many places in our database that dates back to Battlefield 3 references clips when it means magazines, and then we started making a game with clips.
Not to mention that our animation assets are also called clips.
So suddenly we have three different things that are all fighting with each other and we should have just named them right in the first place.
For our purposes, magazine reloads are linear, start to end animations, and generally pretty easy to make work.
And this is why this matters.
Clips are where things are going to get tricky.
Most of these bolt action rifles use clips.
The core of our reload system for single-shot weapons leading up to Battlefield 1 is a simple start-loop-end like we've been using since at least Battlefield 3 probably long before, something all the game animators here are surely familiar with.
You start, you loop the correct number of bullets to load, and then you end the animation.
It's really basic stuff for gameplay.
This is actually the first weapon I ever animated at DICE on Battlefield 3, and it sucks, and I'm really sorry about that.
The difference in Battlefield 1 is that we added the ability to add a number of bullets at once to represent stripper clips.
Oh, it's supposed to be playing back.
This is not my system.
This was the talented team in Stockholm.
Clips also loop so you can load multiple clips even if most weapons we had didn't.
A few of the main Battlefield 1 weapons work this way.
It's also important to note that this is a gross oversimplification of the concept.
It was actually really difficult to get this working and it's not an easy setup.
But it is important because it's the foundation of everything that we're going to go apeshit with from here on out.
I wanted to include this example from Battlefield 4.
It's one of my favorites and I probably talk about it too much.
I want you to see what a big magazine looks like without clips with the start loop end system.
It starts to get a little repetitive.
So yes I animated this.
It's 17 seconds to reload this entire gun and believe it or not the gun was very popular.
I like to argue with designers about this one.
So, already Battlefield 1's reload system is pretty solid and well ahead of some of our competitors, but it is also pretty rigid.
For example, once we commit to start loop end, that's it.
That's the logic of the gun regardless of how we're going to use it.
If we didn't make some changes to the existing system for these kind of guns, our new weapons were going to have to look a lot like the old ones.
Pretty much exactly.
So we made a bunch of changes, but lists are boring, so let's just cover these in examples.
You'll see this slide a lot, don't worry about reading it.
First, the easy stuff.
This is the Gasser Revolver from Main Game Battlefield 1, which I animated.
It uses the start loop end logic minus any kind of clip, regardless for the amount of bullets fired.
As you can see, it starts to get a little repetitive if you empty the whole thing.
We knew we were dealing with a similar problem to the bolt-action rifles.
There was only one way to animate it.
Switch hands, open the gate, loop the eject and load however many times, close the gate, and switch back.
We've already done this for three different guns on Battlefield 1, and we don't want to do it again.
So, when we decided to add another single-gate loaded revolver with the M1895 and In the Name of the Tsar, I saw a couple opportunities for improvement.
First, randomizing the individual loops to break the repetition.
This gun was animated by Colin Cromwell, one of our other animators.
This is what the M18985 reload would look like without any new tech.
One eject and one load looped up to seven times.
That's boring.
So here's what it looks like with some loops added for variety.
or to demonstrate with the format that I've been using so far, here's what's actually happening under the hood.
Loop variants aren't anything novel to game animators, but I'm not sure that I've seen them applied to reload animations before.
So already we're looking better than we did before, but it's still long and kind of repetitive.
A good option for variety that we'd wanted to do in Battlefield 1 but didn't have the tech for was swapping the entire revolver cylinder out, but that would be a change in the logic.
It's no longer start, loop, end, but a magazine swap.
So our engineer, Randy Stanton, who is responsible for most of this stuff on the code side, hooked us up so we can not only change the reload animations by bullet count, but we can even change the reloading logic itself.
So for zero rounds left, we've done a completely different animation that doesn't require starts and loops and ends, but plays just like a regular magazine reload.
Start to finish, notice even the ammo count is updating right about the correct time.
This was major code work.
I've emphasized our data-driven power, but this would not have happened without lots of engineering time.
This was also probably the most animator-enabling addition that we made to the system of those six on my list.
Our new weapon animations would be really boring without this more than anything.
So we took this same tech and applied it to one of our new light machine guns, the Parabellum MG1417.
The Parabellum MG 1417 feeds a cloth belt through as it fires, so I thought it'd be cool to have to reel all that belt back in when you reload.
There's a story that may or may not be true, that the phrase, the whole nine yards, originates in World War I from the lengths of these cloth belts.
Giving them the whole nine yards is meant to be unloading every last bullet.
Nine yards is actually closer to what they used in the airplanes, not in the infantry weapons.
In this case, I don't know if that story's true.
I want it to be.
In this case, we didn't change the reload logic by ammo types, but we did change the reload timers to match the five different reload animations for this gun.
The longer you fire, the more belt you have to reel back in until you use the whole thing.
If you empty it, then you would just rip the belt off on the left and load a new cylinder.
It winds up being actually faster.
This adds a fun design element to it, knowing the longer that you fire without reloading, the more you accumulate reload debt.
Most of the Parabellum animation set was done by James Fiorella, one of our animators.
Then I built the four manual reloads, starting with his empty.
Speaking of the cloth belt, that leverages another new piece of tech, animation phase control.
Now I'm here to talk about the cool stuff that LA did to Battlefield, but this feature actually comes from Stockholm, who did this in They Shall Not Pass.
I forgot about this when I was putting the slides together, but we did actually do something, even where a basic version of this in the main game for revolvers to procedurally clock the cylinder as we fire and as we reload.
This is more complicated.
So They Shall Not Pass was the first expansion that included a machine gun with a transparent or open magazine.
You would see the bullet count deplete and the magazine spring, the follower push the bullets in as it was fired.
Transparent magazines have been something of a white whale for us on our weapon team for a long time and the animators on this pack totally nailed it.
So the magazine is controlled by what's called the phase animation, mapping the length of the animation to the capacity of the magazine.
So basically this is a 20 frame animation on a magazine map to 20 rounds.
Each frame is one round fired.
Obviously in game we are hiding the bullets before they come out the top of the gun.
This is what I mean by phase animation.
The duration corresponds to a 0 to 1 float value that in the other cases I'll be showing here it corresponds to whatever the magazine size is.
Float 0 when it's empty and 1 when it's full.
With that, explain back to the Parabellum.
The cloth belt comes out the left side of the gun as a fake physics chain that's always on.
It's very basic and not even really worth explaining.
But using the phase control, we could tag it up to hide based on phase.
So the belt is always there.
We're just unhiding it the first 10 or so rounds.
We also do the same thing with the bullets on the right side of the gun that are feeding in when it's almost empty for the last five or so.
Phase control was also a crucial part of getting the different reload animations to play and how we told our engine which one to play when.
We could drive animation playback by bullet count essentially now.
Phase control is a perfect example of asset dumpster diving that I mentioned earlier.
Stockholm built this for one gun.
I made a system out of it and used it every chance I could.
This was a perfect fit for several of our weapons.
We added it to three of them in The Name of the Tsar alone and one in Battlefield 1 Apocalypse, the last DLC.
Almost all of our weapon systems change, almost all of these changes that I'm showing here happened during In the Name of the Tsar, but I'm gonna jump ahead to a weapon from the next expansion, Turning Tides, which didn't drive any of these new features, but it most clearly demonstrates the need for, the justification for these.
So, Alt Deploy is one of the ones we used here.
Let me explain what that is.
Without skipping the slide.
My laptop's very old.
This should be playing.
It's not, I'll just explain it.
So deploy is when you first bring out the gun, and alt deploy is when you switch to, this is like an underbarrel shotgun from Battlefield 4.
So when you switch to a secondary weapon underneath the primary, it's basically a change in logic to a piggyback weapon, essentially.
We've had this since Battlefield 3, Battlefield 4.
Try to play it one more time.
There we go.
So the first one is the deploy, the second one is the alt deploy.
We did use this system for rifle grenades in Battlefield 1.
And it's a good system, but it takes a lot more animation work, both in first and third person.
And I'll explain why this matters momentarily.
So on the Carcano, which was also animated by James, it's different than most of our sniper rifles because it uses an end block magazine.
An N-block is most famous from the M1 Garand.
It's a kind of clip that sits inside the gun's internal magazine and then is ejected at some point.
So for the M1, the M-block is famously ejected with a loud ping when the last round is fired.
We also have a couple of main game rifles that use N-blocks, but we didn't have these systems yet, so they aren't completely mechanically accurate.
And sorry Twitter, but we're not going back and changing them.
On the Carcano, the end block falls out the bottom when the last round is chambered.
It's basically the bullets are holding it in place and as soon as the last one is stripped away the magazine, or the end block, falls out.
Usually.
We were able to do that by adding a one-off bolt action animation that plays on the second to the last round fired.
We don't see it very well in first person, but it's there and you can hear it.
This clears the way for a faster reload with one or two rounds left.
Thanks to the different logic by ammo count, we can also have the correct slower reload animation that removes the old block, the old end block first, and yes, removing the end block contains the correct amount of bullets that you have remaining.
I made a whole video of this that I put on my YouTube channel showing the differences of the bullets out and bullets in, especially when it gets low on ammo.
That video apparently got recorded at like 240p, so thanks to BattlefieldStreamerBloodhoundHD for these videos, because mine looked like shit.
So, there is a problem here.
Battlefield 1 added a sniper gadget called K-Bullets.
They're basically armor-piercing bullets that need to always be an option for the scout class, which means all bolt-action rifles have to have this.
K-Bullets is a different system than ALT-Deploy, which cleverly repurposes bolt-action and reload animations to make a different system altogether, but it's pretty restrictive.
It needs a...
It restricts the way that reloads can work.
So it needs a bolt action animation, which is easy enough, but it also uses the same start clip loop and reload animations to load and reload a single new KBullet.
There wasn't really a way to give this swap its own animation under the KBullet system.
There's more limitation for bolt actions that would mean animating them all the same way because it's always going to repurpose another part of the animation.
As you can probably guess, the existing K-bullets setup isn't going to work for the Carcano because you just saw the two reloads and none of them load one single bullet.
So with a bit of code changes that enabled this option for animators and designers, we could use the Alt-Deploy system for K-bullets on the Carcano or anywhere else that we wanted.
It just meant that we had to do a bit more animation for switching to and from the K-bullets, including removing and replacing the end block.
It also needed its own reload animation to eject a single shell casing and load a new single cartridge.
This isn't something we wanted to do for every gun, it's a lot of work.
It's just for special cases that wouldn't work with the old system.
But that leads me to the gun that initially drove a lot of these changes.
The Mosin-Nagant rifle.
This is back in the name of the Tsar.
The Mosin Nagant is a gun that our fans probably knew better than most of what was in Battlefield 1.
They made so many of these and they're very inexpensive.
It's not uncommon to talk to people who have fired these or fired one yourself.
It was one of the most used weapons in World War 1 and I wanted the first new sniper rifle to come out of DICE LA to be something special.
It'd be very different from the guns that came before it.
Now a lot of our reload system involves ejecting perfectly good bullets that get magically re-added to your ammo pool and I'm okay with some suspension of disbelief, but for the standard Russian infantry rifle, wasting bullets seemed to be not okay.
So I set up an arbitrary rule that you would never see a loaded cartridge eject from the Mosin-Nagant that the player didn't catch.
Obviously this made life more difficult, but great things aren't born from easy lives.
I believe creativity thrives within constraints, so sometimes I make up constraints, and hopefully some of this comes through.
This is the reload animation for the Mosin-Nagant when you have one bullet left, you'll see that he, or in this case, she, catches it.
Unlike previous rifles, our new ability to change reload logic, reload by logic, allowed us to eject the last round of the rifle.
and just load a new clip of five instead of looping through four single bullet load animations which is not only faster but makes more sense. Already this is an improvement over the way the game shipped. In this case it is a little slower than it could be because she has to catch, in the case of our Russian Scout, the first female character in one of the Battlefield multiplayer games, she's going to waste a perfectly good bullet so she's going to catch that and has to grab it before loading the new clip.
As you can probably guess from the clip, from the text on this, this is a straight through animation playing a magazine type reload instead of anything around our start loop end system.
The reload from empty is pretty much the same except it's a little bit faster because now you're just ejecting the spent casing before loading a new clip.
Once again, straight through.
But then it gets interesting.
So this is the reload system for having fired just one shot, and it does use our start loop end system, because here it makes more sense.
So now we're all set up for reloading one bullet up to five bullets, if I wasn't a masochist.
So this would be a good opportunity to throw in loop variations, but it's only one to three rounds.
And of course we only see one round in our hand at a time, because the animation has to loop.
But wouldn't it be cool to see the rounds in our hands?
So we haven't fully taken advantage of the clip system yet.
I'm just using the single bullet part of it.
The clip system was intended to load a group of bullets at the same time, but no one said it had to actually be a clip.
So this is the three round reload for the Mosin Nagant.
We get to see more than one bullet in hand at a time, and the animation's fast enough that it's not too weird for them to register in the magazine at the same time.
We see the looping group animation only once, which is the two bullets going in, followed by the single bullet loop only once, and now we have a loaded rifle.
So as you can maybe guess, that the two round reload animation looks like this.
Only playing the group and not the single.
Now I can't show you our ant interface, but I can show you this expert recreation, which explains how I set it up.
Effectively, we give the player five reload animations, one for every possible ammo count of the gun, for the price of just three.
It's all set up to loop, and if we wanted to use this for the four or five round reload, it would plug right in.
This also makes audio's life a little bit easier, which they deserve after all the time that I spent making it harder.
Now while I'm definitely trying to glamorize this and advocate smart workflows, it's worth mentioning that this is still two guns worth of reload animations.
So that covers that.
Let's touch briefly on how the M91 also required the use of the alt-deploy changes.
Remember K-bullets, and remember my rule about not wasting bullets.
So this would have worked with the stripper clip reload that we had for the one through three rounds.
but we couldn't waste bullets.
So the Mosin-Nagant had to get the alt-deploy treatment with one-off changeover animations between regular bullets and armor-piercing K-bullets without dropping them.
At the time that we implemented these, the K-bullet system wasn't quite ready for it, and we did have some issues, so these animations had to be really fast to minimize the problems.
Overall, this gun was a huge time sink.
Sorry.
and in comparison to any of the bolt actions in the main game but I thought of it as a flagship weapon, not only an iconic weapon of the war but one that demanded new features that both liberated us creatively and would speed things up for future weapons there was a lot of pain up front both for me and Randy, our engineer, but it paid off in spades with the other new weapons that followed With all this in our toolbox, the second half of the Tsar weapons that we added and beyond could start following the paths paved by the first lot.
I didn't mention this earlier, but at some point in production, our weapon list for In the Name of the Tsar went from six to eleven new guns, and we probably wouldn't have gone so nuts with the new systems if we'd known that at the time.
But the new tools from the first six guns made all the following much easier while still allowing us to preserve some of the unique character.
I just hit the Windows button.
That's nice.
Thank you.
Okay, well, mostly it allowed us to do that.
So this is the Perino M1908 machine gun.
It's another one of those weapons of the era with a great story.
They were still trying to figure out what worked best as far as military small arms go.
This had a water-cooled barrel and a unique 120-round hopper of bullets.
There was 20 rounds in a tray, stacked six high.
It had a major advantage over belt-fed machine guns of the day, and it could be continuously fired, effectively forever, by a single machine gunner as long as the water and the bullets were continually topped off.
I believe in testing, this was fired for seven days straight.
The Italian government decided this thing was so good, they deemed it top secret so it couldn't be copied.
But then World War broke out.
They didn't have time to test and perfect the design because of its secret nature and so when the war broke out, they couldn't get into production fast enough and it lost out to another, arguably inferior machine gun.
Timing matters, folks, even when you have the superior product.
There's nothing stupid about this gun, I was just being cheeky because for our game and the accuracy which I think our fans expect of us, this thing presents a lot of problems.
So our story of the Perino is nearly as tragic.
The higher ups really wanted a different gun, but I was really sure I couldn't make that gun look good on our base animation sets, the underlying third person movements.
And this is considering that we have dudes running around with 100 pound machine guns.
One of our animators did a bunch of test poses with that gun.
It just didn't work.
It didn't look right.
So our designer had a compromise in mind with this gun.
When I saw the Perino, I saw that it had a way to hold it that would work with our animation set.
And I was just kind of tired of fighting about it.
So I was like, okay, yeah, fine.
We can make that work.
And I probably should have looked closer before I agreed to this.
So as you can probably guess from the previous slide, we're using phase control again, but it wasn't, even now, it wasn't straightforward.
The Perino holds 120 rounds in six trays of 20.
Every 20 rounds, one of those trays is ejected.
If we're using a phase animation, we can't interrupt it every 20 frames to play a regular animation.
Even if it was additive, you'd see all the bullets pause and wait for the eject before resuming.
So I split one phase into two, the individual clip and the overall magazine.
The best way to demonstrate what this really means is to isolate the two by deleting the geometry of the other.
This is the Perino with the clip geometry deleted so you can see the effect of just the phase animation.
This is the easy part, 120 frames corresponding to 120 rounds regardless of anything else.
No big deal.
This is the trickier part.
The clip without the rest of the magazine notice the ammo counter here. This is not one gif looping This is or one video looping. This is this is actually looping six times Playing six times before it loops This is also why you can sometimes see a little visibility hitch with this gun. I can't overlap the clip with myself with itself I Hided it as soon as it's off screen and fly it back over, but I can't do that faster than the machine gun can fire This little bit could have been fixed with more complexity and more polygons, but I haven't even gotten into the cup game of the reloads and our weapon modelers were already about to kill me over this thing.
So this slide is fun because it makes the artists cringe at my Photoshop and the engineers cringe at my math.
But in terms of layers, it looks like one big phase animation and it drives the entire 120 rounds.
Another layer under it is driving the sub-phase value.
The phase is multiplied by 6 and then normalized so it hits 1 every 20 rounds instead of every 120 rounds.
When the sub-phase hits 1, it triggers the clip eject animation.
The last frame of the clip eject animation is off screen and hidden, so if you stop firing at an even number like 180, 60, it will stay hidden.
The clip is invisible until you start firing again.
As soon as you fire, it starts counting again and everything's fine.
Now my head hurts thinking about this gun, but I haven't even gotten into the reload of this yet.
How do you reload a 120 round weapon that's a hybrid of a coffee grinder and a typewriter?
You use the separation of reload logic by ammo count.
Sort of.
So, we'll start with the easy one.
We need to reload to respond to user input for the first 19 rounds, but there's no room in the magazine.
So, we set up a straight-ahead animation for reloading 100 to 119 rounds, where you would pull a clip out that's being fed through.
That makes room for one more.
During the actual pull-out animation, we don't actually reset the sub-phase, but we turn off the additive layer entirely.
It's not perfect because the clip animation is additive to the rest of the gun, but we need to disable it exactly then so we never see it slide out on its own.
We ensure the right hand keeps a grip on it.
Basically, it gets turned off right here.
Once you fire 21 rounds, shit gets real.
The whole point of the Perino is to be able to top it up as you fire.
That ability, which would...
That's what the gun was actually meant for, but it only works when deployed on a tripod because it requires two hands.
That was unfortunately beyond the scope of what we could do.
What we could do though is stack new clips on top of the current magazine once there was room for at least one.
So to make that work as efficiently as possible, as efficiently as the gun is meant to, We, meaning Randy, added a parameter to only allow us to load clips and no single bullets.
So what that means is that if you hit reload with 90 rounds left in the magazine, you will do a quick one clip in reload.
But now you've only got 110 of your full 120 rounds, but you reload much faster.
If you want the whole 120 rounds, you can just hit reload again and you'll play the last animation.
But really, what we've done is create an optimal strategy for the Perino that matches its real-life design.
When you fired...
The optimal way to reload this gun is when you fired 20 rounds, over 20 rounds, but less than 40.
So this is systemically a start-group-end animation, but that's...
And that's what the game engine thinks is happening here, but that's not really the whole story.
We see the whole story when we reload the gun from 20 rounds, less than 20 rounds.
Because you can't loop the accumulation of bullets, I had to create a sequential or straight ahead animation and disguise it as a loop.
So even though this is one reload animation, it's broken down in time kind of like loop variants except in order.
Each clip is equal length and the more clips we load, the earlier in the animation we start playing it.
Because we're faking the loop to the engine, you can see the ammo count is updating correctly.
So with another bad Photoshop mockup, we see what the animation assets actually look like.
This is just two different animation clips.
Each gold arrow is a start point.
We start at the same entry animation all the time, and then we just enter based on how many rounds that you need to reload.
The deeper into the magazine you get, the earlier in the reload animation that you start playing it.
Since each segment of 20 is evenly timed and we set it up with our existing clip logic, the game sees a straight-ahead animation like this.
We're playing a straight-ahead animation like this.
The game is seeing the loops.
What's especially cool about this is by faking looping group animations, we're actually loading 20 rounds with each clip drop, making this animation interruptible without losing all your progress, which is especially important for long, light machine gun reloads.
So we see this reload animation play straight through the magazine top up in the ammo count update as appropriate.
This is the reload from 60 to 80 round reload, or should I say, part of the reload, just to make it totally clear what's happening.
When you empty the magazine entirely, we use a different reload start animation for that last clip, the last clip that ejects out.
The new reload start animation gets it back to one clip loaded and racked in the chamber and then we can use the same long reload animation as before for the next five clips.
We get tricky again this time by hiding the first loop in the longer start animation.
The first loop is actually after, in the engine the first loop is actually playing after the first clip is loaded and happens during the charging of the bolt.
That allows us to load the first clip and rack the bolt in the start animation with the same time as a single clip loop.
Since I assume there's a lot of animators here, you're probably feeling pretty smart about noticing that one of these fake loops has a really shitty elbow animation.
And you're totally right.
I'd like to say I put it in there to make sure that you know it's not actually looping, but I didn't.
It just slipped through.
Were this any other game, I'd just say, that sucks, but I've got the animation database right there when I'm putting these slides together, so I fixed it.
You can't find this in-game anymore, but I wasn't going to re-render my videos, so sorry.
This is the joy and the agony of live service games.
Anyway.
This is the straight through, here we go, six clip reload as demonstrated in Maya with very bad playback.
All kinds of weird stuff happening here.
We hide in the engine, so that's why you're seeing the clips fly all around.
So, similar to the Mosin-Nagant, we have the engine and the player seeing multiple reload animations for different conditions.
In this case, seven different reloads, six ammo counts, and one out of ammo state.
But really, we have one quick reload for the first 20, and one straight through 100-round reload with five different start points, and then we have two different start reload animations.
Now that explains the animations, but it still doesn't solve for the re-accumulation of bullets.
Obviously there's got to be some fakery here.
Basically we're keeping the phase set until the first new clip is dropped in, the moment of impact.
After that, the animation is dictating how full the hopper magazine is.
Because the phase is driven by in-engine ammo count, we need to turn off the phase layer and drive it with animation to make sure we keep total control of it until we're done.
Otherwise it's going to start updating whenever you see the ammo counter update.
Once the gun has registered the updated ammo count, it's safe to turn the phase, the additive phase animation back on.
I'm sure there are elements I'm not explaining well enough here, so let me just show you the whole thing, what it looks like with the box deleted, the ammo box, so you can see all the great details.
You can see the polygon savings that we were doing there.
This bounced back and forth quite a few times.
Keep in mind that the box is shaped like a V, so those middle rows that have the outer pieces hidden, that was just smart modeling.
Let's move into the second, shorter part of the talk, horses.
One of the most interesting things about World War I is the clash between the past and the present, future.
One of the most iconic symbols of that is the presence of mounted cavalry in the battlefield.
Stockholm has some incredibly smart and talented animators and engineers, and they got this working and looking fantastic.
How they did that is beyond the scope of this talk and not really my story to tell, but I'll be getting into a little bit of it for the purposes of explaining our changes.
So the main game horse is great, but it's built for just two weapons, a lever action rifle and a cavalry saber.
I wasn't part of this process for making the horse, and I can't really talk about why it's just two weapons, why it's just those two, except that making others work and look good in our third-person camera would have been a whole lot more work on an already complicated system.
And besides, this is essentially a vehicle in the game.
More weapons would be cool, but it certainly wasn't necessary at launch.
But the reason that I'm going to talk about horses is because of an all-new cavalry class that we decided to add in In the Name of the Tsar.
the Russian Hussar, and with that, a complete new type of weapon, the Lance.
I have shown some of this work in my talk at Consul last year, so I'm going to focus on the part of the actual under-the-hood details.
For a system that had to be built around two weapons switching between each other, this was going to require a serious bit of work, even with the least ambitious of designs.
First I'm going to identify the trouble spots and then present the solutions.
A saber and a lance are both things that you hold in one hand, and sometimes for people outside of animation, that seems like that's good enough.
The thing that non-animators tend to miss is that it doesn't really mean much.
There are a lot of things that you can hold in one hand and not really share the animations.
For the sake of efficiency, we had to share as much as we could.
We dug around and we found four main areas that we needed to address.
running a marathon here. Horse locomotion, this was easy. Don't touch it. I didn't touch it anyway. Randy, our engineer, did a bunch of physics and code improvements, but they're all outside of the scope of this talk as well. This is a new weapon, not a new horse, and that requires advocating to the rest of the team that that is going to be the truth of the situation.
The old horse is the framework that we needed to work within, which in itself is one of the challenges of post-launch content.
There's always the temptation to redesign something that's already in and kind of working.
So there are four different gates, or there are different gates for a horse, thanks to the analog input, and there's also a fifth sprint or all-out gallop that is binary, at least as far as the player input is concerned.
There's a big range of speed between the canter, the fast walk, and the gallop, the sprint, but the player couldn't deliberately stay there.
It was just accelerating and decelerating at those speeds.
This will be important later.
Rider locomotion.
This is going to be trickier, because when you think of somebody riding a horse with a lance, you think of this, or this, but probably both.
So the Saber, on the other hand, could get away with some variation of this pose.
From standing to galloping, so a simple speed-dependent blend space was totally fine.
This isn't a video, it's just an image.
When the whole system is blend-driven, this is going to look really bad for lance poses.
It's going to go up and down like a speedometer as you transition in and out of the gallop.
We could leave the lance always down, but that'd be lame.
The third point was attacks. As anyone who's played Dungeons and Dragons can tell you, a slashing weapon and a piercing weapon are very different and you're not going to be able to share that much. The saber has different attacks, it's speed, and they're not dramatically different. The lance is not only pointy, but it has two different base poses, so it's going to need some different attacks.
And lastly, it only makes sense that if you have a lance, you need to be able to charge and impale someone with it.
We already had bayonet charges and synchronized melee attacks, but the horse is, under the hood, more of a vehicle than a character, so that actually doesn't help us very much at all.
So let's go back through that list and cover the solutions.
Horse locomotion?
Don't mess with it.
Rider locomotion?
Well, we had to mess with that.
We needed two stances, the lance upright from standing to canter, and then a lance down at full gallop.
That lets us base the rider locomotion sets on the saber instead of capturing a whole new set.
We did a mocap shoot for the Hussar, but it was mainly focused on the attacks.
The sword locomotion sets would be fine, as long as we modified the poses.
The second part was to add an override layer on top of everything else that the cavalry character is running.
It's a layer that's going to usually be off and dormant, but can kick on to play a bespoke transition animation that's long enough to completely cover the ugly blend of the lance up...
Oops, sorry.
Sorry, microphone.
Uh, the lance up to the lance down.
with branch out windows that allow it to be interrupted as needed.
This is not an additive layer. Additives were too unpredictable.
Here I'm not trying to plus something, I'm trying to hide it.
This was mostly upper body animation, with partial hip influence that blends out sooner.
Third aspect was the attacks. Based on the solution to the second problem, we could start the attacks based on your current stance, upright or lowered lance.
I'm sorry for the image quality on these, I wasn't able to get higher quality ones.
Standing through canter would swing the spear around, which we learned was actually a valid technique, thank you Polish ceremonial cavalry.
This lets us use existing framework for the saber attacks basic combo animations.
Galloping on the other hand would give a quick stab of the lance.
The lance override layer is disabled during all attacks so we don't see the lower or raise animation and the attack will blend out at the end of whichever stance is running underneath it.
So a change in speed beneath won't affect these.
The animations will finish and do whatever the correct underlying pose is.
The Impale was the newest and craziest thing.
Charging is triggered like our bayonet charge by hitting the melee attack while already at speed.
We're using the same input for consistency, but this is a very different system under the hood.
The horse is, again, a vehicle.
I would and often did argue that it's a dubious gameplay value because you could already run people over with your horse and it definitely, well, this definitely looks cooler and more badass for the trailers and the YouTube videos.
This is not trailer fakery.
This is several weeks of mine, Randy, and Colin's life that we're never going to get back.
But I have to admit it turned out pretty awesome, and including a lance really does beg for this feature.
To enter this whole new charge state of the horse, we go back to that same override layer with a charge entry animation, but this time we're gonna stay in the override layer, and we'll stay in this state as long as you're charging.
The rest of the charge states, including the transitions in and out, as well as the contact success condition of charging, also happens here.
Aiming the lance proved to be a fun challenge.
Aiming was really important because we knew we had to interpolate the lance and the victim upon a successful attack.
The better our lance anticipates that contact, the less we have to move the victim.
We added a new camera state for the charge, which is our weapon designer Chad doing some of his magic.
Again, apologies for the video quality here.
Aiming the lance for a long time was an additive upper body blend within the override layer, which is not an override layer.
So there was so much going on in the different states and the different layers that we were seeing some glitches during the state transitions there.
At the 11th hour, Andy Kanischke, one of our animators on another project using a newer code base, found a way to aim the bones themselves in engine, an in-engine look at constraint of sorts.
Steve Chow, one of our animation engineers, integrated this change into our older code base and they saved our asses from what had been a not great looking aim system.
Now lance aiming can be completely procedural, aiming both the lance and camera towards any valid target for impaling.
This is deprecating influence down from the spear at one, down the arm, the spine.
Now it can be totally procedural.
So when no one was in range, it's just staying in the neutral aim as dictated by the animation.
And now let's talk about the poor bastard on the receiving end.
As far as the defender goes, this is our regular melee system, but only for the defender.
From a spectator view, without the defender playing animation, this is what's happening on the engine side.
The horse is scooping up the victim.
The player on the receiving end is getting attached to the end of the lance collision, minus a little bit because they've just been impaled.
Then it plays a melee defender, except now the player collision and animation is in, for lack of a better term, horse space.
The exact distance of what constitutes a success or failure here was an exposed value that took a lot of tuning to look and feel good for the attacker and not feel completely cheap for the defender.
The end result for a defending player looks something like this.
Of course any game dev knows that the road to success is far from straightforward.
I don't know if this one's going to play.
I should have trimmed that one.
Don't you hate it when people give GDC talks and make it look easy?
It wasn't.
So that was a lot of information, and hopefully the images and videos made it digestible.
To recap and wrap this up, we've covered how we added a full new weapons system on top of an established one, building on a foundation to create something that is new and cool, but not reinvent the wheel completely.
We've also covered how we took a system and made it even more capable and we've done justice to hopefully a whole lot of the fascinating real life weapons that have never been seen before in a video game and may never be seen in one again.
So that was a bunch of technical gameplay animation stuff and hopefully nobody's feeling like I deceived them into an animation talk just because my job title is in the word.
This is gameplay animation.
I know I've pretty much just talked about guns and horses here but I don't think that should be the only takeaway.
I'd like to think these specific examples make a broader argument.
Removing obstacles from your content creators is removing the excuse they have not to go nuts with their creativity and their attention to detail.
As much as I'd like to claim that this is all because of my incredible attention to detail or my technical savvy, a lot of this is possible because I either already had the tools or almost had the tools to do what I needed without convincing anyone else of my vision.
This was going to say pick your battles, but we've already heard that to the point of meaninglessness.
I prefer think forward.
Are you going to look back and see that all the effort was worth it?
I wasn't asking for code support to fix this gun or that.
I was asking for systems that I could use in the future.
These were specific guns that drove the features and paved the way, but every feature I asked for and got had at least two potential use cases.
I didn't cover them all here.
And that means that there could potentially be more in the future, and there often were.
Honestly, I'd love to spend the next year just making perfectly accurate recreations of impossibly complicated weapons because I'm pretty confident with the tools that we've built that my team could handle it.
It's also possible because I had a lot of freedom and a lot of the experience in the tool set.
I showed you the first animation I ever did for a Battlefield game and it sucks.
Since then I've shipped four of these things and as of May I'll have been working on the Battlefield franchise through the gun experience for seven years.
And the things that I can do with the tools at my disposal now are not only a credit to our tools people, but also a credit to DICE for being the kind of place that I wanted to keep working at.
So through these examples, I've demonstrated not only the value of data-driven systems, but also that you can keep building the game, springboarding off of what's already in there in new and interesting ways.
Adds value for the players, it breaks the monotony of long-tail games, and it's a lot more satisfying as a developer to still be creative with what you add.
We are hiring, of course, the obligatory plug, dice.se slash jobs.
We have a whole bunch of positions in Stockholm and Los Angeles.
Again, my name is Ryan Duffin.
I'm an animation lead at Dice LA, and this has been my talk.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
I guess we have five minutes for Q&A.
If you have a question, please come up to one of the microphones.
Oh, and sorry, before, and, that's, microphone's here.
And also, please remember to fill out your surveys.
I know this was also a very competitive time slot, so hopefully you all liked it.
Sorry, thank you for the talk.
I was just curious, with all those weapons you keep constantly adding to the game, do you guys, or each weapon have separate anim sets, or do you have any sharing animation to kind of save room, I guess, in the game?
There are a lot of the, What you're seeing here in first person, most of that is bespoke animations, but there's a lot that gets shared by weapon type.
I actually had a whole bit in my talk that broke down our system for that, but it was an hour and a half, so I had to cut it all out.
But basically, like all of the...
most of the weapons are using like the same sprint animation additively and things like that. We don't do locomotion per weapon, we don't do interaction per weapon, melees are all, it's a different deploy altogether. So first person is mostly bespoke, deploy and reload and all that stuff. Third person, most of our, like a normal third person weapon is seven animations. It's not even seven animations, it's three reload animations and four additive poses. So yeah, we share like crazy.
We share where no one will notice, I should say. Or where it doesn't matter.
Do you ever use motion capture for the hand animations, or is it just pure skill to do it?
I'm sorry?
Do you ever use motion capture to do the hand animations?
No, no, we've never... Motion capture we use for, um, for the melee attacks. Basically the complex interactions are done with two actors in mocap.
But for the weapon stuff, we talked about this a little bit on Twitch yesterday, but...
What I've found is that even if you get, we've had access to Navy SEALs in the suit, but it doesn't necessarily look right from the first person perspective.
We can put an actor in there, and they don't necessarily know how to use the gun.
So it winds up, there are probably some ways that we could start with motion capture and clean it up, but it's just more efficient, and it gets us the results that we want better by using, by just key framing everything.
Anyone else?
All right, cool.
