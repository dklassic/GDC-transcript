Thank you, everyone.
So as he said, my name's Evan Losey.
I'm currently a lead game designer at Scopely.
And this is It's About Time, system design for a mobile free-to-play.
As a bit of additional background about me, as he said, I've been working in system design for years.
But when I first started in mobile, I was designing features and content for TapZoo.
So TapZoo was a city builder game where you build, well, a zoo.
And after a while, we needed to keep expanding the economy and tuning of the game.
So we needed someone to branch out into system design.
My first foray into systems design was actually more of a player than as a designer.
I had been building models for my death knight in World of Warcraft, trying to figure out the optimal rotations and stats and all that, which is about as good of a primer as I was able to get.
See, that's when I realized there are a lot of resources on content and features for designers out there.
There was not a whole lot on getting started with systems.
So through a lot of research and iteration and trial and error, I've got a much better handle on it now.
Still, I remember that experience quite well.
So what I want to do is provide a solid framework for designers that are just starting out to jumpstart the process of making economies and game tuning, as well as hopefully provide a new angle for some of the more advanced designers in the audience.
So today, I'm going to start with a brief overview of what system design really means in this space and the context and how to go about balancing these systems.
After that, we'll talk about how to apply this both on economies as well as tuned features.
I'll be using battle systems as an example for those features, but battle can be a pretty abstract concept as you'll see in a bit.
So what is systems design?
Systems design is essentially how all the rules in the game interact.
Every number in the game should be chosen for a reason, even if that reason is aesthetic or arbitrary.
And the way these numbers interact is where the player experience really lives.
It's not enough to have a laundry list of features in the game.
Your entire game can live or die on seemingly tiny decisions.
Enemies that take one more hit or needing to grind a dungeon one more time, that can be the moment when players quit your game and don't come back.
The opposite is also true.
If you make things just a little bit too easy, players get bored and leave before the next big moment happens.
You want players in that perfect position of balance, where they're winning by the skin of their teeth and they're always just about to progress a little bit further.
The question then is, where do you start?
How do you put that first number in the game?
Well, free-to-play games can seem like a whole lot of arbitrary numbers, and sometimes they are.
And that's the first secret.
It's actually perfectly OK.
Every system starts somewhere and you can't tune to something that doesn't exist.
So we're going to pick the most important and visible numbers to players and try to make them look and feel good.
Put yourself in the mind of a player in your game and ask yourself how something feels.
You upgrade your sword and you get a plus .025 attack, which rounds down to zero in your UI.
That's not the best experience.
So, some things are a little bit harder than that, though.
A lot of design questions come from even those arbitrary decisions.
Take scale.
How valuable should the max level of something in your game be compared to the first level?
If this is a competitive game, all the hard work might put you at a total of 150% of what the first level is.
But in an RPG, where you expect to easily beat anyone five levels under you, you might get to a thousand X for your final power from where something begins.
There are no hard and fast answers.
It depends on the game you're making.
Either way, big, even, or round numbers are kind of easiest for players to understand and conceptualize, so we're gonna stick with them wherever we can.
So how might a model working this way look when it's complete?
Don't try to copy this down, by the way.
This is an example of a town hall in a city builder.
It has costs at each level and capacity, and each level unlocks subsequent levels of production buildings that have their own costs and resource rates.
If you look at the finished product, you can reverse engineer some things, but the truth is, systems like this are balanced around a number that doesn't even appear anywhere on this sheet.
time. You can take something like a steadily increasing resource production rate, which is the rightmost column, and you can derive all of the other costs and capacities from there and how long it takes.
We have other things on here too.
Upgrade time is actually unrelated to the other numbers.
This might still be tied to aspects of your game, such as how long you want it to take to upgrade your entire base from one level to the next, but it's an unconnected loop from your production and your building costs.
Each sub-loop in your game may need its own starting system of time and values.
So, where do you start?
The one resource that all players possess, time.
minutes spent, rounds of battles, days to acquire.
Even things like number of battles and drop rates all come back to time.
This can be energy limits, when loot is reset, or even the physical time that it takes to clear a stage in a game.
So we have to make sure we respect that resource.
Balance your game around time.
Just like difficulty, pacing is key.
It will take playtesting to get this right.
So remember, in all of these tools we're talking about, they're just the first step, and iteration is very important.
So since this is free to play, we need to talk about monetization somewhere, right?
Well, the best monetization methods essentially sell time.
You get a pack of cards every day from daily quests and you can purchase more of them to have it happen more frequently.
I always advocate for not locking things to only spenders.
You can actually be incredibly straightforward with players of your games with how much value they're getting for a dollar.
You get this every day, you can buy it, and you're buying a day's worth of work.
People really will respond to just explicitly communicating these things to them.
So, that's the high-level approach.
Let's get into some of the specifics.
First, we need our starting point.
I've tried different ones from time to time, but I keep coming back to player level.
Level is extremely familiar and effective as a marker for where players are in a game.
They'll tell each other, oh, I'm level eight, you're level 12, they sort of know how that relates.
We'll need a few more number scales for each loop in the game, but this is a great one to start with every time.
It also advances one at a time, which makes for a prettier x-axis.
Next, think about a time scale for this.
This is dependent on the kind of game you're making and some other factors, but in general, think how long should each piece of your game last?
An RPG might take a year to get to max level, and you might stay there for another couple years engaged in endgame activities.
An arcade game or an incremental with a prestige might take only a day or two to get to the final level.
it's okay to make some of these decisions based on what it feels like or other arbitrary things.
Everything starts somewhere.
So let's start with this first one.
And for those curious, I will have a link to all the spreadsheets I'm showing at the end.
So again, don't try to write down.
So this is a table of player level, 1 to 10, and about how long I want it to take to reach each level.
The convention I'm using here is that I enter things in the white cells and calculate over in the gray.
But this is probably a pretty straightforward one.
It's addition.
So where do we go to after this?
We want to actually divvy up the progression by player level.
I, as a designer, decide how strong you should be at each point of the game.
It's worth noting that this is only an average, right?
Players experience the highs and lows of drop chances and luck, but it's perfectly fine to do your high level balance purely on expected value.
What is the average of what players learn as they go through these things?
Still, the more specific you can make each level of power in your decisions, the easier it's going to be later.
The key principle here is that there was a cost associated with acquiring content.
It could be the currency needed to buy packs or the resources needed to upgrade your town hall.
Then, how do players get these resources?
They take actions within the game.
For the card game with packs, this might be games one.
For a city builder, it's mines harvested every day.
For our purposes, what we need to know is just how many of each action is the player going to do in a day.
Our starting point will be any actual limitations, such as an energy mechanic that tells the number of sessions you can actually engage in.
but there might also be behavioral things, just how often do players actually come in and play around.
You'll have to estimate those, but as you get real data from play tests, you can refine those, put them back into the model, and keep going, and you'll get better and better numbers.
So now that we have this idea, let's go back to our model.
Here, I'm building out the example to cover a simple city builder.
So I'm specifying how many buildings I want the player to own.
I'm also assuming that each one can be leveled only as high as the player level.
This is a pretty normal limitation to town halls and games like this.
My upgrade costs are actually formulaic, but again, arbitrary.
Each one is just 250% the previous rounded to the nearest five.
And I'd probably keep rounding by bigger and bigger numbers just because I want it to look pretty in the game.
But this is where your calculations really start.
I know how much I want the buildings to cost at each level and how many I want the player to have.
and I know how long it's gonna take me to get there.
That means the cost per level is just number of buildings times the cost of each one.
That's how much it's gonna cost the player to get to the level of power I want at that player level.
And if each building was costing a different amount, you could have a different look up in there, but sort of keeping things simple for the explanation on the screen.
But still, we're not quite done yet.
Although, here's the biggest secret of system design.
That's actually all you need.
You can build a complete economy just off of figuring out how much time and where you want players and some of those arbitrary costs.
Try not to let any of your product managers know it's actually that easy.
But once you know how much you need per level and the number of days, you know how much players need to gain every day.
When you know actions per day, you know how much each action should pay out.
You can give your rewards a drop rate.
If you want them to have a chance of dropping instead of always being awarded every action, this gives you a true payout per action.
You may not want to use this with a currency like coins, but if you're doing, say, rare materials to upgrade a character, this is how you get to how much should actually drop from a single instance.
Finally, add some variance, say 5 or 10% up or down, so the game is a little more exciting.
And suddenly, you actually have a game.
You know, that's how the experience actually plays out to players.
So let's go back and see how this looks in the expanded model.
The one new column is the result of those calculations.
It's the amount we need per level divided by total harvests per building per day and the total number of buildings.
This is the simpler version with no variance at all in drop amounts.
But still, a player who plays four sessions a day, which is a pretty good player for most mobile games, is going to earn enough to get to the level that I want them at each day.
This is maybe a simple example, but you can actually follow the same process for more resources and build more and more complex loops on top of this.
The trick is to keep coming back to how long it should take a player to progress.
If a player needs resource X from action A and resource Y from action B, you can track the amounts of each one needed and be done per day.
And if you want both actions to drop the same resource, you can have variables that control how much total one comes from each point.
The math is really gonna work itself out either way, and you can sort of customize what feels important to players.
So when developing those more complex systems, there's a lot of considerations to keep in mind, and here's just a few of them.
How fast can you make content?
If it takes a month to make a character for your game, you can't have players earn them every week or they'll outpace you.
It should always take longer to earn or earn an upgrade to viability than it does to create it.
Players shouldn't actually be able to get everything in your game.
Choice is fun.
Next, how fast can players respond to events and live operations and things like that in your game?
If you expect to add a new character on Monday and have people use it on Friday, it can't take three weeks to upgrade it to viability.
Likewise, if you want to have a resource that only drops from dungeons that appear on Tuesday, you need it to take at least a week to maximize the character or players are going to feel a shortage in a way that they can't address.
You always want to be asking yourself, does this make sense?
Gut check your work.
You know, you hit level 10 after a week, you have a dozen buildings, you buy the next one every day or two, kind of feels like it could work.
But if you hit, you know, that point after a week and suddenly it takes another week to get to the next level, it seems wrong.
And if something seems wrong on paper in your spreadsheet, it's probably gonna feel worse in your actual game.
You can solve all of your problems in this design step, but the more you do, the better.
It's always quicker to try to solve them here.
So that example is for a pretty simple city builder, but it works for any type of game.
Just keep in mind that you're balancing around player time and actions per day.
The more restrictive your game is in actions that earn rewards, the easier it is to predict how many actions a player does.
So a game with energy where you know the refresh rates, you can do that, but you don't have to actually limit play to get to predictability.
Games might have chess slots or daily quests that give you most of your rewards and you can get a really good sense of it.
So here's an example of inputs for an RPG battler.
At each level, the player has a total number of characters that have a level and a rank.
But most players don't have all their characters upgraded to the same power, so we've broken it down to A team and B team.
But I don't want to actually hand-tune everything in the game, so B team is just a percentage of the A team's power.
And you can see how these more complex systems can all come back to the same thing.
I can figure out how many character pieces they need to unlock new characters, how much gold they need to spend, how many materials they need, and so on.
One of the tricks as you get more complicated is that, like the character shards in this sheet, it's not actually a smooth line.
Your gold and coins and soft currencies may be, but materials are going to end up a little more staggered.
Smooth them out before you put them in the actual game.
It's important.
that players never gain a level or upgrade a building and get a worse payout than before.
And that's true whether the loss is actual or perceived.
Even if something technically pays out better but a number goes down, players are going to feel like it was a bad idea to upgrade, which is never a good spot.
A model for daily quests in a card game would work the same way.
How many packs do you want players to earn a day, or days per pack?
How many quests do you have per day?
That's an average payout.
You can get different tiers of difficulty by saying how often you want each one to show up and sort of the relative value between them.
The important part is to just sort of keep the average value and use that to predict player resources.
So once you have your system, what you do with it, you iterate.
It takes time to get to a system that's balanced, and the problem is when you're actually at perfect balance, it can be kind of boring.
You want to try intentionally increasing or decreasing payouts of resources at certain levels or points in your game, so the player's always a little short of something and wants to work to get it.
This is especially effective if you can tie it in with a new feature that unlocks as the player levels up.
If your player needs a new resource at level 8, and there's a new game mode at level 8 that pays out that resource, you can get people consistently engaged with progressing in your game and opening up new things.
Also, remember that designers love complexity with fiddly systems and dozens of resources, but most players don't.
Everything should be understandable for the player.
Few resources or things that belong to resource groups that drop from the same locations and are understandable is really what helps someone latch on and figure out what's going on in your game.
A good economy is one that gets out of the way of the player a bit and sort of just exists.
You know, if you've done your job right, it's a little bit like you were never there at all.
So these principles can apply to things beyond traditional economies.
I'm gonna use battle as the example today, but battle is really just any measured competition between two players or between a player and a defined force.
So a fleet of ships that are attacking one another is a battle.
You can have lots of stats for each unit, range, speed, health, so on.
But so is a fashion showdown between who has the best outfit where you care about your popularity and style.
And yes, I did work on both of these games.
So, any system where your stats and points matter is a battle if you look at it in that respect.
And so don't be afraid to apply these principles to pretty much anything.
So any of these complex interactions can be configured through the same general process as an economy.
You start from a defined, if arbitrary, data points, and you fill out just enough of them to be able to determine the rest of the numbers.
And then you calculate the rest of the numbers.
You can balance things in the game, whether it's units, weapons, abilities, cards, whatever, around each other.
Consider how long the object or item is relevant in the interaction, which is your effective combat time.
This could be rounds or real time, but it's all about considering the relevant life of an object.
Depending on the game and process, you can use these to either balance the attributes and items themselves, or the costs of them.
So let's start with a more traditional example.
Two units in an RTS.
We've got one melee unit that can only attack right next to it, and one ranged unit.
So the melee unit has to be stronger than the ranged one, right?
Why?
Effective time in battle.
The melee unit has to walk over to the ranged one and it's getting shot at the whole time.
So balanced units are balanced with respect to time in this regard.
In an RTS, this is mitigated by speed and range.
In a turn-based RPG, we're going to consider effective health and hits to kill to determine their time in battle.
And for the record, perfect balance in this context means that the units fight to a draw.
This is again a starting point, but two units should basically meet and mutually annihilate each other to be balanced in this regard.
So here's an example for our melee and ranged units.
The melee unit is faster, and they each have the same health.
So that's the arbitrary point that I've kind of picked here.
Assuming the ranged unit starts firing as soon as it can, the melee unit with these numbers essentially soaks one hit on its way over.
So it needs to kill the ranged unit in one less hit than the other way around.
That means that if the ranged unit's dealing 20 damage, it kills the melee in five shots, and the melee unit deals 25, so it can kill it in four, and they can basically get rid of each other.
It can be hard to keep a lot of these numbers in your head, so consider making a sim of these battles right in your spreadsheet.
You can show what's happening each round or each second in combat, and get a better view on what's happening, as well as double-check your numbers.
So this same logic can be applied to other types of mechanics as well.
Take two tanks in an RPG battle game.
One of them has defense, which reduces the amount of damage taken every hit, and the other one just has a large health pool.
So we can pick which attributes we just define, such as the health and defense, and then calculate damage to make sure the unit's balanced out.
This works in other directions, too, such as deciding that third tank has 50 damage and then trying to calculate what should its health be in order to make it fair.
Don't be afraid to use two different methods, even within the same game.
You want to figure out the fantasy of every character you're making and balance around that most important part.
Does one character feel like they should be faster than anything else in your game to make it feel right?
Then do that, and then bring something else down in order to compensate.
What about calculating cost?
So let's take a card game where you need to know how powerful each individual card is in order to balance it.
Ask yourself, how long is the card in play?
How many turns of value does it provide?
Establish a baseline and then balance things around that.
Let's say that one mana is two damage in your game.
If you've got a card that's going to last about five turns and deal damage per turn, you could say, oh, it's about two and a half mana in a perfect balance.
You know, now you have your starting point.
You're going to tweak and iterate from there, discounting futures and immediate impact and so on, but it's always important to have that baseline.
How much better is one keyword ability on a card?
Well, you can look at how often it matters and turns the tide and the total effect it's going to have on a game.
No matter what kind of game you're making, you can start with these time measures, especially duration and frequency, and use it to assign costs.
So remember that all of these are just starting points.
Perfect balance is, again, still pretty boring.
Get your two fair items balanced and then start adjusting.
Give a unit a negative to some attribute because of how effective its ability is.
Add in some type advantages to make sure that units have comparative advantages just the way they work in your head.
And how do you know how valuable a particular aspect like an ability is?
You test it.
So one way I like to do this is take two equal units, one with the ability, one without.
The one with the ability should win every time, whether it's in a prototype or just in your Excel sim.
You can do the same with other attributes like damage.
You know, just increase the health on the one without the ability until that one starts winning.
Do the same with all the other attributes and you've got a value for your ability in terms of the other stats and cost of your game.
this first balance is always harder than the rest of them, but once you've figured out how much this ability should cost you in terms of attributes, you have a baseline to try to figure out everything else you're gonna design after that.
So how much health you'd have to sacrifice to make a shield keyword fair, for example.
So in summary, free-to-play economies are based around time, especially the acquisition rate of content.
Create a scale that looks good and makes sense.
Define how long it should take to get to each point and get your payouts per day.
You can handle battles and other system interactions similarly.
You get an arbitrary starting point and look at the effective time of each item, whether it's actions per session, turn, or seconds of play.
And most importantly, once everything is balanced, break it until it's actually fun.
Equal balance is your starting point, not your destination.
It's the little details and small advantages that make something really compelling.
So I hope this talk helps some of you out there.
If you're looking for a copy of the slides or the math used in the examples, you can follow these links and I'll tweet them out after.
Please, if you have any questions, you can go ahead and ask now.
And if you have anything afterwards, you can always contact me at my email or we have a wrap-up room after.
Also, GDC wants to remind me to tell you to please fill out your session evaluations.
We really do appreciate it.
So thank you so much for your time.
Hello.
Hi, thanks.
That was really insightful.
I had a question about if you have a currency that players can use to spend on multiple things, some of which might power them up like upgrades and some which might be purely cosmetic, how do you estimate or predict and balance for where they're going to allocate that currency?
That's a great question.
It's when you have a currency that's used for more than one thing.
Yeah, since when you have a currency that's used for more than one thing, how do you balance them with, you know, a total, especially if you have one that's cosmetic and one that's mechanic?
When you're doing the system total, you can basically sum them all up to see what is the total need.
Let's say you can buy cosmetics, you can buy new characters and skins with gold.
You can sum up the total amount and divvy it out.
I also try to only consider the mechanic amount, where we're saying I want players to earn this much gold for the mechanic benefit of the game, so that's how much you wanna pay them, and sort of give cosmetics as an extra.
Yes, there will be some players who don't spend anything on cosmetics and just purchase more power, but that's usually okay.
Any other questions?
Excellent.
Great.
Well, thank you all so much for coming today, and I hope you enjoy the rest of your GDC.
Good hunting.
