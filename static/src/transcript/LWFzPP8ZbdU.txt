Good morning. Welcome to GDC 2017.
Thank you for getting up on Monday morning and coming to see us. This is the Math for Game Programmers tutorial. We're gonna be doing sessions throughout today on various topics in math in games.
So feel free to join for whichever sessions you like.
I'm supposed to ask you and remind you, please silence your phones or your pagers, if you're a drug dealer. And.
At the end of the session, if you haven't been to GDC before, or if you have, it's good to be reminded, you'll be getting an email that asks you to review the session.
Please do the review. It just takes a second.
And we really appreciate and read the feedback that you give.
So.
So today's schedule, we're gonna be doing two one-hour talks this morning.
I'm with myself and then Mike Acton.
And then we're gonna break for lunch.
And then we're gonna have a number of half-hour talks in the afternoon.
We'll have this schedule up as we go.
OK.
So first, I just want to get a sense of who's in the room.
So, um, please raise your hand if this is your first GDC ever.
Awesome.
That's about half, two-thirds of the room.
And then put those hands back up, please.
And, um, also if you've been to GDC but you've never been to this tutorial before.
OK. So that's mostly first-timers.
Please raise your hand if you're a student.
Only a few. An educator.
A couple as well.
Or if you work in games, full-time.
OK. The vast majority of them.
OK.
So my talk is noise-based random regeneration.
More like why be random when you can be noisy, or I'm going to make a claim that anything random can do, noise can do better.
So, I'm a game designer programmer.
I've been coding since the Apple II.
My background's in physics.
I've been doing this professionally a long time, and I present regularly at the GDC, and I teach now at SMU Gill Hall, which is a grad school for game development.
I've worked at a bunch of companies.
I was a tech director.
or lead programmer at each of those companies.
And I've worked with a bunch of companies on a bunch of projects.
So today, we're talking about number generators, right?
From RAND to whatever else.
We're gonna talk about some noise functions, and I'm gonna get into that a little bit.
Just a couple of versions of smooth or fractal noise, like Perlin noise, Simplex noise.
I'm gonna make a case that I think noise is more valuable in some cases than random, or can even supersede random.
And then we'll, of course, try to give some application and context for all this stuff.
So the talk is for anyone who's interested in procedural content generation.
That's been a hot topic lately.
Of course, anyone who's just rolling dice for random outcomes in general.
If you're using RAN, this talk is definitely for you.
Even if you're using the Marcen Twister or something you think is more sophisticated, this talk is for you.
Or if you're doing any sort of noise or hash functions and you're using something like MD5 or SHA or something you found on Stack Overflow, this is definitely a talk for you.
Okay, so some example use cases just to frame what is this, because everything, context is king, right?
Depends on what we're doing.
So one of the most popular things we're gonna use random numbers for and noise is for generating procedural worlds, right?
And everyone thinks about.
you know, height maps generating mountains and lakes, and yes, we can do that.
Or generating random dungeons for roguelikes or something, yes, we can do that.
There's a lot more we can generate though, right?
We might generate planets or villages, spaceships, flowers, random NPCs with random genders and personalities and backgrounds and professions, random quests, right?
So there's a lot of other things we might wanna do with generation other than just mountains.
There's some harder problems that are more nuanced too.
and Shay Pearce is going to talk about this a little bit this afternoon, where we might want to...
create discrete and distinct things in a near infinite world.
Or we may wanna place objects in a really large world, right?
And so for example, in Minecraft, you can run forever, but every now and then there are periodic trees or periodic villages, and how do we decide where to place those if we can't figure out where to place them all at the same time because the world is infinite, right?
So we need to do all this.
kind of on the fly.
We might wanna do particle effects.
We might have a million particles, each one doing a random thing.
That can get really weird if we're doing it badly.
There are a lot of AI algorithms nowadays that require randomness, whether it's Markov chains, genetic algorithms, Monte Carlo.
And again, going back to the Minecraft example, we might wanna have chunks that generate in random order, right?
So if the player runs to the west, he discovers a mountain.
Great, there's a mountain there.
He then only sees half of the mountain, so only half of the mountain's been generated.
He then runs away from it, goes south, comes all the way back around, and approaches the mountain from the other side.
The mountain better still be there, and the west side better match with the east side.
We may wanna trade seeds, right?
I may wanna tell my friend, hey, you should try this map.
Try this seed from this word or this number.
It's a really cool map.
It's got a tower in the middle of the jungle, something like that.
Generation and noise can also be the ultimate form of network compression, right?
If I have 22 gigs of data that I generated, I can send it to you with an almost infinite to one compression if I just send you the feed, right?
So that's a huge advantage.
That's the same with disk compression, right?
If I generate some mountain, as long as the mountain's unchanged, I don't need to save it on disk.
I can just throw it away and regenerate it on demand.
So it's the ultimate form of compression as well.
All right, so briefly, I want to talk about, well, what do we actually want out of our random number generators?
Which ones should we actually use or not use if we keep hearing different things?
A couple of the limitations of random number generators.
I'm going to talk about noise functions as an alternative, and entertain the possibility of can we make a random number generator that's based on noise, or noise that's based on random number generators, and then a couple of tidbits.
So that's where we're going to go with this.
So first of all, what do we want to look for in a random number generator?
What makes one good?
Well, I think academics would start answering, well, it depends on the period of the blah blah blah.
No, no, no. It really depends who's asking, right?
If you're at the NSA, you have very different needs for your random algorithms than if you're working on Minecraft, than if you're working at a casino game, right?
So it really depends who's asking.
So what do I want in an RNG as a game developer who's interested in procedural content generation?
Do I want fair statistical distribution, right? It's kind of, it's random enough.
Yes, I very much want that. And 99% fair in statistical is much better and more important than 95% fair.
It doesn't have to be absolutely perfect, but we really start noticing the differences with falloff.
We want it to not repeat, right?
If we're flipping heads, tails, tails, heads, heads, heads, heads, heads, heads, heads, heads, we don't want that to happen.
Except, actually we do in the sense that it can and will happen, and so we want it to happen as much as it should, right?
Do we want some really long repeat period where if we run the random number generator it will only finish its cycle after the sun has long burned out and died?
That's really important, right?
Probably that doesn't matter so much. As long as it can go, you know, billions or something, really who cares at some point.
I'm gonna make this point in a different way later.
However, we probably do want to make sure that it doesn't repeat too quickly. So as long as we can get millions, billions out of the sequence, we're probably in the ballpark of OK. And most of the random number generators you'll deal with have a sequence length, a period of, in the billions. So probably not a big deal.
We want to be able to seed it, right?
We want to be able to say, I'm going to give you the seed of 15, and then go, go, go, go, generate a world.
And that's totally different than if I gave it a 17 and I said generate the world.
So we want to be able to seed it.
I want to be able to use more than just a few seeds.
So maybe 32 bit, that would give me 4 billion seeds.
That's plenty, right?
There's a lot of random number generators that have.
pickiness about its seeds. Like, use any seed you want.
Oh, except don't use even numbers. Please use large primes. And definitely don't use zero.
So I'd rather not have that if I can avoid it.
Some RNGs have this sort of warm-up period where you get some lousy values before you start getting really good values. And actually some of the most well-known generators are some of the worst at this.
This is not something that I want, because oftentimes I'm gonna want to seed something and then generate five numbers and seed something else and generate 20.
So it's those numbers at the beginning of the sequence that I want the most.
So I don't want this warmup.
Statistically, it is important for me that.
The bits are independent, right?
If I look at, if you give me 32 random bits, then there should be a 50% chance that any one of them is on or off at any time.
And a 50% chance that any one of them agrees or disagrees at any time, right?
They shouldn't be correlated with each other.
Spatially and then, temporally, meaning that the next result and the next result shouldn't have anything to do with the previous result.
At least not recognizably.
Platform independence.
I definitely, definitely, definitely want this.
If I have an Android client and an iOS client and a Mac and a PC client all connect to something and they're trading seeds over the network, that thing I generate from the seed you sent me better be the same as this thing you sent, even though you have a totally different CPU than me.
You might be on a 32-bit ARM or whatever, and I might be on a 64-bit Intel.
It could be quite different.
I would love to have order independence.
random access, right, where I could just sort of jump ahead in the sequence and jump behind.
I want to say, give me the 75th random number in this sequence.
Unfortunately, that's something random number generators do not do very well.
We'll talk about that more.
And then of course, I need this reproducibility, this determinism, right?
If I give you the seed 17, I better get the same results as the next time I give you the seed 17.
And this is crucial to most of the purposes we're gonna do with this.
How important is speed?
We may end up wanting to generate a lot of random numbers, like a lot, a lot, a lot, and we may wanna do it in real time.
Some of the most interesting algorithms we can do require us to generate millions of random numbers.
So this does matter.
And we also may want to have thousands or tens of thousands of random number generators that we're going to instantiate.
That each one is feeding us different numbers.
So we may also care about the ability to whip up another generator and have it start cranking out numbers.
Memory footprint.
How much memory does each RNG have?
If I've got 10,000 of them, am I going to care?
Am I going to notice?
Is that going to be megs and megs of memory or not?
Can I run it in parallel?
Right, if I have multiple threads, can they all be rolling random numbers at the same time?
Is this thread safe?
Can I use one RNG, one generator, that multiple threads are saying, hey, give me numbers, give me numbers?
Or does each thread have to create its own generator?
Which is not the end of the world.
OK, so which RNGs are out there?
What can we use?
I'm going to go really quickly through this, but just a sense of what kinds of things there are.
So the simplest random number generators, like these, are literally boiled down to, if you can see the code on the bottom here, some internal state, say some number.
And we multiply it by some weird number, say a big prime.
And then that's our new state.
Oh, and then we return it to you.
And then the next time you call it, we take that new state and we mung it some more and then we return it to you.
So we kind of are constantly chewing and mangling our state and returning it.
This sucks because if I put in a seed of zero, meaning I start the state off as zero, then it will be zero times I don't care.
Because zero is zero and then it will just be stuck at zero forever.
Right?
In the numerical recipes, they improve this.
And these are called mixed congruential generators, where they just multiply by something and add a number.
Great.
And supposedly this, I thought, was what rand was, but my results later in this tell me that it's doing something even more sinister.
Okay, so that's great.
Why not just use rand?
It's been in the standard forever.
Everyone knows how to use it.
Well, probably you know that rand only gives you so many numbers, right?
Zero to 32,000.
Okay, well if I wanted a 32-bit RAND, I'll just mash three RANDs together, right?
Maybe bit shift.
So I could make something called triple RAND, right?
Where I take these, let's see if you can see my mouse cursor, these 15 bits that it's giving me, and actually the bottom two bits are a little bit statistically wonky, no problem.
We'll just generate RAND, shift it over from some bits, generate RAND, shift it over, and then mash those together.
Now we get 32 good bits of RAND.
Unfortunately, RAND's not that fast.
When we start doing millions and millions of calls, and of course it's not going to get any better if we call it three times, just to try to get better results.
And RAND does not do well at all, statistically, in terms of how evenly distributed the random numbers are.
Though this triple RAND can do fine.
Also, random maintains a global state.
So if I have 16 different threads, I can say srand to seed it to the number 17.
And then I call rand, rand, rand.
If some other thread is doing that as well, it's fighting with me, and it's disrupting my sequence.
So it's absolutely the worst thing for me to have in terms of multithreading.
And that's just the beginning of rand's problems.
So let's look at a couple of sort of.
quantitative grades of how well these things do and how fast they are.
So identity here is a random number generator where every time you say, give me another number, it says, OK, one, two, three, four, five.
That's all it is.
So obviously that doesn't do very well.
And I have these different tests, and we could talk about them later if there's time.
But on average, are the bits 50% on or off?
On average, are bits independent from each other?
Is the next number more likely to be higher?
That should be true 50% of the time.
When I look at each byte, are the bytes distributed over the different possibilities nicely?
And then if I mod by all the different numbers from one to a million.
and do that a ton of times, does it statistically mod, you know, spread nicely.
So if I do this RAND mod 7, do I tend to get about even results across those seven buckets?
And you can see here, these early and common random number generators, most of them do not do well at all on these statistical tests.
This triple RAND does much better, thankfully.
If we look at the call time, this is the top here.
You can see I can make quite a number of calls per millisecond, but triple RAND is down to 10,000 calls per millisecond, which seems pretty fast, unless, again, we're going to be doing millions of them.
So, not bad.
I would say you're fired for all of them except for this triple RAND so far.
OK. There's some other ones to consider.
I'm not going to go into too much detail, but if you have to leave in this talk right now, I would say the one takeaway is at least do something like this XOR shift one.
It's like RAND, but doesn't suck.
And it's a simple algorithm where you just sort of bit shift around and XOR with yourself.
And you do that enough times.
Surprisingly, it has very good statistical results.
And there's various other variations of it.
Now by now, probably many of you are thinking, well, geez, why don't you just get with the program.
We all know there's Mersenne Twister, and that's the best thing, right?
And it's in the C++ standard now.
Let's take a look.
First of all, it's not simple, right?
If I call rand on the right, it does a bunch of stuff, and one of those things is, every now and then, it calls twist, which is a bunch of stuff on the left, with a for loop, right?
Branches, this just doesn't smell that fast to me.
And sure enough, it's not.
We'll go more into that in a second.
Here's another one that's Intel actually has some really cool random generators on their website.
This is one I took from their website.
Everyone can obviously understand this code, right?
So you all see what's going on there.
So let's look at how these do.
When I look at these different random number generators, you can see now everything triple random below is scoring pretty well.
Mersenne Twister actually only scores a 98.
There's another set of tests you can apply to these, which I'll talk about at the end if there's time.
But these are more simple and direct to what I wanted.
So actually Mersenne Twister was not the strongest.
These XOR shifts were slightly better.
If you look at the time to run them, Mersenne twister's pretty fast, but the XOR shifts are better quality and they're faster.
All right, so that's interesting.
There's another thing that's interesting here to note is Mersenne twister, notice it takes to seed it, it's hundreds of times slower than any other thing.
It's so complicated to seed the structure, and it's also got a lot of memory.
Okay.
All of these functions are based on the central idea of a recurrence relation function.
And that's basically just to say, any RNG, just pick one, it basically amounts to this.
Take your state, do something funky to it, and return that.
And then that's your state for next time.
And then you do something funky to that.
And so as long as you pick the right funky, this thing will create a long chain of interesting things, hopefully.
OK, so lastly I'll just mention there's STD random device.
It's a new thing.
I don't know if it was C++11 or something added.
This is something you should not use for your random number generation.
This is meant to be physically actually really random, right?
Like, I don't know if it's based on the temperature of the core or something like that.
I don't know how you do that on a computer.
but it's meant to be an actual random, not a pseudo-random.
For games, that's not really useful at all, unless perhaps you want something super-random-y just to kick off your random number generator.
Okay, so I wanna talk about the limitations of these random number generators, all of the ones we just discussed.
Many of them have restrictions on the seeds.
Like I said, if you use a seed of an even number or seed them with zero, half of them break right out the gate.
And a lot of them have even weirder rules, like you should use a seed that's a prime or a seed that's a prime that's one less than a power of two or something like that.
That's no use for me if I want to have different planets with ID numbers, or NPCs with ID numbers, and this NPC is ID number 12.
Please generate yourself based on that seed.
Right? Well, what if that seed doesn't play well with the random number generator?
Am I just going to get a really lame NPC, or am I going to get a lot of clones of the same NPC?
There's a bigger complaint I have, which is that when we say seeds in these random number generators, I think it's kind of misleading.
They're not really giving us a whole new set of random numbers.
They're just jumping us into a different starting point in that same sequence.
So if the sequence is a billion numbers long, we might start halfway into it if we use one seed.
We might start a third of the way into it if we use a different seed.
And this is why the mathematicians get us all excited about something like Mersenne-Twister having a ridiculously long sequence, a period before it repeats, is because when you sort of jump into it, you're not likely to sort of find familiar territory that you were in before, hopefully.
But the seeds are not really a different set of random numbers.
They're just a different starting point.
I mentioned the slow warmup, right?
Mersenne twister included produces weak values before it starts getting statistically strong.
And that's fine if you're doing scientific programming, you want to have 250 million random results and you want them to be statistically sound.
It's not fine if you want to just make an NPC and you need six die rolls and they're all bad.
Threat safety is important.
Something like Merced and Twister, and most of them, uses an internal state, so it's not thread-safe.
Every call to it modifies the random number generator.
However, you can instantiate a different generator on each thread, and then each thread can hammer on its own generator, no problem.
However, you can still have the case where this thread seeds with the number five, this thread seeds with the number seven, and this thread is pulling numbers and this one faster than this other one.
And actually, because we're still all pulling out of the same sequence of numbers, we can kind of sort of sync up.
And so I can pass you or lap you or even come in sync with you in the same part of the number sequence.
And of course, rand, we said, do not use across threads because it has this global state.
Order to dependency, this is my single biggest objection to these random number generators.
Every call affects the next one, so whatever you generate has to be generated in a strict order.
If I give you the seed 17, that's not enough.
You have to generate the same NPCs, tiles, maps, weapons, loot, drop, whatever, particles, in exactly the same order that I did, or else the sequence gets disrupted, right?
So it's very sequential, it's highly ordered.
This sucks when, say, we want to generate infinite number of things out of order.
So just to illustrate that point.
So let's say I have some world that's an infinite world, right, and I can go as far as I want, and the world just keeps generating over and over and over and over.
Well, if I see that there's a island over here, let me get some island, okay.
So I don't know if you can see in the distance.
there's an island that's kind of half-generated.
And I'm gonna back away from it, and then I'm gonna go around here.
And now I had to go exploring, ta-da-da, I'm going faster than the thing can catch up at the moment.
But if I then approach from the east instead of from the south, I still have to come up with that same island that I would have before, right?
So I can't roll a bunch of random numbers ahead of time and just figure out where all the islands are because there's an infinite number of them.
And I need to be able to encounter them in random order.
So, we have poor random access.
How do you jump 100 numbers ahead in the sequence?
In any normal traditional random number generator, you just have to roll 100 times, right, to skip ahead for some reason if you needed to do that.
You wanna jump back three in the sequence?
Sorry, can't do it.
Maybe if you knew, oh, I was generated from seed 2261 and I'm 1400 calls in, you could reseed and then call three, 1397, right, that's ridiculous.
So we have terrible random access.
We also have non-trivial instantiation.
Like I said, there's a lot of interesting algorithms that happen in procedural generation that require us to have thousands or tens of thousands or even hundreds of thousands of different random number generators instantiated.
So if we can't make them fast, and if they're not small in memory, that actually takes tons of tools away from us.
Takes tons of algorithmic, interesting procedural content options off the table.
And then there's the lack of temporal and spatial coherence.
And by that I just mean, if you want to have a slope that's random heights, and you're kind of smoothing it out between them.
you have to generate the numbers ahead of time and remember them in order to smooth between them.
You can't go back and say, wait, wait, what was the number before?
Too late.
So it means you have to end up writing all this extra code and storing all this extra data.
And if you're still really, really jonesing on Mersenne Twister, I'll just quote Wikipedia.
Places a load on memory caches, somewhat slow, fails tests, not appropriate for Monte Carlo simulations, outputs nearly the same sequence for many iterations.
All right. So I'm not saying Mersenne Twister is bad.
I'm saying, when you talk to anyone on the street, a game developer, you ask them what do they know about random numbers, they'll say, oh, rand is bad. You should use Mersenne Twister. That's the one thing they know. And I'm saying that's not necessarily true.
It's heavy weight. Every RNG you instantiate is 2K of memory, which I still can't.
