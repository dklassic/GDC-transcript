Yeah, hello everyone.
We are Joar Jacobsson and...
James Therrien.
James Therrien.
And we do RainWorld.
I'm on creature design, creature animation, AI and general programming for the project and games.
I'm doing level design and audio work and general narrative construction.
And we're gonna talk about procedural animation in RainWorld.
So we thought to start things off a little bit and set the context for you guys, we will play a video.
There we go.
So what is rainbows? Oh, thank you, thank you.
So what is Rain World? Rain World is a survival action platformer where you play as that cute little white slug cat creature. And you're kind of existing in this large open world ecosystem of AI creatures. And all of the AI creatures, the intention for us is so they have as much agency as the player character. So they are moving around the world independently.
They're hunting, they're searching for food, they're afraid of things.
and all of the creatures kind of exist perpetually on screen as well as off screen. So you can come into a room, for instance, and you can see some interaction happening that's been going on for like 20 minutes and you just sort of stumble upon it. Yeah, the game play is kind of learning to navigate through that ecosystem, how the creatures of the world interact, what they want, et cetera, and sort of finding your way through it as sort of like an underpowered little creature.
And of course avoiding the death ray.
Yeah.
So procedural animation is an important part of RainWorld.
And procedural animation, as I will talk about it today, is basically animation that does not happen by drawing frame by frame, and also not by rigging a character and replaying an animation.
But rather, it's interactive code informing how the visuals will move.
So, let's take a look at some of these creatures.
Definitely.
This one here, we call the vulture.
It's sort of like a large flying predator in RainWorld, which can switch between modes.
You see it can climb like a monkey and then fly like a bird.
And this is a concept that occurs quite a lot in RainWorld, like the dual nature creature, which can switch between modes, et cetera.
The next one is the centipedes which are completely disgusting because you can tell they're large bug like creatures. They kind of work with some sort of generalized sense of clockwork.
You can see them all sort of moving at the same time. And you've got this sort of cool inverse kinematics in the leg actions. I think they're disgusting. So let's get that out of here. Here we have the reindeer as it's called. It's a very large creature which is not hostile but friendly or indifferent to the character and you can climb in its antlers. Down at the bottom of the screen we have the worm grass which is very hostile but also securely anchored to the ground. So unless you fall down there, it won't be a problem. These cute little guys are called lantern mice.
and they're dumb, but they're very cute.
And you can find them in dark environments, and as you see, you can use them as a source of bio-illumination if you don't scare them off.
And this one here is the leviathan.
It's a huge sort of mixture of an eel, and a centipede, and a whale, I guess.
which will gobble you up if you swim too deep and too carelessly into the waters of rain world. And these guys are some of my favorites. These are called miros birds. They're like squawking, noisy, obnoxious, half mechanical chickens. You can see on their legs, they have actuators on the legs. But they hunt in packs and make a loud racket. You're lucky that gifs don't have sound because it's obnoxious.
These guys are the lizard, and that's sort of like the most reoccurring antagonist in Rain World. They love the taste of slug cat, which is the main character. The lizards come in different colors, so the ones here are yellow, but we also have the white one, for example, which can blend into its background like a chameleon and stay hidden. These guys hunt in packs, as you can see. They surround you and work cooperatively.
this one is called the scavenger. It's the jewel of the rain world AI. It's supposed to be equal to the player character in every way. As far as movement, it can use tools. As you can see it's perfectly comfortable on poles or on flat ground. And yeah, they're pretty intelligent. And you can see they kind of look like they know what's going on. And that's something that we've been working hard on.
Go for it. So why is procedural animation important to rain world? So we're trying to create the appearance of like a large natural open world ecosystem. And what procedural animation allows us to do is create a sense of agency and believability for all of the individual creatures. Because with procedural animation we can create a scenario where the AI behavior equals the behavior that you're seeing in the game.
For instance, as you can see in some of the GIFs when a lizard is hunting or something like that, you can see it see you, you can understand its motivations. When it can't get directly to you, it gets visibly frustrated because it's trying to navigate around the environment. And that's cool because the player is then able to sort of project into that and project personality into that. So you have this situation where you have like the player will see a creature do something interesting that isn't necessarily a scripted behavior and the player will infer from what's going on. They'll say like, oh, this creature is mad at me. Now, that's not really the case, but because we have all of the ingredients visible, it makes this kind of like effect of personality for the individual creatures. And that's a lot of fun.
It's different than if you were to have, for instance, like a black box scenario where you have a robot doing something, and you can't infer anything from its behavior because it just stands there, and then something happens, and it moves.
With procedural animation, you have a visible cause and effect, which is really interesting.
Yes.
So a little bit about the technique.
How do we do this?
Let's take a look here.
So one important aspect of how I animate these creatures is a separation of the physics simulation from the cosmetics.
As you can see on the left side, that's a more simple simulation when it comes to the actual point per tentacle.
This creature here is a tentacle creature that's coming out of the wall, trying to grab onto things and pull them back.
Maybe I should explain a little bit what you're looking at here.
The thin red lines, that's the pathfinding, where they try to find their way towards their goal in the terrain.
The semi-transparent, squarey, blocky lines, that's sort of like the AI's understanding of the tile matrix, because the terrain in RainWorld is tile-based, making it not try to just grab through a solid wall, but be able to understand that it should.
grab around it and then you have what looks like beads connected by sticks right and that's the actual 2D float vector physics simulation which is quite simple it's basically just like locking points at a certain distance so if they're further away from each other they are moved towards each other and vice versa. Why is that important? Why is it important to separate the physics and the cosmetics?
Yep. That's important for two reasons. One of them is performance. As James said earlier, what we do in RainWorld is sort of like a perpetually existing world, so stuff is going on even when you cannot see it. Creatures are interacting with each other even when you cannot see it.
Meaning that there might be many creatures active at the same time.
Sometimes hundreds.
Probably sometimes hundreds, yeah.
What's important to note here is that these two systems, they have a one-way dependence.
So the complex cosmetics are dependent on the simple physics simulation, but not the other way around.
Meaning that when the creature is not on screen, I can do only the thing on the left-hand side.
I don't need to do that, saving processing cycles.
And also, so the dangly bits on the right-hand side, those are fairly processor intensive.
Yeah.
Definitely, but they don't need to happen unless you're actually viewing the creature, because they don't inform anything that has to do with how it interacts with other objects.
Another important aspect of this is control.
The simple simulation on the left-hand side is easy for me to tune and work with and get to behave the way I want.
And then I can just put the cosmetic layer on top without having to worry about it affecting the working behavior I already have set up.
So if I were to actually create a physics simulation which had all of these dangly little hanging tentacle bits that might pull at the main tentacle, for example, weigh it down, or it might like.
get into a wobbly state or become otherwise unstable.
But because the dependence is only one way, I can always be sure that it will behave that way, that I made it to behave.
Pragmatism.
First of all, I guess I have to say that I'm coming at programming from an artist's angle rather than the programmer's angle.
Art is the goal and programming is the means, I guess.
I'm a self-taught programmer.
more or less, and sort of like everything I do and everything I learn within programming is always about getting to the art result.
So I have pragmatism in the way that I know what I want it to look like, I know what I want it to feel like, and then the programming is just about like getting there in the best way possible.
It's not about building perfect programming solutions that have purity of implementation.
It's about getting to the desired result.
Faking it is easier than making it.
That's sort of the same thing.
If I can choose between making a perfectly correct physics simulation of some complex phenomena, or just make it look I will go for the latter.
So basically, you could say that it's like an illusionist's approach.
It's a smoke and mirrors approach.
If you don't have to pull a rabbit out of a hat physically, it's better.
It's way harder to make a rabbit actually appear in a hat than just having it look like that.
And if it's the same end result, all the better to go with the easier solution.
So this is another very important aspect of what's going on, which is that AI is animation in RainWorld.
You cannot really draw a line between the two.
Basically, the AI has the overarching unit, which will make decisions.
And those decisions are generally along the lines of, where should I go?
Where should I move to?
But then you also have the locomotion AI, and the locomotion AI is equally animation as it is AI, so to speak.
So locomotion AI would be about where to put my limbs, how to orient myself, how to basically move through the world, and that entire thing is informed by the environment around the creature.
So you might see, for example, that this vulture right here, at one point, it makes like a wing flap.
There you go.
And that's not an animation I implemented.
I didn't tell it to do that in that specific situation or at that specific time.
That's the locomotion AI that figured out that maybe it lost both its grasps or it didn't have an ideal position to grab onto.
So instead, it's switching to the flying motion and then back again.
So let's make a rain world creature. What are we going to make?
Yeah, what are we going to make? We're going to make a rain world creature called Daddy Long Legs.
which is disgusting. It's like this giant ball of tentacles and it's kind of like it's sort of an ideal rain world creature because it's really messy and like it stumbles around and it's like lots of tentacles. Very many tentacles. You're about to see very many tentacles. Let's start with one. Start with one tentacle. I think I've described it as in between spider and spider's web. So let's go.
So what's that?
What's that?
The blob, the blobby looking thing, that's what's going to be the body of the spider thing.
And then we have the little red dot, which is the goal it's traveling towards.
And what's the red line?
The red line is a line showing that those two things are connected.
So basically, the AI will tell it where the little red gold dot will be.
I think maybe when recording this one, I actually had it hooked up to the mouse.
But later, it will be the AI.
And then I use an A-star pathfinding algorithm to find my way there through the terrain.
And at this point, it's very simple.
It's basically like a car in a racing game, right?
It's like a physics object that is just moving towards its destination at an even speed.
But we don't want a car.
We want something that looks like a living, organic creature, and preferably a gross one.
Preferably a gross one, yeah.
So we put some legs on it.
you guys should remember these. It's basically the same tentacles as you saw in the plant that was in the wall, right? Yep. So this works exactly the same way. The squarish tentacles keep track of the but we're sure that they don't go through terrain.
And then you have the physics simulation, which is sort of like where the tentacles actually are.
So look at the beads and sticks, because that's where the tentacle is actually at.
The other thing is more like its brain, so to speak.
So.
We want this creature to climb around in the environment.
And how do we do that?
What is climbing?
Climbing is basically like making a decision over and over.
And that decision is, where should I grab?
Where should I release?
If you're climbing a tree, you look upwards.
And you're selecting a branch.
And you're grabbing it.
And you're pulling yourself up.
And you're selecting a new one.
And you do that over and over.
And we want this creature to do the same thing.
So what we're seeing here is a breakdown of one individual leg.
Later we will, as promised, put many legs on this thing.
But right now, there's only one leg.
And the problem to solve is where to grab on.
You also recognize the blob and the goal.
Those are the same things as earlier.
and the red line there is the leg.
And then I have drawn three dots, and those three dots are the system for determining where to grab.
So the yellow one is the ideal grab position.
If every single position in the room was a valid grab position, that's where I would grab.
However, you cannot grab onto thin air, so we have to figure something out to get.
an actual valid grab position, which is on terrain.
That's what we are using the green dots for, the temporary goal.
So basically how that works is that I have a method set up which can grade every single coordinate on the screen with a score for how good a grab position is this specific coordinate.
And if you're in thin air, that's an awful grab position because you cannot grab onto thin air.
But if it's on terrain, that's a valid grab position.
So say if it's in thin air, then I might give it like minus infinity grab points.
But if it's on actual terrain, then I want it to have a higher score the closer it is to the ideal position.
So, what happens is that every single frame, I pick a random position in the room, or a random position close to the creature, and I check the score of that one, and I check the score of my current temporary position, and if the new one is better, I switch them.
Meaning that over the course of several frames, it will sort of like gravitate towards a better position.
Why not just check every position and then pick the best one?
Because that's very intense on the processor.
This way it becomes easier.
And you might not always get the absolute ideal position, but you will get a good-ish one.
And I actually think that that little bit of randomness to it adds some character to the animations.
That's not necessarily a bad thing.
And then we have the blue dot, which is the actual current goal position.
So that's where the tentacle is moving towards.
So how does this become a grabbing motion?
Basically the body is moving upwards and the leg is moving towards the blue dot.
And when it gets there, it latches on.
And then the body continues moving, and when the leg is too far behind it, it releases and checks where is the current green dot, where is the current temporary goal position.
And it goes there, it grabs on, the body continues, it releases, and you have the climbing, basically.
Let's see it in action.
Let's see it in action, here we go.
So there's nothing on here you haven't seen yet, but there's quite a lot of stuff on here.
So I might explain a little bit.
There's the tentacles and the AI tentacles and the pathfinding.
And then you see the yellow dots, which are the ideal grab positions.
So if you're climbing in a specific direction, you will want to put your limbs forward in that direction, right?
That's why they are sort of like in front of the creature towards it.
general vector.
How does it, it looks like it's heavy.
How does that happen?
Yeah, that's another interesting thing, and that's a callback to faking it, it's easier than making it.
Because instead of doing actual rope physics simulations on all of these tentacles with elasticity, et cetera, which would be way harder than I could handle, it's way above my level.
I do something that's much simpler, which is that in every single frame I count the number of tentacles that are contacting terrain.
And the fewer tentacles that are contacting terrain, the more the body is affected by gravity.
And the more tentacles that are contacting terrain, the...
faster the body is allowed to move towards its goal.
So in sort of like the free fall case, where you don't have any grasps at all on the terrain, you will have 100% gravity, 0% like moving towards where you want to go, you just fall.
And in the opposite case, where every tentacle is grabbing, gravity won't be an issue at all, and instead you get a very efficient movement.
However, in the actual environment, you seldom have either of those two extremes.
You have a few tentacles grabbing on and a few tentacles searching for new positions.
And that makes it so that it's sort of occasionally weighted down and occasionally moving forward quickly.
And because the eye correlates these two things, like you can see that when it's grabbing, it's able to move quickly, and when it's not grabbing, it's less efficient.
It actually looks like this creature is supporting itself by the tentacles, which is not at all the case.
It's just floating through the air.
the illusion is created of being supported by the tentacles.
Let's see how it looks.
Throw some cosmetic detail.
So here we go.
And this is what the creature sort of looks like.
This is the cosmetic layer, so that's the same thing as you saw with the two GIFs next to each other, right?
Where there's like, the previous one you saw, that's what's going on logically.
And this is the cosmetics layer, which is sort of like a paper doll just pasted on top of the logic, which is informed by where the physics objects are, but not necessarily entirely.
Like the tentacles are curvy rather than jagged.
Yeah, exactly.
Like the previous tentacles were jagged, but here I just smoothed them out a little bit, et cetera.
And there are more tentacles here, actually, like some dead dangly tentacles that, in fact, don't do anything in the game.
They cannot interact with any other objects.
But because they look the same as the actual tentacles, it's hard to tell which is which.
So it just becomes like one.
unit, one gross unit.
You can see it hunt, right?
Yeah.
Here we go, in the game environment.
So this creature here is blind.
It's hunting by sound.
So if you look when I hit the ground there, it's actually reacting.
And when it hears a sound, it will send a tentacle over there to feel for what was doing it.
And then it's grabbing onto me.
So this technique comes from my specific circumstances quite a lot.
I'm the artist, I'm the designer, and I'm the programmer.
And that means that I can work with the technical restrictions and find a sweet spot that works and is also the result I'm going for.
Basically, instead of having to, as a programmer, go over to the artist's desk and tell them this is not possible to implement, I can just like, soft, I can have like a soft approach where I just look for the compromise that is the best.
Also, these creatures are fantasy creatures. No one has seen them in real life, so you don't know what they are supposed to move like.
So, their movement being a little bit wonky is... you have to give them the benefit of the doubt, basically.
So if you were to do a human or a horse or something like that, it would be very obvious.
Yeah, a human or a horse would be very different.
Yeah, no one has seen them outside of RainWorld.
So what can other people take away from this?
Other people not working under my extremely specific circumstances.
I would say that on the spectrum between art and programming, there are actually many design solutions that might not be accessible.
if you're an artist or a programmer only.
Even if you're an incredibly good artist and an incredibly good programmer on a team, you might miss out on solutions that are in between art and programming.
So for that reason, I would encourage artists to learn programming, lots of programming, more programming than you're comfortable with.
It's worth it, it's not as hard as it looks.
And I would also like to encourage programmers to learn art, learn what motivates artists, what are artists ideas, what is important to artists.
The workflow as well.
And the workflow definitely.
So you can sort of like meet halfway.
Cool.
So that's our little chat.
Thanks for listening.
If you guys have any questions, please let us know.
Is there a microphone? If not, we're going to be hanging out.
So come grab us. Come grab us at the bar. What physics engine do you use underneath?
physics engine under the simulation or did you write all your own physics? Yeah, it's homebrewed. It's just, yeah, a weird rogue sort of homemade. Cool. That's great. Thank you.
Anybody else?
right now it's PC, consoles, and we're going to port it as far and wide as possible. Because we have five years of sunk time.
So as far as we can push it, we're going to push it. Thanks guys. Thank you.
