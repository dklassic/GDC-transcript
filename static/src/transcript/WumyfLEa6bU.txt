All right, so I'm Kate Compton, and without further ado, I'm gonna talk a lot about procedural content generation.
I'm sorry, this is gonna be a total speed run today.
There were just way more things I wanted to put in here about procedural content generation than I had time for.
And so there's zines floating around.
I printed out 80 of them, which was clearly not enough.
So I'll put those up online too.
Yeah, so a little bit of, oh, so today's schedule.
I'm gonna give you, I'm calling it the IKEA catalog of PCG techniques, what all of them are, why you might want them, how much they cost, and whether they look good next to your sofa.
And just the catalog of that.
And then I'm also gonna give you some PCG MSG, easy, cheap additives to improve all your PCG, whatever it is.
Oh, and the slides are up there.
So this talk is kind of for anybody who has heard or is thinking, hey, we should have some PCGs in our game.
I hear they're really cool.
We should definitely PCG our game.
So a little bit about me, I've been doing procedural content for 15 years or so.
It's hard to tell at this point.
I did five years on Spore, I did the planets, and some SimCity.
I've done five plus years of a PhD, and show no signs of actually graduating, in generative games and creativity tools.
And I also made Tracery, which I talked about last year, which now has close to 4,000 active bots generating weird stuff online.
I make a lot of generative art bots, games, art tools, and more.
And I really like to write about and teach other people how to make PCG without losing their heads.
It can be a really difficult thing.
So I've done a ton of procedural content generation work.
Are my, oh good, the GIFs aren't running on my computer, so I'm glad that they're running up there.
So yeah, these are a couple of the things that I've made, various procedural content, Fox of Butterflies in VR, and then just recently I made a train jam game that's a generative train.
So about a year ago I made this interesting blog post.
So a lot of people tend to ask me, especially people just starting off in games, like how do I do procedural content?
What are some good resources that you would suggest for me just starting out?
Like I know nothing about PCG, where do I start?
So I started writing up a blog post, and four hours later it was 4,000 words, and I published that about a year ago.
And people found it really useful.
So if you get lost in this talk, you can go back to that blog post.
And it says everything I'm saying here, but much slower.
So yeah, okay, I imagine people in this room want to generate something, or have been told to generate something, or are generating something for their game.
And you know, there's games like Minecraft, which generate their terrain, famous games like No Man's Sky, which generate all sorts of different things, even Dwarf Fortress, which generates, you know, drunken cats falling down in a pub, and other such things.
But there's also, so those are kind of some famous examples, but there's also a lot of not famous indie examples that use PCG in all sorts of ways.
It's not just terrain.
So there's Pip and Bars, it's as if you were playing chess, which gives you different ways to stroke your beard while you think of chess moves.
Dietrich Squinkiefer's Mr. Darcy Dance Simulator, where Mr. Darcy insults you in generative ways.
Ultima Ratio Regna, which generates everything.
Strange Thinks works, which are strange generated museums and whatnot.
Even things like Panoramical, which these games often walk the line of, is it a game?
Isn't it a game?
There are generative spaces that you can explore in different ways.
And even sometimes games generate game rules themselves.
So this is Yavalath.
This is Cameron Brown's project.
made a system that could generate game rules, and then he made a player that could play arbitrary games, and he had those virtual players play thousands upon thousands of games until he found one that was pretty well balanced, and then he shipped that, and you can now buy this in game stores.
But title is also generated.
But despite the fact that this is the, this is the, where are we now?
Game Developer Conference, yeah, it's been a day.
You can also generate all sorts of things that are not games.
Yeah, so there's places that generate fabric and fashion, art projects.
Here's a bot-generated skirt that I made.
I'm much better at bots than I am at sewing, but this is still a pretty good skirt.
There are games from museums, like the Victorian Albert made a wig generator.
Things that are half creator, half game, like Tokaboka's hair salon.
And people are generating all sorts of stuff from poetry to music to cocktail generation.
A lot of that goes on at the International Conference on Computational Creativity, to give a shout out to one of my other communities.
So you can generate darn near anything.
So, and there's also all sorts of reasons to want to generate stuff.
Big stuff, small stuff, little stuff, complex stuff.
For all sorts of reasons.
It increases Twitchability, it looks cool, it's funny.
And so yeah, there's no wrong way to do PCG.
And often, like, little tiny small stuff is the best way to start.
There are lots of...
Oh, so lots of generative content uses, like, extremely sophisticated and brilliant AI.
And there's plenty of talks about that here.
A lot of that fails anyway.
Some of the best generative content is really simple stuff.
And this is why kind of the goal of this talk is to say PCG for anything, or for anybody.
For everybody, don't caffeinate before your talk.
So up on the right hand side is one of the most famous examples that's been made with software that I made.
This is Tiny Care Bot by Jomni Sun, which has 50,000 followers, maybe 60,000 by this point.
And it just tweets out little generative things about how it loves you and you should drink more water.
So you don't have to get complex.
Sometimes emotional design is the most important complex part of generativity.
So anyway, let's get started.
So yeah, so you want to generate something.
These are kind of the rough steps that you're gonna go through.
You're gonna understand the design space, enumerate your constraints, understand the process, pick a generative method, and iterate and be flexible.
This last one is actually kind of hard, and where the biggest groups will fall down the most.
So on Spore, we worked really hard.
We spent years making these incredible generators.
then there was no time to iterate on them.
Even in five years, you get all your technology working, it's doing well enough, and at that point, you have to put it in a box and ship.
But if you're willing to be flexible, and a lot of indies are, or if you're making a game jam game, you can often kind of follow your generator where it leads.
A lot of the silliest generators that were made with Tracery, my tool, are things that people just tried out once because it seemed like a stupid, funny idea.
Look up Endless Screaming, which is a bot that just endlessly screams on Twitter.
So a lot of the things that are really great about this are the things where you try it out because it's a stupid idea, and then you just follow the stupid idea when it seems to really be working, if you have the flexibility to do that.
But so imagine you do want to design something.
So these are kind of the first three things we'll go into.
First, this is a silly question, but what are you making?
There's a lot of different things you can make with this.
So once you've figured out what it is that you're making, and be really specific with this, the more specific a thing you're generating, the better you can make a generator.
I cannot write a novel generator.
I can write a trashy urban romance fantasy generator, because that's got more constraints, and I can actually start describing what that is, but I can't describe a novel.
Then you're gonna, well, so in Spore we called this making an artist in a box.
Because you're teaching an algorithm how to make art like an artist, and then back in the day when we used to sell games on these shiny plastic discs, you actually had to put your virtual artist on a disc, put it into a box, and then mail it to Busby.
And so on Spore we had this guy named John Simino who is a Disney animator, and we hired him.
And the designers of the Spore creature creator sat down with him and over the course of many, many, many hours, carefully talked to him about, so if you're designing a creature, what do you do?
And they you know they didn't take any answer at face value They asked him to dig further and further into it where he ended up talking about like how he draws a bean shape And that kind of sets the character of the the creature and then he Hangs a mouth on it and that sets kind of the the way that the creature is looking we ended up implementing all this in Spore and the sport creature creator was notoriously really really good And I think that was because they asked an expert about how he does things So I'm gonna talk to you a lot about additive and subtractive methods today.
So you're gonna build up a space of good stuff, remove bad stuff.
There's gonna be some possibility space, which is how many things are in your space, and expressive range, which is how interesting the things are.
There'll be link dumps throughout this talk.
Here's some more information on constraints if you want them.
This is in your zine.
And Mike Cook is giving a talk on this constraint stuff tomorrow at the Tech Toolbox, so ask him about that.
So part one, the IKEA catalog of generativity.
Why you might choose each one.
So here are a number, I think this is six, I'm good at counting, six different kind of categories of methods.
And the thing you'll notice about all of these when I go into them is, TCG is often presented as like this magical thing.
We thought really super hard, we have this algorithm with a capital A, and we're gonna show you a lot of really shiny screenshots of what that outputted, but you could never build it yourself.
A lot of these are really simple, especially in their base case.
You can build very simple things with them, you can build them very simply, you don't have to get complex.
So the first one is tiles.
Many of you have probably played Diablo 2.
I lost a lot of years to that.
Things like Spelunky, even other tile-based generative games like Civ.
We forget often that tile-based maps are pretty common.
What tiles work well for?
So tiles are, you have a chunk of, like you have a number of chunks of things and you can then socket them together to form a map.
So you can imagine kind of like the settlers of a Catan board.
They work well for things you can break up into equal-sized regions, and where the tile-to-tile placement doesn't need to be constrained.
You can have anything next to anything else and it's pretty much gonna work so you don't have to write more complex code for that.
But they also work well when you can get kind of some emergence from the placement of the tiles.
If I have mountains next to a good resource in civilization, there's some interesting gameplay that emerges from that.
But this is actually one of the oldest forms of procedural content generation.
There's tarot cards on the right, which are a tile.
Like, you can think of cards and tarot cards as tile-based procedural content for games.
If you shuffle your deck of solitaire and you put it down, you've now procedurally generated the game board that you're going to play a game of solitaire on.
And then on the left is one that I really like, which is also one of the first cases of IP infringement.
Mozart's publisher made this interesting piece, it's called Dice Music, and you have a number of bars of music, and then you have a lookup table, and you roll dice, and you reassemble a nice little polka that's never been played before.
So this is PCG that goes all the way back to like 1740.
So, you know, it's not just games.
So grammars, grammars are one of my personal favorites because I have this language called Tracery.
I have zines for Tracery, if anybody wasn't at my talk last year.
Self-promo.
But these are for when you wanna recursively make things with other things.
So, there's some SVG artwork and some little story descriptions that I made recursively with Tracery.
So, Tracery and other templating systems, you have a recipe, and maybe this is a sci-fi story generator I made, where it's what are the different pieces of a sci-fi story, all the way down to, okay, now I need an alien name, what are the different parts of an alien name?
There's a syllable, another syllable, and another syllable.
So you are recursively defining something.
And you end up usually getting a bunch of modular parts that you can reuse.
So I use the alien name generator, a bunch of other things in a lot of my work.
Tracer.io is where you can get more information about that.
There's also things like L-Systems, which you may have heard of.
The one on the bottom right is a procedural L-System generator that I made, but there's also things like Context-Free Art.
This is a subsection of Grammars where it's draw a line, pick out an angle, separate, draw new lines for each of those, pick out an angle, and kind of recurse that way.
So grammars are all about sort of this top-down structure.
There's also some neat stuff that's been done with what are called replacement grammars.
So this is if you have a dungeon that's a straight line, and you would like it to not be a straight line.
This is Joris Dorman's work, where he made Zelda dungeons by taking a straight line and then perturbing it in different ways.
So you know.
put a door and a key.
All right, now if you've got a section that has a key, you can hide that key behind another door, and you can recursively apply these.
He recently just published his indie game, which is called Unexplored, which uses this technique.
You can definitely learn more about this from him.
He's really good at this.
He actually used to be in academia and then went indie.
So he's got both the academic, heavy research focus, but also a really great indie sensibility.
So distribution, distribution is put down a bunch of stuff.
This is maybe some PCG technique that we've all used.
You have a level and you dump a bunch of stuff on it until there's stuff in your level.
It's really complex.
You can do that just by having random numbers.
But the trouble with random distribution is that it looks crappy.
Actual random, like very few things are actually random.
It clumps strangely.
And so often real distributions are hierarchical and clustered and they maintain spacing.
Even when we make fake gardens, we often preserve this technique.
So here's a Japanese garden where you can see that there's hierarchy and clustering.
There's certain kinds of trees in the sand and other kinds of trees in the rocks.
And so when I was on Spore, it's kind of we built up some folk knowledge about what makes that look good, because we did a lot of procedural distribution on Spore.
And here are three terms that I like.
You can confuse the heck out of your art director.
One is called Barnacling.
This is when you have a large object in your world.
There should be medium-sized objects around that, and very small objects around those, and you can kind of go as fractally deep as you want.
And sometimes they're the same kind of object.
Sometimes they're different objects.
You can see the monument on the right has all sorts of little rocks around it.
And this makes things look natural.
It makes them look like they're supposed to be there.
And No Man's Sky does this as well and supported it too.
There's footing where when two things intersect, there should be an awareness of them intersecting.
If you stick a tree into the ground, look the next time you see a tree.
It'll have dirt piled up around it.
It might have some twigs poking out.
Even when you stick a wall into a floor, there's like a little rubber gaskety thing, even on this really minimalist architecture.
If you don't have that, things don't look like they belong.
And then greebling is, this is a Star Wars term.
The reason that Star Wars looks different from Star Trek is because it has so much texture.
And so when George Lucas was going to Tunisia to film one of the Star Wars, he had a box full of things that he would glue onto other things, and customs made him label it, and he labeled it greebles.
And so gluing things to other things is called greebling.
There are lots of like mathematical ways to do distribution properly. You can look these up I usually just use a grid and offset it a bit because I'm lazy, but there's an official support way to do it Parametric, this one is also really fun because you can do a lot with it.
So a lot of these can be combined into different hybrid methods, but parametric is, oh, are you gonna play?
Yeah, now it's playing, okay.
So here's a little demo that I made of a parametric generator where I have this flower and this is an L system that I mentioned on the previous slide, but the parameters of the L system, like how much the flower's gonna spread and how much the color changes, are all defined by 32 different parameters.
So I have 32 different parameters.
and put those through an algorithm and out pops a little flower.
This is handy because there's, you can actually model this as an n-dimensional cube.
So if all of my sliders go from zero to one, I have this, if I had like a two-dimensional flower of like height and width, each point on that square would be a different flower.
If I have a 32-dimensional cube, each point in that 32-dimensional cube is also a flower.
But you can do all sorts of fun things like actually do random walks through your content and animate things that way.
And this is something that I did with that.
Wait.
Oh yeah.
So often things that use this are like the spore morph handles.
And I believe somebody who's in the No Man's Sky team can call me out on this.
I think No Man's Sky did this with their creatures as well, where they were largely parametric.
That they were just a bunch of sliders and a space of creatures.
A space of space creatures.
Oh yeah, so here's the slide where I talk about that.
Like yeah, you can model this as an N dimensional cube.
You can actually do procedural, what is it called?
Genetic algorithms.
And there's a bunch of cool stuff that you can learn about that.
You can also do really bizarre things, like you can take your possibility space, your n-dimensional cube, and actually run computer science algorithms to regionalize it in certain ways.
Find particular items in that space that are interesting and then make those as collectibles.
And so there's a project called Petals from UCSF that does some really awesome things with that.
Interpretive, this is a really cool one.
It says you start with some input, you run an algorithm to process that data into some other data, and you're basically complexifying stuff.
Spore did this.
That's the official Spore skeleton on the right, which is what the user was actually making, and that we interpreted it into the thing on the left.
So there's a lot of information about the Spore pipeline there.
So this is a pretty common issue to have.
And often, as a body is moving through space or as you're doing hand tracking, you'll end up getting lines of motion.
What do you do with those lines of motion?
You can interpret them in different ways.
So here's the spore pipeline and how that interpreted things, I think, I hope.
Okay, there we go.
And yeah, so we took the skeleton, we made metaballs around that, we took the metaballs, we sliced that into UV maps, we did animation over the right, and then we did painting on the left.
So this entire pipeline basically starts from this thick skeleton of points and edges.
And then eventually get a creature out of it.
There are all sorts of things that you might want to decorate in this way.
You know, obviously hand tracking would be really cool, body tracking.
There's nothing you can do to have a human artist draw stuff for each body, but maybe you can have a digital artist draw stuff for each position of a body.
And then of course things like maps in the real world, like Pokemon Go, or maps of your living room in augmented reality.
How are you gonna decorate these things?
Well, parametric, or sorry, not parametric, but interpretive stuff is there for you.
So there's a lot of examples of this, and I'm kind of running already behind, so I won't go really deep into them.
But there's things like Perlin noise, and you can change Perlin noise in different ways.
So this is taking the absolute values to get that nice crease.
Here's taking a polar offset of Perlin noise so you get the nice waviness.
There's a lot of geometry algorithms, so Voronoi and Delaunay are different ways to triangulate stuff, and you can make cool regions out of just having a bunch of points and then triangulating them in different ways.
I've used this to do a couple of maps for space games that I was working on and never shipped, and then there's also an island game that I made using these techniques as well, so Delaunay and Voronoi, they, figure out the closest regions to each different point and then they figure out the connections between those regions.
So it's a really cheap, fast way to make maps.
And there's good algorithms for this.
There's things like constructive solid geometry, extrusion revolution.
These are different ways of adding and subtracting stuff.
And you can use that to draw curves along things.
Here's a pendant generator that I made for 3D printing.
But you can also use it in games.
So I need to make some geometry that fits this curve.
These are often very difficult.
These are mathematically heavy.
But even in things like Photoshop and Tilt Brush, this is how they take a curve and they extrude interesting stuff along that curve, whether it's texture or geometry.
And then Metaballs are making blobs out of stuff and then you can do stuff with that.
And I believe, but I'm not sure that this is how Oculus Medium works.
There's also a whole weird category of like fractals and mathematics stuff this way.
These are low control, hide weirdness and not suitable for most games, but there's a group that does, a couple of people who do things like Miyakaguri and HyperNOM that do interesting things with impossible spaces with generative methods.
One of my favorites, just because I super love particles.
You gonna play?
There we go.
I really like particles and particle simulations.
So remember how I told you you can decorate a curve?
Well you can use particles to generate those curves and then decorate them in interesting ways.
So here I'm drawing some flowers with just a particle simulation.
And they look pretty and they're kind of fun to watch.
This is also how Spore worked.
Spore, we did a lot of our texturing with particle simulations that would then drag textures or kind of dredge out rivers behind them as they moved to a planet.
These also really go great with, wow that's such a slide.
They go really great with user input.
So I've got my hands and the one on the bottom left is I'm not sure where I was going with this game, but you wave your hands and there's birds that flock around it and the birds leave behind watercolor trails, so you're kind of like painting with a giant swarm of birds.
I don't think anybody else has done that with the Leap Motion yet.
But there's also things like cellular automata, agent-based simulations, physics simulations, so things like Dwarf Fortress and the indie game Bad News have just massive simulations of little people living their lives and they use that to build, to procedurally generate towns with massive history.
Yeah, and, oh okay, there's animation, nevermind.
Yep, so some animation for you.
All right, subtractive methods, on to the next thing.
So you've made a lot of stuff.
Some of it's good, some of it's not.
Again, we had this problem on Spore where some of our planets were good and some of them weren't because we didn't have time to iterate.
And so the way we hacked that was we, well, I, went through a bunch of the planets we generated and saved the seeds of the ones that were good.
And if you have seeded random number generation, you can then input the name of the algorithm, the seed that you're gonna do, and get the same content.
So you can actually.
to kind of whitelist a certain number of content.
It's often faster to do that than to make a proper algorithm.
Never worry about doing it the right way, just do whatever way works.
This kind of leads to something called generate and test, where if you can write an algorithm to judge quality, you can then generate stuff and throw it away.
You have to be careful with this because if your algorithm is too loose and your constraint is too high, you can generate forever and never actually accept anything, so you can hang.
So it's always better to do ranking prioritization versus throwaway.
And never use a fun equation.
Ask me later what that means.
You can also computationally explore the possibility space.
This is loosely called search.
You can brute force search, like find me the tallest creature that my stuff can make, or find me a level that has these properties.
You can just grind through a bunch of levels and search for the one that's good.
But you can do it in a slightly more sophisticated way with things called hill climbing.
Genetic algorithms are a version of that.
those in particular work best with parametric models.
There's also a little thing called constraint solving.
So you probably know of this from IK solving, of I have a limb here and a here, figure out where the limb should be in the middle.
There are ways to describe other problems.
So the one on the right is a little murder mystery generator that I had, where it was things like, you know, somebody is jealous if there's a love triangle.
If somebody's jealous, they have a motive for murder.
Give me a house full of 15 people, five of which have the motive for murder, one of which committed a murder, and which was not in the line of sight of anybody else.
And there's solvers for this.
Don't ever write your own solver.
If you find yourself writing a solver, this is often the way that really cool indie projects never get shipped.
It's the Northwest Passage of indie.
So be careful when you see that.
So yeah, congratulations, you've made a generator with a possibility space of really cool artifacts and good expressive range.
You win, right?
No.
So making use of generativity.
So you have a really great generator.
Maybe you can generate many things, but they're all mathematically unique, and you loudly argue to your players that they're all mathematically unique, and no, they're not actually all the same thing, but they aren't perceived as being unique, and is this a problem?
I call this the 10,000 bowls of oatmeal problem.
And Michael Cook's got a really great article on what that meant for No Man's Sky score, but also for us as indies.
But I think that sometimes it's a problem and sometimes it's not.
So there's different kinds of generative content.
Some of it's in the background.
If you have a bunch of trees, it's okay if they're not all unique.
Sometimes you just want perceptual differentiation, but I can tell that those aren't all the same identical tree.
They don't look like clone stamps of each other, but they're not super unique.
Sometimes you need things that are a little bit more unique, that there is perceptual uniqueness, so I can tell that the trees in this region are different than the trees in that region.
And then there's also characterful.
The test for that is would you write fanfic for this object?
If you would write fanfic for the generated object, which I would for some of the stuff that's coming out of my generators, the best one I ever got was an angry nun in a wedding dress from one of my patron generators, and I've written fanfic for her in my mind.
I really like this, there we go.
I really like this scene in the Matrix because it's technically in canon, it's a procedurally generated scene that somebody has made in the Matrix.
And the whole point of the scene is that you're looking at the woman in the red and you don't notice the threat around you.
The funny thing that the Wachowskis did with this scene, I don't know if you all know this, is everyone in the scene, aside from the one in the red dress, is twins and triplets.
So they managed to get perceptual differentiation without perceptual uniqueness.
So even there, they're understanding that you have the characterful woman in the red dress, but you can have some kind of repeated stuff in the infill.
So knowing kind of how interesting your PCG has to be.
All right, I'm coming almost to the end.
This is one of my favorite ones.
Ownership is so important.
Oh my god, ownership is a huge deal.
I call this the Victorian Explorers phenomena, which is if you have a big, wide, open, expansive space, allowing people to find interesting bits of this space, bring it back to their friends, label it with their name, and then hold it up in front of their friends and say, look how cool I am for finding, like, Smart Blatts squirrel.
You see this a lot in European museums.
So, let players take credit for your generativity.
Spore did a really great job of this.
Like, we promoted the heck out of players who had made content that was technically in the possibility space of our thing.
We could have found it if we'd looked hard enough, but instead we promoted the heck out of the players and gave them little awards and let them even make rewards for each other.
And there's games that are doing really great jobs of this.
So, like Dwarf Fortress.
does a really great job of letting people find the interesting content, so go digging for the interesting content, and then Half of Dwarf Fortress is played on these storytelling boards where people then present their content that they found, tell the story, curate other people's content.
So let your players become creators, curators, and retailers.
It should go without saying that this is amazing for Twitch.
Let people self-promote using your generated content.
And yeah, finally, data structures.
These make your life easier.
Tracery is entirely, like the tracery generators are a JSON format.
You wouldn't think that this matters, except that JSON is a really safe format.
So when I released tracery, somebody was, George Buckingham was able to make Cheap Osmium Quick.
which takes arbitrary JSON that Yahoo's on the internet have posted, runs that on his Node server, somehow it doesn't break anything, and then posts that to Twitter.
You can't do this with arbitrary JavaScript, although I invite you to try, and invite me, I'll have popcorn.
But with JSON, this is actually possible.
This also allows you to do things like A-B test generators, release new generative content safely.
And then also visualize your generators.
A couple years, I think last year maybe, there was a talk at the Narrative Summit by a group of guys who had done a game called Icebound, which is a big generative narrative project.
And during their project, they had made a whole bunch of really fascinating visualization for.
have we written enough content to cover this particular situation?
What are the different places where we could get to from this content?
And so they made themselves visualizations of how troublesome certain things were and how much left they had to write.
So that's a really cool thing you can do there.
So yeah, in review, here's this.
Allow users to claim ownership, where that, et cetera.
But this should be in your zine.
And if you're still interested in PCG, there's a ton of PCG going on here.
I even forgot to put one up on this slide that's the tech toolbox tomorrow.
So here's the PCG sampler menu of various, like GDC talks on PCG in various areas.
And yeah that puts me at exactly almost exactly time. So I'm going to leave this here, and I think we have 19 seconds for questions Yeah, we have time through for one question if you have a question come up to a mic in one of the aisles So I guess I get the one question, how often do you create something that's awesome, but not performant that doesn't run fast enough?
Generally, how do you deal with premature?
Optimization is the root of all evil, but So the question was, what do I do if I get something that's awesome but not performant?
I find another use for it.
So the thing that made that generated skirt, it's actually pretty slow, but how often do I have to run a thing that I'm going to then send out to print a generative skirt?
That can actually run quite slowly.
The performant stuff, be aware of it.
Yeah, that's a tough question.
I don't actually have a good answer for that.
Honestly, the simplicity versus good design, a lot of the stuff that really makes PCG pop, like this ownership stuff, that doesn't take frame rate.
So do really clever design around simpler stuff, and you will, people don't notice the depth of the generator often, but they do notice the design around it.
Okay.
All right.
And I'll be outside in the hallway, and then go to the speaker wrap-up room if anybody wants.
