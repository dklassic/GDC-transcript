All right.
Good morning, everybody.
Thanks so much for being here.
I'm excited to talk about two of my favorite things today, the brain and video games.
Although I admit I was excited about video games way younger than I got excited by neuroscience and psychology.
But anyway, my name is Celia Hodent.
A quick description of my background.
I've got a PhD in psychology.
I was a researcher in child development.
I researched how toddlers learn about arithmetics.
I started to work at VTech 10 years ago to create educational toys and video games.
I joined Ubisoft HQ in 2008, where I developed a training session called How Does the Brain Learn for designers, artists, and gameplay programmers.
I was transferred to Ubisoft Montreal to work on UX for Rainbow Six.
Then I joined LucasArts, where I developed UX practices until, well, I couldn't anymore.
And I've been at Epic Games for nearly two years now, developing UX practices for the studio.
So the content of this presentation is a mix from academic theories, Ubisoft Design Academy training, interaction with many, many game developers throughout my journey.
So user experience in the gaming industry is getting trendy.
So are psychology and neuroscience.
But what does it mean, really?
How to do it right?
Where to start?
How to know when progress is made?
What is the key brain knowledge that you really need and that you can apply to your game?
But most of all, why does it matter?
Why knowing about the brain can help you develop video games when, for many of you, you've been doing it for years?
So before we get into the depth of the subject, let's look at a classic test in psychology designed to understand how the brain reasons.
So here are four cards.
Each of them has a letter on one side and a number on the other side.
Two of these cards are shown with the letter side up and two with the number side up.
So here's what you have to do.
You have to define which card are cards.
You need to turn over to determine whether the following claim is true.
If the card has an A on one side, then it has a 3 on the other side.
Take a few seconds to think about it.
All right, so how many of you think we need to turn over A and 3?
Can you just give me a quick idea of how many of you think we need to turn over A and 3?
All right.
What about A only?
OK.
So in deductive reasoning, an argument is invalid if the premise is true, so in that case A, but the conclusion is false, so not 3.
So to verify that, you need to turn over A to verify that there's a 3 on the outside.
You do not need to turn over 3, as even if we found another letter behind it, it won't invalidate the argument.
The same way that you do not need to turn over C.
Lastly, you need to turn over 7 to verify that there's not an A behind it, because then it would invalidate the argument.
So in Wazen's study, not even 10% of subjects found the correct solution, even though we all believe we have good logical skills.
So if you found the correct solution, great job.
And this is not because the brain is stupid or not logical.
It's because the brain has evolved to recognize patterns and find shortcuts because of that we survived so far.
After all, the brain is very efficient for everyday tasks.
And the mistakes the brain makes are insignificant trade-offs in the scale of evolution.
However, as a game developer, this raises difficulties you must take into account if you want people to have a great experience playing your game.
This is why you need to understand the gamer's brain and your own.
That's what this talk is about, not telling game developers how to do their job.
You know that already.
It's about using neuroscience knowledge and user research methodology to constantly making you aware of these biases so you can make the best decisions for your game.
So you have to keep in mind that there's only so much workload the brain will tolerate.
The brain consumes 20% of the body's energy, although it makes up only 2% of a person's weight.
So the workload in your game must be dedicated to the core experience you want to offer, not in figuring out menus, for example, or icons.
That's why defining your core pillars and sticking to this vision is crucial to have great user experience.
Now always trade-offs to make, and perfection is hardly reachable.
UX is about making sure the trade-offs make sense for the experience you intend.
That doesn't mean your game must not be difficult or have any challenges.
Quite the contrary.
But the challenges must be about the core experience and nothing else.
Think about it as if playing golf with a green ball.
Might be spicing it up from some hardcore golfers, maybe.
But the golf experience is not about making it challenging to find the ball.
So here, I propose to talk about three important things you need to know about the brain that can help you on a daily basis.
Perception, memory, and attention.
So whatever you do, watching a movie, listening to music, playing a video game, your brain learns.
It makes new or reinforced synaptic connections.
Anything the brain processes and learns always comes from an input.
And in the end, it changes the memory of a subject.
And the quality of the processing depends highly on the attentional resources applied, which are also dependent on the emotions and motivation felt.
Although I won't really have the time here to address emotions and motivation.
A little disclaimer, this is highly simplified, merely an overview with a few examples.
The brain is not working in buckets like that, and making games is very complex, so is the brain.
But for communication's sake, and for the sake of a tired brain this morning, after all these parties and stuff, I'll just for each bucket explain how it works in a nutshell, point out the main limitations, and give an example or two of how this knowledge applies to game.
All right, let's start with perception.
So perception is not a passive window to the world.
Information is organized through a three-level process.
I'm just going to take the example of vision, because it's more visual.
But it's the same thing with all senses.
So it all starts with sensation.
So if you look up at the skies at night, what you're going to see is the physics level.
These are dots with a specific orientation, spatial frequency, and brightness.
The brain very quickly is going to organize the visual field.
This is the perception level.
The brain is really heavily wired to recognize shapes and patterns.
So in that case, you're going to see a soft zone.
The last level is the cognition level, access to semantics, knowledge.
So if you know about that particular constellation, you will recognize Earth's major.
And we can believe that it's always going bottom up, but actually very, very frequently, it's a top-down process, meaning that your knowledge is actually going to influence the way you perceive things.
I'm going to give you a little example here.
All right.
What do you perceive here?
Color stripes?
Street fighter characters?
So people who don't know about Street Fighter might just see color stripes here.
And if you're a fan of the game, you might see something different.
And here we are, all game developers and geeks, so a fairly homogeneous and niche crowd, yet who might perceive this image differently.
That's why it's important to know your audience, their prior knowledge and expectations, and make sure that what they perceive is actually what you intended.
And just like the black and blue dress that was very trendy on Twitter, different people are going to perceive reality differently because perception is a product of your brain.
Also, if you're colorblind, you don't give a shit about this slide.
About 10% of people have some sort of colorblindness and they won't perceive this image the same way other people do.
Perception is subjective.
So okay, perception is a product of the brain.
And here's an example of how you can use that knowledge to make your head and maze easier for the brain to perceive.
I'm gonna use an example from Gestalt theory, it's a theory of fighter perception.
And they got some laws that are super useful for any UI stuff that you're doing.
One of these laws is the law of proximity.
So objects that are near to one another in space or time are perceived as belonging together.
Like on the right, you're going to perceive small groups of items, whereas on the left, you perceive it as a big one, a massive block.
So if you apply it in games like, for example, League of Legends, if you look at the HUD here at the top, the elements here are perceived to...
You don't need to have lines to separate these buckets to understand that the number is tied to...
Like the six is tied to the icon of the sword, because they're closer together.
Same thing with the novel law, the law of similarity.
Objects with similar attributes, with a shade, color, size, or brightness, are perceived as belonging together.
So if we keep the same example from League, here when you look at minimap, you can easily perceive what goes together just based on the shapes and the colors.
All right, so here I'm going to use an example from Far Cry 3 of do's and don'ts using the gestalt nodes.
And before I go on with that, just a precision here.
It's easy to point out issues after the fact.
I only take that example because I played a lot of that great game.
And it's just illustrating my point in a great way.
And I know the Ubisoft people, so that's okay, right?
Okay, so the good practice here is like here in the box, all these elements that are close together are belonging together.
So here you don't need to separate them.
You really understand that the money, which part is the money, which part is the XP, et cetera.
So that's the law of proximity.
Here they use the law of similarity to show you that this is the points that you have and this is the points that you need to buy this skill.
A more, like a less good example is here.
So these are caramba points, and the diamond icon next to it is part of this, yet it's a little bit farther away from the rest.
So this can be weird because it's at the same distance as the skill points that you have, so it could be harder to perceive.
So also when you look at the skill tree, the first time that you look at it, you could easily perceive that actually the skill tree is organized in a vertical way because the icons are actually closer together on the vertical axis than on the horizontal axis.
So if we just pick that example of this skill tree.
And we replace the icons with my own made-up tokens.
We also add the little arrows.
That actually is pretty hard to perceive in the game.
We remove the background.
Okay, so here, according to the Gershat law of perception, you are likely to just interpret that as a big bucket or maybe more as vertical lines because it's slightly closer together on the vertical axis.
Now if you just apply the Gestalt law of proximity, you have a very low hanging fruit here, by just doing that.
By using the same space and applying the Gestalt law of proximity, you place the icons on the horizontal line close to each other, you make the icons have a shape that infers movement toward the right, and you don't need the arrows anymore.
So sure, it's not a big deal, and players won't do anything in the end, but this is just a way to facilitate the perception of that skill tree.
Another rule of perception that is really important to follow is the form follows function, and it's really important in design.
Ideally, you want to reach affordance.
What you see is how it works, because the less information your audience will have to remember about things that are not central to the experience you want to offer, again, the better.
And if an icon doesn't speak by itself, then the player first has to figure out what it means, then remember it, which won't be the case if the icon has affordance.
That's workload.
So it's very hard to design icons, and in RPG games, you need a ton of them.
Conveyabilities are not obvious.
Ideally, you want the form of your icons to naturally convey its function, and the same way for the majority of your audience.
You also want to avoid multistability or ambiguity.
This is also coming from Gestalt.
Some things can be perceived differently by different people.
So you might perceive here a rabbit or a duck.
So you want to avoid that.
Again, yes, people will eventually figure it out, but for every little piece that needs to be learned, it takes some workload that could be used for something else.
And what needs to be learned will need to be remembered.
And we'll see the problem with memory limitations later.
So unless your game's all about playing with perception, like Monument Valley, you want your input to be perceived easily and understood as designed.
iPhone is still using icons representing a stereotyped mental model we have for email and camera, even though this is not really how these things look like today.
Same thing with the telephone icon.
Like the phones we had don't look like the stereotyped icon we have on our phone.
So the form you choose might not exactly be true to the reality, but rather true to the mental model people have.
Seems easy and common knowledge, but look at the photos and game center icons.
This time it's totally abstract, so users have to learn and remember them.
Also, these icons are very similar to each other, as well as the music and iTunes sold ones, although have different functions, which makes it hard to differentiate.
So follow the FFF rule as much as possible to design your icons.
To maximize icons that are self-explanatory and don't need to be learned and memorized.
And test them.
So here's how I've been doing it lately.
And I will take an example from Fortnite.
Fortnite is an action-building game with RPG elements.
So we have a lot of icons, like for class abilities, for example.
A little disclaimer here.
Fortnite is very, very early in development.
It's pre-alpha.
And most screenshots and footage you're going to see in this presentation is coming from UX testing, so very low resolution.
So, we regularly take a list of icons and we ask our audience, or you can start by internal people that have never seen your icons before, about their form and function.
So to explain what you want from your participants, give an example on the first page of your survey.
So you show that.
Here's an example of an icon.
For each icon, you need to describe what does it look like, its form, and also what you believe it does in the game, its function.
So in the example here, the form of the icon is a heart with an EKJ graph inside.
And for the function, it could be, I expect using this ability would resuscitate my character.
So you give that example, and then you have, in your survey, one icon per page.
So I just took a snapshot of the survey here.
And make sure the order is randomized, because otherwise you could have an effect of order.
Also make sure that the icons are about the size it will be in the game.
So if it's going to be small on the screen, you don't want the icon to be huge in your survey.
It's important to do this with a population sample that represents your core audience.
There might be cultural differences, for example, West versus Asia.
Again, that's why it's important to define who your core audience is.
Some codifications might work with hardcore gamers, but not with casual gamers.
Although, generalize usually what defines common knowledge.
RPG versus FPS versus puzzle games, etc.
Remember the Street Fighter, Call of Stripes.
It's not necessarily about gender, age, or nationality.
It's more about common references.
Your ideal sample size would be 96, but let's face it, most of us can't really access that many people.
So half of them can give you good enough insight without increasing too much a margin of error.
If you're short on time and resources, test it with less people anyway, it's still valuable.
Just make sure the people you're asking know about the genre of your game and that they haven't seen the icons before, as you want to test how intuitive they are.
So before we analyze the results, it's important that you as a designer design the icons to answer the survey.
This will highlight even more the difference in perspectives, designer versus player, when it happens.
So here, this is one early icon in Fortnite that we tested.
At the size, it would appear on screen.
And so the UI designer entered the survey.
So for the form, it's a smoke bomb releasing a plume of smoke.
And the function of that is it throws a smoke bomb.
And so here are the results that we had.
It's just a small sample of the results because it takes too much space here.
You do not need to read that all.
But what you can look at it here, you can actually, unless again, you're colorblind, you can very easily see where the problems are here.
So here we found that for the icon, the form here has only 60% rate of correct answers.
And the problem here is not that they're completely wrong answers, but you have a lot of partially correct answers. Like people understood the bomb part of it, but they did not understand the smoke part. And so because of that, the functionality of this icon is not understood, because it's too ambiguous.
So in this case, the icon can be easily tweaked.
It seems that only the smoke part is not understood, so you can just create this part.
Let's take another example.
So here, the UI designer tells us it's a bomb superimposed on an old-timey alarm clock.
The function here is to deploy the matter collector, which is actually destroying everything and all the materials come back to you, so you don't have to scavenge manually everything.
So that's a functionality.
Again, as RPG elements, sometimes the functionalities are super complex.
And here's what people entered.
So this is an example when the form is working perfectly.
People understood the form, but the functionality is completely off.
So this icon needs a complete redesign.
So the function of this icon is immediately very hard to convey.
The designer tried something, of course he didn't have high hopes, but it's also good to try.
The idea behind the clock is that you gain time harvesting resources versus if you manually break all the stuff.
But people usually have a very different perspective about a clock.
So at that point you really have to change the icon completely, not just tweak it.
And you might need to use an abstract icon if the function is too complex, so at least it's not misleading.
You really don't want to mislead people.
So reality over assets is not what is really important.
What is important is how it's perceived by the majority of your audience.
Let's take an audio example here.
This is taken from The Dark Knight.
Listen to the bat cycle and think about how it sounds.
Ooh, you want to play, come on.
Come on.
Come on.
Come on.
Come on.
Come on.
So it sounds like it's infinitely rising, right?
What it is in reality is called the shepherd tone.
So it's overlapping tones fading in at one end of the cycle and fading out at the other.
It's annoying.
So it's very different from what we hear, actually.
And this was a platinum game in Super Mario 64, for example.
So if you try to get to Bowser before you got 60 stars, this is what's happening.
This is our Nintendo messes up with our perception.
Shippa-toom.
So when you test your game, be careful when asking the players about their perceptions.
For example, many players are perceiving the zombies in Fortnite difficult to aim at.
And the overall impression that we had was either because the zombies were too small or maybe moving too fast.
And this is what they were answering the surveys.
So the animation team was wondering what was really causing issues players were having to target the enemies.
So to test this question, we created a gym level about a shooting range.
It allowed us to test the variables in a standardized environment.
The participants were told to do as many headshots as they could in one minute, as the husks, the zombies, were auto-spawning.
So here's the video of that.
Three, two, one, go!
So this is how we saw that the problem was not an animation one, nor a characterised one.
It was mainly due to the passing through.
Because they don't have a lot of problems aiming at the zombies very early on, but it's when they try to go around the obstacles that it's a problem.
So it's the rotational value in the pathing code that was too sharp.
When the zombies go around an obstacle, it becomes very challenging to follow them because they do an instantaneous turn instead of a stop plan.
So analyze what people are saying, don't necessarily take it for granted.
Then my hypothesis is to test them by controlling all other variables to find out what's really going on.
So this is it for the perception part.
So a little reminder here.
How it works in a nutshell is like input is processed by the brain.
The limitations, just a few examples, there are more limitations than that.
But perception is different than reality.
And perception is subjective.
Lastly, applications use gestalt laws.
It's like very low hanging fruit you can do here.
And use form follows function.
I don't rely on what people say.
Alright, now we're going to tackle the merry part.
So memory works, again, very briefly.
It all starts with the senses, again.
So you have sensory memory.
This is where everything is like it's already pre-analyzed.
So it's part of perception and importance of attention here if you really want to process the information.
So once you draw attention to something, again, I'm simplifying here, it goes into working memory.
It's a short term, very short term.
When I say short term, it's like talking about a few seconds or minutes, not days.
Very short term, easily disturbed, and it requires, again, very heavy attentional resources.
And lastly, it goes to long term memory.
Potentially, it's unlimited in time and space.
Potentially only.
So this is the encoding part, and we have the storage part.
So here we're going to talk about the storage part.
and talk about how we forget things.
This is what we call the forgetting curve.
It was made by Embingos, a psychologist.
He asked people to remember by heart some pseudowords, and the variable here is the when he asked them to recall.
all these words. So he asked them, he trained them to remember all these words, and then the variation is when he asked them to recall the words.
Immediate recall, 100%, good answers, so no problem there. After only 19 minutes, it drops down to 60% of good answers. After only one day, you lose about 70% of the content learned.
So the forgetting curve is about long-term memory, are things that don't have much meaning or emotions fade in our brains.
Because this was not super meaningful to the people to remember.
And this is all about the neuronal Darwinism law, survival of the fittest.
Here, we're talking about synapses.
Players are likely to forget a lot of stuff in your game, especially since there's a known gap between the two game sessions.
We'll take a look at that in a minute.
But before you do, do you remember the iOS icons I showed you earlier?
Try to remember them.
So hopefully you did remember all of them.
You are likely already familiar with these icons, and I made you process this information.
However, I did not show you the telephone icon, but the camera one.
I only talked about the phone one. Did you catch that?
Because the brain is also good at making up false memories.
And can you tell for sure which icon is the iTunes store one and which one is the music one?
Maybe you can.
Then you rock.
All right.
So let's go back to the forgetting curve and apply it to games.
So let's say, again, very simplifying here.
You start playing game the first time.
This is your first game session, so ideally, your mastery grows with the game difficulty level.
And then you stop playing because, you know, you need to go to sleep at some point.
And what's happening is that maybe if you play it on a Sunday, you have to go to work, it might be like X days lag.
We don't know how much lag between two game sessions.
During that time, the game stays at the same level.
That's a computer.
But us, we are under the love-forgetting curve.
So when we resume the game, there can be a large discrepancy, and the player can feel downgraded.
So because players want to remember everything, there are some trade-offs.
As a designer, it's your role to define what we need to focus on.
For example, in Assassin's Creed, the designers decided that they did not want the players to remember the controls, so they are always shown on the head.
So if you look at the top right, you'll see that the mapping of the controls match the PSX box controller and it's always displayed on screen and contextual.
Therefore, there's no need to remember this.
Here's an example from Fortnite, where the search key is always displayed when in reach of a searchable object.
But beyond this obvious visual help, prioritizing the learning is crucial for a game.
So you can decide what you truly want the player to remember.
This is how we started doing it on Fortnite.
Again, very early in development, pre-alpha, those screenshots, footage from UX testing.
So Fortnite is an action building game with RPG elements.
You are the commander of your home base.
And by growing your home base, you unlock buffs and hero classes, and you send your heroes out on missions.
During the missions, you scavenge for resources, craft items, build defenses, then combat zombies.
So to put together the onboarding plan, I asked the designers to list all the things the player has to learn in the game and to prioritize what are the most important things for Fortnite.
You'll end up with a massive list, of course.
Here I'm just gonna show you some of the most important features for Fortnite.
You do not need to read that.
But once you have the list, you ask the designers to prioritize it regarding the game's pillar.
Then define the order in which these tutorials have to be taught and the level of depth needed to teach them.
For example, teach core movement in combat is very important, of course, but it's something that is usually picked up naturally by gamers.
So it's going to be taught early, but only through dynamic tutorial text that you won't see if you already started to move.
There's no need for deeper teaching for that element.
Building is something really important in the game.
It's one of the pillars, but it's harder to pick up.
So once you establish these elements, you know, if it's easy, medium, hard, and when we should have this tutorial order, depending on the weight, you can rearrange the list.
Okay, so let's look at home base one here.
So it's the first one.
Once the list is in order, you have to decide what's the onboarding plan.
For each feature, you need to adapt the player's perspective and understand why learning this element is important to them.
So home base is going to be player's persona.
It's medium difficulty because in some, many RPG games, your persona is actually the hero you control, but it's not the case here.
So it could have some difficulty learning that.
And for the player, what he needs is that this is me in the game, so put I in that bucket, put you in the shoes of the player.
I start by naming and choosing the banner for my home base.
And you do that for every feature of the game.
This methodology will allow you to make faster decisions and build hypotheses about the game and its experience that you will be able to test with play tests and analytics later on.
The last thing you do is building a narrative that will bring all the pieces together.
If you start with a narrative, which is tempting because we all love stories, you actually take the risk of needing to adjust your onboarding to the narrative, which could hurt the experience of the game.
Narratives should be at the service of gameplay and transcend the onboarding plan.
So you do that less.
So here's an example of how this process helped us to make a faster decision regarding the feature order in our early onboarding process.
So we had a choice to make at the very beginning of the game.
Should we start with boots on the ground?
Like, have the player, like, incarnate a hero and start breaking stuff.
The pros of that is exciting action while away.
The cons is that player can actually wrongly believe the first hero is the persistent element where actually it's home base.
Or we could start with home base.
The pros of that is that we set the expectation correctly and it gives medium term motivation because starting with home base, set a mission to get something for your home base so you know that you're gonna have that short term reward.
The cons of that is longer to start the action.
But home base is a player's persona in the game, what they grow, what is persistent.
So it's a very important feature for us.
So that's why we decided, so far, to go with home base first, as fast as possible, so at least expectations are set correctly for the player.
We know we're making trade-offs here, but it's really important for the experience that players identify themselves to their home base as soon as possible.
We decided to go through Homebase very quickly, three minutes top, and basically show the players a base they can expand now that it's theirs.
So they just have to name it, choose a banner, and then start a mission to gain rewards to start growing their base.
So prioritize the learning you have to define.
Prioritize the learning means you have to define what trade-offs are the least damageable to the experience you want to offer, because there are no perfect solutions.
And then to verify the player's got new intentions, we ask questions about the perceptions about after the gameplay.
But in a way, you can validate or invalidate an hypothesis.
Since our goal is to make home base meaningful, some questions are meant to find out that this is how are the perceived home base.
Of course, the order of these questions is randomly generated.
And we also ask questions right after the mission to check if they understood the concept of home base at its core.
We don't expect them to understand all the details at that point.
But you check to see if they understood what we tried to convey.
And afterwards, when you can actually have analytics, you can verify if actually, like in our case, people are using home base and building stuff in their home base.
And we went on with all the features.
For example, do we need to teach about scavenging?
Actually, in our playtest so far, including 13 years old, players immediately started destroying stuff with the stick.
So it was not essential to have a proper tutorial for that.
On the other hand, many players in tests were not seen crafting guns or making doors soon enough.
It's a problem because they were just building walls, and then they were stuck in their box, and they were destroying one wall.
So actually, it's important to know how to craft a door.
So we did tutorials for this mechanic since the game loses its fun when you don't know how to do that.
I'm going to show you some examples from a crafting building later in the presentation.
So here it is for memory. In a nutshell, it's encoding in storage, limitations for getting curve. That's the reason why the GDC peeps is always reminding you that you need to answer the survey to give you, to give feedback, because we don't remember this stuff.
An application, reduce memory load and prioritize learning.
All right, I'm hoping you still have your attention here, because this is what we're going to talk, attentional resources, and again, I'm not going to talk about other factors here, just the attention.
But before we do that, let's take a brain break a little bit.
I'm going to ask you to pick one card, choose one card, and remember that card.
Pick one.
All right.
I bet I can guess which card you picked and make it disappear.
Did it disappear?
Yes, but actually I changed all the cards.
Yeah, sorry, it's very lousy.
But magicians know very well how to trick your attention.
This is how they do their magic tricks.
This is called change blindness.
It's the failure to notice an object's change.
There's another pendant of that is unintentional blindness, the failure to notice the existence of an unexpected item.
So this is the example when you have to count the basketball passes and you don't see the gorilla while you do that.
So you have to find a way to ensure you have the player's attention if you're conveying important information.
By the way, did you notice that I put a gorilla on this image earlier?
Sorry.
So we are not carefully scanning all of our environment.
So this is not what we're doing. This is the reason why finding Waldo is freaking difficult.
Instead, our attention works like a spotlight.
Speaking of which, these spot flasks are killing me.
So we need to make sure that the player is not overwhelmed by multiple inputs and draw his or her attention to the important information you want to convey.
Multitasking is a myth, and it's actually not that simple to draw the player's attention to something.
However, when you learn, attention is a key component to successful encoding.
So you have to find a way to ensure you have the player's attention if you're conveying important information.
It's not easy.
So even though a lot of people now understand that multitasking is a myth, there are still a lot of games that fire multiple inputs at the same time.
Like in games where an NPC is talking to you while you learn how to drive a car, for example.
Here's an example in Fortnite, on boarding.
So there's a tutorial text about how 3Gen that pops up at the moment you get the first enemy encounter.
Sorry, it's low res again.
You have that gameplay tip, but at that moment the player is really not paying attention to that because he's got to freaking kill the enemies.
So we cannot really see that at that moment.
So, it's not when the brain has enough attentional resources to look.
It's when you want to show something, trying to get my train of thought, you want to make sure that the brain is going to be able to draw attention, to pay attention to that very thing.
So, it's difficult because in the game there's multiple things you need to pay attention to and this is where it's actually hard to make.
So true, the good thing in that example is that we're trying to cheat at a meaningful moment about regen health, but it's actually not a good call to try to draw player's attention when under threat.
Right after, still meaningful, and the player can actually pay attention and do it, is the way to go.
No multitask.
So another example of minimum workload and drawing attention is what I call the red overload problem.
So red is a great color to draw attention, especially in the West, to draw attention to dangerous, critical things, getting hurt, critical health, et cetera.
The problem is that red is often overused.
And when that happens, it loses attention-drawing advantages.
If too many things are red, then a red element stops to stand out.
So as we are developing the new Unreal tournament, we did a UX test on UT3 to check the problems the game had.
And so we don't do the same mistakes.
Turns out that there's a huge red overload when you're on the red team.
Your head is red.
Everything is red.
So it's harder than to spot the red feedback telling you you're getting hurt and you need to react.
So here, because everything's red, it's actually, it takes more time to see, to perceive that thing, which is actually the important information here.
So many PvP games have blue versus red teams, and gamers usually like this convention.
However, most of them don't realize the red team is disadvantaged versus the blue team.
Actually, analytics on Gears of War 3 showed that the blue team overall had a 5% better win rate than the red team.
Since we sold Gears, I don't have the data anymore, so we're actually looking at the data on Unreal, and we'll see if it's confirming this thing.
The best scenario to me would be to always be on the blue team and the enemy team to be orange, not red.
So red can be saved for the critical events.
So in Fortnite, we used to have enemy bars in red, and the red damage feedback was too far away from the right equal.
So we removed nearly all red signs and feedback except for critical information for the player, getting hurt and from where, and we put the red feedback on getting hurt closer to the reticle, where attention usually is.
So the enemy bar is now orange, and we saw unnoticed death rate getting much lower.
Again, this is just about adding clarity in the UI to reduce the attention workload.
Think about the green golf ball.
Prioritize what is important for the experience and remove all potential friction points.
And think about your worst case scenario.
Sure, it might not feel like Red Overload when one or two enemies, but it could later in game when it's getting super challenging.
So, one important thing here to remember, if there's one thing you have to remember, that would be it.
People learn and remember way better what is meaningful to them and emotional.
That helps to draw attention.
So, the thing is, the deeper you process information, so the more you focus your attention on something, the better you're going to learn or retain.
What it means is that you have to give context of learning.
Make sure that the player is always learning while doing it.
And you have to give meaning.
It has to be worthwhile now for the player, for his mission, for his life.
And this is different from the narrative.
So, I'm going to give three examples of what I mean here.
So, one of these examples is Far Cry 3 Blood Dragon.
It's an example where you have no context and no meaning.
It's made on purpose, so it's hilarious.
So, it's okay.
But, it's an example when you cannot actually do the things that you're taught, and there's no deep meaning.
Loading more training hints from the ABCs of War.
I fucking hate tutorials.
And this one is terrible.
I love that game.
So anyway, here's another example.
So Call of Duty 2.
Again, I'm using these gumpuls because I've played this game, obviously.
And it's just because it's illustrating one point.
I'm actually not pointing fingers here.
Call of Duty 2, here you have context because you learn by doing.
But the meaning is weak.
Very good, comrade. Always remember to use the star on your compass to reach your current objective.
Okay, Vasily. Let us see how good your aim is. Aim for one of those two teddy bears.
Good, now fire.
Good, now fire at the other one.
Good for short-range, comrade. But for long-range targets, a rifle is better.
OK, so here, when you talk, you can actually practice it right away so you have context.
The meaning is a bit weak because the teddy bears are not super threatening.
And also, you cannot really experience why.
Why really is it meaningful?
You cannot experience it right away.
One last example is from Uncharted 2, where you have context and meaning.
So what I'm going to show you is right after the introduction cut scene.
And you start, what you see here is when you actually start to have control.
So the player starts moving, there's no tutorial text about moving.
So you taught to jump at the moment, and it's really meaningful to you.
So of course, this is scripted, so it's more easy to do.
But we can actually apply that for all games.
So you want to avoid the learn then do, because having a lot of text, you won't remember it.
Even if you're a hardcore gamer, you're not going to remember it.
And what you try to do is have learning by doing.
And you have deeper process when you're in content, and you have greater motivation if there's meaning.
So that just improves the way we can remember stuff.
So of course, early on, you use whatever is already in your game to start building the onboarding.
And that's why, even though you know it's not going to work great, you do whatever you can at that development stage you are.
So if you have your hypothesis ready, you will actually gain much more insight from the early playtests.
which will allow you to improve the game faster and better.
So this is the example of building in Fortnite.
So back in the day, what we did for Fortnite, we knew we had to teach building because it was more complex.
And so we had that sort of tutorial mission where you had to protect a tractor and build around it.
So notice that they have a countdown, like it's 1 minute 40.
And the thing is, because in Fortnite everything is destructible, the first thing they try to do is destroy the tractor.
And here we actually tell them to protect it.
So it's counterintuitive.
So the player is like, okay, I can't really destroy that, so what do I need to do? Protect it.
So they actually have to, you know, build defenses around the barn or close the barn to protect it from the enemies.
So because the opening of the barn is not really matching the wall, the player is a bit confused, I'm editing stuff.
We're not going to go through the whole minute.
So here it is, it's trying to figure out what can I do, and we saw that over and over again.
So okay, places one wall here, and oh god, I don't have enough resources to build another wall.
And there's only 25 seconds left before the husks arrive.
So this is an example where the player is told to protect a tractor.
This is misleading, because everywhere else in the game, you have to destroy everything.
So you don't want foreign boarding to change the rules of the game.
Also, building a protection around the barn is unintuitive, and the player is in a stressful situation because there's a timer, and he's set for failure.
It's never fun to fail at the very beginning of the game.
So you have context, but you have poor and misleading meaning here.
So we changed it.
And now what's happening is we place the player in a pit, and he has to build his or her way out.
So there's a lot of resources in the pit.
The player can choose to destroy all the things or just build his way out immediately.
There's no time pressure, but you want to get out of here because Fortnite is all about exploration.
So you're like, okay, I'm done with here.
I'm going out.
Way to build.
You got out of that pit.
So in that case, the player is told to build his or her way out.
The player has all the time needed, yet is motivated to get out of it.
And we set the players for success here.
So here you have greater meaning.
Now, another example of a crafting tutorial.
Again, I apologize.
This screenshot is from November 2014.
Playtest, the low res.
I still wanted to show you that.
So at the very beginning of the game, we teach about crafting.
And at that time, we're just telling the player, OK, you have to gather resources to craft a pickaxe.
And after we say that, we just tell them to destroy rocks to collect ore.
And so we had that very step-by-step things players were asked to do, with a clear understanding of the end purpose, like craft a pickaxe.
So it's in context with poor meaning, and they had to do things in certain order, and they were not really... they didn't know how much rocks they need to collect, or how much wood.
So we changed that again.
And what we did here, this is a better screenshot, is we just give clearly the purpose for the tutorial.
You have to craft a pickaxe.
And to craft a pickaxe, you need to collect ore, and you need to collect planks, so wood.
And you know how many of each you need to collect.
And the player does it in whatever order he or she wants.
So this offers more freedom.
It's clearly told, the player is clearly told the purpose for that thing, so it's greater meaning.
So that's it.
That was the last bucket of attention.
So how it works in the nutshell, it's a spotlight.
Limitations, you have an attentional blindness, low attention span.
I'm hoping that not too many people are sleeping in here.
And application examples, it's minimum workload and give context and meanings.
And again, this is just a few examples and a few limitations.
It's, again, more complex than that.
So, all these brain limitations are actually at the core of user experience heuristics, and this is why it can help you, because it's all based on brain limitations.
So the brain is extremely good at making a quickly, at quickly making sense of the world with little information.
That's how we survived our predators.
So all the mistakes the brain makes are insecure.
are insignificant trade-offs in the scale of evolution.
However, it can help you gain precious time and avoid great caveats if you are aware of the brain limitations and can remember all of them.
You won't remember all of them.
So, to conclude, remember that the gamer's brain is heavily biased, and so is yours.
The problem with the brain is that not only is it heavily biased, but we strongly believe it's not the case.
We believe our senses are accurately convey reality when in fact what we perceive is a construction of our brains.
We believe that we have a good memory when research shows that we can easily forget, and even that we are very prone to false memories.
We believe we can efficiently multitask when research shows that we actually suck at it.
Most gamers will set the hud in your game as clear, but then they will fail to explain it accurately when asked to describe it.
You might believe you have a great design intuition, but are you sure you can rely on it?
And what about when different people of your team have different opinions?
How you can make the right choice?
So all the brain limitations we talk about are the core of UX heuristics, which you can use as a checklist to help you make faster and more enlightened decisions.
Of course, this is no precise science, as the brain is complex.
And if there was a recipe for cooking great games, we would know about it, and I would be out of job.
Heavily trained pilots use checklists, too.
It's not because they're un-good at their job.
It's because they know they cannot efficiently rely on their brains.
Creating a video game is not as risky as piloting a plane, but it is nonetheless a very complex endeavor.
Next time you're flying, think about this.
I hope that you learn new things about the brain and that this will help you.
I'd be very interested to get your feedback on all this.
Thanks so much for attention.
So we have about nine minutes, maybe less than that, because I'm guessing I need to give the place.
So if you have questions, you can go up to these mics.
Hello, thank you for your great talk.
I really enjoyed it.
At one point, you mentioned asking the players how they felt about the game.
Do you feel you understand it?
Do you not feel you understand it?
How important do you think that is compared to testing them to find out if they actually understand it?
Both are important, because you want to test the reality, you want to test how they behave and what's happening, but you also want to test the perception, because maybe on paper everything is all good, but they did not perceive it in that way.
So you want to test both, but you have to be clear on what you're testing with what methods.
Thanks, great presentation.
You just barely touched on the role of emotion in learning.
And I think that there's a whole topic in there, but I wonder if you could just take a little bit of time just to talk a little bit more about how games engage emotion and therefore improve learning.
Yes, I just talk a little bit about that when I say that whenever you teach something it has to be meaningful.
If you put the player in an emotional situation, of course it's going to raise your awareness.
That's a very complex subject.
Implicit motivation is really important, you know, your drives, this is all very in your very inner side part of the brain.
Music is also a great way to convey a lot of emotions.
So it's hard in one minute to describe all these things.
I need a whole new topic to talk about that.
But just showing, have meaningful environments to teach players.
It's really how emotions can help you focus on things.
Hi.
All right.
Thank you so much again for your attention.
I know it's a heavy load.
So thanks again, and have a great GDC.
