Okay, hi.
First, please turn the silent mode on, on your phones, please, okay?
And after the talk, please fill the feedback forms wherever.
I hope it's gonna get positive.
Okay.
Hi.
I'm super happy for being here.
I'm even more happy seeing someone here, and even extremely happy to see so much talent here.
Thank you for doing that, because this is my first time GDC ever, and of course, first time doing speech here.
So the stress level is high, but excitement, I think, is even higher.
So thank you so much for doing this, and thank you for being here with me.
My name is Kasper, and I do environment art at CD Projekt RED.
And probably some of you are thinking right now, that dude just misspelt his studio name right there.
But I did not.
Oh, sorry.
I did not.
That's how it's pronounced and spelled.
Project means project in Polish.
And I'm just saying that because we have tons and tons of questions about that.
That's not an issue.
It's like, it's a Polish company name.
So that's why it's CD Projekt Red.
Of course, you can call it CD Projekt Red also.
But it's GDC, right?
So we are here to share knowledge.
So right now, I'm just learning how to speak Polish.
Right?
One of the hardest languages in the world.
But the ultimate test for you guys is if someone's going to pronounce my last name correctly, I will buy you a beer.
Seriously.
Keep that in mind.
OK?
OK.
So without further ado, we're going to talk about how we managed to build Boclaire.
But before I'm going to start, I will ask you a few questions.
First of all, who played The Witcher Wild Hunt?
OK, nice.
Thank you, guys.
Who played Hearts of Stone?
OK.
I'm Blown Wine?
OK, that's actually good that not every single one played the game.
So to give you kind of the background about the things we're going to talk today, I would just play the teaser for you guys.
Good.
Thank you.
To Sam, the land of love and wine.
Exactly how I remembered it.
So whoever played the game, just do it.
The game itself for us was a huge challenge.
The things I'm going to talk today about was a teamwork effort.
So I'm just going to say that I'm super proud of being part of the best team in the world, both in Krakow and Warsaw.
I love you guys and hope to see you soon.
But clap your hands for those really cool guys back in our office.
Thank you so much.
Thank you.
OK, so it was a huge challenge for us, because as you know, Blood and Wine is an expansion pack.
But content-wise, it's a triple A game.
So we had a very short time for doing this, but lots and lots of things to do content-wise.
Also, it has a new setting.
So for those of you who haven't played the game, the basic game, Wild Hunt.
Wild Hunt is kind of a game that is not the place you would like to go for a vacation.
I can guarantee you that.
Even I was afraid of doing that sometimes.
So it was kind of dark, dreamish, dangerous, gory.
And art had to support this feeling of kind of dangerous, right?
But on the other hand, as you saw on the teaser, Toussaint is very vibrant, very colorful.
We used very saturated colors just to give the feel of happiness because it's actually a land of happiness.
People are drunk there all the time, drinking wine, that's why they're happy.
I would go there.
So this is the place for you guys to go to visit for vacation.
It was inspired, of course we got the basic idea from the books, but we got inspired by France and Italy.
You know, like lots of wineries there, super sunny days, it's awesome.
But on the other hand, it is the Witcher game, so we had to create this second bottom, this kind of darkish bottom, because again, Witcher Geralt is monster slayer, so he has to do somewhere there, right?
So it was a challenge for us.
Also, we had to create another city, which was different than Novigrad from the base game.
And we had some kind of art goals for us.
And those art goals, for instance, were.
We have to go with different things that we did in Novigrad.
Different architecture, different color, different overall feel.
And also, we're trying to make some improvements, like put more content there, put more crowds in the streets, and make the city feel even more alive that it was done in Novigrad.
But content, more content, packed content.
We're doing games, right?
And we got our tech goals also, unfortunately.
So we have to figure out how we can, those two goals, the tech goals on one side and the art goals on the other side, how we can...
find like a balance between those and figure out what we can do because those goals they kinda didn't like each other. They were going each separate way and didn't want to cross somewhere. So this talk basically is how we managed to marry our art goals with tech goals having around 700 megabytes for usage.
So I will cover how we design the city, what was our artistic vision for it, what kind of challenges we had and how we solved those, what kind of performance goals we had because we were trying to put the game on every available hardware at that time, and we also did a few improvements to our pipeline.
At the end, I hope, I'm pretty sure you're gonna have some time to answer your questions.
But we got a lot of things to cover, so without further ado, guys, let's go.
As probably you know, because you should know, that every single project should start with pre-production and planning.
It's safer like that, basically.
So our city, because I will talk monotonously all about the city itself, the basic idea was taken from the books.
Having the experience from Wild Hunt, we knew how extremely important it is to create a very friendly for the player navigation within the urban environments.
Because.
he has to have fun there, not be frustrated because he doesn't know where he's at. So we knew that this is something we need to figure and this is our key goal at this point. So we started with things that are in the books. And in the books we have of course the city itself, which also worked as the navigation point for the city itself from different districts. We took the Gorgon Mountain, which is the biggest mountain in Toussaint.
It serves the purpose of a landmark for the whole world, but also for the city itself, because it's very, very tall.
So a player can navigate seeing the Gorgon Mountain.
And Palace, which is kind of above the city, which helps us also to create this another navigation point for the player to keep an eye on going to this kind of north part of the town.
So having those three pillars, we start building the first layout.
We also knew that the town is on a slope.
So we figured out how we're going to have it set up at the first draft.
This is our first draft for the layout.
We divided it into four districts.
The reason for that was to make the structure more logically and easy to kind of support.
And also, it was easier for us to delegate the work for different artists throughout the different districts.
And here you got the same layout with those things that were, for us at that point, very important.
We had those green parts are the Locations that the story team and quest team provide us, like number one, it's market square.
Number two, a cemetery temple.
Number four, those are stables.
And number three and five, those are some kind of parks at that point in the town.
And number six is by the lake, a really cool place you can hang out with your wine in Buclaire.
We also have the streets or the paths the player could take at that point.
And those yellow dots, those were the gates.
So we started to test the layout, the block out, and this is how it looked at that point. We of course used gray meshes.
We also had some kind of more high quality meshes at that point because some artists were doing that. But we did everything we could to support that landmark navigation part.
In here you can see the mountain in the back.
Here, we're by the lake, and we still can see the Gorgon Mountain, but also you can see the palace over there.
So going there, you know you're going to the north part of the town, or to the palace, one of the most important locations in our game.
different location, different spot in the town, still palace is super easy spot for the player.
So he's got this different signs basically where you want to go and which way he should go.
The other thing that helped us a lot was the thing that the town itself was on a slope.
So basically the player could learn very easily and very fast that the higher he goes, the more rich part of the town he's going to explore.
And in our case, the Elven Palace has a different architecture type because it's Elven Palace, right?
So the higher the player goes, the different districts he will explore.
And the Elven Palace on the top...
kind of lower, we got the rich part of the town, even lower, we got the poor part of the town, and on the bottom of the slope, we got the harbor.
And also, those different districts had different architecture types, so also, it supported the different feel and uniqueness to every district.
So we had it done, basically, we're happy about that, we have it, probably thinking about, okay, it's done.
But was it?
How do you think?
Not really.
We had some spots very hard for the player to figure out where he's at, because it was hard for him to see the landmarks.
Also, at that point, we were trying to figure out how we can create very long distances for very long views, basically.
We were kind of thinking about that that might be kind of expensive, but still we were figuring, OK, let's do it.
Why not?
And here is the example of that you don't see Gorgon Mountain.
The small mountain over there is not Gorgon.
And you don't see the palace.
So just a tree is kind of not enough for the player to figure out where he's at.
So we have spots like that.
And also like here, very long street.
which I can imagine that it would look awesome in a game, but still it might get expensive.
And if you're gonna see on the left, we're gonna have the parts of market square there, which also we knew at that point that gonna get very dense with crowds and different decorations.
So we found those spots and we figured, okay, that might be actually too risky to leave it like that, we need to do something with it.
So we grabbed our shovels and start to play with the lockout again, with gray box in bed.
But also what we did, we introduced in-city landmarks itself.
We used the palace again, but still we used it even more.
We wanted the player to be actually kind of seeing the palace all the time.
Also, we went with City Hall.
At the beginning, we knew we were going to have City Hall in our town, but still we made it kind of bigger, taller, so it's actually going to serve as a landmark.
And we got Temple in the south part of the town, which also serves the purpose of getting the player to the different cemetery part of the Bucclere.
This is the concept art, by the way, we have, again, great cooperation of concept artists in our company.
So this, on the left, is like the first iteration of this Temple, the one on the right is the more in-game finished model.
But then again, it really worked.
I know it looks like a rocket right now, but still it worked.
We knew that even from the distance, the player can see something that will grab him and tell him go there if you want to go to the south part or the cemetery part.
And this is the same location as we saw before, but with the temple in the back.
You can see the rocket top tip of it in the back.
Again, next lake.
palace, Gorgon Mountain, and the temple.
So here is like a junction.
You know when you want to go because you see all those landmarks.
So the palace, again, at the beginning, we used it as a landmark.
But here, we kind of even more use it for the purpose of doing that.
We bent even the streets in the town just to make it push the player towards the palace, because it was super important for us to be able to go there very easily.
Next was the city hall, which was in the center of Buccleuch, here.
And that landmark, grab the player and tell him how to get to the center of the boucle or to the main square.
And here you can see going from the main gate, you are going straight to the market square through the town hall, city hall, town hall.
Different location, different spot in the town.
Still, we can see the tip of the building there that can guide you to the market square.
So we had again another passive iteration, things to cover, to fix basically, but then we got information about how things are going to get restricted by technical goals. And yes, we actually got accepted that long views within the city might get too expensive so we need to figure something out with those really long views and long streets. So again, we grabbed our shovels and went back to look at the things. And here is our famous long street.
But at the end, you can see we put some arches there to create this visual blocker for the player to break down the long line of sight.
And on the left, we also use this kind of eye-catching distractions.
So the player probably going to miss some things that will stream or pop or the load's going to switch.
So basically, we just wanted to figure out how we can make cool things with shorter line of sights.
and we did that a lot.
Like even here, it's not like 100% blocker, but enough for you to catch your distraction, distract your eye to figure out what's in front of you, not trying to pay attention to what's behind you.
And the reason for that was that we just went and tried to hide the poppings, swappings, meshes, and streaming meshes into the memory.
That was the whole thing.
And a really cool example here was the main square.
And the main square was actually the most demanding location throughout the whole game.
And why?
This is the top down view of the main square.
And right now the main square is in a state with wine festival going on within the story of the game.
And the wine festival itself, it's packed with decoration, location, we've got tents there filled with tables with food.
You've got many NPCs there, two stages, people are having fun, it's really cool, nice place to go there basically to have some fun.
But we also had one, two, three, four, five, six, seven.
We had this and seven houses.
And those houses were with interiors.
Later on, I will explain to you why that is crucial information for us at this point, but still, we got seven houses with interiors, full decoration interiors.
And the green spot, basically, it's city hall.
I'm sorry, club hall.
This is actually the solution we used for this yellow area here, which was super, super demanding.
And Glovehole is this visual blocker that we create to cut off the main square from the other parts of the town just to make it possible for the engine to stream all those different things into the memory because it's a lot of things. And it actually worked because we figured, we ended up with really cool location, really cool place, but still you cannot see anything one before going to the main square.
So the engine can get the time to stream all those things into the memory.
And once you're going to go around the small wall, you're in the market square, which is ready to go, ready to play.
And we did this a lot.
This is, again, our famous street, long one.
As you can see, we kind of pushed a little bit further that kind of visual blocker, the visual wall.
But still we have those distractions on the left.
So it's hard to figure out if the things are changing and popping in front of you.
Of course, we had to put a restaurant there, because why not?
And behind the restaurant, we got the actual wall, just to cut off the lake park with the center part.
And of course, we ended up with really cool structures for the player to explore.
Also, Bucclear is very different in verticality, so that helps us a lot also.
So here, it's hard for you to see what's above you.
But once you're going to get there, you're going to see everything is in the memory streamed in.
So like here, you've got the splats by the bank.
But you're going to see it around the front.
You're going to get there, basically.
Similar situation here, but the other way around.
It's hard for you to see what's beneath you until you're going to get, basically, to this part.
by the barrier. So those things beneath you, you cannot see right now, they're probably going to be streamed in the memory and all is working good.
We also, the things you saw before, we kind of mixed it up, the visual kind of distraction plus this different height variation. So also, you probably don't want to see things that are going to be.
popping there because of that structure.
And the last thing we did, all the time, we did bend the streets.
First of all, it looked very natural, and second of all, it actually breaks the line of sight pretty well and looks really nice.
So it's not like a straight line, you need to take at least two turns to see the end of the streets.
So in that show, for this part, we knew how we need to control our line of sight, our visibility.
On the blockout itself, we had tons of different teams working, like story team, quest team, audio team, different mission designers team, and they provide us with tons and tons of feedback.
And that feedback for us was like a gold, because we're always trying to figure out how we can improve the things we are doing here.
And we were trying to get the results, which was the high quality block out at that stage, right?
So I have really cool examples for the feedback.
Like here, we are going from point B to A, and we just move those houses away to create this small path here, which is kind of basic idea, right?
But we didn't see that before.
We were going all around from point A to B with those red lines.
And those guys tell us.
It's going to get boring, it's going to get frustrating.
Do something with that.
We did.
Super easy spot, super easy fix, but it worked.
Similar here, from A to B, it's super short right now.
But think about going from B to A, all around those different streets.
It might be a cool one, two or three times, but 20, 15 times, probably not that much.
So we're trying to figure out how we can give the player more options, and more choices, and more exploration within our booklet town.
And the last one is kind of more hardcore, because it was done.
just before the launch of the game, we're going from A to C right now.
So basically, we're going from the top part of the city to the harbor part.
And before, you had to go all around with the red line.
But right now, you've got a really cool view, and you've got a highway to harbor.
And it was a risky decision, because it kind of cost us some time to do that.
But still, it was totally worth it.
Because right now, it's much easier to get to the different parts of town and faster.
So all those things we did led us for this layout, basically.
This is the final layout in the game you're going to see, you're going to play.
So the old one versus the new one.
On your left, you're going to see the old one, which was very simple, probably not that exciting.
But the one on the right.
Probably going to get some much, much more fun there, more options.
But still, if you're going to figure out the number one and two, so cemetery and main square, the locations are in the same spot that was before.
The same goes with number five, number six, and number three.
Those are the same locations, but still, we figured out how we can make the player have more fun, more choices, more, you know, optional ways to go there.
So that's why we led us to this kind of more open structure.
So we knew, again, how important for us was the navigation and that that is the key for us.
Because, OK, we can do very nice, pretty things, but still we're doing games.
And the games need to be fun.
So we had to create the fun.
And navigation is part of the fun.
Also, for the tech part, we knew how controlling visibility for us is important, so we did a lot of things to be sure that it's going to get optimized well.
We never ever drop the feedback down, we always try to incorporate as much things from the feedback as we can and try to improve the things we're working on right now.
And we were trying to find as much problems and solutions for the problems as early as possible, even on a blockout stage, on prototyping stage.
So that led us to the final block out.
We're happy about that.
We were thinking, OK, let's do next steps.
And the next step was to actually build the city, actually populate the city with cool, cool art.
First step was for us to divide the whole city into four districts again.
The yellow one, the yellow part, it's Elven Palace.
The red, it's Upper City.
The purple, it's Poor Town, basically.
And Harbor is the green one.
The reason for that was that those different districts had different assets, different characteristics and different uniqueness to it.
So it was easier for us to pack the different assets into one group and separate those on different districts.
And also it was easier for us to separate the work for different artists on different districts.
budgets. Everyone loves budgets, especially us, artists.
So we had the basic numbers from our great team at TechArt.
Those were the numbers we were working with because this presentation, of course, is from an environment artist perspective. So we had 200 megabytes for meshes.
Altogether we had 500 megabytes for textures from which...
200 megabytes was it called Resident Textures, which for instance were proxies.
Because we're doing open world games, so we have a lot of content like Fireway Village or Fireway Architecture or all those different woods, forests, terrain, all those things have to be visible for the player all the time.
So that cost us a lot also.
And you had the 300 megabytes for the things we were actually creating.
for the content for the CD.
Chunks itself, those are material instances we used, and we had half a million triangle budget for only environment art.
Those numbers right now are the things that were kind of, for us, like environment artists.
I'm pretty sure TechArt did a tremendous job kind of doing whatever they had to do with those numbers, but those were the things, those limits, we were kind of keeping our eye on.
So the next question was how we can actually navigate how far we went or how far we can go or where we're at this point with textures, with memory, with meshes.
And we figured that we're going to find some locations that are very demanding.
And if those locations are going to get under the limits, we were thinking, OK, so probably all those different parts of the game also going to get optimized enough.
So we picked six.
The fourth one was harbor.
It's demanding because we got market square there.
We have all those different decorations there.
And it was packed with content, with NPCs and content.
The same here, lower city, different assets, different interiors, many NPCs, very dense content on the streets.
Upper city the same, but different architecture right now, different assets.
Main square, as I said before, very demanding location.
Temple.
Because on the top we've got cemetery, on the bottom we have catacombs, it's all surrounded with houses, with interiors.
Stuff is really dense over there.
And the last one was Mandragora, which was this kind of rich people party place, with view to open to the whole Tucson.
So we had this kind of plan how we can see how far we went or how far we can go, but still we had to be very careful with how we can manage that.
We still wanted to have sharp textures, we wanted to create things very efficiently, and we still wanted to create a lot and lots of visual variety and customization and uniqueness.
So we get reports like that every week, sometimes even twice a week from our art QA guys.
And it looked like that.
This is one of the reports from the early process of populating our game.
So we had like this, and that, and that was over limits.
So right now, we know why we call it red, because everything is red in our limits.
I will give an example why it was so, because this is just one house we used in the upper town of Buclear.
Of course, unless you see the concept art in the middle, it's a simple mesh in Maya.
And on the right, you can see the house in the game.
And that house looked like that, just the exterior part.
It covers over 12,000 triangles.
It had 51 shanks.
Mesh covered over three megabytes, and texture was over 14 megabytes.
That house had interior, two floors, bedroom and living room.
And only decoration, I mean only the beds, only the chairs, only the furniture, only those carpets, all those things, only cost us only 155,000 triangles.
Over 45 almost megabytes of texture memory, almost 27 megabytes of mesh data and chunks, it was 157.
But on that, we also had walls, because we had to have walls, right?
Don't need the walls, those cool walls, wooden walls, cost us over 41,000 triangles, texture data was almost 14 megabytes, and over 12 megabytes for mesh data.
So just to put the perspective for you guys, just one house with two floors for the interior looks like that.
I figured it's gonna get hard to create Booklearn with just only two and a half houses.
Why not?
Let's do it, right?
So as you can see, I think that it doesn't need an explanation more.
So what to do? This was the question, what to do right now?
But we were, again, we were very super short with the time, so it was hard for us to reinvent the wheel.
We just tried to make the perfect wheel.
So we used the techniques we used from the Witcher and kind of tweaked it to make it, for us at that point, better and more perfect.
And the solutions for that was basic stuff.
It was streaming, it was lots, and a few technical.
Now let's go to the tricks.
The basic setup we did for the meshes in the town was that when you're over 50 meters away from the house, we're going to only use the proxy in the memory.
When you're between 50 and 20 meters, you're going to have in our memory the proxy and the LOD1.
But when you're closer than 20 meters, you're going to have the base mesh, so the most demanding mesh, plus the interiors.
This is the basic set up.
We, of course, customized the set up because the streets were shorter and longer.
So we tweaked that.
But this is more or less the basic one.
Same house, just different paint job.
But you can see how costly was those house.
I love these zeros, so this most detailed one.
was almost 30,000 triangles.
LOD was kind of half, and the proxy itself was kind of less than 5,000 triangles.
I will cover texture later on, but just to keep in mind that the proxy itself has the baked custom texture only for the proxy, and it costs half megabytes.
For the interior, we had two lots.
So the one that's detailed, the detailed wall, and the other one, the loaded one, was just plain walls.
Because if you could go away from the house, and some NPC is gonna figure, okay, I wanna go into that house, we just didn't want you to see pure space, emptiness.
So the wall discovered that.
And the crash itself was also getting streamed out very, very fast.
So to not to show those different things popping and switching into interiors, we had to create some kind of, you know, illusion that the interiors are still there, but it's not.
And we used this parallax shader.
So this is a simple plan, there's nothing inside the house right now, but it gives you the illusion that the interior is there, so you think that, okay, there's a room there, I probably might go inside.
And you might, but right now it's nothing there.
Bless you.
So we had those tricks, we had those solutions, we had those tools, so are we clear of risks?
Are we just going for vacations right now?
Not really.
We also need to hit smooth frame rate for all the hardware.
You're putting the game out.
We still have, we still had and still have, big long views all around the Tucson, packed with meshes.
And the scenes were seriously heavy.
Like this one here, you can see we got the town, we got all the different districts below us, we got the different locations in the back, on the terrain, on the foliage, on the water.
It's heavy.
But we used the same technique we used in the Witcher.
And that was the support from Umbra.
We used it.
And it helps us a lot to get this rendering time lower.
And from our point of view, how we prepared the meshes from Umbra was that if you're going to go and see the house like that, our famous blue house, let's just say you're going to see only the top part of the house.
So the Umbra will see only two meshes right now.
And the Umbra will render almost 3,500 triangles.
But if you're going to see the middle level and the top level, we're going to get more meshes to render, and the overall triangle count, we're going to get close to 10,000 right now.
And of course, you're going to see the whole mesh is going to get over 13,000 triangles all together.
But still, it helped us a lot.
And the other cool thing here is that we ended up with cool Lego blocks, different pieces for the house, that we could build different variations from the same spots, the same blocks, parts, puzzles.
And that gave us the tools to create much more variety for our houses, having the same meshes.
Was a win-win situation right now.
So we had that feeling that knowing our limits gave us enough feedback to figure out how we can approach and what kind of things we can do to fit into the limits.
We again used the techniques we used before with kind of a twist to fit our needs at this point even more.
Tremendous support from our tech team.
We used Umbra to improve the rendering time.
And with that, we got even more customizable assets for us.
So we had the meshes done, right?
But right now we need to figure out how we're gonna paint all those meshes and those big, flat surfaces.
We still wanted to go with twice as dense texel as it was in the Witcher.
We still wanted to have very unique look to every single house.
And we had lots and lots of big surfaces to cover.
Just to put it in perspective, this is the same house, just back of it, one wall, all those different floors.
In our engine, 1K texture covers, texture, not material, texture covers 0.6 megabytes.
And we wanted to go with 1K texture on every four square meters.
So if I would like to create one custom texture for the wall, I should go with five or six K texture just for one wall.
So four sides of the same house would cost me around 72 megabytes of D.
texture memory.
So then again, it's kind of like that.
It's impossible for us to get four houses and build the whole town with four houses.
So we figured that's impossible for us.
We cannot go with custom textures and to figure out a way of doing those differently.
And again, we just couldn't afford that, but still we will not sacrifice our art vision and uniqueness and customize look to every single asset.
So again, we drove to our friends at TechArt, and we were talking about our needs and our things, what we want to do.
And we came up, basically they came up with a really cool solution.
We called this BlanchTrader.
It's of course a vertex trader.
This is a setup for this upper rich town houses.
It's going through the clean plaster, throughout the bricks to the kind of...
clean plaster bricks, whatever, but it worked perfectly.
Those textures were mixed in between with those black and white masks.
On top of that, we could put the tint over on any color.
That's why those textures are so monochromatic because it was easier for us to put the color over it.
And on top of that, we could put, we call this pattern.
It was kind of a decal of having this final touch of uniqueness to every single surface.
And it worked, it was really nice.
It worked over the bigger assets and small assets, of course with different set of textures.
So the first step was, of course, in Max, we had to paint the mesh as we wanted to, to make it look cool, unique, and just to be happy with it.
So it's, the things probably know how it works, but it's enough for the first step.
And after the paint job was done in Max, we had to grab it into the engine.
This is the example I'm gonna use because this house is super cool.
It used all the layers for the material, all the different tricks.
It's looking cool, kind of damaged, weathered, but it looks very characteristic, very unique to the other houses.
And again here.
After the basic painting is done in Max, we had to jump into the engine.
So here we could overlay any surface with any color.
You could go 100% color without textures and it would work.
Of course it wouldn't look good, but still it was possible.
And here it's very cool to give it like a very subtle tint to overall color just to give a base for further tweaking.
Here we got this kind of yellowish weathered color for the whole house.
And then, okay, and then we can go over the overlay with dirt.
We could overlay the dirt on every single different layer of the texture.
So, and of course we could kind of change the UV for it.
So you could make it unique and custom to every single surface with overlay this dirt.
It has to be subtle of course, it's not like this.
So I'm going to go probably with 0.2, it gives that very cool unique look to it.
And then we could go and give a tint, color tint.
color tint to the different layers of the materials.
So for instance, like here, we just wanna go with this yellowish color only on the plaster, not the bricks.
So we can figure out which layers are the plaster layer and don't give a tint to those things beneath it, those bricks, basically.
And of course, you could go with whatever color you want to go, so it was actually really fun to paint that.
the model itself in Max and then in our engine.
It was super cool fun to make it look very unique.
So here we're gonna tweak and just paint the plaster and don't paint the bricks like this.
And then also we could play around with contrast of the mask so that blending between materials is gonna be more or less seamless or give it more natural action, you know, scratchy feel.
And the last thing we could do from this basic set up was that we could give it, hold on, yes, we could give it an AO overlay. It was kind of faking it but it gave us this kind of extra depth to any object we worked on. So it was really nice to give it some subtle AO for those things that were standing out.
So this was this very basic setup from the max part to the in-engine meshes.
And as you can see, those houses here, they share the same materials, but they look very differently.
They got different decals, different patterns, different colors, but that is all in the shader.
Those decals are put on top of it, but still we could get different variations, different unique look and custom look using the seven textures.
For us it was the time saver and basically product saver.
So again, knowing our limits gave us the tools and things that we need to figure out how we want to do things from the artistic point of view and being between the limits.
And the solution was this blend shader we got from TechArt.
We did it not and didn't want to sacrifice the art vision we had.
And also we have even more customized look for the assets within this pipeline of ours.
So we had the meshes done, we had the layout done, we had the texture work done, and now we had to figure out how we can do, in a very fast time, the open world part of our game.
And this time, not the tech was our enemy, but the time.
In our studio, we are 100% handmade feel ready.
We're doing everything to make it feel unique, custom, and handmade.
And we did that with The Witcher.
And we didn't want to sacrifice that.
But still, we knew how hard it is and how time-consuming it is to do everything by hand and everything unique.
So we wanted to have this golden pipeline very fast and handmade.
And we need to figure out how we can speed up our plan play we had with the Witcher.
And the basic solution was the entity system we had in our engine.
So the entities are like a set of groups of different assets that some artist is doing.
And that is very easy to customize, change, swap, and do whatever you want to do with it.
For instance, here, I hope you're going to see something.
It's very dark.
those green tinted things are the parts of the decoration for this house. Here you're going to see it even better. So some artists spent probably some time, probably a few days doing that but the deco team, we call it the deco team, they did a tremendous job with it. Very cool job. So they decorate this house, they make an entity.
So it was easy to make this, grab this, and change it.
Like here, for instance, we have this table with food.
So if someone's going to want to have different variation of the table with food, you don't need to grab the same, you don't need to grab it from scratch.
You can take it, copy it, and just make some tweaks, change it to make it look unique and different, but in a much, much faster time.
Like for instance, here again, we get the merchant stands for harbor part.
I hope you can see how dense it is and with detail, how detailed it is.
Someone actually spends a lot of time doing that.
But like me, someone who needs to actually later on decorate the whole environment with different decoration things, it would take me like probably months doing a market query and putting all the different fishes, you know, rolls on vegetables in the basket.
So that gave us the opportunity.
different team, deco team, that did a great job with it, provide us with those deco sets, and I could just drop and drop those onto the level and just figure out how I can create the environment, the layout, and things that the player's gonna explore.
I didn't need to spend days, weeks, on putting the fishes on the table, which is a cool job, but I didn't have time for that.
So that gave us this kind of upper hand for the creation of the whole environment here.
I actually spent like three minutes doing the market square here, so it looked like that.
So for the player, you can see it's very dense in content, very dense in detail, and really looking cool handmade quality.
But for me, it was actually three minutes to finish this out.
I don't know how long it would take me to, you know.
play with those different small details.
So yes, we did it.
We made it faster.
It was a very smart decision because we made it faster, but we still kept this handmade quality to it.
And it was kind of this automatic solution, but still we didn't want to sacrifice the uniqueness to it.
And it actually helped us to decorate the locations much, much faster than it would to create every single spot by hand from the scratch.
So just to sum this up, we started with pre-production, and that gave us the importance of navigation.
We knew how important it is to get the layout done properly to support the navigation for the player, just to give them fun rather than frustration.
And we did blockouts, and we tweaked the blockout as long as we figured that the blockout was going to work pretty nicely.
At the beginning, we were able to identify and solve technical problems even on the prototyping stage.
And we were iterating as long as we figured that the things we did right now are good enough.
Thanks to knowing our limits, we knew that we need to figure out a way to do...
art as we wanted to do.
So we didn't want to sacrifice the art vision, but still we had to maintain within the limits we were having.
We used those things that we knew, like streaming, like LODs, like the tool Umbra, and upon that we improved those things to fit our needs even more.
And we had our blend shader, which was the direct solution to the texture needs.
for Buclair and we also were able to very easily improve our decoration pipeline with the entities and deco sets.
We achieved actually still long vistas over Tucson.
Even though we closed the streets in town, still we have a lot, a lot of open spaces and lots of views throughout the whole Tucson.
We have the unique character of assets, every district look different, and yet it was optimized enough to hit the limits we had.
So.
Also, we improved the textual density.
It's actually twice as dense as it was in The Witcher 3.
We actually have much more dense crowd system in our game than there was in Novigrad.
And there is tons and tons of content throughout the streets.
And also, we were able to make it the fast education pipeline throughout the whole world.
So the takeaways from you guys from this talk, I would say, I hope that some of those techniques or the things I talked about will also improve your pipelines or your techniques or things that you're gonna do.
But my personal takeaway would be that don't be afraid of iterating.
I know how much it sometimes gets frustrating to be doing the same, those things the same, the same all over again.
But in our case, every iteration pass, took us further to the better quality we did actually.
We never think that the first kind of trial error is going to be the best one, so don't be afraid of that.
And also, to put out the game so fast, we had to have really good communication between the teams, and I cannot stress enough how.
team work and communication between teams is important to get things done efficiently and fast.
So, if there are some questions, this is the time right now.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you so much.
Thank you.
more details on your LOD creation pipeline?
Okay, so the question was, what was our LOD creation pipeline, right?
Okay, so it was mixed.
There are situations where we had to go with doing the LODs by hand because it has to look really cool, but we also use Simplygon.
and simplygon helped us to also make the LODs faster, but there were cases where we had to go with handmade work with the LODs just to make it really look nice.
Is it okay for the answer?
Thank you.
Hi.
Hi.
I'm new to environment modeling, and earlier you had mentioned you were from Poland?
Yes, I am.
With a Polish last name?
Yes.
Okay, okay, yeah, go ahead, go ahead, go ahead.
Kaspar Nipokoltsiki.
It's close enough, but not there yet.
But thank you for trying.
Okay.
Thank you.
Hi, so.
Hi.
Obviously, while working through this, you found a lot of different workarounds for the problems you guys encountered, but I'm sure.
No vision is always 100% complete at the end, and especially with the time crunch at the end, I imagine there were still plenty of sacrifices that you made, so I was curious, what are the big tips you have on dealing with that as a team and keeping morale high when clearly everyone's doing the best that they can, both with the technology and the art vision, and there's some things that, no matter how much you would like to hold onto.
you can never quite get across?
Well, first of all, I think that as in every artist, there is always not enough time to do the things you want to do, as long as I want to just make it better and better and better.
The first reason is to, the first kind of thing is to say stop, it's good enough.
I know it's super hard, but it has to be done like that.
It's never going to be for you good enough.
As far as it goes, as you asked about the morals in our team, you know, We got the hype high after the Witcher 3 was released.
We knew how the game is good and how you guys love it.
Thank you so much for that.
So we knew that it has to be the quality game.
So I think that most of us had it in the head that we have to deliver.
So I think that we're trying to keep each other in a friendly hug with not getting down.
But still, it was hard work, but we knew that.
it's going to pay off basically.
So I don't know if that answers the question actually, but it does?
OK, thank you so much.
Thank you.
Thank you.
Hi, I'm a huge fan, so I thought I would say that.
I'm a huge fan of your very first one, so I thought I would say that.
Also, I work at Eidos and I'm a level designer, and I was wondering during the blockout phase, is it the artist driven only or do you work with level designers?
That's my first question.
How do you keep level designers from busting the budget as well by adding their stuff?
Do you have any process for that? Because I know I did.
Okay, so the first question was, did the level design was done by artists or designers, right?
Or is it a collaboration or does the level designer have a big impact on the layout and the landmarks and basically the look of the city?
Or is it artist driven mostly or a collaboration?
During this project, level design team was part of, we call this localization team, so, location team, sorry.
So it was like artists and designers sitting in one room doing the environment.
So some of the work was done by artists and kind of guided by level designers.
So it looked like that, but we all understood how important it is to get the layout done and the navigation to work.
So it was kind of cooperation between the teams of designers and level designers and basically also environment artists.
And the tips on how to not break things down.
I don't know.
I think it's just common sense or just the experience of the things you do.
I know we had tons of situations that something was broken down because someone did something.
It's normal.
But still, we're trying to figure out how not to do it even more or not to repeat the situation like that.
But I don't have a golden rule for doing that.
I know that sometimes in my studio they wanted to prevent level designers from adding hard stuff, but it was never done because it's too hard.
We add NPCs to NPCs that can be...
Yes, yes.
Also I have a couple of Polish friends at my studio, so maybe I can pronounce your name right?
Sure.
Not sure.
I have a Casper at my studio actually, but this is easy.
Oh, this is hard.
Niepokorczykowski?
Close. Close.
But thank you, thank you for trying.
Thank you so much.
Thank you for talking to us.
Thank you.
Hi.
Hi.
I actually didn't have a question, just wanted to say the game came out amazing.
So, thank you.
Oh, thank you so much.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Again guys, thank you so much for having my first DDC this much fun and I hope you enjoyed the talk.
Thank you so much.
