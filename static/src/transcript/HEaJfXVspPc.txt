All right, good evening, everyone.
Welcome to Far Cry 4, Gameplay Team Workflow, Iteration, and Philosophy.
Now I was asked to tell you guys to please turn off your cell phones and rate the session after we're done.
Now that this is done, let's get started.
So first of all, I'd like to introduce myself.
My name is Marc-André Saunier.
I graduated from École Polytechnique de Montréal in 2009, software engineer.
I worked in some smaller games early on in my career.
I joined Far Cry 3 as a core gameplay programmer, where I worked on navigation, combat, and takedowns and all this stuff.
Now in Far Cry 4, I acted as a lead gameplay programmer, which is what I'm here to talk to you about.
Now why am I doing this talk?
Not gonna lie, it's pretty cold in Canada right now.
I just wanted to get down here in the heat.
I mean, anybody else in the room coming from, like, a really cold place?
Yeah, oh, okay.
So I'm not the only one who had this idea.
Okay, great, I like it.
In all seriousness, though, the reason why this talk is...
So over the course of the last five years on the Far Cry gameplay team, we've really refined our production workflow, and we eventually came up with something that allows us to iterate very efficiently and be quite flexible.
It's kind of almost as if we were a small team even though we're a very big team.
Now, there's kind of a lot of stuff going on.
I'm going to be talking a little bit about management, a little bit about production, some game design.
What you should get away from this presentation is when you leave you'll have a really good idea of how the gameplay team on Far Cry works, how we operate, how we're structured, how we build our features really from start to finish.
And hopefully you guys can walk away with some ideas maybe that you could try on your own projects.
Now, before we get into the too deep stuff, I just want to clarify some things just to make sure we're on the same page. I'd like to talk about what the mandate of our gameplay team is. So the very first things, I mean, the stuff that's very in your face, right?
So the weapons, the vehicles, all the player abilities and the skills, such as the takedowns or if you heal yourself, all this nice stuff.
interactive objects like the new grapple tool we introduced in Far Cry 4, and everything that is destructible objects, actually, just the game systems behind them, and also the assets, and so basically this is all part of the gameplay team mandate.
There's also the stuff that's not as in-your-face.
So we did the arena on Far Cry 4, all the player replication, the systems that are underlying, such as the saving, the input systems, the player replication, the scripting system.
Basically, what I'm trying to get at is it's kind of a big band-aid.
We do have a big team, but we still need to be structured in this way to be able to really pull through.
Now, this is the only slide where I'm going to really talk about project structure.
And this is for you to really situate what the gameplay team does and how it works with other teams within the project.
Now, what you'll see here is our project is really divided into many different teams.
And the different teams have ownerships over different areas of the game.
The gameplay team being one of them, you now know where the mandate for the gameplay team is.
And there are other teams that we interact with.
AI is separate from gameplay in our case.
I know several productions like to have them included together.
In our case, we separate them.
We have missions teams, which would be the guy that would be crafting the missions for the game.
And the presentation team is what I guess what people typically call UI.
So they do menus, HUDs, maps, and all this fancy stuff.
One important thing here is that every one of those teams really have definite ownership over their various areas of the game.
Now, in terms of gameplay team structure, if you look at the diagram on the right, you might think, okay, this is, this is a fairly standard organization, you know, so your project has management, and then you have the different departments. But this is not, this is not a project structure, this is really the team structure. So the key thing is, on the gameplay team, we have our own animators, we have our own programmers, our own game designers.
We have our own testers, actually.
Well, it's dev testers.
I'll get into the details as to what they do later on.
So we have all our resources.
And what's great about this is we're really masters of our own planning.
We don't have to wait or rely on an outside department.
Or if there was, for example, an animation department that relies on, that actually serves the whole project, if they're really busy working on something else for another team, then we can't necessarily have support.
So if we have our own people, we're masters of our own planning, we can iterate very efficiently.
I need help from animation, I can just poke my buddy who's right next to me, he's on the same team.
Hey, could you unblock me on this?
And then we can get the ball rolling really fast.
Now, like I said, one very important thing is the team really has ownership over gameplay.
So we decide the gameplay, what goes into the game, and I'll get into the details of how we do this.
I want to talk about the floor plan a little bit.
And this sounds, I guess this might sound a little bit goofy, but I want to talk about this because it makes a very big difference in how fast you can iterate and what your production workflow is going to look like.
So what you see here, we have the various disciplines within the gameplay team.
Just, by the way, I might say gameplay cell every now and then.
Cell and team are really the same thing.
I just might, you know, say one or another.
So within the team we have the various trays.
Like you see on the top, that would be the windows.
Then we have meeting rooms down there.
So the key thing is the people are seated together all in the same area.
Now, what we want to do is really try to make it so the people that interact the most together to be seated nearby.
A very good example would be gameplay programmers and gameplay animators.
We want them to sit back to back or really right next to one another.
And as ridiculous as this sounds, we found that sitting people just right next to one another instead of like five seats away will really significantly increase the production workflow because they're essentially, like you're always more buddies with the guy sitting right next to you at work.
You spend like 40 hours a day.
You're buddies and you talk and it just becomes very natural to share the information.
So.
I was, this is, this is not necessarily the best floor plan that we've ever had.
The reason behind this is, like you can tell that the different disciplines are still a little bit segregated, like programmers a little bit together, animators a little bit together.
So, think, I guess think a little bit more Christmastree and a little bit less Megazord.
I was asked, I was asked by someone.
how do we overcome space issues on a production floor?
And really the great thing about everyone working on the same roof within the gameplay team is our dependencies are really within the team.
If you have 25 people on your team, all you really need to do is to secure an area of the floor space that can contain 25 people, and then you kind of manage that way.
Now, obviously, project-wide, like I was talking earlier, we do talk and...
we do collaboration with various teams within the project.
So what we try to do is really book the teams that interact the most together to be near one another.
That's not always possible, obviously, because you're always going to work with like 5, 6, 10 different teams.
And nobody—you can't always be right next to one another.
In terms of gameplay, we try to be closer to the UI team and the AI team because they're the ones that we interact the most with.
Now I want to talk about team philosophy. This is, this is a little bit of game design, I guess, and a lot of projects would call this design pillars. Now, really the underlying idea behind all of this is love the player. And the four pillars will really illustrate that. The first thing is embrace systemic. What this means is So when you go to E3 and you showcase your game, and the guy showcasing the game will walk up to an elephant, get on the back of the elephant, and start ramming vehicles, hitting NPCs, the player, when he buys the game or when he plays the demo, he's going to be able, like he's going to expect to be able to do this in the game.
You don't want this to be just for show.
Same thing for the vehicle takedown, which is a new feature that we added, where you're driving right next to another vehicle.
You can jump aboard, I mean, kill the driver, eject him, and then you can take control of the vehicle.
We could do them as like one-time sequence.
It would be cheaper.
But we really make this choice.
We'd rather have less features, but make them work throughout the game, because this gives you a very rich experience.
The second key point is really to respect the player choice.
The biggest example I can give for this is Our gameplay loop, which really illustrates, you know, you have, you can always attack, when you attack an outpost, you can always go the stealth way, so you can do takedowns, use some silent weapons, but you can always go guns blazing with explosives and vehicles, and this is, this is some choice, like, that some players like to make, you know, sometimes they like to go stealth, sometimes they like to go guns blazing, and we really try to add more features to respect both areas, and whenever possible, we want the player to be able to make his own choices.
The third thing is gameplay first. Now this is kind of a big buzzword. A lot of people are talking about this. But what does this really mean? What it means for us is that the gameplay is more important than the visual quality of the game, I say. Visual fidelity, I guess, would be a better way to put it. I have a very good example for this one. In the vehicle takedown that I just discussed, we found that When we were tweaking the feature, like I said, we want it to be accessible.
We want the player to be able to do it throughout the game.
And what this means for us is we had to have some pretty big interaction angles and interaction distance because if it's very too narrow and always looking for the perfect scenario, the player's always going to try to do it, he's never going to be capable, and he's going to think it's just bad.
In this case, what it meant to make this choice to really push the gameplay, make sure we have these opportunities, is that unfortunately the feature, if you look at it in third person, it looks kind of goofy.
Now, I don't know if you guys play the co-op, but if you are driving a vehicle and you see your buddy jumping outside of the vehicle and jumping in another one, it warps, but it's a choice that we make because to us, the feature being available and just generally good on the gameplay side is way more important than having it look perfect in all scenarios.
Lastly, quality matters.
Again, sounds very obvious, but what it means is, as soon as we start discussing features very, very early on, we really focus on making sure that we can realize this feature to a full quality, and we are dedicated to it. When we have a feature in the game, what we do is, if it takes longer because we want it to push to full quality, what we'll do is we'll take the time to really push it to the right quality so it doesn't clash with the rest of the game, and we'll actually maybe scope down on some features, or even cut other features completely, because we want what we ship the game with to be very solid.
The next thing I want to talk about is our development process. It's very, this is how we work and how we build the, how we build the game.
Now, we have a mix of bottom-up and top-down.
What I mean by that is, so there are sometimes some requests that come from, from higher up.
For example, the world in Far Cry 4, Kirat, is a very vertical world, some big mountains, and there's a lot of verticality to it, as opposed to Far Cry 3, which was a little bit more flat.
Now what this means is we were requested to have some more tools to really explore this verticality.
And what the design and the gameplay team came up with is two new features amongst the other things.
The first thing would be the buzzer. So that's the one-man gyrocopter that you can navigate and go anywhere, which is a feature that people enjoy so far.
And the other thing is the grapple hook.
which is another way or another more fun way, I guess, if you needed to climb a very big distance, instead of just having ladders, you could have grapple hooks.
So this really came from up, from bottom, I mean, but there was an initial request that came from top.
Now, the second point is everyone is a game designer.
This is...
We really strongly believe that everyone on our team, in the gameplay team, are gameplay experts, and we want to leverage this resource.
Why limit yourself to just having two or three game designers decide what the game's gonna be?
Well, you could have a team of 30 people all putting in what, like, their expertise, and, like, this is essentially what you want, right?
So, we have a lot of great examples, as in, a question that we ask to people a lot is, what would you like in your game?
The grapple hook initially was supposed to be just a vine.
You would just have an area where you would just plug the hook and then you could climb much like you would do with a ladder.
But the process of the programmer and the game designer doing a lot of back and forth between them and challenging each other eventually made it to fully fledged physics systems, which is really cool.
Now, promote ownership and empower the team is very much in that same line of thought.
The question we ask to the guys is, is this fun to you?
When you work on a feature, it's not a matter of just implementing the feature at the request of the game designer.
No, it's your feature, it's your baby, it needs to be awesome, you need to think it's awesome.
Because if it's not good enough, then is it going to be good enough for the players?
So really push for the guys to have ownership and, like I said.
If you go to E3 and it's your feature and you had ownership on it and it goes on stage and you do, I don't know, you get on the elephant and you start ramming vehicles, I can tell you when the crowd starts cheering that the guy who worked on the elephant is going to have nerd chills.
Finally, lots of iteration.
I mean, we iterate a lot.
I guess we iterate a lot more than we'd like to admit.
But this is a direct consequence of being heavily focused on quality.
We want to ship our features to be very good.
And what this means is, well, sometimes you need to iterate a little bit more.
Now to illustrate all these points, I'd like to walk you guys through the eight steps of a feature.
So it starts from really an idea of a feature all the way to a shipped product.
So let's go to the first step.
The first step is really an idea.
Now, the thing here is, like, you know, everybody has cool ideas, but what we try to aim for is ideas that really have a good, a good game design purpose.
Two examples would be, oh, clicker's losing batteries.
So first thing would be, for example, the buzzer.
In co-op, you have this one-man gyrocopter, and we added the co-op, the grapple point on the gyrocopter so that at any given time, instead of having to break the pacing of the game, have to go down and you stop the gameplay, pick up your buddy, go up, well, at any given time, you can just fly by, your friend can just grapple.
So yes, it's a cool feature, but it helps you really maintain the pace.
Now, I mentioned earlier about embracing systemic, and one of the great consequences of really embracing systemic is that since these systems are made to be robust and work throughout the game, we can do these kind of things like really quickly, instead of taking weeks.
This took us just like a couple days just to tweak the minor details.
So this is, this is definitely a big win.
Another great example of something that is a cool idea that has a game design intention is the vehicle takedown.
Now we made a big effort to really merge.
I really try to, yeah, I'd say merge, I guess, vehicle and combat.
One of the things we added was the drive and shoot for this regard, but the vehicle takedown is another great one where you have this really strong action within a vehicle and it's not just driving, and it has another purpose, which is, again, instead of running around the world, if you have a broken vehicle, you don't have to necessarily get out, repair it, and get back in and break the pacing.
You can just find somebody, do a vehicle takedown, and you recuperate his vehicle, which is in great condition.
Our designers on the team are required to be very technical.
And this is great because I don't think, I don't think I've ever heard in the past five years on Far Cry, I've never heard somebody or a game designer say, just do it this way because I said so.
This is not the culture that we promote.
Like I said, in a culture where everybody is a game designer, what happens when the game designers disagree with the programmers and the animators is these are really great opportunities for your game designers to coach your programmers and your animators on really what makes great game design and vice versa. You want to use that opportunity for your programmers and your animators to to teach each other and really try to grow this, this knowledge.
We kind of expect everyone to try to have this curiosity and really push it forward.
The second step would be the gut checks.
So, once you have your cool idea, what you want to do is really go around the floor, talk to the people, and see what they think, right?
So we try to eliminate the crazy ideas.
Uh, the great thing is we try to hit for, obviously, higher return and investment.
Not buzzword.
What this means is, by including the people, all the programmers will be implementing the feature, sometimes, yes, you're going to get some ideas that might be too crazy, but sometimes they'll come up with some great ideas that are actually very quick wins, because they're the ones that have the technical expertise to build those features.
Now, you see this nice, very sweaty arm-shake thing?
What I'm trying to illustrate with this is, at this stage, I think it's very, very important to have...
a very, very strong person argumenting for game design, and a strong person on the production trying to, you know, hold game design back.
Because what happens is, if your game design really overpowers production, you risk having a game that's, yes, very good, but that might never ship, because you always go into crazy ideas.
And on the other side, if you have production that really overwhelms game design, and it's like, no, we're just gonna do this because it's the only thing that's safe and fits, then you risk having just a very bad game because it's not design-driven enough.
I can give you some examples, some features that were cut at this stage of production.
I'll give you one.
On Far Cry 3 we had vehicle, well water takedown, sorry, so when you're in water and there's somebody you can stab the guy, whatever.
And we wanted to make it more systemic.
or if you're in water at any given time, so there's somebody else in the water, somebody else nearby, we'd like to be able to do these takedowns.
We chose not to do so because, I mean, honestly, Kerat doesn't have that much water, and we felt that the time invested there was not that much return on investment because there's not going to be that many opportunities for the player.
We'd rather, you know, spend our time on something else that'll be able to be done throughout the game that might feel more epic.
Third step would be the FSO process.
Acronyms, yeah. Now FSO stands for feature sign-off.
Uh, I could, I could probably do a whole talk of an hour on this, but I'll go over it quickly.
The idea is, the feature sign-off is a document, typically written in Excel, where the game designer will go over the various things that a feature can do.
Uh, and if there's any risk, potential risk there, you want to highlight them.
And this document will be sent out to all the various technical leads of all the teams on the project.
Now remember, the first step before, I said gut checks, where you go around and you see people, for example, on the gameplay team.
But what this is really great at is because this document is sent out large, and people meet like all the various technical leads of all the teams on the project will meet and sit down and make sure that they go through every line.
What it does is...
Yes, on the gameplay team, we do have the technical expertise for the gameplay stuff, but we might not know what everything means for AI.
For example, if we decide to add elephant riding, what does it mean for AI?
If an AI walks in front of a player on the back of an elephant, what is he going to do?
Is he going to be scared?
Is he going to shoot the player, shoot the elephant?
And then if you drop the elephant in the middle of nowhere, and it gets, and AI regains control over the elephant, how is he going to be able to path back to like a proper, proper nav mesh?
By having this process, which is formalized and forces us.
to really include everyone in the project, these, we don't have these bad surprises later on.
Everybody knows what's, what's happening.
Now the next step is the prototype stage, which I'm sure you're all familiar with.
There are certain things about this is, are prototypes actually So it's not necessarily step 4. It could be step 3.5.
What I mean is, this process is not entirely linear.
Some steps will happen at the same time.
And we're comfortable doing this, starting the prototype as the FSO process is not over, because, you know, we have experience, and...
Eventually, you don't have these crazy surprises anymore.
We rarely completely cut anything anymore.
So our prototypes have functional assets.
So we don't just, for example, if you want to throw a knife, we wouldn't just play, like, a random reload animation that would toss a green cube.
We like to have some basic assets, and it's very easy for us to do so because, like I explained earlier, within the team, we have all the people that we need to really fully realize the content.
Now, one thing you're gonna talk, you're gonna hear me talk a lot about is de-risking first.
When we work on features, when we do our planning, we always focus on de-risking.
So much that we'll actually prefer de-risking lower importance features than actually iterate on high importance features that don't have risks anymore.
This is very important.
Now, there are various types of risks.
You get realization risks such as, how are we going to make this look good?
Game design risks.
Is this going to be fun?
How's this going to work?
Technical risks.
This is going to work with our engine within a reasonable amount of time.
Balancing risk. If I have this new weapon like the Mortar, is it going to make the game too easy?
Am I just going to break the game whenever I use it?
So these risks need to be addressed first before we move forward.
And this is what we try to do with a prototype.
And when the prototype's in the game, it's also a very good meat for discussion.
When you have something in the game, it's concrete.
People can, can look at it, feel it, play it.
And that's really great fuel for discussions.
Now let's look at some features in their prototype stage.
I hope this works.
Okay, so this is the drive and shoot.
Now you'll see this is very, very basic, right?
So there's no look around, you just aim forward.
The hand on the left is completely, like, badly animated.
But this gives an idea of the intention behind the drive and shoot.
Now this feature is the buzzer.
Now you'll see the asset is obviously very placeholder with a nice checker, a temporary texture.
And there's not much stuff going on.
There's not much look around, the inputs are very clunky, but still, I mean, you can get on the buzzer, you can fly around.
Lastly, the grapple, again, very, very basic, where you just climb onto an object, and when you get to the top, you leave.
Very little realization.
So that typically, that's what our prototype stage looks like.
So at this point, we did a prototype in the engine, and we have a good idea of, you know, what's the really, what's the potential for the various features.
So what we do at this stage is we scope.
So we discuss, so what works, what doesn't work.
We get some feedback, and...
It's a great, it's a great time to really start doing playtests also when you're at the prototype stage.
So we do two types of playtests.
So we have the typical playtest where you'll grab somebody on the production floor and just say, hey dude, I'd like you to try this feature, you know, somebody that hasn't tried it.
And you can really try to observe the person, see what he's doing with it, and see what's not understood, mainly.
And the other thing we do is at Ubisoft, we have a playtest lab where some people from outside the studio will come in and we'll try out unfinished games.
The biggest thing here, you want to get those guys involved as soon as possible.
If you have some big features that are going to be iconic for your game, you want to get this tested as soon as the prototype stage.
You don't want to wait until the very end, right? You want to de-risk this stuff.
And the guys at the playtest lab are really good at...
aggregating all the feedback and really giving you tips on what it is that you could do to improve certain features and de-risk.
So I can give you some examples at this stage of some features that were cut, unfortunately, when we got to the prototype stage.
The first thing would be the vehicle takedown from boat to boat.
And the reason why we cut this one is because we realized when we did the prototype for the vehicle takedown that the animations were actually very complicated to do, like several NPCs, they're very long, so there's a significant cost there.
So to scope down on this feature, we actually removed the boat-to-boat part, and this is really only for animation costs, because the code was there, it was working.
But then again, little return on investment there, because there's not much water in Keurets, so we try to be smart about it.
Another thing that we cut at that point is we had a shooting gallery.
Now you know what shooting galleries are, many games have had them.
So you have panels and you shoot with like weapons.
And the reason why we cut those, again the code, the prototype code was working, is because we figured that it was going to be so long for level designers to do all the setups in all the various areas of the world and all the various weapons.
And honestly, it's not a big innovation.
It's not necessarily that fun, it's not that far cry.
So we decided to just get rid of it.
Now the next step is the alpha step.
The alpha for us, it's really a road map to the final quality of the game.
So once you get to alpha, all your major risks should be eliminated.
And when I say risk, again, I'm always going to try to really push to de-risk first.
Sometimes what we'll do to de-risk is we'll create what we call strike teams.
So our strike teams are composed of, you know, many people.
And sometimes we're going to have multiple people of the same trade trying to de-risk the same problem.
Uh, there, it happened two times. Like, two significant strike teams that we had on Far Cry 4 was for, uh, the elephant riding was one, because, like, you want to, you want to be able to drive the elephant, but you still want it to feel like a living animal. This is, this has a huge set of problems of their own.
So this was one of the strike team that we did, and we really tried to shield these people as much as possible, so they can really blitz on making sure that all these risks are eliminated.
Now, one of the peculiar things about Far Cry is that we really try to have all the features alpha at the same time.
And the reason for this is we have a very big feature matrix.
So the more we add features, the longer they are to make, really, because, like I said earlier, when we expect the player to, when the player expects to be able to do something, we want to give it to him, right?
So again, what this means is the more you add features, the more you have dependencies with other features.
And these are very, very hard to predict.
So before we move on to polish and to beta, we try to get everything in the game in alpha.
We want to let this stuff really marinate in there.
So let's take a look at some features.
Well, the same features as earlier in their alpha stage.
So first thing should be drive and shoot, yes.
Now you can see, like animations are okay.
You can look around, you can aim on the right, you can kill some guys.
Now the aiming seems very difficult, but now the gyrocopter, again, you can shoot.
Now it's hard to tell because you don't have the control in your hands, but the control's already much better.
You can move around.
And the grapple, you can tell that right now it has physics.
You can swing around, and it's not just like a straight rope that doesn't really do much.
So at this stage, the alpha, like I said, you have a really good understanding of what the feature means for the game.
What is it gonna be?
What's the potential?
And all the big risks are no longer there, really.
Now you're never gonna guess what comes after alpha.
Anyone?
Beta, yeah, okay.
Not bad, not bad.
So the particular thing about our beta is that it's really as far as most features will go.
the bulk of our stuff is really only gonna make it to beta and we're gonna ship in this stage.
And this is actually a very nice comforting thing where you're trying to ship, you got bugs and everything, and you know in the back of your head, okay, all the stuff that we have in beta, you know, it can ship in this state and that's always good to know.
Earlier I did mention that we have, for the prototype, that we have several people working on a, on a, like the prototype at the same time.
Like you want art assets, animation assets, and programming.
And we really reiterate everything together.
For example, if you work on, well I don't know, on the buzzer, you want to improve the animations, you want to make the mesh look better, you want to have the programming.
So I know, I know some people like to push, for example, the programming all the way until the end, and then just wait.
whenever animation is available to really polish the animations.
We avoid doing that because you always get kind of bad surprises there where animation starts doing polish, for example, when you realize that you need some code support, and you always keep going back to the features that you thought you were done with.
And again, this is very easy for us to do because we do the planning for all the people on the gameplay team, including the artists, the game designers, the animators, and the programmers.
Now this stage of the project, it's very, very important to take a close eye on the playtest results. During the heat of production, we actually have playtests from, like, people outside of Ubisoft coming to test their games. We have that every two weeks. And if you keep a close eye on the playtest results, like, you're gonna know if one of your features doesn't work. For example, for us, the drive-in shoot is one of the ones that really went until the very end, where, okay, it worked. Like, as devs, we worked on it, so we knew it was okay.
But there was a...
People had a really hard time driving and shooting at the same time, being able to hit targets and not hitting trees in the process.
So by keeping a close eye on the playtest results, you make sure that whatever it is that's in your game, it's solid, people understand it, and it's really important that they be kept in the loop.
Again, re-scope is necessary.
We don't just re-scope earlier on.
We re-scope throughout the production because we want to make sure that we don't dig ourselves, like, in a big grave in a huge pile of stuff that we can't get through.
Let's look at some, well the same features in their beta stage.
So the first thing is the drive-in shoot.
Now you can see that it feels like it, well it's hard to say because you don't have the controller again, but it's pretty good.
We have the auto-drive that's going to prevent you from like hitting trees and all this stuff.
You can look out the window, we have some nice aiming assists, so this is, this is pretty good.
I mean we could probably ship with this aside from some minor bugs, you know?
Same thing with the buzzer.
Buzzer at this point, you can shoot, you can navigate around, I mean the controls are super tight. Whenever you put your stick in a direction, it's going to smoothly turn, and you know, you get really the full experience. You could probably ship in this state.
The last thing is the grapple. So you can see now you got the fully realized jump, the rope, some minor rope hoppings, just a bug.
Aside from that, I mean the experience is pretty solid.
Now, the last step of a feature is the gold and all-in.
So like I said earlier, most of the features will only make it as far as beta.
The features that we still work on past beta are really the ones that we find are not necessarily understood enough or come out in the playtest results as being problematic, and the ones that are tagged as all-in.
So, early on in the production process, the game design team will write what we call a master features list that contains all the features that they want to have in the game, and these features will be ordered by importance.
The ones that are all-in are the features that are really the most iconic, and that we know right from the get-go, that we're going to work on until the very end.
I think the elephant is the biggest example of this.
Like, if you think Far Cry 4, I mean, the elephant is so iconic, and everybody keeps talking about the elephant because it's so great and it's different.
But this is one of the features that we know. It's an all-in feature.
I mean, it's good. In beta, like, it's good enough.
Maybe we could ship with this.
Nah, we're going all the way with this one.
Drive and shoot is an example of another one that we wanted to push forward, where we really did a lot.
In the middle, you got the corpse. The reason for this is the moving bodies is an example of a feature that we really...
that was a low importance feature, but it wasn't all that great, and there were some issues with like dropping it, making it drop at the proper location.
So we still gave it a good pass at the end just to make sure that it didn't clash with the rest of the game.
Again, commitment to quality.
Now...
I'd like to talk about planning, and...
Okay, I hear you guys.
Ah, this guy's not gonna talk to us about planning, really?
Okay.
The reason why I wanna talk about planning is because this is...
Depending on how you do your planning, I think...
I think it can be a great tool to really build a strong team that is united.
And...
I'm going to explain this.
So first of all, we do sprints during production.
They're two-week sprints, very flexible.
We do two-week sprints because we want to be synchronized with the rest of the production floor.
It's also nice when we have play tests every two weeks because we're synchronized.
And because, honestly, if you have two-week sprints, you have a small list of tasks.
And for the people working on their tasks, it feels like it's always achievable.
As opposed to having, for example, four weeks, we have this huge list.
And it always feels like, oh, I've got to do all this, man.
The second thing is aim for 11-12 days of work.
That's just a formula. Don't worry too much about it.
Essentially, when we plan, we always round up.
So if we think something's gonna take half a day, we'll put one day.
If we think something's gonna take 3.5-4 days, we'll put five days.
And we add up to 11-12 days, and that's how we do our planning.
So I know some people like to do, for example, realistic estimates and multiply by 2, multiply by 1.5.
If you're struggling with your formula, maybe try this one, maybe not.
When we manage our sprint, when we planify...
when we planify, plan our sprints.
We like to, planify, nice.
We like to synchronize the various trades.
Again, this is very easy for us because everyone's under the same roof and we do the planning for everyone.
For example, if you want to add a new weapon, you probably want your artist to model at least the first pass of the weapon and then you can have programming and animator do a pass maybe the next week or something.
But this becomes super easy.
Again, de-risking first, always de-risking first.
And lastly, the priority is always to unblock your coworkers.
So we do, we do have goals, right?
This is the things that we'd like to hit this sprint.
But regardless of whatever you're working on, you're taskless, if one of your coworkers is blocked, you want to unblock him.
So again, I have my animator right next to me, and he's blocked and he's trying to do something.
He's like, eh, I need code support for this.
Okay, no problem.
And I'll just shove whatever I'm doing, as long as it's not, like, too complicated process.
I'll give you what you need, and then he gets unblocked.
And the great thing about this is this is a great team building and team spirit thing, right?
Where it, it really feels like your coworkers have your back.
So when you help your friend, you unblock him the next time around, like he gets unblocked, or you unblock somebody else, and this is a great way to, to really handle this.
Now, now is this guy really gonna talk to us about bug tracking?
Yes!
Uh, the reason for this is...
your bug and task tracking system is probably going to be the only tool that every single person on your production floor will use.
Now we use JIRA. I don't want to get into the like what is JIRA and everything.
What I'm trying to picture this here is how we use those systems to really have a workflow that is dynamic and really build a good team.
Now on the left, what you look in, so you see there are two columns.
The left column would be your typical list of tasks that you need to hit from top to bottom.
So the top part would be your must-fix issues, like the stuff that's blocking production.
Then you got playtest issues. We prioritize those because you probably want to have your result of the playtest as soon as possible, and they're every two weeks. So if you wait, then you might get them in four weeks instead of two weeks.
etc. etc.
Where the magic happens is on the right side, which is essentially a mirror of your own list of stuff that you need to do, but for your team.
So what this does is having everything on one page, it's good because, well, people will typically not switch between two pages, so you have this one page.
And when you go on there and you look, hey, what do I need to do today, you know?
Oh, I have this bug with, like, the elephant writing.
OK, I'll get on that.
And then you glance at the top, right?
You see, oh, man, my buddy Johnny has got, like, three must-fix issues.
What are we gonna do about that?
It's like, yeah, I'm curious. I'd like to know what he has.
Click.
And then you see, oh, he has these three problems.
I could probably help him out with this one.
So you can help him out.
Now, this sounds very naive, but...
or very idealistic, should I say.
But the reason why it works is because we encourage people to help each other out, we provide them the tools to do so and have this easy flexibility, and because somebody somewhere started doing it.
If you get your buddy Johnny out of trouble, when you're in trouble next time around, your buddy Johnny's gonna get you out of trouble.
Again, This sounds very simple, but these are all very great tools that you can implement to make sure that your team really helps each other out and is very dynamic and solid. And we always have these days, managers, where we're kind of stuck in meetings all day long. I mean, it happens.
And you don't want to have to always be there at your machine to really dispatch if something goes up.
Like, this really gives you a good idea to quickly see at a glance what everybody's doing on your team, what's keeping them busy.
For upper management, like, obviously, they like to have a good idea of where the team is.
We have some internal software that lets you know for a set milestone, for example, the list of stuff that we have remaining to do.
We have our velocity, so it gives them an idea of, like, when we can finish.
And we can scope regularly.
Daily stand-up meetings.
Our daily stand-up meetings have, like, 15 to 20 people and last 3 minutes.
That's it. He's lost it.
no, really. I want to talk about this because I've heard a lot of people say that this is impossible, or it, like, standup meetings should not be this large.
So first thing first. When we call a standup meeting, we actually have a gong at the office.
And, yeah, it's pretty big.
So the idea is, instead of, for example, having your standup meeting at 10.30 and having people just stand there, waiting 5 minutes for everybody to get there because people are not on time, we just ring the gong. When people hear the gong, they'll just go up to the standup.
And this is very nice.
Some other teams eventually synchronize their standup meetings to be at the same time as ours, because it's easy. Hey, standup's when you hear the gong.
And, yeah.
So, what goes on in a 20-people stand-up meeting for 3 minutes?
What information can be conveyed?
The first thing you want is whoever's calling the meeting, the stand-up meeting guy.
You want to go over certain goals, certain objectives, and I guess I'll give you a walkthrough of what a typical stand-up meeting could look like.
So for example, I'll start and call the meeting.
It's like, okay, good afternoon, guys.
Good morning, guys.
Okay, today, this week, it's evaluation, so please try to take some time to do your auto-appraisals.
Also, there was some issues with stability in the build yesterday, which was affecting some of our partner studios.
Please try to be careful.
If you submit anything risky, be extra, extra careful.
And now the next person would really think keywords.
So it would say, all right, today I'll be working on, you know, a problem with camera when getting on the back of the elephant.
Okay.
For me, I'll be working on transition from one vehicle to another and the vehicle take down and somebody would say I'll be working on more to our explosion impacts And it really doesn't need to take that much more time than this the idea is for everyone to have a good snapshot of what?
Everybody else is working on and when you need to talk to somebody one because for example the mortar guy I worked on some stuff that might be related because I worked on explosions last week what I do is I could just say simply I'll talk to you after the stand-up or sometimes you don't even need to talk he sees you so you just nod and you point him and they get it you know so then you synchronize you sync up after the stand-up it's very important that it stays within three minutes because if it's more than three minutes people simply stop listening so keep it short keep it nice I mean give the information you need to do and you probably even have time to sing happy birthday in there Since our sprints are small, so two-week sprints, it's a very good motivational tool.
What I mean by this is, you know I was saying earlier that it's a finite list, it's a small list of stuff.
For example, for your sprint, you'd have eight tasks, and you have two weeks to do it.
And it kind of forces people to really go, oh, OK, so I have these eight items.
I'd like to get those, like, six out of the way this week.
I only have, like, two items left next week.
Like, you want to be a winner.
You want to be that guy, like, in front of everybody else.
or not necessarily in competition, but you want to be the guy that finishes on time, right?
So, one mistake we did on Far Cry 4 is stopping sprints a little bit too early.
When we were in the debug phase later on, we stopped sprints and we just, OK, this is the pile of bugs that we need to get through.
But this was a mistake because...
When you have sprints like this, you can put bugs in there.
It doesn't have to be tests. You can put, like, a list of bugs.
You're essentially giving your team a chance at being a winner every two weeks, as opposed to being a constant loser that just crumbles under a pile of bugs that just keeps piling.
You don't feel like you see the end of it, right?
So this is—this, again, can be a great motivational tool, if done right.
When finishing sprints early, the guys will debug, stabilize.
Stabilizing is good, because we have playtests every two weeks.
And— The guys would probably appreciate your game better if it doesn't crash in their face.
And the big, big, big thing is help your friends.
Now I said earlier that we always prioritize unblocking co-workers.
Unfortunately, what this means for you is if somebody on your team gets blocked, well, you want to unblock them as soon as possible, that means you're kind of delaying your sprint tasks.
But that's okay.
because some people will finish early and then they can help you out.
And what happens when your friend Johnny comes to see you and says, hey, I'm out of tasks and I see you have a lot of stuff left.
I think I can help you out finish on time.
Next time around when Johnny's in trouble, you're going to help him out.
Now, the big danger here is wanting to finish your sprint so much on time.
That that's that's all you really focus on, right?
So some things will slip.
You need you need to accept the fact that some some things will slip.
Now, I'm not going to say that it's fine that you don't hit your objectives.
We always try to be better.
We always try to do good.
But...
If you know why certain tasks are slipping, or if you unblock somebody else, it's work that you would have done later on anyway.
The key thing is, if you're ever unsure, always go back to this one question, which is, what should I be working on right now?
Does this make sense for me to do this?
You're not, you're not trying to hit, like, 50 sprints on time.
You're trying to make a game.
So try to, try to keep this on the back of your head, because it's, it's easy in the heat of production to look at sprints and say, ah, I just want the sprints to match.
I want to hit the sprints on time.
But you're making a game.
Now, I mentioned development testers.
How are they different from, I guess, more traditional testers?
Well, first, they are embedded within our team, and we task them.
The gameplay experts, for example, the gameplay testers, would be gameplay experts.
So they'll know the subtleties between different systems, and when something that's very subtle is broken, they might be able to tell.
Another great thing about them is they're technical, so we can give them some technical tasks.
One of our testers in Far Cry 4 was responsible for doing the animation memory profiling, so we didn't have to take some animation, some programmer time for this, and we always knew quickly where we were standing in terms of an animation budget.
They also have Visual Studio on their machines.
So if you have a changelist that you want to test as soon as possible, you can shelve it, send it to them.
They can unshelve it, compile, and all is good.
A great tool that we had on Far Cry 4 to test is what we call preflights.
The, I guess, the simplest way to put it is PreFlight's really a mini-build that is built with a changelist that you put forward.
So I'd like to have this mini-build of this version, but just add this changelist.
And this is especially useful for us because we shipped on five platforms, so the two Playstations, the two Xbox, and the NPC.
And, uh, you, when you, when you work on some major changes, you probably don't want your programmers in the heat of production to have to spend the time to, like, test all five consoles.
So you can just do a preflight, the devtesters will go through it and make sure it's fine.
Same thing for the difficult repro steps.
Just the fact that we added the online co-op component to the game made it so that we have to have...
we have to add, like, twice the amount of testers that we had on Far Cry 3.
So we went to two to four, because the co-op, like, it's difficult to test co-op problems alone.
And, like, the idea is you want to keep your programmers programming, you want to keep the animators animating, and you want to keep the testers testing, because they're the best at it.
How many times have you had a programmer try to test a mission, but he just fails because he's not good?
That happens, you know?
Now this would not be a proper GDC talk if I did not talk about improving technology to iterate faster.
So it is, it is a focus that we had, right? So we had better tools, but we also had some pretty crazy stuff in there.
So we got, we got some new systems.
So RT-PAL allows us to synchronize or stream game versions instantly.
We had DevPatcher that allows us to patch data in, in big files also instantly.
And we had FastBuild which reduced our compile time by like a factor of ten. It's, it's insane.
Now, you're probably wondering right now, hey, Marc-André, this sounds unbelievable and, unbelievable and amazing. Where would I go to find more information? Well, luckily for you, tomorrow morning, my colleague Rémi Quirinet is doing a talk on this stuff.
So, yeah. Tomorrow morning at ten o'clock. Don't miss it.
There's truly some unbelievable stuff in there. I. . .
Go see it. It's worth it.
Now. . .
The last thing I want to talk about is co-development.
Far Cry 4 is an effort between six studios around the world.
We did a couple key learnings in there.
And the first thing you're going to notice is I'm talking about co-development.
I'm not talking about outsourcing.
And the reason is we really try to build a strong partnership.
with the other studios that are working with us.
It's about understanding that these studios could be making their own AAA games and it's not because of a lack of skill that they share this project with you.
They could do their own stuff.
It's a matter of realizing that there's no B team.
We work together and we can be, we can make some really great projects this way.
One of the key learnings we did, something that worked very well for us, is we had on the floor in Montreal, we had a co-dev team which was a group of people that were essentially responsible for managing the collaboration between the different studios.
Like these guys are on the floor with us, they're in the stand-up meetings with us, and they actually act as communication coaches even.
Like you work with other studios around the world, not everybody has the same way of working, not everybody has the same culture.
How do you deal with this stuff? We're not necessarily all trained for this.
Now these guys are very good.
So...
What we try to do is whenever we have interaction with other studios, we just put them in CC, you know, when we send emails, and they can read everything and see if there's any potential problem there.
You know that email that you send on Friday evening before leaving, and you say, I don't know, just do it this way, don't do this, you know?
And then you leave and all is good, because you understand that the intention you had were good, but the other guy on the other end of the line will read your email.
and think, oh my god, this guy, what a douchebag.
He's like telling me what to do.
And this, these guys are really good for this because they'll see these problems and they'll flag them forward.
So you probably want some guys to be dedicated to collaborating.
It's like six studios.
It's not, it's not a small thing.
Another thing is FaceTime is very important.
They say that 97% of the information that is conveyed in conversations is really done through the non-verbal stuff.
Now, you may or may not believe this number, whatever, but it's still a fact that there's a lot of non-verbal in there.
So what we did is, key people at different studios met several times in person throughout production.
You want to build some good relationships.
And if you ever wonder if it's worth it...
to send people, or if you're not sure if it's worth it to have people meet in person, then if you're not sure, it probably means that it is worth it.
So really, take these opportunities.
The next best thing, which I wish we did more on Far Cry 4, is webcams.
Webcams are super cheap nowadays.
There's no reason why, like, not everybody on the floor could have one.
So really, buy webcams, encourage people to talk, and...
This is, I guess this is kind of all obvious stuff, but it's good to think about it.
And you need to make a conscious effort where, you know when you work with people in person and you talk to this guy, you have this feeling in the back of your head that, oh, maybe he's not feeling too good.
What's going on there?
Is there something, some friction under there?
And you gotta make sure that...
you have the opportunity to see this stuff. So again, webcams, good, build some good relationships.
Likewise, if you have problems with somebody and in your workplace, it'll eventually fade away because you meet this guy, you talk with this guy every day, it's like, hey, how you doing, you know, let's go for some coffee, and then you come back and eventually your problems fade away.
But that's not going to happen with Codev because you don't see these guys on a day-to-day, you don't see them face-to-face. These problems need to be addressed and your best friends to detect these problems are the Codev team, again.
Yes. OK. Lastly, I want to talk about boundaries. Boundaries are very good. You want, you want to have a certain area of the game that you really give to your code at studios so that they can really take ownership and feel empowered in there. I really want to push it forward.
But the boundaries should never be an obstacle to collaboration. The best example I can give you is the example of, I got to work one morning.
And Brian from Toronto. So the Toronto team was responsible for Shangri-La.
You know, the red sequence with the tiger and all this stuff.
So they're responsible for this. Great job, by the way.
So Brian pokes me and tells me, hey, Mark, you know, we have some bugs left and everything, but in the grand scheme of things, the bugs that we have, they're not, they're not that important, you know. It's pretty minor stuff.
Could we help you with your stuff?
When does that happen?
I got nerd chills just thinking about it.
That's, that's, that's what's going on, right?
So if, if you respect your partner studios, like, you give them a chance of really feeling empowered and you entertain this relationship, this is the kind of stuff that can happen.
You can have a Brian story.
Now the last thing I want to talk about is.
I guess it's a wrap-up. I'd like to mention a little bit quickly the different, the different key, key takeaways of, of what I'm trying to say today is what we try to do is we really try to empower our team. So find ways for your team members to have opportunities to really take ownership and especially help each other out. This can only lead to great things. You have a solid team that can have each other's back and this is.
completely underrated. Well, maybe not, but anyway, you should aim for that.
Secondly, be flexible always. You're not trying to hit sprints, you're trying to make a great game. So whenever you're in doubt as to, are you working on the right thing, you probably want to think of, does it make sense for me to work on this right now? Is this really my highest priority? Then, when working on features, you always want to de-risk first, no matter what. So de-risk, de-risk, de-risk when you plan. This is very important. You want to scope often also. You don't want to...
You don't want to wait until you're at the very end of your production cycle, where you're crumbling under a pile of issues that you haven't resolved, and then you need to scope features out completely that you can't ship, unfortunately, because you didn't scope before.
So scope regularly.
Again, gameplay first.
And lastly, have fun.
We, we make a living creating games that countless people will enjoy.
To me, that is nothing short of amazing.
Should be fun.
And there's always a way to make it so.
So? Questions? While we get set up for questions, I'd like to take a selfie with you guys, if that's okay.
Hang on, how does this work?
Press the button.
Camera, how's the... what? What? Oh, come on, man. I'm so bad at these things.
Okay, it's gonna happen. Can we all pretend like we just won 10 million dollars?
So like, really, arms in the air, cheer. Can we do that?
Okay, let's go, guys.
Good.
Thank you so much.
OK.
Let's hear it.
Yeah.
Nice talk, Marc-André.
A question for you.
The gameplay team seems to be a pretty autonomous pod.
How did you handle the communication with the rest of the group for other departments?
OK.
So every single team on the floor, does this still work?
Yeah, we're good?
Every single team on the floor has definite owners, right?
So the gameplay team will have some gameplay owners.
AI will have their own owners.
And these guys are kind of always in constant collaboration and constant communication.
So when we do work on some new systems, these guys will talk with you.
I kind of skipped over it a little bit.
But our lead game designer, in our case, was the gameplay owner, was really responsible to make sure that the whole gameplay was solid.
AI, for example, had their AI owner.
And these guys are in constant collaboration.
Now when we do our sprints, we send the sprint out to all the various leads so we know what every team is focusing on.
And what I mentioned earlier about unblocking coworkers, it's just not people within your team.
If, for example, AI team is stuck on something, you unblock them and next time around they're going to unblock you.
So this is a very key thing.
Does that answer your question?
Yes, thank you.
Yes?
Awesome.
Hi. So when you were talking about sprints, it sounded like you guys are doing a version of Scrum, and part of Scrum is retros, and I was wondering, do you guys do that at all, or why not, if not? Part of Scrum is what? Retros, like retrospectives, where you talk about that sprint. Okay, so you mean when we're finished, should a sprint reflect on what we did? Yes.
What we did as an exercise is, so when we do the planning for the next sprint, what we like to do is, well, it started off as poker plannings, but it took too long, didn't work so well.
So what we eventually do is...
When we finish a sprint and we try to plan the next one, we have a meeting with the team.
So we'll take like 20, 30 minutes.
And this is where we'll sit down with the guys, and we're going to communicate the objectives for the next sprint.
And we can also take this time to really pinpoint the stuff, for example, that slipped in the next sprint, and reflect on our wins also.
So we try to do it with the team.
But one thing that's important for me is I really want to try to maximize.
to maximize the time that the guys have to work on their stuff.
So I try to keep these meetings short and like the stand-up meetings, I like to keep them to three minutes, just, you know, as short as possible.
So, so yes, we do, we do take time to do some retrospect, but it, but it's not really a formal process.
We're very, I guess Scrum is a little bit more, you know, structured.
We try to be very, very flexible, like I said, because it is what works best for us.
Does that answer your question?
Yes, thank you.
Okay, thank you.
Hi, first of all, great talk.
Thank you.
I was curious, as a programmer point of view, when you're working on the proto phase of a feature, are you taking time to do clean code, even if it's taking more time?
And maybe if you scrap the feature, or are you just hacking it and make it work just to test it?
We don't really do throw away code, and the reason why we're comfortable doing this is because there's this process, you know, before it where we're already doing the gut checks and the FSO process has already started where the other departments are involved.
So what typically happens is like 98 percent, I'm not going to give a number because that's ridiculous, but the vast, vast majority of the features that we do, they're in the game, right?
So, what will typically happen is this prototype, it's going to evolve into some things sometimes completely different, but we really do try to have a good foundation.
We don't want to have to code something and then have to code it again.
Like I said, we're comfortable doing that because of the steps before and we've gotten used to making sure that the crazy ideas are filtered out a little bit earlier on, but then there's nothing telling you that when you start working on this prototype that maybe like it can change completely or it's supposed to be this and it can be scoped down to this.
But no, we try to have...
a decent foundation. I'm not going to say the code that we do in Proto is going to be final, but we make it so that we don't have to rewrite the whole thing if we do keep the feature.
Alright, thank you. Cool.
Hi, it all sounds a little bit like a fairy tale to me.
Yes.
Like everything was peachy and all went well.
Yes.
But can you mention like maybe one big mistake or problem you did during development that you would wish you didn't?
One big mistake?
I don't know if I could say big mistakes, I mean...
The mistakes overall, the stuff that we really learn from, you know, like...
These are all...
To me, mistakes are really opportunities to learn stuff.
And if you learn something from a situation, is it really that much of a mistake, really?
I mean, the process that you see here...
It's kind of the result of iteration over several years.
So the mistakes are really the problems that happen that we try to solve.
So in this case, a problem that would happen early on, before we had this process, would be, hey guys, what's going on?
We have a hard time iterating because we have a hard time, for example, getting support from animation because they're busy with some other top priority stuff.
So that, to me, I guess, would qualify as a mistake.
And it's these things that we try to address with this process.
So in this case, if...
I guess if you're asking me if there's one thing that would really improve in the process, if I knew I would have tried it already.
What I'd like really for us to do is try to find even more ways for the guys to really take ownership and push the feature forward.
So well I guess it's one of the things that I really tried to hammer, where you want people to really have each other's back and help each other.
And whenever there's areas where we can improve in this regard, then those are the ones that you should really look out for and try to.
try to improve. Any other questions? We good? Alright, thank you so much.
