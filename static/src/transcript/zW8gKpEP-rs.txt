Okay, thanks for coming to my talk.
My name is Bernie Yee.
I'd like to give a quick intro of my background and what I'm talking about today.
I've served as an internal producer into internal dev teams.
Currently I'm at Oculus.
I've been working on the set of demos that are maybe you'll see today if you get a chance to.
I've worked at PopCap, where I got to work on two great teams, the Peggle 2 team and the Plants vs. Zombies 2 team.
Before that, I was at Bungie working on Destiny.
I've done external production, which is a different beast.
We won't be talking about that as much today, but I've been at publisher side, at Atari and Sony Online.
I've done a bunch of startups. I've tried my own startup.
We raised some money and didn't get Escape Velocity.
I worked for some well-funded startups, some poorly funded startups.
I've done some business development work.
I was at Harmonix trying to convince the studio to build a PC version of Rock Band.
Great idea, we didn't get enough traction.
And I also taught game development and production at Columbia University.
I foolishly convinced several of my students to get into the business.
To them, I apologize.
So.
I was thinking about the subject of what producers do.
I was building a house, and you're constantly creating lists of things and thinking about whether they're worth doing or not.
So much of the work of a producer comes down to this list-making, and it seems like a very trivial task.
You make lists to go shopping.
You make lists to take care of your kids.
But it occurred to me that even that simple task...
The process by which you derive that list is loaded with meaning.
This talk is really about how you, how I as a producer, approach creating this to-do list.
This isn't a talk to tell you what should be on that list, how you should spend your time from moment to moment.
We have other talks.
There was a talk today about prioritization.
There was a talk after mine about communication.
All these things are very important.
But this is really about a frame of mind, a kind of a conceptual framework about how which you should approach your work.
Because really, kind of like a Jedi Knight, you've got to build your own lightsaber, and this is how you go do it.
The background story of this, too, is I draw a lot of parallels to sports and deliberate practice.
I used to race bicycles, and I was not very good.
I placed in a handful of races, and that was when I was much younger and had more time to train.
and I had a coach who used to tell me, Bernie, when you're racing, get to the front, be in the right position, watch their attacks, pay attention to what wheel you're on, don't ride in the gutter, over and over again.
And because my results weren't so fantastic, I kind of thought, well, I'm a suck, this is really hard.
I got a chance to watch a few years later, in the midst of the Armstrong doping years, televised Tour de France.
And they put a camera in the, car where the director sportif, the coach of the team, was talking to his team on the radio. And sure enough, he said the same things. Get to the front, Frank, you are on this wheel, get out of that position, watch the attacks, the same sort of thing that I would hear as a very mediocre bike racer. And it reminded me that you have to be deliberate about what you do. You have to do things consciously. Even professionals, people who are at the far end of the bell curve, the top 1% of the 1%, needs sort of the same reminding of basic things over and over again.
And if you don't do things deliberately and thoughtfully, you're ultimately just a robot.
You're following a prescribed set of tasks.
And it limits your growth as a producer.
It limits your team.
And it ultimately limits your game.
So it's sort of a microcosm of how you evaluate games themselves.
You consciously evaluate the state of the game at any given time.
You should also consciously evaluate what you're doing as a producer.
So one thing a producer does, in general, is try to get everyone on the same page.
At Facebook, you know, Oculus was purchased by Facebook, and Facebook doesn't really have a producer culture.
I had an engineer ask me, so you're the producer, do you tell people what to do?
In some sense, I guess I do.
Someone will ask me, Birdy, what should I work on next?
And I'll say, you should work on this thing.
It seems to be the highest priority.
But in reality, I'm representing the priorities of the project.
This is an important distinction.
Producers are not managers.
It's not my personal authority.
I'm not your art director.
I can't tell you how you're going to improve as an artist.
I can't give you creative feedback.
I'm certainly not going to review any code.
God knows.
And I've also learned it never hurts staying the obvious.
So let's go through the definition of what a producer does.
Very quickly, you plan, you schedule, you create priorities, you articulate priorities, you get priorities from your team, you resolve a lot of conflict.
Whenever there's more than two people in a room, sometimes two people only is all you need to create conflict.
People don't see eye to eye on a task, the importance of a task.
how to solve a problem.
Maybe there's egos involved.
Almost always there's egos involved.
You end up a defender of the team quite a bit.
You resolve, you're the meat shield for all sorts of people outside your team that have opinions on how you should be doing your work and how your team should be doing your work, what direction you're going.
Sometimes these are valid inputs.
They, even valid inputs and opinions can be distracting.
It's your job to take body blows for the team more often than not.
You spend a lot of time with marketing.
Anybody who's played Destiny or Shadow of Mordor, there was a huge marketing campaign around these games.
Whether you like it or not, marketing is super important and gets the word out in a very crowded marketplace.
You have to have a good working relationship with them.
Some of the less sexy things, as if working with marketing wasn't at least sexy enough, is headcounts in P&L.
So part of the plan that you build up front will tell you how many people you think you need to build your game.
how much they cost to hire, and whether your game makes money or not, how much, what you have to do.
And I think you see a lot of this on Kickstarter now, where people spend, donate money to Kickstarter.
You've raised a million dollars.
How come you can't deliver this game?
Games cost a lot of money.
Good people cost money to work.
And at certain places, like Electronic Arts, a producer can be sort of a project lead.
This is a creative vision holder, creative vision.
creator, role.
And I think, depending on where you are, the proportion by which you do these jobs vary.
But I would argue that it is all these tasks are part of what a producer does.
I had someone explain to me what they thought production was.
You're juggling plates, and you have to know which ones you let fall, and you make those conscious decisions.
So when do producers get hired?
So small teams.
This is a big thing that's going on with a lot of my former colleagues now, both at PopCap and Bungie.
Folks are spinning off and starting their own studios.
They're super happy to be working with a small group of like-minded people.
They have history and shared communication.
Communication is easy.
You know what other people are thinking.
You've already agreed on your values.
Still, it's hard to get five people on the same page.
If you've been in a relationship with someone, it's hard to get two people on the same page often.
So five people, still a challenge, but the short cycle of communication, the sort of trust, the history that you've built up with people, a lot doesn't have to be said, and in theory, you are comfortable enough to say important things to each other.
So short cycle is a quick error correction.
You can get away with it.
So things are going great.
Presumably, you've got more money, you hire more people, you can do more work, the scope of your game increases, maybe the revenue projections of your game increases.
This is fantastic.
Then you reach this point where there's, I think, inherent limitations to communication within a team structure, when a team scales.
There's a few things that you can probably know about Dunbar's number.
150 is the maximum number of people that you can maintain a stable social relationship with.
Beyond that, you forget who they are, and you, more importantly, maybe lack empathy for what they are doing.
One of the things I learned, even at Bungie, arguably pound for pound, one of the most talented development studios, in the absence of information, people assume incompetence.
I don't know what they're doing.
They must be screwing it up.
There's another number that comes up often.
If you've ever tried to have a group conversation of more than five people.
you know what happens.
Either someone stops speaking up, or the conversation splinters.
Because your brain only sort of, we're not too far removed from primate socialization.
Our brain can only track about five conversations, five people talking at once, and once it exceeds that number, you start to focus.
So communication breaks down.
This is, you can, next time you go to a party tonight, watch it happen.
You probably know why, you know what I'm talking about, and one of the reasons for small meetings is conversations are hard after five people.
So people aren't communicating.
You've probably heard this, features are late.
Engineers are complaining about randomization.
I didn't know that we're supposed to do this.
This is not the highest priority.
Designers don't see their systems live until it's too late.
How come the engineer didn't talk to me before we built this?
He totally got this wrong.
And the business guys are beginning to wonder when you're going to ship your game.
This is often when a producer comes in.
Experienced teams will hire a producer earlier, before they reach this crisis state.
In fact, one of the, one of some of my colleagues formed a studio, Adam Jack, in Seattle, and they brought on a producer before they reached this point of chaos, because people who've been through this process know it takes energy to rally a team around a product goal.
So...
The producer spends most of their time on the to-do list of the team in the game.
People call this the backlog.
It's really a big fancy to-do list.
It's a thing in Excel or HandSoft or whatever you want to use.
But it's incredibly powerful because I think it encapsulates all the work a producer does.
The scheduling, the prioritization, the conflict resolution.
All of that gets wrapped up into creation of this artifact.
It's all the known work you know how to do.
This list also represents some of the issues that you hear about in game development.
Crunch culture, I see this on a lot of listservs that I'm on.
People decry crunch culture, and yet they play games like Last of Us that were built in crunch culture, and they're fantastic.
Is it good?
Is it bad?
Is it necessary?
How do you mitigate this?
And it comes from the list of work you generate.
You create a list.
It's a big list.
If the team's incapable of doing it under normal hours, things have to change, right?
So this is also an area where I think producers can really fall into a significant trap where you design by schedule.
If you control the schedule, you control, in theory, priority.
If you control priority, you control the aspects of the design.
You don't want to do that because you think you're being all sly and like, oh, I'm gonna get my thing on the list, but everyone knows what you're doing, and people don't like it.
They want to understand that the process is transparent and you're a steward and a shepherd of the project.
and there's a time to interject your opinion.
So how do you sort of build a to-do list that is rational, fair, transparent?
This is the thing that I want to talk about today, how you manage your own to-do list when you create the team's list.
This is what allows you to be effective as a producer.
The backlog is your responsibility, and that's the thing you have to take most seriously.
So I think...
Often when you start as a producer, you enter an environment that has a habit already and patterns.
So it's easy to follow the things you're supposed to do.
When I got to Bungie, they showed me the tools, the template, how they like to track their work.
And you just follow it for a while.
It's new to you.
You probably have to figure it out.
And it varies from studio to studio.
I think what a studio, what an executive producer does at PopCap is very different than what an executive producer does at Bungie.
So, if somebody were to make that transition, you'd have some acclimation time.
But when you settle in, you need to think about why you're doing these things.
You don't follow your process blindly.
You think about why you're going through all these steps.
There's a constant evaluation of this.
Why are you building a burndown chart?
It takes time. You have to collect the data.
You've got to crunch the numbers.
You've got to talk about it. You've got to react to it.
Why do you need to plan down to a really granular level?
How important is this?
What is it trying to solve?
So my talk is sort of built into three things.
Useful cliches, these sort of guiding principles that I've heard that have affected the way I think about production.
the things I do that try to make sense of the cliches and make them actionable, and things I've read that have really also profoundly affected the way I think about producing teams.
So the cliches are a really useful starting point.
My dirty little secret is I went to law school, and I know it's funny to have a business guy as a producer, but I was a nerd before that.
There are things we talked about in law school about the community of people that enforce laws.
You have police officers, you have lawyers, you have judges.
And each of them approaches their problem set in this continuum of law enforcement in a different way.
Police officers generally default to controlling a situation.
They don't care who did what.
They don't care if you're guilty or innocent.
It's not the time.
They want to get control and find out who's involved.
Lawyers come in after that.
Usually we ask a lot of questions.
We want to analyze the situation.
We ask hard questions.
We're rewarded for asking hard questions.
We want to understand both sides.
We want to understand all the possibilities.
And the judges take all of it and make a decision.
They're deciding.
They're the deciders.
They hear the facts.
This is how you do it.
Now, I say this because it sort of is my own bias about how I view production.
I was a lawyer, so I like to ask questions.
I like to understand why things work.
And I think by asking those questions, it reminds us of the essential reasons for what we are doing and why we're doing it.
So my first quote is.
My first cliche, I think, is from General slash President Eisenhower.
Plans are worthless, but planning is everything.
My second quote, George Patton, General George Patton.
A good plan violently executed now is better than a perfect plan next week.
He also was quoted saying a good solution applied with vigor now is better than a perfect solution applied ten minutes later.
I think it says probably something about me that the first two people I quoted were generals.
It probably fits my Myers-Briggs profile.
If anyone's a little more touchy-feely, Richard Carlson wrote a book, I think in the 70s or 80s, Don't Sweat the Small Stuff, and it's all small stuff.
I think this is really powerful.
I disagree that it's not all small stuff, because your game has a ship and it's not built on small stuff.
But this is an important thing to remember.
Don't sweat the small stuff.
Robert Greenleaf also wrote a self-help book, and he brought the term servant leader back into some modern usage.
The servant leader is servant first.
This reminds me constantly that producers are overhead.
You are a support function, like QA, like your office manager.
I used to say that I only have influence insofar as my leads on my team vested me with influence.
Bad games comes from bad communication.
I actually had an argument about this during a job interview with the head of production at a studio.
It is a producer-centric view of the problem of, let's not ship bad games.
I think an engineer would approach this problem differently.
I think a designer would explain this differently.
But I believe that this is defendable as the root cause of why games are bad.
If you assume that teams are generally competent and ambitious, and everyone wants to do the right thing for their project.
So we have these cliches or these truisms.
I think of them as fundamental principles.
How do you translate this into organizing your day?
So let's start with my favorite one.
Plans are worthless, but planning is everything.
This is your most important job.
This is the most probably time-consuming of your jobs.
We used to do it every Wednesday or Thursday on PVZ2.
The leads would dread it because I'd drag them in for hours and walk through the work.
Very important.
I mean, it is the most important thing to do.
And yet, by definition, the end result, the artifact you generate, is sort of futility.
It's like you Sisyphus rolling the rock up the hill.
Because the painful truth is, you throw away the plan.
You build this plan.
You work for a couple weeks or three weeks.
And you realize you didn't achieve your plan.
I tend to be pretty philosophical about these things because it's the only way that I can stop myself from grinding my teeth at night.
I think about monks who are making, you know, they take colored sand and make the intricate patterns like sand mandalas.
They spend all this energy and they create this thing of beauty and the wind comes and it blows it away.
Why is this true?
Because very rarely, despite your best efforts, does even two weeks go exactly according to plan.
Lots happened, right?
You know.
I mean, everyone here has seen it.
Found work, emergencies, people get sick, people finish faster than they thought they would.
It takes longer.
Dependencies outside your team are affecting you.
These happen.
And I think the more you are willing to let it go, the less bound by your plan you were.
If you repeat this pattern, plan, execute, throw away, plan, execute, throw away.
You do this predictably and consistently.
That's your process.
People talk about production process a lot.
That's your process.
The little side is it leads to the typical question, what's the best process?
We all want to know what the most efficient way of solving problems are.
And there's a lot of nuance to these things.
Waterfall, Scrum, Lean, Kanban, all these things are true and useful.
Do people know the difference between a complicated problem and a complex problem?
So this is an important thing to remember.
These things are different.
Complicated problems are things with lots of moving parts.
Let me give you an example.
Putting together a car is a complicated problem.
You put out a lot of stuff, you give me the tools, you give me the manual, I have no idea how to do it.
That being said, nothing in that process is unknown.
We know it all.
There is a book, there is a way to do it.
Someone does it, some machines do it every day.
Complicated problem.
A complex problem is, to quote Rumsfeld, it's the unknown unknowns.
You're trying to solve things you don't know yet, you don't know the answer to.
And I think that that's a thing you want to keep in mind, the difference between complicated problems and complex problems, and think about your best process.
That being said, this question, I believe, is the red herring.
The question isn't what the best process is, necessarily.
It's why do you have a process at all?
The process that I think about is a structure you can rely on when things get crazy.
They deliver goals to you that you can think about.
And I think again I got by the sports story.
I had a friend of mine who used to race bikes, and he was very good.
He was in Philadelphia, and Julius Erving, the famous basketball player, used to have this thing for athletes.
his basketball court unsurprisingly and he would shoot three-pointers all day and anyone who's old enough to remember doctor jay he couldn't hit three-pointers during games but all day he was hitting it from from downtown And my friend, the bike racer, asked, like, you're so good.
How come you don't do this in a game?
And he said, you try doing this with Larry Bird in your jersey.
It's hard.
But the reason why he practiced it was to do it under pressure.
So he could take the shot if he wanted to.
And that's the sort of deliberate practice part and what process is designed.
You repeat it, you do it, and when things get hairy, you rely on it.
So I think the real answer to this question is the best process is the one the team buys into.
I think it's fair to say that developers are generally suspicious of process.
They see it as a set of rules that gets in the way of work.
They want to start typing.
They want to start making the art.
They want to start making the game.
They see meetings.
They see stand-ups.
They see the arguments between teams, team members.
And it drives them crazy.
Your job is to get them to believe in the process.
even if it isn't the one you think should work.
Because you may be wrong, actually.
And when you have a process that the team buys into, even if it's waterfall and you think it's not going to work, you have a starting point, and a starting point is what you need for iteration.
You can iterate based on your own experiences and the sort of character of the team and their own temperament, but you need a starting point.
The thing I tend to do is make a lot of suggestions.
Hey, I think we should try to do it this way.
And if the team doesn't want to do it, you let them feel the pain of the decisions.
So it puts a little bit of a short-term deliverables at risk, but I think it's well worth it.
Let's say your team doesn't want to track work as granularly as you want.
They don't want to do stand-ups every day.
Can we do every other day?
What happens when something invariably happens on the days you don't meet and things get dropped and missed?
And then the team will be much more likely to hear your suggestions.
When they know there's a problem, they want the solution, and you should be able to provide them suggestions.
I actually, as an insider, have an opinion about the best process, unsurprisingly.
I think it's the one that aligns closest with game development and complex problems.
Consistent re-evaluation is really important because we're trying to build something that's fun, and no one can really define fun until you play it.
I think you want to protect the team from meddling.
This is the everybody's a designer syndrome, and I think the thing that does this most is Agile and Scrum.
for these two reasons, interactions in individuals over processing tools and responding to change over following a plan.
This reminds me not to be rigid about the process.
I think it aligns most well with how games are made, although not perfectly.
I think games has this constant pressure of delivering a promised feature set on a schedule, hard deadlines and unmovable dates.
And Agile is really about potentially skirting around some of that.
And Scrum has that, you know, once your sprint begins, don't inject new work.
And that is an easy way to keep people from meddling with the team's work.
So Jason was a former colleague of mine at Harmonix, and he said this, which I really appreciate.
There is no process which cannot be made ineffective by following it too closely.
myself included, tend to hold onto their process, which can be a good thing.
I think you want to perpetuate good habits in times of stress.
But this is also a dangerous thing when the process is no longer working and you're holding onto it because it's your process.
You're the producer. You should own the process.
And you can look at even some of the message boards on Agile and Scrum and these zealots who dismiss alterations to the one true way, even though their whole manifesto is to be flexible.
You can't hold onto your process too tightly.
So this leads to this idea of re-evaluation, re-factoring.
This happens to your game all the time.
To do this properly for a game, you need a plan, a backlog.
You need to do the work.
You need to think about how you succeeded against your plan.
I apply this to myself in a thing I started doing relatively recently, and I keep a diary now, a production diary, of my personal thoughts.
I remember reading someone talking about this on Facebook, another producer, who talked about how Trappist monks used to record their most important decisions of the day and why they made those decisions.
They'd keep a sort of diary of decision making.
And I don't have the discipline of a Trappist monk, but I try to keep it logged now.
I have a little OneNote tab that says, My Diary.
And I put things in there that hit me, mistakes I've made in real time.
So work went on at Oculus.
We were given a lot of tight deadlines and public shows.
We scoped a bunch of work.
It seemed like too much work to me, and it seemed vague.
But one other thing that's true about Oculus is it's full of smart people.
You know, what am I going to do?
I'm not going to tell Mike Abrash that he's wrong.
Full of smart people. They can do the work.
They've shipped big games. They've done this before.
I'm like, all right. They believe it.
I guess I should go along with it.
And it turns out that it had too— there was too much work in it.
There was a lot of hidden stuff that came back and bit us in the ass.
And I went back to my diary, and I'm like, trust your instincts.
Ask the questions.
And I think were I younger, I would have read that to believe, pushed back really hard at the time.
And maybe I tend to do that too much, but I think there's a way to approach that problem differently.
Ask questions.
Figure out what work is—if there's a question—if I'm unsettled about something, explore it.
The worst thing that happens is I look like an idiot, and I'm like, oh, it's obvious, Bernie.
This is super easy to do.
Look, this, this, and this.
Great.
The best thing that could happen is, hey, there's a lot of work here we hadn't thought about.
Maybe we should consider.
So I write this stuff in my diary, and I remember it.
And I still talk about it today.
So once you write something, it stays with you differently.
So...
don't sweat the small stuff.
Now, this is not an excuse not to be detail-oriented.
I think it's a fundamental entry condition of a producer to be detail-oriented.
You have to understand all the details before you start dropping them.
You have to know what the small stuff is.
You have to know what the big stuff is.
And the small stuff are things like process specifics.
We've been talking about this a little.
Detailed plans.
And detailed plans are really tempting because it gives you this illusion of control and knowledge.
I planned this guy's work down to the hour.
This is gonna be great.
Attention of granularity.
Do you believe how accurate you are?
The truth is, you know this plan is not going to work.
It's never worked.
So where's your ROI?
Where do you cut your losses?
The big stuff is the stuff you want to sweat.
Good habits.
How the team responds to crises, how communication works on your team, how accountable your team is to each other.
how critical you can be to each other about the work and progress, and how you course correct.
This is all the big stuff, and this is stuff you should sweat.
So how do you tell the difference?
It occurred to me, I was at Bungie, and Bungie's a very data-driven sort of...
quantitative data-driven culture, is that we are, in fact, scientists.
We collect data on the state of the project at any given time.
Data is very useful.
We talked about how it could avoid crunch and choose the right set of work.
And I think a lot of places get caught up in measuring quantitative data.
burn down charts.
How fast are you fixing your bugs?
How fast are you finishing these features?
What percentage of efficiency does your ICs work at?
Some places track some sort of multiplier.
You're a 0.8.
You're a 0.75.
Leads are 0.4, because they've got to manage people.
And there's an essential truth in there.
Leads probably can't be accounted on for IC work the same way that IC can, because you spend time managing.
So you know they're going to be less efficient.
On a project I worked on, people were talking about time estimation.
Two hours, four hours.
Yeah, it's a two-hour task.
No, it's a four-hour task.
We'll put down two hours, because you think you're working on it, you should know better.
These are all, I think, the important details that can be seductively misleading.
What are you measuring?
Work?
Efficiency is only one thing.
People, morale.
Faith in decisions.
How do you put that in an Excel spreadsheet?
It's your job to measure it.
So you're going to have to figure that out.
But I would argue that the failure from these unmeasurable qualitative things, like faith and belief in a project or a feature.
can overwhelm any granular planning errors you check.
I'll give you an example.
A studio had specced out a feature, passed concept, went into production.
It was a very expensive asset production pipeline.
Green all the way, check, it's good, we're on target.
Reach the end, see the final thing.
And the creative leadership is like, this sucks.
This is no good.
We're going to go, we've got to throw it all away.
So yes, the producer on the project.
Things were going well. We hit our milestones.
But the producer-centric lens that I would use is say, the producer did not or was not empowered to raise all the qualitative issues that they had found.
Because if you had found this earlier, and probably findable way before it actually hits real production, we would have not spent millions of dollars on this particular feature.
So science is a good metaphor.
We have theories which are operating assumptions based on data.
It's a theory of evolution. It's a theory of gravity.
We don't need to know all the details to know that this is an accurate theory.
I'm going to go back to that point of backlog being the known work.
Being 100% accurate, knowing all the work, is impossible.
There's one way to know exactly what work is in any given period.
It's to actually do the work.
So chasing accuracy at some point gives diminishing returns.
I accept that my goal is not to define all the work, but do enough to give the team confidence to act.
And this leads into my next cliche.
A good plan violently executed now is better than the perfect plan next week.
Another one I think, another good cliche which I almost use is don't let the perfect be the enemy of the good.
I had a friend of mine, a colleague, who just recently left a studio that was known for a very flat management structure to Amazon Game Studios.
And he finds it actually quite gratifying. He says that they have this thing called bias towards action.
which I really like, the idea that you want to act.
You don't want to think too much.
And that's why I think you need to embrace uncertainty.
Don't wait for a plan to be perfect.
It doesn't mean don't be rigorous.
You can define the amount of rigor you want to any given plan, but don't wait for that perfect plan.
You embrace uncertainty in planning.
You have to be comfortable with the fact that you're dealing with complex problems that don't have a clear solution yet.
I'm gonna.
quote, another former PVZ2 colleague of mine, our lead designer, and I squeezed him on his schedule once.
And he said to me, Bernie, you're forcing me to get it right the first time.
And he turned around and he walked away.
Um...
He wasn't mad at me, I don't think.
And I remember that vividly.
I mean, of all the moments of working on PVZ2, that's one of them.
I realized that I was limiting his effectiveness as a designer.
I was forcing him to be conservative.
I was forcing him to get something to ship.
And while I think he understood that we were on a tight schedule and that happens, that shouldn't be my default.
You have to embrace the uncertainty of that process.
The hardest problems you face will have uncertain answers that are not schedulable, and you'll have to embrace the sort of duality of a schedule and unschedulable work.
That is really kind of what makes making games hard and what makes making games great.
This sort of brings to the next cliché about servant leadership.
This falls into the idea that uncertainty means, as a producer, you don't have to have all the answers.
And the irony is even if you do have the answers, sometimes when you dictate them to the team, you'll have sabotaged the outcome.
Your team should derive the answers themselves.
While this was brought up in a self-help book in the 70s, it has its origin in the Teitiaoqing.
And I'll read you the translation, which I find really useful.
The highest type of ruler is one whose existence the people are barely aware.
Next comes the one whom they love and praise.
Next comes one whom they fear.
And next comes one whom they despise and defy.
Probably a lot of producers fall into the last two categories, fear, despise, defy.
I hope I get the fear and love and praise.
I don't think I've reached any of the higher levels of this, but this is true.
So everyone hear the chicken, you know, the chicken-pig project management story?
It's a joke, right?
Well, so I remember doing an interview at a studio, and some of the feedback that came back to me was, Bernie talks about him and the team almost as separate things a lot.
And it concerned them because, you know, you'd be on the team.
Why do you consider yourself separate?
That's how it perceived.
And I stand by that.
This is the joke.
So producers are chickens.
We lay the eggs, but our skin isn't on the line.
You're involved in it.
You're part of the outcome.
There's no question that your contribution is in the shipping product.
but you're not the bacon.
People are doing the typing and doing the Cintiq stuff.
They're the bacon. They're the pigs in this.
And that's why I think it's actually really important to resist the urge to prescribe action.
So when I go through my day, I think about how I want to frame these issues for people.
I try to present data and options. And I may have the right option, and you think I'm saving everyone time. Like, we could all talk about this, and we could just do the thing that I know is right. But the team will remember not necessarily the outcome, but they'll remember that it was your option and not their option.
I don't do this very well all the time. People in the audience probably know that.
There was a thing I did once that I was really proud of.
We were working on PVZ2, and we had a pretty big milestone coming up.
And we planned all this work, and it was really important not to miss a feature because it's EA, and we've got to hit these things, and it's important.
I'm not going to trivialize it by saying it's just EA.
We have to keep to a schedule.
We had a date.
And we put up, I don't know, it was like, 2x the work of the hours available or something like that, and we had to get it done.
And we put up the cards on the board.
We put up the time estimates.
I ran through the math with everyone.
and it's like 35 people sitting in the big team area.
I'm like, okay, we have all this work.
And we don't have enough time.
And then I stopped talking.
And it was really uncomfortable.
I stood there.
It felt like hours, but it was probably 10 seconds.
And I think the team was expecting, oh my god, Bernie's going to tell us a crunch.
He's going to go get pies for everybody or whatever it is and make us work through the weekend.
I didn't say anything because really it was so far beyond the realm of what I thought was even feasible to ask for, I didn't say anything.
And I remember Joe Sola, one of our engineers, probably one of our real.
leaders on that engineering team, came up and took a card down and said, what does this really mean? And the designers started talking. And they started breaking it up. I mean, some of the issues were we didn't think a lot of this work was parallelizable on a team. But Joe took it down, and he applied more rigor to it than I would have and probably more than you would normally want in a planning process because we had this problem.
And all the engineers sort of build up, and they start talking to these processes.
They started ripping up the cards and writing different ones, and they started load balancing their work.
And I think it was a sprint where we hit our goals.
We didn't finish all the work, but at the end, we were happy with what we did.
I wish I'd done that more often, and that's why I think it's useful to remind myself of this.
So the end state of your production values is this sort of idea that if you resolve the conflicts and you get people on the same page and you have clear priorities, these are the things you're doing on a daily basis, it's a little scary for your job security.
The best producers want to obsolete themselves.
They want to get their team into a state where they don't have problems and don't need you.
It's a little unsettling.
Things can go well.
I mean, people talk about production and all these horror stories.
In general, I thought PVZ, for instance, Things went pretty well.
We had a plan.
We executed to it.
We dodged some bullets.
We shipped a game that we were proud of.
So things can go well.
And when things go well, I think this is actually true for producers, you feel kind of useless.
You feel kind of unproductive.
Everyone's banging away at their stuff.
They're happy.
Even when things are problematic and there's a plan, they're executing on it, you kind of sit back and, you know, you play the build and you talk to folks.
You feel like you're not checking anything to perforce, therefore you're not useful.
You'll vacillate.
I think my current boss, Laura Fryer, tells me that there's an optimum line of efficiency for producers.
And a good producer will always veer towards the pushy, ineffective, pushy, ineffective.
And when she told me that, I felt like a weight was lifted off me, because I feel that way.
So my point, my advice here is to resist the urge to meddle.
Don't ask too many questions when things are going well.
Go home.
If you're a good producer, you're probably there late.
You should go home.
And I also remind you that watching and listening is actually doing something.
It's passive.
It's watchful, but it is still doing something.
Don't worry.
When things go well, they only go well for so long.
Okay, I think this is my last cliche.
Bad games comes from bad communication.
So I had this interview with a friend of mine now, head of production at a big studio.
And we talked about this.
And I think he felt communication was a soft skill.
Some people understand the difference between hard skills and soft skills.
Hard skills is sort of the technical aspects of being a producer.
You're going to create the work.
You're going to track the work.
You're going to check it off.
You're going to check in with people.
You're going to see what the risks are.
These are all expressible, arguably, in an Excel spreadsheet.
The soft skills stuff is how you deal with people and how you talk to them and how you understand what they really are feeling.
And I believe this is a false dichotomy, actually.
I disagree with him then, and he still gave me a job offer, which is good.
But I disagree with him now.
Because as I understand the hard skills, it's all about communication, right?
That task list, your check-ins, your worksheets, how much hours you've allocated, what your overage is, these are all about communicating problems to people that, in theory, can do something about it.
All the soft skills stuff is about communication, too.
It's understanding, are you bought into this feature?
Do you have any questions?
Do you have any doubts about what we're doing?
I say that every team has an Eeyore, you know, somebody who's super negative.
Oh, it's going wrong.
And that's my favorite person on the team because 70% of what that person is saying is usually just sort of Eeyore-ness, and 30% is, oh, my God, he's the canary in the coal mine.
I must listen to him.
So I take on the... I hear all the...
The...
the paranoia and fear, and I pick the things out of it that I think are worth following up and I follow up on them.
We're near the end of my talk.
There are things that I think people want to do about learning about production.
It's unfortunate because I use the baseball or the cycling analogy, and these are areas where you get to practice a shit ton before you go out on the field and do it.
You know, you have a job.
You don't get a chance to practice any of this.
You're on the field every day, and you have to figure out how to learn about your craft.
So books you might be tempted to read.
And I think they're all worth reading.
You probably read them.
Mythical Man Month on PeopleSoft is another one.
I learned things like how interruptions break productivity and set you back hours, potentially, for a small interruption.
Rapid Development, Agile Game Development with Scrum, these are all useful books.
Dynamics of Software Development.
These are all worth reading, and you probably know them.
Let me suggest other books which I think are probably more useful.
These four books have profoundly affected the way I think about my work.
and I struggle to put them into practice.
Science of Fear by Daniel Gardner is a book about cognitive bias.
It's about how we make shitty decisions when we think we're making good ones.
The two obvious ones, two cognitive biases, are confirmation bias.
People hear and they take data that reaffirms their worldview and they reject data that contradicts their worldview.
And as I said about befriending the Eeyore on my team...
I want to hear the contradictions to the worldview.
If I think things are going well, and I'm kind of the least domain expert of all the different disciplines on the team, if I think things are going well, I want to hear that stuff.
The other one is for those who are parents, the availability heuristic is another cognitive bias.
When you hear about a child kidnapping, you think, oh my God, my kid is gonna be kidnapped.
Because these events are so powerful, it skews your sense of probability and likelihood.
My second book is a book called Numeracy.
It talks about how, as a society, we are mathematically illiterate, and I don't want to undersell the value of production data.
Quantitative production data is super useful.
And understanding numbers is super useful.
And Paul talks about two examples that really struck in my head.
He draws a, he takes students, he draws a timeline on a blackboard.
He says, number line, zero, or on your side, zero, a billion.
Draw where a million is.
Most people put it like a third of the way there.
Because they don't know. I mean, numbers, that's why I have scientific notation.
People don't, can't understand numbers.
The other really great example that he talks about is the, uh, the three doors goat probability problem.
So, three doors, two doors have goats, one door has a car.
You pick a door.
Right, so you choose door one.
The game show host says, okay, I'm going to flip over one of these that's a goat.
Flips over, let's say door three.
Do you change?
What's your probability of two closed doors?
What's your probability?
Do you change your choice, or do you keep it the same?
The answer is, of course you change your choice.
Because now.
The probability has changed.
The probability of your first choice is you're 33% right.
The other two doors were 66% accuracy.
You've already eliminated one of them, so it's 66% likely that the second door is the car, and only 33% likely that the first door is the car.
It's completely counterintuitive.
I was a pretty good math student as a kid.
couldn't figure this out. Like, that's 50-50. How can that be?
But if you actually run through simulations of this, he's exactly right. 66%. And that's a significant difference in probability.
The third book is Don't Think of an Elephant by George Lakoff.
It's a left-leaning Democrat strategy book.
And if your politics don't align that way, you should bite your lip and read it anyway.
It's about how the Republican Party in the 80s reinvented their brand and framed issues in a different way to make it popular for people.
Compassionate conservatism, 1,000 points of light, all this stuff.
And the canonical example is, do you want to save 33% of people, or you want to let 66% of the people die?
I want to save 33% of the people, right?
It's how you frame that question, even though they're functionally the same.
Same outcome, different framing.
Thanks for the Feedback by Stone and Heen is a book I just started reading.
Because I think you are a servant leader, how you receive feedback is really critical.
You will get feedback from all your leads and your team.
Some of it will be valid, some of it will not be valid.
And feedback, I mean, people have a hard time even accepting good feedback.
You know, oh, no, it was nothing, really.
Negative feedback is even harder because you're usually put on the defensive.
I'm guilty of that sometimes. I think we all are.
But how you receive it is critical in growing as a producer.
And how you push back is critical in helping the person giving feedback grow.
It's an art. It's something to think about.
And I think these are all well worth reading.
Someone else has suggested Predictably Irrational, which is a book that a lot of free-to-play people have read because people make all sorts of weird behavioral economics decisions when purchasing free-to-play goods, but I haven't finished it, so I didn't put it on the list, but it's also worth reading.
So, I'll sum up saying production is sort of this invisible craft, right?
I was at a game board night with some Valve people, and they're like, oh, I'm a programmer at Valve.
Of course you are.
What do you do, Bernie?
I'm a producer.
And they all took one step back, like, oh.
So it's pretty fair to say, I think, that we laughed about it.
And production really varies by discipline.
You've been an art producer, maybe different than design producer.
It varies by project, team.
The PZ2 team is different than the Peggle2 team.
Destiny is different than Halo.
And even by studio, right?
Producers go into a studio with no portfolio.
So one of the people actually hired me at PopCup was here.
And he could only, well, I had nothing to show him.
If you're an artist, you have very concrete things to show off.
You look at a portfolio.
One of the great things about the team I'm working on now is I'm learning a lot about what makes a good animator.
It is, when they point it out, it's very obvious what makes a good animator.
Engineers also maybe not have code samples, but they can walk through technical solves.
They can talk about systems they authored or claim they authored on games.
And designers can do the same thing.
You go in with nothing.
And that's something you have to live with and embrace, that every team is a time you have to prove yourself.
Don't forget that.
So I want to thank people for the feedback.
All the teams I've worked on.
Especially in the last few years at PopCap and Bungie have taught me innumerable things about production.
I've learned more in the last three years than I have the rest of the time in the game industry.
Richard had me give a talk at PAX. Brian, Laura are people I work with now, and they've really talked, they've given me feedback on this talk.
I ran this through with Mike Soden and Mark Scattergood. I've stolen ideas from all of you, and that's okay because I've credited you.
And to you, thank you.
The act of actually writing this talk has reminded me of the things I need to remember.
We all get caught up in how we build games and hitting deadlines, and we don't think enough about what we're doing and why we're doing it.
I read somewhere that the act of talking about a problem and then actually writing it down changes the neurochemical outcome.
outcome of your brain and it impacts your memory differently.
And the act of writing this talk has helped me redefine some of the things that I've been thinking about.
So thank you for coming.
That's it.
So I have time for questions.
Does anyone have any questions?
You can come talk to me afterwards.
Yeah.
Sure.
Sure.
Thank you.
Yeah.
I think it's always really good.
I think that's an area actually I sometimes.
So the question is, what about positive meddling?
When your team hits a milestone, they've ground through something hard, do you want to meddle?
Of course, I wouldn't call that meddling.
I think that that's rewarding people in recognizing their effort.
Meddling, I think, is too many cooks in the kitchen sort of thing, right?
The idea is to let the team work and know when to back off.
And it's hard because I would imagine most producers here are pretty assertive and they want to help fix things and we're problem solvers and we want to get in there and prove that we're worth the head count.
That's the kind of meddling I'm talking about.
I think rewarding a team, and that's actually something I think I wish I were better at, and I've had managers who have been really good at recognizing work.
PopCap used to have a thing where they would give a $100 gift certificate to people who have really shown exceptional leadership and effort, and you could nominate anybody on the team for that.
So those are things that I think are really valuable in a team culture.
People like to be thanked.
They like to be recognized.
They don't need money or bonuses, although that is good.
just the recognition in front of your team is great.
We used to do a sprint demo at PVC2, and we used to, at the end of the two weeks, we'd get everyone in front of the monitors, and we'd run through what everyone worked on.
And I was worried that people would seem to think it was cheesy.
But after everyone's demo, they would clap.
And I think people were really into it.
Like, they were really proud of their work, even the kind of curmudgeonly engineers, like, yeah, yeah, yeah.
But they loved it. Like, they had to show off their work.
So I think the recognition is super important.
Any other questions?
Yes, hey.
Hi, I'm Russell Grain from Opaque Multimedia.
A lot of the time in smaller studios and that sort of stuff, the role of producer seems to get wrapped up with the role of team leader.
And I was just wondering how you felt the in-depth or almost excessive domain knowledge of some areas interact with that role.
It's interesting.
When I got to PVC2.
There are two people I want to earn the trust of right away.
It was the lead designer and the lead engineer.
I don't want to say that no one else was important.
They were all important. I love you all, my children.
But those are the two people I want to earn the trust of right away, because that was the person who told us what we were gonna do and how we were gonna do it.
So in that sense, being a leader really means about earning their trust and letting you...
letting them trust you to speak for them.
On small teams, I think that's equally true, and you have to be comfortable with the fact that you don't have domain knowledge over everything.
I mean, I had opinions about design, and sometimes I even had the relevant insights about engineering, but they were clearly neither of those things.
So...
On small teams or large teams, you still have to earn that trust.
People will look at you as an authority figure because you're the sort of repository of this backlog.
You have a list.
You, in theory, are thinking about dates and all the things that the team shouldn't be worried about.
Jason Booth said also, never do something that you can let a producer do.
which is true, actually.
So even on small teams, I think that small teams require even more because there's more multiple hat wearing.
Does that answer your question?
I was also potentially concerned with how someone who's had a lot of art experience may inadvertently prioritize art above other things because they came from that art background.
That's true, and I think that's also one of the reasons why it's important to build relationships with multiple leads on the team.
I have none of those backgrounds.
I mean, I was a programmer as a kid and did none of the—you know, I drew a little bit, but I'm not an artist.
I'm not a programmer.
I did a little testing, but I'm not a QA guy.
So I was pretty neutral, and I was very utilitarian about the relationships I needed to rely on first.
If you're an artist and you're a producer, I think that's a bias that you have to worry, you have to work against, your own cognitive bias of, I tend to see things in my own worldview.
And you have to work to make sure you hear things that are not in your worldview.
So having a relationship between yourself and disciplines that aren't in your wheelhouse is probably extra important for them.
So if that's your case, I'd tell that person to spend a lot of time with the design and engineering leads.
Yes, any other questions?
Yes, sir.
Hey, I had a question just with your background and working with experienced developers, you know, guys that have worked in the game industry for, you know, 10 years or something.
Taking their feedback with how you're running your process on a specific project, and, you know, they might have a lot of opinions on how they want to run the project, but they don't really want to take the time away from their work to, like, sit in the meetings and stuff like that.
Just curious about your experience with that and how you handle those situations.
Now, that's the view is good from the cheap seats problem.
I think it's important to be gracefully accepting of that feedback.
Understand that there are things that they think are maybe not addressed by what you're doing.
Maybe their solution isn't the right solution.
And that's the part about accepting feedback that is really personal, because it feels like your domain is being encroached on.
I mean, I got into an argument in public on one of my dev teams with an engineer argued with me about process, and I regret doing it in public.
I mean, that was not a cool thing.
And I spent a lot of time with him trying to figure out what his main concerns were.
And his main concerns were, I don't like being told what to do and when to do it.
So once we understood that, I had a much better working relationship with him.
So it's often not the main thing that they're talking about.
Like, hey, you should do it this way.
You should get at the underlying issue.
The underlying issue was they didn't want to be scheduled.
So they were put on work that wasn't as mission critical.
And that worked out okay, but I understood that they didn't like being held accountable to schedules.
Yes?
Hi.
woman in audience I was wondering if you have any tips for when we get into crunch mode.
I find sometimes team members can get almost paralyzed or, you know, they actually just don't function well at all.
Do you have any tips for managing crunch mode and keeping your team motivated?
So I think the thing we did...
when we crunched on PVC2, I remember, in fact, our lead producers in the room, we went in a room and we really went over all the work.
And we spent a lot of time cutting things.
And it was really actually useful for me to have someone above me to come and say, nope, is that really important?
I was so close to the work, I had a hard time letting go of things.
And that happens also.
So we spent a lot of time, Mohan and Alan and I, going through a list of work and really whittling it down to the point where everyone was really unhappy.
You know, Mohan walked out of there being, oh shit, we cut all this stuff and this would have been great.
So, you know, they say in law, like a good settlement is where both parties walk away unhappy.
Like, we really cut stuff down.
And only then do we bring the whole team in to look at the work.
And some of the work, people refused to let go of.
Things that were cut, some developers just took it personally and said, I'm going to do it anyway.
That happened a few times on our team.
So I think you have to let them understand the goal, the deadlines, and that you as leadership have done everything you can to trim the work down to a manageable point.
Anything else, like you can pull chairs off of a, you can pull a.
legs off a chair, but when you hit three, you can't really take a leg away.
So we were down to three legs.
This is the last stable thing we have.
If they trust you've done that and you crunch, I think the team feels a lot better.
And I think the difference between a crunch and a death march is a crunch has a targeted goal.
Like, I want to finish these three things.
A death march is a sort of interminable, I'm gonna work until I fall over.
And that drives people crazy.
I think when people have clear goals that they can get to that's achievable, not impossible, the team is much more likely to rally around that than just work, you know, don't, you know, the EA spouse thing, leave at, you know, 11 p.m.
or 9 to 11 or your core hours or something.
That stuff is really morale-breaking.
I think a good crunch is team-generated.
We're gonna do this.
I can't refuse to let the game ship without these things.
We're gonna take it on.
Externally driven crunch is really hard to mitigate the morale impact.
You can lessen it, but it's hard to mitigate that impact.
I noticed you talked about the Eeyores on teams.
And I was just wondering if you could explain a little bit how you find that fine line of balancing your concerns with what they're saying, which is probably very real, with them bringing the entire team down.
Because one of the things I had learned throughout my personal experience in animation and games is that negativity can be a real threat to your team.
But at the same time, you want to pay attention to that, because a lot of those fears are very real.
One of the things we talk about is on our team, leads especially, should never be negative in public.
We often talk and bitch to each other about, oh my god, this is terrible, I can't believe we're doing this thing, but you can't present those doubts to the team because the team needs to be focused and locked down.
I think the EOR, it's one of those, it's like that Star Trek episode where the empath used to take on the pain of the other person and let them go, take their pain away.
and take it in.
I think that that's the thing you've got to do with these Eeyores.
They've got to know that they can come to you.
This is the therapist's role of being a producer.
Talk to you about their concerns and their fears.
Your job is to not fan them, but to think about them and listen to them.
I mean, the act of listening and taking them seriously is super valuable.
And ultimately, it's a thing for you to go through and see, well, what are these fears are founded?
And in general, I give wide latitude to the domain expertise of people.
If a tech artist who's got to implement all the stuff coming together is concerned about something, I'm going to be concerned about it because it's their work on the line.
They're the pig, quite literally.
And their, you know, audio is like that, too.
They come at the end, and they see everything.
So that's how I would deal with it.
Anyway, I'm getting a time cut.
You can talk to me afterwards.
Thanks again for coming.
I really appreciate it.
