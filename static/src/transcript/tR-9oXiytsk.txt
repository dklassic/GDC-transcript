Alright, so I would like to start off with a question. How many of you, your school has at least one course offering in game design? Okay, pretty much everyone, or at least a lot of you.
Now let's talk about specialized topics within game design. How many of you have an offering in serious games or persuasive games or games with a purpose or something? Fair number of you.
How many of you have something related to game writing, like narrative, world building?
Fair number of you. How many of you have an offering in game balance?
So, lots smaller. And some of you are like, uh, sort of, like an actual class dedicated to that. Now I'll just point out, I mean, every game project, not every game project is a serious game, but we have a lot of those. Not every game needs a serious amount of game writing, but we have a lot of those. Pretty much every game needs to be balanced in some form or other at some point. And we don't have a lot of those. So maybe, at least for those of us with game design programs that go beyond 101, maybe we should all think about doing this.
That's what this is about.
It's a case study in how I teach it.
So this was my first iteration on a full 10 week game balance course back in 2010.
It's still up there online.
It's released under a Creative Commons license.
Anyone who wants to mine it for anything useful can feel free to do that without having to ask permission.
This is from the first page of the syllabus of my most recent iteration on the course.
I think all courses where the topics build on each other should probably have a tech tree in it so students can see all the things that they learn and how they level.
And I also think every game degree curriculum with prerequisites or tracks or course sequences should probably be laid out like this.
I don't know if anyone is doing it like that, but you might want to think about it.
So I'll just put that over there on the left side in one piece.
And let's unpack this a bit and walk through kind of what I put in this course.
So, we start off with some critical vocabulary, just laying out basic definitions, like what do I mean when I say game balance? How is that different from pacing or tuning? Reminding everyone what a system is and what positive and negative feedback loops are. What we mean when we say that a game is deterministic or solvable, especially since that starts getting weird when we get into solving games of chance.
and rule symmetry and asymmetry.
This is where we set the boundaries of the course for what exactly the scope is when we talk about balance.
And by the way, I just love that the word cloud is the first thing that comes up when I Google the word vocabulary.
It's just so meta.
So how I define game balance for this class is creating, game balance is creating the appearance of fairness in a game.
And appearance is really important here.
It's about player perception as much as reality, because as game designers, we are crafting an experience.
And it's that experience that matters.
So balance is part math, part systems, and part psychology.
We do this through several methods.
One is designer intuition or experience. The game designer chooses to make certain things a certain way because it feels right to them. Another is play testing. You create a rapid prototype, play on your own or with friends, observe and make changes based on any rules, exploits or weaknesses that you find. Play testing is another thing that everyone has to do and there's very few courses offered in. That's a different presentation in this summit.
A third method is analytics, taking actual data from games and using statistical analysis to draw conclusions about how it's actually played.
And a fourth method is mathematical modeling, using math to understand the relationships between all the numbers in the game in order to choose the most appropriate ones.
And most of the focus in this course is on learning mathematical tools to do this modeling.
And also building spreadsheet proficiency so students can use these to solve problems and present solutions.
We also spend a lot of time, well we spend some time on analytics because that's widely used, it's very useful.
I want them to encounter that.
As for building their own intuition and building their own playtesting skills, we do that through practical exercises where they analyze the balance of an existing game or do balance on a game of their own.
I also point out to my students that on the very first day that math is a skill, it can be learned like any other, and the whole concept of a person being good at math or bad at math is just an American cultural myth.
There's been a ton of research showing that.
So therefore this will not be a valid excuse in this class to say, oh, I'm bad at math, therefore I suck at this.
Every student can get this if they apply themselves.
And so far that has turned out to be the case.
So once everyone is clear on the scope of the class and everyone has been given the chance to drop if this isn't what they thought it was, then we start off looking at numeric relationships. Because just saying I have five hit points left is meaningless unless you know whether other things do zero damage or occasionally one or if things are doing one to five damage or if things are doing a thousand damage. It's all about how numbers in the game relate to each other.
So we examine linear and identity relationships, triangular and polynomial relationships, and exponential and logarithmic relationships, and also chains of relationships.
Like how if a player is getting stronger in an RPG through polynomial growth, and monsters are also scaling polynomially, then the relationship between the player power and the monster power will be linear, not polynomial.
Things like that.
We also examine resource flow diagrams like Joris Dorman's wonderful machinations tool, just because it's a great way to visually show relationships between numbers.
And I also have the Class Play cookie clicker.
And mechanically, it's just a very pure implementation of the relationship between numbers.
You have cookies that are increasing at a rate of cookies per second, and then you use your cookies to increase your cookies per second, but at less efficient rates of exchange over time.
That's pretty much all the engine of the game is.
It's also important historically as the game that really popularized the idle game genre.
And this is controversial among my students.
They generally hate me for introducing them to this game if they haven't played it before, because it's totally addicting and yet it's really stupid.
And you're fully aware of how stupid it is that you're clicking on cookies and that's all you're doing just to increment a counter.
And it's stupid, but you get addicted to it and continue to do it anyway.
So really it's a game about self-loathing, which is one of the prerequisites to being a game designer, which is why I keep it in here.
From there we look at a special case of numeric relationships, which is resource systems and economic systems, because those come up a lot in games.
We cover the bits of an economics 101 course that are directly relevant to games, things like how supply and demand would affect prices in an MMO auction house.
how inflation affects those prices and different strategies for handling inflation in a game economy. And inter-player trading and the differences in how that works between closed and open game economies. And also various auction and inter-player trading systems, which are a lot more common in Euro games than in video games. And I encourage them to play Euro games that have strong trading or auction mechanics here, like Settlers of Catan or Modern Art.
After that we have enough tools to get into our first real in the trenches game balance project where we talk about games where better stuff costs more.
I refer to this as transitive relationships between the various game elements.
And one of the purest examples and the one that I examine a lot just because of my personal experience in the industry is TCGs like Magic the Gathering or Hearthstone.
You have a cost to put a card into play and then the card has an effect and more expensive cards are more powerful and what you're doing is putting all of the cost, limitations and drawbacks and also the powers, abilities and benefits in terms of numbers, scaled so that a card is balanced if the value of its costs equals the value of its benefits.
And you can put this into a spreadsheet where each mechanic has its own column, each row has a number.
Each row is its own card and there's one column that just contains some math function that incorporates all the other columns and spits out a number that tells you if the card is balanced or not and if not how far off it is and which direction. Very powerful technique. I actually just talked about this in the math for programmers tutorial an hour and a half ago if you want to look that up on the vault later.
So one of the projects here is for students to take an existing game with transitive mechanics and analyze it to find the game objects like the cards or whatever that are the most powerful, the weakest and the most balanced.
and then compare that in their math with the generally accepted wisdom of the games community.
So at this point now we've taken things as far as we can, balancing games based on skill, but we haven't done anything involving mechanics of chance yet. So now we dive into basic probability, specifically how to calculate independent probabilities like die rolls, where each roll doesn't affect the odds of future rolls, and dependent probabilities like drawing a card from a deck where each card draw does affect the probability of future card draws if you know what was removed.
So this is basically taking a probability 101 class, extracting the parts that we use in games and ignoring the rest. Although I do make sure they encounter things like the Monty Hall problem just so they understand that probability isn't always intuitive. I also go over ways to do sanity checks, like probabilities are always between zero and one, adding up all the non-overlapping outcomes should always get you one exactly. Because probability is very easy to screw up if you don't know what you're doing and you're not careful. But most of the time if something goes wrong, it goes wrong enough to fail a sanity check.
So it kind of has its built in debugger, which is nice. This stuff actually doesn't take that long to cover, just a week or so, but I throw in another week of playing some dice and card games in class and analyzing them, like the strategy between, behind bluff and liar's dice, or which side has the natural advantage in One Night Ultimate Werewolf, or any other relevant games that I've acquired recently.
Now at this point my students know how to calculate exactly how fast they'll go broke in Vegas.
And then I deliver some bad news, which is probability doesn't actually solve everything, for two reasons.
The first is that humans suck at probability.
We generally find it unintuitive.
Even if you do your odds calculations correctly as the game designer, a lot of times they will feel wrong to players.
The great Sid Meier even talked about some of his experiences with this at a keynote here in GDC back in 2010. So you also have to learn about not just how to calculate odds and probabilities, but also cognitive biases to explain why people get intuitive probability wrong and when they do.
And we talk about game design strategies to compensate for your players being buggy.
And this is also a great time to revisit games like Liar's Dice and poker to learn the difference between just doing the math and actually using psychological mechanics like bluffing. And interestingly, another thing that we mention here for the first time is ethics. Because whether we should be honest with our, you know, should we be honest with our players and do the probabilities the way we say we're going to, or should we, um, to and reinforce our players flawed understandings of probability. Basically is it okay to lie to our players or not. That's something worth thinking about. And I mentioned this here because we normally don't see matters of professional ethics emerging as a key topic in a math class.
Second thing that goes wrong with probability is that even if we're honest and our random number generators are not. Physical dice and cards are generally imperfect and not fully random. Any pseudo random numbers generated on a computer of course can't be random at all. And it's worth understanding a little bit about how these things work so you can predict how players could exploit these random systems to gain an unfair advantage. Whether it be through cheating at Vegas or at a high stakes e-sport or just scumming the save files of a single player RPG to gain an unfair advantage.
Now, I could switch this next topic with the previous, but I like making sure that students don't come to rely too much on probability before realizing its limitations.
But after I do that, I cycle back to a couple of other useful probability tools, specifically Monte Carlo simulations and Markov chains.
Now Monte Carlo is just repeating a random trial a few thousand or a million times and seeing what happens and then through the law of averages your results should be pretty close to an exact mathematical solution if there is one.
And Monte Carlo solutions are useful because they're easy.
There's no math required.
You just make a spreadsheet or sometimes do some light scripting.
They can be used in situations where calculating an exact solution is impossible or too unwieldy and slow or if the student just doesn't know how to do it.
Monte Carlo solutions also work as a useful sanity check if you do have an exact solution.
If you solve a probability question both ways, and with Monte Carlo and with math, and get the same answer, then it gives you a lot of extra certainty that you didn't make a mistake.
Markov chains, on the other hand, are useful for solving some very specific types of game design problems that involve repeating something, where the results of one thing affect the results of the next recursively.
As an example, consider a board game Monopoly.
And if you're trying to figure out which properties are the most or least likely to be landed on in order to compute the ROI for the purchase price of the properties, you could do that with a Monte Carlo simulation.
Just start it, go and roll 2D6 a bunch of times, go to jail when you roll three doubles in a row, stuff like that.
But you can also treat this as a set of states, where each state is a combination of what space you're on and how many times you've rolled doubles in a row.
And you could build this transition matrix of probabilities between states, take a column vector of probabilities of being in any given state at a time, and multiply that by the matrix a bunch of times, and you'll know after every single turn in the game what the possibility space is in terms of which spaces you might be on with what probabilities.
It's a bit complicated compared to most of the other topics in the course.
And it's limited to some very specific situations, but it's very powerful for getting exact mathematical solutions for things that you couldn't do any other way.
If you haven't encountered this before, there's a blog on a website called datagenetics.com that has an analysis of games like Candyland and Chutes and Ladders and things.
Very helpful primers on that kind of thing.
So now we've covered non-random transitive mechanics and also probability, and the next thing we do is smash those two things together to learn how to balance transitive mechanics that have a random or situational element to them.
This is something that most students will have run into already in their earlier design analysis of a TCG or similar game.
What do you do when a card, with a card, when it says you only get some benefit in a particular situation?
Like only if you're fully healed or only if the opponent has more than four cards in play or something.
And the short answer is that you come up with some kind of reasonable estimate for how often that benefit would trigger.
And you treat it as a probability. No different from saying 50% of the time you get this benefit or whatever.
the purest instance of situational balance I've seen is in tower defense games. And I like to have the students play and analyze desktop tower defense 1.5 specifically. It's old enough that many of them haven't played it before. It's historically important as one of the games that popularized the genre. And almost everything in that game is situational. You have some towers that do area effect damage, which were great when enemies are clustered together but not when they're spread out. Towers that only hit flying or non-flying enemies or other towers that can hit both but are less powerful.
powerful. Towers that do no damage at all and just boost the power of the towers next to them. So it all depends on where you put it and so on. The value of everything depends on the board state and what kinds of enemies are in the next wave and what kinds of towers you make. And if you really want students to go all in for this, you could even have a tournament. See who can use their analysis to build the best tower loadout and give your excess GDC swag to the winners.
Then we take the stuff that we learned about numeric relationships and transitive systems and put that together with probability again to examine reward systems and advancement and progression and pacing.
This includes things like random loot drop tables in RPGs so that you can make sure the player doesn't get the ultimate sort of awesomeness plus five as a random drop in the first dungeon.
We also look at progression systems like leveling curves.
How many enemies do you have to kill to gain a level on average?
How long is that expected to take in play time?
So you're trading off danger for time for advancement.
And also looking at advancement in the story, which is a reward in and of itself.
And then bringing in human psychology and how a lot of little rewards spread out provide more impact than a single big reward.
And how rewards on a random reinforcement schedule are more powerful than a fixed schedule, stuff like that.
If you wanna place more emphasis on this, you could easily make this a semester long project.
where you take a game like an old school JRPG and go through all the encounter and loot and level charts and tables and use math to predict how long it will take a player to grind through each area, when they'll level up and how often, and generally when is the player receiving some kind of reward, and then cross-referencing that reward schedule with the most and least memorable events in areas in the game in order to understand from a mathematical perspective where the enjoyment of the game is coming from.
This is also another place where professional ethics comes up, because reward schedules come up a lot in social and mobile games, and also in the gambling industry, as ways to psychologically manipulate players to pay money or continue playing.
And there's the question of whether that is okay, and if so, where do we cross the line into unethical behavior, and what do we as game designers do about it?
Next up we take a look at the reverse of probability which is statistics. In probability you know the nature of the randomness and you use it to predict what the actual data will look like, like the results of a die roll. In statistics you see the results and you use those to try and derive the nature of the randomness that they arose from. Statistics is a bit harder than probability because it's just as unintuitive, just as easy to get wrong and there's fewer sanity checks to alert you to being wrong. There are some people that have this saying that numbers don't lie but in reality the data are always trying to trick you. They're very mean.
So once we learn some basic statistical tools like mean, median, standard deviation, standard error, the Z test, statistical significance, then we dive into analytics to learn about what kinds of numbers we should record for a game and how we would use the results to determine whether the game was balanced or not.
Fighting and brawling games and MOBAs are great with this because you have a ton of characters that all have to be balanced against each other in ways that don't easily lend themselves to being analyzed purely through math formulas and spreadsheeting that relate them to one another.
One exercise I like to do is give them, is to come up with metric, have them come up with a metrics plan for a game that they're working on themselves.
You might be working on some small passion project like a simple board game or something, but if you had a few thousand playtests and could record any data you wanted, give me a question that you'd want to know the answer to, and then list what data you would collect to get an answer to that question, and then how would you interpret that data to get an answer?
Like, what would a positive or negative result look like?
And this is yet another place where professional ethics is discussed in regards to metrics driven design. If you find out for example that changing a certain number or mechanic or whatever leads to greater revenue but also reduces player enjoyment, such as might be the case with mechanics that hold your player's accounts for ransom.
or that intentionally create pain points that can only be removed by paying money?
Is that something that's good? Is that something that's unfortunate but necessary?
Or is it something that's a breach of professional ethics as a game designer?
And as with other ethical questions raised in this class, I don't give any answers or opinions.
I just point out that these are things that a game designer should be thinking about and forming an opinion about, because if you don't, then someone else will make that decision for you.
The last thing we cover in the class is intransitive mechanics, that is, things like rock, paper, scissors, where there's no concept of better or more powerful because it all depends on what your opponent is doing. Something is strong against one thing and weak against another.
And this is where we get into the fields of linear algebra and game theory, dealing with payoff matrices and Nash equilibriums to solve these kinds of problems mathematically.
I think it's pretty fascinating that you can ask a question like, suppose we're playing rock, paper, scissors, but if I win with a rock, it counts double.
And if you win with a rock, it's just normal. And we're playing to best of 10.
You can actually use matrices and systems of equations to come up with a solution of exactly how often both of us should choose each throw and how big of an advantage this is for me.
So this is some of the mathiest, geekiest math that I cover in the class.
And frankly, it's not all that useful in a lot of games because it's very pure and it's very work-intensive.
But there are a lot of games where, that have some kind of intransitive relationships.
Any situation where you might use terms like hard counter or soft counter, which would include units in RTSs, characters in fighting or brawling games or MOBAs, character classes in MMOs, decks and strategies in TCGs, all kinds of things like that.
So like Markov chains, I don't think that game theory is used a lot in the field, but I do find it to be a really fascinating tool that's very powerful in the right situation.
So I want my students to encounter it.
So one thing I want to point out here is that actually playing games, either in class or as homework, or maybe home play, is really important in this class. Math is not always intuitive if you just write a bunch of equations on the board, but if you can see it in action, it's a lot easier to grok what's going on. It's also useful to provide context, that the concepts we're learning here are useful and can be applied directly to analyze games or solve real-world balance problems. In all the years I've been teaching this, I have not once been asked the question, when will we ever use this?
So students are seeing the theory and the application at the same time. That helps keep the students engaged. Plus they love playing games as part of a course requirement and it lets me introduce them to a number of games that I wouldn't normally be able to get them to play otherwise. So that lets me add to their personal game canon as well.
Another thing this class lends itself to really well is PVP mechanics, having students compete in some kind of game balance or mathematical analysis task where the final answer isn't clear, isn't obvious, and there are multiple layers of potential analysis.
I have players either play on their own for a high score or play against each other in class in a tournament.
And I usually modify these games slightly, both to simplify the constraints so the analysis space isn't as huge, and also to prevent the students from just using Google to find optimal strategies.
I also try to favor games that can be solved in a spreadsheet because spreadsheeting skills are really important for game designers and for game balance in particular. So this serves as a good practice for them. Cookie Clicker and Desktop Tower Defense I've mentioned already.
Battle of Battle was actually presented here by Eric Zimmerman last year and it's been a wonderful in class exercise for me. Cordial Minuet is a game designed by Jason Rohrer that is a pure game theory problem. And I had to do some very heavy, uh, game design changes to that because two elements of the original game are real money gambling, which is required, and also satanic themes. So I had to remove those things, obviously. Pig is a traditional dice game that's a great example of calculating probabilities. And Gopu is an intransitive game from the Suquoden series of JRPGs. You can just look all those up and probably figure out what's going on with that.
Another important topic that's distributed throughout the class is how to use spreadsheets because the vast majority of game balance problems can be solved in Excel and I want students to be strongly proficient in spreadsheeting. I divide these things up and introduce them a few at a time each week using the ones that are relevant to the problems that need to be solved that week.
I go into a lot of detail with this, mostly just pointing out features in Excel that are useful and then asking them to use those features in their design work for the week.
We cover formatting to make the spreadsheets look more readable and usable, various types of graphs and charts that can be used to visualize data, how to comment your worksheet properly, the same way that you would have to comment your code, how to use formulas at a very basic level, doing sorting and data validation, dealing with multiple worksheets and how to format them for readability and usability.
dealing with all the different ways to fill or copy and paste to save time, and showing them a wide variety of useful functions, of which there are too many to list in this slide.
One notable exception here is I do not get into writing scripts, such as VBScript in Excel or the scripting language that they have with Google Sheets, because 99 times out of 100, it isn't necessary, and it just makes things way more complicated, and I get a lot of programming students that tend to default to writing script rather than learning the think in spreadsheets.
I want students to be able to think in terms of formulas here, not code.
A typical case is a student who will write a thousand line script to implement an AI to play a game and then I'll have to walk through it with them line by line to show them how to do exactly the same thing in about 50 cells instead.
Greatly condensed and way more readable.
The class also lends itself to multi-part projects that are longer term.
One is doing a design analysis of an existing game or part of an existing game.
I've had students do the math to derive the design thinking behind Hearthstone, Dominion, Netrunner and a number of other card games, figuring out the relationship between cost and benefits and then creating a new 5 to 10 card mini expansion for the game with cards all focused on a single mechanical theme that requires the student to invent a new mechanic and then figure out how much it costs.
This kind of thing becomes particularly awesome in cases where I happen to know the designer of the game that a student is analyzing.
In a lot of cases, designers are particularly amused that their own creative work, their own commercial work, is being used as a class assignment.
And they're usually very happy to be available for questions from students.
Though in my experience, the students are usually too intimidated to take advantage of this.
In the future, I'll probably organize a required Q&A or something like that.
The other benefit is that in some cases, I've been able to actually send the student work to the designer for consideration in using their expansion as part of a future release.
Having a professional design credit for a class project is a kind of holy grail for the student in my class.
It has not happened yet, but these things are slow, and the possibility is there.
For students working on other games, or for a different class, or just on their own passion projects, analyzing their own games from a balance perspective, and creating mathematical models to improve the balance of their game, is also a useful way to go about this.
or just give them a game to balance. I created a game called Harmony that I presented before.
It's a very simple TCG with just four mechanics and the goal is to balance those mechanics with each other. Starts off completely broken intentionally and students have to figure out how to relate these things to each other. Projects in this class are super important to practice these skills on real games because it's one thing to say make a game as a project, it's another to say now balance that game.
I've also been working over the past couple of years to document everything in this class and I now have the first draft manuscript for a complete book.
The first draft is done and I will be talking to publishers here at GDC and shortly after.
So if you want to run a class like this and you can wait a year or so to get it into your curriculum, I should have a textbook ready for you before too long.
In the meantime, feel free to use what's available on Game Balance Concepts, even if it's an earlier iteration, and feel free to write me after the show if you have any questions about it or anything.
Thanks for listening and now I will be happy to take a couple of questions.
As a game designer, I actually run into this issue a lot in that I too am usually running, or sorry, as a programmer, I'm usually writing a lot of code and I'm trying to code my way around the things you're talking about with the spreadsheet.
It occurs to me that actually probably one other advantage in doing so much design through the spreadsheet is it probably creates a natural limitation as well to the scope.
So does it, am I correct in that it actually probably helps to prevent scope creep, at least within ourselves?
I would say that probably is true. So the question is, would learning to do things, balance in spreadsheets as opposed to code, you know, limit our, help to limit scope of complexity? I think that definitely would be true. You know, usually I have to, usually I have to go the other direction in that trying to get them to stop using code in the first place and just getting them to think in spreadsheets.
Being able to think in terms of formulas, in terms of relationships between mathematical things.
If you've got something, an algorithm that's super, super complicated, then analyzing it is very difficult.
And if something is too difficult for you to analyze, then it's too complex to be put in the game.
So yes.
Hello.
Do you ever talk about logic and how logic can connect to balance when it comes to design?
OK, can you clarify what you mean by logic?
Because that's a very large term.
So I often, with my students, realize that they don't understand the logic, generally, of maybe the puzzle or challenge that they're putting together.
And then when it comes to balancing that experience in the game, like what's the difference between level one and level two and the difficulty?
Because they're not following, they're not thinking through the logical problem.
They're having trouble just putting their head around, what is the balance then of that player experience?
Okay, so we're talking, do students have difficult time, do I go into game logic and understanding these mechanics and how they relate to each other?
Because if students don't understand how the mechanics of the game work at a core level, then it's kind of hard to figure out how the numbers work.
Is that correct?
Is that what you're asking?
But also the more sort of formal concepts of logic, like spatial reasoning versus.
different types of logic. In the current iteration I don't do that. As you've noticed there's a lot that I am covering. That hasn't been a problem for me in my experience. I think a lot of it helps that I'm at RIT which has a very technical focus. So students understanding some kind of propositional logic and lambda calculus and things like that, they get exposed to that through their computer science classes anyway.
For a less technical group, usually my biggest challenge is getting them to be able to have the mathematical thinking to understand at a, you know, just an intuitive level how different numbers affect each other. And so logic would certainly be a part of that, but I'll take one challenge at a time.
Hi, I work with a lot of teenage students, 13 to 17 mostly, and I was wondering, for a mini course for that age range, what concept do you think you would start them on?
So this is, as you've noticed, I call this a math class that's cleverly disguised as game design.
That's kind of how I pitch it to other people here.
So one thing that I found is interesting is that even though we get into some pretty heavy math, because it's contextualized in games that students already understand and can already play, the math is, it has meaning.
And all of a sudden you don't really, like the prerequisite for this class in terms of what math you've encountered in the past is basically can you solve an equation from algebra one?
If you know how to do that, I can scaffold everything else on top of that.
I would certainly take some of the more challenging parts like linear algebra and game theory out, or at least greatly simplify it.
Or just say this is something that exists, it's a lot harder.
It's a bit harder, it's beyond the scope of this course.
This is for an audience of younger children and teenagers.
But most of this, it's, usually it's not the actual mathematical skills and that's the challenge.
Usually it's just building up the mathematical reasoning and intuitive.
Which do you think is actually the most important concept that you should start in?
Like, if you're like, okay, I got 10 hours to teach.
What are you teaching them?
So I would say if you only have ten hours, how would I pick the most important concepts in this class?
That's a good question. I would say I would go through, you know, the, I would go through numeric relationships and I would go through the balance of TCGs just because it's, you know, it's very pure, it's very related to like algebra. So it kind of builds on those skills that are probably going to be age appropriate at that range. And, you know, and it lets you, you know, and it relates it to games that a lot of them are playing right now already. So.
Thanks. That was helpful.
I'm not sure if people are going to boot us out, but I'll keep answering questions until someone tells me to stop.
I have two questions.
First, very simple, how many hours of course and how many hours for the students represent the course and at which level?
is given this course.
And the second question is, we have a quite similar course, but we have taken the point of view that you can explain everything taking the point of view of game theory.
If you want to go, you make games against nature to introduce probability, and you can choose a game negotiation to explain other topics.
What do you think about this point of view?
Because I understood that you are.
game theory only at the end for non-transitive choice system.
So let me repeat that back because I'm not sure I quite got that. So the first question is just how long does this take?
How many hours? In its current incarnation it's a three credit hour class over 15 weeks. There are certainly things in there that I could cut if I had to take it down to 10.
And for the second question you were asking about.
The second question is, in the course we are given, the whole contents that you have given is taken as different point of view from game theory.
For example, when we introduce probability, we introduce probability as games against nature, and things like that.
So my question would.
You introduce game theory only at the end?
So yeah, the reason I do game theory at the end is partly because it ties together a lot of other things we've been doing in there.
So it kind of requires you to understand a little bit about probability, a little bit about transitive mechanics and how they relate to things.
There's all these, a little bit about human psychology and just the idea that we can try to modern, like that human brains aren't always mathematical.
you know, and bringing all, and also just encountering things like matrices and matrix multiplication in, when we talked about Markov chains. So all those things kind of are prerequisites that lead up to this. That's part of the reason why it's at the end of the course that I talk about game theory. The other side of this is, yeah, I mean, like I said, it's not...
something that's widely used in the field as a tool, and it certainly has a lot of limitations to it.
I just think it's kind of neat. And certainly, you're absolutely right, though, that even game theory doesn't always predict human behavior.
And that is worth mentioning in that section. And I do mention that once your games get sufficiently complicated, where you need game theory in order to figure out things and you're working on things on multiple levels, it's probably too complicated for someone to actually solve it intuitively anyway and player behavior is going to diverge from optimal math. But you could at least use that to write a good AI. So. Okay. And I'm being told to stop. So thank you all.
