Hi everyone, I'm Andrew Baer and I was the lead UI programmer on Borderlands 3.
I left Gearbox Software at the beginning of the year, but they've graciously allowed me to still give this talk.
Today I'll be talking about how we approached creating accessibility features, or as we saw it, any feature that lowers the barrier of entry for our games so more people can enjoy them.
Of course this includes things like colorblind settings and subtitles, but it also includes features like difficulty settings.
These are some of the accessibility features we added to Borderlands 3, and these are the ones I'll be talking about today.
These features weren't chosen randomly, but rather have specific stories I'd like to tell in order to help you all learn what worked and what didn't for us.
I'll also be weaving in some organizational stories for those of you in leadership or production roles.
So that's what I'm bringing to the table, but I'm making two assumptions.
First, I'm assuming y'all are devs, which seems like a pretty safe bet.
And secondly, I assume that if you're here, you already know that accessibility is important.
If you're a designer, you want a better experience for your players.
If you're a biz dev person, you want to accommodate a larger audience.
If you're a producer, you want the best bang for your buck in terms of features.
And if you're a programmer like me, you just want to work on the really cool feature that everybody's going to use.
Now if you're not convinced why accessibility is important, don't take my word for it.
We were successful in Borderlands 3, and this talk is only a case study about that successful approach for accessibility features.
There are plenty of brilliant people out there who are talking and writing about why accessibility should be at the forefront of devs' minds.
I strongly encourage just listening to advocates and outlets for a while.
These are my favorite sources, and I referenced them heavily or spoke with them when creating features and creating this talk.
Karen Stevens' research at EA is second to none, and Ian Hamilton and Sherry Thompson are wonderful advocates.
Additionally, the AbleGamers charity does incredible work helping gamers, including creating custom control rigs.
And finally, the Can I Play That? organization has fantastic articles in review, including Borderlands 3's perfect mobility score and 7 out of 10 death scores.
Now my team and I are just UI devs, but that's no excuse.
Us devs still have to make an effort, even when we're under the gun, to create a much anticipated AAA sequel.
This is exactly where we found ourselves on Borderlands 3.
To give you a better idea of what I mean, our story begins in the way long back forgotten age of 2017.
It was a whole new world and everybody was relearning the engine, from code to design to localization to audio.
For UI in particular, we spent a month or so using UE4's UMG and realized it just wasn't a good fit for us.
We had a couple of reasons for this, but the largest was that our UI designers were struggling with the transition from Adobe's tools to UMG, and we just couldn't do what we needed to in the schedule we were on.
So, on June 1st, 2017, UI went back to the devil we knew, Scaleform.
This CL was basically our starting pistol for UI.
Over the next two years and one month, which is nine months less time between Borderlands 1 and Borderlands 2, we would build Borderlands 3 UI from the ground up, since all these changes meant we had no starting code or content, unlike when moving from BL1 to BL2.
We basically had a partial style guide and a dream.
We still created over 60 HUD widgets and 33 menus at Gold, and for comparison, Borderlands 1 and Borderlands 2 had about 30 to 40 HUD widgets, depending on how you count, and about a dozen menus.
Borderlands 3 had the most complicated skill tree and inventory yet, and we still kept split-screen, 2-player top-bottom, and 4-player co-op.
A few bullet points on a slide doesn't really do it justice, so to pull just a few examples...
First, we have the humble crosshair.
Baudoin S3 is a shooter and we needed to actually create a deceptively complicated crosshair.
I'm showing six here, but we only have one per weapon type with a few variants to match the manufacturer.
For example, that second one from the top and from the left is the alternate version of the TDR shotgun crosshair.
Then we have the Action Skill widget.
On the right is the traditional Action Skill widget, showing the Beastmaster's Rack Attack ability, and on the left is the Beastmaster's Spider Ant ability.
Both of these have charges and cooldowns and error states if the player tries to use it when they can.
We also have an experience bar.
and we have an item card so you can see all the stats for your loot, and Borderlands 3 is a co-op game so we have buddy widgets so you can see your friend's stats, and pet health and shield bars, and a boss bar, and overhead nameplates, and a 3D mini-map, and an inventory system, not to mention a skill system, a big map, and my personal favorite the options menu.
There's quite a few bits I didn't mention, but when you add in the meetings, the iterations, and the bugs on top of the implementation, you start feeling like this tired Corby.
The UI we created isn't perfect, but it's a small miracle we pulled it off.
And it's all thanks to the brilliant and dedicated UI team at Gearbox.
Everyone thinks their team is the best, but I know from experience that I worked with some outstanding individuals.
I don't say all of this just to brag, but because it wasn't just the UI team working hard, everybody was firing on all cylinders to get this game to the state it was shipped in.
So, when I approached our creative director about starting an accessibility strike team, it was no surprise that he said, only if it didn't derail their work.
that since we had already tried to fit more game in less time, we would need to be clever in order to keep our efforts in the margins and not detract from the main game.
I was a bit dismayed by his response, if I'm being honest, but I understood why he reached the conclusion, and we pressed on.
So that's where I want to focus today, at the intersection of no time, no dedicated resources, and an already mountain of work to do elsewhere.
I'll be telling six stories that I think best summarize our approach.
First, with our backs against the walls, our best move was to waste time on Slack.
In the beginning, I decided we'd meet once from the outset and to outline our goals to make sure people could face this name.
Therefore, it was necessary to find a place we could serve as our home base without requiring anyone to physically move.
We created a simple chat room anybody in the company, including our sister studio in Canada could join.
This gave a voice to everyone, allowing any designer, programmer, tester, whatever, to raise concerns, ask questions, or even offer suggestions.
It also provided a place where we could post articles.
These are articles we posted, and more importantly, the resulting conversations from them was by far the best thing we could have done for the team.
We were able to see what worked for others and define a standard for ourselves.
We were forced to constantly hone and strengthen our beliefs and designs.
Also, by constantly pinging the chatroom with new articles to read, it kept accessibility in the foreground.
It wasn't just an afterthought to us, it was what we talked about day in and day out.
Two articles in particular really stick out.
The first one talks about Domino's Pizza and Robles, a court case headed to the Supreme Court at the time.
It's a fascinating read, and I strongly recommend folks seek it out.
The other article was from Ubisoft and talked about the usage metrics of their accessibility features.
The data showed just how widespread the usage was and how it demanded the industry start pouring real resources into their development.
These conversations kept people informed and interested.
Couple that with everyone at Gearbox being able and encouraged to participate, it paid massive dividends, as you'll hear in the other stories.
This is where we start, not with a green light from our creative director, not with a kickoff meeting, but in these discussions.
Without this home-based return to.
Without it constantly stoking the flames, accessibility wouldn't have been in the back of everyone's mind as they went about their work.
Since we had that open line of communication, we received a few requests.
For example, one day during pre-production, while we were still figuring out what Borderlands 3 would be and how we would build it, a member of our QA staff posted in our chat room that she encountered motion sickness easily and was concerned that their proposed head bob system, especially while moving in the recently pitched mech Iron Bear, would be a problem.
Recognizing the potential here, our animation team explored possible solutions.
As I mentioned earlier, we were still in pre-pro, and there was just enough time for our animation team.
team to experiment with a few ideas before proposing a solution. A player modifiable slider that would alter the magnitude of the headbomb with the ability to turn it completely off. It sounds so simple and straightforward, but with all the gears moving around us, with all the chaos of development, we weren't confident from the get-go.
After a day or so of experimentation, It only took the enigmator and myself about 30 minutes to implement the solution.
Had we not started talking about accessibility when we did, with as many people included as possible, we probably would have ended up with some tacked on afterthought of a solution, if we could find time for it at all. Now we have a neat little multiplier without re-architecting anyway.
The takeaway here really is to start talking about accessibility as early as possible with every person possible.
You don't have to make concrete plans, but talk early and often.
Talking about accessibility with everyone can lead to some unseen benefits.
For example, one day while working on the item card, we realized that it would be difficult for some folks to identify different rarity types at a distance. Early on, we decided not to spawn the item card at large distances, just like we did with BL2, but experimented with a handful of ideas to help identify the gear.
These ideas included displaying a small icon while looking at the item, like we do in the ship game when the player is a bit closer.
Showing this icon at a larger distance really got in the way of normal play, especially combat, and it didn't end up being something that we actually went with.
We also thought about displaying an additional icon on the minimap, like how legendaries are displayed in the shipping game, but this was scrapped over clutter concerns.
After a while, we realized we had hit a brick wall and we asked folks to think about it as we turned our focus elsewhere.
A few days later, our absolutely world-class effects director shows up with this.
On the side, he had taken it upon himself to create lube beams that scale in intensity and size with rarity level.
The GIF is a bit artifact, but even if you completely disregard the colors in this GIF, you can see the differences in heights in the bloom effect of the base of the beam and how many wispy particles are emitted from the lower portion of the beam.
Common, all the way on the left, has the shortest, most bland effect.
Uncommon, directly to its right, is slightly taller and has a larger base.
Rare is taller still, has a slightly larger base, and the occasional wispy particle.
Epic has the second tallest base and a constant handful of wispy particles.
And the legendary effect is larger than the gun itself, obscenely tall, has a torrent of particles at the bottom, and even has a dedicated star icon on the minimap you can see in the top right. We were totally floored by this approach. We hadn't considered looking at our humble loop beams. It took a unique perspective to rethink what information loop beams can convey and unique skill to articulate that concept.
So the takeaway here is to empower everyone to experiment.
Not every idea will make it all the way, but if you encourage everyone to have ownership, they'll stun you with their ingenuity and unique approaches.
Honestly, I hope us devs begin to treat accessibility the same way we treat performance or memory.
It's everyone's responsibility to make the game accessible, not one dev or even a group of devs off in a corner somewhere.
A few days after these loop beam changes went in, this lesson was further cemented when one of our audio designers on the team heard about what we did and created unique sound effects for the different rarities dropping.
It was a well-received change, and our players have this almost Pavlovian response to when they hear a legendary drop in the world.
It's incredible, and it's all thanks to our devs feeling like they were empowered to experiment.
On the other hand, empowering isn't a silver bullet.
For this next story, we thought we had the right idea, but we fell short.
Unlike movies or TV, just displaying what characters say really misses critical audio cues our players needed.
Inspired by Minecraft's closed caption system that you can see here, we really wanted to display additional text prompts to alert players to specific events in our world that they needed to react to.
We were also concerned that closed captions triggered too frequently or a larger number of them.
would take up too much space and much needed screen real estate and overall lead to a negative experience.
So we opted for captions that would only message comment information that was needed immediately, that wasn't already visually messaged somehow.
In the final version, this meant that we displayed closed captions for barrels igniting or exploding within the range of the player, as well as when base bosses begin certain wind-up animations.
As you can see here in the center and the right images, respectively.
It also meant, for example, that we didn't caption grenades landing on the player, since we had a dedicated widget for them, as seen on the far left.
This wasn't received very well.
Essentially, and I 100% agree in retrospect, the reviewer is calling out that we simply didn't caption everything we should have.
That we missed environmental hazards or additional attacks from non-boss enemies, and they also called out that we should have captioned emotion or sound effects in our subtitles.
That by limiting ourselves to combat captions, our dialogue lost some of its punch when being read.
In the end, nothing beats testing with your target audience.
Personally, not being able to find the time in our schedule to make more user testing happen was our number one flaw.
We should have figured out a way to focus test these features more thoroughly so that when we shipped the game, we started off on the right foot.
That said, sometimes we don't have to look very far to make sure that we're on the right foot.
Fresh off of Battleborn, we wanted to provide expansive color options to accommodate players.
As you can see here, on Battleborn, we gave players the ability to recolor not just parts of the UI, like the crosshair and the nameplates and the health bars, but also the detailing of the minions, the sentries, and even the build nodes.
When it came to Borderlands 3, we started wanting to implement an equivalent idea of color swaps.
It's about this time that I learned that one of our UI designers is colorblind.
I had never known, and it was none of my business.
It just simply hadn't come up until now.
He's a fantastic artist and he really took the time to dive in deep and figure out what color information we needed to have alternate messaging for.
What he found was that rarity was almost always in plain text.
And when it wasn't, that plain text for the rarity's name was always quick to obtain.
For example, you can navigate to an item and see its rarity quickly in all of our item menus.
The same is true for the elemental damage types, which always have unique icons and are always spelled out in plain text.
We also figured out that the crosshair was the only widget that relied solely on color to convey whether the player is aiming at a friendly, an enemy, or neither.
When we realized this, we just couldn't justify the amount of time we need in our already crammed schedule.
for a full color wheel, or even for a color picker for just the one widget, and opted for a set number of baked-in colors the player could choose from.
He and some other devs figured out what would be the best preset color options, and with his approval, we knew we had a solid list without spending unnecessary time making something that would be overkill for our specific needs.
The takeaway here is simple.
Challenge yourself to think elegantly.
The large, deluxe version of a feature is nice, but is it the best use of your time?
Can that time be freed up and used elsewhere?
I can't say for certain just how much time we saved going this route, let alone what it was used for, but I'm certain everyone here will agree with me that our time is precious and needs to be saved where it can be so we can absorb the nasty surprises that somehow always rear their heads the worst possible time.
Speaking of less than great surprises...
Even with buy-in from the team, some devs, with their minds on deadlines and with the very best of intentions, won't be easily convinced that accessibility should be a higher priority.
As I'm sure anyone here can attest to, these devs have to make hard choices on what receives their attention and what doesn't every day.
And it's sometimes difficult for folks to remember what a wide-ranging impact accessibility features can have.
Even with our in-the-margin strategy, we still had a few instances of this, but one particular example sticks out.
An early milestone was approaching, and a designer had learned about the head bob scaling feature I mentioned previously.
He only learned about the feature itself, not about how we approached it or how little time we actually spent on it.
He assumed that we had spent a lot of time and resources on the feature and vocalized his dismay about our approach.
By learning of the feature from the results and not from the process, he was concerned we were shirking our other responsibilities.
He posted on our Slack channel, and before I could even type out a response, the conversation quickly became heated.
On the one hand, this is a spark of high drama aimed at a powder keg of anxious dads trying to make deadlines.
But on the other hand, I was weirdly glad he felt confident enough to say something in such a public way.
It maybe wasn't the best phrasing, but I'm sure he wasn't the only one who came to such a conclusion, and it gave us a chance to either confirm that we were on the right track, or have an outside observer call us on something we missed.
In the end, taking the time to explain the process one-on-one, in our case over a beer after work, turned a powder keg of a situation into something that reinforced our confidence.
It also turned a vocal skeptic into a vocal proponent of our approach.
So the takeaway here is nothing surprising. Make room for dissenting opinions and approach them and those with them with respect rather than drama.
So those are my stories. As a quick recap, and if you want to take a picture or a screenshot of this slide, now is definitely the time.
Chat rooms keep accessibility in the foreground.
Talk early, often, and with everyone.
Empower experimentation.
Test often.
Think elegantly.
And leave room for dissension.
I'm going to pause here for people to take screenshots.
Great.
Here are some of the articles that I use either for this talk or when discussing features and approaches with the team, in addition to my Twitter handle and those that I frequently communicate about accessibility options. I'm going to pause here, but other than that, thank you for listening to my talk.
