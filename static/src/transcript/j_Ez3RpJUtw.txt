Hello all, thank you all for coming to the talk.
I'm extremely excited to be here.
This is the design direction of I Expect You to Die Too.
And I'm Francisco Zucchi, I'm a principal game designer at Shell Games.
I was a design director for I Expect You to Die Too, and I've been at Shell for a long time now, about 12 years, worked on a plethora of projects.
But we're here to talk about...
I expected to die.
We are currently number three top rated Quest game as of February 2022.
Obviously, extremely happy with the game and how the game turned out.
And today, I'm going to cover specifically the design direction from a project management perspective.
So a little bit about I expected to die.
We are a VR puzzle game, six levels total.
And the design team that I was running was at its largest, about six people plus myself.
But on average, I was in charge of a team of about four game designers plus me.
Like I said, this is primarily a management track talk through the lens of the design director.
So I'm not going to be covering puzzle design.
I'm not covering gameplay.
I would happily cover that in a different talk.
I love nerding out about puzzles.
But today we're going to talk about.
creating the schedule for the game.
And mostly we're going to talk about process and planning challenges and how we solve those process and planning challenges.
Again, these are specifically the design director portion of those processes.
You will once in a while see a slide like this one.
These are my key takeaways.
And there's another slide at the end.
And just so you know, I will be sharing all these slides in a PDF.
So there's gonna be a link at the end as well as on the vault.
So, you know, feel free to take pictures, but there will be a PDF shared at the end.
So no pressure there.
So, you know, this is my first takeaway. Just a very simple one. These are the things I value in my teammates. Civility, tolerance, and respect. You will notice that skill isn't ranked particularly high in this list. And, you know, this is just speaking about the type of people I like to make games with. These are the non-negotiables.
You know, in that note, these are those type of people who are part of my team, who I am extremely grateful to and without whom we, of course, could not have been able to to make the game.
Let's get right into it. Let's get right into making this game and how that went.
So let's start with pre-production and what we knew going in.
We knew we wanted a game that was six levels long, and we knew what I call the size of the box.
This is, you know, the schedule length and the resources we had at our disposal.
And...
We were trying to plan the game to fit in this box. Of course, we started with pre-production.
That's where this is happening. It's a very quick note about pre-production is that because we were a sequel, we did not have to dedicate pre-production time to anything like exploring new core mechanics or anything like that. It was mostly about new ways to tell the content that we wanted to put in the game.
Then we have this crazy theory that we were just going to make everything sequentially.
We're going to make three levels and then we're going to have a separate team, a separate pod, making three more levels and then, you know, we'll have a six-level game.
What can go wrong?
And in parallel, we're going to have what's called the meta pod, which is just a teamwork and all the meta features for the game.
Once all of this is in, we're going to polish it all, kind of QA it all, port it, and we have a game.
So we're armed with a schedule and this is the schedule that we walked into production with.
Let's talk about making a specific level.
We would split our level making into three phases.
Nothing, you know, groundbreaking here is a pre-production and alpha and a beta for, for each level.
And.
I do want to talk about this idea of buffer.
I am a huge fan of planning out my projects with buffer at the end.
Buffer is not polish.
Buffer is a chunk of time that you would be totally okay if it just disappeared into the ether.
Something happened and you just took your buffer away, you would be happy.
So you want to plan with buffer because things will happen.
For this specific game, we did something a little different, which is instead of putting the buffer at the end, we sprinkled it throughout the different level milestones. So one week of buffer at each milestone, the theory there being that teams could reclaim the buffer if they needed it, or they could bank it for a future level if they didn't need it. But what are our design goals in pre-production? Pretty simple, just plan everything. This is a lot of planning and a lot of figuring out what we're making.
was one main problem though for me during pre-production, which is that I did not work on the first game.
I was not part of that team in any way.
So imagine you're me, you're walking into Shell Games, it's 2019, so you're physically walking into the office first day of the project, and you're tasked with making a sequel, and you...
You really did not work on the first one.
So you have to figure out sort of what it is that you're making.
I, I, I liken it to like, imagine you sit at a restaurant and you're served a pizza and you bite into the pizza and then you're told right now you have to make a pizza.
So what, what did I do?
How did I go about making this pizza?
What I decided to do was.
talk to anyone that has opinions about pizza.
So capital O opinions, people who have opinions about I Expect You To Die, people from the first team, maybe people from the studio leadership, people who just are fans of the game.
And I started to collect, what to you makes an I Expect You To Die level?
I collected all this information and I put it into, you know, different categories.
And with those categories, I build what I call the master design guide.
So a master design guide is a 60 item checklist of things that make a level feel like an I expect you to die level.
You know, if you check every single one of those, theoretically, you have something that kind of looks and feels like an I expect you to die level, right?
We're going back to the pizza.
This is, you know, you would have things like.
You know, probably has some cheese in it.
Maybe it has tomato sauce.
It has some amount of toppings.
You can hold it.
You can bite into it and not burn your mouth, right?
So it's not a recipe for making the level.
It's a list of characteristics that each one of these levels will have.
This is a template that I used.
And the key thing here is that because this is a checklist, we have to decide when were we going to check.
that we have everything on the list. So we settled on at the end of every milestone for every level, so at the end of pre-pro, end of alpha, end of beta. I'm sure one more time at the end of the project might not. We're going to do a check against each single one of these items and everything that we weren't meeting was going to be tagged in yellow. Here's an example of some of the things that you could find in this document. And it spanned everything from puzzle design all the way through to accessibility considerations, right? So we're talking about, you know, things like are players invited to look around? Are deaths getting players closer to the solution? You know, are people confused in any way by, you know, where the clues are or how we're leading them to cleverness? But also accessibility considerations like can this be completed one-handed? You know, et cetera. Here's a little example there at the bottom.
of one of these questions that we weren't meeting in alpha, so we tag it yellow.
Hopefully by the time we come in into beta and work on the level again, that specific item will be addressed.
On the topic of accessibility, this is another notable document that we used to plan in pre-production.
And the problem we were trying to solve with this one was that we historically at Shell Games have not been particularly good at accessibility, especially up until 2019 when we started getting more serious about it. So in an effort to combat that, We worked out a process with the product team at Shell that results in a list of all the accessibility considerations and design decisions.
And those go back to the master guide, to that pizza document.
Right?
This can be and is actually all other GDC talk.
So on Friday, Alexis Miller and I are going to be covering how we use this document and how this document was created.
There's a quick peek at what the document, you know, part of the document looks like.
It's just a giant list of about 30, 35 different accessibility considerations.
And the goal is you want to look at these as early as possible so you can weave them into your project planning.
For us, this meant putting it in the pizza document, right?
Putting in that design master guide.
And again, checking at every milestone how we were doing, and then everything that we weren't hitting, we tag in yellow, make sure to come back later.
You all probably are familiar with game pillars.
There was no problem solved here.
asked ourselves, do we like the pillars from the first game?
And actually, yeah, no, they're great. We love them.
They're beautiful.
They have served us well, and they continued to serve us well throughout development.
So we took the decision to not touch the pillars.
We're going to keep them.
So that was pre-production and armed with all this knowledge, we set on to make our first two levels.
All right, so the goals of this phase, we're just, you know, let's make two levels and see where we're at.
See if these levels we make kind of feel like unexpected high level or not.
So we're excited and then.
March, 2020 happens and we are not excited anymore.
We are all at home.
So I don't have to explain to any of you what happened in March, 2020, we were, you know, in the alpha phase for both of our levels, we had to go home and, you know, looking back in retrospect about how much time it took us to regain our footing, it was about an, an extra four to six weeks that just disappeared into the ether.
So what does it mean?
Does it bring it to the ether?
Well, it means that.
all of that beautiful, beautiful buffer time we had planned for the whole project.
chop it. We essentially were left without room for error. Now, this put us in a way better situation than the majority of teams around the world, right, that were working from home at this time, that were trying to adjust. Because we had planned for that buffer, and so this just meant that we used the buffer. But we were still, theoretically, if nothing else went horribly wrong, scheduled to ship at about the same time that we were planning.
Um, something to keep in mind here is that at Shell games, we seriously, as much as we can, disincentivize crunch. Uh, I don't crunch. I try to get my team to crunch the least amount. There's just no crunch. If you must work extra hours, I would like to know so that we can find ways for you to recover those hours later.
And that meant that if anything else went wrong, we had no room for error.
So the game was going to have to downsize, or we were going to have to go to leadership and request more resources for the game.
So, you know, through this work from home, it was hard on a lot of us.
And, you know, looking back at that period, I think that what was the most, the biggest need we had at that time was a need for stability of any kind.
There was so much out of our control in all of our lives that every single developer was just looking for something in this project to hold on to something they could predict and something they could control.
In many ways that reflected itself in changes to process to try to help people regain some of that control. Some of that we got right, some of that we got wrong, and there's two big lessons to learn from that adjustment. The first one in game development processes is that processes impact people's lives directly, your developers' lives. So what I mean by this is, you know, if you imagine your game that you make, your players are going to play your game using a game controller, using a headset. Your developers, when they make the game, they make it with a combination of tools and processes. And these processes, this is scrum, this is daily meetings, this is daily reviews or general reviews, this is...
Like, all the meetings, all the ways in which your team is interfacing with the game development.
And as a process holder, if you're a director, you should be very careful about meddling with process.
It has the potential to have direct impact in someone's lives or someone's emotional state to the point of like, what time do they wake up? How do they plan their day? How do they expect their work to be reviewed and when? The classic example here of getting this wrong for us is Some of us, when the pandemic started, had a stark need for more social time, and some of us had a stark need for no social time, right? And some of our process changes were sort of optimizing for the team being together and supporting each other and spending more time with each other, and that was just not what some of us needed.
The way to counter this that I would recommend is to default to involving the team in all of these decisions.
Your dream state should be that if you're going to roll out a new process, by the time you're rolling it out to the team, every single person in that room that is affected by that process knows what's coming, was consulted, and had an opportunity to give feedback on that process.
So you're not really imparting any new information.
You are just pretty much telling them something they already know.
So, you know, we had that rattling and we powered through it and eventually we ended up at what felt like two levels, you know, you're going to have to squint.
You kind of had to like blindfold yourself and take a bite of that pizza and be like.
Yeah, this could technically be pizza if I think about it really hard.
But it felt like a big success for us.
Again, these are the first levels many of us were making.
And we were calibrated to the rhythm of what we were making.
It really felt like the first stage of the project was completed.
And armed with that confidence, we marched into the next stage of the project, which is four more levels.
So let's make four more levels.
That's our goal.
And before we go and make these four more levels, we're gonna take a little bit of stock here.
This stage of the project, the four more levels stage, is where we have the most impactful process adjustment.
I call it the great adjustment state or stage.
It is what the majority of the stock will cover.
And it is a period of learning from that first figure out what we're making and getting ready for the next stage of just making everything. And this adjustment period, uh, we framed in terms of solving some very specific problems. So here's that, here's the takeaway and something that you will see reflected all the way cascading through this talk is alignment on the problem to solve.
So what I mean by alignment on the problem to solve is try to get your team and try to get yourself as much as possible out of solution space, out of solution brain, solution mind.
if you are, or if you, if you lead them to be more problem oriented and you can get everyone to agree on the problem, then first you activate their solution brain in a much better way, which is not just solving whatever problem affects them, but solving the general problem.
Let's talk about some general problems. So this is a big one.
And it is the one that pretty much keeps me up at night.
This is the design team is hungry for more guidance, but as a design director, my role is to provide that guidance with a light touch and in a way that doesn't steal.
from their creative freedom and their creative agency.
Like I said, if I'm going to be sitting at night in bed thinking I'm an imposter, what have I done? How did I get this job? It's going to be because I'm going to be thinking back to this specific problem like 95% of the time.
So Let's talk about some lessons that I learned in providing guidance and providing creative freedom to my team.
The first lesson is that every single one of your teammates is a different human and needs something different.
What I mean by that is not everyone likes to take direction in the same way.
Not everyone likes to.
to provide creativity or to be creative in the same way.
So there is not one solution fits all.
You will have to learn about the humans in your team and treat them like humans and engage in that conversation in a way that fits them.
So get to know them.
The second one, however, is avoid having too light of a touch.
So this one's especially useful for me because I tend to be the type of person who is more likely to lean back and let people be creative than to give too strong of a direction.
However, what I've started to realize is that that is doing a different type of disservice to your team.
There is a reason if you're the design director that you are the design director.
It usually has to do with experience or passion or with a gift or a strength that you have.
And not only is your team expecting that direction, but they will learn from you and they will grow to be better developers by watching you provide direction.
So you're doing a disservice to the team and to the game by depriving them of your expertise.
So don't do that.
A big takeaway for me was to expose your decision-making process as much as possible.
What I mean by this is...
Presumably, presumably, when you make a decision, you don't just pull it out of thin air, right?
You go through some process in your mind and you arrive at a conclusion, and that conclusion leads you to making that decision.
If you can capture the process and then speak it out loud to your team, you're going to do them such a favor.
Why?
Well, first, Team members tend to be stressed if they can't predict more or less what you're going to say.
Second, by you exposing your thought process, your solution-finding process, they will get to replicate it next time when they're putting the next thing in the game.
So they're going to be able to say, OK, what did Francisco want here last time?
And how can I sort of preempt that to, or adopt his decision-making, adopt his thought process to make sure that I am successful faster next time?
And then it's just going to create alignment much faster.
Here's a quick example of, you know, very quickly.
One thing I threw together one day is we were having this giant play test and we're getting lots of data in from players, lots of data.
And the team was getting a little stressed because they were like, what are we going to do with all this data?
And to them, I was just making decisions randomly.
I was saying, we're going to listen to that feedback and that feedback and that feedback, but they didn't see any rhyme operation.
for or to how I was making those decisions.
So I put together a really quick diagram and I said, right, here's what I'm doing.
If we're getting lots of data pointing in one specific direction and that direction is low scope, I'm gonna take that without telling anyone.
I'm not gonna consult anyone.
I'm gonna say, let's do it.
Let's just save some time.
Easy to do low hanging fruit, grab it.
If we are not getting a lot of data, on something that also happens to be high scope.
I'm going to archive it.
You will also not hear about it.
I'm just going to pretend it doesn't exist.
And then these other two categories are going to result in meetings, conversations, decision-making.
We're going to talk through all of them.
And this is what you can expect going forward the next week.
And that was a great week.
People knew what to expect and it lowered stress levels about all this data that was coming.
They didn't know what it was going to result in.
My next piece of advice is to again, be problem focused and not solution focused.
And when you're giving feedback, trying to focus on the problems you're trying to solve, you may describe what success looks like and you could, you could request the implementation of a very specific solution if you feel super strongly about it, but I would, I would lean on the side of giving solutions as examples of something that might work and telling the team, you may take it if you want, it's there, but.
don't feel pressure to do it.
Here's an example.
Let's say that we're making an I expect you to die level, and there's a rope in the level.
And there's also a knife in the level.
And the rope is there because we want the player to pull the rope and raise some sort of device by pulling the rope.
However, what we're finding is that players find the knife and they go, rope can cut knife.
I'm going to cut that rope.
And that's just not working.
It's not supported.
We don't let people cut that rope with our knife.
So I could go to the team and I could say, here's what we're noticing.
Playtesters are grabbing the knife.
They're trying to cut the rope.
Let's just make the rope a chain, call it a day, ship that game.
Uh, or.
I could say.
Here's what we're gonna do.
Let's walk in the player's shoes for a second.
I am the player, I'm playing the game.
I open the drawer, I find a knife, I pick up a knife.
What do we expect the player to do once they pick up a knife?
Well, generally the player will find a new tool and they will look around the level and they will say, where can I use this new tool?
And what they're doing is they're looking left, they're looking right, they're seeing a rope and because they already had the knife, they're seeing a hat.
there's a keyhole for my key, I'm gonna try to cut that.
So we need to intercept them at that moment and prevent that realization from happening.
I don't care how you do it.
We just need to prevent that realization from happening.
So what does success look like?
The player never makes a connection, knife plus rope.
How will you address that?
I don't care, up to you.
However, However, here's a possible solution.
You could consider making that rope a chain.
See what happens.
That might solve it.
If you don't want to take it, don't take it.
That's fine.
Maybe the team comes back and says, you know what we're going to do?
We're going to let the player cut the rope.
And I'd be like.
That's awesome.
Let's do that.
Or they might say, we're going to get rid of the knife.
And I'll say, even better.
Fewer, fewer stuff to support.
That's great.
Right?
So, so the tool that I like to use to surface these problems is this walking in the player's shoes.
So taking the team on a journey and.
asking it every step of the way, you know, what is the player thinking? What does the player want to do? What might they do next with the knowledge they have approved? And what I've noticed is that by running reviews that way, developers start also thinking that way when they're making the game.
And so we start having fewer and fewer issues like this one. The key to all of this I think that the one takeaway that encapsulates this whole slide is this last one.
There are many paths to victory.
This is the true Zen moment for me as a design director, is when I can truly sit down and believe this.
What do I mean by many paths to victory?
What I mean is...
My job as a design director is to make a great game, is to find, to find in the universe of possible great games that we could make, there are infinite great games, I just need to find one of them.
So what do I do?
I tell my team, team, this is what a great game looks like.
We're trying to find a game that is defined by these parameters.
These are the boundaries that we cannot escape.
These are some non-negotiables you cannot cross.
And then it's up to you to take me to that great game however you want.
If you can truly, truly believe that and let your team take you there, you are going to be so delightfully surprised.
So my takeaway here is there are many paths to victory that you cannot see.
And if you empower your team to take you to victory, if you define the boundaries, if you describe victory, and then you just guide them in that process, then they're going to take you there and everyone's going to be happy.
Maybe it's too wishful thinking, but this is the holy grail for me of game development.
We're all trailblazing together.
All right.
The next problem we had to solve was that even though I preach problem solving, I have a solution-oriented brain.
I'm just firing on all cylinders all the time.
Solutions, solutions, solutions, solutions.
So I need a way to capture those solutions.
When they come to me, just put them somewhere so they can stop bothering me.
So living agenda documents.
Maybe, I don't know, maybe everyone uses these.
I don't know.
We came up with them.
I feel like we would never use these before.
Maybe we're just like in ancient times of game development here, but they're just documents where anyone can drop anything at any time to be discussed at the next meeting.
So they look like this.
And we have.
a ton of recurring meetings in our team, right?
We have one-on-ones every couple of weeks.
We have design team meetings.
We have director meetings every day.
And the idea is that if you have a thought that is relevant to a specific person or a specific meeting, you can have that thought, capture that thought, find the agenda, put it in the agenda, and forget about it.
If I don't do this, I go insane because my brain will not stop.
This is a different format for the same type of document.
This is what we use for director meetings.
And it's a little more formal.
It's sortable.
So you can add items with a priority.
And then every day when directors meet, we sort by priority, sort by date, and just boom, boom, boom, boom, boom, start talking through these topics one by one, put the outcome on the notes.
So if anyone missed it that day, they can come back and see what they missed, and then tag it as discussed.
rinse and repeat. So we're adding stuff to this document daily and talking about it daily.
The next piece of feedback we got, our next problem we wanted to solve, was that we had a horrible, horrible feedback process. It was the worst. Let's talk about why it was the worst. This is like painful to think about even. So we had stakeholders, I'm talking about BPs.
like C-level executives, like the people who will eventually sign the game and say, yes, this is shippable. Their feedback was coming too late in a cadence that was unpredictable and in a format that was hard for us to parse. That was not their fault, actually.
It was mostly our fault. And then...
they weren't getting follow-up on what they wanted follow-up on because they didn't really know what they wanted follow-up on. And so we had some really, really rough meetings where, where, you know, stakeholders would come to us and say, Hey, I didn't know this was the plan.
I'm not on board with this plan. And it was just way too late for us to do much about it. And, and that just felt horrible. So we had to do something about that.
And then we also had no avenue for the team to give feedback or people to give feedback, you know, as it came up whenever they wanted. And all of this was making people stressed out. Everyone was stressed. It was, we were stressed because feedback was coming late. Feedback givers were stressed because they were like, what kind of game are these guys making? It was, it was just not a, not a great situation. So, so the first thing we decided to do was to say, we're going to choose one person, one lucky, lucky person.
and we're going to make them the owner of the feedback.
This person will be in charge of solving and owning our feedback problem.
And so we said, all right, if that sounds like you, raise your hand.
And everyone took a step back and I said, me, give it to me, I want it.
this problem, give it to me. So, so I became the owner of the feedback and my life became this for many, many months. All I was doing is saying, this person thinks this game is too boring. All right, put it in this box. This person thinks this thing's too yellow. Okay. Give it to the art director. This person saying that rinse and repeat, rinse and repeat. And I redesigned our feedback processes and split them into stakeholders and everybody else. So.
stakeholders. We made a special document for them, which I am super proud of. And we told them, please play the game every two weeks. And you're going to put all your feedback, everything you want, please, everything you want. As long as you're playing every two weeks, just put it all in this spreadsheet. Just tell us your build number, tell us who you are, whatever you're playing and write your feedback. Just, just drop it in there, drop it all, drop it all.
And I just ask one thing of you.
You're going to go to this high priority column, the one with the little yellow star.
And if you want follow-up, you're going to say, yes, please give me follow-up.
And I promise we will close the loop.
The other side of that coin is if you don't want follow-up, you need to be okay.
Never ever hearing about this ever again.
So for example, you can say, hmm, I don't like the position of this dial on this machine, I think it's not going to work out.
Do I need follow-up?
No, that's fine.
You guys figure out what to do about it.
And you truly need to be okay knowing you're not gonna get follow-up.
And this worked wonders for us because all of a sudden we had a clear cadence.
We had a place to collect the feedback and we had assurance that someone was reading this feedback all the time.
Very similar, we created a Trello board for the whole team to drop feedback in.
So it looks something like this.
And the deal with this Trello board is that any person in the team, anyone at any time, whenever they want, three in the morning, they woke up and they said, I have the best idea in the world. They can drop it in the Trello again, trying to get people's brains, clear people's brains. When they have ideas, they have a place for those ideas to live. And my, my.
promise to you if you're part of this team is that I will read every single card that goes in this Trello board.
So if you're not familiar with Trello boards, you know, there's these columns, you can make cards in the columns, and then you can move the cards around the different columns.
So the first two columns are for anyone to put feedback whenever they want.
There's one column for very important feedback, and one column for everything else.
Then a couple of times a week, I will go through the board and I would grab everything in that column.
And again, put it in the little box.
I'm going to go and I'm going to think, what does this feedback want to be?
So let's look at this one right here.
There are not enough things to eat in the elevator level.
We should add more bananas.
Fascinating.
What do I want to do about this?
So let's say I say, yeah, now this person is absolutely right, more bananas.
So I grab it and I put it into the turn me into a task column and a producer later goes there and turns it into a task.
Or let's say I think, you know, I am, I need to talk to the level, the level of people about this.
There might be something to this, but I'm not sure.
I'm not sure what to do here.
I'm going to put in a design review and we'll talk about it later.
I might say, I have no idea what to do with this.
This is not my problem.
Let's say this.
Pretend this card says bananas are too yellow.
I think bananas should be green.
I would grab that, and I would put it in the art review column and say, art director, this is your problem.
Bye bye.
Do whatever you want with this.
The magic of this board is that it empowers anyone to give feedback at any time.
And by knowing that I will look at it, they feel heard, and they feel like they have a way to impact the game.
The best way is they're just doing my job for me.
They're just, they're just telling me what do we need to fix?
So the tasks just make themselves.
That's great.
So from, from engaging with feedback for so long, I learned two big things.
The first thing may not surprise you is about problems and solutions is that people love to give feedback in solution form, so you might get feedback that says something like move the key.
from the drawer to under the seat.
That's a way better place for the key.
And you might be tempted to look at that and say, nah, that's dumb and throw it away, right?
What I encourage you to do is ask yourself, what problem is this person trying to solve with this solution?
They're giving me a solution, which I don't like.
I'm not gonna do this, but I do want to know, why do they want to move the key?
So are they telling me that the key is too easy to find right now?
Are they telling me that the key is too hard to find right now?
Are they telling me there's too many things in the drawer?
Or that we should put something under the chair because it's a great hiding place?
So if possible, I'll go talk to that person and I dig a little deeper.
And if not possible, then I try to as much as I can reverse engineer that feedback to see where it might be coming from.
So think solutions.
Sorry, don't think solutions.
Think problems.
The other piece of feedback is about digging deeper instead of pulling back.
We all receive feedback in our lives, in our careers, at home, whenever.
We all receive feedback or find ourselves in situations that make us uncomfortable and not unsafe, uncomfortable, and tend to pull back and say, I don't want to engage with that because it makes me uncomfortable.
I will say that I have learned the most about myself by not pulling back in those situations, but instead asking, why does this make me uncomfortable?
And if I can be truly honest with myself and answer that question, then I find that it leads to growth every single time.
One example here is we tend to get, obviously, a lot of puzzle feedback because our game has many, many puzzles.
And I am often tempted to say, wow, this person just doesn't understand puzzles or they don't understand this puzzle.
This puzzle is great.
This person doesn't know what they're talking about.
And every time I find myself thinking that, I say, stop.
Pretend they do know what they're talking about.
Or what is it about this puzzle that is making me have this reaction, right?
And more often than not, I find that it's maybe Maybe they're telling me to simplify the puzzle and I'm reticent because I want the puzzle to be hard and maybe it doesn't need to be hard.
Or maybe they're really telling me that it's not a good fit for the game and it's also that I'm fond of, but if I think about it really hard, I'm like, you know, maybe actually, maybe it's not a great fit for the game.
Or maybe it is, but just having that conversation with myself it always leads to a lot of value.
One more problem here.
We were insane when we made this schedule.
This makes no sense.
Here's what I mean.
We're here.
This is alphas for the second set of levels.
And we're sitting there being like, we don't even know how this game ends.
And we're supposed to make two full levels.
Four full levels, because we already have two.
we're already gonna have to go back to those two because we already changed a bunch of stuff that just, we're gonna have to change again.
So like, this is just unsustainable.
What are we gonna do?
Make these levels and finish them and then like, call a voice actor and retrofit the voice.
This is, we just messed up with the schedule.
Let's go back to the drawing board.
And let's pause here.
And instead of going into level two and five betas, let's go to the other two levels.
And let's just get everything to alpha.
And then we can just play the whole game and just understand what we're making truly.
Like, let's make a blob and then shape it into something beautiful instead of trying to make like a beautiful arm and then be like, oh, no, let's make a beautiful head and be like, oh, actually we're making a dog.
Oh, that kind of sucks.
I guess this dog has an arm now.
So.
We did that and we reworked our whole schedule and decided to make all the alphas first.
This is like, you know, a one minute part of this talk.
This was like the biggest decision of this whole game.
And then the last one is that beta time is short.
We don't have that much time for beta.
And as you might remember, we don't have buffer anymore.
So we're starting to like sweat and be like, how are we actually going to finish these levels?
And that was another great problem for me to jump on because my dirty, dirty secret is that...
I love solutions.
I have to work really hard to think in problems.
Being a design director means you're just exposing the problems.
You're explaining why things are problems and empowering your people to solve those problems.
But when you get to sink your teeth in a problem, it's like, yes, I want it.
I will destroy this problem.
So I took these levels, the levels that were...
once they hit alpha I would take them be like I'll be right back and I would take them to what I call my design cave. I would commune with them in silence and be like you need to be fixed level.
Let's understand why.
I would come out of the my design cave, which is not a literal place.
And I would tell the team, I bring you problems.
I think these are the problems.
And actually I thought about solutions, let's talk.
And so we would have a conversation about these solutions.
I would bring some solutions as starting points.
And then we would come out of that with a lot of tasks.
And...
This was my favorite part of the project.
I will admit it.
Maybe my team is hearing me say this for the first time, but, uh, being able to set up the team for betas with a clear list of tasks was just awesome.
And you'll see why very shortly.
So my takeaway from that process, so this is just a fancy way of saying play to your strengths.
You know, you know, your team, you know, the people on your team, you know, how much time you have.
you hopefully understand the problem really well.
So, you know, design solutions that fit the people that you have.
Set yourself up for success in a way that you may be able to, the way I, the way, like my measure for did I do this right is when we solve the problem, can we look at it and say, huh, how did we do that?
We should not have been able to do that with the time we have.
And if you feel like yes, and also no one crunched, then you can say.
I have used my resources in the best possible way.
All right.
So in retrospect, these like past 30 minutes of this talk, which only represent a little bit of the schedule, where were we like had the toughest process problems to solve?
I call it the feedback avalanche stage because we were just receiving, receiving, receiving, receiving, and like.
you know, changing our processes to like shape what we were making as we were going and set up for the next stage.
That is, bring all the levels to beta.
So, you know, we're emerging from alpha, so we have a game that is fully playable at alpha level.
We have a task in hand, which is to bring everything to fully playable state or technically shippable state.
We have those documents, right?
The documents that define our work super well.
So I like, I wake up one day and I make this realization.
Boom.
Our team is just flying.
Our team is just extremely proficient at making these levels right now.
Not only that, our team has a well-defined task list that will take us to success.
And I look at the directors and I go, we're about to be in trouble.
These, these developers are going to leave us in the dust.
We're not going to be able to unblock them fast enough.
They're just working way, way too fast.
They're getting too much done.
Like we are, if we don't step up and find a way to support them, we're going to start just becoming inefficiency.
And.
So we come up with a solution, which is, I love the solution.
Uh, no more scrums.
So no more daily meetings in the morning where we all get in a room and we have a virtual room and we say, I did these three things.
And then I say, I did these other three things.
No, we're going to have scrums. We're going to have scrums in game. So I put my headset on in the morning. I wake up, right? I make my coffee. I have to drink it all. And if I don't drink it, whatever I don't drink, I put on the desk. It's 10 in the morning and maybe it's like 930. And I put on my headset and I share my screen and it's first inbox into the review channel. And everyone says what they did that's in game right now. Maybe someone didn't have any in-game work. That's fine.
uh but people who did we talk about it we review it right there so whatever you did yesterday gets reviewed in the morning the next day you get action items based on that off you go you're unblocked next pod same thing next pod same thing if anything requires a larger conversation We tag it, we put it in that document, the VP, sorry, the director living agenda, the spreadsheet that we can prioritize, drop it there.
And then it's 1130.
I take off my headset.
I'm like, the sun is out.
I look at my coffee and it's like, I still have like a half a mug of cold coffee.
Cause like, I forgot I had it there cause I was in VR the whole time.
And then we pull up that spreadsheet and we make some decisions, turn some things into meetings, schedule some discussions with the developers for the afternoon, and then we just keep going.
And the game just boom, boom, boom, boom, boom.
It's getting built.
It's taking shape.
It's like, we are just firing on all cylinders.
So daily builds with daily reviews.
take away from this is and moving that fast did take creative power away from the team.
The majority of cases people were already like they were valuing that speed over agency, over creative agency.
But we did need to check.
And in some cases we did have to pull back because the cost of moving fast is you have to make fast decisions.
And if you wanna make fast decisions that you're gonna be happy with as a director, you are very likely to start demanding solutions, saying, you know what, let's not make this a conversation.
I know what this is gonna make me happy.
Just turn the rope into a chain.
ship it, right? And those things start to add up and people start to feel like the game is sort of being taken away from them. So you have to do this carefully and you have to make sure the team has, you know, buy-in in this process.
Notable documents. Can anyone think, from all your experience, what was the document that you would say, the game is moving so fast, we're making everything so quickly, what's the document that will serve you the best?
There is none.
No document exists that can hold velocity.
It's maybe we're making like one-offs here and there, but it's just everything's going in the game.
There's no document that's worth implementation time at this point.
We get through this, we emerge on the other side.
We're like, all right, we did a thing.
We have a game, I guess.
If you play the whole thing, it's technically shippable.
And we did end up going back to the first two levels and doing a little extra work there.
And it feels like, you know, we got it done.
And now we're going to make it shine.
So let's polish this piece.
The goal of Polish is, even though we could technically ship that game after beta, we're not going to. We wouldn't ship it.
It's not at the quality bar that we want to hit at Shell Games.
So we're going to make it consistent and we're going to make it shine.
And how are we going to do that?
Well, first, we're going to prioritize the Polish work.
And this is a game of min-maxing.
This is finding the things that are not.
acceptable, I'm bringing them to acceptable. And then We had this top 10 moments document where we pulled playtesters, we pulled the whole team and we found what are the 10 moments that we think are going to be the most memorable? When you take off your headset, you finish the game, you're going to be like, oh man, I really enjoyed that thing in the jet level where whatever happens, right? And that's where we're going to spend our polish money.
we are going to again, min-max, min-max polish, bring things that are not acceptable up to acceptable, and then take the best and make it even better to create memorable moments.
And then the other thing I wanted to solve was that like, I mean again, I...
I use the metaphor of like, I wake up in the middle of the night saying, oh crap, we're in trouble.
It's not a metaphor.
It's like legit.
Like what happens?
That's just my brain.
Uh, I, I just came into work when they convinced us, like we have changed so much.
Remember we've been moving so fast.
Right.
So I'm like, we've changed so much.
We've changed so much in the past two months.
that surely we messed up somewhere. Surely there's something we didn't have time to play test. So I put together this list. Here's a template. This is like, this is more like a, you know, 15 item list of like every change we made in this last three months that I feel like this could be risky.
Then I would say, okay, how risky?
High risky, medium risky, low risky.
I'm trying to gauge risk there a little bit.
And then we unleashed all of our playtester team.
on it, right? We got a bunch of playtester videos and then we reviewed like everyone was in those videos trying to find answers to these specific questions and we were able to get confirmation.
In some cases confirmation that actually we did mess up and in some other cases confirmation that in most cases that everything was okay. Now just for last minute peace of mind to make sure we weren't shipping something out there that like everyone's going to get stuck on some small thing we tweet.
And then the last problem we had to solve was that we had what I call infinite clarity on how to improve the game.
And we made the, you know, we had the realization that two more weeks, two more weeks would give us like...
a month's worth of work. Not because we're going to work those many hours, but because our developers were just at this point, experts, right? We're all pizza chefs. Now we're all have, we're all open to our own restaurants of, uh, you know, farm to table, handcrafted.
I don't know, specialty pizza.
And we're just boom, boom, boom, boom, boom, bumping out like delicious pizza left and right.
And so we did get a two week extension and generated immense value.
But I will tell you those two weeks in terms of exhaustion just felt like, I don't know, like at least a month worth of exhaustion, not because we were working those extra hours, but because we had to make the mind shift of, oh, we thought we were done, but we're not.
The game is essentially done at this time.
This is what I call the make it great phase.
And all that's left after that is porting the game and a little more QA.
And I was mostly the one in charge of porting.
I don't have a lot of lessons to impart on you on porting other than, you know, find someone who is, who is, super into UX and unleash them on all the different VR controllers because they're all different beasts. And you will bang your head being like, how do I fit my control scheme to work with Vive and Oculus Quest and PlayStation VR in a game with so many inputs? It's complex.
So find someone who enjoys that work and says, oh, complex but rewarding.
That's the person you want on your team.
Right.
So wrapping it up, wrapping it up.
That was a whirlwind.
All right.
Um, on the bottom is the original plan and on the top is her actual schedule.
Uh, you'll notice that the one on the top is slightly longer, not to scale.
And that we had that readjustment where we did all the alphas first and then all the beta work.
I did my best to condense all the document, notable documentation into one slide.
So here it is for you.
And I also did my best to gather all the design direction takeaways into a different slide and feel free to share or, you know, print these and put them on your office.
And that's it. That's all I got. I did leave some room for questions there at the end, so if we have anyone lined up for questions, awesome. And like I said, you guys can access all these slides at the URL that's there, so feel free to peruse that at your own leisure. And I hope you enjoyed the talk.
Hi, you mentioned getting your team to think about problems instead of solutions.
Did you have any challenges in getting them to kind of think in that way and open up with you?
I feel like sometimes it can be kind of intimidating to get a team to give you feedback in that way.
Yeah, no, absolutely.
Something that I would recommend is, I mean, I don't want to use the word like enemy, but I try to find a common enemy or a common, like it's not the team opening up to me about the problems, it's if we can align on the goal.
Something that was extremely useful for me were the pillars.
So, back in at the start, I shared the three pillars.
from the first game.
One of those pillars is lead them to cleverness.
And that is a pillar that over and over and over we're using to uncover those problems.
So a big part of the review when we're doing reviews was a level reviews, I'll go on the headset and I would pretend to be a player and I would say, all right, I'm going to let this level lead me to cleverness, right?
And I would speak out loud from the player's voice.
and you know not being facetious or anything just like truly trying to uncover where might a player get tripped up and the questions I like to ask there are as a player what do I know right now and what am I going to do with that knowledge?
and do I feel like I'm being led to cleverness? And if we feel like that's not really working, then I call it out. I say, right, that's a problem we need to solve. Let's keep going.
Let's keep reviewing. So we collect problems to solve that way. And then we can talk about what might lead to some some solutions that are OK.
So at that point is when I would start defining what is a solution that is OK, so defining success.
So again, back to that rope example, success for me could be that I never noticed that I make the realization that I could cut the rope with a knife.
But the true success in our game, again, back to that pillar, tends to be that I have some moment of clever realization.
And if I can build toward that clever realization, then I'm happy as a design director.
So I tend to frame the solution that we're looking for into a solution that, again, taking it back to the pillars, satisfy the game pillars that we have.
that we have defined.
I see from what I hear there's no one in line at the moment for questions.
I'm going to ask myself a question.
Oh, yeah, yeah, go ahead.
Yes.
So the team feedback tracker, when you have some feedback from the team and you decide to not move forward with the feedback, what do you do with the ticket?
Do you just delete it or do you come back to the team member and tell them what decision was taken or how do you handle it?
Yeah, most often what I do is, so we're talking, we're in Trello, so people add their own name to the card, so I know who it's coming from.
And Trello by default subscribes you to that card.
So I write in the comments of the card what I'm going to do about it, right?
So I might say, we're not going to do anything about this because, you know, reasons.
And then I archive it.
So they'll get an email notification saying, but you know, what?
what my response was, and they can always just come talk to me if they feel like that wasn't a fair decision.
Hi.
First of all, I want to say thank you for the talk.
By experience, most of the talks that don't fit in the first time slot that they had are great talks, so in this metric, it was a good one.
I have a small, small question that is...
maybe be very long to answer.
How do you deal with the fact that maybe when you highlight the problem you want the team to try to solve, they might come back with a solution that you might not deem as efficient as another one?
But for them, it totally is what they want to do.
And how do you deal with this kind of diplomatic approach of that's not really 100% solving it?
Even if it's about, you know, deleting the knife, maybe you're like, yeah, but the knife, we need it.
We can't keep going with these items that are, you know, it's always the same, for example.
So how do you deal with this kind of difference of opinion that sometimes are not resting on, you know, game design principles, which are very solid or...
No, absolutely, it happens all the time. Really good question.
So, that is likeliest to happen at the start of the project, when we're still trying to figure out what we're making, right?
The hope is that that starts to happen less and less and less, if you can be eloquent about why a solution may or may not be good.
Very often you have to say, interesting solution.
Let's put it in the game.
If it's a cheap thing to implement, let's put it in the game.
Yeah, you wanna get rid of the knife, let's get rid of the knife, let's play test it.
And perhaps you can even go as far as to say, here's what I think is gonna happen.
I think play testers are gonna get tripped up for this specific reason.
and you run a playtest. We run playtests every Friday, so it's not super costly for us to do this. And then you see what comes back. There's a chance that I was wrong. So there's a chance that playtesters go through it and it's fine. It's actually a better thing for the game and that's great. I learned something. And there's also a chance that, yep, no, it actually was not a good solution. So what I try to do is I try to gauge.
can I invest in that process right now?
Because that's a great learning process for everyone that's involved.
Do I have the time to spend?
Can the game spare?
You know, if we're talking about the third, fourth iteration it's time to do an in-depth review and say, let's very clearly define all these problems.
And before you put anything in the game, you know, let's bring the solution back and like poke at it really well.
And trying to use the tool of walking through it in the player's shoes.
But I do have to consider, of course, every time the fact that I could be wrong.
So playtests tend to be the ultimate sort of test.
Is that playtest you do internally with your own team members, or it's like playtest you contract a third party to do usually?
So we run all of our playtests ourselves, but we do a combination of calling people into the office, which we can do now because the mask mandates have been lifted.
But also a lot of our I'm still fully remote.
So we use usertesting.com as a platform that we use where we can do live playtests with people who own quests and we do them every Friday live and we run them remote.
OK, thank you for the information. Yeah.
Thank you for an excellent presentation.
My question is mostly around resources and moving folks onto the project or off the project and how you navigated that.
I know Shell has multiple projects running at the same time.
Thank you.
Precisely, yeah, this is a super complex question.
The the answer is what you just said, right?
Shell has multiple projects running at the same time.
And so some resources, some people become available or unavailable.
And once in a while, you know, leadership will come to us and say, we have someone who's not in a project right now.
Can you use their time?
Or we'll go with a request as well of saying.
hey, if this person becomes available or someone with this skill set, then we can take that.
So it's a very shell game specific solution to the problem, which is like, because we know how staffing works and we're able to sort of navigate the staffing requests, we are able to see those down the pipe and know, let leadership know what could be useful and they can, they can help us out where they can, when they can. But again, it's, it's, I'm not sure how much lessons learned there could be there.
Perhaps if there's a students just like Shell, just because we do have, you know, six to 10 products at any given time. So there's just a lot of, a lot of flux in our, in our developers.
Sorry, I have another related question to that. Like, When ramping people on, the project seemed to have a culture that was its own.
What were some of the challenges you ran into when moving new people onto the project and having to onboard them?
Yeah, my, and this has to be the last question. So just to wrap up, my personal challenge for, for the design director perspective tended to be around on ramping with the, the vocabulary for puzzle making in virtual reality.
So there was this steep learning curve for not just how to make puzzles, but how to make puzzles in VR for our, you know, our game is a little bit of a physics sandbox.
So that that tended to be it was less.
Most of us know each other at Shell, so you can sort of jump into projects and you have a good chance of knowing, unless you're new to the company, of knowing a lot of people on the team, so you can be adopted very quickly.
So it was more around the language, the tools, the gameplay, the puzzle making, that we had to have a very steep learning curve.
All right, thank you, everyone.
