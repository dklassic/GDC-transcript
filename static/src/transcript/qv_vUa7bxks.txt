Hello, everyone. Thank you so much for being here and thank you for console for inviting me over. It's been a long trip, but I'm super glad that it worked out and that I was able to be here in person.
Today I'm going to be talking about a game called Hades and the content design in the game and how we transitioned Supergiant's linear RPG design into the roguelike genre, which includes...
A lot of variance and dynamic content.
So without further ado, I'll introduce myself.
So my name is Ed, I go by Ed, Eduardo, I both work.
I am a game designer at Supergiant Games.
Supergiant Games has been around for over ten years, creating games such as Bastion, Transistor, Pyre, and most recently Hades.
Prior to Supergiant Games, I got my start in the industry at Gazillion.
Gazillion was the creator of Marvel Heroes Omega, which was a free-to-play action RPG that was around for a couple of years.
Before that, I studied at DigiPen, Institute of Technology in Redmond, Washington.
I got a Bachelor of Science in Computer Science and Game Design there, so a lot of my education was focused specifically around making games.
At DigiPen, we worked on a couple of student projects.
My senior project was Gardening of the Gears, which we had the honor of taking to IGF Student Showcase and E3.
And yeah, so after Gazillion, I joined Supergiant at the start of development for Hades around pre-production.
The design team at Supergiant consists of five people.
For my role on the design team specifically, I tend to focus on the game's level design, the enemy design, the encounters, and the boss fights of the game.
Supergiant is a really small team.
We shipped Hades with just under 20 people.
So we all wear a lot of hats, but we each have our discipline, which we are primarily responsible for.
So what is this talk going to be?
We're going to be talking about the content of Hades and how we found a balance between handcrafted design and dynamic content.
First off, we're going to be looking at constraints and how Supergiant approaches finding the limitations of our game and the aspirations of the game.
And from there we're going to be looking at the successes and the attempts we had at finding that variance within chambers, encounters, and finally the boss and endgame.
So without further ado...
For those of you who might not know, Hades is a roguelike action dungeon crawler where you play as Zagreus, son of Hades, attempting to fight his way to the surface.
That is Lord Hades, and this is Zagreus, the player character.
Here is a quick view of the gameplay style.
So throughout your escapes of the underworld, you will be encountering Olympian gods who will present you with their boons that upgrade your various abilities.
You move through the ever-shifting underworld from chamber to chamber, slaying the enemies you find in these chambers, collecting your rewards, and trying to make it as far as you can to try and reach the surface.
Yeah. When you die in Hades, you return home.
The hub is where you spend the resources you collect in the game.
And it was important to us to make returning home as exciting as possible and making it feel like death was just a natural part of this world.
So what is a roguelike? A roguelike is a subgenre of role-playing game characterized by a dungeon crawl through procedurally generated levels, turn-based gameplay, grid-based movement, permanent death, and of the player character. That's straight out of Wikipedia.
A lot of people describe Hades as a roguelite, which focus on some but not necessarily all of those principles.
With Hades in particular, for instance, we knew that we weren't going to be a turn-based game.
But we wanted to explore some of these concepts, such as permanent death and procedurally generated content.
And we took inspiration from a lot of games.
I'm just going to point out a few.
Rogue Legacy, Enter the Gungeon, Dead Cells, all took interesting approaches to roguelike genres.
For Dead Cells, for instance, we really thought they did a great job with the combat and action-oriented nature of the gameplay.
Rogue Legacy, we looked at how the content changed over time as you took on different heroes with different attributes.
So after we looked at what others had done in the genre, we tried to find our take, like what was Supergiant's roguelike going to be?
At Supergiant, we have a perception of constraints as positive.
It's a way for us to focus the creative development towards the things that we can do and the things that we want to do, rather than as a negative.
So the first thing that we knew Hades was going to be about is you're going to die, and you're going to die a lot.
But our goal is to make sure that you're getting better both mathematically and skillfully.
And what this meant was that we had a philosophy that every run should count in one way or another.
When you die in Hades, our hope is that you are looking forward to progressing your relationships with the other inhabitants of the underworld.
You want to spend your currency on new abilities or upgrading your home.
We wanted to provide multiple avenues to make sure that it was an interesting experience going back, trying again.
But what this also meant is that every time you go back into the run, we wanted to make sure that it had variance, that it was fun and interesting and unique in different ways, and that it could potentially be interesting to do over tens or hundreds of runs.
So, one of the early defining mindsets that we had actually came from a conversation with Robin Walker, a friend from Valve.
They said that roguelike design has a high dynamic range with runs that diverge early.
This really helped shape how we approached our decision making because it gave us goals to achieve rather than just creating content.
So, where did the variance come from?
Player abilities and rewards, the upgrades the player gets, will drastically change how you...
in a run.
Narrative, it keeps progressing every time you die.
It advances in certain ways.
And where this talk is gonna focus, which is on the content, the chambers, encounters, and bosses.
So the first thing when approaching level design was to learn about how levels were generated in other games.
Spelunky has a well-documented map generator with a lot of information online.
It describes how rules are used to stitch together templates of a map together with still some design intent, having a path from the entrance to the exit, making sure that there's some.
So spacing between how often you get rewards and how often you get shops and stuff.
Heat Signature is another example of a game that takes templates and stitches them together into larger maps.
Binding of Isaac is a game that approaches chambers in an interesting way.
It locks you in and forces you to fight the enemies within that chamber, kind of forcing the player to experience that difficulty.
So, we, taking what others have made, we ask ourselves, what are our constraints and what are they gonna help us achieve?
So questions we ask at Supergiant is what games can this team make?
Supergiant builds the games that we're gonna make around the skills and aspirations of the team at Supergiant.
We also have our own custom engine and our custom technology, and it allows us to make exactly what we want to make, but it also means that we have to make games within our capabilities.
And from there, every time we make a design decision, we ask ourselves, how can we fit those under those constraints?
So the first of those is that Hades has hand-painted chambers.
So this is a GIF of the editor.
So our programmer, Dexter, made a tool that every couple of minutes, the editor will take a screenshot of whatever the designer or artist is working on, and at the end of the project, we can time-lapse it all together.
One thing that's interesting to note here is at the start of the GIF you see the gray box design and it actually only spends a couple of days and weeks in design before it gets handed over to the artist.
But notice how quickly it goes from...
the grey box for the first pass, and then how long it takes in the polished state where small tweaks are being made, things are being added to the foreground.
So this kind of shows how the environment art is actually just thousands of painted assets layered over one another.
This is a very handcrafted approach, but it gets that visual fidelity that Supergiant aspires for.
Our lighting and our collision is also, for the most part, placed by hand.
There's some dynamic lighting and collision.
This just goes hand in hand with trying to get the exact image that the artist is going for.
So what's the result of this?
Modifying any chambers was extremely costly.
If we wanted to change the interior cover to be taller or lower, it required the artist to go in and redraw a large portion of the level.
and taking down a portion of a wall to create a secret chamber behind that just wasn't feasible with the style of chamber that we were shooting for and in our early prototypes of more dynamic chambers where you could Stitch together different pieces or tear down walls. We actually noticed that the credit quote-unquote, that you get from the player as far as how different the map feels is not that high for the amount of cost it's taking us in time to create a room that looks and feels good.
We found that spending our time building whole new maps and having more of those maps to show the player would actually get us a lot further in making the game feel fresh, because it allowed us to make sure that you don't see every room every run.
There's enough rooms to surprise you from time to time.
Next, we looked at run structure.
So what have others done?
One of the things that we looked at was Slay the Spire.
The chamber-to-chamber design of Slay the Spire was interesting to us because it aligned with our hope that Hades would be a fast-paced, push-forward design.
And in Slay the Spire, you make your way through a varied dungeon, but you're only going in one direction.
So, our next constraint was no backtracking.
Since we can't stitch huge rooms together, we made the design decision to create this constraint that you can't go backwards, for the most part.
Sticks is going to break a lot of rules and that's going to be a theme throughout this talk.
Sticks is the last chamber of the, or the last biome of the game, and that's kind of where we broke a lot of our own rules.
But...
For the most part, you can't go backwards.
And this builds on our previous decisions, because if we're going to have a linear game, going backwards is going to really ruin the pace.
So in order to keep the fast-paced action.
We we had this desire, but it wasn't a guarantee because we weren't sure if this was going to be enough to be interesting For a larger run and then for multiple runs It wasn't a guarantee that that was going to be enough to make the world feel like it was shifting and new each time So the result, if you can't go backwards, then we have to make sure that you're experienced in combat.
The danger can't be in getting past the enemies, it has to be in actually fighting the enemies.
So every enemy has to be killable.
We can't place enemies hiding in a very strategic position that can only be killed by ranged attacks because the player might not have ranged attacks.
This also meant no puzzles.
Puzzles tend to have the setup, and then the search for a solution, and the execution once you have the Eureka moment.
But if you can't go backwards, you can't really go for that exploration.
And we didn't like the feeling of missing out, so the idea of having things locked behind certain god effects wasn't interesting because you would just encounter it, realize that you don't have it, and kind of move on.
So that was just a decision that we wanted to avoid.
I kind of touched on this, unreliable player abilities.
In Hades, the player chooses what weapon they use and what abilities they get, for the most part.
And it's never guaranteed what that skill set will be on the content side.
So we can't make an enemy that can only be killed by a single solution, whether that's ranged or melee or a specific effect.
Every enemy has to be killable by multiple different player builds and approaches.
Finally, we have active enemy caps.
So in Hades, we can only ever have a max of eight fully animated enemies at one time, but we can have many more as long as it has a very simple animation set.
So these two enemies here, the wretched thug and the numskull, they're two enemies that you encounter early in Tartarus.
The thug has full animations, a big windup, a full follow-through.
a very awesome-looking enemy.
The numskull, on the other hand, all of its animations are actually single frames, so the cost of the enemy is so much lower that we're able to swarm the player with a bunch of them.
So this is just a limitation that we had to work through.
Similarly, the number of preloaded animations.
So this enemy has a memory cost that's much higher than this enemy.
We can only have a certain amount of animations at a time, and that's just normal for any game.
So for us, we just have to keep that in account.
And of course, it's always a moving target during development.
So when you're designing an encounter, sometimes you have to go back and make adjustments.
But the biggest impact that this actually had on how we designed enemies in Hades is we can't swap weapons or skins on bosses or enemies just at random.
For instance, if we wanted to give this guy a big ax that he throws instead of a big club.
That would be essentially the cost of an entirely new enemy, because we would have to create whole new animations for that and take those out separately.
So it just kind of focused our design decisions around working within the visual design of a single enemy rather than making super modular enemies.
So, with all that said, let's jump into what we actually did inside of Chambers.
So first off is exit door reward previews.
It was really important for us that the player was making decisions on what they were going to get because we wanted the player to have agency over what build.
they were working towards.
So the variance in the Exedore rewards didn't come from what you would get, but what the consequences of your choices of what you were going to go for.
So the mystery behind picking an upgrade that's going to make your player better is are you going to get a combat encounter or are you going to get lucky and are you going to get a fountain room.
This meant that over time, players kind of intuitively started getting to know the possibility space of what's behind certain door awards.
And that's actually okay, because what we found is the key to keep the anticipation high and keep the tension is that the result of what those limited possibilities are have a huge impact on how the player has to react and has to adapt to that result.
So as long as...
The end result was impactful.
It was okay for it to be a limited amount of things.
It still felt interesting and varied every time you went through a door.
Sometimes we do telegraph what's behind a door.
So if you have these, that usually means you're going to mini boss fight, and that's just to help make sure that the player knows what they're getting into, but which mini boss fight you're going to get is still up in the air.
This is an example of the fountain room.
Nice, easy, free room.
When you get that as a player, you feel like you kind of cheated Hades a bit.
You got a free reward.
This is a mini boss fight.
Much harder encounter with the telegraph of knowing that you're about to have to face that.
The other thing we did in Chambers is predetermined points randomization.
So if we can't modify the whole level, what we did is we picked very specific points inside of Chambers that we knew that we could swap.
So whenever I put this table down in a gray box map...
the artist would be able to know, okay, I don't want to block this with any visual stuff.
I know that it could have a well on top of it, a taller cell shop, or a treasure trove.
This gives us some flexibility.
We did similar things for floor doors.
So these are portals that take you to other...
zones of the underworld, breakables, we swap them with higher value ones, fishing points can layer over rivers.
The thing to note here is like, everything has the same footprint, which means that when this is placed in the gray box level, the artist can draw around it and make sure that it looks good, and no matter what's spawned on top of it, we know that there won't be any weird looking after effects.
A lot of this is invisible to the player, where these can spawn.
It's predetermined by the designer, but if it's working right, the player won't notice that it was a predetermined spot.
So this is actually a view into our editor.
These are spawn points placed around the map, and these are like guaranteed safe spaces for an enemy to spawn.
So we don't actually have an algorithm for finding a place with no collision.
It's all hand placed.
But there's enough of them around the map that for the player it should feel like any enemy can spawn anywhere.
But then we have rules surrounding where enemies can spawn.
So the first thing that's a little hard to see here, but a lot of these spawn points have types.
So this, for instance, is a ranged spawn point.
This is a support spawn point.
And here is a melee spawn point.
We treated these as preferences.
So if possible, we want an enemy that is ranged to spawn in more...
Harder to reach areas like this little island up here and if possible We want support units to spawn in the middle of maps where they might be backed up by other enemies But there's more rules attached to that that actually take priority So the player is going to be moving around so this is all ideal if we know that the player is coming in through This side of the map, but as soon as the player starts fighting over here suddenly What used to be an advantageous range position might not be so anymore What's more important actually is how close or how far away the spawn point is from the player.
So if you can imagine, like, Zagreus is here.
There's a minimum spawn distance where we don't want enemies to spawn on top of you.
We want them to spawn a little bit further away.
But there's also a max distance.
We don't want them to spawn off screen.
So there's almost like a donut following.
Zag race around as you're making your way through the underworld and that donut is like the green zone of where enemies are allowed to spawn The main reason we don't want enemies to spawn far away is because of that immediacy we want the combat encounters to be Quick and fast and if enemies are spawning off-screen What ended up happening is the players were backtracking a lot through the levels trying to search for the enemy and we didn't want that We wanted the encounters to be quick and challenging map flipping. This happens all throughout Hades, so if we design the map in one orientation, our engine is able to just flip this.
and make it look like it was designed in the other direction as well.
This was an easy one for us because it feels like a different room when you're going through it and if you don't see this room more than once per run, next time you're in Tartarus, if you see the room in this orientation, your brain actually tricks you into feeling like it's a different room.
Which was super effective and basically free.
What this also did is it helped us keep exit continuity.
So if we're going to serve content dynamically, we still need to find a way to make sure that the whole underworld feels like a cohesive place.
We wanted to make it feel like a real place.
And part of that was to make sure that if you exit a room from a room, you're not going to be able to get out of it.
So we wanted to make sure that we were able to keep the game dynamic.
We want to make sure that you're entering the next room from that same direction, so it feels like you went from that same room to the next one.
And what map flipping lets us do is if a room only has an entrance from one direction, we can flip it, and suddenly that exit is in the other direction, so every room can match up with any other room, which helps keep that continuity of space.
So, chambers, fairly limited in how much we could vary within them, so they were handcrafted the way we would design any other linear game.
But we had discrete points of randomization within those chambers where we could serve a set of known possibility spaces for the player.
As long as we kept the results of what you would get within that limited space really high impact.
It would maintain the tension.
But next up we had encounters.
And encounters is where we really kind of had the opportunity to do a lot of procedurally generated decisions and give the designers a lot more knobs to turn.
But this presented a whole new set of problems for us to solve.
Most importantly is how do we make things interesting when everything is possible?
We started off Hades making every encounter by hand.
So we would say an early, easy Tardis encounter has these two enemy types and this amount of enemies.
Because that's how Supergiant had designed games in the past.
In a linear game, you design each encounter and you make sure that the tension is ramping up over time and new content is being introduced at a good pace.
But we've quickly realized as we added more and more stuff is that we were creating every combination of enemy encounter anyways.
There was very few instances where we didn't want this enemy to be in the same room as the other enemy.
So as we added more and more stuff, we realized that we need more parts of this process to be procedural, because that's going to give us the widest range of possibilities.
That said, there's very few rare cases in the game where we still have handcrafted encounters.
The first time you start Hades, the first room you get is our tutorial, where we guarantee that you'll get a certain amount of enemies and certain types.
But starting to make more parts of the process procedural, the question was how much control is the designer gonna have over the algorithm?
What knobs are we gonna need to make sure that encounters don't just feel like random things, but actually have pace behind them?
So we're gonna go through our encounters generator.
Encounters are actually created on demand.
We create encounters when we're gonna serve them.
So if you're entering a room, the encounter can take into account your current game state and present something that is relevant to the current state of the game.
So an encounter is given a difficulty rating based on your current position in a biome.
So if you are deep into Tartarus, you will have a higher difficulty rating.
That encounter then is filled by enemies, and enemy types have a difficulty rating as well, which is used to take up part of that difficulty pie.
That encounter's difficulty pie is then split across waves.
So this is actually just a screenshot directly out of our scripts.
This means that a single wave encounter will have 100% of the difficulty rating.
Two-wave encounter will split the difficulty 50% first wave, 50% second wave.
Three wave encounters, 30% will be in the first wave, then you'll have a little valley with only 15% of the difficulty, and then we always want the final wave to be the highest.
As you can see here, I crossed out five wave encounters.
At some point those existed in Hades, and they felt like the game was never going to end because you were stuck in the same room for minutes.
So we kept those there on the off chance that we would eventually want them.
We ended up never using them.
These values would change very slightly, but whenever we changed anything here, it would actually have a huge ramification across the whole game's feel.
So the later we got into the project, the more we stopped touching these values.
Once we found the pacing that we wanted, this actually became its own constraint of like...
We know we want this amount of difficulty rating at this point in Tartarus, so if we wanted to change that, we would have to modify the enemies rather than the values.
So, the encounter generator in Hades has two styles of encounter that it can generate.
As we mentioned earlier, when transitioning from handcrafted, the first thing we did was to randomly pair all enemies together and spread them across all the encounters.
These kind of became known as family encounters, which are single wave encounters with a random set of two, three enemies.
There's very little structure to it.
But what we learned is that when everything is 100% random, it has the adverse effect of making it so that it doesn't feel unique, it doesn't feel interesting, because you're seeing everything all the time.
That's why we, this is a visualization, three enemy types in a wave.
So how can we provide a little bit more of that hand-designed structure that you would have in a linear game into an algorithm that's randomly pairing enemies?
And what we got was highlight encounters.
So highlight encounters are multi-wave encounters where one unit type is picked as a constant and the first wave is always that unit alone.
And then in subsequent waves, it will have backup.
So visualization of that, wave one will have one enemy type and you will only see them.
Then we'll throw a different enemy type into the mix to try and change the context.
And then wave three will have two new enemy types, which don't necessarily have to be the same as the supporting ones at wave two, but the highlight enemy is always there.
What this does is it gives the encounters a theme.
It's subtle, but it's noticeable because with your build, you're approaching fighting that enemy in a unique way, and if you now have to take into account different context, it builds on that knowledge rather than just throwing two completely different enemies into the mix.
This went hand in hand with our intro encounters.
So the first time you see an enemy in Hades, you always see them alone.
And that's because in traditional RPG design, that tends to be the best practice.
You don't want to introduce a new challenge when the player is distracted by other things.
You wanna make sure that they have full time to...
learn what the enemy can do before muddying the waters and throwing in new context.
Our generic encounters also had rules based around enemies.
So it was a burden on the enemy to say when they could or could not be eligible.
And they had a lot of data requirements that would allow them to modify how they would be incorporated into encounters.
This guy here is a shield crystal. Its only job is to protect all of its friends.
But alone it can't really do anything to the player.
So we would have things like block solo. So an encounter will never generate a highlight encounter with the shield crystal because we don't want it to appear alone.
But it can come into any other encounter as a support unit.
Similarly, we have max count.
We use this on things like spawners.
We never want more than two or three spawners in a map because those are exponential enemy generators, so we can limit how many of each enemy type is in there.
We also increased the active enemy counts and the max enemy types.
You see the deeper you get into a biome, so you'll see more enemies at the same time and more types of enemies as we want the pacing to increase with the difficulty.
And similarly, we want the chambers to reflect the encounter that's going into them.
So if we have smaller encounters early in the biome, we also want them to appear in smaller chambers and larger ones later.
This helps preserve the pacing and make sure that the player isn't searching large maps for just the one or two enemies that we want to spawn.
So another note on difficulty ratings.
We're going to go through an example, at least in encounter here.
570 is the difficulty rating that this rolled.
But difficulty ratings are actually.
ended up being more of a minimum.
The reason for this is that as enemies are added into an encounter, they take up part of the difficulty pie.
But we always want to make sure that at least one of the enemy types that is chosen is in there.
So oftentimes that will mean if a large enemy is the last one to get added into an encounter, it will overflow.
But that's okay.
As soon as it overflows, it stops.
But that at least guarantees that every enemy is represented at least once.
So, here we go.
This is Elysium, the third biome of the game.
The first wave selected the strongbow as the highlight unit.
Here you can see you're fighting three of them.
I'm also using cheat mode, so I'm dealing way too much damage.
Wave two.
You'll get the strongbow here with an elite bright sword to back it up.
Notice that wave two is a lot smaller, just two enemies.
And then finally, wave three incorporates two whole new enemies, the shield and a witch supporting the one strongbow.
This is all throughout the game, but kind of provides that designer influence on an algorithm to keep some sort of structure behind it.
So elites starting at depth three can be introduced in A-level.
Initially they were just simple stat boosts but we kept adding to them and actually by the end of Hades development, elites have unique abilities that actually their behavior. Elites and regular versions of enemies can't appear on the same encounter.
The reason behind this is that we don't want an enemy to surprise a player because they missed some key visual indicator. So elites have a yellow outline, but in the middle of combat that might be hard to see. So if they're going to have different abilities, we want to make sure that...
two enemies with the same silhouette aren't behaving differently.
So they kind of block that.
And enemies can have the ability to block any other enemy type from being in the encounter with them.
And it's kind of a first-come, first-served system.
So if one enemy shows up and you don't want it with another enemy type, it will get first dibs.
Elites have a really, really good effect on pacing.
So if we just linearly create bigger and bigger encounters as you go through the game, it won't feel exciting.
It'll just be a straight curve rather than having the peaks and valleys that you want.
Elites help us maintain the difficulty increase.
It will vary how many enemies you see at any one time.
So an elite will take a larger portion of the difficulty pie and keep the enemy count low in certain encounters.
And then finally, special encounters.
So in order to keep new things coming at the player, we have one-time encounters.
We found that milestones are the most memorable parts of a run.
You might not remember every encounter, but you'll remember the things that only happened once.
So, large stretches of our combat are broken up by our rare special encounters.
Some examples of this are survival encounters where you have to survive for a certain number of seconds, trial of the gods where you have to choose between two gods, the one you don't choose gets angry at you and upgrades your...
foes, Erebus challenges where you have to clear the whole encounter without getting hit, Thanatos, you have to compete for the most kills.
So a thing to notice for these encounters is that they're asking you to change your play style, which is important to break the player out of that environment.
flow because the player will tend to do what's ever easiest to complete a combat encounter.
But an Airbus encounter will ask players who tend to just dive in head first, take a couple hits but they'll take the enemy out before they die.
It's asking them to play more cautiously, and Thanatos, competing for the most kills, is doing the opposite.
It's asking cautious players to maybe play a little bit more aggressively than they would have otherwise, to try and make sure that they get the final blow on the enemy for the kill.
So, pushing the player to go out of their comfort zone keeps them engaged when they go back into their flow.
And then finally, mini-bosses were huge to making biomes feel unique, and that's why we put a lot of effort into making sure there's at least two or three options of mini-bosses.
So, you never know which one you're gonna get, and they tend to challenge different play styles.
So, sometimes you'll get the one that's easier for your current build, and sometimes you'll get the one that's harder.
So, how do we space encounters in a biome?
Let's look at an example with Tartarus.
So after room 3, you can get a fountain room.
After room 4, you can get an NPC story room.
After room...
Or between 5 and 8, you can get a shop.
Between 6 and 10, you can get a mini boss fight.
At room 12, you will always get the pre-boss, and at room 13, you will get the fury fight.
An interesting thing to note here is the gaps where no special encounter can spawn.
So that's at the start of the run and right before the boss.
We want to guarantee that the player is still having those like standard portions of combat so that they're not just going from special room to special room and not really playing.
the difficulty of the game.
So we had those gaps.
The other thing to note is that a lot of these are guaranteed to be offered but not required to be taken.
So for instance, the shop and the mini boss in the middle of the run, they will always be offered at some point in your run.
But if you have a room with multiple doors, you can choose not to take it if that's the choice you want to make on that run.
So, encounters became our most dynamic content.
We had a lot of knobs, we could change them in a lot of ways, but we found that putting rules and knobs in place helped us add some design intent to an otherwise completely random system and emulate some of those decisions that would be made in a game where we had full control over the pacing.
At the end of each biome, the player faces a boss fight.
And as we discussed, the milestones are the most memorable parts of a run.
So we asked ourselves, what can we do to make sure that these pieces of content that you will see every single run will remain interesting over the long term?
So bosses in Hades have phases that get triggered at certain health thresholds.
And during those phase transitions, that's where they can gain or lose abilities.
So for instance, Megara here, she will get the most screen time by default because she's the first boss you'll see in the game.
So what can we do to make her interesting?
Well, at the first phase transition, she will pick between two ability sets.
She will either get the projectile storm or the lightning patterns on the floor.
These challenge very different build styles.
But whichever one she doesn't get, she'll get at the final phase of her fight.
These small changes make it so that it doesn't feel the exact same every time you go in, but they don't have a huge impact on how you approach a biome.
So that's where we decided that if you're gonna see the first boss a lot, what better way to make it varied than just add two other bosses.
So, the Fury Sisters, Electo and Tassifany, also show up.
Their boss fights are completely different rooms.
They have completely different ability sets.
And it's kind of mirrors our discovery that we had with Chambers, where small variations on an existing...
The boss will feel a little different and a little interesting, but the best bang for your buck you can get is if you have the budget to just create whole different variations that will challenge the player in different ways and then just serve it randomly so you don't know which one you're going to get.
Similar to Encounters, the Hydra was a similar problem where you don't want to show everything you can do every time you get to it.
The role of the Hydra changed a lot over the course of development because when we shipped early access, that was the final boss of the game.
We only had the two biomes.
And then we added Elysium and Styx on top of that.
So its role in the pacing of a run actually changed over time.
But where it landed was in that middle phase.
So we want to make sure that middle phase...
a decent amount of variation.
So we gave it five different head types, each with different abilities.
Here you see the spawner, the wave maker, and the head slammer.
But similar to encounters where you don't wanna see every enemy every time, you don't wanna see every head every time.
So out of the five heads, only three will be chosen for any one instance of the fight.
These elements are similar attempts at varying their abilities.
At the second phase, Theseus gets upgraded by a god the same way that Zagreus does.
But the god that's chosen is always the one that you haven't encountered that run yet.
And the reason for that is for visual clarity.
We want to make sure that if you're using, in this case, Demeter abilities, we want to make sure that it's not confusing which ones are going to be damaging and which ones are going to be friendly.
It also guarantees that you're seeing more gods throughout the run.
Finally, once we had added all the content to Hades, we could play a run from beginning to end, and we had it in a state where we found that it was interesting, and for that new player experience, it was enough variety to get them through their first win.
But now our question was, how do we provide...
this variance for potentially hundreds of runs for the long term.
Our attempt at this was variety through challenge.
So up to this point, it was variety in how we serve content.
Is there a way we can make it so that how hard the content is is what is keeping it unique?
So a lot of these features that you can turn on are things that we thought were interesting, that could add variance to the game, but maybe it wasn't interesting for a player who was just getting to know Hades, who was just getting to know the game.
We didn't want to complicate the mechanics too much while the player was still getting their bearings.
But at this point, we know you've completed the game once.
You might be ready for a little bit more complicated mechanics.
But we also acknowledge that challenge isn't for everybody.
Not everyone gets enjoyment out of just making the game harder and harder.
So we tried to incorporate different methods of increasing difficulty, but we also added rewards to small increases in difficulty.
So each time you go through the game with different weapons and attributes, you get rewards for turning on bounties, but they reset when you switch weapons.
And this kind of naturally encourages the player to increase the difficulty but also turn it back down and then experiment with the different conditions. This was actually kind of nerve-wracking because Was it going to be successful to give the player control over their own variants?
It's not something that is guaranteed to work.
So a lot of our systems behind the rewards of this are there to encourage the player to not just turn it up to 11 and keep it there, but try and play around with the system a bit more.
So, some examples of this that went to the game benefits package.
We always ask ourselves, how can we make elites more difficult, more interesting, more varied?
In the back to boat instrument, you can turn this on and it gives elites things called elite attributes.
The player has mastery over the enemy abilities.
How do we challenge that?
But also, how do we keep it fair?
So, our first rule was all elite attributes had to be visible at a glance, because we can't, as we said earlier with our constraints, we can't change the look of the enemy.
We can't add things to them.
So, all the upgrades need to be visible at a glance, and usually this was done through visual effects or UI.
But if this enemy has an attack boost, then it would have a red aura around it.
Another thing that we were able to do is not every attribute has to work with any enemy.
So this is the skull crusher here.
His whole thing is that he likes to launch himself up into the air, kind of zoom around on top of you with a big shadow, and then pick a point to drop down.
And one of our elite attributes is teleportation.
So we definitely didn't want an enemy that you couldn't target to be teleporting while it's up in the sky or teleporting once it was already slammed on the floor.
So it blocked that.
The other thing is...
Enemies could have multiple elite attributes, but not every attribute had to work with one another.
This was really great, because certain combinations felt extremely unfair.
So if you have teleporting enemies all over the place, but then you also have lasers linking all the enemies together, if enemies are doing both of those things, then you will just get blindsided by hits that you can't really control.
So those two things block one another.
And finally, another instance of, if we threw everything into every encounter, it wouldn't feel interesting.
So if every enemy was getting these attributes, you would end up basically seeing every attribute, every room.
So this is another instance where we limited how much you see per room.
So only one enemy type gets chosen per room to be upgraded, and that limits how much you see at a time, so that it spreads it out over the course of the encounter, or the run.
Extreme measures, so as the player grows, player grows, bosses have the potential to become less threatening.
So extreme measures offers often difficulty and variance in the player, in the boss's abilities.
This was actually a really fun part of the design process because this came in after the first iteration of the whole run was there.
So this was a chance for us to look back at our older content and see what did we miss now that we know so much more about our game, which is not always an opportunity to get.
So, for instance, for the furies, now not only do you not know which fury you're going to face, but now the other ones can show up in any random combination to support one another.
In this instance, all three showed up to fight you in the same room.
Other examples is Lerny, the bone hydra, will get a whole new room littered with more lava rivers.
And then a nice fun surprise at the end is before they were tethered to their specific spot, in the final phase of this fight, they get unleashed so that they can zoom around the map, which is something that they couldn't do before and change up the ability.
power. These in the mentor get new toys to play with. It's intentionally small, it's kind of a spoiler, but they kind of go nuts. Hades will restrict your view, making the Encounter Harder, it will add a whole new face to the fight.
And it introduces the concept of super elites, which basically upgrade any of the elites from earlier in the game to super elites so that they're challenging with end game builds.
And that's basically Hades.
That's the approach that we took to make Hades feel interesting, hopefully, over many, many runs.
So just a quick summary of what we learned.
First off, we embraced our constraints.
They helped focus the decisions around what we can do.
Making a dynamic game was new for Supergiant.
It was like kind of a.
spiritual exploration of like, is this something that we're comfortable with?
So what we learned is if we're going to have handcrafted content, we want to have methods of serving it dynamically.
And a big way we can make that interesting is to serve a small number of possibilities, but make sure that they all have high impact on the player decision-making, which makes the runs less predictable and increases its dynamic range.
If we're going to have a randomization, it's more interesting to have rules and intention behind it, because if you see everything all the time, it makes everything feel the same, and variety is more perceivable when constraints are within a certain possibility range.
And finally, player control challenge, we found was interesting and for the most part it added a multiplier to all our efforts previously because as you play around with the possibility space it changes how you approach all the other pieces of content.
And that's my talk.
Thank you so much for being here.
Thank you so much, Eduardo.
And we have a few minutes for questions, if anyone would like to come down to the front and ask anything.
Tysiphany is the Furious Sister who is in charge of punishing the murderers of the Greek heroes and that chamber was extremely fun to design because it's a chamber that actually constricts over time, so it's as if she's gripping you.
Hi. So, yeah, that's a two-part question, actually.
So, I get this vibe that the story is so, like, heavy and emotional and about fixing family relations and all that.
So, how come you guys came up with that? And second part, why Greek mythology?
Why Greek... Yeah, that's a great question.
Greg is our narrative designer and creative director.
He's probably the best person to answer this.
But in general, our goal was to explore a lot of the themes behind the idea of death and what it means to be in a...
It's an underworld, but also Greek mythology has a lot of family dynamics, which were interesting, and I think we thought that we had a unique perspective to offer of what those stories meant.
So that's a great question that I unfortunately don't have the perfect answer to, but Greg would be happy to answer that.
There is one question from the stream.
What was it like to experience the massive success of Hades, and was it overwhelming?
It was definitely overwhelming in a great way.
We knew that we had a game that we enjoyed to play over the course of development, which was kind of rare.
From the very get-go, we had fun playing Hades.
So we knew that we had something that was at least interesting to people like us, but the response that I got was completely overwhelming.
The amount of love that we see online for it, and for us it's just...
There's so many people who said that we didn't have them happiness during.
a very otherwise dark time.
So that's the most we could ask for.
And it was very surprising, but very humbling.
Thank you.
Hello.
Your levels were all hand-painted, and I'm sure, what was like the biggest challenges and stuff you would have changed with the process if you were to do the game again from your experiences today.
That's a good question.
There was always the possibility of randomizing the traps as well as the enemies.
And I think that would be a really interesting thing to still be able to explore.
We didn't really leave too much on the back burner.
Like everything that we wanted to put into the game, we were able to put in to Hades.
So I can't say for certain that there's something that I would have done completely differently.
But...
Yeah, if we had a method of changing the traps within an encounter, I think that would have also given rooms a very different personality.
So it would have been fun to explore that, but yeah.
Thank you.
Yeah, thank you.
Hi, so one of the most interesting parts of Hades for me are the weapons, because there are six different weapons and all of them have four different forms they can take on.
And then they are different based on the powers that you pick up during the runs.
And I was wondering how it was to design with so many different capabilities of a run.
Yeah, that's a great question.
The weapons are definitely designed to play towards very different player styles.
So some of them are more aggressive, more in your face, and some of them are more reserved, play safe, shoot from afar.
And it was important to us to have those.
It was important for Hades to have something for someone.
So not every weapon had to be everyone's favorite, as long as it was somebody's favorite.
And on the content side, it was just the content's job to support that and make sure that there was...
Not every encounter had to be the most difficult or the most interesting for any particular weapon type, but certain encounters and maps were definitely designed around it being more interesting.
So for example, Asphodel is a lot harder as a melee weapon because you have to take into account where you're standing a lot more, whereas if you have a ranged weapon, you're probably able to pick out a safer spot.
But in Elysium, enemies are really good at chasing you down, which means that if you're a ranged player, now you have to be a little bit more on the move.
So it kind of goes hand in hand.
The weapons provide a play style, and the content hopefully provides different contexts to challenge that play style.
Yeah. Thank you very much.
Yeah, thank you.
I was actually a bit curious about the Thanatos challenges, because when you enter such a room, you can have a very...
You can have a lot of damage per second or very little.
Is there any sort of constraints that change how often he attacks in that mode?
We definitely...
We went through a lot of iterations of Thanatos.
We knew, like it was a very particular balance of how fair it felt for him to be able to steal hits and how often he attacked.
So he only really has two main ability sets.
The first one is he marks an enemy who's marked for death and then there's also the AOE that will kill any enemy after like four seconds.
So the knobs that we had there were how long those telegraphs existed before they one-shot killed the enemies.
And the balance there was finding...
how long most builds would take to take down a certain enemy, but certainly burst builds tended to be better against him than damage over time builds.
And that was just part of the nature of encountering him.
Sometimes you will completely take every kill, and sometimes it'll be a close race, and sometimes you do lose to him.
A key thing there was the reward that you chose for that room isn't dependent on whether you win, it's actually just a bonus.
So you'll still get the reward for finishing the encounter, and you'll be rewarded if you played aggressively and got the kills.
But that reward the player, not punish the player, makes it so that your perception of the NPC is also positive.
Because if he showed up, beat you, and took your reward...
He wouldn't be a very likable character, he would be closer to Theseus.
He's very likable.
Exactly, that's the hope that we wanted for him.
I was a bit more curious, like, these constraints, are these determined, like, do you have an estimate that this weapon type with this primary god deals, is this and this aggressive, or is this something you measure throughout the game, like, this player kills enemies this fast and so on?
We didn't have specific stats on that, just because there's so many variations of builds you can make with the weapon and god combinations.
So we had a gut feeling, but we didn't necessarily know that certain builds would have x amount of damage.
And we don't modify the encounters based on the player abilities.
We designed the encounters to be.
varied so that different encounters will challenge things, but sometimes it'll just be a little bit too hard or a little bit too easy, and that's kind of the fun of the variance.
Yeah.
Thank you.
Yeah, thank you.
