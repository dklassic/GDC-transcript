Good evening! Welcome back to the lovely Civic Auditorium for the highlight of the 1999 Game Developers Conference.
I'd like to ask you all to please turn off all your cell phones, pagers, anything digital right now.
This is going to be a special event, we'd like to have it be uninterrupted.
There's one! He's out! Go get him, yellow shirts!
No, just kidding.
But please, if you can turn that on and off.
And also, no laser pointers, please.
That's disruptive.
Thank you.
This is really an historic moment for the Game Developers Conference and for the community that it serves.
Four years ago, when Miller Freeman began working with this event, we asked our conference advisory board, what would the dream conference look like?
What would be the pinnacle of success for this event?
The answer, as voiced by one Ernest Adams, came in two simple words, Shigeru Miyamoto.
Well, much has happened since then.
We've had four wonderful years, literally hundreds of inspiring speakers, many great parties, and wonderful connections have been made.
But this year, our dream of four years has come to fruition.
There is no greater validation of this community and this event than the presence of the world master of game design.
I'm going to ask you all to help me answer the question that's going to be bugging me as soon as this event is over, which is, what are we going to do next year?
But focusing on the present for now, there's a number of people I'd like to thank.
Most importantly, Jim Merrick and Perrin Kaplan and many others at Nintendo for making the case for the company's support of this event.
There's also many people on the Miller Freeman staff, including Alan Yu, our intrepid and incredible program manager.
Go Allen!
Gabe Zickerman, Greg Kerwin, Kathy Schoback, there are many, many others who've contributed to this.
I'd like to thank them all.
And particularly, particularly, of course, to Mr. Miyamoto himself for sharing his wisdom with us today.
So I'd like to introduce to you the man who is responsible for third-party relations at Nintendo and largely responsible for this event tonight.
Please join me in a warm welcome for Mr. Jim Merrick.
Thank you, Jennifer.
On behalf of Nintendo, I would like to thank and congratulate the Game Developers Conference for another great conference.
Nintendo is fortunate to have one of the video game industry's greatest designers on staff.
A man whose legacy goes back to the very roots of this industry.
And yet, he is still, indisputably, on top of his game today.
Shigeru Miyamoto has turned many of our fantasies into realities.
Mario taught us determination.
Donkey Kong made us laugh.
And Link has touched our hearts and challenged our minds.
Miyamoto has, in so many ways, shaped the industry that has brought us all together here today.
Let's take a moment to look at a little videotape that gives some background on this remarkable man.
At 24, he became the very first staff artist at Nintendo.
Here, he began the journey that would help create a whole new world of entertainment.
and build a flourishing industry that would rival the annual sales of the feature film business.
His work with his team at Nintendo has resulted in more than 60 game masterpieces that have sold over 250 million game cartridges to passionate players around the world.
It was in video game arcades that the first memorable characters came to life.
In 1983, Nintendo introduced the Famicom in Japan, which soon became known as the Nintendo Entertainment System throughout the world.
This benchmark system brought the video game experience and Mario into millions of homes everywhere.
With the Zelda series, players were introduced to an enormous world of adventure that provided hours of involving play.
In 1991, Nintendo introduced the Super Famicom and Super NES, and Shigeru Miyamoto acquired a new set of tools.
His unforgettable characters now moved with the power of 16-bits.
The next evolution of Zelda immerse players even deeper into the classic legend.
Super Mario Kart combine Miyamoto's beloved characters with a finesse and interactivity and two-player action not yet seen in racing games.
The Star Fox game brought to life wonderful new characters in a polygon-based 3D world that used the Super FX chip to push the limits of 16-bit.
In 1996, Nintendo shook the video game world with the breakthrough N64.
Miyamoto's creativity now had free reign, and an exhilarating new era in interactive entertainment was born.
N64's flagship game has been called his masterpiece.
It's-a me, Mario!
With N64, the Star Fox characters were given voices and a cinematic real-time 3D environment.
1998. Once again, Shigeru Miyamoto leads the way, redefining what a video game can be.
Shigeru Miyamoto, creator, teacher, visionary, leader.
He rides his bicycle to work and plays bluegrass banjo.
He's as original and inventive as the games he creates.
His work with Nintendo will continue to blaze the trail in interactive entertainment.
Together they will inspire and delight, and keep the child within all of us alive.
People always ask, what is next from Miyamoto?
And to help answer that question, here is one of his newest personas, bound to compete with the likes and looks of Lara Croft.
Uh-oh.
It is my distinct honor and pleasure to introduce to you the first inductee to the Academy of Interactive Arts and Sciences Hall of Fame.
Ladies and gentlemen, please join me in welcoming, all the way from Japan, Mr. Shigeru Miyamoto.
Thank you.
Thank you very much.
Thank you.
I'm very honored. Thank you very much.
Good evening.
Thank you very much for your warm welcome.
I'm very happy to be here.
The video game industry has been through many crises, has continued on as a strong and growing business.
Thanks to that, I'm still making games.
And I get to speak to you about them today.
I owe a lot to a number of people who have been involved in this business.
And also to the newcomer in this industry who have been grown up playing Nintendo games and continue to buy them today.
Making use of this opportunity, I'd like to speak about my own experience in the past 20 years.
If what I tell you today can help games to consistently be fun to play, it would make me happy.
In fact, I like making games so much.
that would like to do it for free.
But, don't tell Mr. Yamauchi that.
And now, I hope you will do me a big favor and allow me to speak in Japanese.
My friend.
My friend Bill Trinen will translate for me.
Bill.
Thank you.
Today there are three main subjects that I'd like to speak to you about.
One is about the history of game design.
I'd like to talk about the way I see game designers.
First, I'd like to take a look back at the history of game design and tell you about my ideas about what a game designer should be.
Second, I'd like to talk about some of the concepts behind the development of The Legend of Zelda, Ocarina of Time.
And finally, I'd like to share with you my ideas about the future of game design.
Until the time of Donkey Kong, which was the first game that I directed, programmers and engineers were responsible for game design.
In most cases, the music and the art were written by those people.
Those were the days when these engineers were even composing the music and drawing the pictures themselves.
They were terrible, weren't they?
When I designed Donkey Kong, I said that I was the best artist in the world.
When I, as an artist, first became involved in game design, I boasted to myself that I was one of the five best designers in the world.
The reason for this is that there were very few artists involved in game design at that time.
With games like Donkey Kong, we saw the birth of a new trend in game design.
For the first time, we saw stories accompanying the games.
And writing the stories and drawing the pictures became the work of game designers.
And writing the stories and drawing the pictures became the work of game designers.
And this period lasted for almost ten years.
This trend continued for about 10 years.
And we saw many artists entering the industry as game designers, and we also saw not a few music composers joining us as well.
And then, especially in Japan, with the success of Dragon Warriors and Legend of Zelda, the era of scenario writers started.
Then, due particularly to the success of Dragon Warrior and The Legend of Zelda in Japan, there emerged a new trend in which scenario writers took a leading role in game design.
At that time, I started to get a lot of people who had such rich scenarios, and a lot of people who wanted to make money by combining famous novelists and musicians.
It was at this time that I was inundated with designers-to-be, bringing me their really thick scenarios, hoping to get a game whipped out.
We also saw a number of famous authors working together with music composers, hoping to get a game out just for the sake of business.
Let us look back once again.
Another change was the way we played the game.
In the days since I have joined the industry, we have seen a qualitative change in the nature of gameplay.
With arcade games, our objective was to see how many quarters we could get the users to drop into a machine at the arcade.
And while I was making the Donkey Kong series, a game that was a bit different from that came along.
It was with this objective in mind that I created the Donkey Kong series, and yet at the same time, we saw a new style of game emerge that contradicted this model.
One is to play a game of Q-inning like a baseball game.
You pay 25 cents per inning.
This is a very expensive game for the players.
But if you play a game of Q-inning for 25 cents, the store will not sell well if you play slowly.
One example is a baseball game in which you must play nine full innings in order to complete a game.
But at one quarter an inning, it's too expensive.
Whereas from the view of the arcade operator, players can play one inning much longer on the same quarter than they could on, say, another game like Mario Brothers.
And another example is like Mario Brothers, where you play by making your opponent a Game Over.
And the more you get good at it, the shorter the playtime becomes.
Another example is our own Mario Brothers, where two players compete.
But with this game, the better you get, the shorter your playtime was.
It was these types of concepts that users simply could not accept.
It was at this time that I became involved in the development of the Nintendo Entertainment System.
This offered us an environment outside of the arcade for which to make games for.
We wanted to make a game with two controllers, rather than one expensive controller.
With cost in mind, we put a higher priority on two simple handheld controllers rather than one ultra-functional controller, opening the doors to games like baseball and Mario Brothers.
With NES, the business of selling gameplay time transformed completely and evolved into the business of simply selling playtime.
There are many changes in the game, but I have maintained the same style of game design.
I am not a game designer, but when I make a game, I always include the same style in my game design.
Although I am not an engineer, I have always included in my designs consideration for the technology that will make those designs a reality.
I have been praised for being a genius storyteller, a genius animator, and so on.
People have paid me a lot of lip service, calling me a genius storyteller or a talented animator.
They have even gone so far as to suggest that I try and make movies, because the work that I do now is already similar to movie making.
But I feel that I am not really a movie maker.
but rather that my strength lies in my pioneering spirit to make use of technology to create the best interactive commodities possible and use that interactivity to give users a game that they can enjoy and play comfortably.
I feel that I've been very lucky to be a game designer since the dawn of the industry.
I'm not an engineer, but I've had the opportunity to learn the principles of game design from scratch, slowly, over a long period of time.
I've had the opportunity to learn the principles of game design from scratch, slowly, over a long period of time.
And because I am always trying to remain at the forefront, I have grown accustomed to first creating the very tools necessary for game design from scratch.
I have seen both the evolution of new hardware in the advent of hit software titles.
But I have seen that not all the ideas for new hardware come from hardware technologists and hardware professionals and engineers.
And I've seen more than a few examples in which the idea for a hit title have popped out from the simple hint in a conversation with an ordinary person.
So, let me talk a little bit about the current game design.
Next, I'd like to talk about something that game designers may or may not want to hear, but here we go.
Recently, I personally have encountered many instances in which we hit a brick wall in development, and we just can't quite finish the game.
I'm sure some of you have experienced this as well.
I think maybe perhaps some of you out there have maybe been in the same boat.
There may have even been some people who realized they had no choice but to actually release a game that wasn't totally complete, much to your own mortification.
The reason for this is that each case has different problems, but in most cases, the game designer and producer don't understand the technology well, and then they make a plan, and then the case is often seen as not being completed.
I'm sure that each case has its own unique cause.
But I know that oftentimes, when game designers and producers make their plans without a sufficient grasp of the technology and engineering necessary to make their game, they will often fail.
Also, I think we may have all had experiences where no matter how hard we try and work on a game, it just, in the end, isn't that much fun.
Recently, the most common is that the interesting parts of the game are new technology, gorgeous images, and the degree of completion of the image and the degree of completion of the technology is the neck of the project.
In this case, it is impossible to confirm whether the designer is interesting or not until the game is completely completed.
Recently, when new technology and exquisite graphics are regarded as the core of a game's element of fun, it becomes difficult to evaluate a game before launch, because those fun aspects of it can only be judged after it has reached a certain degree of completion.
Of course, even if you ask me how long it will take to make something interesting, I can't say for sure until the game design is completely finished.
In these cases, the answer to the question of how many more months of tinkering will produce a truly enjoyable game depends upon a variety of new emerging technologies.
That is because the complexity of the game depends on the level of perfection of each technology.
Until the technology is complete, game designers are unable to evaluate how the game will be.
Now, in my understanding, in these cases, game designers are solely to blame. But on the other hand, since there has been no concrete definition of what a game designer's job entails, I cannot say that it really is the fault of the designers.
As I mentioned earlier, in the history of video games, at one point, there were designers and artists.
And the designers didn't know much about technology.
And the artists didn't know much about sound and video.
And in the next era, there were scenario writers who created a lot of things, but they didn't know much about technology.
And that's what happened.
As I mentioned earlier in the history of game development, there was a time when designers were engineers who were less capable of composing and creating exquisite graphics.
Then we had designers who were painters, but who could not understand the technology behind the games.
They didn't know what they could and could not do.
How were they to express their ideas so that they could be understood by programmers and realized by the CPU?
Later we saw scenario writers take the lead, but they too had a low level of understanding of the technology involved.
And I became a game designer, just like a screenwriter, but I didn't know much about technology.
As I mentioned earlier, I was lucky enough to be involved in games since my early years, so I learned a lot about technology.
I think I've been a game designer by combining what I've learned and my own image.
Fortunately, because I've been a part of the industry since its dawn, I've at last come to the conclusion that the role of a game designer is to design a complete game system by first comprehending the technologies that will enable and realize that system.
I believe that one of the jobs of the designer is design itself.
I believe that one of the jobs of the designer is design itself.
How will the ideas that I have in my mind be reproduced by the computer?
How can the power of the CPU be best allotted in order for the computer to convey those ideas to the user?
And in order for the player to always discover new fun and new fun, they have to mix their own expression, composition, and latest technology and create within a limited framework.
This is the design.
How can I bring my own constructions and expression of ideas together with the technology that creates that new level of enjoyment within the hardware and budget limitations placed upon me?
This is what I mean by design.
I consider games to be entertainment commodities and therefore I place great importance upon user reaction.
I realize that I am one of the users being monitored when I play a new game for the first time.
While we have this long process of development, we also have at the end when a variety of different ideas and opinions will appear.
It is important to design the whole game creation process, so that users' needs will be reflected effectively and quickly in this last stage.
And this is why game directors must be deeply involved in the design process.
Mario's jump height is lowered by a few dots.
This can be fixed in a few minutes, but the game becomes completely different.
This is the interesting part of video games.
I think another aspect of video games that is very interesting is, say for instance, trying to shorten the height of Mario's jump by just a few dots.
Now this is something that can be done very quickly and easily, and yet it could affect the whole entire appearance of the game.
I think you can see that it is important for game designers to be deeply involved in the design process.
In Nintendo, game designers always do technical training.
We train graphic designers to understand ROM maps, memory maps, RAM maps, and to make games while understanding them.
Accordingly, at Nintendo, all designers must undergo technical training.
Graphic designers make games by comprehending the ROM and RAM memory maps.
I think the trend of what kind of game design experts will make the game will change.
But I think this training is necessary to continue game design.
Which specialists are taking the lead in game design depends upon the trends of the day.
But this technical training is a basic requisite in continued success in game design.
Let me give you a concrete example.
Let me offer you some basic examples.
In the case of an action game, for example, a designer will provide a specification like this to the programmer.
The enemy will randomly search the actions of the player character.
It sounds like a very common way to search, but you can't set up a program like this.
Of course, randomly search sounds like it's an authentic specification.
But the programmer can't put something like this into code.
And later on in the game, the designer is not going to know where to begin tinkering to try and get that game back towards its original concept.
What if the following specification was presented?
The enemy shall change course based on character movement once every 30 game frames.
And one in three times, it will randomly select a direction to progress in.
It's much easier to make a programmer than before.
And when it doesn't work, the game designer himself knows where to fix.
This second example should be more easily programmed than the first.
And later on, when problems appear, we have an idea of where to begin modifying it.
In the best case scenario, you may be teamed up with talented programmers who can go ahead and do this kind of thing on their own.
And even when they do it, it's still fun.
In those instances, who knows? Maybe I won't even be needed.
No, but honestly speaking, I've been very fortunate to be teamed up with some very excellent programmers.
The next necessary element of design is skillful management of the memory map and accurate estimation of processing speed.
As I'm sure many of you know, when we make games for consumer console machines, it is important to take into account the limited ability of the console, the processing speed, and the transfer rate.
player, or people who have strong skills, people who are that sort of producers, when I show these samples to players in virtual world, they would truly believe the samples are made up of all elements.
And of course, players, and even company management and producers who do not have a very deep technical grounding, make the mistake of thinking that the world that we have created in the game is the same as the natural world.
This is a matter of course.
For example, when people are running, they think that if there is a slope, they can climb it.
If a car is driving in front of you, you might think that you might hit a car.
It's natural that the tires are spinning, and it's strange that the tires are spinning even after the car has stopped.
And when the car is moving, of course the wheels should be spinning.
But if the wheels are spinning when it's stopped, well, something's wrong.
We're the ones who make all of this.
And they don't understand that.
But what these users and even company management may not understand is that these so-called laws of nature is something that we've created in this virtual world.
And as we get into the later stages of development, we often hear complaints about...
Why do I have to wait so long here?
What's with this processing speed?
And why is this taking so long?
But at that point in time, at that stage in development, we can't fix it.
Before we could make a sound for the NES, we used the sound of the old games to check the processing time.
And I recall back in the day when I was playing Super Mario Bros. with the background music of Excitebike.
And Mario's jump did not have its characteristic boing, but instead it had the rrrrrrrrrrrrrrrrrr of Excitebike.
But this kind of consideration is necessary for taking the interface into account in order for us to focus our attention on those areas of the games that we would like to put our creative priority on.
And another thing that people often overlook is that we often miscalculate the time to prepare parts of the game that are often taken for granted.
There are many new game designers who make this mistake.
In the game, the program that is really necessary for the game, the sequence that is necessary for the game, and the sequence that is necessary for the game alone, is only about a quarter of the sequence.
And of course, the less experience a designer has, the more apt he is to make this mistake.
But when we think about it, the amount of programs and sequences which are unique to any given game are actually limited and represent usually less than a third or a quarter of the total.
For example, if you make a role-playing game, the title screen will appear, and you have to register your name, talk to people, exchange items, and do a lot of window processing.
This processing is so beautiful that it's natural for games to have it.
Taking the example of an RPG, there are countless features that are taken for granted, such as the title and name registration screens, the dialog system, item select windows, and so on.
I call these parts of the game labor.
I'm always trying to design games which feature as few of these as possible.
But I have to make them.
And recently, many people have brought me a lot of manuals with a lot of these elements.
But when I make them, I always...
Unfortunately, we can't get around making them.
And many game blueprints contain a number of these elements.
It is often work on these labor elements that exceed our time estimations that lead to the troubles of games not reaching completion.
So with this in mind, We can all reduce this labor by just creating an entirely new genre of games that no one has ever thought of before.
Although I've talked mostly about technical matters, I would now kind of like to talk about something that's at the other end of the spectrum.
We must not forget the importance of human ingenuity and creativity in game design.
In the past, people with unique ideas and new ideas have created games.
This is a natural process.
Naturally, it is new and unique expression of ideas that gives birth to new games.
On the other hand, when I look at many recent games, I feel sad that the character of the game is determined by the ability of the hardware and the characteristics of the tools.
Recently, I've been very sorry to see that for a number of titles, the technology and the specialty development tools have taken on the lead role in the game uniqueness, and the personalities of the designers has been diluted.
For me, game creation is a lot like expression through music or poetry.
For me, game creation is a lot like expression through music or poetry.
When I work as a director, I think about the structure of the game.
I think that the game is a success because it has a good tempo, rhythm, and sound.
While I'm always trying to hit upon new ideas when I'm designing or working as a game director, I place great importance on the tempo of the game and the sound effects.
I feel that those directors who have been able to incorporate rhythm and emotional stimuli in their game have been most successful.
When I am holding the controller and setting the tempo, I feel that my own personal game is in the midst of creation.
But in order to reach this level of expression, you have to have that basic understanding of technology that I talked about before.
I also fall into a trap.
Game designers are often proud of their technical skills.
Game designers are apt to boast of the technical aspects of their games, and I too have sometimes fallen into this trap.
I do this when I have little sales points for my games.
Speaking of my own case, I tend to highlight new technologies when I am less confident about the new ideas I am putting forward in the game.
Of course I always regret it when I do this.
I think it is important for us to remember that technology can inspire new ideas and help us realize those ideas, but it should do so from the background.
So, I'd like to talk about a game I've been working on recently.
Thank you.
We started development with about 4 or 5 different teams, each working on basic experiments related to game design.
The first was a scenario and planning team, both very necessary.
The team discussed primarily the position of this title in the whole series.
It included myself and a dedicated script writer.
And now, for the second part, I will be working on the movement of Link and the 3Dization of the items from the previous game.
And for that part, I will be working with my partner Koizumi, who has been making players for Mario for a long time, and my main programmer.
The next team was related to Link's action and the 3D improvements of items found previously in the Zelda series.
This included myself and Mr. Yoshiaki Koizumi, who has worked on player characters since the days of Mario, as well as our head programmer.
We are very lucky today to have Mr. Koizumi here in the audience. I think he's here somewhere.
Mr. Koizumi, where are you?
Thank you.
Thank you.
If you happen to see him at the conference, please say hello to him.
He may have something important to tell you.
And also, these two members, plus a programmer and a designer, we did experiments with different camera modes.
We also did...
Oh, sorry.
We did experiments with virtual boxes that Mario doesn't use, and also with fixed cameras that are used in castles.
We also had another team working on a variety of camera experiments.
These were conducted by myself, Mr. Koizumi, and several designers and programmers.
We worked on incorporating new methods, such as background virtual boxes, which we did not use in Mario, as well as fixed camera modes, like we used in the castle scenes.
Fourth, we set up the basic object and program for the game's basic links and collisions.
Another team worked on bringing the items that Link touches and uses that lay at the basis of the game into the 3D world.
We also had an entirely different team, which was working on motion capture production and tests for the creation for the converter used in Zelda's animation.
So as we conducted these various experiments, we brought them into the entire game design.
And we also formed new teams according to our needs.
For instance, we also had our sound team which worked on ocarina play and 3D sound throughout the game.
We also had a team working exclusively on special effects.
So it's a little bit more complicated.
So we're going to talk about the background, and then we're going to talk about the flow of time.
And then, this is important, we're going to talk about how to cull the background that's most appropriate for a game like Zelda.
Another team worked on the flow of time in the background, and background culling appropriate for Zelda.
And what's special about this is that the background doesn't just have the data you can see with your eyes, but it also has the data that you can see with your eyes, for example...
You can change the player's movement, you can add effects, you can control the camera's movement, and all kinds of information are stored in the background.
As we continue to experiment with this, we will be able to use this data to make a tool that will be useful in the future.
but progressing with design and integration of terrain-specific sound and movement, camera moves, and enemy data, as well as developing the tools effective for manipulating this data.
We will move a lot of small groups like this and check the size of each memory in each experiment, and the processing time, and then design the final product.
We designed the entire game by organizing these small teams and conducting tests to confirm memory size and processing speed.
Let us recall Hyrule Field, the great plane in The Legend of Zelda.
The characters that appear in the field actually share their RAM.
In other words, there is a big bird called the Kepora Gebola in the scenario, and there is a skeleton.
When the Kepora Gebola is gone, the Marathon Man enters.
So in this instance, we actually wrote the scenario to match these design specifications.
And when Link becomes an adult, then the horse comes into play and he begins riding the horse.
And at this time, only ghosts appear.
So in this instance, we actually wrote the scenario to match these design specifications.
I'd like to add that depending on the type of game, we may not necessarily start with so many teams, but rather focus on character movement.
And of course, not all the experiments we conduct are going to be adopted in the final game.
These are the technical aspects behind Zelda's development.
But I would now like to talk about the concepts behind the development of Zelda.
As you all know, we've been making video games as an interactive media.
We've found a lot of ways to move the player's mind in the game.
Through our experience making this interactive media called video games, we have uncovered a number of methods to stimulate a player's emotion.
One of those methods is to use cinematic sequences.
One of those methods is to use cinematic sequences.
This effect is more effective when you see it than when you think about it.
Let's take a look at a scene from Zelda.
As you know, seeing with one's own eye can often give a more pronounced effect than the player's imagination.
And with that, let's take a look at some of Zelda's cinema scenes.
Ah...
To be continued.
Thank you.
Thank you.
As you can see, we have seen several examples of these cinema scenes, but it's important to know that we position these sequences as only one part of development.
In Zelda, there's over one hour and thirty minutes of these cinema sequences.
But most of the staff involved in the production are three people.
So, in the second half of the production, we had six or seven people in total.
But the staff involved in creating these sequences was kept at a bare minimum, with only three individuals for the most part of the development process, and in the latter stages, only six or seven.
The reason why we used such a simple method is that, as you can see from the actual experience, the total amount of energy of the team is determined.
Of course, there is a limit to the amount of energy I have.
The reason behind using such a simple process is, as I'm sure many of you have experienced in the workshop, there is a total limit on team energy.
There's a limit to the work a team can do, and there's a limit to my own energy.
If we use the limited time and energy to make movies like Pre-Render, we would like to use it for other interactive elements.
We opted not to use that limited time and energy on pre-rendered images for use in cinematic sequences.
And we decided to use them for polishing so that users can play with them comfortably.
We opted instead to use them on other interactive elements and polishing up the game to create a product that players can enjoy and play more comfortably.
Actually, I changed the scenario just a few months before completion.
And although the staff was rather unhappy about taking apart something that we had already created, there was no problem with the time.
The problem was that the changes were made in a very short amount of time, and there was no problem with the time.
Although the staff was unhappy about taking apart something they'd already created, we were able to make the fixes in a short time, so it did not cause any problems in scheduling.
This may sound like an excuse, but we didn't try to cheat the movie with real-time processing because Nintendo 64 didn't have a CD-ROM.
Some people may think it's possibly an excuse, but it's not because the Nintendo 64 doesn't have a CD-ROM that we opted for real-time movie processing.
On the other hand, we decided to use a lot of expressions that are not related to the data.
Our president at Nintendo, Mr. Yamauchi, says that each product has its own mission. We set interactivity as the mission for our products.
Thanks to that, we have been able to experience development that no one had experienced before.
I've talked about a number of different topics this evening, but since everyone is always asking me about the future, I'd like to talk about the future of game design right now.
Shall I begin making Zelda for our next generation hardware?
At this point in time...
I'm sorry to say, but at this point in time the answer to that question is no.
The reason for my saying this is that the majority of the elements for which Zelda has been praised so much were already incorporated in the game more than one year before it was completed, at a time when I personally thought the game wasn't very fun to play.
I think that the real reason that Zelda has been so praised does not lie in the N64's level of experience, of expression, does not lie in the unique camera systems and auto-jump system, nor in the gorgeous cinematic sequences and spectacular boss fights.
It is true that some other team may realize the level of expression that we achieve with Zelda, but of course it will not be the exact same as Zelda.
Even if we were to get a very high-tech hardware system, of course, Zelda would have a quicker response time and it would have more highly refined graphics.
But at this point in time, just because of the hardware, I can't guarantee that the game's going to be fun.
And this is something that I think we as designers must all consider at this point in time.
We will continue to create new games.
And Super farmers will face more and more problems in product manufacturing costs so we have to suggest new games that aren't yet in the market.
Also, I want to constantly make efforts to create new ideas.
I want to propose new game ideas without worrying about the headaches of management, such as inflated development costs.
The game has spread much more widely than before, but there are still a lot of cases in this special market that are just repeating small incidents.
Of course, video games have become far more popular amongst the general public than they were in the past, but I'm afraid that we've just been repeating much of the same experiments in this small and unique market.
Even with the latest installment of Zelda, I didn't feel that sense of freshness that I had with the original Super Mario Brothers.
I believe that we should make an effort to bring a new charm to the people of the world.
I would like to make efforts to convey the charm of video games to the general public that is currently outside the reach of the industry in which we do business.
I really want to feel the unique zest of the entertainment industry where one simple idea can create an unexpected social phenomenon.
I really want to feel the unique zest of the entertainment industry where one simple idea can create an unexpected social phenomenon.
Let's take a look at a game I'm not sure if you can really call it a game that I'm working on now called Talent Maker.
Well, what you are seeing now, you also saw one shot I think in the introduction, is a new game called Talent Maker in which you can create your own characters by utilizing the Game Boy camera.
And of course you can make all these characters dance.
And all these scenes that you've seen here, including the one of me in the beginning, were all made very quickly and easily by my staff using this talent maker game and the N64.
Nintendo is also going to be making efforts to create new types of commodities by combining the Game Boy, the Game Boy Camera, the Rumble Pak, and others with the N64.
In Japan, we have already launched the N64 title, Pokémon Stadium, which makes use of the Game Boy Pokémon games.
We are also selling Pikachu Genkidechu, a game which makes use of voice recognition technology.
We are also selling Pikachu Genkidechu, a game which makes use of voice recognition technology.
Soon, we will introduce a system in which the Game Boy can actually be used as a controller for the N64.
We have expanded this industry to its current market size by welcoming new users with innovative products that continue to surprise and impact the masses.
TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS TETRIS Although we are only one of the mediators in the Mario 64 and other racing games about the luxurious virtual pixels, the KPK that we were only able to bring with us, using the feature of small keychains, all of a sudden, just halfway across the so-called small square-ranging platform, everyone succeeded.
And when we at Nintendo were stuck on talk of the spectacular 3D graphics of Mario 64 and racing games, we saw a huge hit in the form of Tamagotchi, a tiny keychain boasting pictures made up of no more than 10 or so dots.
At that time, I thought that Mario 64 had lost to Tamagotchi.
At that time, I thought that Mario 64 had lost to Tamagotchi.
Yeah.
I'm serious!
I want game designers to be the designers who make technology their tools and use it to express their own individuality, their own uniqueness, and their own rhythm.
And I want them to be the entertainers who make this world a more enjoyable one.
It is with this extravagant hope that I wish to end my speech tonight. 皆さん本当に個性的で、新しい魅力の面白いソフトを設計しましょう。 My friends, let us design truly unique, fun software that boasts new appeal. この世界がごく一部の閉鎖的な世界に取り残されないように、新しいチャレンジを続けていきましょう。 Let us take on new challenges so that the world of gaming is not left behind, a separate, closed-off world.
And in the process, let's see if we can't make some money.
Thank you very much. Thank you. Thank you very much. Thank you very much.
