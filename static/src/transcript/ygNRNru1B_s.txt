Hello, my name is Yoichiro Miyake, lead AI in this clinic.
So today I will show the AI system of Final Fantasy XV.
I have been a game AI for over 15 years, so focus on the AAA title.
Today's work is done by Square Enix AI core team.
Over 20 people are contributing to this work.
So I will explain the total work involved in the games.
So but the detail is written in the Square Enix 5 article in the Game Maker Pro.
Please show that.
Today, I will show the overview of Final Fantasy XV AI technologies.
At first, what is Final Fantasy XV?
As you showed, you play the game.
That's a reality-based fantasy game, action RPG, and the car, body, nature, there's many.
In the nature, there's many monsters, many characters.
That is very autonomous AI.
So the players can travel with bodies to fight with the monsters and characters.
At first, I will show the technical overview of game AI, so biomechanics.
I hope you enjoyed this video.
If you did, please give it a thumbs up.
Also, if you want to see more videos like this, please subscribe to my channel.
Thanks for watching.
See you next time.
Bye.
Many characters of Mainoh's fantasy shows, it is a choosed to make their AI's by –êndie Wuzaina and Coordinating Developers Sensei.
I think that, maybe, there are such possibilities.
But after, I don't know how to create AI from figures and how to make them by hand.
and then she is a dog.
Yeah, it's a real dog.
This time she is by only by the mountain tree.
This is a monster.
That's the form is sensitive zone.
That's the point where the system hypnotize the real time.
OK, I will explain the detail of this technology.
Our grand three goals is making an autonomous AI in the Final Fantasy XV world, and make one united living world of Final Fantasy XV.
And making a unique user experience of Final Fantasy XV.
OK, at first, I will overview.
Final Fantasy AI system consists of three components, such as meta-AIs, character AI, and navigation AI.
Meta-AI, sometimes called AI director, that is controlling the game progress dynamically.
For example, allocating enemies dynamically.
Next is the character AI, that is the brain of the characters, as you know.
And the last is navigation AI.
The goal is find the best position to stand.
By using three components of AI, we want to make a unique user experience for Final Fantasy 15.
At first, I will explain the meta AIs.
Meta AI is called, we write, explain in the Sims, two awesome lectures.
That is a little bit different from an AI director.
AI director is mainly the context of battle.
Meta AI is the context of the whole situation of the game.
For example, putting a new object on the level or change the terrain dynamically, or such things.
And adjusting the game world to the player's Meta AI role.
For example, in the Final Fantasy XV, Meta AI controls the body's behaviors.
I will show the video.
In that situation, the player not only cries by the Garuba's attacks, but a few people don't notice.
But Metaei is giving the order to help the monsters in the evening, so he goes between the monsters and helps them.
Helps them break free.
In that case, the author is not good at fighting with enemies and he is in crisis now.
In this meta AI giving the order to help the weakness to attack the enemy sword, the role of meta AI is to make the situation for the players.
Without Meta AI, that is a stupid situation.
That is, all three guys help Mark.
That is a stupid situation.
To remove these situations, Meta AI controls the characters' behaviors, stopping the two NPCs' behavior and orders only one player.
That is the meta-AI.
Next is the character AI.
Character AI has intelligence, has a body, and deep relations.
And intelligence and body is a big problem for character AI.
At first, I will say animation system.
This is animation blending trees.
All node has animation data.
This is a demonstration to make the blend trees of animations.
So the animators make the blending trees of all animations.
This is very complex.
In that situation, this gravitational gravity changes depending on the players behavior.
That is the basic gravitational gravity, but there is a complex gravitational system called gravitational gravity.
So the challenge is how to unite AI and animation layers.
There's no general theory between these two components.
So we will put one layer that is called a meta-intermediate layer between AI and animation.
That role is to manage the various physical states for any NPC's bodies.
For example...
One character has many physical status.
Their status is exclusive.
For example, when they're climbing the ladders, Noct can not take a soul.
So the design is different.
For example, AI graphics, the decision making, that is a game design.
The body graphics is the programmers.
Animation is animated.
That is three layers, different types of that.
So the tool is for each layer.
For example, intelligence layer is AI graph.
That is a tool for making the decision-making system.
Next layer, body layer, that is defining the status of physical state of characters' bodies.
And last is animation graph that, as I explained, that is animator work to make blend trees.
So for example, this is a state machine of body layers.
Decision-making layer assigns a state for each situation.
So via body graphs, AI layers controls the characters' bodies.
So that is the next example.
This is the animation layers of this monster.
This is the decision-making layer.
That layer is a different type, and it's synchronizing the executing for each other.
So I will explain in this lecture to focus on the intelligent layers.
Introduction to decision making.
What is intelligence?
For the characters, basically, it has a body.
And next is input senses and output action.
That is fundamental module of the characters.
So I will use the agent architecture that is used in the robotics.
At first, we separated the two worlds, environment world and intelligent worlds.
The world is connected to the sensor and the effectors to a module.
And inside the intelligent world, there are the three components, recognition module, and decision making module, motion making module.
The information flows via all modules.
The information flow connects the two worlds, such as intelligent world, environment world, via sensor and effectors.
So at first, I will explain the sensor's bodies.
This is the sensoring regions of gargoyles and monsters.
When the enemies come into the field, The system, the one ray casted from the gorilla to the object.
When the ray does not collide with any object, it means this monster can see the object, the enemies.
That is seeing the meaning.
And when the gorilla's a recogonite.
When the Garuda recognizes many monsters, Garuda must select one target to attack.
So target selection rule is there's many, so that is condition.
It can be controlled with these tools.
Game designer can customize how to select enemy targets by customizing many parameters.
Next is decision making.
In the game development, mainly decision-making algorithms are seven algorithms, rule-based, state-based, or behavior-based, and so on.
In Final Fantasy XV, we use three top algorithms, rule-based, state-based, and behavior-based.
At first, I will explain rule-based.
Behemoth's decision-making is rule-based.
There's many rules listed up in here.
So when the condition is fired, the line is orange-lit.
So Galar's is controlled by that rule, depending on the player's positions.
So depending on the positions of the analyzers, different rules are required on the list.
That is rule-based.
Next is behavior-based.
As you know, the behavior tree is the most popular algorithm for current game development.
So we developed the original tools of behavior trees.
Game designers can behave their tools only by operating mouse operations.
Next is state-based.
State-based is the most simple algorithm for characters.
The state has...
Each state has behaviors of characters.
The game and the status of a character changes, a state transition happens from this state to this state.
But for more complex games, it is not enough.
So a state machine becomes hierarchical.
For example, this is a green is a top layer state machine.
The one state has more smaller state machine like this.
So in Square Enix, original state machine tools developed for Final Fantasy development.
And from now that this is a Square Enix original AI system, state machine is good at steady control step by step.
And behavior trees is good.
Good apps adapt to playback fluently.
We want to use both good points.
So the idea is we separate the presentation layer and the process layers.
The node and process layer are shared in state machine and VBA3s.
But the presentation layer state machine business are different.
So for example, AI Graph has a hierarchical layer architecture.
For example, our top layer is a state machine.
The one state of the state machine has a behavior tree.
And the state machines, one of the state, one of the deep node of behavior trees has a state machine.
Game designers can make the deeper and deeper hierarchical structure as they want.
So that has the extensibility and the scalability to make the decision-making graph.
So that is an example of the Nifuru soldiers.
The top layer is green.
It's a state machine.
And one of the state machines has a behavior tree.
So that's the second layer.
And the third layer is leaf node of behavior tree has a state machine.
That's the third hierarchical system.
One is state machine, behavior tree, and the state machine.
And after all the process of loyal levels are finished, the transition happens on the top layers.
That is the operation of this system.
I will show the example of this system.
This is a green with a little high time soldier.
Great.
This is the top layer on the blue.
That is the state.
The red player has a behavior trick.
And all debugging information is listed in the database to monitor the character's status inside.
An AI graph has three functions, blackboard, parallel thinking, and overriding.
At first, I will explain the Blackboard architecture.
Blackboard architecture has memories in here.
That is Blackboard.
I'm sorry.
It's an AI graph.
AI graph.
Blackboard has the information.
got from the sensors.
The information got from sensors stored in the blackboard.
The information can be used from the AI graph inside.
So the information connected to the nodes, that information can be used inside by connecting these lines.
So that is a blackboard architecture.
Next is parallel thinking.
For complex situations, it is not enough that the character is thinking one problem.
Sometimes characters must think two problems at the same time, so parallel thinking function is required.
For example, in the state machine case, we define the P stat.
That is parallel stat.
In this graph, the two state machines can be executed.
For the BBR tree, the parallel nodes, in the parallel nodes, the two nodes are executed at the same time.
That is a parallel thinking function.
Well, that is an example.
The green-lit camp is now a shooting situation.
While shooting, moving and shooting searches new enemies around.
Parallel thinking function.
That's really convenient for a complex situation.
Last is overridings.
Overriding is to make many, many monsters AIs.
We must make many.
AI graphs for different monsters.
But many monsters have common logics, basically.
So the overrides functions means the game designers can customize one of the common logics at any time.
For example, this is Behemoth over AI graphs.
This is a common logic.
But one state can customize only for Behemoths.
That is the Kato-Kurepas AI graph.
That is a common logic.
One of states can be customized properly to the Kato-Kurepas.
So overriding a function is very convenient to make the difference.
AI graphs dynamically.
So that's a template.
Overriding, overriding, multiple overriding is giving the game designers extending AI graph any time.
So last is navigation AI.
Navigation AI is very simple.
At first, first finding a system that we use is the algorithm.
And that is the navigation mesh.
Navigation mesh is a nightly build of all maps that is automatically made from the collision model.
And by using navigation mesh, those are used to connect to the gamma navigation.
So let's call this gamma, even in a complex terrain.
Next is a point query system.
Point query system has a long history.
That is a system to find the best position for a character's ability in a train in real-time.
For example, that is the three phases.
At first, point generation phase.
Next is filtering phase.
The third is evaluation phase.
For example, AI is here.
There's bodies and enemies.
And at first, distribute to the point around the players.
And filtering out is a useless point.
For example, this is a lake, this is a pond, and this is enemies, this is bodies.
Seven points remain.
So by picking up one point to be highest height values.
And finally, the one best point for players remains.
That is point query system.
Point query system can be customized only by tool.
Without the help of the engineers, game designers can customize the value for a PQS system.
That is one example of the demonstration.
These monsters can find points the players and parties cannot see.
That's three points the players cannot see.
So by using the PQS system, any monsters can go to the behind the players.
This is some example of this PQS system.
That is the Noctua is here, so filtering out these points on the circle.
OK.
Finally, attacking position.
movement portion of his.
All PQS queries information is stored in the servers, so we can game developers see any time the statics of query validation.
For example, this query is often called many times.
OK, next is face-to-face conversation system.
This system.
is a system to find the positions for the conversations.
For example, Prompto finds the best position to talk with Nocto by PKS system.
For example, this is a combination of three AI, meta-AIs, character AI, and navigation AI.
Meta-AI orders to find a point in the characters by using navigation system to find the best position.
In this demo, the Prompto will go to the position on the next side to talk with him.
That is a face-to-face system.
And the next is a steering system.
Steering system, we use a human-like avoidance system.
That is a very simple algorithm.
The system distributes the ray casting in all directions to find the best direction to go to the goal.
That is a result of each agent can avoid each other by human-like avoidance system.
Next is motion analysis.
Motion analysis system to learn their motion by themselves.
For example.
Behemoth, that is Behemoth training time.
Each different motion has different regions to be hit by the motions.
Behemoth learns what motions can reach what regions, as like this.
By using this data, we make a rule-based system.
This behemoth knows the region each motion reached.
So by this information, the space information, he knows what motion should be executed to attack the knocked positions.
Next is character carving.
So in high speed, the character cannot make the smooth curve immediately.
So depending on the.
Rotation radius depends on the velocity.
So also, we have training of the carving of monsters.
In the midnight, they automatically carving in time, anytime.
In the morning, this graph automatically generates.
The vertical horizontal axis is the active speed.
This is the rotation radius.
By using these graphs, the monsters can know the best speed to carve the path generated by pathfinding system.
Next is the character conversation system.
So the scenario is not totally generated.
Many scenarios for conversation prepared by game developers.
But meta AI is the best scenario from them.
And in that case, it's a There's many conditions, depending on many conditions, each scenario's evaluation decides.
Finally, one scenario picks up.
And meta-AI's point of attention of the point of view is in the conversations, the attention point to move to the speakers.
Or in that case, it's the direction of the goatee.
In more details, we'll talk on Sunday.
In that way, please attend the lectures.
Thursday, I'm sorry.
And finally, it's ambient AI.
This is the town people in the towns.
So in that point, we use the smart object.
Smart object means which contains the object, has animation, area statements, everything to control the agent.
in that case.
But we extend the smart object, smart location.
Location has object and script emitters to control the agent.
So in that case, this location has intelligence to gather two people and controlling by GOAP planning system.
And after three minutes, for example, that system calls a third person like this.
So a Stribist-like system is a Jeff O'Rourke developed as a goal-like system.
This is a Stribist system for planning.
Game designers write this script for the actions, the preconditions, the already conditions.
So by writing many of these types, these nice representations.
data, more complex situations can be made.
For example, this character calls the waiters after the conversations like this.
So this is the XML process and is compiled for binary data.
And finally, when the players enter the town, the whole So this is the XML process and is compiled for binary data.
NPC characters' behaviors are like humans, human townspeople, like this.
At the last chapter is data logging and visualizations.
In the game development, all data of game status is stored on the server.
All data immediately can be visualized for a game developer to find a bug.
That is, as I said, queries, static cycles.
Or that is a stack of a number of calling scenarios.
That scenario is called orphan.
That is a heat map of animations.
Many animations, that animation is called in the regions.
By using this data, we can design the animation package for each region.
The summaries.
Summaries.
This is I will show the overview of the Final Fantasy and the original decision making is shown.
And the basic is the source.
This is the list of the AI techniques implemented in Final Fantasy XV.
By accumulating the small AI techniques, we make a big.
This is the memory usage.
AI graph narration over 20 megabytes.
So more details are described in the GameMaker Pro 3.
Please show that.
OK.
OK, we are hiring AI engineer designers.
If you are interested in our company, please contact us.
OK, thank you.
