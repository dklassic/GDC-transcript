All right.
Hi, everyone.
I'm Aubrey Sir.
I've been doing level design for 10 years.
These days, I run a small indie game company called 12 East Games, where I still do level design.
But I'm better known for my previous work at Wolfire, where we organized the first Humble Bundle and made games like Overgrowth.
I also collaborate with other indies making art and levels.
My focus is on a specific type of level, which is why I'm here to talk to you at GDC.
Today I'm going to share with you my favorite kind of levels to design, which I call radically nonlinear levels.
My talk has three sections.
First, I'll define exactly what I mean by radically nonlinear levels, how they're based around the idea of free movement and sandbox play, and activating the space.
Second, I'll describe the basics on how to build them, like layout options and typical dynamics.
And finally, I'll explain some techniques I use to fix common issues that may come up in radically nonlinear maps, like the map feeling empty or not having enough structure.
Then I'll wrap it up with a recap and final example.
But before that, I want to mention an idea I think we as level designers probably agree with.
That idea is that all conventional levels feature some openness and some linearity.
In other words, all levels have places you can go and places that are blocked.
These are some of our most fundamental level design tools, paths and walls.
Linear levels start with making paths.
Often, even when we talk about nonlinear levels, what's described are levels with branching paths.
These kinds of levels can be great, but an alternative kind of level is based on the opposite idea.
Instead of building paths, you start with an area of movable space and place walls to block the player.
The team behind Hitman calls these types of levels nonlinear sandboxes.
A radically nonlinear level is a sandbox level that is designed to encourage unpredictable player movement and exploration of the space.
All sorts of single-player levels fit this paradigm, which I'll give some examples of in a moment, and there's also a lot of stuff in between.
Even highly linear levels have open areas in them, and there is an obvious overlap between this kind of level and most multiplayer arenas.
I think these techniques apply to any space the player is free to move in.
I hope some of these ideas can help you in whatever kind of level you might be working on.
Despite that overlap, I think this type of level is distinct and interesting.
I did not always feel that way, though.
Let me tell you about my first commercial level design job.
It was for a game called Darkest of Days.
I was hired as an artist, but was immediately put to work on level design.
Outside of a few Excitebike tracks I made when I was eight, I had almost no level design experience.
In fact, this was the first major game project for most of the team.
We had our own custom engine and tools, but they were lacking some basic functions.
For example, the map editor had no undo function.
So in that way, it was a lot like this talk.
I had to try to do everything perfectly the first try.
On the one hand, it's nice to get paid to learn.
On the other hand, it's a lot of pressure to care about your work and not know how to do it.
But don't worry, it turned out okay.
As we were making these maps, our lead engineer, Jeff, kept mentioning that he thought his test maps were more fun than what we were making.
We were constantly running up against a problem we couldn't reconcile.
We wanted to make a cinematic game, like Call of Duty Modern Warfare, but we also wanted large, dynamic battles in open spaces.
Trying to solve this problem is how I became interested in the idea of radically nonlinear maps, worked on a lot of games with them, and ultimately how they became my favorite kind of map.
With that out of the way, here's part one.
I'll define exactly what I mean by radically nonlinear levels.
When I first started researching this question, I wanted to find a really fundamental example of what I meant that everybody would be familiar with.
And the oldest, clearest example I found was Pac-Man, but we're gonna talk about Ms. Pac-Man because it's a better game.
So, why Ms. Pac-Man?
The map is open enough to offer freeform tactical choices.
like which path to take to avoid ghosts, and large enough for strategic choices if you're going to eat a power pellet or go for the bonus fruit.
The designer of Ms. Pac-Man mentioned that each ghost has a different behavior, and in this way, each ghost is a unique risk factor which the player needs to consider.
And there's some other interesting things about Ms. Pac-Man maps.
It's small enough so that the whole map is in play, and I'm going to touch on why this is important later.
All the systems are legible in some sense.
Complex enough to be interesting, but transparent enough to be predictable.
There's no exit.
This is a common thing for this kind of map.
Even if a radically non-linear map has an exit, the player often ignores it until other objectives are met.
In that same way, the starting point isn't very important either.
Because you don't know how the player is going to move through the map, you have very few tools for pacing in linear storytelling.
Ms. Pac-Man handles tension with dynamic systems where timing is important.
Power pellets, ghost respawns, these kinds of dynamic systems are also a reoccurring feature of these maps.
At this point you might be thinking, hey Aubrey, do you just mean open world maps?
There are a few big differences between this style of level and an open world.
Before I mentioned the whole map being in play, what if it wasn't?
If we imagine a Ms. Pac-Man level that stretches on indefinitely, you can just run from the ghosts, you can never eat all the pellets, and the power pellets become an unlimited resource.
In other words, it would have no set challenge and totally different gameplay.
Another question is, are these kinds of maps just the same as multiplayer competitive maps played with bots?
The answer to that is, sort of.
They are similar, but multiplayer competitive maps have a lot of additional design and gameplay constraints.
like symmetrical balance, leg tolerance, limited physics that change how you make the map.
And so they are really very different in practice.
If you are familiar with MDA theory, the idea that any game can be categorized by these qualities, I think you can see that this kind of level occupies a distinct mechanics, dynamics, aesthetic niche, apart from multiplayer arenas.
Ms. Pac-Man was made in 1982. That is a long time ago.
Is it even still relevant to modern level design?
Here is why I think so. If you look at Doom 2016, you see that many of the levels have linear sections punctuated by nonlinear arenas.
In last year's talk, Embracing Push-Forward Combat in Doom, they point out that these spaces were a byproduct of two of their core gameplay loop goals, constant movement and improvisation in navigation.
This causes 360-degree combat and resulted in maps that they felt had more in common with multiplayer levels than traditional linear levels.
DOOM 2016 levels are a great example of a hybrid approach and it's part of a cycle away from shooting gallery style design that peaked around 2008 and a return to less linear design like the original DOOM.
And I think this trend still has a lot of room to continue.
People are innovating in this area every year, which is one of the reasons I wanted to give this talk.
As I was saying with the Doom series and Pac-Man, these kinds of levels have a long history, including games like Tenchu, Battlestone 98, and there's a lot of modern examples, too, like Metal Gear Solid, Ground Zeroes, or Hitman, where they tried more linear levels in Absolution and backed away from them with the more recent Hitman games, which we heard a little bit about earlier today.
The design techniques I'm going to talk about later can also be applied to games that use pre-designed tiles for randomized levels, like Spelunky, which I'll show a little bit in my final example.
So, what makes radically nonlinear maps cool?
Why do I like building and playing them?
There are a few reasons.
One of the things you notice about the games I have mentioned is that they emphasize gameplay over story.
Remember how I said our programmer, Jeff, preferred his test level?
It is because a more open map allows the gameplay systems more room to breathe.
Some types of gameplay that really benefit from this are long-range engagements using vehicles and stealth, and gameplay based around controlling enemy movement.
This gives players a lot of choice with more agency to make strategic and tactical decisions.
Map knowledge is important in this kind of level, and so exploration is naturally rewarded.
Because there's no need for fail-safe funneling of the player, destructible terrain or killing any character become options.
They also emphasize dynamic and environmental storytelling.
Because of fewer artificial barriers, it is easier to feature realistic locations and architecture.
And as I was mentioning before, aspects of radically nonlinear design can be implemented in all sorts of maps.
That is a lot of stuff that I think makes these kinds of maps cool, but the most important thing, isn't it just fun to scout around, come up with a plan and test it?
I love the kind of level that lets me come up with different solutions, and that I can play twice with totally different outcomes.
It's just water.
Part 2.
Here are some techniques on how to build these kinds of levels.
I'm going to borrow and adapt some theory from Randy Smith's 2006 GDC talk, Level Building for Stealth Gameplay.
Let me take a moment to explain this diagram here.
This is an overhead view of a map from Thief, and we see how Smith used these safe areas and rewards shown with plus signs and enemies and exposure shown with negative signs to predict and control the player's path.
I want to use them in the opposite way so that it becomes impossible to predict the player's path.
This is what makes our level radically nonlinear and also how we activate the entire space of the level for play.
The first thing I do when I start on a new map is to have a clear idea about the layout.
By picking a strong layout, you'll be able to differentiate each map you make, rather than ending up with a random hodgepodge of obstacles, enemies, and rewards.
There are a lot of different possibilities for layout, but here are four solid examples.
Symmetric.
We have a low-tension center line with a left-right choice.
This is an interesting layout because the player chooses which side to tackle first, and then halfway through comes back to the center line.
That helps break up the tempo and creates pacing.
This is a great layout when the theme of the map is a major path like a highway.
Concentric, the outer area of the map is safer and rewards extensive scouting before committing to the center.
This layout works well for maps about assaulting a base or castle.
Node, these are a series of clearings that interconnect in a lot of ways.
This is the kind of, this kind of map keeps up a high tempo of quickly alternating encounters with travel.
The player needs to resolve challenges carefully so that they don't bleed into other adjacent nodes in unpredictable ways.
This layout fits with ruins or slums.
Field, a large area of increasing risk.
This layout promotes alternating probing attacks and retreating, and gives the player a lot of control over tempo.
This is a typical layout for something like a beach assault.
Again, the main point here is not to know what the player will do, but just to make sure that whatever they do, it is not boring.
One thing to note here is that it is also possible to use gameplay systems for the layout rather than building it into the map, and I will have an example of that using a field layout at the end of the talk.
As well as layout, I like to have a clear grasp of how the gameplay is going to be unique for the level.
One method is to try to find an aspect of gameplay that is underutilized and focus on it.
This is hard to generalize since every game is different, but here are some concrete examples from some maps I worked on.
This is Brigador, an isometric shooter that was designed from the start to allow players to use a wide range of vehicles.
Because of this, it had some interesting design constraints.
For example, within the interior of the map, all the terrain is destructible.
In this game, certain aspects are randomized, which is one of the easiest ways to ensure players try different strategies on repeated playthroughs.
Here, the enemy spawns are hand-placed, and whether an enemy actually appears depends on several factors.
Similarly, the player will randomly enter the map from one of these two locations.
I think this technique of using hand-placed spawns for enemies and rewards that are then controlled by systemic factors is really useful.
The gameplay idea for this map is that the center area is a trap.
It's tempting, but if you go in there before picking off most of the enemies, you'll probably fail.
As you can see from the main travel lines, this map is roughly concentric.
The main hazards and rewards are concentrated in the middle to draw the players into the trap.
It's possible to clear the map by defeating enough enemies around the border, so you don't need to go in the center.
but it is a lot faster to beat the map if you complete these central objectives.
In that way, the concept of the map, that it is a trap to lure the player in, and the layout of the map, that it is concentric, relate to and support each other.
Here is another example from Brigador.
The game has soft cover that blocks line of sight, but does not offer much protection.
In the existing maps, it was mostly combined with hard cover to add variety, but I wanted to replace the hard cover with mud pits to give a really dangerous, exposed feeling to this map.
This layout is one I have not shown yet, where the objectives are in the four corners.
This means the player has to cover a lot of distance, which emphasizes even more how exposed the player is.
I think this shows how it is important to pick a concept and a layout that work well together.
Here is a different game I worked on called Ravenfield, a single-player game where you capture control points and shoot enemies in an effort to outscore the opposing army.
Unlike similar multiplayer games, the levels in Ravenfield do not actually have to be balanced or fair.
On this map, I was motivated by my frustration of the AI allies taking all the airplanes on the other maps, so I made a map with a lot of airplanes in it.
During production, I bumped the starting bases out to the corners of the map to maximize playable space for the fast-moving airplanes, but kept the roughly symmetrical layout.
Unlike my previous example of this kind of layout, this is an inversion where the center line is more risky, and these side areas are a bit safer.
I think this works because in the aircraft, you have to keep moving and naturally end up flying over the center line.
All of these examples benefited a lot from being for functional games with several existing maps.
In cases like this, it's pretty easy to play with existing systems, make tests, and figure out something that works.
If, however, your game isn't very finished, you may notice your map has serious problems and not know why.
Okay, welcome to the third and final part of this talk, How to Fix Common Issues, or Why Is Your Map All Busted?
The number one issue is that the map is too linear.
It is very tempting to want to guide the player and reflexively fall back on that skill set.
But if you are going to design a linear map or have linear map sections, it is important to go all in on good pacing and have all of those existing techniques that make that style of map work.
Otherwise, open up more paths and space to move.
Similar to the above, but with gameplay, you have one idea in mind with how to win the map.
This can stifle organic and robust gameplay systems.
It is important to avoid trying to restrict the gameplay too much.
Trust that the core gameplay is fun on its own.
Another possible issue is that the map has no structure.
The map is too uniform, so you end up doing the same things over and over.
Hopefully, by having a unique layout and concept, you avoid this issue.
In a game with very dynamic systems, sometimes the player can feel helpless.
The level should be balanced so it is reactive to the player, and they act as the tipping point for the gameplay systems.
The gameplay can feel random or nonexistent.
The player is not able to see the cause and effect of the systems enough to understand why things happen.
For example, using an invisible trigger to spawn enemies on the map is a lot worse than an alarm state in a stealth game.
Alarm state gameplay still has triggers and still spawns enemies, but gives the player a lot more information.
If you want to learn more about making systems legible to new players, I very much suggest watching the GDC 2016 talk titled Level Design in Hitman, Guiding Players in a Nonlinear Sandbox.
These previous issues can usually be fixed, assuming you have mechanical complexity to work with.
But if you don't, then it may be something to bring up with your design team.
The sorts of systems these games usually have are things like stealth, AI companions, inventory looting, destructible terrain, dynamic enemy movement, player tools for controlling the enemy, sub-objectives like capturing areas or destroying enemy resources.
They have pacing systems and various movement modes, like vehicles, et cetera.
When discussing how these systems work, having a map that feels like it is missing something to show the rest of the team can be very useful.
On the other hand, if what seems to be missing is grand cinematic moments, tight pacing, or very well-defined challenges, I'm not aware of any way to fix this yet.
It's part of the trade-off that comes with this kind of map, which may not be the best choice for your project.
It isn't that dramatic scenes or clear challenges can't happen, but they tend to result from the existing systems, and so they're hard to predict.
I don't think this is an impossible problem, though, because there's been a lot of exciting progress in dynamic storytelling lately.
Before I end my talk, I just want to recap with an example that brings it all together and shows how a lot of this theory can work in a more linear game.
The game I will use for this final example is one that I was in charge of level design on called Receiver.
It has some aspects of linear design, but still allows free and unpredictable movement.
The level was made from tiles.
Each tile is roughly the size of a small office building and has three floors with doors on each side.
These act as lanes.
When these tiles are put end-to-end, the lanes can combine or switch positions.
If I had just stuck these together, I would say it was similar to a multi-path level, kind of like Deus Ex.
But we did something a little bit different.
Instead, the tiles are randomly placed, so the player often has multiple choices about how to progress.
In addition to the strategic choice of which lane to take, the tactical choice of the best path through the tile also isn't predetermined either, because the enemies and objectives are spawned randomly from hand-placed spawn points.
This is how the space is activated.
Even though almost all this content was pre-authored and the random elements are fairly minor, it's still enough to change the ideal strategy and to incentivize exploring the space, which makes the level radically non-linear.
Because of these systems, it made it difficult to support a standard narrative.
Instead, we made the objective to find these audio logs, which can play in any order.
Obviously, this doesn't result in the most traditional story, but I still think it added to the experience.
That said, the story wasn't the strongest aspect of this game.
This was part of the trade-off we decided to make.
Another gameplay system at work here is that each new tile is harder than the last one.
This gives the player an incentive to check all the lanes in a given tile, which may require some backtracking.
As I mentioned when I was talking about Ms. Pac-Man, a systems-based approach to tension is an important pacing tool.
And I think this could have been boring in some games, but because receiver is extremely high tension, backtracking serves as a much-needed break from clearing new areas.
This increasing difficulty as you move forward also provides a layout structure I mentioned earlier called field.
Because these levels do not have a lot of scripted events or built-in gameplay, they may seem a bit simplistic, but part of making a map in this style is to not obstruct the core gameplay.
In Receiver, most of the gameplay is built around a realistic simulation of a gun, including all the working parts and buttons.
We surfaced all this gameplay for novice players with a context-sensitive help system.
This makes it clear to the players that every bullet is precious and that every enemy encounter is difficult simply because firing your gun is difficult.
This relates directly to the levels because you can scavenge bullets, and obviously cover and enemy positions matter more when the situations are so lethal.
I think these levels do a good job of giving the player interesting choices while staying out of the way enough to let the core gameplay shine.
By working closely with your gameplay coder, and because the core gameplay was so deep, my job was made a lot easier, and I was able to avoid any really tricky problems.
Part of that was making tradeoffs early in development to avoid those kinds of problems.
In the end, focusing on interesting dynamics that shift rewards and hazards, keeping layout and pacing in mind, and giving the gameplay room to breathe really helped receivers' radically nonlinear levels come together.
Finally, I would like to say, I feel like this is a complicated topic, and because these maps integrate so closely to the gameplay, they are a bit slippery to nail down.
But I think they really are a distinct and interesting style of map with their own history and design trends.
Hopefully, I have provided some concrete ideas on building a map like this, and how to approach certain problems, whether your future levels are radically nonlinear or not.
Thank you for coming to my talk.
And it looks like we have time for plenty of questions.
If you have any questions, you can go to the mics.
Hello and thank you for the talk.
Oh, thanks.
So you mentioned that it is a constant challenge being able to nail the level design just right before shipping the game.
Now, the industry has changed over the years, and now we have tools to measure all sorts of things.
What's your approach to nailing down the interesting parts?
Up to now, what I've mostly done is just have playtests do early builds and just give player feedback, watch people stream the game.
I personally like, more than trying to collect metrics through the game, I like to watch live playtests where I can see the player's face.
So you can get a kind of a more immediate read on what they're reacting to.
Thank you.
Hey, what do you think of the dangers and benefits of using procedural generation with these kind of levels?
I think it should be kept to a minimum.
Like, it's a very useful tool.
I know that there's been recently a lot of like, kind of negativity towards procedural generation.
And I don't think that's really makes much sense.
But at the same time.
Sometimes you just want the Level to play a certain way, and by introducing just a tiny bit of random elements, you can massively expand the playability of a map.
So, yeah, I try to use it sparingly.
So, as an educator, I'm at Breda University in the Netherlands.
We have a lot of room to do multiple Level design projects in our curriculum.
but one of the things I have to kind of figure out is how we build complexity for the students, so like where we start simple and then build up, and some parts of that are easy, like single player platform game level design is a nice starting point, but do you think the linearity and non-linearity, is that more difficult or? I think that especially now, making a really compelling linear experience is extremely difficult.
So, and it's mostly different disciplines, like more about storytelling, environmental narrative.
My last game I made was totally linear, totally, totally linear, totally linear like adventure game.
So I'm well acquainted with those problems.
And yeah, I think they're both really difficult, just different.
So non-linearity is more of like a sideways shift?
Yeah, just like a different set of skills.
OK, cool.
So thank you for the talk.
I wanted to know, you mentioned at the start that the making of the levels is like.
making sure what space is blocked and what space is open.
But in this kind of non-linear level, where you opened up a lot of the space, let's say one problem may be if the player has a lot of freedom of movement, not necessarily that they can fly, but let's say, I don't know, they can climb walls or something like that.
How can you make, let's say, obstacles or walls actually are obstacles without impeding the core gameplay in that way.
So yeah, one of the games that I didn't mention because I had a lot of trouble with this exact problem was Overgrowth because your character is this rabbit and he can jump like 30 feet in the air and run 40 miles per hour.
And you're just like flying past everything at top speed and going anywhere you want.
And yeah, this is a really difficult problem.
And I would, you know, I think ultimately you have to have those kinds of movement options cost something.
at least a little bit of something so that you can have some gradient in the player behavior, or else they are just going to beeline to the objective and jump over everything because their character is Superman.
OK.
Thank you.
Thanks.
Kaisho Escurigasco, thank you for the talk.
I recognize this may be a little bit outside of your field of expertise, but I'm curious about the overlaps with VR projects in terms of linear and non-linear design and explorations.
Yeah.
There is a VR version of Receiver, but I've only played it a little bit.
And I'm not sure, I think it basically works.
I don't think it's massively different.
It's maybe a little bit more confusing when you can't whip your head around and get, for some people, maybe less confusing for others.
I'm not sure.
But I haven't done extensive player testing with that kind of thing.
Thank you.
Anyone else?
Thanks for coming to my talk.
