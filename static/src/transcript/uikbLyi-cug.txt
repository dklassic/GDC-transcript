Hello, my name is Bartosz Kulon, also known as GÅ‚owa.
I was a lead programmer responsible for player mechanics in Dead Island and Dying Light.
First of all, please forgive me for I have sinned.
I lied to you.
I was supposed to talk about 20 steps of improving movement in FPP games, but when I actually wrote the content of this speech, it was so long that we would end up talking to the end of the conference.
And we must have time for other amazing lectures.
So instead, I would like to focus on three major topics.
Crucial player mechanics implemented into Dying Light Parkour.
problems and solutions that we've encountered during the productions and additional details that help us improve the experience.
I hope this lecture will help you build and extend freedom of movement in your game.
So first of all, if we want our players to be able to climb, he needs to know what he can climb onto.
So how we describe a climbable ledge? With its start, end and forward vector.
This info is enough for him to start climbing.
At first we had a meeting and spoke about placement detection of those ledges and our first approach was to try put manually this information into our geometry.
Our level designers wanted to have control over the places that player could go to.
But it turned out that we ended up with...
50,000 ledges placed on a single map and we still needed more.
Working with so many objects is horrible and impossible to manage.
We also, our memory started to shrink because we initially started developing Dying Light on an old generation console and memory space in them was fucking low.
So we decided to take another approach, detect ledges in runtime.
Now, how we did it?
We do a number of forward traces to detect obstacles in front of the players.
For those who hit, we validate space above and below them to see if the player body will fit by simply measuring the distance of the traces.
For those who are valid, we then do a vertical trace to detect the exact spot of climbing ledge.
Those three steps has been repeated to the other side of the player, because our game is 3D, and also our ledge definition has a start and an end.
Then we can pair those points with some angle restrictions, horizontal and vertical, and create plausible ledges.
And then we can sort them by distance and look angles to the player.
and add another space validation with traces.
Why with traces instead of collision queries?
Because our physics engine did not support getting results from physics queries in current frame, and getting results from next one would be too late.
And all that turned out to be the right way to go.
Climbing changed from frustration into pure joy of overcoming all obstacles in player's way.
But this new freedom created two major problems.
So beware!
Level designers and level artists now have to take care of all places that player could go to.
And I mean all places.
Rooftop, backyards, etc.
Everything had to play and look good.
This was pretty scary at the beginning, but eventually they got so excited about the new gameplay possibilities that they ended up loved working on.
They also told me that it actually opened their eyes on true meaning of open world environment.
But this is a story for another lecture and I don't feel competent of explaining it.
The second problem was the performance.
Thankfully we have super intelligent and resourceful programmers that managed to come up with some magical optimizations that included batching geometry around the players and something we call carpet of traces.
Technically, we knew that we have a special case of traces with the same direction and length.
So we optimized our tracing algorithm to take that into account and perform less operation on batch geometry around the players.
I don't know the exact details.
I'm not so good at math, but it did the trick.
Now that we know how to detect a ledge in front of the player, we can move to another important thing.
If you look at this ledge from above, you will notice that there is no space for the player body, so player won't grab that ledge. But this is invisible from player point of view, so we had to include new climbing state. Hang. When we were designing and implementing our first approach, we didn't forget about it, but we wanted our movement to be fast and have smallest amount of stop as possible.
Later, life verified our vision and we had to include that into our ledge detection algorithm.
So how we did it?
We took the results from forward traces from previous stage.
We added different restrictions above and below.
Above like 10 centimeters for player hand, but below it was more restricted one because of the player hanging body.
And the pairing and space validation was done in similar fashion to the previous one.
But if the player is hanging and he has some space on his left or right side, we now have to add additional movesets to make him feel comfortable with climbing.
Hence, we've added site and app shimmy.
But now, we have to detect places for shimmy.
And that requires additional modifications to the algorithm.
But I don't want to bore you with a lot of algorithm descriptions, so I'll leave this topic on a lecture on another occasion.
Maybe next year, if you like this one.
Now I want to talk about something very simple.
Jumping.
This is so old mechanic that all players should know how to do it, right?
Well, as it turns out, jumping in FPP isn't as intuitive as jumping in platformers.
The first player perspective works against precision.
And precision is a crucial part of our game.
Is that a major problem?
Well, we had test cases when a large part of the players would jump too soon or too late all of the time.
So our obstacles end up being too easy or too hard for a large part of the players.
To fix that problem, we have to give the players additional help.
This help included three simple steps that we call jump assist.
First step was to delay jump and wait for a better moment to jump.
We defined better as there is something in front of us, like a wall or a ledge, or players just started to fall, is not touching the ground.
That helps the players that jump too soon.
At full speed, that gave us additional one meter of jump range.
The second step was allowing the player to perform a jump after he fall for a brief moment.
With this one, we had to be careful because soon it looked really bad in co-op.
And that helped the players that jumped too late.
And third step, if the player is jumping over an obstacle but doesn't really touch it, we would still allow him to perform that jump.
Technically, it's a jump in air, but players feel more natural, like they are extending their leg and bouncing off that object.
Again, you have to be very careful because it works on a short range, like 20 centimeters from the object.
Those three steps result most of our problems, and even a beginner had no problem with jumping.
So frustration was gone.
Okay, the end of part one.
Now we can move to problems and solutions that we've encountered during the production.
Animation and freedom of movement.
When we have detected the ledge in front of the player, we will choose his starting position from four positions on straight climbable ledge.
One position on not climbable ledge.
There is a box that you cannot climb above.
And four positions, two per side, on steep climbable ledges.
This one is tricky, so bear with me.
After choosing correct position, after choosing correct animation, player position is linearly set with the starting position of the animation, with special state we call begin.
In this state, player is reaching his hands and legs to grab the ledge.
This tail duration is scaled up or down according to player speed before the climb.
This is due to the fact that we want to avoid changing speed as much as possible, so the movement is more fluid. In this state we are also forcing player look direction to blend with forward direction of the climbing ledge. When this state is finished we have set the player in the exact same position and orientation as in the animation.
So all we have to do right now is synchronize the rest of the movement with the info from the animation.
Bam.
Simple, right?
Here is a sample video of the first implementation.
Some of you may notice that player character doesn't quite fit into Dying Light universe.
And it looked okay, but played horrible.
Why?
Because when we initiated the climb, we would actually play a cinematic that takes away control of player hands.
And no control feels really bad.
So what we do, we started to do a shorter climbing sequence and it pushed us in the right direction, but the problem was still there.
Then, we added a special state to the animation and, when player was still in the middle of climb, the camera was still moving up, but we allowed the player to walk.
It felt a lot better, but still the beginning of the climbing had this issue and we couldn't resolve that in similar manner.
But what we could do is to free player head from restrictions and allow to look around while climbing.
That did the trick.
Even when player body was locked in climbing, there was always some degree of control in player hands.
With that we could rest.
For a while. Until new problem showed up.
Something I call straight line out of hell.
When you see player history positioned from above, you will notice that his line, wanted line of movement, the red line, I hope it's visible, is offset a little bit to the left after the clap.
This change depends on an angle that he approaches the ledge.
The bigger the difference from forward of the climbing ledge, the bigger the change is.
In theory, this shouldn't be a big deal.
But as it turns out, my beloved colleagues from work are very creative.
They have created some weird-ass obstacles that require extra precision from player control.
And that precision was not possible in current implementation.
Thankfully, solution was simple.
Allow the player to climb on his current forward vector instead of the one from the ledge.
That fixed one problem, but created two new ones.
The red ellipse represents the movement from the animation.
As you may notice, it ends before the climbing ledge.
This is due to the fact that the animation has been prepared facing directly the forward of climbing ledge.
So players started to fall before the climbing ledge.
We fixed that by slightly restricting the angles of climb, so end position would differ more than player capsule radius and allow physics to climb on higher stair height midair.
The second problem was the hands.
They were grabbing the wrong places.
One was going into geometry, the other one was grabbing the air.
The first one looked easy.
Render player hands at the end of the fray.
It looks easy, but as we use deferred rendering in our engine, it would be very performance heavy.
So what we did? We've cheated.
We scaled down the hands of the player with camera projection metrics, and it did the trick.
Have a look how it looks from FPP, and from the outside.
We found a missing link, a proof that people evolved from T-Rex.
The second hand used some trick.
Compute edge position in screen space and use hand IK to set the hand in 3D space.
It can be too far from the original position as the hand would stretch unnaturally, but we loosened then the animations a bit and we got like 40 centimeters of freedom that did the trick.
Last but not least, I would like to talk about problems that we had with jumping.
It's important for me because we had many discussions about it and we've resolved our problem in some maybe controversial way.
First question is why we changed the regularly used jump button from X to R1.
our game has very complex geometry, so we figured out that we would allow the players to have full control of the player even in air, so air control factor in air was set to 100% because we wanted the players to move as fluent as possible through our geometry.
But if the player wants to press the X button, he will move his thumb from right stick to press it.
That means he's losing control of player for a brief moment.
The pacing in Dying Light is sometimes unforgiving, so even a short lack of control is bad.
So in the end we move the jump button to R1 as it grants more control over the players and fix the problem.
The second complaint about jump button was to hold or not to hold it.
Imagine this situation.
You have two ledges in front of the player, one in the window and one above him.
As I have described, when searching the ledge, we define which one is better by comparing the distances and look angle.
But the distance in this case is equal because we measure it in 2D.
So how we choose between them? By slightly looking above one of them.
The problem was no matter how I tweaked this algorithm to implement that slightly, it never worked perfectly. For some people it did, and for some people it didn't.
What really helped is adding the restriction to hold the button to grab the ledge.
You click, you jump.
You grab the button, you grab the ledge.
It took some time to teach the player how it works, but eventually remove all of the mentioned problems.
At some point, we were also experimenting with something similar to Assassin's Creed play style when holding the trigger would switch player character into free running state.
In this state, player would jump and grab ledges automatically, and as a prototype, it worked amazingly good.
But it took away all players' skill and satisfaction of performing a perfect time jump.
Don't get me wrong, I love Assassin's Creed franchise, but Assassin's Creed for me is all about the journey, the world and the setting.
And we wanted our game to be more about second to second gameplay, so action in every aspect of game was crucial.
The ability to make mistakes, to master the movement was important.
This is something I noticed when I played Old Prince of Persia Sands of Time versus Prince of Persia 2008.
The first one had all moves, jumping, wall running, monkey bars, et cetera, preset to different buttons.
So it felt very acrobatic to overcome obstacles.
Harder, but again, more satisfying.
in Prince of Persia 2008, all of those mentioned moves was moved to one button.
So the difficulty went down.
And I feel the free running state took that simplification even further.
But this is due to the fact that Assassin's Creed and Prince of Persia are different games and we figure out we shouldn't go that way either.
The end of part two.
Small break.
Okay, now I want to talk about something slightly different.
Vomiting. This only happens to me when I party too hard.
It never happens to me after gaming. So imagine my confusion when one day my colleague came to me and told me this story.
Dude, I was showing our game on game event to one of the reporters from Polygon. Suddenly she turns pale, runs out of the booth and vomits.
He was in shock. Later that day he even wrote him an email and told him that she felt bad for the rest of the day.
That was a disaster. We couldn't let that happen. You don't want a reporter run out of your booth.
You don't want the players to feel sick when they are playing your game.
Unfortunately, we didn't have anyone with that symptoms in our company.
This was like 2014, so no VR stuff and motion sickness wasn't that common.
Thankfully, we've read some articles about motion sickness and prepared a build with abilities of turning and tweaking things that could have influence on motion sickness.
Big help came from specialists in that manner, because we have requested a report in which a lot of tests was conducted, I hope not on students only.
And they figure out what caused motion sickness in our title.
It turned out that frequent and often camera target movement caused motion sickness.
The left one shows before the corrections, the right one was after the corrections in the animations.
camera moving backward when player body was moving forward.
That created an awkward feeling in player's head.
So we had to remember to never go with camera back when performing fast forward moves.
The highlighted area shows that on the left side, there is a slight bump backward.
And we eliminated that in the animation, and that helped us.
Third thing is player not being able to focus on constant element on the screen.
Adding a simple dot there, fix that. It's even invisible for you, but your eyes automatically rely on that constant element and amortizes all of the movement, so it really helps.
Last but not least is the distance between the TV and the player.
When player is sitting too close to the camera, his brain can stand even the slightest movement of the camera.
While we couldn't fix that at player homes, we could definitely fix that on next game event.
Techland boot became larger and we made sure that the distance between the player and the TV is large.
The result? No one felt motion sickness after playing DL on events, even the journalists that pointed out this problem. So it was a massive relief.
This task was very frustrating for me as I was fixing problems that I didn't quite understand and I couldn't see really see the results of my work.
But eventually we got very little negative comments about it, so I guess we did a good job.
We're running out of time, so I will now give a list of things that we've implemented also.
It will explain why we did it, but I won't tell how.
You have to do it for yourself.
When you see parkour videos, you will notice that freedom and fluidity of movements come to the runners very naturally.
This is due to the fact that they have very good and well-trained knowledge of their bodies.
That helps when they are running on narrow walkways, when they are jumping on knee-height obstacles or move their shoulders to fit into narrow ways.
That kind of special awareness is impossible to simulate in FTP games.
Player often lose obstacles from their side due to limited FOV or input slightly wrong direction and falls from heights or bumps into walls.
To compensate that problems we created a couple of systems that help the player.
Balance. If the player is walking on narrow object or near the ledge of the building we would slightly correct his input so he wouldn't fall.
Avoid. When player is running, we would add side speed to his movement to avoid make him fall into walls and thus make him run much smoother.
If you look, you see a little bump to the right, left. This is artificial. Player inputs only forward direction.
And there is no collision. Like, we prevent collision from happening so there won't be any slowdown.
and autostep. If the player has a small obstacle in front of him, like 40 centimeters, we would automatically climb on it, because those obstacles, when he's close to them, are invisible for the player, so it feels very natural to walk on them.
So far, I was talking about movesets, about things that help the player move up or forward.
But professional runners can do a lot of different stuff to go down.
To help the player move down, we've added several systems that allowed us to build the true image of free runner.
We've added jumping into dumpsters and breaking falls, landing on cars.
jumping into water and swim, slide down ladders and pipes, using a zip line and enjoy the view, or even break falls by rolling.
Those mechanisms had to be used by level designers to create fun and varied environment.
And as a wrap up, where to go from here?
Well, sky is the limit.
One could add turning on shimmy so parkour puzzles would be even more interesting.
Outside wall run with some clever level design to support them.
Add environmental awareness so player would, when running through near obstacles, would touch walls and other things.
Sky is the limit.
Don't give up and you will succeed.
At the end, I would like to thank all of the people that work on creating Dying Light.
All of them deserve a round of applause, so give it up for them.
