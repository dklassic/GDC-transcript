This talk is post-mortem-like, and it's a story about our recently released game Outriders, and I also decided to change the title yesterday, so please don't be confused.
Before we start, I can ask you to switch your electronic devices to silent mode.
Yeah, and enjoy the talk.
So, let's move to chapter one then.
When I was in high school, I was watching the Shell Pack TV series.
At that time, it was yet another cartoon for me with some crazy, awkward, and sometimes even stupid scenarios and punchlines.
Nothing more than that.
But a few years ago, when I was preparing myself for a workshop about the MVP concept and experimental approach to software development, I was doing some research and I found, by accident of course, a part of an old episode of Saltpark.
It was about NOMS Corporation.
And you know what?
That time I felt I was being enlightened.
NOMS from Saltpark revealed to me the secret formula for how to make every business successful.
And I will share it with you today for free, just like that.
And to give you a better context and understanding, let's watch the short fragment of this episode in the first place.
Damn dude, this place is huge!
Yeah, it's almost as big as Cartman's ass!
Nowhere is it you guys!
This is where all our work is done!
So what are you gonna do with all these underpants that you steal?
Collecting underpants is just phase one.
Phase one, collect underpants.
So, what's phase two?
Hey! What's phase two?
Phase one, we collect underpants.
Yeah, yeah, yeah, but what about phase two?
Well, phase three is profit, get it?
I don't get it.
You see, phase one, collect underpants.
Phase two?
Phase three, profit!
Oh, I get it.
No you don't, fat ass.
Do you guys know anything about corporations?
You bet we do.
Us gnomes are geniuses at corporations.
Time to go to work.
Work is gonna start.
Jesus Christ, look out!
Oh my god, they killed Kenny. You bastards.
Cool, so once again, this is the secret formula.
Phase one, collect underpants.
Phase two.
And the phase three, profit.
That's all you need in order to achieve a success.
You can trust the gnomes.
But let's check if this formula works for different cases.
Let's assume that we want to collect seashells, for example.
So this is the phase one.
Then we are moving to phase two.
And phase three is a profit.
So it works again.
Cool.
Let's move to the game this time.
Phase one, we get an idea for the game.
Phase two, and we get a profit.
So it works again, genius.
But let's put jokes aside for a moment and try to find real wisdom about the dom's plan.
I hope that you'll agree with me that when it comes to the Phase I, everything starts with an idea, with a concept, with some plan for a business or a game.
Then, when it comes to the Phase III, the goal of our effort is to deliver the best experience for the players and gain profit. And I want to be clear here that I don't understand profit only in the case of money.
You can define profit in many different ways.
But phase two is something which is unique for each of us.
And I formulated three premises here when it comes to this uniqueness.
I mean that we are all in a different business context.
This is the first one.
The second one, we want to answer different players' expectations.
And the third one, we have different production pipelines, experience, and best practices that we are using.
That's why it's really hard to find one way of working or one specific way to always be successful when it comes to the game development.
And this phase two, for me, is actually the development.
That's the reason why I'm here. I want to share with you our experience from Outriders production, from making Outriders.
It doesn't mean that our way is the only way or that I will preach the greatness of People Can Fly.
Nothing of that. However, People Can Fly is a great company, so join us.
But as I said, we are all different when it comes to phase two, which is pretty cool by the way.
And I do believe that having conferences like GDC or other events, meetups or so on, we can share our thoughts and learn from each other.
Thanks to that, try new methods later in the development or in the production.
So my name is Adam Alker and I am a head of transformation at People Can Fly, also acting as a head of development.
And I'm here today to share with you our long, bumpy journey of releasing the Outriders.
Let's move to the chapter two.
You know people can fly from producing awesome shooter games like Painkiller, Bulletstorm, Gears of War, Judgment, and, of course, Outriders.
We also have one of the most skillful Unreal Engine developers in the world.
This year we'll have the 20th anniversary, which means 20 years experience of creating games.
In 2016, the company made a strategic decision.
We separated from Epic Games and started our new chapter, our new production, which was Outriders.
We were very excited when Square Enix decided to accept our pitch and go with the franchise.
There were around 40 aviators at the time.
And you can see where we started.
Those are two pics from our office at the time.
It was pretty cool.
But we were speaking about the madness.
Do you know this movie?
Yeah, of course you do.
This is a scene from 300, yeah?
The Persian emissary comes to Leonidas, the king of Sparta, and ask him to bow in front of the Persian ruler Xerxes.
But proud Leonidas refuses that act, and short commissary says this epic verse, yeah?
This is blasphemy, this is madness.
Madness?
As Leonidas then looks at his wife's eyes.
No, this, S.
Can you help me with this?
Spark.
Spark.
Cool, but actually he says something else.
He said, this is Outriders.
No kidding, it was true.
Madness was our code name.
And this is my first takeaway for you.
Never, ever use this code name for your game.
The old Latin proverb, nomen est domen, which means the name is a sign, was fucking true here.
Our journey to release the game was a true madness.
Why?
From the idea for creating a small game, we grew up to the AAA production.
It wasn't our intention from the beginning to create a AAA game.
From the local studio, we grew up to the global company.
From the original idea of releasing the game for the old-gen consoles, we end up being one of the very first game for the next-gen and ready for the full cross-play.
After a very promising demo release, We had to struggle with extremely annoying ghost bugs related to inventory wipeout and disconnects.
We started from producing one project and had to learn how to manage the production several projects at the same time.
Not mentioning, you know, our own huge ambitions, COVID-19 and the others that I will elaborate on later.
That was madness.
but against the 300 ended with a victory.
Now, as you can see, we're located in North America and also in Europe.
This little red dot is showing our headquarter in Warsaw in Poland.
This is the place where I came from.
We also moved to different locations, which are much more bigger and enhancing our creativity.
So that's about people can fly, and now we can move exactly to the journey of creating the game.
Yeah.
You know, since this is a production track, it's highly recommended to show some gun shot.
or the process chart or any other kind of the chart to make this presentation look more professional.
And yeah, that's why I also have one for you regarding the process.
So when we are speaking about the production phases, I have in mind at least four of them.
I mean the concept one, then we go with the pre-production, then we have the production, and we are finishing with the post-release.
Each of them has some gates or outcomes that you want to achieve.
So I would just focus about a pitch gate, which is ending up the concept phase.
During the pre-production, we've got a first playable in Vertica Slice.
Then during the production, we've got the alpha, beta, content log, ZBR, goal to release, and then we are moving to the live ops.
And I'm aware that depending on the game scope, genre, or the business model, definitions of the gates and outcomes may vary.
That's why I want to bring you the two definitions that we'll need for today's presentation, for the first playable and the vertical slice.
For us, first playable should give you the taste of the game and possibility to experience the fun.
This is also the moment when you can fail fast.
Yes, and iterate as often as you need.
While the vertical slice should prove almost all your production pipelines, mechanics, systems, and the art direction.
In other words, After vertical slice, you should be ready to scale up your production and smoothly create the rest of the content with no radical changes, extra features, and so on.
So I would like to show you a few pics and footages from our first playable build, vertical slice build, and the game itself, just to show you the difference.
We'll start with the first playable.
You can see that we are using the weapons level just to prove the core combat loop, covering system, shooting, enemy spawning and so on.
Just to prove what will be the idea for the game.
Yeah, we also had some levels, white box already, the concept for the game, where we want to go with the progression with the player, and so on.
Some basics, UI as you can see here, and the first look of the character.
Then we move to the vertical slice.
As you can see, there is a significant change here.
And also.
like a footage.
You can progress with your character, you can interact with the NPCs, do the first quests.
Yeah, one more.
Showing the art direction, as I said before.
Cool.
And now, it's the last footage that I got for you, showing the released game.
Actually, we got some out of here.
For those of you who didn't have a chance to play, you can see how the games look like here.
A lot of enemies, cool weapons.
Yeah, of course we can see the difference in quality, which is something natural for the first playable vertical slice and the released game.
And every iteration is better than the previous one.
But in our case, there was something more here.
Through the several first playable builds, we were looking for answers on how.
outriders should look like.
Once we found it, we moved to the vertical slice.
And do you recall what I said about the vertical slice?
That it should prove almost all your production pipelines.
Yeah.
Well, we thought we did it.
Yeah, but unfortunately the reality was different.
And we still had to iterate with some experiments during the production phase, and because of that, modify the current pipelines.
So as you can guess, it had an impact on the schedule, complicate the code, or even influence the story.
So what we did wrong.
We were rushing too much with the schedule.
We thought that we need to meet each deadline because this is the most important thing instead of keeping attention on the fun and quality.
We wanted to include as many ideas as we had in our heads.
Yes, trying to constantly improve the ongoing work.
The story of the game, the story itself was evolving through the production phase, which was of course generating many other complications and changes.
And despite the experience of the core team, we were learning through the development and wanted to improve the things that were originally done or claimed as a release-able.
And so we are iterating with the already closed things.
And we scale up the team very, very quickly, but I will elaborate about that later.
Please, don't copy that.
You know, when you're in the middle of the battlefield, yes, your perspective is different.
So back then we thought that we were great.
But that's why I personally see a lot of sense in making postmortems or collect lessons learned to be mindful which practices worked in the past and which you should avoid.
So basically I see two approaches here when it comes to the pre-production how to do things different. The first one is to make your pre-production phase as short as possible and the second one to extend the pre-production phase to be better prepared for the later stages.
And for us, for the AAA productions we think that, or we understood that it is much more efficient for us to go with the latter and to extend the pre-production phase rather than the production one.
And, you know, I got some arguments for that thesis.
and happy to discuss with you this later.
So if you extend the pre-production phase, so the cost of the change management is cheaper for the vertical slicer and for the whole pre-production than for the production one.
Why?
Because when you are changing your pipeline, less people are engaged.
So because of the scale, the change management is cheaper.
The implication of the changes are impacting smaller number of teams.
So once again, we are speaking about the scale, we are speaking about the complexity.
Less work, usually you don't have to refactor other features which potentially will use a given component.
So this is another argument showing you that it is better to iterate, pivot, change everything during the vertical slice instead of the production phase.
And finally, you are gaining more reliability for planning production phase.
Yes, I mean the velocity, cost, and resources.
We were working with the publisher on our drivers, so it was really crucial for us to be predictive. Yes, we should predict and forecast our schedules for the next phases.
So I do believe that this investment during the pre-production will return later.
And as I said, we took this lesson very seriously and from that time we are paying more attention on the vertical slice Ensuring that we are ready to move to the next stage. It's not always easy. Yeah, it requires some negotiations and having solid data Which will support your decision But as I said, you don't want to pay this debt later But I'm happy to discuss this thesis with you later.
It works for us.
But I can also imagine the quite opposite model when you want to minimize the period of this phase and go live as fast as possible and iterate taking under consideration the player's feedback.
Yes, I think that it really depends on the production and the genre that you are working on.
Yeah, chapter four, Brothers.
in arms. So let's talk a little bit about scaling.
You remember when I said that we kick off the game with 40 people during these five years we scale up the core team of Outriders IP to circa about 200 people and at the same time people can fly globally grew up to more than 500 people.
Sounds good.
Sounds impressive, but Scaling is always a challenge.
This is always a challenge for the company.
And let me give you some examples of issues that we had.
And I grouped them as internal and external ones.
Let's go with the internal ones.
So you've got an idea, you've got the money, and you've also got some deadlines.
All you need is to have the right people on the project immediately.
Sounds familiar to someone or not?
We are opening positions, enhancing recruitment, looking for the best people.
But recruitment is taking a lot of time.
And it's not always so easy to convince people to join you when you are creating a new AP.
When you don't have a proper branding, when you don't have the proper label.
So the fact was that we did not keep the right pace when it comes to the recruitment.
And it's not because we didn't want to, yes.
It was really hard to leverage this recruitment and have the equal onboardings along the time.
But let's assume that we have the people that's on board, yes, but you need to think how to compose your teams and who should lead them.
This is the next issue because you are creating more and more teams, having more and more people.
That's a tricky one actually, because not every senior developer wants to be a lead.
Some of them just want to be a principal and still do their job.
On the other hand, not every candidate for a lead has the right skills to lead.
So, we are experiencing that during couple of years and learning.
And we found out that being a lead is a great responsibility and you need to be prepared Or you need to prepare your best people to play this role. Otherwise, you'll receive a random outcome I'm not saying it's always gonna be bad. Yes. It's gonna be just a random outcome. It might be good It might be bad as well. And this is strictly related with your back office processes. Scaling up the headcount without scaling internal processes will lead you to failure in the long term. You need to learn how to decentralize structure, delegate the responsibilities, delegate responsibilities and make sure that the project team understands the big picture.
And leadership there is the crucial one here.
So when it comes to the back office, we have this mission statement inside of the company that the back office team should enable the work, the environment to create the best games for our developers.
As they are not working for themselves, I mean the back office team, they're working to support our developers inside of the company.
So that's about the internal factors.
But let's keep for a moment this narration that the recruitment is going extremely slowly, but they need people.
So what are you doing then?
Of course, you are calling for outsource parties.
And we did it as well, to be honest.
I think that in the peak, we were cooperating with more than 200 or 300 people from the outsource.
And don't get me wrong, it's nothing bad to collaborate with the outsource.
We have a great partnership still today, but you need to do it smartly.
Based on our experience, we formulated three rules when it comes to outsourcing.
The first one, the most fundamental one, build a strong relationship with the third party.
That's a key to success.
Try to have the regular and frequent catch ups with your partners on a different management levels.
This is really important.
Don't speak only with the business partner because they will tell you, yeah, it's awesome, it's great, we're doing a great job.
But do not forget about them because their perspective is also important.
So you cannot only focus on the development.
team. It's really important to understand each other, yes, and define the clear goals and expectations when it comes to the outsourcing. If these elements are not present, we as a company, we are not continuing the collaboration. And I'm completely honest here with you, we get some situations where if we couldn't build the relationship, we were just closing the contract.
So the second one, try to outsource repetitive tasks or end-to-end components.
That's really important. This rule will help you mitigate the risk, save costs and let your team do other more creative tasks.
A good example of typical repetitive tasks are quality tests, some code re-implementation, bug fixing, or even porting the game to a different platform, yes, if you treat it as an end-to-end process.
And the third one, which correlates to the second, try to not outsource complex or key issues for your game.
Or maybe leave it as a last resort.
It's all about risk management here and building the knowledge inside of your company.
We wanted to be sure that every major issue can be handled in-house.
So if a given feature or a system is one of our game's pillars, we wanted to have knowledge of how it was done.
And the best way to have it is to do it by your own.
Of course, there are some expectations or a specific plot of circumstances that will make your want to outsource that and then try to go back to that work, try to go back to the work sooner than later.
We learn it through the development.
And from now, I should rather say from two years, we are paying a lot of attention to develop key features in-house.
Do not outsource them.
You will learn about it during shipping phase, yes, when there is a lot of bug fixing stuff.
Cool.
The fifth one, the black swan.
I guess that some of you know the black swan definition, but I will bring it to you.
This definition was formulated by Nassim Nicholas Taleb and describes an extremely negative event or occurrence that is impossibly difficult to predict.
In other words, black swan events are events that are unexpected and unknowable.
And we've got some attributes outlined to this event, three of them.
The first one is a black swan event is an event that is unpredictable, as I said before.
A black swan event results in severe and widespread consequences.
And the third one, after the occurrence of the black swan event, people will rationalize the event as having been predictable, which is known as a hindsight bias.
I would like to share with you four of those events that we met during the production.
The first one, a model example of a black swan event is the COVID-19 situation.
I guess that this is common to all of us.
because all of us had to deal with it.
So I will not speak a lot about it.
But in our case, the pandemic started in a moment when we were preparing ourselves for the game release.
So it was a very crucial moment.
And as you can imagine, it's really helping, and it's more efficient, I guess, when you have your team on site.
And when they can collaborate with each other, then when they are just dislocated in many locations and trying to download the build, having the poor internet connection and so on.
So as others, we had to overcome this challenge and get things done and move forward.
Was it unpredictable?
Yes, it was.
It was a game changer, yes, not only for us, not only for the game industry, but for the whole world.
But could we prevent it somehow?
Could we be prepared?
Yeah, I guess we could, yes, but we didn't work remotely previously in our company.
Why not?
I don't know.
Maybe we didn't have this need before.
The second one.
Very interesting. Next Gen and Crossplay.
Now maybe it's not literally the Black Swan event, but in our case for a couple of years it was.
Originally we were planning to release the game on nowadays old generation platforms, but as you already know from what I said, the project had some delay, and we had to make a strategic decision along with our publisher.
Do we want to release the game now and later prepare the patch for the next gen?
Or maybe we want to risk?
postpone the project for the next couple of months, increase the budget, and meet the new expectations.
So, the same story was with the cross-play, which became very popular around our original release date, and we decided, yeah, we didn't plan to make it, but since it is very popular, maybe we should have it inside of our game.
and it was 2019 or 20 I guess, that we made this decision that we are going with these two things and had to change the whole production plan once again, but it wasn't the biggest issue.
Yes, we decided to take the chance and invest more time in production, but I guess that we did not expect such consequences when it comes to the tech side.
I mean integrating our code to the newest UE, updates, new SDKs, GDKs, and so on.
Once we thought we were done, a new update was coming, and some unexpected problems occurred.
So we have to make the next iteration, and so on, and so on, for a couple of times.
The frustration inside of the team was really huge.
On the other hand, we were very motivated to finish the work.
And after all, it was worth doing that, definitely.
Not only we gained a lot of experience, which we are using right now, but also we used the opportunity to be the one of the very first game ready to be released along with new generation of consoles and ready for the cross-play for many, many platforms.
Was it unpredictable?
Yeah, somehow, because we didn't plan it.
The consequences, as I said, engine updates at the very end of the production.
And the question is, why we didn't plan it?
It's so obvious that we could go with that.
Let's go with the third one then, the demo.
I will reveal a secret to you.
Originally, we did not plan to release the demo, period.
But taking under consideration the first and the second Black Swan that I was talking about, we came to an idea that we need to prove somehow to our community that we are reliable and that they can expect a great game that will be made by us in the upcoming future.
So I remember that in September we made that decision together with Square that we are releasing the demo, that we want to launch it.
And in February it was released.
And we really received the great sentiment from the community.
But it cost us a lot.
as it was yet another project being done in the parallel together with the main game.
We had to maintain the demo, yes, we released several patches just to the demo.
And a couple of more intensive days we had to spend at work, yes, but we are very happy with the outcome.
And furthermore, the demo version gave us a lot of telemetry data, so it was really good to do.
But you're not able to gather it through the regular testing, yes, because it's not the same scale. And I believe that thanks to that we also managed to improve the overall quality of the game just before it was released. So once again, it was unpredictable for us because we didn't plan it.
We had to do additional life of stuff related to the demo.
But we can ask ourselves, yes.
Did we plan it?
Yes, we could, yes.
Why we didn't do that?
And the last one, guys.
Unexpected, beep, beep, beep, beep, untraceable bugs.
This is the last event I want to share with you, and it was strictly related to the inventory wipeout and disconnects.
Those of you who played the game probably had a bad experience with this stuff.
But after the release, the overall reception of the game was quite good.
However, there were two offenders, one by one, that were not able to track during the shipping by us.
Yes, we wasn't able to track them.
Even the beta test that we had did not reveal the issues that I'm speaking about.
Maybe, you know, there was some random cases in between, but yeah, they were just random.
So, unfortunately, we exposed our players to the very bad experience, and we are still very sorry for that, but trust me that once we discovered these bugs, And the community confirmed us about the issue, as the studio were working in a 24-7 regime in order to fix it.
And once again, I would like to thank, once again, I would like to thank you for helping us, I mean the community, with targeting these bugs, especially the one related to the inventory.
We did not predict it, so yeah, it was unpredictable for us, and did not find it despite the countless hours of testing.
The impact of the event was enormous, and once we found it, the reason for that was very obvious.
And we ask ourselves, yes, why we couldn't develop it in a different way?
It was so obvious, yeah.
But now we know it.
So I can assure you with the one thing, that the longer is your project, the more likely you will meet a black swan event.
You cannot be fully prepared for that.
However, you can mitigate the outcomes and learn on it.
And in a moment, I will give you a hint how to deal with it.
So we will move to the last chapter, to the contingency theory.
This is the last definition I've got for you today, and I promise it will be the end of the lecture, but you will be ready to pass the certificate after having this definition explained by me.
So I guess that many of you heard about black swan even, but I'm not so sure when it comes to contingency theory.
It was formulated more than 70 years ago in Chicago University.
A contingency theory is an organizational theory that claims that there is no best way to organize a corporation, to lead a company or to make decisions.
Instead, the optimal course of action is contingent.
means dependent upon the internal and external situation.
So contingent leaders are flexible in choosing and adopting the Saxon strategies to suit the changing situation at a particular period in time in the running of the organization.
And a couple of sentences here as well.
Contingency theorists would say that no matter how successful a leader is.
there will always be a particular situation that will challenge them, which is really, really important.
And true fact is that contingency theory was checked by many others and no one was able to failure this definition.
It is still valid.
But let's try to Let's try to adapt this contingency theory into game development.
So, the first statement that I have for you is that there is no way to lead a complex project.
I mean the AAA project.
Different genres and business models require different leadership.
And when your game is a live service, probably you'll put more effort on telemetry, feedback studies, or expectations, expectations management.
You'll need a different approach to test complex RPG-like games, and a different one when it comes to the shooter games, and so on.
So, once again, there is no one way to lead a project.
there is no one leadership style that will work in all cases.
So we know right now, being a global company, that depending on the region, culture, country, experience, relationship, insight, and between your teams, you should use specific methods and practices to manage work and engage the people.
There is no one way to do this.
Sometimes your goal will be to inspire your team and to give them a lot of freedom.
Another time you will expect discipline.
You'll be sharper and more tenacious when it comes to the negotiations and so on.
But the bottom line here is that you need to have the right skills to play all these different roles.
which is extremely difficult and probably even not possible to do.
That is why some leaders fail.
because they want to do everything on their own and make every single decision on their own.
Other leaders, yes, they learn how to delegate responsibilities, but delegation and responsibility is a quite different story for today's talk.
And the third, the last one.
There is no one perfect methodology to manage the whole project.
There is no silver bullet.
And we are going back to this phase two with the question mark.
Why we had this question mark for the phase two?
Because there is no obvious answer for that.
And let me elaborate on that a little bit more.
Once again, I will display this and chart with the processes.
And I strongly believe that each of these phases needs a separate management approach.
I don't know if you were present, but I really enjoyed listening to Ben from 47 on Monday.
when he was speaking about the hybrid of Agile and Waterfall in the game development.
And I agree with him that no two projects are the same.
And there is no way to decide, sorry, you need to decide how to tailor a production framework for your own.
Yes, at PCF we managed to create the framework, our own framework that we are using right now.
And yeah, it is a mix between Agile and Waterfall.
So I do believe that when it comes to the first two phases, concept and pre-production, they are more creative one.
And if we are speaking about the creativity, if we are speaking about the iterating and failing fast, it's always good to choose the agile methods here.
Maybe Scrum, maybe something else.
When it's going to the production, you want to be repetitive.
Yes, you are scaling up the things that you've done previously and prove previously, and now we want to be really predictive and do the things in the constant velocity.
Different approaches when you're trying to release the game, when you are shipping it, then you want to be very efficient, yes?
The first two phases, I heard this sentence, the first two phases are being made by developers.
The third one, I mean releasing, is being made by programmers.
Yes, because they are fixing bugs.
So you need to give them the right transparency, the right information, what is important right now, and keep the velocity here.
And the last phase, the post-production one, it's about being adaptable.
Yes, you want to adapt to the feedback that you are receiving, and implement it in the best possible way.
So yeah, let's go back to this contingency management again.
For example, during the production phase, as I said, you're experiencing this agile methodologies.
And you will choose the best solution, the best tool for you.
Try to be flexible, try to be agile here.
And you know, the coolest thing is that you can check out everything I said by your own in our new expansion to Outriders, which will be released this year.
So stay tuned, check the Twitter, check the media.
I think that information about that will be soon.
And I would like to thank you very much for being here with me, and I hope that you find this talk educational and interesting, and I kindly invite you to share your feedback using the survey, and if you have any questions, I'm more than happy to answer them.
Thanks a lot.
Hello, it was an awesome talk, very useful. I have one question.
So, well, we are a very small studio and I was looking how you started and I'm like, wow, that's a big studio.
We are four people and we were smaller and I am also an indie solo developer and I was meaning to ask, all this advice can be done scald for a very, very small studio or would you take special considerations?
You know, I think that I will use a different method when it comes to the smaller scale, because having a smaller scale helps you to be more agile even, and you don't have to use those processes and formal stuff.
because you can discuss everything, having each other as a one group.
There's a different approach when you have, I don't know, 20 teams on your project and when you have only one team.
Yes, having 20 teams you need to manage the complexity and dependency.
and also manage the communication, which is the hardest part.
Having a smaller team, it is much more easier.
Maybe I would just take the general approach, just seeing the big picture and so on, but use the less formal methods when it comes to the team management.
Thank you.
You're welcome.
Yes, please.
Yeah, hi Aram and thanks for the talk, it was really good and great.
About the contingency, as it is a future event or circumstance which is possible but cannot be predicted with certainty, your three tips or three things which you are doing now to somehow prepare for it, because it's a little bit disrupting for me that I cannot predict this and prepare.
You're saying about being prepared for something which we cannot predict?
Uh-huh.
Ah, yeah.
Yeah, I said this.
Yes.
So...
You know, it's truly about being prepared to do things which will stress your team.
Yes, it's...
The situations that I shared with you, all of them were some kind of stressful, yes, and we weren't used to them before.
But you can prepare your team for the situations like that, saying them, Hey, guys, right now we know how we need to, you know...
group each other, that we need to speak more often, be more transparent, and so on.
I mean by that, that when you are doing nothing, you will never be prepared for mitigating the risk.
If you are trying to collaborate with your team, and if you are trying to be close to them, it is much more easier to react on situations like death.
That's just to feel the rhythm of your team.
And I think that this is the only way, or at least the only one that I know.
to react to something that is unpredictable and unknowable for us.
Okay, thanks.
You're welcome.
Hey Adam, good talk.
Thanks.
I noticed a lot of similarities between Ben's talk and your talk with your pipeline and schedule.
What I thought was really interesting was the first playable before the vertical slice.
So was that more just for first playable being a proof of concept of like product pillars or major features and then move into the vertical, you know what I'm saying?
Yeah, I know, yeah, that's a good question.
So you know, we are at People Can Fly, trying to show through the first playable build the idea for the game.
So it doesn't matter if you're showing it at a white box level and so on, because we just want to prove, or mainly prove the core combat loop, because this is the key pillar when it comes to the shooter game.
During the vertical slice, we have this definition that we want to prove the one hour of game, of the gameplay, showing every single aspect of the game during this one hour, yes?
So different type of enemies, different type of skills, armors, weapons, and so on.
Yeah.
OK, thanks a lot once again, and enjoy the rest of your day.
Thank you.
CLAPPING