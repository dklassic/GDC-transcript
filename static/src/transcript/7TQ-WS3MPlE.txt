Hi, my name is Tobias Carlsen, and I'm an AI programmer at Sony Bend Studio.
And today I'm going to talk about score coordination in Days Gone with a focus on combat.
First of all, what is Days Gone?
Well, for those of you not familiar with the game, Days Gone is an open-world game set in a post-apocalyptic world where a virus outbreak has turned the majority of the world's population into these rabid creatures called Freakers that just attack anyone on sight.
As a natural consequence of this, civilization has collapsed, and the few survivors have fled the cities and fractured into various factions that are all hostile to each other.
In the game, we follow Deacon St. John, a veteran biker, and his best friend Boozer, as they're trying to survive this hostile world, while at the same time deal with their emotional scars.
Days Gone is currently available on the PlayStation 4 and the PlayStation 5 platform, as well as on the PC.
So we are mostly famous for our freakers, or rather, our hordes of freakers.
However, this talk is not about our freakers.
Instead, it is about our human AIs.
And we've got plenty of human AIs in our game.
And they end up fighting both each other and the player and the various freakers in real life.
So that means we will have groups of AI fighting together in combat.
And as with any human endeavor, when a group of humans come together and try to achieve a shared goal, they will strive to cooperate and coordinate their actions. So if we want to make our AI look believable, then our AI need to be able to cooperate effectively.
Also, it's much more difficult to fight an enemy that is coordinated, that attacks in unison, rather than attacking piecemeal one by one. So this is a much better way to improving our AI's difficulty than, say, increasing hit points or hit accuracy.
The thing is, though, coordination is hard.
And coordination is particularly hard in an open world game, as anyone who has tried to write AI coordination is probably well aware of.
The thing is, in our open world game, our enemy can come from any direction at any time.
And we don't even know what kind of enemy might be coming.
So this makes it difficult, if not impossible, to script for any possible scenario.
What we need to come up with is a more systemic approach, which in our case means AI for group coordination.
And our solution, we feel, is a comparatively simple solution, yet very powerful, which allowed us to solve all the problems that we came across.
We also think that it is a solution that should be easily transferable to many different kinds of games that face the same kind of problems.
So the things we need to solve is First of all, the group needs to figure out a goal that the group is trying to achieve.
And then, on a group level, the group needs to exhibit the behavior that furthers that goal.
Individual group members will be playing roles within that group behavior that will further this behavior.
And these roles need to be assigned to the right character or the right group member at the right time.
We also need to deal with positioning, both relative to the enemy, relative to our friends within the squad, and also appropriate for the role.
And finally, we also need to deal with timing.
So if we have a group member who is assigned to provide covering fire for another group member so that other group member can do this thing, then that's no good if that group member jumps out of cover, empties his gun, and then dives back down to reload just in time for the group member that he is covering for to be ready to actually make his move.
So for the rest of this talk, I will use these blue circles to symbolize the squad he's best depicted I'm talking from, and these red circles will be the enemies of our blue circles.
So when we started working on Days Gone and the human AIs in Days Gone, we started working on individual AIs and their behaviors.
So we made sure that the AIs could fire their guns and actually hit their targets, reload those guns when they're out of ammo, get around the level and get into cover when need be.
And This kind of looked good if we spawned in a single AI in a level and fought that AI.
The AI knew what to do and was a reasonably good opponent.
But as soon as we added more AIs, particularly if we had two groups of AIs that were enemies of each other, things didn't look as good anymore.
And the obvious reason for that was that we had no coordination.
So the biggest problem was combat was very difficult to read without coordination.
And what we would have would be that our two sides would intermingle with each other.
So we would just have a mix of enemies trying to attack each other.
And this was something that was exasperated by the relatively short distances that firefights in Dastkhan happen at.
Firefights in Dastkhan are very close and personal, even with our longer range weapons.
And one thing that also happened here was that because DayZone is a cover shooter, any AI that is in cover needs to have a cover that is valid. And with valid we mean that that cover provides cover against all enemies. So if there's an enemy that's in a position that the current cover is not valid for, well that AI will have to move and get to a new cover.
So what we would see is that when our AI just got mixed up like this, at least one of these AI's covers would invariably be invalidated and that would force that AI to move. And as that AI moved, Well, that AI would invalidate at least another AI's cover.
And what we would end up with was these cascading cover validations where each AI would just get a cover invalidated over and over again.
And the whole group would just be milling around.
So obviously, if you want to be in a firefight and be an effective combatant, you want to be shooting at the enemy.
And when you're moving to a new cover, you're not shooting at the enemy.
And even worse, when you're moving, you're not in cover, so you get very exposed.
And our AIs turned out to be very ineffective opponents when putting groups without coordination.
On top of that, our combat kind of lacked direction.
It was hard for us to tell what was going on.
Like, are the blue enemy?
attacking from the top, or the red ones coming from the bottom left here.
If you weren't there for the beginning of the combat, it was unclear what exactly they were fighting about. On top of that, Our AIs weren't red and blue circles. Instead, they kind of looked like this.
So they were mostly in green, grays, and brown.
And they were in an environment that was predominantly green, gray, and brown. So instead of having this, we had something more akin to this. And it was impossible to just look at what was going on at a glance and see who was fighting who.
So the first thing we realized we needed to do was to separate the two sides.
And as soon as we did that, it became very obvious what was going on.
Here we see that the blues are on the left and the reds are on the right.
There might be environmental clues that will help us understand if the blues are defending or the reds are attacking or not.
And also, when we turn our guys all back to green, it's still fairly easy to distinguish the two sides from each other.
And on top of that, this separated sides also give the player more tactical options.
Because now, there's a front here between the two sides, and each side has a flank, or two flanks, and a rear.
And that means if the player happens upon this altercation in the world and decides to support one side over the other, the player can now attack his enemy in the rear or decide to shore up a weak flank and decide the player is supporting.
So we needed to start organizing.
And in our games, we organize our AIs into something called squads, which is just our name of our groups.
And all AIs are organized in a squad.
So when an AI spawns, we create a squad for that AI and put that AI on that squad.
Now, obviously, having a score with just one AI in isn't all that interesting.
There's not a whole lot of cooperation that's going to happen.
So what we do is that if two squads get close to each other, or so that we have two members of the squads, one from each squad that are within a certain distance, well then these squads will merge together. And now there are one squad and they will operate and cooperate as one.
So for instance, when we spawn our AIs, they tend to be spawned next to each other.
So any AI on the same team will naturally merge into a single squad.
Similarly, if squads break up, we also split up the squads into two or more squads.
And this means that we don't need to figure out which AIs are going to be cooperating with other AIs.
We know that because we have this automatic system, two AIs on the same team that are close enough to each other, they will always cooperate.
And while two AIs that are too far away from each other to effectively be cooperating, will not.
So squads in Days Gone are full AI entities, which means that they run our equivalent of a brain and they run actual behaviors.
The squad's behaviors are primarily concerned with assigning roles to the individual squad members.
And examples of roles is providing cover fire, being a grenadier, or flying to enemy.
Individual AIs' responsibility vis-a-vis the squad is to perform those roles to the best of their ability.
So roles in Days Gone are self-contained behaviors that are added to pre-determined slots in the AI's behavior hierarchy.
This has a number of benefits. First of all, because the roles are self-contained, that means that if we want to write a new role, we don't need to touch any of the existing roles.
Also, because we put the role in the AI's behavior hierarchy, that means that there are behaviors that AI has that are higher priority than the role.
So for instance, if the AI is attacked by a grenade, the AI has a behavior for trying to avoid that grenade.
And because that one will have a higher priority than roles, that means that no roles actually need to deal with the problem of being attacked by a grenade.
Also, we have other behaviors that just have lower priority than a role, and these behaviors will never be performed as long as we have a valid role assigned to us.
We also need to understand the tactical situation.
And for that, we have something called the front line.
The front line defines the spatial relationship between the squad and its enemies.
And it consists of a directional combat.
a width of the front, a neutral area, and an area controlled by the enemy.
So to calculate the direction of combat, we find the center of gravity of our squad.
And this is simply just the average position of our squad members.
And then we find the center of gravity of our enemies, and the direction of combat is simply the direction between those two points.
Next we had to figure out the width of the front.
And this is either the width that the enemy is presenting to us, so if the enemy is spread out, well then our front line is going to be wide so that we can come spread out and meet the enemy.
or a minimum width if the enemy is not that spread out, which is defined as the width that the squad would have if it's lined up abreast on the front line with a specific distance between them each other. Now we do this to make sure that there's enough room behind the front line for a squad to be able to fight effectively because the squad is not allowed to move outside the width of the front line.
As for the neutral area, the front line can be operated either in a close or a far mode.
In a close mode, the neutral area extends a fixed distance from the nearest enemy.
So this means that the neutral area will move with the enemy, and the score is not allowed to enter the neutral area, which means that if the enemy is pushing in on the score, well, that would push the score backwards.
But if the enemy moves away from the score, well, then the score can follow the enemy.
In FAR mode, which is used a lot less frequently, the neutral area extends all the way to the closest squad member.
And we use this in special scenarios when we want the squad to stay in place.
For instance, if the squad is set to guard a particular object or a place or something like that.
And because the neutral area extends all the way to the squad, it doesn't matter how far away the enemy moves.
The squad is not allowed to enter the neutral area, so it will stay in place and continue guarding whatever it's guarding.
And the enemy control area is simply the area that contains the enemy, plus a little bit of an additional depth behind. And the reason we add this additional depth is that, as we'll see later with flanking, it's good to have a little bit of depth to the enemy control area, because particularly if we were just fighting a single enemy, the enemy control area would otherwise have nearly no depth.
On the other side of the front line, that space is divided into lanes.
And we have one lane for each squad member.
And each squad member is assigned a lane in such a way as to minimize overhaul movement.
And the reason we have the lanes is to ensure that all the squad members are appropriately spread out along the front line and don't get into each other's way, and particularly each other's line of fire.
So when a squad member is assigned a lane, that squad member will attempt to perform its role inside that lane if at all possible. Now it's worth noting that lane assignment is not just a one-off because as the front line moves around, what is the optimal lane assignment can change, particularly if the front line rotates. This can change the optimal lane assignment quite drastically even with small rotations.
But we also need some motivation for our scores.
And for that, we have something we call confidence.
And confidence is a measure of how confident the AI is that it will win its current encounter.
So a confident AI thinks that it's likely on the winning side, while an unconfident AI suspects it's betting on the wrong horse.
Confidence is a major factor in decision making, both for individual AIs that have several behaviors that are fully or in part driven by confidence, but also for the squad which in combat is almost exclusively driven by confidence. Squads however do not have a confidence value of their own, instead they use the average confidence of the squad members rounded towards neutral.
Our confidence is not an analog value.
Instead, we use discrete levels.
And we do this because it's much easier for the player to read distinct state changes rather than a subtle increase or decrease in a particular behavior.
Our confidence levels are heroic, which is super confident.
The AI don't think anything will touch it.
Confident, the AI thinks it's on the winning side.
Neutral, we don't really know how things are going.
Weren't, were.
definitely not probably not winning this and panicked which is I'm out of here. So to calculate an AI's confidence we calculate the total strength of each side and when I say side I mean for the friendly side, it's the squad members and any other friendly units that are fighting on the squad side. And for the enemy side, similarly, all the perceived enemies that we are aware of. And when we calculate the total strength, what we do is we sum up all the individual strengths of each enemy or each friendly that we found.
and then we take the quotient between the friendly and the enemy side and compare that to threshold values to get our actual confidence level. So the way we calculate confidence or the strength of a single character is that we first get a starting strength and this starting strength is dependent on both the faction of the character whose strength we're calculating, but also the strength of the faction of the character viewing this faction. So we have something looking like this, a matrix of how various factions view each other. So for instance, we have certain factions like our militia faction that everyone kind of agrees that they are stronger than your average enemy and they are hence well respected. We also have something like our crazy Celtic faction called the Rippers who think they are just superior to everyone and we all know those kind of people and hence they think that everybody else's starting strength is pretty low.
Normally, though, most factions kind of agree on which faction is the stronger, which one is the weaker.
But we can have situations where both factions think the other one is superior, which will cause them both to have lower confidence and be more careful in combat. Or perhaps we could have two sides that think the other side is inferior, which will make them more aggressive and more confident fighting each other.
So once we have this starting strength, we modify this strength with various multipliers.
The most important multipliers is what kind of weapon the AI is carrying.
So for instance, a machine gun is much scarier than a pistol.
If the AI is armored or not, the health of the AI.
And here again, we have a distinct level.
So we only check if the AI is severely wounded or not.
And finally, the confidence of the AI.
So a confident AI will lift up its squad's confidence, while an unconfident AI will bring its squad down.
And panicked AI here has a specific effect and is a special case.
So if you're fighting an enemy squad and you see one of the squad members just freak out and run off, we want that squad to be close to breaking.
And in order to emphasize that...
We add panic AI strength not to the friendly side, but to the enemy side.
We also add the strength of casualties, so not just the strength of the living, to the total strength.
And the reason we do that is if we have a squad that manages to deal out a disproportionate number of casualties to the enemies, we want that squad to become extra confident and extra aggressive. And likewise, if your side is taking an unnecessarily or unreasonable number of casualties that will negatively affect your confidence.
Cacophony is something that degrades over time, and this is a timescale that is much longer than your typical combat encounter.
And the reason we do this is to make sure that if the player follows a squad for an extended period of time, well, that that squad isn't permanently elated or permanently depressed for something that happened way back then, maybe even before the player started following that squad.
So it turns out that confidence is a good predictor of outcome in our game.
A confident AI is very likely to be on the winning side, and an unconfident AI is very likely to be losing.
And this is great.
This is just like a receipt that what we're doing with confidence is what we want to.
It's working.
But when it comes to the player, we want something more.
Because...
We want to use confidence in a way to encourage the player to play with a certain play style.
And the way this works is a confident AI, as we will see, will become more aggressive, while an unconfident AI becomes more passive.
So if we're noticing that the player is not really engaging with the AI, instead trying to hide behind a car, far away, and take potshots, well, then we start increasing the confidence of the AI in order to make the AI more aggressive and force the player to do something else.
Well, if the player is himself being aggressive and doing flanking and invalidating cover, going to melee and just using all the tools available to the player, well then we start decreasing the confidence of the AI, which will make the AI a little bit less aggressive and this will give the player a better chance of pulling these behaviors off and hopefully make the player more likely to try this in the future.
So now that we have both the confidence to tell us how we're feeling about things and the front line to tell us about how things are looking for us, where everyone are, well, we're ready to create some behaviors.
So in combat, the squad can either be forming up in normal combat, retreating, or pushing the attack.
Forming up happens when.
one or more squad members are out of position, and this is either the squad member is too far forward, so the squad member is in the neutral area or maybe in the enemy control area, too far to the side, so the squad member is outside the width of the front line, or too far behind, so the squad member is outside its weapons effective range.
this happen, any squad member that's already in position will just hold that position and engage the enemy to try to keep the enemy occupied. AIs that are far away from the front line and the enemy will just run in a straight line towards the front line to try and get into position. However, if we are close enough to the enemy that that is not safe, the AI will instead move from cover to cover until it makes it back to a good position.
Once everyone is there, we are ready to go back to normal combat.
So during normal combat, which happens when confidence is neutral, we're focusing on the basics.
So we're trying to maintain good spacing within the squad, which is what the lanes are there for.
We make sure we have a clear direction of combat, which is what the front line gives us.
And we also make sure that our sides are well separated, which is what the neutral area is there to do.
And this creates a very good-looking and interesting dynamic combat.
Because as the squad and the enemy moves, the front line will move and rotate with that.
And that will cause the squad to counter any enemy moves, which look quite impressive when you look at it.
However, if the AI's confidence is low, the AI will go and try to retreat.
And when retreating...
The best direction to retreat in is obviously away from the enemy, and that happens to be the exact opposite of the direction of combat in the front line.
So, when we're retreating, we select half of the squad members to retreat, and we prioritize those squad members that have no cover, but otherwise we take those squad members that are the closest to the front line.
Any AI that is not selected to retreat will provide cover fire for the retreating AIs.
The retreating AIs only move a short distance back because when you're retreating you're at your most vulnerable because you have to turn your back on your enemy.
And then this behavior repeats.
And the interesting thing is that because the AIs that were closer to the front line now move back, in the next iteration of the retreating, the AIs that were providing cover and fire will probably be the ones retreating, while the ones that were treated previously now provides cover fire.
So what we get is two groups of AIs that are changing up between retreating and providing cover and fire.
Thank you.
creates a very nice looking leapfrogging effect.
The score will continue to retreat until either it's blocked, it managed to break contact with the enemy, or for whatever reason, it managed to regain its confidence.
If the score has high confidence on the other hand, the AI will go on the offensive and try to press the attack.
First thing the AI will do is try to move closer to the enemy.
And this is a behavior that is very similar to retreat behavior, only it goes in reverse.
So the AS that are first for the front line are selected to move forward, while the remaining AS will provide cover fire.
And we continue doing this until the squad gets close enough to the enemy, at which point we will try to flank the enemy.
Flankers are picked among the squad members as those that are already in a good flanking position, which means that they are either on the extreme left or right of the front line.
So when we're flanking, the flanker will try and find a position in an area perpendicular to the enemy control area. And this is where it really comes in handy to have a little bit more depth to the enemy control area.
And the reason for that is that the squad member has more opportunities to find a good position to attack from in here and also if you're a little bit behind the enemy.
that makes for a better flanking position than if you're perfectly in alignment with them.
As some of you may have realized by now, the quality of the front line is really key to the quality of our behavior. So if our front line is bad, so is our behavior.
Particularly the front line determines if an AI's position is valid.
So repeated small changes in the front line can cause the AI's position to be invalidated over and over again.
And obviously this causes the same kind of problem that we talked about before, moving instead of shooting.
And also it makes the AI look very indecisive, which generally speaking does not make for a good-looking AI.
So what we realized was that there are a number of things that caused the frontline to move when it didn't need to. So we spent a fair bit of effort finding and addressing a lot of these.
One of the first things we realized was that certain AI archetypes just did not play very well with the frontline.
The first such one was our snipers, who, as their name implies, are snipers and want to engage their enemy at extreme distances.
And they live in these little areas called sniper nests that they are not allowed to leave.
So if they would be part of a squad, then because the sniper can't move with the squad, the squad's center of gravity would be pulled towards the sniper all the time, and the squad would not be able to properly move with its enemy.
And hence, we just don't add snipers to our squads.
On the other extreme, we have an archetype we call rushes.
And the rushes are armed with shotguns that have very short range or melee weapons.
So their tactics is to run straight up to the enemy and attack at really close distance.
Obviously, this means that they run straight through the neutral area and well into the enemy controlled area.
And this would cause problems with our frontline calculations, both for friendly and enemy rushes.
And again, we just ignore them and don't add them to the frontline calculation.
And the squad doesn't need to deal with rushes specifically anyway, because we have high priority behaviors that will kick in if a rusher gets really close to an AI.
DayZGon is, as I mentioned, a cover shooter, which means that almost all our combat happens in or around cover.
The way AI uses cover in DayZGon is that we have something called a cover slot, which gives the position where the AI is supposed to go in order to use the cover, and it also has some additional information on the details of how to use that cover.
But when the AI gets to the cover slot, its position doesn't stay right on top of the slot.
There's a number of behaviors and animations that cause the AI to move.
For instance, our reload animation has the AI take a step back away from its cover to make sure that its weapon doesn't intersect with the cover when it's playing the reload animation.
And even more extreme.
When attacking an enemy from cover, particularly high cover, the AI may need to step out of that cover in order to get a clear line of sight to the enemy.
And this movement can be as far as two meters.
So the AI's moving around while in cover caused a lot of jitter in the front line.
And what we realized was that it didn't really matter exactly where the AI was as long as it was using a cover slot.
So what we ended up doing was using the position of the AI's cover slot rather than the AI whenever the AI was in cover.
And this had settled down the front line quite a bit.
We also calculate the front line as a sliding window average.
So that means that its position and direction is calculated as the average in a certain time window.
And this moves out the movement of the front line and leaves us with the general trend while removing a lot of noise.
But using the average over time makes the AI kind of slow to react to big changes.
And so what we do is that if.
the change becomes significant, then they are adopted at a higher rate than small changes.
And if the change is large enough, well then we just take that new position and rotation and start working from there.
And this is to deal with situations where we might be fighting a small group of enemies over here, and then a massive enemy force show up from the other side, and we need to pivot to deal with them.
Flankers are great.
That's one of the coolest behaviors that AI does in combat.
But they also cause a bit of problem.
So if we were to have flankers and treat them as normal members of the squad during combat, that would be an issue.
Because as the flanker flanks, the center of gravity would have to move with the flanker.
And when the center of gravity moves, that means that the front line moves.
And as you can see in this example, when the front flank moves like this, the flanker is no longer in a valid flanking position.
And even worse, the two AIs that stayed behind to support that flanker's flanking move are now out of position, and the score would have to go back to forming up.
So fortunately for us, identifying friendly flankers is easy.
It's just the people that the squad has told to be a flanker and who has started performing the flanking role.
So we don't need to add them to the center of gravity.
However, if we do that, that also comes with a bit of a problem. So again, if the flanker flanks and the flanker no longer contributes to the center of gravity? Well, the center of gravity is going to move again, which will cause the front line to move. And again, the flanker's position is now invalid.
Admittedly, this is not quite as bad as the previous example, but it's still not good.
So what we do is that a flanker on the flank leaves a ghost behind in the front line. Now the ghost is just the position the flanker had before the flanker started flanking.
So whenever we now need to calculate the squads position and center of gravity, we use the ghost position rather than that of the flanker, and this greatly stabilizes the front line.
The ghost is removed if the front line moves far enough.
And this is because the ghost cannot move, it's just a position.
And the whole point of adding the ghost is to stabilize the front line when the flanker flanks.
And if the front line needs to move, well, then there's no point in trying to stabilize the front line, because if it needs to move, it should move.
The ghost is also removed if the flanker rejoins the front line, that is, it's no longer a flanker, or the flanker is no longer part of the squad for whatever reason.
Enemy flankers are a lot more complicated.
And the reason for this is that our front line may not necessarily be the opposite of the enemy's front line.
So we may not have a mirror image front line.
First of all, we might be fighting multiple enemy squads, in which case their front lines will look very different from our front line.
or the enemy might be fighting our squad and another friendly squad.
So then, in that case, the enemy's frontline will be different.
And also, there's nothing guaranteeing that there's only two sides involved in a particular encounter.
There may be three or more factions battling it out at the same time.
And finally, the flanker, or the potential flanker, could be the player, and the player doesn't have a score that lets the player know whether the player is assigned a flanking role or not.
So the way we deal with enemy flankers and...
enemy-centric gravity calculation is a little bit more complicated compared to the friendly ones.
So first we identify all clusters of enemies and this is just a simple clustering algorithm that runs on distances. Once we have these clusters we find the largest such cluster and then add any cluster that's within a given faction of the size of that largest cluster.
This allows us to calculate a tentative front line, and then we can add any cluster that is covered by that front line, which then allows us to calculate the final front line.
This may leave us with one or more clusters that are not covered by the front line, and these are our flankers.
So, we like flanking, as I said, but the tactically sound option for a squad that is being flanked is to try to do something about it.
You should really not just stay being flanked, but that wouldn't be fun because that would mean that the flanking would pretty much just fail because the enemy would move every time.
So what we do is we let the flanker flank us for a given amount of time.
So whenever we see a flanker, then we give the flanker a timestamp.
and as long as that timestamp hasn't expired, we let the flanker be, but as soon as it expires, then the flanker is put back on the center of gravity calculation and with the rest of the enemies, and this will cause the front line to move, and that will cause in turn the score to and deal with the hit.
And if that flanker wants to continue flanking us, well that flanker will have to make another flanking move.
Now another thing we noticed was that the player is able to move a lot more than a simple AI.
And part of that is that the AI doesn't have the weight for all its friends to be ready and in position to make a move like AI is in the score.
But also the player has this sprinting ability that makes the player by far the fastest human in the entire game.
And we would see the player run in wide circles around the AI, which would cause the AI to perpetually have to rearrange itself to meet the player's new position.
And we did a lot of work on trying to make the AI be faster at repositioning.
But all the things that we did were simply just not enough.
There was not even close.
What we eventually realized was that when the player is running fast like this, the player has no chance of hitting anything with his gun.
But the AI, on the other hand, doesn't have a big problem hitting moving targets.
So what we do is that when we identify that the player is starting to move at a very high speed, the AI just waits for the player to settle down.
And the player will settle down sooner or later, or rather sooner than later.
because the AI will start building accuracy on the player relatively quickly and the player will be forced to get into cover or close into melee distance.
And when that happens, that gives us a little bit of a pause that allows the AI to rearrange itself and meet the player at the player's new position.
Now so far the front line that we use is only looking at the enemy's position relative to our own position, but it doesn't have any environmental information. And the thing is environmental information and environmental analysis is quite a lot of work.
We're a bit lazy, so we realized that we were very fortunate that we knew some people who had an intimate knowledge of the environment in which the AI was going to operate in.
And that's our level designers.
So our level designers can provide context and identify features and defensive opportunities within our levels by adding a number of markups.
The most important ones of these are our defense zones.
our home areas and our fortification zones.
Defense zones are large areas in which the AI operates and you can kind of think of them as the AI's sort of territory.
Each score is bound to its defense zone with a given strength.
And all but the strongest binding strength allows the AI to temporarily leave its defense zone.
And the reason why we want the AI to be able to leave the defense zone is that if you have arbitrary invisible lines in the world, that has a tendency to create weird behavioral artifacts. And on the team we call that the Mime in a Box problem.
So...
The way we ensure that the AI doesn't just permanently want us off from the defense zone is that we use confidence.
So a confidence call is allowed to press the attack and go outside of its defense zone if the enemy was outside the defense zone.
As the squad leaves the defense zone, it starts including a confidence penalty.
And as the squad moves further out, the squad's confidence will eventually drop to the point of neutral, which will force the squad to stop. And the squad will then hold its position and eventually the squad's confidence will drop even further and therefore cause the squad to move back to its defense zone.
Once back in this defense zone, the score will slowly recover its confidence.
And the reason why we do this slowly rather than immediately recover the confidence is that if the score's real confidence was, say, confident, and we immediately gave back its full confidence when it came back in the defense zone, the score would immediately leave again, and we don't want that kind of flip-flopping behavior.
The home area can be used in conjunction with the defense zone or on its own.
And this is a much smaller area that marks up where the AI is anchored.
So this could be the AI's base or camp or maybe a resources guarding.
And when a squad is assigned to a home area, a number of things happen.
First of all, the squad will always retreat towards its home area.
And once it reaches the home area, it will never retreat any further, so effectively, it makes a last stand inside its home area.
And if an enemy manages to get in between the squad and its home area, the squad gets really upset and is allowed to press its attack, even if neutral.
So I said that the score always retreats to the home area, but if we take two arbitrary points in the world representing two central gravities for a score or enemy and with the corresponding front line, it's very unlikely that the retreat direction will be towards the home area.
So the way we deal with this is that we bias the score's center of gravity towards the home area's position.
And the closer the squirt gets to the home area, the stronger the home area's influence is, until, if the squirt gets close enough, the home area's position completely overrides that of the squirt's center of gravity.
And regardless of how far away the squirt is from the home area, we ensure that the front line is never rotated 90 degrees or more.
And that way, always, when the squirt retreats, it will get closer to the home area.
So the score also needs to take advantage of strong points and short points and other good defensive opportunities.
And for that, our level designers place fortification zones.
A fortification zone consists of an area to fight from, and a kill zone in which we're going to attack.
So the area to fight from is where we're defending from, and the kill zone is where our enemy is coming.
And it's worth noting that the kill zone is a frustum, because generally speaking, if you're defending from position, you will be defending in like a frustum in front of you.
And that the kill zone isn't necessarily attached to the area to fight from.
And for instance, this is useful if you're on an elevated position and defending the ground below, while then you want to kill someone down below, rather than up where your area to fight from is.
And also, if you're in a fortification and your enemy managed to get right up to that fortification, that probably means that your fortification is about to be overrun and you should have abandoned it a little bit earlier.
So the way the kill zone works, or the fortification zone works, is that normally it doesn't really do much for the AI, but if the AI's target moves into the kill zone, then the fortification zone becomes active. And as soon as that happens, the AI will move into the area to fight from and attack the enemy from there.
So the way this all comes together is if we look at this example AI stronghold.
So this is a good stronghold because it is surrounded by a bunch of natural obstacles.
It has this nice little house in the middle that the AI can sleep in and be safe from the elements.
It has two entrances that the AI will have to guard against intrusion.
And of course, since we're a cover fighter, there's plenty of cover around.
First, we place a defense zone, and you can see that the defense zone is covering the entire stronghold, and that it is an irregular shape.
Also, the defense zone extends outside the entrances for a bit, and this is to allow us to be able to gauge someone who's just hiding around the corner.
We also add a home area.
And we put that in the house.
So this is what the AI is really concerned about.
And this is where they feel safe.
And finally, we identify a couple of good defensive opportunities and add some fortification zones there.
So if an AI or an enemy were to attack from the south, well, first, they would go into the kill zone of this fortification zone, which would activate this fortification zone.
Now most fortification zones have a limit to how many AIs can be and fight in that fortification zone.
And this is generally just based on the size of the area to fight from.
So any AI that's assigned to a fortification zone that the fortification zone can accommodate will immediately move to the area to fight from when the enemy comes in here.
Remaining AIs will be fighting as a squad using cover and the front line just like normal.
If the enemy manages to push through the kill zone, well then the AI is assigned to the kill zone or the fortification zone, will leave that fortification zone because it's no longer valid and rejoin the rest of the squad and fight like normal.
As the enemy pushes further in, the squirrel will be retreating towards the home area.
And if the enemy pushes the squirrel all the way back, the squirrel will get into that house and make a last stand there.
Now, this solution worked really well for us.
But it's worth noting that the front line is inherently two-dimensional.
It works on a slope, so you can pitch it and rotate it, but you can't twist it or turn it.
So a worst-case scenario would be fighting on a spiral staircase.
Fortunately for us, there are very few of those in our game.
We also have special behaviors for fighting in and around buildings.
And the reason for that is the front line does quite a good job to describe what's important in a constrained space and where you want to be.
In those scenarios, it's much more important to look at openings between the different rooms, but it's windows and doors.
And for that, we have special behaviors for fighting from room to room, from inside a building against enemies that are outside, and also if we're outside a building and try to fight away inside a building.
The frontline is also not really good at fighting animals and freakers. It's primarily there for our human opponents that are ranged opponents.
But even when fighting the wildlife and the freakers, the front line gives us a good start to organize and position our squad, even if other high-priority behaviors will take over when those enemies close in to the distance.
Finally, it's kind of interesting to note that the player sort of intuitively respects the front line.
The player may not know exactly where the neutral area is or what the width of the front line is, but when the AI is well lined up along the front line, it becomes obvious to the player that this is the area where the AI is in control and this is over here where I am, so I shouldn't get too close if I'm in range combat.
and they kind of fight like our AIs in many ways. And this is all I have on this topic.
I would like to thank the rest of the Dayskarns AI team who contribute a lot of the behavior for our AI, as well as to the people at Benstudio who helped me prepare this presentation.
Speaking of Ben Studio, Ben is a great place to live, and Ben Studio is a great place to work.
We're always looking for new talent, and you should check us out at our homepage to see if there's something there for you.
So I will be in the live Q&A session after this talk finished streaming.
Thank you all for watching, and have a great rest of your GDC.
