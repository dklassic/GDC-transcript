A quick intro.
My name is Ian Caffino.
I am one of the co-founders of Afterburner Studios, and on Dreamscaper, I was responsible for design, animation, VFX and UI, among the hundred other things that you have to deal with as an indie.
So I've been in games for about 10 years now.
Before that, I had a background in graphic design, motion graphics, and film.
I shipped AAA titles, a AA title, and now a successful combat-focused indie game.
So how did I get here?
Almost four years ago now, back in the summer of 2018, I took a big gamble.
I left my job in more traditional development and started a studio with two friends, Paul Svoboda and Robert Taylor.
This is us at DreamHack in 2019.
So fast forward and after three years of development and many iterative releases, we launched Dreamscaper 1.0 on August 5th, 2021 on both PC and Switch.
So you may have also seen it pop up last month on Xbox and Game Pass, which is really exciting for us.
Since launch, we've had over a quarter of a million players, which sounds insane to say.
And today it sits at a 91% positive rating on Steam with over 1,800 reviews, which is very cool.
So quickly, for those who are less familiar with the game, Dreamscaper is an action roguelike with a waking, dreaming gameplay cycle.
By day, you experience Cassidy's waking life, exploring Redhaven, meeting new people, forming relationships.
By night, you face off against Cassidy's nightmares in a roguelike dream loop.
So what you're seeing here is a snippet of combat, something you might encounter.
It's typical in the middle of a run.
I wanted to make sure to leave it unbroken so you guys can get a sense of what it's like to kind of clear a room of enemies and the flow and pacing of combat.
So this talk is going to be broken up into three sections, design, feel, and keys to success.
I want this to be an actionable crash course for everyone.
So here's what I hope you get out of the talk.
In design, an understanding of some of the key areas to focus on when making a combat system as a developer with limited resources.
In feel, some of the best practices for creating visceral and satisfying combat that helped us refine our game feel.
And finally, in keys to success, personal takeaways that I had that might help maximize efficiency on a small team.
All right, let's jump in.
I'd like to start by going over some design considerations that can help establish a solid foundation for you to build your combat system from.
First up is establishing strong pillars.
So, as you're all familiar with, it's incredibly important to define what your player experience will feel like and translate that into an actionable target to aim for.
So I want to focus on how you can create the most effective pillars for combat.
So find the right level of specificity.
The player should feel powerful is a pretty traditional goal.
So how can you adapt that and evolve it for the player experience that you want?
When you're creating your pillars, drill down one level of specificity.
So the player should feel powerful can become, the player should feel highly skilled, or the player should feel godlike.
The player should feel like an assassin or a commander.
So you can already see how under the umbrella of power fantasy, there's a massive area to work with it.
Both a commander and an assassin are very powerful figures, but they exhibit that power in very different ways.
So a pillar that is too general will create misalignment, as a target area will be too wide.
Inversely, a pillar that is too specific won't leave a lot of room for flexibility.
So you have to decide what makes the most sense for your team and your goals so you can nail that appropriate target area.
So for Dreamscaper, I knew I wanted to create a combat system that had to be approached strategically, but allowed for a lot of flexibility and a high skill cap.
Due to its roguelike nature, it was also important that the systems allowed for variety and replayability.
So I'm gonna list out the pillars with a brief description of each, and we'll come back to these throughout the talk to see how they helped guide our development.
First and foremost is purposeful action.
It's important that the player feel that their actions have consequences.
Players need to understand their strategic options and tactically assess each situation on the fly to take deliberate action.
Improvisational.
Combat should feel fluid and allow room for player freedom.
Multiple approaches to a situation can work and adaptation on the fly is encouraged.
Tough, but fair.
Players need to feel that their fate is in their hands, more so than the gods of roguelike RNG.
This means careful consideration of how enemies behave, balancing and immediately responsive player actions that allow room for correction when mistakes are made.
Dynamic interactions.
To complement our structural choice of a roguelike, combat should feel highly dynamic.
Many elements and systems need to overlap to create unique situations and solutions.
This is where we can bring replayability in at the core level.
And then strong feedback.
Actions should have weight through sound, visual effects, and audio, and animation.
Sorry, sound, visual effects, and animation.
Players should feel, know how they impacted the world, and enjoy the stimuli, which is the classic, you know, make it feel good.
So as you can see, these pillars were quite high level, but they had enough specificity so we could align around what we wanted to achieve.
It wasn't necessary for a pillar to be specifically about the power fantasy because that would come naturally while achieving these other pillars.
So, to the meat of it, your player's options.
When we talk about this, generally we talk in terms of verbs.
What can your player do?
Run, jump, shoot, swim.
So, these actions will become the building blocks for your combat system.
Options create depth, but also complexity.
It's important to be mindful of your player's cognitive load.
The more options a player has at a given time, the more mental juggling they'll have to do.
Because our core pillars included improvisational and dynamic interactions, we had to make sure to support enough options that allowed for a high level of depth and flexibility.
With that, of course, comes complexity.
So that's why you should always consider who your core audience is.
What level of complexity is appropriate for them?
For us, we were targeting a mid to hardcore market.
We knew that these types of players generally had familiarity with both roguelike systems and melee combat systems.
So we knew that we could push complexity fairly safely without overwhelming our core audience.
If you're avoiding complexity, can you achieve depth through further exploration of fewer options?
In our case, we achieved more depth in combat with a high variety of swappable weapons and abilities that would interact with each other.
This fulfilled our goal of creating dynamic interactions, while allowing players to become experts of the fundamentals of the game through experimentation with different loadouts.
For example, a player always had their melee attack combo and an alternative attack that set enemies into one of three states, which we'll talk about.
That meant that players always, they knew they had those options regardless of which weapon they had.
So adaptation to new weapons gave the system a feeling of depth with very little added complexity, which was important considering how many fundamental options the player has in Dreamscaper.
So consider your pillars.
How do these options move you towards your design target?
In Dreamscaper, we had a lot of attack options, like I mentioned.
Two types of melee attacks, ranged attack, two magic attacks.
This spread was important to make sure the player felt they had flexibility in how they approached combat.
Additionally, each of these attacks, leveraged layered systems we're gonna talk about, that created satisfying interactions between each other.
Finally, with these options, players felt that they had enough of an arsenal that they could take thought-out actions at any given moment and they didn't have to approach combat the same way each time.
So how do your pillars inform how the option is implemented?
As an example, we designed our dodge to have immediate invincibility and be fairly generous in length.
It felt more improvisational and it felt more fair if players could break out of actions and save themselves from a tough situation.
And finally, consider your scope.
Can you achieve your quality bar for this option, given the resources you have?
Are you trying to support too many options, given the resources you have?
As another example, we set a stake in the ground early on that jumping wouldn't be one of our verbs.
For our team, jumping in combat would have greatly blown scope.
Now all those previous actions, like your melee attack, your alt attack, your ranged attack, your magic attack, could potentially be accessible while jumping.
So outside of combat, there were also, you know, traversal considerations and considerations on art design and engineering.
So at the end of the day, jumping didn't move us in a meaningful way towards our pillars, as at least as much as some of the other options that we were exploring.
So ultimately, player options will make up that core of your combat system.
So plan to spend some time iterating and refining on the basics of your system before starting to add additional layers.
So let's talk about camera and framing, because it's a critical part of the combat experience that when done right is mostly undetectable, but when done wrong, it can have a really huge impact on player experience.
And it also happens to be one of the very first things that players will pick up on when they're playing the game.
So camera is a huge driver for genre.
Make sure to think about what that communicates to your player when you think of real-time strategy, what game comes to mind.
your player will also carry those notions of genre convention into the game with them.
As an example from Dreamscaper, because our camera is relatively static, far back and top down, players expected a certain speed and snappiness to the combat that mirrored other similarly framed games.
distance, interactivity, and scope.
So a player-controlled closer camera, which is very common in a third-person action game, will add more weight and impact, but it will require much higher fidelity.
The camera is closer to the action.
Also, it's important to note that they require a higher degree of iteration.
Players hate nothing more than having to wrangle a frustrating camera that just won't frame action properly.
So farther cameras, on the other hand, reduce the weight and impact, and they feel less cinematic, but the macro view provides the player with more information.
Additionally, if a player is not controlling the camera, now there's a ton of variables that you just don't have to deal with.
Equally important is that a further fixed camera removes the need for fidelity as well, since more fine details will get lost at a further distance.
So as you're thinking about what camera might be right for your pillars, also think about how the camera will impact scope.
Okay, now that it's said, there are a ton of examples that do the complete opposite of it, and very successfully.
But in general, the closer your camera is and the more interactive your camera is, the higher the scope is going to be.
So in Dreamscaper, like I was saying, we used a fixed far camera during combat.
Interestingly, this reduced the impact of player feedback, which went against one of our goals.
But going into the project, we knew that we had to cut scope in some areas, and using a distant fixed camera would be much more achievable for our team.
To mitigate that, we arrived at a hybrid solution.
We put a lot of time into the dynamic framing of the player and enemies.
This was important to both the pillars, purposeful action, tough but fair.
Players had an almost complete view of the battlefield at all times, which gave them the necessary information that they needed to make an informed combat decision.
When players had a cluster of enemies around them, the camera could pull in to emphasize the immediacy of combat.
So ultimately, we had to move away from one of our goals in order to stay within scope.
But it moved us closer towards two of our other pillars.
This happened a lot in the project.
The reality is not every decision you make is going to move you towards all your goals at once.
So we ended up focusing instead on other ways that we could achieve our strong feedback pillar, which we'll discuss in the field section.
So I'd also like to talk about how we stacked systems to create richer feeling combat.
One thing we found effective was giving ourselves the design space to let systems grow organically over the project.
This working style allowed for three things.
It kept scope low.
So many of our interlinking systems were designed and implemented at various stages of the project.
We didn't have to have all the answers right from the outset.
Because we didn't have to do everything at once, we created contained portions of work that felt manageable over the course of development.
Features could be more easily analyzed as additive pieces rather than a component of a whole that would suffer if stripped away.
Iterative testing, so building in this way allowed us to fully vet combat earlier with continuous user feedback.
So there was a much lower risk in losing a lot of time to a feature that we had kind of worked in the dark on, only to find out that it just wasn't working and needed to be cut.
And finally, it allowed ideas to soak.
So having time to sit with the current system and re-evaluate before committing to a new layer allowed us to hone in on effective ideas simply because we had so much exposure to the already working pieces.
So how do you add depth with less complexity?
As an example, in the middle of the project, we had a very solid foundation in place.
We had released into early access, and we had a community of players who were providing us with feedback and data.
One thing that we felt that we hadn't delivered on, though, was that pillar of dynamic interactions.
We had some combat systems in place, such as an item modifier system and a status effect system, but they felt incomplete.
At the same time, we were also mindful of overloading our players with too many options.
So our solution was to layer on an elemental system, assigning elements to items, and that elemental system linked into the status effect system.
So fire did damage over time, ice froze enemies, water slowed enemies down, pretty standard stuff.
But we elevated that, now that we had these pieces speaking to each other, by encouraging the mixing of elemental attacks on the same enemy by rewarding the player with an automatic critical hit that did double damage.
So then we went and built on that system by creating a set of passive items that would boost things like your multiplier to critical hits or the strength of elemental status effects.
So it's important to note, though, that these systems that we built, like you're seeing this at the end of the project, this was done over the course of many, many, many months.
The result was higher player engagement.
The feedback we received from our community was very positive, and it added a multiplicative layer of depth to the game.
without actually modifying the underlying options.
Each option just had added ways of interacting with each other.
And best of all, for a team of our size, it was really manageable.
We didn't have to balloon scope going super wide on content creation.
We could focus on systems that would leverage what we already had.
So we would continue to use this approach in all areas of the game.
We layered on a fairly robust meta progression system towards the end of development that greatly improved the stickiness of the game, which was reflected in a large increase in average play time.
That wasn't even something really we were considering doing at the start of the project or even in the middle of project.
It really came in at the end, but we gave ourselves that flexibility in our early designs to add those layers down the road.
So enemies.
There is far more than enough to say on enemy design.
That could be its own talk by much more qualified people.
So I'm going to focus instead on a high impact area that is often overlooked in indie titles that has a major effect on your overall design.
And that is hit reactions, enemy states.
So why design elaborate enemy states and devote resources to creating hit reactions?
Aside from increasing interactivity, as the player has more ways to impact the enemy, they also provide really critical utility during combat.
How you want your enemies to respond to your player's input becomes the building blocks for the structure and the pacing of combat.
So let's walk through some enemy hit states we use in Dreamscaper.
So first up, stun and stagger.
Stun is your default state.
It has a weaker hit that will temporarily set the enemy off balance.
Stagger being a heightened version of that.
It helps with target prioritization.
Enemies take longer to recover from hits.
And it also helps sell the weight, the difference in weight between different strikes.
Flyback is a very strong reaction that sells big impact.
This is a really important state for combat pacing.
Ending chains with flyback puts space between the player and the enemy, which resets the offensive situation.
It forces them to re-approach it from another angle.
Pop-up. So pop-up, aside from demonstrating the vertical strength of a hit, it also sets the enemy into a juggle state.
This is really great to encourage players to take offensive action.
If you're finding your player is playing too defensively, something like this is great because it encourages them to press their advantage when they know that the enemy is not going to be able to react.
Knockdown, a state that doesn't allow the same leeway with juggling, and it doesn't put the enemy as far away, so there's quicker counterattacks and follow-ups that you can do.
It also helps with shifting focus between enemies, and of course it emphasizes the downward strength of a hit.
So as another example of layering systems, after we created our base hit states, we added additional utility to key hit states.
With flyback, enemies in the way would take damage when the hit enemy would collide with them and push them out of the way.
And when the hit enemy would collide with the wall, they would also take additional damage and rebound.
For pop-up, each hit that juggled the enemy would increase the damage that they received when they made contact with the ground.
And then finally for knockdown, enemies in the surrounding area would receive splash damage and they get pushed aside.
So all this added extra utility and depth to our hit reacting system without adding too much more complexity for the player.
In reality, this can be a large amount of work, but the payoff for the player is really high.
For us, despite our constraints on animation, I was the sole animator on the project and on engineering, Rob was our sole engineer, we made time to invest in hit reactions.
They were critical to almost all of our pillars as they affected each of them in different ways.
So with that in mind, let's go through some high-level considerations for your states.
So how does the enemy change state based on my attacks?
Does one reaction contain multiple states?
Do any states loop?
If an enemy is hit within a specific state, what happens?
So you work through the state machine and figure out how these interactions will work for your system.
This can add a lot of work on gameplay and gameplay programming and animation.
So states can be as simple as like a light hit or a heavy hit.
The reason we ended up with so many states in Dreamscaper is to allow for player improvisation.
And of course, because it creates that really visceral feedback that we wanted.
Can my player interrupt actions? When and why?
How long does it take for an enemy to recover from a light attack, a heavy attack, special attack?
Recovery timings will be largely driven by the speed and pacing of your combat.
So should my player be able to stunlock an enemy?
This control via enemy hit states was really important for Dreamscaper as it meant players had to adapt on the fly and properly stun and stagger enemies to deal with larger groups.
This greatly assisted with target prioritization, which encouraged purposeful player action because players had to learn how to manage the enemies around them.
And then finally for challenge, how are these state considerations augmented by increased challenge?
Do different enemies have different responses based on enemy power or game progression or player power?
In Dreamscaper, we used different hit states to challenge the player.
Many early game enemies could be stunned indefinitely as the player progressed.
Later enemies could only be staggered, and eventually they might be immune to a specific hit state altogether.
So hit reactions not only sell the impact of a hit, but they also add a functional layer of depth to your combat system.
In the next section, I'm gonna talk more about what you can do to maximize that feeling of a hit reaction.
Speaking of which, this section is gonna go over a variety of areas that we focused on in Dreamscaper to make sure combat was as satisfying as possible for our players.
first of which being responsiveness.
So the shortest time from a player's input to the corresponding effect on screen will feel the most responsive.
That said, there is a balancing act between fidelity of action and immediacy of response.
For a title like ours with limited resources, we prioritized snappy game feel over fidelity.
Input latency, that's another thing that's important to be mindful of.
We often take it for granted.
On Switch, our engineer Rob found that there was native input latency due to how UE4's game thread would sync with the Trender thread.
Please don't ask me about that. That's all I know about that so far.
So this resulted in fairly high input latency, about 130 milliseconds, which is like 8 frames at 60 FPS. It's a lot.
So Rob cut the input latency almost in half by using a low latency frame syncing option.
So for things like dodging and parrying, that split second reaction is really, really critical to the player.
So we went as far as increasing the input window on parrying on Switch so it would feel on par with PC in terms of responsiveness.
We were less concerned about having a mechanical difference between the two platforms as much as we were concerned with them both feeling appropriate, feeling right for the player.
Blend times for animations.
So shorter blend times will feel more responsive, especially with attacks.
Longer blend times need higher fidelity animations to sell the weight of the blend.
And blend times that are too long risk feeling sluggish and unresponsive.
So for Dreamscaper, we go as far as making attack startup blends instant.
but we have anticipation, follow-through, and recovery to give actions weight.
In the example up here, you can see we're jumping right into the anticipation pose of the attack.
This will help it feel responsive while still allowing for those starter frames to play through, allowing you to balance and make sure the attack feels believable.
Locomotion response, longer acceleration periods will lend more weight to your movement, but feel less responsive.
As a lower fidelity title, our movement has almost no acceleration period.
We wanted it to feel as responsive as possible, and we really didn't want to overcommit on animation for things like weight shifting or changes in direction.
and we favored player input.
We let players interrupt actions.
So we came up with a hierarchy of inputs to determine how interrupts should work.
Dodge and block were critical to have very low response time and high interrupt capability.
So we allow players to break out of almost any action with a defensive response.
This keeps combat feeling tough but fair because players have the maximum control of their defensive options in order to react to challenges and improvise as needed.
On the flip side, attacks had both startup and recovery, so players still had to think purposefully about the offensive actions that they were taking.
So it wouldn't be a talk about combat without talking about animation, because animation and feel are so tightly coupled together.
So I'm gonna go through some best practices for us, first of which being leveraging the principles of animation.
Quickly, if you're not familiar with it, there's a book that was written in the 80s by some Disney animators that cataloged work from the 30s up, kind of codifying what these principles of animation would be for animators.
So as a sole animator, I didn't have the time to create very high fidelity animation.
So instead I used my understanding of animation principles to try to create a higher quality feeling without the scope complexity of the fidelity.
I'm going to run through this at a very, very high level and touch on elements that I felt were most important to Dreamscaper's asset creation.
First up is anticipation and follow through.
They're two of the most important principles to convey weight, which will make your combat feel really meaty.
This will help actions feel like they have intuitive timing, as they will follow more realistic physics.
You can see the example here is really exaggerated, but it's that exaggeration that actually gives the animation the feeling of believability and of strength.
Secondary and overlapping action.
We use secondary and overlapping action to sell realism and fidelity.
Animations that properly utilize overlapping action will feel higher quality.
The human eye is really, really good at intuitively picking up discrepancies in natural movement.
And one of the most egregious things is having too many elements that are completely in sync with each other.
It feels unnatural and stiff and robotic.
One simple thing you can do to help increase the fidelity of animation is adding trailing elements to the character.
So things like scarves, claws, hair are really effective for this.
We added a kind of a trailing floaty scarf to our main character Cassidy.
It gave a nice sense of secondary motion and we simmed it so it was very little added scope for us.
Slow in and slow out.
Slow in and out is a principle that increases the believability of animations by providing more realistic momentum and inertia.
Remember going back to us being highly sensitive to motion, easy in and out is important to convey a believable weight of an action.
And then finally exaggeration and strong posing.
You'll have to exaggerate actions a lot more than you initially anticipate, especially at smaller screen sizes.
You can get away with a lot in terms of fidelity if the poses captured are strong.
Especially for fast combat, players need to be able to register action that's often obscured by many things, like hit effects and screen shake.
So an exaggerated pose will stand out much more for players to be able to read at a glance.
So I highly encourage, if you couldn't tell, anyone that is unfamiliar with this to look into the 12 principles of animation for a much richer explanation.
If there's one place to spend a lot of time as a combat-focused indie, it's this, because your combat is going to live and die with the quality of your animations.
Sorry, live or die with the quality of your animations.
And that has nothing to do with the detail of the animation itself.
These principles can be applied to animation of all fidelity.
So even if you're on the design side or on the engineering side, it's valuable to develop a vocabulary on why something is or isn't working to align everyone on what is good, solid combat feel.
So adding forward momentum to attacks will help them to connect more easily.
Coming up, we're gonna talk about other ways that you can help player attacks connect.
But one thing to be mindful of is that baking a certain amount of translation right into the animation will help any additive procedural translation feel much more natural.
So players are more likely to miss an attack that doesn't move them towards their target.
And a missed attack in that way is a player error, but it's often a source of frustration at the system because the output does not match their intention.
Let's talk a bit about enemy animation.
So if you're a single-player title or creating AI, it's important to think about enemy animation differently than player.
For players, our goal is to make the output of their action as satisfying as possible.
For enemies, our goal is to make the output of their action as readable as possible by players.
This leads us to telegraphing enemy intention.
Telegraphing doesn't necessarily mean long attack wind-ups as much as it means clear attack wind-ups.
It gives the player the ability to read and learn enemy attack patterns.
So the characteristics of good telegraphing are clear poses, exaggerated poses will create the bookmark in a player's mind that they need to remember the purpose, hierarchy, and timing of an attack.
Strong anticipation, once again, leveraging those principles we talked about.
Giving an attack starter frames is just not enough.
It needs to follow natural physical motion.
At higher difficulties, this can be used to subvert player expectation, catching players with feints and variations in speed and timing.
And if you've been playing any Elden Ring, you know how incredibly tricky it can get.
So sound indication.
Sound cues before attacks are really critical to giving players another piece of the pattern to latch on to.
They become especially valuable for offscreen enemies and obscured enemies.
Visual effects often as a complement to the animation itself.
And within reason, you have to be mindful of creating too much visual noise on the screen and then making something less readable.
And finally, proper hierarchy.
So this means that there are three different enemies on the screen.
And they're doing three different attacks at the same time.
It needs to be clear to the player which is most dangerous.
This can be really challenging, but it will help them prioritize their focus.
For Dreamscaper, we use telegraphing to make sure that players can take purposeful action by providing them with the needed information to make an informed choice in combat.
Ultimately, it keeps combat feeling fair as players realize they had the information they needed to avoid a mistake.
And then finally, recovery timing.
Build enemy recovery time right into the animation.
When recovery time is baked in, it will feel much more natural and fluid.
Clear recoveries can help players gauge how much time they have before an enemy can attack again.
So we talked in the design portion about hit reactions and how critical they are to polish combat.
So let's walk through some ways we created really satisfying hit reactions in Dreamscaper.
So instant reaction.
We avoided blending into a reaction.
We found that reactions will feel much stronger if they instantly play when an attack connects.
The player will fill in the missing gap between the previous state and the hit state in their own mind, which will create this impression of a very powerful impulse.
This sort of thing, of course, works best at lower fidelity.
With our far camera, we need to emphasize hits with big deltas between the poses.
A closer camera might need a more moderate approach, might need some degree of blending so it doesn't feel too awkward or unnatural.
We also jump right into the middle of a hit reaction.
This ensures that the delta between the previous state and the hit state can really be felt.
And you don't need blending because the hit itself creates a natural transition between the enemy's previous state and their current state.
In fact, you'd be surprised how much you can get away with.
If you don't have resources or time to do reactions from the front and the back and the sides, rotate the enemy towards the player at the moment of hit.
And it will feel a lot more natural for that hit reaction to play than you might think so on paper.
And then hit reactions sell strength.
This may seem obvious, but it's important to note that the perception of strength of the player's actions will live and die with the scale of the impact.
A strong straight punch might send an enemy reeling, but it could also launch them 30 feet back.
We used hit reactions to communicate the variety of attack power.
And then with the above example, it might make sense for a small enemy to fly back after a straight punch, but a large enemy might only be slightly knocked off balance.
Once again, utilizing believable motion and physics to convey weight and impact.
Here's an example where the same attack affects enemies differently.
So in order to fulfill our pillar of dynamic interactions, we needed to introduce variety.
We found that enemies, when they have varied reactions to your attacks, the system as a whole will feel much more responsive and interactive, and it's just a lot more fun.
So let's also talk about some ways that you can create an invisible guiding hand that will assist your player and make sure that the output of the system is as close as possible to their intention.
Aim Assist.
In Dreamscaper, we utilize both a melee aim assist and a ranged aim assist.
The goal here is to balance challenge while rewarding player intention.
If a player wants to attack an enemy but is slightly off target, we correct for that because it just feels better.
It's more fun for those hits to connect.
With melee aim assist, many titles not only rotate the player towards the enemy, but they also translate them, which we're going to talk about in a second.
You can see we're fairly generous with it.
You can see the amount of leeway that we give players before things start to snap into place.
For accessibility purposes, I'd also highly recommend that you allow these to be configurable.
Many players might prefer or need a stronger aim assist to enjoy your title.
This is quite common in action titles, magnetism.
So during the startup of an attack, the player will automatically translate to an enemy in range to make sure it connects.
You'll see the most extreme examples of these in things like Spider-Man and Arkham series and Shadow of Mordor.
For Dreamscaper, we chose a different option.
Because of our purposeful action pillar, we wanted players to carefully consider positioning.
So instead of magnetizing the player to the enemy, we had data-driven hit translation system on a per-attack basis.
We scaled the natural route motion of the hit reaction to translate the enemy away or towards the player by a specified amount of units.
So it's had two purposes.
One is, of course, to add or reduce the impact on a per hit basis without exploding animation budget, having to animate different distances of hit reactions.
The other purpose, but it's primary purpose, is to set the enemy up at the appropriate distance for the player for a clean follow-up attack during a combo.
This sort of thing was important to align player intention with the result while not sacrificing too much on the core experience that we wanted to provide them.
And then input buffering.
We provide very generous input windows in Dreamscaper.
Players have fairly long periods of time to chain combos during an attack or attack out of a dodge.
We register early inputs and buffer that into the next action when the system is ready for those inputs so the player doesn't feel like their inputs are getting dropped.
On the flip side, we are also careful about making sure that a player who's mashing their inputs aren't over-registered.
It's another source of frustration at the system.
So we provide assistance as well by modifying hitboxes and hurtboxes in a variety of ways that are beneficial to the player.
You can see here how the hit doesn't even connect.
But we're okay with that because we're prioritizing feel over fidelity.
So along with the basics like giving player attacks really generous hitboxes and enemies precise hitboxes, we also have multiple hitboxes that we author per attack.
So for example, on our projectiles, we have separate enemy collision, environment collision, and breakable object collision.
We can make enemy collision quite generous for the player while ensuring that projectiles don't get caught on environmental obstacles.
It just doesn't feel very fun.
And Game Feel.
Game Feel is really the culmination of so many components, many of which we discussed.
So in this section, I want to focus on some additive elements that you can implement that will improve the intangible sensation that a game just feels right.
This was especially important for us.
We wanted to satisfy our pillars of providing strong feedback that I said we'd come back to.
So here is an attack without any of its visual registration components.
Of course, it looks like nothing is happening.
So if we add a hit flash, a compliment to all the other impact related effects, highlighting the affected character with an attention-grabbing flash of color will emphasize the impact.
We also threw in some damage numbers here as well.
The more information in this way that you can give to the player, the stronger that feedback will be as long as it's not overwhelming.
Then let's also layer in those hit reactions we talked about.
You can see here for such a strong swing, an equally extreme reaction is warranted.
To dial in the effect, we are also adding that data-driven hit translation that we talked about, which can really emphasize or deemphasize the strength of a hit as necessary.
Hitstop and time dilation.
So hitstop was first popularized with fighting games.
The most common form of hitstop is when action freezes for a few frames at the moment when an attack connects.
This has been widely adopted by many single player games as well, because it helps emphasize the weight and strength of an attack at the moment of impact with that really clear pose.
We use a simple hit stop that only applies for player attacks.
We freeze the attacker and the hit character at the moment of impact for about 115 milliseconds, like seven frames.
We found that it was the least disruptive to freeze just the characters while allowing visual components and a camera, other polish elements to continue to play during that period.
We also use an authored curve to ease in and out of that hit stop.
We experimented early on with stopping everything dead, but we found it less disruptive and more fluid to be careful about that transition in and out of hit stop.
So when creating that hit stop system, it also comes with an added benefit.
We made sure to extend its utility to allow adjustment of game speed on the fly.
So this allowed us to do time slowing for things like the anticipation of attacks or during dodges.
and hit effects.
It's a really critical component to selling that hit, that corresponding visual effect.
This topic, again, just like the enemy stuff, it's its own talk, but the key consideration within the framework of enhancing game feel is carefully considering the relationship between the visualization of the hit and the attack itself.
A natural link between the power, type, and style of attack with a corresponding visual reaction will enhance the feeling of responsiveness, which is critical to satisfying game feel.
Another common practice is screen shake during the hits and animations in an additive way to sell impact and weight.
We utilize different classifications of attacks.
We talked about those before, like our stun, our stagger, knockdown, to apply corresponding screen shake.
We also differentiate any player impacts and enemy impacts for more flexibility in applying appropriate camera shake.
For example, if a player is hit by an enemy, they're very rarely expecting it.
Because if they were expecting it, they probably would have dodged the attack.
So when hit occurs, the camera shake feels especially disruptive to them.
So our rule of thumb was that shake applied to the player should be much less than any applied to an enemy.
And then force feedback.
It's a really powerful tool that you have in your arsenal to connect the player with the game response.
In almost all instances we play screen shake, we also play a force feedback.
So if you're supporting gamepad or even a percentage of your users are on gamepad, it's worthwhile to invest some time into force feedback as well.
And then really beefy sounds.
So sound design and combat is often the X factor and whether a hit feels juicy or not.
Oftentimes when a player is not able to communicate properly, why combat feels off to them, a lack of gravity in sound design can be at fault.
because there's an intuitive link between the sound of an impact and the impact itself.
So missing that stimulus will cause the whole experience to suffer.
Pay careful attention to the strength, depth, and application of your sounds.
Tinny, light sounds without proper body will actively detract from the impact of an attack as well.
and a procedural enemy shake.
So here you can see a larger enemy that we don't want the player to be able to unlock.
A simple procedural shake applied on a root or a specific bone in this delicate can reinforce the impact of an attack.
We implemented this in Dreamscaper with larger enemies like bosses in mind as they lacked the exaggerated hit reactions of smaller enemies, since we wanted to make sure to keep the challenge level up for players.
So let's add a procedural shake.
So we adapted a simplified version of the practice of applying procedural shake to specific bones with directional impulses when they're affected by an attack, which was just out of scope for us on this project.
Instead, we apply shake on the root of the enemy, specifically to the yaw and the x and y axes.
See, it's not actually playing.
Sorry about that.
But yeah, just a small shake on the root of the enemy.
So this helps reinforce that the player is actually physically affecting the enemy they're attacking, even if the enemy is not providing a massive hit reaction.
And then one closing thought about all these enhancements, while they're important to improving the overall game feel of your title, you should always allow for some degree of personalization.
It's important to allow the player at a minimum to turn these off and ideally adjust them to their desired level, especially for things like controller feedback and screen shake.
It's a simple way to make sure that the game is as accessible as possible to as many people as possible.
OK, so I'm also going to go through in this section, Keys to Success, some of the learnings that I had on this project that I'll be carrying forward to the next project, hopefully that is valuable to you guys.
So being ruthless with scope, I mean, this is a common one, but it's important.
We were ambitious, but because we had experience on other projects, we could tell to some degree when we were biting off more than we could chew.
It was a pretty delicate balance, but what I found most helpful.
was giving myself a little mental distance from the project.
I worked to compartmentalize a bit and view of scope of a feature through a more neutral lens.
And what I really mean by that is I was trying to divorce my personal attachment and the value that I was giving to a feature from the value that a player might give to the feature.
Oftentimes we found that there were ways to trim scope and retain the core of a feature.
Other times we had to make the hard decision to cut something entirely, but ultimately it made for a better game because we weren't too precious about it.
Speaking of focusing on a goal rather than a solution, I spent quite a bit of time on Dreamscaper designing a feature around chatting with characters that would function as a procedural mini-game.
We hoped the procedural nature of the minigame would help complement the procedural nature of combat, keeping non-combat interactions fresh for many hours, especially considering the roguelike structure of the game and the repetition therein.
Ultimately, it was a complicated task that was a black hole of time, resulting in a large amount of work, or it could result in a large amount of work for our team, especially at our size.
So despite many hours of work, we cut the feature entirely in favor of a more simplified chatting system.
What we landed on was not the best solution, but it was a solution that allowed us to de-risk the project to some degree.
We decided to focus on meta-progression as a way to keep the non-combat systems engaging, which turned out to be incredibly valuable to all parts of the game, and was much less of an unknown for us to develop.
And that way, we were able to achieve our goal of keeping the non-combat systems engaging while working within scope, because we weren't tied to that solution.
Testing often and iterating cheaply.
So one of the most important workflows that helped improve Dreamscaper's combat was a feedback loop from players.
We began going wide with feedback as early as eight months.
As an example, early in the project, an alpha tester sent us a video of the game sped up by 25%.
He thought it just might be more fun like that.
So then after I put aside my panic in the sheer amount of work that that would entail, I agreed that it just looked more fun.
So instead of making sweeping changes, we wanted to test the hypothesis as cheaply as possible.
So our engineer, Rob, he put in a hack, sped the whole game up by 25%. I'm pretty sure it killed his soul a little bit because it broke a lot of things, but it allowed us to test what we needed to test. So we immediately put up a test build for our players and asked them for their input.
The majority of feedback was really positive, and we agreed as a team it was the right direction.
So then we moved forward with adjusting all the individual elements at the appropriate speeds separately.
The game was much better for it.
So there are hundreds of stories like that throughout the development, and I credit our community with doing a lot of work to help refine the feel of the game.
So consider bringing in outside perspectives early and set up a workflow that allows for a continuous feedback loop as you iterate on your title.
So throughout the project, my goal was always to do things as efficiently as possible.
Because I had to juggle multiple disciplines, I often had to view my workflow through a very specific lens.
I was always looking for ways that I could put the smallest amount of time in for the largest result.
This boiled down to three things.
Building on the learnings of others, leveraging outside assets, and utilizing workflows that prioritize my knowledge.
In many cases, I made sure to see if someone else has already done the heavy lifting.
For instance, all of Dreamscaper's controller icons were purchased from an asset store.
I utilized a variety of VFX packs to help me get started in generating a specific effect or learning.
And then we also purchased models that could be repurposed for props and things.
And then, as you'd guess, these are rarely used wholesale.
Often they would be a learning tool or a building block to create something new, as I wanted to make sure that the outside asset would conform with our styling.
In terms of tools, Rob and I took some time to develop a workflow that utilized UE4's sequencer system to spawn attacks dynamically while in combat.
If you're unfamiliar quickly, Sequencer is a cinematic tool in UE that allows you to place things on a timeline and spawn them in and play that sequence at any time during the game.
But we adapted that specifically to spawn these combat-related things.
So this workflow became really important because it was fast, immediately previewable, and required very little coding, emphasizing an artist-friendly approach for me.
So you can see in the example a visual timeline of an attack we built, but that sequence itself was abstracted.
So it can be repurposed and mixed and matched as necessary throughout the project on other attacks.
So remember, if you're hitting a wall or feeling overwhelmed, someone has probably solved the problem you're approaching or a similar one, what can you learn from them in terms of both solutions and workflows?
And I wouldn't be able to take on some of the new areas that I approached for this project without leveraging my own existing skill set.
When I started DreamScaper, I had never done character animation before, but I felt confident that I could tackle it.
And besides my own inflated ego, the reason I felt confident is because I had a lot of experience in a tangential space.
So I was previously a motion graphics animator, like I mentioned before, working in both 2D and 3D.
So despite a lack of understanding of character animation, I had animation fundamentals and tool exposure to make the transition smooth.
So when I talk about things like leveraging your existing skill set, it's not about staying in your wheelhouse as much as it is about finding ways to expand out from your comfort zone successfully, especially if you're looking at this as a business and looking to maximize your chances of success by de-risking the project.
And the truth is, Dreamscaper would never be finished if I tried to do my very best in every single area.
And I know as artists and craftspeople, that sounds sacrilegious, but the reality is on a small team with limited resources, trying to bring every single thing that I did up to 120% was not only incredibly draining, but an unrealistic goal to have.
It was really important to know when to stop, because in many cases, for the player, 100% is as good as the 120% we often shoot for.
And as we know, that last 10 or 20% can take almost as much time as the rest of the effort.
I can see that it looks like the video stopped playing, but...
I'll quickly describe it.
So as an example of Dreamscaper, I deprioritized animating characters back to an idle state.
In this example, the blend of the animation is really ugly.
So once the player attacks, they just rotate into place.
I found that the vast majority of time, players were continuously providing the system with inputs.
Players don't attack and then wait for the attack to finish and return to idle, and then attack or run or dodge right after.
They're almost constantly entering inputs.
So due to how responsive we wanted the game to feel and how low fidelity it was.
The blend between player actions is very fast.
So for the most part, I let UE4 handle animations to blending to idle, despite it looking pretty rough.
This may seem like a small thing, but animating hundreds of attacks back to idle didn't make sense for the fidelity of the project.
And that 5% of animation time that I saved could be put into a higher visibility area.
So for those of you who have been used to an indie mindset, this probably seems like a no-brainer.
But for me, coming from a larger studio where my area of focus was much more narrow, it was a really good lesson to learn to know when good is good enough.
And the best way to know when something is good enough is to look at it through your player's perspective.
So working in a small team can be incredibly empowering, but it can also lead to a lot of conflict, especially if you're as stubborn and opinionated as I am.
So something that I learned that helped my mental state over the course of the project was to be protective of my emotional energy.
I care.
I care a lot. I care too much about things that I shouldn't. And if you're a game developer, chances are you do too. So to help recontextualize it, I began asking myself, how much do I actually care about this when approaching a specific feature or approaching a discussion? And that choice to step back and put my energy where it was most needed meant the difference between feeling refreshed or drained.
It also helped alleviate conflict on a team like ours that has a flat hierarchy.
Decisions that might have sat at a standstill because they just didn't have consensus between the three of us could move forward to be tested and re-approached later.
Okay, we have come to the end of it.
To summarize, create pillars with specificity.
Be considerate of your combat options.
Layer your systems over time.
Invest in animation and hit reactions.
Establish responsiveness choices that suit your project.
Prioritize strong feedback for more satisfying and visceral combat.
And finally, kill your darlings, take calculated risks, and protect your emotional investment.
So thank you all so much.
Really appreciate it for you guys coming to this talk.
I hope there are some learnings that are valuable for you that you can take back to your team to improve your combat.
I'm also very happy to continue discussions, Dreamscaper or otherwise.
So if you don't have a chance to grab me here, I can be reached at any of these places.
And I think we have time for questions as well, if anyone has any.
Oh yeah, what's the deal here? Yes? Yeah. Please.
So, with a game like this, metrics, they're kind of all, like how far do we dodge?
How far do attacks go?
Did you find you guys sort of tried to nail down metrics first, or were you kind of evolving those throughout production?
Yeah, good question.
We had a very strange working style because a lot of us, we came from larger studios, but we also were so tired of it.
So for things like that, most of it was completely intuitive.
So we would try things and try things and try things, and if something wasn't working, we'd cut it.
So we weren't, because we were moving pretty fast.
There's three of us, we could test things out very quickly and establish if something was or wasn't working.
So for instance, like a dodge metric, we would just refine kind of a core dodge.
We started with our core kind of roll dodge.
I don't know if we actually saw it here, but we started with that.
And then all the other dodges that the player could potentially use, because it's a roguelike, they could pick up different dodges.
We kind of tuned around that and we tried very different versions of things where some might be very short and have very long invincibility in terms of distance, very short in distance.
Some might have really long distance but recovery after.
So we were pretty liberal with that type of thing.
We didn't worry too much about specific metrics because we just had a very fast and loose working style.
Follow-up question.
Similarly, did you guys try to nail down, like, frames for when the attack input would happen?
Like, do all the attacks have, like, the hit on frame five?
Or did you nail that down, too?
Or was that also similarly, like, just kind of experimental?
Yeah, as you might be surprised, it was also very loose.
Yeah.
So one of the things that we did do, though, is we tried to make sure that almost all player attacks were faster than enemy attacks.
We wanted it to feel like you could cut an enemy off in the middle of their startup.
So we had some basic rules like that in place, but we weren't too precious about having a specific amount of frames.
And it was kind of the same idea where over time, as we were developing more and more attacks across different weapons, we started to refine kind of what the general range was of things.
And a big part of this also I should mention is because I'm the person that's responsible for concept to execution for a lot of this stuff.
So I could have it in my own head.
If you are on a larger team.
doesn't fly the same way because you need to be able to communicate to other people especially if they're touching different assets. How long like these how about what these metrics should be. But yeah for me working alone I was fly by the seat of my pants for sure. Very cool.
Hey, in respect to the player feel, you spent a great deal of time in your talk dwelling on the importance of sort of the player's ability to impact what the enemy is doing and interrupt or stun or knock them around.
I suspect, especially since you showed those larger enemies, that things like bosses or, you know, like the big guy when he shows up are supposed to be these kind of big, crunchy encounters where the player feels like the actions that they do are kind of more important than the normal actions that they take throughout their run.
However, you can't exactly allow a player to stun lock a boss because then it's trivial.
So you've taken something away, which is their ability to kind of, you know, stun lock or juggle.
What do you give them back to make that feel, you know, just as crunchy or more as the rest of combat?
Yeah, good question. Just to quickly reiterate, how do we accommodate for pulling away hit reactions when fighting bosses or larger enemies?
So a few things. The part of it is the player's arsenal.
So they have a lot of other options besides stunning.
enemies or staggering enemies to help deal with crowd control or help deal with a larger enemy, specifically like those magic attacks.
We really didn't touch much on that, but they have a set of special abilities that help augment their normal attacks.
And the other thing about the bosses themselves is I tried to, we also didn't have a lot of time to talk about that, but a thing I tried to do when creating a boss was figure out ways that a player could kind of sneak in during their patterns and their attacks so that it felt fair to them, that they could read and learn their attacks over time and slowly adapt and have the space to counter-attack because we wanted to create like a almost choreographed dance.
Some bosses were more extreme than others, where they had basically split phases where they could be attacked here, or they could attack here.
And as the game got harder, we made those phases smaller and smaller and smaller to the point where it was like, they would attack, have recovery, and it can attack again.
And the player had to start to learn at those higher difficulties when they could weave in and when they could go on the offensive.
Does that answer it?
Yes, it does.
And then a final follow-up on that is...
In terms of difficulty scaling, a very common solution in our industry is to just pump the numbers, right?
These guys have more HP, you deal less damage, whatever. You make that disparity wider.
Did you feel tempted to go down that road? I don't know if your game features a difficulty slider, but...
Like, how do you address that or would you recommend addressing that if not, you know, relying on number pump, basically?
Sure. Yeah, we did a hybrid approach.
So we actually did have, you know, the kind of classic like scaling.
We had a curve that we set up for enemy power and also for player power.
So we had a curve for their health and for their attack strength.
But to your point, we...
My philosophy there is it's much more interesting to the player if they have to adapt to changes over time, over the course of the game, and over difficulty.
So we actually had a set of difficulty sliders that were accessible later in the game, where you could kind of increase the difficulty of different components of the game.
And one of them was enemies.
And the way that we pushed the difficulty and challenge without just making it so the player had to get hit less was new attacks, new attack patterns, and new ways that the players, the enemy, could take defensive response to the player.
So there's way more scope increased with that, but we wanted to make sure that at higher difficulties, players were still really engaged because they're seeing new things and they're having to adapt to new things.
Thank you.
Anything else?
So expanding on the enemies that you were talking about how for higher difficulties you would introduce new attacks for the player to react to, were there any core principles you had in mind whenever you were designing like the enemies and how you would advance them?
Yeah, the question was about what are some of our core principles for advancing challenge and enemies.
So there are a couple things that we, in terms of defensive options that the player has, you know, I talked about that block, the parry, the dodge.
So we have a system in place that the enemy attacks can override one of those.
So the player gets a visual notification over their head of what the type of attack is when they're attacked.
And at higher difficulties, we start to take some of those options away from the player.
So for instance, Just standing there and blocking, that goes first.
So enemies at higher difficulties can break through their block, and eventually attacks have to be parried.
And finally, at the highest difficulty, you can no longer parry to get that counterattack on the enemy.
You can only dodge from certain attacks.
So there are certain things that we did in terms of creating defensive options for the player in order to help accommodate that.
Thank you.
Hey, so like you had said earlier, there's tons of different weapons and abilities that you can mix and match and that they all actually interact with each other.
So how did you go about balancing the numbers so that all of the different routes players could go kind of felt different in a flavor perspective, but similar in a strength perspective?
Or was that something you weren't actually kind of thinking about?
We did think about that. I'll answer this quickly. That's the last question.
Yeah, so we did think about that. I think the way, one of the ways that we did that is we came up with a set of kind of early attacks and we balanced around that.
So once we had a set of things that felt good and were balanced against each other, then we started pushing and pulling on either side.
So we might have an attack that had longer startup, but dealt more damage to an enemy, and we could kind of push the extremes against what we had already to compare.
So we started to look at different ways to kind of move the variables around so it felt really satisfying for players to try out different things that had really different effects, but then we would try to balance that on the opposite side by pulling in some of those things that we've already established, like, you know, whatever the recovery time is or the startup time.
Thank you.
All right, thanks guys.
That's all the time we have.
Really appreciate you coming.
Thanks.
Thank you.
