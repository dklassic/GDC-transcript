So my name is Miriam Palosari-Eladhari and I'm a game designer. I just started in the studio just a few days ago. I'm also a researcher affiliated to the University of Malta and to Stockholm University in Sweden. So I've been teaching games for for a while.
since 2004.
And this talk is a case study of a course concerned with AI-based game design and computational expression.
And the reason that I want to give this talk is to show you how it's possible to enable students to expand their technological palette, how they can make.
AI technologies as part of their artistic practice as designers.
It's something that's super empowering to know that you have lots of technologies at your fingertips.
And for those who are already proficient.
they will, in coding and using these technologies, it's also a way to show that, okay, so this is the sharded territory, and that makes it possible to see what is uncharted, and where you can do innovations and new things.
In designing this course I wanted to make it accessible for both programmers and non-programmers.
So the mix of technologies that we have been using are things that can be used just off the shelf even if you don't know how to program.
However, the students that I've had are mostly programmers.
Just shortly, what AI based game design means, it's simply when the AI is in the foreground and central for designing a game, simply put.
So, back in 2011, I was spending a lot of time in Santa Cruz, and having lots of good discussion with some of my favorite collaborators, Josh McCoy, Gillian Smith, and Ann Sullivan.
And we started to compare how do we work with AI and design.
And we could see commonalities.
First of all, we could see that we usually kind of looked at three different knowledge domains all across the case studies that we did, usually having one rich metaphor of a system like personality psychology or social behavior.
And then some sort of either existing AI technology or whatever we were building.
And also the type of genre that we were kind of adhering to when we were doing our development, if any.
We also kind of saw that back then, the main challenges that we were facing in our own practice was how to make the.
the AI really be foregrounded?
How do you make it transparent to the player that something interesting is happening?
So that you don't have a super tailspin-like system where you don't see what's on the surface and how it's played.
Another one was looking at particular sweet spots for emergence, like when a game is fun and understandable, but still rich and something that you can explore.
We reasoned a lot about that.
And then when I designed the course, computational expression, I tried to find a way to give this to the students.
Like at the same time, give them a method for how to work with it in design, and also give them a palette.
of AI methods, but not only AI methods, also some interesting input technologies and things like Oculus or Connect, so things like that.
And practically about the course, it's a five ECTS course.
And in Europe, this means that one ECTS is 25 hours of student work.
And one semester is 30 ECTSes in total.
So this was the sixth of a semester time.
And the semester is 4 and 1 1‚ÅÑ2 months long.
The students that I had, this was given at the University of Malta.
Mostly they were bachelors in computing science, but also a few of them didn't have programming backgrounds.
They also already knew how to iteratively design and develop games, because they were students in our game design master.
The course, we used the great book, Expressive Processing, by Noah Ward-Ripruen as our kind of red line in our tech seminars.
And we had workshops and some guest lectures.
And this is kind of what the, I'm first gonna see, the course was divided into two main parts.
Where the first six weeks was an intense period of knowledge gathering.
So having seminars and workshops.
And this is kind of like the things which are on that top row there.
Those were the technological palette that I wanted to give my students.
I mean, whoever, kind of like when you use this, you use the things which you think is, OK, what are the technologies that exist and could be useful for game design?
And these were the ones that we kind of looked at.
basically having AI based game design that was one of the starting points and also looking at methods for research prototyping like how can you answer a research question by posing it as a prototype.
Looking at agents and characters, interactive narrative systems for that.
Game worlds, how you build full, rich ontologies for a game, systems for help you create those.
Looking at procedurally generated content methods, data mining, big data.
And then also the kind of the toolbox and the toy box, using things like bio data and other types of inputs like the Kinect.
or things like that, mainly looking at the huge area of presence, research, and immersion.
And this was kind of also interspersed with hands-on workshops when students use these technologies.
So at the end of this six-week period, the students delivered a game concept, like what are we going to build?
When we had the tech seminars, we divided up all the readings among the group.
So each student picked the technology he or she was most interested in, and then championed that and kind of held that seminar and presented the tech or the tool or the approach to the group and we had a discussion about that.
But in addition to just reading papers, I invited guest speakers who could give demonstrations like okay, Richard Evans skyped in and said, this is how I developed Versu.
This is how I think about narrative when I build this system.
It was also a good opportunity for the students to ask about.
basic BDI agent architectures.
Jillian Smith showed her prototype, The Endless Web.
And students also read her publications so that when she Skyped in, they could both kind of get the hands-on demonstration of her work, but also ask questions about her academic publications on that.
Brian McGurkow showed his viewpoints AI, where a dancing player is kind of represented in a very artistic manner.
Also, an interesting way to use computation for artistic expression.
We had Noah also Skyping in, since we had his book as the red thread in the talk in the whole course.
So.
mainly talking about the different effects, like how you can use the Eliza effect, how you try to not be in the tailspin effect when your super impressive fantastic AI system is not really visible to the player, even though it's a fantastically beautiful system, and instead use the SimCity effect, where you have this rich metaphor really feeding into the design and making it accessible for the player.
In the workshops, we were both looking at digital systems, but we were also doing paper prototyping AI.
And this was especially to make it accessible for non-programmers.
Like, if you do a paper prototyping of the strip system, for example, building a story together in groups, you literally can't walk out of the room not understanding plan-based problem solvers.
It's something that I really kind of recommend as doing when you teach AI to also combine it with these kind of more tangible hands and methods for teaching.
So the tasks that the students got was to, when they brainstormed.
look at, choose one AI technology from the palette, and choose one rich metaphor from real life.
So those were the two starting points.
The third one, looking at the game conventions in the design, it was something that they should be aware of, so if they were using game design conventions.
they would be kind of know when they made something innovative.
The development process, it was iterative.
They already knew what cycles to go through with play testing and iteration.
So they kind of did that naturally.
I didn't have to teach that part in the course.
So I'm going to show a few quick examples of games.
So one, this is Highway Code.
It's a small racing game where the students use machine learning as the central technology and use traffic systems on Malta as their main knowledge domain.
So in the game, the cars learned how to have the right speed.
CompoBlocks is another game that the students made were using procedurally generated platforms for music composition.
So just the.
by playing the game, you would compose music as you went along, and the little platforms there, kind of they emerged in real time during play.
So, but also bear in mind that these little prototypes were made, you know, in just a few days time.
They didn't have much time for this kind of development.
Another example.
is Organitron, where students use PCG in combination with genetic algorithms to make a robot war strategy game that was played by two players who share the keyboard and kind of watch their little robots evolve.
It was very fun.
Another one was a dungeon crawler, procedurally generating So it was kind of this mixed media thing that you would get support for how to build your dungeons for your board game role play that you would play.
So it was looking at quest flags and PCG quests.
There were also a couple of people, groups, used input technologies instead of AI as the central part, which is totally viable as well, at least within the scope of this course.
So, ones were using the gyro as the central thing and the Hercules myth with being attacked by birds, so mounting a cell phone using the gyro to play a level of that.
Another was using multi-device to kind of have, to play a kind of art game.
So to win, your squigglies need to kind of traverse to the end of the screen, and you'd have a kind of art piece being created as you play.
They were inspired by minimalist art and used the yellow tail code base for doing that and did their own thing.
So the resulting things, this is kind of like the competitive mode or the fight mode.
And this would be the kind of result of that play.
Those, the collaborative play part, were resulting in images that kind of looked a bit like this.
So after this month of prototyping, there was a development stop in order to reflect.
This was a very important part of the course because you can't really make sense of all these technologies unless you get time to really reflect about how can you use this in your own artistic practice as a designer in the future.
And some of the questions they were looking at was kind of going back to how the technology and the design affect each other.
So looking at the course structure, the last three ending months of the course after the knowledge gathering phase was spent one month prototyping and testing, then a full reflection phase where people wrote reports and played each other's games.
But then also making sure that they had a full month for polish so that the feedback that they got from each other And for me was something that they could use in in their their absolute last iteration What I saw as a teacher, which was strangely obvious, was that those groups of students who were really embracing the idea to have a rich metaphor from real life that they were kind of using in their design work were the ones who made the most innovative and interesting games during this short dev time that they have.
Another thing that I saw was that because I was using this kind of traditional style defense, having kind of people defend their argument in class, combining that academic rigor together with practical work was something that it kind of fed into each other nicely.
The outcomes for the students was that they got games to put into their portfolios.
Some got seats for research papers that they then were writing.
It was also a kind of feasibility test for their forthcoming thesis work, something that we would spend a year doing.
So that is kind of a time saver there.
And an important thing, too, was to have a hands-on experience of what it means to build an AI module specifically for a game.
Because the process of iterations together with the game design is really fun, but it's also resource heavy.
And this is something which is very good to know when you go out in the industry.
Sometimes it's a super good idea, but maybe not always.
But most important was that the students have really gotten an idea about a palette for how to use technology and also see where can we innovate and where can we do new things that doesn't exist already.
The course materials and stuff is possible to download.
I just threw up all the PDFs and things on that address.
So if anyone is interested, it's all there.
I'll put the slides there as well.
And that's it.
Questions?
Hi.
Hi.
Thank you for a talk.
If I understand well, in this course, they have to program their own AI.
Do you have other course for the same student when they use standard tools, AIs you find in engines and using industrial tools for AI?
Yes, in addition in the program, there is several game AI courses and also PCG courses for those who do the technology strand.
So they already, most of the students already have lots of things, kind of technologies on their fingertips that they can use.
So this is not, this course doesn't exist in isolation.
Okay, thank you so much for listening.
