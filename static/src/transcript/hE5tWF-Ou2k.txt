Hi everyone, welcome to Evolving God of War's combat for a new perspective.
Thanks for coming by on the last day of GDC, after what was I'm sure an exciting but very tiring week.
As a quick show of hands, who here played God of War?
Oh shit, alright.
Well, that's cool.
So who here played on the Give Me God of War difficulty?
I apologize for your pain.
So my name's Mihir Sheh, and I'm the lead combat designer here at Santa Monica Studio.
Joining me during the Q&A will be our Gameplay Director and former Gameplay Engineering Lead, Geet Shroff.
Together, we worked alongside a host of talented gameplay designers and engineers in evolving our combat systems on 2018's God of War.
Though I'm the one up here presenting today, everything I'm about to go through is the culmination of a team's effort.
You've got a lot to cover, so let's get started.
For those unfamiliar with past and present God of War, here's a small video to give context to the evolution in combat that took place.
God of War is a third-person action-adventure game series where you play as the Spartan demigod Kratos and use your legendary weaponry to overcome obstacles in a visceral delight.
Clearly, the two games shown look very different, but the gameplay design underneath both of them shares common DNA.
To talk about combat evolution, we first need to look at the past.
What was the traditional core of God of War's combat?
For over a decade, the series' combat has focused on a few central pillars.
Fundamentally, we wanted to adapt the intensity and finesse of Japanese action games to the West.
In doing so, we aim to expand the audience by increasing the accessibility of gameplay and bringing over-the-top, bombastic presentation to the forefront.
Kratos was a character all about offense, and the power fantasy of our combat represented that by making fighting your enemies feel like playing with your food.
And of course, all of this was done from a pulled-back, game-controlled camera that framed all of the action in a way that was larger than life.
Each game in the series built upon the foundations of the original by refining combat mechanics and escalating spectacle to epic proportions.
With this new God of War, however, the overall vision demanded a more grounded and intimate tone.
This applied to all aspects of the game, including combat.
And there was so much new with this vision.
The Norse mythology, a new Melian range weapon in the Leviathan axe, and a new player-controlled close camera that never cut.
And of course, I'm skipping over a brand new companion.
If you want to learn more about that and missed Hayato Yoshidome's talk yesterday, check out his talk, Raising a Trace for Battle when it hits the GDC vault.
So the idea behind the new camera was to create a more visceral experience that brought you closer to Kratos, and to make the combat more deliberate and unflinching.
This would fundamentally change the combat experience of the franchise.
And it had to be better.
Well, that meant two very clear things.
We knew we couldn't refine and iterate on the combat formula that existed like previous titles had done.
Instead, we would have to reimagine combat for this new style of game, and it would have to be largely governed by the camera.
And in this new style, we also wanted to retain the core identity of what fans know and love about God of War's combat.
And these goals drove us insane, right?
At the time, these two things were completely at odds with each other.
fulfill an offensive power fantasy with a fast and intense action, but for a more grounded game with a super close camera.
It was really funny seeing people's response when we eventually showed the game for the first time at E3.
You know, people thankfully responded really positively overall, but many kept saying, I don't know, they should have pulled the camera back, you can't really see anything.
The internet was experiencing what we agonized over for years.
But let's roll back a bit to understand what I mean by that.
To know why these two goals were a problem, we have to dive in a bit deeper into the tangible elements which define the combat identity of God of War.
Now, obviously, you're doing a lot of things while playing the game.
But I'm focusing on what you're doing most of the time, which is fighting basic grunt enemies, such as the Draugr.
At the heart of God of War's combat design for moment-to-moment gameplay lies four tenets.
Responsive and combo-oriented gameplay leads to varied and exaggerated enemy hit reactions.
Satisfying and powerful attacks move you forward physically through the space.
Kratos can handle and often excels when he fights multiple enemies.
And finally, gameplay and controls are accessible, hassle-free, and are on the player's side.
Now, with that in mind, most other action games with similar types of camera perspectives are designed to focus primarily on one-versus-one combat with a lock-on system, not on fluidly fighting multiple enemies together.
They tend to have combat loops which promote relatively defensive and cautious player behavior compared to traditional action games, as it's harder to see your surroundings.
The player's attacks typically don't translate them forward through the space in order to help with the camera framing.
And it keeps combat aimed at gauging the distance and timing of attacks, as opposed to manipulating fun enemy hit reactions.
And this is all for good reason, right?
Players love these games.
And these types of combat systems make sense for a closer camera, since the combat is designed around it.
Unfortunately, this was not the case for us in our combat identity.
we needed to stick to our special ingredients if we wanted to deliver a different, but true God of War experience.
We needed players of all skill levels to be confident and offensive, and it didn't seem like this was possible with the proposed change.
In fact, in the beginning, many of us on the combat team were really opposed to the new camera for this very reason.
But the vision was set, and after many initial months of squirming and fighting about it, we trusted in the vision and committed to the thought that we were going to make it work.
And it wasn't easy.
Our early attempts of making the camera mesh together with combat did not go well, as you might imagine.
Frankly speaking, it was terrible to play.
And it was almost impossible for players to make sense of what was going on around them.
I mean, can you guys tell what the enemies are doing in the video?
Because I sure can't.
Players just panicked, evaded around constantly, and mashed buttons without a semblance of strategy because the combat systems were fighting the camera in a way that made gameplay extremely clunky.
To solve this, we had to reevaluate our combat late into the fall of 2016 and go forward with the strategy.
For players to play confidently and offensively, we needed to remove as much clunkiness as we could.
After the initial adjustment of getting used to the game, the difficulty needed to come from the game itself and not the controls and camera.
If we didn't get this right, players would be discouraged to experiment with our combat and would maybe even rely on the pattern of play that they're used to in some of the games I showed before.
So with these challenges and goals framed, we broke down the core combat systems and identified the aspects which we needed to solve.
Tracking, targeting, and engaging enemies.
And I'm excited to go through them with more technical detail and share some of what we learned in the process.
If you would like to hear more about the design process covered in this section, Jason McDonald, our design director, did a great talk on this yesterday called Taking an Axe to God of War Gameplay.
And it should be up on the vault soon for you to check out.
Let's start with tracking enemies, by which I mean everything related to enabling players to be aware of threats in the fight.
In order to track enemies, the player has to have an idea of who the active threats are.
You could be fighting eight enemies at a time, but which group should you really be paying the closest attention to?
Aggressiveness affects how enemies will behave and where they will position themselves.
our enemies can be either aggressive or non-aggressive in a fight.
Think of it kind of like a scene in a kung fu movie.
Aggressive enemies are those who are actively trying to attack the player in the front, while non-aggressive enemies hang around in the back and wait to become aggressive.
So how do we select who is aggressive at any moment and who isn't?
We mostly updated our old aggression scoring and token system from God of War Ascension, but accounted for the new camera.
We evaluate all enemies in the fight periodically on a short timer and give them a numerical aggression score built by the following criteria in order of importance.
Can the enemy become aggressive?
And this is to ensure that they're not in a hit reaction or in a similar state where they're barred from becoming aggressive.
The second is, what's their aggression priority?
And this is a number set by designers per enemy type along with the range in which the priority is applied.
So a high priority, like a really big ogre who's super far away, doesn't out-prioritize a lower enemy, like the draugr, who's already close to the player.
The third is, is the enemy currently targeted by the player?
And I'll go over this in more detail soon in the targeting enemies section of the talk.
And finally, what's the enemy's action rank?
And this is a calculation that looks at whether they are on or off screen, their angle from the camera, and their distance from Kratos.
The enemies are sorted with a score and are handed aggression tokens from a fixed pool in order.
Each enemy type can claim a different number of aggression tokens to signify size or importance.
And after the max token count is reached, all others in the list become non-aggressive.
In this example, the player has a pool of 14 tokens.
In the table, the outline column on the right denotes how many tokens that enemy claims.
After the third enemy, the pool of 14 runs out, and the remaining enemy is set to be non-aggressive.
The outline column on the left shows who is aggressive, and as you can see, only the blue enemy was set to non-aggressive, because he's missing the asterisk.
And you can even see this in the image.
He's standing all the way in the back.
Careful tuning of these values helps to ensure that the player always has a manageable threat at any time.
These values are also changed for difficulty to either increase or decrease the overall enemy aggression.
Once we know which enemies are aggressive and which are non-aggressive, we have to figure out where they want to be in the fight space.
Positioning needed a complete overhaul and was built from the ground up with this new camera in mind.
In older God of War games, enemies used their aggressiveness to determine whether they should stand near or far from the player, effectively surrounding Kratos in two circles.
There was no notion of nicely spreading the enemies out or caring about one area more than another.
The pulled-back camera allowed you to see everyone at all times, so it was easy to perceive your threats.
And non-aggressive enemies occasionally moved around the perimeter of the fight just to keep the scene a bit more dynamic.
Now, however...
Enemies could be on screen or off screen, and where they stand relative to your perspective is extremely important.
The camera perspective makes depth perception more difficult to gauge distances, and enemies in front obscured those who were standing behind them.
As such, we needed to make sure enemies spread out comfortably.
Early on in the project, we tried to find the optimal positions for each enemy using a weight-based positioning system.
We used a fixed-size circular grid around Kratos, which would update periodically as he moved around.
Each grid position would evaluate itself by checking if it was on the navmesh and if it had a valid straight path to Kratos.
Valid positions were then weighted based on many different heuristics.
There were a few valuable learnings early on from using the system, but over time, it became clear that we needed another solution.
the weight structure became monolithic, complicated, and messy, making it almost impossible to debug effectively, which you might be able to guess by looking at that.
Weights kept constantly getting invalidated due to both player and enemy movement, and enemies frequently bunched together because of this.
Most importantly, we saw from early internal testing that players immediately got scared as soon as an enemy went off screen, and shut down any kind of offensive or confident gameplay.
that they were engaged in.
It didn't look like God of War.
We needed players to build a mental map of enemy locations in the fight so they could feel comfortable in combat.
After almost a year of iteration, we scrapped the system entirely.
This time, driven by the badness of managing the complex weights, we changed the goal from picking optimal positions for each enemy to something far simpler, prevent enemies from getting into bad positions.
This led to a strict zone constraint-based positioning system.
The system required each enemy to have two elements, a positional constraint, which is basically where do I want to stand, and a separation constraint, which is how much space do I take.
As long as these constraints were met, no position was better than any other.
Both constraints would take the form of zones and would be fully data-driven.
These zones required a minimum amount of navmesh to be available.
Otherwise, more lenient fallback zones would be used.
Instead of using a grid that moved around Kratos, we generated a grid on the nav mesh in world space.
The positional constraint we used for aggressive enemies was this kind of crescent shape in front of Kratos to keep them on screen.
And you can see that in the image in red.
This particular shape played well with the camera's perspective and prevented enemies in the back of the zone from standing off screen as you move forward.
Non-aggressive enemies would just stand around Kratos in a wide circle, similar to old God of War, since they didn't care about being on or off screen.
Separation constraints, the one that specify how much space an enemy takes, had different shapes.
The aggressive enemies simply used a radius to define how much space they took, so no other creature was allowed to stand in their circle.
Non-aggressive enemies, however, had a wider, angled separation constraint that kind of looked like a slightly curved rectangle.
This shape was helpful to spread out the enemies laterally in the back, but didn't take up as much space, since they could be many more non-aggressive enemies at any one time than there could be aggressive ones.
This shape also meant that the enemies in the back could be seen behind enemies in the front.
You can see how this led to enemies being clearly perceptible by these two images, which show the same exact enemy layout, but from an aerial and an in-game camera perspective.
This approach had much less nitty-gritty control, but yielded far better results.
The zone data was easier to author and debug, and the simplicity of solving the constraints led to both less frequent and less noisy invalidation.
The constraints also caused the enemies to sparrow in a way that was much more visually pleasing.
However, it still wasn't perfect.
By making all aggressive enemies want to be in that crescent shape in front of Kratos, many of the off-screen enemies behind him who had recently become aggressive would walk directly into the back of him while trying to get on screen.
In fact, off-screen enemies in general were still really hard to track.
You didn't know where they were, and at any time one could turn aggressive and be a new threat from a blind spot.
Players still didn't have a mental map of the fight, and they couldn't play confidently.
And we relied on this version of positioning for a long time on the project.
In fact, it was only during the last few months during intense playtesting that we reexamined it and tried to address remaining issues that we knew existed.
We had to figure out how enemies could position themselves in a way that you would just kind of expect as a player.
We employed new techniques to help preserve enemies as being either on or off screen.
And that's to say that an on-screen enemy should only go off of the screen if the player caused that to happen.
Similarly, an off-screen enemy who turned aggressive should not be forced back on screen until you've looked at it.
And this was all done in logic that assigned the constraint zones to enemies.
Another technique we used was to keep off-screen enemies in their same world space-oriented quadrant relative to Kratos' position.
And this was just another zone constraint that they had to satisfy.
This way, enemies that you weren't actively keeping track of would stay relatively in the same area as you'd last seen.
So for example, an enemy currently in the back left of the player's view would stay in that general area.
So if the player turned right and put that enemy off-screen, they would know that the enemy was now directly behind them.
So here's a demo of the system with enemies who are not attacking for debug purposes, but aggressiveness as a system is still on.
Those are two different concepts.
I'll commentate on what's happening, but the main takeaway is to notice if the enemies move in a way that you would expect.
Take a look.
So here, both the green and yellow enemies are aggressive and want to stay on me.
And you can see that as I move around, they try to stay in that crescent shape.
When I move past them, they're offscreen, and their zone shape changes to be a much wider circle around the player.
Due to the aggression scoring, the pink enemy, who's now onscreen, becomes aggressive.
The green enemy stays on Kratos' right side, even though offscreen, due to the quadrants.
And similarly, the yellow enemy stays to his left.
The green enemy is still treated as offscreen until Kratos turns around, but once he does, it's back.
and in that crescent shape again.
And Aggressiveness switches between enemies super frequently with all that's happening in combat.
But overall, enemies generally stay where you'd expect them to be.
These key improvements, along with many other small changes, led to significant outcomes.
We were able to solve the on-screen, off-screen problem and prevent enemies from standing in awkward positions.
Quadrants were a huge success in making enemy positions more predictable, and were especially helpful in more complex environments.
Overall, these changes helped our goal of allowing players to make mental maps of the battlefield and begin to play confidently.
And this was evident in playtests.
I mean, players, whether they were aware of it or not, would start to feel confident enough to take risks and continue to be engaged offensively, even when handling multiple enemies.
To help players further, we wanted to make them even more aware of off-screen enemies and what they were doing, without it being so distracting that it shifted attention away from threats immediately in front of them.
We knew we didn't want to do something as overt as a radar or mini-map, so we experimented with off-screen indicators.
Most players just need to know if off-screen enemies were attacking.
But as they became more and more confident with the game, it was helpful to get an idea of where even nearby idle enemies were to best maximize their combat strategies.
This information could encourage them to be more offensive instead of hanging back all the time.
Early on, we tried flashing the edge of the screen closest to enemies offscreen, but players thought they were damage indicators instead.
Not ideal.
We tried many other implementations which involved the edges of the screen, but finally settled on changing them to be arrows which circled around Kratos and pointed more clearly towards the enemies themselves.
The red indicators are for incoming attacks, and the more subtle white arrows just show nearby idling enemies.
And it was important to design the white indicators in a way that weren't distracting for players who weren't trying to use them.
Range attacks actually had a slightly different purple color for players who paid attention.
But again, the goal was to not overload information.
If you saw a reddish flashing arrow, you knew something was coming.
And it's important to point out that the work done on the positioning system described earlier in terms of reducing the noise and invalidation of enemies made these off-screen indicators far more stable, predictable, and easier for players to process.
Our indicators help players track enemies off-screen, but what about enemies that are right in front of us?
Controlling the camera itself with the right analog stick in the heat of battle is an added complexity this time that we needed to help make accessible for a wide audience looking to play an action game.
We tried to find a solution for tracking enemies without relying on the player to constantly manage the camera by implementing our own version of a camera strafe assist.
The camera will automatically try to adjust and keep relevant targets and threats in view when the player moves left or right.
To do this, we wait enemies to find a center point for the camera to focus on.
In particular, evading laterally really showed this behavior in action.
We also eventually added a behavior to reorient the camera automatically in the direction of Kratos' attacks to ensure that we reduced frustration for players struggling with controls.
As many of you likely know, anticipating the players' intentions with how they wanted the camera to behave is a difficult task.
And we didn't always get it right 100%.
But our playtest proved, however, that these camera assists dramatically improved gameplay for most players.
And those who found them frustrating could just turn them off in the Settings menu.
Now that we've gone through systems that helped players track their threats, let's look at others which help players choose who they wanted to attack by diving into targeting.
In a common fight scene like this, which enemy should Kratos target when the player presses the Attack button?
Should it be the bandit on the right, because he looks like he's the closest?
What about the one in the middle, because he's in the center of the screen?
Or should Kratos just attack directly in front of wherever he's facing, without aiming at anyone in particular?
This is a pretty complicated problem.
Target selection is an extremely important system for us, since we need to allow players to fight multiple enemies at the same time fluidly, due to the one versus many fantasy.
It's a core part of our combat identity.
We needed to make this possible without requiring players to use a lock-on system, which was a directive all the way from the top.
A new challenge was also that the Leviathan Axe enabled both ranged and melee combat on the fly, and switching between them should be seamless.
A lot of time was spent on this problem in particular in order to get it feeling just right.
Let's start with melee targeting.
In old God of War games, with the pulled back camera, we relied heavily on the left analog stick to decide who Kratos should target with his attacks.
The problem with doing something like that for the new game is that we didn't want Kratos attacking into the camera if you pulled back on the stick.
One early approach we took was to kind of make it like a shooter and have it be entirely dependent on the reticle point in the center of the camera.
And this didn't work.
It wasn't intuitive for our style of game.
And players kept complaining, you know, like, why can't I hit that enemy?
He looks like he's right there.
We weren't able to get their intent across.
And the result was gameplay that felt clunky.
The solution ended up being a mix between both the left and right analog stick, as well as other factors.
And we'll take a look at it in action.
You'll see a green circle on whoever Kratos' target is at any time.
So in the beginning, all the enemies are out of range, and Kratos doesn't have a valid target.
As soon as an enemy comes into range, it becomes the initial target, and you can see that with the green circle.
The target will change as the characters move around due to a lot of weights that are determining the targeting system.
If we look at only the right stick and move that around, you can see that the screen centeredness alone will not pick the best target.
But characters completely offscreen can't be targets, and that's probably something you can imagine.
So inversely, if we only move the left analog stick, the stick deflection drives the intent, and you can see the target change as Kratos walks around.
And so as you saw in the video, we still try to retain the left stick as much as possible as being the main way to show intent, and because it kind of felt familiar to players.
And I'm not going to go into them in too much detail, but for those curious, here's a list of the factors that played a role in target selection for reference.
And feel free to take a picture if you want.
As long as there is a viable enemy candidate, the targeting system will always choose it over not having any target at all.
You can't choose to attack into an empty space instead of a valid target.
When there are no possible targets, Kratos will always attack directly forward along the direction of the camera.
You can't steer his attacks left, right, or backwards.
And it's also important that we fulfill the fantasy of being Kratos, right?
Like, we don't want him to miss his attacks clumsily when enemies are right in front of him.
So as with past God of War games, if Kratos has a target, all of his attacks are automatically rotated to face them.
One interesting issue that we saw within the studio during the development was that people control the camera really differently.
Cory Barlog, the game director, always had the camera flat, aimed right at the horizon line to get the best cinematic presentation.
Those of us who played the game correctly, of course, angled the camera down towards the ground so we had a reference point for judging distances.
Having gameplay that was on your side meant that regardless of how you played, we knew it felt terrible to attack and miss an enemy who looked like it was right in front of you, even if it really was a good distance away.
We reused an old God of War Ascension feature called Suck to Target on most of Kratos' attacks to help with this issue.
Each attack specified a range, speed, and stop distance which the engine would use to suck Kratos towards his target.
This would make it significantly easier to hit enemies.
But as with most older systems, suck to target had problems.
From this new camera perspective, the behavior often felt jarring and disorienting.
And this was especially true if an enemy was on the side of your screen and cradle sucked towards it laterally, since the same distance would appear to be much longer because, once again, depth perception.
Worst of all was the case where you would be sucked in only to still miss your attack because the enemy happened to move right out of range during that time.
So the old SuckToTarget had problems.
We had to update and change the behavior to help ensure that you reach your target at a specific time in the animation.
And this is kind of like a simplified form of motion warping.
To help with the jarring lateral suck problem, we scaled the range of SuckToTarget depending on the target's angle to Kratos.
The wider the angle, the lower the range.
This way, Kratos would miss his attacks more frequently against enemies away to the side of the screen compared to enemies in front of him, even if they were at the same distance away.
And we were pretty happy with the results.
Some of the examples I spoke to target in the video are obvious over large distances, but it's actually happening much more frequently than you might realize.
You'll notice it more when the camera is aimed downwards towards the ground.
As a fun fact, we actually toned down the suck distance dramatically for our hardest game difficulty, Gimme God of War, because we wanted players to pay more attention to their positioning in combat.
Once again, I apologize.
For our ranged combat targeting, we look to shooters for guidance on building both aim friction and zoom snapping.
Aim friction refers to the system slowing the reticle over targets as you pass them by.
And zoom snapping is a system which snaps the reticle directly to a nearby target when you pull aim.
As you can see, both of these systems were tuned very liberally, as we wanted to encourage players to mix ranged and melee attacks easily without hassle.
In doing so, we made it on the player's side.
Kratos could both swing and throw while attacking an enemy fluidly.
All right, I know, I know.
I talked earlier about how other games use lock-on and that it isn't very God of War.
And I meant it.
It was a directive from the top to make the game completely playable without a lock-on system, since managing lock-on can be cumbersome and frustrating for many players.
And honestly, for most of development, right up until really close to ship, sorry, G, we didn't have it at all.
In the end, however, we realized through playtest feedback that some players just always wanted lock-on.
partly due to the fact that they were already familiar with it from other games and kind of expected the same.
Players approached the game quite differently with lock-on, and that's OK.
But it also meant that we needed to develop a lock-on system late into the project that could work, even if the game wasn't designed around it.
And many players might have experienced frustrations with using the system for this very reason.
We used our already existing melee target as the initial locked target when the lock-on system became engaged, so the transition would be smooth.
The right stick could be flicked in a direction to change the target selection in screen space, as opposed to cycling through an ordered list, to make it a bit more intuitive when fighting multiple enemies.
we decided to allow players to adjust the camera's elevation even when they were locked onto a target, unlike most implementations of the feature, so they could still see elevated points of interest, or even just take in the environment without losing their target.
One particularly interesting feature we added to lock on happens when you pull aim.
We allow you to aim around freely, but retain your lock on target, so you'll return to it when the aim button is released.
Keeping with the goal of supporting fights with multiple enemies, this feature allows players to handle two enemies at once, even when using lock-on, as they could focus primarily on their locked-on target and occasionally throw their axe at the other.
Now that we've covered systems that help players track and target their enemies, let's focus on those which help players to continue to combat them once they had already been engaged.
To better understand this, let's take a minute to talk about animation translation and how it affects engaging enemies in combat.
I mentioned during the introduction that having exaggerated and fun enemy hit reactions, as well as strong attacks for Kratos, which move him forward through the space, were both integral to our combat system's identity.
These two concepts play into each other due to animation translation.
God of War enemies translate backwards substantially during hit reactions.
As a result, Kratos is always moving forward to keep up.
Eventually, Kratos and the enemy keep moving in one direction and cover a large distance over the course of a combo.
One problem is that animation translation like this was challenging with the new camera.
It's easy to knock enemies off screen to the left or to the right.
And zooming forward through the world is disorienting as you see the environment pass rapidly by you.
There's also the fundamental issue that in this perspective, moving forward is naturally disadvantageous, since you are reducing the amount that you can see of your surroundings.
On the other hand, moving backwards is naturally advantageous, as it allows you to see more.
And it's one of the reasons why players are naturally drawn to kiting or defensive gameplay patterns with this close camera.
We had to be careful with how we balanced forward movement of Kratos' attacks, which really helped them deliver their power and satisfaction, with the disadvantageous state that they often put the player in.
Because of this, we had to revisit how we author translation in many of our animations.
We reduced the translation of basic enemy hit reactions substantially from how they were made in the past, and even reduced the translation of some of Kratos' attacks.
But this actually worked out pretty well, since Suck to Target could still allow him to reach enemies with his attacks, and it also provided enough movement to give the satisfying oomph we needed.
But he wouldn't go zooming across the screen in an empty room anymore.
Playing around with all of this took a lot of trial and error.
And having the functionality in our design scripts to procedurally scale the translation of animations was incredibly helpful for testing outcomes with fast iteration speed.
This video shows the problem of highly translating reactions, causing enemies to go off screen.
The reactions themselves are fun and satisfying, but it's extremely frustrating to not be able to follow up on your target, with the added insult of having your target switched involuntarily back to another on-screen enemy.
And even worse, the enemy that you just beat up is sure to return as an off-screen threat in a few seconds.
Let me make this clear, we were punishing you for attacking with your combos and causing fun enemy hit reactions.
And that's the exact opposite of what our combat should be about.
All right, time to talk about one of my favorite features that we called Strike Assist and how it helps solve this problem.
In a stroke of pure brilliance, our then lead gameplay designer asked the profound question, what if we just kept enemies that were hit on screen?
Seriously, check out Jason's taking an axe to God of War gameplay talk when it comes online.
There's even an OG God of War trophy named after him, right?
Anyway, after a bit of back and forth, G and his programming team came up with something really cool.
And it looks something like this.
With strike assist, and bear with me for a second, attacks cause their victim to snap to an initial orientation at the beginning of their hit reaction, such that their adjusted trajectory will now go towards a blend between the camera's facing vector and their original trajectory.
And if all that was too confusing, all that means is that enemies are now pulled onto the screen if they were going to go off of it.
The larger the delta, the larger the correction.
Each attack can specify its own blend.
So some attacks can say, make the enemy go right to the center of the camera.
Or just pull it close enough so that it stays on screen.
Naturally, the farther the translation of the reaction, the more you'd see the effects of this.
There's a lot of complexity to this feature and how it was used.
But that's kind of the basic overview.
With Strike Assist, enemies stopped being hit off screen.
Successive attacks in a combo on the same target would pull it more and more into the center of the camera.
And since, if you remember, Kratos rotates to face his target when he attacks, this eventually led to both Kratos and his target translating back down the camera's direction, which was great for framing.
As a bonus, this made switching between melee attacks and range targeting easier.
as zoom snapping worked better if the enemy was already near the reticle, which is, of course, at the center of the screen.
This feature led to a bunch of other new discoveries as well.
See, players have control of the camera, so they could use this to aim where they wanted their enemies to be hit.
To be clear, this was huge.
Building up combat systems with this new camera had led to a new type of moment-to-moment gameplay and expression of player intent and skill.
For example, strategies such as intentionally herding enemies together before pulling off a massive runic slam attack, or moving the camera to direct an enemy to fly off the side of a cliff with the last hit of your combo were now possible.
And it was so intuitive through just looking at what you wanted to do that most players had no idea that this was even happening at all.
Strike assist may have possibly been the most important aspect in making the new combat system come together, and it was a huge victory for the team.
Apart from Strike Assist, we used a few other tricks to help players engage their enemies by allowing them to keep up the offense while enemies were already playing hit reactions.
Many of the hit reactions themselves would fire invisible collisions, allowing enemies to bump into each other and even hit enemies to their sides, despite there sometimes being no visual contact.
This rewarded players by helping them stay safe, since enemies who were bumped were sure not to attack until after they had recovered.
Another trick was disrupting enemy aggression.
The closed camera naturally makes Kratos and his target take up a large part of the screen real estate and obstruct the player's vision.
We realized that we would have to incentivize offensive gameplay even more if we wanted players to feel confident despite being able to see less.
Remember the aggression system, the topic I covered earlier about how we choose which enemies are active threats?
We made some simple tweaks to it to handle this.
If an attacking aggressive enemy gets interrupted and plays a hit reaction, it retains its aggressive tokens temporarily instead of relinquishing them immediately for others to use.
For a short period of time, that enemy would block other non-aggressive enemies from taking these tokens, but couldn't do an attack itself since it was already in a hit reaction.
And basically, that effectively gave the player a power play every time they were being offensive.
If they extended their offense for too long without worrying about other threats, they could be punished, but for a window of time they'd have the advantage.
In most scenarios on our normal difficulty, say against a pack of Draugr, only two enemies would be allowed to be aggressive at any one time.
This meant that the player just had to worry about one other enemy apart from the one Kratos was already engaged with, which isn't all that bad to keep track of.
Enemy air reactions specifically would prolong this effect for more time, giving you yet another bonus to keep your combos going, despite the threats around you.
Speaking of, at first, we didn't have enemies getting launched or juggled in the air due to the new grounded tone.
However, juggling enemies is part of the playing with your food identity we needed to retain, so we had to solve juggling for our new combat system in close camera.
The largest issue is that enemies can now be constantly hit upwards until they are above the camera and you can't see them anymore.
Not to mention, the Leviathan Axe had limited melee attack range.
And since we removed the jump button from this entry in the series, there would be no way for players to stay engaged on a target like that.
To make matters worse, juggled enemies took up a lot of real estate on the screen and included nearby threats, so players rarely felt safe while attacking them.
To tackle the first problem of enemies exiting the camera frame, we implemented a float height system, which could be used to tell an enemy how high it was allowed to go relative to Kratos.
If the root joint of the enemy ever went higher than the specified float height, some correction velocity would be applied to keep it in bounds.
And this could be tuned per enemy hit reaction by designers in script.
We tried to make this look as natural as possible, while still keeping enemies low enough where they were in range of the axe's melee attacks.
It's worth noting that to get this feeling right, we actually had to animate the characters falling instead of relying on gravity or physics, since the trick was that the bounce of juggling always had to feel good.
Enemy air reactions also warranted the same technique we used on ground reactions by having invisible impact collisions that hit other nearby enemies, except we made them much, much larger than their grounded counterparts.
Enemies who could fire range projectiles from afar, however, were still always a threat.
So players still had to be smart about when they should and when they shouldn't juggle an airborne target.
So after the long journey of development, what did this process yield for us in the end?
Was it possible to make a combat system within a close and intimate camera feel like an honest evolution of God of War?
Not all players might have shared the same experience, and there is still much room to grow in all the aspects I've covered in this talk.
But by and large, it was rewarding to see most players engage in our combat in an offensive and confident manner, despite the many issues posed by the new camera.
By keeping our combat identity at the forefront of all of our systems for tracking, targeting, and engaging enemies, we were able to work towards gameplay that felt satisfyingly familiar, yet fresh from a new perspective.
The result was a more deliberate and unflinching God of War combat experience that felt authentic to the franchise's legacy.
And this line of thinking and problem solving, in terms of breaking down your gameplay's identity and keeping it in mind at all times during development, can apply to other IPs in any genre, which are similarly going through a challenging reboot or reimagining.
Reaching our results took a very, very long time of more than three years of constant iteration and testing.
And this was a crucially joint problem between our gameplay design and programming departments and involved many talented people.
We needed designers deeply involved with the technical implementation and programmers invested in the design context and player experience.
And this was true for both on the ground work as well as department leadership.
As a result, these two departments work very closely with each other, both in terms of feature development and proximity at our studio.
Finally, the closed camera seemed counterintuitive to almost all aspects of God of War style melee combat.
When traditionally good design principles conflicted with vision, the team took a difficult risk and committed to the latter.
The process was challenging, and there was a lot of doubt throughout development.
But it was what the game needed to shine as a whole, what combat needed to evolve in a bold new direction, and at the end of the day, it's what made the journey absolutely worth it.
And that's the talk.
If you're excited by anything I've gone through today and would like to join us on our next journey, please get in touch.
We're hiring across many departments, including combat design and gameplay programming, and we'd love to hear from you.
Thanks so much.
It was a pleasure.
And now, Jeet and I can open it up to questions.
Man, these are bright lights.
Yeah.
Thanks for the talk.
I noticed in the Valkyrie fights, a lot of your priorities are opposite.
Like offensive is usually punished.
They love being off screen, so what was the process there?
Sure, I can talk a bit about that.
So the Valkyrie fights are kind of like the most challenging combat encounters, and they're all, apart from one, one-v-one encounters.
So because those are testing mastery, camera control is actually part of the mastery that we're testing in those fights.
A lot of the core fights that you're doing throughout the game with, let's say, Draugr, it's really just like getting in there and fulfilling that traditional God of War fantasy.
But with the Valkyries, it's like we want to test your mastery of your combat suite as well as the control of your camera.
And so that's kind of with regards to the second part of your question.
For the first...
And this is true also in past God of War games, that that kind of punching bag feeling of playing with your food doesn't necessarily extend to all enemies in the cast.
It's really what we focus on, what we call like the grunt class of characters.
And other characters that are beyond that, that are less kind of like playing with your food, the fun comes more from the challenge and the kind of pattern of play that they provide.
Thank you.
Yep.
Hey, really great talk, thank you very much.
So we heard a lot of good stuff about the new weapon, the Leviathan Axe.
I'm curious about everyone's favorite, the Blades of Chaos.
Did that have to get reinvented much for this, and did it affect some of the gameplay new features that you talked about?
Sure, so the question is, you talked about the Leviathan Axe, but what about the Blades of Chaos?
For this game, and yes, it had to get re-looked at a lot.
I don't actually cover that in this talk, but for a long time, the attacks with the blades in-game, we wanted to shift that up from the different camera.
And they actually had the blades in hand the entire time and not actually swinging out.
So you unlock them later in the tree, but the delay attacks where you're just swiping with the blades in hand, that used to be the core kind of base combo with the blades because it kind of played better with the camera.
But after we messed around with it for a bit, we were like, all right, this doesn't feel like the blades, right?
So we kind of swapped that and kept the original moveset on the camera.
But a lot of the systems that we have actually extended.
once we had made them work with the axe, they actually extended to the blades.
There's a bit of tuning and differences that we do, but we were able to reuse a lot of it.
Yeah, and so just from a sort of technical point of view, compared to the old God of War blades, the new blades had to be completely redone for this project.
Looks beautiful, by the way.
Great work.
Thanks.
Hi, I was wondering if you guys did any sort of partial rendered or not rendered kind of definition for larger enemies to determine whether or not they were on screen or slightly off screen in terms of the targeting and things like that.
So a lot of the targeting stuff is done.
We have, I mentioned in the talk, but there's like a root joint on every character, right?
And so a lot of the times, systems are doing a pretty naive check in terms of, is the root joint kind of on screen?
We do have a rendering check as well.
Different systems use different checks.
And actually, for positioning, I didn't get into this in the talk, but we don't actually, when I say enemies are on screen or off screen, it's more that are they in a frustum in front of Kratos' facing direction?
Because the camera moves so much that often you would invalidate the checks instantly.
So it's a good question, because it's actually pretty nuanced.
Checking whether an enemy is on screen or off screen, I think there's three different things that we do to check that, depending on the system.
Thank you.
And I think different systems need different ideas of what on-screen really means.
Like for positioning, you're going to want to do something different.
And then like Mihir mentioned with the camera strafe assist, that required a completely new version of what on-screen really meant.
So I think it is about trying to make sure the solution applies to the type of problem you're solving.
All right, thank you.
Hi, I'm wondering from a production standpoint how you guys may prioritize what you feel is important in combat, right?
Is it like some guy's running into a room and he's like, I want to be able to kill 10 Draugr in 10 seconds.
Like how do you deal with that when there's different enemy types?
Like where do you guys pull that inspiration from?
Sure, that's a really good question.
So at our studio, we have the benefit of a lineage of working on these kind of melee action games.
And so in a lot of directorial and lead positions, we have people that have gone through.
Many people have been there from God of War 1, right, that are still in the studio.
And so because of that, there's a bit of a history and a philosophy to how we design.
And the first thing on combat is that in a test room, you know, with one enemy who isn't fighting back, that should be a blast.
Like, it should just be fun to beat up that character and nothing else matters until we, you know, we haven't reached that.
And that was true on the project.
I mean, we didn't have that for a long time on this game.
And that was very frustrating because people would be wondering about, you know, hey, the rest of the enemy cast, like, why aren't we building that?
It's like, well, the Draugr isn't fun to hit.
So, why even bother doing all this other stuff if that's not going to be good, right?
Yeah, I think he pointed out the fact that we focus on the basics first, get your core working really well, and then in parallel, start to look at the finesse stuff.
So, like he mentioned, for a long time, we were just trying to get the basic attacks and the basic sort of Draugr core loop working well, and then there was a moment in time when we decided, even from a production point of view, that we are going to now start really focusing on combat feel.
And that's kind of where a lot of these ideas came from.
So this is where Jason and I would sit down and play the game a lot and really try to break down feel issues.
And at the same time, we were starting to do heavy play testing as well.
So having very, very scrutinized breakdowns of reviews just strictly around combat feel.
play testing heavily and then sort of also the design team doing a lot of internal reviews sort of gave us a really good perspective of what should be prioritized and what are the next steps that we're going to take.
Thank you guys.
Hi, thank you so much for your talk, it was very cool.
My question is more on like, how do you handle ranged attacks or ranged enemies?
Did you use the same system in terms of positioning?
And how much did level design play into this, into the combat design and vice versa?
Sure.
The second part of your question, are you talking specifically for ranged enemies or just in general?
In general.
Okay, so the first part of your question, Pretty much every enemy uses the same fight positioning system that we have, but the zone shapes can be changed depending on the enemy.
We do cheat a bit with some of the ranged enemies, where we actually have a behavior that we just call turret mode internally, and those are enemies that are stationary.
They just spawn in a position and they never move.
So in some areas we're able to kind of pepper them around, especially with a bit of verticality.
But otherwise, really, every enemy just follows the positioning system, even if they're ranged.
The aggressiveness system has some, takes that into account, so even enemies that are in the back, if they're ranged, they're allowed to kind of like, you know, their attacks can kind of seep through.
From the second part of your question, we actually have an encounters team between the combat design and level design team.
And the encounters team, they're focused on what will the fights be, what's the enemy composition.
They're kind of working very closely back and forth.
The exceptions are when we have boss fights.
That's kind of when combat designers and level designers really work closely together on a specific feature.
Cool. Thank you.
Did you ever want to Explore the area of giving players a rewarding way to attack an enemy that is off-camera or behind them Figured so sorry the question was did we ever explore?
Giving players a rewarding way to handle off-screen enemies. Yeah, sure like I think of like the enemies in Dark Souls who can fall backwards Yeah, I mean, we tried allowing Kratos to start sort of attacking much white, like getting outside of the main camera frustum.
And for the most part, like I would say the decision was more that it just didn't look very good, even from a fidelity point of view, sort of having Kratos completely turn around and start angling, you know, laterally through the camera.
That was one of the main reasons I would say that we decided to avoid that.
Yeah, the other thing is that we tried a lot of iterations on the quick turn, so that was like we had that in the game where you could just kind of quickly turn around.
And for a long time, we actually had a version of that that included an attack.
So you would do a quick turn around and attack an enemy.
But it felt kind of weird, right?
Because it kind of just auto, it did some auto seeking to find that target.
So if an enemy was here, you'd kind of like run around and then press the like button.
you know, it would automatically attack for you.
And that's not really a pattern of play that we were trying to encourage.
So we doubled down on like, no, like camera's a big part of this game and part of learning the combat in this game is learning how to use the camera.
Thanks.
Hi, you seem to have very clear objectives of what you wanted to achieve with the combat, even though you iterated on the techniques.
But how true was that?
Is it an artifact of hindsight in the speech?
How long do you take for you to please set clear your objectives?
Yeah, so Jeet kind of alluded to this earlier, and you might have more to say on this.
But for the first couple of years on this project, there was so much that was new and changing.
And it was very hard to move forward because we were questioning a lot of what we were doing.
But I said in there that in the fall of 2016, so this is after we had done the E3 demo, and people saw the vision and they liked it.
We're like, oh man, we could do this.
But everything still doesn't feel very good.
And that's when we started to step back and do these internal combat play tests on the team.
And that really, when we started getting a lot of data, we were like, OK, this is interesting.
And that's when Jeet and Jason really started meeting with Corey really frequently on being like, no, let's break this down.
Let's actually come up with a strategy.
So obviously, in a GDC talk, I'm going to try to couple things together.
But the idea wasn't far off.
It was a very targeted.
approach and like let's let's look at just targeting. What are we going to do about targeting?
Just get the intent right. Okay, what about juggled enemies? This air combat feels terrible, you know, like it was looking at those different things and tackling them.
And to Tamir's point, I think maybe in terms of pillars, I would say a lot of ideas kind of came back given that we started getting more confident in our ability to achieve and execute them.
So for example, juggling, it was something that, again, very much lines up with the idea of play with your food.
But there was a lot of resistance to it maybe early on because...
you know, we were still trying to just get the base stuff in a good place.
So I think the core tenants of kind of in the in the very first early slides where we kind of here laid out like what is the vision of God of War combat as a whole?
I think that still stayed true pretty much like we knew that as as being a fundamental kind of vision of what this would be.
It was more like, how do we really execute it?
How do we realize it under these new?
sort of in this new sort of framework.
And then finding our way through that was, you know, practically kind of all the solutions that we came up with.
Thank you.
Hey guys, you guys briefly touched on it, but how did all that kind of stuff change on the harder difficulties, like positioning and aggressiveness?
And how do you make that fair?
No, let me take this.
I could give a whole talk on this.
I s- we spent like two months straight towards the end of the project working on the difficulty tuning, um, which was not accounted for, so sorry production.
Uh, yeah, so- so we, um, a lot of us on the combat team are really big Devil May Cry fans, and so whenever we used to play Dante Must Die, we- we loved the way that difficulty was handled.
And so we, you know, at the time, our lead gameplay designer, Jason McDonald, he was like, you know, we're gonna make a hard difficulty and we're gonna do it right.
Like, we're gonna do it where it feels like a different game, and it's a different combat puzzle.
And so, man, I can't get into the details too much right now, but like, almost, man, like almost everything in the combat system is different for those difficulties.
far more than people would expect.
Like we even treat the stats differently on the different difficulties.
Like the stat tuning curves are completely different.
So your choices in what you choose to equip matter a lot more.
As just an example of something you might not have expected.
But yeah, it's.
Are they like more aggressive or?
On the aggression side, yes.
So remember that token slide that I said?
We changed the amount that enemies take.
So let's say if you have 10 tokens available and an enemy takes up four, then it's like, OK, well, only two can be aggressive at any time.
We would shrink that down to three.
So then you could have three enemies on you at any one time.
That's an example.
But in a more complicated way, we actually change up the attacks that enemies do on harder difficulties.
And we kind of make combo strings possible with enemies that they weren't able to do previously as well.
So it's like a multifaceted approach to overall change the experience.
Good, thank you.
Thanks.
I think we might have time for just this last one.
Yeah, very quickly, I hope I did not miss that in the presentation, which was great, by the way.
The amount of token that's available to the player, is it dynamic?
Is it where, where does this fixed number come from?
So the question is the tokens that the player has for aggression is that dynamic?
And the answer is actually no, but in practice, we change it on the enemy side.
So not on the player side.
That number is a funny number. It's a pretty legacy, honestly.
It's just a thing with God of War, even in past games, where there would be this number and we just kind of stuck to it.
I don't know, we didn't really change it too much, but we would kind of change the enemies, the amount that they took.
But it wouldn't be dynamic in the game.
It would be more that per difficulty we would change it.
Within the same difficulty, it never changed.
You can think of it as being statically defined on a per kind of a mode basis.
Okay, so it remains the same throughout the game, no matter your level, it's just like, okay, it's 12 now.
Yeah, for a specific cast member, it remains the same.
Okay, thank you very much.
Cool. And if there are any uh, more questions, I can take it in the, in a wrap up room. 3020.
Alright. So yeah, I'll head over to 3020 if there's any more questions I can take them there. Thank you so much guys.
