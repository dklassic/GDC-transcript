I'm here today to talk to you about a fairly unique position that we have at Bungie called the Technical Designer in Animation, and it's my job.
So, maybe you're here because you're looking for ways to grow your own animation team, or you're looking for another perspective on a job you're already familiar with, or maybe you're interested in becoming a TDIA, or maybe you're just waiting for the parties to start, but for whatever reason, thank you for coming.
So before I get carried away, let me talk about who I am.
My name is Jamie Jeffcoat.
I've been working on Destiny at Bungie for the past two and a half years.
My background is in computer science.
I have a master's in art creation for video games.
I figured that would help get into the industry.
And before all those years of college and master's degrees, I was a real person with real interests, like band and theater, and of course, most importantly, video games.
I was interested in every aspect about them, and I wanted to make them.
So that's why I'm here.
And so, let's get to the real beef of this conversation, what is a technical designer in animation?
I would show you a real, but it's kind of difficult to show you something that isn't obviously visual.
The things that I work on are things that you don't normally notice in a game, like animations not popping, or entering the vehicle from the correct side, or seamless enemy encounters and proper ammo count.
In a video of me reading a bug and identifying the issue, wouldn't really give you a good idea of what I do as a whole.
But I'll show you one anyway.
So, this is me, every day, reading bugs, fixing them.
I mean, it's not always just bugs, but this is a pretty good example of something that I would do on a daily basis.
Investigating the problems, finding the solution, fixing it, checking it in.
Even if I didn't want to, because it was really funny.
So...
And today I'll start by explaining what our name is, what our quest is, and how do we get across the bridge between animators, designers, and engineers.
So, what is my name?
Since I have to say the title of my job about a thousand times in the next 28 minutes, I'm going to shorten it to TDIA.
So, TDIA, hear it, know it, love it, need it.
But to understand how the role of the TDIA came to be at Bungie, it will help to give a history of how our team has grown and how we came into action.
So looking back at Halo 3, we had about three to five animators in a lead, with a third of an engineer working on about three hours a day with animation.
So it was a small team, and it lacked great support, but we made do with what we had.
Moving on, post-Halo 3, we were working on Reach.
The animation team, as you can see, was growing.
We have cinematics now.
And we also began hiring dedicated engineers to animation.
And our rigging teams were growing as well, to fit our growing animation needs.
So, one of our lead animators took a managerial role across the entire animation team.
And at this time, the role of producer was introduced as well.
Right now, animators are still using the old Halo 3 system.
Animations are blocked or bottlenecked from setup.
They're not able to see things in-game immediately, like jumps, damages, vaults, combat activities, vehicle animation.
We even had a system that automatically imported animations based off their names, so animators were in charge of things like spelling errors.
And other issues that we had were no animation blending to smooth out all of our transitions, and there was no live debugging tools to help the animators figure out what's wrong with their animations in the engine.
So, our animation manager, with all of her awesome experience and wisdom, says, hey, I worked on a fighting game once with a guy called a character scripter.
And whether you have experience on fighting games or not, you can probably predict that it involves a lot of coordination between designers, engineers, and animators alike.
So, we need someone to facilitate the setup.
And introducing our first TDIA, my boss, Joe Spitaro.
To introduce his background, he started in game design.
He moved on to animation, and he was also having a growing love affair with programming.
And so we hire him and throw him into the trenches of Halo Reach.
And he notices some systems seem a little broken, and there's a lot of work to be done.
If you actually would like to go into the GDC vault, my boss Joe Spitaro did a talk with the animation engineer Tam Armstrong, and they talk about how they developed the systems for Halo Reach.
And I'll have more information on where to find that at the end of my show.
And so, as the Destiny team began to grow and form, more animators and engineers were brought on again.
And Cinematics has become its own team now.
Even a spec ops team was developed to help bring our animated environments to life.
And so, as you can see, the team has grown quite a bit now, but there's still only one TDIA, and he's busy, to say the least.
So, until that fateful day in July of 2012.
I began as the second TDIA at Bungie, and I had heard of technical artists and technical animators and riggers, of course, but this position was pretty unique to me.
And though I wasn't sure exactly what I was getting myself into, it felt just right.
So we even found some other teams to sprinkle TDIA magic on, which brings me to the end of our introductory section.
And to wrap it up, I'll attempt to describe my job in a sentence.
So I think a TDIA is a cross-disciplinary bridge between designers and engineers who works to support and build the animated world of Destiny and sustain our content requirements.
We're the glue that holds the whole thing together between everyone.
So that covers our name.
Now moving along, what is our quest?
So, sorry, animators have their principles and designers have their pillars.
So I sat down with my team and we came up with our own pillars.
So we're here to liberate creative people, which for us mainly means animators, engineers, and designers.
We're here to reduce costs at all costs, bringing efficiency and harmony to the animation team.
And we're always looking forward.
A Latin motto that we say at Bungie a lot is per adasia ad astra.
Hopefully I didn't butcher that.
and which basically translates to through boldness, or through boldness to the stars, which is something our team is always preparing for.
So now let's elaborate on liberating creative people.
And in the case of the TDIA, I'm mainly talking about animators, designers, and animation engineers.
So, let's break down these people that I strive to liberate on a daily basis.
We'll talk about animators now, and how I understand their priorities.
They want readable silhouettes, clear communication to the player, and their stuff to not look broken in game, and with a decent frame rate to show it all off.
There's 12 principles of animation written by Frank Thomas and Ollie Johnson that have proven themselves in capturing great performance.
But in the world of video games, technical restraints and design limitations cause us to solve and find the best practices for getting these things into game.
To name a few things that you can imagine would introduce interesting design challenges, timing and spacing, anticipation, exaggeration, squatch and stretch.
But mainly, I think animators want to bring characters to life so the player can kill them or wish they could kill them.
And if you don't know who that is, you're probably better off.
But if you do play Destiny, you will definitely hate this guy.
So moving right along, we'll talk about designers.
Woo!
This presentation is getting ahead of me.
Designers have their own pillars, you know.
And in fact, when I googled pillars of design, a Bungie article was the top of the list.
So we'll throw that up there.
And basically, they want to focus on creating a fun and rewarding world that players want to be in, that feels new and shared by people of all skill levels or time availability.
They want the world to feel solid and responsive.
And they never want to let anything get in the way of what the player wants to do.
But in the case of most animations, designers are control freaks, with just cause, of course.
Fine-tuning fun requires lots of iteration, and we have to break these tuning controls into tangible and understandable bits of information.
And hopefully, you have a decent system to bend your content to your designers' wills.
I mean, just think about when some of those design requirements get a little complicated.
So enough about designers.
Let's talk about engineers. In this case, I'm mostly talking about animation engineers, but I've been known to rub elbows with sandbox or tools engineers on occasion. And working with engineers to verify content set up across all the systems can really save a lot of headache and heartache as bugs are being fixed or new systems come online.
I believe engineers want to bring the best animation performance to the console with the least amount of cost.
They write code that actually gets the animations into the game, and without them we wouldn't have any of this great animated biz.
So, liberating them and allowing them to concentrate on what's most critical to the game is always something I'm looking to help with.
But really, when animators, designers, and engineers get to focus on being creative, the team, the game, and the players reap the benefits.
So woo, let's get ready for some examples, people.
They're coming up soon to back up some of these claims that I'm going to make.
Prove that I can talk the talk and implement what I was just talking about.
So how do we facilitate this creative liberation movement?
Well, we liberate animators by unblocking animation content.
Our animators don't consider anything actually complete until they can see it working in game as they want.
We also strive to lift restrictions on creating content.
We find ways to simplify and speed up the process of going from animation to actually getting things in-game.
Also, we're capable of editing content.
I know my way around Maya well enough to make edits to an animator's content so they don't have to sweat the small stuff, like fine-tuning the character's root movement or fixing a character's neck position right before he ragdolls so it doesn't look broken.
We also connect the animators with other departments around the studio, or sometimes we even act as a shield.
But if they need to trigger, say, like a certain behavior, they want to test their berserk layers on a bad guy, maybe they don't know how to make that berserk layer trigger, but they can come to me, and if I don't know the answer, I would talk to the AI guys and figure out how to get that set up for them.
And so we also do desk side support, so animators can come to me at any time, pull me over to their desk, and I can help them set up whatever they're confused about.
So, now I'll delve into my first example on how we unblock animation content.
So, a common occurrence is the need to get a vendor or an NPC in the game, because you want to test and make sure the state machine is properly lined up with the environment, or he's playing the right idols whenever the player's not close, and then he pays attention when the player gets near.
So, to set up this kind of thing, we need to take the animation content.
And we put that animation content in a state machine, of course.
And all of this stuff is living within the actual character.
And another thing that we have to add to interact with their actual engine is a little AI tag that specifies the state machine that you want this guy to play.
So after that, I'll open up the level editor.
and we'll open up the level that we want to put this guy in, which is the tower.
And so I put a little spawn point in, and I open up the script, and I make sure he plays the state machine that we have specified.
And then once that's all done, after all that's set up, it leads to this.
Seeing the character perfectly aligned with the table, because that happened the first time.
And looking good, if I do say so myself.
I love starting with this example, because it makes...
The whole process looks simple, but I do have examples later down the line to show how some of these systems weren't always so easy.
So let's talk about designers. How do we liberate them? Well, we help them by having a deep understanding of the available systems. They can come to us and know that we'll have an answer, or at least know where to start.
We also help prototype ideas to estimate workload and find missing elements for things that they want to create.
And we can identify unique bugs by looking at the symptoms and knowing how all the systems work together.
And since we are designers ourselves, we do write tools to liberate ourselves as well.
We like to automate any process that we have to repeat more than once.
So now I'll talk about how I've prototyped an idea to help out a designer.
So, there I was, one day, the designer comes up and says, hey, I have this really cool idea.
I've got this level, and I want the player ship to be in it.
For the first time, you're playing the game the first time you see your ship.
But I want Fallen, these bad guys, to be sitting on top of it.
And I'm like, that sounds really cool.
And he says, yeah.
And then the player runs in, and the Fallen jumped down on top of him, and he has to fight him.
So I say, let's figure out how to do that.
So it brings us to the questions that we have to ask, like.
Where should the character be positioned in the animation?
Should he be where the ship is, or should he be positioned at the root of the file?
Where does the spawn point go?
Does it start at the ship, or does it start where he lands?
How should the physics work?
Whenever I set this up for the first time, I noticed a few problems, like the physics pill was colliding with the ship geometry and pushing the character out of the way, or the Fallen would jump straight through the floor instead of landing properly.
And how to achieve a perfect alignment with the ship was very important to make sure the animator's performance was sustained throughout.
This led to results.
So we ended up with a new AI physics setting for special cases like this, where we can allow the character to sit on top of a ship and ignore the physics for the time being.
We even later developed easier tools to help set this kind of thing up, as we saw in the previous example of putting the character in game and making him play something pretty simply.
And now these features can be used all over the game, and they are used all over the game.
And it all came from sort of setting this up to begin with.
So if you play the game, here it is.
You can see it as soon as you create your new character.
And there they are.
Jumping off the ship, it's so awesome.
So again, what did we do here?
How were we useful?
We unblocked the designer by prototyping one of his ideas, and we discovered the technical and design requirements needed to pull it off.
And so we helped create a better process for the whole game and entering those kind of situations.
So let's talk about liberating engineers, and how do we accomplish this?
Well, sometimes we program animation features.
In case an engineer doesn't have time.
Sorry. How do we accomplish this?
Sometimes we program animation features that the engineers don't have bandwidth for, but they still may be time-sensitive and quite important.
Something that we can figure out within the existing architecture.
We also create analysis and validation tools to make sure that our content is up to snuff and imports properly and works well.
Sometimes we translate those import error strings that spew across the screen when you're importing a character to animator-friendly language so that they can fix and identify their own bugs.
Also, we unblock new animation features by assisting with setup.
And so, as our engineers create more robust and efficient systems, that's where we would help them.
And so, another example is how I've programmed an animation feature.
So we had this vehicle enter and exit in idle animations, but we had no way to actually call them or put them in the game.
And so we needed a way to attach these animations to the character, organize them between enters, exits, left, right, idle, and we needed to select the correct animation at runtime.
So I took this content, and I wrote a schema that organizes and holds all the information.
Enter, idle, front left, back right.
And I wrote import code that reads from all of those schemas.
And, uh...
And so, once that import code was implemented, I had to go into the runtime code and make sure that I'm selecting the correct animation once the character enters the vehicle.
So...
Entering to figure out whether the character is on the left or the right uses vector math using the position of the vehicle and the character.
Exiting uses the direction on the joystick that the character is pressing at the time. And general cases were set up because combatants use vehicles as well.
So that leads to things like the characters coming out of the drop ships or this awesome PvP scramble with multiple vehicles.
So now that we've talked about liberating the creative people and who they are, let's move on to the next topic of reducing cost.
Cost can mean a lot of things, and it definitely has a broad definition for my team, but to name a few examples, runtime cost, like memory performance or performance of animations in the game, or even production costs, like creator time, my time, or bug fixing time.
So there are several ways that we reduce costs, and our skill set allows us to improve workflows of animators and designers.
If something needs to be repeated, make a script for it.
And if an error is causing a big risk to data, automate out the chance of mistakes.
Since there are so many steps to cover for an animator to create their animation and get it into the game, optimizing pipelines feeds up animators and designers alike.
Collecting animation data can mean many things.
Sometimes we use it to find out how much memory our animations take or which animations are going to be in use.
Either way, we can save a lot of memory by keeping track of this data.
But keeping track of that data isn't really useful unless we're constantly finding ways to optimize it.
So in the world of Destiny, we want to be able to reuse content wherever possible while adding things on to make it unique.
Quickly prototyping designers' ideas, as demonstrated earlier, saves a lot of time.
When they can recognize a new idea may require technical support.
It's great when someone on my team can help discover the things that are needed to make that happen.
And by facilitating good communication between departments, we speed up interactions by knowing who to contact.
But we can also identify unnecessary meetings.
And though this is certainly not a complete list, it sets us up for some awesome examples for reducing cost.
Here's an example of how we've improved the workflow.
We don't always solve these problems before they happen.
Sometimes, only after fuddling through a process over and over do we find the golden path and how to improve it.
But that's okay, because it's better late than never, right?
And so one way TDIAs have worked with animators and tools engineers is to improve the workflow of creating state machines.
And so as I described earlier with the vendor on the table.
So, we have our old way of setting up animation, and it's not pretty, guys, but I'm gonna show it to you anyway.
I mean, I thrived in it.
All those nested references pointing to indices, it made sense to me.
But you know what's not fun to look at all day when you'd rather be animating?
This stuff.
So, whenever it came down to it, we were mostly the people setting up these systems.
But we needed something to improve and simplify this visually, so animators could create their own state machines.
We needed something that would represent each state, all the transitions it could have, and all the rules between them.
So, are you ready for the result?
Here's the exact same state machine we were just looking at, but in the new and improved view.
And now, you can tell that it starts in an idle activity, and then it can exit fast, and then it goes into combat.
And this can even scale up to more complicated versions of state machines, like this one, which still maintains visual clarity, and at least it's a lot better than what we saw before.
You can tell that this one has a couple of idle variants, and then can go into a couple different exit states, depending on whether it was interrupted by the player coming up to it or not.
So the top one, it'll exit if the player's not around.
he can just go back into patrolling, and the bottom, if the player interrupts him, he'll go into combat.
So, here's an example of how we've optimized data to reduce cost.
Here's a script that I created actually recently to find unused data that we were finding in our system.
Our player and our civilians had all these animations that were created for prototype content but weren't actually being used anymore.
So we want a quick way to find them and delete them and figure out what to do with all that space.
So, in my script, I get a list of all the clips, and then I s- and just all those clips that it says are used, but they may not be.
And then, I scan through each animation feature, and if the animation is referenced, I just take it off the list.
Pretty simple.
And then that leaves me with a list of unused clips, which is awesome, because now we can decide which ones to remove and how to handle all that new space that we just made.
So that wraps up our reducing cost pillar, which finally brings me to my last pillar of always be looking forward.
Destiny is a game that's meant to be worked on for many years to come, with expansions coming out on a fairly regular basis.
It's one of the fundamental aspects of my job to always be looking forward, but not just for long term.
Sometimes we're trying to figure out what needs need to be met next week.
So, what should we be looking into?
Preparing for sequels, of course.
We need to anticipate the needs of the future.
And make sure content is robust and reusable throughout the entire course of production.
We also must strive to understand how all the systems work together in relation with animation.
And be familiar with even things beyond that.
And with every problem, we must brainstorm a solution.
You may not have time or resources to fix it now, but you will find time later.
And this is one of the most important parts about our job and always looking forward is to always make ourselves obsolete It may not sound very appealing to strive for this kind of thing, but despite our attempts. There's always more work to do Sometimes this is done simply by making really well documented guidance that an animator can reference in order for them to unblock themselves on creating Or setting something up We also find inconsistencies with our tools or engine, finding where things can easily go wrong and removing them from the process.
Also, we want to find processes that aren't ideal or interfaces that aren't easy to use.
How can we improve these, and how can we reinforce the first two goals?
And on occasion, we get a chance to design better tools, much like the example with the state machines earlier.
how we reduced the overhead cost of creating them.
But all of these goals for looking ahead reinforce our first two pillars of liberating creative people and reducing cost.
And so, unfortunately, we're running short on time, so I have time for one more example.
And here's a fun way I made myself obsolete by anticipating the needs of animators to debug their damage animations.
So, we start with this character.
And the animator notices he's not playing the correct headshot animation when he gets shot in the head.
And so, normally in our engine, we don't have any way to see how the engine interpreted this damage.
And so, you just had to dig into the old content spec, like I showed you earlier with the state machines, and you had to dig through that.
Maybe a left or a right, or a body was set to a head or something, and just something might have been set up wrong, and it was really difficult to dig in there and figure out the problem.
So, I decide to look into the code available for debugging at runtime, and I start poking around.
My experience earlier from the vehicle setup sort of kick-started my idea of using character positions and the vectors around them.
So why not apply it here too for more informational reasons?
So I find the position of the character, and I figured out how to draw this sweet circle at the bottom.
And then I get a little carried away by adding lines that correspond to the data that the engine has been fed to give the result of the damage animation.
And along with that, I represent the line where the damage came from.
And I even got more carried away and added a line in the 3D space to show exactly where the bullet was coming from and the path that it took to hit the character.
Here's a couple shots of the tool in action.
And this allowed animators to debug their animations with a full arsenal of knowledge on the screen.
And they can identify the problem themselves easily, something they weren't able to do at all before.
So that wraps up the end of my always looking forward section, which brings us to the final section of this presentation, is getting across the bridge between animators, designers, and engineers.
So where do we fit in?
Your team may already have one.
Perhaps a combination of people are doing this.
Or worst case scenario, your team doesn't have time to deal with this type of issue.
So, which department do we fit in?
Well, we're considered part of the animation team, but we're labeled formally as a technical designer.
And our cross-disciplinary skill sets do vary.
Some of us are stronger in animation and engineering, or some are stronger in design and animation.
But whatever combination, we're definitely well-suited for this kind of role.
And theoretically, where do we go?
Well, we're a bridge between animators, designers, and engineers, right?
So, really, where do they put us in the studio?
Here's actually a cropped version of our studio floor plan, and you can see in the bottom left that we're nestled right between the animators and the engineers.
And there's even a cinematics TDIA, and the guy up there in effects helps support the spec ops team.
And as you can see, the open floor plan allows us really easy access to designers across the rest of the studio.
So what makes a good TDIA? I think we should be spongy. We should soak up bits of information everywhere across engine setup. Content, miscellaneous elements, of course basic systems. We should have a breadth of knowledge. It's key to finding the answers to any given problem. A good TDIA should be proactive, finding problems. They should be outspoken.
One of the best ways to reduce costs and improve communication between teams is to speak up and speak often.
It not only helps get the job done quicker, but it instills confidence in your team.
We're also leadership ninjas.
Our cross-disciplinary aspect of our role...
really makes us a good point of communication between a bunch of different people.
And also having a flexible schedule, knowing our priorities, and being available to animators, engineers, and designers alike make us an available warrior for animation.
So, in review.
What's our name?
We do code, or we're a technical designer animation.
We code, tools, runtime, in-engine setup.
We're a designer.
We prototype ideas, set up encounters and abilities.
We're in animation, verifying requirements, supporting animators, and editing content whenever necessary.
And our goals on the daily are to support the game, the team, unblock content, and facilitate communication to kick butts and take names.
And our future goals are...
are to think about ways to improve existing systems while hoping to create a better animation system in tools and run time, while planning a smoother and simpler experience between working with all the departments.
And so thank you very much for coming to my talk today.
Here's the information I had promised about the two talks I mentioned.
And thanks for coming everyone.
I hope this is useful.
Are there any questions?
And I believe we're out of time, so we may have to take them in the question room.
But yeah, thank you so much for coming.
I'm so sorry I ran out of time.
