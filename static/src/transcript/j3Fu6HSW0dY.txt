Digital board games are fortunate to ride on the shoulders of giants.
Their source material often has thousands of fans, millions of hours of gameplay, robust rule sets, well-developed art styles, all before a digital version has even been conceived.
But despite these advantages, bringing a beloved board game to the digital realm has its share of challenges.
Players are going to demand features like asynchronous gameplay and robust AI opponents.
These are features that might not have been considered in the original board game design.
Features like tactility and table talk are difficult, if not impossible, to reproduce online.
But digital adaptations can offer some unique features of their own.
So things like real-time bookkeeping, embedded rules references, and contextual prompts.
These are some of the tricks from the TempleGates games toolbox in digitizing some of our favorite board games like Race for the Galaxy.
Roll for the Galaxy and Ascension, and hopefully some of these will apply to your games that you're working on.
Just to give a little bit of context, this is Race for the Galaxy.
It's an engine-building card game set in space, where players are playing cards to place developments, settle worlds, and build the most prosperous empire.
This game was designed by Tom Lehman, who is in the back there, he's pretty cool, and published by Rio Grande, and it's since sold about a million copies and more around the world.
And my team has been responsible for digitizing this for PC, tablet, and mobile.
So three things you're gonna think about when you're digitizing board games, source, quality, and delivery.
Your source, what is the game that you're gonna be choosing?
Quality, what are the features that are gonna go into that game?
And delivery, how are you gonna deliver those features?
So for Source, how are you choosing the game?
Realistically, this is going to be based on licensing rights.
But that being said, what's fun in an analog board game is going to be really different from what's fun in a digital board game.
So not all games are going to translate well.
It's going to be a subset of board games that are out there that are still going to be fun on your phone.
So things like having one player feel like the expert for 15 minutes as they're explaining the game to their friends.
That's not really practical online.
Most of your online players are already going to know how to play the game, or they're going to just jump into a tutorial when they pick up the game on the App Store.
Also, tactility.
So those gorgeous glassy gems or pewter tokens that you're rolling around in your fingers between turns, those are not available online.
And those are really fun.
You're not going to be able to be upgrading your components with things like a broken token.
Or painting minis online.
So you want to choose a game that's not wholly reliant on these physical game features.
A game like Super Fight, in which you have players arguing back and forth about who would win an imaginary battle between characters, that's really reliant on Table Talk.
And ironically, Table Talk is a feature that mobile board games are not really great at, which is surprising because phones are used for talking.
But players don't necessarily want to be chatting with each other on a mobile game.
It's expensive to moderate and players are not expecting the chat.
Or a game like Mancala.
This is a game where you're going to be reaching into the cubbies and distributing tokens around a board.
And that feels really good, but if you have no tactility, because you're missing that, is there enough still left to make a digital board game out of it?
And you want to lean into a game that's going to really rely on the features that are fun in a digital space.
So things like AI.
Things like asynchronous gameplay.
So Race for the Galaxy is a Tableau builder, which means you're playing a bunch of cards in succession as permanent cards.
Those cards have a lot of information on them.
And that means that the AI can look at that information and make meaningful predictions based on that information with high degrees of surety.
And so that's a game that really works well with an AI.
That's in contrast to something like a deck builder.
like another game I've worked on, Ascension, because in the deck builder, a lot of that information is going to be hidden away in a player's hand, or it's going to be random through the deck.
So you might have performance issues with your AI trying to make predictions there.
So choosing a game that takes advantage of these features takes advantage of things like asynchronous.
Your players, so asynchronous gameplay can be kind of controversial.
Some people think that board games are meant to be played at a table with people in real time and I think there's a lot of value to playing that way, but realistically if you're digitizing a board game, many of your players are going to want to play asynchronously.
If they're stacking up games five or ten games deep, you want to make sure that those games do not feel repetitive to the player.
So one way you can avoid that repetition is choosing a game that has really different end game states.
So in Race for the Galaxy, you might have a rush military state at the end of the game, and that's how you win.
Or you might build up a production engine.
And there's a lot of different kinds of strategies towards winning.
If you're going to have a different end game state, it probably means that on your way to getting there, it was different as well.
So the path is going to be variant as well.
So Rays sometimes feels like a complex game, but in actuality, you're not making a lot of different decisions at once.
It's more of a stream of isolated decisions as you play, and it doesn't matter if you haven't played the game or if you're not familiar with it, but it's just a stream of isolated decisions because the game is broken up into phases.
So you're making a choice, then you're executing it, then you make another choice, then you execute, then you make another choice.
And what that looks like in the game is, let's say the player's choosing an action.
They can choose explore, develop, settle, consume, trade, or produce.
They say they chose develop.
They choose develop, then execute.
Then they choose what card are they going to develop, then execute.
Then they choose how are they going to pay for that development.
What cards are they discarding?
And then they execute.
Because of that path, that stream of decisions, you can add a prompt into your game.
The prompt is going to tell them during the execution what they're supposed to be doing.
And this is really good for digital board games for a couple reasons.
One, it reduces analysis paralysis.
But two, it's really great for those asynchronous players who have stacked up a lot of games at the same time so they can come back and see what they were trying to do.
It just softens that re-entry for them.
This is in contrast to a game like Command and Conquer.
Now, it's not a board game, but it has a really different sort of path to play.
In Command and Conquer.
You can open up the build menu, and you might have hundreds of choices of what building you're going to make.
And that's not really necessarily related to the next choice that you make in the game.
So there isn't this stream of choices.
And so it might be more difficult for a game like that to offer a prompt that tells the player what to do next, because it's not necessarily clear what they're trying to do next.
So that's a little bit on how to choose a game that you're going to digitize.
Quality, what are the features that you want to implement in your digital version?
There's a lot of really neat features that you can get away with digitally that you can't in an analog game.
One thing I see players who play board games, one thing I see them do over and over, and I do this myself too, is they don't take advantage fully of the abilities that they've accrued throughout the game.
A lot of times this happens to new players, because there's a lot of information.
It's a lot to juggle, and you might forget something.
So if you have a card like Interstellar Bank.
in Race for the Galaxy in play in your Tableau.
This means any time any player has activated the second phase, you're gonna get to draw a card.
Now, players might forget this if they're playing around the kitchen table with their friends.
But digitally, you can just draw the card for them.
Or, you have a choice as a developer if you want to, if you, once you can prompt them to draw the card.
So you're gonna make that decision because You're going to want to have a balance between how much you're automating for the players and how much you're letting them do themselves.
But either way you solve it, your players are going to have confidence that they're not going to accidentally screw themselves out of a win because they've accidentally made an illegal omission of following the rules.
Another thing I see happening over and over with people is that they just learn the rules of the game wrong.
board games are often taught by a player to another player who might teach their friends, who might teach their friends.
And because of that oral tradition in learning the game, little mutations in the rules can sneak in.
And I can't tell you how many emails I get about bugs in Race for the Galaxy where it just turns out that people have been playing the game wrong for years and they didn't realize it.
But, you know, those emails are really helpful because they can help you identify pain points.
So in Race for the Galaxy.
This one in particular came up a bunch, where players were confused on why they couldn't play a particular card.
Now, the rules of the game state that if you already have a card in your tableau, you can't play an identical copy of it.
But by paying attention to where people were confused, I was able to patch in this treatment, which is a little bit of a dimming out.
And that just manages expectations.
Players see it's dimmed out.
When they try to drag it into play, it doesn't work.
But they can see there's a reason it didn't work.
It was dim.
And there is kind of a bonus feature in this, in that when players are trying to figure out what are they going to discard, they can just easily discard any dimmed cards.
They don't even have to read them.
They know these are not going to be legal cards to play in the future.
So what other features should you be implementing in your digital board games?
You don't have to be creative.
Your players are going to tell you exactly what they want.
So David Newman on statelyplay.com posted this multiplayer manifesto.
It details about 20 different features that are seen as baseline mandatory to include in any multiplayer board game.
These are things like ELO, log, server status, timers, notifications, et cetera.
So we hadn't planned to implement all of these features when we first rolled out our Race for the Galaxy schedule.
But we posted the beta to boardgamegeek.com, and the resounding response from the community was that they wanted more of these multiplayer features.
So we ended up spending about four more months.
developing these and it was over half of our development time on these features.
If you're following this manifesto and you're implementing features like asynchronous gameplay, you're going to have players who are stacking up those games at once and you want to support players being able to seamlessly glide from one game to the next.
So they can enter a game, take their turn, they're waiting for their multiplayer opponent to take a turn, just hit a next game button to take the next turn.
wait, next game, et cetera.
And the question came up, what do you do when a player has no more multiplayer games queued up?
There's a couple things you could do as a developer.
Oh, shoot, I should plug in my battery.
There's a couple things that you should do as a developer.
You can, hopefully it's fine.
You can either prompt them to create a new multiplayer game.
And that's great, because you are going to want to populate your multiplayer lobby with lots of games for lots of players to join into.
But there's actually kind of a cap on the capacity of games your players are willing to play at once.
There's a sweet spot somewhere between five and 10 games.
They don't really want to be juggling more strategies.
It's a little much.
So you can pop them into an AI game.
And at first I thought about, well, do I want to open up a configuration screen where they can choose what expansions to play or how many players they want to play against.
But I ended up just implementing a very seamless, popping them into a game that uses the last configuration of a game that they played.
So it sort of just glides them into something.
They don't have to think about it.
And that will just let them take turns while they're waiting for the next multiplayer opponent.
And I thought that worked out OK.
So what are you going to do with all these different stacks of multiplayer games that are accruing?
Are you going to display those to your players?
Are you going to put them in the lobby?
At first I thought, no, I don't think so, because that's just going to be spam.
It's going to be a lot of information.
People can't necessarily engage with a game that's already in progress.
But I've since changed my mind.
Because what happens is if your matchmaking code is doing a good job at sweeping players quickly into a game, then the games fill up really quickly and you don't have a lot of games there so if you had a new player who just steps into the lobby there might not look like there's a lot of games going on. And so you're broadcasting an artificially low level of activity to your player community.
So since then I've started adding more of the multiplayer games into your player lobby. And I see this kind of stuff everywhere now. I see it in Magic matchmaking, I see it in server lists, I see these games you have absolutely zero functionality.
You can't join them as a spectator.
You can't join them as a player.
But it broadcasts an activity level that encourages your community, feels more vibrant, and I recommend doing it.
So after implementing all these features from the multiplayer manifesto, at least half of our code has been dedicated to things like Friends List, storing asynchronous game data, Elo.
Did it work out?
Was it a good idea?
At launch, only 5% of our players were engaging with multiplayer.
So we had ended up spending about half of our development time on something that only a very, very small minority of people were actually using.
And that was a pretty big bummer.
Eventually, that number has grown to 25%.
And it's still growing.
I definitely do recommend investing in these features.
Because even though this is a vocal minority, these players are going to be the ones who are driving your community forward, they're going to be the ones who are posting tournaments.
They're going to be the ones who are posting YouTube videos and moderating your forums and posting a lot of stuff that's going to encourage your community to thrive.
That being said, if 95% of your players are playing in AI games at launch, you're going to need to have a really robust AI to encourage that replayability of the game.
This is something we do with temporal difference learning.
Our AI is driven by a neural network.
If you're interested in more about that, I'm going to chat a little bit more at 440 today about that.
But either way, I definitely encourage you to check out kelden.net slash rftg.
This is the open source neural network AI that we used in Race for the Galaxy.
If you're working on a digital board game, it's something that you can look at the code and see if this is something that's right for your game.
All right, and finally, delivery.
So how best to deliver some of these features I've been talking about?
First I'll talk a little bit about animation.
You have a trade-off between speed and legibility in your games.
You have to figure out how fast you're going to animate everything.
If a lot of your players are playing against AI opponents, how fast are you going to show those AI opponent moves?
And what are you going to show?
If we paused by the onesies and showed every single victory point shit, or every single card that was acquired by a player, it would be really monotonous.
And actually, a lot of board game apps do this.
And we started this way.
We had a script that executed, and we would just show every little thing flying across the screen one at a time.
Then I asked myself to dig a little deeper.
What are we trying to communicate with these animations?
If you think about sitting around a kitchen table playing board games with your friends, there's animations there.
You see.
when the cards are dealt out to each player.
That's the initialization of the game.
Or you see maybe when the deck is depleted and you have to reshuffle it.
Maybe that's like the halfway point of the game and that's a signal to your players of a state change in the game.
So, Race for the Galaxy has simultaneous turns if you've played.
You know that every player is doing their turns at once and as a UI designer, it kind of feels like this.
It's just like.
sort of crazy intersection where victory points and cards are flying all around.
And trying to make that clear what's going on to your players has been a challenge.
So we we came up with a system of locking attention tokens.
And what this really does is it helps us triage the events in the game to focus on vignettes, to focus on the moments that really matter to the player.
So if you have something.
that is a really important moment.
Let's say the AI is going to take over one of my worlds.
That's a really big moment.
I want the player to pay attention to that.
That event grabs the main attention token and locks it.
And no other event that would grab that main attention token can proceed.
They get queued up behind it until that event has finished animating, and then the next things can go forward.
At the same time, there are a system of lesser attention tokens for things like the draw deck and the victory point pool.
And these can proceed forward without detracting from the main vignette that you're showing.
So you can see here, as the cards are drawn into the player's tableau, nothing else major is happening at that one moment.
But even when you're doing this triage, if you do a system of locking attention tokens like we've done, you have to figure out how fast you're going to animate things.
A lot of people working on digital board games have a video game background.
I worked on.
Spore, SimCity, and the Sims.
And I think that's probably pretty common.
And we know, as video game developers, how to make pretty animations and 3D characters and clever dialogue.
But for board games, a lot of that stuff really gets kind of in the way.
Your players that are stacking up their asynchronous games are just going to want to make decisions and get that rapid decision making and build their mastery of the game.
So they're not necessarily going to want to have a cinematic moment or have a character pop up and chat with them.
So as a result, you're going to want to offer a slider, even still with the triage, to make your animations go really fast.
Now with the slider, to make your animations go fast, you have to determine what animations are affected.
So traditionally, with video games, there's two animation speeds.
There are things that happen at game speed, and there are like the dragon flying across the screen.
That can be really slow.
It can be really monumental.
And then you're going to have UI speed.
And that's really lickety split.
You want that to feel fast and immediate for the user.
But with board games, how do you make that distinction?
Everything in a board game is basically UI.
And you really want to focus on what is reacting to a player.
Is a player clicking a card?
Is a player examining something?
Those animations need to be exempt from your spider.
If your slider is set to slow because the player is going to learn a lot of what's going on, they want that slow animation teaching them, you still want to have some lickety split reactive animations.
So visually, board games can be really laden with symbols and iconography.
Race is no exception.
And typically, if a player doesn't understand what a particular symbol means, they're going to consult the rules, or they're going to ask a friend.
But in digital land, you can embed the rules right there within the game.
So this is what it looks like for Race for the Galaxy.
I put the plain text of what is going on with the rules right there.
And you can expand any card in the game and figure out what the symbols are trying to tell you if you don't remember.
Now, this helper text isn't new.
If you remember old Macs, they had the little question mark icon in the corner.
And that could be dragged to anything on the desktop to get a little bit more information.
Eventually, this evolved into tool tips, which are really handy.
But tool tips cannot necessarily accommodate the volume of text you want to communicate in a board game.
So we started adding this just on cards.
And then we added it on goals.
And eventually, we started adding it on the phases as well.
We started putting it all over the place.
And even though we kept wanting it everywhere, we weren't prepared for how much our players wanted it even more, to the point where in the beta, one of the biggest requests that they had was hotkeys or swipes so they could cycle through this information.
Because as a developer of a game, you see the game every day, you play it all the time, you know how to play the game.
But it's easy to forget how much new players are gonna really take advantage of this information.
So.
Think about something like Magic the Gathering.
They have keywords, right?
This basilisk has death touch, and on the left, you can see this card has an explanation of what that keyword does.
Any amount of damage this deals to a creature is enough to destroy it.
On the right, there's a different version of this card, and they didn't explain the keyword.
So they have to make this trade-off of whether they're going to explain it or not.
They want to sprinkle it in enough so that players can remember what the keywords do, but they don't want to do it too much because they have to reduce the font size to accommodate it.
They might not be able to put other abilities on the card because there's not enough room.
It just clutters things up a little bit.
So in digital land, you never have to make that trade-off.
You never have to decide.
You can always have the inspection available to your players for board games.
And then just as the player masters the board game and doesn't need it, they just never go into the inspection mode.
So pretty soon, we started wanting this in all games in general.
Like how cool would it be if you're playing League of Legends, and you could just double click Zoe and know that she does a bunch of burst damage before having to learn the hard way.
Embedding rules references like this really alleviates a lot of the burden on a player doing that big teaching session right up front at the beginning.
Usually you're going to learn a board game for 30 minutes, and it can be a little bit of a slog.
So with video games, typically a lot of these rules are embedded in wikis that are external to the game.
So if you're going to play Minecraft or Kerbal Space program at the highest levels, you're going to be accessing wikis.
It'd be really cool if some of this information could be accessed right within the game.
Now we're able to embed rules references with the cards because we draw all of the cards on the fly.
So for any given card in Race for the Galaxy, we're programmatically turning on and off about 50 to 100 different pieces of UI at a time.
And the reason, there's a lot of reasons to do this.
Here's four of them.
If you have a card like Ancient Race, this is a starting world.
And it has a starting world condition.
You have a little bit thinner of a starting hand.
But you might draw this card mid-game or late-game, in which case it's not a starting world.
We can just programmatically turn off that piece of UI that's related to the start of the game.
So you can have a little bit of contextual information on whether you're going to show UI or not.
Also, it's really great for localization.
If you're programmatically drawing your cards in your game, you can easily translate them on the fly.
Also, if your players have different configurations enabled, if they're turning on and off different expansions of your game, or let's say some players really like takeovers in Race for the Galaxy, some players don't.
If you turn off takeovers, you can just never show any takeover UI to the players who don't wanna play with them and it cleans up the game quite a bit.
And finally, drawing cards on the fly is gonna save you texture memory.
which is actually a really big deal if you're making a board game in mobile because you have a lot of card art, it's going to hog your texture memory.
Any savings you can get with reusing borders or icons is going to be a big deal.
In Race for the Galaxy, we're on our third expansion now.
We're already having to start to move to a streaming texture solution because we're basically out of space.
So, our UI is a little bit insane.
This is the main UI for the game.
You want to design your UI so that it can accommodate a very full end game state.
And we do this by having recursively nested UIs, where we populate them into cards, into the tables, and that can accommodate different aspect ratios, which is the fun of making mobile board games.
Super fun.
And you might say, Teresa, that's crazy.
That's a lot.
Why not just not put everything on the screen?
These are a couple of my other favorite mobile board games.
This is Agricola and Lords of Waterdeep.
In Agricola, they have a pagination system.
So you can paginate between your farm and your opponent's farm and the worker placement area and get your information there.
In Lords of Waterdeep, you can scroll around and pan around across the screen.
And I love these games, but my problem with both of these solutions is that you're tasking your player to memorize a lot of information so that when they're making a decision, they have to pull it from memory rather than seeing it right on the screen.
In Race for the Galaxy, we tried to give you as much information as is relevant to your turn immediately available to you visually.
And we did that by having this system of abstracts, or little summaries of information.
So here, I have my main tableau in the middle, and I have my opponents that I'm playing against.
And there's a summary of what is going on in their tableau at the top.
That summary, you can see in the animation, it expands out, and you can always inspect it further.
So as a designer you have to decide, what are you gonna communicate in this summary version?
So for us, we are communicating, you know, the top left card for the AI here, costs two.
And I'm showing it's a two-cost planet.
I just made a decision, I'm not gonna show the victory points, I'm gonna show the cost.
But players know there's a correlation between victory points and cost.
So hopefully that's enough information for them to make their choices.
And this design decision is actually originally from Tom and Keldin.
who made the AI and we liked it a lot so we implemented it.
We expanded a little bit more.
If you have different military powers in the game, we condense them down into an icon that can always be expanded out for more information.
Another of my favorite games, Ascension, did a great job of condensing down information by cropping cards.
You might ask, what can you get away with when you're cropping a card?
Can you get away with getting rid of keywords, icons, abilities?
You can actually get away with getting rid of all of it, as long as you keep artwork.
Because the artwork is going to be the shorthand that your players are going to memorize that they remember all of those other abilities and keywords and icons from.
So.
In Race for the Galaxy, we're able to deviate a little bit from the baked card art because we're programmatically drawing our cards on the fly.
And that lets us get away with something that's really important, which is real-time bookkeeping.
And this is a big service you can do for your players.
You want to be judicious on when you're doing it.
So in Race for the Galaxy, there are six cost developments.
And these give a dynamic scoring victory point value depending on the game state at the end of the game.
So this is Galactic Exchange, and on the left, you see the version that's in the card game that you're going to play in analog.
It has a question mark that represents that dynamic score.
And on the right, you see a version that we can do in game.
We can just figure out what the score is.
We can say, OK, this card gets some points for every different color of world you have in play.
If you have a bunch of those worlds, you have nine points here, for example.
And we started by adding this just in the tableau.
And eventually, we started putting it in your hand.
We found that players really like having this information right up front, even before they've played the card.
And if you're going to ask your player to do the math and figure out these scores, it usually takes about 30 seconds and pretty much no one does it.
They do about a five second approximation, which is pretty good, but occasionally it's way off.
So we find by doing the real time bookkeeping for the players, their scores are much higher and they like the feature a lot.
So I recommend it.
A lot of these features I've been talking about today have been things that are going to help you get your player comfortable and familiar with the game in a teacherless environment where they don't have Table Talk.
But there is a digital platform where you can have Table Talk, you can have a teacher, and that's in VR.
That's one of the reasons that we're bringing Race for the Galaxy to VR, and we brought Ascension to VR.
You can get Table Talk.
If someone's new, you can come up right behind them, look at the cards in their hand.
help them through what they should be playing next, and just chat about your week while you're playing a board game with people.
Like, I can play a board game with my sister in South Carolina online with her and just hear about her day, which is pretty cool.
And we did this with Ascension, too.
Up next, we're going to be working on Roll for the Galaxy.
And maybe I'll be back next year with some ideas about how to make the AI performant for that.
That's what we're struggling with right now.
And also, how much to automate for your players.
This is a DICE version of Race for the Galaxy if you haven't played it.
So, anyway, that's my talk.
Come find me if you have any questions about board games or like to digitize board games and play more board games.
That's it.
