Hello, this session is called Taming the Chaos.
It's about creating sustainable pace to development without sacrificing innovation and creativity.
So a little bit of introduction here.
This session was helped along by a friend of mine called Grant Schankweiler, who's also the co-author of a book called Gear Up, which is a collected set of over a hundred practices that we put together from our experiences and experiences of a number of game developers around the industry and applying agile to game development.
Also mentioned the second edition of my book, Agile Game Development, should be out by the time you see this.
All right, so let's dive in here.
Let's talk about this session.
So we're talking about chaos and chaos is really just a disorder and confusion.
Not necessarily complete, but it's...
kind of the chaotic things that we go through in game development.
Now, the thing is that chaos is often necessary in game development where we're exploring, finding the fun and discovering new things that might disrupt our plan of developing a game.
So what we want to do is tame that, is like make it less powerful and easier to control.
And there's some reasons for that.
And some of the primary reasons is that we want to avoid the crunch, the death marches that commonly occur in game development.
When chaos comes at the end of development, we're trying to get something out for a critical ship date.
Also to reduce and eliminate the waste. A lot of times we're in a rush, we make content, we make characters, long before we really know what we want to do inside of those levels or with those characters. And I've been on games where we've thrown away probably about 50% of the content we created because we created it far too soon.
to avoid making bad games.
And there's plenty of examples where chaos at the end of the game makes us compromise or drop key features just to get something out the door that is not fun, something that we're not proud of, or that we just release something that just doesn't meet its business goals.
I mean, we are a business.
We wanna release games that, you know, allow us to sustain that business, to make a little bit of profit, so we can continue doing what we love.
But speaking of what we love, I think one of the major problems that I see, and I personally experienced is just burnout.
Really, as a project manager, after three months of crunch, It turned me into from being an enthusiastic game developer into a risk avoider.
You know, someone that I didn't wanna take chances by trying something that potentially could be fun.
I started managing based on hitting a goal, hitting a ship date, meeting the specifications of a plan or cost limitations.
And what it turned me into was really just someone who looked for a cookbook.
Something that allowed game development to be something that we could control and something that would be simple.
And there really is no cookbook.
But it turned me and many other project managers into someone who focused on the project itself, as I mentioned, the goals of the project, rather than the game, rather than what the game is telling us.
And it also turned me into a C-goal manager.
And if you're not familiar with the term, a CGO manager is someone who flies in, craps over everything and flies away. And I was doing that to kind of keep people in, keep things into control. Say, hey, don't try that. That's not part of the plan. I don't care how fun you might think it is. We're not going to get paid for that. And so I want to talk about, I want to talk about avoiding that and focusing really on things to avoid that uncontrollable chaos.
So one of the things I want to mention getting into this is some or maybe all of this might not be possible for your culture.
And uh in 2003 I Read this book that had just come out about Scrum and I took this two-day course from one of the authors one of the creators of Scrum And I left that kind of infected with some ideas about things that I wanted to try.
But some of those things weren't possible for my studio, so I tried a few things, but kind of kept that infection in my head in terms of things that, when I moved to a different studio or moved to a different part of my career, I could try out in a new organization.
And so there's some ideas in here I want to potentially infect you with, probably not a great term these days to use, but just to implant some ideas that you can kind of create your own practices by applying some of this.
So an inspiration for this talk came from this book called Anti-Fragile.
And a very popular book that came out a few years back.
And in this book, he describes three different types of systems.
And the first type of system is called a fragile system.
It's a system that breaks under stress.
And many of us, we made games when we were kids.
We kind of hacked games.
And we didn't really pay attention to fixing the bugs or things like that, because that wasn't the exciting part.
And then we found out over time that the game became more unstable and broke much more easier.
The second system is called a robust system.
It's a system that bears the stress, but it doesn't break, but it's very fixed.
And this is the system I was describing as a project manager that I got into to say, hey, we're gonna go according to plan.
We're not gonna experiment as much.
And it was a robust system, but it didn't respond to change very well.
And so like risk adverse waterfall is how I describe it.
And then it describes a third system, which is the title of the book called Anti-Fragile.
And it's a system which not only survives stress, but it actually gets stronger under stress and improves under stress.
And what we're going to talk about are these things we call them stressors, things that stress the system.
But I want to look at some of the things that are beneficial stressors, which actually make the system stronger.
So diving into that.
The analogy he uses in the book, which is a great analogy, is working out. So the idea of you go to a gym is you want to stress out your body to the point where it gets stronger, and there's a range of stress that you're aiming for. So for example, if you don't go to the gym, it's not like your body stays the same. It's not a stable system. It actually gets weaker over time if you don't go to the gym.
And the opposite of that, and as you see this at gyms on the every January 2nd is a lot of people come in and make their New Year's resolution to go back to the gym, but then they come in and they load up too much weight. And they don't realize that they've gotten weaker by not going to the gym and they injure themselves. But there's a range of stress that we're aiming for going to the gym regularly, where you put up enough weight where you can barely maybe do you know, eight to 10 repetitions, and you're actually damaging your body a little bit.
And you give it a day or two off, your body grows new muscle to get stronger.
And then as those weights become easier, you actually load up a little bit more, you add a little bit more stress.
So if you apply this to various areas of game development, like dealing with bugs, we could ignore bugs like we did when we were hacking and let them pile up.
And of course the quality goes down over time and the game gets less fun with more bugs.
Or we can overdo it like we usually do post-alpha and we basically say, all right, we have 10,000 bugs in our bug database, let's solve them all and we go into a death march crunch.
And so this beneficial stress or range we're looking at, you kind of call it continuous improvement.
Not only fix those problems, but find the root cause.
Why did that bug get into our game?
And how can we prevent that type of bug from getting into our game in the future?
Really, because the best way of solving bugs is just not to make them in the first place.
So these beneficial stressors, they actually Googled this and found there's a word called eustress, which means a beneficial stress.
So the rest of this talk is going into four different areas and exploring what are the beneficial stresses, these eustresses, that we can apply to game development.
So we're going to be building this anti-fragility into four areas as I mentioned, focusing on outcomes over output, iterating on fun and course correcting rather than following a plan, embracing risk rather than avoiding it, being proactive about it, managing debt.
And we talked about bugs and things like that, not only fixing them, but hardening our process against the reoccurrence of bugs in the future or defects.
And then building a culture where developers thrive, where they take more accountability, they're more creative, they're more engaged in their work.
All right, so let's dive in.
So focusing on outcomes over output.
And the example I use is my experience working in the game industry at the beginning, working with Nintendo of Japan.
And the idea with working with Miyamoto directly was that he would come in, he would discuss an idea for a game, and he would give us three months of money and tell us to go find the fund.
He didn't wanna read any documents, anything else like that.
He said, you'll find the fund, I'll be back in three months.
And so this kept going on and on.
And the game we produced with him, if I think about it, if I think about, hey, when did we find the fun over time?
And you look at this graph, time is on the horizontal axis.
How much fun we knew we had found was on the vertical axis.
And their focus was on finding the fun first, which is that phrase he used.
And after three months, If we didn't find the fun, cancel it.
And so that led to a lot of this chaos at the beginning, which is exploring, throwing things out, trying different things, and then discovering, hey, that worked, that didn't work.
And the benefit of that, and Miyamoto had his three Cs.
He said, hey, make sure we get the camera control and character down before we move forward with levels and more characters based on those things.
is that we would explore the game.
We'd explore what was fun.
Sometimes you'd come in and say, hey, that driving game you worked on wasn't that fun.
We didn't find the fun, so let's go do a fantasy golf game.
And so a lot of exploration, a lot of chaos.
And then things would emerge.
We'd build up the basics of camera control and character and then build upon those things with various things you can do in the environments and build up a vocabulary.
and then exploit those things over the course of the game. So example of exploitation was a different game, a game called Smuggler's Run, which was a launch title for the PlayStation 2.
It was an open world racing game, you're smuggling something. It was a rock star game.
And towards the end of it, we tried something. We said, hey, let's make this outdoor environment more living. Let's throw deer into it.
And so we put deer just that were running around, very simple, but it turned out people like that more than racing.
They liked chasing down the deer and running over them or hitting them.
And basically the deer had perfect elasticity and they ragdolled and they'd go over the horizon.
So people were making up games and scoring how many deer they hit, things like that.
That'd be one of the most popular features in the game that didn't require us to throw out a bunch of things, just take advantage of what we already had inside of the game.
So traditional game development, waterfall-based development, you know, we have these different phases of design.
We write a bunch of documents.
We go into pre-production.
We go into content production.
It's all scheduled out, and then we make the game fun at the end.
through integration and fixing the bugs and making it run an acceptable frame rate, and then the chaos comes at the end. And the problem with that, obviously, we're running out of time. We're chopping out key features. An example of that would be a game called Midtown Madness, where there was a lot of ideas that came in in the end that would have made that game twice as fun, but we're just trying to fix the bugs. We're given a fixed ship date. So we had to choose one over the other.
Now this kind of pattern occurs again and again in game development.
And one example of that would be like with Midtown Madness is, you know, the game was kind of rigged against us in terms of the development game, the publishing game, is that marketing would ignore us.
They're just not used to seeing anything that's of value of the first 90% of the game.
And then the entire marketing department post-alpha would suddenly pay attention to you.
We call this the eye of Sauron.
And all of a sudden the eye turns on you and it's blinding light with a bunch of requests from marketing to do this.
Oh, can you do that?
And a lot of times we say, no, that's a great idea, but we just don't have the time.
We're trying to make the game work and get it out the door.
Even worse examples of this in the game industry is when marketing or the stakeholders finally see the cinematics of the game.
towards the end and then they say, no, that's the wrong framing of the cinematics or we want a different format of cinematics.
Go off and redo all those dozens and dozens of hours of cinematics that you've spent the last two years working on.
And there's examples in this particular game of the team working crunch, working overtime for six months to do those things, those late requests, when they could have just seen a simple test animation early on and given their feedback, early in development, push that chaos sooner.
So at the end of every area, I wanna just describe things that you can try in your own environment for this area.
of outcome, finding the fun, over output, following a plan.
Plans are necessary, but fun is a risk.
Also going to give you a link at the end of this session to a PDF that contains all these takeaways of things to try and things that might get in your way.
So things like establishing transparency with your stakeholders, getting them involved earlier on, avoiding that eye of Sauron and saying, look at this, give us some feedback, even if you have to drag them in.
Create a collaborative culture, but give and take on scope.
Don't just accept all their changes to say, hey, if we're going to add something, we've got to drop something else.
And grow trust.
That's one of the hardest areas.
We're going to talk later about creating a shippable build every three months.
We call the magazine demo, something that could show us the challenge of getting something out the door a year or two ahead of time.
And not all late changes are bad.
We want to exploit opportunities that the game gives us.
Now, the Gear Up book.
It talks about various things like tracer bullets, things that we can experiment with, do a test version of a level to see if your game runs well in those levels.
Plenty of barriers to implementing some of these things.
Current contracting patterns don't allow for change.
A lot of middle management that might say, hey, write the 300 page document.
And where it's like, hey, the stakeholders like a Miyamoto might not care about the document.
The developers understand that the documents kind of lie sometimes, but there's always a middle management layer that demands that level of detail.
Some stage gate approaches request or require you to prove a lot of these mechanics in concept and documentation form ahead of time.
I mentioned to you stressors, these beneficial stressors, like I said, is getting iterative stakeholder collaboration on the working game.
Say, bring them in, talk to you, have them talk to you about what they're seeing on the screen.
A lot of stakeholders don't understand that this is a benefit or getting their attention is a challenge.
All right.
So the second area I want to talk about is embracing risk.
When we talk about risk, you've got to categorize risk.
There's different levels of risk.
I identify four different areas based on things that we know and things that we don't know, and things that we know that we know for certain, and things that we've done in the past, things that have no risk whatsoever and have a lot of certainty.
These are things that we can document away. We can plan away.
I don't want to take the pure agile approach of saying don't plan on anything, don't document anything. Yeah, there's things we can plan for, things we can document, things that we can be certain about.
Let's not fool ourselves about things that we know that that we might not know. For example, we're making, there's a, we have to launch our game on a new platform. There's a new PlayStation coming out. There's a new Xbox. If your game is coming out on the platform, then there's, you know that there's things you don't know.
And so there's big question marks about that.
It's like, well, you know, Microsoft or Sony tells us that their platform is going to behave a certain way and they're going to be really easy and super powerful, but we really don't know until we get our game running on it.
So what are some of the things we can do ahead of time to reduce that risk?
But that's not the worst of it, in terms of uncertainty and risk.
There's things we don't know that we know, which can kind of sound weird, but I kind of think of this as that Han Solo moment when he sees this big moon in the first Star Wars movie, where he's like, I got a bad feeling about this.
This is more intuition.
These are things that if you go through a number of game development efforts, there's like things that's like, hey, I'm not sure what's wrong with this, but I got a bad feeling about this, and we should do something about that to understand how to reduce that risk.
And with tracer bullets, doing experiments before it's time, before you depend on something.
We'll talk about that.
Unfortunately, there's something even worse than that.
There's things that we don't know that we don't know.
Example for this was we're doing a born-based game based on the born movies.
And unknown to us, Matt Damon's mom was an anti-video game crusader.
And so Matt dropped out of the project late in development.
And when he left, all the other actors left and we had to scramble to find new actors to take their places.
And so we missed the movie and it had an impact on the game quality as well and doing these things late in development.
So the idea is to embrace risk, as I mentioned early on, and that there's a couple of books, I'll give you a reference to in that PDF later on, Waltzing with Bears and Risk Upfront, which talk about not avoiding risk, not planning away risk, but embracing it and doing something about it, being proactive about it.
And so the process I kind of derive from that is to first identify risk.
And we start at the beginning of the game and say, all right.
Let's talk about what could go wrong.
We actually make a game out of it called a premortem.
It's like future postmortem, and talk about all the things that could go wrong.
And so for example, it's like, hey, we have a critical launch date.
We're a movie-based game, or we're a sports-based game, or a launch title.
We have to hit a specific date.
So then our next step is to go into find a root cause.
Let's dive into this a little bit further and find out what could cause us to miss the critical launch date.
Well, one thing that happened to us was a key middleware, a piece of middleware was not ported to the platform in time.
And so we take that further and say, when will we know whether this risk is true or not, whether we're missing this middleware date?
And so we derive some key performance indicators like to say, hey, if on, I'll buy October 1st.
If this piece of middleware isn't running our game on this particular platform we're shipping on, this risk has come true.
And then we say, what are we gonna do about it?
What's our mitigation strategy?
And we can say, well, not gonna be cheap, but we're gonna buy the source code license imported ourselves to avoid missing this critical launch date.
And then we continue this on a regular basis, every maybe, a month, three months, we come back and evaluate these, not only evaluate these triggers, but identify, has there any new risks emerged that we didn't identify earlier on and keep adding to our database?
And then, you know, if October 1st comes around, is the KPI met?
If not, well, then we have to mitigate.
We have to do something about that.
And going through this, you know, about 20% of our risks actually came through and we were able to...
to mitigate many of those risks that we could spot ahead of time.
All right, sum up, things you can try on this.
Obviously, go through this process, which I'll document in the PDF.
Things to try, risk mitigation strategy.
I talked about this.
There's various practices in the gear up book.
The primordium, embracing risk, which describes this flow, risk matrix, things like that.
Plenty of barriers, cultural barriers to this.
A lot of stakeholders don't like hearing about things that could go wrong.
They just want all the good news.
And they want to plan about how that's not going to happen.
Well, risk means uncertainty.
You can't plan away risk.
And so Part of this is selling this.
And the key part of selling this is the mitigation plan.
Be proactive about it.
Don't just say, hey, we're scared about this.
Just say, hey, this is something we don't know.
This is how we're gonna identify it.
And this is how we're gonna solve it.
So it's not just a cover your ass document.
This is something that says we're taking charge of what's potentially going to sink us.
So the eustress is doing this on a regular basis, embracing this, overcoming the cultural barriers to saying, hey, let's pay attention to risk.
All right, third one, managing debt.
All right, so debt, unlike financial debt, It's something that is whose cost grows over time.
You have an interest rate on financial debt.
The longer you take to pay off a loan, the more it's going to cost you to pay off that loan.
And so for debt, for game development, bugs.
You know, the longer you push off fixing a bug, the harder is it going to be to find it.
The harder it is going to be to fix it because it's not fresh on the mind of the programmer that created the bug or somebody else has to find it and fix it.
But that extends to other things like design and content, production.
And I kind of sum all these up in terms of the debt it takes to ship the game that we usually postpone to post-alpha to get the first version out the door.
And so a lot of agile practices deal with this like defining a definition of done, knowing when a feature is done and asking that question.
Are we there yet?
Is this shippable or does this reach a level of definition of done?
And a lot of teams, they evolve that definition over time.
So it could be definition done is like, hey, it doesn't crash to, or it passes all internal tests and play tests that builds up over time with things like test automation and things like that.
So to look at it, you look at this graph, the horizontal is time, development time, and this could be the entire development.
timeline, and to measure debt. I mean, you can measure debt in terms of the number of bugs in your bug database, which in many cases I've been on games where it's like, hey, we have tens of thousands of bugs by the time we get to alpha. And I call that the shipping debt. There's content, technical debt, design debt, all sorts of different type of debt. But this is the stuff we have to fix before we get the game out the door. And unfortunately, this is where the chaos occurs. This is where the death march occurs.
laid in the game to really, you know, get the game out the door and get it to that point where we can ship it.
Now, not only is it bad on the developers, it's bad for the game.
We make compromises many times to get the game out the door because we're simply out of time.
Example, this is a game called Midnight Club.
And in this game, it was a launch title for PlayStation 2, and we found out that, hey, we thought in these big, huge, open city racing environments.
that we could stream in all of our textures for the city.
And it turns out we couldn't do that.
We had to fit all the textures into memory at one point for the entire city.
And so late in development, we figured this out and we asked all the artists to trim down their textures.
They weren't able to do it in time.
And so about a week before we submitted the game, our technical director got frustrated and he went in and he decimated all the textures by 75%.
And they didn't tell any of the artists, and they didn't find this out until they got the retail copies of the game.
And they were a little upset at how fuzzy their textures were in the game.
And it compromised the quality of the game.
So a different approach, I mentioned getting that magazine demo every few months.
And the idea is every three months, we take a week off, polish the game, we would make it look like something we could put in a magazine. We would disable certain features, maybe online wasn't ready, so we'd gray out that menu selection, and we'd polish it a little bit, get to that magazine demo. So one week every three months.
And by continuing to do this, we still had a crew, but by the time we got to this alpha date, we had much less shipping debt left over.
And so we had the choice of saying, well, we can get it out a little bit earlier, or we could actually spend a little bit more time polishing.
So, you know, this kind of approach actually improves quality and there could save time over the course of the project by not just accumulating all this debt over time.
And you wouldn't stop there.
You know, you would you would continuously improve.
a practice, so maybe we do a day every iteration.
If we have a two- or three-week iteration, let's spend a day polishing it and getting it to this definition of done.
Save that week every three months, and then maybe do something on a day-to-day basis before we go home for the day.
The idea of continuous improvement.
So various things you can do.
Like I said, this doesn't happen overnight.
Garrett Book describes various ways that we can automate testing, or we can have, we even have the gameplay itself.
We would have a racing game where we'd say, let's just have all the AI cars race each other.
We do all 20 races and have it run overnight in various configurations.
And we occasionally find where, something like an artist would have moved a mailbox a couple of feet over.
a car would hit the mailbox when it's cutting the curve, that mailbox would bounce off a street lamppost, lamppost would call it fall across the street, the physics engine couldn't handle it, and we'd find a big pile of cars all wrecked together in the middle of a race. So finding that kind of problem manually would take tons of time, but through automation you would find that very quickly.
Also a cultural thing is try to keep the game as close to shipping as reasonably possible.
Again, with a magazine demo every three months, we improved automation, things like that, to continuous integration, unit testing. We could always keep it a little bit closer than six months away of post-alpha crunch debugging.
And it would come up with silly little practices like, yeah, with continuous integration and unit testing, if you check something in, it would find out in five minutes whether you've created a problem or not.
It would tell you, it's like, oh, the changes you just checked in broke the release build on the PlayStation.
And we had a practice where it'd give you 20 minutes to fix this problem.
And if you didn't fix it in 20 minutes, then it would display the Muppet of the day on every single screen around the studio.
And that Muppet would start singing their theme song.
And I discovered this one day by checking in a change, running off to a meeting, and then 20 minutes later hearing the Swedish chef singing his theme song on a slightly asynchronous on 100 different workstations around the studio, which people love because it's.
Segal manager implemented this practice.
Just a little bit of warning is that this is not meant to humiliate people.
You have a sense of fun about this stuff.
People make mistakes.
You have to have a culture where it's like, hey, we all make mistakes.
Failure is part of the process.
All right, so things to try.
Again, this will be in the document at the end.
Don't separate debt from other work.
One of the best things we did was get rid of a bug database.
Because that allowed us to say, hey, fixing the problem with a feature is part of the same database, Jira or whatever.
And so we're able to measure the cost of implementing the features, which included making those features work.
Because the problem with a bug database is it's part of the cost, but it's unpredictable because it grows over time.
So integrating those two helped us measure progress much, much better.
slowly introduced debt reduction practices, establishing definitions of done, things like that.
Lots of barriers to this.
Fixing the bugs makes the cost of features appear more expensive.
But like I said, it's just, it gives you a better metric.
And it does improve productivity by fixing bugs sooner over time.
But stakeholders can push back on this.
It's like, I want you to implement a new feature rather than fixing bugs and polishing and refactoring.
Stakeholders could be like kids in a candy shop.
They want fun, new features.
They don't want to worry about bugs until the end.
And we developers are sometimes the problem.
It's like, I like implementing a feature.
I don't like fixing it as the bugs associated with it as much.
So it's part of the discipline of the development culture too.
So the use stress.
Raising that quality bar is like working out.
Just throw a little bit of weight on it.
It's going to be painful.
You're expecting people to change the way they work.
Don't throw too much change, cause that injury.
But when the quality bar rises and people become comfortable with those new practices, push it a little bit further.
All right, so finally, I talk about number four, which is build a culture where developers thrive.
And this is probably one of the most productive, important parts.
is you want to create a culture where people behave based on the benefit of the work being done, the quality of the game, to focus on that and even measure that.
Now there's lots of bad metrics out there and this is one of the big lessons I learned which harmed company culture. For example, one of the studios I worked for was owned by a Japanese corporation.
And from their point of view, the commitment, the engagement of their developers was measured by how many hours they spent in the building, regardless of whether they're working or not.
And that didn't match our culture at all in California.
But what we found out later on, what they were doing is they had an office in Los Angeles about 100 miles away.
Every so often, they would ask somebody to drive past our studio at two o'clock in the morning and count the cars in our parking lot.
And they were very disappointed at first because they didn't see very many cars in the parking lot.
But when we found out about this, what we did was we made a deal with this newspaper distributor in the next building over, you know, who normally have people working there at two o'clock in the morning getting ready to distribute newspapers for the next morning. We made a little deal with them to park their cars in our parking lot to get our our owners off of our back.
And that fixed the problem, but it really didn't help development as a metric.
And I found this out personally as that Seagull manager, when we first started doing iterations, first started measuring scope added to the game, rather than the number of hours people are sitting in their seats in the building.
But I was a late learner to that.
And so when we were behind schedule in getting all the scope that we hoped to get into the game, as a C-Goal manager, I said, all right, we're gonna do crunch, we're gonna do overtime.
Because that's my practice for the past decade as the project manager.
But I felt I was a good project manager because I would be there with the team working all these seven day a week, 10 hour a day hours.
but we had a different metric, how much debug scope was getting into the game.
Now at first, hey, scope went up, our velocity went up.
But we noticed that it slowly declined so that by the fourth week of crunch, we saw that we're getting less scope in the game than we were during the five day a week pace.
And I realized, you know, people are getting tired.
They're typing more slowly.
They're making more mistakes.
They're tired.
As well as the last time seeing this metric, which not only created transparency and development, but transparency with me as a manager, that was the last time I ever called for crunch with the team.
So the idea is to find these metrics, which are not vanity metrics, which don't make you feel good that people are sitting at their desk at 10 o'clock at night, but actually add to creating value in the game. A lot of times when we were forcing people to be late in the studio, it represents a lack of trust. Now, You think about this from a systems point of view, or from a team building point of view, if anyone's read the five dysfunctions of a team, they know that an absence of trust is the fundamental thing that breaks team performance.
If the team doesn't trust each other, or management doesn't trust the team, then they behave in a certain way.
So from lack of trust, what happens a lot of times is that the stakeholders say, hey, we don't trust you, we're gonna leave you on your own, you're just gonna be lazy and waste our money.
We're going to have you create a big, huge document with lots of details, and we're going to task you down to the hour because we just simply don't trust you.
And the problem is that that creates a system where it doesn't allow for emergence, as I mentioned earlier, very little slack because we're trying to push as much as we can to make those untrustworthy developers work.
And it leads to people optimizing their behavior based on their discipline.
It creates silos.
As a programmer, I'm given a ton of tasks.
I'm just going to write the code to fulfill them.
When I was in the defense industry, I was measured on the number of lines of code.
So I wrote very fluffy code.
If I can write something in 10 lines of code rather than one, I got a bigger raise.
So it leads to all sorts of problems, like developers protecting themselves.
If you're an animator and you come to me as a programmer and ask for help, I'm going to tell you to go away because I got to get my stuff done.
That's how I'm being measured by this silly, silly metric.
Rather than getting things in the game, it's how, you know, whether my stuff compiles and I can move on to more tasks.
It avoids emergent work.
It leads to padding estimates.
which rarely works.
Work expands to fill the pad very often.
And we ignore dependencies.
It's like, hey, throw, you know, or bugs, throw it into a bug database.
I can get my stuff done so I look good as an individual, not as a member of the team.
And we get poor results as, you know, nothing's working.
We can't demonstrate anything.
I can say, hey, these tasks are done, but you can't see any of that in the game.
We're postponing the emergence of value.
And that just drives that cycle.
So if you have poor results, that means that we didn't write enough documentation.
So let's ask for more documentation.
So to reverse that cycle, we have to extend trust.
This is where leadership comes in.
What can we do to grow trust?
And yeah, it takes a little bit of extension from the stakeholders and the developers themselves.
So to give them a little bit more freedom, let's form cross-discipline teams. Let's let you start to create your own plan, to break down the individual tasks, to own your estimates eventually, and focus on the results.
This is where your practices like sprints come in, where it's just like, all right, this is what we want to see in the game.
You tell us whether you can do it.
You manage the individual tasks.
We're not going to micromanage you, but we want to see the game improved in two weeks in the way that we all agree on.
And so that results in more accountability at the team level, focusing on what's in the game rather than how many lines of code that I've written.
taking advantage of emergent work.
If something's fun and it wasn't part of the plan, well, let's talk to some of the stakeholders during this iteration and talk about, hey, can we ditch this thing because we found that this thing works?
And it's a team result.
You get people behaving as a team and they don't want to let their team members down.
So you get improved results, which kind of drives a better game, better forecasting.
It drives better behavior.
And it drives elevating.
levels of trust.
So one last thing I want to talk about is this sense of flow.
Now, as a game developer, there is occasional games that I worked on, and I wish it was more frequent, where I just thoroughly enjoyed the development of the game.
And I would be brushing my teeth in the morning to think of this great idea and rush in.
to find people implementing their own ideas aligned with the overall goals.
Or, you know, you start and I'm sure everyone's experiences where you start working on something and you look up at the clock and you think it's it's lunchtime, it's three o'clock in the afternoon.
It's like, oh, that's why my stomach hurts.
You're so engaged with the work.
And this is called flow.
And as developers, we love being in this state of flow.
And there's this book that came out, I kind of described it, kind of summed up what I felt as during these rare situations where I'll just completely engage creatively with my work.
And this is based on a lot of studies that show, you know, there's a correlation, there's levels of skill that developers have, and there's levels of challenge from low to high that they encounter.
And what we want to do is find that range where those two things match.
Because if you have a certain level of skill and you're given too low of a challenge for your skill level, you get bored.
You're bored with the work. You're not engaged.
You're not doing your best work.
But if you're if you're given too much of a challenge for your existing skill level, you get stressed out.
You don't do your best work. You get frustrated.
you don't want to hang around, you don't get engaged with your work.
And so what we're trying to do is find that middle ground where we're challenged at our skill level with a particular task that we're trying to accomplish, this feature we're trying to implement.
And what we're trying to do as leaders, again using this workout analogy, is we're trying to push that.
We're trying to say it's like, hey, your skill level is going to grow over time.
Let's just push you a little bit.
Let's give you a little bit more challenge than you're used to.
Not too much.
We don't want to get into that injury range, but let's get into that strengthening range so that.
your skill grows to meet that challenge level and continuously find ways of pushing, raising that weight limit, raising that challenge level so people's skill level grows. And this is one of things that motivates the developers the most. And they do their best work. And when they do their best work, it directly benefits to the game.
All right, so things to try.
Keep developers focused on those shorter cycles, give them more challenges, come up with metrics that mean something.
People behave based on how they feel are being measured.
And so what's the best measure?
Is just improving the quality of the game.
If you can measure that based on what the scope is we're putting into the game, discover those things.
Grow trust.
Give the team more autonomy over time.
Not all at once, just give them little challenges of autonomy and self-management.
And build the flow like we discussed.
Give them more and more challenges that meet their skill level.
So plenty of barriers to this as well.
This is a cultural thing.
And trust is a two-way street.
It's hard to build, easy to destroy.
And sometimes it's as a leader, you can extend trust, but maybe because of your past, the culture, you're a CGL manager as well, people just don't trust you as much.
It takes time for them to kind of say, hey, is this a trick or what?
I said, hard to build, easy to destroy.
Like myself, I was very easily tempted to go back to say, all right, let's go back to crunch and put it on the developer's shoulder to meet the schedule that I predicted for them.
So some use stresses, again, it's to slowly empower the teams, slowly back off.
It's gonna be painful for the teams to take more ownership.
It's gonna be even more painful as managers to give it to them.
and not give up at the first sign of problem.
There's always going to be problems.
And raising the challenge bar for developers.
OK, that's it.
I want to thank you for taking the time.
And as I mentioned, there's a PDF at this website called tamingthechaos.com.
Single link there to the PDF, which summarizes all those things to try, and all the barriers, and all practices that you can try in Gear Up.
Thank you.
