Hi, I'm Chris Zimmerman. I'm studio head emeritus at Sucker Punch.
I did a lot of work on melee combat in Ghost of Tsushima, so for the next hour or so, I'm going to try to pass along some of the things we learned while working on Ghost.
Since I'm going to cherry pick a few things that worked well and skip all the things that didn't work well at all, it's pretty much a normal GDC talk. Here's how the rest of the talk is laid out. I'm going to outline five basic problems we ran into trying to get melee combat to work. I've got a case study or two of a particular instance of each problem type.
And after going through the case studies, I'll summarize what we learned with a catchy sounding rule about game design.
At the end of the talk, I'll give you a slide with all five of these rules for game design.
Also, I did a lot of the programming on this stuff, so there are some technical details.
The technical details are gonna be uninteresting to many of you, so I'm not gonna talk about them in the talk.
Instead, I'm gonna take advantage of the special nature of this year's GDC by dropping them as text into the chat window when we hit the appropriate part of the talk.
So watch the chat window for the notes.
Next time, I'll remember to do the slides.
I'm guessing most of you have played at least some of Ghost.
If you haven't, I recommend doing so.
First of all, it's an excellent game.
Second, a lot of what I'm going to talk about is going to make sense if you haven't.
But a quick recap just to remind you what the game's about. Ghost of Tsushima is an open world action RPG set during the first Mongol invasion of Japan in 1274. This invasion really happened, it's historical fact, including the subjugation of the island of Tsushima. In real life, the 80 samurai on the island were all killed.
In our story, one samurai, Jin Sakai, survives the opening battle and decides to fight back against the Mongols.
He's massively outnumbered.
In order to fight back, he is forced, bit by bit, to abandon everything he's been taught about being a samurai.
Jin learns to fight from the shadows, sacrificing his samurai identity to save his home.
So that's the setup.
Here are three primary goals that constrain...
or goals slash constraints we adopted while building the game.
First, the game is immersive.
Our overarching goal was to build a time machine to transport the player back in place and time to ancient Japan so that everything melts away and you just feel like a samurai on Tsushima Island fighting off hordes of Mongols.
Second, the game's grounded.
While we were trying to build a historically accurate game, we were trying to build a believable one.
That means no monsters and no magic, just mud, blood, and steel, the catchphrase we use to keep ourselves honest.
And third, the game's accessible.
For Ghost to justify, it's not insignificant budget.
It needed to appeal to a broad audience. We didn't set out to make a niche game.
We set out to make a game that millions of people would enjoy.
These three goals slash constraints shaped a lot of the design, so keep them in mind as we move forward.
So how does melee combat fit into the game?
Well, melee combat, and specifically katana combat, is central to the samurai fantasy.
Without katana combat that looked and felt Furthermore, melee combat is the backbone of the story we were telling.
The whole story relies on Jin Sakai being forced by the sheer number of enemies to adopt underhanded tactics.
If you can just hack and slash your way through melee encounters without fighting dirty, then the story falls apart.
The whole story hinges on melee combat or overwhelming you as a player, while still feeling fair, just as it overwhelms Jin to force you into these decisions Jin doesn't want to make.
Now, the samurai fantasy about melee combat is broad.
Fighting in a duel with a single worthy enemy is certainly part of it.
So is a desperate fight with one surrounded by a group of opponents.
And so is fighting alongside your fellow samurai in an epic battle.
Ghost melee combat needs to smoothly span this whole gamut from pure brawler action to a challenging one-on-one duel.
And that's a tall order, especially since the last melee-focused game we'd built shipped 15 years ago and featured a talking raccoon.
So let's be more precise about what constitutes the samurai fantasy.
For Ghost, we decided the core of the samurai fantasy is discipline and precision, precise control with every movement having a purpose, a sense of stillness and readiness despite danger, and a burst of explosive action at exactly the right moment.
And discipline in all things. Discipline in the moment, to hold back on action until the perfect opportunity.
Discipline over time as your extended practice and hard work leads to mastery over the katana and the other soldierly arts that you study.
And progression is part of the samurai fantasy too.
Determined, disciplined hard work over time leading to mastery.
That's not dissimilar to the experience of playing the game actually.
So keeping the player's journey in tune with Jin's journey was an important goal.
Above all, the samurai in our mind's eye was skillful, a master of the katana.
So we needed to decide how the player showed skill.
There are lots of ways for players to show skill in games.
characters, as is the case in many melee games, we chose two things. First, precise timing to echo the precision of the samurai fantasy. And two, second, a quick and accurate reaction to enemy actions, both having to be demonstrated and performed under high pressure from your enemies.
But there's a problem with this choice.
Human reaction times are slower than you think.
For a simple visual stimulus in a simple player response, it's maybe 300 milliseconds.
That's slower than you can swing a sword.
It's slower than Jin's fast attacks in the game, which take less than 250 milliseconds.
You can work around this, though.
There's no limit on enemy reaction times.
In many circumstances, they can and should react instantly to player action.
In fact, we did some early work to give NPCs more reasonable human reaction times.
For instance, we had NPCs react to your movement with a human-scale delay.
If you dodged to your left, the NPCs took a few hundred milliseconds to track.
And this was a disaster. It felt wrong.
Sloppy, buggy, didn't feel right at all.
And I think this is because our expectations for what a sword fight looks like are formed by movies.
And movies aren't very realistic.
Everything is choreographed so the actors know what's going to happen next.
They're anticipating, they're not reacting.
Real sword fights, like real fights of any sort, are incredibly messy.
But the fantasy we're trying to hit is the movie fantasy of a sword fight, clean and precise.
So enemies track your movement instantly.
Tech note. It's worth noting that human reaction times are slow, but human anticipation can be close to perfect.
It takes a while to react to a stimulus, but you can all clap along to the beat of a song.
And one main goal, one final goal slash constraint for combat is that we wanted the game to be purely skill-based.
And part of this decision was that if you play the game perfectly, you won't get hit.
No matter how many enemies are attacking you, if you do the right actions at the right time, you will not get hit.
This felt like the right fit for the Samurai fantasy, that if you played perfectly, you could dance between the raindrops and make it through any situation unscathed.
So where does that leave us?
Well, initial enemy attacks have a wind-up so that you have time to react.
Follow-up enemy attacks in a combo can be fast since you're anticipating instead of reacting.
And player attacks can also be fast since NPC reaction times aren't limited.
But we ran into an immediate problem with this basic design.
Quick attacks with Square were too effective.
We assumed, the reasonable assumption, that stabbing someone with a sword would interrupt their action.
We were trying to stay grounded, so this seemed like a reasonable decision.
But with slow NPC wind-ups to let the player react, and fast player attacks, you could just poke guys during their wind-up and win.
This did not test well.
Button mashing was an effective strategy, but it didn't feel very skillful, and it wasn't very fun.
And honestly, we might have rebooted the whole approach at this point if I weren't studio head, as well as the guy working on combat, which gave me a certain amount of latitude to stay the course.
Most immediately, though, we needed to work out ways to blunt the square spam problem.
We looked for natural limits, believable ways to stop quick attacks from being too effective.
So we added a shieldman archetype that blocked quick attacks.
This made sense to players, they didn't object.
Later on, we added Brutes, big guys, guys who were so big that poking them with a sword wouldn't interrupt their attacks.
And this also worked.
But more importantly, we started overlapping enemy attack sequences.
We recognized that we can start an NPC wind-up while the last NPC was still finishing their attack sequence.
As long as all the attacks landed at distinct times, the sequences could overlap.
This turned multiple enemies attacking to you effectively into a single sequence with a long wind-up only happening really at the beginning of the sequence.
In the end, there wasâ€¦ We wanted quick attacks to be fast and powerful.
We wanted you to feel like a samurai when you did them.
It took lots of little fixes to help keep the heart of this quick and powerful attack intact while damping it to over-effectiveness.
The first thing that we added that actually made you feel skillful wasn't the quick attack.
It was a timing-based parry.
delaying your block until just before an enemy attack lands to get a better result. Most NPC attacks are blockable, especially in the early parts of the game. It's easy to block attacks, you just hold L1 and you're safe. You'll just stand there and you'll block attacks.
But this simple and safe strategy doesn't provide any counterattacking opportunities.
With parries though, the enemy is spun past you.
We even interrupted any windups as buddies had started to give you a clean chance to counter attack.
And this felt great.
Player connection was excellent.
You felt like you actually parried the blow.
And remember, that's our goal.
Our goal is to make the controller disappear, to make the player feel like they actually are swinging the sword or parried the strike, not just press buttons to make those actions appear.
Skill-based parries were our first real immersive success.
It felt dangerous to delay your block and skillful to pull it off.
But there was an exploit with this. There was a cheese opportunity. You could flutter the block button, press block very quickly, and parry every single attack. You should press the block button fast enough that you were guaranteed to hit the wind-up of an enemy attack. So while we loved the parrying mechanism, when it worked there was a spark of magic. Many players couldn't leave the cheese alone.
Once they discovered this exploit, they couldn't stop themselves from using it, even though they weren't happy.
And this was an internal play test.
These are professional game developers.
They knew that this was a bug.
They knew that this was an exploit.
They knew we would fix it.
They knew they weren't happy.
We eventually found a way to keep the core magic of parries intact while eliminating the exploit, and there's a tech note about this, but to simplify, we track an effective block time that ignores button mashing, and parries end up being pretty foundational to Ghost Melee combat.
Here's a general game design rule that follows from these two examples, and many others like them.
You might think of this as the hide-the-cheese rule.
Most players will play the game in what they perceive as the most effective way to make progress, even if that leads to them having less fun.
Even if they know that playing the game that way isn't fun, they'll still play it the way they think is most effective, and they won't be happy.
they kind of have two choices, right?
Either they'll play the game in the way that is effective but not fun and resent you for making a not fun game, or they'll play the game in the not effective but fun way and resent you for making them into saps.
So make sure that the way the players feel is the most effective way to play the game is also the most enjoyable way to play the game.
Otherwise you're gonna get yourself in trouble.
So it was pretty clear from our testing with players that varied play styles were the key to enjoying the game more. If players who mixed up the way they played the game had more fun and they scored the game higher. If they used all of Jhin's abilities, melee, ranged combat, ghost tools, stealth, they consistently reported higher scores. We wanted to nudge more players into varied experience.
more enjoyment. And it did turn out this way, but it might not have, right?
The causality arrow could have pointed the other direction. It was plausible in early tests that what we were seeing was that players who were enjoying the game were trying out more parts of it rather than the other way around. But in fact, this did work, that as we encouraged players to mix stuff up, our scores went up. People had more fun. So there are two basic ways to a varied play experience. You can vary the situations the player finds themselves in, so that they're using the same abilities in different contexts, or you can provide lots of options for player engagement, in hopes that they'll use different abilities in the same context.
Or, most likely, you'll provide both, with a rich set of player verbs and a similarly rich set of game-provided experiences. Let's start with the player's ability set, providing variety by giving players the ability to do different things.
Well, providing a rich verb set that gives players agency on how to interact with the game's challenges is a great thing.
letting the players choose which verbs to use and how and when adds agency, and that's great. But the problem with player agency is that players tend to not use it the way you want them to.
In particular, players tend to stick with the strategy that they find that works, the first strategy they find that works. The psychological term for this is satisficing.
Their approach works, so why experiment with stuff that mostly doesn't work?
That's especially true in a game like Ghost where you're under pressure the whole time.
You don't have safe spaces to experiment. The only place to try new combat techniques is inside of combat, so you stick with what you have. So generally Ghost players needed a nudge to try new things.
There are two main ways to nudge players.
You can discourage them from the strategies you think they're overusing, or you can encourage them to try new strategies, the ones you think they're underusing.
So you might try to discourage an overused attack by introducing an enemy who blocks those attacks perfectly, but is vulnerable to the attack you'd like to see more of.
That's frustrating.
This sort of blocking key design breaks the immersion we were trying to create.
Players can tell that they're playing a game and they don't like it so much.
Similarly, you could.
or adding a timeout, or having its effectiveness degrade over time or when overused.
But why would you do this? Players were using the abilities they thought were effective and enjoyable.
Why take that away from them by making those abilities less enjoyable and less effective?
So we focused instead on encouraging use of underused abilities, rather than discouraging use of overused ones.
We focused on carrots instead of sticks, if you want to think of it that way.
In our early tests of Ghost of Tsushima, for instance, we did not see varied ability use.
In our play tests, we track every attack launched by the player.
And early on, player attacks were overwhelmingly light attacks, quick attacks, like 90-something percent for many players.
Players who didn't just use quick attacks, though, who mixed up their play styles, scored the game higher.
They had more fun.
We wanted to nudge more players into that varied play style.
Our goal was to make heavy attacks more appealing instead of just discouraging light attacks.
First...
We had to make sure that the value statement for heavy attacks was clear.
What is the point of using a heavy attack?
As a player, why do I do it?
In Ghost, the reason you use heavy attacks for the most part is that they let you blast through blocks.
For players who want a direct approach, who want to just walk up to somebody who's blocking their attacks and knock down the block and then hit them with their sword, and that describes a lot of players, this is pretty appealing, the ability to have a direct path through a block.
And this was mostly a communication problem.
we could know that heavy attacks were breaking through blocks.
In fact, we tried an approach where it only took a single heavy attack to break an NPC's block, but this felt pretty mechanical.
We decided we needed to require multiple heavy attacks to break through a block.
But communicating that the player was making progress during this was a challenge.
And unfortunately, our best solution was adding UI to the screen, which we didn't really want to do since we were trying to minimize UI.
We added a meter that showed remaining block points, but that's not its real purpose.
The real purpose of the block meter isn't to show how many block points are left.
It's to flash when you hit the guy with a heavy attack.
In effect, it's just a signaling mechanism to say the thing you just did was a good thing and it had an effect.
You can tell how many black points someone has left, but that's not really the point.
And in the end, this helped. This was what we needed to do. It did help people understand why they're using a heavy attack, and so we were willing to accept the compromise and actually add some more UI to a game that we really didn't want to have UI in.
Next, we improved the effectiveness of heavy attacks.
We made the attacks faster to make them easier to use.
We increased the amount of block damage they did to make the directed path more appealing.
And these are easy changes because they both make the game more grounded.
At the end, when we ship our light attack, our quick attack usage was under 65% of all player attacks with heavy attacks a little over 20%.
The rest of it, it's a smattering of super attacks, ghost stamped attacks, standoffs, and so on.
And we were okay with that.
That was an easy, that was pretty good mix.
Similarly, it was a challenge to get players to use ghost tools.
And this was a problem, since ghost tools were a big part of the story we were telling, a story that Jin Sakai had to adopt underhanded techniques to win.
Players were comfortable moving through the game with their conventional tools, like katana attacks in ranged combat.
Luckily, most players were happy to use assassination, so we weren't completely out of luck on underhanded tactics.
But again, players that did use ghost tools scored the game higher.
So we wanted to nudge the players in that direction.
Again, we could have nerfed all the conventional player abilities, but players were enjoying them and we didn't want to ruin that.
We could have added lock and key designs, NPCs that were only vulnerable to a particular ghost tool, but that also seemed like a bad direction.
So we focused on making ghost tools more appealing.
The most important changes were to make the tools easier to use.
We started with Kunai, the throwing daggers in Ghost, because those were the most popular tool.
The most important change we made was to have the player start by throwing multiple daggers, not a single dagger.
Given the constraints in our aiming model, that it had to be fast, that you were using a joystick, that daggers had a reasonably long range, we knew there would be some imprecision in the aiming, that players wouldn't be able to perfectly snipe a target.
So we leaned into that. By throwing three daggers, we tripled the chance that you'd hit the target you were meant to hit. We do give you feedback on which target we thought you aimed at. It's the middle one of the three. But players didn't care that we misinterpreted their input. They only cared that the target they wanted to get hit actually got hit. There's a tech note about this.
The second big change was to lock you into one ghost tool at a time.
Previously, we thought that allowing you simultaneous access to all of your ghost tools would increase usage. And there were people who passionately believed that they wanted to be able to instantly throw a smoke bomb or a dagger or a sticky bomb. The last version of this simultaneous input model was corded. You would hold R1 and then you would press a face button with R1 down. So R1 plus X would throw daggers.
But we weren't seeing people use ghost tools and we knew we needed to change stuff.
So we switched. We switched to a one ghost tool at a time model, where you only have one ghost tool assigned to R1 at a time.
Pressing R1 will fire that ghost tool.
It's easy to switch, but fundamentally you only have one thing at a time.
And somewhat counterintuitively, this created immediate wins.
Like immediately we saw 30 to 40% more use of ghost tools.
And this is sort of weird, right?
That like we've made it harder in some sense to use ghost tools by making you assign the one you want, then use it.
And yet the usage went up.
So why did this happen?
Well, you know, if you look at what we've talked about earlier in this talk, it's pretty obvious why.
We had added too much cognitive load to the players, right?
It was...
there were too many things for them to think about. There were too many options for them to consider and too many controls they could hit. They were under a lot of pressure and so they reverted back to doing the things they could count on. They hit square and triangle and made it through encounters that way. By simplifying it down, by reducing the cognitive load, they were able to think quicker and they could keep up with the game and they could hit R1 and fire the kunai when they wanted to.
The third more subtle. It's to make sure that the ammo model works out. We restrict your use of ghost tools through ammo. And the thing about ammo limited models is that people will only use them if they feel confident that more ammo is easily accessible.
that if they feel like they might run out of ammo, they'll just hoard it.
So first we had to make sure there was lots of ammo in the world, which we did.
And then we had to play some sneaky games.
So in Ghost, if you're low on a particular kind of ammo, you're more likely to get that in an ammo drop.
We'll lean on the dice rolls a little bit.
But, and this is important, even if you're full of kunai, we will still drop kunai for you occasionally.
And that's important, because if we stop dropping kunai, players will conclude there's not a lot of kunai in the world, and they'll stop using them.
So even when you're full, you'll still get stuff so that you think there's lots of it in the world.
And this all works out, and we end up driving ghost tool usage up to being like 5% of the attacks, and that's not bad.
So what's my takeaway from these two case studies?
Well, first, if you're trying to get a player to use some ability, don't try to force it.
Don't make them use it.
Don't create enemies that are only vulnerable to the new ability.
Especially don't hamstring the player's other abilities to get them to use the new one.
Instead, work to make the new one more appealing.
Make the value proposition obvious.
Be sure players understand the reasons why the new ability would be useful.
Make sure the ability is easy to use and obviously effective.
If you must, give players an extra reward for using new abilities, like an XP bonus.
But don't hit players with a stick.
They don't like that.
Hand them a carrot instead.
Let's switch to the other way of creating variety, having the game present new situations for the player to deal with.
And in particular, let's rotate back to one of the first issues we talked about, the limits of human reaction speed.
Reading situations and reacting quickly and accurately is a core part of the skill challenge Ghost presents for players, but player reaction speeds aren't constant.
They depend on a lot of things.
For a simple stimulus and a simple response, you can expect a quick reaction time.
Think of a line of sprinters all in their starting blocks waiting for a starter's pistol to go off.
It's a simple stimulus and a simple response.
Adding more complicated stimuli slows down reaction times.
So watching for attacks from multiple NPCs, unsure which of them is going to attack will slow you down.
Or needing to look at different cues, different wind-ups for different attacks from a single NPC, that will slow you down.
As the complexity of the situation goes up, player response times get longer.
The same is true for complexity in player abilities.
As the player considers more options, their reaction times slow down.
Those sprinters in their blocks only have one option to start running, but the player has many.
Block, dodge, light attack, heavy attack, super attack, jump attack, ghost tools, all kinds of stuff, right?
Remember that quick and accurate reaction to this situation was one of our core skill tests.
When it works well, when we're dancing at the edge of what the player can do, then success is rewarding.
If we undershoot, if we don't provide enough complexity, then players react too quick, find the game too easy, and find exploits.
If we overshoot, we have too much complexity, then players are frustrated and feel unskilled.
And so finding the right balance is important.
We have to ladle in the right amount of complexity so that it feels challenging and fair, but is a challenge the players can overcome.
Let's look at one way in which we ladled in more complexity to create a more enjoyable challenge.
And it's archers.
We couldn't very well make a game about an army of Mongols without including archers.
Our early integration of archers was problematic, especially in the intersection of range combat and melee combat, which is to say, what happens when you have archers firing into a melee fight?
Or what happens when you get into a fight with archers around?
Well, you have some options.
You could let archers fire into fights, and we tried this, and it was not fun.
You're in the middle of a high-intensity sword fight, and you've got your hands full dealing with people with swords and spears, and you keep getting shot from offscreen by archers.
So what do you do as a player?
Well, you start every single encounter by locating and eliminating all of the archers.
You stealth your way around and kill them all.
And this forces you into a single repetitive pattern in every encounter, which is not what we were after.
Or you can decide that archers don't fire into melee scrums.
And we tried this.
It was better, but still not fun.
Once you got into a sword fight, the archers that were nearby no longer had an effective footprint.
They didn't have any effect on the fight.
You could just ignore them until you killed the last enemy, melee enemy.
At which point the archers popped up.
Now, if you remember, they were around.
This wasn't a surprise.
But pretty often you'd forgotten there were archers around during your melee fight.
And your first reminder of this was getting shot with an arrow.
So neither of these two solutions are awesome. Neither shooting into fights or not shooting into fights, neither of these worked very well. So we...
But we kind of needed to have archers nearby, right?
And we needed to have them influence fights.
Because of the constraints we're under, we don't have very many ways to mix stuff up, right?
We don't have monsters.
We don't have magic.
So archers have to play a role.
A melee fight with archers has to feel different than a fight without archers.
So what's our solution?
Our solution was to turn archers into an audio cue instead of a visual one.
When archers are about to fire, they yell, doosh, that's duck in Mongolian, by the way.
Anyhow, when the archers yelled doosh, you'll see the other Mongols duck, which amplifies the cue.
And players, believe it or not, were quick to accept this in-game fiction.
You would think that maybe they'd say, this doesn't seem right, but in fact, they're happy to take that.
There's a tech note about this.
As a player, you won't get hit with the arrow. Direction doesn't matter. You don't have to track where the archers are. If you hear a dosh, you can dodge and you're not going to get hit.
And this gives you one more thing to juggle during a fight.
In addition to watching all the nearby Mongols for visual cues, you need to listen for the audio cues for incoming arrows.
And more cues means more complexity, means slower player reactions, which means a more challenging and rewarding fight.
And it means that a fight with archers nearby has this added element that a fight without archers doesn't have, giving us another way to vary the player experience.
So what's the takeaway here?
Well, there are lots of other ways we mix things up, and some work better than others.
So we added falcons to make stealth more of a challenge, or we created different mixes of enemy archetypes, or we created enemy archetypes that had really different kinds of attacks.
Or we had you fight in areas where your mobility was more limited, or we had you fight alongside allies. In a lot of ways, it's easier to create a varied play experience through varied content, because players can't avoid it.
They can choose not to use the abilities you provide them, but the encounters you place them in, they can't avoid.
It's also a great lever to nudge players into mixing up their play styles in natural ways.
A well-designed encounter can nudge the player who mostly engages in melee fights into getting into an archery battle.
or can nudge players who really like to fight things straight up to use stealth occasionally.
So externally changing the situation is a great way to provide variety.
So let's talk about progression.
The samurai fantasy is about discipline and hard work leading to mastery.
That's progression.
And that's a journey we wanted the player to go on, too.
One of the convenient things about Ghost for us as game developers was how tightly the player's journey matched Jin's journey.
In particular, the player gets better at playing the game with practice.
They're more precise with the controller, their timing gets better, their decision-making becomes faster and more accurate.
Having more complexity slows players down, so there's a temporary setback whenever we add a new concept, but their decision space getting more complicated, their decisions getting slower, that improves with practice.
Responses migrate from the slow parts of players' brains to the fast parts.
They do less thinking, they react instinctively, they get better at playing the game.
And the player's knowledge increases as well.
They get smarter, they learn new enemy types, they learn or invent new techniques, they spot opportunities they would have missed early on.
Becoming more skilled, becoming more knowledgeable, both of these mirror Jhin's journey in the game, and that was an important consideration for us. And they're both part of progression. Now, when you saw a slide about progression, you probably thought we were going to talk about how the Jhin character learns new abilities or gets new gear. And that's important, but it's only one leg of the progression tripod. Here's how I propose thinking about progression.
It's not just character progression, your character's gaining new abilities or gear.
That's an important part of the overall progression model, but so is players getting better at playing the game. And so is players getting smarter about how they play the game, about players' knowledge increasing.
We thought about each of these separately for Ghost.
We wanted each to play a distinct role in the player's journey through what turned out to be a pretty long game.
The balance for your game will be different.
The weight you assign to each of the three areas will be different than it was for us in Ghost.
But thinking about them as distinct forms of progression will lead to a richer player experience.
And here's the thing about progression.
Players are reluctant to try new things.
Not all players, but many players, maybe even most players.
So if you introduce a new player ability partway through your game, and let players decide whether to use it or not, many won't.
Here's the key.
Make the first experience awesome.
The first time players use a new ability, it should be easy to pull off, obviously effective, and emotionally rewarding.
If it is, they'll use it again, and you're in good shape.
If it isn't, they'll go back to what they know.
Be careful that your efforts to create interesting progression for an ability don't ruin the player's first impression of that ability.
It's easy to decide when you're working on progression that what you need to do is weaken the first ability, first version of the ability, so that the player has a reason to upgrade it.
Don't do this.
If the first version of your ability doesn't grab the player, the second version won't matter.
And in a related note, be sure to front load your best ideas in your game.
Don't save.
of the game. The most important 15 minutes of your game is the first 15 minutes. The most important hour of your game is the first hour. If those two things aren't great, if the first 15 minutes and the first hour aren't great, nothing else matters. Front load your best ideas. If the beginning of the game isn't great, no one will make it to the end. Let's look at an example about making the first impression a strong one.
In the evolution of Ghost Melee Combat, one of the most important things we added was stances.
The stances weren't there to begin with. We added them midway through the development of the game, in a series of incremental steps, actually, because we were frightened of adding more complexity to the game, which was already too complicated.
Obviously stances do make the game more complicated for the player.
There's a whole new set of things for players to worry about.
More options to deal with in every situation.
And we were worried that players would be overloaded.
Well, we weren't wrong.
The extra burden of stances did slow players down.
Players were overwhelmed.
And the first times we tested this, the take up was lower than we wanted it to be.
But players really liked the idea of stances.
They just felt clumsy trying to use them.
And no one wants to be a clumsy samurai.
Many players just stuck with the first stance, the one they were familiar with.
We offered a new stance, they didn't even try it.
They knew how to win with the first stance, even if it was a struggle at times.
They satisfied, to use the word I defined earlier.
Other players did switch to the second stance, but then just So the key thing was to make sure that the first impression was a strong one.
The first time they use water stance, which is the first stance you earn, you start with stone stance. You have to have a great experience.
So the first step was to make sure that the value proposition is obvious.
Water stance is really effective against guys holding shields.
You will blast through their blocks twice as fast as you will with stone stance.
The number of hits to break a shield means noticeably lower.
Players can count, they can tell.
And we do subtle things too to make sure that the value proposition is clear.
Like earlier we talked about how we sold heavy attacks by having the block meter flash when you did a heavy attack damage to let you know you did the right thing.
Well, if you're in the right stance and you do it, you get an even bigger flash.
We don't tell you this, it's just sort of subtle reinforcement that you're doing the right thing.
Step number two is making sure to put the player in a good situation.
We're not in control of the timing of the player getting water stance, so we have dynamic training for it. Once the player gains water stance, we look for good opportunities to train it.
To oversimplify, we wait for you to be one-on-one with the shieldman, then the training kicks in.
Clock slows down, we walk you through switching to water stance and using water stance, and that's really effective. It's a little bit heavy-handed, especially since the training for stone stance is going to kick in right afterwards until you're in the first one-on-one situation with swordsman. But it is effective.
And the third thing, the third step for getting people to really engage with stances was to add more anticipation to them.
We actually make a big deal of making progress towards your next stance.
It's hard work.
You know, it doesn't come easy.
It doesn't come out of a natural.
a playthrough, we make you go after it, we make you spy on leaders, we make you kill leaders, and when you do, we make a big deal of the fact that you've made progress towards the next stance.
And all of this puts the player in the right headspace. It prepares them for thinking this stance is going to be a big deal, so at the point when they get it, and they go through this elaborate training, they're predisposed to think of it as being an important thing and to engage with it.
And that was really effective.
So what is the takeaway from this?
Well, we followed this real pretty closely through all the new things we introduced in the game.
We tried to make sure that the first impression you got was a really positive one.
So the first ghost tool you get is Kunai because it's the easiest to use and most effective.
And we make sure that it's great out of the box and that you're trained and that your first experience is really a good one.
The first samurai armor you get is better in all ways than the stuff you start with.
It's more effective, it has better perks, and it's much sharper looking.
The first time you assassinate somebody, it's useful and effective.
There's no phase of clumsy and noisy assassinations when you're learning how to do it, even though that would have made way more sense for the story, because it would have made the first impression not as good.
The first experience was something new sets the bar for everything that sets the tone for everything that follows. If it's not great, then the player won't engage with your feature. They'll just set it aside and go back to what they know. All right, let's switch gears again.
It's pretty clear at this point, if you've listened to this talk to this point, that Ghost evolved a lot during its development. It was six years, we changed our mind about a lot of things a lot of times. Our design process historically has been very focused on prototypes and iteration.
We did on the order of 35 full team internal playtests during Ghost development. We did about 25 external playtests and they were the external tests maybe half of them were took a week long or a week long and natural playthroughs of the game. Lots of testing and lots of iteration.
And if you're going to prototype type and iterate your way like this.
If that's your way of getting through to a successful game, then you have an important question to answer, which is what level of execution is necessary to fairly judge an idea?
How developed does everything need to be before you can tell whether the idea is good or not?
How developed do the controls need to be?
What the animation or sound or camera design, VFX, haptics, writing, acting, like how good does everything have to be?
The most important obvious problem you can, sorry, the most obvious problem you can have is giving up on an idea before it works. And that is a real problem. But the worst problem is not giving up an idea that's never going to work.
because counting on a doomed idea is much worse than giving up on one that never reaches its promise. Once you start counting on an idea working out, you start building around it, and then it becomes really hard to drop the bad idea without reworking everything else.
So you keep funneling resources into it, and that never really works.
But if you're going to prototype an iterate, you can't expect you're going to implement everything all the way to shippable quality before you make decisions. You just don't have time. Most of our ideas don't pan out. So we have to build a prototype and test it, and somehow we have to figure out how to get reliable data from that test.
So this can end in disaster, right? If you're not careful, you'll get playtest data that pushes you in exactly the wrong direction.
And it's because playtesters aren't great at projecting.
It's hard for them to play a prototype and imagine what it's going to be once it's done, once it's fully realized.
Even our internal playtesters, even professional game developers aren't great at this.
It's a really hard talent to squint in exactly the right way to see what the prototype will become rather than what it is.
And there's one particular failure mode that's really dangerous.
Once the playtesters will round up on under-implanted ideas, if something is really obviously a placeholder or a stand-in, they'll imagine something awesome in its place.
The platonic ideal of whatever it is that you did, they'll say, this is obviously not done.
It's going to be great once it's there.
And secondly, they will round down on stuff that just needs polish.
They'll hear things like, ah, this animation doesn't look right, or this sound effect's garbage, or I'm not doing enough damage in this case, or here's an exploit I've found. I don't like this.
Here's a graph of the way this can run.
And we've seen stuff that looks like this graph way too often, it's very painful for me.
It shows player reaction to something you're iterating on.
Time's moving from left to right here as you're making progress on an idea.
And like the player's, playtester's perceived value for the feature or the ability is going from bottom to top.
So what happens?
Well, first you test the feature as a rough prototype and you know what's intended, but none of your playtesters get it.
We'll call that incomprehension in the very beginning of the graph.
Then you improve things. You leave some placeholder elements, but you get enough right to get people excited.
They round up on the parts of your idea that look like placeholders.
They imagine perfect solutions in all the empty slots.
This is going to be great, they say. That's irrational exuberance.
Then you start finalizing and polishing things. You replace placeholder animations with final animations and placeholder effects with final ones. You put in some haptics. You play with a camera. The feature is much closer to done, so you test it again, and people hate it.
The probability function at this point is collapsed. Instead of possibility, your playtesters are just seeing disappointment and disillusionment. That's despair.
Now, things can go one of two ways.
Either through hard work and insight, you overcome the disillusionment, you find ways to hit the rewarding version of ideas people were imagining during the irrational exuberance phase, and everyone ends up happy.
You end up with victory.
Or you don't.
Playtesters were imagining things you can't deliver and things never improve.
You end up in defeat.
And your project won't survive too many graphs that end in defeat.
And by the way, from personal experience, this happens at all scales in our playtests.
We see graphs that look like this for individual features or individual components or individual missions. We also see graphs for the whole product that look like this. And wow, is it scary to see the scores for your game going down as you get closer to shipping. So this is bad. How do you avoid graphs that end in defeat?
Well, there are a few things.
First, you have to make sure you understand your experiential target.
You've got something you want the player to feel.
You've got some experience you want them to have.
For most of the stuff we did in Ghost, we wanted them to feel like an awesome samurai, in different ways.
Second.
There needs to be some spark in your idea that makes them feel this way.
Some bit of magic, the heart of your idea, the best part of your idea.
We'll talk about what that bit was for a couple of ghost ideas in the next couple of slides.
But you have to know what this is when you're prototyping a feature.
Then you have to figure out what will get in the way, what will distract players from this magic, what will confuse them about the key part of the experience, what will cause them to not give you the feedback on the magic but give you feedback on unimportant stuff. All of this stuff has to be representative enough to not be a distraction.
Representative here means close enough to shippable that playtesters don't imagine replacing it with something better. When they're telling you how much they like the thing that you're testing, they imagine what you've shown them, not something they're imagining. For most of the stuff we did in Ghost, that means that controls have to be close to done because that's the hardest thing for people to imagine. Animation has to be representative.
You have to have representative sound effects.
The camera has to be representative.
Sometimes other stuff like visual effects or haptic effects, especially if they're playing a key part of the experience.
This may seem like a lot to have to have done at an almost shippable level before you can count on your testing data.
That's a lot of stuff to polish.
But there's even more that I've left out.
There's no mention of animation variety or progression, or character and environment models, which don't need to be polished in our experience.
The UI is unimportant, unless it's the thing you're testing.
Enemy variety, unimportant.
How the ability is costed or how it's constrained, not important.
We generally don't worry too much about robustness.
The ability of failing in some weird circumstance doesn't affect scores unless it's an exploit, so don't worry about it.
Backstory, integration into the world, all this stuff just doesn't matter.
It'll have to get finished at some point, of course, but you can safely test without it.
You can assume that you're going to be able to fill in those blanks and not get caught out too often.
My phrase for this is clear path to victory.
If you're not super confident that you have a clear path to victory, that you know how to get from the prototype to the finish line, or aren't super confident in how players will react to the ways you're going to get to the finish line, then those things need to be present and representative in your prototype.
Otherwise, you're rolling the dice.
Anything else can be omitted. Just leave it out.
Seriously, don't even put a placeholder in.
You're just wasting your time creating stuff, and you're confusing the player.
So just leave it out.
So let's look at a couple of examples.
Let's look at standoffs for instance.
So the inspiration for this is the Sakura Kurosawa movie, Sanjuro.
At the end of Sanjuro, the two main characters retreat to a hillside for a duel.
They stand, each of them with their hand on their katana, in tense anticipation, each waiting for movement, while all the grass waves about them.
and it's still for an uncomfortable time.
Then one samurai moves, but the other moves quicker and the villain falls to the ground dead.
This is an awesome scene in an awesome movie, which you should all watch.
And we really wanted to capture that experience in Ghost.
Well, what's the key to this?
What's the magic point of this?
And it's tension.
If there's magic, it's going to be capturing that feeling of tension, this sense of stillness and incipient danger that explodes into action, danger and opportunity all wrapped up into one.
So everything in the design of standoffs is focused on increasing tension.
We take our time setting things up to let the tension build. You watch the characters walk into place. The control model isn't our standard attack model. Usually we have you tap a button to attack, but here we have you hold a button to ready yourself, then release it to attack, which is inherently a tense thing.
And we use an iaijutsu attack, an attack where your katana starts inside the saiyan, and that leaves you vulnerable too because you don't even have your katana drawn.
And finally, since it's a simple stimulus and response, the enemy movements can be faster than their normal attacks. They don't have long wind-ups in a standoff, they just attack.
And you know this going into it.
You know that you're going to have less time to react than you do in normal gameplay.
And that makes it feel more dangerous.
Everything points at heightened tension during the standoff.
So we prototyped this and there were glimpses of magic.
It really was tense, but rewarding, even in an empty test world.
So we had then the question we have to ask is what needs to be representative before we can trust the magic?
And in this case, animation, sound effects, visual effects, and there's some time slowdown, which is important.
So we do that with the control model and the camera, but everything else is missing at that point.
We don't need to worry about, we did this in test world, it didn't matter.
So this was actually a point of commitment for us because we showed a standoff as part of our demo at E3 2018.
So we were sort of committing ourselves to doing this.
And at this point it was only a prototype and this did not work in the game in general.
The standoff in the demo was special rigging.
It was real, you played it, but it wasn't systemically there in the game.
We hadn't really tested it in the context of the whole game, but we were confident we had a clear path to victory for everything else.
We trusted in the magic, we trusted the prototype.
We didn't worry too much about when and where you can do standoffs or why, because the standoff model itself was so strong.
Now, as it turns out, some of the questions we had to answer were hard to answer.
And we were a little bit overconfident, and there was a lot of work involved to getting standoffs to the point where they work systemically in the game.
But it was mostly engineering work.
It wasn't finding the magic, it was just making the magic reliable.
There is a tech note about this with more details.
So here's another example, and this also comes from E3 2018.
Chain assassination.
In that demo, we showed Jin leaping down from the rafters of the temple and assassinating three Mongols in quick succession in a very flashy manner.
It's a great power moment.
And the nice part about this move is that it's naturally limited.
You can't do it all the time.
You have to have three guys standing near each other, and you have to be able to maneuver to get above the jumping range of one of them.
So you really don't have to worry about it being overpowered.
You can really crank things up.
The magic of this is pretty obvious. There's this attention to get into a position without getting spotted. There's a feeling of mastery once you're there and you're choosing your target.
And here for once, we actually went with a very slow targeting model.
In Ghost, most of the targeting has to run really fast, because we want the game to be fast-paced.
We want there to be lots of pressure on you.
But in this case, we're trying to draw out that sense of anticipation, that sense of mastery that you're about to drop down on these guys.
So the targeting model is slow and precise.
And finally, once you trigger the move, you get this spectacle of this chain assassination with flashy moves and flashy camera and flashy time slowdown.
Just spectacle.
So what had to be representative here for us to trust the magic animation, getting the time slow down, visual effects, getting the camera.
In this case, we needed to have the environment be pretty representative of the temple in the demo because this is a stealth move and the environment usually plays an important part in stealth abilities. But everything else is admitted. We don't worry about anything else. That was all we had to worry about getting right.
Once we had that stuff right, we had a clear path to victory. We knew we could get it to conform in the game.
And in fact, in this case, we were right.
This one was easier to finish than standoffs.
The areas where we left out things we didn't have done, in fact, were pretty straightforward to get working.
We had bugs to fix, but nothing that really ever risked the feature.
Here's the final takeaway then from this, from the last rule.
When you're working on something new, the first thing you need to do is find the magic.
You've got some experiential target in mind, some emotional response you want the player to have.
Identify the magic bit of your idea that produces that experiential target.
When you're working on the idea, you might only get a glimpse of the magic, right? It might not work every time. Maybe your timing was exactly right on triggering the ability and it looked awesome and you felt like a star. Maybe the enemies you had lined up in exactly the right configuration and your animations looked awesome. Maybe the random number generator bounced your way and everything clicked.
When that happens, when you get a glimpse of the magic, when the feature works great once, you've got the spark to build from.
Your goal at that point is just to make the magic happen more reliably.
And usually that's a lot easier than finding the magic to begin with.
Usually it's just engineering.
If nothing feels like magic, and it has to feel like magic to play testers, not just to you, then you probably don't have a winner.
You don't have something you can build your product around.
Not everything in your game needs to be magic, but you have to have enough magical moments or you're not going to succeed. And that's the fifth rule. So I've got all the way through five rules, and here they are all on one slide. Five general rules of game design we learned while making Ghost in Tsushima. I hope this has been helpful or interesting, and I hope that one or more of these rules will be applicable to your own games. And if not, it was only an hour of your time, and they were pretty So thanks for listening. And by the way, if you think it would be fun to work on problems like this, we are hiring so you can go to jobs at suckerpunch.com and get in touch with us. So thanks again for sitting through this talk.
