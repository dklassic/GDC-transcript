This is something we decided to throw in here. Steve's idea. We always talk about the really cool things that we do in AI.
 And wow, we had great success using this architecture or this technique.
 What about when things get really horked up? Completely.
 Because there's educational value in that. Those of you who have read Post Mortems in the past, it's what went right, what went wrong, and what did we learn from it.
 So I think it's time for a little bit of what went wrong and what we can learn from it.
 So I'm not going to bother introducing these guys, you know most of them anyway, but we're going to kick things off with Steve Rabin.
 Tales from the Tent, Trenches, AI Disaster Stories.
 the portable mic. Here we go. Okay. So I'm going to tell you about Microsoft baseball 3D. What? Microsoft made a baseball game? When did this happen? This happened in 1998. Actually I was working for a small company called Whiz Bang and only about ten people. And we made the code side and Microsoft did the animation and the graphics for this thing. But in 1998 I gave a game developers talk on the cooperation in this game, the AI cooperation between the players, and I'm actually still proud of that work today.
 But it's interesting to come back 17 years later and tell you all the horrible things that happened.
 Okay, disaster number one.
 Why were we making a baseball game?
 I kind of know why we were making a baseball game.
 Well, see, nobody at the company was that big a fan of baseball.
 Why were we doing this?
 But I know kind of why, because we just had made Activision's Hyperblade, and there just weren't that many companies in the world who knew how to make 3D games at that point.
 But this was a huge disaster, because me, I was the sole AI programmer.
 I didn't know baseball well enough.
 and I didn't have that bullshit detector so that when I made behavior, it looked reasonable, but to someone who really knows the game, it's wrong.
 And I was missing that.
 And it's a huge detriment if no one in the company has that detector.
 Disaster number two was the program manager at Microsoft happened to also be the game designer, and his solution to telling me how to design the AI was to hand me this book.
 which had about 120 diagrams like this.
 And so you can imagine that's a, you know, there's no me, you know, you don't know why anyone's doing what they're doing.
 It just says, yeah, go in this direction if this thing happens.
 So another ridiculous disaster.
 And he wasn't even on site, so I couldn't even talk to him easily.
 He was at Microsoft, I was at this little company.
 Disaster number three is what happens when you combine a megalomaniac with an advanced degree who's also one of the owners of the company?
 The answer is you get a custom scripting language is what you get.
 And it was shit.
 and I was the only one programming in it.
 Like, the reason I have a scripting language is maybe I have lots of designers using it or something, but it's just the errors in it were non-existent to compile errors, and you couldn't debug it for anything, and one of the benefits of a scripting language is you could reload it while the game's running.
 Well, it wasn't trustworthy enough to do that.
 Probably took 10 times as long to do anything using this thing.
 Disaster number four was a two year long project and for about the first year we had no 3D graphics.
 And so I had to do all the AI on, this isn't it, I found this on the web, but something that looked like this.
 I was making a 2D baseball game really.
 And I was getting bug reports on how this wasn't right and so I'm fixing it, but I'm hyper-optimizing the damn thing to 2D.
 And once we did get to 3D, oh my god, it was terrible.
 people aren't facing the right way. The transitions look like crap. Half of the AI really is making it look good. And it was sort of just we've gone ‑‑ I made a great 2D baseball game is what I did. So this was kind of horrible. The last thing, kind of an animation thing, but AI is so hooked to animation. And this was touted as a feature. Like our company had this technology was the animation drives the motion. Notice how his right foot is nailed to the ground.
 Now this is a ridiculous example of it, but as an AI programmer, to get people to move somewhere, I had to start an animation and hope the feet would drive them in the right direction and sort of twist the hips to get them steering right.
 And when I got to the right spot, I'd just slurp to a stand or something like that.
 Another example is this guy who's rounding third base.
 Kind of notice he doesn't touch the base.
 That's sort of an important part of baseball.
 But there was just nothing in the animation engine to make this happen.
 Here's another.
 Here's the pitcher walking up to the mound.
 You can see it's kind of this stilted animation.
 His ankles and stuff don't move right.
 So walking looks a little weird.
 And then he slurps at the end anyway, so his feet slide.
 So like, what the hell?
 Okay. Last thing I want to tell you about this is that something actually very funny happened is one day we imported the batter character and he came into the game as just a puddle of polygons. He stepped into a teleporter as a fully formed human being and he came out the other side as just tangled mesh of polygons with a bat sticking out of them. Because he was still holding a bat.
 Well, this system was so robust that somewhere there were feet in those polygons and this poor thing was trying to wiggle toward the plate. And it was slowly making progress. And the whole time this bat is like waving like a flag out of the puddle as he's walking up to the ‑‑ that was awesome. I wish I had a movie. I'm sorry. Okay. Please learn from these disasters. Thank you.
 Does this work, too? Can everybody hear me? All right. I have a couple of little, a couple of stories, actually. The first one happened probably a little after you, probably like 2000, 2001. And it was a game. It was probably 15 levels or so.
 I'm not going to name any names. I'm not that person. So...
 This is not a screen shot of it even but it's very representative. It was a fairly realistic world. There was a lot of stuff in it. And we were about, I want to say two weeks from going to a wide beta. And this was somewhat early on when it was a PC game and it was when a lot of games were having their editors released with the title itself. So it was, you know, you could fuss with the levels and that kind of thing. And it was, like I said, it was a couple weeks before open beta.
 and there was some AI issue where the AI's couldn't get into a particular spot and I figured what it was was the classic, right? The, the, um, some object had a bounding sphere on it that was too big and the guy couldn't squeeze by even though he thought he could. So I went into the editor and I clicked on that particular Coke machine and, uh, sure enough, you know, great big sphere on it. So I'm moving it down and out of the corner of my eye I just happened to like glance at the name of this particular object. And it was, quite possibly the most offensive thing I have ever read in my entire life. And I was like, who is the level editor on this game? Who is building these levels? Because I started clicking around because it wasn't just this Coke machine.
 It was every stupid little object in this level had a crazy racist or offensive or some form of just ungodly name. Like every single object in the game. And it turns out it was our best level designer, he had had like seven or eight of the 15 levels were just him. We counted it up.
 I think there was over 4,000 like horrid things. Accordingly, apparently over the course of this guy's career, this was his thing. Like he was this very, you would never guess, very quiet kind of hi, guys, how's it going? And what he liked to do when he named levels objects was like just go berserk. Like that was where he got rid of his anger, I guess. And so the problem was, is that this was going to go out into the world and anybody that wanted to could open the level.
 never happened before apparently. So he was okay up until this point. So what we ended up doing was we ended up using the vulgarity filter in the editor. And it worked out well because not only could we find all of the instances of, you know, we also put him in a corner and said get to work, guy. But then if somebody else using the editor out in the world.
 made their own map it wouldn't let you save it until you changed anything that was vulgar or whatever. Anyways, that was that one.
 The other one, this is later, this is when I was at Sony. I've talked about that giant engine I did for the basketball game at Sony several times. And it was a huge hierarchical expert system.
 And over the course of years, because it was a basketball game, we were iterating on it every year. So content kept going more and more and more. And by the end, there was like 6 megs of XML AI data in this engine. It was huge, right? So it was this huge tree. And we had shipped And we were like, I want to say like a month or so into pre-production on the next year. And one of the designers who had had like a huge chunk of the tree kind of to himself the year before, he came to me and he said, hey, you know, I'm having problems with this one situation. It just won't seem to fire. And so I go in there and I'm looking at him. And I said, oh, oh, well, you know, this you've got this thing commented out here. And he just went white.
 And so basically if you think about he had wanted to test out this particular part of the tree, let's say, and see how it's a two branch right there over here is the other side. And so he just didn't want the AI in any way to use that side. He just wanted to test out the other one. So he just put a comment out right there. Right? Well, when he went white, I said, well, when did you comment this out? And he said, a few months ago.
 And so effectively this poor guy had commented out 75% of the year's worth of work and we had shipped it. And tough noogies for him. Now luckily the AI system was robust enough that it still looked like basketball and luckily also he had been working on ball handler types that were not in the top ten most played teams. So nobody really noticed.
 lucky for him. Not only that, but we got a nice feature that was done for next year's game for free. But the thing to take away from this is if you are, if you do have some ability in a hugely data driven system to comment stuff out, especially in a tree structure that you can just go way the hell up and say oh, up here is fine, make sure that you turn anything that's commented out bright green pulsing something so that you can make sure that it's not that way when you ship.
 And that's it.
 All right, so the year is 2009, and I've just left the games industry to work at a big military contractor where I'm working on this character, who is a tech demo to how we can do cultural training.
 So this is a mixed reality character she's projected on the screen.
 The Marines are in this facility where we've got live role players and all sorts of stuff to make it feel really immersive.
 And, you know, she's supposed to help them learn how to win hearts and minds, make friends, not enemies, right?
 Like, they're good at combat, but we need to teach them to do all the other stuff that lets us actually win wars and not just shoot people?
 which is supposed to be why we're over there.
 So the previous mixed reality scenarios were combat training right there.
 They're very fast, it's hard to see, but there's an insurgent in the back there who's holding a gun on the poor woman in the white dress.
 So you shoot the insurgent, not the woman.
 We wanted to move beyond this to more cultural training, scenarios that would last a little longer.
 you know, even 10 to 15 minutes. Non-kinetic scenarios, we call them. So kinetic is things that shoot or blow up, right? So non-kinetic scenarios. And she needs to speak Pashto, because the Marines are going to go to Afghanistan, and what people speak in the villages where they're going to be going is Pashto.
 So we got one of the role players who worked in the facility there. We recorded all the audio in the mocap studio that we had also built for them as part of this project. So we had all of the animation and all the voice recorded together. So you play a line of dialogue. You play the animation that goes with it. I'd like to do better, fancier stuff like I was talking about yesterday, but I've got three months to build this character and almost no money. I've got an artist half time and me, and that's it. But...
 I found out when we sent it to the customer to let them see it for the first time that she speaks Farsi. Which is what they speak in Iraq. Not Pashtun. Fuck. So this one has a happy ending, though, happily. So we re-recorded all of the audio with a real actress. I mean, she was real, too. But another actress who did speak Pashtun. At a better quality because we did it in a sound studio instead of in a mocap studio.
 Then we sliced all the animations into gestures that were, you know, about a second long.
 So, you know, you've got a gesture like this and a gesture like this.
 And then you pick a gesture sequence randomly.
 The gestures are tagged for the types of lines that they're good for.
 The lines are tagged for the type of gestures that they like.
 You pick a gesture sequence.
 So every time you go, you know, when you replay a gesture, you're blending from a different gesture and into a different gesture.
 And those blends are different.
 So the motion is different.
 So it feels like you're doing it again.
 Stupidly simple. Worked much better than I would have thought. I was really worried about the problem of getting the beats to synchronize on the emphasis of the speech. It turns out that didn't matter at all. In fact, I had people compliment how well that worked. Which really surprised me. I don't know if it's because we started the gesture with the speech or if it really just doesn't matter. That it happens to happen every once in a while and people see it and think it's good and they don't notice when it doesn't happen.
 And it breaks up the repetition really nicely.
 Because when you play the same animation, you get different blends.
 When you play the same line of dialogue, you get different animations.
 So even though we had to reuse assets a lot, because this was a very fast project, it didn't get noticed nearly as much as it would have otherwise.
 Thank you.
 Thank you.
 Thank you.
 Thank you.
 Thank you.
 Thank you.
 Thanks.
 I'm Mark Singer. I am currently a... where's the thingy? Ah, okay, there we go!
 Currently working as a consultant freelance, but back in the day I worked at Red Storm Entertainment.
 And this is from the very early days of our stuff. We, on top of making our more larger scale games, we also had a number of very, very small games that were...
 that were on like an eight, nine month release.
 So we were just churning them out.
 And it was in the PowerPlay series.
 It started with Politica and Ruthless.com.
 And our very last one, which I'm going to talk about, was ShadowWatch.
 And it was designed to be a kind of top-down orthogonal strategy, sort of X-com-y, syndicate-y, Fallout-y sort of thing.
 And there was sort of an onus on us in that it was coming out so damn quick to have some really kick ass stuff, especially with the squad strategy AI.
 We spent a lot of time on the AI, like lots and lots of time, like lots and lots and lots of time.
 But one of the things that we really wanted to do was have the enemy squads be intelligent enough about their environment to recognize when they were pinned and double back on the player and...
 come through another door, sneak attack, everything's really cool.
 And we managed to do this two ways, one that it was very, very room based, and this actually is the game.
 So the, our enemies just had total knowledge of the whole level.
 And we kept the player's knowledge both from them not knowing that and also by using a fog of war.
 Did you mess with my slides, Dave?
 Okay.
 So it was a fog of war.
 All right. It was a fog of war. And so they could not see ‑‑ so you would have your enemy vanish. And it's turn‑based much like X‑com. So the guy would go around and come out through the other door and stuff like that. And, you know, it actually ‑‑ for the product it was, it actually did fairly good. And we were kind of proud of this. And, you know, like a ton of time went into this. And ‑‑ This is back, this game released in 2000, so we had a slightly more, you know, smaller but more savvy audience that kind of knows, you know, what the current state of games is.
 So we were looking on the forums, and there was lots of stuff, and we were particularly interested in what people were going to be saying about the AI.
 And they remarked on that doubling back thing, and they were amazed at how well we had faked it.
 So their basic thought was, we couldn't possibly be doing pathing like that.
 So we must be pulling the guy off the map, waiting a couple of turns, and then popping him back at the door.
 And it was kind of disheartening, because we could have done that.
 But instead, we did this really neat thing.
 And this was very early in my career and really informed my career in that when you're doing really, really cool AI.
 Make sure there's some indication of what you're doing because if you don't, then your audience might think you're faking it.
 And thank you very much.
 My name is Rez Graham. I'm an independent. I was most recently at Maxis working on The Sims 4.
 So this is going to be a story about a game that I worked on in 2010 called The Sims Medieval.
 For a little bit of history, what The Sims Medieval is, is sending The Sims 3 back in time.
 So that they can play in this fantasy world.
 It wasn't just like Sims 3 with a new skin though.
 We added things like professions. So we had a merchant, a bard, a monarch and so on. You could play as any of these professions and have multiple sims and so on. We also had quests. So what we really needed were NPCs that were smart. And I've given talks at previous GDCs about how we accomplished the let's make sims constrained to a particular area or a particular thing that they're trying to do. So you have quest NPCs and so on. So this disaster story takes place here.
 I took this screen shot in a brand new game and this is an empty world where in the very center there's a pit right there. That's my nice little pit. And in this pit lives a pit beast who looks like that. So this pit beast goes and you can do all sorts of things. You can execute people so you have the executioner here who is tossing someone down in there and all sorts of things like that. The pit beast was this really cool thing that added to the flavor of the game.
 Now the guy there on the right with the axe is Ron the executioner. Who's this guy? With his amazing Viking beard.
 Ron the executioner's job is not only to execute people but also to throw in gigantic hunks of meat to the pit beast who then consumes them. That's our basic system. That's Ron. He's our NPC and that's what he can do in this world. So of course this is a talk about bugs so we got a bug. The bug was basically the executioner ran up to the edge of the pit and leapt in.
 That seems bad. My first thought was okay. Is there some kind of weird animation IK thing. Did he like sort of tweak in there. No. He was in this pose. When we saw the screen shot it was pretty clear. In this case this was a screen shot of my player sim doing this.
 Yeah, so this is the, what can happen is the player can click on the pit and say jump in.
 It's meant to be high level content.
 You're a, you know, maximum level character.
 You go in, fight the pit beast, and if you win, you get epic loot.
 Standard role playing game mechanic.
 It's not available autonomously.
 No player or NPC sim should be able to do this autonomously.
 So we're like, what happened?
 Well, fortunately, and I gave this talk as well several years ago about tools.
 We have tools that let us see.
 We got really, really lucky because this is one of those bugs where it happened once and they never got it again. Well, we managed to get it just through sheer chance. And we have really great tools, specifically this history down here, that let's us go, oh, shit, what did he do? Why did he choose this? And we got to walk into it. So we got to figure out exactly what it was. It was the insane trait. On the Sims 3 this was fine. So here's how the insane trait worked. And I won't name any names either but this was rather crazy.
 Basically what it does is if you have the insane trait it ignores tests.
 which somehow was fine on the Sims 3.
 Because you don't have a lot of Sims who need to be locked into places doing things.
 In a fantasy simulation game where there's an RPG and you need a quest Sim to stand there with a big arrow above his head, that becomes more important.
 Or you have Ron the executioner who needs to be at a particular place doing a particular thing.
 This can also completely break the game, right?
 If we have a constable or other certain NPCs that if they die, we're hosed.
 the entire game breaks down. Now the cool thing is that the designers came to us and like you know we like this. We like the idea of Ron the bad ass.
 right? We just want to be able to control it. That's the thing that we really want. And so we want to allow designers to have this control over the game. Well, we fixed it by fixing the horrendousness that was the insane trait to make it do something more reasonable. And incidentally for the Sims 4, we did the same thing. We made it so that it wasn't, that the insane trait wasn't so insane. Cool. So What is the purpose of all this?
 The first one seems really obvious to me, my first conclusion point, but it is not in my many years in the games industry, which is don't bypass existing systems.
 They're there for a reason.
 There's a reason why we have autonomous tests in our game.
 And if you completely bypass them, if you just short-circuit stuff, then it breaks.
 Fixing this bug fixed all sorts of those it-happened-once bugs all over the place.
 The second one, which is slightly less obvious, is use automated testing.
 it was painful to try and find those. We got super lucky with that one bug on medieval. On the Sims 4 we're like, you know, we don't really want to have to fight this anymore. Let's do automated testing. On the Sims 4 we had a huge massive automated testing suite that we just ran this smoke test basically over and over and over that would find all of these little annoying bugs. So do those things. Thank you.
