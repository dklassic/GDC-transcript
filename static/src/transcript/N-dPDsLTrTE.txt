Konnichiwa.
Hello everyone.
Thank you for coming to listen to Tunes of the Kingdom, our presentation about the legend of Zelda, Tears of the Kingdom.
This is a Hylian Shield.
It should be familiar to fans who have been playing the Legend of Zelda series for a long time.
But I doubt anyone imagined that you would be able to attach a piece of icy meat to it and use it to surf at high speeds in the latest game in the series.
This is a sequel to the Legend of Zelda Breath of the Wild, so you may have guessed there'd be a portable cooking pot.
But I doubt anyone predicted the cooking pot would also have excellent suspension.
Even we didn't predict that.
No matter how difficult the situation, sometimes you can just stick a bunch of logs together and figure something out.
Rather than using only wisdom to find a solution, sometimes it is just as important to have courage to power through a problem.
Hello, everyone.
I am Takuhiro Dota.
I joined Nintendo in 2003.
I've been involved in many titles, working on game programming, developing game engines, and prototyping new games from a technological perspective.
I was the technical director for both Breath of the Wild and Tears of the Kingdom.
As you just saw, we introduced the ability to stick objects together as a distinctive game mechanic in Tears of the Kingdom.
We wanted to let players combine objects to make new discoveries and try unexpected methods.
To start off, let me provide some background about how the idea of sticking objects together came about in Tears of the Kingdom.
First, let's return to the topic of Breath of the Wild.
We had two major themes during development of Breath of the Wild.
The first was a fast and seamless high-low.
In Breath of the Wild, we wanted players to see a place in the distance and be able to reach it simply going that direction.
But at the same time, simply making the game feel fast and seamless doesn't necessarily make the game itself fun.
So we came up with the idea of multiplicative gameplay.
This was the second theme.
Now then, what does this mean?
Multiplicative gameplay is a game structure that lets players combine actions and objects to create many different ways to play.
This was one of the themes of our Wild presentation for GDC 2017.
This is a slide from that time.
All objects in the game are connected by same world rules, such as physics and chemistry.
This allows actions and objects and the game field to interact on a raw basis.
These interactions cause many different things to happen automatically, such as falling borders, damaging enemies.
And game designers use these rules as a basis for level design.
Rather than creating something fun, create a system that makes fun things happen.
This is a concept behind multiplicative gameplay.
We wanted to take the two development themes that were realized in Breath of the Wild and expand on them even further for Tears of the Kingdom.
First, we decided to expand Hyrule and the scope of players' adventure.
After developing Skyward Sword, we wanted to try seamlessly connecting the sky and surface in the future title.
There have been many examples of a dark world that is a counterpart of the surface in the series.
In this game, we created the depths based on this concept.
Our producer wanted to dig holes in the world ever since development of Breath of the Wild started.
So, we dug holes.
We expanded the world of Hyrule more and more, going upwards, downwards, and even inside.
But let me repeat, simply making the game feel fast doesn't necessarily make the game fun.
How should players get around in the sky?
What kind of gameplay should exist in the depths?
We wanted to enhance the multiplicative gameplay too.
But how are we going to do that?
By the way, this is an article that was published on the Japanese Nintendo homepage after Breath of the Wild was released.
These octoballoons were special materials, even in Breath of the Wild.
They can make an object float when attached to it.
We implemented this functionality not to be used as a solution, but as a way to make the multiplicative gameplay even more plentiful.
Because of this, it wasn't a major element, but we actually felt that the ability to stick one object to another had a lot of potential.
So, when development began on Tears of the Kingdom, Mr. Fujibayashi, the game's director, produced the prototypes like this.
These were made in place of the wild game engine by forcefully sticking objects that appear in the game together.
By combining objects, he created something new.
By the way, the wheels are actually cog wheels that Mr. Fujibayashi stole from the dungeon.
So we began proper prototyping to stick objects together freely The potential of sticking objects together that we felt with the octoballons and the new value gained by combining objects shown by the prototypes.
We felt that this could be a gameplay point for this expanded world.
In the end, Ultrahand and Fuse were born.
What was once a simple king ingredient can now be attached to an arrow to become a powerful way to defeat enemies.
The board on the ground over there can also become a flying carpet.
A new game design using this system was born.
Even if you aren't sure what to use these things for at first, you will come up with new ways to combine them to make something useful.
Sticking two things together produces something new.
We used this as a guide when preparing this presentation.
which brings us to physics and sound.
By combining two technical fields that aren't usually spoken about together, we thought that we might be able to create an interesting story.
Today, I invite the lead programmers from each field to discuss this game from their perspectives.
And so, I will pass the baton to the lead physics engineer, Takayama-san.
Thank you very much.
Thank you, Dota-san.
When I first saw the prototype, I was excited that this was going to be a great game.
But I also knew this was going to be very, very difficult.
I said to myself, are we really doing this?
development is going to be chaos.
The more I thought, the more I worried.
But in life, it's sometimes important to have the courage to push forward.
As expected, the world fell apart.
At this rate, the world will destroy itself before Ganondorf comes back.
And so began our battle against the true menace of hell.
Hello, everyone.
I'm Takahiro Takayama.
Since I began at Nintendo, I've worked on many games as a programmer.
And now, I develop the in-house physics library and tools.
I was a physics programming lead on Breath of the Wild and Tears of the Kingdom.
Thank you for having me today.
Before we start, like Breath of the Wild, Tears of the Kingdom uses Havok as the base for the physics engine.
And on top of that, we have our in-house physics library, which is a foundation for the physics in Tears of the Kingdom.
Please let me switch to Japanese now.
With the aim of expanding the world by enhancing the multiplicative gameplay, there were two things we attempted, and I'd like to touch on those.
The first was to create an entirely physics-driven world.
The second was to create a system where unique interactions occur without any dedicated implementation.
I'll start out by explaining why we needed an entirely physics-driven world.
During development, when we say physics-driven, what we mean is objects have mass and moment of inertia, and they can be controlled using things like velocity and acceleration.
So what would the opposite be?
What is a non-physics driven object?
It's what we call a kinematic rigid body control.
It's forcibly moving a rigid body at a velocity calculated from the animation.
The implementation is easy, and the results are also visually easy to understand, so we used it quite a bit in the early stages of development for Tears of the Kingdom.
However, there is one thing we need to be careful of.
Kinematic-controlled rigid bodies have an infinite amount of mass and destroy physical calculations.
However, rigid bodies controlled by kinematics have infinite mass and can break down a physics-based calculation.
As seen in this footage, you normally wouldn't expect the metal object to get caught up like this.
Practically speaking, this meant chaos for us.
The clash between these non-physics-driven objects and Ultrahan, with its high degree of freedom, caused daily problems all over the land of Hyrule.
It went something like this.
I would hear things like, it broke, or it went flying, and I would respond, I know, we'll deal with it later.
Just focus on getting the gameplay in there and trying it out.
We were in search of a solution.
The starting point for the solution was the experience we had with Breath of the Wild.
This was a car that had broken down due to an unethical control.
The key to that solution was in our experience developing Breath of the Wild.
This is the cogwheel from earlier that was not functioning properly due to non-physics driven controls.
We connected the two fixed cogwheels with a constraint to transfer velocity and moved one of them with a motor.
Because all calculations are now physics-based, all the issues we were facing were now resolved.
From this experience, we realized removing all non-physics-driven objects and making everything physics-driven would lead us to the solution we were looking for.
In Tears of the Kingdom, gates were initially implemented as non-physics driven objects and thus were one of many objects that proved problematic when using UltraHand.
If the player were to place something underneath the gate, the physics calculation would fall apart because this was a kinematic-controlled gate.
So to address this, we made the gate physics-driven.
This is now controlled by connecting the ground and the gate with a slider constraint.
We then add a motor to power it.
And this removes all the breakdown.
But this shift from non-physics driven to physics driven brought many new discoveries for us.
This particular shrine is one where you can weigh a switch down by reducing the size of a block of ice.
When we changed the gate to be physics-driven to prevent the world from destroying itself, it also resulted in an alternate solution to the shrine, simply keeping the gate open.
This is precisely the kind of multiplicative gameplay we were seeking, and a confirmation that making everything physics-driven was the correct approach.
And this wasn't just limited to objects.
Player abilities, like recall, also needed to be physics-driven.
While implementation is faster using a non-physics-driven control for a quick gut check, it can also lead to something like this.
In the end, like everything else, we also changed recall to be physics-driven.
As a result, regardless of what the player does, we have a world free from self-destruction, as seen here.
Up until this point, I've spoken about how a world with a high degree of freedom requires everything to be physics-driven.
Every single thing, without exception, is built with dynamic, rigid bodies and constraints.
And this is what allowed us to create a world in which players can freely translate their creativity and imagination into action without destroying the world.
Next, I'd like to introduce the other important element necessary to bring this idea of enhanced multiplicative gameplay to life.
A system that allows unique interactions to occur without dedicated implementation.
The world we aim to create is a world where various events occur depending on the player's free will.
Enhanced Multiplicative Gameplay aims to create a world in which a multitude of unique interactions can happen based on a player's creativity and imagination.
And so we thought a system that allows for unique interactions to occur without any dedicated implementation is what we needed.
Dedicated implementation here refers to having a dedicated program for each and every interaction we wanted to include.
For example, we wanted the player to be able to build vehicles to explore, but we didn't implement any sort of dedicated vehicle program.
All we did was implement the individual elements, like wheels, a steering stick, and a wooden board, so the player can combine them to create a vehicle themselves.
The same goes for this gate.
There was no dedicated programming.
This is just a combination of wheels, a stone slab, and chains.
The wheel is fixed onto the gate, which opens up as the wheel rolls up the chains.
Paddle boats are yet another example.
Buoyancy and resistance acting on the paddle boat's individual elements like the wheels and wooden boards result in this unique interaction.
So far, I've touched on the interactions themselves, but I'd like to now talk about the various parts or components that trigger these interactions.
Take the wheel.
It's comprised of three rigid bodies, the wheel, motor, and shaft.
Instead of the shaft connecting directly with the wheel, it holds up the motor.
The torque from the motor transfers to the wheel's rigid body, causing it to rotate, and the friction between the ground and the wheel creates the driving force.
Chains are used to pull an object or change the direction of a moving force.
It's a series of capsule-shaped rigid bodies that vary in number based on length and are connected via ball socket constraints.
In order to simulate water resistance when an object enters the water, we used the projected area of the direction of velocity to calculate the resistance.
An easier way to simulate water resistance would be to simply apply velocity decay in all directions.
But in order for rafts and boats to have a more convincing feel and movement to them, we needed changes in velocity based on the contact surface.
The components of multiplicative gameplay were not limited to just objects and zonai devices.
The calculations pertaining to water are applied equally to all objects, allowing us to create this unique interaction, also known as a paddle boat.
Since our goal was to create a system where unique interactions occur without dedicated implementation, we included many different components that can trigger these interactions.
And we've been so happy to see so many players combining these components in ways we hadn't thought about as they embark on their adventures.
It looks like the Koroks are happy about it too.
I've shared the two concepts crucial in our efforts to create a world that expands through enhanced multiplicative gameplay.
An entirely physics-driven world in a system where unique interactions occur without dedicated implementation.
But is that enough?
The answer is no, not at all.
There's one more vital piece of the puzzle missing.
That piece is working together as a team.
Development consisted of each member of the team understanding the gameplay they wanted to realize, and understanding what they needed to do to achieve it.
I'd like to now share some of the team's efforts.
First, in order to create an entirely physics-driven world, we worked with the artists and designers to set up the physics parameters correctly.
When we specify the material, such as wood, steel, or stone, the density of the object is determined, and the mass and completion moment are automatically calculated.
The volume required for calculation is automatically calculated from the shape of the shape.
When we assign a material property to an object, such as wood, metal, stone, and so on, that object's mass and moment of inertia are automatically calculated.
The volume necessary for that calculation is, in turn, automatically calculated based on the object's shape.
But there are times when an automatic calculation doesn't fit our needs.
And in those cases, we work with the artists and game designers to make adjustments.
For example, Tears of the Kingdom is made thicker than the actual board.
This is due to various reasons, such as the visibility and operability of the game.
For example, objects like boards, slabs and plates in Tears of the Kingdom are actually thicker than those in the real world, due to various reasons like the need to make them easier to see or control.
If the mass for these objects were to be calculated based on the shape as-is, they would become way too heavy.
So we corrected the mass and moment of inertia to match what the player would expect them to be.
The gimmicks in HOKORA are designed to make everything move physically.
We created a verification lab to make sure that every single part moves correctly.
Because all the puzzle elements for the shrines are physics-driven, many of them required precise construction.
We created sort of a testing room so that we can check to make sure each and every one of them were functioning properly at any given time.
Even complex objects such as carriages were made by close communication between the engineer and the artist.
The size and position of the wheels were adjusted from the physical behavior, and the artist created the best appearance that matched it.
Complex objects such as wagons were created through close and careful communication between engineers and artists.
The size and position of the wheels were adjusted based on their physics behavior, and the artists created the best possible look for them.
This is an example of using wheels for purposes other than driving a vehicle.
When a game designer is working on a shrine, they create content that maximizes multiplicative gameplay and fun.
In this shrine, the key lies in changing the orientation of the board.
This idea came up when we used the projected area of the direction of velocity in calculating the water resistance.
I personally like this idea very much, as it leverages an intuitive interaction with the water.
Even the wheel, as a component to trigger unique interactions, is a result of the collaboration between game design, artistic perspective, and physics.
Because we were focused on making sure the experience of driving assembled vehicles felt right and enjoyable, I vividly remember the team's excitement about how good the driving felt once the suspension was attached.
The artist in charge designed a wheel with built-in suspension which she mentioned was quite challenging given it's not something you really see out in the real world.
The shaft holds up the motor via the suspension and the motor provides driving power to the wheel.
The length of time the wheel makes contact with the ground is increased by having the wheels along with the motor shift up and down and left to right.
There's also a range limit constraint and a plane constraint to control the range of movement.
Lastly, I'd like to talk about the portable pot.
Since they can be placed anywhere now, there's no guarantee the pot will be placed on a flat, level surface, meaning your dish could spill out.
As a countermeasure to this critical problem, an artist proposed adding telescopic legs to the pot.
But in the end, we decided to put a joint at the bottom of the pot for stability.
I'm happy to say your soup is now safe.
And furthermore, we were so happy to see that the joint on the portable pot has seen a whole range of other uses, thanks to the creative imagination of so many players.
I introduced the team's overall efforts.
In order to create the vast world of Tears of the Kingdom, we needed to work with a game designer and artist who understood the world we wanted to create.
As you can see from the examples I've shared, in order to bring the vast world of Tears of the Kingdom to life without it falling apart, it was essential that we worked intimately with designers and artists that had a deep understanding of the world we wanted to create.
This concludes the physics portion of the presentation.
I'll now pass it along to Osada-san to talk about the sound.
Thank you very much.
Thank you, Takayama-san.
But aren't you forgetting something?
You forgot the sound team.
There.
That's better.
Hello, everyone.
My name is Junyan Osada.
For several years after I joined the company, I was a sound designer in charge of creating sound effects.
Starting with the development of Breath of the Wild, I became the programming lead, and I developed the in-house sound library and tools.
Thank you very much for having me here today.
I'm going to switch to Japanese now.
Speaking in Japanese Now then, you've seen how the vast and seamless world of Breath of the Wild was further expanded for Tears of the Kingdom, but this wasn't just limited to physical space.
With the ability to combine various objects, the freedom within the gameplay itself also expanded.
Because of this, many different kinds of spaces now appear within the game.
We wanted to depict how sound spreads and naturally echoes in every corner of this expanded Hyrule, whether in open air places, complicated terrain, enclosed spaces, and so on.
To do this, it seemed we would need some rules that could act as the focal point of our sound design.
We thought perhaps that real-world acoustic characteristics could be those rules, and so we decided to go back to the basics of what it means to make sound in a 3D space.
But, before we get into that, did you know that we've worked on various types of interactive music in the Legend of Zelda series?
Here are just a few examples from past games.
Let's go!
Pretty nostalgic, right?
Times have changed, but even now, in an era when orchestrated recordings are more prominent, we pour our energy into interactive musical expression.
This is the first time I've played this game As games grew larger in scale and freer in gameplay, so grew the demand for an even more complex musical expression.
We developed this tool in order to meet those demands.
Now we can graphically edit the way music transitions by connecting nodes.
You could say that this is an indispensable tool for designing interactive music as it's being composed.
Speaking of which, we got to see the musical troupe in one of the earlier videos.
We tend to notice that their performances and animations are synchronized, but another distinctive factor is that their music actually plays in the game space in the same way sound effects do.
What if we were to express the change of a bold sound like interactive music with sound effects?
This means controlling the waveform so that the sound becomes natural in the 3D game space, not just the waveform itself.
What if we were to express some of the bold changes, much like the interactive music we spoke about, but in sound effects?
This means rather than just playing an audio file as is, manipulating it so that the sound plays naturally within a 3D game space.
In the first place, the sound in a 3D space can be heard from far away, or from the right speaker on the right side of the screen, or from the cave where the sound reverberates.
We can define making sounds in a 3D space to mean reproducing changes in sounds within the game, such as how sounds coming from far away sound quieter, sounds coming from the right side of the screen can be heard from the right speaker, and sounds echo when the player enters a cave.
It is common to use a distance reduction curve to express the sound going away, but this does not simply mean that the sound should be reduced.
It is common to depict sounds moving farther away by using a distance attenuation curve for volume, with distance taken on the horizontal axis.
But that doesn't mean just lowering the volume is enough.
Not only do we lower the volume, but we also apply filters that muffle the sound, and reverb to blend it with the ambient sounds of the environment.
In doing so, we can make it feel like the sound is realistically moving farther away.
Rather than adjusting the parameters, another method that works well is preparing both short and long distance sounds and crossfading them according to distance.
These methods are well known and have been used on many existing titles.
However, there are many different kinds of spaces in Hyrule, so simply changing the sounds isn't enough.
We want players to be able to tell which direction a sound is coming from, how far away it is, whether it's inside a cave or a forest, and so on, just by hearing it.
To do this, all sounds really must be controlled by the same rules.
For example, it is a well-known property of sound that when distance is doubled, volume is halved.
This represents the fact that, in point sources, sound pressure per unit area attenuates with distance, and can be determined with a calculation.
Put in simple terms, this means that loud sounds can be heard at a distance, while quiet sounds cannot.
In other words, if you want a sound to be heard from far away, then it needs to be loud.
A simple logarithmic graph like this shows the change in volume decreasing by half as distance doubles.
But is that all it takes?
For example, a rooster's crow is reportedly about 100 decibels.
It would appear to take 100,000 meters before its sound would attenuate.
Converted to miles, that's about 62 miles.
In Japan, the distance from Tokyo to Mt.
Fuji is about 62 miles.
While roosters certainly are loud, I have a hard time believing a rooster crowing in Sacramento could be heard from this stage.
Basically, it's very difficult to represent direct sound attenuation using only the phenomenon of sound diffusion.
This is where excess attenuation, or in this case, air absorption in particular, comes into play.
With air absorption, experiments have shown that the higher the frequency, the stronger the attenuation.
Since air absorption decays in proportion to distance, it becomes a curve on a logarithmic graph.
With this, the audible range for a rooster's crow becomes a much more realistic distance.
Here, too, we use filters to depict stronger attenuation for higher frequencies.
We take excess attenuation into account and make adjustments to find the right balance for things like what characteristics we need filters for and the distance at which those filters should be applied.
Here are some examples of sounds that have been designed in such a way.
Can you sense the change in the way the arrow sounds when it impacts?
Did you hear the sound?
Did you hear the way the sound of the vehicle blends into the environment as it gets farther away?
When depicting sounds within a game space, it's important to factor in not just distance, but also indirect sound.
Whether it's the inside of a house or within a rock cave, you can represent the characteristics of that space with sound by correctly setting how the sounds reverberate or how long their echoes last.
We've used reverb effects on other Zelda games in the past as well, but there were too many parameters to adjust, and it ended up being a lot of work to address.
So, we made it so the reverb parameters would be automatically calculated.
Information such as room capacity based on the direction and distance of nearby walls and sound absorption rate based on the material of the walls is collected and used to calculate parameters using a formula called Eyring's Reverberation Time Equation.
This is what echoes sound like when based on the reverberation equation.
Taking it a step further, this game has a much larger amount of complicated terrain such as caves.
Sound obstruction and occlusion are also important when creating even more realistic sounds for Hyrule.
In this game, in order to depict a three-dimensional world, the terrain contains voxel information.
Each voxel stores terrain information, such as whether its coordinates are located indoors or whether they are near the water's surface.
They also contain information vital to level design, such as whether it's possible to use ascend.
Sound uses these voxels, too, to search for sound paths using an informed search algorithm.
To give a bit of extra information, in this game, the sound system performs calculations for the audio listener based on the camera's position, but searches for sound paths between the sound source and Link's position.
This is why sound changes when you go behind a wall like this.
This also addresses cases when the sound path is changed dynamically by a door.
As you can see, expanding the degree of freedom and the world itself paints the world with a diverse palette of sound.
The important thing here is that all sounds follow the same rules, and among those rules, loudness is particularly important.
Basically, if you create acoustic characteristics based on the loudness of a sound, such as how loud it is and how far it can be heard, all that's left is to assign a loudness to each sound, and you'll be able to hear them within the game space properly.
This is how sounds can now be heard in Hyrule, from quiet sounds like the heart container to loud sounds like the storm cloud.
And what's more, instrumental music that isn't a sound effect can also sound as if it's echoing off of nearby walls or coming from the bottom of a cliff.
Each and every sound now plays naturally within the game space.
But now that I mention it, there is an incredible amount of freedom in this world.
It would not be possible to prepare dedicated audio files for all of the many different things that can be created with UltraHand.
And so, like with physics, the sound team also thought of a system where sounds would play without dedicated implementation.
Take a look at this wagon for example.
This is just a combination of the sound of wheels rolling, the short repeated shaking of the wooden bed, the chains connected to the bed, and so on.
We did not use any recordings of actual wagon sounds.
Even this paddle boat sound is a combination of the sound the water makes when wheels rotate through it, and the sound of wooden boards fighting water resistance as they splash through the water.
We made a system that analyzes the way rigid bodies controlled by the physics system will move, then bases the sound on their size and material.
As a result, various sounds will now play without needing to have a dedicated program set up to play them.
Whether it's the flux construct's geometric movements, or sliding down a rail on a hook, The suspension bridges are also held together just with physics, without any kind of special suspension bridge program at all, and their wobbling and creaking sounds play automatically.
Of course, these sounds are also based on the sound loudness rules I explained earlier, and they play naturally within the game space.
The sound designer was surprised to hear that the system was able to create sounds that were not made by the player.
Having come up with this form of implementation makes it feel like we have, in a sense, built a rule system for how sounds are made in the world of Hyrule.
Many of the sound designers were surprised at the high quality sounds that were created with this system.
Sounds which they had no memory of creating.
Even the director told us, so this is basically a physics engine for sound, isn't it?
We didn't start out with the goal of building such a system, but it was the result of our efforts to use sound to make the expanded Hyrule more dynamic.
That's all from me.
Thank you very much.
Thank you, Takayama-san, Hosoda-san.
Physics and sound are two different fields, but I think they have some things in common when it comes to how they evolved in this game.
First, both steer towards a more rules-based system design to allow for greater player freedom.
And these designs added another layer of complexity to interaction that occur within the game.
And as a result, they each created a system that brings new discoveries, not only to players, but also as developers.
As I explained at the beginning, the concept for multiplicative gameplay was rather than creating something fun, create a system that makes fun things happen.
With Tears of the Kingdom, we aimed to achieve an even higher level of freedom.
As a result, rather than determining each object movement, the physics team focused on creating a system that makes objects move.
And rather than creating every sound you heard in the game, the sound team created a system that makes it sound that way.
The fact that they focused on and worked hard to tune this system is fascinating to me.
Rather than creating unique interactions, create a system that causes unique interactions to occur.
I believe this was the essence of the evolution of physics and sound in Tears of the Kingdom.
That's all for our presentation.
Thank you for your kind attention.
The interpreters you have heard today are from Nintendo of America.
Let's have a big round of applause for them, too.
