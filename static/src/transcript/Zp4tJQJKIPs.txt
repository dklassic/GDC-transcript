Hi, my name is David Lightbound, and the name of this presentation is Tools Live Longer Than Games Do, what I learned by interviewing John Romero, Tim Sweeney, and other legendary game tools developers.
So before I begin, I'll just tell you a little bit about me.
I work as user experience director for the technology group at Ubisoft.
The technology group is a group that creates engine agnostic technology for all the different teams at Ubisoft.
And basically, I focus on user experience of the tools and pipelines.
So before I worked in game development, I worked in web and motion design.
So in the 1990s, if you knew a little bit of HTML, you had a pretty good chance of getting a job working in the exploding web design industry at that time.
And so I learned a lot about 2D design and user interface design.
And I also did a little bit of motion design because Flash was getting very popular at that time as well.
And then in 2001, I had the opportunity to work in game development, which I've been wanting to do for a long time. I've been doing some 3D on the side at home, and so I took it, and I haven't looked back since.
So it's been about 20 years now that I've been working in game development, which is pretty crazy.
So I've spoken at various conferences around the world on the topic of user experience design in game development tools.
So a couple of times at GDC, but also at SIGGRAPH, at CEDEC, at the UX Summit, at the Montreal Games Summit.
But yeah, always on this topic that I'm very passionate about, which is the user experience of game development tools and pipelines.
Specifically regarding GDC, I co-organized the Game Tools Summit, formerly known as the Game Tools Tutorial Day, with Jeff Evans.
And I also took over recently the tools design roundtables from Robin Yann Storm.
So if you don't know about those, you should definitely check them out, especially if you're into tools development.
So a little bit about this talk.
Why do I want to talk about this today? Well, one of the reasons is about this, about game postmortems at GDC. So many of you may be aware that every year there, for the last couple years, there have been these really interesting game postmortems at GDC. So here are just a few, you know, Myst, Diablo, Goldeneye, Robotron, and many, many, many others that are always really compelling and really, really well received.
And it's really great to preserve the history of these things so that we can learn lessons from them, because the people who did these games certainly learned a lot, and they could pass that information on to other people.
That's what the value of these talks is often.
One of the things that occurred to me is that there have been none, as far as I know, tools post-mortems, or very few, that really focus on the tools.
And in the same way as we can learn from the history of game development, I think we can also learn from the history of game development tools postmortems, and really preserve that history and benefit from it.
And I think it's important for us to learn those lessons, because often, you know, these lessons can be still applied years later.
And that's because you could say that the people who forget the history of game development, game tools development, are doomed to repeat it.
That's a quote I'm just going to attribute to FixItFelix.
Just seems like something he might say.
So what I did is I decided to interview key people in the history of game development tools.
So a whole bunch of different people who have worked on really interesting and compelling historic tools that we consider classic game development tools.
So one of the people I spoke to was John Romero.
And we spoke about Ted, the tile editor.
I also spoke to Tim Sweeney about the first version of the Unreal Editor.
I spoke to Chris Norton about the DSX tools.
Obviously, there's a level editor, but there are many other tools as well that were used to develop DSX.
So we spoke a bit about that.
I spoke to John, Tim, Dan, and Mike about Gamebryo.
Of course, as many of you may know, this was one of the first third-party available game engines that you could license and use.
as opposed to developing it in-house.
And finally, a Marc LeBlanc about DRAWMED and SHOCKED.
So we'll get into all of these.
But just to first talk about how all of these different tools, Unreal Editor, TED, and so on and so forth, this list, you might be surprised to find out when you see this list that most of these tools are still used today.
And yes, there are some professionals maybe that use it. It's a lot of hobbyists as well. But that's really still significant and important. And I'm sure that most of the people, and I can say from my interviews, I can say this is true, did not expect these tools to be still used today. And that the decisions that they made back then They also didn't expect to still be something that people have to contend with and deal with when they use these tools these days.
And that brings me to the main message of my talk.
And that main message is that tools live longer than games do.
And this one's easy to attribute to somebody because it's what John Romero said to me during our interview.
So obviously, John Romero needs no introduction, working at id Software for a long time.
One of the interesting things, though, that you might not know about his history is that back before he, in the early days of his career, one of the first experiences he had was playing this game called Pegasus 2 on the Apple 2GS, or the Apple 2, rather.
And it had not only a game, but it also had a terrain generator, which you could use to build levels for the game, which he had never seen before, and he was really attracted and compelled by this.
I'm sure many of us have had the same experience as well as tools developers.
And so, of course, you know, John worked on Wolfenstein and Doom and Quake, etc.
The tile editor was used to make a whole bunch of games.
And so you can see here a couple of examples, you know, Dangerous Dave and the Haunted Mansion, Wolfenstein, A Rise of the Triad.
And in the bottom right-hand corner, in fact, you can see Slordax, which was the first game that, the first version of TED, the tile editor, was used to make that game.
And what you may also not be aware of is that this is a great example of a tool that lived longer than the game did, in the sense that You can see how on the left, in the case of Commander Keen, how the tiles, you can see how they were placed to build up the different blocks of the level, and sort of it's like a side camera projection. You can see how those were placed. And when it came time to build Wolfenstein, they decided, well, you know what, we're just going to use TED from a top view and wherever we place a block, it's going to be kind of like a cube or like a square in our environment.
So, and apparently this was a decision that was made very quickly.
So they used the tile editor, TED, the tile editor, to build the environments for multiple games.
In fact, TED was used for 33 different game titles over the years, which is a lot.
So definitely something that lived longer than the game did.
And TED is still used today.
See, these two pages here are very recently updated tutorial pages.
for how to use TED, the latest version being version 5.
That was the one that id Software made, and it's been the same version that's been used for years and years and years.
So TED is still used and still alive today.
So we can tell, obviously, tools live longer than games do, but why is it important for you to remember that and to keep that in mind as you're developing your tools?
Well, the reality is that we sometimes have time to do just enough tools development to ship the game.
And we do that, we get the tool done, the game ships, you know, we're able to provide functionality for the content creators to build the game.
And we say, okay, we did it.
We shipped the game, we're done.
That was good just for that one game.
But the thing is, that game, the game that we use the tool for, often then becomes the next game.
And then the next game and the next game and that tool continues to get used when it was really only intended to make that one game in the first place and doesn't really scale well over time.
And you don't really have a choice in this, even though if you don't want people to use it or you don't think it was ready, because you might change teams, you might change companies.
Someone else might try to keep it alive or keep it going.
And you might say, well, this is not at all how I expected this to work.
I didn't expect people to use it for this long.
This is something certainly that Marc LeBlanc experienced when we did our interview and he found a community on Discord that was using Dramed years later, and he did not expect to have a community this size and this active.
So, tools live longer than games do, and it's important for you to keep that in mind.
And the other reason why is because you want your tools to be an accelerator.
You don't want them to be a hindrance.
You don't want people to use them because they have to.
You want people to use them because it helps them.
It makes their lives, their jobs better.
It helps them create content for the game.
You want your tool to stand the test of time.
And one of the things that we can do to try to ensure that our tools stand the test of time because tools live longer than games do is we can learn from tools development history, which is why I wanted to preserve it.
And one of the things I did in all of my interviews was I asked this question, what advice would you give to tools developers today?
And the answers to that question led me to come up with three different questions that you should ask yourself as tools developers when you're developing a tool because tools live longer than games do.
So let's go over those three questions.
The first question is that you should ask yourself, and these are the three main takeaways that I feel you should take away from this talk.
First is, what is the best way to solve a problem?
The second question you should ask yourself is, what can you learn from other tools that solve the same problem?
And finally, you should be asking yourself, how do people use your tools, and how do they fit in with their other tools?
So let's start off by talking about that first question.
What is the problem that the users want to solve?
So tell me if this sounds familiar.
You're sitting around a table.
You're a tools developer, let's say, or you're responsible for organizing that, organizing the tools development pipeline development.
And there are people around the table also who are people who might use the tools.
And somebody, either yourself or someone else in the meeting, might get frustrated during the meeting before or maybe after and say to themselves, why can't they just tell us what they want?
Why can't they tell us how they want this tool to work?
The reality is that people who use the tools are not necessarily experts in making tools, especially not user interfaces.
And so it's something to keep in mind is that it's not always the user's responsibility to tell you how they want the tool to work.
But.
It is the user's responsibility to tell you what problem they want to solve.
And that touches on something I spoke about with Chris Norton.
So Chris Norton worked at Looking Glass Studios and Origin in the past before working at Ion Storm, which is probably the studio he's the work at the studio he's best known for, which is where he worked on Deus Ex as the lead engineer.
And he took on a whole bunch of different roles, in fact.
Now, for those of you who have played around with some of the development tools in Deus Ex, you know that Unreal Engine was used, Unreal Editor was used for level design, but there's also a bunch of other tools that come with it, like ConEdit, the conversation editor, and so on and so forth. A bunch of exporters as well.
And one of the things that Chris said to me, one of the things that he learned was this, listen to your customer.
don't ever write tools in a vacuum.
They talked about how he talked about how this was a important lesson that he learned.
Um, and it speaks to that idea of understanding what is the problem the users want to solve.
And John Romero echoed this as well, saying a lot of times tools programmers don't go far enough asking the questions about why do you want that?
What is it that you're actually trying to do?
So I'll give you another scenario, another example that might also be familiar.
Let's imagine that you get a request from a user and they say, you know, we really want the no button in the user interface to be read.
Well, one of the mistakes that's often made is that we don't often dig deep enough into understand why that's the problem, why that's the case, and that we miss an opportunity to really be able to provide a great tool, a great user experience, and great value for the user using it, as opposed to just blindly implementing what they're asking for.
Let's imagine we ask them, why do you want the No button to be read?
And they might say, well, because I keep clicking on it by mistake.
And then you might ask why again.
Why do you keep clicking on it by mistake?
And they might say, well, it's because I click on it by accident because it's next to the yes button.
Okay, but why is it bad to click no?
And they might say, well, because if I click no by accident, when the editor asks me to save, I lose my work.
So the real problem here is that either they need some sort of protection for their file, or they need an automatic backup of their file.
The problem is not to solve, it's not that they want the button to be read, but the problem to solve is that they're losing their work.
Okay, so important whenever you get a request to always ask why, why, why, to dig into that to understand what is the real problem that the users want to solve.
So that's the first question to ask yourself.
What is the problem that the users want to solve?
Second question that you can ask is, what can you learn from other tools that solve the same problem?
So those of you who work in a studio that have concept artists, I don't know if you've ever watched a concept artist work, but one of the things that I experienced and one of the things that I realized while watching really professional, like the best concept artists in the world are that they use a lot of references.
And you might find this counterintuitive.
You might think that, well, if you're a really good artist, you don't need to use as many references, right?
It's all in your brain.
You know exactly how to do everything.
But I feel that one of the things that makes them so good is that they use more and more references than somebody might think.
They use references.
In fact, some of the concept artists that I've seen even need special tools to help organize and to lay out mood boards of their different references, help them to copy and paste those images into their software that they're using to draw their concept art in.
So it's interesting to think that concept artists, one of the things that makes them so good, in fact, I think is the fact that they look at other stuff so much.
And that's something that I feel in game tools development, we don't do enough of.
We don't take the time to really look at other tools.
So looking at other tools that solve the same problem can make your tools better.
And that's something that I spoke about with Marc LeBlanc during our interview.
So Marc LeBlanc also worked at Looking Glass and Origin.
You may know the Looking Glass, of course, and those studios from the System Shock series of games, or from Thief, and many, many other titles as well, of course.
And the editor that Mark helped to develop for those games was called DrawMed, or Shawket, depending upon the game.
And you can see here is an example of it on the left.
One of the things that's really interesting about, and that was different about DrawMed, was, as Mark said during our interview, was that the world is made of media.
In other words, there are a lot of other engines at that time were using classic Boolean, subtractive geometry and environment building.
Whereas one of the things you could do with DRAWMED is that you could fill an area with a kind of media, a kind of material.
In other words, you could fill it with water, or fill it with dirt, or things like that.
So for example, if you were holding a torch or there was fire.
and it would interact with an area that you'd filled with water, well, the fire would go out.
Or things would be flammable. Or, for example, if you were walking on something like hard tile, it would make a lot of noise, whereas if you're working on something soft like grass, it would make less noise, and so on and so forth. So it was quite innovative at the time, actually, this editor. And just a little fun fact, by the way, that you may not be aware of is that Chris actually worked with Mark for a period of time on this engine, which I think in early stages was called the Dark Engine.
So Mark said this to me during our interview.
Look at the old tools and ask why people were doing what they were doing.
And this brings me to something that I talk about a lot and that I think about a lot, which is the natural selection of game tools or game tools interfaces.
What does that mean?
When something in a game development tool works well, it tends to stand the test of time.
And then other people will see that and use that in their tools.
And it'll give them the idea of making their tools work that way as well.
So if there are elements of game tools that don't work well, over time, they will kind of naturally be removed from the ecosystem, so to speak.
And so there's this natural evolution of what works best.
in tools, what works best in the user interface and the user experience of tools.
And what you see in the majority of other tools is likely not a fluke.
It's likely because over time it has been kind of arrived at as one of the best, if not the best solution to that problem.
I think it's really important to keep that in mind, and that's why it's really useful and really powerful for all game tools developers to learn from other tools that solve the same problem.
Once you understand the problem the users want to solve, going and finding other tools, even if it's just a small part of the tool, going and finding other tools that solve that same problem, and looking at it, and learning from it. It doesn't mean copying it outright, but it means at least being aware of it and being inspired by it.
and trying to design your user interface around that.
There is so much value.
It's a really big benefit to your time.
It's time very well spent.
Take the time and go and look at other tools and how they work.
I mean, I could think of much more complex examples, but just to give you a really simple example that you can then extrapolate to other parts of game development tools.
Think about the contextual menu. The way that it was originally implemented on the Xerox Alto in 1973 is almost unchanged over the years.
You can see that it works pretty much exactly the same way.
Because it works well, because it's fit for its purpose, and there's no need to rethink it.
right? But by going out and looking at other tools that solve the same problem, you will come upon these solutions where you'll go, Oh yes, of course, of course it should work that way. And that's going to be very natural for your users as well, because if it resembles another tool they've used in the past, it'll immediately be familiar to them.
Now, an example of something that Mark says that he regrets doing was using WXSD as opposed to WASD to move around the environment.
Now, this is a decision for sure that was made because the game also had the same hotkeys, but years later now, he was talking about that Discord community, you know, and all the people there.
He feels like he wishes that he had considered, you know, what a lot of other people were doing at that time to try to follow conventions as opposed to coming up with something different.
And Chris said something about this as well.
He said, you look at a lot of the professionally designed tools and they're usually pretty consistent.
There are design guidelines for how those things should work.
Now he's talking about probably things like design guidelines like the fluent design system from Microsoft or spectrum from Adobe or carbon from IBM.
There are design guidelines out there that you can reference that tell you how these user interfaces are most often supposed to work.
Now you can either go and look at how other companies have done this or you can develop your own guidelines as well that will be similar to the tools that you have internally within your company.
So really important to consider how other tools solve the same problem because it can save you tons and tons of time.
And also, it can lead to you designing tools that are more natural and more intuitive and more familiar for your users to use.
So that's number two.
What can you learn from other tools that solve the same problem?
And now let's move on to the final question you should ask yourself.
Number three.
How do people use your tools and how do they fit in with their other tools?
How well do you know the user's tools environment at your studio? If you were to walk around the studio, could you name all the other tools that the users who use your tools also use at the same time? What are the other tools in their tool belt that they reach?
for back and forth, right?
Do you know all of them?
Because in the majority of cases, people don't necessarily spend all day long in your tool.
They spend a proportion of the day in other tools as well.
And those tools will be familiar to them.
And it's important for you to understand what those other tools are so you can see how they interface with yours.
And also, it's very important for you to understand the people to go and sit with and watch and understand the problems and the challenges that these people have and what their work environment is like.
And this is something that Tim Sweeney spoke about during our interview.
Obviously, you know Tim Sweeney from Epic Games and the Unreal Editor.
When I spoke with him, we spoke about the first version of the Unreal Editor, Unreal Engine 1, which the user interface, believe it or not, was made with Visual Basic, a very early version of Visual Basic. And of course, that was replaced over the years.
But a very impressive package at that time, because not only did it have to produce amazing graphics at that time, but also it had a very user-friendly interface for the tool.
And here's something that Tim said.
There's this iterative process where the Engine team is out creating new ideas and then sharing them with the game teams and getting constant feedback on what works and what doesn't work.
Now there's some key words in there, iterative process and constant feedback.
And he's kind of talking about the user-centered design process.
This is the ISO certification image of that, where you understand the problems that the users have, you get constant feedback, and then you iteratively improve it.
And then you get feedback again, and you go on over and over again.
This is one of the secrets to having a better user experience in your tools.
And something else that came up as well in the interview about Gambrio with John, Tim, Dan and Mike.
Gambrio, of course, you may know the earlier versions of it, you know, when it was previously called Netamurse as well.
You may have heard of a Dark Age of Camelot or a Prince of Persia 3D.
That was for an earlier version of Gambrio was used for that before it evolved into a Gambrio when it was rebranded.
And of course, you probably know about its association to games like Oblivion and Morrowind.
Gamebryo was used for early versions of that, but Bethesda really over time replaced large parts of that to the point where there's probably almost nothing left over of the original Gamebryo inside what's going on.
now called the creation engine that was used for those games, although they were joking about this in the interview that Gambrio gets flack sometimes for Oblivion and Morrowind, even though the systems that they're talking about, like AI, have nothing to do with Gambrio at all. Anyway, but one of the things that Mike said is this, and when they were comparing themselves to Epic, they were kind of in competition with each other, right?
Gambrio versus Unreal Engine Editor.
At Epic, the artist was king.
Gambrio was very engineer-centric.
And he's kind of talking about that user-centered design loop.
And that's one of the things that Epic does is going out and getting feedback from their users internally.
And he went on to say this.
We never had enough content and users in-house to know whether what we were making was going to be useful.
And this is something as well, a really interesting point that came up with Chris when we were talking about the conversation editor that really hammers home the point that you can't understand what your user's reality is unless you go and sit with them at their desk and watch them work.
He said this, lead writer Sheldon Picotti had RSI, repetitive strain injury, so he couldn't type.
He did almost all of Deus Ex with Dragon Dictate voice transcription.
So for those of you who've played Deus Ex, you might be surprised to know that a lot of that dialogue was put in using Dragon Dictate.
Now, if you're somebody working on a tool, it might not even occur to you that somebody might be entering their data in a way that you didn't expect.
But I love this diagram from Microsoft about inclusivity and accessibility, where when we think about the limitations for people in touch, sight, hearing, and speaking, we often think about these permanent things, like having one arm, being blind, being deaf, or nonverbal.
But remember, there are also temporary limitations, like an arm injury or a cataract for vision, or situational, like a new parent.
For those of you who know, you're holding the kid with one hand, and you only have one hand free.
or a distracted driver, or temporary limitations to hearing and speaking, like an ear infection or laryngitis, or situational, like a bartender not being able to hear, or somebody with a heavy accent.
Finally, Chris said this, and I think it's really important.
As an engineer, you think a certain way, and you think, oh, I can use the tool this way, and that's the most efficient way, so that's the way I'm going to write it.
You're almost always wrong.
It's important for you to really understand how people use your tools, and how they fit in with their other tools.
So go and sit with people and watch them work to understand what their environment is like, because you'll never understand those sorts of things that I just gave examples of, unless you go and watch them work.
So that's the third and final question that you should ask yourself.
How do people use your tools, and how do they fit in with their other tools?
So what is your takeaway from this presentation?
Well, it's important again to remember that you have to ask yourself those three questions because you don't know how people are going to use your tools.
You don't know how long they're going to survive for.
You don't know how long they're going to be used and you don't know in which context they're going to be used.
Even though we only have often just enough time to be able to develop the tool, it's just good enough to ship the game.
It's always a good investment of your time to take a bit of time to do these three things.
Number one, ask what is the problem that the users want to solve?
And we saw that in all the different interviews, understanding that, again, it's not the user's job to tell you how they want the tool to work, but it is their job to tell you the problem they're trying to solve.
And that often helps us to really get to the heart of finding the best possible tool and user interface to solve that problem.
Number two, what can you learn from other tools that solve the same problem?
So once you understand the problem, go out there and look at all the other tools from other companies.
Look at tools from Adobe, from Autodesk, from Microsoft, from other tools out there that maybe the users already know and might already even be familiar with.
And you might be surprised to find that there are a lot of really great ideas that are already solved problems that you can then just take and save a lot of time.
And you can save a lot of time for those really hard problems that may not be covered by the tools out there.
But there are a lot of a lot of things that you'd be surprised to find that there are good solutions to those things that we can learn from.
And then thirdly, how do people use your tools?
And how do they fit in with their other tools?
Very important for you to understand this as well, to see what the work environment is like.
What are the other tools that people use?
How well do you know the other tools that they use?
What else is familiar to them?
And what other kind of limitations do they have, whether they be temporary or permanent or situational?
What do you know about their work environment?
And how can you use that to try to provide the best possible tools that will stand the test of time?
And that's, again, because tools live longer than games do.
Thank you very much.
