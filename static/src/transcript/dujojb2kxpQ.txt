Eh.
Sorry that you guys couldn't get into the indie soapbox, I guess.
But thanks for coming.
We appreciate it.
My name's Danny.
And I'm Mark.
And we're from South Africa, literally the other side of the world.
There we're involved in growing a local games industry and running QCF design, where we made a game called Desktop Dungeons.
Desktop Dungeons is a quick play puzzle roguelike from the mind of Rodin Hubert.
Didi challenges you to complete single screen dungeons with weird heroes by defeating enemies in order to become powerful enough to take on a boss and sell their mounted head to upgrade your kingdom, unlock more heroes, dungeons, and loot along the way.
Phew.
The kicker is that exploration is a resource.
You regenerate health and mana when you uncover new terrain.
People love arguing that it's not a roguelike.
So Desktop Dungeons first released on the 7th of January, 2010.
And it looked like that.
Then it released again two days later, twice more the following week, five times over the next month, and 16 more times up until the end of 2010.
In 2011, the game took a brief break from being continuously released to win an IGF award for excellence in design.
So that was fun.
And then it started right up again in June, releasing another 134 times, once a week, for 2 and 1‚ÅÑ2 years.
Since releasing on Steam on November 7th in 2013, the releases have slowed down a little.
But we're planning another one next week, and then two more for your favorite mobile devices come April.
We often get asked if the game is out yet.
You see, Desktop Dungeons was in open development.
And at first, this was quite by accident.
But once we saw what we'd done, we doubled down and just stuck with it, because open development is actually a really powerful way to make games.
And it's a really, really interesting and useful mindset that we wish more indies would use.
So time for some definitions and controversial statements, too.
Open development is putting the latest version of your game out there for people to play and constantly collecting their feedback.
Open development is not designed by committee, the wisdom of crowds, or abandoning your design to metrics.
It needs engaged game designers.
to make it work.
It's not about giving people what they want.
It's about getting them to react the way you want them to.
Open development is a methodology that helps you focus on the real problems experienced by your players and constantly iterate on those solutions instead of doing weird things like optimizing your renderer for the fifth time.
And open development is not Kickstarter, surprisingly enough.
Kickstarter needs you to tell potential backers exactly what you're going to deliver up front or else.
Open development is about exploring your game design with your players as you're building the game.
Open development is a great way to green light projects.
And make sure you spend most of your time working on games with potential.
Opening prototypes from the start lets you kill the ones that suck earlier.
Open development is not early access.
Steam's early access is a great platform for open development, but you can't put prototypes on there, so it's probably not a great place to start.
And open development is easier on PC.
While maybe you might be able to develop open on mobile or consoles, it's really, really hard to keep your game up to date on those platforms.
And on PC, you can literally just make a prototype, shove it out there, and see what people think.
And open development is not asking to be cloned.
Yeah, OK, Desktop Dungeons was cloned, as was nearly every Flambier game.
But the reason you know about this is because of open development.
Open development and being open is actually a really great way to defend against cloning, because people know about your game.
It's out there.
It's visible.
Cloners can't say they didn't see it.
They can't lie.
And your community is going to back you up if push comes to shove.
Now that you disagree with a few of our statements, why should anyone try to be an open developer?
Being open helps you design better games.
There's no denying the value of playtesting.
Knowing how your players are interacting with your game is a must.
And taking your game open, well, that's just playtesting on a massive scale.
You may not always be in the room to watch every player, but the amount of information you receive will more than make up for it.
The cycle of a release, playtest, release does a strange thing to your design.
It gives you the luxury of knowing.
You can eventually know if your UI is clear, know if your game is balanced, or know if your progression is engaging.
You just have to keep releasing the game and asking questions.
You can ask players about something specific, sure, but you can also let the gameplay ask questions for you.
We first learned this completely by accident when we stumbled upon a way to weed out controversial strategies.
No, sorry, we'd out overpowered strategies.
We were trying to slow down our most hardcore players because they were destroying new content the moment we put it out there.
So we added a new boss, the Indomitable, who had to be killed 100 times.
We literally thought this guy would be impossible to beat, so they beat it in a week.
All sorts of crazy edge case strategies were being used and we could easily see the ones that were overpowered and nerf them.
After that, we started releasing all of our content at a ridiculous difficulty level.
This made something else interesting happen.
Because new stuff came out crazy difficult, our hardcore players would beeline straight for it with new strats ready to go.
And they'd try to be the first to beat the new challenge.
So it focused our players, but it also gated many of them at the same time.
We could slowly lower the difficulty of that piece of content, and so it fit naturally into our progression with players who could defeat it.
Eh, sorry.
Ah.
Well, all right.
Well, gated players and stuff like that.
Way too much.
So having a ton of players is really useful, but you still need to be a designer.
Your community doesn't know everything about your game.
Being open lets you refine how you communicate with them inside of the game.
We have a playable hero class called the Monk, which, for the longest time, we considered underpowered.
Which, for the longest time, was considered by our player base underpowered.
We knew the Monk was a good class, but we couldn't convince our players.
So we made a lot of little changes...
Gangar, ignore me. It's fine. I don't exist. I'm a lie.
Just... get away.
So we knew the monk was a good class, but our players didn't.
We made a lot of little changes, and eventually someone picked up on how to play this class.
And they just stomped everything.
They were just destroying everything in their path.
But what we did is then we balanced the monk back down.
But the way that our players had been talking to each other about how to play the monk effectively, that's now part of the description for the class.
So, maximizing open design.
To get the most out of designing in the open, you need to be okay with players being upset.
Players telling you everything is perfect won't help you solve problems.
When players give you suggestions, don't just blindly implement them.
Look deeper into the root of their problem.
Players will ask for things that you know aren't a good idea.
Learn to say no, but be ready to explain.
If your game plays well, but looks terrible, that's okay.
You can always make it look better later.
So being open also helps your marketing efforts.
And it's probably everybody's favorite thing.
But discoverability is one of the biggest problems you'll face as an indie.
And the overcrowding in the marketplace is not going to go away anytime soon.
So we all know that releasing a game and then only trying to figure out how you're going to market it to people is suicide.
And if you're going to be competing with all these other games anyway, why not start sooner rather than later?
Enter the super fan.
These people are going to email press about your game.
They will unapologetically badger their friends to play this cool new thing they found, and they'll post about it anywhere they have a voice.
They are fucking great, and you want to have as many of them as possible.
We can actually trace Desktop Dungeons' early press success back to one specific person, this guy, Duke of Prunes.
He reached out to IndieGames.com, Rock Paper Shotgun, TIGSource, and generally made a nuisance of himself to anyone that would listen.
We love him.
IndieGames.com covered us continuously, and that dev-centric attention probably helped us do well in the IGF.
Rock Paper Shotgun has written literally the nicest things about desktop dungeons.
And they've been the one outlet that has picked up on every late or badly written press release that we've put out.
Derek Yu drew some pixel art for this weird prototype that he saw on Tixos.
He also helped us define the look of the game later on by helping us find the artist that worked on the beta for us.
So you want super fans.
open development is a great way to find them.
They love unearthing neat concepts, and they want to be the ones to tell the world about this thing they found.
They're attracted to concepts like prototype stage.
And if the current version looks bad, they don't really care.
As long as something in that prototype tickles them, they will love it.
And they're in it for the long haul.
They want to be there while a game is sort of growing and becoming something much bigger than when it started.
So they basically want access to you and your game as soon as possible.
And you're not going to be in control of when or how your game attracts super fans.
But you're never going to attract any if your game isn't out there.
And if you do open up your game and absolutely nobody likes it, cool.
Work on something else.
If people do pick it up, then your marketing practically writes itself.
as your players and fans tell each other exactly what they liked about your game.
Desktop Dungeons is only a quick play puzzle roguelike because that's what people told each other it was.
So in order to maximize open marketing, you want to do things like support the people that want to make things to do with your game, which means hosting wikis, retweeting videos, holding fan art contests.
We even had a Didi fan try to make an HTML5 version of the game.
And it was a bit bad, so we sent him the source, and then we hosted the game for him, and it got continuously better.
And now it's a great way for people to play the game.
Please make it easy to be reached.
Have a visible email address on the page that your game is played on or wherever people download it that people can send to each other. So when somebody new finds your game, they know who to talk to. Desktop Dungeons is often attributed to Derek Yu because on the game itself it says tile set by Derek Yu and that's in a color that draws people's attention.
They ignore the rest of it.
have a press kit, and use alerts.
Like Google alerts, and your Twitter searches, and everything else, they really, really help you find people talking about your game right now.
And that's a good way to learn things.
Plus, people will always enjoy having a developer interact with them on this game they're playing.
Usually, whenever we talk to people who are playing the free version, that turns into like five or 10 sales pretty much immediately.
That snowballs from there.
BigOpen helps you test your game to the breaking point.
So how many machines do you have to test on?
You're a dev.
You know computars, right?
I bet you can manage 10, maybe 20.
How much time would it take you to set up all those machines?
How often would you actually test on all those rigs?
I'm sure you know where I'm going with this.
Being an open development means that every release is tested by your entire community.
And they will do that on more machines than you could ever hope to manage.
They will also try all of the crazy shit that you are never gonna think about trying.
Desktop Dungeons had 15,000 pre-order players during the beta and they found a lot of bugs.
For instance, our assumption about reasonable save game sizes proved slightly inaccurate.
DD saves are regenerative.
We didn't want to reset anyone's progress if we took things out or changed the game during beta.
Saves were also stored in our server because the game ran in Unity's web player.
And it wasn't like the saves were inefficient.
Our tests with thousands of games were stored in two to three megs, but some players were downloading orders of magnitude more than that every time, causing memory issues and timeouts and stuff.
It turns out that if we hadn't been open, we'd only have seen similar symptoms months after release, when people were at the 200 plus hours of playtime.
And that would have been pretty terrible.
That fix is now one of just 900 bugs that's in our bug tracker that we closed before release.
That much testing meant that the eventual Steam release was much smoother than expected.
The contrast that we have is our Linux build, which we released after PC and Mac, and we couldn't test it on the web player.
Despite being less than 1% of our total sales, more people posted post-release bugs on Linux than for PC and Mac combined.
Here are some ways to get the most out of your testing.
Make sure everyone is playing the latest version.
There is no value in getting reports of bugs that have already been fixed.
Make sure your game reports crashes back to you.
Tons of players are going to play, and just assume that bugs are going to get fixed.
So you can't rely on everyone to report their bugs.
And have a single thread or reporter for your bugs.
You don't want to go trawling through your forums to find every bug that's out there.
So being open often can help you get paid, too.
So I guess this sounds pretty awesome.
But.
If you think about it, that might be a little bit counterintuitive.
Why would giving something away for free for a pretty long time help you earn money?
Two reasons.
Obscurity kills, and there are a lot more ways to get paid than you think.
If you jealously guard what you're working on until it's done and release it, you're going to have to spend a ton marketing your game to people.
And if you do, there's no guarantee they're going to like the thing after they see it and buy it.
To us, that feels pretty risky.
So we'd rather do that green lighting thing and find out early if people like the seed of our game and let them spread that seed to other people.
If we see how many people they spread it to, we know how well it might do in the future.
The free version of Desktop Dungeons is still downloaded today.
Players often recommend it to other players that are on the fence.
So that tends to happen quite a bit.
And yes, people will get annoyed that you're charging for something that used to be free or saying that what you're doing now is not that wonderful.
But your players tend to make your day in the strangest ways.
And selling your game means that you need to understand the value that players see in it.
Confusion over value is at the heart of why games are marketed with these weird ancient technical bullet points and weird bargains about the price of cups of coffee or movies.
If you don't know what makes your game valuable, you're going to have a hard time selling the thing.
So the right time to monetize your game is when people enjoy it enough to ask you for money, or to ask you how they can give you money for it.
Sorry.
If they ask you for money, you've done something wrong.
But every game and team is different, with different needs and different player communities and different people that enjoy the game.
So there's no one size fits all approach to getting paid for an open game.
Exactly how you start monetizing your game is going to depend on your own development situation and what you're trying to make.
And that's why so much innovation in getting paid for games comes out of games that are currently in open development or have been in open development.
Maybe increasing your price as you add content is going to work for you.
Or rolling your own Kickstarter tier-driven thing.
Or maybe a pre-order beater or early access system would have hordes of players replaying your game.
Who knows?
Maybe you've got a great idea for some other way to fund your development via Patreon or itch.io or some system that we've never heard of yet, because it doesn't exist.
Whatever it is, I suggest treating it like everything else in open development.
Build a prototype, test it, and see where it goes from there.
And trying to get paid is actually what took Desktop Dungeons back to open development, because we stopped.
Just sort of before the IGF award around that time.
After a year or so of releasing the game for free, we felt we understood where we wanted to take it.
And we were pretty sure that if we closed this thing and worked on it furiously, we'd finish it in a couple of months.
Except by the middle of 2011, we were dead broke and the game wasn't done yet.
But it was still earning accolades.
Desktop Dungeons was invited to E3 as part of the IndieCade showcase.
And we had no way to get there.
So in desperation, and because PayPal had literally just launched in South Africa.
We started offering pre-orders just as I climbed onto a plane heading to E3.
By the time I got to LA, we could afford not only the trip, but also the next year of development time.
So that was a pretty good flight.
Giving our fans a way to pay us only worked because we'd been open.
I mean, if we hadn't, we wouldn't even have fans.
So we figured that out, took the game back open again, and we didn't look back after that point.
So maximizing your chances of not starving.
revolve mainly around waiting.
So wait as long as you can before you start taking money.
That way, you're more likely to know what people find valuable in your game.
And try and let people pay you more.
The Didi pre-orders had a support the devs tier that was twice the pre-order price.
So instead of $10, it was $20.
And more than 50% of the pre-order players bought that game.
And because they liked us, they liked the game.
And As much as it feels like you should be trying to discount your game up front, resist the urge.
Discounts are for when you can no longer change your game to make it better or to make that value more visible.
So don't do weird things like releasing your game or releasing your pre-orders with a bundle deal or something like that.
That will literally kill you.
Rather focus on producing the best game you can.
If you need to charge more for it, charge more for it.
You will get more interested players.
Maybe not as many, but they'll be more interested.
Hopefully we've convinced you to try out this open thing.
So what do you need for open development?
Well, you need something playable.
You need to put your prototypes out there and see the ones that are getting the most attention and being shared.
Take those ones further.
You need to control your communication channels.
No, you don't control the Steam forums.
What you want is players coming to your site, talking to you on your forum.
You probably also want the game itself to be sending you information.
You need a release schedule.
Having a schedule keeps you on track and gives your players something to look forward to.
You need someone that loves people for playing your game.
They've got to help your community grow.
They have to be a gardener, not like a PR drone.
If this isn't you, hire someone.
You need to be flexible and capable of change.
Responding to your community is going to take your game to places you never imagined.
You have to be open to opportunities.
And you need to get very, very zen.
If someone is angry about a bug, and it's going to happen, or a payment problem, or anything like that, just take a step back, breathe, and formulate a calm response.
Love and tolerate the shit out of everyone.
So open development may not be a panacea for every problem Indies face.
But what it does offer are ways to be more efficient with the resources that you have available.
mainly by allowing a community to help you solve problems.
Indie development is risky enough as it is, so anything that makes life a little bit easier is probably something that should be explored.
Interestingly enough, you don't have to be 100% open or streaming every second of your day to the interwebs just in order to make this work.
It's possible to be as open as you're comfortable with for as long as you're comfortable with on your current project.
As long as you're getting things out of the relationship with your players, everything's good.
And we suspect that open development is actually going to be a large part of any development in the future, especially for new developers who don't necessarily have reputations.
And we hope you're as keen to try it after some of these things and questions that you guys might have as we are to keep doing it on our next projects.
we're actually so used to being open that we gave a version of this talk last week.
So thanks for enjoying the currently in progress version, and please leave feedback on the evaluations and come chat to us in the wrap-up room or ask us questions now.
And we'll be sure to use that in next week's release of this same talk.
So questions if anyone has them.
Yeah, my apologies for not getting the timeline right or if I missed something with the talk, but it sounds like you started the game as open, you prototyped it, then you went closed for a little bit, then you're like, oh, we need money, so then you made it open again.
But when you went open again, you made a gate, so a pay gate, so it's like you're open development but yet you have to pay to be the open development.
It's not like you guys had the game free out there the whole time.
you know, anybody could get it.
You had to pay for early access.
And you also said in the beginning that it's not early access.
So do you, excuse me, did you use early access and had your own pay gate as well?
Could you just clarify that a little bit?
Oh, OK.
So is the question, why did we say open development isn't STEAM early access, but we still had our own pay gate?
OK, cool.
So the reason we say it's not early access is because people tend to release on early access way too early.
It's often a thing, I mean like Steam is a firehose of users.
You do not want to send that at like a prototype that is not going to catch a bunch of people up front.
Like maybe it's a good prototype, and two out of every 50 people are going to really love it.
And that's like a good rate for a prototype.
Most people hate everything, so that's cool.
But that prototype could be made better and better and better until it's going to catch like say two out of every 10 people.
that's the stage you want to put it on early access, because it's this firehose of users.
So do early access once you've been doing kind of like some sort of open development, even if it's a gated pay system on your own site, for a while, until you understand your game.
That's kind of the reason we were talking about that.
Does that answer the question?
Yeah, I think so.
OK.
Cool.
Is that it?
No one else?
All right.
Just to preempt one question that's probably going to bounce around a bunch of people's heads, you can make a narrative-heavy game open.
Oh.
Controversial.
You totally can.
It's just maybe you don't open it to game players.
Maybe you open it to people who are on a writing forum.
Or maybe you open it to other people who are focusing on narrative.
There are communities that you can use.
There are places that you can test things on.
In fact, these days I would say it's probably a really good idea to make a narrative game open because.
With inclusivity and diversity and everything else being such a big focus, as a single writer, you're not going to be very good at that.
And it's best to get more voices and more people playing and looking into your story and everything else you're focusing on.
So try and make narrative stuff open.
I think it would be interesting.
It's cool.
And yeah, thanks for coming to our talk instead of the soapbox.
