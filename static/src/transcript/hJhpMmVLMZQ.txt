Oh, the joys of a Friday afternoon talk. My voice is shot already, and you all should be on your way to catch an airplane, and we're all a little bit hungover. So let's get started, and then they can tear this place down.
So my name is Jamie Griesemer. I've been a game designer for about fifteen years. I originally started at Bungie, which was acquired by Microsoft.
left Bungie, went to Sucker Punch, that was almost immediately acquired by Sony. So I'm a good luck charm if you're looking to be bought by a large console maker. I worked on a bunch of games, all of which involve colons.
and uh... might my talks are very fast it's early drinking from fire hose so if uh...
i'm making a point that is irrelevant to your game just wait ten seconds and i'll get on to the next one uh... hopefully uh... a couple of them will will matter to you So two years ago, I did a talk that was inspired by this painting.
It's Sunday afternoon on the island of La Grande Jatte.
And it's an example of pointillism, which means it has tons of tiny little dots that make up an enormous, like 30-foot tall painting.
And the idea was that I would examine one tiny little detail about the Halo games and spend an hour talking about it and get really, really into all the way into that one decision.
So I picked the sniper rifle reload. And then over the course of developing the talk, it really became about balance and how a game designer can balance a game so that once it's out in the wild, they don't have to touch it anymore and it can just continue to have a life of its own and the community can continue to play it.
So then the next year they asked me to do another talk in this series, so I looked for another painting to inspire me, and I picked Haystacks by Monet.
And what he did was he took the same exact haystacks and he painted them at different times of year and different times of day.
And so that gave me the idea of like, let's take one detail and look at it in multiple games in the Halo franchise and see how it changed.
So I looked at the moza velocity of the plasma rifle bolt.
and tracked it across the first three games of the Halo franchise, but really that talk was about tuning and how you can change small aspects of the game to create a certain experience, and then if you change that to be something else, it changes the experience that it generates.
So in my continuing effort to wage war on the formatting of the GDC website by having increasingly longer titles, when they asked me to talk this year, I said, that's great, but I don't want to talk about Halo.
You guys are sick of hearing about Halo, I'm sick of talking about Halo.
So I had to come up with something else to talk about this year.
And again I turned to art for inspiration. This is actually my favorite painting. It's the Annunciation by El Greco.
It's actually really, really tall, so if you're standing in front of it, it looks more like this.
And it's about the angel Gabriel coming to Mary and telling her that she's going to conceive a son and that his name's going to be Jesus, and you guys maybe know that story.
And what's really interesting about this painting is the faces and the detail and the colors.
But what's more interesting about this painting is it's not the first painting called the Annunciation.
There's actually dozens and dozens and dozens of paintings from hundreds and hundreds and hundreds of years, all of them painting this one exact moment and capturing it in their own style.
So that gave me the idea to look at different games that addressed the same problem, maybe had the same details.
and compare them.
So this year, we're not talking about my games, we're talking about your games.
I'm sort of infamous for a blog post that I wrote where I gave Uncharted 2 a 7.5 and then I gave Jumper, a game that none of you have played, also a 7.5.
And really the point is that as a game designer you should be playing really good games and looking for the flaws and looking for the problems.
And you should also be playing not so good games and trying to draw the promise and train yourself to find the gem in the rough.
So that means if I'm criticizing a game, that means I think it's a good game.
So I hope I'm not burning too many bridges in this talk by criticizing a bunch of games from a bunch of very talented developers and designers.
Keep in mind that I'm speculating.
I didn't work on these games.
That actually made it a lot harder to draw out some of the details.
So I'm doing a lot of guessing, and if I guess wrong about your game, don't be insulted.
If I guess right about your game, just don't tell anybody.
They won't know.
So welcome, again, to the actual talk, which was so long they couldn't even fit it on the placard outside.
But before we get started, let me talk a little bit about details and why I think they're so important.
If you change just 5% of your DNA, you go from being a human to being a chimpanzee.
If you're leaving England for the new world and you get a couple degrees off course, you end up in Massachusetts and not where you wanted to be in Virginia.
So small details, especially early on, can have an impact down the road.
We live, we work, sorry, in a fairly mature industry now.
There's lots and lots of professionals out there on great teams.
They're working in established genres.
What that means is that a lot of times, a really good game and a not so good game have a lot in common.
There's very little difference between Halo and Haze, for instance.
But there is not quite as similar an outcome when it comes to Metacritic scores or profit.
And details are the things that make the difference between success and not so much success.
It's important to get the details right.
Another example of how details are powerful is Angry Birds.
So Rovio made like 50 games before they got to Angry Birds.
And that allowed them to really nail the details of working on the iOS platform.
It's got great controls for a touch screen.
The time investment is quick enough that you can.
finish a level in the bathroom.
The reward system is super gratifying.
And they actually even arrived on the scene just with this perfect timing.
And they're definitely reaping the rewards.
On the other hand, a game that just recently came out, Uncharted 3, but again, Naughty Dog is like the peak of the industry, right?
But they missed a couple little minor details like the cam controls.
I feel like the animation cycles got a little bit longer, so you feel like you're a little bit less in control.
Sometimes the jumps can actually take you farther in Uncharted 3, so it's a little bit harder to...
wind your way through the environment.
And so they really suffered the con- no, no, sorry.
They reaped the rewards too.
Never mind.
They got every other detail right.
They're fine.
The difficulty comes in the fact that details are so subtle.
So who here thinks Limbo had fantastic art direction?
OK.
I'm going to argue you're wrong.
What they had was great design direction.
The fact that everything is in profile is what makes the game work at all.
I mean, is that a bear trap, or is that some grass?
If you could see it, and it was just rendered, it wouldn't be much of a puzzle.
Is that a spider coming over to get me, or is that just some branches in the background?
Without the uncertainty caused by this detail of the rendering, the game wouldn't even be possible.
And the best part about details is they tend to be portable.
So Darksiders is this.
well-known for liberally porting details maybe to their engines, so like the hookshot or the boomerang or the portal gun.
But because they did such a great job of capturing only the important details and changing everything else, instead of feeling like copycat design, it really feels like a greatest hits game, where you get to go through all the best game design details of the last decade.
On the other hand...
If you don't know which details are important, you end up copying too many details and your game is going to end up feeling like a Xerox machine that got left on. You'll get kind of pale imitations. And if you really don't have any idea what you're doing, you have to copy every single detail and you get caught. And that's a bridge that I'm happy to burn.
So, uh...
The most important thing about details when it comes to being a designer is that they're manageable.
There are thousands and thousands of decisions that go into making a game, and there's no way that a game designer can keep a handle on all of them.
So if you remember Ratatouille, the little chef, the rat, couldn't cook in an oversized kitchen, right?
But he could grab his friend's hair and use that to control him and ended up making great dishes.
So in this metaphor, designers are rats.
Usually the players are the rats.
But in this metaphor, the designer is the rat and the game is the larger context.
And the hair is the details, I suppose.
So that leads me to the real kind of theme of this talk, which is that before you can balance and before you can tune the details that will make your game successful, you have to identify them.
And so what I've done is gone through my design process and tried to hook up the details that I found in playing all these games to different aspects to try to give us a little bit of structure.
Eric Zimmerman did a talk yesterday where he said we shouldn't instrumentalize our game design.
And so I want to make this clear.
This is my design process.
I'm not saying this has to be everybody's process.
The first step is to get a concept, and concepts are, by definition, undetailed.
Right? They're notions. They're this, like, here's kind of what I want the player to experience.
But it's always vague at the beginning, so I'm not going to go into any details about concept details.
So the first area that we're going to explore is constraints.
If you're familiar with, like, the MDA concept of design...
they would call this mechanics, but for me, instead of thinking of it as something that you're building and then when it's broken you have to fix it, I like to think of it as constraining the player and then when something's broken I just constrain them a little bit further.
So one way that you can constrain the players by removing options. God of War is a very successful game that got there by removing all camera control, which was sort of new for the third-person action game. Which is great, because the game is all about stabbing guys and cutting off their heads and doing horrible things to them. And so not having to worry about the camera actually freed you up to do what was good about the game.
On the other hand, Ocarina of Time, yeah, we're going to go there.
uh...
uh... automated the jumping process and for a game that's about exploration and jumping is like the one uh... sort of vector of exploration that you have not being able to jump meant you couldn't explore as much as you want and could be frustrating Another way to think about constraints is as a cornerstone.
When you start a building, you lay the first stone, and that kind of determines the rest of the building, whether it's going to be square.
So in Halo, our cornerstone, at least for combat, was the engagement distance.
So we decided how far away we wanted the enemies to be, and that meant we had to have a pretty slow moving speed, because we didn't want you to be able to run and get there right away.
We had to have a pretty narrow.
field of view because we wanted enemies to be large at that engagement distance.
That determined how accurate our weapons could be, that determined how many enemies we needed to have you fight at one time.
It even determined the AI firing parameters because once the AI starts firing at you, you stop and you start firing back, and that is where the engagement distance comes from.
So in Halo, the engagement distance really determined the environment scale.
But if you look at a game like Red Dead, um, they were clearly trying to create a vast, huge environment, right? So, uh, their movement speed had to be relatively fast because you had to cross very big spaces. And their field of view had to be very broad because they wanted you to be able to see as much of the environment as possible. And that meant their weapons had to be really accurate and that their, uh, their enemies were spread over a very large space. And it also meant that the AI had to fire, um, pretty repeatedly because that was one of the only ways that you could find them, uh, by the giant flash from their gun. And, uh, so they achieved the environment scale, but because they determined that detail first, then their engagement range, um, you know, in my opinion, suffered, but, uh, uh, this isn't intended to be a, a criticism of, of, of their priority. Just explain how, know your priority and then, and then know that that's going to affect the final game.
One way to think about this is solving for gameplay.
So computer role-playing games have this advantage where they're using computers.
They can do really, really big numbers.
And so they tend to equate having a higher level with doing more damage.
And the problem is that this leads to this exponential curve where if you're doubling the damage every time you go up a level, at some point you're going to, just a few levels after you go through content, going back through it's going to be completely trivial.
On the other hand, Dungeons & Dragons is dealing with dice and they're dealing with pen and paper, so they can't use huge numbers.
So they developed this system called THAC0, which means to hit armor class 0.
And basically what it comes down to, if you're not familiar with Dungeons & Dragons, is you can only hit enemies that are within a couple levels of you.
So that means that their damage is actually a much flatter curve, and when you go back to lower level content, it still can be engaging because in large numbers, even low level monsters can be a threat to you.
Another way of looking at this is sort of as a giant equation that you're balancing.
So if you're doing a combat game, maybe your programmers are going to give you the kind of obvious parameters of like damage per shot.
And then you're going to say, okay, well, the damage per shot times the shots per second is the damage per second.
And then you're going to take the enemy health, you're going to divide it by the damage per second, and that's going to give you the time to kill.
But really, the player doesn't know about any of those kind of hidden parameters, they know about time to kill.
So you should be thinking about it as, I want this enemy to take this certain amount of time to kill, and that means if I want to have a gun that has this many shots per second, and that's usually determined by either the feel or the cadence or the...
fiction, then I'm just going to multiply it time this sort of unusual parameter of shots to kill.
And the shots to kill can be derived in any way that you want, but the important part is that you're setting the non- abstract values that the player is going to really directly experience first, and then deriving the rest, rather than the other way around.
A lot of times, um...
Games are in crunch at the end, designers are making decisions really fast, and sort of making compromises based on the tech.
And so what will happen sometimes is you'll have a genre with a really strong constraint that every game follows, but there's really no reason for it to follow.
innovations of Starcraft was it took what everybody had done before which was symmetrical factions. I mean Warcraft it said it was orcs versus humans but really it's like orcs versus pink orcs and it blew that up and it came up with these asymmetrical factions which you know were much more difficult to balance but it also means that going forward you can play the game for a lot longer because it's not going to kind of settle into a static state.
Myth is another example where resource management was just bound up in the RTS genre until we realized that we don't have to have that part.
Instead of dividing your attention between combat and economy, what if we just had the cool combat part throughout the economy?
That led to a game that had a lot more immediacy and felt a lot more...
uh like a like a battle simulator rather than a than a strategy game.
So a few years ago um I sat down to play Star Control 2 which I didn't play when it came out and um I was looking at the system requirements and it's like it needs a 20 megahertz machine and you have to have a 2x CD-ROM drive and I'm like oh this is great because I'm going to blow the doors off of these system requirements and it'll be fine.
So I started it up and I built my ship and I flew out into space and said oh you know we're about to have combat and I'm like oh great and the combat came up and it was over.
Turns out that there's also a maximum system requirement for this game.
The clock speed was running way too fast so I could never possibly react fast enough to win anything.
uh... and our brains are sort of similar uh... you know the uh...
they're three pounds of meat they run on very low wattage their firmware was written millions of years ago and so you shouldn't expect too much out of your brain or out of your players brains and one of the ways that games are interesting is they kind of stretch our capacity, I've heard it's called like attention or focus uh... but in this circumstance I'm going to call it capacity So to go back to my Star Control example, like the faster the game was going, the more it stretched my capacity.
And if it had been going at the original slow speed, I would've been fine, but because it was blowing out the processor, I didn't have enough capacity to actually pull it off.
So some other examples of this, in fact the best example in my opinion is Tetris.
So Tetris starts out, it's actually very simple inputs that you're doing, it's a very simple mechanic that you're taking advantage of, and it starts out very slow, right?
And then it gets pretty quickly up to the point where you're fully engaged and it's kind of filling your capacity, and then it stays there for quite a long time till like level 16, at least that's my experience, when it passes your capacity and it's too fast and it starts to stack up pretty quickly and you lose.
When Tetris first came out for the iOS, the input is a lot more complicated, it's a lot more difficult. So what they did was they slowed down the pieces a lot.
But the end result was that you'd be bored for a long time because it was super easy.
And then all of a sudden it would just click over, it would go just a little bit faster, and you couldn't keep up anymore, and you'd lose almost immediately.
So they re-released Tetris recently.
And I strongly suggest you pick it up if you love Tetris.
What they did was they removed all the inputs.
All you're doing now is you're selecting from one of the, in this case, five places where you want it to go.
The answer is five, in case you don't know how to play Tetris.
And by reducing the complexity, they actually increase the speed at which things can happen.
And this version feels more like the Game Boy Tetris than the original one that they tried to do.
uh...
which which shows that uh... it's not just speed that is gating your capacity it's also complexity right and this isn't just uh... input complexity this is like complexity of the concepts that you're dealing with or the mechanical complexity of having to do the inputs on a controller or even the information complexity like how much is the game throwing at you that you have to process uh... when i was uh... a kid that there at least two arcade games came out in nineteen eighty two which meant by the time i was old enough to play them they were old but that also meant that uh... nobody was at the machines and i actually got to get up there uh... first was Xevious uh... very simple screen layout it's a 2D shoot em up simple graphics so it was really easy to tell where your ship was really easy to tell where the enemy bullets were coming from and so it was fairly fast and it was a lot of fun On the other side of the arcade was Zaxxon, which is isometric, the backgrounds are really complicated, you're having to deal with heights above the terrain and dodging stuff in the environment while these bullets are blending into the background.
And so it was equally fast, but because it was so much more complicated, it became very frustrating at least to my ten year old self.
So when you're looking at your game, what you need to be doing is thinking about system requirements that you're putting on your players. Is your game fast and simple, like Gradius?
Or is it slow and complicated, like Civilization? Or is it somewhere in between? But if you make a game that's fast and complex, what you're really making is like flying a jet, which is much too hard for most people. Only a certain number of people in the whole world can even do it.
And if you go on the other side, you're not making a game in that direction either because what you're doing is so slow and so simple that there's no engagement at all.
So what you want to do is stay in the, I'm going to call it the game band, where you're balancing the speed and the complexity of your game.
Max Payne is a great example of this in sort of a flexible situation.
Most of the game is fast and the shooting is relatively simple.
You're fighting one or two guys.
But sometimes they throw you into a situation where you're fighting a lot of people and then they give you the ability to slow the game down in order to cope with a much more complicated situation.
Survive mode, not only in Gears, but I think this applies to virtually every survivor mode.
has a kind of a narrower band that it's allowed to operate in because the setup is generally pretty simple. These games are usually action games. They're not about setting up a giant tower defense system or something. And then when the wave comes in and it's very complicated and you're dealing with a lot of stuff and it can go bad very quickly. But a smaller game, Orcs Must Die, came out and it actually has a very complicated setup. You're putting traps, you're funneling guys through different parts of the level.
And so when the waves come, that part's actually just very simple.
It's just your traps are killing most of the guys, and you're just spamming as much of your weapon as possible.
System requirements come in different types, right?
Like there was the processor speed, and then there was the CD drive speed in the earlier example.
One of the system requirements for games is continuous interactions.
So almost always, these are things like moving, aiming, things that you're always doing.
They're analog.
And they take up this kind of fast but simple corner of the graph.
They require high dexterity.
So usually you'll see one or two of these at a time.
If it's on the thumb stick, it's almost inevitably in this category.
The mouse definitely qualifies.
I'd say the keyboard, because it's not continuous, maybe doesn't fit in, which is why aiming is better on the PC.
But moving is actually, in my opinion, better on a console.
So Geometry Wars is an excellent example of using up all of somebody's capacity for these continuous actions.
You're always deflecting both of the thumbsticks and they have no other, I mean, if you're discounting bombs, there's no other inputs in the game.
So it still stays in that game band, it doesn't get too complicated too fast.
Halo, on the other hand, is actually maybe less accessible to people, because you're always using both sticks, but then there's also a lot of other stuff going on.
And so we found that when we first introduced Halo, a lot of people couldn't do two thumbsticks at once.
And only as the series went on did we see more and more people able to even play the game.
Kill Switch, if you don't know, is sort of the, kicked off the whole cover shooter.
uh, a trend that's, that we're still seeing today. And in some ways this was an improvement over Halo, because, uh, you're either moving between cover, or you're in cover and you're shooting, but either way you're only using one thumb at a time, and that's why I feel like cover shooters are much more accessible. So if you're trying to make a game that, um, goes beyond that kind of hardcore, uh, shooter market, uh, uh, not only making a cover shooter, but really separating the two kinds of input I think will help a lot.
Common actions, uh, uh, sort of take this, uh, um, mid, mid, uh, range of the graph. Um, this is things that you're, you're doing, but they're usually, um, like simple actions, they're not using analogs, so firing weapons, using a melee attack.
And this requires a lot of attention from your player.
So you shouldn't have more than two or three of these at a time.
I think that's why most games don't fill up the face buttons with stuff that you're doing all the time, and why a controller with like 18 buttons on it wouldn't actually be an improvement.
Because you just couldn't fill them with, you could fill them with more actions than your players have capacity.
Infamous, too, sort of took from one of his talks about these nice-looking keyboard shortcuts, and how you can use that keyboard shortcuts to make your own keyboard shortcuts.
So here's an example of something that I guess is just a cute comment.
So in many ways, some of these keyboard shortcuts have contributed to there's anapparent lack of notion of quality control for some things.
is infamous for having a lot of things that you can do all on the controller at one time.
So actually hitting L1 and going into aim mode took the whole mapping of actions that you could do and remapped it to something else. And while this allowed for a lot of freedom and a lot of expression, it also inhibited players when they were playing the game because they were constantly switching modes. And so...
I was really excited to go to Sucker Punch because I love the Infamous games and now I get to help them sort of...
reduce the complexity of the control scheme a little bit using something that I'm calling random access game design because I love to invent buzzwords. But basically that means everything that you can do is always available all the time. One action per button. There's no two-step process to cause any of these common actions. And what that means is if it doesn't fit on the controller, you're going to have to cut it. And that will help your game even though it feels like what you're doing is removing things that the player can do.
So moving a little bit further down to the right, we get kind of uncommon actions.
These are actions that don't happen very often.
They're not as often kind of like under a time pressure.
So this would be things like jumping or reloading.
And what's important there is that the player have a kind of a high understanding for what's going on and what their abilities are.
Because you have more than you can really keep in mind at any given time.
The game needs to be kind of cluing you in that now's a good time to use it.
That's what she said is sort of an example of an uncommon action.
You can just be participating in a conversation, you're trying to communicate, and then somebody will say something that that's what she said will just pop into your mind, right? And we're really thinking about it constantly. It was an uncommon thing, but as soon as the moment is right, you know it's time to use it.
So, um, Bulletstorm has a great example of this sort of that's what she said, uh, kind of action, um, in its skill shots. Um, so, skill shots are super important in the game.
They, they drive your progression, um, they're heavily featured in the marketing. And one kind of skill shot is the environmental skill shot, where you're knocking some guy into a spike trap or off a cliff or into a, a...
oven or lots of disturbing ways to kill people.
And it's important that for these uncommon actions that the player's not in control of the pace.
So the onus is not on him to control when this is going to happen.
It's just sort of the environment dictates when these options are available.
And that means there's these really strong external cues.
Like if there's no giant spike trap, then you can't use your spike trap kill shot.
On the other hand, the weapon-specific skillshots don't follow these rules.
They are set by the player.
You can theoretically use them at any time.
But when you're playing it, you actually end up going into the menu and figuring out which one you're going to try to do next, then going back into the game.
It's not a very fluid process.
And usually, these kill shots are not as efficient as regular just shooting guys.
And so you're not as incented to do them.
And then finally, all the way in the lower right are prompted actions.
So these are actions that are totally untimed.
There's no time pressure.
And that means you can have as many of these as you want.
Because you're going to have to tell the player how to do them every single time.
Borderlands is a great example of this.
They took the action gameplay that Gearbox had been doing before, and they added this.
offline almost, uh, loot, uh, stream, where, uh, you can gather money after a fight, you're, you're comparing weapons in the UI, you're equipping items. But none of this has to be done in the context of action, so it's, uh, it's just, it's just addition, it's not actually increasing the system requirements for the game.
except when it comes to health packs.
Health packs are picked up in the exact same way, but a lot of times you're in a fight and you need it right now, and so you're trying to look around for the one health pack and you're trying to aim at it so you can pick it up.
This puts a lot of pressure into a corner of the graph that doesn't support pressure very well.
So moving past constraints, constraints allow you to limit the area that the player is going to be able to interact.
And so the next part of the design process is to look at the interactions.
Let's talk about Pac-Man.
So even at a really early age, and I think this might have been my very first video game, I was super sensitive to details.
And because of that, I never really got into Pac-Man.
And I didn't find out until 30 years later why.
Basically, in Japan, they use four-way sticks, right?
And that's why the cardinal directions of Pac-Man make total sense, and it works really well.
But American arcades, uh, use 8-way sticks and a lot of times they didn't ship over the whole arcade unit, they just shipped over the ROMs so they would plug it into an 8-way, uh, arcade stick and, um, so Pac-Man was all of a sudden getting these diagonal inputs, which would, it would ignore. Which is fine, except for it also ignores the next input. So if you're trying to roll around a corner in, in Pac-Man in an American arcade, you're gonna just ram into the wall and all of a sudden Pac-Man is gonna stop and you're gonna get caught by the ghosts.
Another example of how physical limitations impact your interactions is Dungeon Hunter.
It's a iOS game, very similar to like a Diablo.
And like a ton of iOS games, it has virtual buttons, which means your fingers are always on the screen, and you're trying to do reaction time tests on something that's not giving you any feedback.
It's very difficult.
Not to say it's not a good game.
It actually is a pretty good game.
But you really feel the limitations.
Oops.
Whereas, Infinity Blade uses gestures, which is what the device is meant for.
It has pretty infrequent input compared to the length of a fight, so most of the time you're looking at the fantastic graphics.
And even though it's a game about timing, it's not reaction time test.
You can see every blow being telegraphed.
It's more about timing your block or dodge to the animation and not reacting to what's on the screen.
And these guys did an excellent job of porting the details of PunchOut as well.
Responsiveness is a big part of interactions.
Doing something and then having something happen.
Gunstringer has got a ton of personality.
And you're basically moving a crosshair with your hand in front of the Kinect.
But it's heavily smooth because they didn't want a lot of jittering on the crosshair.
So what that means is that you're experiencing about 100 milliseconds of delay between moving your hand and seeing what's happening on the screen.
And your brain actually will take events that are less than 100 milliseconds apart and merge them into one event.
That's why sound sync in a movie works, even though it's not exact.
But on the other hand, if it's more than 100 milliseconds, you're going to perceive it as two different things.
And so if it's intended to be one thing, it's going to be very disorienting.
Fruit Ninja, on the other hand, kind of smooths the spline in real time when you're swinging your hand across the screen.
And there's no delay.
And so it feels a lot more one to one.
Responsiveness is a huge part of any shooter game.
Halo 3 clocked in at about 100 milliseconds, which was a little over three frames at 30 frames per second.
Which is, again, right at that line for things feeling simultaneous.
Killzone 2, on the other hand, because of how they were doing their rendering, had up to 150 milliseconds of kind of delay before your input was recognized.
And that turned off a lot of like professional gamers who were sensitive enough to need that instant responsiveness.
Right now the current king of this is the Call of Duty guys.
They run at 60 and they have all, I mean, they're approaching kind of the theoretical minimum for how much responsiveness delay you're going to have.
even after you've got the players input, you have to interpret it.
And when we were making Halo, TimeSplitters was a game we were playing a lot, and they were practicing auto-aim, which meant your bullets are coming out of the gun and kind of getting aimed toward enemies.
And because of that, there were all kinds of frustrations where you were trying to do one thing and you couldn't, like your gun would actually be behind a wall even though your crosshair wasn't, so you'd be shooting the wall and not realize it. Or you'd be trying to turn and because they didn't want you to turn too fast, you just couldn't get around and some guy was shooting you in the back.
So for Halo, we went more in an interpretive direction with aim assist, where we're trying to figure out what the player's doing instead of what they're saying they're doing.
That means that in Halo you shoot from the crosshair, not from the gun. You can stick the gun in a bush and your bullets will come right out of the center of the camera.
Pegging the stick actually makes you turn faster, like it continues to accelerate, because essentially what you're telling us is, man, I wish this stick went really far.
And then when you stop giving us input over an enemy, it actually slows down on them right away, much faster than if you slow down just over an object that you're not probably intending to shoot at.
Sly Cooper does a super good job of this as well.
When you jump in Sly, it's mostly vertical.
So if you do something you didn't intend, you can probably get back to where you were.
It steers you the entire time toward where you're going to land.
And that allows you to really stick the landing in a lot of cases.
Whereas Prince of Persia.
does more of a jump prediction thing where they're trying to figure out where you're jumping to at the moment that you jump and it's mostly horizontal jumps so if you tell it to jump and it can't find a place for you to go it's just going to throw you out into space which is fine because then you can rewind it but uh... a lot of times it felt like you weren't in control of what the prince was doing I'll just skip that slide.
Another way that interactions are flavored in one detail can affect the entire game, you can see in Resident Evil, where they're trying to get you to aim under pressure.
They're trying to have scarce resources.
But what ended up being in their game with the details they picked was you just can't move while you're shooting, which is high pressure, but also feels like you're limited.
And then they just greatly restrict the ammo, so any time you miss, you feel like you failed.
Whereas Dead Space does a much better job of this, because they are requiring you to shoot at different points.
And those points are often moving a lot more than a head.
So you're still under an equal amount of pressure, but they can give you really responsive controls, because what they're asking you to do is much more difficult.
And then they do a good job of algorithmically figuring out what you need, what ammo you're using.
And so you never feel like you have enough ammo, but secretly, you always do.
Rewards are a big impact in interactions.
And what's often difficult is to line up the rewards with a certain kind of activity.
So you don't want them to clash.
In lots and lots of games that have good or evil systems, they're promising you this choice.
And then they're going to give you power if you make it to the end of either the good or evil spectrum, which means you really don't have a choice.
And so the rewards are diminishing the activity in a way.
I think of it like this.
Calories are like a fundamental human need.
We've evolved all these systems to reinforce that we need calories.
And so what happens is when you eat sugar, your body releases insulin.
before you get the calories, kind of in anticipation, you're gonna process the glucose, which is the sugar, and you're gonna get those calories, right?
And then it releases serotonin, which is sort of a hormone that makes you feel satisfied.
The problem comes when you eat fake sugar, your body still releases insulin, but there's no glucose to process.
You don't actually get the calories, so no serotonin is released, and you end up with hypoglycemia, low blood sugar, or insulin problems.
So fake sugar actually, in a lot of cases, leads to weight gain, because what you really want is serotonin, and not just calories.
Games are very similar.
I believe that players have sort of fundamental psychological needs.
It doesn't matter how you classify them.
They can be subdivided in lots of different ways.
And when you're playing a game, the game kind of sets up the conditions for success and makes you want to aspire to them.
And so you're making these attempts and eventually you're going to succeed.
And then only after you experience actual success is dopamine gonna get released and you get that kind of feeling of satisfaction.
So just like with calories, the real reward there, chemical reward that you're seeking, can only happen after an authentic success.
Whereas gamification is actually frustrating in a similar way to fake sugar, because it skips the actual success.
And so instead of getting dopamine, you're just going to get frustrated, and you're going to feel like this activity is futile.
Even though it looks from the outside just like a regular success cycle, you're cutting out the actual important part.
So there's lots of ways to increase the effectiveness of this cycle.
What you want to do is increase the connection between the success and the dopamine by making sure that the rewards you're giving the player match the activity that they were participating in, both kind of the flavor or the spirit of the activity, the timing of the activity.
You don't want to undercut all the failed attempts that the player made by making the success too easy or unavoidable.
Assassin's Creed has struggled with this, it's much better than the most recent games of the first one.
They give you things to do like flag collecting, where they force you to do it.
When you picked up one, they were like, great, you only have a million more to go.
And they didn't really even tell you what the reward was going to be.
And from the outside, that looks like a reward loop, but because the activity doesn't match the reward in any way, it's not very effective at getting players to keep playing.
The investigations were really similar to this, where they would force you to do some of it, and then there was this really unclear, oh, your assassinations are going to get easier.
But they were mistaking a character defect, completionism, with an actual motivation.
And they were conflating just like checking off boxes with actually successfully meeting some needs.
Batman, on the other hand, nails this really, really well.
Like the interview tapes, they never tell you that they're even there.
You just kind of find one, and it opens up the UI.
So it's not forced.
They're rewarding your autonomy really well.
And then the reward that you get is instant.
The first time you pick one up, you get a little bit of story.
And then you're like, OK, well, I'm going to pick up another one, and I'm going to get a little bit more story.
And the trophies kind of do this in a similar way for a different need.
Again, you find them by exploring, they're enforced on you, and they're rewarding your competence at finding these things with something that a competence player really values, which is trophies.
I looked it up, and like 20% of all the trophies in Batman are about Riddler trophies.
And then also the Riddler, like, gives you a voicemail or something where he's really pissed, and that is something that a competence player really is attracted to.
Another way you can increase the power of this cycle is by just amplifying the amount of dopamine that the player gets.
If you want a good lesson in this, you should just go to Las Vegas, because those guys are dopamine masters.
Game Center, which is Apple's sort of, um.
uh... a platform achievement system is uh...
is is terrible at this.
The notifications that you got an achievement are are delayed by seemingly arbitrary ways.
The skin is like this antique billiard table which just does not match at all the feeling that you're getting from inside of the game.
There's no um... celebration or uh... uh... sort of pomp to the awards at all.
They're not actually valuable.
Which means that they're poor at giving you dopamine.
Batman, on the other hand, does this great.
the rewards are always given right at the moment where you realize that you were successful.
It's not given at the moment that you're actually successful. It actually delays it a little bit so you get this chance to anticipate and go, oh yeah, I know what's coming. Then there's bats everywhere and the music swells. And then like in the case of the combo meter, they actually like count out every single point and this meter goes up and it takes a long time. And then what they're giving you is actually valuable. You can actually use those points to purchase something. And so you attach more meaning to them.
uh... so that makes it great for for dopamine and then finally to uh...
to strengthen this uh... reward cycle is uh...
to reward an activity with more of that activity.
And this is probably the most important thing I ever learned in GDC.
It was after a talk I gave, I was talking to Scott Rigby, who's a psychologist and researcher, and he also does, like, consulting for different game companies.
I said, so what is the best reward for when somebody does something?
And he said exactly this, reward an activity with more of that activity.
So the best example in my mind of this is the original World of Warcraft.
There's all kinds of things you can do in the game, leveling, gathering resources, raiding, playing PvP.
And all of those lead to more of the same things.
So as you level, they give you more levels.
When you're crafting, that allows you to craft new things.
When you're PvPing, that gives you items that are specifically geared to PvP.
And there's sort of one...
outlier which is you have to level all the way through before you can really get into the rating.
And because every designer has to have a personal theory about why WoW is a visible failure, here's mine.
The current WoW, they've sort of lost that flow, where sometimes they sped up the leveling, and you're going to hit the level cap a lot earlier.
And if you're not a good crafter, then you can't go raiding, because you don't have the right crafter bonuses.
And then there's all kinds of things that kind of go back.
And it's just a mess.
Where.
You can't, you end up having to do things that you don't want to do in order to get the rewards that you want. You've got all kinds of like cross purposes and the different reward cycles.
So yeah, again, totally dismal failure.
Batman on the other hand does this really well.
One of them that I talked about earlier is combat XP. So you're building these combos.
you're fighting well and what that does is that gives you the ability to buy upgrades that make you fight better. So instantly then you're incented to go back into the fight and continue this activity you actually enjoy. The challenge rooms are again a great example of this. You beat a series of challenge rooms and that unlocks more challenge rooms.
So the next step in the design process, or at least my design process, beyond interactions is something that I'm calling harmonics. And this is still something that I'm kind of figuring out as we go, so this is going to feel a little bit more experimental than some of the other sections. So I started with a concept, like 2D platformer, right? Mario Brothers. Your guys run to the right, sometimes you have to kill enemies, sometimes you have to jump pits, and then ultimately you're going to fight a boss at the end.
And there's lots of different games that fall into that sort of same rough concept, but then they do the details different.
I'll explore a little bit how I think that affects the ultimate game.
So the constraints in Mario, you always have to go to the right.
You can jump.
You can stomp on guys.
And then you're going to get mushrooms that will make you big, which is essentially like one hit point.
uh... and what that leads to is uh...
sort of one frequency of challenge where uh... you run to the right and then you jump a pit, and then you run to the right and then you jump a pit or you'll stomp on an enemy or you'll jump another pit.
and then the health sort of system uh... leads to just just two levels right you're small, you're big, you're small, you're big, you fall in a pit, you're dead.
Sonic the Hedgehog on the other hand, it's still go right, but instead of jumping and stomping on guys, you actually just jump into guys.
So, that helps them maintain this sense of momentum and forward progress.
And then you collect rings and much like being big in Mario, it's kind of a life insurance policy. So if you get hit, you're going to lose all your rings, but you're not going to die.
So the cycle's a little bit less interesting at first, because instead of jump over a pit or stomp on an enemy, you jump over a pit and jump into an enemy.
So it's a little bit more of a simple action.
And then the health system, basically as soon as you get hit, you're also in your switching mode, you're scrambling to collect rings.
But it's really easy to pick up a ring after you get hit.
And so you don't actually spend very much time in that collecting ring mentality.
You almost always just have rings.
Megaman, on the other hand, adds a lot more constraints that make their frequencies and harmonics a little bit more interesting.
uh... so you're not always going right sometimes you're going up, sometimes you're going down uh... megaman has hit points and the enemies have hit points right so instead of a single moment of interaction sometimes you're taking damage sometimes they're taking damage you get these small little oscillations And then, uh, because you have health bar, it'll start out full and it'll slowly go down, slowly go down until you finish a level or get a power up and it'll go back up. Same thing happens with ammo. So what's interesting about harmonics is that, um, the same constraints in a different circumstance, uh, can produce just drastically different harmonics. And for a platformer, that, uh, change of keys, if you will, is a boss fight.
So in Mario, basically the harmonics just flatten, right?
If you're big, you run right through Bowser and you win.
And if you're small, you're gonna get stomped by Bowser.
And maybe you can make it through, but it's mostly luck.
So the constraints of Mario actually don't hold up the boss fight conditions.
Sonic holds up maybe a little bit better, but the problem with a boss fight in Sonic is that the enemy boss is going to hurt you by running into you, and you're going to hurt the boss by running into him.
So determining who's running into who just becomes kind of a fuzzy concept for the player.
And also, you're going to jump into a boss, and whereas normal enemies would just die instantly, the boss is not going to die instantly, so all of a sudden you're going to be standing in the boss, and maybe he's just going to hit you before you can get out of him.
And then the ring concept...
uh... breaks down pretty pretty heavily in a boss fight because uh... you basically have infinite life as long as you have one ring and you can always grab it before you get hit again.
Mega Men on the other hand with a little bit more complexity in their constraints, they actually their system blossoms when you get to a boss uh... so uh... the health bars set up a longer fight between you and a boss and the fact that you can have different ammo types set up this whole uh... kind of matrix of what weapon you're going to use against who.
So some other things that control harmonics are pace setters.
Not on purpose, both of the talks I've given before were about pace setters, so increasing the time between shots for the sniper rifle will slow down the harmonics.
And decreasing the rate of velocity of the plasma bolt actually makes the fight shorter.
Sort of before I had really landed on this concept of harmonics, it was already really heavy in my mind.
But another thing that probably has more influence on Harmonix is things that reset the cycle.
So like the end of a turn in Magic. All of your cards untap, everything's reset, and it's under the player control, so it becomes a game mechanic in and of itself.
Whereas dying in Bioshock is...
not under the player's control and because you respawn in the Vita chamber um with all your health but not the ammo that you expended uh you get these weird kind of out of syncs between your the amount of health that you have and uh the amount of ammo that you have and kind of the state of the world and and and their harmonics kind of diverge. So um just to look take another look at kind of how harmonics work um.
You know what, this is the last four slides and I don't think I'm going to make it, but basically the four games that I've been playing the most the last year, Super Meat Boy, Legendary, Halo, Dead Space and Dark Souls all have extremely similar harmonics, even though the mechanics are utterly different.
I would encourage you to play all of those games with a mind toward how are these games the same and that will give you a little bit more insight into how mechanics will create the overall feel of your game. And we'll have just a very, very short time for questions.
Yeah, you'll have to walk to one of the mics if you want to ask questions. Should I start calling on people? Sorry? Um, I'd rather talk about Dark Souls. I actually, uh, um, I, I put in like 120 hours on Dark Souls with no, uh, spoilers or hints and, um, I, I, I, I It is a masterpiece of game design because every decision that they make, because the stakes are so high, just impacts the player almost directly.
So if you haven't played Dark Souls, I would strongly encourage that.
So I didn't really grasp from your slides.
Specific examples of what harmonics are in a one or two sentence thing, could you expound a little bit?
Yeah, um...
So you constrain the player, right? And they have certain interactions that they can participate in, and those interactions sort of have a natural frequency.
uh... uh... like the the shield recharging halo super example of of something that happens at a certain rate and it's a very predictable timing uh... what will happen is when you take all those different frequencies and you combine them they're either going to be in sync and be in in kind of a good in tune i suppose uh... or they're going to be at odds with each other and a lot of times games that feel solid and like well constructed, they have a lot of synchronicity between the harmonics.
Whereas a game that feels off somehow, a lot of times what that means is that the frequencies are a little bit separate.
What you're really saying is that good harmonics are games that are well balanced.
No, no, balance, at least to me...
Balanced in timing and system balance.
Yeah, they have a good rhythm to them.
Yeah, and when I first started I very much looked at game design as sort of an engineering problem.
Like, come up with the right mechanics that will build the right system that will produce the right experience.
And as I go on I see it more as a...
almost composing, right?
Coming up with melodies that repeat and sort of a predictable flow across the game.
So it's very clear that you have a very rigorous and analytical approach to games.
What I'm interested to hear about is, I mean it's easy, oh not easy, but, so you're looking at games that have already been finished and analyzing the harmonics, how are these different mechanisms interacting with each other.
Can you speak towards...
looking at those mechanisms but from inception, so from creating a game, is there a way to anticipate or like how would you go about applying these same types of mechanics and mentalities to building a system that interacts well together?
Yeah I think, um, uh, go listen to a really good trance song, right?
They're going to start with a beat, and then they're going to layer on lots of different harmonies.
Then at some point they're going to change it all up.
And I think you can approach game design in sort of a similar way.
You figure out what is the pace setter for your game, what are the things that are going to start a new, kind of familiar theme, and then...
make sure that the timing for those are all going to line up.
And that you don't have a game where everything happens at the same frequency, because then you're going to get the same experience over and over.
And use different frequencies that still line up to produce a lot of variety in the gameplay.
And this is obviously something that I'm going into the future, I'm going to try to do a little bit more intentionally from the start, sort of retroactively.
Okay, if there's no more questions, thanks for coming.
Get to the airport, get on your planes, go back to all your various places.
Thanks.
