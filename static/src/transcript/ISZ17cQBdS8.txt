My name is Garrett Fredley. I'm a software engineer at Electronic Arts, and my work encompasses all that is preservation.
I handle the preservation of some of our headlining sports titles, and I make it so that they can come back again one day, whether it be 10 years later, 30, 40, even 100 years.
I make sure that that is possible.
My initial role, though, while I do engineer work day-to-day, I actually got my start developing tools, developing tools specifically in the technical art space.
So I kind of have experience with both making games and kind of doing weird preservation work with them.
That is my background. That is what I do, and you will see soon how that actually plays into preservation.
With that said, let us kick things off.
What is this thing called preservation?
Many of you probably know what it is.
Some of you might even be doing it.
Let us talk a little bit about it.
Preservation is, simply put, the process that puts a game away.
All the things that went into the game, all the files, all the data, and all the documents, in such a way so that it can come back again.
And many of you right now have seen the direct success of preservation.
Who here has seen any of these titles that are on the screen right now?
Excellent, you have seen preservation success.
But preservation is not something that is always perfect, and there are stories of tragedy in the preservation space.
And we'll get into those in a little bit.
But preservation is much more than simply this, what I just said.
We see the end goal of it, but there's a lot that goes into this.
I actually want to expose what we at Electronic Arts do and what we look at preservation as in form of a maturity model.
And simply put, this will allow you to see where you sit in the realm of preservation, at least from our eyes.
So let's open up this discussion with simply a Tier 1 archive.
Now a Tier 1 archive is what we see as, take a box.
Any box, it can be an SSD, it can be a hard drive, it can be anything you constitute as a box.
You take all the things that comprise your game or your work, That can be the tools, that can be your data, that can be your code, and you simply merge the two together to form the archive.
Who here is doing this right now?
Okay, some of you, that's awesome, that's a great start.
Now, some of you might see this and go, that's awfully familiar to what we call a backup, and you're technically right, to a degree.
A backup is very similar to this, and anyone who is currently doing a backup is already on their way, and that's excellent.
The difference between a backup and a tier one archive, at least to us, is that do you archive your documentation?
What about your team photos?
What about your server tech?
How much do you preserve of the actual game besides just the content that built it?
If you preserve the documentation as well and all those kind of auxiliary things, those are what makes this a tier one archive as opposed to a backup.
But ultimately speaking, we want to preserve things because there is value in what we can bring them back for.
This, while it is valuable because that is what the game was built as, you still have to have a familiar knowledge with how to take this dump of stuff and remake that game again with it.
So the value in the Tier 1 archive is limited.
So what we did is we said, what is the next step?
What is the next tier of value that we can control with this?
That led us to the Tier 2 archive.
Now, 2.0.2's archive starts a bit differently.
We actually start with a machine.
We take the exact same things again, but we do something a little bit different.
We take those tools and we install them.
We configure them.
How would an artist use the artist software?
How did a build engineer reproduce builds?
What software did they use? How was it configured?
All of this needs to be done so that they can interface with this archive exactly how they would have in production.
The data, can this machine take a brand new piece of content and inject it straight through the pipeline into a new build of the game?
If you can, excellent.
But can you also build a new release of the game?
If you want to patch an archive title, let's say someone discovered a security flaw in your build, and 10 years later you're like, oh boy, we should get that fixed.
You need to be able to reproduce a patch with that archive.
And there's many other things you would do with a Tier 2, but simply put, can you reproduce the game?
If you were to stand this machine up, could you produce a new release of the game, new content for the game, a new DLC for the game?
That is what a Tier 2 archive is for.
But let's not forget, there is one specialty requirement of a Tier 2 archive, something we probably would all fail to check for right now.
Can it all be done without any access to the internet?
Who here says all their work would 100% function without internet?
Exactly.
The point of an archive is so that this thing will function in let's say 50 years.
If you have internet access right now, you're probably interfacing with network shares, server, let's say server programs, the works, maybe domain accounts.
If you turn your machine off, you prove can this work independently amongst itself?
That is the ultimate verification step for a Tier 2 archive, and it is obviously speaking quite difficult to do, but it is a valuable step because this truly allows us to push the game further.
Now that is Tier 2, and a lot of the time, we at Electronic Arts are able to get to this point.
But even for us, it is a very, very challenging thing to do.
A Tier 2 archive is not easy, as one can imagine.
So we try and aim for Tier 2, but a lot of the time we do end up at Tier 1.
But like anything else, and many tools developers in this room will know, we want to go to the magnum opus.
We want to get to the end goal, the greatest possible method of this as we can.
So we formed what I like to call the Mythical Tier.
The Mythical Tier starts the same way as a Tier 2 archive.
You get a machine. You get the same things of the game.
But do you use online services?
All of those need to be preserved as well.
Now let me hit home how complicated this is.
For instance, if your game runs on a server, can this machine run a local server that you were using and can it connect to that server?
Can you run a client and connect to your server?
Okay, that's stage one.
If you can, awesome.
Stage two, most people have gone their builds to a distribution service.
For instance, we use Origin.
Could you localize Origin so that you could technically build a new build of game with this, run it through Origin locally, and use Origin to distribute it again with that single machine.
Do you have metrics gathering tools, analysis tools?
The list goes on and on. If you can get this archived, you have truly achieved mythical progress.
But that is incredibly difficult to do.
In Electronic Arts, we strive to try to reach this model, but it is not simple.
And those are the three tiers of archiving.
Those are the three tiers of where we believe people sit in kind of the grand scheme of archiving.
If you currently sit kind of close to Tier 1 or even in Tier 1, excellent.
If you're just sitting just before Tier 1, we're not doing documentation, push a little bit more.
It'll feel really good when you can look back and say, wow, we built this 15 years ago. This is incredible.
If you're sitting at Tier 2, awesome.
Let's have a conversation. I'd love to see how you're doing it.
If you're at Tier 3, I have a lot of questions for you.
Now, that's preservation as a concept.
Let's see what Electronic Arts does.
Let's talk about preservation at Electronic Arts.
So Electronic Arts, many of you know us.
You probably heard our names in the news.
And simply put, we have about 35-plus years of titles, both archived and analyzed for decades.
What's great is this both allows us to see how games as a medium has grown over those years, but also how has preservation grown?
How has preservation grown since, let's say, the early 80s as opposed to now?
Probably quite a lot.
but I would be doing an injustice to games if I did not talk about how big they are.
Who here works as a game developer?
Who here knows fully well the complete size of everything you built for your project?
Perfect, some of you, that is awesome.
It is a rare question to ask, because if I asked you how big your game is, let us say for Electronic Arts, we have these monolithic numbers of builds released daily.
you output a lot of data, and we're talking about preservation, and we look at something like this, we wonder how are we supposed to preserve that?
In what right mind do we preserve that?
And that is an extremely important question to us at Electronic Arts.
But simply put, there is not one person to do it.
In fact, we have three groups I like to see as the responsible partners for the preservation process.
Let's kind of look at those three partners.
The first part are the content creators.
The content creators are the programmers, the artists, the animators, the producers, the ones who really just make the game.
They are also in charge, not solely of just making the game, how can they better the process of archiving?
Can they embed tools in their workflow that make the archiver's job easier?
So they do have a hand in this, but they ultimately create the game, and now it needs to be preserved.
So who does that?
Who handles preservation?
At Electronic Arts, we don't technically have a single, sole archiving team.
We have many people from both game teams themselves or technology teams like myself who are responsible for performing the process of archiving.
And so we kind of call them archivists and preservationists.
Now the archivists and preservationists are solely responsible for taking all that built, all that went into building the game, all the tools and software that they used to preserve the game and using that to produce an archive.
whether that be in tier 1, tier 2, tier 3, or some other unknown tier.
They are responsible for that process.
As you can imagine, we'll dig quite a bit into this and just see what this actually looks like, but these are the folks who really dig into that.
What happens next? Who does archiving after that?
To simply put, you can't just archive a game and leave it in a box somewhere.
So we have a dedicated team who manage the archives.
They're the preservation managers.
They are the team responsible for, where do I put this?
And how can it survive for 100 years?
What happens if the entire server goes down and all of our archives get lost?
Do we have backups?
How do we maintain them?
Are we able to see technology grow and still say that these archives are functional?
They're the maintenance people of these archives.
And these are the final holders of those archives.
Now, many of you probably have either a small department or just a few people who handle archiving.
And as you grow, you'll notice that the requirements of archiving become so great that this model becomes more reasonable.
But what is actually goes into archiving?
I've talked a lot about archiving the concept, the teams that handle it. I want to dig in.
I want to reveal exactly what I do day-to-day to preserve any one of our games.
So let's talk about the tasks of preservation.
I'm gonna go over exactly what a tier two archive looks like at Electronic Arts.
And it always starts the same way, this setup.
The setup simply starts with research.
Who here loves research?
All right, I appreciate it.
Research is absolutely the most important thing.
As I mentioned before, the archivists and preservationists group, they don't always work directly on the title.
They are sometimes a technologist like myself.
We do not have familiarity with the title, so how would we be the best ones to reproduce the environment for a title?
This gives us that information.
Go through all the documentation you can find, speak with some members of the teams, and gather the information.
Do you know what SDKs the game were built on?
What about the platforms? What technologies did they use?
How was their builds produced? What game engine did they use?
The list can go on and on and on.
Ultimately, this is just to gather and make you as prepared as you can be for what you're about to do.
What comes next is getting the hardware for this.
As one can imagine, as I mentioned before, and especially those who know how big their games are, you're gonna need a lot of hardware for this.
Simply, you need terabytes and terabytes of storage data for this process.
And it's taking understanding, and this is actually gathered in the first part, you need to understand how big your game is first before you request this.
So once you have all these crazy machines set up, you have all these terabytes of data or of hardware, Let's get them set up.
Now, this step is completely impossible if you do not do your research.
How did an artist interface and build content for the game?
Does anyone of you in this room know how to do everything possible to remake the game from scratch?
Probably not.
Some of you are like, I know quite a bit about it, and that's awesome.
As you grow and your game gets bigger, this becomes inconceivable to be able to do everything.
So work with your artists, work with your programmers, get the machine set up, maybe even ask them to play with it.
Once you have all the software installed, you've successively set up, now you can move on to stage two.
Requisition.
Requisition's a short phase, technically, but it all starts out with the same way.
Acquire absolutely everything, literally everything you can find.
Now, this is awesome and easy, if your data was stored in the same place.
That is a dream and that does not happen in the real world.
Most likely people will store it maybe on the main Perforce server or the Git server, but some people will store it in their OneDrive, they'll store it on their local desktop, which is truly the worst.
People will not always store it the same way.
So do your due diligence, scan through everything, you will eventually find all that you need to find.
Get that onto these machines.
Now get it to a local SCM server.
SCM just stands for version control.
If you use Perforce, get all that data onto Perforce.
If you were to use this archive to operate upon that data, you have effectively altered the data that was used in production. You do not want to do that.
You need the original files because that is what the production people used.
If you toy with it, you've rendered it not production ready, or you've rendered it not exactly what they did.
Get it onto local server so you can make copies with it, and you can play with those copies.
And it's also better to have multiple copies than one.
Once you've done that, great.
You have everything.
The machine's set up to do stuff.
Let's do stuff.
Reproduction.
Reproduction is truly the longest step because of this first step.
Reproduce every release.
In many games, and especially in the larger AAA companies, they will have a lot of releases.
Alpha, beta, final, that model is pretty much standard.
Then you have patches one through X, DLC one through X.
Perhaps you'll even have variants of them.
For instance, if you release a Japanese version of the game, that's probably a wholly separate build than the English version or the Brazilian version.
What do you need in 10 years?
What do you think the people will need in 30 years?
Every possible release has to be verified that can be produced by these archived machines.
Probably a lot to ask of a person.
And so to give you a figure, if I for instance asked you to do 10 patches per region, let's say you have six regions, per release, let's say there's eight releases, that's probably a lot of build you need to verify.
So it helps to make sure this machine is quite capable of doing it all again.
But that's not everything though.
Obviously this machine needs to be able to function and create new stuff, not just reproduce the old.
It reproduces all the content as well.
This means taking an audio file, putting it through the pipeline, and getting it into a new build of the game.
Ask an audio artist, or an artist, or an effects artist.
Make these new content files on this machine.
If they can, great. They should feel at home.
They worked on this game, they can work on this machine.
That's perfect. Match made in heaven.
That is an important step.
And remember, there's a lot of realms of content, so don't just associate art and audio as the only two parts of content.
There's a lot.
And lastly.
You got to verify it.
Remember, you're not doing this for yourself.
The person in 30 years from now is going to be opening this.
You probably might not be at the company or you may be somewhere else at the time.
Do your due diligence, verify everything.
What I like to do, get a build onto a console.
If you produced a new, I don't know, patch 18 build or whatever, get that onto the console and verify that it runs.
If you've created a new asset, let's say you made a new character, get the character into a build, get the build onto a console.
That is probably the best stress test of the reproduction stage as you can get.
And so once you've done all that, you've done everything, this machine is pretty much perfect.
You're probably tired, you wanna go home.
Let's get it submitted, and you can.
So submission starts off with cataloging.
I know, you probably haven't heard that word in a long time.
At Electronic Arts, we have this great tool that we use that allows us to catalog everything.
It's a tool that we use so that it can be accessible by any developer at any time.
It is filled in by the archivers, and it's able to depict details about what was archived.
For instance, if we made a title in 2001, we can say, what was archived?
What was put in that machine?
What tools did they use at the time?
Instead of dredging up that machine again, I can just look at this web page.
That's all I need to do.
I highly recommend, if any of you are really investing in the archiving space, get a catalog up.
People actually really want to see that.
For those artists in the room, wouldn't you want to see what you did five years ago?
See the original files, maybe even play with them again?
It'd be cool.
Once you've done that, you cataloged everything, submit it, send your final email, get it to the responsible parties who manage these archives.
They'll most likely perform their own verification.
Two-sided verification's perfect.
You don't want to just have you be the final person to verify.
Once it's done.
transfer it to their final storage place.
Mostly with us, we try to do a cloning.
We'll clone the actual machines into our final storage so that what you have is merely a copy.
With that copy, and you've got it stored, your game is done, everything's been archived, destroy everything.
Everything you just did for months and months, just trash it.
It's been cloned, it's been put away, destroy all your machines, put the hardware back into the pool, you're done.
And that's a tier two archive.
Who feels they're ready to do this right now?
Probably not.
This is difficult and it's very, very time consuming.
But I believe all of you probably can if you look into it and you try.
However, we weren't able to get this right away.
This tier, especially not tier three, but this tier.
was very, very difficult to get to.
And it wasn't just one person saying, I'll do archiving, this can be easy.
It spent years of conversations and discussions to convince people that this is important.
It wasn't until we created a cultural change and got the team on board with this, that it finally started.
And all that always starts with the same thing.
Why do we archive?
Why do we put so much time and money and thought into preserving what we've done?
So we'll simply put, there's a lot of reasons we archive.
For remastering purposes, if we want to bring it up into a legal matter, for patching, if, for instance, again, security flaws found, you could patch your game.
You want to analyze what tools were available by our competitors as opposed to this thing we built 10 years ago.
Once you have a fundamental understanding of all the realms archiving can play in, you've created a great foundation for the reasoning behind archiving.
But I really doubt that just showing, let's say, an executive producer or a lead, the people who can make those decisions to adopt this, this is not enough for them.
They want cold, hard facts, and they will come at you with cold, hard questions.
Let's talk about a really common one, who here has heard this question before, or even yourselves have said this before.
You probably have seen this question said, and it's totally fair, it's absolutely fine.
You may never want to remaster your game.
It may be something that's just not applicable to your work.
But I highly doubt that these titles and these companies thought the same way.
Do you think when StarCraft was made that they were like, oh yeah, we're gonna release this again in like 15 years?
Probably not.
Even Dark Souls, it wasn't released that long ago in perspective.
I really doubt that they thought that as well.
It's normal for companies not to think of archiving.
Premasters are not a thing you typically think about.
That's not the only thing leads will come at you with.
Again, they have a list of questions.
It's too expensive.
It is expensive.
You have to dedicate someone to it.
You have to make sure it's good.
There's quality checks involved.
The bigger you get, the harder it'll be.
It is expensive.
But it's also, it pays off.
Let's talk Spyro, for example.
I love the headline.
There's actually a headline that says, this little purple dragon flies in the top chart in the UK.
Spyro the remaster topped the UK sales charts.
So much so, it actually beat out Red Redemption 2.
A title that was going for game of the year that year was beat out by Spyro, a remaster.
There are facts like this and it's normal.
Let's talk about Resident Evil, the HD's remaster.
It was the fastest selling digital game that Capcom has ever made at the time.
I think Monster Hunter now just beat it out.
But think about that.
Two examples of a remastered title topping sales charts.
They've effectively made their money back twice.
That's some pretty good income if I say so myself.
Rothman is speaking.
We got to go further.
We have to do more, push even harder to convince people.
So I have three suggestions.
These are high level suggestions and I want you to think about it in your own work.
You got to first create the realization, what happens if you don't preserve?
What is the dark side of preservation?
Let me share some stories.
Who here has heard of Blade Runner, the game?
That's actually more than I expected, awesome.
So Blender in a game, more people know about the movie, but there's a game made years ago.
And it was a wonderfully made game.
It had a really solid cult following.
During their liquidation and their move from Las Vegas to Los Angeles, big magnetic platters or hard drives that held the game completely vanished.
They lost everything.
Everything that comprised that title went missing.
Let me hit this home.
In an interview with Gearbox when they wanted to trade the rights over, What do you think the number was estimated as to replace that data?
$40 million.
$40 million worth of content lost.
As you can imagine, the franchise died and there is no possibility of a remaster.
You'd have to remake it from scratch.
But many of you don't know Blade Runner and that's fair.
Let's talk about an example we probably all know about.
Who's here heard of StarCraft?
Probably a bit more of you.
So we think that AAA titles are impervious to the issues of preservation.
No one is impervious to this.
StarCraft, and actually you can go look up yourself, an interview with the art director during when they were doing the HD remaster of StarCraft, it was figured out that we lost all the art content.
What do we do?
And actually he states, I had to tell my artist to eyeball everything back into existence.
using YouTube videos, copies of the game, and photographs off Google.
I wonder how expensive that was.
So yes, this affects every domain.
But let me really hit this home, because while those are matters of things just straight up not being preserved, even if you do preserve, you can still run into trouble.
Who here has heard of Silent Hill?
Oh yes, the list goes on.
Silent Hill is a title that was preserved.
They did do their job. The problem is that, and again, once an interview with the director, they'd love to talk about this stuff.
An interview with the director, it was stated that, we realized that what we preserved wasn't the final release of the game.
We only preserved the beta.
So effectively, everything they did post-beta was gone.
I wonder what kind of bugs they have in the game now.
As you can imagine, that's not good.
And so it's a precaution.
Use these stories, convince your fellows, and show them no matter where you are, how big you are, or even if you already have preserved, there is still danger.
Now that's the theoretical portion of preservation.
Let's talk about the actual cost of preservation.
Are you capable of preserving?
How many heads counts are you gonna have for an archive?
At Electronic Arts, we typically lean between one and three, depending on the complexity of the title.
Are you prepared to dedicate those numbers?
All right. How many software do you expect them to use?
That list alone covers maybe 15 percent of the number of software a game typically is built with.
Can you say that those one to three people are capable of interfacing with every single one of those to verify your archive is completely capable of being used?
Or at least you have some answers as to how to verify that those software can be used.
Okay, so let's say you do.
Let's say you have this plan, you can bring some artists on board, you can get them to play with the archive.
How long do you think it's gonna take?
How much money do you think it's gonna cost?
It's not cheap.
Can you give me a number?
If you add these three things together and you look into a little bit more, you form a plan, you can create a cost and tag that to an archive.
That is a number you can give to a lead, you can give to a producer, an executive, and they can say, okay, so basically if I want three archives, it costs this times three.
That is pretty good data to give them.
Again, they are all about data.
So I highly recommend taking some time to analyze how long would it take for you to do an archive.
But archiving is still a technical process.
You still have to do the archiving work.
So you got to make sure to reduce the manual labor or it's going to be terrible.
And frankly said, archiving sucks.
Archiving is a slow, egregious process that's based purely on the tools that were used before.
So how can we make this better?
A lot of people will typically say, let's just throw people at the problem.
We'll increase the head count.
We'll say, let's take our senior engineers or our senior members and say, we need you to work on the title.
You guys may have some great archiving experience, and that's great, that's awesome.
You're probably gonna gain a lot of time from that.
But if your tools are slow, they're not plentiful, and they'll have perhaps issues in them that will make this take a long time, you're not going to gain anything.
It's going to probably be the exact same as it was before.
So that said, let's talk about some tools.
Tools that I like to use in my own work, tools that we use in Electronic Arts, and tools that I believe anyone can use to help better their work, both in archiving and probably anywhere.
Now, the first one I want to talk about, many of you probably know right now, who here has heard of virtual machines?
Perfect.
So let me kind of express the origins of archiving back in the day before this kind of technology existed.
Let's take a physical PC.
Now let's say we want all the aspects of the game put onto that PC.
How large do you think that PC's gonna be?
A lot of terabytes.
In fact, it's pretty normal for us to get 10 plus terabyte machines.
Now let me pose a situation.
An audio engineer comes up to you and says, I want this, I want the audio environment in that game we preserved.
Do you think he'll be happy when you say, here, have this 10 terabyte machine, have fun?
Probably not very happy.
What can we do to rectify this situation?
That's where we can pull in virtual machines.
Now again, virtual machines start with a physical PC.
What we can do is we can split up the hardware to create these small virtualized environments.
that all function as complete isolated machines.
They all can have tools installed to them, they all function in isolation.
Now we can say, each one of you, take an aspect of the game.
Let's take a virtual machine and say, you are the art, you are the audio machine.
You express all the audio data, the audio tools, the audio software.
We have another one for art, another one for builds, another one for server, the list goes on.
You're compartmentalizing everything in your game.
So now let's go back to the situation.
An audio engineer comes up, he wants to see the audio environment.
How happy do you think he'll be by just saying, here is literally only the audio?
Probably a lot happier.
And so this is a great tool that's really provided a lot of value to us.
I recommend everybody here going and exploring a little bit.
The barrier of entry is not too extreme and can provide a lot of value.
But ultimately speaking, while this helps us set up archives, we still have trouble when it comes to getting it set up further.
Again, setting up the audio software, the art software, the tools that production used.
How do we make that easier?
Well, there's a wonderful tool called Chef.
Who here has heard of Chef before?
A few, a few, a few, less of you, but Chef is a wonderful tool.
But let me again, let me pose a situation so we all can be familiar with it.
Artists are a fun group of people.
Artists have a wonderfully large amount of software in their tool belt, too many to speak of.
I'm looking at you artists.
The problem with this situation is that how do you preserve that many things?
For instance, if I say an artist has 20 plus software and I as a build engineer needs to go and set those up, how in the world am I supposed to do that?
I have no clue how to operate them.
So if I were to install them, even if I was following documentation, I'd probably be led into some human error.
I'd probably set it up wrong, I'd miss a path, I'd probably mess it up.
I wouldn't know how to resolve any issues with it.
And so it becomes an inefficient and ineffective process.
So what we've done is we've looked at Chef by saying, okay, so typically speaking, I'm a build engineer, what can I do to use my skillset to better the process of archiving?
Can I code it?
The typical engineer response, can I just code it?
Can I just do it in code?
Yes, you can.
In the world of Chef, Chef allows you to create what's called cookbooks.
Yes, I know, the naming convention is wonderful.
You create these cookbooks, and each cookbook has a list of recipes.
The recipes all define a software, and let's say the software version, and a set of instructions.
You can see where I'm about to go with this.
The set of instructions define in code exactly how to configure, install it, and place it onto the machine.
You work with an artist, you say, tell me how I need to install this.
I will write it in this recipe. It will be done through code.
I've effectively just codified my entire game.
And the practice is called configuration as code.
The beauty of this, and while this is great if you're working on a single title, the more your company grows, the more titles you have going on at once, the more you need to see that your technology grows with you.
Because this process is codified, and it's frankly just a bunch of text files, I can literally just copy it and within 10 seconds, make another one with a whole other set of software listed in all different versions.
That's wonderful.
And with a company like Electronic Arts, we have so many games going on at once, this is an invaluable process to us.
And so I highly recommend it once again.
You can access it right now.
The barrier of entry is a little bit steep, but I do recommend it.
They have a wonderful set of documentation.
And while ultimately this provides a lot of value for us today, what does tomorrow look like?
What does the future look like?
Now are we prepared for it?
The future is going to be weird.
It's going to be intense and extraordinarily quick in development.
Electronic Arts, we know this.
And in fact, we talk about this.
In a 24-page report from our CTO, Ken Moss, He talked about what's called the Project Atlas.
You can all access it. It's publicly available.
And talks about EA's giant push to the cloud.
So far, we've defined a process as about defining building games without cloud services.
What does preservation look like with cloud services?
Are we ready for that?
In an interview with Bloomberg, our CEO, Andrew Wilson, talked about, right now while we're doing yearly release models in some of our games, what happens if we bring that down to monthly, weekly?
daily, it is already challenging to get games done in a year, in terms of archiving. How can we do that when it is so much faster?
These two things are terrifying concepts when it comes to preservation.
But no matter how scary the future looks, we have to look back at the basics.
Why are we archiving in the first place?
We are archiving because we have history.
We have history, we have games we love, both as users and as developers.
We have thousands of hours sunk into making sure our players are happy.
If we don't preserve, if we don't preserve making sure our games are recorded in history, everything you ever loved in games will disappear.
Now with that morbid thought out of the way, let's wrap up.
Don't be known as an industry tragedy.
I've told you stories about what happens if you don't preserve.
I've hopefully hit it home that that's not a good thing.
I do not want to put you on this list next year.
Automate and build, reduced manual labor.
Right now archiving is awful.
It's a slow process, our tools suck.
How can we make it better?
It's up to you.
Look into it.
Let's have a conversation.
There's always a way we can make it better.
But again.
you have to be prepared.
Archiving might be stressful today.
It's going to get a lot weirder and a lot harder in the future.
So with that said, thank you for coming.
All right, I believe we have time for some questions.
We actually probably have a lot of time for questions, so feel free to stand up to the stand and ask me what you like.
Hi, so how does this process differ if you're like a one-person team?
All right. So one-person team is a great question. So let me rephrase.
The question that you were asking is how does this process apply to a one-person team? Now, when you talked about the historical preservation of things, do you want to see your games again in 10 years?
Most likely, yes.
Then you should be doing it. If you want to see your work in 10 years, you should be preserving.
Not, you don't always have the understanding of whether you want to remaster, and that's not relevant.
What's relevant is that do you want to see your games again?
If that's your, if your answer is yes, then you should probably be doing preservation.
If you're, in terms of process though, if you, when you're doing a one-person team, tier two and tier three is pretty hard to achieve.
If you can, get virtual machines up and running.
However, a tier one I think is a great start.
I'd say tier one, and then if you can, grow to a tier two.
Did I answer your question?
Yeah, thank you.
Thank you.
I think it's kind of related to that one.
So, small team, right?
Probably zero days off between projects.
That's fair.
You know, what sort of tier zero, right?
Like what is the like, okay, you can't even get to tier one.
What's the like worst case scenario, just get something in their process for you guys?
So the question was, small team again, what would the baseline be?
Is that kind of a good?
Sure, that's a good way, yeah.
So what would the baseline of preservation be?
Where could I start if nothing else?
A tier, I would say a backup is a tier one.
If you use version control, or if you simply have your files stored on Google Drive or anything like that, right click, hit download, put it into a folder.
Everything you've ever built, put it into a folder, that is, I would consider a tier one.
Yeah, and then like a weird archivist 50 years from now might piece it together.
Exactly.
Yeah, totally.
Yeah, so again, tier one and tier zero and tier one is really the difference between the auxiliary aspects like documentation.
If you wanna just get a record of your stuff, yeah, just hit download.
That's all you need to do.
That's a good entry point.
Cool, thanks.
Thank you.
Hey, thanks for the great talk.
I was wondering during the process of internally in the company introducing this archiving, Did you have to at any point, for example, involve InfoSec?
Did you come across with bad practices, you know, something that you had to globally change, for example, during EA, like, I'm thinking practical example, like one content team just using pirated software, or, you know, something that, you know, was just completely incompatible, but you kind of like accidentally found it because you had to review the whole, I guess during the archiving, you get to see all the practices the company does currently.
So before I rephrase the question, I just want to clarify.
Do you mean in these practices of preservation or the practices of the developer?
Practice of how the company develops software and what tools use.
So the question was, during my work in electronic arts and during the work of preservation, do you typically come across or do you come across bad practices, is that a fair?
Yes, do you have any kind of experience or gotchas?
Even though you wouldn't start archiving process now, maybe you should still within your company check, are you also doing this?
Perfect.
So yes, I have definitely come across bad practices.
It is evident everywhere.
Not every developer is perfect.
Not every developer lines up with preservation.
A common one is that where they store files.
It is a common thing for developers to store files in places that is not known to who's archiving it.
And what is a very dangerous terminology we use is tribal knowledge.
It's a tribal knowledge is when a team has knowledge strictly with amongst themselves.
They have not shared it.
It does not exist outside of that.
That is a massive danger to preservation because if the person preserving it doesn't know it exists, it won't be preserved.
And so yes, there are a lot of bad practices, tools that require, let's say, non-perpetual licenses are a great deal of a threat to preservation.
And there are perhaps external vendors.
None of that can be archived, so that is a red flag.
And so yes, to answer your question, there are a lot of cases where that practice has come up.
Yeah, I think it does, yeah.
Thank you.
Thank you.
So I think that you just kind of touched on it at the end, but knowing that software, be it Maya or anything else, has licensing servers, and now console development hardware has licensing, where after 180 days, you get locked out.
what is EA doing to try to ensure that you have some sort of access outside of that area?
All right, so the question was with licenses being perhaps not perpetual and they do expire after a time or software stop working after a period of time, what is Electronic Arts doing to combat that? What are they doing to making sure that they can still operate with that in mind?
Is that a good recollection? Okay, so the question and the answer is that a lot of It's a weird situation.
A lot of companies are working with us to make sure that what are your needs, what can we do for you, and a lot of companies do opt for perpetual licenses, or they'll kind of work with us to get one.
That's great.
There are cases where inevitably we cannot provide a license.
For instance, audio software are known for that.
It's expensive licenses and it's troubling to just put that into an archive.
And so there are situations where we cannot say that this will 100% function.
And so, yes, there is an inevitable end of.
We are trying our best.
We are constantly in communications with other companies to try to get it to work.
But there is that kind of end that we have to expect.
Thank you.
Thank you.
I wanna ask about, do you have a preferred storage medium?
Tape, Blu-ray, Glacier, and then how do you keep track of what's in this giant storage medium of all the archive data?
All right, so the question was, what is our preferred storage medium?
AWS, Glacier, I don't know, hard drive.
Yeah, yeah.
And I believe that you had a follow-up point to that as well?
Yeah, it was like, so you mentioned the catalog, which is kind of like a webpage list of what's in each individual title archive, I guess.
But how do you, like if you have a bunch of Glacier buckets or a bunch of hard drives on a shelf, do you have a different way, or is it you just do it in the catalog of keeping track of which hard drive has this title, that kind of thing?
That's a great question.
So the follow-up point of that is, how are we keeping track of the data scale of this stuff?
And so that's a great question.
Thankfully enough, technology has provided answers in terms of tools.
We can run massive queries based on this storage.
I'm not too keen or privy to the information regarding what service we use for the storage.
I wanna say Glacier, but I can't confirm, only because I don't know personally.
Regarding tracking scale, there are a lot of command line options you can do.
You run a couple day long batch, yes, a couple day long batch, and it will just track and scan everything, and we can record that.
When we're doing archiving, as archivers when we do our work, we are constantly querying everything.
For instance, Perforce as a version control system has a built-in answer for that, and so we probably know that.
When it gets put away, we most likely do a tool-based scan.
Thank you.
Cool.
Thank you.
Hi.
Is there much carryover between the work that EA does privately with public organizations, companies that are looking, or groups or companies that are looking to sort of preserve the history overall of games as a medium?
Is there information that you share, anything like that?
So the question was?
Do we work alongside other companies who are in this space of preservation, and do we work on their processes or share our information?
Is that kind of a fair...?
Yeah.
So we definitely have a great interest in this space.
For example, I'm here trying to meet other people who are doing preservation.
We are going to conferences around the world trying to engage with partners.
There are preservation meetings strictly amongst preservation engineers to discuss this very topic.
And so we are definitely going out and we are learning about other developers and learning about how they preserve.
We have had conversations with historical museums.
In fact, some of our people have actually had pictures with these famous articles of old games.
We definitely have an interest in going out of our way.
In fact, I'm here for that very reason.
Does that answer your question?
Yes, thank you.
Thank you.
Any last questions?
Anyone want to roast me a little bit?
All right, I think that is it.
Thank you very much, everyone, for coming.
