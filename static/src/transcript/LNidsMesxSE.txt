All right. Can you hear me? I'm David from Mulfire Games. I've been making games in my spare time for about 20 years. And recently we're probably best known for starting a distribution platform called Humble Bundle. But I'm not going to talk about that today. Right now I'm working on a game called Overgrowth. And we have a pretty small team. It's just myself and an artist. So it's twice as big as any team I've worked in before.
but I'm still doing all the animation and the programming.
So I really had to try to use my time very efficiently when making this game.
So I tried to abstract whatever animation tasks I could from key framework into curves and other overlapping systems.
So I'll talk about how I did that for movement.
So movement, we've always had kind of a trade-off between responsive movement and detailed animation.
Like on one extreme we have a game like Mario, where a controller input is mapped directly onto acceleration of the character.
And the animation is very simple.
Like he probably has like two frames for running, one frame for jumping.
On the other extreme we have like rotoscoped animation, like in Prince of Persia.
where all of the animations transition smoothly from one to another, and during these transitions, controller input is more or less ignored.
So it looks really smooth, but it adds a bit of latency for controller input.
So I was thinking of trying to get both responsive and detailed controls.
One thing I looked at is vehicle movement, like the warthog in Halo, when it does that stop there.
It's still responding very quickly to all the controller input, but it also has all this fancy animation, like the shocks on the wheels, secondary movement on the antenna, and so on.
So I want to think about how to apply this to a human character.
So it seems like a human would be a very complicated vehicle because we have like 40 animation bones moving around and twisting.
But really if we think about it, if you look at his center of mass, it's moving in a very simple way.
It's just making these simple curves around the ice and not moving up and down very much at all except when he jumps.
He goes in a little gravity parabola.
There are only a few rules he has to always follow.
Like he always has to keep his center of mass over his skates so he doesn't fall over.
And he has to tilt into acceleration so that that'll be true in the next second.
So in the next second his center of mass will still be over his skates.
And he has to conserve his angular momentum whenever he wants to spin.
So he can start spinning, and then he'll compact into a line to spin really fast, or he'll spread out to spin more slowly.
And the same is true with this gymnast doing floor exercises.
Like, she seems very complicated, but she's really just like Animation 101, just a bouncing ball.
She's bouncing once, once, and then a big one.
compresses a little bit on the landing with squash and stretch and there's always a constant gravity. Like she's always accelerating downwards at 9.18 or 9.81 meters per second squared whenever she's not in contact with the ground. That's true if she's jumping, flipping, running or in the air in any way.
So with Overgrowth, I wanted to start by focusing on the basic physics movement.
Like start with a Mario-like controller input equals acceleration and wrap everything around there and never interfere with it.
So I had this one green sphere as a bumper sphere.
It lets him slide off of objects that he runs into.
And a white lifter sphere, which moves up over small obstacles.
By using this as a foundation for all the animation, we always had really consistent controls.
Like whenever the player presses forwards or right, it does something predictable.
So if they fall off a cliff, they know that it's their fault and not the game's fault.
And whenever it's so predictable, they describe it using words like intuitive and responsive, which is a much better thing to see in reviews of your game than like awkward or sluggish or floaty.
So I kind of feel like there should be a Hippocratic oath for game animation, which is at first you do no harm to the gameplay.
So by making sure we have the movement in first, and we do the animation on top of that, we can make sure that that's the case.
So the first step was just to drape an idle pose onto our physics sphere.
So here he just floats around and he rotates towards his velocity.
And his rotation is reactive to the velocity.
It's not the direction the controller is pushing.
it's the direction he's actually going.
So if he moves along a wall, he kind of slides to face in the direction he's going, instead of kind of running into the wall.
The next step was to add some acceleration tilt to it.
So whenever he accelerates, it tilts in that direction.
And that already makes it kind of fun to move around.
Like, he starts to move around a bit like a Segway or some other simple vehicle.
But I'm not making an ice skating game, so I wanted him to actually move on the ground.
So I just added these two key frames.
There's the pass pose and the reach pose, where his legs are passing and then the extreme position.
And I just kind of used this surveyor wheel-like technique just to figure out how much distance he's moved on the ground, and that kind of takes off the key frames in the animation.
So no matter how fast or how slow he's moving, he never floats, and his footsteps are just always in sync with the ground.
Then I tried adding another speed for walking.
The walk has much smaller strides, so it has to have a much smaller wheel just to take off each one.
And it's a bit jarring to suddenly transition from one to the other.
So I added a synchronized blend between them.
So at any intermediate speed, it'll just blend between the two key frames and also blend between their stride size.
So it can go at fast, slow, or any intermediate level.
And since I was just key framing the shape, the shape of his limbs around the center of mass, I had to add in a bit of a bounce.
So he could have a bouncy jog when he's moving slowly.
And it gets flatter the faster he goes, just because gravity is always constant.
If you have half as much time between each stride, you can only fall a quarter as much distance, just by doing out the integration.
And two key frames is not nearly enough to just warp from one to the next, so I had to start interpolating from one angle to the next, just by doing a weighted average between the two nearest frames.
And that helps preserve spatial continuity, so it goes from one frame to the next.
But there's a sudden velocity jar at the end, so his arms reach forwards and suddenly start going backwards.
So I upgraded that to bicubic interpolation.
which makes sure there's spatial and velocity continuity.
And that made the, I thought the run, even in slow motion, looked pretty acceptable, even with only two key frames.
Then I needed some squash for the compression, like we saw with the gymnast.
So I just added a crouch frame.
We can interpolate linearly there, but organic creatures almost always look bad with linear interpolation.
No animator would ever use linear interpolation just for their own internal animation.
But it's also important to avoid it when transitioning from one to another.
So I tried using a spring damper system to interpolate between these two key frames, which just has these two parameters, the stiffness of the spring and the damping factor.
I just tweaked that until it looked right.
And that adds a lot of the nice easing in and follow through.
that I would have animated if I wanted to do like a transition animation by hand.
But since the curve is separated from the transition itself, it can work with any standing pose and any crouching pose, or even with a standing animation and a crouching animation.
So I just added another synchronized locomotion for crouch walking.
So now we have our six locomotion key frames and our two standing key frames.
And since we're using a spring damper system, I could use the existing crouch to handle absorbing landings.
It just adds some downwards force to the crouching spring.
So we don't really need a landing animation at all.
And since this transition is separated also, it will work while he's running or while he's standing still.
Next, I wanted to add some ways for players to express themselves while they're in the air.
So they could flip in any direction by just pressing a control direction and pressing the flip button.
With linear rotation, as always, it looks pretty bad.
Especially at the end there, we suddenly, like where does this angular momentum go?
Just kind of disappears.
And where does it come from in the first place, for that matter?
So I tried addressing that a little bit by changing the curve.
So it's a little bit of acceleration.
or anticipation at the beginning.
So he's still kind of manufacturing momentum from nowhere, but it looks a lot more plausible.
And then at the end, the ease out is synchronized with his transition back into his jump pose.
So it works more like it works for the figure skater.
Like he's rotating really fast while he's balled up, and then he slows down as he expands outwards.
And he used the same system for a roll, where he just rotates around the center of mass with a rolling pose.
But he has a different tuck pose for rolling forwards and rolling to the side, and interpolates between them for any intermediate angle.
So he's always kind of rolling over his shoulders instead of rolling over his spine or his head.
Those are all really simple systems, but when you put them all together, it gets pretty compelling results, I think.
Even with only 13 keyframes, it pretty, it transitions between every possible thing you might do pretty well.
Like we have a simple system for all standing and crouching transitions using that spring damper system.
We have an acceleration tilt for all horizontal movement.
And we have all these rolling and flipping systems with controlled curves.
And the nice thing about using so few keyframes, is that it's not that hard to add a whole new variation.
Like if I want to make a variation where he's carrying a spear, I don't have to layer a spear pose on top.
I can just make 13 new poses that take the spear into account.
So he'll roll nicely without penetrating the ground.
Once we have animations we're happy with, there are a lot of procedural ways to refine them.
Like we've already gone over inverse kinematics a little bit, where you just move the foot or the hand and automatically calculate the angles for the joints.
We don't really need a library for that.
Like it's kind of pretty simple trigonometry just to figure out that angle for a two bone IK.
I can take that a little bit farther for really tricky situations like this ledge climb.
I just had the one key frame for grabbing onto a ledge.
and then constructed all his movement using Embers kinematics.
So you can shimmy along using big shimmies or small ones or whatever angle, you can go up and down.
So I just couldn't, it seemed easier than making a hundred different variations in Blender, which is what I'm using for animation in this case.
You can also use some IK for just look targets.
So I used the multiple joint IK for the hands and feet to make sure that all the contacts are preserved.
But this helps with more like social contacts.
So enemies or characters are always looking at their targets or looking in the direction of the camera or facing.
They can face their torso one way and their head another way.
It just helps make the characters look a lot more alive and aware of what's going on.
It's pretty common now also to add secondary physics to the character somehow, like by adding a cape or by adding wobbly scabbard, or in this case, wobbly ears.
But I wanted to try bringing that a little bit deeper into the character.
So every animation has sort of a softness parameter for each bone.
So in this case, his arms are a little bit soft, so he kind of wobbles when he runs around.
And secondary physics are nice to bring as much of that in as possible, because it helps transition.
not only between different animations, but different rotations and different velocities and any kind of change.
And finally, for refinement, I tried to address it kind of like a profiling problem.
Like I just try different things, find what looks the stupidest.
So in this case, it kind of looks stupid to slide along the wall on this face like that.
Because it kind of exposes this invisible collision sphere.
So I tried just using my locomotion system to replace that with a simple wall run animation.
And I found that took one of the stupidest looking situations and made it one of the cooler ones that everyone likes to post screenshots of on Steam.
In almost every game now it uses ragdolls for destroyed characters.
And I first saw them in Carmageddon 2, where they just used simple box physics to allow you to collide with pedestrians and pile drive them into walls, or like knock one pedestrian into another one and make them both fall over.
But, I didn't see articulated rag dolls until Hitman, code name 47, which kind of blew my mind at the time, because you could drag on the bodies by any limb that you want to, or you could blast them up against walls and they'd kind of slide down in a dramatic way.
And since he wrote a paper about it, the guy who did this, I immediately wanted to try it for a game jam project.
So here's one where you're a psychic bodyguard, where you have to protect the VIP in the white outfit by shooting all these guys.
So the instant ragdoll transition worked well for extreme situations, like you blow their limbs off with a grenade or something.
But in movies, there are often different kinds of death animations that are more dramatic and drawn out.
Like this guy is kind of falling slowly like a tree, or someone's clutching their shoulder when they get shot.
Or even sometimes they just act it out by standing up for a while, so the hero can just shoot them dramatically and satisfyingly many times.
Like this poor guy here.
So I tried just delaying the ragdoll a little bit to allow the characters to have a bit more time to react to what's going on.
It's like if you shoot them in the leg, they might grab their leg, and if you shoot them again, then they'll go into an immediate ragdoll.
Or they'll stay up for a little while, so you can just unload your machine gun into them.
And it even added a little bit to the gameplay, because sometimes you'll shoot someone and they're dying, but they're still about to kill your VIP, so you have to keep shooting them.
Which is very violent, now that I think about it.
It did add to the game, I think.
The next big thing in ragdolls.
Rockstar announced they're using this tech called Euphoria to add active ragdolls.
So it's some kind of AI for the joint forces.
So not totally limp.
They're still trying to do something.
Like grab onto things.
Or sort of keep their balance.
So I tried doing something like that in Overgrowth.
And started with pose matching.
So he'll just try and preserve whatever pose he was in by applying joint constraints.
And that was pretty fun to do.
The next step was to add animation matching.
So now he's playing his walk animation, but he's not really walking very well.
And finally, I extended that to an actual useful system.
So when he's far away from a surface, he'll flail with these three flailing key frames.
And when he gets close to a surface, he'll kind of curl up and try and protect himself.
And if there's a surface coming to the front, he'll put his arms out forwards.
It doesn't help very much.
But it makes him look a lot more alive, and less like he was just unplugged from the matrix.
So a lot of the time when you punch someone, they'll fall over.
And I don't want them to keep looking like they're dying and getting resurrected.
The same kind of techniques can be applied to anything, any kind of animation, not just third person characters.
Like in this case, I made a game jam project called Receiver, which is all about really detailed gun manipulation.
So instead of R for reload, it's like R is rack the slide, and E is like eject magazine.
So I had to divide it all up into little stages like this.
And linear interpolation continues to look bad.
So, I tried using the spring interpolation again.
And that already, I thought, looked pretty natural.
Like even with just your three key frames, like that's more like how someone's arm might move around.
It still reacts instantly to any controls.
Like you can interrupt any of those transitions at any time.
But we still only need three key frames for that.
It's a similar kind of rotational spring for the gun.
which I use for any kind of sudden impacts.
Like there's a gun recoil, of course.
But I also used it for footsteps, and even for like taking out a magazine and slamming it back in.
Just helped accent the movements a little bit.
In Receiver, I had to decompose everything into little movements like this because that was just part of the gameplay design.
But I feel like I would do it even if you just pressed R to reload like usual.
because it made it really easy to make variations each time.
Like when you eject the bullets, one of them might get stuck, so you have to do it multiple times.
Or you might not fill it completely, or you could spin it a little bit while putting it back.
And having it in little pieces like that could make it really easy to randomly add variety to all reloads every time.
And there are a bunch of good examples of games that I didn't work on that do a pretty cool job with procedural animation.
Like, Shadow of the Colossus had a remarkable animation problem, because it had one skinned character climbing around on a bigger skinned character, which I think has not really been attempted since then.
So usually that is just handled by rotating the character and using inverse kinematics to make sure the hands and feet lined up.
But in extreme cases, he would lose his grip entirely.
Then he simulated with a sort of two-part pendulum, like one part from his hand to his chest, one part from his chest to his legs.
So he kind of flaps around.
And that simulation is applied to the pre-made flapping around animation, just to make sure it all lines up.
A 2D example is this upcoming game called Rain World, which has this really cool little slug cat character, which I think is what they call it.
Whenever he runs, he tilts in the direction he's going, kind of like the figure skater or what I did for Overgrowth.
And when he's crawling, like you can see in the little window on the left, he moves like the character in Snake.
Like he has his front part is kind of dragging his rear part behind it.
And he uses inverse kinematics to make sure his limbs all hook up to the nearest surface.
And he always has secondary motion on the tail. The tail is always physically simulated.
So it has nice smooth transitions between every state.
A more extreme example is this game called Gang Beasts.
which is always in an active ragdoll state.
So you can have these crazy situations, like the little guy trying to climb on the big guy and pummel him in the head.
And they didn't have to simulate it in great detail.
They used an invisible sphere to kind of prop the guy up.
But it's really neat how it allowed for such difficult situations, environment interaction.
You don't have to take it quite this far.
You could always do like a hybrid.
So sometimes they're active ragdoll, and sometimes they're moving around normally.
I saw this as a great case study.
So in the future, I think we really need animation code to work more closely together.
So that we can use the code to like help offload repeated tasks from the animators.
Like if you keep on having to animate like an overshoot for your punch, you could just add a new curve for that.
You could add a little overshoot curve.
And then for each of those overshoots, you just do the one key frame.
You apply that curve.
You just cut down on your work a lot.
So if you keep on identifying any repeated animation tasks and extracting them out and making good tools for the animators to use while doing that, I think that could save a lot of time.
It would also allow animators to focus a lot more on the performance and less on the.
like busy work, like transition animations and repetitive things.
And thanks for watching.
It's on my contact info if you'd like to talk afterwards.
I'd rather use your tools because it's way cooler.
I think it's a lot easier to program yourself than it probably seems.
Like for the pose matching I'll just make sure, I'll just read the relative matrices from the animation and then I just apply a joint constraint to enforce those relative positions in bullet and things like that.
So I don't really have like specific user friendly tools that I can sell but I can tell you how it works.
Thank you.
Can you think of good ways of, like one of the main problems with using just physics to move between key frames is you lose intentional in-betweens, which is something that animators really like having control over.
Can you think of a good way of biasing the in-betweens towards certain performance focus in-betweens rather than just submitting to what physics dictates?
Well, it's still kind of animating in the same way as you normally would.
But you would take the transition that you would normally animate with intentional in-betweens and then kind of try and abstract that out a little bit so it can apply to multiple transitions, which is mostly what I'm trying to do.
I'm trying to avoid the combinatorial explosion of trying to transition from every stand to every crouch so we can kind of make it more of a linear not explosion, if possible.
Hi, yeah.
So you were talking about you coded in basic two bone IK for your wall hanging, for instance.
Is there a resource that you used to maybe learn more about that?
Or I mean, could you point me in the right direction, maybe, because it's something I'm unfamiliar with and I'd like to figure out as well.
I can't think of a specific resource for that.
But I could talk about it on email.
Oh, sure.
It's basically just.
It's like the right triangle problem.
Like you have this bone and this bone.
Now you have two right triangles.
So you find this angle here.
OK, yeah.
you mentioned the case of like having the character hold like a ball or something like that.
And you said that the approach for that would be just to have, you know, make all those key frames except with him holding a ball. Did you try doing like putting IK so you put his hands onto the ball and then so you wouldn't have to make all those frames again?
I'll try and answer in one minute. So I think that's a good question. I think that's a good Yeah, I think you can definitely do a lot of that with IK.
I try not to, I try to only use IK when it's like super needed, because usually I'll find better results by having him like hold a very small ball and hold a very large bar ball and then interpolate.
Because then we have animation control of the extremes.
Or do that with an animation layer that gets layered on top.
Because otherwise you're animating with very awkward tools.
You're like animating in a text editor, which is not ideal.
Okay, well thanks.
I don't think I have any more time.
