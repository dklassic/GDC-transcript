This is Controls You Can Feel. I'm Zach Gage.
There's a hell of an amazing echo going on for me, so that's cool.
This is a talk on why tactility matters and how you can build that into your games, if you're doing touch.
But I'm also talking about kind of any kind of system. So this isn't just touch. This is, if you want to make a game for anything you've never really dealt with, how to think about the controls.
So the first thing is, I gotta say, I'm not a scientist. I didn't do research for this stuff.
I'm an artist, and I've worked on lots of different things, and I've spent a lot of time thinking about interaction.
I've worked on large-scale installations.
I've worked on small-scale iPhone games.
I've worked on weird art games.
I've made chat rooms, or chat software.
I've done small installation art.
I've even made aggressive books that take advantage of how you're interacting with them.
So I've designed and thought about interaction in literally dozens of different contexts that are all really weird.
digital and non-digital.
And in my experience, the only thing you really need to do to design quality interaction is just really pay attention to what you're doing and put in legitimate thought into thinking about it.
And I have a couple rules that should help.
So when I talk about tactility, I'm in this presentation, I'm not just talking about you know, what you feel with your fingertips, which is usually what we think about when we think about tactility.
I'm talking about the entire physical experience of interacting with something.
So how you hold it, how your body understands it, everything.
So, as far as I can tell, the root of a lot of unsuccessful iPhone control schemes comes from designers just not realizing that the touch screen is something that they need to design controls for.
And beyond that, you have to design not just good controls, but you have to design a game that's supportable by the type of controls that you can design.
So, most of us who have been thinking about making games for a while should be pretty familiar with designing control layouts, as in like designing what buttons on a controller do something.
And because we've been making games with this interface for so long, it's really easy to forget that that interface was designed in the first place.
And all the games that we make are based on that interface as much as they're based on any creativity that we're bringing to the medium.
So designing for touch interfaces is really different than just designing what key or button does what. Just as designing a game for the Wii or the Kinect is really different.
It's the closest you're going to come as a game designer, probably, to designing whole new physical control schemes. So a long time ago, Nintendo got to invent things like the B button and the D pad and the Z trigger.
and just like them today when we make touch games we're inventing ways of people physically interacting with our devices which is pretty exciting i think And sure, you could say this isn't really worth it, and just in case for some reason you stood on the line to get in here and you totally disagree with everything I'm gonna say, let's just look at a couple of really successful iPhone games.
So, Angry Birds, Fruit Ninja, Cannonball, you've probably seen all of these games.
These all have really successful touch controls, and I would argue that that's a driving reason why they've been so successful.
Especially things like Fruit Ninja, Cut the Rope, Angry Birds.
And in case you're worried about unique controls and you think that maybe you won't be able to port your game if you have unique controls, let's just consider a couple reasons why that's not a great idea.
So first, you've got to rock with your software when you first put it out.
You can't put out something that sucks and then expect to port it to something where you'll have easier controls.
You want the best controls in the first thing you put out.
Also, games with unique controls tend to have more success or be capable of more success, which is why everything you see on the iPhone store that's popular either has great controls or is a copy of something that had great controls.
And the other thing is the iPhone is the mobile console to beat.
Everything's got touch, and it's gonna have touch.
So you can probably port.
Okay, so how do we do this? How do we do this special thing?
So I have two rules.
Any new successful control scheme should follow these two things.
One, it needs to be comfortable.
When gestures, when players make gestures or moves, those things should feel good.
They should probably feel great, but they definitely shouldn't feel bad.
It's really easy to think that a gesture that doesn't feel very good won't alienate a lot of people, but it will. And if your gesture feels extra good, that'll get people into your game way more so, especially if you combine it with a really awesome thing happening in the game.
So pulling back the catapult, the catapult in Angry Birds feels good. Pulling the trigger in the shooter feels good. There are reasons why those tropes have really lasted.
And then the second thing is your control scheme really needs to inspire confidence in the player.
It needs to provide primary feedback that allows practice players to be 100% confident in their inputs.
And this is a little bit more complicated.
So I like to think that feedback comes in two categories.
Primary, and then an optional reinforcement, and secondary.
And I split them up like this because although they are both important, they're each important for different reasons, and you can't compensate for having poor primary feedback with great secondary feedback, or vice versa.
So what makes up these?
So primary feedback is information that players get from the body.
This is the tactile information.
And this can be coming from your sense of touch at a thousand frames per second.
It can be coming from your muscle memory or from your understanding of body position, which is called proprioception.
And the success or failure of this is based entirely on your game's control design.
And this is where a lot of iPhone games go wrong.
And this is basically what the focus of this talk is going to be.
Then there's kind of an optional reinforcement that can come from audio cues. So this would be something like the jump sound in Mario.
And then secondary feedback comes in through the eyes, and this happens a lot slower at 60 frames per second or less, depending on the game. And this is never the solution to primary feedback. I think probably a lot of you have great skills at designing secondary feedback, and so I'm not really gonna talk about that.
And the goal of these feedback mechanisms, then, is to convey the game state of, of the game to the player as fast as possible, so that they can really successfully embody the character that they are on the screen, or that, if there isn't a character, that the world that they're interacting with feels real.
Essentially, the goal of these mechanisms is to make the action of interacting with this world as completely invisible as possible, so that the player can spend the most time thinking about interacting and, with the world and not thinking about interacting with whatever their device is.
So to illustrate this clearer, we can look at how information is coming when we play Mario.
And if you weren't thinking about control design, you'd probably think, all right, I'm gonna push right, Mario's gonna move right, I'm gonna push A, Mario will move A.
Or Mario will jump. And this kind of feedback is really important to new players.
This is how they learn the game. They try something, and then they see what happens.
But this visual feedback is actually the secondary feedback.
The first feedback is coming through your fingers.
So when a practice player plays Mario...
She presses right and she knows that Mario will move right before she sees it.
And this is easy to demonstrate.
If I push the A button here, what's gonna happen next?
We don't need to see the next frame to know that Mario's going to jump.
And that's really important, to have this intuitive understanding that Mario will jump when you push the A button.
It's because I can feel the button go down.
It's because my proprioception is telling me that my thumb is in the right place.
This all maybe seems kind of obvious, but just in case you were wondering what would happen, that's what happens.
And when a novice plays Mario, they might not be familiar with the controller.
They might not know this stuff.
They might not be able to tell the difference between the A and B button by their finger.
proprioception. They might have to look at the controller a lot and look at the screen.
And this is normal. But the difference is, if you don't have a good controller design, nobody ever gets past that. They're always looking at the controller. Or even if they're looking at it ten percent of the time, that's still very novice play and it's not the kind of thing you want from your game. So this is easy to demonstrate, too. If I'm a novice player and I'm pushing one of the buttons on the right, what's going to happen? We have no idea. The only way we can find out is by waiting for our eyes and our secondary feedback to understand what's going on.
And this probably seems obvious.
Like this is not super complicated stuff.
But the thing that makes it tricky is that it has to be a hundred percent.
It has to work every single time.
So if we go back to the screenshot and we imagine I'm eighty percent sure I'm pushing the jump button, that's not good enough.
Ninety percent sure.
If I'm wrong, Mario's probably gonna get killed by this Goomba, which would be really embarrassing in front of all of the friends that I'm playing Nintendo with.
So it's gotta be perfect.
I don't wanna ever be worried.
And so when we take this back to the iPhone context, you'd be really shocked at how many games fall into this good enough trap.
So Geometry Wars is a game that uses a virtual joystick that centers based on your thumb placement.
So you put your thumb down and it's centered.
That's pretty easy to understand.
Sorry, thumbs look really weird when you take them apart from a hand.
So I move it right, and that's a gesture.
And that's easy to understand because of my proprioception.
I put it down, I moved it.
And the ship follows my movement, right?
That's pretty easy to guess.
I can understand what's gonna happen from the screenshot and just from my understanding of my body.
But if I move my thumb to a different position and we look at the picture and we start to think about, all right, so now where's the ship gonna go?
And.
Think about how much longer that took you to figure out than when you first moved the thumb.
And you can try it with your finger in the air.
And the problem here is that we're taking all the benefits that people are gaining from their proprioception, from their understanding of their body, and we're then mixing them with this other system, with this spatial...
comparative reasoning system.
And so now instead of a system where we understand everything intuitively, we have a system where you have to think about it.
And thinking about it takes so long that most players playing this game will now go back to relying on visuals.
They're gonna go back to that secondary feedback.
They're missing all the first feedback.
and that makes the game a lot harder to play.
And it's not just with these mobile joysticks.
It happens with fixed joysticks too.
So, I have a thumb box here.
That box, where 44 points is coming from is Apple's guideline for how big a button should be when you're looking at it to be easily pressed is 44 points.
Points are like a...
pixels with DPI. So you could imagine on a phone, 44 points would be 44 pixels. On a retina device, it would be 88 pixels. It's just size. So they say that that's how big the box needs to be to be hit. So we can imagine that on a joystick that's fixed, a player puts his thumb down, there's probably like a 44 pixel variance in where exactly their thumb position is. And maybe if they're really good, it's just a 22 pixel variance. Maybe we can make it smaller. So that's half of Apple's research number, and they've done a lot of research on this.
But that's still a ton of directional options for this ship.
For this ship. You can see from the pie chart.
There are all these different places that that could go.
Two of those directions put me into enemies.
One of them is in the clear.
If this is the gun, what am I killing?
All this stuff is things that players worry about where they're playing a game.
And this is all assuming I actually remember the exact location of where that joystick was.
And when you play something for long enough, you forget about that virtual thing.
So how come that works with analog sticks?
How come we don't have this problem?
So with analog sticks, you have a spring in the center, and you can always feel where the center is.
And the amount of torque on the spring is how far away you are from the center.
All this stuff was really well thought out when it was originally designed, and we don't have any of these kind of affordances when we're dealing with virtual sticks.
All that information that we would normally have gotten from some mechanical process is coming from inside our body.
So now you might think, like, all right, well maybe it's impossible.
Maybe we can't do virtual d-pads.
And that's not entirely true.
Super Crate Box has pretty good d-pads.
I would argue that you can't do a virtual d-pad as well as you could ever do, like, real touch controls, which I'll get to later.
But they do kind of work.
And so we would wonder, all right, so how did they pull this off?
And it turns out it's actually not very complicated.
If Apple's recommending 44 points for a button...
that you're looking at, we would imagine you'd have to be a little bit bigger for one that you're not looking at. And it turns out that crate boxes are 75 by 75 points, which is a pretty good margin of error. There are only a few buttons. You're not moving your thumb a lot. And those buttons are only doing one thing. They're not analog joysticks that could be anything. They're yes or no. And so it turns out that if you have a practice player who's okay with playing with virtual joysticks, this is, with virtual D-pads, you can be pretty confident that your actions will be, uh, portrayed properly when you play this game. That there are people out there who will play this game and it feels comfortable like a D-pad.
Not rocket scientists. Science. This is pretty straightforward. You just have to think about it. They just made the buttons really big. And if you think about, then, the other thing that's sort of coming out of this is that there are certain games that you just simply couldn't do this with.
Greatbox works because you only have two buttons. But if we need 75 point buttons.
a D-pad is just not gonna cut it.
And the other scary thing about a D-pad is, when you have all those directions, even if we didn't care that it was taking up basically the whole screen, you're asking somebody who's playing it to move their thumb a lot.
And the more you move your thumb, the more you forget where things are that you're not looking at.
So there's a reason that the Jaguar sucked.
That the controller didn't work.
You have to look at that all the time.
So let's look at a case study here then.
So we can look at Tetris.
Tetris is a really good thing to look at because they released it and it was bad, and then I released a game that was kind of based on it, and then they released a Tetris that was really good.
So we have one bad thing and two good options.
So the original Tetris, people move, people interacted with this game by dragging the block left and right, swiping down, or tapping to rotate.
So if we start with what went well...
But tapping to rotate works pretty well.
Those are basically two giant buttons.
We know that buttons work, and it worked great.
But that was it.
They didn't get anything else right.
Sliding is problematic because the Q, the row, basically the columns are only ten points.
and your thumb is huge, your thumb is 44 point variance.
So you're not moving your thumb very far.
And when you don't move your thumb very far, it's really hard to intuitively understand that.
There are not a lot of things, situations in real life where we're only moving our thumb centimeters.
And so our proprioception isn't really geared to understand that kind of movement.
Also, the swiping down is a huge mistake.
Swiping down is not a comfortable gesture.
And this goes back to that comfort thing that I was talking about.
If you look at Apple's UI, you'll notice that there's very few situations where you ever swipe down.
All the menus that you scroll start at the top, and you swipe up.
And that's because swiping up feels great.
Swiping down feels poorly.
And you can feel that if you try it with your hand.
This is not a comfortable gesture.
And swiping a piece down in Tetris should be the most exciting thing you can do, because you do it when you've made a decision or when you're going to get rid of blocks.
It's going to feel great.
Mixing it with something that feels bad is not a good move.
So the game that I built that was kind of based around that was called Unify.
And I solved a lot of these problems by flipping the phone on its side.
A lot of things are more comfortable when your thumbs are more extended, when you're holding a larger thing, that you're not cramping your hand around.
So the way that Unify worked is you had two pieces, one on the left and one on the right, and the bottom row from Tetris was in the middle.
Rotating is just tapping and it felt good.
Sliding pieces up and down feels pretty good because these rows are so much bigger than those tiny rows in Tetris.
And sliding in, actually putting your two thumbs together, is a really good gesture.
It feels really good.
Players really like it, especially when you put them together and then blocks blow up off the screen.
So I got a lot, a lot of mileage in this game just from that gesture feeling good and being able to do it over and over again.
And I noticed that even in prototypes.
The other thing is we added really strong physical reinforcement sounds.
So the sounds that come in this game aren't just digital bleeps and bloops.
They're very physical.
They're like clicking.
And that makes you feel more like you're interacting with a physical thing.
So this was a pretty simple set of changes, but it resulted in a really differently structured game.
And this is a really important point that I want to make, is don't be afraid to let changes making in your controls, don't be afraid to let them bleed into gameplay.
It's really important that the gameplay takes cues from your controls.
So let's look at how Tetris solved this.
So they, unlike, they, they couldn't really do the amount of changes that I did, because mine resulted in a totally different game that didn't feel like Tetris.
They wanted something that still felt like Tetris.
So they actually did a really good job, and they did it by not being afraid to mess with some of those really core mechanics of Tetris.
They were trying to hold on to the core of Tetris, but they could change some of the mechanics.
And so what they did is they have these options of where you can drop a block.
They got rid of the sliding entirely.
Now you just tap where you want to drop it.
And they only give you four options.
And the reason for that is because they need enough pixel variance so that you can be super confident when you tap one of these options that you did tap it properly.
That's pretty close to Apple's number.
And it works perfectly.
The other thing that they did is if these aren't good options, you can tap that cycle button again.
And it will give you four new options.
And it will reset the time that you have.
So you could just keep tapping the cycle button forever and never drop a piece.
But what they did that was smart is they basically took the time.
It used to be in Tetris you were under time pressure and you were interacting.
And they noticed that the interacting wasn't great, so they separated them out.
They made a non-interactive mode where you're thinking under time pressure.
And then you just make a choice and it works.
And it actually feels a lot more like Tetris than the old terrible version of Tetris.
But OK, no more virtual buttons.
That's not probably why you're here, how to make good virtual buttons.
So let's look at some games that didn't do virtual buttons and did good.
Flight Control was a really great example.
Drawing a line feels really good.
the planes are easy to press. You never make a mistake.
But there are some mistakes that you do make in flight control, and that's when you draw a bad line.
But that's not an input confidence. That's the player just not being skilled enough, which is the kind of mistake that you do want to make. And they were really smart. They paced their game really slowly so that you could actually get that secondary feedback.
You could draw a line, and then you could look at it, and be like, oh, that's not the line I wanted to make, and you draw it again.
And it's really important to point this out, because this isn't a decision that they made because their control scheme wasn't successful, because players weren't confident.
This is a decision they made to enhance their control scheme.
This is where you have something that works, and then you design your game around it in a way that supports all of the things that are great about it, and tries to draw attention away from the things that are bad.
If this game was really fast and you had to draw exact lines, it probably would feel terrible.
But that comes from the actual game mechanic and not from the interaction.
The interaction is actually very successful and players playing it are always confident.
I don't know if you've ever tapped a plane and it didn't work.
I've never had that experience.
And that's really telling.
Fruit Ninja's another one that does it faster.
Fruit Ninja, you swipe and it draws a line, and it feels great, players can understand it.
You get incredibly great visceral feedback because swiping feels good, and then something blows up every single time.
The other thing that they did, which is as smart as that strawberry up there, is forty by forty points. You're gonna see that number everywhere when you start to research this stuff. There's nothing smaller than that, because something smaller than that would be really hard to know that you hit it. And the thing that you really want is to build a game around supporting the confidence that your input is generating in players.
So I have one more. You, you really want players to blame their reflexes when they lose and not the game controls. So I have one more example.
of a game with even faster analog input.
And that's this game BitPilot that I made, which was really born out of the desire to have an iPhone game that was really intense, that wasn't slow movement and planning, where you could actually input it directly and do these really great sweeping moves, where you could really become an expert in the controls.
And so this might look like a standard twin stick asteroid dodging game, but it's actually quite different.
So I'm going to show a video.
So the way that this works is that when you swipe on the screen, oh man, that is super dark.
I may need to adjust, I don't know, is there a way we can turn down the lights slightly for the video?
No.
Okay, so here you can see the thumbs moving.
So the way that it works, perfect, thank you, is you swipe with one of your thumbs and the force of your swipe is given to your ship, like in a fraction of the force.
And so if you swipe with two thumbs, the force of both of your thumbs is given to your ship.
And it's not one-to-one.
It's not like if I move my thumb in a circle, the ship will move exactly in a circle.
It's a, you're kind of pushing the ship.
And this works in a lot of ways because of the way we think about gestures.
When I gesture, when I, like, I'm gesticulating with talking, I'm not doing something that's very specific.
I'm doing something that's kind of vague. It's sort of a hint.
And so in this game, you're hinting at the ship what you want to do.
But you can make big gestures if you move both your thumbs at the same time.
But really, most of the time, you're just hinting at it.
And because you have to hint at it a lot, the player has to make a lot of decisions all the time.
And that takes a lot of the stress out.
of what those decisions are, which is really, really helpful.
for the player. And it makes you able to free up your visual perception, to pay attention to all of these tons and tons of asteroids that are moving, which you would normally not be able to do. If this was a dual stick game, you'd be paying so much attention to where your ship was and if it ended up where you wanted it to be, that you wouldn't be able to pay attention to how these asteroids are moving. If you notice here, there are no visual cues as to where those asteroids are going. You actually have to keep track of them and remember where they were.
Okay, so that was a lot of different things that I covered, and probably you're not going to remember all of them exactly.
So I'll sum it up in a couple ways that should be helpful.
So the first thing, if you're going to do this, is you need to be flexible with your game design.
You need to understand that games are as much a product as of the interaction possibilities of the platform that you're developing for, as they are of your own creativity.
And it's actually normal and great to let controls influence the direction of your game.
This is incredibly common.
So a genre that works on a controller might not be viable on a touchscreen, might not be viable on a Wii.
That's okay.
The other thing is you need to be really serious about thinking about these things.
Controls are really important.
They're the way that we're interacting with the games that are playing.
And if you're not paying attention to it, you're really doing a disservice to all the creativity that you've put into your game in the first place.
A skilled player needs to be able to know what the input that they give to a virtual environment will do before they see it.
Just like when you walk down the street, you don't hope that you're not going to fall over, you know.
And that's how we need to be able to interact with everything in a game.
And then the last one is once you have good feeling controls, once you have players who are confident, you need to make sure your game supports them, that it supports the strengths of the controls and not the weaknesses, that it integrates those two things well.
So this stuff isn't rocket scientist science.
Well, it's not made by rocket scientists.
And it just requires a little bit of time and a little bit of experimentation and these three things.
And when you get it right, there's nothing better because your controls become invisible.
And instead of concentrating on your controls, players concentrate on playing the hell out of your game.
Also, these are good points for being a good human being.
That's totally unrelated, but I think it's important.
OK, so thanks.
That's my talk.
