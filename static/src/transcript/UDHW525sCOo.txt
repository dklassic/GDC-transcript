My name's Jamie Windsor.
I'm a team builder, a designer, an engineer, and I'm also a founder of a company called One More Game, along with a really good friend of mine, Patrick Wyatt.
One More Game is an independent Seattle-based studio.
We're currently self-funded.
We started this about in early February.
So we haven't been at it very long.
But Pat and I have been making games.
on and off together for about a decade now.
And although we haven't made an announcement, we have a website that's public.
You can check that out.
But we've been pretty quiet so far.
But why I'm here today is to present a framework or a tool or a process that's the center of our incremental and iterative development process.
I didn't always develop this way.
I thought I did, by the way.
But.
it turns out that I wasn't being as iterative as I thought I was.
So let me give you some background about a problem I had, which led me to the solution that I'm going to be sharing with you today.
So I worked on a game for about two years that we pushed into early access.
It was called Moonrise.
It was a mobile game, but also on PC, Mac OS, and it was one of the first experiences that I had where I could play a game at work, get on a bus, play it on the bus, get home, play it at home, do the same thing the next day on the way to work and then play it at work.
I love this game.
We worked on it, like I said, for about two years, and at its core, I knew it was something that was really fun.
But, obviously, we had to make some changes because it wasn't landing the way that we thought it would land with our players.
This was after about two years of development.
So we continued to work on the next big release.
We prioritized a bunch of features.
And as we would develop them and release them, we started to realize we were prioritizing things the wrong way.
Or the players that we had, they weren't really accepting the things that we were developing.
We were building something off of a design doc or something that we thought we needed to build, but as we released them, they were just not landing with people the way that we thought they would.
Eventually, we had to cancel the project to work on something else that we had in the pipe.
But that experience really stuck with me.
How did we get there?
We were building something that I personally loved, and I was sure people were really gonna enjoy, and my coworkers felt that way as well.
And this was a team that, I never worked with anyone better than this before.
It was only after the project shuttered that we started to talk about what went wrong.
We started having conversations about it pretty much daily.
And we all wanted to figure out at the root of the problem so that we didn't repeat that again.
So I know this is a red flag today to wait that long to start talking about where something went wrong.
I mean, I knew it back then.
I just kind of was in my formative years of my career.
And I instead opted to listen to the people around me that were more experienced.
And when we got together in groups and we started talking together about the problems, we started realizing that people had different ideas of what we were building.
On the surface, they all understood we were building this mobile creature battler.
But then you start to get into more details.
And like, for instance, I might think this is a competitive game.
And then some other players might think, developers may think this was more of a story-based game or was more of a casual game.
And then you start thinking, well, our audience seems to be everyone.
So, let me digress for a quick second.
Who here has heard of the broken telephone game or played this when they were a kid?
Right, most of the audience.
So, for folks that don't know, the telephone game is when someone starts a conversation and whispers it into another person's ear.
and that person says it to the next person, and so on and so on.
And eventually you get to the last person, and like this picture shows, the first person said peas, and the last person thought they said fleas.
Turns out this game isn't just something we played in the schoolyard.
It's also an important learning experience about how conversation works.
When you encode a message into someone else, they decode it, send it to the next person, and it's lossful, like as if I saved an image many times over, right?
you end up with something like this.
This is Cake Rex.
If you guys have never seen this before, I'm probably completely late to the party on this, by the way.
But this is when somebody calls a cake shop, says what they want, and then the person encodes it into a message, hands it off to the artist that's putting the cake together, builds it, and then you end up with something like this.
Best wishes, Suzanne.
Underneath that, we will miss you.
Well, clearly they meant that, but not exactly like that.
Or this one, happy birthday, just happy birthday.
Right, it's a perfect explanation, right?
So if I have an idea in my head and I describe it in writing, when you read it, you might possibly imagine something completely different.
But when I ask you, you'll say, oh no, I agree.
So for my team working on Moonrise, we basically knew what we were building because we were reading off of the same document.
I felt we had a good grasp of what we were building.
Everyone's the hero of their own story.
So of course, the game that I thought we were building was the game that we were building.
And we were effective at building this thing.
It's coming out.
So I didn't understand that there was a problem.
And it wasn't that someone was wrong.
It was that we weren't aligned.
And we thought we were.
That's the biggest problem.
This is because written instructions can be surprisingly hard to internalize and execute upon.
Shared documents are not shared understanding.
They're simply a shared document that everyone can read from.
If you read from that document, I could even ask you, do you agree with me with what's written here?
And you may say, yes, we all agree.
However, if we get together and talk one-on-one or in a group, if we use pictures, images, any visual representation where we can move things along and we can start to map out each other's ideas, we may realize we are on completely different pages.
So if you look at this picture right here, you'll see a group of people, oh, I'm glad we all agree.
They all agree that we're working on a shape.
But then when you draw it out, you realize, oh, I'm building a square, you're building a circle, and you're building a triangle.
getting together and talking about it and visualizing those things will actually get people on the same page.
And you may feel like this was an exercise that cost a lot of time and money because meetings are expensive, but in the end, it sucked that we weren't on the same page, but it's better now that we are on the same page and we are sure moving forward.
So from this experience working on Moonrise, I realized that an all-encompassing dev bible was basically an artifact of waterfall development.
We all said we were building in an Agile methodology, but we were only doing it in name, pretty much.
Yeah, we took certain processes from the Agile manifesto or from things that came after that, but in the end, we were completely misaligned, and we just weren't prioritizing the things that we really needed to prioritize.
And the more we detailed in that document, and the bigger the team that got, the bigger the team got, the worse the problem would become.
So it's because of this that I like to think of design documents instead like photographs or vacation photos.
Instead of writing an 80-page design doc, write something that defines a story that you can then tell everyone else.
So if I show you this picture, you just see a picture of two people.
You might recognize that I'm one of them, because I don't have sleeves on, right?
And it's a lifestyle choice, OK?
So this is my girlfriend, Wonder, and I.
And we're at the top of a pretty big mountain in Washington.
I'm from Seattle.
I live there now.
And this was a day, a long day, after riding dirt bikes.
And she's never ridden dirt bikes for the first time.
And she agreed to do it, even though it's not her thing.
And the dirt bike was too big for her.
And I don't know how she was able to do it, falling off, getting back on, going up trails that I thought were difficult.
And You know, as I look at this picture, I can tell you this whole story.
I can tell you that earlier in the day, my friend almost flipped a 4x4 in the parking lot and then wasn't allowed to drive a motorcycle that day.
I can also tell you that my birthday almost got canceled because we showed up and none of the motorcycles worked.
So we had to float a river that day, right?
Anyway, the point of this is to tell you that a picture exists so that way you can remember the things that happened around it.
And I think that's the way that your documents should work.
You shouldn't try to encode all of your intent, especially if you're developing something that might come out in two to four years.
What you really want to do is just have an open framework with the ideals of what you're trying to accomplish that everyone can get around and talk about and have conversations about so they remember why they're building it.
You also want to design with now in mind.
So if we're not writing design documents, which exist out for four years or so, think about the first three months or the next three months, I should say.
Live now and not later.
The more you try to predict in the future, the more you're probably going to be wrong.
If you're trying to land a rocket on Mars, there's a lot of conditions that need to happen before that lands.
And it's an extremely difficult task.
You don't need to be the most skilled developer or producer or engineer or artist to be able to just predict the next three months.
The longer you predict out, the more difficult it becomes.
So I like to use something called the now and later model.
What I like to do is think of the world as it exists today.
And who are the people in that world, and what are their problems?
Ultimately, your job is to change the world.
I even stutter as I say it, because it's pretty lofty to think about.
We're game developers.
We make things that are fun.
We don't make toys.
We make games.
But still, the idea that you're changing the world should sit in.
You are.
You make something for the people today with the problems they have today.
You have ideas about how you can solve those problems.
You output a solution into a release.
And then you look at the outcome.
Did I deliver on the intent that I meant to do?
Did I make the player feel the way that I wanted them to feel?
Did I deliver the experience that I set out to change?
If you recall, I told you more about my experience playing at work, getting on a bus, and getting to work.
That could be any game.
That, at the time, was a thing I had never touched before.
So it really imprinted on me.
And it was a thing I really wanted to accomplish with this game.
If you go through this process, you might realize that there's all kinds of products you could build, all kinds of features you could build, all kinds of enhancements, and together as a group, you'll end up ideating and figuring out what those are.
So starting from that point, I encode these ideas into something called a product framing doc.
The product framing doc is existing to answer these five questions.
The why, which is the background required to explain the rationality initiative.
This might include market conditions, the competitive landscape, historical context.
The proposal, this thing frames the scope of the initiative at a high level.
It's important that it's at a high level.
It provides enough detail though that it's clear what the initiative seeks to achieve for the player.
And then players, these are the people you're building it for.
And I like to make sure that we have two sets of groups.
One is the beachhead, or the early adopters, because they have different behaviors than your later adopters or your normal players.
You may be going for the larger market, but you need to pay attention to who's going to play in the beginning first.
If you don't get early adoption, you don't get later adoption.
Makes sense.
The next is outcomes.
Why are we doing this?
What is the point of putting any of this work in?
And the last is metrics, which is ways to prove that I achieved the outcome that I meant to, and they must be measurable.
They can't be vague.
They have to be actual numbers that you might put up on a dashboard somewhere, some way to communicate with everyone else to say, hey, we actually accomplished what we set out to accomplish.
You can do this any way you like, but I like to use something called an opportunity canvas for this.
An opportunity canvas will act as a center point for all the conversations that we're about to have.
In the technique that I'm going to show you later, I bring an opportunity canvas to a user story mapping session.
It's how I align people around who we're building for and what we're building, and also align people around what our business's goals are.
This is an exercise that could be a talk all of its own, but I'll talk really, really quickly about why I use it to frame my conversations.
So I know this looks like a mess at first if you've never seen it. The numbers represent the order in which you would do things.
So you start in the center, and then you go to box two.
Each one of those boxes, this is probably difficult to read, by the way.
You can get this off of Jeff Patton's website.
If you just search for Opportunity Canvas on Google, it'll come up.
Don't do it right now, please.
So the important part of this is it looks like chaos, because it's not for encoding, it's for decoding.
When you go through and read it later, you can read it left to right.
And left represents the state of the world today, and right represents the state of the world later, the now and later model.
The top represents users, while the bottom represents the business.
So in the upper left, I can talk about the state of the world for our players, whereas in the bottom left, I can talk about the state of the world for our business.
Like I said, you don't need to use this exact thing.
I recommend it.
But the most important thing is, regardless of how you come up with your product framing doc, that it's flexible.
Requirements are a really hard word.
They're absolute and people will take them as a must-have.
And really what a requirement is, is just ideas that you have about how to change the world.
Again, really lofty, but that's it.
We often built things in Moonrise because they were requirements set down to us.
And we would build them in the order that we were told to build them in, sometimes by our publisher or sometimes because even experienced people.
I was experienced enough on my own to say, I need to build this next, but did we really need to build chat right then?
I'm not sure.
So you have your product framing doc.
The next thing that you want to do is get together as a group and tell a story to each other.
When you do this, you'll find out that, one, you're going to get a bunch of buy-in from people.
Because they're going to interact.
They're going to collaborate.
Unlike this room right now, where I'm broadcasting to you, if we sat down in a circle, we could share ideas.
And when you share ideas, you can get people really excited about what you're building.
If we do x, we'll get x.
And you get a diverse group of people together.
You want that because you have blind spots.
So if I had a grand vision.
I'm going to be wrong simply because I'm only a 34-year-old tall white male who played Quake back in the day and then World of Warcraft.
I'm probably going to keep trying to build the same thing unless I had people around me that could fill in those blind spots.
So when you get together and tell a story, you also ensure that people know that story and they can share it with others on the team.
So this is the lead that I've buried.
You're here to hear about user story mapping, which is how you tell that story.
This is a tool that I picked up from a guy named Adam Jacob, who's the CTO of a company called Chef Software.
He's a great friend of mine and also a huge influence.
I took a break from games for a short period because I wanted to know what went wrong on that product that I built.
I didn't think I was going to get it at the place that I was at.
So I left.
games for a short period of time, about three years, to go work in enterprise software, a startup that builds enterprise software, so I could go sit in larger enterprises to figure out how you solve problems for people that big.
From that, I met Jeff Patton, who wrote this book.
And this framework was given to me as a way to align my team building a next generation piece of software for that company.
It changed the way that I collaborated with the team, and it changed the way that I thought about solving problems.
So I'm going to give you guys a mock version of this that you can bring home and try out with your teams.
It's an exercise that'll only take about an hour.
You'll only need a couple things.
So first is you need an idea for a product feature or enhancement.
In this section, I'm gonna give you a fake one, which is a morning routine.
You need a whiteboard, you need some markers and sticky notes, a timer, and a group of engaged minds.
People that have an open mind about trying new things out.
Don't bring this to somebody that's process-averse, for example.
Not at first.
So we're gonna build a product frame, sorry, we're gonna build a user story map around the product frame of building a morning routine.
I choose this because it's something everyone knows how to do, and everyone kind of does it differently, which helps illustrate a point.
So the first part is an initial brainstorm.
Grab everyone, put them in the room, hand out sticky notes, hand out markers.
Ideally they're different colors, so that way people know who wrote what.
ask your participants to write the activities that they have from when they wake up all the way until they get to their desk at work. Whatever detail they like, one activity per sticky note and then set a timer for five minutes. When anyone's done writing on all the sticky notes, they put the marker down and they just hang out for a little bit. When the timer's up, ask people to put down their markers if they haven't and then use a system called Fistify.
A 5 is where you raise your hand and then together you reveal a 5, a 1, or any number in between.
A 5 is I'm good.
A 1 means I need more time.
And then you kind of look at the room and gain a consensus.
Okay, we need some more time.
Set the timer again.
If not, everyone's a 5.
Keep going.
And do it as long as the group needs.
If there's one person that's holding a 1 and they keep doing it, just ask them, do we really need more time?
and then keep on going if the answer's yes.
But we use this so that way one voice in the room doesn't plow through everyone else.
Like if you do this with your CEO, you might look at him and he's like, no, I'm good.
And then everyone's like, oh, we're good too.
So that's why we use this system.
All right, so once you have all the stickies written, each represent an activity, have one person go up to the board and put each sticky note up in chronological order in a horizontal line.
As they do it, have them read to the room and tell the story about what their morning routine is.
Have the second person go up, and again, chronologically.
And they put it in their order.
They don't have to do the same order that the other person said.
And then below that, and then below that, and then as soon as they're done, you'll have something that looks like this.
I know this is extremely difficult to read, so here's a zoomed-in version.
And all right, I think some people can probably read this one.
If not, the top line is one person.
They hit snooze like three times before they get up.
They take a shower, they brush their teeth, they put on some deodorant.
The person below them probably represents someone that has a family or they're married.
They wake up to feed a baby and then they wake their husband up.
And the person below that is someone that's probably more concerned about their health.
They're cooking breakfast, they're going to the gym.
And this is a zoomed in next chronological order where the person on top just kind of goes to the bus.
This is clearly a bachelor, that's my routine probably.
The person below them is taking a little bit more time and then below that they're working more on the gym.
And this is the end.
The point of this was there's a beginning, a middle, and an end of every story.
And you want to make sure that that's representative from each one of the people writing sticky notes.
So there's going to be shared tasks between them, between the three authors.
And they're also going to be wildly different potentially, but reasonable morning routines.
The next step is as a moderator.
It's your job to facilitate formation of something called the backbone of the story.
And the backbone is just umbrellas of like tasks or things that could be reasoned about being of the same shape.
In a real user story map, this would be like, I log into a web page or something like that, right?
And then we would maybe say all of log in.
and that represents a bone.
Here, I've created a couple topics for this mock story map where you have hygiene, self-care, you wake up, there's dressing, breakfast, the gym, transportation, arrival.
It's important while you generate these to communicate with the group as well.
Make sure that everyone agrees that it makes sense to group these things underneath a particular backbone.
It's much easier when you're doing the morning routine than it is for other features.
So this is what the board would look like after applying the backbone.
Again, this might be a little bit difficult to read, but it's not important.
What is most important is that you can still see the chronological order.
You can see the grouping.
And it's important to note that the person that goes first typically always has the truth of the chronological order, and that's not really that important at this time.
So if somebody else eats breakfast before they brush their teeth or afterwards, they're just going to wait a second and things will smooth out.
The next step is to order these by urgency.
So now that things are in chronological story order, we then order things from top to bottom for how important they are to how not important they are.
And if we do that, you see it like this.
So through each of these exercises, it's OK for the whole group to get up and arrange the stickies themselves.
They can move their own sticky notes.
They can move other people's sticky notes.
And facilitate a conversation around it as well.
So let people negotiate what they think should happen next, or what is most important.
And then this is it zoomed in.
So these are now chronologically ordered, left to right, and importance top to bottom.
So it's no surprise there might be some discussion about what's more important.
In one of these columns it says that you have to feed a baby, and then there's another task that says you have to drink coffee.
And like your teammates might have not enough empathy to understand why one of those is more important than the other.
But there's a conversation, negotiation that you have there.
But this leads to the next fun part, which is when, as the moderator, you tell the groom that they're late for work and they only have 15 minutes to make this happen.
So you're going to put a constraint on them and say, draw a line below every sticky note, and then you have people go to the board and move below that line everything they don't believe is extremely important that they could get done within the 15-minute time.
and what you'll end up with is a board that looks like this.
Let them spend as much time negotiating and speaking with each other, negotiating, moving cards.
It's important to remind people it's perfectly acceptable to disagree, and that conflict is productive, and it's not bad.
A lot of humans are really resistant to conflict, and really all they are is a negotiation and you figuring out together what's most important.
And this is a really good time to focus on that if you're working with a team that has typically been conflict-averse or aggressive with each other.
It's most important to point out that conflict that's respectful is productive, and conflict that's not respectful is completely not productive.
So, everything above that line is going to form your first release.
A release isn't something that you always give to a player, or to show it to your CEO, or show it to your producer, or show it to your investor.
It's just something that gets the point across of what that initial outcome was that you were trying to deliver.
Everything above the line is that release and everything below is something that we care about but it's something that we'll probably do later.
So prioritizing this way is difficult because everyone has an idea about what's required that's slightly different.
And that's because those people in the room that I asked you to gather are diverse.
You may have younger people, you may have older people, married people, people with families, people with cars, people without cars.
And the most important thing is that you group, you generate some personas.
Personas are just who's going to be using your product.
In this case, who's going to be having a morning routine.
So with our new goal of get ready in 15 minutes, we're going to determine that we have bachelors, we have married people, people with kids, coffee drinkers, physical fit types, breakfast lovers, and people with cars.
This may look different, I'm sorry, this will completely look different if you're building a real product, but this should get the point across.
Another problem here is prioritization around this.
So now we have these personas in these groups.
Who's most important?
So the old saying goes, if you try to please everyone, you end up pleasing no one.
I'm just going to tell you that Guile said that because apparently everyone on the internet has said this.
If you search for that, everyone's been attributed to saying this.
It's better to declare complete bankruptcy than to attribute it to somebody that did not actually say it.
So at this stage, encourage the group to optimize for early adopters or beachhead users.
It's just easiest for this mock setup, but that might not be always what you want to do for a real user story map.
You may have business constraints that say that you must focus on particular players, and then you'll have to work back from there.
But for now, early adopters.
And this is a good part to remind people.
It is okay to disagree.
And it's especially gonna be difficult to align people because you're working with smart, passionate people.
What is not okay to do is disagree and not commit.
But it is very okay to disagree and commit.
On a team, you have to work together no matter what, even if you do not think that the thing that you're doing right now is the most important.
Once you walk out of the user story map, everyone needs to commit to this idea and understand it's their idea as well, and they need to be productive in explaining to everyone.
Anyone else that asks what they're building, that this is what they're building.
Through these negotiations, I like to use something called the 10 scale, which is a way to help people understand how important your idea is to you.
So 10 out of 10, I'm ready to die on this hill.
So I think that we should do it this way, and there's no other way.
1 out of 10, I have an idea that I can give you, but I don't mind.
And somewhere in the middle is, I can go either way.
All right, so now that we've grouped the personas and we've talked about what's most important, we've think about who those early adopters are.
The easiest people to build this morning routine for is people who are bachelors and people who have cars.
The people to the right aren't people we don't care about.
They're just that other group, that later group.
As our product gets more fleshed out, then we can start focusing and building for them.
So after you've done this, ask the group to go back up to the board and mark every activity with some sort of color marker.
Here I used a website called Mural, and there's these icons that you can see.
Or I'll show you zoomed in in a second here.
And then if it's table stakes, it's up to you to mark it or not.
Table stakes is the most bare minimum, by the way.
So you need to wake up in the morning to be able to go to work.
So we know that has to be there and that's for everyone.
But if we look zoomed in, these are tasks that are important, but we've assigned to them personas.
So the bottle would be someone with a baby, the ring would be someone with a marriage, and we care about these people.
We just can't care about them right now, because Guile told you you can't, right?
So now if we take a look at the first milestone, we'll see a pretty bare-bones morning routine.
You have to wake up, you take care of your medicine, you brush your teeth, take a shower, or no, actually, this one you just put deodorant on.
It's even easier to get ready for your morning.
You get to work, get to your desk, but this is extremely bare bones, and like I said, this is just the first release.
Everything below that line, this is what we would probably do later.
So this is usually as far as the mock user story session goes, typically this will take about an hour depending on how many people you have in the room.
This isn't the end of a real user story map though.
So I'll talk just a little bit more about how I continue to get value from this and what the next steps are if you were to use this in a real life scenario.
So from here you're gonna have a list of activities and they're gonna be prioritized.
If I go back to the Moonrise case, we may have worked for three months and our initial, you know, slice maybe is a login or not.
You know, maybe there's no back end system in any way.
You get to a menu system, you start fighting, that's slice one.
And out of those features, what we might do is identify ones that are particularly large.
And then we might break those up into smaller pieces.
This is, by the way, particularly great to watch, cross-discipline.
That's another reason why I highly recommend that you get people, your artists in there, audio engineers, programmers, producers, grab everyone that's interested.
not too big of a group by the way, because past 10 is crazy.
But put them in a room and have them start breaking things up.
And what you realize is that an engineer might have overestimated or underestimated something, because they didn't realize that they appear somewhere different in the pipeline than their peers do.
And potentially, there's dependencies that weren't known.
So as you break these up, you start assigning work to each other and estimating how long it takes.
This is a thing that normally you need done anyway.
If you're tracking work of any kind, you already do this.
Maybe you don't estimate, maybe you do.
You can leave that off as well if you're not looking into it, interested in it.
But I think this is neat how the conversation that we were having.
directly also translate into an artifact that helps me track our progress.
And then a conversation, every activity, every one of these cards is a conversation that I can have with the person that's assigned to, or we can look at it and then as a group remember the story we were telling each other, you know, walk up to a physical board and say, oh this is where we are right now, and have a conversation around that ticket.
So, with that time constraint that we placed on people, the 15 minutes, What we ended up trying to do here was looking at the state of the world, understanding an idea we wanted to get to work on time, and through minimizing the amount of output, doing the least amount of work possible, how we could have the outcome that we wanted.
And then we looked at how to maximize our impact.
Impact is the people that you change the world for.
In this case, it's small.
We looked at bachelors and people that have vehicles.
In the next release, potentially we could pull in some more features and have a larger impact.
But the key here is to deliver outcomes and ignore output.
A lot of times we measure output like velocity or burn down charts.
I just don't understand.
It's an anti-pattern.
What you really want to do is measure if you made the impact and it had the outcome that you desired.
Outcomes, a special word.
It literally means what happens when it comes out.
And output is just what you did to get it there.
Outcomes are difficult to measure though because a lot of times...
you can only measure them when it comes out.
And that's why it's important to build less.
That's minimizing output.
If your slices are smaller, you can deliver faster.
You can then measure your outcome sooner.
So in the case of Moonrise, we might have figured out before two years that what we were building wasn't resonating with the people we thought it was gonna be resonating with.
If instead we had been delivering much more rapidly, maybe not to a complete audience, but to user research groups and more regularly, we might have figured out that we were just not building the things that our players wanted.
This is why that metrics point is so important on your product framing doc.
You already predefined that in the contract that everyone agrees upon, we want to do this thing.
We want to have this outcome.
And this is how we're going to measure it.
It's all part of the framework.
And that's again why I like to use an opportunity canvas, because it presents a wall in your office that you can take anyone to and walk them up to it and say, this is what our vision is at a high level.
Another thing about building less is there's always more to build than you have time or resources for. There's countless numbers of features that you could build, countless number of enhancements that you can come up with, and there's a lot of different types of players.
So you could try to build something that satisfies everyone and it's just a billion dollar game, but more money and more people don't equal a great product.
What we're attempting to do with this incremental approach is deliver something I like to call a minimum viable solution.
A lot of people in this room probably have heard of a minimum viable product.
The reason I don't like to use product is because the idea that you're going to deliver in a completed product means that there's room for somebody to say, it's just not good enough yet.
A minimum viable solution focuses on the literal minimum amount of work that we can do to achieve the outcome that we said we wanted for the people that we said we wanted to deliver it to.
So in this iterative approach, what you want to do is make things useful from the start and better at each stage.
So you can see that the story had a beginning, middle, and end of our user story map.
It was small.
It was short.
And granted, I didn't even take a shower in it, right?
But you could do it.
It accomplished the outcome.
You got to work under the constraint.
I like to use this diagram.
By the way, I didn't make these.
This is from Jeff Patton.
This is part of the book.
And these resonate extremely well with me.
So in this scenario, you were set out to build a car.
And if you look at the top, people built it in pieces, complete pieces, the wheel first, and the axle, and the wheels, and then the car, and then the hood, and the car.
And the first three stages, the person wasn't happy.
But if you look at the bottom.
This person thought about the outcome, which was, I need transportation to get somewhere.
Now, a skateboard might not be unbelievably useful to somebody if they have to go on a highway.
Like, you can't skate on a highway, right?
A scooter might be more useful to somebody if they have maybe a mile or a two mile long trip.
And then slowly you iterate to the bicycle, the motorcycle, and then the car.
And the point here is that at any moment, you can release and see if it accomplishes your goals.
You also might realize that you never needed to build the car.
You thought everyone wanted the car, and then you deliver something, and really all you ever needed to do was build a bicycle.
So you don't waste.
You create less waste by following this methodology.
In each one of these releases, each one of these milestones.
Treat it like an experiment.
Do the least amount of work that you can, have the metrics ready to measure the outcome, and then try to learn from that release.
I'm sure some of you here have seen this diagram before.
This is the validated learning loop.
So you build your minimum viable solution.
You measure that minimum viable solution against a group of people.
Maybe it's external.
Maybe it's internal.
Maybe it's your QA folks.
Maybe it's friends and family.
Then you take that data and you learn from it.
You look at it and say, are we still doing what we should be doing?
Avoid a flat backlog.
Don't let somebody tell you, here's what we're doing for four years.
Because I guarantee you, if you have a release and it takes you three months to get it out, you're going to learn so much from that that the ideas that you had three months ago are no longer good.
Or only some of them are.
Or they're still good, but they're not good for right now.
That's why all of these documents are mutable.
You can change any one of them, even the product framing doc, even the opportunity canvas.
You can just burn it, make a new one.
Because you learned from outputting and measuring the outcome.
So using user story mapping, you'll end up building with an incremental strategy.
This was a strategy that I was looking for when I was building Moonrise.
I wanted to know why my product was failing much earlier, or I wanted to know that it would fail so that way I could prevent it from happening.
Had I known that it was going to fail, we wouldn't have run out of runway.
We would have iterated and pivoted and worked on different features.
This solution, this tool, this framework to get people together was exactly what I was looking for.
One of the reasons I really appreciated it was there's an actual book that you can give to people about this.
You can get on a stage and tell people about it and tell them to go read about it.
We could go out in the hall after this and anyone here could come up with a feature and we'll do a user story mapping session about it.
It's really easy to get to do.
So building software, especially entertainment software, is a big task.
It takes a lot of time, sometimes two to four years.
You could theoretically be waiting quite a while before you can measure an outcome.
It's because of this that you shouldn't aim to complete things step by step, or complete things in a way that a gif would load in the mid-90s.
Instead, think of how Van Gogh made the Mona Lisa.
He set out to have an outcome of painting a picture of a lady, a fine lady, right?
And he sketches it quick, fills it in, and the whole way you can kind of see the picture.
And because of this, it's also a place that people can gather around.
Imagine this like a game.
You know, you don't have the entire thing in place.
There's a bunch of debug text or, you know, the UI is not right, or, you know, you're using other games artwork temporarily, whatever it is.
But you can still see the vague picture of what's going to exist in the end.
I guarantee you, if you do it this way, you'll have less waste.
So if I bored you through this, or if you're scrubbing through at home, I hope you hear just this part in these next couple slides.
The reason I continue to story map is, like I said, it has a book, and I can teach it to people.
But it resonated well with me because it's around building teams, and it's around aligning under a same goal.
It becomes let's build our game, and not let me build your game.
It also makes sure that you produce less waste.
You just simply build less when you use a method like this.
And because it's a framework, everyone can agree upon it.
There's no thought about what you should do next.
One, the most important thing that it does for me is it tells me exactly what I should build first.
You basically pick out what the table stakes things are, who the people are, who are you building it for, what do they expect, and then what you should build next.
It also gives you a space, like codified into your culture, about bringing in alternate points of view.
So instead of the programmers all getting together and solving a problem in a way that programmers would, I can say that by the way, because I'm a programmer.
You pull in other folks and hear how they would solve it.
You start understanding what their problems are.
And then you start empathizing with those people as well.
And it makes you more inclined to want to help them and have less arguments about who's right or what vision's appropriate.
If you fill in the blind spots that you have, if you bring in other ideas.
The third is that buy-in.
I had said this a couple times.
We're building our game.
I'm not building your game.
Nobody wants to just build your game.
People want to feel like they have purpose in the workplace.
And your product will have more soul if there's more ideas in it.
This wasn't part of the talk, but I actually want to give a small analogy about why diverse minds are really important in a room.
So, Apple designed a glass staircase and they put it in one of their stores.
It was summertime.
And they were wondering why the second floor just wasn't getting used, or why particularly demographics were not going and buying things on the second floor.
What they found out through polling people is that they put a glass staircase in summer in a place that gets warm, and then women didn't want to use it because they walk up a glass staircase and there's people standing under it, potentially, or kids standing down there, right?
That was an idea that a particular set of minds had, and yeah, it's cool, but if other people with other ideas were in that room, they would have probably never had that problem.
That is a very visual representation of something I keep seeing when we're building games and only certain minds are in the room.
The last thing, and this is pretty much the title of the talk, is that I keep using user story mapping because it helps me build a shared understanding with people.
This takes time, and it could be someone's sole job to make sure that everyone, every day, understands what we're building.
But it's better than finding out two years into the development process that everyone looks like they understand what they're building.
That's more dangerous than not knowing, because if you don't know, it's a lot easier to correct you.
But making this part of your process codified in means that I guarantee you in two years, you're not going to ask people, hey, what are we building?
And they all have different ideas about who they're building it for and what they're building.
If you get nothing else from this talk, understand that stories aren't a written form of requirements.
This isn't a way that you now describe to people what they must do.
And stories aren't the requirements.
These are just conversations that we can tell each other in chronological order in a way that we can arrange them visually in a place that we can go have conversations about each task or activity.
Stories encourage those conversations, those interactions and questions, which lead to better understanding.
A map is literally just how you figure out, let me do this one more time, how you build a map.
is by finding the edges.
And that is the same way as solving complicated problems.
Find all of the edges, agree upon the edges, and then let people fill that space with the solutions.
So here's some resources if you want to do this on your own.
Mural.co is the tool that I use to generate those slides with the sticky notes on them.
I've worked on remote teams before, and I've used that quite a bit in lieu of a physical place that we could get in a room.
I do highly recommend getting in a room, though.
There's three levels of communication that I escalate through.
One, text.
Is it quick?
Is it not going to hurt your feelings?
I'll send you a quick message.
Two.
voice. Can I convey that I'm not being a bad guy by giving this information over voice?
And then the third is video or in person, and that's when you're really going to have potentially conversations that have conflict. Anyway.
The next is Jeff Patton and Associates.
That's his website.
Literally, I wouldn't be up here talking about this if Jeff Patton hadn't come up with these ideas, written about them, come and presented to them.
So I have a lot of thanks to deliver to him and Adam Jacob and the other developers that I worked with at Chef.
So again, I'm Jamie Windsor.
You can see me on Twitter there, and that's my email.
I really appreciate everyone coming, and thank you to the AV team here and the staff helping me out.
I hope you guys have a great rest of your day.
But before I let you go, we got 10 minutes left.
First, I'd really like to ask you guys and gals to please rate the talk if you can.
Negative feedback, positive feedback, it doesn't matter.
It's very useful for us.
And next, if anyone has any questions, we can do a Q&A.
Hey, how's it going? Great talk.
Thank you.
Can you do me a favor and just say who you are and where you're from and that's it?
Oh yeah, sure.
My name is James, I'm at Adobe.
And you talked about the diverse people in the room, and the example of how everyone gets ready for work is great because everyone has a very similar experience like that.
But when you're talking about a product feature or a product in general, you're bringing engineers, you're bringing designers, you're bringing whomever that might be in there.
How do you balance out the product requirements and you being the product person and knowing that there's a vision based on your expertise and user understanding versus...
what an engineer is gonna bring and how do you kind of include them in those talks but at the same time keeping it focused on what you know to be the direction and path you want the product to go in?
Absolutely.
Okay, so because that's recorded, I'm not gonna repeat the whole thing back.
But the idea is how do you align other people with a vision instead of letting it kind of get off the rails, right?
Okay, so.
That product framing doc or an opportunity canvas acts as a contract.
Just be welcoming to people and say, hey, this is the problem we're trying to solve.
People love solving problems.
I think that's why people play games, by the way.
Literally, games are just problems that you're solving, right?
It's the difference between a game and a toy.
And engineers really like solving problems too.
So if you show them the state of the world and say, how can we fix this, and this is the outcome that I want, it's going to happen.
It's very rare.
You have to have a very particular cynical type of person who's like, fuck that data.
I completely disagree.
Oh, shit.
Sorry.
Again, too.
Those are my elements.
Yeah.
Aligning people around the problem and getting them excited to go do it often will just kind of cut it off at the head.
But it's true that games are subjective and that is where you, I use that 10 scale quite a bit.
Like look, we all have to be reasonable here.
I hear you like it blue.
We're gonna go with red for a little while.
Always try to have metrics though that you can fall back on.
Thank you.
Yeah, no problem, thank you.
I'm Alfreda from Wizards of the Coast.
I'm just curious how you either modify this for larger teams or figure out who the most important 10 people are to be in the room, because you said a limit of 10.
Yes, that's a great question.
So I like to limit these to about 10 to 12 people.
And it's kind of hierarchical.
So not hierarchy like how important you are or what your title is.
It's just people that are excited or interested, people that have free time right now, people that agree to the team contract that want to form a core team around, a core team around that vision.
They wanna deliver those outcomes and then slowly break it out even more.
So that was one board and it was like hard to fit that on a slide.
What you're gonna end up with is all of your walls are gonna be covered in this if you really adopted it.
And you have teams break off and build features.
And then you kind of just set a larger hierarchy.
And someone's a product owner, or a producer, or a product manager, or a product line manager.
And it's that person's job to make sure that communication's flowing between each team.
The core group, say you were building a brand new product right now, limit it to 10, and then as you're doing the rock breaking process, start realizing there's epic tasks that you can then give to other teams, and then form another 10 person team around it and say, this is the problem that we're trying to solve for this, are you guys ready for this?
And gals, are you ready for this?
And if they are, they'll get excited and they'll start doing that as well.
Anything more than 10 is chaos, in my experience.
Thank you.
No problem.
Hi, Annie Vandermeer, Mitsoda Systemera.
As you know, it's an unfortunate truth of our industry that there's a lot of turnover.
How would you adapt this methodology when there's been turnover and you're trying to bring on a new person in an onboarding process, especially somebody who might be in a higher sort of level, like a lead has been replaced?
Yeah, that's tough.
But if Everyone has the story and everyone knows how to, and it's lofty to think everyone will, by the way.
You can't have only one person holding that vision and being more near the center.
Or as you go out in a layered approach, you can't have just one person being able to carry the torch at that layer.
But.
I don't find that, or it has not been my experience, that I've lost one person and then the entire project couldn't be completed.
And it's mostly been better because it's more distributed in this way.
One of the things that it has helped for onboarding with, no one goes and reads a wiki article that was written two years ago, which is completely out of date now, and then has a different idea of what we're building.
Instead, they can look at that photo, that small thing, and then they have a bunch of questions about it.
And then they get the more up-to-date information by chatting with people in the room.
Is that satisfactory?
Is that OK?
That is totally OK.
Thank you.
Hi Jamie, thanks for the talk.
I'm Nicole from Zynga.
I like your reference of design documents are like photographs.
So after this process is concluded, what do you recommend teams actually do document?
I would use the product frame or an opportunity canvas as that photo.
The most important things, like I said, at the kernel are what you want your outcomes to be, why you're doing it, who the people are, and the metrics to measure it.
But from there, you're going to be creating entertainment software, right?
and then small slices about describing that feature.
And again, you can product frame features.
You don't have to just product frame the product.
You could then go along and say, okay, this is this particular system.
We're building a...
a card game and I'm trying to figure out a particular mechanism for cards, how we deal or how we manage with resources.
And you can have a smaller version of that for just that feature team.
Thank you.
Absolutely.
Hi, my name's Kyle.
I'm from Codemasters.
And I'm currently trying to work out how I word this question without sounding like a crazy person.
So in the example that you gave, you were highlighting commonalities in the backbone.
Do you also go through a process of if there are, say, users that have diametrically opposed opinions or ideas, do you highlight conflict as well?
And then if you do, what do you then do with it?
Yes, absolutely.
That does happen, especially more when you're building entertainment software, right?
Those are must-have conversations.
And then it's really important that there's another party present who isn't one of the people with that idea.
So as a moderator, you shouldn't take a side.
Hear each side out.
And then as a group, let the group try to figure out what they should commit on.
If you, as a moderator, know that.
the thing being suggested is gonna be a tire fire.
You should then be like, hey, I'm 10 out of 10 on this, man.
I really don't think we should do this.
Is it okay if we don't do it right now?
And by appealing to that person who has the completely opposing idea, a lot of times they're pretty reasonable, as long as you're in person.
If you do this over text, it ain't happening.
Thank you.
Absolutely.
Hi, I'm Andy Martin with Moonlight Games.
I get in meetings all the time with our executive staff where the meeting sort of ends in I understand or I completely agree.
And instead of really meaning I completely agree, it's just kind of a way to table the topic.
Do you have any ideas of how to solve those types of problems?
Yeah, don't put people in meeting jail.
Make sure meetings only last a certain amount of time.
I use 25 minutes and 55 minutes, because I like to give people five minutes in between to go to the restroom, or I just need time sometimes to sit there and think of nothing.
But don't keep people in a room much past that, because they will tap out.
And then you'll only have the ideas of the people with the longest endurance for putting up with meetings.
So do use a story mapping session.
If you don't complete it, it's OK.
It's all on a board.
Come back the next day.
And keep checking with people.
you know, check in with them, ask them if they like it.
Don't do it in front of everyone else, but pull them aside, say, are you finding value in this?
And again, if they're not, but you're a nice guy, a lot of times people will, there's a social currency that goes with it, you say, can you give me a little bit more time?
But don't let yourself get burnt out in a meeting and make a policy that if you're not finding value in it, you can just walk out.
Cool, yeah.
All right, I think that's it.
That's time as well.
Thank you everyone for coming.
I really appreciate it.
