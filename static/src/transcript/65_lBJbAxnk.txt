Hi, it's great to be here.
Good morning.
I appreciate everybody coming in here.
I know you have a lot of options here at GDC and we really appreciate you coming here for the bootcamp.
So I'm Brian Moss.
I'm the lead technical artist at Zern Affinity.
Today I'm gonna be talking about running the Halo multiplayer experience at 60 frames a second, a technical art perspective.
I'm gonna give a brief overview of how we kind of run performance at our studio and a couple of the tips and tricks we use to hit 60.
Okay, so who we are.
Certain Affinity was created in 2006 with the goal of creating innovative, top-quality action games.
We were founded by Max Holbermann, who was the lead multiplayer designer of Halo 2.
Once he finished his work on Halo 2, he decided he wanted his own studio.
So he traveled on down to Austin and started out with four guys.
Now we're up to 100-plus employees.
Since 2006, we've actually had the opportunity to work on quite a few games.
Everything from Left 4 Dead, multiple versions of Call of Duty, multiple versions of Halo.
We've done a few IPs, Age of Booty series, Crimson Alliance.
Now, we are primarily a focused multiplayer studio.
What that means is we actually primarily do the multiplayer.
We get contracted out by lots of studios to actually work on multiplayer.
We're a co-development studio.
And that means we're not an outsourcer.
So we don't get contracted to, let's say, create a thousand widgets and then hand them off and somebody implements them.
We actually work inside our partners' tool sets.
excuse me, work inside our partner's tool sets.
We actually work inside their servers.
If their artists use Maya, we use Maya.
If their artists use Max, we actually switch all our artists back over to Max.
It's a very fun experience.
The responsibilities of what we do depend on our engagement.
Sometimes we'll actually have a project that's only a couple months, and we'll work on some multiplayer design.
All the way up to working several years on an entire multiplayer engagement Everything from level design technical art shaders tools You name it will do it all it depends on what our partners really need We like I said we embed ourselves and into their tool chain pipeline.
Their process is really kind of a foundation of what we do.
Sometimes we're actually able to add our own layer of tool sets on top of it.
Sometimes we can't. Sometimes we'll actually be able to rewrite all the shaders in the multiplayer.
Sometimes we can add new exporters for Maya.
Sometimes we can't.
There are projects where we literally are stuck into exactly how they like to work.
And that's just kind of one of the strengths of Certain Infinity, one of the things we do.
A little bit about our staffing. We're really art focused. We've got 56 artists on staff.
Past that goes from design, engineering.
We're mostly senior artists. We have a lot of senior talent.
I think our average time in the industry for artists is eight plus years.
Some of what we consider our junior artists are actually like three to four years in the industry.
So...
wow, that's a lot of fun, most of the times, you don't actually have to teach artists, like, hey, this is what a texture map is.
You know, this is how you normal map something.
They're very talented people, but they like to have their pipelines set up in a very specific way, so supporting them actually takes a little bit more effort.
Okay, so TechArt Responsibility is the CA.
We have five full-time technical artists.
We each have our own specialties.
We have some guys that like to write shaders.
We have some guys that just love to write tools.
Some guys are performance.
We'll do a lot of general tool creation scripting, depending on the project.
A lot of what we do is actually tip of the spear work.
So when we get a new project, we'll actually try to fly out the technical artists.
and embed with our partners anywhere from a day, two days, really until they actually kick us out and make us leave because we're eating all their donuts and coffee all the time.
So we need to get as much information as we can of how they like to run their pipelines, all the way to what is broken in their pipelines.
We'll actually spend a lot of time on something just to realize, oh, wait a minute, that doesn't work.
That UI didn't get updated.
That feature was deprecated three versions ago.
So talking with our artists and producers will actually help us save the time of finding those mistakes.
We also do a lot of graphics work.
We do a lot of visual development for our art directors and our artists.
We do a lot of shader writing.
Of course, performance news is not what we're here to talk about today.
Okay. Halo.
Back in 2013, we got the call and said, we want you guys to do more Halo work.
And we love Halo down at Certain Infinity.
So this Halo project was actually going to be pretty exciting, because we knew this was going to be for the Xbox One.
After spending so many years on the 360 and the PS3, the thought of moving to next gen was really exciting for artists and people, really jazzed to work on this project.
So, we found out that we were going to be doing a sort of Halo 2 anniversary for these levels.
We're going to be doing six level remakes.
Also for the first time we're actually going to be taking over a lot of the sandbox work.
Now sandbox, that's what we do, anything that has to do with the characters, weapons, vehicles, modes, we got to create a few new modes, really kind of sink our teeth into it for the first time.
We got to help getting dual wielding working for our part of the game.
Now, as this project kind of snowballed into something bigger, into the Master Chief collection, lots of studios around the world actually ended up working on this.
So I'm really going to kind of concentrate on what Starter Affinity developed and put out for this game.
And of course, it's for Xbox One, and who doesn't want to work on that?
As with any project, you actually are going to have a few surprises in the beginning.
Well, the first one we were hit with was, you know, we were going to have to run at 60 frames a second.
That was non-negotiable.
Now, me, I'm a performance guy, I love 60 frames a second.
I think it just feels better.
I mean, as a shooter, of course, you run it at 60.
It's just such a smooth experience.
And Halo's never run at 60 before.
It's traditionally a 30 frames a second game.
And I've always wanted to run it at 60, and I was really excited about it.
Most of the artists were terrified We also found out that the next-gen engine and toolset was going to be developed off-site We were half excited and half kind of dismayed when we found this out.
Some of us really kind of wanted to upgrade the engine and really be able to add our own spin to it. Other people were kind of ready to kind of let it go. We wanted to focus on the work that we had to do because we had a lot of work to do and we only had about seven to eight months to do the project. The engine was actually developed by Ruffian Games. They were just amazing guys. I just love working with them. They're really, really great.
So what do we do now knowing these two things?
So we started doing our initial planning for this part of the project.
So we knew, okay, we need to hit 60 frames a second.
It's got to hit, it's got to ship on Xbox One.
And it's next-gen Halo, I mean, it's got to look fantastic.
If it doesn't look fantastic, I mean, we don't want to let you guys down.
So, shipping on the Xbox One.
So, with the engine being developed off-site, and we didn't have any Xbox Ones yet, like, what do we do?
Well, we had to start working on the Xbox 360.
We developed a plan of how and when we were going to get the transition.
According to our partners, we were going to get the engine somewhere halfway through development, so we were going to have to start developing on the 360, transition to the Xbox One, ship it on the Xbox One, and hopefully run at 60 at the end.
Constant communication with the engine team, that was really pretty crucial.
We had weekly phone calls with them.
We were in communication by email.
Anything that they needed or we needed, we were right on the phone, right on top of it.
It was really pretty great.
They helped us out knowing exactly what was working and when it was going to be working.
And also what was broken.
Some things they didn't think they were going to be able to fit in the timeline.
that was really pretty crucial because if we were depending on a certain kind of process to actually get these levels working and looking as good as they did and it just wasn't going to ship that would have been disastrous.
We would have been really struggling at the end.
These look amazing. So we didn't have a lot of control over the base engine. It was developed off-site.
What we did have control over, we actually, this was the shaders.
So we decided to go to a full PBR system.
And Luis Gruel is actually speaking right after this, and he actually rewrote all of the shaders to use the PBR system.
So please stick around, check it out.
I didn't want to put any screenshots in here, I didn't want to steal any of the thunder, but he did some really pretty amazing things.
So, check it out.
Okay, so we need to hit 60 frames per second.
We immediately started development on the Xbox 360.
The upside to that, it was a known pipeline.
We've been done a lot of work on the Xbox.
Our team was very familiar with the tools, very familiar with the processes.
We had the levels up and running within a week, I think, and just really started putting a lot of the content in the game immediately.
We started also planning to see what our 60 frames a second budgets would actually look like.
So, I had a couple slides in here talking about milliseconds and I kind of ripped them all out.
Basically, a millisecond is a thousandth of a second.
And when you're talking about 60 frames a second, you have 16.6 milliseconds per frame to work with.
And that's it.
That is not a lot of time.
Although when you start working with performance, a couple of milliseconds will actually start seeming like an eternity.
An artist will check in an object, and in a way, that object takes three milliseconds to render.
Are you crazy? That's forever.
So when you have 60 frames, 16.6 milliseconds per frame.
It is important to note, really, that for the remainder of this talk, I'm gonna be talking about work on the GPU.
So if I'm saying 16 milliseconds, this can be on actually on the GPU.
So how does TechGuard help with all this?
Well, we worked with design in the very beginning.
Now these levels were all remake levels, so if there was a rock with a canyon in front of it with a turret on the left, that was what was going to be on these levels.
The fans were very, very particular to make sure that we made these levels exactly how they remembered them. But a lot of the times we'll work with design to actually make sure that they don't go over the budgets or, hey, if they want to have an underwater city...
They're like, okay, great, you can have an underwater city, but that's going to be 12 milliseconds.
That means you get one millisecond to put everything else in the game.
We work with art for look development and shaders.
If the art director wants to have a certain type of lava or a certain type of ice, the technical artist will actually help develop that and actually optimize those shaders to make sure that they're gonna run at frame rate.
Daily communication with map leads for anything that they need.
When we're doing our multiplayer levels, we have the concept of a map lead.
For every map that we do, there's an environment artist that is the key point person for that.
We call them a map lead.
They're the guys that we go to with any kind of communication that we need for their team, best practices.
It really helps us having a point person for every single map.
TechArt managing the frame rate.
So we work with QA to find the problem areas.
Our QA guys at Certain Affinity are just fantastic.
I've never worked anywhere where our QA guys work so hard.
They'll run through all the maps, find all the areas that aren't running at frame rate, record the positions, and we have a tool that will actually be able to snap through all the camera positions for each level that aren't running properly.
Then, of course, we communicate our best practice to the map leads and team.
We'll troubleshoot fixed problem areas. A lot of the times we find frame rate issues, two things can happen.
Either Technical Art can fix it ourselves, we can get in there and we can actually fix the collision of the terrain or whatever's causing issue in there.
Or we can go to the map lead and say, hey, if you want to do this, here's what you need to do.
Sometimes our map leads are like, oh, Tech Art, go fix it. Awesome, I'm busy polishing this thing over here.
Sometimes we have map leads that are like, don't touch my stuff ever.
We don't want you to ever touch it.
It's like, okay, whatever you need.
Communication, I really cannot emphasize enough how important communication is when it comes to performance.
Especially when you're trying to run at 60.
60 frames a second is a...
It's difficult. It takes a dedication from the entire team.
The artists are going to have to give up a lot to run at 60.
The programmers have to make sure that they have everything running perfectly in order to hit 60.
You'll... you're just not going to... it's not going to work.
So, Certain Affinity strives to always run the framerate every day.
I'm going to show you guys a little bit of our data that we send out to the artists.
Now, it's not always possible to run at frame rate every day.
You know, development happens.
Sometimes you're going to be running at 50, sometimes you're going to be running at 70.
But it's important to always try to run at frame rate.
It's really just a winning solution.
Those of you that have been in game development before when you're at the end of a project, trying to hit frame rate is the most painful thing ever.
A lot of times what ends up happening is you start stripping out all the artwork.
And the art director is very upset that his vision doesn't look as good anymore.
And the artists are upset because they spent six months putting that beautiful room together and now they have to strip all the objects out just so they can run at 30 frames a second or 60 frames a second.
But if you always try to run at frame rate every day, and you build your process around your frame rate, then it's always going to win.
It's always going to run, and your artist will spend more time polishing the art instead of ripping it all out to try to hit frame rate.
So, it's important to have a budget, obviously.
I'm not going to break down our budgets completely, because that would just take too long.
But our environments had a budget of 13.5 milliseconds, out of our 16.6.
Now, when I say environments, that includes all the effects and levels, that includes the post effects, that includes things like god rays, high quality shadows, or whatever kind of features that the artist wanted to put in there.
If we weren't hitting frame rate we had to know why And we had to watch the numbers every day, so So you might be asking yourself, how do you actually get these numbers?
You know how do you figure out if you're running at 14 milliseconds or 22 milliseconds?
Well, when you're working on the consoles, each console has their own kind of performance capture software.
We use Pix a lot, especially on the Xbox One, Razer for the PS4, or G Pad for the PS3.
Really what it does, it allows you to capture a frame of your game, load it up in the tool, and you can step through individual draw calls of your scene.
You can see what every post effect costs.
It will actually show you what is wrong with your scenes.
If you've ever walked into a room in a video game and all of a sudden the frame rate dumps down and you don't know why.
Loading it into Pix will actually show you this. It'll show you what's behind that wall.
It'll show you what every single pixel on that wall costs to render.
It could even show you the pile of a hundred thousand polygons that have an invisible material on it in the center of a room.
That's what's causing the frame rate to dump out.
And you're like, oh, wait a minute, there's a pile of invisible leaves in there that the artist forgot to remove.
And that's what's killing the frame rate.
It's really the only way to truly understand what's going on.
Okay, so running at 60, we're splitting up our budget.
We have 13 and a half for environments.
And with the characters, weapons, and vehicles, and all our sandbox work, we had about two and a half milliseconds.
And that's about an average for the characters.
Sometimes we had eight-player maps, and sometimes our big-team battles were 16 players.
So we had to roughly be at about two and a half.
So you have 16 players on screen with the vehicles, and maybe some grenades going off, and...
maybe a Banshee flying by.
Okay, 2.5 milliseconds is about an average.
Now when you get into your multiplayer scenarios, you're going to have things like server lags if you don't have dedicated servers and things.
So you want to try to even run a little bit lighter than that.
That's why if you notice, we're a little bit under 16.6 milliseconds here.
So trying to account for any kind of server lag that we can.
Your host might be running at, you know, 17 milliseconds.
So any kind of extra buffer you can give it is just gonna help you out.
Okay, so...
we'll start talking about our daily performance numbers here.
It can be difficult and time consuming to gather all the data.
Now I will admit on this project, what we ended up having to do, our QA department every morning would get the build and they would load up every level and they would go to every single camera and they would write down the numbers of where the framerate was at.
We were being bad TAs at that point.
I'm happy to say now we actually have multiple tools that will automate this entire process for them.
So in the mornings they had open up the bill they hit a button and it runs through every camera Spits it all out to an Excel file loads it up and we send it out to the team and it saved them hours of work But unfortunately for what we had on On this last halo project. It was less than optimal ideal, but these guys did a great job Now, this data can be confusing at first.
So, this is an example of what the team saw in the mornings.
It's not quite as confusing as it looks.
I'm going to break down one of these cameras here in a second.
We will work with our map leads on any problems.
The math leads will load up this and be able to look at it and anywhere they see green, they know that their shots were passed. Anywhere they see red, they know that they failed.
So they zero in on the red parts and we're, the technical art, we're going to see this first.
And we'll go directly over to them like, hey, you got shots 3 through 4 failed.
And here's why. We've already run it through Pix to know exactly what's going on.
So here's our camera shot.
So the picture on the top is a shot of the camera location.
This is the location when you're looking through.
This is where the frame rate is bad.
The column on the left, the GPU work, that is a custom counter we had in Pix that actually showed us, hey, just accounting for the GPU, this shot, the top number is 12.6, 12.8 milliseconds.
And that's how much it would cost to render on the GPU.
Now the numbers from the top to bottom, the numbers on the top would be, those are the numbers from the daily build today.
That would be today's build. So today the camera is passing. It's great.
Now yesterday's build was running at 14.1. That means it was failing.
So between yesterday and today, we actually got on there and fixed a few things.
They checked it in, they ran the numbers this morning, and all of a sudden, hey, the camera's green.
And all the artists care about is if the camera's red or green. If everything's green, it's all good.
The column on the left is the GPU usage.
That was another custom counter we used.
It's basically a percentage of how busy the GPU was when it was producing the frame.
But once the artists kind of break this down, they would only really look at their individual levels, and it was a really quick process.
Here's a quick screenshot of our multiplayer performance numbers.
I've never worked anywhere where we test multiplayer as much as we do at CertAffinity.
Being a co-development house that focuses on multiplayer, I should have expected it.
but we have three to four multiplayer tests a day.
And each test, sometimes it'll focus on design, sometimes it'll focus on modes, sometimes it'll be an art review.
But behind the scenes, we're recording these numbers for everything, for every mode, for all the amount of players.
They get quite a lot of data.
This is where a lot of times you'll see a lot of CPU issues running in here.
And here's my handy-dandy attempt at explaining GPU's stalling and being CPU bound.
So up here on the top, if you look at the top graphic, on purple, the GPU, let's say, is busy rendering the first frame.
And it's going along and it's rendering at 13 milliseconds.
And while that's happening, the CPU is actually busy getting ready, putting together the second frame.
And once it's done, it releases off to the GPU.
GPU renders the second frame, 13 milliseconds.
No problem.
Everything's fine.
So now on the bottom, now here is what happens and what it looks like when your GPU actually stalls out.
So while the GPU is running the first frame, 13 milliseconds, that's fine.
The CPU is busy putting together the second frame.
And then it runs into issues, and there's too much data.
It's got too much whatever, whether it's collision or there's audio problems.
And it's taking a long time for it to put together the second frame.
Now what happens is it's causing the the GPU to actually stall out to render the second frame It can't render that second frame until it gets all the data it needs Then it ends up by the time it actually does get released to render the frame It's taking 24 milliseconds to render that frame and that's because the CPU is actually hogging all the time to put it all together Now what are some of the issues that would cause the CPU to kind of stall out?
Well, for Halo we have collision issues. We have lots of different collision types.
Our artists don't like making custom collision, even though we have great tools for it. What happens is the artist will actually take the render model, dupe it off, and go, oh, that's collision, and I'll go ahead and optimize that later.
well, later comes around and end up with hundreds of thousands of polygons of collision you've seen.
And that ends up just really choking out the CPU.
Audio issues can kind of, would hit us.
We had draw calls, poor occlusion calling.
We would have way too many draw calls in our scenes.
We ended up combining objects together, working with portals to make sure the objects are occluding properly.
And to a lesser extent, maybe some animation or AI, but multiplayer, we don't really have a lot of AI.
So, okay, let's talk about our levels.
So we had six level remakes.
Um, I want to talk about Bloodline.
Bloodline was our Halo 2 coagulation map.
Uh, it's really kind of a classic map.
Uh, everybody loves it.
It's one of my favorite maps, and it was a nightmare for performance.
It was our worst-case scenario on all accounts.
So this was our big-team battle map.
It was 16 players.
So we had 16 players out there hunting, killing, driving around, throwing grenades.
and causing a lot of havoc.
Multiple vehicle types. Our designers put basically every vehicle in the game.
We had flying vehicles, we had driving vehicles, we had tanks, we had both of our new vehicles in there.
We had extremely long drawing distances.
And I'll show you right here.
So here's a screenshot of the bloodline.
And this is a little over halfway through the map.
This is a sniper perch. You can get up there and you see the entire map. There's nothing to hide from.
You can get sniped from this position.
So, I mean, it has to render perfectly.
And if it doesn't, people are going to let you know.
You know, when you're working with multiplayer audiences, if your frame rate isn't up there and it's not perfect, they will get on those forums and they will let you know.
So, here's another sniper perch.
This shows off a little bit of our grass system here.
One of our issues we had with this map is these mountains, we'd actually combined a lot of them together because we ran into draw calls, we were way over our draw call limit for this.
So we combined all the mountains together.
Well then we got hit with a GPU where the mountains weren't calling properly.
So we had to come up with clever ways to cut all of these mountain ridges.
The mountains would come in and kind of go back around.
And we had to find clever ways to cut them up to where, okay, well, on this angle from this sniper perch, we can get the left-hand side of the mountain out, and that's a quarter of a millisecond, we can get that.
Okay, you know, we have a half millisecond to go.
Where else can we cut these mountains up to get some of that out?
Our grass system was pretty robust.
I'm going to talk about that in a sec.
Here's kind of another sniper perch looking down inside one of these bases.
These bases were pretty complex, and there was entrances and holes all inside the bases, so culling out the inside of the bases was quite a challenge.
We ended up attaching a lot of objects together.
These bases were kitbashed together in the beginning, and there was lots of geometry in there, so it took a lot of optimization passes for the artist to get that right.
That little glowy ball on the top there, that's one of our new dynamic events we added into the level.
And basically, a player can go up there, flip the switch, and this giant EMP would kind of burst forth and fill the screen with this massive, you know, electrical storm that disabled all the vehicles.
And it was really a lot of fun. It was very cool. And it was awful for performance.
But we ended up making a lot of the particles additive, which took a lot of...
a lot of load off our GPU and it was only on screen for a short amount of time so it generally kind of worked out.
Here's a picture of the inside of the base.
Beautiful, I loved it.
It was really, really pretty.
The artist just did an amazing job with this.
Shows off our new PBR system really, really well.
But you can see that there's a hole in the center of the base and behind that other column over there, there's another hole and there's a hole behind you.
So there was no good way to really cut out a lot of the environment.
We had to do, again, a lot of creative cuts when inside the base to cut out some of the environment on the outside.
It was very difficult.
We also had a cave system to make things worse.
These caves, when they first got in, they were kitbashed together with a...
One of the artists created a rock.
He's like, I'm going to take this rock, and he kitbashed the entire cave system together with these rocks.
And I forget exactly how many polygons it was, but it was a lot.
As soon as that got checked in, our frame rate went down about 15 frames a second in that area.
We would go over there and take a look at it, and the artists were like, oh yeah, yeah, yeah, we know, we know, we've got to optimize it, we've got to attach it all together.
I'm like, well, okay, well, that's a lot of polygons.
And he kind of looks at me half-joking, he's like, oh, it's next-gen, I thought polygons were free now.
If you've been in the industry long enough, you're going to hear that.
You're going to hear, oh, polygons will be free on next-gen.
Polygons will never be free. Never. It's some kind of urban myth that's been created 15 years ago and I heard that when we were switching to the PS2.
Oh, polygons are gonna be free on the PS2. I'm not even sure exactly what that means, you know, but we ended up attaching all these rocks together, optimizing it out, and actually it ended up running really great, but I love that polygon is free thing. Okay, so our grass system.
We had a very, very dense system of grass in here.
Bloodline is basically the giant open canyon.
We couldn't have a lot of objects in there because we were very bound by our draw calls.
So we needed grass to really kind of break it up.
And our artists were very, very passionate about this grass system to make it really kind of blend and really look really good.
And we were like, OK, let's go for it.
At one point, we had 70,000 clumps of grass in the system.
If you're looking at 20 to 50 verts in each, that's over a million vertices.
Now, the system actually handles grass very well.
It's pretty slick in how it does it.
The tool will actually go through and combine a bunch of these clumps together into big groups of grass.
And then we'll have these groups of grass, we can LOD them differently, we can turn them off on the GPU at distance, and it works really well.
We ended up with thousands of these clumps.
Now, this system actually hits the CPU and the GPU at the same time.
So GPU, because it's got to render, you know, all of these little vertices, and you'll have tons of overdraw, because at one point this grass was almost waist high, and now you have all this overdraw going through, so we had to make the grass a lot lower.
But it also hits the CPU because it has to track every single one of these groups and tell it, okay, well, what LOD is it on? Is it on or off?
Every single one of those groups hits it.
So we still couldn't render enough grass.
And at one point, we were going to have to take a lot of this grass out, and it made the artist very sad.
and nobody likes sad artists. They start crying and it's very depressing.
So what we ended up doing, one of our amazing technical artists actually came up with a few tools to get the grass out of our grass tools and brought them into Maya. We actually converted a lot of this grass actually into regular geometry. We were able to cull it on a normal basis just like anything else so it wouldn't hit our CPU as much. It turned out looking really great.
Other things that helped the GPU, the LOD system in Halo is actually, it's pretty neat, it's got some cool things to it.
At a distance it'll actually create a very low-res version of the geometry.
It puts a cheap shader on it and actually bakes some vertex colors on there.
Well, when it samples the lighting it blends pretty well.
For Bloodline we had to bring that way, way in because the shaders are very expensive now.
So you actually, most people couldn't even see them, so it did a pretty good job.
very few detail objects in the middle of the map. When you're in the middle of the map, you're actually playing, they did a good job clearing everything out without it feeling too naked and open.
The grass system helped with that. We had some strategically placed rocks, but we couldn't have a lot of objects in the middle. We just couldn't afford to render it.
And the poly counts we had to keep as low as we possibly could. This map had the lowest poly count of any of our maps.
It was just so big, we couldn't hide anything.
Things that helped the CPU, the vehicle physics needed optimization. Again, we had almost every vehicle in this map and each vehicle has multiple damage states and destruction states and each one of those states had their own little bits of physics that kind of pop out. So we had to get in there and optimize that to really help the CPU. Again, with our draw calls we cut them down very dramatically.
And the VFX distances, we cut those back as well. We turned off our VFX really aggressively.
Unfortunately, there was just nothing we could do about that, so after a certain amount of distance, there just isn't any VFX, because we just couldn't afford it.
So, Bloodline was very CPU-bound.
Get rid of that slide.
Wrapping it up.
Alright, so trying to hit 60 frames a second.
Really, we had to do a lot of careful planning with this.
Basically, having to start out on the 360 and then convert over to Xbox One, we literally, we had plans of exactly where we needed to be on every week.
Okay, where are we at this?
Is that gonna help us get to our plans in March when we get the engine?
Constant communication between us, all the other studios working on the project, all of the different teams within Certain Affinity that were working on this project.
It was really tremendous.
And you always have to keep an eye on your data.
If you're trying to run at 60 frames a second, having a system where you have that kind of daily updates is really, really helpful.
There's no way we wouldn't have been able to do that without it.
This was definitely one of the most challenging products that Certain Affinity has ever done.
It was the first time we ever had six maps running at the same time.
It was the first time we've actually switched consoles in the middle of development.
It took seven months to develop six levels, a full set of weapons and vehicles, and the VFX that went around with it, on top of everything else.
We had a pretty large team for us.
We had over 60 people working on this product.
Thank you. I want to say thank you to Thomas Maurer, Louise Kruhl, Matt Ostley, Neil Davis, the entire Halo team.
It was an absolute pleasure to work with every single one of these people. It was just really a lot of fun.
Lastly, Certain Affinity is hiring. We're looking for talented developers. We're looking for technical artists.
So if you're interested, come talk to me afterwards or go on our website and check it out. Thank you.
If anybody has any questions, microphones, yell them, scream them at me.
Hi, I just wonder, because you do daily tests, yeah?
How many positions and view angles do you test each day?
So the question was, how many positions and view angles do we test daily?
as many as we can find. Our QA department is devilishly clever finding all of the angles that are actually within our play space that actually don't run at frame rate.
I sit down and we work with them and usually they would be between eight and twelve depending on the map. Sometimes they'll run up to fourteen.
What ends up happening as each individual camera hits frame rate, if they're consistently at frame rate for five builds, we'll actually drop that camera out and we no longer report that to the team.
Okay, so it's all determined by the QA team.
The positions are determined by the QA team?
Yes.
Okay.
And do you think that tens of positions are enough?
Do they test them enough?
The positions are too few, according to my experience.
Maybe there are some...
Too few?
Yeah.
Um...
With multiplayer levels, it depends on the level.
It really does.
Coagulation had quite a few.
There's always levels, areas that don't fall within those cameras.
But we'll catch a lot of those on our daily playtest as well.
We didn't want to overwhelm the R team.
So let's say if we had 50 or 60 cameras, and you're sending those out to the R team every single day, they're going to open that up, see an endless amount of data, and they're going to shut it down, and they will never look at it.
So behind the scenes, the technical artist will actually take a look at the entire level as well.
We ride around in the vehicles, we detach the camera, fly around, and we'll find other little areas and we'll try to fix those.
And sometimes we'll work with the map leads and say, hey, we found a new area but we're not going to report it, so let's work on this area as well.
Yes, yes, we have new tools now that actually automate a lot of the process.
We still place the cameras by hand.
I would love to have a system of heat maps and upgrade it even more.
Thank you.
Thank you.
Hi, I had a question with regard to your shader replacements.
In general, were there objects that were more aggressively replaced, and what were they replaced with?
Like, did you have different levels of PBR?
Did you fall back on a spec or a pure diffuse?
We ended up replacing most of the shaders.
Luis is gonna talk a lot more about our PBR system in the NEC talks, so stick around and talk to him about that.
Thank you.
Hey, I was very curious about how you deploy your partner's pipeline.
So that's really interesting.
I was at XDS last year, and basically working with external developers was a giant nightmare for almost everybody.
And one thing pretty much no one talked about except for me was the concept of deploying a pipeline externally.
So I'm curious how your partner's pipeline gets installed and configured.
differently every time.
Most of the times we have to be on a secure network, so I'll actually have like two or three different boxes at my desk, and every single one of those boxes is on a different network, where sometimes I'll have to have a box on a desk in a different room.
But they'll come out and they'll help us install it.
Sometimes they'll deliver boxes with the tools already installed on them.
Sometimes they'll actually send guys out and install it for us.
But once we get the networks up and running, generally we'll run a little slower than their guys, because we have to send data all the way up to their, let's say, up to 343 and then back.
So it's different every time.
So it's largely a manual process, it's not automated?
Sometimes it can be, parts of it.
Thank you.
I noticed that you were sending out the reports via Excel files.
Have you ever, have you guys thought about like maybe having a back end for aggregating a lot of the data or was that like out of scope?
Yes and no. Again, sometimes we have to rewrite things for different projects.
Sometimes our partners actually have tools for us that we actually have to end up using.
We're currently investigating a lot of different solutions to try to come up with like a certain affinity set of tools.
So, we're really looking at everything right now.
Thanks. Thank you.
Did the team as a whole embrace performance, especially from the TH perspective?
Did you find yourself fighting with art over visual bar, look development, versus shaded performance?
The whole team loves performance when I'm in the room.
The beginning of this project, when we got the mandate to go 60, there were a lot of artists that were really bummed out because they wanted to have all of the milliseconds and hoard the milliseconds and we're going to do all of these amazing things and we're going to have all these vehicles and do everything we've always dreamed of.
But they kind of came around once we started playing the playtest at 60 frames a second.
They really came around and they had to give up a lot of things.
But really, once our artists go through an entire cycle and they get to an end of a cycle and they don't have to take anything out of the games, we actually have one of the gate processes that is a tech gate.
to where they actually have to add in any of the expensive graphics processes they want for this level. So if they want god rays plus the expensive fog and a higher resolution shadow map we have an early gate, they have to actually put that in, turn it on and actually account for that frame rate early on in the process.
Let's say all three of those things took two and a half milliseconds Well now they'll actually build a level around those processes and so for the entire time they have that on it may not be tuned And look super pretty but it's there so that way at the end Instead of trying to turn those processes on at the end and now not hitting a frame rate They're always working frame rate so once they go through that process. They're actually pretty cool with it They really like a lot so they can polish their stuff at the end Awesome, and were those features sort of already developed? You said that there was already some existing pipeline.
Sometimes, yeah. Sometimes we'll get features halfway through development and we'll have to do a lot of testing on them.
So we have to be really flexible. We try our best.
Yeah, cool. Thank you.
Hi, I'm really curious about the polygon count.
So basically, the Halo 2, that's the remake.
So when you imported the original asset, so the polygon count already fixed.
So when you add more polygons, where do you add those polygons to verify or remake the original?
Okay, so the question was how did we get our polygon budgets from the old assets to the new assets?
Actually, we used a lot of the old assets just as visual reference.
We rebuilt, at least in the environments, almost everything.
We rebuilt all that from scratch.
Now when coming to the characters like the Spartans and the weapons and the vehicles, we...
really just kind of like polished those up.
There wasn't a lot of time to rebuild the Warthog from scratch, and there really was no need to.
But we did redo all the shaders and the materials on things.
But when we're coming to the Polygon budgets, we stayed pretty close to what our Polygon budgets were for the 360, just because we weren't getting the next-gen engine for four or five months, and we had to be very, very conservative with our numbers.
I think we only went up by maybe 20%.
Because if we completely blew our polygon budget, got to the Xbox One, and the next-gen engine didn't handle polygons very well, we would have spent a long time reducing our poly counts.
So we were very, very conservative with our numbers.
Okay, cool. Thank you.
Yes, sir.
Hi. Hi.
You mentioned being CPU-bound.
And in the past, I've always had a lot of trouble figuring out that we were CPU bound.
I always... it was kind of like, prove that it's not the GPU.
That means it's the CPU.
So I was wondering if you had any more details about what tools you used or how you figured out that you were CPU bound.
So have you ever used Pix?
No.
Okay, so Pix is a profiling software for the Xbox.
It's really, really amazing.
You can kind of let Pix run in the background while you're running around in the game.
And you can have these counters that actually live update and show you what's going on.
And there's a counter in there that will show you what the frame rate is right now.
So if you're, let's say you're walking around in your game, and that counter will tell you, okay, you're at, let's say, 18 milliseconds, 19 milliseconds.
You're like, oh, I'm trying to run 60, so it's 16.6, that's what I've got to hit.
And what you can do is you can write that number down and then you can do a full graphics capture of that exact same frame.
And when you're doing a full graphics capture and it kind of loads up and you can see all your draw calls and all your textures, you can actually calculate and see if the GPU wasn't busy, that is the number that it would take to render on the GPU.
And now that number could be 13 milliseconds.
So you can actually get the delta between those two numbers and okay, well if the GPU says it only takes 13 milliseconds, another counter says it was 18, you know, okay, well we've got 5 milliseconds that's unaccounted for.
And that's straight up because your CPU is way too busy.
Thanks.
Hi. You mentioned that you had the engine developed off-site, right?
Yes, sir.
So do you have, two questions actually, do you have programmers on-site, like at certain affinity, who develop the engine as well?
We had programmers on site that would help us with things like we implemented dual wielding on our end We had programmers that actually would merge the builds from from Our partners to us and do all the testing and all the helping the technical artists with the testing Sometimes our programmers would help with features if ruffian couldn't get to a feature our programmers be like no no We really need that so they would dive in there and fix that feature as well our programmers Depending on our engagement do all kinds of work So whenever you've run into problems that you couldn't solve with the standard means, like reducing draw calls, merging meshes, whatever, do you also have programmers that take care of some feature works that are performance-optimizing in general?
Yes. We have programmers that help us either if they'll do some heavy lifting on the graphics engine, if we can, because a lot of times we can't actually change the graphics engine.
If we're working on a Call of Duty, Call of Duty is not going to let us change the graphics engine to fix a feature in a couple of multiplayer levels.
But we do have programmers that will actually do a deep dive into the code and tell us exactly how it's rendering that feature and what we can do to get the most amount of perf back.
Now some projects will actually, our programmers will go in there and actually change the engine if it's a little bit more open.
Our partners really trust us a little bit more.
Thank you.
Hi.
Hi.
So I was just kind of curious how you got around the problem with split screen play.
Because I know I love this game, and I'll be playing with friends and whatnot.
And single player is great.
And then you're like, yeah, come on, let's go jump in a big team battle and split screen.
And then you're losing frames.
Oh, split screen.
Oh, you're one of the guys.
It's your fault.
Why?
Okay, so for those who don't know, Halo, you can do 2-player, 3-player, 4-player split-screen.
It's always been a popular feature.
We got really lucky with this product and we were told that it was okay for split-screen to run at 30.
Now, we actually do track our split-screen numbers as well.
If you go back to the multiplayer slide with our numbers up there, you'll actually see on the right-hand side it says 2-player, 4-player split.
So we playtest those numbers as well.
So when we're actually in a playtest lab, we'll have a bunch of guys actually on regular computers, I'm sorry, regular monitors, you know, playing on a single player.
And then we'll have four guys on a couch squeezed in playing on a quad screen.
And that's where you go if you didn't, you know, those were the four guys that got there last.
Because you got to squeeze on the couch and you got to play on a quad screen.
You know, you never win on a quad screen.
But yeah, we tested that every day.
We had special throttles that we could actually go through.
I can turn things on and off when it goes to two screen, three screen, four screen.
So on quad screen, I would do things like turn off the grass, or I would turn off the fogging, or I would turn off certain features.
And then I can actually profile that individually.
Thank you very much, everybody.
I appreciate it.
Thank you.
