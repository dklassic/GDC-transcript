All right, everyone. Can you guys hear me? All right. I apologize my voice is kind of out.
Thank you very much for coming to creating the art of Abzu.
I'm Matt Nava. You might have seen my work on these games. I was the art director on Flower and Journey. After Journey shipped, I started a new studio to create small games like that called Giant Squid. And our first project is called Abzu. And Abzu is this underwater adventure game where you kind of explore the ocean and there's a very vibrant world full of fish based on real life fish. And for those of you who haven't seen much of it, I have a little clip of it that should show you what it's like.
So the game is actually very much inspired by my own experience with scuba diving.
This is me on the right there and our lead engineer on the project, Brian Ballamut, after going on a scuba diving research trip.
And the game uses Unreal Engine 4.
It took three years to make.
and we had 10 people working on it at the peak team size.
We had no dedicated animator.
And this was crazy because we have tons of characters in this game, tons of fish.
So the underwater setting presented this technical art challenge that not a lot of games have to tackle.
We had to do huge amounts of interactive fish.
huge amounts of interactive kelp and we needed to have terrain that was really capable of supporting rapid iteration and we also needed to have art directable volumetric lighting and atmosphere. So I'm going to tell you a little bit about how we solved some of those problems.
So the first one we had to do was fish and the game features over 200 species based on real species from around the world. At any one time there might be 10,000 fish swimming on screen.
attempts that we did to create these fish was using skeletal rigs. This is kind of the typical way you do character animation. So this is a skeletal rig. You can kind of see that what's really nice about skeletal rigs is you have joints everywhere that allow you to control the character completely. You can open their mouth, you can do silly stuff like that. You can really make it do whatever you want. But the problem comes when you have lots and lots of characters because updating all those joints for all those fish.
is really expensive. The other really cool thing you can do with joints is you can procedurally animate their spine to curl them along the path that they swim on. So you can see here the shark is using a skeletal rig and can curve as it swims. And that's a really, really important effect for swimming. So when you have lots of fish, each one of these characters needs to have an entire skeleton of joints, which is like 60 to 100 joints.
and every frame you have to update all of those joints per fish. So instead of just having 10,000 fish to update, you have 10,000 times 100 joints, which is crazy. So we had to figure out a different way to get the density that we wanted. And our answer to that was static mesh.
instancing, which is a technique that's usually used for doing grass or other kinds of foliage on the ground. And we actually wrote our own variant of this kind of system for Abzu that allows us to pipe in a small amount of data per instance that allowed us to animate the fish, each one individually.
but we didn't know how to make a static mesh animate because it doesn't have joints. It can't bend or anything like that. So we had to figure out how to do a swim cycle for the fish, a bite animation because the game features a full ecosystem where fish are eating each other. And we needed to be able to do that thing where it curls along its path. So I'm going to tell you how we figured out how to do that with static meshes. So the swim cycle, we used the vertex animation in the material of the fish.
And what I found when I was animating this fish was that you, to create a swim cycle, you really need just a few basic components.
A side-to-side translation, a yaw rotation, and some panning rotations along the spine.
So I'll show you a little bit about how that works.
So this is in Unreal, our swim shader.
So this is a giant trevally fish.
And in the material, we just animate the vertices.
And here you can see we're just doing a side-to-side motion with a sine wave that's pulling all the vertices back and forth.
And the next motion we do is a yaw rotation around the object's pivot.
And you basically can see that it's just a very simple rotation.
and then we have these kind of crazier rotations where we pan the rotation along the spine.
So we get this kind of rolling thing and he looks really insane. So you have this roll and then we also have a panning yaw. And this one is really crazy, too, because you can actually see further down from the pivot point it distorts. So if you have a really long thing, this doesn't work. But for most of the fish in the game, it's fine. So when you add all of those together.
with an offset between those curves, you get kind of a swimming motion. So here we bring in the side to side translation, add the rotation and then bring in the panning rotations for the roll. And also the yaw.
So what you get is this kind of gooey swimming fish.
So we did one trick which was to mask those panning rotations just to the back half of the fish.
So here you can see, I'm just kind of dialing in this mask that just puts those on the tail end.
look at it, all of a sudden you have a swim cycle that has no joints and is on a static mesh, which is really cool. And it looks just as good as a swim cycle you do with joints.
And what's really neat is that you can control this all with one parameter. So you just have one speed variable that you have to pipe in. And we drive that with the acceleration of the fish in a simulation, not the velocity, which was a kind of important point. Because if you would drive it with acceleration, then you'll have these kind of flickers of the tail when he's accelerating and then he'll coast, which is very much more lifelike. So here's an action. This is a scene from the game with about, you can see in the corner there, I think it's about 11,000 fish or something. These are giant trevallies and they all are swimming with a unique timing of their swim cycle.
at the same time. It's really because we figured out how to do this static mesh instancing system that we were able to do this many fish. When we tried to do this scene with skeleton fish, we only could get like 30 fish on the screen. So it's a huge difference.
So the next thing we had to do was the bite animation.
And this one's a little harder to do just with sine waves in a shader.
So we ended up figuring out this method using blend shapes.
And we use a sequence of blend shapes in order to make the fish bite.
So here you can see.
We just had two blend shapes, one that opens the mouth and one that extends the mouth forward.
And when you play these in sequence, you open the mouth, and then you push it forward, then you close the mouth, and then you pull it back. You get this kind of squash and stretch bite animation.
Here you can see it happening, being driven by some curves.
and we add this kind of squash and stretch so when you zoom out you can really see that motion from far away because a lot of times in the game there's a lot of fish on screen and they're small on screen so you need to see it's very exaggerated biting. And we actually figured out a way to, oh here he is, in the game. Boom. He's a bad kuda man. So we figured out a way to use this blend shape sequence idea to do more complex animations.
So this is a skeletal mesh of a crab, and we just have four poses for his legs, and we were able to do this really complex motion purely with blend shapes.
And even this little pinching thing when the diver comes close to the crabs, they try and pinch you.
Pretty silly.
And we use this to do other things too, like, bird flight cycles. This one uses eight different poses. And it allowed us to do a lot of really detailed animation for things that really were small on screen. It's pretty cool.
It's a really neat technique. And one thing that's kind of interesting is that to actually create those poses for the blend shapes, we created full skeletal rigs.
just to create those poses. So we saved a ton of joints on these crabs that are tiny. They would have been 41 joints per crab. It's crazy. So big win. And the last thing we had to do to make these fish really seem real was to do a turning curl animation. So here we can see one of the sharks with the curls turned off. And you can see when they do tight turns, they spin around like a board. This is really exaggerated on the longer the fish is.
and when they chase fish, they really do these twisty motions.
So we had to figure out something to make them curl.
And what we ended up doing was using blend space, a blend space of blend shapes, essentially.
And you can see here, we pose the character in these four kind of curled poses with an in-between pose for each one that allowed us to have a kind of rotating interpolation as the blend shape.
brought on to the character. And we had to write this ourselves into the engine as well. Here you can see in action. But there's a problem because it all works fine if you're perfectly aligned in these directions. The tail will bend. But if you try to do a 45 by combining two, So you go to the side and up, then the tail gets twice as long because blend shapes are additive.
So we had to actually create a third blend shape that was a negative blend space, a blend shape that would pull it back.
So when we did three at a time, that let us do 45 degree angles.
And if you look just at that fixed blend shape, it's insane because it pulls the tail like the opposite direction.
And it makes this really crazy looking shark.
We had to actually create a script in Maya that would automatically generate that pose because we had no idea how to model that.
And you can see, these were the corrective blend shapes for the 45 degree poses.
So when you add that to the fish, you can see that he does this nice turn when he does a sharp turn there. He curls his body. This was really important for making them feel more fluid. So that's basically how we got a whole lot of fish to animate with some pretty high fidelity animation, much cheaper than with bones.
The next thing we had to solve was doing kelp. Kelp is crazy because we thought we had a lot of fish, but there's way more kelp leaves. It's insane. We actually started with joints again because we didn't learn our lesson. But that quickly didn't work out. So we did a different one with static meshes. This is a video of an early build of Abzu with a very static kelp forest.
We did this very simple kind of leaf push when he gets close to the diver, which isn't really ideal.
It really doesn't capture what we saw when we actually went diving.
This is very dynamic, kind of fluid motion on leaves being driven by tides and all this.
So what we ended up doing was reusing the static mesh instancing system that we made for the fish to do these leaves, but instead of driving them with shaders, we drove them with very simple rope simulations and stuck them on long rope simulations for the stalks.
So you can see here, by doing it that way, we were actually able to get them to collide, every single leaf to collide with the diver and a small subset of larger creatures, like this manta ray.
You can see it pushing the kelp there.
And you can see we actually have about 350,000 leaves in the scene, and this scene also has a ton of fish.
So static mesh interesting is really cool.
Next thing up was terrain.
And the game, we really didn't know what the design of the game was as we were making it, and we had to figure out how big these levels were.
And what I quickly learned was that the sculpting and painting paradigm for authoring landscapes is not really ideal for iteration. If you paint a landscape to make it be higher or lower, say you make a mountain and then you realize the mountain is too big or too small or needs to rotate or needs to translate in the world, it's really hard because you have to erase it and repaint it somewhere else. That's really slow.
So what we wanted to do was keep using the move scale rotate paradigm that we use for moving and rotating things like rocks and other objects. And what we came up with was this idea of terrain height patches. So we created a library of static meshes that look like bits of a terrain. And then we just kind of bashed them together. And here's a little demonstration. So this is one of the static mesh height patches. And you can just duplicate it around and create a little terrain there and you can see their individual meshes but we have a tool that projects a height map onto them. And when you look at that wire frame, now it's a height map with LOD and everything like that. So what's really nice is that you can create a features of the landscape, duplicate them, rotate them, scale them, and really quickly build out your landscape using the same tools that you use to move every other object in the scene.
So this really helped us create the landscapes quickly and change the design as we needed.
And another benefit of this was because you're using the same tool to move your landscape and your objects, you can move them at the same time. So if I, for instance, have a rock here and I need to align the terrain with it, I can create high patches that align with that rock and then I can select all of those patches and the rock together and move them or duplicate them to.
basically keep features and terrain tied together. And you don't ever have to switch to painting, which is actually, whenever you switch paradigms kind of in authoring, that's a very slow thing. It really slows down your process. So this was really a good optimization for our pipeline.
Here you can see one of the levels in Abzu zoomed out.
If I take away all of the rocks, you can see all the height patches that we used to make the floors for these areas.
We used lots of them to create lots of little different height terrains.
And we extended this idea of using the move scale rotate tools to painting the color on the terrain too.
So we had this idea of stamps that would put down color and you could move them, rotate them as well.
And we even had splines that would drop stamps, kind of like a Photoshop brush.
And so what's really nice about that is you're not thinking about paint strokes anymore, you're thinking about features.
And that really is a good distinction to make when you're creating levels.
So the last thing here is the way we did our atmospherics.
And we did a lot of tests with ray marching and volumetrics and all this sort of thing.
What we found was that we ended up shipping simple linear fog.
And the reason was this.
was much easier to control. We just had a tuneable falloff curve for this fog. It looked something like this. We stored this curve volumetrically in the space. So in one room you might have a different falloff than another. What we did was we stored this kind of as the fog goes away from the camera, we stored this far distance number which is where the fog becomes completely opaque. And we stored a transition distance where we could set the fog transparency.
And between those two distances, we created what we call the silhouette range, where we actually dim the lights in the level. We just had very simple directional and ambient lighting. And when you dim the lights there, it kind of creates this murky feeling. I'll show you here. So this is without dimming the lights, just a very simple linear fog.
And you can see out in the distance it gets very kind of indistinguished.
But when we dim the lights in that transition area, then you can start to see these murky silhouettes and it really sold the idea of being underwater.
So you can see this is where the transition distance kind of starts and the silhouette range here is really.
was really important because we could tune how wide that was and how far that was. And you could see basically further than the fog by seeing the silhouettes and still maintain this atmospheric kind of quality that makes it feel underwater.
And the one thing that saved us, and really saved us designing this game, was creating these things we called portal cards.
And we used these to highlight specific silhouettes in the game.
And it's really a simple concept.
It's just a card that you use.
So this is an environment in the game that has a portal.
tunnel that's kind of hard to see. So we drop in this portal card, which is essentially a plane that has a material on it that fades out when you get close to it, when the camera gets close to it.
And we have some fall-off on it that we can control.
And what we do is we scale these things to intersect with some of the level geometry.
So, you can see we just cover this door with it.
and the magic starts to happen when you start to tune this depth fade parameter which essentially fades out as it gets closer to objects in the scene depth. And what that does is it makes this fake fog effect that brightens an area and highlights a portal. So without it you can't even see the way to go forward. And when you turn it on you can actually see where you're going. So we actually use these to direct the player.
And it was really important because that base volumetric fog get us so far, but we had to highlight specific areas So to take you really quickly through a scene as it was built up, we had this work mode lighting which let us just see the whole scene in an evenly lit lighting so we could actually see what we were doing.
We could toggle that on and off.
And the first thing we did was add volumetric ambient and directional light.
So we have just a very simple directional light, an ambient light.
without much going on. But we store their color and brightness individually in areas of the scene. So you can see that there's local contrast around the door in the distance. And then we also do the same thing with the fog, with the silhouette range to help us see deeper where we need to see, like that door in the distance as well as you can see further there. And then we add portal cards to highlight ridges and things like this. So you can actually see here.
this is where we place these cards. And finally we add light rays. And our light ray tech was essentially the same as our portal card tech. It was just automatically placed just very long, thin portal cards that would kind of animate scaling up and down. And that's how we did our lighting. So that's pretty much how we created the environments and fish in Abzu and how we solved some of the technical challenges that an underwater environment presents. Thank you very much.
So I think there might be time for some questions if anyone has any, walk up to the mic and ask away.
Hi.
beautiful game. The one thing I didn't quite get is how the fog is volumetric in the sense that you can see that doorway in the distance. How do you poke a hole through the fog? So what's crazy is that every 8 by 8 meters we kind of have a volumetric voxel of fog. So it's pretty coarse data. But in that 8 by 8 meters we store the color of the lighting and also the curve of the fall off. So, I'm not going to go into the details It doesn't accumulate over distance. It's not like a participating media simulation where we actually are accumulating. It's just a simple linear fall off. So even if something is way out far, if that has a curve that's pushed, it will show through. So it's like a lot more simple than it actually seems, actually. If that makes sense.
Can I ask one more little question? Yeah, absolutely.
If you could talk a little bit about the...
the pathing and the flocking quality of the fish. Obviously I see how they animate it, but how do they animate as a group? How do they interact with the player?
Yeah, that was a big challenge we had to figure out how to get the behavior to act right.
And it was a big challenge that our lead engineer, Brian, the guy in the scuba suit, solved. And it was basically this amazing simulation of each fish had awareness of all the other fish and they're all kind of ‑‑ not only segmented in space so that things that were fish that were near each other knew about close by fish but ignored further away fish but we also made sure that they were near each other in memory so that they could look up each other's position quickly. So we were constantly shifting the fish's position in memory depending on how close they were to other fish. And that let us have each fish be aware of a lot of fish around it and then them or chase them. And when you create a bunch of those kind of simple rules like just align or avoid and you add a whole bunch of these automaton fish into the scene, then those behaviors of spiraling fish just emerge. It's a really cool phenomenon and this is kind of how fish actually swim. So we studied a lot of actual fish behavior. That's phenomenal. Thank you. That's really cool. Thank you.
I was just wondering if you attempted underwater caustics at all?
there were caustics in the game, but it was totally fake.
We were like, can we do really cool ray traced stuff?
And they're like, no, that's crazy.
What we used was a very simple, it's called the light function in Unreal, or kind of like a gobo effect, it's also known as.
And it's just an animating texture with a couple of scrolling masks and that's it.
Yeah, nothing crazy.
That's what I wanted to hear, thanks.
Thank you.
I'm a big fan of your work and talking about in Journey, you had like a submarine scenario, even though there wasn't any water.
So what was a different approach within that submarine scene in Journey and Apsu?
Well, in Journey, the part you're talking about, we tried to get this idea of kind of an underwater environment, like this idea that there was life in the depths, but we weren't trying to figure out how to actually solve, you know, effects that were ...
actually like what you see in the ocean.
So Abzu was definitely kind of attempting to become, simulate more realistically, the effects that you see underwater.
So it's a bit more of a, inspired by the truth of the ocean, I guess.
All right, thanks.
Thank you.
Hi there.
Hi.
I was curious about some of your materials and if you guys tried to approach it without using textures or instead actually use textures on the fish, if that was a more efficient approach or what your thoughts were on that.
Yeah, so the game had a ton of materials.
And the idea was to create materials that didn't emphasize texture.
So they used texture everywhere, but they're very subtle or low contrast.
And we did a lot of work to make sure that the angular.
kind of shapes of the geometry would really show through to give the unique style of the game.
And we wanted to use that to kind of create more iconic fish.
We were inspired by real fish, but we wanted to make sure that they really represented kind of everyone's idealized version of them so that they were more memorable.
Thank you.
Go ahead.
Hi.
You mentioned terrain stamps, using that to transition between different colors on your terrain.
I did notice playing the game, there were some areas that had spots with very soft fall-offs.
Was that using the same tech?
Or was that using some sort of point light system?
Yeah, so there were soft areas where we just had color that was affecting one material type.
So that was kind of texturing that type, but then we had hard transitions between material types.
So there was never a soft transition between say grass and sand, but within sand there might be a soft transition of color.
So there might be blue sand that smoothly transitions to white sand or something like that.
So I think we have time for one more question, I guess.
Did you have a question?
Thanks so much.
I'm so surprised that there is no dedicated animator in your team, but I'm curious of the number of graphical artists, programmer, and game designers.
Sure.
So at our peak team size, we had 10 people.
We had one environment artist who was helping build meshes and fish. I was also doing that. I did most of the animation. We had one animator contractor come on later in the development to help us finish it out. We have hired an animator now because we learned our lesson. So hopefully we won't be working so hard on that in the future. We have one amazing graphics engineer who did all of that lighting and stuff like that. Thank you. Cool. All right, guys, thank you so much.
