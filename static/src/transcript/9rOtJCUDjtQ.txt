Good afternoon, ladies and gentlemen.
First things first, I would like to remind you to turn off your cell phones and to fill out the session evaluation email.
And let's start.
My name is Aleksander Kauch.
I am lead gameplay programmer at 11-Bit Studios.
And today I would like to present you the architecture that we used in Frostpunk.
A few words about me. I've been a gameplay programmer for about 9 years now.
Most of this time I spent at 11bit Studios and I programmed titles like Anomaly, Anomaly 2, The Sword of Mine and most recently I was the lead gameplay programmer of Frostpunk that came out last year.
For those of you who haven't played Frostpunk, it's a society survival game.
So at its core, it's a city builder, but with strong emphasis on the survival aspect and harsh conditions.
In case of Frostpunk, the world is frozen and we are the leader of the last city on Earth.
And the game is focused on society and how the harsh conditions can change the...
society itself, what impact does it have on the society and on our decision-making considering the society.
So it was made based on liquid engine, our own homebrew technology that has been developed since nine years or so.
and it was programmed by 5 gameplay programmers and 5 engine programmers and everything that I will present you was made by those wonderful people, me included.
So the idea of the game had introduced us to many challenges.
First of all, there was no solid reference for what we were trying to pull off, because there was no city builder game that focused on the survival aspect, aside from Banished maybe, but the thing that could stand out for our game was the focus on society.
That was never seen in a city builder game as far as we know.
So that meant for the programming team that we had to do a lot of research and R&D and support our designers who did the same.
So fast prototyping, fast iterations, that was the main thing during the development.
And aside from that, it was the biggest project for A11bit Studios.
This War of Mine was made by 20 people.
Frostpunk was made by 70 people, so the scale went up pretty high.
The solution we came up with was data-driven architecture that was based on entity component systems.
It proved to be a flexible, easily expandable architecture that allowed the design and art teams to create content.
and with programmers only providing tools or new pieces of the puzzle.
And the architecture proved to be very good for iterations and experiments.
And I would say that without this approach, without data-driven programming, we wouldn't be able to create such a unique game as Frostpunk, I believe, is. And I will try to tell you why.
So when we started programming, creating Frostpunk, we had to start from somewhere.
The idea was that we start with something that we all well know, so the economy system, the building systems, and so on.
So the requests from our design teams...
war was where that they needed a system where they could define new entity types, they could introduce for example new buildings, new behaviours.
they should be able to quickly reconfigure them and they should be able to swap features between entity types.
So if we create a coal mine, the fact of gathering coal should be, we should be able to transfer it to another building as a feature.
And we all knew that it won't end on 20 entity types.
There will be more entity types, so the system should be able to scale well enough.
So we started with data structure.
Main piece of our data structure is something we called RTTI class.
It is a C++ class that can be serialized to XML and to binary, and our RTTI system recognizes the type and loads the class from the definition.
We use the XML in our editor, in our workplace, and the binary format is used in the final content.
We also introduced globally unique identifier to identify RTTI classes.
It, of course, has fixed size text form.
I think you will understand what it is.
And the last piece of a data structure puzzle is template.
Template is a RTTI class that define an in-game object type.
It is, of course, identified by unique ID.
and it's widely supported by our editor, our tool.
So from the template, the instances of an object are created.
It's like a prefab in Unity.
So the pipeline during the game load, during the work, goes like that.
We start with XML file, then our RTTI system creates template object in memory, and then ClassFactory creates.
instances of in-game objects.
Pretty straightforward.
Template examples, entity templates like buildings, like citizen template and so on.
Components in entity component systems were also implemented as templates, mesh templates, UI recipes.
Basically, every single thing was defined, is defined in our architecture by a template class.
ETS, I think you all know what an entity component system is, so to briefly remind, it is a system where entity is just a container for components, the components themselves carry data only and systems work only on components that are attached to them. And the main advantage for us, especially considering the a number of entities in the city was that the update didn't go through entity by entity way, but functionality by functionality.
So everybody in the city moved, everybody in the city starved, everybody in the city did their work and so on and so on.
So state and data is kept in component.
All logic is implemented in systems.
But in our case, systems can also keep global state.
It proved to be very useful for a game like Frostpunk, because, for example, the economy system keeps track of the resources the player has.
And it is global value that can be taken from the system.
It proved useful for us.
So we decided to let the system keep their state.
And we also needed to face the fact that our engine is older than entity component systems and not all parts of it were transferred to the new architecture.
So some features were outside of VCS that had an impact on our code.
And for example, that would be UI system, input system, rendering system, and so on.
Components and component templates, as I mentioned earlier, are RTTI classes.
Entity template has a list of component templates that are inside this entity.
And component keeps reference to its template object.
So constant data is kept in the template object and the mutable data is kept within components.
Of course, via the serialization it can be saved as a safe game state.
We introduced two restrictions to the system.
We've decided that only one component of a type can occur inside one entity which helped us to keep the configuration clean and was less error prone than the approach where you can put many components of the same type on an entity.
So the designer would be warned or even would be forbidden to put one, to put more than one component of the same type on entity. And another rule is one system per component type.
In our architecture, one system is only taking care of and processes one component type.
This is a single responsibility principle and it proved to be very clean for us to navigate through the code.
So we had a lot of new people on board during the development of Frostpunk and the clarity of the code was very important for us.
So it simplified the architecture and was easier to understand when one component was handled by one system.
But that implied that there was no system or component classes inheritance.
So, we technically couldn't allow the inheritance and through that, the only way the functionality of a component could be expanded was by adding a new component type.
So, if there was a movement component type, for example, the running component type would be another component handled by another system.
we add the functionality to already existing component.
This allowed us to, had for the component to have a unique ID.
So checking if the entity has a component of a type is just comparing bit masks.
So it worked.
But it introduced a new problem.
Because of lack of inheritance, some components were dependent on each other.
And for example, generator is a special building in Frostpunk, the main building in the center that provides heat for the city.
And it has, of course, generator component, but it is also a building, so it requires building component.
We solved that dependency by...
introducing attributes and attribute require component marks component type as prerequisite for another component type.
So when the generator component is added by the design team, the default building component is also added to an entity or the designer is prompt to define the building component if it's not able to be created by default.
And on the other hand, there started to occur a problem with initialization order.
So we initialized components as they were added by the designers, but some component needed to be initialized after another component.
So we introduced attribute adapter component to mark that certain component type should be initialized.
before another component type.
And for example, workplace component is a component that manages the efficiency of the workers inside the building and to properly be initialized, it needs information about what is the amount of people allowed in this building.
So it needs to be added after place for agent component as you can see in the example.
Through the development of the game, the design team pinpointed that a lot of entities are basically the same in some way, so they have similar components attached to them.
And they had to, when creating a new building for example, they had to copy the component definitions that were basically the same for every single building.
To solve that problem and to make the designer's life easier, we introduced component sets.
Component sets are batches of components that the designer can define.
It can be nested inside each other, and it can be attached to entity.
So aside from the component list, the entity also has a pointers to component sets that are added when the entity is initialised.
So when the entity, the building, is a common building like any other, the basic component set is sufficient for them.
But when something special should happen inside the building, the designer always can add the component set and add the component definition.
of, with special configuration and the definition from an entity overloads the definition from a component set. And here is an example of generator component It inherits from some base component type, the component input class is an abstract class that basically combines the component template with components itself and allows the class factory to properly initialize the component.
Then the capital lettered purple, Instructions are macros that allow the RTTI system to work properly.
So it introduces attributes.
As you can see, two attributes require component and add after component, which I spoke earlier.
And then we've got property declarations.
These are also macro definitions that add the class fields to an RTTI system.
And then, of course, our ordinary class members.
And...
For the convenience of usage, we also befriend generator systems so that the system can access protected members of the component.
An overview of our architecture looks like that.
So the green part is what is defined by the design and art teams.
So we've got behavior trees for AI system that is used by AI components and AI systems, but that's the topic for another talk.
Then we've got templates, configuration files, which I'll cover in a moment.
and other things like user interface, like engine render, and so on.
So the game state is held by entity component systems with some helper classes that manage configuration files and the rendering and user interface input is like a black box in this talk.
So we created a basic city builder with some basic economics, but we didn't even start to create a society survival game.
So the design team wanted to start iterating on that.
And they wanted a system that would allow them to control the flow of the game, control the narration, control the special events that occur, either from the story or from the game state itself.
So they needed a system that could allow them to write the story via in-game events, some of them scripted, some of them emerging from the game state. They also needed a way to easily check how the player is doing, what is the state of the city and the state of the citizens.
And another requirement, they wanted to define things once.
So if they define a building in some place in the configuration, then they shouldn't be, shouldn't need to duplicate that definition.
So we needed a system that would allow us to point certain parts of configuration from another parts of configuration.
We introduced a concept of an entry to solve that last problem.
Entry is an abstraction for configuration part.
It is of course an RTTI class with its own unique ID, but it has also a readable name and of course the data it consists.
The idea is that a configuration file, for example, building lists, provides entries then global entry manager reads these entries and the, once more, from another parts of configuration, we are able to point on that entries inside entry manager via entry links.
So for example, we've got config file A, which consists a list of entries of type foo entry.
Then we've got entry manager, so after the game is loaded, the file is read, the entry manager reads the entries and can provide a list of them.
And from another file, we can put an entry link that points at a certain part of configuration.
It was very useful because when entry link is a type of its own, when a class...
an entity I class has a field of an entry type, entry link type, the designer when he's configuring that part of that object, that entity or whatever, he's configuring that is able to pick from the list of available entries.
It's all connected via general user IDs, unique IDs.
So the configuration is always consistent because when an entry that is used somewhere else is deleted, we can always check if the entry link pinpoints on something.
And therefore we can inform the design team that the configuration is wrong, is error.
And as of the narration goes, we introduced Game Events system.
It is basically a script system that is put in XML, then it is loaded by the RTTI system into C++ classes and held in memory that way.
So there is no scripts interpreted during runtime.
And the idea was to...
created for quick prototyping, but with the cleanness and polish of final content, so they could be valid in final content as well.
The main building part of game event systems is of course game event.
Game event is a configuration entry that is built from three lists of elements, triggers, conditions, and effects.
All of these elements are configurable by the design team.
The programming team only provided different types of triggers or conditions or effects.
And with some additional features like local and global variables, it became almost a programming language.
It has its pros and cons that we'll cover in a moment.
So triggers.
Triggers are objects that register themselves for a specific incident in game.
So for example, a specific time of day, death of a citizen, new child born, whatever else you can imagine.
And when that specific incident happens, the trigger is fired.
So here we've got an example from our editor.
A trigger that is named construction of building beacon finished.
its classes building work, the specific building is beacon and the event occurs when the construction is finished.
So the designer is able to configure the trigger a bit so to be specific when the trigger fires but main part of the configuration for conditions is done via conditions system.
So conditions are basically Boolean expressions.
that evaluate of course to true or false and they utilize some helper classes that provide information about the current game state.
All in all they take form of Polish notation expression and in our editor it looks like a tree that is expanded and for example here we've got a comparison of integer comparison of one and amount of bodies, the comparison is lesser than and the left side is configured as constant integer with a value of 1 and the right side is that helper class that I mentioned, it is checking for a resource, in this case bodies. Grim.
And last but not least we've got effects. Effects are simply put functors, so C++ objects are basically functions that can change game state when they fire, when they are executed.
So the flow, the design I could create, I could work on, goes like this.
We've got ECS systems that provide game state.
When certain event in game occurs, then the trigger is fired.
The conditions are checked.
If the conditions are evaluated to true, the effects are executed.
And if the conditions are evaluated to false, nothing happens.
For example, trigger, citizen died from starvation.
Condition, more than 30 deaths from starvation.
Effect, the society should be manifesting or protesting that we need to solve the starvation problem.
Another example, new sick citizen.
If there are more than 10 sick citizens without medical care, start a quest to solve health care problem.
Another example, day three, 12 o'clock, a bit late.
No hunters' huts, no food.
Create a hint for the player to build hunters' huts.
The last missing part of the event system was the context.
So when the event fires, for example, a new child is born, we want that child to be the context of the event.
So for example, we want to give him a name or whatever inside effects.
And that is provided via context.
So every event, when the trigger fires, it assigns a context, an entity.
to that event. And it is valid through the conditions part, the effects part and so on.
So we've got an entity that fired the trigger, but sometimes we need to affect other entities connected somehow by the event. So for example, when a new child is born, we want to name that child, but we also want to raise happiness or hope for the family.
So inside the effects, the designers can put selectors that filter entities through the city, through the game state basically, and execute effects with these selected entities as contexts, so they are able to switch context during the event execution.
And by the way, default context for every event is generator, so when the event can't be really hung on anything, it is hung on generator.
Here is an example from our tool, our editor, of a game event.
It is a first death.
It triggers when a citizen dies.
and it basically creates a tough decision to build cemeteries or to just dispose the body in the snow.
We reused parts of the system, so the conditions were used in requirements for research, the effects were used in technologies and in...
policies that the player could introduce to the city, and the effects of course were used in hard decision choices, so the parts of this system were spread through the whole game.
It proved to be a very useful tool for debugging.
For example, an event could have a trigger that fires when a certain console command is put into.
So it was easy for the design team to test certain story parts just by typing a command and the effects would be executed just like in the game.
It controls all of our flow in game.
The entry system and the fact that we could connect certain parts of configuration with certain events, certain entries, provided a tool to create libraries.
So in one scenario, we've got certain event set, and in another scenario, we could use another event set.
It was very complicated to configure and god, glad that we had designers that could cope with that because it required certain programming skill just to get into the system and without that we wouldn't be able to use that at all.
And of course we are aware that we need a better tool to simplify the configuration because right now it looks like this.
This is a list of directories of events.
when we open one directory there is a list of events and when we get into an event this is a configuration for a single event. The XML that defines that is huge and we need to find a way right now to deal with that somehow. Okay, so...
The designers were happy, but the art team wasn't.
Of course, they created art, but they also needed a gameplay system.
They needed a system that would allow them to check the game state, the conditions that are currently in the city, and change the appearance of buildings based on that.
So, they needed...
to define what visual parts would change, and to define the conditions when they will be changing.
And they wanted to apply them on every single building in the city.
So for example, when the temperature is low, is below zero degrees Celsius, the buildings should be covered in snow.
But when the temperature is higher, the snow should disappear.
When the building is active, there should be an animation that indicates the activity in that building.
When it's not active, maybe a prompt for a player to that the building is not working and he should do something about that.
And so on, so on.
Night, the lights in the buildings should be on, day, they should be off.
So here's an example of a generator in different appearance states.
The first one is the basic state.
The second is when we introduce laws that basically change our city into a dictatorship state.
The third one is when we go too far with our religion to the point of fanaticism.
And the other three are different upgrade states for the generator.
And the tricky part is that we needed a system that would allow us to combine the totalitarian generator with the third or second upgrade. To do that we introduced appearance state.
Appearance state is basically a string label or a config entry that is defined by designers or artists and can be added or removed by game state mechanisms or by effects. A building can have an infinite amount of active appearance states. For example, if you have a building For example, active totalitarian building during night and so on.
And for the visuals, some of these states should be able to be excluded.
So, for example, building during night and not under construction.
And the final visuals of the building depends on the combinations of these appearance states.
The appearance state can affect many, many different things.
Of course, mesh elements, props like flags, like the religious symbols and so on, lights, textures, outlines, shaders, animations, UI icons, sounds, basically everything that surrounds the building, and it has any impact visually or sound-wise on the player.
To aggregate the things that are changed by the appearance, we created appearance overlay.
Appearance overlay is a definition of what changes when this overlay is applied.
So for example, visibility of certain props, animation start, stop, and so on.
When the building is active, the animation should start.
When the building is not active, the animation should stop.
So this combined with appearance conditions creates a system that applies certain overlay on appearance when the conditions are met.
So when the conditions are that the building should be active during night, we should apply appearance overlay that puts on the lights.
And this is how we did it.
This is a simple sample configuration of appearance state.
This is an appearance for a building that is outside required heat zone.
So the building needs to be heated and it isn't.
The conditions are the building is constructed, the building requires heat zone, the place is outside heat zone.
And the weather is different than storm, because during the storm we provide the player with different prompts, not that meaningful, meaningless prompt that the building requires heat zone.
And the overlay is only changing status indicator, in this case it is an icon above the building.
So when these conditions are met, the building has these appearance states.
The icon appears and the players are informed that the building requires heat zone and it isn't inside the heat zone.
So to sum up, the data-driven architecture, as I have shown you in examples, provided us with the ability to quickly iterate with minimum involvement of the programming team.
It allowed us to create rapid prototypes.
and the programmers were only introducing new toys for designers to play with.
And artists, of course.
And the ECS system that lies underneath it glued everything together and was an efficient system that allowed, once again, rapid prototyping and lots of R&D that the game required.
That is all.
Thank you very much.
And thank you.
Thank you.
Thank you very much.
If you have some questions I will gladly answer them.
What can be a template for what?
Component.
If you have some component, you specify template for this component.
What is template?
Template is just the definition of an object.
So for example, the template defines what fields are in the object and what is configurable by the designer.
So the designer only sees the fields that are in the template.
Okay, so component itself does not have fields, configurable fields, or...
No, it does have, but, okay, there is a configuration and there is runtime.
So, in the configuration part we've got templates only that define, that can be configured and create the component.
And when the component lives inside the runtime...
it can change the state and it only has states but the definition remains the same. It's the same concept as with the class definition and class instances.
Thank you.
So with the appearance system that you can have authoritarian, not knight and everything, that can define a huge matrix of different visual configurations for a building, for example.
Did you do like one special mesh for each case, which sounds like that's a lot of meshes, or some kind of combination system so that you overlay the flags over the building, or something like that?
So we used the simplest way the art team could cope with.
So our artists aren't really into configuration.
So we gave them a tool that basically uses the name of the mesh used in the entity so that they can show every single mesh that has that name.
And therefore they do not need to look into the configuration, they only need to look into the elements named in the editor.
So, so say, um, they have to decide for each case, like, uh, I don't know how many case, but if it's fanatic and it's not night, could be a different like visual configuration that if it's, uh, okay.
Right.
Yeah.
They gave the designers and, uh, programmers requirements and we created the configuration for them.
only a few of them could make that configuration. There was a lot of cases, but with the naming convention, we could allow them just to, you know, they put an effect that has night inside it, and it was already configured before, so it would be applied in every building.
The effect with night is there.
Okay, thank you.
Hi. I was just wondering on how you actually managed to create a bridge between your visual and your system because, well, the classic MVC, you want to separate your view from your system, but did you create specific system to create that bridge between your entity, your building, and the visuals?
Well, it is one way communication.
So the flow is always like this.
It always starts with the game state and the visuals depend on the game state.
Just like the view always reads the data.
It's the same concept.
Okay.
And also I just wanted to, did you inspire yourself by existing ECS system or was it 100% custom made?
Once more, I'm sorry?
Sorry, did you inspire yourself by existing ECS system or did you build this from the ground up?
When we started developing Frostpunk it was like four years ago or so.
I don't recall any existing ETS system that was production ready.
But yeah, Unity and Unreal I think they already started developing and there were some papers that we based our system on.
So yeah, it wasn't from the ground our idea, by no means.
But I can't...
a long time ago. I can't really remember what references did we use.
Okay. Thanks. I was just curious. Thank you.
I have a question about a system and component.
You mentioned that one system deals with one component, right?
Yes. So what if the designer needs some function that you need to deal with the data from two components?
Well, the components are accessible via systems, so one system can communicate with another system and get the data from certain components.
It's just the one system can change the components of one type and getting data from another system, another component is like no issue, it's no problem.
So the, what I mean by one system, one component type is that one system can change the data of one component type.
Okay, thanks.
I'm a little green with ECS systems in general, but you mentioned that your old engine didn't support ECS for the visuals and the input.
Is that an area that you would have liked to extend to ECS?
I've heard things in the past that usually the visuals are kept out of ECS systems.
Well, I think that as far as I remember that our engine team is already porting certain parts of the engine to the ECS system.
But as I am stuck with Frostpunk for now, I'm not updated about the newest changes in the engine because it won't affect Frostpunk.
at all. So, but yeah, they, they try to move to ECS even with the rendering, but if they pull that off, I don't know.
Yeah, awesome. Well, thank you very much.
Thanks.
Thank you.
Hi, you mentioned that input and UI were two of the things that had to live outside of the ECS control, but you also mentioned that there were UI recipes. Could you briefly explain what the UI recipes were?
Well, the ECS system and the templates and the RTTI that I was talking about are separate things.
So the UI system uses UI recipes as templates to create user interface.
So once again, we've got editors that create XML files that are read by RTTI and the final UI is created.
Okay, so it was just the data format that was being shared there, but then completely outside of ECS?
Yes.
Gotcha. Okay, thank you.
All right, no more questions, so thank you very much.
