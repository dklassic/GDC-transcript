Welcome to the talk, Plot and Parcel, Procedural Level Design in XCOM 2.
Here's some stuff you haven't heard this week.
Please silence your cell phones.
Also, if you would be so kind as to fill out your review forms, I would appreciate it.
My name is Brian Hess.
I've been a level designer for over 20 years.
I got a start making mods for first-person shooter games in the late 90s like Doom and Quake.
I've worked on multiple genres, first-person shooters, adventure games, MMOs, and tactical strategy games.
My most recent work is as the lead level designer on XCOM 2 and its expansion War of the Chosen.
I design the procedural level system for these titles.
Here's a brief outline for what we'll be discussing in today's talk.
First, we will go through the history of XCOM and XCOM level design.
Then we'll walk through the development of the procedural level design system in XCOM 2.
I'd like to then briefly touch on some of the tools we used to help us in development, then speak about some of the challenges we faced with the system during production.
After evaluating that, we will discuss extending the system in the War of the Chosen expansion, and finally, we will step back and draw some conclusions about what we've learned.
XCOM is a tactical strategy game.
That is, the game has a tactical combat component and a global strategy component.
In playing the game, you alternate between these two modes.
The XCOM franchise started in 1993 with XCOM UFO Defense, which was released by Microprose, Paraxis's predecessor.
This is one of my favorite games in high school, and I have to admit, I was pretty bad at it until I downloaded the unlimited money cheat from CompuServe.
I would never have imagined being able to work in a game like this at that time while I was playing it.
So when the opportunity to do so arose for me in 2012, I jumped on it.
Firaxis's first XCOM game was Enemy Unknown, released in 2012, and its expansion Enemy Within in 2013.
It was followed by XCOM 2 in 2016 and War of the Chosen in 2017.
This talk is about the Firaxis XCOM titles, more specifically the tactical combat part of the game.
At its core, XCOM is a game about hiding behind stuff and shooting aliens.
Here is a brief crash course on the components of an XCOM level.
Three fundamental components are the grid, cover, and fog of war.
Levels are created on a grid of square tiles.
Objects in the world either occupy or straddle these tiles, provide things to hide behind, and affect line of sight.
Standing next to these objects causes you to take cover behind them, providing a defensive bonus.
There are two types of cover, based on the height of the object.
Low cover, the half shield, which grants a small bonus, and high cover, the full shield, which grants a large bonus.
Player-controlled units can only see a certain number of tiles in each direction.
High cover objects also block line of sight.
Players are only aware of enemies that their units have line of sight to, and the map is revealed as players navigate through the level, exposing groups of enemies.
So what makes a good XCOM level?
Map layouts have a considerable amount of control over the challenge level that a tactical mission provides.
The same mission with the same number of enemies played on two differently arranged bases can range from a cakewalk to a rage-inducing fiasco.
The three primary factors that we need to consider are object spacing, cover density, and line of sight.
If cover objects are too sparse, then it is impossible to engage enemies with your entire squad while in cover, and this creates a difficulty spike.
If cover objects are too dense, then map readability becomes an issue.
This increases play time and is frustrating.
In addition, we observe a one-wide rule when constructing XCOM levels.
That is, there must be two empty tiles between each cluster of objects.
This guarantees that cover, even at maximum density, still allows for freedom of movement and minimizes camera blocking issues.
A good XCOM level has a sea of low cover and a smattering of high cover.
A successful XCOM player will maintain high cover with all of their units towards the enemies they are engaging.
High cover also blocks line of sight.
Too much line of sight restriction has negative effects.
Players will often travel past encounters they were intended to engage.
This results in engaging multiple encounters at once, another difficulty spike.
The occasional multi-encounter engagement can prove to be a challenging and memorable experience, but we'd rather have this happen intentionally than have them occur accidentally as a result of bad level design.
Now that we know what makes a good map, let's take a look at the maps that shipped with XCOM Enemy Unknown.
Enemy Unknown shipped with around 80 unique maps and the Enemy Within expansion added around 30 more.
Most of these maps were divided into two categories, urban maps where abduction missions took place and wilderness maps where UFO missions took place.
Vast amounts of custom art was created for each level.
Custom sidewalks and roads were sized to fit.
Maps had unique signage and cover props.
One of the most expensive aspects was that each building was custom built.
Buildings were easily the most resource-intensive part of tactical maps.
Internally, we were pleased with the look and feel of these maps.
However, they took quite a long time to put together.
The average EU abduction map took a number of man months to complete.
In a single campaign playthrough, you could play so many tactical missions that you would start seeing the same maps over again.
On your second playthrough, everything started seeming very familiar.
In a game with a lot of replayability, repeat maps were one of the top reasons people burned out on the game.
The DLCs raised the art bar on the maps.
If we sold 80 maps for 60 bucks and we're charging 7 bucks for 3 maps, these better be pretty fancy maps.
And our expansion maps can't look worse than our DLC ones.
It was an arms race.
This just put us further in the hole time-wise.
The image on this slide is one of our DLC maps called Deluge.
It was beautiful and iconic.
But aside the vehicles, it was almost entirely custom one-off art and it took a considerable amount of time to create.
One of the positive advancements of the expansion came as a result of an experiment.
In an attempt to extend content cheaply and enemy within, we took some of the base game maps, moved the player star to the other side, and altered the time of day.
Enemy unknown levels were mostly large enough that the player never made it to the other corner of the map before the mission ended.
You start in this space you've never been in before and eventually you get to places you recognize, but from the opposite direction.
They played like totally new levels.
Recognizing these spaces again in a different way often added to the experience, not taking away from it as we had feared.
Both of these concepts, that is, randomized player starts and multiple times a day for each map, were added to the pool of ideas for the sequel as ways to increase variety.
Now that we've gone over the history of XCOM previous to the introduction of procedural level design, I'd like to shift over to its incorporation into the XCOM tactical game, starting with pre-production on XCOM 2 in 2013.
We established some goals for what we wanted out of the procedural system before we started developing it in pre-production.
The first goal was to remove expensive environment art as a bottleneck from getting more maps in the game.
We're not staffing up to make the sequel, but we need to ship more maps to the game this time around.
Another goal was the pursuit of a concept we called Play Forever, which is that you'd never see the same map twice while playing.
We'd like to remove map fatigue as a source of player burnout.
Finally, we wanted to switch to using modular building kits, which allow the assembly of structures using a generic library.
This is an old concept that has been discussed in detail in a number of excellent GDC talks.
This wasn't directly related to the procedural system, but we knew that we were going to need a lot more buildings, and since they were so expensive, we had to find some way to speed up that process.
This was the original idea of how to do procedural maps before we actually started working on it.
We would start with a large map and cut holes where the buildings were.
We would create the multiple buildings in separate map files and stream them in where the holes in the other map were.
We called the master map with the holes in it a plot and the streamed in building maps as parcels.
In the image on the screen, the blue and gray checkerboard boxes each represent individual parcels.
You're going to see a few more checkered board boxes during this talk.
As I mentioned earlier, Enemy Unknown shipped with two major plot types, urban and wilderness.
We wanted to expand the number of plot types to five for XCOM 2.
The plot types we wanted to make were city center, wilderness, small towns, shanty towns, and alien facilities.
The images on the screen are what these plot types ended up looking like when they shipped with XCOM 2.
The additional plot types were added to help flesh out the universe and tell the story of the alien occupation of Earth in the last 20 years since Enemy Unknown.
We were betting that we could get all of this additional content done much faster than the previous game due to our shiny new procedural system, even though we had not yet proven it could work.
Now that we had our expanded list of plot types, we came up with some initial rules on how these plots would be constructed.
Because there was still a significant art cost in creating a plot, even with the buildings removed, the goal was to have as few plots as possible.
To support that goal, plots needed to support all missions.
They also needed to be large enough to support the mission that demanded the most amount of real estate, ballooning their size.
The original plan for enemy reinforcements was that they would walk in from a road on the edge of the map.
This required roads exiting the gameplay space at regular intervals.
We also planned to add large units which occupied multiple tiles and needed paths free from cover objects in order to travel around the map, which meant no buildings in these spaces.
This means roads around every structure as well as the edge of the map.
Large unit and reinforcement support made the maps mostly roads.
Roads were in the plot and required an art pass in every plot.
More roads on a plot meant more art time per plot created.
The image on the screen was one of our first prototype city plots.
Note the preponderance of roads and the significant square footage.
Here are some rules that we came up with for our first round of parcels.
Parcels were divided into three buckets based on size.
All parcels were 12 tiles squared.
Medium parcels were 12 by 24 tiles and large parcels were 24 tiles squared.
On the right are three shipping city center parcels, one of each size.
The idea behind this was that since our plan involved punching holes in the plot for just buildings, we needed more granularity over the sizes the buildings could occupy so that we weren't wasting any space.
The buildings that we evaluated from the enemy unknown levels were all slightly different sizes but could fit within one of the three buckets.
We could ensure the buildings could both occupy almost all of a given parcel and be consistent sizes by using our modular building kit, which was base three.
Now we had three separate buckets of buildings to make sure we had enough of.
Because large parcels had four times the real estate of a small parcel, it stood to reason that they would take four times as long to create.
In the interest of replayability, we wanted to make more smaller parcels and fewer larger ones.
We also wanted a large parcel to have the potential to appear on every plot.
To try and accommodate this, we added the concept of parcel subdivision.
A large parcel slot on a plot could spawn instead as two mediums or as a medium and two smalls.
This way, we could worry less about which building sizes we needed more of since the building slots were somewhat interchangeable.
To maximize replayability, we also had parcels loading into spaces at a random cardinal orientation.
So we've made our first set of plots and we have to evaluate our work before moving forward.
Dressing up all of the rows on each plot was very time consuming.
Most missions required less space than the plots were built to.
This was bad because players used the edge of the map to help them figure out which direction to go.
And in a large map, you never see the edge, putting the onus on the mission UI to keep players heading in the right direction.
It also made load times longer, memory footprints higher, and performance worse.
Even with the buildings cut out and able to be shared between plots, this still wasn't a huge time savings in tactical map creation.
Because the parcels were all roughly the same size and shape as the other parcels in that bucket, combat wasn't much different when one building was substituted in place of another.
We weren't there yet.
We started looking for solutions to some of the plot problems that we were having.
What if we took the parts of the plot that weren't parcels and proceduralized them in a similar fashion?
We were already building road networks for modular road kits.
What if we saved off a few variations of each piece from the kit as a separate map, rearranged the cover layout, and sent it through our art pipeline?
Thus, the idea of plot cover parcels, or PCPs, was born.
The rules were slightly different than parcels, though.
Unlike parcels, it was okay to reuse a PCP multiple times in a tactical match.
They were small and generic enough that, unless two identical ones were side by side and facing the same direction, you couldn't tell that we were recycling content.
Furthermore, by divorcing the art from the map layout, we could create any number of plot layouts without additional art cost.
This was the first major breakthrough of procedural development.
The images on this slide were the results of the first PCP prototype plot.
They were screenshots of the same section of a single plot loaded six times.
We were pretty excited about the variety we could get out of a single plot with all of these new systems in place.
PCPs resulted in massive time savings for the environment artist as they could make a set of one to three dozen PCPs to populate in any number of plots.
It also allowed level design the freedom to experiment much more with level layouts as assembling a plot of parcels and PCPs could be done in about an hour.
Each plot type had its own PCP sets.
For example, the small town street set had 24 pieces, four courts, two corners, eight straightaways of two different lengths, and 10 intersections of various types with streets, boulevards, and train tracks.
The picture shows one of our first stabs at a complete set of PCPs for the wilderness plot type.
There is a set of dirt roads, divided highways, streams, and woods.
PCP piece variations allowed for variety of gameplay as well as visual variation, as the cover layout was different in each variation.
After the initial round of building construction, we took stock of the buildings we had made and how they were working in game.
Level designers were struggling to build building interiors that had enough space to sell a particular theme while obeying all of our gameplay restrictions on layout and the space provided.
It wasn't so hard to fill out a large parcel, but it was sure hard to make a coherent space out of a small or medium one.
Because we had to leave unoccupied tiles on the edge of each map in order to observe the one wide rule, a 12 by 12 parcel could only support a nine by nine building.
Okay.
So let's retrofit all the parcels to be base 14.
Well, we can fit a 12 by 12 building and a small parcel now, so the buildings are easier to make coherent spaces out of, but the gameplay still isn't there.
The picture shows one of our early prototype buildings using some old XCOM 1 assets and test pieces.
There's nothing to hide behind next to the building while moving down the street.
Gameplay testing was showing that buildings played better with cover objects on the outside of them in order for you to be able to fight down the more open spaces adjacent to them.
In order to accommodate that, we would have to shrink a building on a 14 by 14 parcel back from 12 by 12 to nine by nine with our base three modular building kit.
Okay, so what if the parcels got bigger again?
So we went up to base 16 and this proved to be big enough.
Buildings could be large enough to convincingly sell a space and there was enough room in the parcel around the building to support cover arrangements as well.
Another thing we noticed is that while our parcel subdivision tech was making deciding the right number of buildings to build of each size easier, it looked really weird to have all these unrelated buildings all adjacent in this way.
Every time we loaded a map with a subdivided parcel in it, it felt more like a hodgepodge of assets than an arranged space.
We never did find a way to do this in a way that didn't feel off and we turned it off.
It did, however, get us thinking about the relationship of a building to its surrounding space.
We had stores coming in with their storefronts facing away from the roads and this didn't make much sense either.
In order to address these issues, we came up with some ideas.
The first was that of a parcel facing.
When a parcel was defined, the side that was meant to be adjacent to the road was identified as the face.
Each parcel in a plot had all of the sides adjacent to the roads marked as facings.
These were represented by yellow arrows in the image.
When a parcel was chosen to load into a plot, it would only come in at the rotation where its defined facing would match those allowed on the plot.
The original design was that a parcel could come in at any rotation to maximize variety.
While the new design was certainly less random than the original design, the proper orientation of a building was pretty critical in creating a believable space.
We had a number of parcels that included parking lots or other vehicle access.
Having these areas ringed in by sidewalk was pretty weird.
Were all of these cars hopping curbs every time they wanted to park?
Driveways existed in the plot, not the parcel, however, so they would have to be spawned in only where they were appropriate.
So driveways became part of the parcel definition as well, and parcels would only come into a plot in a space that had all the driveways available that it needed.
as a driveway had to connect to a road in the plot.
The picture is what a parcel looks like in a plot in our editor.
Excuse the programmer art.
The arrows represent acceptable facings and the smaller squares are where the driveway show up.
After placing a parcel in a plot, you can then toggle these settings per parcel based on the surrounding road networks.
This technology was delicate, however, as it was easy to define a parcel so strictly that it rarely, if ever, showed up.
If a given parcel had a specific facing as well as multiple driveway requirements, there may be only one or two plots that would accommodate it.
And in those plots, it had to win the role against the other parcels that would also fit into that slot.
There wasn't much point in building a parcel that no one would see.
So these concepts had to be used carefully in order to minimize this.
Typically, a parcel either had a driveway if it had a parking lot or a facing if it didn't, but never both.
We also added markup to each parcel and PCP in the game to provide eligible locations for the XCOM squad to fast rope down from the Sky Ranger at the beginning of the mission.
The number of player starts in each map was determined by its size, providing a uniform density of start locations for the greatest amount of flexibility and variation.
Another iteration on parcel development was to introduce the concept of zones.
Now that we had a lot of buildings for each plot type, they were coming in in strange ways.
Small towns had two components, neighborhoods and downtown retail stores.
It was weird to see a single family home on the same block as a shopping center.
These buildings made more sense when they were clustered up.
Homes around other homes, shops all in a row.
By zoning parcels inside of plots, we could guarantee this outcome.
Zones, facing, and driveways helped immensely with the believability of a space.
Buildings now appeared on screen as you would expect them to in real life.
They were oriented towards the road, were grounded with driveways, and were surrounded with similar structures.
However, this came at a cost.
We had significantly reduced the number of parcels that could appear at any given spot in a plot.
In order to achieve the same amount of variation in each plot, we would have to create more parcels of each type.
Zones were paying dividends and directing future parcel authoring.
Once we had added zones to all of our parcel definitions, they generally fell within one of two categories per plot type and we focused on that.
Zone specific plots were created for each plot type.
For example, the image on the left is a small town neighborhood.
zone plot, and the right is a downtown retail zone plot.
Both of these zones were considered small town.
They shared PCPs and most of their art.
Maps shrunk in size from initial estimates as missions came online and we experimented with how far we wanted the XCOM squad to travel in order to reach their objective.
This kind of experimentation was much easier now that we no longer had to involve an artist in order to accomplish it.
Through iteration, our parcel sizes were now 16 by 16, 16 by 32, and 32 by 32.
Nice base eight numbers.
Initial PCPs were sized to the dimensions of their contents, however.
We had six tile wide roads, 10 tile wide roads, and 16 tile wide roads.
None of these numbers were compatible and it was impossible to assemble an asymmetrical plot with all of these elements.
We settled on base 8 and changed the sizes of all the PCPs to match our parcels.
This greatly eased plot assembly and allowed for significantly increased layout variation.
Reinforcements that walked in from the side often took a few turns to reach the combat, minimizing their impact.
A troop transport system was developed so that reinforcements could now fly into any point on the map, which made pacing combat easier.
Troops could land at any of the player starts we had placed in each map.
Because we had placed so many, we knew there would always be a valid location nearby for this to happen.
It had a great side benefit for us as well, as it eliminated the need for road networks around the edge of the map.
Large unit support was also cut as we solved their pathing issues by having them travel through and destroy objects instead, which made them feel more powerful as well.
Without the need for roads around the edge of the map and around every building, we could alter the layout of our plots to have more buildings and fewer roads.
This was a big improvement to both the visuals and the gameplay for these maps, as visual interest and better gameplay was in parcels, not road networks.
The picture on the left was one of our older plots.
It had eight parcels and 40 PCPs.
The plot on the right was shrunk after the rules change.
It contained only four parcels and 20 PCPs.
With fewer parcels and PCPs loading per plot, we were getting more variation out of the same number of maps that we had created, as players were only seeing half as many each time they loaded a map.
I've spent a lot of time so far talking about the development of plot and parcel maps.
I'd like to briefly shift to mention some of the tools that we developed in order to make development easier.
Asset swapping was another procedural component that we developed during production that ended up saving a lot of our time as well.
We ended up shipping around 40 parcels and around 130 PCPs for the wilderness plot type, which was a temperate forest.
The original plan was to have a similar suite of maps for a pair of sister plot types, the arid wilderness and the tundra wilderness.
We had the arid and tundra meshes and materials created already, so we started by creating a set of temperate PCPs, manually swapping the materials and meshes in each map to the arid and tundra versions, then saving them out as separate files.
This was really time consuming, as was the maintenance of these additional hundreds of maps.
I managed to convince a programmer to write a system that would automatically do these predefined material and mesh swaps during load in game.
Temperate, Arid, and Tundra were defined as biomes.
All maps were constructed as temperate and swapped on the fly as the game requested a level of a different biome.
Now we only had to maintain a third of the maps we had originally scheduled for, which saved man months of work.
While the environment artists got out of an art past on hundreds of additional maps, they had to make Arid and Tundra versions of all of the cover assets and deco that we had made for the temperate wilderness.
that were the same size and shape, which was challenging.
The picture is the original test map that we used to plan out which assets we planned to swap and their equivalent for each biome.
The assets that we weren't able to find swaps for would live in a biome only deco layer in each map.
While this required the aforementioned dreaded comprehensive pass through all maps to add, there's just no error replacement for something like icicles.
You can't swap everything.
We eventually expanded this system to include map swaps as well.
We couldn't make our stream PCP set work in arid.
It looked more like a ditch.
However, one of our environment artists created a beautiful riverbed set that swapped in when a wilderness map with a stream loaded into an arid biome.
The images on the screen are the same wilderness stream plot in all three biomes.
As you can see, the ARID version has a slightly different layout, and there are elements of biome-specific deco in all three.
This system also worked on maps for other plot types.
Now we had ARID small towns and tundra shantytowns for very little extra effort.
It wasn't part of the original plan, but it came free with the technology.
This asset swap system was further extended to provide visual variation in a number of different ways.
We created a number of color variations for each civilian vehicle that the game would randomly choose between on load that kept things looking fresh.
We were also able to swap out posters and signs and other miscellaneous deco.
Our original method for testing new parcels that we created in-game was to pick a plot that they were eligible to appear in and reload it until the parcel that we wanted to test appeared.
This wasn't terribly efficient.
As we created more and more parcels, the strategy became to load the plot a few times to see if you got lucky, then get impatient enough to edit the parcel definitions locally to comment out all of the other parcels except for the one that you wanted.
Our heroic systems programmer rose to meet this challenge and created Tactical Quick Launch, or TQL.
TQL could load the plot without launching the tactical game.
The plot would then load all of the component parcel and PCP maps as you watched.
On slower computers, you could see the individual maps wink into existence.
This gave the people working on the tactical game an appreciation for what was going on under the hood.
One of the key features of TQL was that after the plot had loaded, you could select any parcel on the map and change it from a menu to any other parcel that would be eligible to fill in that slot.
Parcel testing just got a lot easier.
Eventually, a rudimentary menu was added that would allow you to change a number of variables before loading the map.
You could select the time of day, the biome, the mission you wanted to go on, the squad you were playing with, how difficult the enemy should be, etc.
Once you hit start, it would launch a tactical game on the map you had just constructed.
This was a huge boon to testing and improving the game in general.
I don't think we could have pulled it off without TQL.
Now that we've had a glimpse at the tools, I'd like to talk about some of the challenges we ran into later in production on XCOM 2.
Once we had the entire game in place and were able to start doing complete campaign playthroughs, we started picking up on an issue with how our tactical missions were playing out.
Being able to go on any mission in any of our five plot types really genericized the spaces.
No place really had an identity.
Our solution to this issue was to pair specific plot types with specific missions.
Previous to the iteration, you could have gone on a Guerrilla Ops mission on any of the six plot types.
Now, you would only go on Guerrilla Ops in small towns.
This required rebuilding all of the plots in the game.
While this was a pretty major reconfiguration, it was actually a good thing.
It allowed us to once again shrink our plots and tailor their size to be mission specific, as some missions required more space than others, and previously all plots had to be big enough to accommodate the mission that required the most amount of real estate.
This helped with player navigation, as it was much easier, it was much clearer which direction to go when you started next to or ran up against the edge of the map.
It also reduced memory footprint, loading times, and improved performance.
Thanks to our map setup, we lost zero art in this conversion.
It took me a week to reconstruct everything, and the game was better off for it.
If this was done on Enemy Unknown, it would have required emergency surgery on every tactical map, and it couldn't have been done at that point in production without slipping the ship date.
Being able to address this quickly was a good indication that we had improved our pipeline significantly.
Now that we were doing regular full game play throughs, it became apparent that having all tactical missions be random left something missing.
In Enemy Unknown, we had a series of what we called tentpole missions.
They advance the story in key places and usually involve cinematics.
We needed something like this for XCOM too, but these were big budget affairs and we were fairly late in production.
Perhaps we can leverage our procedural system to cut down on the amount of work it takes to put one of these together.
What if we made the map lead up procedural but the final destination was a static parcel with narrative elements including cinematics and VO?
This proved to be a good hybrid as the levels came together relatively quickly.
Instead of making an entire map for these custom narrative missions, we created a single 32 by 32 parcel for them and poured all of the effort into that one small space.
They went together rather smoothly.
The images on the screen are a black site, our first Golden Path mission, and the Psygate, which was our third.
Apologies if either of these were spoilers.
When the final ratio of missions was established, this put a third of the missions into one of the five plot types.
People playing the game were reporting that they were seeing a lot of small town, way more than the other plot types.
What if we added another plot type to the game to split the load of guerrilla ops missions?
Okay, but our other plot types typically have three dozen parcels and six dozen PCPs to support them, and we don't have enough time to build that many new maps.
The obvious question that we hadn't considered to that point was, well, do we really need that many maps to sell a new plot type?
We only had enough time in the schedule to build half that amount without crunching.
We decided to cross our fingers and take a chance in the reduced number of maps being enough.
Slums came in real hot, but we got it all done in time to be play-sested and ship with the title.
As it turns out, the more plot types you have, the less content you need for each one.
There was enough Slums content to support a single playthrough without getting any repeat content.
Only our most hardcore fans noticed that the Slums was a less robust set than the others.
Because we built the plot type with all the knowledge and experience of building the others, we were able to take it farther more quickly.
It ended up being one of the most iconic spaces and was featured in a lot of marketing.
I was happy to have been wrong on this one.
Okay, so now that we've shipped XCOM 2, how did we do?
XCOM 2 shipped with around 80 plots, a comparable number to the 80 tactical maps that ship with Enemy Unknown.
However, these plots had over 200 parcels and 450 PCPs to support them.
While we had technically the same number of map layouts, between all the content loading procedurally inside of them, each layout could provide a dramatically different visual appearance in gameplay experience.
Watching people play and talk about the game, tactical maps were generally well regarded, and people were playing through the game multiple times without complaining about them, which is one of our main goals.
Also, we were all playing the game over and over internally, and I would occasionally hear from a co-worker about how he had come across some negative content in his third playthrough that he had never seen before and marveled at how much stuff we had made.
Well, that's cool, but wait a second.
Did we make too much stuff?
How many playthroughs are okay before content is repeated?
We underestimated how much we could stretch our content, and as a result, we built more than we needed to.
We planned on playing through a campaign without seeing any individual building twice.
With all of the other visual variation going on, the location of the building inside the plot, the rotation it came in at, and the different objectives associated with it, it was okay to see a building more than once.
Sometimes it was cooler to recognize a building, then play through it in a different way.
The takeaway is that future content could involve fewer maps, which was a valuable lesson for expansion planning.
Not long after XCOM 2 was out the door, we began planning for an expansion pack.
A traditional video game expansion pack is typically a discrete set of content that lives alongside the base game campaign.
What makes a Firaxis expansion pack so exciting is that they often involve revisiting elements of the core game.
The XCOM 2 expansion was no exception to this.
As a level designer, I've had very few opportunities to alter content posts yet, yet it's a fairly common occurrence to look back on old work with the benefit of distance and hindsight and come up with ways to improve upon it.
In addition, no amount of internal testing and evaluation will substitute for the feedback you get from reading forums and watching Twitch post-launch.
One of what I thought was the more valuable and actionable pieces of feedback that bubbled up from all of our post-launch playthroughs and from observing the internet was regarding our plot types.
While the various plot types we had created from XCOM 2 were visually distinct, they didn't vary much in gameplay.
This was something that we wanted to address in the expansion.
But before we could address this, we had a bunch of new missions planned that required a bunch of new plot types.
We now had a much better understanding of how everything fit together, and we could use this knowledge to take the procedural system farther than we had on the base game.
I'd like to walk through a few of these now.
The idea for the abandoned city spawned from a conversation lamenting the cost of building interiors.
Building interiors are the most expensive custom part of an XCOM map, and took the longest time to create.
However, the game encourages players to travel via the rooftop in order to gain the aiming bonuses against units on the ground and fewer chances of being surprised by the more open lines of sight on the rooftops.
I postulated that we could address the problem without changing the gameplay mechanics or the art.
What if we built a city without any roofs?
Obviously, the buildings themselves had to have roofs, but they didn't have to be accessible to the player.
We'll make them go inside, by golly.
Exploring this idea led to the discovery that it was tough to make a believable, dense urban environment out of standalone buildings that were all 16 by 16, 16 by 32, and 32 by 32.
The buildings felt like they needed to be larger, but the best gameplay coming out of the plot type was the fighting into and out of buildings.
I wanted to proceduralize our buildings, but all of our visibility and other technical markup required the entire building to exist within a single map file.
We wrote some tech to allow a single building to span multiple parcels.
This way, we could have buildings the size and shape that we needed without losing the visual and gameplay variety of the procedural system.
Armed with our previous conclusion that we could make the system out of fewer maps, the entire block building system is only 16 pieces.
There were four each of building end caps, corners, straights, and T intersections.
Because each plot had a differently sized and shaped block building.
No two buildings feel the same.
Tunnels were another attempt to extend the game in a different direction.
Tunnels is an entirely interior plot type with limited sight lines and negative space.
The visual focus of the tunnels is on the PCPs and not the parcels.
The parcels are mostly generic mechanical spaces and the art love went into the expansive subway tunnels and the cathedral-like sewers.
Because they are procedural, they share a lot of filler content which saved quite a bit on our time.
The sewer tunnels are wide and open and have a pit running down the center which cannot be entered but is regularly crossed by bridges which frequently became choke points.
This produces an interesting difference in combat from the limited sight lines and verticality of the subway tunnels.
Chosen Strongholds were spawned by the idea of creating a procedural dungeon crawl in XCOM.
Continuing with the idea of creating as few maps as possible to support this, how many unique 16 by 16 rooms do we need to support three dungeon runs of seven room dungeons?
After a lot of experimentation, we ended up creating 15 rooms.
Because the majority of the combat occurred between two rooms, randomizing the order of the rooms appeared had a profound effect upon the gameplay.
This spawned an interesting conversation with the environment artist I was paired with on this plot type.
He was upset that the layout of the base made no logical sense.
He was expecting the player to start at the entrance to the base and fight through the rooms in the order that a guy building a functioning base would place them in.
We could have built that dungeon procedurally, but I expect we would have had to make three times the number of rooms in order to have them in a sensical order and still get the gameplay variation we were looking for.
It raises an interesting question.
How much do these spaces need to make sense?
I pointed out all the other shortcuts and liberties we took on the other plot types for the sake of gameplay.
Has anyone noticed that there isn't a single bathroom in all of XCOM?
Personally, I think there's a lot of leeway available in the in-game representation of reality that you have before you actually break immersion for the player, and no one playing the game will pay as much attention to it as the people who are working on it.
The xeniform biome was originally conceived as its own plot type, similar to the idea of having arid and tundra versions of the wilderness.
Just like the other two, the procedural solution to implementing this was to create a fourth swap type for wilderness assets.
We made a fourth set of rocks, trees, ground deco, and terrain materials that simulated alien flora that had been released into the terrestrial wild, corrupting it.
We created new times of day with unusual colors and effects that would only load with a new biome type, furthering the visual difference.
This swap could be applied to hundreds of maps that we had created for the base game.
In this way, the procedural system opened up new avenues of development for an expansion, as we could alter base game content without editing any of it.
The two screenshots are of the same base game wilderness lake parcel.
The left is the tempered version, as it was constructed in the editor.
The right is after going a swap to the xenoform biome.
Fairly dramatic visual departure.
One of our goals in the expansion was to add gameplay variation to the base game plot types to match their distinct visual variation.
To solve this, we added a unique PCP set to each plot type to help change the way they played.
There was a focus on adding verticality and negative space to plots, with each plot type getting its own unique take on the theme.
Wilderness and Cheney got coastal cliffs, city center got canals, slums got washes, retaining walls, and modular overpasses, and small town got ravines.
In order to incorporate these new items so their appearance would be balanced, I had to redo all 80 plots in the game.
It only took a couple of weeks, and its benefits were twofold.
The plots now centered around the gameplay defining PCP sets for that plot type, creating the gameplay variety we were looking for.
Plots could now be shrunk even further due to mission iteration that took place after the original plots were constructed.
The new plots were as tight as we could get them and they were playing better than ever.
We also wanted to coax players back into buildings, something we had addressed in the abandoned city but needed attention everywhere else.
Building interiors were interfering with our concealment system.
Jumping through windows, an ex-com soldier's preferred method of building entry, would break concealment.
A lot of our new missions were on timers, and players had to spend extra turns moving to and opening doors in order to make a concealed squad go through the interior.
we gained the ability to set the starting state of doors and took a pass through the base game buildings, setting a bunch of them to start open.
This significantly improved the efficiency of concealed movement and building interiors.
Now that you've heard where we've taken our procedural system, it's time to take a step back and look at the advantages and disadvantages of switching to using this system.
I think the talk thus far has demonstrated the specifics of most of the advantages.
It's also worth noting the benefit that the procedural system had for modders.
The Long War II guys, our flagship total conversion mod, were able to rearrange quite a few things to suit their own ends without creating very many new parcels or PCPs.
They mostly focused on creating new plot layouts to suit the mission types they had created.
It's worth going through some of the disadvantages as well.
The environment artists almost all preferred making static maps.
They felt like they lost a lot of control over the appearance of a scene through the procedural system, and they were right.
Firaxis prioritizes gameplay over visuals, but this is not true for many studios, and it may be a hard sell for a more artist-centric environment.
Cinematics were more difficult to create in a procedural environment.
A fun conversation to have with a cinematic artist is to tell them that the framing and background of their shot will change every time they watch it.
We also never developed the technology to write out a procedurally generated map as a static map, so cinematic artists often had no idea how much space they had to work with.
It was hard to fit a lot of visual storytelling into the smaller map chunks.
This was a staple of the Enemy Unknown maps, and we lost it to some degree with the Switch.
This is not necessarily a disadvantage of going procedural, it was just one that we ended up with as a result of choosing to use smaller map sizes.
The initial idea behind taking XCOM procedural was, it's better because it's different every time.
Paraxis has a long history of procedural content development with the Civilization series, but that doesn't necessarily translate into every genre.
Outside of scenarios, Civilization doesn't even have level designers.
If I had to approach a procedural level design system again, I would be more careful with what I was willing to leave to chance.
There's a lot to be said for handcrafted content, and there's something to be lost for abandoning it entirely.
The question that comes out of it is, how procedural does your game need to be?
There's a sliding scale between replayability and character.
More smaller maps provide the most variety, but can lack soul.
Fewer larger maps allows for more visual storytelling at the expense of replayability.
Where do you want to land on the spectrum?
That's all I got.
So it looks like we have a few minutes for questions if anyone has one wants to come up to the mic.
Hi, I'm wondering all the mission contents of the enemy placement where the objective R was working with using only procedural generated map.
Was it metadata in the plot or parcel themselves or there was something that the level designer was adding afterwards?
All of the mission specific metadata was added to all of the parcels and PCPs.
Each map knew what missions it was allowed for and that was added to the definition.
And so that was covering all the potential variation of valid mission in the map.
There was a lot of markup.
Perfect, thanks.
Over here.
How do you deal with more global issues such as lighting and performance?
Well, one of the downsides of switching to the procedural system was that in Enemy Unknown, we were using pre-rendered lighting that was baked out into the maps, but that was no longer an option with the procedural system.
So we switched to a deferred system, which, you know, had the lighting rendering in real time, and that didn't look quite as good.
And it was more expensive, but the variety that we got from being able to load any map with a different time of day, I think more than made up for it.
Over here.
Did you support tools for, say I'm a level designer, and for this one story mission I want guys to spawn this way and run around the right side of this building, did you support that kind of specific scripting?
You mean for enemies?
Yeah, for enemies or allies.
We didn't do a lot of direct control over enemies via scripting.
Most of that was handled by the system.
We could call for additional enemies, but the game decided on the fly where it wanted to put them based on where the player was.
Gotcha.
Thanks.
Alright.
Well, I think we're out of questions.
Thanks for coming.
