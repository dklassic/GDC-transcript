Good afternoon. Wow. I'm Steve Golson and you're all here to hear about Ms. Pac-Man. And here in the 21st century, they tell me we have to turn off our phones. So we'll see. How does that work again? So turn off your phone, please. And make it quiet. That's good.
Let's get started.
Thank you for being here.
So who am I?
So I'm Steve Golson.
And a very long time ago, I did game design.
And so I'm here to give you whatever pearls of wisdom you might deign to take.
Who are you?
So let's ask questions.
So who has played Ms. Pac-Man on an actual arcade machine?
Oh, awesome.
OK.
OK.
Who's played it in an actual arcade?
This is awesome.
All right.
All right.
All right.
Who remembers playing it when it first came out? Okay, we're all over 50. Am I right? And then lastly, do we have any hardware people in the room? Hardware designers? Yeah, not so many. Long ago it would have been a lot of you, but that's okay. So talk about hardware. You software people, just nod your heads. Okay.
All right.
So what was General Computer?
General Computer was a company 35 years ago, and I'll talk a little bit about how it came to be.
We did a tremendous amount of game design work in the early 80s.
And this is.
1981 through 1984 or so. And why it matters is because games are just insanely amounts of fun. And it was fun designing them back then and it's fun doing it today. So I'm just going to try to give you a little bit of a flavor of what it was and talk specifically about Ms. Pac-Man. But to talk about Ms. Pac-Man, I have to give you a little more history.
So this all goes back to MIT. Any MIT people here?
Yeah, okay. In 1978, and there were two students in this dormitory where I lived, Doug McCray and Kevin Curran. And they started up a partnership, the two of them, to do pinball games and video games in our dormitory. Long story about how that came about. But the two of them formed this partnership, and, hey, we're going to run pinball games and run them.
They eventually spread out into three different dorms and had like over 20 machines. It was very successful running games because you had this captive audience of MIT students who this was one of the few ways you could relax was to go and play video games and pinball games. So they came up to speed on how do you maintain these games and how do you keep them operating and how do you make money at it?
One of the things that was common back then were what were called speed-up kits.
And the philosophy behind a speed-up kit is, well, you need to understand the dynamics of the arcade industry, is that you'd bring out a new game, and it costs $2,000, $2,500.
You'd put it in your arcade or put it out on play.
And you'd get great revenues for a while.
And then the revenues would drop off.
Your coin drop would reduce, as we say.
And what's wrong?
Well, the players have gotten really good at the game.
They figured out how to beat the game and they would play for longer and longer and longer. But there's nothing physically wrong with the machine. The display is fine. The controls are fine. The cabinet is fine. They're learning how to beat the software.
So these kits started being created and sold.
And they were initially called speed-up kits.
And the reason they were called speed-up kits was because, really, the first one came for asteroids.
Very popular game from Atari in 1979.
Who's played Asteroids?
An actual Asteroids machine.
It's vector driven.
Oh, want to have a good time?
Go behind the back of the Asteroids machine and crank up the brightness.
Anyone ever done that?
Because then you can watch.
how it draws the characters on the screen. It's very cool to see. The way asteroids works is it's interrupt driven. Every four milliseconds the processor gets interrupted. It wakes up, scans the controls, draws the screen, goes back to sleep. And it waits for the next interrupt. So some smart hardware guy said all I have to do is speed up that tick and the game will run faster.
hints speed up kit. Now, everybody likes this. The game owner likes it because he's making more money. The players actually like it because they have more of a challenge. Here's an asteroid speed up kit. This is actually on my asteroids that I have in my basement. Now, notice this is a complete hardware modification. There's no software has been harmed in the making of this speed up kit. All hardware. Which the arcade owners understood. They understood hardware.
Okay, what's the next game?
Galaxian, very popular game.
Now, Galaxian speed-up kit, or modification kit, you actually modify the software, but you didn't have to understand very much.
It's a table-driven game.
So if you found the tables in ROM, if you found the single byte that controlled how many attacking characters there are on the first wave, and you changed that table, well, you modified the game.
and it got harder, it got better, and so these super Galaxian kits came about. Oh, and be sure and change the prompt so it doesn't say Galaxian anymore. It says some other name you've come up with. So this would be sold as a complete new ROM set for the game, even though you've only changed a few percent of the code, maybe 10%. The only way you could provide this to the end user is by selling them a complete new set of ROMs.
Can anyone tell me why that's a problem?
Well, it's a problem because of copyright, because you're copying most of the codes.
That's one problem.
Number two is you're selling them a lot of expensive ROMs when you only need to sell them a few.
And number three, and the biggest problem, is anybody who knows how to copy a ROM can now copy your kit.
That's the worst problem of all.
So what are we gonna do?
Oh, Pac-Man, Pac-Man very similar to Galaxian.
The maze is a table in ROM.
And so if you go in and change the characters of the table, you can change the maze.
And also the graphics ROMs are separate little ROMs.
If you go in and change them, you change the characters of the game.
And there were a number of kits for Pac-Man that put in new mazes and put in new characters.
And so, ooh, cool game.
Everything else stayed the same.
Missile Command.
Missile Command was really popular at MIT.
nuclear war, explosions, it was pretty cool. And Doug and Kevin had three missile command games. I mean, they're like sophomores.
This is early in their career. But missile command, and the same phenomenon happened with missile command was lots of revenue and then boom, the revenue drops off as the players got good at it. So Doug and Kevin start looking around, who's got a speed up kit? Who's got an enhancement kit for missile command?
nobody. Well, it was a very sophisticated game. It was bit map. There were no characters in ROM because everything is drawn one pixel at a time. So they're annoyed. Oh, geez, what are we going to do? We can't find a kit. And then suddenly they realized, hey, we go to MIT. I bet we could write a kit. So general computer started up during spring break.
1981, much more fun writing game software than going to the beach. And we couldn't come up with the name, general computer. We couldn't think of a better name. It seemed generic enough and it sounded really large. General motors, general electric, general foods, general computer. Hey, sure. So that's the name and it stuck. So we started working on what we called super missile attack as an enhancement kit.
And so there was a handful of us who were living in a townhouse outside in Brookline, across from MIT, all students, and started in, as I said, spring break of 1981, mid-March.
We're lucky to have any photos at all.
So I'm Chris road who is this, will be annoyed when he sees this, but that's okay. So you can see a missile command cabinet. You can see Chris playing. And then to the left there, you see this sort of beige thing with a screen.
That's a gen rad microprocessor emulator. Costs about $25,000.
And that's what we used to do our development of super missile attack.
talk a little more about that. Here's another photo. In the back there you can see the TRS-80 that we used to capture the software. That's Kevin Kern on the left and that's Doug McCray taking a nap because we were getting about four hours of sleep a night. You can also see the daisy wheel printer. Do you know what a daisy wheel printer is?
So how did this work? So we had a microprocessor emulator that could disassemble the code. Because basically this is a reverse engineering problem. We have to understand how missile command works so that we can modify what we need to change.
And unfortunately, the disassembly only would disassemble on the screen.
And you'd get like 30 lines of code disassembled.
So how are we going to capture it?
Well, you would sit next to the GENRAD with the TRS-80 and type it in by hand what you saw on the screen.
Workflow.
You think your work flow is bad? Dude. So here's one of the sheets that we captured. And kind of hard to see, but down at the bottom, this is page 55. I mean, this is like this enormous huge thick thing that we typed in by hand. But it helped you understand the game. And then lots of handwritten scrolls on there about, oh, here's what's going on here, here's what's going on there.
We figured out how the game worked, how missile command worked.
Figured out what the different ROM locations were, memory locations.
And then as we're doing our own development, how did you do your character development?
Well, you got out a big piece of graph paper and you started putting little X's and O's on it.
So what's my new character going to look like?
So bear with me. We'll get to Ms. Pac-Man eventually, but you need to understand that. So intellectual property. So we were thinking about intellectual property, how to protect our own and how to not infringe others. So we wanted to avoid copyright infringement like the people doing the Galaxians kit would do. Trademark infringement, so we did not call it missile command. We called it super missile attack.
and we did not want somebody else ripping off what we were making so we made some clever hardware in there to make it difficult to copy this is the hardware, I did the hardware design for this, this is our little board and it would go, this is from the manual for Super Missile Attack so it plugs inside the missile command cabinet So you'd sell this board to the arcade operator and there you would go. So there's 12K bytes. You know, I was at that talk this morning, the 30-year anniversary, and they were making a big deal about hard disks. Hard disks? We didn't have any hard disks. You know, 12K bytes. Wow, that was a big game. So anyhow. So missile command is 12K bytes. That's what goes in those six empty sockets.
and then our 4k bytes of code, and then some magic circuitry in the middle.
One of those chips is what was called a PAL chip, programmable logic, so you could customize it and you could blow the last fuse in such a way that someone could not copy it.
And so that was key to our anti-copying.
People would not be able to, you would have to be very sophisticated in order to do it, and that's who we were trying to deter.
to even make that even more hard, we said, oh, we're gonna strip the markings off the PAL chip so people will not even know it's a PAL.
And we wanted to make the markings GCC because that was our company name, but the marking company didn't quite get it right and so they made it CG.
Oh well, this is important later.
So, anyway.
Hey, that's me.
back when I had lots of hair, sitting at the TRS-80 and programming pals. What's really interesting about this is what was captured on the white board in the back. So there's a bunch of notes there, but you can see our schedule. So May 11th, replay and play meter, those were the two big industry magazines where our ad was going to run. So obviously on May 12th we're going to start getting phone calls for orders.
And our software freeze is not for a week later.
That's not the way it happens now, is it?
No.
No, no, no.
You're all done well before you start marketing your product.
Anyway.
And in fact, that's exactly what happened.
Here's our ad.
And it was a four-color, full-page ad inside front cover, not one of those little black and white classified ads like the other ones.
It's like, oh no.
We're going full bore for marketing.
We had an 800 number.
It was great.
And we sold about 1,000 units in two months.
So netted $1.25 million.
That's pretty good for a bunch of MIT dropouts, which we had all dropped out by then.
Much to our parents' chagrin, it's like, hey, dude, I'm designing games.
This is so much fun.
So who did that?
So there were six of us who worked on that and designed Super Missile Attack.
And boom, off we go.
And this is just awesome.
I mean, the arcade owners love this.
The players loved it.
We got calls from arcade owners just like, players are coming in and saying, do you have Super Missile Attack?
And they're leaving when I don't have it.
So send me one of your kits.
Awesome.
So a lot of word of mouth.
So Atari didn't take kindly to this. They sued us for $15 million. The complaints were copyright infringement, false designation of origin, trademark infringement, unfair competition.
That's my favorite. Because Atari's gross income the year before was $415 million.
and they're going after a handful of dropouts. It's like, hey, you're not scaring us. We've got nothing for you. And Atari back then, it's hard to imagine, but today Atari was the high-tech company. If you were today to take Google plus Apple plus Microsoft plus Sony plus half the companies on the floor and put them all in one and that was Atari. They were just high-flying, high-tech.
amazing. So they sued us and we go to court and we got a lot of press. So press coverage. Hey, no coverage is bad, right? So So we got press coverage from Boston Globe and the first few court appearances did not go well for us. We got a restraining order. This was our local hometown paper we had moved by now out into Wayland and there's a photo from the paper. That's Doug McCray standing at our super missile attack that we had created for the court.
This happened in late July through August.
We're not backing down.
We're deposing Ray Kassar at Atari and various engineers and Atari's like getting annoyed.
So naturally, what do they do?
They hire us.
And they're like, what do you guys want?
We're gonna design games.
Why don't you design games for Atari?
why don't you drop your lawsuit?
So, that's in fact what happened.
And they, so they dropped their lawsuit with prejudice, meaning they will never file it again.
We will stop making Super Missile Attack.
Yeah, sure, okay.
All right.
And they're gonna pay us $50,000 a month.
design games. We found out years later that they thought we were just going to take the money and run and go sit on a beach. No, man, we're going to design games for you. So we did. And on that third bullet point, that's the key one, we will not market enhancement kits without permission from the manufacturer. This was the key thing that Atari wanted to avoid. If they had lost the suit and it was proven legal that games could be modified by the end user, that would set a very bad precedent.
The legal protection for games at this time was very unsettled.
Was there copyright protection for games for the audio visual presentation?
It was not clear at all.
And so they did not want a precedent being set.
So make the lawsuit go away, hire us, we'll do games for them.
Well meanwhile, all summer long we've been working on another kit.
because we got done with super missile attack end of May, 1st of June. What are we going to do next? We're going to do another kit. This one is working great. How do you decide what to build?
What kind of a kit? So super missile attack, we're thinking maybe you get 3 to 5% of the installed base. So you want to look for a game that has a big installed base. You want to look for a game that is obvious what you can do.
to change it. Or maybe you just wholesale put a complete new game in the existing cabinet. So we thought about this and we had a couple of ideas. One was asteroids, huge build of asteroids, 70,000 of them out there.
But Pac-Man, Pac-Man was the hot new game in the U.S. in 1981.
It was just peaking in popularity. And so we knew we were going to hit the market at the right time with our kit because it was obvious there were problems with Pac-Man. It was predictable play. In fact, there were these books, right?
Mastering Pac-Man and the video master's guide to Pac-Man that had all the patterns in them for how to beat the game.
You could play Pac-Man forever.
So we're like, oh, well, clearly we know how we're going to do this.
We're going to kill the predictability.
So we started working on this in early June, early mid-June 1981.
First thing, that's from a Tektronix marketing, that's not us, but we needed this.
This is a Genrad did not work with the Z80 processor, so we needed a different enhancement kit.
Excuse me, a different emulator.
So we got a Tektronix 8550 Z80 emulator.
Uses eight inch floppy disks.
And oh, what we really loved was it supported a line printer, so we could do our disassembly and print it out on a line printer.
Who knows what a line printer is?
Yeah, OK.
But.
eight inch floppies. And held a megabyte. Pretty awesome. So how did we go about reverse engineering? Again, so here's another game. We need to understand how pac-man works so that we can modify it.
So what are your sources for your reverse engineering?
Well, we had the manuals.
So there's a little bit that that tells you.
Schematics, because these were sold to arcade owners who have some knowledge to repair the game.
So you could figure out the address map.
You could figure out how the graphics hardware worked.
You could get a little bit of the game.
Here's the basic Pac-Man hardware.
16K of code.
Separate graphics ROMs, 8K worth.
a fixed character playfield, and six moving characters, what you would call today's sprites.
We called them stamps back then, because we didn't know any better.
And you had four colors at a time.
Actually, you only had three colors.
You had three colors and transparent.
So every character is only three colors.
So here's the address map, which actually I wrote, hand-wrote this, figured it out from the schematics.
What else could we do? We could look at the graphics ROMs and slowly piece them apart and figure out how the graphics ROMs were encoded. But the biggest thing was we could disassemble the code. We could disassemble the entire thing, all 16K bytes and print it out. And so it comes out to be about 180 pages.
Okay? The annotated Pac-Man. Now, this actually, this is This actually was done, this particular printout, this was done by the junior Pac-Man people.
That's a post-mortem for a different day.
But you can come up and see this, and you can see all the handwritten notations and the pizza stains and the just wonderfulness of the annotated Pac-Man.
So we'll have some show and tell afterwards.
There, you like that?
Cool.
Media.
So Tim Hoskins and Bruce Burns were the junior Pac-Man guys.
And so that's their handiwork.
What else could we do?
So we could use the 8550.
emulator system. It's sort of like main and hardware. And you could do, you could set break points and return statements.
Gee, what does this do? And I remember one cool thing we did right early on was we set some sort of a break point that printed out on the line printer every time a particular routine got executed. And that essentially put the game into slo-mo.
which was really cool because you could learn stuff about how the game works. And here's an example. You can see that pac-man actually skids around the corner a little bit. Watch him go around the corner. You can see he skids a little bit.
So he can go faster than the monsters can as you go around corners. So that was one thing we learned. And then the other thing is the monsters look ahead. Watch, he'll look before he actually turns. See?
And so you're learning a little bit about how the monster AI works. AI. Z80 with 16K. So that was one thing that we were able to do. And then another cool thing we did was once we found the mazes was zero out the maze. And that was really cool because you could watch the monster move where it wanted to go without the maze in the way.
That was very cool. There's one particular mode that the monster gets in that people now call scatter, where it basically heads for its favorite corner. And it was very obvious when you set it up like this, because there's no maze in the way, and you could just watch it go straight out to where it was trying to get to. And then there was another mode it would get into where it basically turned right every time. And you would see it there in a little tight little turning, turning, turning.
So you could see that.
And so you could learn stuff about the game by playing around with it using the emulation system.
So what were we going to do to get rid of Pac-Man's problems?
Four new mazes.
We said, OK, we're not going to be constrained by memory space, we're going to add more ROMs if we need to.
So we'll add more mazes.
Why just one maze?
We'll do four.
The big thing is to randomize the monster algorithms so that the pattern play will not work anymore.
And the way we did this, it is truly random what we did, because there's a free-running counter in the Z80 microprocessor that was used for DRAM refresh.
Remember DRAM refresh?
And you could access it from software, and it made a really cool.
truly random counter. So we used that to drive the algorithm.
And essentially what it did was each monster, instead of going to a fixed corner, it picked a random corner. And that was enough randomization in the algorithm to totally screw you over as a player. The other things we added, the fruit bonus moves through the maze. You had to chase it. And it moves through in a random path.
Actually, there were four paths predefined, and it randomly picks one.
Again, truly randomly.
It randomly picks one, and that's the maze, that's the path it takes going in, and then it randomly picks one of the four for it to go out.
Goes in, goes around the center house, then goes out.
We tried a bunch of other stuff that didn't work.
We thought about vertical tunnels.
you know, there's horizontal tunnels in Pac-Man.
Ooh, what about vertical tunnels?
That would be cool.
And it turned out that the AI for the monsters, it would never go through them.
So we said, okay, you know, we're not gonna do that.
And we thought about things like, ooh, what if the monsters can travel through the walls sometimes?
And so, you know, things we tried, but never got far enough.
So that's what we ended up with.
And then a bunch of non-gameplay features that we added.
The new colors, new sounds, new music, new animations.
What we would, today we would call cut scenes.
But Pac-Man had them as well, and we thought of our own to put in.
And of course a different name for the main character, because we're looking at trademark issues and copyright issues.
We can't call it Pac-Man or Super Pac-Man.
Oh, we'll call it Crazy Otto.
So one of the things about the fruit bonus, the first thing we noticed is that there's six, the hardware supports six moving characters in the Pac-Man hardware. But the fruit never moves.
Well, let's move it. That's something cool. It's free in the hardware.
So we'll move it around the maze. And the other thing is buried in the Pac-Man graphics ROM, there's an explosion character.
OK, we can use that.
So the first thought was, let's have the fruit move through the maze and then explode.
If you haven't got it in time, it blows up.
And we used that for a while.
But then ended up with what we have now, where it bounces in and it bounces out.
So the sounds and the path.
And then the value, that funny diagonal number there, because if you did the bonus when you eat the fruit, if you did it the way Pac-Man did it, it looked really ugly because it overwrote the maze to put the big 1,000, 5,000 number on there.
So we came up with our own.
That's why it's sort of squenched down like that.
Maze design, it's all on paper.
So we still have all this, but you could see the try this, try this. So there's several things we tried. But basically if it worked okay, yeah, stick with it and move on to the next maze.
So we came up with four mazes. So here's our four mazes all lined up together. And the thought was, so Pac-Man, people are somewhat used to, oh, here's a Pac-Man game that's been modified. It has a different maze. So they get started on our game and they play that first maze and they get through the first couple of racks and then, wham, yet another maze.
And they would be used to the first maze and then, boom, here's a totally different one. And that lasts for a few racks and then, boom, another maze. And then that lasts for a few.
And by the time you've gotten through the fourth maze, I mean, you're a really good player. And so four seemed like a good number.
Music. Any musicians? Music? Yeah. So Chris Rode did all the music for Ms. Pac-Man and I love his title for the code there.
It says Sonata for Unaccompanied Video Game.
And that's the only piece of music, actually, paper.
I mean, he used it, composed it at the piano at our house in Wayland, and wrote it down.
I mean, that's actually, even the staffs are handwritten on the piece of paper with his hand notations there.
So music, the game start up, and three animations.
So he wrote all the music for that.
And so.
we're talking about Crazy Auto. All right. You ready? Here's the first animation. Oh, this is attract mode. I'm sorry. So this is an early attract mode.
And the names came from Phil Carrot who was a physics student at MIT and worked for us for the summer.
So hence the names.
There's Otto, and there's the monsters.
So this is essentially a Pac-Man attract mode.
And we hacked it up really quickly as a demo, just so that we could put it out on test, for example.
And notice our logo, GenComp, General Computer on there.
So this is our first shot at the attract mode.
But the other part of attract mode is the.
the fake-o game. And so we can watch Otto play here. This is again where you can see the randomness because some of the randomness is the algorithm for how Otto moves during the fake game. It's actually one of the monster algorithms repurposed.
And so you never know how long he's going to play in the attract mode.
we always worried that he might actually complete the maze during the attract mode. And what would happen then? So you can see auto and you see the monsters. And wow, he's doing really well. Oh, missed the fruit. And up he comes. And you can see our new monster designs. Again, it was a trademark thing.
We want the monsters to look a little different. And wow, he's doing really well. Look at that. Pretty good for randomness.
And finally, yeah, he dies. And he spins around. Dead. Dead auto. Okay. So, and here's a detail of auto. So you can see, he's actually got this sort of 3D. He turns away from you, and he turns toward you. Right? Isn't that cool? Yeah, auto.
So what else did we do?
So we did the cut scenes, the animations.
And this was Mike Horowitz, one of our developers, who came up with the idea and coded up the animation driver.
So there.
Obviously, the red one is the female.
So all we did was you took the same character and used a different palette.
Pick the different three colors.
And you try all the available palettes.
Those are really ugly.
Red.
Ooh, red looks good.
OK.
So we have the two of them.
And let's see animation number two with Chris's wonderful little ragtime tune.
Well done, well done Chris.
So, actually very sophisticated sound synthesis in Pac-Man.
And so we had to learn how the Pac-Man music driver worked and put our own tables in there to drive the music.
So it's not even composing, but again, reverse engineering the music driver so that you can figure out how to do it.
And finally, the final animation.
And I'm done.
little baby Otto there. So that's how we know it's male and female, right? Because they procreate there. They have baby.
So, anyway, so this was a fun thing. It breaks up the game. It's fun. It gives the player a break a little bit.
And then you want to know, is there an act four? What's going to happen next? It drives the player to do more.
So character design, well where'd the idea from Otto come from?
Well partly it came from, if you look at the side of a Pac-Man game.
Who's that? I mean, it's got feet and it's got eyes, and so we started thinking about that. Now, the hand-drawn there, that's, I believe that's Chris Rhodes writing. And that was his first thought about Otto having the eyes and the feet and how it would look. And it actually looks a lot more similar to what the monsters are, but initially that was his thought for the main hero character, for the Otto character. So...
Any artists here?
You guys do character design?
Yeah.
OK, here's a workflow for us.
So you would take your character idea.
You'd sketch it on graph paper like Chris did in the previous slide.
You'd have to manually encode it into the weird encoding that the graphics ROMs needed.
type it in, program the ROM, burn the ROM, stick it into the circuit board and then see how it actually looked on the screen. Because we had no control over the screen directly. All we have control over is the processor. And the screen, there's no bit map in this thing. It drives one line at a time. And so it's this long process fraught with error.
It takes a while. There must be a better way. Chris came up with a better way.
light bright. Anybody play with a light bright? I mean, actual old light bright? Not the new modern ones, but the ones with the little pegs? Light bright. So I know Chris used this for some of the character development. So here's how it looks, right? So you can see on the right there, so you can't use every hole because it's this weird hexagonal shape. So you take every other hole.
so that you stay on the Manhattan geometries.
And what do you do with the holes when you make a hole plug for the mistake?
With a mistake there, how do you fill in the hole?
Like, ah, I thought of this.
You take the dark purple plug, and you get the black Sharpie and cover it up, and you can plug up the light leaking through the hole you don't want.
So it actually worked pretty well.
That's what it looks like.
So you'd put a sheet of white paper over it like a diffuser, and you'd kind of turn off the lights in the room and step back, and you could kind of play with it.
It's really cool.
It's tactile.
You plug in, what about this color?
What about this?
That's what you do today, but which one do you like better?
It worked.
So anyway, so that was light bright.
That was kind of a fun thing to use for character development.
So we changed the fruits.
the Pac-Man fruit bonuses. Do you know why they're fruit bonuses, by the way? It's slot machine bonuses. Did you ever notice that? Slot machines, they were actually slot machines that were called fruit machines because they gave out fruit gum as a bonus, as a prize. So if you lined up cherries, you got cherry gum.
that's why they were there and that's why they were picked.
And the same thing with the bell and the key, those were typical slot machine bonuses.
So we wanted everything to be edible, number one.
Number two, we wanted to avoid any trademark issues, so that's when we got rid of the Galaxian character.
and then we got rid of the stupid grapes that nobody knew they were grapes. People said, oh, that green one there, oh, that's the grenade. No, it's a bunch of grapes. It just looks stupid because it's only 14 pixels on a side. So let's get rid of that one. So we did our own. And the pretzel was sort of in honor of Kevin Curran because he liked salty things, so we put in a pretzel and it wasn't very healthy. Everything else is fruity and healthy and here's Kevin's pretzel.
So again, back to our intellectual property.
We're doing all this.
And we're really getting good at intellectual property because we're in the middle of our lawsuit now with Atari, remember?
And all the things they're complaining about, oh, jeez, we won't do that again.
So we're designing that into this kit.
Change the characters, change the name, and protect our code.
And our code overlaid on top of the existing Midway Namco code.
So let's talk about source code for a minute. Oh, by the way, source code, more show and tell. I have the Ms. Pac-Man source code here in paper. And so you can come up and look at it later if you want. Because so what do I have? This one isn't marked up at all. This is just a printout from our 8-inch floppy.
So we can look at that. So source code looks like this.
here's the fruit driver. This code is to make the fruit bounce across the screen. And it goes count zero spaces and then goes poof. So this is the code obviously represents the comment represents code that is no longer there. You don't do that, do you?
Do you leave old comments lying around in your code?
Gosh, the horror.
So, but that's what that is.
A lot of what we did ended up being tables.
Tables for code we wrote, and tables that use the existing Pac-Man code.
For example, the maze.
Maze is a big table.
Now we have four mazes, so you had to do some code to select which one to use, but it's basically a table.
So let me talk about the patches.
How do we get our hooks into the existing Pac-Man code?
So the hardware allowed us to do these little eight byte patches.
And the hardware would dynamically look at the address and would say, oh, you're in one of the eight byte patches.
And then boom, and it would replace, dynamically replace the code with our own code, generally with something like a jump statement.
And boom, and it would jump off into our own address space where all of our new code would be.
So you can see, here's the patches.
And it tells you where it is.
And oh, the top one is easy.
It's just an XOR.
instruction. We wanted to modify one instruction. So that's pretty easy. But the second one down there, patch for new attract mode. So at that location in Pac-Man address space, you jump out to some of our code. So that's how that worked. Here's some more patches. Oh, those bottom four, those are the really clever ones. The patch to make the monsters move randomly.
Randomize the AI.
There's 40 of those patches. 40 of the 8-byte patches. And that was a limitation. It was a hardware limitation. We could not support an infinite number of patches. Only 40. Complicated reasons as to why that was. But that limited what we could do.
There's only so much we could do in modifying the game. This is from the third, from some of the animation code, and you can see by Mike's comments there, his definitions, that there's two characters. One is called Otto, and the other is called Anna.
So I guess Ms. Pagman's name is Anna.
Who knew?
So...
Okay, let's go back to Atari for a second.
Remember the Atari settlement?
One of the things in the Atari settlement was we will not market an enhancement kit without the permission of the manufacturer. Now, Atari figures, yeah, who's going to give these clowns permission to modify a game? Nobody's going to do it. And we pushed back and said, look, we've been working all these months while we've been in court with you guys. We have this kit done. We want to be able to sell it. Okay. So that got put into our agreement with Atari. So Kevin.
This is a huge bluff here.
Nobody knows about our agreement with Atari.
That's secret.
All the industry knows is that Atari dropped their lawsuit.
So Kevin, you know, 21-year-old MIT dropout, calls Dave Moravsky of Midway, president of Midway. Midway who has the most popular game in the western hemisphere right now, Pac-Man. And he's just annoyed as heck because there's all sorts of copyright violations going on. People wholesale pirating his game and making copies of it. There's people making Pac-Man T-shirts and Pac-Man trash cans and all this. And he's just in court all the time trying to shut these people down.
and here's somebody who calls him up first.
So he's kind of cool.
And Kevin kind of goes like this.
Kevin says, hey, you may have heard that we trounced and pounded Atari in court and they dropped their lawsuit.
We're about to do the same thing to you.
We're about to bring out a kit and we just want, if any, disagreements you think you may have, let's settle them now because we don't want to have to take you to court too.
So Dave says, hey, why don't you come out and talk to us?
Sure thing.
So we go out to visit Midway.
This is the day after we signed the Atari deal.
They were both in Chicago.
It was a really good week for us here.
And Dave, they gave us a tie.
They're like, here guys, here have a tie.
So I still have this, my Pac-Man tie from that first visit.
And it took a few weeks to negotiate things and finally by the end of October, we negotiated an agreement with them that, hey, we're going to buy this kit from you and maybe we'll do it as a new game.
Maybe we'll sell it as a kit.
Maybe we'll do it as a new game.
But Midway's going to market it.
sure. Okay. No problem. So remember, they don't know about our Atari deal. And I think in the back of their minds they're thinking, hey, we can have these kids do more stuff for us. Sorry.
It's like a one shot deal. You just don't know it yet. So here in one month, we've struck deals with the top two game manufacturers in the country.
It's just like, dude, we're having a good time here.
It's like looking better and better that dropping out of school was the thing to do.
So we're already talking at this point about changing the name to Super Pac-Man because we don't have the trademark issues anymore.
So we can change it to Super Pac-Man.
ROM dumps.
This turns out to be really critical later.
is my ROM dumps that I made October 29th so we can go back and show what we're able to do right then. Backups are important. If you're a code developer, backups are important. Who's hosting your repository? Do you have access to it? You never know when you'll need proof of ownership.
Ask me why I know. Ask me in about five minutes. So here's by then we had written a new attract mode and we didn't know is it going to be crazy auto, is it going to be super pac-man.
So we had both by then and we had come up with this cool midway logo because they're giving us money. We're going to be nice to them. And then Stan calls and I took this phone call. This is early November. Stan calls up. I answer the phone. Stan says, hey, we want to make the female character the main character of the game.
We're going to call it Miss Pac-Man.
M-I-S-S. Miss Pac-Man.
It's going to be cool.
Stan, there's all these 14-year-old boys in the arcade.
Aren't they going to be turned off by that?
He's like, no, no, no, no.
It's really cool.
Because Pac-Man is very popular with girls and women.
And we're like, yeah, yeah, OK, sure, fine, no problem.
We'll do that.
So we made the female character.
What's she going to look like?
So let's show some of the character changes and name changes.
So the top line is crazy auto. And you can see auto actually was fairly complicated because pac-man is just three characters to do pac-man. And auto, there's four going each direction. Because there's four when he goes left and right and there's four when he goes away and toward you. And then if it's super pac-man, well, it's just back to pac-man and maybe he rotates and that's about it. But the first thing we did when we went to miss.
Pac-Man was that next to the bottom one where she's got the red hair and she still has the 3D movement where she turns toward you and she turns away from you. When she's turning away from you, all you see is the red and it looks kind of like the red monster. And also fairly quickly, this is all in the span of like a week, two weeks. Fairly quickly someone realized, oh, my gosh, she has a baby. We cannot have her be Miss Pac-Man.
out of wedlock video game birth. No. So pack woman. Okay. So it almost was pack woman. And then finally very quickly, Ms.
Pac-Man. Okay. Ms. Pac-Man. Great. And the character ended up the character we know and love at the bottom where she has a bow and she's got a beauty mark and she's got a blinky eye with eyelashes and that's pretty good for 14 by 14 pixels.
You know, the hardware supports 16 by 16, but you have to leave a black row all the way around so that it doesn't collide with the maze. So it's 14 by 14. Pretty cool.
Despite what you might read on the internet, imagine.
Internet got something wrong. Namco knew about this right from the start. Namco knew about this, and in fact, they were involved with the design of the character.
and Nakamura-san commented that he did not like the red hair.
And so that was one of the reasons why we got rid of the character with the red hair and ended up with the character with the bow. So Namco absolutely knew about this kit right from the start. And we ended up with Ms. Pac-Man the way she is now.
This is the hardware design.
There's 16K ROM, Pac-Man code, and then we have 10K on our little aux board, and an interesting encryption, quote, encryption, with the bit swizzle.
So you cannot just copy, take the ROM off of the Ms. Pac-Man aux board and learn how to do it.
learn anything from the code and the anti-copying hardware.
Remember our original goal was not to copy the original code.
At this point it doesn't matter. And really it's more interesting because it makes it difficult to copy the game. And it kept the pirates away. Ms. Pac-Man was not cloned, was not pirated for about six months.
which allowed midway to really ramp up the production, which was pretty awesome.
So thanks to, that was my code.
The anti-copying hardware.
And if you look at your Ms. Pac-Man aux kit, what's the part number on there? CG. That's our CG prefix again. So a little bit of general computer there. And that's what it looks like inside. So on the left of that, that's all Pac-Man. That's just a generic Pac-Man board. And then the aux board plugs in and changes it. And we got a patent on our anti-copying. So that was kind of cool. And again, it wasn't pirated for six months. So basically what it does is it watches for an access that would never happen during normal game operation. And if it sees that, it says, ah, you're one of those evil pirates that's trying to dump the code from this game, and I'm going to hose you over.
And it changes the encryption algorithm.
dynamically. Hidden messages in the game. There's the Namco Easter egg. You know about this? This is in Pac-Man, but you can actually get to it in Ms. Pac-Man as well. We didn't know about it, so we didn't take it out. It's there. Ms. Pac-Man in the character ROM, you see the gen comp there in the middle on the left? That was from our logo from our original attract mode, and it's still in there. So in every Ms. Pac-Man produced, there it is.
And but then way buried in the code is this little message.
General Computer Corporation, hello Nakamura, at the very end of it. So we put that in there. Why would you do this? Well, because it's interesting to prove infringement with someone else's code. You can go and find this. Ask me how I know.
Bugs. A couple of bugs. There was a parking bug. There was a place you could hide in the first maze and the monsters wouldn't get to you. So we had to fix that. The very last thing we found, because we did not have a cocktail table, was it didn't work correctly in cocktail mode. And so we had to fix that. The collision bug where you can go through the monster, we knew about that and left it alone.
And then the last one, players always ask me this because they're all about playing to the end of the game.
And the level 255 bug, you know about this, right?
You get to level 255 and it goes crazy.
Did you know about that?
You should have fixed it.
Listen, if you get to that bug, how long have you been playing the game?
Five hours?
That's the bug, is that you've been playing the game for five hours.
Okay. I want you dropping another quarter in there after three minutes. If we had found that, we would have just laughed and said, yeah, we don't care. We would have made the game harder so you would never get there is what we would have done. So final code release in late January 1982. And it goes into production. Also January 1982. This is how we used to get news. High resolution, full color, solar powered portable news delivery system.
Random access, delivered to your desktop weekly.
This is actually an amazing article about the state of the game industry in 1982.
It's phenomenal.
And so Mike Horowitz gets this game, gets this magazine, and he comes into our new development space there in Cambridge.
And in the upper right there, you can, this is the opening spread for the article, in the upper right you can see a missile command game.
He's like, guys, is this Super Missile Attack?
Can you tell?
And we're looking at it, and we're like, no, can't quite tell, the colors aren't changed, and maybe it's Super Missile Attack, maybe you can't tell.
And then we look at the lower right.
Oh my god, it's Crazy Otto.
You know, Pac-Man scuttles about the maze. No. It's Crazy Otto. Okay.
Do the math here. There's a hundred and ten thousand Pac-Man cabinets in the US.
Three of them have been modified for Crazy Otto and are out on test.
And the photographer picked one to take the picture of.
So for 30 years, this has been the mythical Pac-Man with legs.
Oh, my God, what is it?
Well, it was Crazy Otto.
It was our game out on test.
And who knew?
So again, more press.
More press is good press.
So that's kind of fun.
Who did the development for Crazy Otto and Ms. Pac-Man?
It was the seven of us who did it.
What did General Computer go on to do later?
We did Foodfighting Quantum.
for Atari, coin op games. We also did a coin op game, Nightmare, that was never produced. We did Junior Pac-Man, coin op game for Midway. Then also for Atari we did a phenomenal amount of home titles for Atari over those few years, 1982 through 1984.
We also did the Atari 7800 pro system.
Their next generation game unit.
We did the entire thing.
We did the custom graphics processor.
We did 14 cartridges for launch.
We did very novel encryption.
You want a good post-mortem talk, this one.
This would be a cool talk.
So that was the pro system.
Oh, we didn't design the plastic box.
That came from Atari.
But everything else we did.
Here's General Computer in 1984.
at the height of our game design. But 1984 was notable for the video game crash, Atari.
got sold to Jack Tramiel and everything went away and what are we going to do now? Well, luckily GCC lived on as GCC technologies and since we were good at hacking things, we hacked the Macintosh, which had just been introduced in February and we did the first internal hard disk for the Apple Macintosh, which Steve Jobs had been assured by his engineers was impossible to do.
So we were pretty thrilled about that and went on to do more Mac peripherals, laser printers, a company called Video Guide, which did an early set-top box.
So on we went. And ex-GCCers went on to do great things in industry.
So it was quite the breeding ground for tech founders and tech managers.
But, 20 years later.
What happens 20 years later?
Kevin's taking a drive and he's on the mass pike and he stops at a rest stop and he sees this game. 20th anniversary of Ms.
Pac-Man. Introduced in 2001 by Namco. And then they did a 25th anniversary later on. And Kevin's first thought, of course, is where's my royalty check? So let's review, shall we? So we had a number of contracts and lawsuits.
We actually had to sue Midway at one point and trounce them like we promised we would. So Kevin is like, hey, look, October of 83 we actually had a contract with NAMCO. At this point Ms. Pacman is done. It is done, 1983. No more coin op, no more trash cans, no more nothing. So we sign a yeah, yeah, yeah. If we ever make any more, we'll pay you this much. Dude, you're making them again.
So it took a while to negotiate and we eventually went into demand for arbitration. They didn't know we had a contract.
It was 20 years later. All those people are gone from NAMCO.
We had to fax them the contract. See? All right. So let's talk about language. The language in your contract, the language matters. Okay? Let me tell you why it matters. What's different about these two machines? You notice?
We get paid for one and not for the other.
Here's a hint.
The one on the left has a coin slot.
So we get paid for those.
Because the contract says coin-operated game.
and the arbitrator said coin operated game means coin operated game. We're like no no no no no that's what we called these big arcade things back then. We just generically referred to them as that. He's like coin operated means coin operated.
So we don't get any royalties unless it's actually coin operated.
Here's another phrase. This is very wordy. The highlights come from the arbitrator. This is where we won big in our language. We get paid for electronic distribution. This is Kevin Curran wrote this. Electronic distribution of the game. If it's in any other way transmitted to any other receiving device, like, say, cell phone. Or your X box.
And so nobody had thought about cell phones back then, but this was read very expansively by the arbitrator, so we got it.
And we had to reverse engineer to show usage of our code, and our hello Nakamura message was found.
So that was one way we showed usage of our code.
And here's the six of us after our arbitration successfully was found mostly in our favor.
Six of us who worked on it.
We're still getting royalties.
Mostly.
They kind of dropped off in the last year or so.
So buy more for your phone.
And thank you.
Oh, I've got to thank the Pac-Man people.
Iwatani-san, who I've never met and would love to.
Because if they had not made Pac-Man, we would never have been able to make Ms. Pac-Man.
And my final comment is, you know, this is called a post-mortem.
But a post-mortem means somebody died.
And I don't see that maybe it's a post-partum.
Ms. Pac-Man lives on.
Thank you.
Thank you very much.
We have a few minutes for questions.
Thank you.
Any questions?
Anybody jumping up?
Yes?
Yes.
Can you say something very briefly about how the AI for the ghosts work?
Just sort of the general rules about how the very simple processor pilots them around.
I will attempt to, because mostly, We didn't change it. We didn't need to understand how it worked. We just needed to understand how to modify it a little bit. But basically the monsters are in one of several modes. They're either in their scatter mode of going to a corner of the maze, or they're chasing the Pac-Man, or they're running away from it.
that's basically it. I think there's a fourth mode that no one knows about much. But that's it. And how do they stay in those modes? Partly it's time. How long have you been on a particular maze and then it switches into attack mode and that changes as the mazes move on. So it's somewhat table driven. That's why later in later racks, you never get any time where you're not being attacked and not being chased.
so. Oh, one more thing. Please be sure to fill out your evaluation forms that you'll get by e-mail. So do that. Yes.
And you asked a great question, so come up here. We have a gift for you. You see my son Jacob. Jacob here, who, by the way, was the world champion at crazy auto for many years because he was the only person who got to play it because it was in my basement.
so uh... we took it to california extreme one year people got to play it may be your score so uh... any other questions who else yes uh... what are your thoughts about modifying existing games today uh...
there and that there's a lot of companies that uh...
don't take kindly to their games being modified and there's some companies that will release games with you know full uh... level editors especially on back in the nineties that was a a big thing Do you like the way the legal precedents are going?
Or do you think maybe it could be a little more liberal?
That's a great question too.
You get a gift, come up and see Jacob.
So it depends on how I'm making my money.
Okay? If I'm selling new games, well, I want my new games and you'd better not modify them. If I'm making money doing modifications, then I would change it differently.
Let me answer your question another way.
I think the law has been more settled now, and I could reel off all the cases that have happened in the past 30 years, to give the original designer of the game much more legal standing and control over their game.
And so I think it makes it much more difficult as a, to legally modify it.
original developer does not want you to. Okay?
Now, let me put my opinion hat on.
I think that that can be a great thing to make your game more popular if you allow it to be modified.
So I think it's really cool for people to say, hey, here's a level editor.
Go at it and have some fun at it.
But intellectual property is important.
This is how you make your money.
And so it deserves to be protected.
So just imagine, you might be that other guy.
As soon as we got hired by Atari, we were like, oh, that was evil.
Enhancement kit people, we're going to stop that.
Because that's how we were making our money.
All of a sudden.
So, thank you.
Yeah, come see Jacob.
Come see him.
Anybody else?
One more question maybe.
Yes.
Yes? Oh, we got to stop. We got to stop. I will be at this wrap-up room, which we have to go all the way into the West Hall, room 2022, and I'll have all my goody things to show, and so feel free to follow me over there. Thank you very much.
