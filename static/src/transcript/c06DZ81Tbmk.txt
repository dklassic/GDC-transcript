Thanks Dave. Can everyone hear me okay?
You're going to have to excuse me.
I'm suffering. I come from Montreal.
We have lots of snow there. I'm suffering from a cough and a bit of a cold.
My name is Che Dickie-Clark.
I'm an AI programmer at Ubisoft Montreal.
I've worked on a number of games.
Rainbow Six Vegas, Surf's Up, Prince Persia, a number of Assassin's Creed games.
And of course, Watch Dogs 2.
Watch Dogs 2, you play Marcus.
You're a hacker.
You're fighting social injustice.
The game has four pillars, hacking, combat, stealth, and navigation.
I'm going to show you, yes.
So today, I'm going to be talking about cover.
This is an agent in cover behind the air ventilation unit.
Most of the things that the agent does in combat involves cover.
So they can shoot over the cover, they can just protect themselves, they can be throwing a grenade, calling reinforcements.
So it becomes very important for them to position themselves at a good cover so that they have a good distance and a range and a good field of fire.
I'm going to show you a video.
where Marcus is entering a layout.
It's called Home Docs.
And the agents are going to react, take cover around him, and try and kill him.
Oh, I have to, uh.
There's five of them.
Drop them if you have to.
Stay online for a description of the target.
So today I'm talking about two different things.
The first is how the agents position themselves in cover.
And then second, the challenges that we faced as we put this system into production.
They started making levels and the problems that came up.
There are three types of characters in the game.
The first is the main protagonist, Marcus.
There can actually be two or even four because the game is played in co-op.
The second is the agents.
These are the main enemies of the game.
They can do the full range of actions an AI can do, for example, full combat, investigate, search, those kinds of things.
For that reason, because they do so much, there's a limited number of them.
There's only about a dozen in the game.
Not a dozen archetypes, but a dozen at one time.
The last category is civilians.
These perform a kind of more lightweight version of the actions.
They might just shoot once.
They might just hide behind cover, or they run away.
Roxanne spoke yesterday about the civilians, their reactions.
I just wanted to make a point about the agents and their reactions.
Combat is a very tight loop, and you don't want to interrupt it.
So we actually don't handle many reactions.
I think grenade reactions are very important.
Getting hit, like a hurt reaction.
But most other things, they just continue their normal combat loop.
The agents can be a member of a number of factions, law enforcement, street gangs, organized crime.
What's important in Watch Dogs 2, or different in Watch Dogs 2, is that these factions can now fight against each other as in addition to one of the four players.
This creates complexity in terms of squad, which is our group coordination, detection, and combat and cover selection.
This is the overhead view of the home docks, what we saw in the video.
It's a much larger layout than Watch Dogs 1.
And so the distances are larger, makes it harder to choose good positions.
To give you a perspective, this is the rooftop that we were fighting on in the video.
This is a normal combat range, this blue square.
I want to draw your attention to that little red truck, but I'm going to talk about it later.
So at the start of Watch Dogs 1, the game designers, the programmers, and the artists sat down and negotiated what is a cover, what should it look like.
It's one meter wide to give room, and it's one meter high to 1.2 meters, just to give a little bit of variance.
And it has to be artistically very, or visually very identifiable as a cover, so that the player can say, hey, I can protect myself there.
A normal cover you can shoot over or you can shoot to either side from when you're in cover behind it.
There's also high cover which is 1.8 meters high. You can't shoot over this.
There's a dead zone in between the two again to make sure they're recognizable and if you look at the image it looks like the high cover looks like just two covers stacked on top. It gives a further clue of what kind of cover it is.
This is the covers in the map, just drawn with the debug display.
You can see there's two different colors.
The pink covers are just normal covers.
The purple covers are what we call player-only covers.
These are not really good covers, but they still exist for the benefit of the player.
They might be unreachable.
They might not provide any protection.
To give you an example, on the right.
solid metal sheet that's a perfect cover.
So the agent would go there.
On the left, it's an open railing.
It would look really dumb if the agent went there.
But the player has an ability to stay in cover and move along a wall or move along a railing.
And so we need to support that and have all these covers everywhere for the benefit of the player.
So as production went on and we started making more interiors and we need to make furniture inside, Desks, a desk that's one meter high is a bit high, and so they had to negotiate a low cover.
And so we squished down the animation a little bit, and you can see examples in the park bench and the front of the car.
So there's three reasons why an agent might want to find a cover.
The first is that combat has just started, bullets are flying everywhere, and they need to dive into cover really quickly.
We call that first cover.
Now they're in cover.
and they need to shoot at the target.
And they shoot a few times, and then they want to move along so they pop out somewhere else, and the player doesn't get a beat on them.
That's called neighboring cover.
The third, second cover, is you're leaving your cover to find a better cover.
Either it's flanking the target, provides better protection, or the range to the target is better.
This is the target, this is the agent.
There's three criteria which the agents use to evaluate what a good cover is.
The first is distance to the target.
So if you have a pistol, you wanna be very close.
It's usually based on the weapon.
You wanna be very close.
If you have a rifle or even a sniper rifle, you wanna distance this much further away.
The second.
is how far the agent wants to move to get to this cover.
You don't want to run across the battlefield to find your second cover.
You want to go from cover to cover.
But also, you don't want to find a cover too close to you.
If you're going to leave cover and move somewhere, you want to at least move like seven meters or something.
The third criteria is how much it protects you.
So the ideal cover is perfectly flat, 90 degree angle to your target.
As you start twisting the cover, you start exposing more of your back to being shot.
There's more of a, more percentage of your body that's available to be shot.
The fourth, it's not really a criteria, it's like more like a condition, is a line of sight on the target.
And the line of sight is not tested from the agent itself, but from the cover.
There's six positions of which you can fire from.
He's firing from the upper right position.
So the cover's to his left, and he's actually stepped out of the cover and is now firing to the right.
Each of these positions are tested towards the known position of the target.
You can see three of them have good fields of fire, and the other three are blocked.
The top one, the middle one, is a blind fire.
So then we put this all together.
We take our three types of searches and our criteria.
We make a table.
And we apply weights to these criteria.
So some are more important in certain searches than others.
When you're looking for your first cover, the most important thing is it's nearby to you.
You just want to get into cover.
It doesn't matter if you have line of sight or not.
Just protect yourself.
Then you want to move.
Becomes more important as you're moving to be at your ideal weapon range.
So that becomes a high priority.
And you need a line of sight now, right?
If you're going to move somewhere, you need to be able to fire on the target.
If this, let's say the neighboring cover failed, because it could be possible that you don't find a line of sight where you are, you'd switch to a second cover.
You're now going to leave where you are and go somewhere else.
The distance to target is important, the line of sight is important.
It also becomes more important, not like super important, just medium, that the cover provides a better protection than where you are now.
Again, the top view of the roof.
The target and this is the agent.
This is what we call the donut.
It's the distance to target.
So he wants to find a cover somewhere inside this donut, ideally to the middle ring of the donut.
This is the distance to agent.
Note that there's no hole.
This is a first cover search.
There's no hole.
So for first cover, there's no cover too close.
You just want to find the closest cover.
And then you try and overlap them based on the weights.
This is an exclusion zone.
You don't want to get close to the target.
So any covers that are too close, you just cut right away.
There's actually a special behavior, which we call emergency shooting.
When the agent gets into this circle that's too close, they just stop what they're doing, pull out their gun, and just empty their clip in a kind of like last stand.
Either target's gonna die, or they're gonna die.
Because they're just too close.
So if we zoom in a bit, he started at the yellow circle, and he found a cover very close to him that has a good line of sight, but each of these covers could have been equally good.
Just the weighting was slightly different for the red one.
That's the one they chose.
This is an example of neighboring cover search.
the agents on the far left, far right, and they're just moving to the left.
They're moving a certain amount of distance.
If it had been longer, they would have only moved seven meters.
And they, again, I don't, yes, that's the cover they chose.
This one's a bit complicated.
All the debug display is now shown, so there's lots of little circles everywhere, but you can kind of see that there's the blue circles, the yellow circles.
This is an example of a second cover search.
There's an additional element is these purple circles.
These are other agents, and you want to stay away from them.
So any covers that are within these purple circles, we just ignore.
You don't want them to clump up and all get killed by an explosion or something.
So the agent, what's special about this, is they're underneath, inside the building.
They're not the same level.
So they're finding a cover on the roof, and they're basing it on a distance, but this distance actually goes through the building.
So when they come to move to the cover, it's actually quite a long path.
They have to go outside the door of the building, go up the stairs, come around.
The pathfinding is done last.
It's the most expensive thing we do.
The raycasts for the lion's eye are expensive, but the pathfinding is the real bottleneck.
There's two outcomes because of this.
The first is that they're exposing themselves for a much longer time, and they're going in front of the target, making themselves easier to shoot.
In hindsight, maybe what I should have done is, this is hard to say, but chosen five covers and done a flood fill to those five covers.
And then I could have just really chosen the closest one based on path.
The second thing we tried to do during production is to arrange the path so that the points went from cover to cover, what we call shadow path, so that it's always behind cover.
Because he's actually walking around in front of the cover here.
But that would have required more pathfinding, and so we put that aside.
So you spend months working on this.
You're sitting at your desk, you're working with the game designer, you're working with the tester, animators.
And then it goes out into production, and all the level designers start putting into their maps.
And you're like, whoa, no, but all these things come up, right?
Coming back to this little red truck in the corner, this is actually a scissor lift.
So the player gets into it, can go up in the air.
There he's up there.
Takes out his sniper rifle, and just starts clearing the layout.
There's not much the agents can do.
They can't path to him.
They can't shoot him because he's flying cover.
We call this unreachable.
I just like the scissor lift, but it happens on buildings, other areas that they don't have an access to that the player does.
So we had to have a special unreachable mode that's kind of hidden, you don't really see it, and the agents start acting differently in this case.
The first issue was that the layout is so large that they might not even be hearing the gunshot from the sniper rifle.
However, if the player misses, all those bullet misses are nearby them.
And so if there's two or more bullet misses, they go into combat, and if someone dies, they go into combat too.
And the first thing they do in combat is go into cover.
This now protects them from this sniper rifle.
Even if they don't necessarily know exactly where it's coming from.
The second thing we did is give everyone grenades.
It's a bit brute force, but the grenades can be thrown in an arc, reach areas that they can't because there's no nav mesh, and they disable the scissor lift.
When the agents are far from the player, and now this is very, most of the things I've been talking about have been generic target because the agents can fight each other, but this is very player specific.
If the player is actively aiming at an agent, is unreachable, and is far away, they stay in their cover.
They won't try, if they're out of cover, they'll go to cover, they won't try and shoot, they won't try and change cover, they'll just stay there while they're being aimed at to kind of maximize their survivability.
This mitigates that kind of overpowered clearing the level with a sniper rifle.
Due to the large size of the layout, When you're far from a combat, the first thing you do is move towards the combat.
Once you're in 30 meters, you start doing the normal cover search, that kind of thing.
But this creates a behavior where the agents who are far away just move directly towards the player, right, and makes them very easy to shoot.
So again, in this unreachable behavior, they don't move directly towards the combat, they specially find a cover around the player and move towards that cover instead.
That creates more of a lateral movement where they're moving across the player's vision instead of directly towards them.
This is another example of a layout in the city.
I think it's called The Hacker.
There's a number of agents of a particular faction, let's say FBI.
They're protecting a special target, which is a star in the house.
The layout is surrounded by walls.
These are the entrances, either gates or the one on the left is just an opening.
So the player goes in and they start to combat.
He gets seen.
Everyone starts shooting.
They all start doing lots of pathfinding requests to find a cover, to find a second cover to move towards the player, that kind of thing.
But the layout also has a large number of civilians in it.
Remember I mentioned that there's a limited number of agents and a large number of civilians?
All of these civilians all start pathfinding, I'm not sure you can see it well, they all start pathfinding at the same time.
This creates a huge pressure on the pathfinder, and now there's a backlog of everyone in the game trying to pathfind at the same time.
Ultimately, it's good to get the civilians out of the way.
They leave, all the resources are freed up for the combat.
So the way we handled this in the first step was that agents had priority in pathfinding over civilians, because they were more actively engaged in the combat.
And those who were closer, those characters that were closer to the player, would have their pathfinding go first.
What this caused is that civilians who were far away never moved.
You know, I used to think that like walking to a wall was the worst thing that could happen, that was like the typical AI bug, but I got all these bugs about people not even pathfinding, not even move, they would just freeze.
And then agents who were far away also got stuck.
So we had to modify the rule.
And anybody who had a first pathfinding request, their first request would go before everybody else.
So we still did on distance, but before the people were close, they got into cover, looked like they were doing combat, and then they waited for the civilians and the agents who were far away to get their first request.
Civilians would clear out, the agents were far away would move in, and then combat could continue as normal.
So let's come back to our layout.
We have these agents protecting their VIP.
Just so happened.
that up here, there were some gangsters, Tezca.
And they hear the gunshots too, right?
And they become interested, and maybe they start shooting, because they can do faction on faction fighting, right?
And then the police show up.
So now you have like four parties involved in this combat, and they're all doing pathfinding.
And maybe the player decides, okay, I'm gonna hide and kind of drop out of the combat.
So the Tezcas, the orange guys, are shooting out with the blue police to the north.
And the FBI are like, hey, we should go check out what's going on.
So they have to leave their compound through a door to go up there.
So they find a gate, they go through the gate, they go all around the compound.
This compound is quite large.
And if you're familiar with A-Star, you have to flood the interior of the compound before you can actually get out.
This is what happened is we're hitting our max pathfinding cost.
And then pathfinds were failing.
And then it was just delaying everyone else because the failed one took longer.
And again, everyone was just freezing up.
So what I did is I asked the level designer to add a door.
Seems so obvious.
But the level designer was very unhappy with me because they'd spent a lot of time planning the defenses, placing people, and then I just asked for a backdoor and I said, it's really important, pathfinding is breaking.
So I had to go back and think about why the pathfinding was hitting its costs.
The first is that I was stopping them from going through the walls.
It kind of looks dumb in combat when the agent's taking so much time to climb a wall, they're exposed, it takes longer.
But I had to reduce the cost of the walls because if you had two walls, it would just stop the pathfinding right there.
The second thing was the gates.
The gates, especially these large gates, take a long time to open.
But I still had to reduce the cost of gates, but I'll show you this.
So you have to go to the control panel first.
They have to go to the control panel first, wait for this gate to open, and then they could go through.
And it leaves them standing there in the open, easy target to shoot.
So what we did is we kind of cheat in combat.
And the agents, they don't go to the control panel.
They just kind of tell the gate to open.
And this makes it much easier for him to use these gates, allows us to have a lower cost of the pathfinding, and that kind of resolved that.
Unfortunately, I was not able to go back to the level designer and tell him that he could remove his gate that I added.
This is another example.
It's the cargo ship.
There is one way onto the cargo ship.
It's this long pathway.
So we had this issue that the testers, the game designers, were complaining to me about the agents rushing the player.
The agents would just run up to the player and try and shoot him.
I was like, what?
I didn't code anything like that.
That doesn't exist.
So it's not the most challenging behavior, right?
Like, they're just running up to you and dying, right?
But I really, I couldn't figure out what was going on.
This is a side view of the same ramp.
They're doing a second cover search.
You can see all the circles.
And the cover they're finding is right here at the bottom.
It's a really good cover because it flanks the target.
What was happening is the path was going right next to the player.
And as I mentioned before, when you get close to the target, you stop what you're doing, and you just do this do or die last stand, shoot at the target.
But it created this effect that they're running up to you and then just shooting at you.
So to address this, we took three steps.
The first was that any covers that are behind the target, like a 45-degree angle, we discard them.
you're gonna have to cross the target to get there anyways, right?
So don't take the risk.
The second is to, if we do find a cover with a path that goes by the target, we just cut it.
It's kind of wasteful, we've wasted that pathfinding, but we need to address the problem.
The third thing we did was if two or more agents died next to each other, it was probably a choke point.
and the player is probably shooting them and killing them.
So we cut a hole in the nav mesh for a minute, patch it, and then no more agents can go down that rampway.
This forces them to, they're seeing their friends die, they don't go, and it forces them to go somewhere else that might be more expensive or less optimal, but it changes the flow of the combat.
So as we started realizing that we had these issues with approaches or entrances into layouts, we started going and looking at each of these layouts and seeing what we could do about it.
So this is the same cargo ship.
We started looking up the ramp, we looked at the side of the ramp, now we're looking down the ramp from the top.
And we looked where could we add cover.
that's on their side of the ramp that they could use.
And so we asked the level designers to add cover here.
It's more accessible and doesn't have to go next to the player.
And then you can fire down the ramp.
So I have a good idea.
And you're looking at all these circles.
But I have a good idea of the decisions that the AI are making, right?
But the level designers and everybody else don't necessarily know.
It's kind of a bit complex, you know, with all these weights and circles.
It'd be nice if there was some, like in hindsight, if there was some sort of tool that drew green or red on the ground.
And if it's green on the ground, that spot can be fired upon by several covers.
But if it was red, maybe there's no covers, only one cover, that could fire upon that position.
And that way, the level designers could just turn it on, look at their map, and say, hey, I have this entrance, but it's red, nobody can fire upon it.
And then they could say, OK, maybe I'll add some more covers, and it would change it green.
This is another example of an entrance.
Again, it's home docks.
It's just another way to get into the same layout.
We asked them to add covers at the top of this balcony here, which they did.
We're all happy.
And we come back later.
And someone has placed these blocks here, these crates, right in front of the cover.
And if you can see from the red arrow, it actually blocks the line of sight from the agent to the target.
So it's an ongoing process, right?
So we're like, hey, add these covers.
As I mentioned at the beginning, there's several pillars to the game, right?
So navigation is also an important pillar, right?
So the player has to be able to navigate up to get to this balcony pretty easily, right?
So there's passes done.
I'm doing my combat pass, but they're also doing their navigation pass.
It just happened at the end, navigation won out.
So to wrap it up, my advice is.
Communicate to the team why the agents make the choices they do.
As I said before, you're the expert on this.
You understand all the logic and decision-making they're making.
Broadcast it as much as possible.
Even if you don't see it in the game, make sure everyone on your team act like a publicist for the AI.
and then play the game, go through the levels, actually see how they're acting in the real world, you know, in the real layouts, and then maybe there's like small, quick improvements you can make that like change the way the game is played, right, like that unreachable or the rushing, we're able to change those things.
And so it's not really technical advice, but I think it is advice that will help you make better games.
I don't know how much time we have for questions.
About a minute, we can take maybe one or two.
Tops, short ones.
Yeah, if you could use the microphones, folks.
Thank you.
What's your name?
Neil.
Did you guys consider using a hierarchical pathfinder at all in order to try and mitigate those large-scale problems?
You could easily...
That is such an awesome question.
We have a hierarchical pathfinder.
It doesn't take into account the things that change states, the gates, things that can be breakable.
So we're like, oh, we're so close.
So we do do a hierarchical path.
It does make sure that before wasting time on pathfinding.
But we couldn't use it in a more advanced way because those links weren't there.
Did you have the vehicles interacting with the combats, and did they take that into account planning, or have vehicle-to-vehicle, like chase AI?
Yes.
I mean, there's a whole other vehicle combat when the player gets further away and is in a vehicle, they jump into their vehicle and they drive after them.
The vehicles have cover on them.
That actually makes it complex because the covers are moving, it's dynamic.
But there is a whole vehicle section to the combat which I just didn't talk about today.
Good stuff.
All right, we are out of time.
