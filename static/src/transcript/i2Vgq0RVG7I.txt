Animation is not the answer. It's kind of a ridiculous, over-the-top, click-baity title, but that's what we're kind of going with here.
It's one of these things where, now over multiple animation boot camps and at the animation roundtables, a lot of the conversations have been about animators themselves becoming a lot more technical, having more ownership of becoming technical.
And, uh...
We wanted to sort of touch on the next part of that step, where if you do decide that as an animator, you want to embrace having more ownership on implementation of your animations in the game, what sort of conversations is that gonna lead to?
What are some general personality types that you're going to run into as far as the other developers and disciplines on the team that you need to sort of be aware of, right?
And how can we sort of maybe help get you past some of those initial speed bumps so that you can get right into the fun of maybe the next level of implementation and get through some of those growing pains?
But...
Thanks.
Bye.
That's pretty straightforward.
So we're going to play it up a little bit.
What we're going to do is we're going to have a steam panel of amazing engineers and animators play some very specific roles that you might run into when you have these conversations.
So first up, we're going to have the tech enthusiastic animator Clay Mathews.
So, I'm Clay, I'm a senior animator at Volition.
I've worked on Red Faction Guerrilla, the Saints Row series, and Agents of Mayhem.
But my claim to fame, I guess, is that I don't elbow drop animators when they complain about not wanting to be technical.
Yeah, excellent.
All right, and next up, we're going to have Jeff Harwer.
our cynical animation programmer.
Thank you.
Hey everyone, Jeff Harware here.
I am a principal software engineer at Electronic Arts.
I've been there since 2001.
I worked on pretty much every EA Sports title in some fashion.
My claim to fame is...
Probably back in the day I was one of the first engineers working on our internal animation tool Ant.
And my other claim to fame is I've choked out two animators on this very stage at GDC boot camp in the past.
I'm currently a gameplay lead on UFC 3 and I've got an animation talk on Thursday morning at 10 o'clock. Check it out.
Yes.
Alright, next up on our panel is going to be the tech futurist, Paul McComas.
Hi, I'm Paul McComas, head of animation tech at EA.
I've worked on many, many sports titles just like Jeff.
I've worked on some non-sports titles too, like Battlefronts and so on.
My claim to fame might be that I wrote a bug that was so popular in the British tabloids, it was featured and had over 2 million hits on YouTube.
And it was fantastic.
You can look at two soccer players kissing each other.
It's fabulous.
The dream.
The dream.
And then we have our devil's advocate to all of these specific viewpoints, Mr. Cody Pleppel.
Hello, my name is Cody Pleppel. I'm a gameplay programmer at Blizzard Entertainment and my claim to fame is that I've helped build and design animation systems for Heroes of the Storm and generally stop animators from getting too technical, but we'll talk about that.
All right, and then I will be playing in this the role of the unsure animator who is breaking out into tech for the first time.
I'm Mike Jungbluth.
I'm a senior animator at BioWare.
All right, so...
All right, so let's get it started.
The design of the game has been said that we need to have better melee combat.
So, as an animator, I guess that should mean that all I'm gonna do is just care and spend all my time about making some really sweet, synced interactions between two characters, and that's it, right?
All I need to do is just do some of those sweet takedown animations like we saw in the Mordor talk, right?
Clay, tell me I'm right.
You're part of the way there, right?
The end goal for the system is a, you know, is a, you know, it's a melee system, right?
You're talking about making the pieces that go into that system.
So, if we think about it as a, you know, as a puzzle, you know, each of the pieces has to, you know, has to fit together in the right way, a very precise way, right?
So if you become more technical, you can build that, you know, complete that puzzle on your own.
And once you have those skills, if your tool set allows for it, you can be completing all kinds of puzzles, man.
And we don't, we won't need the rest of these guys.
It can just be me and you.
We can make our own game.
Yeah.
With hookers and blackjack and you know.
I like blackjack.
So yeah, just, you know, let's, you know, Getting those skills to complete your own puzzles is so powerful, and you want that.
Sweet, so then I don't have to deal with programmers.
Done, okay, cool.
Okay, I don't agree with anything you said.
I think it's cute that you're trying to learn programming and everything, but what I'd really like you to do is go off and build some previs work for us.
Show us how this could really look good in the best case scenario, and then we'll just throw that work away.
And we'll come up with a design that kind of constrains your animations, tell you exactly what you need to do, and then you'll just start pumping out assets for us exactly as we ask you to.
You can learn tech stuff on the side.
I think that'd be great for your own personal development.
But we're building a AAA title here.
If we're going to sell millions of copies based solely on this brand new Melee system, we can't have a hobbyist building the architecture for it.
Sorry.
Okay, so just keep doing what I've been doing for years, but I still get to make a super sweet, like, pre-viz animation.
So, Clay's wrong, you're right.
So, I kind of like what Clay's saying, and I kind of like what Jeff's saying, but I don't like either of these approaches.
So, what I'm gonna say to you is, we're gonna, I read about this amazing stuff, okay, and we're gonna make this amazing black box thing.
You're not gonna get it for about two weeks before ship.
Okay? And what you're going to do is you're going to feed in all of these animations, and it's just going to magically do everything you need for it.
And you're like, how do I control this? Well, I'm going to give you two dials.
I'm going to give you dial one, it's going to do something, I'm not sure exactly what that dial does, and dial two is going to do something else, and they might fight each other, they might not, who knows.
And with that, you're going to be able to take all this amazing content that you've created, and it's going to output the most amazing melee system, 90% of the time.
That's an A.
Pretty good, it's gonna be pretty good and you're gonna be able to ship a game with it.
Sweet, all right, so then I just need to make some animations the way I wanna make them, put them into your thing, don't need to do extra learning by you, don't have to keep doing the same old thing that you do.
I like it, right?
This is what we're doing.
No.
I don't even know what Clay's talking about.
Black box.
says enough I think right there, there's two knobs.
I think the right approach here maybe is to listen to none of these people and kind of choose the approach that fits what you're trying to do.
Maybe a little bit of both, maybe a sprinkling of both.
Maybe some new tech, maybe a little bit of handcrafted animation, maybe some new systems that'll make the handcrafted animation shine.
Maybe a collaborative approach that could, I mean, this was the hot take, I haven't thought about it.
Okay, all right, so let me see if I can sort of figure this stuff out then.
So all right, if I am going to care more about the melee system as a whole in some way, kind of like what you're saying, you didn't call me an imbecile, right?
Then I guess really what I need to think about is, all right, let's...
I guess all the alignment, orientation, and timing.
Those are like animation things.
So maybe all of that stuff should then be owned and implemented solely by me.
That you still get to do some stuff, but maybe that's the right stuff, right?
Like that should just all be, that's us.
That's the role of animator.
We don't need programmers for that.
As an animator, as an artist, you wanna own everything.
It can be exactly the vision you have for it if you learn the tools and how to set it up on your own.
Right?
All right.
That's the dream.
I want to build the system that I want to build.
That's, and if I have the skill set to do that, why do I need to talk to these other people?
This is my system.
I'm the only one required to have input on this, right?
But like how many years into development do you start animating?
Am I right?
Because like, that's crazy.
Okay, one more.
Oh God, you guys are confusing me.
Jeff.
Yeah, so, okay, here's the deal.
We have a team of, what, 10 engineers that all went to school to work on these complex problems, the architecture and stuff, and we're currently bottlenecked on animation.
I don't want you wasting your time on anything that's not involving animation.
Okay? You've got a whole team of people that are experts on this stuff.
We're going to build the architecture and we'll tell you exactly what we need from you.
We are a little tight in terms of, like, manpower, so we are also going to need you to do a lot of data entry on things that kind of...
ties into animation a little bit, but isn't really animating.
And we're gonna give you some really, really bad pipelines and UIs in order to do that stuff.
And we're not really gonna explain to you how it works.
We're just gonna tell you exactly what you need to do.
And you're gonna have to do it over and over and over again, like a thousand times.
And design is gonna change their mind, like probably two or three times throughout production.
We'll rewrite these pipelines, but we do not have the time to build UIs or animator-friendly workflows for any of this stuff.
But we really, really appreciate the fact that you will take on these data entry tasks, learn these pipelines by yourself and not bother us because we're busy building the important stuff.
Mike, aren't you sick and tired of these guys who made these games in the same ways and they're sort of stuck in their box and they don't want to think anything outside of it and they're like, you know, we have to do it this way because that's the way I shipped the game with before.
We can't go anything further because, you know, this isn't going to work and that's not going to work.
Surely you want to take a leap of faith here and do something a little more pushing the boundary.
Yeah.
Yeah.
Yeah.
Yeah.
Okay.
So why don't you come and we'll work together and we'll make something that's going to work most of the time.
I like 90% of the time.
It works 100% of the time.
You academic types are all the same.
You release some sort of tech demo that gets the public all excited and my managers all excited.
And they're like, hey, let's do this machine learning thing for the next project.
And it never works in practice.
You just give us these cool black boxes that we have no idea how to use.
We've got to stick with the traditional stuff that works until someone's put in the effort to prove this stuff out in the real world.
And I don't want to be that person.
I don't want to be your lab rat.
All right, Cody, I'm like really confused at the role of animator versus programmer.
Can you tell me how all these guys are wrong?
Uh, yeah.
We should work together and flex our skill sets.
Like, you could push the boundaries of animation in awesome and interesting ways without going wholesale and jumping into like a pit of knives, which is what a black box that makes 90% of the animations procedurally is, right?
Like, what a nightmare.
But you don't also have to like sit in a corner and be the programmer and the animator and the artist and the producer.
Like, let's...
I'm better at programming.
This is no offense.
It's all I ever do.
Let's work together.
Let's build it together.
I'll build a little bit of a box.
You can have a little bit more of the box and we'll make an awesome animation going forward.
You don't have to do any of these single, like crazy one note.
Like they're, you get what I'm saying?
I do.
So, all right.
So I guess then if I'm going to do a little bit more programming work, then you guys are going to learn a little more animation work.
I mean, I kind of have to to help build you the cool things you need to animate, right?
Okay, you know, that makes sense.
Alright, so if I'm gonna...
Okay.
Alright.
Okay.
So.
Uh...
Then, I guess if we're going to start building stuff, and we're going to start taking a little bit more ownership of this stuff, but we're not going to own everything because we're going to work together, right?
Then I guess we just focus on making that current design that we get from the designers.
And whatever we come up with right off the bat, we just do that, and it's done.
And then we can just get back to animating, right?
That's it.
That's all we got to do.
We just make that quick little thing, and then we're good.
Uh, no.
God damn it.
Um, you know, there's, you know, any, any process is iterative, right?
But you know, having a, owning the vision is, and understanding the vision is critical to, to, you know, ensuring that it gets, you know, completed in the right way.
a singular person can, if a singular person can own and implement that vision, then you know it's going to, you know, you know it's going to be the one that was originally proposed, right? Whoever wanted the melee system had a vision for it. If they trust you, the guy that's setting it up.
and you can own it, and you can be the end-all be-all for that system, then why not go for that?
I'll tell you why not to go for that.
I've seen this happen too many times.
A tech-happy animator starts building some fancy layering stuff on top of his base animations and it makes the animation look more organic and the transitions look smoother and everyone's thrilled about it and then he starts to get his tendrils into other things that start to affect gameplay and introduce a whole bunch of bugs into the systems and come finally, who do you think they ask to fix those problems?
They come to the engineers.
The animators are off doing, I don't know what, smoking weed up on the roof or something.
While the engineers are trying to figure out these bugs, and then we're exposed to these huge spaghetti mess of visual programming graphs that I have no idea what's going on. I come to you and ask you what this is all about, and you wrote it three months ago and you have absolutely no idea how it works anymore, and it's on me to read through this stuff and trying to figure out what the hell is going on. I don't want that to happen ever again.
Designers change their mind all the time.
I'm not going to trust them either.
I'm just going to build what I think is the best interpretation of what the designers are asking for that covers my bases when they do change their mind.
And you're just going to do what I ask you to.
OK, these guys are never going to work together, Paul.
So you've had some stuff that's out there that doesn't.
tell me there's some future solution that means these guys can stop bellyaching about whatever they're doing and you'll save us.
I think what we're going to do is we're going to go rent out a mocap space and we're just going to organically just capture everything we think we might want.
And we're not going to do it in a sort of systemic way, we're just going to sort of organically capture all the combat that we want in the system.
And we're just going to rely on the thing to learn what is good.
Okay, so I got a couple of... how much is a lot?
Um...
How long is a piece of string?
Like, you know...
Okay.
I mean, it's going to be your job to clean up all the data, but, you know...
It's what we do now.
Yeah, and eventually we'll have machines to do that for you as well.
So you're cool to back up to smoke and weed on the roof.
I am legitimately astounded right now at the nightmare fuel this sounds like.
I don't even know how to go at this.
I've been burned by animators too, and by designers, and I've burned them subsequently.
I was like, here's some sweet turning tech, and then it didn't turn.
I've learned that lesson, right?
But I think that the takeaway here is that, yeah, don't go sit in a corner ever.
I think my message is gonna be one note the whole time.
Why would you go and do this alone?
We're working as a team, we can build things as a team, and I think better off as a team.
Like, vision holders and notaries don't really have a place in making collaborative designs and collaborative art.
Like, what are you, this is crazy.
You guys are like, terrified of everything.
Well, here's, I'll tell you what I'm terrified of, right?
What I'm, what I'm completely and utterly terrified of is, how the hell am I supposed to balance being like a traditional aesthetics focused animator who cares about like that visual quality?
We care about the performance of the character.
And now I'm having to learn about some form of owning all the things, some form of something, but nothing and smoking weed.
I gotta get good at that now.
You're talking about like lengths of string.
Guys, like how do I balance becoming more technical while all the stuff and why even like, what the hell?
How much of it do you want to own, is what it comes down to, right?
Like, you were tasked with building a melee system, right?
You can offer the assets to a certain point, but when you start plugging them in, if it's your job to set them up, and you find out that the pieces don't fit, then you're gonna have to go back and revise them so that they do fit, right?
And then you have to deal with design iteration, with timing changes, all that fun stuff.
You're gonna pick up the knowledge whether you want to or not.
if it's required of you to set the system up.
So why not just take it a little bit further and then just cut out the middleman in terms of iteration and timing and just do it all yourself?
Okay, so learn just enough so that I can keep applying the traditional stuff that I know in game.
You can't lose sight of the end goal, right?
The end goal is the system.
Like the pieces you build are part of it, but in the end it's, you know, you're delivering a system.
Okay.
I think the traditional aesthetics is the most important part of your job, and that's why you were hired, was to make sure that the game looks really, really good.
And we're going to put a lot of constraints on you in that effort.
And if you're trying to figure out where you want this technical development to focus on, make sure that it's always driving forward those traditional aesthetics in whatever way you feel is necessary.
DCC tools that help your effort out, automation tools that help get around the bad pipelines that we're providing you.
Just make sure your focus is always on those traditional aesthetics.
Don't get distracted by...
building gameplay mechanics and feeding AI different parameters so it looks smarter and all that kind of stuff, or control mechanics, don't worry about any of that stuff, just focus on trying to get the aesthetics to the best place that they can be, and in whatever ways learning technology will further that goal, by all means pursue that.
Okay, so I have a question then, because I'm trying to take a page from Cody, because he's the only one that I feel like is not a rage cannon right now.
Where do you need me more as an engineer?
Helping implement or on giving you a lot of assets?
Most of the time it's giving me assets.
But the one place where your skill sets can really help is evaluating the game and understanding when it doesn't look good.
and trying to figure out why it doesn't look good and what part of the implementation is causing that.
Because that's a part that the traditional technical people may not have an eye for.
And they may be completely blind to it because they've been staring at it for so long and they're invested in the technical solution.
So I want you to look at the game and understand where it doesn't look good and then try and figure out why it doesn't look good.
That's another really, really good use for your technical skills.
Okay, so then how am I gonna balance art and tech with the crazy stuff you're talking about.
So what I would like from Animator is to embrace technology.
It is not going to take over your job.
You are going to be, instead of creating one creature, you're going to be creating ten creatures.
You're going to have a multiplicative effect on your output.
But you can't do that if you're worried just about...
the specific posing of one particular finger on one key frame of one animation.
You've got to start thinking more holistically.
So I'd like you to start really understanding the technology and really understanding what's going wrong when it's not doing the right thing.
Really figuring out how I can communicate to the engineer how to make this technology obey the 12 principles of the animation.
How to make it feel like an animation, not just a sequence of poses.
Okay, it feels like they're starting to come around a little bit, Cody.
Yeah, I feel like I don't have a lot more to say here, other than like, I think there's a balance to strike where you get to own some of that implementation because at the end of the day, like, you have the vision for what that animation's gonna look like.
I don't.
Like, as an engineer building the system for you, I am gonna look at it for 14 hours a day and be like, it looks like those quaternions are doing their...
they're quaternion and then I'm gonna move on.
But if you're like, wow, that arm looks terrible and I don't see that, tell me, so then we can work together to make it.
Or conversely, if we make a cool system, you get to have a hand in making it too.
But there's a balance to strike and I think we're convincing some of the engineering people to kinda get on the same page.
Okay.
All right, so then what I want to do, because I feel like we're starting to get to a point where we're understanding, and I'm a little less lost when I'm dealing with some of you guys, that, like, what's your closing argument? What is it that you feel like you need to say to me, the animator that's starting down this technical path?
I think you need to keep your eye on the prize, you know, don't lose sight of the end goal.
you started out by saying, hey, I need to make a melee system and your first step in the process was, I'll spend all my time making the pieces, right?
You know, that's a, you know, can't see the forest for the trees kind of thing where you're going too low level with it.
You know, make sure that those pieces, you know, are in service to the vision, you know, to the goal.
just don't lose sight of the goal.
Cool.
For me, a little knowledge is a dangerous thing.
And complexity will sneak up on you.
I've seen it happen before.
Something that looks like it's a simple problem to solve with some sort of scripting solution, very, very slowly gets more and more complex.
So just be aware of that fact when you start dipping your toe into this kind of stuff.
If it feels like it's getting out of hand, you don't think you can control the system yourself anymore, or it's feeling like this thing isn't going to scale, I'm starting to get bogged down with trying to debug this thing because the debugging tools aren't very good, whatever it is, don't feel that you have to take that on yourself and continue to build on that poor framework and increase the complexity.
Go to someone whose job is to manage that complexity and say, hey look, this is getting too big.
I think we need to re-implement this in a different way.
Is that something that I can do or is that something that you should be doing?
And just make sure that you're aware of that stuff.
Don't go down this path and get lost in a sea of complexity that you're not quite ready to handle yet.
Cool.
I guess I would say that if you're going too far and you're like, I made this system, now I just need to add 12,000 more assets for it in order to be complete, maybe you've gone down a path that's a little too structured.
And if the engineer is saying to you, we have to do this in this exact way, and we've got to do this with this much timing and this thing, maybe that's a little too structured.
So you've got to work with the engineer and work with your own wisdom to say like, hey, maybe we can create a system that could do this dynamically.
Maybe there's a way that we could leverage both parts to create something that could be done a little more procedurally.
Maybe I don't need to make slope animations for 12,000 different creatures.
Maybe that's not a good idea in the use of my time.
Cool.
I mean, I see the irony now in having this talk about soft skills versus becoming a more technical animator, but it really is about that, right?
I agree with what they're saying.
I want to, as an engineer, I want to enable you to make better and cooler art, and that might mean giving you more control or not giving you more control or making it more procedural.
I don't actually know the right answer to that question.
It's so context-dependent, but the key takeaway is collaborate, talk to people.
If you can't do that, let's solve that problem, and that's a totally separate issue, right?
But let's work toward making you more technical as a team.
I think that's the takeaway.
for me. All right. So we have a couple minutes left. And so what we wanted to do was offer up the chance for anyone out in the audience to ask a question of our panel. You have two options. One, you can ask them to answer earnestly as they essentially just did.
or if you feel like you've been having an argument with somebody and you want that extreme counterpoint, you can specifically ask your question to one of their personas, and they will give you that answer.
All right? So anyone who has questions and wants to do that, come on up to the mics.
Also, who on the panel, if these are the type of conversations you're interested in having, and having more of, all of these guys are fantastic people that will help train you up and are excited about doing these types of things more and more.
Who all up here is hiring right now for animators or animation programmers?
All right, so if you're interested in this type of stuff, talk to Cody, talk to myself, talk to Clay, talk to Paul and Jeff, right?
Like, this is something where a lot more conversations need to happen and are happening, and hopefully this starts you to get a little bit idea of where it can go and what you might encounter.
So who's got some questions for our panel?
Come on, I wanna hear Jeff say some more inflammatory things.
Hello. I guess you can answer this. I don't know. I kind of want to see you guys get spicy, but I also earnestly want to know if you see whether or not there is a world where an animator could be strictly like fine art animator versus like is life now animators must be technical or can you just focus on the art?
I feel like.
Outsourcers get a chance to focus just on the art if they stay within the metrics that they're provided.
But I'm assuming most of you people want to be more focused developers as opposed to outsourcers.
Focusing on the art is great, especially in like cinematics and areas where there's no sort of active input.
Anytime you layer input with control, concessions have to be made, right?
You can make a bunch of really awesome puzzle pieces, but if you've got...
I've got a puzzle piece for the Avengers and a puzzle piece for Dora the Explorer.
They don't fit together, right?
Changes have to be made to ensure that those two things go together.
Sure, there's going to be some sacrifices, right?
There are metrics and technical details of asset authoring that are critical to ensuring that it functions well together.
Pure art, I think there are opportunities in terms of gameplay animation.
One of the biggest ones we get for kids coming out of school is they have to sacrifice anticipation, right?
It's one of the first things that go in terms of gameplay feel, but yes and no.
Got another question.
You want the genuine or spicy?
Genuine.
Okay.
So you were talking before about having artists meet up with engineers and I'll learn a little bit what you do, you learn a little bit what I do.
I've been in those conversations and I've learned what they do, but they don't reciprocate that.
How do you teach people how to learn in that sense?
Or to accept what you're trying to teach them?
We might want to plug...
When is...
No, who's doing the...
Yeah, so at 3.30 we've got one about teaching your team to fish and communication and all that stuff.
So I don't want to step on your toes, but we do have something coming for that.
Possibly, yes.
But I still want to hear your guys' opinions.
Well, so for me, when I got into the industry, the first thing I was tasked to do was help build animations out for...
or somebody who turned into a dragon.
And they were like, hey, so it doesn't really do this thing that you needed to do.
And it was all Greek. I was like, cool, yeah, totally, I'm on that, man.
And I went back to my desk and was like, I'm not on this. I'm very concerned.
So, like, for me, I think I'm fortunate that I had to go back to the animator and be like, look, I have no idea what you're talking about. Can we step through really slowly? I know.
dumb Cody, but we're gonna get there.
And I think that was also a factor of production.
Like I talked to their lead, or I talked to their producer and was like, I need time to sit down and learn.
Like that's part of my job.
So, it sounds really rough to say, but that's a structural, institutional thing.
Make the case for it, because learning that stuff is invaluable for your studio continuing.
It's awesome.
It's, as everyone talks about the animator who wants to focus on their art and doesn't want to get technical, but the flip side is equally true.
You've got engineers that just want to focus on pure engineering, and they don't take the time to understand the aesthetics and the importance of, like, responsiveness and feel and gameplay balance and all that kind of stuff.
And the most...
The most valuable members of your team on your engineering team are going to be the ones that do appreciate the aesthetics of animation and the ones that do understand the nuance of gameplay, even if it's just at a surface level and are able to apply that understanding to their work.
Even if they're not the ones responsible for making everything look right, if they have an understanding of what does or doesn't look right.
they can spot problems quicker and respond to them quicker before it gets out and it's a lot more difficult to draw that stuff back in.
I believe it applies to every discipline in gaming.
How you get people there, I don't know, but I think it's one of the most important things in this industry is having that cross-pollination between all the disciplines and at least having an understanding of it in every single discipline.
Yeah, I got a tip for you.
So if you're trying to get an engineer to help you do something better, what I would recommend to you is book a meeting with the engineer.
Get him to sit down with you at your desk and go through your workflow.
Make him really understand what it is that you're doing day to day.
And immediately, because the engineer is going to get frustrated, he's like, this is a waste of time.
I've got to do this.
And he'll be thinking, oh, I could do this to improve this.
I could do this to improve that.
And it's like you'll come up with tangible items about how you could improve your workflow.
And the engineer will see it, because he'll experience that.
pain face to face.
All right, I know we're technically out of time, but Christian has a sly smile on his face, and I feel like he wants a spicy one, and I want one more spicy to end us off.
Thank you.
Sure.
Don't let me down, Christian.
I was gonna ask for a genuine one, but, yeah, we'll go with spicy, that's fine.
As for Paul, so, I'm an animator, I wanna keep embracing my animation roots, and I also want control, but I also wanna embrace the future.
How are you gonna help me with that?
I need more than two dials.
I could give you three dogs.
Can you start spicy and then end sweet?
Start spicy.
Yeah, so I'm with you, buddy.
I want to create the best animation system that we have available.
In fact, I want to create the best system that's not even available.
And we're going to work together, and we're going to see some amazing stuff.
And it's going to look and sound really impressive, and then we're going to choose little snippets of it, and we're going to demo that.
And then we're going to build a whole feature set around this thing, and we're going to ignore these little problems that you see.
And you'll be like, but I need to do this in this situation.
And I'm going to tell you.
So, to be fair, coming out of character a little bit, it is very difficult to balance making a complex system easy to understand and controllable.
It's basically like control plus complexity.
they're very difficult to marry in a nice way that it's a simple and easy to get the result you want.
So I think it's always just about this iterative loop of us constantly trying to get better and working with the animator to see how that workflow is and to see what the shortcomings are, and then trying to really make a system that isn't going to be so problematic for your particular game type.
So sometimes the system might work really well, but it's not gonna be for the right, for a particular style of game.
So we can agree that the animation, whatever happens, is going to look amazing?
Yes.
So, okay, cool.
So that basically means that when any animation awards and everything come around, then the animator gets the credit?
I think the mo-cap artist does, right?
Oh.
All right, all right, that was perfect.
We gotta go.
Thanks to the panel.
