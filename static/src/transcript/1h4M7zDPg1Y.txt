OK.
Hello, everyone.
The people behaved themselves last night.
Thanks for coming, making it at 10.
That's pretty early, even by game development standards.
So I appreciate that.
They've asked me to ask everyone to please silence your cell phones and anything else that makes noise, because they're recording this.
And other than that, we'll get going.
And hopefully we'll have some time left to answer some questions, if there are any.
So by way of a quick introduction, my name is Greg Donovan.
I'm a senior producer at Volition.
They've been putting up with me there for about a decade.
I've been in this crazy industry for 16 years now.
Most recently, I was the lead producer on Saints Row 2 and Saints Row the 3rd, but none of that stuff's really important.
The important stuff is what this talk is about.
It's about the challenge of delivering on a game's vertical slice and showing Volition's history of vertical slices through examples from the Saints Row and Red Faction franchises.
And we'll review the successes and failures of this deliverable from these titles.
Sneak peek, we've had more failures than we've had successes, but that's okay.
Volition as a studio believes the vertical slice should be part of the development cycle because even with its challenges, it can really help the team before entering production, and this talk aims to illustrate that point and show why.
We're giving this talk to hopefully educate, share, and inform, potentially help you and your team to avoid the mistakes that we've made in the past because we believe that sharing each other's mistakes and learning from them means better games for everyone, and that's something we all want.
But before this talk, there's some caveats and you need to know them.
Number one, this is not a do this and you will have guaranteed success lecture.
We're not claiming to have the answer.
I've been to lectures like that and frankly I think they're horse shit.
Excuse my French.
Think about it.
We, production, our job is to basically accurately and consistently schedule profitable fun.
A process that is inherently iterated upon time and time again.
It's really, really hard to do.
So if you're looking for a silver bullet, you're going to be really disappointed with me.
I apologize.
Two, this talk is where Volition is now, based on our past learnings.
This is how we approach Vertical Slice today.
It may change in the future.
And moreover, this is based on what we do and what works for our studio.
Volition has about 200 full-time employees.
And we make, by most accounts, large open world games on the console and PC.
And what we do may not be right for you and your teams.
Finally, this talk isn't about me.
I didn't work on all the projects here.
This is about the studio and its learnings.
I'm just the mouthpiece.
I drew the short straw, I guess.
I don't know.
I did do a lot of interviews with many principals on the projects to ensure that accuracy here.
I want to spend a little bit of time answering this.
And apologies if this is insulting.
I know that most of you probably have an idea.
I just want to make sure that.
We're using the same language as a common language in getting into the talk.
First and foremost, this concept can go by a lot of different names.
Sometimes it's called a first playable.
Sometimes it's called a proof of concept.
And if you're really cool and from Silicon Valley, you may call it a minimum viable product.
And if you're really, really busy, you call it an MVP, because acronyms are really, really cool.
But anyway, they all mean the same thing.
For common understanding, a vertical slice is.
A section, level, gameplay duration, X number of missions, whatever, of the full game that successfully communicates the team's intended player experience by having major systems and features proved out in production working together.
The assets aren't typically final, but they should be as close as possible representative of final quality.
Yeah, I made that lovely image because when you try and do an image of a vertical slice, there aren't many out there.
I'm really proud of that one.
Generally speaking, vertical slice is a very large and complex milestone that occurs just before production. They are challenging, but we believe they're worth the effort because they can teach you a whole bunch, not least of which is... There we go. Click. Whether or not the team is ready to move into production. As a team, You can determine whether or not you're ready to move in production, where production is usually defined as the team knows what they're making and how to make it by attempting to actively, objectively answer these questions.
Is the game delivering on the player experience?
Do you get a sense of what the game is?
Do you have an acceptable level of tech debt?
A quick aside for tech debt, no way is everything going to be done on the vertical slice.
Some systems and features...
will be hacked in, others are still going to be in development, you'll probably have a few that haven't even been started yet.
The issue is, the team's going to need to necessarily finish these systems, otherwise you're going to architect them correctly later in production.
And the rub is trying to quantify and track how much work is left to bring these systems to a point where they're ready far enough along to be submitted.
So, succinctly, it's like this vertical slice can keep the team objective and honest about progress and whether or not you're ready to move into production.
Overall and importantly, the issues you uncover in a vertical slice, and you will uncover them, are going to be, they're best discovered earlier on, rather than later on in production.
So to find out where we are, we're going to take a trip down memory lane, look at Volition's attempts at vertical slices based on what worked and what didn't on our projects.
First up is Saints Row.
came out in August of 2006.
A little bit of history of this title.
I used a similar slide last year, but it bears repeating.
Saints Row was really, really hard for Volition.
It was a new genre.
We had never made open world games before.
Completely new tech, engine, and tools.
It was a new platform.
We didn't know much about the 360 that we were developing for it.
We didn't know how to do much of what we were doing well at all.
I mean, basically, it was shaping up to be a perfect storm. But this project does mark the first time that Volition consciously planned to deliver on a vertical slice. Before Saints Row 1, Volition had team sizes of about 50 to 60 people. We didn't do vertical slices, in part because it wasn't part of our vernacular. It just wasn't a concept. And also in part it was just easier to turn around and see what people were doing. And with a team of 50 to 60, it's relatively easier to see what people are working on rather quickly and things just came together.
this kind of cowboy development, Wild West.
But for Saints Row One, that approach wasn't going to work.
So this guy up here is the producer on Saints Row One.
His name is Jacques.
I have no real reason to put him up here, except that I like to troll him.
And I know he probably doesn't like this picture.
Anyway, he and others in studio management, before working at Volition, worked at companies where vertical slices were a thing.
And they, being smart fellows, brought the concept to the team and said, hey, we should do this.
And Volition, being smart fellows, said, yeah, that makes sense.
We're buying into this concept.
Let's make a plan.
It wasn't a dumb idea.
So they came up with a vertical slice deliverable.
And that was?
Make the deliverable phase-based, multiple milestones across multiple months.
It's going to be a ton of work because it's new everything.
It's going to take some time.
Make the deliverable culminate in a demonstration of the playable experience, player experience.
And make it playable in a city section, a small city section, that is exhibiting core gameplay.
And overall, show progress and sell the vision to both the publisher and the team.
Internally, we needed to know that we can make open world games, and the publisher, which was THQ at the time, we needed to show them that the game wasn't as controversial as some of them over there thought at the time.
So, they had a plan, felt good about it, and decided to plow headlong into the storm.
So actually part of the result, up here, this is a map of St. Trois Vertical Slice, the environment.
It was ultimately called Phase 5 because it took 5 months to do it.
It's one section of the city, approximately 4 blocks.
The next clip I'm going to show you is some gameplay footage from Phase 5, from St. Trois 1.
Full disclosure, the clip is actually one month after the latest documentation I could find on the St. Trois 1 Vertical Slice.
But everyone I spoke with on Saints Row One says that the footage is indeed from this deliverable.
you That rather brisk frame rate has not been altered or sped up in any way, I promise.
So looking back in hindsight about what worked and what didn't for the vertical slides in Saint's Row, it demonstrated the player experience.
We had gameplay there through core features working locomotion.
combat navigation vehicles, etc. The fun was there.
The deliverable was in a city section. The team had a first pass of what it would take to make a city.
And it answered some good questions for the development team.
Scope was coming into focus. We knew it was going to be huge.
In fact, this deliverable was a starting point for us to talk about whether or not we needed more time.
Seriously, knowing whether or not you have a scope or timing issue as early as possible is a good thing.
The vertical slice can help add data to an otherwise subjective concerns that typically come from, you know, production team members.
Finally, it sold the experience. It got the team excited, it got THQ excited, precisely because a pay provision was actually in the plan, in the game, and you could play it.
As for what didn't work, scope was huge. Remember, the date was in question, at least internally we're talking about it.
But instead of looking for ways to work smarter, like reducing scope, we instead asked the team to work harder, longer, and more.
Saints Row 1 was a very bad crunch for most of the studio, and in retrospect we could have done things a lot better.
Secondly, tech debt wasn't understood or quantified at all.
This was our first attempt at making an open world game.
We had no idea what we were getting into precisely, because there were so many new things.
And although there were many unproven technical issues, you know, it's never ideal to do tech and game at the same time as design, but it happens.
I'm going to focus on the streaming example.
Streaming is the first time you're making a really big matzah ball.
If you haven't done it, it's a lot of fun.
So anyway, to help provide some context, streaming is rather critical for open world games.
You can't have everything in the world loaded at once like you can for many other linear or level-based games.
Objects, animations, all the data has to stream in around the player, and you do your best to hide it.
And if your streaming isn't efficient, then the game doesn't run well.
This is a map of Saints Row One.
It's divided into city chunks.
At the time, we had a chunk-based streaming system, and it could only...
load in two chunks at once. The problem was, we didn't fully realize at the time, there were a number of areas that we called tri-points, which basically were three chunks met, like this. So whenever a player came across these areas, particularly when they were in a vehicle and driving very fast, the whole world would crap out and it would be a very poor experience.
I'll bring it up here a little bit higher there.
So again, phase five was basically only two chunks with an incomplete streaming system.
And we had no idea if this tri-point problem was going to be that big of an issue.
So basically, we let the development team go wide after phase five, the vertical slice.
And the chunk sizes, instead of being uniform and in a brick pattern, were all arbitrarily sized, the size of which was dictated by the world artists.
So, throw in the fact we hadn't even touched level of details, phase five didn't have any of those, and things like shaders, which are pretty commonplace terms now, at the time were only known by a few like really hardcore engine nerds.
We basically had this tech debt that assumed that was a monster and it bit the team very, very hard.
As far as the lessons, again using hindsight 2020, overall, phase five, the vertical slice, was deemed a helpful deliverable.
It was gonna be a thing for us and part of our development schedule.
It helped identify issues the team would have otherwise missed.
It helped sell the vision.
It's great to have a playable demo before that communicates the vision before you go into production.
It doesn't identify all the issues.
Certainly, we didn't realize how much technical debt we had amassed.
Phase-based is a good way to approach it, because it's a lot of work, and you won't get it done in, like, in one month milestone.
And, of course, it solidified the opinion that making open-world games is hard for us.
So, rounding out Saints Row One, I like to do these fun facts, to kind of, like, make it a little bit more interesting.
After the game launched, there was a witty YouTuber announced this musical entitled Buggy Saints Row.
It's a musical.
It was very painful to watch at the time, but we can mostly watch it in good faith now.
It's still up there. I totally...
You know, you guys can go watch it if you want, but it's kind of weird to think back.
And we created a game that inspired someone to write a musical about performance issues.
So, yay us.
Saints Row 1 was running at 10 to 15 frames a second approximately three weeks before launch.
This is not an exaggeration.
I think failure to establish the tech and the budgets earlier in production were likely the largest contributor to this.
And the Hail Mary was this system called PVS, which is Potential Visibility Sets.
Basically this giant rendering farm used to calculate performances set up by programmers.
Programming saved us on this project, and this is the epitome of necessities, the mother of invention.
And finally, the 3DS City Max.
The SR1 City was modeled and edited in 3DS Max.
It's a great authoring tool, but it's not a world editor.
And kudos to the team for actually doing that.
All right, moving on to other titles.
Next up is Saints Row 2.
Came out in October of 2008.
The history of this was pre-production on Saints Row 2 started before Saints Row 1 actually launched.
We were banking that was going to be a hit.
But we necessarily had a different set of leads because you can't have leads finalizing a project and doing pre-production on the other.
The new leads on that team, of which I was a part, was confident.
From the outside looking in, we were saying, how hard could this be?
Why are there so many problems on this new genre?
If we're in charge, there won't be any problems.
It'll be chocolate milk in the drinking fountains.
Everyone will be happy.
The Saints Row One team was overworked.
They were really stressed.
They were finalizing the game.
They didn't have time to work with us, and because of our attitude, frankly, they didn't want to.
So we did things our way, and that way was, take the code base and implement new features.
Features that the Saints Row One team wanted to implement, but didn't have time to.
Features the publisher wanted, and most importantly, features that we wanted to implement.
And our plan was to make a vertical slice that demonstrated these features in all of their glory.
Going through the archives, I couldn't find the actual SR2 vertical slice build, but we made one. We found something.
Down there at the bottom there, this is a lovely Visio chart that we made. I don't know, this is like circa 2006.
It's really weird going through all this stuff again.
But down there at the bottom there, POC, proof of concept, was like this gate before going into production.
But what we did find was this Saints Row 2 vision piece.
And talking to the principals again, we agreed that...
We're going to show you this on the next slide.
The features that are contained in this video are all the features that we had done at the vertical slice before we went into production.
So without further ado, here's the Accentro II vision piece.
This one does have audio.
So looking at Saints Row 2 in the context of the vertical slice, what worked?
We got in a lot of cool new features.
Frankly, a lot of the features that players expected from an open world game like boats, motorcycles, and flying.
We made a lot of improvements in Saints Row 1's core gameplay, such as improved character creation and customization.
So in this regard, we were nailing the SQL formula, taking the established core of the predecessor, improving upon it, and certainly by adding new and improved features on existing code bases, one way to make a SQL.
And as with Saints Row 1, this video helped solidify the vision and get both the team and the publisher very excited about it. As for what didn't work, we took a shotgun feature approach. There was little to no focus on establishing a cohesive player experience. Saints Row 1 did focus on a player experience, even if it was Thug Life or an MTV rap video, they did have one. And this hurt us in production because we had a lot of people developing wide in the feature regard instead of deep.
And Saints Row 2 tonally is really, really strange.
In one scene, you can be euthanizing one of your homies.
In another scene, you're streaking or you're spraying sewage on people.
It's all over the place.
The vision of that tone was just it wasn't solidified.
And not having that in the vertical slice hurt us.
And the tech debt thing hurt us again.
We had to fix the streaming issues on Saints Row 1 by making all the city chunks into a uniform size and make them smaller so we could have three loaded at once.
We made it in a brick pattern.
and we had to fix holes in the world to accommodate flying.
But, as with Saints Row 1, we did a poor job of actually quantifying this tech debt.
Fixing these issues in a small section of the world when you're doing it in a vertical slice doesn't do a good job of telling you how much work there is when you scale up into full production.
As for the key lessons...
You need to work towards delivering a player experience.
Just having a list of features in a vacuum doesn't cut it.
And if you follow a player experience, then necessarily the core gameplay, the systems, and features that support that player experience are going to follow.
Again, we did the whole shotgun approach and developed wide instead of deep.
And this methodology was basically throw things at the wall and see what sticks.
Finally, we needed to improve, not finally, sorry.
We needed to improve at extrapolating technical issues.
Again, you're not gonna be feature complete, a vertical slice, but you need to determine which critical systems are really in their early states and how much work do they really, really need.
And finally, check the egos at the door.
Work with previous teams.
A non-invented here philosophy is detrimental.
It's not good for anyone.
Competitiveness among teams is OK, but not when it comes to the expense of doubling up work and losing productivity.
Fun facts about Saints Row 2. Co-op as a feature was added while in production or at the very least at the end of pre-production. It was our attempt at a silver bullet feature. It wasn't accommodated for at all in schedules and guess what, if you add co-op to a game before you go into production, it's going to add some work to the team.
As with Saints Row 1, we used 3DS Max to create and edit the world. And this fun fact, Saints Row 2 had 94,000 reported bugs. The average bug count for all other Volition projects was 40,000 bugs, which got me to thinking, what's the answer here? Did we have a better QA team on Saints Row 2 or was it a buggier game? Depends who you ask. Okay. Next up is Red Faction Guerrilla. It came out in June of 2009. It's a history for this is that Red Faction Guerrilla, I'm going to call it RFG or Guerrilla, was another challenging project for the studio. A key hook in this game, if you're not aware of the franchise, is that it has destructible environments. For RFG, we went from destruction in a linear game, like in Red Faction 1 or Red Faction 2, to destruction in an open world.
which is a very hard problem to solve.
I mean, think about it.
You've got real-time physics-based arbitrary destruction.
That's complicated enough in a linear game, but when you take it to the open world, it's a whole level of scariness.
But the studio was moving towards making exclusively open-world games, so we, of course, we wanted to bring this technology to that genre, and it took a long time for the team to figure it out, determine how to make it work.
The plan, starting out, because the problem of figuring out destruction in open world was so difficult, was quite intuitively, you know, to get the destruction working.
through a tech demo. Lots of tech demos, they went through four of them. To be clear, these tech demos weren't vertical slices, they were demos focused on getting the technology working in an open world environment. On the next slide I'll show you a clip from one of these demos, and actually it's one of the things that the design team made, and you'll see that it's not really a playable game, it's more of a vision piece of like what could design for this game How could it be like if the tech were actually solidified, but at the time they made this it wasn't.
This one does not have any sound, so there won't be anything wrong when you don't hear anything.
So kind of looking at this holistically, what worked and what didn't for the team in regards to vertical slice.
The team got the time to do things right, which in this case was like solving the very hard problem of real-time physics-based destruction.
But they didn't make a true vertical slice, at least not before production.
After the technology was deemed completed or solved, the team went into production.
But there were still a ton of design issues to explore and, frankly, answer yet.
This right here is one of the maps in the game.
It's called Dust.
The team remade this at least four times in production because they hadn't figured out the design or the gameplay yet.
Effectively, the redoing of dust in production became the project's vertical slice, even though the team was officially, ostensibly, in production.
Also, there wasn't a very good, strong vision on this game.
It was very blurry.
And some of the team had a running joke.
It's like, what is this game about?
Well, you destruction.
What do you do in this game?
Well, you destruction.
That kind of added to the confusion of them trying to nail a cohesive player experience.
Looking back at it and the lessons that we learned, key takeaways for Red Faction Guerrilla where it's like open world games with destruction are really, really hard. They take a long time, so long that sometimes you're going to focus on a singular problem, in this case the tech, and forget about the player experience and design. Tech demos allow the team to solve the problem, but tech demos are not a vertical slice precisely because they focus only on one thing, technology.
And why this can be an important piece of the pie, it's only one piece.
Basically, you can't prove out game design while tech of this magnitude is still evolving and being figured out.
You can't say the team is in production if you're still trying to prove out core gameplay.
Fun facts about Red Faction Guerrilla.
We had two Saints Row games come out before one Red Faction game came out.
It took them five years.
We like to tease the team about this.
They don't think it's nearly as funny as we do, but we think we're in the right here.
Red Faction Guerrilla was originally a first person game.
You may have noticed that in the clip.
The publisher asked to change it to third person because at the time third person games were selling better than first person on console.
This produced a very short lived but vivid shit storm of volition but in retrospect it was probably the right decision.
Next up, it's one of my favorites, Red Faction Armageddon.
Came out in June 2011.
Depending on who you ask, some will say that Red Faction Armageddon, I may call it RFA, was a more difficult project than Saints Row One.
There was a lot of collaboration from the publisher on this game.
And unfortunately, much of this collaboration came in the form of specific features or ideas.
Taking a step back, a lot of people don't know this, but Red Faction Armageddon was originally planned to be Red Faction Crusade, which is going to be a direct sequel from Red Faction Guerrilla.
Red Faction Armageddon is kind of like the spiritual successor, but narratively doesn't have much to do with it.
The producer on this game was from a company who also did vertical slices, so it was part of the development cycle.
And they had a very specific plan for what they were doing the vertical slice in Red Faction Crusade.
And that was a four-month deliverable.
Again, it takes a long time to do these right.
25% of the gameplay was going to be above ground.
One of the new features was to take the destruction underground.
So 75% of it would be underground.
Proving out underground mechanics, underground destruction was something new for us.
They were also focusing other single-player features like repair.
In addition to destroying things, you could actually build it up again.
And they were focusing also on making it look better than Red Faction Guerrilla.
On the next slide, you're going to see a quick clip of the footage from Red Faction Crusade's vertical slice.
It's very quick, but I just want to show it to you.
It's like how solid, how far along this team was, because vertical slices were, by this time, kind of a thing in our development schedule.
We're getting better at it.
You'll notice that animations, basic combat, the way things look, it's really shaping up.
Okay, then the team received some notes from a newly hired creative director at THQ. These notes came during month two of the four month vertical slice. And one of the motifs of this, of this, these notes were, get aliens at the game.
At the time, the team was like, okay, thanks for the notes, these are great, it makes sense, but certainly these can't be a mandate, right? We're two months away from production, we're in the middle of a vertical slice, so the team kind of ignored these things and just went back to work. And shortly thereafter, THQ went through some management changes and that creative director became an executive vice president, and even more shortly thereafter, the team received some more notes, and the gist of those was, did you think I was joking about the aliens?
And we had an epiphany.
It was like, OK, we get it.
Let's put in these aliens.
It makes sense.
It's a sci-fi game.
Let's do this.
And there was also a really important footnote to the whole add aliens thing.
It was also, and you need to bring in the game by six months.
So there was a new plan.
As you can imagine, there was some scrambling and consternation and people trying to figure out what are we going to do here.
So the team and studio management came up with a new plan, and that was the solution out of necessity was make the game linear, take it fully underground, because linearity would be easier underground, and get the aliens in game.
Here's a way to contextualize what happened. On the left we have Red Faction Crusade, on the right we have Red Faction Armageddon. Here's where the team, Red Faction Crusade was working on the vertical slice, month two of four when the request for aliens came in. And here's for various reasons the team needed to pull it in by six months, the street date. And here's where the team actually got their first aliens in game.
So looking back at Red Faction Armageddon in the context of what worked and what didn't, as far as the good is, the team got in aliens. And they pulled in the ship date by multiple months. They made the necessary but painful decision to go from open world to linear in order to hit a date. Seriously, what the team did here was pretty incredible. I've personally never worked on a team that's a game of this size that was able to pull in the street date by six months. And I think that they don't get enough credit. And they really worked hard to make that happen.
As far as, oh, there we go, sorry.
As far as what didn't work, there was no vertical slice.
This was the epitome of a team figuring things out as they went.
Aliens were added in production.
They abandoned their plans to do a vertical slice and just kind of plowed ahead.
Right or wrong, that was the decision the team made.
And because of this, it wasn't an easy production schedule.
When you're figuring things out, like what do aliens look like, how do they move, what are they, you're most certainly not in production.
So the key lessons are sometimes despite best efforts and planning, the shit can hit the fan and things can fall apart.
You can say you're in production, but if you're figuring things out as you go, you're really not in production. You're just fooling yourself and the team. To be clear, it was well within the publisher's purview to mandate aliens. And to be fair, the publisher did not dictate their behavior, how they looked.
or their whole history of motivation.
And aliens aren't exactly out of pocket when it comes to a science fiction game.
The issue was it's just the timelines with developers and publishers sometimes don't match.
And it was a very complicated feature to be added so late.
We don't have a lot of fun facts for Red Faction Armageddon, but this is a clip from the movie Bolt, which quickly made the rounds around Volition and THQ when the aliens request came in.
It was kind of serendipity. It was kind of fun.
I know you're a busy dog, but if you've got a second, we'd love to pitch you an idea for your show.
Tom's better at pitching. I'll let him take it from here.
Tommy's got the spotlight!
Wait for it...
aliens. Audience love aliens. You can't touch us. I don't know if you call that ironic or serendipity or what, but it was great. And again, you know, the aliens went in and they fit and the game was a success. Saints Row the third came out in November of 2011.
The history of that is like, we largely had the same leads team on Saints Row the 3rd as we had on Saints Row 2. This was helpful in that we were able to more directly learn from our experiences and our mistakes in Saints Row 2.
Experience told us that we needed to make a more defined vertical slice, especially focus on the aesthetics.
Wanted the game to look better than Saints Row 1 and Saints Row 2, not the prettiest looking game. So we started planning for a multi- phase vertical slice from the get-go.
The plan this time was to deliver it in phases again, but we're going to do a two-pronged attack in that focus on art and gameplay vertical slices separately.
The thinking was, let's let artists focus on making things look good, and let's let design focus on the fun factor.
Let's minimize interruptions, do our respective things, and then marry the two at the end for one great vertical slice.
On the next slide, I'm going to show you an example of one of the art vertical slices.
This is an earlier one, way early in pre-production.
It was designed to show off improvements to visual acuity, most notably in the world and the environments.
I think everything in here had its own collision.
It looks a lot better than Saints Row 2 for sure, but I don't know if its own geometry and collision for each of those individual assets was the right thing.
And we'll certainly talk about that a little bit more.
So that slide will come into play a little bit later.
The next slide is one of the design vertical slices.
On Saints Row III, we tried to focus more on the game loop, what the player is doing over and over again while they're playing the game.
We focus on that more, at least compared to previous Saints Row games.
The example you're going to see was when we were working on transitions in the game.
The player needs to go somewhere, and when they get to their destination, there's a cinematic at that destination.
How would that feel? What would the transitions look like?
This clip is one of the many design vertical slices we made, but it was a good one to show.
Listen Julius, you've made some bad choices, but you're a good man, let me help you out.
What do you want?
I want the- Okay, so looking at what worked and what didn't in the context of vertical slice, it definitely showed improvements in visual quality, at least compared to Saints Row 1 and 2.
The separate art and gameplay vertical slice approach was very beneficial in that each discipline didn't have to worry about the others.
It was helpful for a time.
And it marked the first time that we focused again on the game loop, and at least when it comes to Saints Row 3rd.
The game loop was customizing your character, going to an objective, watching a cinematic, killing things, and then getting stuff.
Because of this focus, we ended up focusing a little bit more on a holistic player experience.
It's kind of a subtle thing, but even transitions, like shown in that clip, do contribute to the overall player experience and what players are experiencing while playing the game.
As for what didn't work, we didn't spend enough time nailing down budgets.
Not monetary budgets, but performance budgets.
I mean, again, those interiors look great, but at the end of the day, it was a mistake because they weren't realistic.
We shouldn't have cared about individual assets.
We should have instead focused on the overall scene and how that played out.
Instead of making those bananas look super awesome, we should have spent more time up front focusing on things like level of detail, draw distance, ambient peds in vehicles.
in order to have a more realistic scene and gauge where our performance was.
So, I mean basically, at least for the art side, instead of having a creative vertical slice, we had an aspirational visual bar.
A visual bar is not the same thing. It's not a bad thing, but it's a very different thing.
We had smoke and mirrors in that the vertical slice wasn't representative of final quality, precisely because it wasn't a realistic depiction of what we could show in the final game.
And we didn't spend enough time figuring out what we could show.
Looking back in hindsight, again for Saints Row III, very specific category. In retrospect, was making sure we were maintaining and analyzing the performance budgets. We didn't do a good job of establishing realistic targets.
Many in the team, as with Saints Row I, spent a large amount of time optimizing things in production. Granted, it wasn't as hard this time around. But it was nonetheless work that could have been mitigated had we been more focused on it earlier in pre-production.
Related, establishing the visual bar, which is effectively what we did on the art side, is not the same thing as a vertical slice, and your bar may not be possible or frankly realistic.
And finally, working on the game loop was very, very helpful.
In addition to doing necessary, in addition to necessarily requiring implementation of key features, to complete the game loop, but also focus to think on things overlooked like navigation duration.
How long does it take to get here?
Is the player going to be engaged while I'm driving?
What does the transition from gameplay to cinematics feel like?
All those things contribute to the overall holistic player experience.
Fun facts about Saints Row the Third. Spoiler alert, Burt Reynolds is in Saints Row the Third as a character.
Contractually, his character couldn't use firearms. He could use his fists. He could kill people with his fists. He could only punch. And he couldn't catch on fire. He could die, but he needed to be impervious to fire.
Last but not least, we have Saints Row 4, came out in August of 2013.
This title got the best, most impressive vertical slice Volition has ever made, and I think the most impressive vertical slice ever made in the history of the universe and everything.
Well, really? How'd that happen? I'm glad you asked, because if you didn't, I'd have this weird segue, and it'd be silent. It wouldn't be good.
Again, I talked about this last year, but it's so wonderfully amazing, it bears repeating.
Saints Row 13 was working on this standalone expansion pack after Saints Row the 3rd shipped, and it was called Enter the Dominatrix.
Enter the Dominatrix was going to be in the same city as Saints Row III, but limited to new features and tech.
The standout features were superpowers and aliens, and the core of that game was basically the Saints and the Matrix with aliens.
The superpowers were fun, the title was shaping up, and then for business reasons, THQ decided to take what was best about Enter the Dominatrix and then add it to Saints Row IV.
But, Saints Row 4 was originally doing its own thing.
It was a separate and larger team going in a direction without superpowers.
So effectively, the original Saints Row 4 team got word they needed to take some, in quotes, of what we had in the Dominatrix and add it to their game.
But they didn't get extra time to do that.
Basically, they had one year from the time that decision was made to combine the two games.
That's not a lot of time to be adding something like superpowers and aliens in your game.
But on a positive note, enter the dominatrix was really far along and it could be rather wonderfully marvelously fleshed out vertical slides for the Saints Row 14.
I mean, think about it, at least from a vertical slice point of view. We imagine your vertical slices as well over 100 man months of focus worked, experienced by people who understood what they were working on. So in this one, the Saints Row 4 team got a fully playable critical path, which was about 7 hours of gameplay, more than functional new features, the superpowers were working and they were fun, boss battles, an art-directed city, and a preliminary quantification of performance budgets. It was the greatest vertical slice ever. So what worked and what didn't, the good was.
greatest vertical slice ever in the history of the gaming industry in my opinion. The Saints Row 4 team had nearly everything from a vertical slice point of view handed to them.
What didn't work, that kind of vertical slice doesn't work unless you have near limitless time and money.
And unless you work at a studio, maybe whose name rhymes with mouth, you probably don't have near limitless time or money.
I mean, think about it, like well over 100 man months of Enter the Dominatrix, this isn't time, it costs money.
And depending on your studio's burn rate, that could be a lot of money.
So basically this was financially untenable, at least for most of us.
And we couldn't expect this model to be something we would count on in the future.
So the key lessons, the biggest takeaway is that this was the ideal model and a properly constructed vertical slice is something that can be very, very helpful.
Again, we had player experience demonstrated through a fully playable critical path.
Core gameplay was proven. It was iterated with even some polish.
Seven hours of gameplay that demonstrated pacing, variety, lots of little things that can be challenged to get in a typical vertical slice. But it was nutty and again couldn't expect to have this vertical slice model for us in the future.
Fun facts, Saints Row 4, before the addition of superpowers, the original design called for warring tribes that were headed up by historical figures.
These figures were brought to life through cloning, through Ultor, one of the main bad guy corporations there.
And it included the likes of Genghis Khan, Hitler, and Cleopatra.
Alas, they never made it in the final game.
That could have been an interesting mechanic there.
Okay, so bringing this all home, Volition's kind of a, we're currently a one project shop, and these days we have a larger collection of experiences, and that we've made a lot more games, and we've got, and one goal of Volition, one thing that they're good at is like, let's learn better from the past and apply it to what we do in the future. And the vertical slice is no exception from that rule. We ask ourselves, what were the key lessons that we learned, and what are we doing to the vertical slice, you know, milestone today based on our past mistakes, trials, and tribulations. And again, this is what works for us, your mileage may vary.
These are kind of the core pillars in order to succinctly bring it together.
I'll go over those a little bit more in the subsequent slides.
I tried making a grid that showed like, you know, what worked and what didn't for each of the titles, but frankly it was a convoluted mess because what worked and what didn't in the lessons were kind of all over the place.
And this is where we've arrived at like our core pillars when it comes to a vertical slice.
Apologies to a certain shoe company, but it's an important milestone. Make it a thing.
Plan for it, make sure the team's scheduling for it and they're aware of it.
We believe and we have found there's too many benefits to not do it.
If you think about it, a vertical slice deliverable is going to happen anyways.
It may be right before you submit, but if you plan for it and attempt to do it before production, you'll likely have saved the team for some pain down the road when they're figuring things out in production.
We've never ever done it well on paper, but not trying would have been a lot worse. Just ask some team members on Red Faction Armageddon. And even with our issues and failures, we still uncovered issues and problems we otherwise would have uncovered later in production, and that's never a good thing.
Try to do it right, and that means use it as a gate going into production.
If the vertical slice doesn't help your team understand what they're making, how to make it, and whether or not you have an acceptable level of tech debt, then you're probably not ready for production.
To reiterate, focus on the player experience.
Don't focus on a list of features.
If you define the player experience first, then the features, the core gameplay, and tech and systems needed to support and make that player experience come to fruition is necessarily going to follow.
try and quantify your technical debt. Doing this well is really new and hard for us. It's kind of a new thing for us. And again, no way does a vertical slice mean you're feature complete and content complete. There's going to be systems and features and tools work going on in production. But you should work with the team to determine how you plan to quantify how much tech debt you will need to absorb in production. Some's just frankly inevitable. And you need to figure out with the team what your threshold is.
This deliverable is going to take longer than you think, make it over a course of multiple milestones.
We found that a good way to break it down in phases is effectively get it working, get it working right, and then polish it.
This deliverable is way too big and complex and way too early in development to bat a thousand. You're going to miss a lot of things, you're going to fail in some areas, but that's okay. We've never nailed the thing and yet we do it time and time again. Go into this thinking about the spirit of the deliverable. Can you honestly say the team's ready to go into production? Does the team have a solid idea of what it's going to take to make the game?
Do you believe that the player experience is there?
Is the fun that you're desiring, is it has it been delivered?
Like doing a lawyerly checklist against specific assets in this milestone as the only means for measuring progress is gonna be futile, leave everyone frustrated.
I mean, you're too early in development for such things and the bigger picture about the player experience, whether or not the system's working together is much more important.
So the final thoughts is like much of executing on this comes down to balance.
Doesn't mean feature or content complete.
It's not a finished game.
The key within this deliverable is to determine the most important things the team needs to be worked on in order to go successfully into production.
The act of knowing what you're making and importantly, how to make it.
To go into that development phase as painless as possible.
Work with the team to determine the end goal for this deliverable, which in our opinion is realizing the player experience.
Again, can't help it without necessarily defining the core gameplay, core loop systems and features that some people frankly focus on instead.
Make sure you aren't doing this through total smoke and mirrors, you have to hit something that's realistic.
and not an impossible and unreachable bar.
We quantify and track the team's technical debt, how much is acceptable to your particular situation, how much tech work are you gonna have to do in production, is that okay, have you scheduled for it.
And when you're done with the deliverable, be objective, analyze the results and have uncomfortable conversations.
It'll be worth it in the long run.
If you rationalize where you are, it will set the team up for pain.
Really try and quantify where you are.
Do you need more time before going into production?
If so, it's probably a good idea to get it if you can.
Basically, we believe that a longer pre-production cycle is more important than a shortened production cycle.
Despite knowing you won't nail anything, everything, it's still worth it.
The scary things lying there waiting to be uncovered are going to be there regardless.
It's best to uncover them up front if you can.
Again, the vertical slice can help with that.
And internally at Volition we're still improving about how we tackle this beast and despite all the angst and uncertainty that comes with this deliverable, we still attempt them.
I personally believe that nothing worthwhile is easy.
There's no good progress without at least some struggle.
And I think the majority of us in this room and at this conference, we love making games.
And we get involved with the whole schedule profitable fun because we like the end result in working with creative people.
It's too challenging otherwise.
I mean, why sign up for it?
So we believe that the vertical slice can help ease with some of the pain.
So hopefully you got something out of this talk.
I think we're all getting better at sharing ideas and best practices through conferences like GDC.
And hopefully the end result is, by doing that, learning from each other, we can make better games, which is something that we all like.
So thanks very, very much for coming.
I really appreciate your attention.
I think we've got a little bit of time for questions, if there are.
Before we take questions, I want to make sure you thank the conference associates in the back there. This conference doesn't happen without their help. Please fill out the questionnaires. They appreciate that. And also thanks to Volition past and present members who helped me with this talk. So thanks very much. Appreciate it.
If you have a question, we're supposed to go to the mic, right?
All right.
Hi, question.
Do you think that it's worth, in any practical case, of doing specifically a visual bar at the expense of any component of the vertical slice?
Or is it just better to move the art team straight to the vertical slice and focus on that?
I think the vertical bar is a double-edged sword.
I mean, again, I don't think I have the right answer for this.
You have to work with smart team members to figure out whether or not your vertical bar is something that is...
attainable. If it isn't, then you know you shouldn't do it. I think you should work with rendering programmers or whatnot. It's like okay, this is a vertical bar. We don't have the technology there yet, but we think we'll be able to approach that. In the case of Saint Tropez III, we just went in saying we're going to make this look as, we're not even going to consider whether or not it's possible.
That's the issue looking back in hindsight in 2020 for us.
We needed to work better with the technology and the rendering guys to say, does this make sense for us?
Can we hit this target?
We did that in a vacuum.
I don't know if that helps.
Does that answer your question?
Well, sort of.
It kind of sounds like that's biasing it more towards being a true visual vertical slice, and that the visual bar by itself doesn't really have much sway unless there's someone there adding tech sanity to it.
I think, I guess the way I would answer is having a visual bar way, way earlier in pre-production helps.
At least like characters, take that as an example.
We want our characters to look like this, pull from movies, other games.
And then the character artists are working towards that, with a contingency plan, knowing that they may have to scale back with triangles or polys or whatever later on, once the tech is figured out.
Thank you.
A key theme in your talk seems to be being a learning organization.
I found that quite hard to get my organizations to learn well.
So clearly Volition does learn from its past.
I'm having trouble hearing you. I'm sorry.
Is that better?
Yes.
So how do you make sure that you're...
How does Volition go about learning and keeping those learnings within its company?
Because many games companies struggle with learning.
Well, it's not easy for us.
I mean, we have a lot of core dumps.
We do that with all the teams.
It's open the entire studio.
Before, when we had core dumps with multiple teams, everyone would be invited.
And we'd record all that.
And frankly, it's upon incumbent upon studio management to make sure that the key takeaways from those core dumps, that we're not forgetting them.
But we failed at that a lot.
I mean, it's like the Saints Row T1.
It's like, we were, it was a non-invented here philosophy.
And I was guilty of that.
It was like, we didn't, I mean, let's.
It's part of the learning process.
I mean, we all have egos, right?
We all, it's like, well, I can do this totally better.
And it's a matter of trying your best to check the egos at the door and say, let's not go through this stuff again and make the same mistakes.
I mean, again, it's like, I don't have any clear answers.
I can just tell you what we've done.
And we constantly have to remind ourselves to go back, re-read the core dumps, talk about this stuff over and over again, check each other, keep each other honest.
It's like, all right, have we done this the same way in the past?
Are we going down this road again the way we shouldn't?
It's really hard.
Thanks.
Hi.
In your experience, how much of the actual content of whatever you produce for Vertical Slice goes into the final game?
Do you scrap it and just use the systems that you've explored?
There's the rub there, right?
You always want to go, all right, we're going to hack this stuff in and we'll fix it later for the final game.
But you never have enough time to do that.
And it's really scary.
Saints Row 1, I mean, internally we called it spaghetti code.
You know, it actually had code dating back from Summoner.
And just like, things are so busy, you never have the time to, like, sit there and properly architect everything the way you want.
So, in regards to specifically answering your question, I think it's dependent on the situation.
You do your best to schedule, you know, I don't know how you schedule, but it's like, here's some time to get it in, and then here's the time to properly architect.
But...
The other hand, demos come up, and it's like you have to hack things in.
I personally feel like demos are a good problem to have.
People aren't asking for demos, then no one's interested in your game.
And I think programmers get really mad at me, but I think if you had to choose between the two, hacked or properly architected, I'm going to go with hacked, because if you go with properly architected the whole time, you may not ever have a game come out.
Thank you.
Any other questions?
All right. Thank you so much for coming. I really appreciate it. Thank you.
