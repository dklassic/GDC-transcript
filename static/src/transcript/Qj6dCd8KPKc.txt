So this is a case for making your own game engine, which is a loaded topic.
All right.
I'll get started.
My name is Rez Graham.
I've been making games for a long time.
I want to start, before anything else, with a poll.
By show of hands, how many of you are working on a project of which you are using an off-the-shelf engine, such as Unity, Unreal, Godot, something like that?
like everyone.
Okay.
How many of you are using your own tech by show of hands?
Oh, my God.
A shocking number of people.
It's funny.
I do rehearsals for all this stuff, right?
And every time I did a rehearsal, I was prepared to have some line that was like, oh, yes, only three of you or something like that.
I'm shocked at how many of you are doing it.
That's awesome.
So I feel like I've started early.
Is that a bad thing?
No?
Okay.
We're just going to go rogue.
Here we go.
So I'm partially surprised that this talk was chosen at all.
Because usually when I have this conversation, this is the reaction that I get.
And those of you basically on this side of the room who are working on your own thing, working on your own tech, I wonder if you get a similar reaction to this.
Because I certainly do.
I know, it's insane.
Here's the thing, and I'll just get this out of the way right away.
I am not saying you should build like a fancy, super powerful, you know, Unreal or Unity competitor.
That is not what I'm saying at all.
I think that's probably the wrong choice.
I'm just, you know, a little baby, a little baby engine.
That's what I'm talking about, right?
You may not actually need all of Unity.
The other disclaimer that I have is that mostly this talk is for programmers.
If you're a designer, you can get something out of this.
If you're an artist, you can get something out of this.
But mostly I'm talking to the programmers in the room.
The reality of creating your own engine does require a bit of technical knowledge to be able to go.
So that's the other disclaimer that I'll make.
So I am Reds.
You may not know who I am, since I've never spoken at the Indie Summit.
Again, usually I'm across the street in the AI Summit.
I've been working in games for a very long time.
I've been programming for a very long time.
And I've been teaching for a bit less of time, but still quite a long time.
I've worked at a bunch of companies.
I've made a bunch of games.
The smallest team I've worked on was 2 and 1 half people.
The largest team I've worked on was 250 people.
So I've gone from AAA and Indie and back and forth.
And I do a lot.
some of the stories I'm going to tell, in fact all the stories I'm going to tell come from real games I probably can't name names because they're not always positive stories but I'll tell them anyway So let's get started.
What is an actual game engine?
When I say game engine, it's such a loaded term.
There are people who think things like SDL are game engines.
There are people who think that Unity is barely a game engine, or Ogre 3D.
So let's define what this actually is.
It's basically a bunch of code and or other tools.
That's pretty much what it is, right?
It's just a bunch of code that is somehow all lumped together.
But I think we have different gradients of this.
So we have this code to engine axis.
All the way on the left we have simple libraries, just stuff like, you know, math libraries, zlib, tiny xml, things like that.
They're literally just a pile of functions, a pile of classes that you can just call and they solve a particular problem hopefully quite well.
Moving down our list we have something like frameworks.
Frameworks are, it's the exact same thing except that the code all sort of works together.
You know, things like SDL, SFML, and I would even say things like Pygame or the sadly dead XNA.
These are all things, yeah, thank you XNA fanboys, the one that's in the room.
These are all frameworks.
These are all things that we build upon.
But they solve very specific problems as well.
They just work together.
Then we start getting into what we would consider real engines, like generic engines, like Unity, Unreal, Godot, all the ones that we all know and love.
And then we start getting into really specific stuff.
stuff that's like RPG Maker, you know, Ren'Py, those types of things that are like, if you're going to make this very specific kind of game, and this engine is specifically designed to make that kind of game, great, right?
Use Pygame if you want to make an interactive sort of novel.
So we have this wide gradient of things.
And I think most of us live, if I were to just take the average of the engines that are used, probably about here somewhere.
We're probably right about here.
And I feel like we could move it a little bit over here.
That's kind of my pitch.
So what does this buy you?
What does a game engine actually buy you?
And that's really the thing to think about.
So why should you use a game engine?
Why should you consider not using a game engine?
The thing to ask yourself is, what is it about you?
Games are just problems.
They're problems that have to be solved.
I have to render triangles onto a screen.
I have to play sounds.
I have to handle somebody pressing something on an input device.
These are all problems that have to be solved.
And if your engine doesn't actually solve those problems completely, it might as well not solve them most of the time.
So I'll give you a couple of very real examples.
And the first one I'll use Unity.
I'll kind of shit on all the engines, but I'll start with Unity.
So game objects.
Game objects are fine, right?
Mono behavior is fine.
It's a basic game object component system.
That's fine.
I worked on a project where many projects have a few objects.
This project had a lot of objects.
and now the heavy weight of mono behavior starts weighing down the project.
So we couldn't use the game object system.
It was just too much.
So we built our own game object system and rewired from unity to get game object system, right?
So we had there's literally one game object spawned in the scene and that was our hook into the update.
So we had to like do extra work to get our own object system in there.
That particular game is a poster child for this talk, because literally all that the game used was rendering, audio, input, the fact that it's C sharp.
It's about it.
I mean, so it's like we could have done this another way.
That is a different horror story, though, of maybe don't ship your prototypes.
The next example, we're all crap on another engine, is Unreal.
So this is an interview that I had.
So I went on a technical interview, and they wanted me for some lead AI position.
And for NDA reasons, I can't talk about the specific game, but I will say that they had a strong networking component to it.
They needed to do a lot of fancy networking stuff.
And I'm like, how are you going to do that in Unreal?
Unreal supports networking, but what you want to do seems a little out of scope.
And they're like, yeah, we're literally ripping out and rewriting all of networking.
which is hard.
Not just because networking is hard, but because ripping it out of Unreal is hard.
So if it doesn't solve your problem 100%, it might as well not solve your problem most of the time.
Sometimes you can extend, but not always.
So let's look at the other side.
How much does it actually cost you?
Well, the obvious answer is financial, not for all engines, but for many engines, right?
There's a financial cost.
And you can do the math, which is a simple math.
You take your licensing fees and subtract what time you think it's going to save you.
And if that cost is greater than the benefit, well, great.
The answer is clear, right?
Maybe if that cost is over the benefit, then financially, it doesn't make sense to do this.
Make your own thing.
But this doesn't apply to everything, right?
Godot and Ren'Py and other things like... Godot is sort of this up-and-comer, which I'm excited about personally, even though I'm giving a talk about not using game engines, because it's open source.
Anyway, there's a second reason, which is, I think, a little more insidious, right?
The financial reason we can throw off, but there's another reason, which is constraints.
You have design constraints, right?
Maybe it's only good at making a particular kind of game.
And even if you're using Unity, how many of you have looked at the Steam store and said, oh yeah, that's the Unity shader, right?
Like, we've all seen that.
How many of you looked at Unreal games or whatever, and it's like, oh, there's that weird lighting thing that Unreal does.
So you're making a style of game.
They're good at making things.
I'm not going to use, if I'm really good at Unreal, I'm probably not going to make a 2D game.
Like, Unreal is not as good at making 2D games.
You fight the engine in certain cases.
You fight it if you want to try and have it ship on a device like this.
You can do it, of course you can.
But it's not as good as other engines that are used to doing it, and maybe not even as good as doing your own thing.
There are also technical constraints.
How many objects can you have in the world?
You're constrained by that, by whatever the engine has.
You're constrained by whatever platforms the engine supports.
Does it support the platforms that you actually want to ship on?
I don't know.
Probably, nowadays.
does it really, right?
So, but that's not even the worst for me.
The worst, and when I started working on my own project, one of the biggest reasons I chose not to use an engine and use my own code is when you tie your star to another engine, to a third-party body of code, you are now tying the success of your company to not only the success of that company, but the whims of that company.
Unity made an interesting decision not too long ago.
They did, right?
And here's the crazy thing.
The only reason, sorry camera guy, the only reason that that didn't work, why did that not work?
Because they don't have a monopoly.
They don't have the monopoly that they think they do.
There's Unreal, there's Godot, there's other things.
I live in the Bay Area.
Does anybody here live in the Bay Area?
Okay.
Basically the same people making their own tech.
Here's the thing.
For electricity, to pay for this electricity, I pay PG&E, Pacific Gas and Electric.
If I'm unhappy with them, my one choice is this.
I cannot have electricity and gas.
That's my choice.
That's all I have.
They have a monopoly on it.
So any game engine that you tie your success to, they can change the deal.
Unreal just changed their deal.
Now, it's not for us.
It's for film and all that stuff.
But of course they did.
These are for-profit companies.
They're not about your success.
They're about their success, which is fair, right?
I mean, it has to be.
But you tie your star to theirs.
That's a cost, and possibly one of the biggest ones.
Okay, rolling your own engine.
I know, I'm a little crazy about this, but again, I'm gonna say this again, right?
You're not making something super generic, right?
You wanna make exactly what you want.
I'm actually saying basically make the game.
Don't worry about the engine.
You can pull in libraries and things to solve specific things.
You're probably not, I mean, unless you're in the wrong room, you're probably not trying to remake a massive AAA, you know, the next Dragon Age.
Or maybe you are, that'd be awesome.
All right, so what goes into a game engine?
Well, kind of a lot.
Let's rattle through some of these, right?
We have platform abstractions, rendering, sound, input, physics, if your game uses physics, world representations.
I mean scenes, levels, that kind of stuff.
Game objects, UI, resources, an editor, the heartbeat of the game.
And that's the last bullet point, for those of you taking pictures.
It's a lot.
We have a lot of stuff.
But we can build this kind of stuff.
We really can.
How can we make all of these types of things?
Well, we can start with frameworks, libraries, that kind of stuff.
And I'll give an example.
Let's say that you're making a project, and we need to build all of these things.
I would start with a very basic and a very simple framework.
So something like SDL, SFML is also fine if you're more of a C++ person, but SDL is just a bucket of functions that you can use.
It is free, it is open source, so you can make changes if you really want to.
There's OS, rendering, sound, input, probably a bunch of other things, and you don't have to use any of them.
It's well known, it's used in actual commercial products, right?
It's used in real games, used in real things that have shipped.
So it's solid, is what I'm trying to say there.
Many of them use it just for operating system stuff, just to be like, I don't want to deal with writing Mac code and deal with writing, you know, Android code or any of that stuff.
Like, it's really good at that kind of stuff.
So, and if you don't want to care about rendering, you don't have to.
You can ignore rendering entirely.
Like, you don't have to do anything when it comes to the rendering side.
Or you can, and it's fine.
Okay, there's SFML, there's other things.
I'll mention this as well.
I actually removed the slide on this, but I feel like it's important enough to mention it.
If you're going 3D, there's also something called Ogre 3D.
So that is, that's a weird one, because that walks the line between like, is it a framework or is it an engine?
And I don't know, it's somewhere in between.
But it's again, open source, you can do what you want with it.
Physics, if your game uses physics, there's things like Box2D.
That's a good one.
For Tiled, you can use level editing.
For level editing, you can use Tiled.
And that's one of the big complaints about rolling your own tech, is there's no level editor.
You don't have this synergy of creating an inspector with an editor and all that stuff.
And Tiled solves these problems.
Tiled is an awesome little tool.
game objects, tiles, whatever you want around.
Again, it's a 2D thing, so it's for 2D stuff, but it works quite well and they have custom nodes and things like that.
It exports to an XML format that's well understood and well documented.
You need somebody to read XML, so you've got TinyXML, so that's good.
of C++.
But I also recognize that it's not a language that one wants to learn or use, because it's not an easy language, and it keeps growing.
So maybe you want to use something else.
There's a talk, right, that was about integrating C Sharp into your thing, which I just saw yesterday as I was looking through what talks I wanted to go to.
So that's a thing.
I like Lua, so Sol for Lua works as well.
I wrote my own integration, which is open source.
You can find it on my GitHub if you want.
There's so many libraries out there.
There's so many things out there that you can pull in to build this, to forge this thing that we're trying to forge.
Okay.
You can have Hello World up.
Assuming technical knowledge, you can have a Hello World up in an afternoon.
You really can.
Right?
You can get a Hello World with some basic just, here's a basic tick, a little window showing up.
You can get that in a couple hours.
You can have a framework in a weekend.
You can just get a basic framework of, you know, while true, do my game loop, that kind of stuff.
You can get that going in a weekend.
And I think within a week, probably have an entire test level.
And I know because I did all this.
I'm like, can I though?
And I did.
And I had a little, it wasn't like an amazing thing.
I'm not going to win awards for it.
But I had a basic test level with a little object running around with a silly little object system in a week.
Now this is for something really, really, really simple, right?
Again, we're not remaking Unity.
This is for something really simple.
So some of the advantages that we have for doing this, right?
Well, it is generally cost effective in the long term.
My suspicion is that nobody in this room is like making a game, and they're like, OK, cool, that was done.
I'm going to go be a farmer for a while or something, right?
Like, we're probably in this, especially for as crazy as us indies sort of are to have to do this, right?
cost-effective in the long term because you're investing in your own company, in your own tech, in your own world, right?
You build the thing that you want and nothing else.
So that's extremely important.
It's extremely powerful.
Remember in that slide minutes ago that I had with the big gradient?
You could build that thing all the way on the right.
You can say, OK, the type of game I'm making is this roguelike style game.
So I'm going to use this framework.
And then I'm going to build on top of that exactly the systems that I need that enable me to make roguelikes fairly easily.
And again, I'm not talking about like, let's start by spending two years building an engine.
Right?
Teach a person to make an engine and they'll never make a game in their life.
What you do instead, it's true, right?
You guys who build your own tech, that's where all the laughs came from, by the way.
Which is true.
So what I'm saying is you make your game.
And you extract stuff out as necessary.
It's probably going to be easier to build those types of games that you want to build.
But we have a lot of disadvantages that we have to turn through.
Yes, there's a larger upfront cost.
Of course there is.
You're building your own tech.
There is a much, much bigger upfront cost.
There's no automatic knowledge.
And this one's interesting because I didn't quite get it until I, in my own little indie studio, I started having to, like, hire people and bring people on board.
And I'm like, oh, right.
They don't know how my GameObject system works because it's a weird GameObject ECS hybrid.
Ah, I must now write documentation, the bane of all programming existence.
The thing that made it work is I did have, I mean, the code is well commented because I'm not a monster, and we had relatively decent documentation for things, but I'm like, oh, shit, I'm gonna have to spend a week, build a bunch of documentation, onboarding, because this programmer has no, like, they'll just walk in, like, okay, I guess it compiles, now what?
So that was something, right?
There's no, not that automatic knowledge of bringing somebody in.
You also often require C++ knowledge.
Even if you don't actually require somebody to write C++, it probably requires the low-level knowledge of understanding, you know, how, like, Unity has put in a lot of time, for example, to hopefully make sure that Unity never or rarely crashes.
which, of mixed success, but still, if C Sharp explodes, they throw an exception and catch it in the, and catch it up, and you just get a spam of a bunch of exceptions, which is better than what happens if that happens in Unreal, because now you have a pointer deref, a null pointer dereference or something, and the entire editor explodes.
And then you're like, what happened?
And you have 50,000 messages that go by because everything crashes.
So, you know, there is some level of low-level knowledge that is required here.
it It had Tiled as its sort of main editor.
And so, OK, in Unity, let's say I want to make a level.
What am I going to do?
I'm going to take some assets from over here, and I'm going to drop them over here, and I'm going to attach things to them.
So what does it look like in my project?
Well, they grab some things from over here, and they toss them to Tiled.
They ran an export script, and then they ran the game.
So the only thing was there was one little tiny extra step, and they couldn't just press Play in the UI.
They had to just go to a different window and double click an executable.
So that was really it for content creators.
There was not much of an issue.
They got used to it quite quickly.
So there is still less robust tooling.
Unity has a crap ton of tools.
Unreal has a crap ton of tools that you would have to build if you're doing the thing or find third party versions of.
But for a small, really simple game, I don't think you need the complexity of a full engine.
You might not need the complexity of it.
Do all that analysis that I just talked about.
But I'm just one person standing up here pitching for this, right?
Why would you listen to me?
Here's a list of games that use their own tech.
And I would be shocked if there was even a single person in this room who hasn't heard of at least five of these.
Probably most of them, right?
I just found this list quite easily just digging through.
These are all games that use their own tech.
All of them.
So it's definitely doable.
And many of these games, I think, are great examples of why it's good to use your own tech.
What am I at here?
Okay, I'm at 20 minutes.
That's about right.
That's about where I expected to be.
Because I have one final point.
And I'm going to, in fact, step away from this and address you all.
So that we're all engaging with each other.
Because all of this culminates to my one final point.
I worked in AAA for a long time.
How many of you have worked in AAA?
okay That's it, right?
It feels like that sometimes.
And again, like, okay, yes, there's a lot of innovation, a lot of creativity, but I worked on The Sims 4, and I can tell you that there are times where we got a design that came from The Sims 3 that came from The Sims 2 that came from The Sims 1.
The relationship system is fundamentally, which I wrote on The Sims 4, is fundamentally the same as it was on The Sims 3, as it was on The Sims 2, as it was on The Sims 1, with some changes and some additions.
So we build the thing that we know is going to work, and then we kind of innovate in this little space over here.
And we have to, because The Sims 4 had 250 people who needed to continue to have jobs and pay their mortgage.
In indie, that's optional.
Sadly, right?
It is, though.
It's optional.
It is.
It's sadly a little optional.
And we all know it.
So I left AAA.
because I kind of got sick of working on other people's ideas, mostly.
And when I go to GDC in a place like this, and I walk out to the Expo Hall, and I'll wander some of the big company areas, and what is Microsoft doing, and what is Epic doing, and all this stuff.
But where I go is I go to the IndyBoost, and I have been for years now, because that's where the interesting innovation is.
That's where the design innovation is.
That's where the creativity that I was missing in AAA is.
That's why I'm here.
And so while it might be absolutely mad for me to come up here and say all this stuff, and it probably is, what we're missing is technical innovation.
We have two engines.
Yes, there's Godot.
Yes, there's other things.
We basically have Unity and Unreal.
When I talk to my AAA people, when I talk to all my friends who are still there, everyone's moving to Unreal.
They're all moving to Unreal, which is fine.
That's probably a reasonable thing for them to do.
But what we're missing is technical innovation.
because epic is doing the technical innovation unity is doing their technical innovation but they also have to be all things to everybody so they can't go too far off the beaten path so while there are some really interesting indie games that are out there now that do some interesting technical innovations that is what we are missing largely When you build your own tech, you can say, oh, we're going to do this really crazy thing over here.
And that's what we're missing.
And yes, that's utterly insane.
That's utterly mad for me to stand up here and say to a bunch of people who put their livelihood in these engines, maybe you don't use engines.
And yes, maybe I am mad.
But we're all indies.
We're all mad here.
Thank you.
That's my talk.
You know what's crazy about doing, and I've been doing talks at GDC for many, many years, since 2009, pretty much every year.
And when I do run throughs of talks, they're like, like this run through of this talk was exactly, it was like 30 seconds under every time.
And this time I'm five minutes under, which is like, okay, that's how this works.
So we have questions though.
Yes.
Yes.
Earlier you mentioned that rolling your own engine is going to have a high upfront cost but it might pay you back over the long run.
Where do you see cost savings over using something established like Unity or Unreal?
The cost savings happens in the simplicity of what you're trying to do.
So if you are trying to architect your own epic solution, then there is inherent cost in terms of supporting that solution.
That's why a lot of companies, I mean, look at CD Projekt Red.
That's why they're going to Unreal.
And to be fair, even though I just shit on all of that, probably that's the right choice for them, right?
They probably should go to Unreal, because their engine was in a very sad spot.
One of the big reasons why Cyberpunk 2077 went the way it went, besides corporate greed in general, was because the designers were working on a moving target, right?
The engine was continuously being built as the designers were trying to make the content for it.
So it didn't really go well for them.
So if you're trying to do something like that, then the cost savings happen much more in the long term as opposed to in a shorter term.
But what I'm advocating is you build your own tech, right, internally, just built upon frameworks.
And so you built your own game object system and that kind of stuff.
and you're extracting stuff out as you're making games.
So that's where the cost savings tends to happen.
It's also mostly open source.
You're not paying a Unity licensing fee.
But that's where it comes from.
Does that answer your question?
It does.
Thank you very much.
Yeah, you're welcome.
hi uh... so i really enjoy your talk i thought it was really interesting because we end up using in our company unity for but we've kind of right all of our own systems on top of what unity is that and the reason that we we have to do that is almost entirely because they export or they do all the exporting to android and i was on our behalf do you have any recommendations for ways to get around that kind of thing and because like this is absolutely the biggest shackle towards using an engine is the fact that it exports to Xcode, which I think works in an alien language or something.
Yeah, Xcode is special.
I mean, it's its own thing.
Oh man, how much do I want to, okay.
So, I don't know why Mac ever gets software made, because it's such a, like step one is pay Apple a bunch of money, and I'm like, that's, like if I want to make a release build on PC, it's a dropdown.
I go, okay, I'm gonna set this to release, compile, and I'm, you know, I have some data builds, but I'm basically done.
In Mac, it's like a whole, like you sacrifice like a chicken of some kind.
It doesn't have to be a chicken, but some kind of bird.
and like it's it's a whole thing so um no i don't have a good answer for you and i'll be perfect i'm just gonna be perfectly honest with you if i was making a like a game that had to ship across multiple mobile devices i would probably use something like unity exactly for that reason which really sucks but It's a terrible, it's a terrible thing.
Because at that point, now you are going to have to dedicate somebody to handle all of those platforms.
Though, SDL does handle some of that for you.
I don't do mobile games, so I don't, I'm not like the person to speak with authority about how well SDL works.
I don't know if anybody else here is.
Show of hands, anyone here using their own tech for building?
You are?
Great.
Do you guys want to connect?
Because I don't, I don't have a good answer.
Oh, you guys work together.
Okay.
Well then you're fucked, I don't know what to say.
Thank you.
Yeah, sorry, I'm not up on like mobile stuff, so I don't have a great answer for you on that one.
Can you speak to how to convince publishers you're a safe bet even though you're writing your own tech, it's not an established engine?
Yeah, that is a problem, which is a good question to answer.
So how do you convince publishers?
There are some publishers that I have seen where if you are not using an engine, it's a hard no for them because they feel like it's a risk.
So what I have done in the past, to be fair, also full disclosure, I'm self-publishing because of issues I've had with publishers in the past.
What I've done with publishers in terms of talking about my own tech is, one, I'm a software engineer with a bunch of experience.
And when they see, and it's weird to pull this rank, but they're like, I've worked at EA.
And I can pull that, even though I worked in gameplay and AI and not systems.
They're looking for that, oh, OK, they have the technical expertise to pull this off.
And the second thing is creating some kind of basic demo that shows them, Here's my super solid demo.
And I've had good luck with that in the past.
That is a barrier, though.
Actually, enough that I probably should have put in the disadvantages slot, because that is a real thing.
Thank you.
Yeah.
Hey, love the talk.
Thank you.
If you had to pick, what would be the most interesting lesson you learned from the most recent game, most recent iteration of your engine, whether it's technical or maybe design, what features you included or didn't include, anything like that?
Oh, the most interesting thing I learned in general?
Yeah, just from the most recent iteration of your engine.
Jeez, good question.
I don't, there's so much that I don't know what to choose.
How to deal with, I would say one of the things that I've learned the very hard way is simplicity is probably what you want.
Good code doesn't mean it's like architected in this like way with using all these design patterns, all these things pointing to each other.
Good code is easy to refactor because probably what you're going to be doing most of your time is changing code.
So good code is easy to refactor.
And so don't focus on the perfect.
Focus on what works right now and the good, as long as I can pull back and refactor it.
Performance optimization is another piece of that.
Focus on things that are like, focus on that low level, like the really low hanging fruit, and just like those kinds of software engineering principles.
The other thing is, remember that when you're working on a project, the And I'll give you, that's actually the takeaway that I would give you.
Spending time on some of the tools.
I'll give you one really solid example.
So I have a Lua integration and I have a way for me to type in any Lua thing that I want at any point and it'll just execute this code.
And I use that to do things like dumping, you know, entity states and things like that.
And I'm like, this is ridiculous.
So I integrated C Sharp into, like, basically .NET as a thing into it to create a little .NET window that allows me to just Here's my entity and all the components and all the data and just dump it in.
And I'm like, so against it.
It's gonna take me forever to do.
It took me like two days or something.
And I'm like, oh God.
And do you know how much time it saved me?
It paid for itself in like less than a month.
So investing in tools and things like that and feeling those pain points and learning how to feel those pain points because you're the guy who's gonna solve it.
It's not the tools team.
It's not anyone else.
That's probably the biggest lesson.
Thank you.
You're welcome.
