So, are you ready?
Yes!
Alright.
So, welcome to SimCity Build It.
What did I learn as a game designer?
My name is Petri Ikonen and I come from Track20.
I'm creative director there and Track20 is EA's mobile studio in Helsinki, Finland.
And first, I will very briefly talk about my background a bit.
So I changed to games industry 2003.
Before that, I worked in field of theater and drama as an actor, director, script writer.
But then I jumped into games.
And I have not regretted a day.
It's been a great industry to work for.
So I joined Sumea 2003.
Sumea was a very small startup in Helsinki.
And then very quickly it was acquired by Digital Chocolate.
And those first years we were creating Java mobile games.
Very different times.
Very big restrictions.
Very small screens.
Very small build sizes.
The business was controlled by operators.
And it was premium model.
And then came the first big change.
touch screen, app store.
And we really, as game developers, we needed, again, to learn something new, learn a totally new type of interface, touch controls.
Very interesting times.
And then came even bigger revolution, free to play.
I was working as an executive producer in multiple Facebook games.
And I had to learn free-to-play as early as 2009, 2010.
And it was tough, but I'm really grateful that I had to do that.
And also, I had to learn what it means to run games as a service.
So that's my background in very briefly.
And all these years I've been really concentrating on game design, because I love game design.
And it's tough.
So at the moment, I'm working at Track 20.
It's a very small studio.
There's less than 50 people.
But we have 17 nationalities.
And that one, it's a very big asset for us, to have all those people from all over the world to working together.
And that's one big thing that you can have in your studio, because we are creating games for global market.
And then the game, SimCity build it.
This was a very tough project, very difficult to design.
The game was soft launched October 2014, and then we went worldwide December 2014.
And it's been a big success.
We have a very big amount of users every day playing the game.
It's been on top crossing charts since, and I'm very proud of this game.
But the project was a very difficult one.
So this is the overview.
I'm going to talk about four very tricky design challenges that I did face during this project.
And I try to explain also that what do I think that I learned.
And then after that, I will kind of think that, hey, why did we succeed even though the challenges were so tough?
So let's go further.
First design challenge, classic IP.
It's a huge IP, you know it.
The game is older than 25 years.
And it's been, of course, the main platform has been PC.
And then we got that as a project.
And you can think that what kind of excitement it is.
So the whole team is really excited that, hey, we are the ones who will be creating the next SimCity.
And you get all that inspiration.
And you are so kind of that, yes!
But then, very quickly, after a couple of weeks of the project, you start to realize that, oops!
This will be a very tricky one.
This will be so hard.
And a couple of weeks more and you are that, oops! Can we make this?
And also what you understand that, whoo, there is so much fun fans out there, and they have huge expectations.
They are expecting something.
Are we able to deliver that?
So that was kind of the first big design challenge that I, or what we faced as a team.
So what did I learn?
I think that We really needed to reimagine what is SimCity on mobile.
So it's not enough to kind of take the things from the PC game and somehow adapt or port those.
You have to really reimagine.
It meant that we had to kind of redesign the whole game from scratch.
So definitely the platform is what defines how the game should play.
So you can't take PC stuff and just put it on mobile.
And then one thing that I think fortunately we managed to do was that because the expectations are high, you have to really manage those expectations, communicate to the fans that this is a mobile game.
This is a free-to-play game, so that they don't think that there is a next SimCity 2000 coming again on mobile.
Second design challenge.
This was even tougher.
Free-to-play.
I think free-to-play is very difficult to design.
It's much more difficult than old premium model, at least for me.
And.
When we started the project, we thought that, yes, it's easy.
We just kind of follow the very typical free-to-play conventions.
And what we did, we started to try energy mechanics, builder mechanics, and more or less all those failed, because the pacing of the game would have been really slow very quickly.
And we realized that the game would be very boring with those mechanics.
And that was actually the reason that after multiple prototypes we decided that okay, the crafting mechanics is the one that we will follow in the core loop.
So, what did I really learn about free-to-play in this project was that I think that there is a big...
big change at the moment, or even kind of a change of paradigm.
And I think that we shouldn't pinch players too much.
We shouldn't pinch players and say that you either wait, or then you pay.
We should be much more gentle and kind of develop games that are fun to play, and then offer even more fun by saying that, hey, you love this game.
You enjoy this game.
you are willing to spend weeks and months playing this game.
So perhaps you should invest some money and enjoy it even more.
So we should really kind of swap the whole thinking, not pinching players, instead offering them more value.
Offering them things that they can be more efficient and enjoy the game more.
Third design challenge. Mobile user experience, mobile UI.
SimCity PC version, and kind of a tradition of SimCity is, it's lots of information.
big PC screen, numbers, lots of numbers.
And of course, that's very crucial.
As a mayor, you need all that information so that you can make meaningful choices based on that information.
And what we found out immediately was that, oops, we want to support very small screens.
How are we able to fit all that information on a small screen?
And then, very quickly, we understood also that it's very difficult to find very natural, easy ways to control your city with touch controls.
How do you do all the build actions?
And then we started to think that, hey, how do you play the game?
Classical SimCity PC thing is that you play very long sessions.
But now mobile playing, it's about very short sessions.
So our players play perhaps five, six, seven sessions per day, but each session is just two, three minutes long.
So we really needed to think our kind of the whole user experience and pacing of the game to support typical mobile usage instead of that old PC thing.
So what did I learn?
I think that on mobile.
Design equals UI.
And what do I mean with that is that if your user interface is not able to communicate the design, the design is worthless.
So you have to always think that is the UI able to communicate?
Is the gameplay able to communicate the design?
And most of the mobile games, they are very, uh, UI heavy and information heavy and we had that kind of very big trap that all that information Do we spam all that?
But fortunately we understood that yes, we have to simplify simplify And also, abandon always conventions from old platforms.
So what easily happened was that I was very excited something that was on PC game.
And then I wanted to more or less copy that on mobile.
And every time it failed.
So it was totally stupid.
And also, what we learned about the production that when you want to create great touch controls, it will take time.
It will take lots of iteration rounds.
Then the fourth design challenge.
Open-ended simulation.
I think one core thing in SimCity is really the simulation and that it's very open-ended and it's sandboxy.
And as a mayor, you can do whatever you like.
And you can really experiment and be creative.
And we want this to support that core idea.
And we ran, kind of, we faced lots of problems.
For example, what is time?
What is concept of time?
We have real time.
We have device time.
Then we have the city time, where the day is just perhaps 10 minutes long, and the night is a couple of minutes.
And we were kind of confused.
How should we kind of think the whole simulation?
That is it following the city time, or real time, or device time?
And then we started to think that, hey, what happens if you close the app?
Is the simulation still running there?
And what happens when you come back after two hours, two weeks, two months?
Is the whole city destroyed?
Is it just ruins or every building is on fire?
And we didn't want to punish the player too much, so we created very exact rules so that the simulation slows down.
And yes, there has happened some things in the city when you are away, but when you come back, you see that, oh, there has been something.
You can understand what has happened, you can react on those, but we can't punish the player too much.
And also, a very interesting problem was that, how is your city talking to you?
Now, simulation engine is running under the hood.
But if we can't communicate those things to players, it's basically worthless there.
So we had to implement multiple parallel systems how to make the city communicate.
So SimCitizens, they are having speech bubbles and thought bubbles.
each service data layer has information what's happening in that particular service.
And then if you tap on any residential building, you again get information that how is that particular building doing.
So what did I learn?
I think...
Simulation under the hood is a great thing, and it's very fascinating.
But if you implement it, make sure that you are able also to pass that information to players.
Because if it's just under the hood, who cares?
So don't overdo. I think that was a big lesson for me that...
Because what happened to us was that we created a big simulation, and then we realized that, oh, we don't get any information on that.
And it was quick to implement the simulation under the hood, but very time consuming and difficult to implement all the systems that then pass the information to the player.
Those were typical problems that we faced.
from design point of view during the project.
But we did succeed.
And why did we succeed?
That's something that I've been thinking a lot.
One thing that I'm very proud of is our team culture.
There is a very big trust there.
And then there is also a very big passion to create games.
And then there is this kind of very Finnish culture thing that never give up.
You know, living up there in north, if you give up, especially during winter time, you'll die very quickly.
So that was kind of in our DNA.
And how, I mean, that however, I mean, that the project was so hard, and we redesigned and redesigned and re-implemented.
But no one left the team.
No one said that let's quit or anything.
So we kind of kept on iterating.
And kind of the mentality was all the time that we won't give up.
We will do this.
Also, I'm very proud that we don't waste time talking that is this a free-to-play game or not a free-to-play game.
I can say that we are a free-to-play friendly studio.
So we are playing free-to-play games.
We are analyzing those.
We are talking about those.
It happens to be the standard monetization thing at the moment, and we are doing that and not arguing inside the team that should we do premium or free-to-play.
Also, very interesting stuff happened to design process.
When we started the project, we had a quite small team at that time, about 15 people, and I was the only designer.
Big mistake.
And also, the process was quite like a waterfall.
So during a sprint, I did some design.
Artists did the assets.
We implemented it.
And surprise, it failed.
And we just lost two weeks.
And then we did that again, and it failed again.
So we realized that we are not agile enough, and also that one designer can't solve all that stuff.
So we totally changed our team culture that, hey, everybody's a game designer.
Everybody is free to contribute.
Anybody can, anytime, say that this sucks.
We are not happy with this.
So it's very frank culture.
And then we changed it so that, hey, let's have always a very big kickoff meeting where everybody in the team is who is working on that particular feature, let's talk about design true together so that everybody's happy.
And we won't implement anything or draw anything before everybody's happy.
And then when we start to implement, all the time we kind of double check the design.
If there are any flaws, on the fly we change the design.
So we can already in the mockups, for example, see that, hey, UIs...
they can't handle the information, let's simplify.
Or when we have implemented the very first version, we can see that oh, the design doesn't work, it's not perfect, let's quickly iterate it.
And that was a simple thing that we changed and it kind of improved our productivity a lot.
And it also kind of kept the...
Kind of the team morale went up, because everybody felt that, hey, we all are responsible that this is a great game, and this is a fun game.
Then, next big learning for me was user testing.
I know that we all are, we are big artists.
We kind of want to nurture our babies and we don't want to show it anyone before it's perfect.
So let's hide it.
And that's totally stupid.
So...
You know that how blind we will be soon when we are developing a game.
We are doing the same thing week after week, and then the team starts to argue that is this good enough, is this fun, or is this not, and it's so subjective.
Fortunately, we had a first big user testing round way before Alpha, and what we found out, we found out that the game sucks.
It was so bad.
The players didn't understand what is really their role, what is the goal of the game.
They didn't be able to really use the controls.
And there was lots of problems.
But thanks to user testing, we kind of got that information.
And we did a very big design pivot, re-implemented, redesigned.
basically all the features. And when reaching alpha we had the second round, we were able to see that, oh, we have fixed and addressed most of the problems. Okay, there are still some more, and we wanted to address those. And then during the soft launch, very short soft launch period, during that we had the third round. And with that third round we saw that, yes, Finally, the game works.
We have been able to improve and address all the biggest problems.
And then we did.
still before the worldwide launch, a very big kind of update for the game.
And it was also very interesting because it was soft launch.
It was interesting to cross-check that, hey, what is the metric saying and what is user testing round saying?
And see that, yes, they match, which was very interesting.
So I think that...
For a developer, this is kind of this magic if.
And magic if comes from actor's work.
If you are an actor, it's a very typical way of working.
This, what if I would be that person in this particular situation?
How would I feel?
How would I act?
So kind of changing that, that, hey, as a game developer, what if I am the player playing this game?
How would I feel?
Would I find this fun?
So that changed our theme culture a lot.
So nowadays when we are starting a new feature or new idea, it's always that, as a player, I want to do this or that.
As a player, I would like to.
So we always start from kind of point of view of a player.
And that's great.
So it's really playing, kind of putting players first.
So let's wrap up.
So if you are working on great IP, leverage that.
It's such a big inspiration.
you get all that excitement. It won't be an easy project, but yes, you have a lot of material.
Think really what is the DNA of that IP, what's the core, and then redesign for your platform, or for mobile, and for whatever the monetization model is.
Also think your team culture. Is trust there? Is the passion there?
how well you are able to communicate, and are you kind of open and frank?
Or is there something that there is fear and you are not able to say aloud if something is bad, for example?
And then think also your design process.
How agile it is. Are you wasting time because you can't change design because you are following certain process that is perhaps slow or bad.
So break those rules. Make the design process very agile. And then don't forget user testing. Use that.
And I think that's my, definitely the key.
The key takeaway.
Importance of user testing.
So, that was my talk.
Thank you very much.
Applause I guess we have a couple of minutes time for a question.
Yeah, hello.
Hey, so my name's Sean.
So when you made the transition on your team from thinking of as a lone designer to everybody's a designer and everybody can be brutally honest How did you communicate that to the team and change that culture so that everybody on the team knew that they were now free to contribute?
No Sorry, I'm very difficult to hear the question. Can you could you please repeat it? Yeah When you made that change on your team from the lone designer to everybody's a designer How did you communicate that to the team and manage to make that cultural shift so that everybody was willing to contribute design?
Very good question.
So the question, I think everybody heard the question right.
So how did we do that?
I think everybody in the team felt and realized that this is not working.
I'm too alone.
And people understood that we have to change this and get more design power.
Also, it's typical for our team that there are very design oriented guys also in programming and in art.
And they really express that, hey, we are fine if we are able to contribute and be part of that process.
And then we kind of said, OK, always, let's start with the kickoff meetings.
Let's discuss together about the feature before starting even the actual design work.
And it has been working very nicely.
And I mean that it's a big kind of thing for us.
Next, please.
You talked a lot about the importance of user testing.
And I was curious if you could talk more about your process.
Do you bring people in the office and watch them play?
Or especially testing, like balancing of things that take months or weeks to finish.
Fortunately, EA is a big company.
And we used our LA consumer insight.
unit. So they handled those and basically we had some people here watching those sessions and then we later got kind of hours and hours of videos and then we watched those in Helsinki.
But those were big rounds so we had I think over 100 test players playing for more than a week.
And we got videos from the day one, first session, and then day eight or seven sessions.
So we kind of got how the player is feeling and doing in the very first session, and then after playing a week.
Did players play at home, or they come in once a week?
No, no.
They had their own build on their own device.
So they are playing.
So somehow instrumented to record video while they're playing.
Yeah, yeah.
Played at home, and they did the recordings and so on.
Thank you.
Yes, please.
Hi, my name's Tom, and I just wanted to know, so clearly SimCity Build has a lot in common with Hay Day, the crafting loop, the cargo ship, the trade market.
Did the idea kind of start there, or did it evolve there? What was the process, and were there other sort of strong ideas for the way this game could have gone instead?
More or less, I, some, at some point I, very good question, at some point I, I...
thought that our way of doing design is brute force, meaning that we try everything and then something works.
Hello.
I'm actually kind of curious about when you talked about the iterative process after getting user testing, what sort of stuff, if you're able to share, what sort of stuff that was dropped or totally changed in the feature set of the game?
Did you ask that what changed totally based on user testing, right?
Yeah, what are the major changes that you made?
Or what did you find that was just total shit and you wanted to get rid of?
One of, one biggest perhaps was that...
players didn't understand what is the big goal in the game.
Which is silly, that hey, you are building a city.
You should understand the big goal.
But we added lots of hints that what should you, what would be your goal, like visiting in the tutorial flow another nice looking big city.
Then later adding challenges and tasks and that kind of stuff, because players were confused because all that, all those possibilities that you have as a mayor. So it was, I mean that it's okay perhaps in the PC game and PC audience, but mobile audience is so broad and perhaps more casual.
So they needed a bit more hand-holding and kind of hints that what can you do as a mayor?
Sorry, quick follow-up question, but I was actually kind of curious about why you guys dropped the whole build and abandon cycle that was so core to the PC version.
Sorry, what loop? Build?
The build and abandon cycle.
Oh, okay. Yes, very good question.
We definitely thought about that a lot.
But then, kind of combining free-to-play mechanics, we kind of agreed that, OK, you have to have a persistent city.
And that is the reason that it's very difficult to destroy your whole city.
And we wanted that, hey, OK, you have one city.
You will play that, hopefully, for years.
And you can do a lot of different stuff there.
That would be another take that you are suggesting.
Definitely we could do another SimCity with that kind of that.
It's more like that, hey, I created something.
I destroy, abandon, and start a new one.
But it would perhaps then need different kind of also free-to-play design.
Because it feels like it doesn't fit in with the what happens when the player's away sort of stuff that you were talking about.
Sorry, now I didn't hear.
It feels like it fits in with what you were talking about, about how when the player goes away from the game, what actually happens.
Yes.
So it was just too much punishment, you thought?
Yeah, that's true.
That's one thing.
Yeah.
Thank you.
Yeah.
Do we have still time, hopefully?
Yes, one question at least.
Great.
Hello.
Nice pitch.
So for how long have you been developing the game before the first user testing?
It was about half a year.
And how long did you take to soft launch the game?
How long it take to?
Soft launch the game.
Launch the game.
After the first less than a year.
The whole project was less than one and a half years.
From very first day that we start, the first day that we knew that, oh, we are going to do a SimCity, it took a bit less than one and a half years for the worldwide launch.
Thank you.
Thank you very much.
I was also asked that please remember to return the feedback or whatever it is called.
So thank you very much.
