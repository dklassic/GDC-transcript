So this talk is from quaternions to homogeneous points, lines, and planes, such as the ones we have down here.
In the previous talk, which I'm afraid to say is a little bit of a prerequisite for this talk, we were talking a lot about quaternions, so rotation composition, which we implement using quaternion multiplication, and we unified that in a sense with translation composition.
we unified it into a thing that we call dual quaternion multiplication another word for this is rigid transform composition because it's whenever you move and rotate something so you it's like it's a rigid object you're not squashing or stretching or scaling it One thing that I didn't talk about in that previous lecture is this function which, in 3.js at least, it's called setFromUnitVectors.
It's when you have... you've got, like, a vector going this way and a vector going this way, and you want... you ask for the quaternion that takes you from here to here, like this.
But there's a reason that I didn't talk about this one.
It's because I wanted to leave it for this talk, because it turns out that there's a way of unifying this and this one.
you can even unify them with other things that you want.
So taking angles and distances and projections of, let's say, the distance from a point to a plane or the projection of a point onto a plane or taking the angle between a line and a plane, And it also unifies it all with intersection of planes and lines.
What is this magical thing up here which could do all of these things together?
It's one function and it is called reflection composition.
And I would claim that a large number of video game engines contain little pieces of reflection composition.
The closest that they come to having actual reflection composition is in this function.
But yes, reflection composition is a very, very fundamental thing going on with a lot of geometry that we do for video games.
So we're thinking about points, lines, and planes, and we're going to think about planes as being planar reflections, and then lines do things called line reflections, and points do things called point reflections.
to They don't cost you anything to represent them, because you actually represent them using the same technique that you already use to represent planes.
So it's x, y, z, and d that we use to represent a plane.
And a point is going to be x, y, z, and w. And then a line, well, it's part of a dual quaternion.
It's the line part of a dual quaternion.
But by thinking about these exotic objects, these point reflections and line reflections, we're going to be able to see how all of this nice functionality gets into this thing called reflection composition.
All right, I'm also going to give you lots of video gaming examples.
You know, we're not just doing pure math here.
So we're going to look at Lara Croft, and Dead Space, and Half-Life, and a lightsaber fighting thing.
And we're going to look at several problems, which are all going to be turned into problems that concern points, lines, and planes.
This is going to be a long time coming, though.
I'm afraid to say that you're going to have to learn a bunch of maths in this talk, and then there's going to be like an orgasm of usefulness, right, where you learn how to actually use the math in your game.
But yes, in order to get there, which we start by saying everything is reflections, and in order to climb to the top of the mountain, which is being able to write a compact game math library from scratch.
Maybe some of you can already do this, but I bet that using reflection composition it can be even more compact.
You've got a lot of things coming at you along the way, and the way that we're going to walk through these things is First we're going to talk about quaternions as compositions of two planar reflections.
Then we're going to talk about the math of general reflections and why normal vectors are points at infinity.
Slightly strange sounding thing to say here, but it's true.
Then in section three, this is all the usefulness, we're going to do video game case studies, so getting angles, distances, intersections and projections of things that you want.
And then we'll look at the fully general formulas that compile to FAST-specific formulas.
And this is going to be, again, back to being a bit math-heavy, because we're going to try to generalize across little points, lines, and planes, so it's not very easily visualizable.
Well, it is visualizable, but you visualize it with specific examples.
But yes, anyway.
So part one.
Quaternions are compositions of two planar reflections.
And the motivating video gaming example that we have temporarily is a snowboarding game.
You want to make a game about snowboarding.
And to make a game about snowboarding, you're probably going to be very concerned with the plane that is defined by this snowboard and the plane that is defined by the ground.
In this case, this snowboarder is about to land on the ground, and you might want to do various things at that specific point when they're going to land.
So keeping this in mind, We're going to think about representing planes.
So if you've never seen this representation of a plane before, don't worry.
You've got x, you've got y, you've got z, and you've got d. We're going to leave d alone for a second and just think about this one.
So if you imagine the vector in the x direction, so x equals 1, y equals 0, z equals 0, then that vector is the normal to this plane.
It's at a right angle to this plane.
If you consider this plane, so we've got x is equal to 2, this plane and this plane actually have the same geometric interpretation, right?
And so you actually don't need to think very much about these vectors.
Again, very similar to the quaternion case, you'll be distracted by the length of the vector.
It just doesn't matter that much.
So, here's our basis.
We've got various different planes through the origin.
We've got the x-plane through the origin, the y-plane through the origin, and the z-plane through the origin.
You can think of this as the plane, like I say, whose normal is in the x direction.
Points on this plane have x equal to zero, which is a little bit confusing, right?
The points have x equal to zero, but this plane is the x equals one or x equals two plane.
That's a little bit strange sounding, but you can kind of get used to it.
And then this is the Y plane, where it's got the plane whose normal is in the Y direction, points on it have Y equals zero, the plane whose normal is in the Z direction.
And by the way, other people, including Eric, call this one E1, this one E2, and this one E3.
And if you read more about the... You'll encounter this a lot if you... Well, you'll encounter this exclusively if you read around the stuff that I'm talking about today.
But for the sake of argument, because this is already in a video game engine, I want to talk in terms of the X-plane, the Y-plane, and the Z-plane.
and later on the D-plane.
Anyway, yes.
Mixing and weighted averaging is still addition.
Like, remember this?
So we use this to think about quaternions.
If you add two quaternions together and they have equal amounts, then you get a quaternion that's directly in between them.
Just like if you add blue and red, you get purple.
but you've got to be careful with that amount because you might get a different color.
If you add two planes together, by which I mean adding the X part and the X part, the Y part and the Y part, and the Z part and the Z part, and the D part and the D part, if these two planes have amounts that are equal to one another, then you'll get a plane that's directly in between them.
All right.
Planar reflections at an angle allow us to construct line reflections.
This is the first of the more exotic objects that I'm talking about here.
But they're very important.
So here we've got a planar reflection.
That is the plane of this mirror.
And like any mirror, it's taking this backwards writing, and it's turning it into forwards writing.
Yeah.
Here is a line reflection.
It's one constructed in the real world, this isn't a computer screen or anything.
This is a real mirror, or it's a certain kind of mirror.
You'll notice that this hand is a, it's a left hand, and this hand, the other hand, oh, dear me, the other hand is also a left hand, all right?
So it's not like an ordinary mirror which reverses writing, it's a special new kind of mirror.
The way that this mirror is constructed is that you have actually two mirrors, kind of looks like there are four, but there are actually just two.
And you have them at a perfect right angle, which makes it so that you get this interesting kind of non-handedness reversing mirror over here, but you still have actually this mirror, this is an ordinary mirror reflection and this is an ordinary mirror reflection and what you have here is the reflection of a reflection, alright?
This mirror is in some very important sense defined by this line.
This is the line of intersection of the two mirrors, which I had to put it in there because they've been very, very careful about removing that.
But yes, this is a line.
And you can see that any object is related to its reflection in this interesting kind of mirror by a 180 degree rotation around this line.
It's a 180 degree rotation around a line.
Hmm, does that remind us of anything?
Well, yes, it should remind you of something.
It should remind you of this particular quaternion.
This quaternion is a 180 degree rotation around the y-axis.
If you write it as a dual quaternion, it looks like this, because it's rotating from z to x. It's going around here, it's rotating from z to x.
And okay, let me try and prove that to you by using my hands.
Okay, so we start with a hand like this.
We're going to do a mirror reflection in here, so we get this.
And then we're going to do a mirror reflection in here.
So this is at a right angle to this plane.
So we start out with this, we do a mirror reflection, and then we reflect to this.
So we start out with this, reflect, reflect, we get to here.
That is a 180 degree rotation.
Prove that to yourself as many times as you need to fully absorb it.
All right.
Here are two planes, two mirror planes, which are not at a perfect right angle to one another.
I was in this hotel room, and I think they've gone for this effect, but they haven't quite managed it because there's two copies of me.
I want to compare this one and this one.
So this one, I just told you, the mirrors are at a right angle.
It's a 180 degree turn.
What that means is that this is a pure line reflection, we say.
And it's got no identity.
If you write it as a dual quaternion, it's a pure line.
It's not got any identity component.
It's got this component in here.
And that, it defines the line of the dual quaternion.
It's a 180.
Yeah.
This one, so we're thinking about the reflection of me to this side.
This is, again, it's a special kind of handedness reversing, handedness preserving rotation where the writing on my shirt is not backwards.
But this one, it's not quite a 180, it's a 175 degree turn, let's say.
So it's got some amount of identity if you represent it as a dual quaternion.
There's also this one, this guy here, this is another reflection of me, and it's a minus 175 degree quaternion.
It's got some amount of identity again, and it goes the other way, clearly.
Which means that as a dual quaternion, it's got the same amount of W, and the line is the same except that it's been multiplied by minus one.
So we've taken the 0.99, and then we've gotten minus 0.99, because we've gone from going clockwise to counterclockwise.
Or the other way around, I'm not sure.
Okay, but I promised you a practical video gaming example.
We've got two planes here.
You're thinking about this snowboarder landing from a big jump that they've just done in your video game.
We're going to label these planes A and B, and we're going to write M. We're going to define M, this thing M, as being A multiplied by B in this reflection composition kind of way.
These are planes, which means that they are planar reflections.
So the composition of two planar reflections is a dual quaternion.
And suppose that you wanted to get the line of intersection of these two planes.
So this line turns out to be the line part of this dual quaternion, which makes sense, right?
So we've kind of gotten what we want from Reflecting in A, then reflecting in B, even though this snowboard, you know, it's not a mirror.
And the ground beneath them, that's not a mirror either.
So these are two planes, and we're treating them as mirrors in terms of our mathematics in order to get this line.
So long as we have this thing called reflection composition implemented in our engine, we can get this line.
But we don't actually have to think about these things as being mirrors.
Even though they're not mirrors, treating them as mirrors is helpful.
Okay, suppose that instead you wanted the angle between these two planes, because maybe you're landing in your snowboarding game, and if you land at the wrong angle, then you're going to tumble over, right?
It's not a proper landing, so you're going to play in the tumble animation, and maybe you lose the race or something.
So you want this angle.
Once again, this angle is available to you if you get this dual quaternion.
If you compose a reflection in A with a reflection in B, you get a dual quaternion.
And it turns out that this angle is equal to the arc tangent 2 of the square root of the sum of the squares of these parts of this dual quaternion and the identity part of the dual quaternion.
All right, this is weird sounding.
This has come out of nowhere.
I haven't introduced this.
Don't worry if you're like, why the hell does that work?
I'm going to go through it very carefully soon.
Okay, but sometimes we want to think of planes that are displaced from the origin.
We want to think about planes that are not through the origin.
One reason that we might want to think about this is we might want to think about parallel planes.
So this snowboarder, I would say, is approximately parallel to the ground down here.
to which you might say, well, that's a pretty unlikely situation.
But notice that if you're actually, if you're going along the ground, your board should be, is in some sense parallel.
It's either close to or it's exactly parallel with the ground.
So this isn't that unlikely of a situation in a snowboarding game.
Another reason that we might want to think about parallel planes is because many games happen on grids.
So, for example, if you're building a city on a grid, you will, if you think about the plane that's defined by the front of this building and the plane that's defined by the front of this building, these planes are clearly parallel to each other.
Okay.
So, in order to think about parallel planes, or planes displaced from the origin, we need to think about a certain extra kind of plane, right?
This plane.
If you're used to this kind of way of representing planes, you might look at this and say, that's not a plane, man.
That's a really weird kind of thing.
I mean, what?
Like, OK, so we've got x equals 0, y equals 0, z equals 0, which means that this plane is like it's not facing in any direction, right?
That doesn't sound like a plane.
But what?
You're telling me that it's somehow got d. Like, we often think about d as representing distance.
So it's got some distance from the origin, but it's not facing in any direction.
What is that?
Well, let me show you what it is.
It's basically this.
Okay, that sounds really weird.
I mean, that isn't even a plane.
That's a freaking sphere, right?
It's the sky sphere that you surround the player with in order to give them the impression that they're looking at the sky.
Well, I put to you that not exactly this sphere, but a thing like this sphere is that plane that we've got there.
X is 0, Y is 0, Z is 0, D is 1.
This is the sky.
And I put to you, if you can think of the sky as being a great big sphere surrounding you, but it's a sphere that's so big, that's so very, very big, that if you imagine like, oh, I've got a sphere like this.
If I measure like the curvature of this sphere, then it's got some curvature.
If I increase the size of my sphere like this, then, and I measure this curvature, well this is a little bit less curved than the smaller sphere that I had.
If you take the limit, we say, you're talking about a sphere that is so big that if you went up to it, you would measure no curvature on it.
Alright, so it's a surface with no curvature.
That sounds like a plane.
So I put to you that this thing is a plane.
There's another word for it, which is the plane at infinity.
Why on earth do we care about this though?
Well, in a video game engine you can actually represent a plane like this and you can use it to represent more useful planes.
So here we've got I'm putting into, I'm creating a plane here, this is my plane, and I'm initially putting in d equal to zero, right?
Which means that this plane here is the x-plane.
That's not very surprising, right?
So this is the x-plane, it's normal vector points in the x direction.
But if I increase this number here, what I'm doing is that I am putting some amount of a plane at infinity in there.
I was about to say sphere at infinity, I shouldn't say that.
It's a plane at infinity that just happens to feel a little bit like a sphere.
So a plane that's displaced from the origin, I claim, is some amount of plane that is through the origin mixed with some amount of plane through plane at infinity.
Okay.
I didn't want to do that.
I looked very surprised in that momentary image you got there.
Okay.
Here's how you make a plane in Unity.
I haven't tried it, but in my opinion, if it's not already true, if you give this a value of 0 0 0 in the normal, but you give it some d, I claim that this should give you a valid plane because this is, and has always been, some amount of plane at infinity, or some amount of sky that you use to displace from the origin.
If it's equal to zero, you've got a plane through the origin with that normal vector.
If it's not equal to zero, then yes, you have a plane that isn't through the origin.
Potentially a plane at infinity if the normal is equal to 0, 0, 0.
Alright.
The composition of two reflections in parallel planes is a translation, which is a dual quaternion.
Let me demonstrate that to you.
So, here's my hand.
Let's say that this is our starting point.
We're going to reflect in this plane.
Reflect.
We're going to now reflect in this plane, which is parallel to this plane.
And we get this.
Oh.
Okay.
So, started here.
Reflect.
Reflect.
That is a translation.
We've gone from here to here.
Prove it to yourself as many times as you need.
Here's a clip from just a great movie.
I love this movie.
How could anyone not like this movie?
I don't know.
So what happened there?
Well, we started out with the reflection planes at some angle.
There's the reflection plane that we've got here, we've got a reflection plane that's behind Leo.
If you look at the lines, some lines defined by these reflection planes, those lines meet at some specific place.
And what you're seeing is a rotated reflection of Leonardo DiCaprio.
But eventually we got to the case where the planes are parallel.
We've got parallel mirrors.
And now it's the case that these lines do not meet each other because they're parallel, or rather they maybe meet at infinity.
And that gives us a translation.
We've got translated reflections of Leonardo DiCaprio.
A practical place where you see this in the real world, not necessarily in video games, is periscopes.
Maybe if you're using a lot of ray tracing, I don't know, you might implement a periscope this way.
But yes, a periscope uses two parallel mirrors to translate what's above the submarine down to the level where you are looking at it.
We're interested in our snowboarding game, though.
We maybe want to know, for example, the distance between these two planes.
And once again, if we take reflections in these two planes, well, of course, we get a translation.
We get it as a dual quaternion, most likely.
And if you want to get that distance, you can also get it from the parts of that dual quaternion.
There's a little bit of extra complexity here, because if you have two planes that are at an angle to one another, then by definition they sort of don't have a distance, right?
So if they have an angle, they don't have a distance.
And if they But if their angle is zero, then they can have a distance.
It could be a distance of zero, because they could be the same plane.
But yes.
Another thing you might want to get from this, if you take reflections in these two planes, you might want to get, for some reason, the line at infinity.
And that can be read off from this dual quaternion as well, it turns out.
Quaternions and dual quaternions are applied to planes using composition and inverses.
So I've used this function before.
I've, for example, used it to apply a quaternion to the cow model that you saw, all of the vertices in that cow model.
But it's time to open up this black box.
All right.
So we're thinking about Dumbledore and Harry Potter.
Dumbledore in this situation is trying to empathize with Harry Potter.
We're not interested in what happens in the actual story.
We're not interested in Harry's dead parents.
We are interested in Dumbledore being a geometer and asking himself, hmm, this mirror reflection plane that he can see, he can go like, I wonder what it looks like from Harry's point of view.
I wonder what that mirror looks like from Harry's point of view.
And note that this mirror reflection plane is, of course, a transformation.
It's a mirror plane that does mirror reflections, obviously.
Okay, and Dumbledore knows where Harry is, so he can get T. He has T, which is the transformation from Harry to Dumbledore, and he may have this as a dual quaternion.
He can also very easily get T inverse, because if you've got a dual quaternion, if you want the dual quaternion that goes the opposite way, the inverse of that dual quaternion, it's just some minus sign.
So if you've got T, you can get T inverse very easily.
And this is how we write T inverse, which is Dumbledore to Harry.
We want to know how to apply T to P1.
We want to get that plane, Dumbledore wants to know where that plane is from Harry's point of view, which is to say that he wants, let's guess that it's somewhere here, we can label it P2, Dumbledore wants to get P2, and note that P2 will also be a transformation, whether or not it is used to transform anything.
If Dumbledore is only interested in like, oh, I'm going to intersect this plane with some lines, or I'm going to project some, I want to know how distant this plane is from some other thing, regardless of what he wants to do with it, he could use it as a plane of reflection.
So it is a transformation.
Okay, can we use that for anything?
Well, consider, what if Dumbledore had a point, and he wanted to apply P2 to it, well what he could do would be to apply T inverse and then reflect in P1, which he already has, and then apply T. Okay?
That gives him what?
That gives him the point reflected in this plane that he doesn't have.
But in a sense, he does have that plane.
That plane is T composed with P, composed with T inverse, it turns out, by the argument that I've just given you.
And since he could do that, he doesn't really need to think about that point.
He doesn't need to think about that point.
He could have chosen a point anywhere else, and this sequence of transformations would have given him the reflection in P2, which is to say that you can figure out P2 just by using composition and inverses.
Part two, the math of general reflections and why normals are points at infinity.
So we want to think about point reflections, another one of these exotic objects.
So suppose we start with a line reflection like this, and we add another reflection plane down here.
What do we get?
Well, we get something that's like this.
Quite a beautiful thing here, I would say.
Note that the camera's reflection, which is where we're looking at this thing, is always on the exact opposite side of the point in the middle of these mirrors from the camera, obviously.
Another way of looking at a point reflection is like this.
But this is slightly cheating, because this is 2D.
We're interested in point reflections in 3D, which work a bit differently.
Does anybody remember this from school?
Yeah?
Love it, right?
Turns out that this is a point reflection.
Oh.
She looks very excited.
She's just learned that this is a point reflection.
It's a point reflection because, look, if I take... I've got a little ball bearing in this specific place between my two fingers here.
If I walk from this fingertip to the ball bearing, and then I come out the other side by the same distance, I will get to my other fingertip.
The same fingertip on my other hand.
And you can do the same thing with any fingertip.
You can kind of see this from the construction of this thing.
Right now, my hands are clearly reflected from one another.
And then I rotate 180 degrees, which might remind you of a line reflection.
And then I put them together, and there's my... I've seen it called the worm, and I've seen it called the seesaw.
I should probably think of a... well, we should standardize this, because it's really important.
how dual quaternions are applied to points and lines.
This is really important because, you know, video games are mostly about vertices, but, sorry, graphics programming is significantly about vertices.
We want to be able to apply, if we've got some dual quaternion, we want to apply it to a point.
Might also want to apply it to a line as well.
Well, consider the Harry and Dumbledore situation again.
But suppose that instead of a plane, Harry, oh, and Dumbledore still has the Harry to Dumbledore transformation.
Instead of a plane, Harry is looking at a point.
If we think of this point as being, oh and Dumbledore wants to get that point from Harry's point of view, if we think of that point as being a plane reflection, sorry a plane reflection, a point reflection, if we think of that point as being a point reflection, it turns out that literally every single thing that I said to you about the plane reflection case applies in this case.
So Dumbledore can, if he wants to get this point reflection, he can apply the inverse of the Harry to Dumbledore transformation, reflect in that point reflection, and then apply T. If Harry is looking at a line, similarly you think about it as a line reflection, and again the argument works.
So this is our formula.
This is called the sandwich product for obvious reasons.
To apply a transform T to an object B, where I say an object, all objects here are also transforms.
A plane is always a transform whether or not you use it to transform anything.
And you're thinking about it as a transform here.
If you apply T to B, you can think of it as an object if you'd like.
You use the sandwich product, whether it's a point, or a line, or a plane, or indeed a dual quaternion.
You can apply a dual quaternion to a dual quaternion this way, or a quaternion to a quaternion, whatever.
Dividing by a point, which is a point reflection, is like dividing by a line, where a line is a 180 degree rotation or a line reflection.
First a reminder of why we want to divide by things.
So B multiplied by A means transform by B, but transform by A first.
B divided by A means transform by B, but transform by the opposite of A first.
And we saw that in the case of these rotations.
Okay, so we saw that if you do a 180, and then another 180, so you square this, you take the square of a line, you compose the line reflection with itself, you get minus 1.
Start here, end up here.
That's minus 1.
From this you can derive, okay, we've got A times A equals minus 1, because minus 1 is where my arm is kinked up.
A times A equals minus one.
Divide both sides of this equation by A, and you get that one over A is equal to the, which is the inverse of A, is equal to minus A, quite simply.
And you can apply this logic to point reflections as well, it turns out.
So let's say I'm starting here, and I'm A point reflection is what?
A point reflection is you reflect in a plane, then you reflect in a plane, and you reflect in a plane.
These two plane reflections we can think of as a 180.
So we're going to reflect in here, we're going to do a 180.
So squaring a point reflection, we're going to start here, reflect, 180.
That's the point reflection applied to my hand.
Then reflect, and 180 again.
And it's the 180 going in the same way.
We get minus 1.
Reflect, 180.
Reflect, 180.
All right.
Points at infinity, also known as directions, also known as normals.
This is another kind of point.
We've looked at this picture quite a lot.
We've seen that dual quaternions can involve these lines in the sky.
We've also thought about the sky itself, which is the plane at infinity.
These were the lines at infinity.
But what about the stars?
These stars act like points at infinity, I claim.
Having a... have a look at this animation.
So, this is an animation where we're moving.
Alright?
We're moving in this car.
We are... if we look at the telegraph poles, they're passing us by very fast.
If we look at the windmills, they're also passing us by.
The further away windmills are passing us by a lot slower.
And the mountains... well, the mountains are probably moving a little bit.
and the clouds maybe even as well, but the stars should not move.
Stars shouldn't move no matter how you translate, I claim.
Some video games involve stars in this way, so this is Kerbal Space Program.
Kerbal Space Program handles stars in the right way.
So as you're blasting off, The Earth will be moving away from you, but the stars are going to stay in place.
But I've seen some video games where the stars move.
They really shouldn't move when you translate.
Cameltree, for example, does this.
Okay.
Stars are points at infinity, which means that you can point at them.
Oh, sorry.
This is an experiment you can do at home.
Point at a star.
Move yourself around, all right?
Move yourself around as much as you like, so long as you're pointing in the same direction.
And you will find that you are still pointing at the same star, all right?
Therefore, points in the sky can be thought of as directions.
because if you rotate yourself, you're changing your idea of left and right.
Your rotation, that will change where the star is from your point of view.
You will no longer be pointing at it.
But translations don't.
That's what defines a direction.
Normals are examples of these points at infinity, I claim.
So this is a normal map, and this is an ordinary vertex.
And as most game developers know, there's a fundamental difference between this kind of vector and a normal.
Normals don't care where the origin is, right?
These arrows, I mean, in general, you're supposed to say that a vector starts from the origin.
But these arrows are allowed to be anywhere, because they're normal vectors.
Vertex positions very much do care where the origin is.
To really hammer that home, you can have a surface like this, and I claim that the normal vector at that point is pointing at a certain star in the sky, which you can point at and imagine, like, your arm is coming from that point in the surface, and you can move yourself around.
Okay.
How do we represent points in code, though, when some of them are points at infinity?
So here is how we represent points in a shader.
We've got X part, Y part, Z part, and W part.
And yes, this is very confusing and annoying because that's what a quaternion had as well.
X, Y, Z, W. So a quaternion looks exactly like a point, but just remember that this is a fundamentally different kind of thing from a quaternion.
A normal vector in the context of this is, or rather a direction, you can also call it a vanishing point.
A normal vector in this context has w equal to zero.
These parts define the direction that it's going in, but the w part is equal to zero.
A position, or a vertex, which can be used as a point reflection, will have w equal to usually 1, but technically any other value would be allowed.
You can dial w up and down, and that'll move you towards and away from the origin.
But the fundamental thing is that it can't be 0.
So if it's 0, then it's a direction, whereas if it's not 0, then it's a position, or a vertex.
Addition, as ever, is weighted averaging.
So if you've got a point here and a point here, if you want to get the point that's directly in between these two points, you can add them.
That's going to work if the two points are coming in there in the same amount, which is defined in a specific way.
But it's, again, exactly like this color mixing thing.
All right.
Rotoreflections and transflexions.
What the hell is that?
So this is a rotoreflection.
My hands being like this, so this is like the clapping pose, which I hope to see lots of later.
If my hands are like this, so the sort of praying pose, then this is a reflection, right?
I have this hand, I reflect, and I get that hand, right?
This is the point reflection, so in between my wrists there's a point, and this hand is related to this hand by a point reflection.
So you consider the clap to be somewhere in between a reflection and a point reflection.
That might remind you a bit of the quaternion, because a quaternion was some amount of identity and some amount of 180 degree rotation.
And an arbitrary quaternion that wasn't identity or 180 degree turn was some mixture of identity and 180.
There's also transflexions.
These are the situation of I reflect and then I translate.
Yeah.
I reflect, then translate, as opposed to reflecting and then rotating.
And with a transflexion, the point reflection, so to speak, in this context, is a point at infinity.
which is a bit weird, but it's again analogous to the situation that if you have a quaternion, or rather a dual quaternion, where the line is infinitely far away, then that is a translation.
Okay.
Why do we care about these things, though?
Why do we care about flectors, which is the general word for rotoreflections and transflections?
The answer is because the planes and points inside them may be things that you want.
If we want to get the intersection, the place where this laser site intersects the plane defined by this rectangle, it doesn't actually intersect the rectangle, but it intersects the plane defined by this rectangle here, which you might care about a lot.
If you want to get that point, you will find it, we'll see later on, inside of a rotoreflection.
And if you want to get, say, the point on this branch that is as close as possible to Lara's hand, this is something that you'll extract from a transflexion.
So we probably should represent these in code, but it's very easy.
You just have to have a little bit of, well, a plane and a point, right?
And this is what defines a flector.
Let's recap our understanding of quaternions to see a bit more about how we're going to extract these things.
So, plane angle distance from quaternion is something that we did earlier.
If we reflect in a mirror, and then reflect back in the same mirror, that takes you back to the start.
So if we've got Robert De Niro here, that's Robert De Niro's reflection.
And if we reflect Robert De Niro's reflection, we get back to Robert De Niro.
Robert De Niro's relationship with Robert De Niro is the identity transform.
Therefore, a planar reflection composed with itself is the identity quaternion.
Planes, for this reason we sort of say, they square to one.
The identity quaternion, there's no axis to speak of, but we've got a lot of identity in there.
It's got w equal to 1, or something else, but not w equal to 0, anyway.
And nothing else.
Okay, reflecting in a mirror, and then in a very different mirror, i.e.
an orthogonal mirror, will get you a 180 degree quaternion.
By orthogonal, I just mean at a right angle, if you've never heard this term before.
In this situation, we saw that we had two mirrors that were at a perfect right angle to one another.
And reflecting in one mirror and then in the other gave us the reflection that was back here.
But this is a special kind of reflection.
This is the line reflection.
So multiplying a plane by a plane that's at a right angle to it will give you this quaternion.
It'll give you a quaternion that is completely a line quaternion.
It's a 180 degree rotation.
In general, a transform, such as a quaternion, has some amount of identity and some amount of line, and in specific relative amounts.
So the angle we saw was controlled by those relative amounts.
We wanted to get the angle and the distance of two planes.
We made our dual quaternion by reflecting in those two planes, and then we extracted our distance and our angle by taking the different amounts of identity or amount of line.
We had two different ways of taking, of extracting something else that gave us our information that we needed to calculate our angle and our distance.
But all of these came from that dual quaternion.
They came from the line part of the dual quaternion.
Okay, so since we care about extracting these things, points, lines, and planes from transforms so much, we should probably develop some notation for it.
And there's a very elegant notation for doing this.
So if you've got M, and M is a flector or a dual quaternion, there's a specific shorthand notation for extracting things, and it uses this concept called the grade.
In this specific context, not exactly in the context that Eric will be talking about later, but in this context, a plane has grade one.
And the reason that it's got grade one is because you can make a plane with one planar reflection.
that's with this, and we put a 2 here, because a line can be created with reflections in two orthogonal mirrors.
A point, which you might extract from a rotoreflection or a transflexion, would be a grade 3, because it's the intersection of three planes, or rather, a point reflection is a reflection in three planes.
How about this?
Well this is the identity transform, so if you have a dual quaternion and you want to extract the amount of identity in there, which you may want to do, that's written this way, and it's got a zero here, because the identity transform is a reflection in no mirrors at all.
And then the funny one is the screw motion.
It's not that common to extract this, but it's not unheard of.
The screwiness of a dual quaternion, you extract with the grade four, it's the grade four part of this dual quaternion.
Here's why.
So reflect and reflect, so that gives me a 180 degree rotation.
And then reflect and reflect, that's a translation.
So a rotation and translation, which is a screw motion, is four reflections, right?
One, two, three, four.
Okay.
To really hammer that home, if you had, for example, an ordinary quaternion, and you wanted to extract only the line part, the notation for this would be to just say, I want the 2 thing here with the angle brackets, and that'll give me this quaternion.
So you can see that this is the same as this, but the w part is zeroed out.
It's only got a line part.
You might care about this again, for example, because you want to find the intersection line of two planes, like in your snowboarding example.
If you wanted only the identity part of the quaternion, only the w part, the notation for that would be zero here, because the identity is zero reflections.
And yeah, that gives you this quaternion, which has some amount of identity part, but no line part.
That's been zeroed out.
figuring out what amount of point, line, and plane you have in there.
This is very important.
Um, there's a notation for the- for extracting the length of a vector, which is this.
So, uh, Vx squared plus Vy squared plus Vz squared, whole thing square-rooted.
That gives you the length of the vector, right?
And we write that for some reason with two, uh, with vertical lines on either side of V.
Incidentally, you can ask the question, where do you kind of get Vx from?
And it's stored on your computer, but how do you get it geometrically?
Obviously, it's a walk by some amount along the x-axis.
But note that you can only see that this point intersects the x-axis there, or is related to that part of the x-axis, by thinking about the plane that runs through this point and has normal vector in the x direction.
So this point is, in some sense, you get the Vy and the Vz from thinking about the intersection of these two planes and the intersection of this plane.
So the idea of a point as the intersection of three planes might not be as unfamiliar to you as you think.
So the amount of point, line, or plane reflection inside M, notation.
So we've got two different ways of getting it.
This is the one that we use to get the amount of... let's say we're thinking about a point, so a point at the intersection of three planes.
So we're looking for the grade 3 part of M. If it's a point at infinity, then we have this notation.
And the way that I think about it is that this empty circle represents that big old sky sphere, right?
The empty circle is the skysphere, so like a point at infinity, if you want the amount of points at infinity inside M, then that's what this thing means.
And if you've got something that isn't at infinity, then this is the notation for the amount of plane, amount of line, amount of point that's in there.
And it's a filled circle because we're looking at stuff that's inside that skysphere.
All right.
Looking at this in the case of a dual quaternion, so here's the grade 2 part of the dual quaternion, this is a line part of the dual quaternion, this is how you would extract the amount of line that's in there if we're talking about a line that isn't at infinity, and that's the way that we write this, this is the amount of line that isn't at infinity inside M.
This is the amount of line that is at infinity inside M. So this will give you a single, just a number.
You can extract the, you can just take these, read these floats off, take the square root of the sum of their squares, and you will get this thing, which is the amount of line at infinity that is inside M.
Another way of writing these, by the way, there's some authors who write things differently, like they write the filled circle one as having nothing here at all, and then for this one they put an infinity sign here.
And if you want the identity part of the quaternion, then you just read off the W part, and if you want the screwiness part, then it's like this.
How about for a reflector?
A reflector is an easier case.
So you've got a plane that's right there.
That's the grade 1 part of M. There's the grade 3 part of M, so the amount of point reflection that's inside of the reflector.
These are the different ways of extracting the amount of point reflection that isn't at M. Oh, this is the amount of planar reflection that isn't at infinity that's inside M.
this talk.
Finally, we're getting to some video games, right?
We're looking at case studies.
We're going to get angles, distances, intersections, and projections.
It's also going to be very fast because we've got so much machinery built up.
So, plane-line.
We're thinking about a plane and a line in this situation.
We're interested in how the laser sight cuts this rectangle that we've got here.
We're going to turn the laser sight in this rectangle into a plane and a line.
And this is an infinitely extended plane, so it's not the plane that's defined, it's not, it's not limited to this rectangle.
Yeah, it's an infinitely extended plane.
But we're interested in, for example, where to get that intersection, how to get that intersection.
First we're going to label the line as A and the plane as B. The line is the middle six, it's the, it's a dual quaternion.
It's a line, if you wanted to do a 180 rotation around this line, that would be the same thing as this.
that would be this dual quaternion.
So, it's the line part of a dual quaternion, and this plane is obviously represented in this way.
We define M equals A over B, which we know how to do, because we've seen how to divide most things.
And then we're going to... well, M is a rotoreflection, or a transflection, by the way.
It's going to be a rotoreflection if the line is not orthogonal to the... is not parallel to the plane.
It's a transflection if they are parallel, whatever.
this They don't intersect each other.
If you call the intersection function with these two objects, it should give you nothing.
Well, no, that's not true.
It should give you a normal vector.
It should give you a point at infinity.
Maybe you want the angle between the line and the plane.
The way to get that angle is with this formula.
And again, it involves the amount of point reflection that's inside of M, where M is a rotoreflection, say, and the amount of planar reflection inside of M, where M is a rotoreflection.
There's only going to be a distance between the line and the plane, again, in the case where the line is parallel to the plane.
And so this, yeah, this is conditional upon the angle.
But it's still the ratio of two amounts of point reflection and planar reflection.
And, oh, and obviously another situation where a video game developer cares a lot about the angle between a plane and a line is in lighting calculations.
Okay.
Plane point.
Here we've got dead space.
In this part, you're going around on the surface of a great big spaceship.
You've got the ground beneath you, probably defined by a plane.
Your character's position is a point.
What can we do with this?
Well, let's label these as A and B, and define M equals A over B, because that's turned out to be a useful thing to do in the past.
Suppose that you wanted the line that is orthogonal to A, sorry, at a right angle to A, and it passes through B. Well it turns out that this is the line part of M. Surprise, surprise.
What else would it be though?
Of course it's going to be a line part of some dual quaternion.
Suppose you want projection, so you've got a point in the plane again, and you want to project the point onto the plane.
Well, this is the line part of M, which is the grade 2 part of M, they're the same thing, divided by A, it turns out.
Maybe you want the distance between the point and the plane.
It turns out that this is given by this formula, where we're taking the amount of screwiness inside of M and the amount of line inside of M. These formulas are looking pretty similar, aren't they?
And you can ask the question as well, is the point to the left or to the right, or is it embedded inside of the plane, right?
So if it is my plane, is it here, or is it here, or is it in my plane?
That turns out to be the sign of the screwiness of M. This is a slightly weird thing to think about.
It's maybe deserving of something in itself, but it's quite interesting and you can actually apply this concept to lots of other situations that I won't go into.
So you want to know maybe, for example, you've got two lines and you want to know whether these two lines are loosely clockwise to each other, whether they're like this or like this.
You can similarly extract that from this screwiness part.
line and point though.
So here we're talking about Lara.
She's reaching out to grab a branch.
The branch is defined by a line.
The line we're going to label A. Her hand we're going to label with B. We're going to define M equals A over B. You must be getting sick of this by now.
Maybe you want the point on the line that's as close as possible to her hand.
Turns out that that is the projection of this point onto this line, and that is the planar reflection part of M divided by A. The planar reflection part of M, by the way, is going to be a transflexion.
Maybe you also want the distance between her hand and the line.
Well, that's given by this formula again.
It's the ratio of the amounts of point of infinity inside of M and the plane inside M. The amount of plane inside of M, sorry.
Okay, line and line.
Here we've got lightsabers.
I'm not going to draw lines on them because it's a bit obvious.
These are again represented as the middle six floats of dual quaternions.
We define m equals a over b, where a is one of the lightsabers and b is the line defined by the lightsaber, and b is the other line defined by the lightsaber.
If you want the angle between the lightsabers, then that's this formula.
If you want the distance between the lightsabers, that's this formula.
Maybe you also want to have, like, let's say the lightsaber's like this, and you want to have, like, some crackling energy going from here to here.
In order to get that, you use... you can use this formula.
Oh, sorry, I should have put in the multiplication sign.
So it's the... so if you want to get the line that's at a right angle to these two lines, that turns out to be the orange line multiplied by the purple line minus the purple line multiplied by the orange line.
And that gets you this line, which is at a right angle to both lines.
Okay, fully general formulas and recap.
This part is going to have Much fewer pictures than the other parts, I'm very sorry to say.
Yeah, because we're trying to go across points and lines and planes, but yeah.
Okay, distance, angle, intersection, and projection of anything and anything else, where we're talking about points, lines, and planes.
intersection, so if you've got the grade of A and the grade of B, so let's say that a line is grade 2, because you can make it with two planar reflections, and a plane is grade 1, because that's one planar reflection.
So the grade of a line and the grade of a plane is 2 plus 1 equals 3.
And if you take the composition of A and B, and then you take the grade G part of that, G was equal to 3, so it's the grade 3 part of A composed with B. Well, that's our point.
So the intersection of a plane and a line is a point.
The intersection of a plane and a plane is a line.
angle and distance from anything to anything, so this is looking very gnarly at this point.
But for what it does, I'd say that it's not bad, right?
Here we're taking... so you've got A and B, where A and B are point lines or planes, so they've got some grade, which is 1, 2, or 3.
You do grade A minus grade B, and then you take its absolute value and you assign that to G.
Um, and then the angle between them is going to be about- is going to be related to the amounts of these graded parts of M in there, and the distance is going to be related to these graded parts of M in there.
Um, yeah.
And this is, sorry, this is not that fast and not that compatible because you can ask the question, well, what if this is equal to zero?
The arc tangent of one divided by zero is in some sense well defined, it's 90 degrees.
The arc tangent of infinity is 90 degrees, but the only way to guarantee that you'll get the right answer is to use arc tangent two.
Okay.
Orthogonal to a thing and overlapping another thing.
The example that we had of this is the line that's orthogonal at a right angle to the plane and it passes through this point.
But there's lots of situations where you can get this.
So for example, if you have a plane and you have a line, you can get the plane that is orthogonal to this plane and passes through this line.
You can get that whether the line is parallel to the plane or not.
That turns out to be this expression, so you can get the unique plane that's orthogonal to a plane and overlaps a line, the unique line that is orthogonal to a plane and overlaps a point, unique plane that's orthogonal to a line and overlaps the point, blah blah blah.
And then it turns out that this is a generalization of the dot product in a way that I don't really understand.
But that's why we write this thing as the dot product.
And if you take this and you divide it by B, it turns out you get projection.
You can project a plane onto a line, you can project a plane onto a point, a line onto a plane, a point onto a plane, all with this one formula.
Isn't it great?
Interpolation, bisectors, and transforms from A to B.
All right, addition is always weighted averaging across everything that we've said.
And this is sort of what we mean by the term homogeneous, by the way.
So this lets you interpolate points, lines, planes, and transformations.
So you can interpolate any plane to any other plane.
You can interpolate any point to any other point.
And you can interpolate any line to any other line.
It's great.
This formula gives you the thing that's exactly halfway between two things by distance and angle.
So suppose you've got two points and you want the point that's directly in between them, or you've got a plane and you want the plane that's guaranteed to be directly in between them.
Well, first you've got to normalize your A and B, and that's what this little symbol here means.
You can define the normalization of A as being A multiplied by 1 over the square root of the dot of A and B.
And bear in mind that this is just a float in this situation.
This is a single number, and so you can do this very quickly with fast inverse square root.
Okay, therefore, generalizing that, you've got the idea of a halfway rotation or translation.
Sorry, how much time do I have left?
Okay, normalization.
If you normalize M and you add one, you get a rotation that's halfway from the identity to M. You can also write this as the square root of M, because if you multiply it by itself, then you get M normalized.
Transform from A to B feels like it should be the same thing as transform composition, but there is a caveat here.
So if you want to go from A to B, it turns out you've got to take the square root of B over A, and the reason for that is because if you've got two planes at 90 degrees, then This is actually a 180-degree rotation, so you need to take the halfway rotation of this to get the angle between these two mirror planes.
And this finally gives us this set-from-unit-vectors thing that I talked about at the beginning, where you want to get the quaternion that goes from here to here.
You just think of those as the normal vectors of planes.
You take the reflection composition of those two planes.
That gives you a quaternion.
Then you've got to take its square root.
Okay, conclusion.
This is a cheat sheet.
It says everything that I've just said.
All of our code here can be deduced from these very, very simple rules.
These are the fundamental definition of the algebra that I've just put forward.
So all of these reflection planes, which are through the origin, They square to one, which is the identity, because you reflect and you reflect back, you get the identity.
And then the plane at infinity squares to zero, because you can't reflect past infinity and then reflect back again.
Similarly, you can't do a 180 around a line at infinity and come back again.
That doesn't make any sense.
You can translate in a way that's defined by the axis of the line at infinity, but you can't go all the way around the line at infinity.
Similarly, you can't reflect in the plane at infinity.
If you follow up on this, you'll find that this is how you compose dual quaternions, for example.
There's other things for composing flexions and planes and points.
It's a bit gnarly looking, but it's actually faster than 4x4 matrix multiplication.
And all of this has been geometric algebra.
But this is a term that's maybe worth clarifying.
So there are many algebraic systems for computational geometry.
And the cross product is one of those algebraic systems that you learn in school.
But what I've been talking to you about today is called 3D Euclidean plane-based geometric algebra.
And it's defined by what we call CL 3, 0, 1.
It's called that because it's got three basis elements that square to one and it's got one basis element that squares to zero.
A thing that Eric has talked about many times is 3D projective geometric algebra, which is able to do even cooler stuff.
It's able to do camera transformations, and it's able to do, for example, if you've got two points, you maybe want the line that joins those two points, or if you've got a line and a point, you want the plane that joins those.
So what I've been talking about is a subset of what he talks about.
So it's what gets called anti-space.
3D Conformal Geometric Algebra, as I understand it, he's about to give us some stuff about that.
Yep, brilliant.
3D Conformal Geometric Algebra lets you do even more stuff, including the spheres.
And then there's this thing, which is, well, you can call it Vector Space Geometric Algebra.
It's CL3, so it's a subset of what I've been talking about.
And yeah, the problem, it's fine, but the problem is that people sometimes say geometric algebra and all that they mean is this, when geometric algebra really means all of this stuff.
And another word for it, by the way, is Clifford algebra.
And if you want to learn more specifically just about 3D Euclidean plane-based geometric algebra, I recommend this lecture by Leo Dorst.
And he uses lots of mathematical rigor, which is something that I don't very much use.
This is a link to lots of other things that you might have heard of.
If you studied mathematics or physics in university, you might have heard of these things.
If you didn't, don't worry.
You don't need these concepts.
But yeah, just to say these are labels, different labels that you can give to the same things that I've been talking about.
And one of the fun ones is spinners, by the way, that's somewhere in here.
Yeah, quaternions and dual quaternions are spinners.
One thing that you might have noticed that I've been doing a lot of in this lecture is taking vectors and then making them fade out and replacing them with something else, with the exception of the translation vector, sort of, though I've added this line in here.
And the reason for that is because vectors are not that good of an idea.
I mean, it depends on what you mean by vector, but if you define a vector as the thing that goes into and comes out of the cross product, it's a terrible idea.
The cross product transforms in an inconsistent way.
It's a mathematical dead end because it doesn't have any connection, well, it doesn't have a proper connection to group theory.
And it gives you something that if you put in A and B, but A and B are, like, A and B could be planes, and then the output, what you really want is the intersection of those two planes.
So yeah, I think that when somebody uses the cross product, the universe should scream type error.
And it remains to thank the many, many people who have made it so I understand the stuff well enough to give a lecture on it.
And please get in touch with me.
I love talking about this kind of thing.
And I've got even more toys that I didn't get to talk about today.
Optical illusions as well.
All right.
Thank you very much.
