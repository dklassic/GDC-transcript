Hello, everybody. Welcome to the talk, id software's early days, as told by me. So welcome, everybody. I'm John Romero. I'm cofounder of id software. And I'm going to take you on a journey back to the beginning of id software. Are you ready to be entertained? Everybody needs some entertainment today, all right?
Okay. So I realize that some of what I'm about to say may sound insane, but we were in our 20s, and when we started it, we didn't know that there were any limits. So I grew up in a wonderful small town in northern California named Rockland. The population was only 6,000.
In the 70s I was massively addicted to spending loads of time in cold, dark arcades playing all the games there and I just got really good at playing them. In 1979 before anyone really had a computer at their house, including me, I went to the local college when I was 11. And I started learning basic from the college students.
I just went up to them and I just asked them what the words in their listings were and I wrote them all down on paper and I started experimenting with them on the HP 9000 mainframe there. I was mostly interested in just making and playing games. To keep me at home, my parents got an Apple 2 plus. I was done going outside after that. I spent all my time programming games on that computer. A few years and 20 Apple II games later and I finally learned 6502 assembly language from this book. It was the language that all fast arcade games were written in back in the 80s. Then I could really make 80s games like this. Except that they kind of looked like this on a computer. So not quite arcade games, but home computer games which were on the Apple II.
let's just say the Apple 2 was my personal home arcade as well as one million other Apple owners back then. When I was a sophomore in high school, I did some programming for the Air Force when I was 15 years old. I can't tell you what I was programming, though. It's classified. After high school, I kept making games. And by 1987, I was finally working at one of my favorite companies in the industry, which was Origin Systems.
My first job was porting 2400 AD from the Apple II to the Commodore 64. By this time in 1987, 1988, I had made 74 games and three previous start-up companies. Capital ideas software on top, inside out software where I ported might and magic II from the Apple II to the Commodore 64 and ideas from the deep. And I was 21 years old.
So then I went to work at a company named Softdisk at the start of 1989. I learned how to program a DOS PC there and I made a small game or a utility per month for a whole year. Then I created a game product called Gamer's Edge at Softdisk and I had to hire a very small team of developers to make games. So I hired John Carmack and Adrian Carmack. And I had to make a not related, into the department for programming and art. And then Tom Hall came in at night to help us out since he was already at Softdisk and he loved making games. So this was the first time in ten years that any of us had worked with one other person or more on any game. After making them alone, right, for a decade each, and it was incredible getting together finally on a team.
So while creating our first game together, Slordax, John Carmack discovered the smooth scrolling trick on the PC. So Tom and John stayed up until 5 a.m. and they made a little demo called dangerous Dave and copyright infringement. And so they put a disk on my desk. The next day I came in, I saw the disk, I ran the demo and I watched the screen scroll smoothly pixel by pixel. And it was a massive eureka moment for me.
It was like a bolt of lightning hit me. I'll elaborate on why that was in a moment. But id Software was born that instant on September 20th of 1990. So one thing led to another. And we spent a whole week putting together a demo of Super Mario 3 for Nintendo. We did this after work.
and Nintendo liked it, but they decided not to publish it because they decided to only publish their games on their own NES platform back then, which was a smart move. So no problem.
We just used the tech for a different game, which was the Commander Keen trilogy. So why would a side scroller be a huge hit on PCs in 1990? Well, it was because no games on the PC had scrolled smoothly per pixel.
The PC had been out since August of 1981 and in nine years no one had figured out how to make smooth scrolling pixel by pixel like a Nintendo until the dangerous Dave and copyright infringement demo which led to Commander Keen. Does anyone remember the original Duke Nukem game? All right.
It scrolled by in chunks of 8 pixels like other games of that era and the reason why it scrolled with any speed is because I taught Todd how to do it while he was coding Dark Ages and he made the game that he made right before Duke Nukem.
So the Commander King trilogy provided the start of the company, its software, and we made these three games in three months, from September 20th to December 14th in 1990.
So Commander Keen was a massive hit for us. And it was so popular that people cosplayed as Keen for years at events, even today. And Commander Keen pioneered the creation of game engines. So we designed the game as an engine that operated on different data for different games. It was the only way to get the trilogy done so quickly. In fact, in 1991, when we were working on Keen 4, we were working on a game called We started licensing the engine for the first time, so it was the beginning of the modern engine licensing business.
Development on our games went very smoothly and quickly because we stuck to some core principles that are important even today. So through this talk I'm going to highlight some of our core principles. I'd like to highlight something else right now, namely this photo. Has anyone seen this photo before?
so not in Europe. It's a picture of John and I at the lake house in Shreveport, Louisiana where we started in software. So the funny thing is that people have asked me for years what was in this picture. So I analyzed it recently and here's what you see.
So this is John, me and John, in early September of 1990. We were working on the Super Mario 3 demo that we planned on sending to Nintendo. So we both worked on this huge Dungeons & Dragons table that John had. We used to play D&D on the weekends and those sessions led to ideas for future games like Doom and Quake. So this is John and me. Tom Hall took the photo.
We were working on the Super Mario 3 demo that we planned on sending to Nintendo and the computers were brought home from work on the weekends so this pic was taken on a Saturday or a Sunday. On top of the monitor is one of those old Intel reflective astronaut plushies from a long time ago and on my left is my notepad which is a task list of bugs to fix. And this is our high level task list of what had to get done to finish the demo. There wasn't really anything online back then. There was no online really.
This is Tom Hall's area where he was doing all the graphics for the demo. He recorded gameplay on a VCR, then he played it back and he paused the action so he could duplicate the tiles exactly in Deluxe Paint 2, if anyone remembers that. The TV set had a 13-channel selector on it, and it was connected by an RF modulator. So it was very old school.
So it software was formally founded on February 1st of 1991 and we made 12 games that year. Shadow night, dangerous day in the haunted mansion, rescue rover, hover tank, tons of games.
We actually took two months per game but we made two games simultaneously. So this was due to basically having ten years of intense game development experience prior. But it's also due to the first principle that we had.
which was no prototypes. Just make the game, polish as you go and don't depend on polish happening later. So always maintain constantly shippable code. This is how we made so many games so quickly. We had the whole game designed in our heads. We just needed to quantify what needed to be done and then went about working on it until the game was finished.
There were no prototypes for our games. So we just made them.
And remember, we did have a small team of four people that could do this, and large teams definitely require more planning. So time for a quick story. One day, it rained really hard, and Cross Lake in Louisiana rose, and it was flooding everywhere, and I needed to get to work. We were furiously working away on our games, and I had to get back into it. And I just took a shower and everything and went down the road in the car, and then I saw this. The whole road was flooded.
basically I waded through the huge flood with water snakes in Louisiana all the way to the house and I took another shower and I could start coding. And this was because we were all so excited to be making our own games 24-7 basically. Also note that during this time, during this year that we made 12 games we also moved id software from Louisiana to Wisconsin, to Madison, Wisconsin. And that takes a lot of time out of making games.
but we couldn't afford to have anything go wrong while making our games at such a pace, so we created another principle that kept us developing quickly. It's incredibly important that your game can always be run by your team. So bulletproof your engine by providing defaults on load failure. So if you have 100 people on your team trying to develop a game that will not run, you're paying for 100 people to sit around and wait for it to get fixed.
So we recognize the importance of keeping the game always playable and we decided to bull proof our engine by making all input into the game solid. So game engines typically fail because they're trying to load bad, corrupted or non-existent data. So checking for this and providing a default for a failure case will keep the game running and it will quickly show you what's missing. So if you fail to load a sprite into the engine, just show bagel.
theme song is not working or loading up, play something obviously wrong for the game. Like, I don't know, heavy metal or something. Missing a sound effect, same thing. Just play something very obnoxious. So after 1991, id software's first stage of company development was complete. And another important principle was in effect. Keep your code absolutely simple.
keep looking at your functions and figure out how you can simplify even further. So we wrote all of the games that we made up to and including Quake in plain C, no C++. Not saying that you shouldn't be using C++. So, okay, stage 2 is about to begin. In August of 1991, we decided to move to Madison, Wisconsin. Tom Hall and I visited at that time.
in August and we found it to be really nice because Tom Hall used to live there while he was in college. So we moved all four of us there and we continued working on our games. Only four months later we were found dead in the snow, victims of Wisconsin's brutal winters that we did not research. So the moral of the story is do your research. We knew how to program in assembly language but not how to ask Tom Hall, hey, what are winters like up here?
So after six months of cold hell, we moved to Texas. So new principle, great tools help make great games. Spend as much time on tools as possible. I wrote a tile editor in 1991 named Ted.
for tile editor. It was used for 33 shipped retail games, several of which were 3D games even like hover tank, catacombs 3D, wolf of Zion 3D, spear of destiny, corridor 7, et cetera.
So it was January 1992, we decided to go all 3D based on catacombs 3D's promise that we had just made it a couple months ago.
So it looked cool, it just didn't play very cool. So in Wolfenstein 3D, it took us four months of development time to make Wolfenstein and launch the shareware version with one episode of levels. It took two more months to finish all six episodes of the game plus the hint book. And in the first month, the game sold 4,000 copies, all priced at $60 each.
So that was really pretty cool for us.
Spirit of Destiny took two months. It's a prequel to Wolfenstein 3D and it was retail only. So we got two games done that year. Soon after, Tom Hall traveled to Kentucky to work for a couple months on Wolfenstein VR. Yes, this was 1992 VR. Back in the days of Commander Keen, I discovered a small three-person game company called Raven Software in Madison, Wisconsin.
I called them up.
We went over, we introduced ourselves, and flash forward seven months later and we did a little work with them by modifying the Wolfenstein 3D engine and licensing it to them for a game called Shadow Caster, if anybody remembers this game.
It was released in 93. Shadow Caster's tech improvements were sloping floors, lighting and fog. This engine looked slightly better than Wolfenstein 3D but it just wasn't good enough for our next game.
So John Carmack, he spent some months thinking about how more advanced the new engine should be for the game that we decided to call Doom. Based on the rapid development of our previous games, we came up with another important principle. We are our own best testing team, and we should never allow anyone else to experience bugs or see the game crash. Don't waste other people's time.
test thoroughly before checking in your code. No throwing it over the fence for testers to find and put a bug in the database and fix it later. It's a wasteful cycle. So after 1992 id software's second stage of company development was complete along with another principle. As soon as you see a bug, you fix it.
do not continue on. If you don't fix your bugs, your new code will be built on a buggy code base and ensure an unstable foundation. If you check in buggy code, someone will be writing code based on your bad code and you can just imagine how much waste that creates. Okay. So the ideas for doom came from our D&D campaign, which is full of demons. We also love the movies Evil Dead and Aliens.
So Doom's design was just a mash-up of these ideas. And at the beginning of Doom's development, we created a new core principle. Use a superior development system than your target to develop your game. So before Doom, we were making games for DOS while developing on DOS computers. And we knew that we could do better if we used more powerful computers and a more advanced operating system to develop our games.
So we developed Doom on Next Step workstations. So they are far superior to DOS. Next Step eventually turned into OSX, OSX.
This also meant that one of our core principles was upheld.
Great tools help make great games. We could make far better tools on Next Step. So DoomEd and QuakeEd were two of the most important tools that we used. They both really helped us create levels and test them.
very quickly. You might not have known this, but we had five people on our team creating Doom. After Tom Hall left, we hired Sandy Peterson and Dave Taylor, which brought us up to six people. We also did a Super Nintendo port of Wolfenstein 3D right in the middle of Doom's development. It took us three weeks to make this port because we had to learn the Super Nintendo hardware.
So we uploaded the shareware version of Doom to the University of Wisconsin server on December 10th of 1993. The excitement for the game was unprecedented. People were sitting on the server in the upload directory creating files with sentences like, when will we see Doom? And we got random calls in the office asking when it would be out. So time for a quick story.
during the final day of Doom's creation, we worked 30 hours that day. So we had the game running on all the computers in the office to ensure that the game was really solid. So on a couple computers, the game froze. The menu could be brought up, but the game play, it just stopped. So John Carmack thought about what could possibly be happening in the game. And he figured out the solution without actually doing any debugging.
So he was correcting the solution and we finally uploaded it after this five-minute fix and more and more testing. So at the beginning of 1994, I started working with Raven software and developed Heretic using the Doom engine. I wanted to see how an inventory system in a medieval version of Doom would play. It turned out great, I think. Does anyone remember Heretic? Okay, made it. We also made Doom II in 1994.
over eight months and it was released October 10th. In addition to this, we did the Jaguar port ourselves and again we were multitasking and making multiple games. So we made two games in 1993, three games in 1994. In 1995, we started working on Quake and we got up to nine developers.
There were four designers, three coders, two artists, and I was the only one to actually do both coding and design. I wrote Quake Ed, I experimented with level design and full 3D. Again, we started with a clean code base. We had no code from Doom using Quake, which was another one of our core principles of development up to that time. Write your code for this game only, not for some future game.
you're going to be writing new code later because you're going to be smarter. Also, you're not tying yourself down to the limitations of your past code. Always try new things. So Quake's engine was being developed by John Carmack and the rasterization was being developed by Michael Abrash.
John Cash worked on the network code and he went on to become the lead programmer of World of Warcraft. Time for another quick story.
So this relates back to our belief that developing in a superior operating system can result in a better game. So while making Quake, we actually had to deal with Cray supercomputers to buy a Cray YMP for half price. So our plan was to have our development team connected to this Cray to BSP and light our maps at supercomputer speeds, as well as crunch whatever kinds of new data that we thought we might need for our next games engine.
So the computer room in Quake's DM3 level was going to be full of Cray computers as a reference to this new hardware that we're going to acquire. Unfortunately, Cray was bought by Silicon Graphics before Quake was done and that deal fell apart. So the computer room in Quake is filled with the usual rectangular mainframes instead of C-shaped Cray supercomputers.
After publishing Heretic, I started working with Raven on Hexen. I wanted to see how an FPS would play with a hub level system and character classes on it. Hexen launched on October 30th of 1995 during the Deathmatch 95 event that was happening at Microsoft headquarters in Redmond. So a month later, I got Raven started on my next design, which was Hecatomb. It would be the third game in the series, Heretic, Hexen, and Hecatomb.
Hecatomb was never finished. It was turned into Hexen 2.
Because I left it. During this time, we noticed a small game company making some nice games like Raptor, Call of the Shadows, and we brought them down from Illinois to make a game that we would publish. They called themselves Rogue Entertainment and about 14 months later they released Strife, which used the Doom engine. It was an FPS RPG.
and it was really fun and it showed that combining genres could actually make a fun FPS. Has anyone played Strive here?
All right. It's on Steam, by the way. Also during 1995, we made Ultimate Doom, which was a retail version of the full version of Doom with an extra episode, and we made the master levels of Doom that year as well. So id Software was still nine developers in size, and we released two games in 1995 while we were working on Quake.
So work continued on Quake and 14 months after we started, we released Q-Test on February 24th of 1996 for the world to test our first Internet game play. During the next four months we worked very hard to complete Quake. We also released Final Doom, which was created by team TNT and the Casali brothers, and we also released Death Kings of the Dark Citadel, which was an additional set of levels for Hexen.
So one important principle that helped us get Quake done faster was this one. Encapsulate functionality to ensure design consistency. Examples of this in Quake would be like just the torches on the wall. We could have had us level designers place a torch model, then a fire model that animated, then a torch sound entity all at the same location in a map. But then if we needed to move things around, something could have gotten left behind.
So it was far easier to just create a torch entity that we dropped in the game with all the functionality built in and spawned by the engine. So also the water in the game needed sound effect entities all over the place to fully cover the water areas so you'd hear it everywhere. So if the water got modified in the level, moving all those entities around and deleting some, it would have been a huge mess. So it was easier to make the game just play water sound when the water was being rendered.
So it was a renderer level feature and it was out of the designer's hands and that ensured consistency and it saved memory. And we did the same thing for the skies in Quake, sky audio. So I released Quake shareware on June 22nd at 530 central time on the University of Wisconsin at Madison site. So quick story. While Michael Abrash was programming the renderer, He was interleaving CPU instructions with FPU instructions to calculate perspective correct texture mapping. So sometimes while he was playing the game, for one frame the game would show a completely different part of the level. He isolated the only instruction where that result could actually happen and determined that it was impossible for it to be an invalid value.
So he had a friend from Intel come over and go through his analysis and his friend agreed with him and told him that there was a known error with the floating point divide instruction on the Pentium and it was a hardware error. So there was nothing that we could do about it so we left it alone but this bug is known as the Pentium F div bug which you can look up online. So Quake is the game that introduced the world to mouse look.
to high speed true 3D worlds, texture mapped and internet multiplayer. So clans sprung up immediately as soon as the game came out and eSports and tournaments were starting all over the place. Quake world launched five months later to smooth out the internet game play. So making games was and still is our life. We love it more than anything else.
As you can tell by our release of 28 games in five and a half years by less than ten people. Many other games were released that used our license technology over the years. And here's some more core principles that we learned from doing all of this work. Try to code transparently. Tell your lead and peers exactly how you're going to solve your current task.
and get feedback and advice. Don't treat game programming like each coder is a black box. Project could just totally go off the rails and cause delays. Programming is a creative art form based in logic. Every programmer is different and will code differently. Don't waste time focusing on a rigid coding style. It's the output that matters.
So we keep working to make great games. It's in our blood as it's in your blood and it's why you're here at GDC. So you want to be the best. Go be the best. Thank you for your time and I'm ready for any kind of questions you might have. Thanks.
So, yeah, I don't know if someone is handing a mic around or if anyone has any questions about this stuff. Okay, got one.
All right. Who wants to ask some questions first?
or does nobody want to ask a question? Oh, got one right over here.
Great talk. Thank you. In one of the first principles you show, you mentioned that don't prototype. And today one of the main principles in our game production as we learn, as we work, we are prototyping. What's your opinion on that?
Well, we, because of the time pressures, we had no time to do prototypes. And we were a small company that only had four people at the time. So we could actually not, we didn't need a prototype because we knew from our 10 years of experience that the games that we were making were small in scope. They were very easy to visualize in our minds. And that when we started it and we finished it, say one or two months later, it was what needed to be done in that amount of time. So...
there may be 20 levels in the game and it might end up being 10 levels. It's like whatever would fit in that time but all the game play and most of the characters and AI and all that stuff could totally get done in that space. But I think nowadays obviously with any really big project you're definitely going to be prototyping. But if you're still like a lot of mobile games, they might not need prototyping if you already know exactly how the game is going to play. But if you don't know, if you're developing your game kind of organically and you want to see where the game goes, I don't know if I would call it prototyping. I mean, it's like if you start making your game and at some point you might discover something about it that changes what you're doing in the game, but that's your game. It's a prototype if you're throwing it all away and starting over.
But if you're still going forward, I don't know if that's a prototype. I think that's just the beginning of your game.
All right.
Thank you.
Yeah, hi. I always felt, especially looking back on Doom and Quake, that the music in your games was always a big part of the games.
I, for example, I often listen to the Doom soundtrack, and I was just wondering, for example, the collaboration with Trent Reznor on Quake, how did that happen?
Maybe you've got another quick story that you could share?
Yeah, so the story with how we got Trent Reznor involved in Quake was kind of funny.
After Doom, it was ‑‑ it hit everybody. Doom was such a big game that Hollywood started to get into ‑‑ they tried to get into games. So they knew there had been an earlier Hollywood invasion of the game industry and they were rejected.
And they decided to go in in a different way. So we were contacted by Hollywood agents, ICM, and we had a person handling our account that are named Buildblock.
in Bill Block at that time had a lot of other clients and one of which was 9 Inch Nails. Well, 9 Inch Nails, they played Doom all the time on the tour bus. They had four computers all networked on the tour bus. When they were done with their concerts, they were on the tour bus death matching. And they did it all the time. It's funny because I just spoke to someone like two weeks ago about that. Like they were interviewing Chris Verena.
and getting all this like, oh, we play Doom all the time stories. And so Bill found out about that and said, hey, they are clients of mine. And we heard they were clients and we said, wow, it would be really cool if they would do the soundtrack for the next game instead of having MIDI kind of metal soundtrack. We could actually get some industrial real music in here. So basically they agreed to meet up with us and they came over to our office in Mesquite.
you know, Trent would pull up in a limo and I don't know how, but there would be a bunch of women outside the building waiting. They don't tell anybody that they're going there, but they find out where he's going. And so they just wait outside while he's up there and we're talking about stuff, you know, about the games and the kind of music that we're thinking about doing. And we hung out several times and just kind of kept in touch through e-mail and American McGee would fly to New Orleans where Trent lived.
and just basically kind of coordinate the music creation.
And it was kind of funny because Quake was delayed because of the music. Because if you involve someone like Trent who is out on tour all the time and has a ton of rights around the music, there were 12 signatures we had to get from Interscope to actually get that music released to us. So it took us extra time and finally as soon as it was signed off, then we could actually release the game. So.
just watch out for that. Thank you. He was nice. Okay. So you had a rule stating that you didn't want to reuse code because you would not get the results that you wanted?
At what level did you decide between using engine code and specific game code?
Because you use Commander Keen engine code several times over.
At what level do you make that decision and how?
Well, the Commander Keen code, let's say for Commander Keen 1 through 3, it was the same engine.
So it ran the data that we created.
So we created levels and characters and audio and all that.
And that was just data the engine worked on.
and the engine itself had if defs basically in it for each of the commander keens back then. So if this is keen one, then these actors would be, you know, their code would be running.
and we would load these files. So there were if deaths in the engine just to handle the specific sets of data that or sets of code that were different for the different ‑‑ we just didn't want the executable to be full of three games worth of specialized information so we if deathed some of it. But ‑‑ but ‑‑ and to keep things really small on a disk, we had to take, like, generic data files and ‑‑ turn them into object files and then link them into our executable and then compress the executable because we had to fit on a 140 or a 3, what was it back then? It was a 1.44, 3.5 inch disk.
So we did need to do that where we didn't keep all of our code in one big executable, but it was if defed out. So in the code it was there but not in the executable. But what I was talking about was when you went between major jumps like keen one through three to keen four through six.
those engines have no shared code in them. Or Wolfenstein, or Doom, or Quake. It's basically start with a new code base. And that was actually back in the 80s, that was pretty typical.
Like if you look at the ultimate games, you know, like Lord British's ultimate games, every one of them was just brand new code. Just start writing a new game.
and maybe there's a faster way to render tiles on the screen or use code paging where you're overwriting code in memory because the game is too big, et cetera. So, yeah, we didn't reuse code unless it was something that didn't ‑‑ it was very small and it didn't matter like loading a file. But usually it's so small that we probably just type it ourselves again.
the runner. All right. Now, obviously you were working on porn across your eyebrows free during the 80s, stroke, early 90s.
Why do you think side scrollers, even though they were really popular during that era, even though they've fallen out of favor now, why do you think as a pioneer of the first person shooter genre, why do you think the genre has gone from strength to strength to strength to strength and there are no signs of it going down in terms of popularity?
You mean the shooter genre?
Yeah, the first person shooter genre that ultimately IID pioneered back in the day.
Well, the great thing about the shooter genre is that it started to fragment its design across different styles.
So when we were making our games, like we just made this one type of game, which I mean, I'd say Wolfenstein and Doom and Quake are very similar in that you go through levels and you just like kill monsters and get to the exit and it just looked better each time and things acted differently and sounded better and looked better.
As soon as other people started to get into making shooters, then we started to see people needing to be more creative because they're not the only game in town.
Now there's a bunch of people making them.
So if you look at, say, the Red Storm games, when they started coming out with Ghost Recon, Rainbow Six, and Splinter Cell, that was basically saying here's a whole tactical section of the shooter genre where you're creeping along, you're getting to do really long distance sniper rifle shots and so call of duty where you have checkpoints and everything advances between checkpoints. So people started to really try and innovate within the genre and now you have, you know, overwatch, TF2 and, you know, lawbreakers in this whole competitive way of playing shooters. And I know that we have, let's say, MMO shooter destiny. So everybody is taking this viewpoint and this way of basically shooting stuff and applying it to a lot of different ways of getting through, you know, or getting through objectives, basically.
and wrapping some kind of narrative around it that's really different and sometimes you get something that's very different like Splinter Cell is pretty different from those other games. But you're still shooting in some parts. So I think it's just because there's so much competition, people are trying to do something new with it. Has anyone played the hit man sniper game on mobile?
because that's another really cool way of making a shooter where you just have a vantage point somewhere on your mobile phone and you're just zooming into a scene and scrolling across the scene and tracking people. And it's totally a first-person shooter, but you don't move. And it's just another way, just another example of how people are trying to innovate and push forward with this first-person shooter perspective, but how you play it is different. And I know that the innovation is just going to continue.
people are just going to continue trying to innovate with that viewpoint and what else can you do with it.
So your story has been very inspirational to many people in the industry.
What do you think was unique to Eat Software in those days that enabled this to happen?
Do you think it can happen again to teams these days and what would be your advice?
Yeah, I mean, I think it's super common. And, you know, really, everybody can do the same thing. And what it comes down to is people that match pretty well, having a pretty good amount of experience, but really having focus and determination to make your game and finish your game.
and do that over and over again. So when Wolfenstein came out, that was game number 87 for me. And Doom was game number 90. And we had made so many games and we had iterated and we have shipped over and over that we knew how to do it. And we didn't have to really worry about how to finish a game or even how to start a game. We were just worried about how to design a really good game and to create new technology and kind of make those things work together. Nowadays you don't really have to worry so much about the tech and it really is all about design is law. It's all about what is that design that you're doing.
that you're creating that no one has seen before because the tech is already there for you to use.
You know, except for when you're in VR and AR and there's a lot of new stuff that you're going to create there, but basically traditionally on console and PC, what is the design? And can you focus and spend a lot of time on that, you know, innovative, unique design to make something people haven't seen before?
the engines are already out there. If you look at Minecraft, it's a perfect example of here's an amazing design that one person created, you know, and it was all about what you do in this simple world. People, you know, it's easy to complexify a design. That takes nothing to make something really complex.
it's hard to simplify everything. And if you just sit there and spend time simplifying your design, taking away things from your UI and things that would just complicate what you're doing and try to make it contextual within the game, then you're getting better and better at what you do. And so I say everybody has the same chance to do it. It's just it takes, you know, not really a team, but it's helpful if you have a team.
and it takes focus and determination and I think for us it was us being in the same room and being co-located. Over the Internet it's a lot harder. Given that you didn't make prototypes and you made so many games, were there any concepts that you had to walk away from or throw away?
Let me see. Yeah, we did. So after we made our first Commander King games, we were going to make a game called Quake, the fight for justice. It was going to be an RPG and everything. So we started working on it. We worked on it for about two weeks. And then we decided we knew that Quake was supposed to be a really great game. It was supposed to look great. It was supposed to be a powerful game and what we were making right after Commander Keen was not matching that idea of who Quake was in our minds from D&D.
So we basically said forget it. We're still making these simple kind of cartoony games. Let's just keep on getting better at it. But we're going to put Quake off. So that was early 1991. So we waited four years before we actually got the tech together and what we knew we could deliver on the original promise or design of Quake in 1995 when we started working on Quake.
Other than that, we didn't really start on any game that we didn't finish.
It was, we talked about games and talked about ideas, such as when we finished Catacomb 3D and we were planning on making the next set of Commander Keens, Keens 7 through 9.
we decided that, you know what, let's not do this side scrolling thing again. We can do maybe a Keen someday in the future, and maybe it will be in 3D. But let's start doing 3D stuff. We just made Catacombs 3D, which was one of the first texture mapped games, even though it was in EGA. So Tom Hall thought of this idea where, you know, what if there's a research facility and there's mutants all over the place because they created these monsters and they're destroying all the scientists and you're going to go in and rescue them all. And I just told them that's an awful idea. I don't want to play that game already. And so I said, why don't we just remake Wolfenstein, Castle Wolfenstein.
And we all just immediately went, oh, my God, let's do that.
So that original idea, that was just another idea that we had that we didn't do. But that's like pretty much the end.
the only extent that we had back then of not making something. We kind of knew what we were going to make and we just made them.
So there wasn't a let's start doom and then reboot or something like that. We just made the games. We just came up with the designs and made them. Yeah.
Hello. My question is you managed to make games so quickly.
So very, very quickly, how did you do it and what happened afterwards?
Because I think it became a little bit slower.
Yeah, it's kind of funny. A lot of new programmers don't fully understand what we had to do back then because there's so many APIs nowadays that do everything for you. So let's pretend in a world where there are no APIs, because that's what we lived in, there were no APIs when we were making our stuff, there was BIOS, you know, the thing that when you boot your PC and you see some of that text that you should never see ever again, like that's your BIOS. And that's the only thing that we could actually talk to through this simple interrupt API. That was it. So putting pixels on the screen for us was we knew where in the computer's memory if we put a value in memory a dot would show up. And so that's how we put our graphics on the screen. We actually had to write all the code in assembly to put the dots on the screen quickly so you'd see a shape.
in backgrounds and everything. There was no API to send a display list of triangles to a GPU or anything, because it didn't even exist. So while making Quake, if you can just imagine a full 3D world, everything that those video cards were doing, we actually had to do that in our own code.
And we knew that when we were developing those APIs, that when we're developing the code to rasterize Quake, we're also working with NVIDIA on the pipeline that we wanted the cards to be using, which are the APIs that turned into the on card APIs that DirectX and OpenGL and stuff talk to. But we had to put every pixel on the screen ourselves. We had to read the keyboard ourselves. There was no nice functions to call to do stuff like that. And that is just to get the tech working, not to mention drawing characters in 2D. So 2D key frame animation. Everyone knows how long that takes. There was no tweening. There was no 3D stuff. So it took us a long ‑‑ it sounds like it did take us a long time. But we spent all of our hours working. So especially when we're in Madison, Wisconsin, why would we go outside? There's no reason to even go out. We could order pizza and live inside of one room.
So that's what we did. And so we basically slept for eight hours and all the rest of the time we worked for half a year while we were doing that, which got several games done at that point.
but really it was all about, like we didn't have anything else going on. There was no Twitter, no Facebook, no Internet, no nothing. So nothing is popping up and bugging us. So we could just sit there and code all day long listening to heavy metal and stuff. So that's what we did. There were no interruptions and it was all about time, focus and determination. Okay.
Since you left ID Software, Doom 3 came out and Doom 2016 came out only recently.
Doom 3 was criticized by some people for the fact that it focused too much on survival horror, whereas Doom 2016 has been criticized even though a lot of early Doom fans have praised it for the fact that it's gone back to basics formula.
A lot of people have also stated that it hasn't taking into account the innovations that have occurred since Doom 2. If you were to be, say, like in an alternative universe, if you could have had a hand in the making of Doom 3 and 2016, how would you have done Doom? What would I have done for Doom 3 or Doom 4?
Well, I would have made a sequel, I think. I would have made a sequel to Doom II.
Because Doom III and Doom IV were reboots of the original Doom in different ways.
So it would have been a sequel. I can't say what that sequel would have been, because I never thought about making a sequel to Doom II.
If you look at the games we made back then, we made a game and sometimes we made a sequel to the game. Like Wolfenstein, we did a sequel, kind of prequel, but then we did Spirit Destiny.
We did Doom, Doom II, Quake, and I started designing Quake II before I left. But it was always main shareware game, retail game, main shareware game, retail game, invent new IP, invent new IP, invent new IP.
we probably wouldn't have done that if I was there because we needed to create new franchises. That was more interesting than living inside of our franchise for a long period of time. If it was a game that was a service-based game that was operational every day, yes, I could live inside of that for a long time. But we weren't making those back then. And probably wouldn't have personally wanted to make a Doom 3 back then. That's why we made Quake.
And so after quake 2, if I was still there, we would have done a totally different game. So I guess the answer is I wouldn't have done it. All right. Six more minutes.
Excuse me for my a bit stupid question. But I play games today, now. And what's your favorite title or genre of video games now? If it's not a secret.
understand that. What's your favorite genre of video games now today? What's my favorite game or genre? Yes. Oh, wow.
Favorite genre. Well, I kind of like FPSs. That's kind of obvious. I also love MMOs. People don't know this, but I worked on an MMO for four years. Has anyone heard of gazillion entertainment?
So Gazillion is an MMO company that I founded with two other people in 2005. And we worked on an MMO that I designed for four years before we had to stop working on the game. But during that time, I played World of Warcraft every single day for five years, six hours minimum, 12 hours minimum on weekends. So I have thousands of hours in WoW. That's why I love MMOs. So you got five minutes.
So when you did your original games, we didn't really have the internet as we know it today, and we didn't have the feedback cycles on, for instance, books as we have today. We've also gotten more advanced in our engines, so it's easier to create books. How has that, how did that, and how has that influenced game design and the creative process? And do you think that's, do you think it's a benefit, or do you think it's a bad thing?
Well, yeah, back then, the only feedback cycles that I had back then was when I tried to get something published. So I would have to send my games through the mail, like paper mail, with a disc and an envelope. And then the editor at a magazine back when people for some reason typed games in from magazines in the computer. So I published a bunch of games like that. And the editors would get the manuscript, they'd get the disc and the big huge and the big huge listing, you know, some of the language listing or whatever, and I would, I would, they would see that, they would review it and they would send back pages of little tweaks here and there. Some of them were in the game.
Most of them were in the text of the manuscript. And that was helpful because that actually, they were usually really good suggestions. And as we as we kind of got into the age where people could just like get online and start posting feedback. We actually had beta testers we would send our disks in the mail to in the early 90s and really good feedback because they would find some bugs in our games that we couldn't ‑‑ that were not obviously crash bugs or anything, just weird, obscure little things. And so that was helpful. And then when we actually get to the point where we're on the Internet, people are just coming up with really good ideas.
And, you know, there's, you have to like obviously take everything with a grain of salt and you can't read the comments and all that.
You have to, as a game developer, you trust yourself, you trust your design.
And you just kind of have to believe that you're making something that you like.
but you do have to listen to criticism because sometimes people have a lot of really good stuff to say. So I think nowadays it's gotten better. Games are getting better.
There's a lot of good feedback out there if you listen to it.
And sometimes the players can be a really good part of the process of defining where the games are going as you can kind of see with the way Kickstarter works. There's a lot of feedback going into Kickstarter campaigns and people going forward.
I think we'll just do this one more.
What was that?
Okay.
So yeah, I'm just starting out with programming, well, like two years.
And I'm starting older than you, so this is kind of like a philosophical question more.
How did you, when you started learning to program, avoid burnouts, or did you?
did you just program and you just had fun at it?
There was no burnout.
Like I couldn't wait to wait, like in the summer times when I was going to school, or when I wasn't going to school, like get out of high school ends and then it's like at eight o'clock I could wake up and I could code until two or three in the morning.
I couldn't wait to do that.
I actually used to get mad that I had to go to the bathroom.
So there was no burnout because I was so excited that every time, you know.
programming that I like to do is I like to see results all the time. I don't like to build a giant chunk of something that hopefully will be cool at some point and I'll see it. I like to see stuff as much as possible. So my iteration time is just usually a couple lines of code before I look at it again. I run my code over and over like thousands and thousands of times I'll write a couple lines. I want to see how it works so I know what I wrote is not going to turn into this big huge problem later.
And so I'm always working on getting cool stuff up on the screen. So I'm always excited the whole time I'm making something. So burnout is maybe, you know, you need to get outside and eat and see something other than the computer screen. But anyway, I really don't burn out that much.
Okay. Yeah, that was the last question. All right. That was the last question, I believe.
So thanks, everybody, for listening to the story.
