information to cover so let's just hop right into it. My name is Kurt Laude and I lead the charge for AI and the design side at id Software while Jake Campbell, you may recall from last year's talk on AI and full-body animation in Doom, heads up the AI department on the programming side. We're here to talk to you about push forward combat, the principle that guided the design of Doom.
Now, Push Forward Combat was a guide for all aspects of Doom, including narrative, level design, player progression.
But in the interest of time, we're just gonna cover its impact on combat.
To that end, we've broken it down into three key components.
The gameplay loop, the tools available, and how to create interesting scenarios.
You may have noticed that each section has a short phrase behind it.
Throughout the project, we constantly checked ourselves and made course corrections as needed to ensure that we stayed focused on our design goals.
Associating a phrase or key word with the design was crucial in reminding us of the original intent as we iterated.
So without further ado, let's jump right in.
One of the first things done after the final reboot of Doom 4 was the creation of a mission statement to set the tone for Doom.
You are the Doom Marine, hell's worst nightmare, beating back the relentless onslaught of unimaginable evil.
To make sure this mindset was always heated during development, it was clear a mechanism was needed to check the incoming flow of ideas against.
Thus, Push Forward Combat was born.
This was a response to the previous iterations of Doom 4 that, while awesome in their own way, didn't capture the feel of the original titles.
To make something truly unique and worthy of the name, it was clear the game was going to have to step back from modern conventions and get back to the franchise's roots.
But when we say something isn't Doom enough, what does that actually mean?
We went through a process of asking, what are the best moments and mechanics of Doom as a whole?
Whether it was Doom 1, 2, 3, or the previous versions of 4.
What are the things that resonate with people that constantly come up in discussions of past titles, and why were they special?
And what struck a chord with us?
Moving comically fast, yet still in control.
Opening an unassuming door, only to reveal a horde of teeming monsters hiding behind it.
over-the-top gameplay, and a memorable arsenal that gleefully allowed one to punish Hell's minions.
Our key takeaway from the classics is that if you're not moving, you're dead.
To that end, the player restores health by engaging in combat, not abstaining from it.
Secondly, weaving between projectiles is a lost art, and it's actually fun enough to power an entire genre.
Now gore, that's actually rewarding player feedback, not horror.
While Doom was originally labeled a violent game, it was never in a sadistic or realistic sense.
Doom 1 or 2 fell in the realm of what we call popcorn horror and channeled B-movie gems like Evil Dead 2 or Army of Darkness.
This was a guiding principle for us as we took blood and guts to AAA quality.
Never approach saw or hostile type gore that makes your recoiler wince, but rather aim for something that really channels that adolescent glee or gets a snicker out of you.
Now one thing that was contentious is reload.
The argument for it boiled down to two things.
One, we're building a realistic world, and unless a gun is an energy weapon of some sort, you expect clips.
And two, the perception that reload adds to the strategy of combat, however that is really mired in the entire package of cover shooters, and yanking out a single mechanic without its supporting systems significantly curtails its value.
What finally killed reload was the introduction of the weapon wheel.
Now, because combat is so fast and frenetic, a player would immediately switch to another weapon as soon as their clip emptied, and they'd eventually cycle through their entire arsenal.
At this point, they would be in full retreat as they'd ran away from monsters trying to slowly restock their weapons.
And this is one of those moments where the game tells you explicitly what it does and does not want.
I thought this quote summed it up best.
Kratos doesn't stop to reload his chain blades.
How do we make an experience that's true to the original titles, but is appealing to a new generation of fans that never played them?
Now when you think about a shotgun, the first things that come to mind are close range, high damage, inaccurate.
For those reasons, it doesn't play well when you're extending fire from cover.
There's really only one way to play a shotgun, and that's by charging straight ahead.
Thus, the hero's weapon is basically mid-range melee.
We found a lot of common ground with brawlers, such as exaggerated AI tells and encourage players to dodge or counter them.
AI behavior that's predictable and easy to grasp on first glance.
Crowd control systems, such as fight circles, pain locks, and active attacker count.
And lastly, finishing moves to reward player ability.
Ideas were starting to flow like crazy, and it was clear we needed to filter.
This was dubbed Push Forward Combat.
Its mission was to make sure anything added to the game adhered to the core pillars of the franchise.
Speed of movement, individuality of the demons, distinctiveness of the weapons, and the sheer power of the player.
This image illustrates Push Forward Combat in action.
Double jump was a great addition to the game because it increased player mobility and allowed you to close the distance from an even farther range.
Reload, on the other hand, briefly made the player unable to attack and forced us to disengage from combat.
We trimmed a lot of features because we don't necessarily want the player to have multiple avenues to accomplish their goals.
Doom is meant to be played a certain way because you're the Doom Marine and you're here to punish Hell's minions.
So now that push-forward combat was firmly in place, we were able to produce a previs animatic to help everyone understand what the gameplay loop could be.
Now it was time to make this a reality.
This sentence summed up our goals perfectly.
Make me think, make me move.
Push forward combat gave us Combat Chess, our name for Doom's gameplay loop.
The four building blocks of this are constant movement, sizing up foes, improvisation, both with your weapon and how you navigate, and lastly, putting the enemy on their heels.
We viewed enemies as combat puzzles, and the solution was the arena, your arsenal, and how you chose to engage them.
So what's unique about combat chess?
Well, for one, we don't have a front.
It's 360-degree combat, which is very different from modern shooters.
What we did because of this was we actually saw we had more in common with MP map design than we did single player.
Now, AI, they can attack from any direction, and they have the same accuracy parameters on and off screen.
So it's important that the arena can actually protect the player.
There's very few props in our world as the feeling of skilled movement trumps any sort of environmental storytelling.
Since combat is designed for medium range, creative line of sight blockers are crucial.
Half walls were actually our secret weapon since they're impossible to miss a jump as single jump will hit it and mantle you over, while a well-timed double jump lets you clear it cleanly.
Bruce Lee on a skateboard with a shotgun is a phrase that we use to describe arena combat.
Its importance can't be understated because the right size arena, with just the right amount of space, actually makes the player feel faster.
See, while the Doom arena is exceptionally fast, your acceleration and your agility actually exceed your top speed.
So in order to feel fast in Doom, it actually comes from the speed at which you pass Geo, change direction, and weave between other monsters.
There's a lot of oscillation on player speed until we nail the arena building, since right size spaces make you feel exceptionally fast, yet still in control of the player.
To that end, players need to move with purpose.
As stated above, MP map design hinges on repeated traversal of a space with clear navigation options.
Humans are excellent at making split-second binary decisions, but when you add four or five options, it starts to get dicey.
Players start evaluating the pros and cons of each route on the fly, and that simply won't happen in an F-22 Ferrari, which was our internal name for the Doom Marine in combat.
Lastly, we tried all sorts of layouts, but circles were one that just never panned out for us.
It's a symmetrical shape, which makes options unclear, has limited lateral movement, and AI often take the same route, resulting in the player and the AI just chasing after each other.
Racing games have to solve landmarking at 200 miles an hour, and they realize the power of asymmetry.
Here's our movement map in action, which is our testing bed for player mechanics and arena design.
These right here are the half walls I'm talking about, and this is actually a full double jump gap.
Now, since attacks aren't limited to a pie slice, players must be able to dodge out in the open.
So what we do is enemy accuracy actually adjusts to player movement speed.
If you're doing what we ask and going full tilt, then the AI purposely miss.
Well, if you stop or doddle, you need to be smacked on the wrist.
Projectiles allow us to prompt more player responses than hitscan attacks.
Aside from simply sidestepping or using Geo, you can also jump, duck, weave, shoot them, or generate friendly fire with an errant toss.
The latter is particularly important to us because enemy infighting is core to Demon characterization.
Now, third-person action was treating us really well, and so a take on backstab was briefly part of the combat loop.
Light Z targeting was active by default, and as you attacked, a meter on the HUD would change color.
Once it turned orange, you could instantly swing behind foes to do some bonus damage.
While if it turned red, you were allowed to dash into them and do an insta-jib.
Now there are a number of issues with this, such as sacrifice and smooth movement, sudden view shifts, and now you're having to do HUD meter management.
But it did teach us what's too brawler and not enough shooter.
Most importantly, that taught us shooting foes behind was not particularly empowering, and it's far more satisfying to put your hands on enemies and demonstrate your brute force.
A flashy AoE attack in a box map is truly a sight to behold, but once they were transferred to a combat space with real art, props, and other AI, it would either light up the allies or more effectively than foes, or worse, the player would just zip right by them and not even notice.
Our litmus test for AI attacks during reviews was, would the player actually notice this flying around the arena in the F-22 Ferrari?
See, projectiles, they're basically incoming traffic in a racing game and capture that feeling of a blur wishing by.
Now imagine certain cars randomly blow up on the highway.
Worse, the AI can target those cars too.
Suddenly weaving between blurs is no longer so smooth since you need to check their model first.
Now Doom, it's designed to make you feel like you're up against overwhelming odds.
But in reality, the enemies are balanced such that the Doom ring can easily handle them one-on-one.
The secret to selling this fantasy is having enemies hold their positions so it's on the player to rush forward and engage them, limit the amount of active attackers so the player isn't overwhelmed.
grant the arsenal the ability to interrupt and lock down enemies if properly used.
The result is players now prioritize engagement on the battlefield, hone in on who they perceive to be the most imminent threat, and then move down the line.
We tried out player AOE via various shockwave attacks, but these don't come off well in first person.
Worse, a magic ring that shoves the AI back pales in comparison to the physicality of actually putting your hands on enemies.
The Interrupt or Parry Strike is rarely a finishing blow in a martial arts film.
Thus, we needed a simple hierarchy of enemy control states before you actually deliver the coup de grace.
The first one is Twitch, where the enemy plays a reaction but it doesn't impede combat.
Second is Falter, which stops the current anim and makes them restart combat.
And last is Stagger, which briefly takes an AI out of the fight.
This also allows a glory kill to be performed.
These three states are sufficient for most cases, but we did find a need for intermediary items for AI that have a lot of hit points or are susceptible to pain lock, like the revenant.
They still serve the same function as the associated class, but they make the AI appear more responsive to player actions.
Lastly, we give AI a second wind if you let them out of stagger.
Monsters always need to be dangerous, and this was a fun risk-reward mechanic since the glory kills have such a high payout for the player.
Here's a short clip of those states in action on the Mancubus.
Now in the original title, the shotgun was multipurpose and you could play the whole game with it.
So we wanted to dial in the player's arsenal and start thinking of them as tools.
For example, the combat shotgun in our version of Doom is short to medium range, decent spread, and has a high chance of stagger.
While the super shotgun is only close range, has massive spread, and often overkills foes.
Weapon mods allow the player to tweak a tool's behavior, such as triple burst tightening spread and lowering falloff, which now gives you a strong medium range shotgun, while pop rockets turned into grenade launchers so you can give players a long range version.
Through play testing, we found certain weapons felt natural against AI archetypes, and we actually hard-coded responses.
The imp's greatest asset is its agility, so the HAR was a guaranteed way to say, hey, stop moving.
Glory kills, they're new to Doom, and the best way to teach them was to make your default weapon, the combat shotgun, very stagger-friendly on fodder.
Thus, falloff is severe to prevent overkill on weak ones, like the imp and the zombies, and we also circumvent the standard hit point check remaining on the soldiers to make it very likely you'll trigger it.
Now, we did try having the chaingun instantly pain lock the cacodemon as a fun Easter egg for fans of the originals, but that was one of those moments where it feels like the wrong kind of retro, and the modern AI just feels broken.
It was clear from the beginning that resource replenishment needed to be part of the core loop.
We took inspiration from action RPGs where you kill, search, continue, as well as the original soldier class, which were walking health packs in Doom 1 and 2.
Secondly, we found hit point drops, they need to rubber band, so that way the player's not discouraged from engaging at low hit points.
To that end, heavy characters actually dole out more rewards to incentivize tackling the most challenging foe while you're in dire straits.
Ammo, on the other hand, cannot rubber band.
See, tools are useless if you can use the same one the entire game.
To add an additional layer of strategy, we actually had ammo shared amongst tool categories.
Now, while enemies, they can drop any ammo type, we actually introduced a slight bias towards dropping shells and against rockets, since combat is designed for close to medium range.
It's important to reward aggressive play, so glory kills increase drop amount.
Most importantly, though, they always drop something, even if you're topped off.
And lastly, we had to find a role for the chainsaw.
Now, the chainsaw is prominently featured in many fans' recollections of Doom 1 and 2, but we had the hardest time figuring out how we're actually going to integrate this into combat chest.
Now, the pistol was a late addition to the game, so the chainsaw for the longest time was actually your original infinite ammo fallback weapon.
Much like the original game, you would touch AI with it to do continuous damage.
Problem is, that felt like the wrong kind of retro, and once the pistol came on board, its role was redundant.
Next, we tried a non-fatal sync where you'd actually pain lock the AI and inflict big damage.
Should that prove successful, it blends to a cool finishing move, otherwise you disengage and the fight continues anew.
We then added a mini-game to circumvent however many hit points the monster had and allow an instant kill if the player was sufficient at controlling the blade.
Like Backstab before, focusing on a HUD prompt in combat was very distracting and often fatal.
The aha moment actually came for us thanks to the Mancubus chest glory kill.
Now see, this animation is quite long, and many times a player at low health would get killed waiting for them to finally explode and dole out the drops.
We added an anim event to force the drops early, but this had the unintended consequence of doing double drops, creating a piñata-like visual.
That ignited the spark of purpose, though, and gave us the thought that Chainsaw could create an ammo piñata on any enemy, replenishing your resources.
We then lowered drop rates, started removing ammo crates from the game, and gave it a currency to prevent abuse.
But we also wanted to make players think about who they use it on.
See, targeting fodder is the most fuel-efficient approach.
However, it's very tempting to use a chainsaw on a challenging adversary because it's a guaranteed glory kill.
By making fuel a rare currency, it was now something that was an enticing reward for level designers to place around the maps.
Lastly, since the chainsaw was now part of natural replenishment, the player needed to be able to access it immediately.
Thus, we took it out of the weapon wheel and we mapped it to a face button on the controller.
When it comes to AI design, our motto is kind of, get you a monster that can do, oh, actually, we just want you to do one thing really, really well.
We called them Swiss Army Knives at first, because AI, they're originally designed to handle anything, so that way they could fight solo and look good doing it.
The AI also had lots of cinematic flair, such as injured movesets, elaborate death animations, and coordinated attacks.
The problem is monster count is the pillar of the franchise, and we've already identified battlefield management as core to combat chess.
Thus, Doom needs to be about celebrating the player, and the AI are there to support the power of fantasy.
See, players don't have time to appreciate the view in Doom because all the systems have been designed to keep you moving.
By the time an AI has executed an intricate behavior, the players either shot them to death or moved on to the next foe.
Thus, the AI, they need to be straightforward enough that players can describe them in a single sentence.
AI also need to be thought of as ingredients, not an entree.
It's how you put them together that makes a tasty dish.
Lastly, since crowd control is crucial to combat chess, players need to be confident their tools will work.
The Doom Marine always has the advantage in solo combat, but it's how they approach the crowd that determines success or failure.
We had 16 different AI archetypes in the game, so I'm not going to go over all of them, but I did want to touch on two of them.
Both of these are legacy characters that deviate from the original implementation.
But I feel they capture the spirit of the AI and show our approach to both ranged units and melee units.
First one is the Imp.
We call them our Archer class, and while their ability suite is rather limited, they form the core of Doom simply because of what they taught the player.
Push forward combat really clicked for us when this AI was introduced because counterattacking felt natural for a slow arcing projectile.
Their small size and jumpy nature also made players chase after them.
The addition of a fastball was a game changer for us.
Just like a good pitcher needs some off-speed stuff, the imp's behavior immediately went from repetitive to robust.
They now taught the player how to dodge both the slowest and fastest projectiles in the game.
Most importantly, they stood still and cooked their power attack, which now told players, hey, you should interrupt him rather than actually waiting for them to strike, waiting for them to go and then counter them.
Hangouts further reinforced threat management.
Should imps be left alone in an advantageous area, they'd climb the space and enter a heightened state where they had a stronger bias towards fastballs, shorter attack cooldown, and now they could no longer be faltered or staggered.
Next up is a Pinky.
They brought what the player learned about dodging projectiles to the melee class, but added a new wrinkle as they were not another heavy that you simply pointed your weapon at and shot till they died.
See, when Doom was released, a number of outlets, they paid us a tremendous compliment of saying we felt like a Nintendo game, despite the violence.
We took that as being intuitive, easy to pick up, and always putting fun first, as they're not afraid to embrace being a game.
To that end, we made the entire back the weak spot, not just the tail.
This avoided looking down in first person and requiring precision shots in an F-22 Ferrari.
We started out with Couch Pinky, which was a charging loveseat with a big red button on the back.
Players got it immediately, but one of our pillars is cutting-edge graphics, and so it took us nearly nine months of iteration to make a visually acceptable, big red button that works in a PBR, high-fidelity world.
We tried several unarmored versions during the stretch, but there's no longer any game to the charge and the Pinky just lost its purpose.
While some may find the armor frustrating, it taught us that compromise to make everyone happy doesn't jive with a game that's designed to be played a certain way.
Lastly, the ideal charger scenario, corridors and long hallways, they rarely occur in our game.
Thus, Pinky is one of the few AI that can attack while traversing gaps in the nab mesh or pathing through smaller AI. I'm surrounded by 10 enemies and I size them up based on how they look and what I do, what I know they do. This is basically our approach to encounter design.
Initially, all our lockdowns were traditional wave fights.
The problem is, since the AI teleported in, it felt odd without some sort of environmental context, like having a portal being open, alarm going off.
There was also the tedium of chasing down the stragglers in each wave.
It was clear we needed new encounter types to mix it up and provide additional pacing options.
The first one we added was incidental combat, which allowed us to place enemies in traditional and transitional spaces.
These served as pace breakers and were one note.
The second, though, would come to be the backbone of our game.
Dubbed Arena Fights, it consisted of a steady stream of AI reinforcements so the encounter never lost momentum.
We targeted five minutes and three waves for big encounters, and the graph below illustrates the difference between the two.
To further separate this new encounter from wave fights, we institute a policy called Last Heavy Standing.
Now, encounters, they hinge around heavies, so instead of checking if all the AI are dead, we simply check if a heavy AI is still in play.
Now, without some drizzle of minions, pacing had severe oscillation.
This also curtailed players from disengaging to scour the arena for pickups.
10 max minions felt good, with 20 being our cap for a big encounter, which is about 5 minutes.
To incentivize aggression, players that went straight for the fiercest combatants could actually end a scenario sooner.
Next, we switched to checking the hit points remaining percentage instead of the traditional on-death callback.
See, reinforcements, they felt a lot less contrived when new IAs didn't appear as soon as the old ones died.
Plus, it limited all the pot shots you'd get when they were playing those cool spawning animations.
Since players tend to finish off a heavy once they have him on the ropes, this value could be as high as 50% health left.
We noticed that players felt that fights were over once the last Heavy was killed, so we actually Zerg-rushed all the remaining fodder to clean up the encounter ASAP.
Enemy highlight is added for time-sensitive cases, like Rune Trials in Arcade mode.
This did surface a real problem though.
See, we were over-relying on the Imp because the rest of our fodder are former humans, and thus unathletic and slow compared to Demons.
In retrospect, we really should have had another minion that was agile and had access to the entire Traversal Suite.
Now, to limit their occurrence post-fight, soldiers and zombies were never introduced later than mid-fight, and we gave them a robust suite of pre-combat behaviors and options, so that way we really wanted to encourage the LDs to use them to kick off fights.
Now, we really wanted to sell that there was a hierarchy to the demons, so we tried themed fights, which was our name for encounters composed solely of a single AI type.
We also tried implementing rules like former humans, such as a revenant, would never fight alongside true demons like the Hell Knight.
This made sense for lore, but was actually terrible for gameplay.
See, the AI were designed to perform a single role, combat's designed to juggle a mixed battlefield, and so it's basically like starting a basketball team that's composed solely of centers or point guards.
The chess pieces, we designed these to play well in nearly every space with any combo, so level designers can freely experiment to find the fun.
One of the few restrictions we had was you were never allowed to pair a charger, such as the pinky, with a chaser, like the Hell Knight, and we always had to have a cool down between melee unit spawns.
The Summoner was the most troublesome AI for us because it was never clear whether they create Encounter or they take an existing one and amp it up to 11.
They were also so evasive and potentially destructive that you couldn't focus on anything else when they were in play.
This led us to realize Encounter should only have one Captain per wave, and this Captain is then the AI that we're gonna check in last heavy standing.
Finally, clever AI placement could create the illusion that an AI has behavior built in to maximize the environment, like the imp in the hangouts, but in reality it's all smoke and mirrors.
My favorite was fat guy in a little coat, our name for a mancubus in a hallway.
The AI appears more forbiddable with a snug fit, but really the only thing that's changed is the player doesn't have the same movement options available to counter them with.
AI pressure was our biggest hurdle to fund.
This manifested itself in ranged AI having aggressive melee moves, engagement distances that were too close, and a misconception that epic fights required epically sized arenas.
It really took some effort to get everybody on board with the idea that enemies should hold their position, and that we can't have multiple melee units charging because if you could move two or three pieces at the same time in chess, it would ruin the game.
Ultimately, we identified a number of fail conditions for combat chess that we could test whether encounter was working or not.
Players retreat from enemies, players post up in a doorway, players snipe from a distance, and worse, players kite enemies around the space.
We eventually hit a point where the AI properly played their part, the arenas had the right scale and flow, and the player was fast but under control.
A new nickname for the combat loop emerged, the dance.
We called it this because you're always moving, there's a lot of lateral and circular motion, and there's a natural back and forth between you and your partners, the demons.
Now before Drake shows us how all this actually works, I want to quickly recap the key components and terms.
There's push forward combat, which is our filter for putting ideas through to judge whether they're doing enough.
This governs all aspects of the game, not just combat.
We have combat chess, which is our core loop that rewards movement and strategy.
The pillars of this are speed, enemy archetypes, unique weapons, and power.
We have chess pieces, which are AI roles designed to facilitate very specific player responses.
We have skate parks, which are the arenas that the player improvises and dances in.
And we have combat puzzles, which are couplings of chess pieces to provoke creative problem solving.
Lastly, I just want to thank every dev that contributed to DOOM, past and present, in and outside, because everything in this presentation resulted from them and I'm honored to present their work and their learnings with all of you.
Thank you for your time and please remember to fill out the speaker surveys.
Welcome to part two of our talk.
Before we dive into some implementation details, I want to give a little bit of context.
And there's a little, there's a considerable amount of overlap between our two talks, but all the points are super important, we feel.
So, it's good to hit them, you know, multiple times.
So push forward combat is all about the player.
Now what do I mean by that?
Well, we really want the player to feel like this, right?
Now this is our latest box art.
This is not just some, you know, random image.
And specifically, we want the player to feel like this person right here, right?
The Doom Marine, the Demon Slayer, he's hell's worst nightmare.
So our AI aren't just trying to kill you.
They also need to encourage the player to be the demon slayer.
And that means reinforcing the player's confidence that their actions matter more than anything else.
Now this theme is hugely important to us.
So we aren't content to just hope that it happens.
Our systems are engineered to support it.
And in this talk, I'm gonna touch on some examples.
And Kurt has mentioned most of these, so this might be a little bit of a recap.
As the Demon Slayer, you should always have the confidence to blast into the middle of the fray and take the demons out with your bare hands.
So to encourage this, we shifted our view of pain animations and hit reactions to be a tool for the player.
Now you should always feel like movement is a safer option than standing still.
So to encourage this, we forced enemies to miss moving players.
You should be the one bringing the fight to the ranged enemies and not the other way around.
So to encourage this, we try to keep such units from ever positioning too close to the player.
You shouldn't ever feel cheated or overwhelmed by an unlucky barrage of too many enemy attacks.
So to ensure this, we make sure that only a finite number of enemies ever attack at once.
And finally, you should feel like the center of attention when you want it.
So we take steps to make sure infighting doesn't ever lead to the player feeling ignored.
So let's talk about hit reactions.
The most fundamental behavior of an enemy in a shooter is to react to being shot.
Now, the AI in Rage had critically acclaimed pain animations and this is often cited as one of the reasons the AI are so lifelike.
So we wanted to continue with this tradition.
But there was one minor critique that most of us had.
The pain animations played by a charging enemy often took them even closer to the player, carrying their forward momentum.
And we kind of wanted it to feel like the player was stopping enemies in their tracks.
And so this spawned a larger discussion and a previs, which Kurt's already shown you, but I'm gonna play it again while I speak.
It was made to showcase some of the new ideas about hit reactions.
The essence of this new approach was to consider hit reactions as a way the player could manage threats on the battlefield by interrupting and slowing enemies.
Hence, we renamed our hit reaction system the Threat Management System.
No matter how overwhelming an encounter might seem from the outside, a player can dive in and straighten it out with firepower.
And you might also notice that because the enemies are slow and interrupted, the player is encouraged to just stroll up to them and finish them off with style.
Now this shift in how we viewed hit reactions emerged as one of the most essential ingredients in push-forward combat because we're encouraging this.
Now we started by just slowly working towards what we saw in that previous video.
And the first step was to organize and use our pain animations according to their impact on gameplay instead of some visual thing.
Now there's a spectrum of hit reactions in the threat management system.
At one end are the reactions that happen frequently but do not impact gameplay behavior that much, while at the other end...
are reactions that happen rarely, but they critically interrupt the AI's combat ability.
Now, once we had our spectrum of animations, everything just falls into place.
We just have to tune the damage thresholds that trigger these reactions and iterate.
Now, let me go into a little more detail about what these reactions look like.
Kurt's already touched on this, but I got some different videos, so.
Twitches are just additive animations, so they don't slow or interrupt behavior, but as you can see, they can interrupt enemy aim.
Falters are the full body animations that the AI has to play.
So the player can expect these to interrupt AI behavior.
And you can keep an AI from being a threat by continually doing it, which we call pain lock.
And this even holds true for characters that are in the middle of leaps.
Pushbacks and knockdowns are the strongest non-cycling hit reactions.
Because of their severity, it takes some time for the enemies to recover from this.
And if the player has the right weapon, they can even put every AI in a looping stun state.
Now these kind of reactions allow you to really rain damage down on the enemy.
And finally, the last hit reaction most enemies play, often near the end of their life cycle, is the stagger.
Now this is a dazed state, right?
In a cartoon...
they would have like stars or little birdies, you know, above their heads.
And they're just basically asking the player to run up and finish them off at this point.
So our second step was figuring out the finishing move system.
And it felt natural to say that if you can daze an enemy with a staggered pain reaction, you should be able to just go up and finish them off.
Now it turns out, because the AI is not moving much when staggered, the base implementation is pretty straightforward.
It's just pretty much synchronized animations between the participants.
But through lots of iteration, of course, we learned that getting the details right is critical to how the system feels for the player.
So staggered and vulnerable enemies are highlighted with special shaders because in the chaos, players weren't getting as much information as we wanted them to.
You know, blue means the guy is vulnerable, yellow means you can do a glory kill on him.
In this next video, I've turned off the highlights.
And although it may look more realistic, the player has little clue which AIs are ready to be glory killed.
And furthermore, it's not clear to the player which AI they would glory kill when they press the button if they choose to do so.
I guess you could reasonably expect the system to pick the AI that's kind of like right in front of you, but there's always edge cases, right?
And so with the highlight, even if the player doesn't understand or agree with the system's choice, at least they know what it is ahead of time, so you can adjust.
Now we don't have the same level of glory kill variation applied equally to all the AI.
The fodder tend to have the most animations because you see them the most in the game.
And it's no coincidence that the interactions with the fodder feel smoother in many cases because in order to minimize view popping, when possible the system will pick an animation that targets the limb or body area that the player is looking at.
Now there are other good reasons for limb-based glory kills. In particular they're fun and they add lots of variation.
and their challenges involved with them.
But from a polish standpoint, the big win is that it reduces the cases of jarring view popping at the start of the animations.
Now the glory kill animations are kept short and sweet because we don't want the player to feel like they're being slowed down.
So as a general rule, we tried to keep the whole sequence shorter than the time it would take to naturally finish off a given enemy.
That meant for bigger enemies you have a little more time, but it should always be faster than if you just shoot them.
And most importantly...
We learned that in order for players to really embrace this system, they needed to feel relatively safe when doing it, even in the most dangerous situations.
So, we made the player invincible up until the release point.
But even that wasn't enough, because since we expect the player to use movement as their primary defense, standing still for even a few seconds can be catastrophic.
We found that even with the invincibility, players would often incur huge amounts of damage immediately after a Glory Kill by virtue of all the incoming projectiles and attacks that are already in progress on their now stationary position.
So, we added a combat pause. AI are prohibited from starting any new attacks while the player is in a Glory Kill.
Let's talk about accuracy.
We spent a lot of time making the AI capable fighters.
For example, being able to nail moving players with accurate shots.
But then we decided that giving the AI accurate prediction against moving players ran counter to the goals of push for combat, as you've already heard.
Because we want the player to be empowered by movement and feel threatened by standing still.
Our solution is to purposefully miss when the player is moving, right?
Simple.
And the AI will miss more often and with greater distance as the player moves faster.
But naively reducing accuracy with a random offset leads to a purely random distribution.
And for a number of reasons, that didn't give us a level of control that we wanted.
What we wanted was a way to easily specify exactly what the missed distribution should look like.
And we ended up using a curve to define that distribution.
So it's easy to plot a distribution as a curve.
You can just imagine that the height is the density.
But how do you go from a curve back to a distribution?
Well, if you imagine random samples being taken from anywhere under this curve, the X value of those samples, if you project it down, ends up being the very distribution that would have been plotted as the curve.
Well, how do we use this concept?
We discretize the curve into slices where the height of each slice is the Y value of the curve halfway between the X values of the slice.
like this.
Then, we normalize the areas of the slices.
And conceptually, you can think of this as laying the slices on their sides, like that.
And by normalize, I mean we take the value between zero and 1.0.
Then we pick a random number.
In this case, 0.22. Now look, 0.22 lies on the number line in the normalized area of slice D.
So then we look at the actual extents of slice D on the original curve and we see that it's 0.4 to 0.5.
That's probably too small for you to see, but just take my word for it.
Then we call a second RAND with those two values to give a little bit of localized variation.
And if we did this like a million times, the samples would approximate the intended distribution that's under the curve.
Now our curves are asymmetric because we mirror the distribution on both sides of the player.
An example of how this looks.
I force this imp to miss me even at a crawl.
So there's a hit.
You see the screen effects.
Every other throw is a miss.
This method allows us to easily alter the desired distribution for different difficulty levels.
For example, this is the curve that we use on hard.
Looks a little bit similar, but note that on this hard curve, there's a non-zero value in the first slice, which means that the AI are actually gonna attempt to hit the player more than on the easy.
Let's talk about positioning.
We want the AI to stand in the open as much as possible, because that's where the player can shoot them.
And obviously, ranged AI need to stand where their attacks will be able to hit the player.
But in its simplest form, the desire for visibility to the player was causing problems.
What do I mean?
Well, here this imp can't see the player, right?
A common way to get such ranged AI into visibility is to simply have them move towards the player.
Because we know that if the imp moves along the path to the player, at some point, he'll gain visibility when he comes around the last corner.
But what if the player decides to move forward at the same time?
The imp and you are gonna meet face to face.
Now, it's not as if this is a horrible situation because the imp is not the strongest character.
But, we want the player to be the one bringing the fight to the enemies, especially the smaller characters like imps and soldiers.
So, range units need to maintain some distance if possible.
Now, in cover shooters this is not a problem, because cover point systems are built around the idea of positions that can fire on the player.
So, all the AI code has to do is pick a valid cover point and go there.
Well, it turns out there's some cover shooter blood in the id family, Rage.
Now, cover positions in Rage also measured occlusion from the player, right?
That means they're good cover.
So if you place one out in the open, cover-seeking AI would never actually use it for the obvious reason that it didn't offer actual cover.
Now we tried the extremely simple test of flipping the desired occlusion values from positive to negative numbers, making the AI desire positions where they were completely exposed instead of completely protected.
And it worked!
And so henceforth, ranged fire positions in Doom have been known by the silly term exposed cover.
I'm not joking, that's what we call them.
Now, there's one big difference between cover and the opposite of cover and anti-cover.
You know, cover typically converges on single points or small areas that the AI stick to, and it has a well-defined direction.
Anti-cover can be a large portion of any map space, and it typically has no direction.
So to make this larger area work with the same kind of discrete positioning choices a cover system uses, we treat exposed cover positions as a tether point.
And while tethered, the AI are then free to make local direction and positioning choices as they see fit.
Now how do the AI know to consider a tether point good or not?
Well whereas many cover systems use pre-computed visibility, Doom uses a runtime algorithm I call Bunch of Traces.
The basics of the algorithm are this.
generate a grid of sample points within each tether area, and then just do traces from the sample points to the target.
And you keep a running average of what fraction of those points can see the player.
In this case, that tether point only has 30% visibility to the target.
Now, why use traces instead of pre-computed visibility?
Well, because a naive approach like this is super simple, it's super usable, and it's super debuggable.
It just automatically works with anything in the game that has collision, even dynamic objects and other characters.
And it operates on the same level of collision detail that weapons traces, sensory traces, and projectile traces, and everything else operate on.
and you don't need that many traces, okay?
This clip shows the overall visibility of each tether point coming from all the sample points it owns as they're updated.
So did the previous clip.
Now at 60 frames per second, only 24 traces per frame is 1400 traces per second.
And if you cleverly manage which positions have their visibility updated, the entire combat space will be refreshed quickly.
And just to prove it, I made this video with the limit decreased to 12 traces per frame.
And then this one at only six traces per frame.
And you see at even only six traces per frame, the tether points are updating at just over once a second in a pretty big combat space.
And that's not great, but it still gives the AI usable info.
Now this is one trace per frame, and I admit that is much too slow, but at least it proves that the system's working, right?
Let's talk about attack cooldowns.
We design attacks with the goal that the player will be able to focus on an enemy and understand their intent by reading visual effects and animation cues.
This goal starts to break down when too many enemies independently decide to attack.
At best, it looks silly.
At worst, the player is overwhelmed by volleys of attacks that have no rhythm or predictability.
Now, an obvious solution is to simply limit how many AI can attack simultaneously.
Our specific implementation is a token system.
The concept is extremely simple.
If an AI wants to do certain attacks, they need a token for it.
Now here are the same setups with tokens turned on.
If there are only X tokens of a certain type, then those behaviors can only be done by X AI at a time in the game.
Every other AI must find something else to do, such as executing a lesser attack of which there are more tokens, repositioning, or just playing a taunt so they don't look like they're idle.
So if an AI wants to execute an attack, they first request a token.
If one is not available, they have to do something else.
If one is available, they then acquire it.
And then they're gonna hold on to, or use that token for the duration of the attack.
And once they release it back to the token pool, they can have a cool down on that token before it can be acquired again by anybody, even themselves.
This is an easy way to enforce global attack cool downs.
The different difficulty levels have different token counts.
This is a crowd of imps on easy difficulty.
And the goal is to allow for more simultaneous attacks at higher difficulty levels.
So here's the same group of imps on ultra hard.
As you see on ultra hard, there are more tokens available.
Instead of one and one, you've got two and three.
Thus, there are more AI attacking.
A token usage is also not completely set in stone.
In this video, AI marked with a cyan sphere are allowed to steal a token.
Why?
Well, suppose in this image, there are only two attack tokens and the imps in green already have them.
The AI immediately in front of the player, marked in blue, are gonna look silly if they can't attack.
So we allow AI to steal a token in such cases and attack anyway.
Now let's jump to the other side of the fence and talk about the problem of AI not actively engaging the player when they should.
We wanted to support lots of infighting between the demons.
It's a loved and well-remembered feature from the original Doom games, and it adds a ton of personality to the enemies.
But remember that push forward combat is a celebration of the player.
So when a player is playing a part of the aggressor, the AI need to be smart enough to focus on their true enemy, the demon slayer.
And to manage this easily, we needed more than a traditional faction system.
Take a drink of water real quick, I apologize.
So what is a traditional faction system?
The typical implementation is to have a goodwill value that's basically like how they feel about someone, right?
And it's as increased or decreased in response to agent actions in the world.
For example, each time an AI is hit with like accidental friendly fire, suppose, the goodwill value might be reduced.
After two such events, the goodwill value might cross a threshold into annoyed, right?
And then maybe with another hit, it reduces to angry.
Or, if the AI is hit intentionally, the goodwill value is reduced by a larger amount and it immediately dips below the angry threshold.
Now this works out well until we wanna know why the AI is angry.
Was it from three accidental hits, or was it from a single intentional hit, or was it some combination thereof, or was it from an entirely different series of events?
You know, there's no way to know without adding more code to track all that extra stuff.
And now we actually went through this process starting with one or a few goodwill values and adding more and more custom code and bolt-on functionality as we needed more control.
Eventually, all that custom code became the most complex part of the faction system.
And so we decided to just rethink the underlying approach.
And we turned it into something built to be extensible from the start, a rule-based system that operates on records of everything of interest that has happened to the AI in the past.
Now here, I've highlighted records representing accidental and intentional damage to one AI by another.
And one example of a rule might be, if members of the Imp faction have damaged anyone on my faction, even accidentally, three or more times in the last eight seconds, then I should feel angry towards the Imp faction.
And in this case, the rule evaluates to true.
Go back eight seconds in the past, there's your three accidental damages.
And so, the AI will feel angry against imps.
And if multiple rules evaluate to true, we just take the one that produces the strongest response.
Now to make it easy to manipulate the data, we specify everything with a single graph that defines both the inheritance of rules among a family of factions, as well as the rules themselves between the factions.
What do I mean?
At runtime, to evaluate the relationships between two factions, for example, how a Hellknight should feel about a Plasma Soldier, we do this.
Alright?
First we follow each faction's inheritance chain up to where they diverge from the first shared parent.
I will show you.
Where is the Hellknight?
There's the Hellknight faction.
The Hellknight faction is a child of the Heavy faction, and the Heavy faction is a child of the Demon faction.
Plasma guy is over here.
He's a child of the Hellified faction, who is a child of the UAC faction.
And then, once we have these two chains, we gather all the rules specified in the edges between any of the factions in either of those chains, like this.
We can catenate all those rules into a single list, and then we just evaluate that entire set against the entire set of event records that we have.
And the results are pretty good.
Infighting is everywhere.
You can get the AI fighting each other in almost every single encounter in the game by just encouraging friendly fire incidents while running from pursuing enemies.
And they will very quickly return to going after you instead if you do something that warrants their attention, including just getting too close to them.
And what you do to them will influence how long they go after you before possibly returning to fighting their other fri- well, they're not their friends anymore, but the other demons.
So we're basically ensuring that infighting really only influences a battle if the player is actively trying to let it happen.
In conclusion, we put a lot of thought and effort into bringing the player closer to this image.
And this is the second time I've concluded a talk with a video of me beating up on the AI.
In this case, because it showcases just how dominating the Doom Marine is intended to be.
Now, as an AI developer, it's tempting to get caught up in the idea that my creation should do whatever they can to kill the player.
But for most games, and Doom especially, that just doesn't lead to a great player experience.
Delivering a great player experience is really the true point of our job.
And that goes for everybody in the industry, I think.
I want to thank everyone at ID and ZeniMax.
Like Kurt said, without their talents and support, none of this would be possible.
I want to thank everybody at GDC for putting on a great conference this year.
And finally, I want to thank everybody in the room for coming out to listen.
We really appreciate it.
If anybody has questions, we'll stick around afterwards.
And we'll even be in the question rooms after that.
Please do not forget to fill out your session feedback email from GDC.
