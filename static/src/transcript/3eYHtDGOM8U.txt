So thanks very much for coming.
Really appreciate it.
My name's Joe.
I'm co-founder of Inkle.
We're an independent studio based here, not based here, based in Cambridge in the UK.
We specialize in narrative.
So we like to tell good stories.
That's basically it.
So up until now, we've primarily worked in the area of interactive fiction.
Inkle's over five years old now, and right from the start, our focus has been to take interactive fiction, which we believe to be this really rich medium, and make it a bit more just accessible for both gamers and non-gamers alike, because interactive fiction is...
a beautiful medium and can do some amazing things, but not everyone has the inclination to use a Pazer-based game.
It's quite hard to get into.
So this is a clip from 80 Days, which is perhaps our most well-known game to date along with the Sorcery series.
And as you can see, it has this prose-based flow at its heart.
You could call it the core game loop.
It's, in Halo terminology, you could call it the kind of the 30 seconds of fun.
And there is the wider game, of course.
There's a whole kind of board game-like layer where you can explore any way you want to go.
There's almost 200 cities in the game, and you can go around the world any way you like.
So there is the strategic layer.
But at its core, at its heart, is the narrative.
And so clearly narrative is really important to us.
In fact, it's so important that we built our own scripting language for it, our own narrative scripting language, which we call Ink.
And all of our games so far, including 80 Days, were written in Ink.
And in fact, Ink is a language that we open sourced last year at GDC.
And it's gone on to be used in a few projects that we're really excited to see, actually.
So this is what seeing a city in 80 days looks like in ink.
You don't need to obviously read all the text, but if you just pay attention to the rough ratio between just the prose, the core text, and all the little colored bits, so the blue and the green, they're the syntax and the logic which drive it.
And if you look at the ratio between those two things, it really is focusing on the core text flow.
It's allowing writers to just focus on the writing with just this lightweight markup to add the layer of interactivity.
So we sort of like to think of it as markdown for interactive text.
But now we're making a game that looks more like this, which I'm really super excited to show you because this is actually the first time that we've talked about it publicly.
This is Heaven's Vault.
It's a science fiction adventure featuring an archaeologist called Aaliyah Elazra, or El to her friends. It's set in a beautiful nebula scattered with the ancient ruins of a lost civilization. The player can fly anywhere between different moons, explore ruined cities, explore dig sites, uncover lost artifacts, with the story constantly unfolding around them as they go.
And they can go between not just these kind of desolate locations, but also bustling markets and places with loads of different interesting characters to talk to.
And so as you can see, it's a lot more graphical.
This is actually a real screenshot from the game with just the text overlaid.
So we have 3D worlds, we have 2D characters, and the structure superficially, it kind of resembles a point and click in that you can explore a space, you can interact with props and objects, and you can talk to characters.
And the text is presented as kind of lightweight dialogue bubbles, and occasionally we also have narrated audio sections.
But fundamentally, we're authoring this in exactly the same way as at 80 Days.
So we still have this, basically a text adventure going on underneath the game that's kind of behind the scenes driving what happens in the game.
So back to the talk's title.
What do I mean by an interactive film script?
So whereas 80 Days had that prose-based flow that it was like writing a novel with a bit of interactive markup.
Similarly, Heaven's Vault is more like an interactive film script.
So it has a film script, but with interactive markup, which changes the direction of the way that the script flows.
and as it plays behind the scene it sort of generates as you make choices through the game.
It generates more of a linear film script which drives the action in the game.
And that sort of becomes like our blueprint or the blueprint for what happens in the game.
So if we look at an example of a real film script, so this is page 24 from the screenplay of 2001 A Space Odyssey As well as the lines of dialogue, which are in the format you can see at the top, there are also instructions about how the scene is structured, and even editing decisions like that dissolve 2, which says exactly how the scene should be cut together in the final edit.
And in the same way, the Heaven's Vault script has a mixture of dialogue, it has a bit of narration, and it also has those instructions, and those can be both interactive, so the choices that you make through the scene, but also just things like that, just the information about some of the transitions.
Now I should say we're well aware of the dangers of getting too obsessed with the film industry and I know that a lot of game developers can be quite susceptible to it.
So I would just like to say it is just a cute metaphor but it's quite a useful one nonetheless.
So first of all, what I want to do is demonstrate exactly what a script editing workflow actually looks like using our ink editing tool, which is called Inky, which is also the name of my neighbor's cat.
It's just a bit of fun.
Ink is a custom Ink script writing tool that we built in the past year that's also open source, along with the Ink language.
But with the main benefit that you can play as you write.
So I'll show you in a moment.
There are two panes, basically, one with the written text and one with the text flow that you're playing through and making choices.
And I should also.
warn you that you might have heard of programmer art.
Well, this is going to be programmer writing.
So I do apologize for that.
So here we go.
This is just a quick example using the character names from Heaven's Vault. So there's L and 6, her robot sidekick.
And so far, this example has just got dialogue.
It's got dialogue.
It's got a few choices.
We can see an example of making a choice, and you can see what happens as it drills into those kind of bullet points which form the choices.
So that's the kind of the linear film script on the right-hand side that's generated and that drives the machinery of what happens in the game.
And we have a custom and quite a simple, actually, interpreter for how to interpret that text behind the scenes and produce the visual game, which I'll show you right now.
So this is from the same script.
Here, you can see we've got the 3D environments.
We've got the 2D characters and the simple dialogue bubbles.
You can see what it looks like when you make choices.
And by the way, this isn't even a real environment from the game.
This is from a Unity sample environment that I've hacked up just to put the characters in.
And as you can see, it's pretty simple stuff so far.
So this is just a literal piece of text that gets passed straight through from the ink directly into the game.
And it's a really simple syntax, as you can see.
We can just look for the position of the colon and separate it into which character is speaking and what do they say.
Another cute thing that we do, and something that we've added to Ink in the last year, is the ability to add hashtags to individual lines.
And what we're using this for here is the ability to just put a little smiley on the end, or an emoticon, and that will change the particular piece of art that we show.
So we can put a little smiley on, on the end of the line, and the character will smile.
So we've got a whole range of emoticons that we can use for that.
Something else we can do that's really, a really very natural way to write, but again, it's just part of the game-specific syntax.
So we can put these parenthesized little additional pieces of metadata to just say, right, this character is speaking to that character.
And in the case of our protagonist, when she speaks, most of the time she actually doesn't talk directly to the sidekick robot because actually she's a bit aloof and she's actually more interested in the environment.
So she kind of looks out into the world, she talks to Six and he's there, he looks at her by default.
But if we really want her to go and turn and look at him, then we can do that as well.
And then we could also change the pose.
So when you put that in parentheses, it will just choose a particular piece of art that our artist has drawn for that particular moment.
And it's just really easy and natural to write this stuff.
And here's a genuine piece of ink syntax, finally.
When you put an asterisk on the front, just adding that one thing will turn that line of dialogue into a choice.
So we'll have a number of choices that look like that.
And when you pick that line, that's what the character will say.
But what happens if you have a choice with a character name that isn't your character, that isn't the protagonist?
well, they also get the opportunity to say a line.
And so whereas previously we were always using choices in the ink to allow the player to make choices in the game, we can also provide choices to allow other characters to contribute.
And so what we use this for is a kind of, you've probably seen this in other games before, when you have a timeout, when if you don't say anything, then another character might interject with something.
So it's really simple to add these extra little details.
So all this dialogue is fine, but what we'd really like our protagonist to be able to do is explore a scene now.
And that's not an obvious thing that you can do in a text adventure, or at least not in a way that would synchronize with a 3D explorable space.
So this can be modeled in ink as well, and what we do is we take this idea of choices that aren't directly associated with visible concrete choices that the player makes, and we use that.
So if you have a location that you want to walk to on the ground, you can choose to walk in exactly the same way that you would in any other game, whether it's through direct control on the left stick or by clicking on a marker within the world.
And what the game will do behind the scenes is it will say, well, you made the choice to move.
Therefore, we will pick that move choice.
And so the dash in the middle is a piece of ink syntax, which is a way to control the flow.
So once you've made a choice, then after you've made the choice, then it will.
it'll choose that as the point to go to, to join the flow together.
So what's happening here is you could actually put a piece of content in between moving and arriving.
So the arrive choice is another choice, but it's even less directly related to the player making a specific decision, and it's just something that the game engine will tell the ink engine to do when you actually arrive at your target destination.
But in between, you might choose to say something or just speak some lines of dialogue, or do anything else which is available within the story engine.
So here's a really simple example again.
You'll notice, by the way, that all of these examples are extremely linear.
Obviously, this is purely for the sake of demonstrating.
So in the real example from the game, you'd see a number of choices.
And actually, they stack up.
And we use quite complex ink constructs to inject choices from various places, from various conversation topics that you might be able to have throughout the game.
But in this example, we're just going to explicitly give these particular choices.
So in this example, we've got a line of dialogue.
The player chooses to move somewhere.
We don't actually care very much where they decide to move.
And we do have ways to query where the player is.
But most of the time, we actually don't.
We just want to know when they decide to move so that we can decide to talk about something as they go.
But actually, the destination isn't always the most important thing.
So what does this look like in game?
We have a line of dialogue.
Now, in this example, we decide to move somewhere by clicking on a spot on the ground.
They decide to talk about something on the way over there.
And once they've arrived, they continue their conversation actually completely naturally because the game has automatically chosen an arrive choice and seamlessly kind of gathered the flow back together and taken it to the point after that arrive choice.
So what that allows us to do is actually insert arrived choices at various points in the flow in order to catch different points throughout the conversation where they might naturally finish up their conversation.
So next, we need to be able to interact with our environment, not just walk around.
Interacting with objects or props is really just a matter of adding more choices and using more game-specific syntax on top of the Ink Engine.
So again, we have choices, and we have a really simple syntax of just having the object name or the prop name and the action that you want to do with it.
So on the left, we have two examples.
Either you can touch the wall or look at the view.
And the way we represent that in the game is the object name is looked up as a game object within the Unity scene.
And then the verb just becomes the label that's applied within the 3D space.
And then once you choose that, we just carry on with the ink flow.
We have lines of dialogue or whatever we want to have.
A more complex example that actually uses exactly the same system is that we can also do more complex navigation options like this.
So most of the time when you're exploring the space, like I said, you don't really care about exactly where the player is.
But when you really do care, or if you want to insert some extra dialogue into the flow, you can mark up...
a prop, so it looks like you're just interacting with an object in the distance, but actually what you're doing is, the game presents that to the player as a navigation choice, just like any other.
Except now, but all you're doing is making a promise to the player with that style of choice that they will Go somewhere at some point and so as an author you then have the opportunity To insert a line of dialogue and then fulfill the promise by providing another kind of implicit choice Which the game will automatically take in order to go to the the place where the player expected to go So what does this look like in Inki?
Again, we've got a couple of simple examples.
You can see we can just make some simple choices on the right-hand side.
And all of this stuff can be written completely independently of the main game.
So a writer can get started with writing an entire scene before it even touches the game engine.
And let's see what that looks like in game.
So we've got this hotspot on the object with the verb that we pick.
We have the line of dialogue.
We then interact with the object again.
And finally, we're going to have a navigation option that looks just like the normal navigation option, which we would have had from a move choice, except this time she says a line of dialogue before she sets off.
So we can be really flexible in the way that we decide to set this up.
So within Heaven's Vault, we don't have full voiceover.
Most of the game is represented using those simple dialogue bubbles.
And the majority of the dialogue is presented that way, but we do also provide the opportunity to put sections of narration in with audio as well.
So we have two different constructs.
We have narration that's presented as text.
And then we also have narration that can be presented as audio.
And the text is hidden when we do that.
Again, we have another really simple syntax.
We do mark these up using a triple chevron.
But you could even, if this is purely a matter of taste, you could also just have normal narration without the triple chevron.
And that would just be like normal prose that you might have had in 80 days.
It's just because it's actually quite rare in Heaven's Vault, we prefer it to visually stand out on the page.
So this is just our personal choice to add this extra syntax to make it more visible.
And then if we decide we want to have voiceover for that section, then we can record a piece of audio and stick it on the end as a tag.
And so that tag is just metadata, a bit like the emoticons I showed you earlier.
And all it does is check to see whether the text within the tag has an audio file name, and then it will play that audio.
Now we can also start to have more abstract scene instructions like you saw in the 2001 example.
So again with the triple chevron syntax we can also have bespoke camera shots where we position the camera at a particular angle within Unity.
We position characters, we give them bespoke art.
Then we give that game object a name that contains all of this information within the scene.
And then we can trigger it.
And because it's all just referenced by name, it's really flexible and easy to set this stuff up on both ends independently.
So the writer, in this case, my co-founder, John Ingold, is able to write a scene where he thinks, oh, it might be nice to have a custom shot here.
He can name it.
And this is before we've even started building the scene.
And that will just get passed through as straight text, so that we know that that's something that we need to author.
We can also, outside of shots, which are one specific case, we can also have the most generic case, where we say something's happened.
And that could trigger animations, it could trigger more camera work, or it could trigger sound effects, particle effects, whatever we want.
But again, it's not really something that the writer wants to care about while they're writing.
They just know that something's happening, and so they write this scene instruction in.
So let's jump into Inki for the last time and see kind of an example of all of these concepts working together.
So again, we have this Depart option.
So that can be used as an instruction to the game to simply go somewhere.
And it is a choice, but it's a choice that the game will always take automatically if they see it.
Then we have that example of narration with the triple chevron.
And finally, we have another choice and a few scene events that will kind of have a particular setup.
And finally, we have another narration example.
But in this example, we're going to have a bit of audio.
And let's see that in action.
So we get the line of dialogue.
This is the depart command being called and we have another line of dialogue from the robot and we have a piece of narration which is just represented as simple text on screen and this is the custom camera shot.
We also have an event that fired switching on the light.
We have a bit more dialogue and then we have another depart choice.
We step between the rubble of fallen buildings.
Empty doorways opened onto the broken rooms.
and that's how we do audio.
And that's basically how we're building the entirety of Heaven's Vault with ink.
It's all really built out of quite simple objects that kind of combine together in more complex ways.
And we are using more complex ink constructs in order to weave all of this stuff together.
But that pretty much is the gist of how we can build a fully 3D game using what's basically a text adventure underneath. So John's really drafting a lot of scenes outside of the main game and slowly redrafting them until he can pass them on to a level designer, an artist. And then once you've got the script and you've got a grey box environment, you can combine those together in quite simple ways, actually. Once you've got a grey box environment, it takes just about half an hour just to make sure that the props and the...
the waypoints that connect everything together all sync up.
And that allows us to iterate on scenes really quickly.
It allows us to have independence between the writing process and the art and design process.
And it really is surprisingly straightforward.
So if you want to hear a bit more about the way that John is constructing the open world and the way that he, especially the way he did it for Sorcery, he's going to be talking about that tomorrow at 10am in room 2005, I think.
But otherwise, thanks for listening, and I think we've got a few minutes for questions.
Hello.
Hello.
So, after your talk last year, I played around with ink for a bit on my own and actually wrote my own parser off the language spec.
And one of the things that I was trying to figure out how to do and it applies here especially is ink is great when it is in control of the narrative, where you are, where you are in the...
you know, along kind of a linear or a branching narrative.
But as soon as you get into a situation where you're provided with an environment where you could go to one of several places, you could go to like eight different, let's say NPCs and stripe up a conversation with them depending on where you walk to in the world.
I was wondering what your thoughts are on if you've tried to take ink and have multiple entry points into different conversations while still maintaining your running game state, which you're able to do normally in ink because you're also controlling the position in the narrative.
Yeah.
So It's a difficult question to answer in the abstract in some ways because every game has different requirements in a way and the way that we're building that in Heaven's Vault, we are...
binding the ink with the game quite directly.
But you could also imagine, so for example, in 80 Days, we had the way that you go to cities in 80 Days is we didn't actually do that.
entirely within the Ink Engine.
So we would have a JSON file that specified all of the cities and the connections between all the other cities.
We could have modeled that using choices, for example.
So in your example, you could model going to talk to these different characters as a choice block.
It would be quite a coded choice block that might.
depend on certain conditions and things.
It's hard to understand your specific example, I think.
But you could model it as a choice block.
So when you decide to go after this character, it actually takes a choice within the game, even if the player didn't specifically choose that.
But yeah, there are quite a lot of different approaches.
So maybe we could talk afterwards and about your example.
Cool, thank you.
Hi, I'm just quite curious about on the other side, like the Unity side of all of this.
Because for instance, you had a depart, and then another depart, and then an event.
So for the writer, they can just write that.
But how is on the other side?
Is each, for instance, the first and the second depart, they worked quite differently.
And of course, the event had the animation, and the light switching on, and all of that work.
Are all of those hooks hard-coded specifically to each?
thing or do you have like a dynamic system or?
So the syntax of the depart choice was simply that you have the location name, which is a waypoint within Unity, and then a dash, and then just the depart word.
That's all it is, really.
So when it sees that choice, there's a kind of a an event loop in the game that looks at what choice is available and if there's a choice block and there is a depart within it, it will just do it immediately and it will instruct the character to walk to that location. If the depart choice was missing then the rest of the choices might become more relevant.
Does that answer your question?
And in the case of the event, that is more something that's kind of more.
Right.
So that, again, it's just a keyword, really.
It's just a tag, basically, that has got a specific name.
It's just a string.
And we fire off an event using our own hand-rolled event system in Unity.
And we have different types of objects that can respond to that named event and do different things.
OK, cool.
Thank you.
Cool.
Okay, thank you very much.
