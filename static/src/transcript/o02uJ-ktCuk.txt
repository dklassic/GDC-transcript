Hi everyone, let's get started.
There might be a few more people coming in, but we'll let them feel like they're late and they're missing out, that's more fun.
Before we get going, can you put your mobile phones on silent and at the end, can you please remember to fill in your session evaluation form because it's always nice to hear what people think and that would make me feel very happy.
So thank you very much for coming.
Right, my name is John Ingold and I'm the narrative director of Inkle. We're a small independent studio from the UK and we made these things So we made 80 Days and Sorcery, which are games, and we also made Ink, which is not a game.
It's a scripting language for interactive fiction.
But it kind of demonstrates our philosophy in the way that it's built and the way that it's designed.
It's sort of human-focused, it's quite wibbly-wobbly, it likes to branch a lot, it doesn't have an intrinsic structure, it's much more ad hoc.
And those are all things that we like to do.
They're all quite strange things to want to do within a programming context, and they come from the same root philosophy.
All of these things have the same root philosophy.
Today, I'm going to talk about our new title.
I'm going to talk about our new system that we've been doing.
We've overhauled things quite a lot to produce some, I think, really quite extraordinary results.
And I hope that I will convince you of that.
But it's a good idea to just back up a bit and see how we get there, so you can see the process that we've been through.
Apologies to anyone who's come to any of my previous GDC talks, because a little bit of this will be recapped, but I'll try to get through it smoothly.
I said who we are and I said who I am, but I want to say what we do in a philosophical sentence.
So the best I could come up with was this.
We make playable stories with high player freedom.
This is a really carefully chosen rubric.
I worried about this a lot.
I didn't ask anyone else on my team if they thought it was appropriate because I didn't want them to tell me that it wasn't.
and it's obviously composed of two main bits.
You'll notice first up that it doesn't have the word game in it anywhere, because game's a useless word that doesn't mean anything.
And it does say playable stories, and I feel like that's quite honest.
When we design one of our games, products, when we design one of our products, we start with the story, we start with the character, what we want the player to do and feel, and then we try to design the minimum number.
of mechanics possible to generate that sensation.
So, sorcery is a fantasy adventure.
You have a sword, you have a spell book, you go around clobbering monsters, there are some potions.
We try to keep it as light touch as possible.
There isn't any crafting because no one actually does that when they're on a fantasy adventure.
It would be ridiculous until Breath of Wild came along and did that rather well, actually.
Similarly, In 80 Days is a playable story.
It's about traveling.
So you travel, you pack your suitcases, you talk to people, that's basically it.
The second thing is high player freedom.
And again, that's a slightly surprising phrase to use.
I haven't said high player agency, and that's quite deliberate.
To me, agency suggests that players can strategize to achieve a particular outcome.
And in our games, that's very rarely true.
We work within highly contextual environments where what happens one moment might not be available in the next moment.
So strategy can be quite difficult.
What I'm saying is our games are inherently very unfair.
and I'm good with that.
But what we do try to offer is we try to offer a sense of freedom, that in any given moment in this story, you can behave in the sort of way you might want to behave, given the limitations of the interface or whatever.
So you shouldn't feel that you're stuck on a track, you shouldn't feel that you're pressing the only button that the author gave you to press, you shouldn't feel that you're just tapping through options.
That's high player freedom, but I wouldn't go so far as to say that it was agency.
Nonetheless, even though we don't necessarily allow the player to strategize and achieve a particular outcome, we still have a problem to solve here because we have an oxymoron between those two things.
A story is inherently unfree and freedom is inherently pretty dull for storytelling, actually. If people can do anything, they tend to just muck about. So how do we deal with that?
Well, okay, we have two simplifications. The first one, we tend to use an episodic structure.
So almost all of our games are structured like 1980s Star Trek series is.
You go to somewhere, you do something, any amount of complicated stuff can happen, but by the end of the episode you can be pretty confident that Picard's wife is going to turn out to be a hologram of a thousand-year-old dead woman, or an evil robot, or some other kind of mental illness that he's got from a clonk on the head.
By the end of the episode, very little is carried into the next episode, because that's the most convenient way to write it.
And that's what we do in sorcery, and that's what we do in 80 Days.
We used to say, what happens in Vegas stays in Vegas, and that's basically true of the construction of 80 Days.
There's nothing wrong with that, that's fine.
Assassin's Creed does exactly the same thing.
It will say you can take out this fortress via stealth or via brute force, it's always brute force because their stealth is so terribly balanced that it doesn't work at all.
But by the end of that encounter, when you go to the next one, it doesn't matter what you did in the last one.
Episodic structure.
The other thing that we do is the thing I suppose in a way we're most famous for, perhaps, is we use a content-heavy approach to branching.
We use a scale-first approach.
So when we do branch, because of course we do branch, we do give you some agency and some influence over the outcome of your adventures, we just write more.
We just make more.
And we can do that because we're delivering everything through text, historically, and it's very easy, well, it's relatively easy to produce lots of text.
So all of that is where we are and what we've done, which brings me to our next project, our new project, which is this thing.
It's called Heaven's Vault.
It's a archeological narrative adventure.
You play as this lady, Aliyah al-Azra, who sails an open-world nebula and discovers lost ruin sites and ancient inscriptions in an entire ancient language, which we've invented for the game, which is absolutely not what this talk is about.
And from a narrative design point of view, Heaven's Vault had two core elements that we started with.
This isn't even retrofitted, this is actually true.
Joe and I sat down and said, what do we want to achieve with this project since we've done what we wanted to achieve with linear prose fiction?
And the two things were, firstly, To take the episodic structure and turn it into a single continuous plot.
Fine, okay?
We wanted everything that the player does to further some core narrative.
That doesn't mean we're not using episodes.
I'll talk about our exact structure later in the talk.
But the idea is instead every episode should further the core narrative of the game in some meaningful, consistent and solid way.
We're trying to not have too much in the way of standalone encounters, but rather encounters that make sense within the narrative.
If you like, it's Star Trek Discovery rather than Star Trek The Next Generation, only without the torture porn Klingon sex.
The second thing that we do is we wanted to move away from purely text-based delivery to a 3D game world to explore.
Quite why we wanted to do that, I look back on and I'm not really sure.
It's a terrible financial decision.
It's been a...
extended the length of the project hugely, hopefully people will think it is pretty, which is quite a good reason to do something.
It does mean, though, we have necessarily a limited number of locations, we have a limited size of cast, so we can't use a scale-first approach to simply make that problem of branching content go away.
We have to reuse stuff, we have to be a bit different in our redundancy.
So one thing I like about this game is I like the title.
I like the title a lot.
It took us a long time to come up with the title.
And one of the reasons I like it is we had our two crutches.
We have thrown them both away simultaneously in a leap of faith, a heaven's vault, if you will, to create this new game.
And in order to do that, we've had to expand our sort of core philosophy a little bit as well to produce what I think is the best description of it I have so far, which is this.
We are now a company making a narrative adventure game type thing.
with high player freedom.
So that's the goal.
That's what I'm attempting to present to you is our system for producing a narrative adventure game type thing with high player freedom.
Now, if you were to walk into a design meeting with that rubric, of course, everyone would say that I can see an immediate question, which is you're what?
After all, what is freedom exactly?
What does it mean?
How do we offer it to a player?
What are we actually talking about?
This is really interesting.
This is a really interesting question.
What do we mean when we say player freedom?
When we say player agency, we're pretty good at analyzing that.
We can say, well, can you formulate a strategy?
Can you execute a plan?
Those are the sort of questions.
But what's the right question for this freedom concept that I'm sort of loosely defining?
Well, I think the right question to be asking is actually.
What question is the player asking themselves?
That's the question we should be asking.
What's the player thinking?
So here is my freedom axis.
There's my beautiful graph of a freedom axis.
And at the very bottom of the freedom axis, and I want to stress this is not pejorative, but the least free games, the most tightly linear games, the player is asking, what am I supposed to do now?
What am I meant to do next?
And we've all played games like that.
Monkey Island is like that.
Uncharted is like that.
Shadow of the Colossus is like that.
Here I am in a situation.
What's the thing I'm supposed to do?
What have I not seen yet that I'm supposed to see?
Now, we have to be a bit honest with ourselves here.
I don't think the designers at Naughty Dog were really hoping that when you play Uncharted, you're thinking, what am I meant to do now?
I think that's not what they were going for, but it is definitely true that we are thinking that, and a lot of the best level design moments in Uncharted 4 are jokes specifically about the fact that they know people are thinking like this.
You walk into a room, you can't see any way forward, you think, what am I supposed to do now?
You turn around and the exit is behind you.
That's a gag set up by a level designer because they know that you're thinking this question because it's a tightly linear game.
So if we open it out a little bit more, the next question is, what can I do?
and obviously there are games that fit that mold.
In Assassin's Creed, I ask myself, what can I do now?
Well, I could go over here, I could approach this stealthily and get that wrong, I could attack this guy, whatever.
The Witcher, RPGs in general.
80 Days in Sorcery, of course, sits at the top of this class, the very paragon of the example of the broader game, and I'm sure you'll agree, all of that.
But what's...
Above that, what's even freer than the question, what can I do?
Well, the one that we're aiming for, the one that we love, the one that we should be targeting if we are narrative designers, is, yikes, what have I done?
That's the perfect state.
That's the sweet spot that we actually want to achieve.
It's very rare for a game to achieve this consistently the whole way through, and that's OK.
It's a target.
But I felt that quite often playing Horizon Zero Dawn.
I would often go to a dinosaur, lay a complex system of traps, they would all go hideously wrong, the robots would plow straight through them, and I'd be attacked by some great big thing I wasn't qualified to deal with, and I would think, yikes, what have I done?
And that was great. That was a genuine sense that I had freedom, and with freedom comes great, uh...
Responsibility? Great. Ability to mess things up, right?
When we're free to do things, we're free to get stuff wrong.
Obviously, dishonor plays with this, and thief is kind of the ur-example.
A level of thief always starts off with taking one minor decision that escalates into a farce of hiding guards in cupboards and running away.
It's never been bettered, I think.
A couple of other comments, obviously the ordering of the game in this list could be debated, but why would you bother?
It's not a classification, not all games fit into this in any meaningful way.
If you're playing Minesweeper, you're thinking, why am I playing this?
If you're playing Fortnite, you're thinking, what's going on?
You know, neither of those games are charting here.
But yeah, what I want to think about is, is yikes, what have I done?
And the examples that I gave were all systemized mechanics.
They were all systems-based games.
But I'm not saying that we need to make a systems-based game.
And I'm not saying that I have any interest in making a systems-based game.
I really don't.
They're quite repetitive and boring, actually.
I'm a firm believer, as I hope I've expressed if you've seen any of my previous talks, that it's fine to change the player's options in a contextual way all the time.
That's not a problem, so long as the options that you provide make sense.
The reason systematic games are great is the player has real confidence that they know what they'll be able to do in five minutes' time.
They can plan.
You can't plan if the choices are being changed up underneath you from turn to turn to turn as they are in A Choose Your Own Adventure, as they are in 80 Days, but if you trust the author to provide you with the kind of options that you want then that problem goes away largely actually. So our goal is to create choices with good affordances that people can just about predict and that appear to be fair and on the flip side we make sure that our world is utterly unfair and exciting and interesting to keep you busy and occupied.
So how do we actually go about doing that?
What are we aiming to do?
How do we do this, especially in the context of a narrative adventure game type thingy?
Well, I have three, you know, rule of three.
I have three things, three ideas.
Firstly, decisions should always at least appear to change the game state.
Because if they don't, then the choice you made didn't really happen.
If you want people to be thinking, yikes, what have I done?
Then they have to feel like they've done something.
So if they, for example, ask a question of an NPC and then have the option to ask the same question again, that first asking never really happened.
So people would say, oh, I didn't do that.
That didn't really occur.
So you can't do that.
We have to make sure that if you ask someone something, then you don't get to ask it again.
Similarly, when I ask someone something and I come back to a dialogue hub, I don't want to see the same two exact questions that I saw a moment ago, because then it feels like nothing has changed in the game state.
Even if you superficially do nothing but change the text of the options a little bit to reflect the conversation has moved on a touch.
That's fine, but I want to feel like time is always moving because that way I can feel like what I'm doing may or may not be the thing that caused me to be in the situation I'm in right now.
I don't want to see the system saying, your input has been discarded.
Cool.
I like to take that further with our games.
Generally, if you're rude to characters, they'll get grumpy and they'll eventually wander off.
Things like that.
That sort of stuff is much better.
Arguably, that is a change to the game state, but it might be quite a subtle one.
Secondly, there should always be a way forward and no getting stuck.
I don't mean that it's ever okay or that anyone thinks it's okay for a game to let you get to a point where you cannot possibly continue.
I don't mean that kind of stuckness.
I mean rather that I don't ever want the player to experience the sensation that they know they're supposed to get through this door, but they don't know how to do it.
Because, obviously, as soon as that happens, and it happens in adventure games all the time, they're not thinking, yikes, what have I done?
They're thinking, what am I supposed to do next?
And players will drop back to that, because it's the lowest energy state for them.
If you give them the opportunity to decide that it's your fault, not their fault, that they can't get through this door, then they will take that opportunity very gratefully, and then they will tell you that your game sucks.
And that is your problem.
Thirdly, There should be no empty spaces.
There should be no dead air.
I don't think it should be possible to explore an area in a narrative game with nothing in it that you can do.
This happens in adventure games all the time when you're backtracking because you're worried that you missed something, but actually you're going through an environment which you've completely cased and there's nothing left in it.
The problem is when I do that, time stops moving.
As a player, I don't think, yikes, what have I done?
Because I haven't done anything.
I just wander around an empty room.
That same is true if that empty room has a couple of characters in it who are sitting there waiting for me to talk to them, but otherwise doing nothing.
So.
This seems like quite an odd list.
This is a curious design shopping list that doesn't appear to have very much to do with player freedom, but I argue that these things are absolutely important to creating this sense of being in the moment, which is the thing that we want.
And also they are things which pretty much every single adventure game ever made has failed all three of them all the time.
Okay, so.
Have any of them done well at all?
Is there anything nice we can say about games that have existed in the past?
Yes, I have a couple of games that I think are brilliant and will do this really well.
Anyone who ever heard me talk about games before ever, apologies, this is gonna be really the most boring and predictable two slides you've ever seen.
The first game is The Last Express from 1997.
I think I've put a photo of The Last Express in every talk I've ever done, ever.
It is the greatest game ever made.
If you haven't played it, it's, well, if you haven't played it, you're a bloody fool.
It's a real-time, always moving forward, train game in which the clock never stops, the characters move around on their own schedules, they ignore you if you don't do anything with them.
It's extremely easy to miss opportunities in it, but it is also extremely good at setting up opportunities for you to cleverly use that system and find things to do it.
But it's not a systematic game.
Rather, it's a game that offers lots of interesting changes of context throughout its narrative.
It's also the best piece of writing that any video game has ever produced, and it's never been even approached, let alone bettered.
But it's far too tight.
It doesn't know how to handle this freedom.
It has lots of fail states where there's nothing you can do but replay and start the section again.
And quite often, the correct way through one of its fail states is utterly cryptic and hidden.
It doesn't know how to solve that problem.
That's a very hard problem.
But it's a very valid problem.
It's a very good problem.
And it is a fantastic piece of work.
The second game that I want to mention is the Blade Runner adventure game.
which is famous because it randomized who was a replicant and who wasn't every time you started.
But that's really the least interesting thing about it because you only play it once, right?
So it's an adventure game.
So who cares?
You're never gonna know.
What it actually is though, is a really good example of a detective game.
You go to a location when it is narratively meaningful.
You don't get to go there unless it's narratively meaningful.
Your player always has a good reason to be there.
They case it looking for evidence or to discover whatever it is they want to find.
When they found everything, it's clearly telegraphed that maybe now you should go.
And once you go, there's never any reason to go back.
It's very good at removing dead air from the game.
Actually, you can go back, but I have no idea why, because there's never any reason to do that.
Meanwhile, as you find people and suspects, well, they might be replicants, they might not be, you might let them go, you might shoot them, you might arrest them, and it copes with that dynamic story state.
It doesn't give you a lot of opportunity to branch the narrative, but when it does, it tries to compensate for it and make sure there's always something for you to do next.
It does a really good job of stopping you from getting stuck by presenting you instead with, here are some interesting options and we will handle them.
But it's far too broad, it's far too ambitious, it randomises bizarre things it doesn't need to, it produces... it's got the weirdest dialogue system in the entire world in that it has choices but it chooses the choice for you automatically based on a setting in the menu which says what kind of cop do you want to be. So like, I mean you don't find that setting until you've fiddled around with it for a while but you can be like the jokey cop or the moody cop or the director's cut cop who says whatever line they thought was best.
it's possible to get stuck because the game chooses the wrong dialogue option for you.
which is just, it's bizarre, anyway.
It's far too ambitious, it wasn't properly tested, most playthroughs dry up, there's just nothing more to do anymore.
And those of you who've played it, which is probably not all that many anymore because it's quite hard to play now, the event on the left is the point at which you can branch the narrative into being a replicant sympathizer, which opens up an entire raft of endings, but only if you perform what can only be described as an invisible quick time event.
which is one of the worst pieces of design I've ever seen.
But it is a very robust example of how to use your map as part of your narrative progression.
So, what are we gonna do with all this?
How are we gonna go about this?
Well.
I'm a great believer in games starting with human beings and starting with tools.
As I said, Ink, our scripting language, is a philosophical statement, and its statement is that the people writing your game should be able to get on and do that without worrying about computers too much.
So I want to start our process with working out how we're going to author interactivity in a way that supports freedom.
So.
Our previous games, 80 Days, Sorcery, are basically branching trees.
They're quite complicated, self-referential branching trees.
They self-reference each other a lot to make sure that they're dynamic and responsive, but fundamentally they start here, they wibble around, and they get to an end and they stop.
There's only so much you can do with that.
And it's not great when you're arranged in a 3D world, because you might bounce from prop to prop.
You might want to engage with this, and then engage with that, and then come back to here, and then go over there.
That doesn't look or feel like a branching tree in the slightest.
So what do we do instead?
Well, we took an approach that we prototyped a little bit during the sorcery games of a system which offers content on the fly if it's appropriate.
We've made all of our content atomic, by which I mean.
Every action, including dialogue, is a little blob of content.
It sits on its own somewhere in the code.
Every blob is gated by preconditions.
A precondition is just a piece of logic that says this is what you need for this bit of content to be appropriate, to be meaningful right now.
And of course, the preconditions must be satisfied for the content to be allowed to be surfaced by the game.
This design is drawn from Inform 7.
I think it was the rule-based design used there, which was the work of Graham Nelson, Emily Short, Andrew Plotkin, possibly others.
But I've never seen it used in an adventure game, to my knowledge, anyway.
So we do all of this in ink.
Ink looks roughly like this.
This is a shot from our demo, so there's a couple of options on this shrine thing.
There are three blobs of content in the content bucket of the game.
Those preconditions are the little things in curly braces.
The top two, all of those preconditions are being satisfied.
So those options are surfaced and you can see them attached to the pillar.
The bottom one is not being surfaced.
Something in that must not be true.
In this case, it's I've recently been zapped by this thing.
And so the condition not recently zapped by shrine fails.
So it doesn't allow it to surface.
And that's what I mean by atomic content.
This isn't a branching tree.
It's just a set of things that might happen.
These are brilliant.
They're really, really, really powerful, because you can just keep loading stuff onto them.
So the types of preconditions that we use, I'll just catalog them very quickly.
The world state, obviously, where are you, what can you see, what can you touch, what have you got, what's open, what's closed, all the normal kind of things.
So we do some state tracking, we use trigger volumes, we use raycasts, whatever.
The knowledge state. I talked about this quite at length at last year's GDC, so I won't recap the system that we use, but we track everything that the player knows and everything that they need to know, and what leads their following using chains of knowledge.
Heaven's Vault has about, I don't know, 1,500 knowledge states or something, and we're constantly tracking that.
We also, more interestingly, check what's just happened, both in the world and in the knowledge state.
So you can say things like, have you recently learned a fact about this?
Have you recently discovered that?
Have you recently discovered this, but you haven't yet discovered that?
In which case, it might be a good idea to do this.
We do that at the ink level using the turns since query.
So I said preconditions are great.
I said atomic content is great.
You're probably all just going, I don't really even see why that would be the case.
So let me try and outline the benefits.
And it's all human.
I can author this stuff in a really responsive way.
If I want to add an action to the game, or I want to add a line of dialogue to the game, I want to give the protagonist the ability to ask a particular question, I simply write that question down.
And I say, when is this question appropriate?
Well, to ask this question.
I need to know, she needs to know this fact.
So, okay, test one, do you know that fact?
This question becomes redundant if she already knows the answer.
So, second precondition, do you not already know the answer?
Great, bung that in.
Wait, no, this question doesn't make sense if I'm in the dark, because in the dark, I don't want to ask questions about some random fact in the story.
So if you're in the dark, that's a fail state, and so on and so forth.
You just bung in all the preconditions.
Wap, wap, wap, wap, wap, wap, wap, wap.
And under every other circumstance where all of these things are met, fine, this thing might be what the game does.
You chuck it in a bucket, there are 60 things in the bucket, the game will pick something and it will always make sense.
And if it doesn't make sense, well that's fine, you just put another precondition on it.
Or you prioritize it.
And the game will give you something sensible and something dynamic and something that moves things forward.
What I'm trying to say is that non-linear flows arise naturally from the system.
You don't have to author them.
You don't need a branching tree to ensure that your game is non-linear.
It can't be linear.
It's effectively a deck of cards that you've shuffled and you're dealing them out, except that cards are only ever cards which are relevant.
It's a bit like the authoring structure that Lee Alexander outlined for Reigns, right?
That's an atomized set of content with preconditions that say when a card is allowed to be released or not.
It's exactly the same idea.
Only ours is very, very flexible in terms of what that content can be, because it can be anything, literally any action in the entire game.
So, obviously there are issues.
Well, the biggest issue, I hope, is probably what you think it is, if you've been sort of following the idea of what this is, that it's incredibly annoying to write.
It's incredibly repetitive.
Am I really saying that on every single option in the entire game, there are 20,000 lines of dialogue in this game already, I have to say, are you in the dark?
Don't say this if you're in the dark.
Have you just stubbed your toe?
Don't say this if you've stubbed your toe.
Are you having an argument with Six?
Don't be nice to him.
On every single line of dialogue, do I really have to list every single way that this would be an inappropriate thing to say?
And the answer is sort of, yeah.
I kind of do, because otherwise the game is going to say something stupid, because it's only a game. It doesn't know.
But this is a problem we can tackle, and it's not even a difficult problem to tackle.
The solution is exactly what a software engineer would tell you the solution was.
We use authoring patterns. In particular, we use scopes.
So all of our content is scoped. So we write in buckets.
We have four buckets.
We have the moment bucket.
This is a thing that's happening right now.
I am talking to you people right now.
So everything that I say to you right now will be about the topic that I'm talking about, hopefully, and I won't do some weird Freudian thing.
But I'm not gonna start telling you about what I had for lunch.
because right now I am just looking at the options that are available to me in this moment.
So it's great for an argument, it's great for a set piece, it's great for a conversation, fine.
That's just normal branching trees.
They're little, but they still exist.
If I am not in a moment context, then I'm in a room.
We use rooms as our sort of base level interaction.
So in a room, there are various things I could do.
If I was to come down from the podium, I could sit on a chair, I could go to the door, I could take the microphone, whatever.
I could do things within this room.
So when I want to author content for this room, I put it in the room bucket.
I put it in the hall bucket, and there we go, fill it up.
If I have an idea for something I might do out in the hall, well, I find that bucket, the room of the hall, and I put it in there instead.
So that scopes it geographically for me.
And we have some markup to help Unity know what prop is this attached to.
Can you see it?
Can you touch it?
That kind of thing.
That includes dialogue.
Most importantly, that includes dialogue.
There are things I might want to say because I'm in this room, but I don't want to say if I'm on the street outside.
So that allows Elle, our protagonist, to remove conversation options and gain conversation options based on where she happens to be standing in the world.
Fine.
If there is nothing in the room that she wants to talk about, then we drop back to episode level content.
So we have another bucket. This is across a series of rooms that are relevant.
So my episode at the moment is being in San Francisco and being a little bit jet-lagged but mostly okay, and my dialogue is all about being in San Francisco.
And I can say these lines of dialogue like, gosh, isn't San Francisco a lovely city?
Or, gosh, you really do have a poverty problem, guys, you want to sort that out.
and I can say that anywhere in San Francisco, and it's relevant and it's appropriate and it's apropos, so long as there's not something I should be saying in the room context, like where's the coffee, and so long as I'm not in the middle of a moment of delivering a lecture to you guys about something else completely.
Fine.
Okay, beyond that is the game scope.
all the other things that she might say, all the things that could be relevant at any given time at all.
These are the things where she can synthesize information.
She can reflect on information from multiple places in the game.
She can draw things together.
She can bridge one episode to another episode.
And that basically sits at the bottom of the hierarchy because it's the one that can come up anytime.
So the content is shadowed, each scope shadowing the next.
And this is brilliant, right?
This is really brilliant because it partly removes huge amounts of the preconditions because the scope just says this is the scope, so it's fine.
It has a prioritization system, but for me as a human being, it's very easy for me to decide where to put my content.
If I'm writing a dialogue about the history of robots in the universe, that's game scope, fine.
If I'm writing a line of dialogue about the planet I'm on, that's episode scope.
If I'm writing the line of dialogue about whether this door is gonna be openable, that's room scope.
This is trivial.
It takes no time at all to work out where you're going to put your bit of content.
You just bung it straight in and move forward.
So you get all the benefits of additive, atomized content without having to worry too much about structure.
Well, in fact, without having to worry at all about structure, and that's the other big problem, when you atomize all your content, you don't have a way of enforcing structure, by which I mean long-term plot structure.
To say at the beginning of the game people should be very sort of kind to each other and by the end of the game they should say big dramatic exciting things because most of your content doesn't know when it's happening unless you write a precondition to tell it when it's happening.
It can get very messy.
So the one thing that we needed to add to this system, this all works, it's fine, it's running, was something to enforce long-term narrative structure because we do want that.
So I said earlier that the system is a little bit like the system in Reigns.
If you think about the way Reigns works, you die and then you loop back and that's its long-term narrative structure.
It's built in these little loops.
We basically do the same thing except without dying and resetting you, but instead moving you forwards and that's why we use episodes.
So, is everybody still alive?
Good, let's do something even harder.
This is the structure of Heaven's Roll, right?
It is an open world of locations.
Some of them are revisitable, some of them you can only visit once because once you visit it, there's nothing more there to find.
The player chooses a location to visit to continue the story.
They look at the map and say, what's available, I'll go to that one.
It's nearby, it looks interesting, whatever.
Fine. When they reach a location, they initiate an episode of content.
They land on it and they're sort of locked into that episode until they're done with it.
They play through it.
That gives them a nice, well-defined, I've started off, I know why I'm here, I know what I have to do or what I maybe have to do.
And then I know when I'm going to end it and then I can move on.
I kind of think of it as shadow of the Colossus.
If you could discover where the Colossi were in any order and visit them in any order.
And then you pick which one you want to do when you want to do it and you go and do it.
And once you're doing it, you're doing it.
Done it is done.
Yeah?
And crucially, locations can only be landed on, they can only be chosen if you've got a reason to go there.
So we don't have any dead air, we don't have any wandering around randomly.
This is not an open world in the classic sense.
When I was wandering around the world of L.A. Noire, I had no idea why I was wandering around the world of L.A. Noire, because there was absolutely nothing to do in any of it at all.
So I don't know why they built it.
And I still don't know why they built it.
Well, we're not doing that, because that's silly.
And we're also only eight people.
When you land on an episode, the episode flow works like this.
Well, the episode is unlocked by previous events.
It begins, the player explores, they wander around, they trigger all this atomized content based on the preconditions of the room or the state or what they know or what they don't know.
That all just surfaces up from the content bucket.
I'm not actually in control of that, really, as an author.
I'm not in control of the order in which it appears unless I specifically tell a piece of content that it has to follow another piece of content.
Quite often what we're doing with the dialogue is we're saying, this remark is relevant if you've just spoken about this topic.
So if you say it, you don't make the reply, you wander off, this reply dies and it never comes back. That happens all the time.
And so conversations can quite naturally feed off one way, something else can get forgotten about, the player can pursue interests, let other things go.
Somewhere along the line they reach a minimum exit condition.
That's a condition which allows the protagonist to say, reasonably, I want to leave now. That's always narrative. It has to be. It's not, there's no point in it otherwise. It has to be, I think I've seen enough, or I don't think I can open that door, or I don't know why I'm here in the first place, or I've completely cased the joint, let's get out of here. All of those would satisfy your minimum exit condition.
You've landed on the moon, you've wandered around a bit, you go.
If you don't go, you keep exploring for a while until you reach the maximum exit condition.
The maximum exit condition is the one that we don't want anyone ever to see.
It's the point where the robot trundles up to you and says, Seriously, you have picked up everything. You have opened every cupboard.
You have looked at everything. We've got nothing.
Please leave.
Get out! It's the one where we start turning the lights off.
It's the one where literally we start not letting you walk through open doors anymore and putting invisible collision in the way.
It's the thing where we just hustle you towards the exits, like they do if you stay late in Disneyland.
And like all these guys who were previously friendly and dressed as Winnie the Pooh suddenly become these menacing Fortnite-style bears that are slowly easing you towards the exit.
And if you slip past one age 10, they come for you.
So we do that to our players.
And in the meantime, remember there's still the game scope, right, the game scope still exists.
So in the background of this episode, if there's ever a pause, fine, they'll talk about what happened in the last episode.
They'll talk about how this episode and that episode connect.
They'll talk about how Six is a really annoying robot.
Six will say, why am I called Six anyway?
All of these background things can filter in when there's a gap.
So we've always got something to talk about.
So we're always moving forward.
So there's no dead air in our game.
That's never been possible for us before.
In 80 Days, we couldn't have Passepartout and Fogg idly chat about something in the middle of another adventure because it was an authored tree.
We sort of hacked it so that towards the end of a story in 80 Days, towards the end of your journey, they would start to say, it's day 75, let's get a move on.
But that was totally fudged in.
It was just a bit of tree shoved on the end of every other bit of tree, and it's probably got some really awkward segues.
It doesn't have this free form structure that arises naturally from the fact that you're wandering around a world trying to fill space.
It is a completely different structure, despite, I think, having a similar philosophy.
So.
We have episodes.
They let us structure the content and get some sense of progression.
So the question that remains is, how do you unlock a new episode?
And I called this talk, creating a dynamic detective story.
And I haven't mentioned detectives once, I think.
So anyone here in your deerstalker hats will be very disappointed.
So here's a detectivey word to make you feel better.
Episodes are unlocked by following leads.
We borrowed the structure from Raymond Chandler, basically.
In a Raymond Chandler story, Philip Marlowe goes to the dead man's apartment and finds a laundry ticket in the dead man's coat, which takes him to the laundromat where he meets the woman who takes him to the jazz club where he gets hit on the head and he wakes up on the boat where he meets the mysterious doctor.
So he goes to the mysterious doctor and so on and so forth.
Every location he goes to is unlocked by her lead he finds in the previous location.
Perhaps a big one, perhaps a small one.
We do the same thing again, which is to say, every episode in the game is unlocked by preconditions.
Again, just as we use for the atoms of the story, the larger atoms, the episodes of the story are also preconditioned.
So when we're in the open world, and we're trying to say, what are we gonna do next?
What's our next episode gonna be?
It might look like this, it's a bucket of content.
The red ones, the preconditions have failed, for some reason.
The gray ones, well, actually, just the preconditions have failed.
but they're probably ones where the precondition was only do this once.
So the tutorial will have a condition that says, have you done the tutorial? Don't do the tutorial again.
And that's fine.
The green ones are ones where I have passed my precondition.
I have a reason to go there.
There's a farming village where I have a contact.
I haven't spoken to him in a while, so I could check in.
Narrative reason, precondition valid.
I can choose that option.
I've got an old sword, I can trace its location, great.
That gives me a reason to launch that episode.
I saw a mention of something in a document, I can follow it up, that gives me a choice and a reason to enter that episode.
So this is kind of interesting, because this basically means Every location in the game, every episode in the game, has a set of reasons why it's allowed to be played.
And it just sort of sits there and waits until those reasons are met.
And then it says, okay, you can play me now if you want to.
This allows us to have a completely non-linear flow through the story.
You might do the farming village.
You might do the empire barracks.
You might do the empire barracks as level three, or you might do it as level 10.
I, as the author, have no control over that, unless I explicitly put in a precondition about it.
What that means is that we can build 15 locations, but generate an entirely nonlinear flow through those locations, so we solve our redundancy problem.
We've always got something new to give you, even though we can't actually build a new level.
Cool.
That's very nice.
That's terribly clever.
Great.
Does that work?
Well, I think it does.
Yeah, it seems to be working.
There is a problem.
So, I really want to stress, so far I started with this idea of player freedom, and I tried to solve the problem of doing that in a 3D world, so I atomized all my content.
But then I had to solve the problem of structure, so then we made episodes.
But then I had to solve the problem of how to unlock episodes, so I put preconditions on that.
And now I have to solve another problem. So at this point I really want to just make a game.
But we're really close, but we've got one last thing.
And I think this is the only bit of this which is, I think, original, and I think quite clever.
And that's the problem that arises in all detective games.
And I don't mean deduction mechanics, even though they are almost always appalling.
But it's this, that if you have a detective moving around, some players are that detective, and other players are that detective, and both of them have a terrible experience.
Now when I played L.A. Noire, I think I was, I don't even know, I wasn't even either of these.
When I played L.A. Noire, I was like a rumba.
I just went around the corner of the room collecting everything until I stopped, which is neither really.
I don't think I engaged my brain at any point, which was a shame.
But what we really want to do for our narrative adventure experience game type thing is ensure that everybody discovers just enough.
We want them to just have enough.
Raymond Chandler writes that you go to the dead man's apartment, you get the laundry ticket from his coat, you go to the laundromat.
You don't go to the dead man's apartment, pick up seven pieces of laundry, get his laundry in a bag for him, get his detergent, then go to the laundromat.
then meet the entire jazz band in the laundromat and go with all of them to the jazz club.
That's not how he plays it.
He's a bit more skilled than that and hopefully we can be too.
But how do we do that?
Because if we've written all this atomized content, well, if you find it, you find it.
And if you don't find it, you don't find it.
So how on earth can we manage what you found when we've made a big bucket of atomized bits of content?
We've got no way in.
So what do we do?
And like I say, I think this is clever.
We'll see.
We make our evidence chains highly procedural.
So when the player finds something, I as the author have no idea what it is you're going to find.
I say, this is a good place to find something. Inside the guy's coat, that's a good place to find something. And the evidence that's actually found is generated on demand at that moment and strictly for purpose. We do that by triangulating things. We say, what makes sense here? What kind of things can I have in a dead man's coat? Well, I can have a laundry chit.
I can have a matchbook from a jazz club.
I can have a ticket for the boat.
Those are all locations in my world.
I probably can't have a Kalashnikov.
And I certainly can't have a tiger skin rug.
So don't generate those things.
I say, what does the story need?
Well, right now I really want the player to go to this laundromat.
You should see how they smell.
Their shoes look dirty.
Let's get them there.
And I said, what does the game need?
What would be interesting?
We keep finding laundromat tickets.
Stop finding laundromat tickets.
Find something that isn't a laundromat ticket.
Okay, we triangulate those three and we say, aha, oh wait, I've mixed my metaphors.
I'm back in archeology now.
I've found an ancient ring with the seal of an unknown king that was dropped here.
And that's what our protagonist will say.
It's appropriate because it's a small object and I found it in a place where small objects can be found.
It's what the story needs.
I want my player to go to this palace.
So I want to give them an artifact from that palace so they can have a narrative reason to go there.
And it's interesting.
Because it's an ancient ring with the seal of an unknown king.
Who doesn't like an ancient ring with the seal of an unknown king?
Everybody wants one of those.
So, we glue the narrative together using procedural elements.
If you're Poirot and you find all the clues, at some point the procedural system would say, I've got nothing for you.
And our character will lean down, turn over a rock and say, there's something here. Oh, no, no, no, there's nothing.
And she'll carry on.
Which is fine, because that player's already got everything they need, and they need to stop farming the location and get out of the level.
That's okay, we haven't even lost them.
So we've got a ton of benefits.
There's no need to scour the location.
I, as the adventure game player in L.A. Noire, do not need to rumble the room, because I will find the content I need by looking in the places that are interesting.
I'll check the cupboard, I'll check under the bed, I'll check the wardrobe, I've found a couple of things, I've got a lead, I'm good.
I don't need to worry that there might have been something in the toilet.
Whereas when I'm playing LA Noire, I have to worry about that.
I have to go and check it.
And then having checked it, I have to check that I really did check it.
And that's the standard experience of adventure games, is you walk into an area, you case it, you case it again.
And then when you're stuck, you go, oh no, and you case it again.
And then, variably, you missed something.
Well, you don't need to do that here.
The adage is always that things are in the last place you look.
Well, they are.
That's where we put them.
we can control the unlock curve of the entire game.
We couldn't do that before.
That was the problem.
Atomized content meant that we had no way of controlling the unlock curve of the game, but now I've moved it up into code.
The procedural evidence generator is the thing that decides what locations should I unlock, when, how quickly.
And I can tweak that as much as I like, and I affect the entire game by tweaking my generation code.
And I affect all of the games, regardless of the order that you're playing the game in.
Remember, this is an inherently nonlinear flow.
But I've got one point of entry to control the unlock curve of all possible games without reducing any player freedom, without restricting anyone in any way.
I think that's really clever.
I think that's really useful.
And I think it's gonna make Heaven's Vault flow nicely.
But we won't find out that for another year, at least.
Best of all, writers do not need to be responsible for balancing the information, because writers should not be allowed to be responsible for balancing information, because writers are cavalier and they don't understand things.
I am also a writer.
They can put in real leads.
If you want to meet the jazz singer in the laundromat, that's fine, write her in, let her talk about the jazz club, handle the fact that the player might already have been there, handle the fact that the player might not know what a jazz is, deal with those possibilities, that's your job.
The procedural system would say, oh, they've got a lead to the jazz club, so we don't need to give them as much evidence for that.
Maybe a single matchbook with the name will be enough and they can connect it themselves.
Fine.
There's no redundant information, as I said.
Poirot eventually runs out of stuff.
You don't have players saying, I've come to the jazz club because I've found 15 clues to come here.
I know I need to go to the jazz club.
I'll go to the jazz club.
I'm really sorry I haven't been to the jazz club yet.
That's good.
That's great.
We don't have unnecessary clues.
You have just enough evidence.
And better players are still rewarded.
If you follow more interesting leads, you can get more authored content, you can get more interesting evidence, and not the procedural stuff.
And that's obviously better because it's gonna be hand-authored.
So that's fine too.
Finally, we can also feed the procedurally generated clues directly back into the narrative because we have a precondition-based system, right? That's a lot of long words, what do I mean?
I mean, if you find the ring of an ancient king, you can take it to a shop that buys rings and sell it. You can sell it for a piece of genuine, specific, contentful information in the story.
If you find a knife, you can use it to cut things. If you find a book, you can open it and you can read something from inside it. So we can take procedurally generated items and give them narrative detail.
that narrative detail may or may not ever surface because the procedural generation may or may not ever generate the correct artifact.
But I don't care because I've got a big content bucket and I just chuck stuff in.
If I have a joke which only applies to knives made of crystal, I'll write it and say, if you've got a crystal knife, there's your joke.
If you don't, nevermind.
And I can do that and I can keep doing that right up until release without breaking the unlock curve, without breaking anything in the system.
I can just keep throwing stuff in.
In fact, the only problem we really have is the frame rate of the story processing, but that's not my problem, that's Joe's.
So overall, the game loop for our narrative adventure game thingy with high player freedom looks like this.
You select an episode, you go into the episode, you do the episode content, you collect procedural leads as and when you need to, you exit, you go into the open world, there are available episodes, and for players who have completely failed to get anything from any of the episodes, you can get a procedural lead inside the open world via some kind of grindy pickup.
So if you're really useless at story games...
or you really don't want to find anything or do anything, then I have no idea why you're still playing our game, but you're grinding your way around the open world, collecting procedural leads, which seem to be fine for people in The Witcher and Horizon Zero Dawn and all those other games that make you pick up infinite numbers of flowers for no reason whatever.
So if it works for them, it'll work for us, right?
And ours a narrative too?
I don't know, somehow I think those people won't enjoy it, but whatever.
And that's our structure.
That is our game loop.
I'm really sorry to subject you to that.
Right.
And that's the architectural structure of Heaven's Vault.
That's how we're doing what we're doing.
At this point, we've built one demo level.
We've been showing it to press this week.
It works, playing that level 20, 30 times.
Every single play through, we saw content arise that none of us had seen before, mostly minor stuff, mostly remarks about something in the environment.
One Italian journalist had a huge argument with his robot and generated a long procedural slanging match that none of us had seen.
We wrote it about two and a half years ago, but it surfaced because one person was sufficiently horrible to their robot.
Don't be that guy.
Equally, today, we had a journalist who was very nice to their robot and had some little cuddly-feely conversations with their robot, which I also hadn't seen, because I'm a middle-of-the-road kind of player.
That doesn't happen in 80 days.
We joke that there is content in 80 days that no one has ever seen, that we haven't seen, but it's not really very true, whereas this is somewhat more true.
It does mean we'll have more typos, though.
To put that more seriously, it does mean we have a massive problem with stability.
Stability is now a serious issue.
We're in the same territory as the Blade Runner game and the last Express game.
And both of those games, the big failure was, apart from being both commercial flops, which scares the living lights out of me, was that all of them went really badly wrong if left in the hands of a player who didn't understand the system.
Content chains are fragile, inherently.
You can get dead ends, where the flow just stops and there's nothing left for anyone to do, and Chandler's hero is wandering around the dirty streets of LA going, everyone seems okay, I don't have a job, I don't know what to do.
You can have more subtle things. The system might offer the player far too many options.
I might be in a dialogue with 20 things I can say, and I don't want 20 things I can say.
Okay, maybe we handle that on the UI side, but maybe we have a real problem to solve as well.
Episodes themselves.
can get stuck in loops, they can repeat themselves, they can otherwise embarrass themselves, they can get you stuck in cupboards, whatever.
All the normal kind of game logic problems are still there, but in a nonlinear environment, they're much harder to spot.
And of course, procedural clues can be total rubbish, because procedural generation likes to throw up total rubbish.
This was one I had just before, while I was writing the talk.
A chipped antler jug shaped like a rabbit.
I do know what the rules are that generated this, but I have no idea what I was thinking when I allowed this thing to be produced.
I struggle even to picture what this object is supposed to be, but there we go.
I think I literally put in a rule that said, if it says shaped like a rabbit, don't say that.
That's not a thing anyone should ever say.
What even is a rabbit shape?
I don't know.
So what do we do?
Well, we did this.
We build a spreadsheet version of the game out of an old prototype.
So this is a big thank you to Yannick Losey, who did the JavaScript port of the Ink Engine.
One of the few benefits that we've seen of open-sourcing Ink is this chap built a JavaScript version which allows me to do this kind of thing.
Massive kudos to him.
This plays the game automatically, right?
It has the actual ink script, and almost all of our game logic is in that ink script, precisely to make this easier.
It bashes through it at random, it runs that script, and then when it gets back to the game layer, the open world layer, it simulates it in that crappy orange box there, and those little yellow ones are ones that you might have a reason to go to.
The black square one is one that you need more evidence to go to, and the gray ones are the ones you can't go to, but you have been to, sort of thing.
So we just run it.
We just say, right, run this for 10 locations and show me the game state.
Run this for 15 game locations.
Run this for 25.
Run this to the end of the game.
Just run it and see where you get to.
And most of the times you do that, it'll crash at some point.
It'll say, I'm halfway through the Emperor's Library, and I went up the stairs and down the stairs and up the stairs and down the stairs, and then I dropped the key, and then I went up the stairs, and now I can't get down the stairs.
I've run out of content.
which is fantastic.
That would have taken me 16 hours of play, generate, if I had generate, or any beta tester.
So I fix it, recompile, run the simulation again.
That's not enough, but if I do that all the time, every night for a year, I will capture the majority of dead ends, loose ends, and essentially runtime errors.
What we're doing is we're turning the entire game flow, an inherently unstable content chain, into one large computer program we can just set off on its own.
So that's really good.
It also spits out the transcript, which you can just read.
and that's good for redrafting and I can spot typos.
I just flick through it and go, that's not a very good line of dialogue.
That's not a very good segue.
I wonder if there's a joke to follow up that line.
I can go and check.
And I can see content chains that I don't otherwise see because when we play the game, we tend to play it a bit the same way every time because that's the thing that people do.
It also spits out all the translations that are generated so we can test the translation unlock flow as well with the language mechanics.
So yay, automated testing.
Everybody's been telling us we should have done this for years, but we never got around to it.
We didn't do it for 80 days.
I can't think why, because it would have solved so many problems, but it's actually not that bad.
It's fine.
We have this little JavaScript prototype.
We just run it sometimes.
It's good for redrafting.
It's good for checking continuity.
It's allowed us to push the complexity of the logic we use, because I'm more confident that we can test it.
I'm less terrified that I've done something really trivially stupid.
which is great.
I can have my robot go off on its own and come back a lot, which is the sort of thing that often has edge cases.
Well, this is great at finding them.
And it lets us do our game-wide balancing.
Remember I said that the procedural system gave you a single unlock curve?
Well, this is where I wrote the unlock curve in JavaScript running an automated process.
You tweak it, you tweak it, you tweak it, you port it into Unity.
I've never seen that unlock curve work in Unity because we haven't built enough of the game yet, but I'm 96% confident it will work.
because I've already run it.
That's brilliant.
That's great.
Finally, yeah, it catches ink flow bugs.
And it also helped us improve the ink engine itself by capturing some really deep down rare engine bugs which were there.
They're not there anymore.
Problems?
I'm coming towards the end.
Thank you very much for listening.
It's a bit of a, ah, problems.
It doesn't understand anything, obviously.
It has no idea if you've repeatedly called the robot by the wrong name.
It doesn't know if you've walked up and downstairs.
It doesn't know anything, really.
You have to read the content to see if it makes any sense.
It doesn't test anything in the 3D world, and there are lots of bugs in 3D worlds.
Our props disappear behind collision, cameras go through bushes, all the usual stuff.
We are going to have to play this game a lot to check all of that, but it does at least mean that we are checking that, not having to check the story content at the same time.
It is yet more code to maintain, yet more bugs to be introduced, yet more disparities between the two layers of the game, the JavaScript and the Unity version.
That's unfortunate.
And finally, and most importantly, randomized play is just the worst simulation of human behavior I've ever seen.
We are better than this.
We are better than this.
A random player will go upstairs, downstairs, upstairs, downstairs, upstairs, downstairs.
Okay, I've seen everything and leave.
And over here is a big shiny object with some really interesting plot attached and it goes, no, I won't see it.
And I know as game designers, we always give players too much credit because actually players walk into an environment, completely miss that, completely ignore this, focus on one spot on the ground and then say, I don't know what to do.
I know.
And at least randomised players helps us to break the assumption that people are playing your game with any modicum of attention, because they probably aren't, or at least not always, even when they mean well.
But we have had to introduce additional code to try and get the random simulation to hit any interesting side story content.
So if there's a particular bit of the narrative, which is cool, but it does require you to go and talk to this person about this thing, we basically have code that says, just do that.
Just get on and do that.
Are you near it? Do it.
No, you're not allowed to leave.
Do your homework.
And we need that.
And that's more code to maintain and it's debug specific code, so we're not really testing properly.
I think, As we get closer to release, I'm going to let this thing run randomly more often, because stability matters.
But for the moment, we have to kind of hamstring it to get it to do the things that we're actually interested in, which is a shame.
I wish there was a smarter way of doing that.
And that's it.
That's what we're doing.
In conclusion, we have a free-form, contextually aware interaction across a 3D environment entirely made out of authored and specific content via easily editable blocks with simply logic, with simple logic, with simple additive logic.
Though the story frame rate is now an issue.
In general, efficient authoring patterns have been utterly critical to us.
We couldn't do it if we hadn't developed those.
We still use scale and redundancy in the text and dialogue.
We haven't actually thrown away that crutch at all.
Automated testing is good.
Any amount of it appears to be good.
And our major limiting factor is art cost and 3D world markup.
It's not actually story complexity.
Our story is doing some nice crazy things because I think I can get away with it while the art department build another chair.
So, that's me, and if you'll forgive me, I wanted to finish with one last thought.
So over the last four years I've done three talks at GDC about interactive narrative and the work that we've done at Inkle, which I hope a lot of you have interacted with and I hope a lot of you have found at least interesting and perhaps provocative.
And I think I mentioned earlier that we had a philosophy in the games we make, but I think we have something deeper than that.
I think we have a core principle, which is the thing that makes us do what we're doing in the first place, the thing that we strive for and that we want to see in narrative games. And I, I saw a good formulation of it. So I thought, I thought I'd, I thought I'd share that with you in the last minute of the talk, which is this, um, The conservation of narrative momentum.
Obviously that's a massive bastardization of what the conservation of momentum is, but I've got a math degree, so I don't care.
And what I think I want to say is that games should be striving to conserve narrative momentum at all times.
Every narrative experience, a novel, a film, or whatever, has got to feel always like something is happening right now, but also something is about to happen just now.
And both of those things have to be true simultaneously.
Every writer has to balance resolution and mystery, tension and payoff, threat and release all of the time.
Good narrative games need to do this, but it's really hard because the player keeps walking into things, or repeating the same conversation with an NPC, or getting lost, or going in and out of the same door.
Players are our worst enemy when it comes to narrative momentum, because they don't even know what it is they're supposed to be doing.
So to conserve narrative momentum as best we can, everything that the player does that's awkward, we need to gloss over as fast as possible and get out of the way.
I used to write text dimensions, parser-based interactive fiction, and the single worst thing about those is that when you make a typo, it says, oh, I don't know that word, and then it leaves that on screen.
It leaves your error in front of you, and then if you get two in a row, it leaves two errors, and if you get three commands wrong in a row, you can't see any story anymore, apart from all the things you did wrong.
It's terrible.
The loss of momentum is appalling.
Well, okay, these were games designed to be played coming out of a printer.
It's not their fault, but we definitely can do better.
But a lot of games, those errors are all I see.
When I'm running around a level and I'm uncharted and I've completely got lost and I'm being shot from all directions and the guys do not stop.
They come right at me and I have nothing but error compounded upon error.
When I'm trying to play Assassin's Creed in stealth mode and the frame rate starts to drop because every single NPC in the entire level has zoned in on me.
I'm in a narrative point which is not interesting.
It's just making me feel like I bottled it.
The narrative momentum evaporates.
Okay, maybe the gameplay's fun.
That's fine.
But I care about the narrative momentum.
The player should always be thinking about what they're going to do, not what they're supposed to do.
Time should always be moving forward.
Moving forward through the story should be frictionless, which doesn't mean you can't have puzzles, but it does mean that attempting to solve a puzzle has got to be part of that narrative.
For example, if I find a stuck door and I rattle it and it's stuck, that's fine.
But if I rattle it again, she should say, it's still stuck.
That's a minor thing, but it changes the totality of the framing of that moment in the story.
It becomes an expression of the protagonist's frustration.
That's meaningful.
Not just the computer repeating its cycle.
Games should not waste our time.
They should surprise us, delight us, and then they should finish while we are still leaning forwards.
Thank you for listening.
I might have time for like one question, but I'll hang around afterwards.
Does anyone dare the microphone?
Yes, no, yes, no.
Yeah. Hi.
So you're saying that your Heaven's Vault is it's got procedural content in it, which I am really interested in because I enjoy roguelike games.
So I was wondering where you draw the line between like.
procedural content and the narrative that you're trying to show the user.
So I think the key thing to realize is that.
The question is about how we draw the line between narrative and procedural content.
The key thing to remember is that almost all of the content in Heaven's Vault is authored.
The solution that I like to use is a procedural structure filled with narrative possibilities.
So in a roguelike, you might see the same monster 20 times.
Well, we just write 20 different monsters, that essentially.
So I think the kind of dynamic structuring that roguelike games do is really, really interesting.
what I like to try and find ways to do is to ensure that the way that content is surfaced gets filtered into something that an author has control over.
And that goes right back to like the way we structure the game, you know, we use text, we don't use voiceover because that allows us to do that, that kind of thing.
But obviously it depends on the game and depends on the intention of the game.
And particularly with roguelike, you don't, they are built around re-building.
from replayability around the loop and yeah, authored content in a loop is pretty awful.
So you have to solve that problem.
I think we did in 80 days.
I like to call 80 days a roguelike, but slightly just for a laugh.
Yeah.
Could you be more specific about what you meant when you said unlock curve?
The unlock curve? Yeah. Yeah, so if you... yeah, absolutely. So early prototype, you played a couple of levels, you picked up some artifacts from here and there, the artifacts allow you to find locations, I ran the game for seven levels, and suddenly I had ten planets I could visit.
And I don't want the player to be looking at ten planets and going, which one do I want to go to? Because the player doesn't actually care that much. I want the player to be looking at three, always.
And I want to make sure that the game is rigged so that they never have more than three.
And that's what I mean by the unlock curve.
So the game should do that at the beginning, it should do that for a while, and then towards the end of the game, it should start to do that.
So the player gets the sense that they're funneling towards one grand prize.
So it's that, it's controlling.
It's controlling how fast things are unlocked, but really actually what I actually care about is controlling how many alternatives the player has to look at at any given time.
So essentially, you know in The Witcher when you've got like 20 possible side quests?
That's rubbish, don't do that.
Thanks.
All right, I think I'm done.
Thank you very much, everyone.
