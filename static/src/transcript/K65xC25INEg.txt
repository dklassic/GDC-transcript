So this talk is about defying expectations.
Seven lessons from The Sims FreePlay.
So first a little bit about me.
So I'm Mavis, I'm the lead product manager at FireMonkeys.
I've been with EA for more than five years.
More than three of it was spent on The Sims FreePlay.
Previously, I worked on shooters in Ubisoft Singapore, where I started as a monetization analyst.
My background is both in business and analytics, and spent more than eight years working on free-to-play titles on both PC and mobile.
So the agenda of what we're gonna cover today.
So first, we're gonna cover some history.
We're gonna start by anchoring ourselves on the product lifecycle, and then we'll go through each stage and the ensuing lessons that we've learned.
And finally, we'll sum up with some takeaways.
So first, some history, a bit vague, but some of you may or may not know Firemonkeys.
It's an EA mobile studio in Melbourne, Australia.
It was formed through the merger of acquisition of two indie companies, Ironmonkey Studios and Firemint, and they creatively named themselves Firemonkeys.
So the games that we're currently running include The Sims Replay, Real Racing 3, and Need for Speed.
No limits, previous titles include Flight Control and Spy Mouse.
So, let's go back to the beginning.
What did The Sims Replay actually start out being?
So sometime in 2009, 2010, the initial plan was to port existing premium mobile Sims title that the studio had to iPad.
I think in 2010, that was where the iPad was slated to launch in April.
And the studio wanted to take advantage of being the first mover on a new platform.
However, as the team near its end of its development cycle, the EA mobile label decided that instead of premium, it should go free to play.
At that time, that kind of made sense given the whole movement in social games on Facebook being free and very successful.
Next, it did not really make sense to be iPad only given that free to play games work best with a large funnel.
So therefore.
the plan was made for the game to be on both mobile and tablet.
So the label didn't quite understand or know what live services meant, because at that point, all we were shipping were premium titles, of which the expectation was really for us to keep the game around and kind of, you know, where the game would really only last for like one to two years of expected lifetime and revenue.
But as I'm speaking here today, since WePlay has been alive for more than seven years in live service.
So how do we do this and how do we defy the expectations of our longevity and the genre platform fit?
So it starts by anchoring ourselves to the product lifecycle, which I find is an interesting theory that fits quite well, particularly for the Sims WePlay and the way our revenue and performance is kind of mapped onto this theory.
So the seven lessons that we'll be covering today map alongside this, and there are different challenges in different stages of the product lifecycle.
And what I like most about the product lifecycle is that it reminds us that live service is a marathon, not a sprint.
So let's start.
Well, the first stage is development, which, from my personal experience, is one of the most challenging parts of game making.
primarily because you have no revenue and you have high uncertainty.
And as a product manager, you also have no data.
So I would, you know, I guess an analogy that I frequently use is it's like being stuck in a long, dark tunnel where you're walking with a group of people and hoping that you've picked the right direction to walk in.
So decisions in this stage have a large impact on the product.
So this is why the first lesson that we learned at this first stage is the foundation setter.
We were trying to answer the question, how can we start right?
So development is risky business and in 2010, the good part about being on a new platform is that you are at the cusp of crazy growth.
However, the other thing that's pretty bad about it is that you really don't have that many references of what good looks like.
You kinda need to figure it out.
In development, we ask lots of questions.
Things like, where do we start?
What do you build?
What should the gameplay be?
What should the meta be?
How are we going to attain, retain, and monetize?
And how can we make good decisions while lacking any data?
So I suppose with some good fortune, the Sims FreePlay team was able to leverage some of its existing strengths and manage some risk.
So as mentioned previously, FireMonkeys has a long, a pretty strong legacy of building mobile titles even before smartphones were around.
There was a similar team that had previously shipped premium Sims titles, so they were familiar with each other and also familiar with the brand on mobile.
So that was how we leveraged some of our strengths.
A key unknown was free-to-play.
The studio had no experience doing free-to-play.
We were one of the first free-to-play titles that were launched by EA Mobile.
And we didn't quite know how do you turn a sandbox simulation game to be free-to-play.
So how do we mitigate unknowns?
Well, you honestly make some guesses and just try to use your best judgment of studying some successful competitors in the market, of which clearly there was some in social Facebook space.
And I guess again, good fortune was that the development was time box.
Because historically, at least at that point, with premium mobile titles, we really needed to ship them quite quickly.
And you really couldn't take your own sweet time.
So that meant that while you were taking risks, you were forced to make decisions and just get it out.
So these are some of the foundations that we ended up picking.
Just so if you're not aware of how the game works, this is kind of like the core loop and the broad meta.
So players have sims who they just give them appointments.
For instance, in this case, we're asking sim to do a movie marathon.
Set up the appointment. It takes time.
And then in exchange, once it's done, you collect simoleons and XP, XP that.
you know, this gives you progression in your player level. And simoleons you can spend in something like the build mode store where you have small amounts of spend and then you go into the town map which is a higher level where you can spend on building more houses and community lots which lets you expand your sim town. So these were the foundations that we kind of set the game upon.
And so to summarize, the foundation setter, well, first thing is you need to be honest, leverage what you do know, and mitigate what you don't.
Generally, try to resist the temptation to innovate on everything, because if you do, there's too many ways that things can go wrong.
And lastly, there's no recipe for success, right?
Like there's no kind of fixed thing that you can do where you guarantee any sort of success, you just need to exercise your best judgment.
So for development, we're going to launch.
In launch, quite usually, you know, hopefully you're lucky enough that you get high installs and then with high installs, your revenue spikes.
Your return is normally not that great because perhaps your team is quite large at that point or maybe you haven't quite figured out how do you actually drive your key KPIs.
So in stage two, It's the puzzle solver, where we really try to solve the puzzle of live service, answering the question of, how can we set the game up for long-term success?
So to use Sims Replay as an example, at launch, this is what a DAU roughly mapped at.
The Sims is an extremely strong brand and well-loved.
So it naturally came with really strong installs.
However, you can see our DAU started to slide, and it seems like our initial life service plan wasn't quite working out.
So what was wrong?
So I think to answer that question, we firstly need to understand what life service actually is.
And the way I understand life service, it's like a puzzle which you have to kind of do under time pressure.
There's a couple of elements that you're working with.
That includes dev time, your spending development time to get some sort of output, of which the output then drives some of your numbers, like your installs, retention, and revenue.
So how best you solve this puzzle will determine your success.
Problem is that development time can be spent on multiple different things, like maintenance, events, content, new features, a whole heap of other things.
And it's how you find that balance of managing the input and output that effectively lets you get the best results in order to try to achieve some growth.
So different games will definitely face different problems at launch.
And in some free play, the first thing you had to do is really try to identify what was wrong.
So through updates, our live service plan was basically to put content directly into the Buildmode store.
Remember, again, this is more than seven years ago, and there really wasn't a lot of competitor games that could give us some guidance.
So put the content in the store, and then we saw the numbers, or our DAU saw the slide.
And the reality is that just putting things directly into the store really doesn't quite sustain DAU, because players can just consume the content immediately.
If I want that so far, I would just buy it.
I don't really need to wait four weeks to buy it.
And the problem was that the way we were delivering content was not giving us the return that we needed.
So we needed to really find a way to retain players for longer.
So how do we solve this problem?
We knew that, yes, the problem was the way we were delivering content, so we figured a different way of delivering it.
So one thing that the team experimented with was the notion of quests.
We started putting content behind quests, where players had to engage in a quest in order to win content at the end.
And how it works is really quite simple.
The update drops.
Players have to go through a quest for 5 to 14 days, actually engaging and sticking around.
And then if they're successful, they get to win the content as we want.
So this is some UI showing both the timer, the prize, as well as progression, as well as story that we have to write for the quest.
So it worked well in extending the content lifespan and helped to solve the puzzle.
And so as a result, we started seeing numbers start moving slowly upwards as we started introducing Quests more and more in our updates.
And DAU gradually started to grow.
So to summarize, lesson two is a puzzle solver, where the first thing you have to do is identify the key problems at launch, and then solve, use live services, and solve that puzzle of live services.
And solving the puzzle is actually really key to actually having a viable product.
If not, all your numbers start dropping, and it really doesn't make sense to continue, really continue running live service.
So after launch, we go into this is probably the best stage, because it's where you feel kind of invincible.
But it really is the growth stage.
where revenue starts to increase, you can start reducing your costs and your return actually increases. It's worth noting that, of course, if you take too long to actually invest in growth, and if you don't realize that you're actually, you've solved the puzzle and you're not, and you're kind of moving to the growth stage, you will be missing out on a chance to really quickly, you know, kickstart, you know, some of the growth of some of your numbers. So lesson three is the growth investor.
Where we try to answer the question here, which is how can we scale?
If you've solved the puzzle, you know what works, how do you scale?
So the Sims FreePlay is a simulation sandbox game.
And as explained previously with the quests, we work best, we basically know how to drive our numbers provided that we know how to use content.
And given that we've solved the puzzle of delivering content, now what we need to do is just increase.
One thing we need to do to scale is to increase content production.
First thing we did was grow the internal art team.
Now we know where if we build more assets, you can drive more KPIs.
The benefit about growing the internal art team as well is that it allows us to work more on outsourcing as well, which multiplies the amount of content that you can put into your game.
As a result, over the past seven years with every update, we've been steadily adding assets with every update.
Some numbers include like we have more than 6,000 built-in objects and more than 11,000 customization and coding options.
For a simulation sandbox game, this actually has the added benefit of making it really hard for new titles to compete.
And if you have any sense of how the market is, a lot of the titles that still continue to be in the top grossing actually tend to be quite old, because they actually get stronger over time.
By virtue of the fact that if it's a simulation sandbox, the more options they give players, the more likely they are going to just stick with the game, because it allows them to tell more stories and just do a lot more.
So the next thing that we did to try to scale and grow, invest in growth, was to reduce costs.
So we reduced costs through tools.
Tools help to reduce engineering time, which is highly valuable, and really shouldn't be spent on repetitive things like live events.
Engineering time could be better spent building features.
And the other thing that tools gave us was the opportunity to empower other disciplines.
Like for instance, we have the data tool for tuning where designers can just put in tuning without needing an engineer.
Same way with quests, when we knew that quests were working, we started to create templates for quests so that it was just, in general, there was less room for error.
And then design could put things in with minimal code effort.
We built sales tools so that PMs could create sales and rerun sales easily without needing any code.
And we also built a scheduler tool so that if we, in the event that we needed to move our events around or just push in new events, we could do it.
extremely quickly.
Another thing worth noting is that definitely there are economies of scale where the more we do something the better that we will get at it. So the third thing that we did to invest in growth was to actually look at the features themselves. So we knew that quests work, however of course once the quest ended you would see your numbers drop again. So what we figured was we should just chain all the quests together.
Where here you can see examples of the different quests that unlock at different levels, like cooking on the spin plant, or horses for instance.
And for simulation sandbox game, this is quite interesting because it gave players a path to progress, where they could unlock features, where if not everyone is extremely creative and not everyone knows how to set goals in a sandbox space, but now with this sort of progression that we're able to offer players where as they level up they get an opportunity to play through quests that unlock new features which makes them feel like they are really kind of growing and expanding the possibility of what they can do in the game. So this helped to strengthen our baselines in general and to give players something to do in between updates and in between events. So the fourth thing that we did to investing growth was this really cool thing where we started looking at user-generated content.
So houses are actually very expensive for us to build.
It takes an artist probably several days just to put a house together.
And this is just using our assets that exist.
However, it's highly demanded and valued by players.
As you saw briefly previously, there was a town map.
And players actually set goals on, I want to put all these amazing mansions on my town map.
But real problem was that we just could not afford to build them.
So we built this feature, which is one of our most successful features, called the Architect Homes, which allows players to submit their houses.
And we actually pick them manually every two weeks.
And we data push them out to players, allowing them to both preview and purchase.
I would say that this feature has been around for years.
And more than 80% of our houses are actually user-generated houses.
Effectively, this removes us completely.
With the exception of picking, it removes us completely as a bottleneck for content.
And it allows players to showcase what they've built.
And to a large extent, the things that they build are way better than anything that we could build.
So to summarize, lesson three, in the growth stage.
What you really want to do is invest in growth.
Invest in the thing that works, and clearly as explained, there are multiple ways of investing in growth.
You can gain efficiencies in content creation and consumption, that's basically the goal.
And if you don't know much about simulation games, really, they actually do get stronger over time.
And the opportunity cost if you can't scale, there's definitely opportunity cost if you're not trying to scale when the time is right.
So the paradox of content.
Well, it's easy to say, let's build a pipeline.
Let's just, we know content works, let's just build lots of content, right?
So we know that we need to build content.
We know how to build it.
The real problem is what should we build?
So this Afro guy says that if you build it, they will come.
But reality is no, that's not true.
And we learned that the hard way by building things that players just didn't want.
And the difference between a good content that people want and a dark content can be more than 50%.
An example that comes to mind is Christmas events tend to be our biggest and most expensive events because it's great seasonality.
So there was one Christmas where we decided to go fantasy. We were like, oh fantasy, you know, it would be quite cool.
The update dropped, the event started, and then on Facebook people started asking where's the Christmas event?
So there's a really painful lesson because players, you know, if they're not really into it, they're just not going to actually play it.
So lesson four is the keen listener.
And really we're trying to answer the question here of what should we build?
And surprise, well, at least for the Sims, we have great audience, so the players will tell you.
Since we play an audience, SKU is younger.
They're highly vocal with lots of opinions.
And the challenge, or the thing that we have to do, is actually just manage those channels.
So we use channels like Facebook, Twitter, EA runs this thing called Game Changers with our community managers.
We have forums, websites, and customer support, as well as internal channels where we actually ask questions like customer satisfaction surveys, user experience research. These are all the different things that we do in order to get a sense of what should we build, what do players actually want.
Some of the things that we can learn include what content do they want?
When it comes to surveys, we actually brainstorm a list of things like, do they want Venetian mansions?
Or do they want submarines?
Or do they wanna be in space?
We actually force them to stack rank it.
And that is how we use to prioritize our content roadmap.
We ask them things like, what would you like to see again?
And that's something that we also use to plan our calendar of reruns.
This is something that we can tell actually through telemetry, but because we have different sources of information, triangulating that is normally quite a good thing.
Sometimes you also come up with hypotheses of what some features might be, like for instance, professions or pregnancy.
These were all things that we had hypothesized and then we put into a survey and then figured which ones would actually work the best, so which ones were actually most highly desired.
And also understanding how the players feel about the features that we release.
For instance, you know, how many people are actually using the relationship system?
How important is it for them?
And trying to get a sense of should we actually iterate?
Should we spend any time optimizing this system?
Lastly, it's hard, but sometimes it is possible to try to understand some of their motivations, the kind of why, why do they actually want this thing.
It's challenging given that we are a simulation sandbox and different people have different goals and different reasons for wanting certain things.
But most recently we had done a customer satisfaction survey that kind of clarified something that gave us insight to something that we never thought of, actually.
So...
Hair is something that does very well in our game.
It's been doing very well for years.
It's something that players have always been, just an example of hair, players have been asking on all channels for years, and we've always, you know, we've started running like a hair hobby event, and we've since added more hair hobby events and more hair live events.
Our understanding of why players wanted hair was basically, we just thought that they look just like customization and hair is just cool.
And another thought that we had was that hair is actually, some, you know, hair means more because our hair that we had launched initially with the game didn't look very good.
So as such, players actually wanted more hair.
So in the customer satisfaction survey that we had run recently, we asked, why did you really enjoy this recent boutique hair life event?
And it gave us some insight that we never, it kind of gave us insight that we had never thought of, at least in the development team who have been building hair for years.
You know, we didn't actually realize this.
So the insight was...
Look at this. This is our sim tracker. The sim tracker is something that we use for, that players use to select between their sims because players have lots of sims. Some players have 30 plus sims.
And if we look a bit closer, you can notice something.
So, players actually want hair.
because sims have the same face.
And hair is actually, you know, cheaper for us to create than face.
But this was insight that we actually didn't realize because of us, the sim track is actually really small and, you know, the tiny little thumbnail of sims meant that players of, or same face sims meant that players actually couldn't tell them apart.
So with more hair options, they now had more ways of solving that problem in ways that we didn't ever think of.
So that's one of the things that you get to learn and I think it's pretty cool to learn that years after we've been beating the drum of hair is great because players just like hair. Turns out there's actual utility in hair for our players.
So to summarize, lesson four, the keen listener.
So we earn our target audience, that's pretty clear since we play as SKUs young and SKUs female.
We have to build multiple channels to both listen and ask questions because of how much it costs to develop content.
This helps to guide development and guide the way we do things so it reduces risk of things not working out.
And this is something that's really relevant all throughout the product lifecycle, although perhaps more relevant when you actually have a product out there.
So we move on to stage four, after growth, which is the real fun part, you go into something called maturity.
Here, your revenue kind of flattens, you can still continue to reduce costs, and your return is perhaps increasing but not as fast.
Hopefully you hit maturity years into your life cycle, and not immediately, because that would be quite strange.
Operating this long at a fixed pace of maybe six to eight weeks, you ship an update.
It is fast, it's fast-paced.
There's always going to be mistakes in live service, and so general issues that kind of snowball as you keep kicking the can down the road for many years.
So lesson five is the fixer, which is how do we recover?
So for mistakes in live service, there are several categories.
The obvious ones are bugs, of which if you worked in a simulation game, they're always very hilarious bugs, things clipping each other and whatnot.
As mentioned previously, there's Mistakes of not getting the content right, of which that's really hard to fix, right?
Like if you invested lots of days building something and you kind of need to launch it effectively, and then you just probably won't launch it again.
Next one is not getting the feature right, which is quite common, given that we, at least in 3Play, we don't really soft launch our features.
We don't really have a way of testing whether it works or not, other than playing it before we launch it.
These sorts of mistakes impact following, including stability, sentiment on social channels, and feature and event performance.
So in general, you kind of need to decide how you deal with it.
And like any good life service, you will need to have a triage process, which you kind of evaluate the severity, the impact, and kind of decide how urgent it is to fix.
using the different channels that we mentioned previously, you have to communicate transparently and as well as obviously, I guess, timely.
And with the other mistakes, you have to kind of try to find a way to deal with them based on the impact of what it's currently causing as well as the return of what it can get you, perhaps, if you solve it.
You have to consider both the risks to player sentiment and KPIs, given that we are a live game.
If you start changing things, players will notice and they will talk about it.
So are you prepared for that?
In general, rule of thumb is that if you are going to change something, it's easier to add something than it is to remove it.
So another, this is not really a mistake, but it's just something that applies if you're running a long-term life service.
It's the weakening foundations.
These are some challenging things to overcome in a state of maturity.
So one of the things that would happen is diminishing returns.
If you keep doing the same thing over and over, an example would be SimCount.
We give players SimCount if they level up so that they get to add more Sims to their SimTown, which is great.
But like anything that.
any reward, the first few times, maybe the first 10 sims is great, but by the 30th, 35th one, is it as valuable or do you still feel as much joy from getting it? Then they add a problem of course, scalability, like as previously seen, the sim tracker is going to keep, you know, you need a place where you have to keep scrolling through it.
The next thing is expectation.
So this is interesting because good design means that players know how to set expectations.
However, it also would hamstring us because something like quests, for instance, is a fixed way of doing things.
Players expect it to work in that same way.
And even if we find ways, problems with it, or ways to optimize it.
Players understand the rules, and they're not going to be super happy you start changing things around them.
At the same time, they've also ritualized and figured out a solution of min-maxing it.
So that's something that you need to take into account, knowing that the longer you run your live service, the more likely that players will have built up those expectations.
The next is anchoring.
On the PM side, you know, obviously if you anchor too low of a price, like what I mentioned previously, it's going to be quite hard for you to increase it, at least immediately.
And when it comes to rewards, we tended to go really big with our whenever we launched a new event, where we went, like, here are heaps of rewards, and here are super high quality ones at the same time, only to realize that we can't actually keep up that pace.
So that's quite hard, because in live service, players are like, but the other event was much stronger.
I expected more.
But yet, you kind of can't keep up that pace.
So we have to be careful and thoughtful in how we solve these problems because it is, players have been used to something and you can't just, you know, it's not great to pull the rug from under them.
So lesson five is immaturity.
It's the fixer.
It's normal and expected to trip up.
Sometimes they're game-breaking things, so that's where you trip immediately, or there's weakening foundations where you do a slow motion fall, basically.
You have to be prepared to fix bugs with an effective triage process.
And regularly try to assess the fundamental problems in your games, because it keeps changing as the foundations weaken and things change.
And consider solutions.
This we found quite hard to do when you have been working on a title for so long.
It's hard to take a step back and then evaluate what's Are we doing something wrong or actually what's happening?
And we found that a good solution to this is actually to bring new people in.
With a set of fresh eyes, we were able to find things like, you know, we were pricing certain things the exact same way because our engineering team was just duplicating the price and we forgot to actually price things. So these were all things that we uncovered when we brought new people in.
And finally, be both careful and thoughtful with weakening foundations.
So you can learn things clearly by making mistakes, but live service is primarily about launching and learning.
So in six-week cycles, you learn by building, measuring, and learning.
I look at every update as an opportunity to try new things and learn something.
So I think that's a good approach to have.
Two ways of testing hypotheses include launching and then measuring after, or of course, during A-B testing, or multivariate testing, where you are trying out different variables and seeing what works.
For both, a very important principle applies, which is we have to set up your expectations and hypotheses in both instances before you actually do the thing.
So this is one of the key ways in which you sharpen your judgment.
My personal view is that it really doesn't matter if you're completely inaccurate of saying like, for instance, if we do this thing, the uplift might be 10 to 20% and then in reality it might be 40%.
It doesn't matter because you took a stab at it and then, you know, it prevents you from falling into the trap of confirmation bias knowing like, yeah, I knew it would increase but you know, you said 10 to 20% so now you can adjust the way you're thinking to get closer to understanding how features perform in the future.
So lesson six is the validated learner, which is how do we really make sure that we are learning and not just trying a bunch of things?
So with A-B testing, general principle is to try to test changes where you're not certain on the impact.
If you really know that it's gonna do something, unless you're trying to optimize it further, there's really no need to test it.
A couple of things that we have done include optimizing the first-time user experience, where if you know anything about simulation titles, it's that there are heaps to teach players, and we wanted to reduce the number of steps.
The real problem here with Sims FreePlay, I believe, was that creating another first-time user experience was a really expensive task.
So that's the problem of A-B testing.
If you're going to test something that you've already spent so much time on, you are much more likely to just go with the thing that you spent time on anyway.
Fortunately, I believe in this instance, the test cohort was the winner, but only marginally.
The next thing that we wanted to test was quest progression.
So after five, six years of adding content, we actually found that we had the problem of having too much content.
And players were actually not getting to the content.
They were leaving before they saw the cool things.
So we figured, OK, maybe let's shake it up.
Let's try to get players to the content sooner.
And we wanted to shorten the length of time it took to go through the quest.
So again, this was a quite expensive endeavor, because you had to change a lot of the tuning, and you had to go through testing through the entire progression.
Again, here, the winner was the shorter quest, but however, only marginally, because my suspicion here is that time it takes is actually just one thing, one thing that impacts the decision of whether players decide to stay with your game and retain.
Another thing that we optimized was where features were locked.
Again, we had a hypothesis here was that if we put feature x earlier in the game, maybe they will retain better because players now have access to more features.
So this, again, fell into the, I think, again, we didn't quite realize that we still had a problem having too much content.
So moving more content earlier, again, probably really didn't do anything in this case.
So another thing worth noting is that be wary of the cost of testing every small change.
Because every time, at least on Sims 3 Play, it wasn't super cheap to do everything.
It was reasonably cheap, but it was still time.
It was still time setting up the test, figuring out what we should test, as well as QA time.
So when it came to validating learning.
in the stage of maturity many years down the road, one of the things that we actually found was very hard was storing the lessons as memories.
So most ideally, you imagine that we're spending years of doing something and all the mistakes and lessons that you've learned, we would like to build on the lessons of the past.
However, this is a major challenge as we age because team members really, in reality, do not stay on the title forever.
and that knowledge is normally, you know, disappears with them or at least different bits are left behind but not everything is left behind. This is hard because the team executes better if they understand why and how we got here.
We don't have answers for this.
We don't have great answers at least.
We do have some things that we do with discipline, like we do an update telemetry review after every update, looking at our performance, looking at the things that we've tried and how they perform.
We do some basic documentation, and we do things like that, just like as give talks, and hopefully there's some hand-me-down lessons that the new team members will learn.
I really discovered that this was an issue when our team was trying to figure out what can we do with Quest?
And this was seven years in, and I came to the realization that most people had no idea what had we tried before and what worked, what didn't.
And in fact, a lot of the best practices that we had put in place previously had just been rolled back because of the different handovers that we had to keep doing as we changed designers, as we changed PMs.
So what we did at least was the PM team put together all the different analysis that we had done on Quest, which was heaps, because we had tried anywhere between 10 to 15 to 20 different new things with Quest in the course of the years.
And the good part was that they were all documented in telemetry reviews.
So we created this massive Quest retrospective document, PowerPoint that we then presented to the team, explaining what worked, what didn't, what drove numbers, what did not, and where the opportunities were.
And we presented it back to the team.
And once we did that, we found that at least everyone started with close to the same amount of information, which then allowed us to then build on top of that in terms of what else can we do.
But this is a lot of effort.
And this is something that we really have to take into account as we go through hopefully what will be a very long life service.
So lesson six, the validated learner.
Every update is an opportunity to learn.
Set up expectations ahead of time in order to improve your judgment.
A-B testing is generally a really good way of measuring impact as well as uplift.
And lastly, have a good plan to store lessons so that new team members can avoid making the same mistakes.
But granted, sometimes people do have to make mistakes in order to learn.
So this is kind of like, you know, we just have to figure out how best do we do this.
So the product life cycle is, I guess, a very convenient theory and hypothesis.
You'll find that not every game kind of matches it really one-to-one, but that's not really the point.
The real challenge, you know, it's not really about knowing how the stages work.
It's actually about knowing how long each stage lasts, because for every game it's different.
Some games, well, unfortunately they don't last very long.
For some games, like some 3Play, they last a long time.
And the challenge here is that, you know, if you don't really know how long you're going to be in each stage, how are you really going to plan and act for the future when you might feel like, oh yeah, I can be in maturity forever, that's great.
But you know, there's a whole point about knowing the product life cycle, it's knowing what's next so that you can act now.
Because after maturity, we go into decline.
Here.
Your revenue decreases, your costs stay the same, and your returns reducing.
So it's, you know, the reality is nothing ever stays constant when there's competition and the market shifts every day.
So it's only natural that we're constantly fighting aging.
Given some sweet place age, we face declines multiple times, and it's natural, and we constantly have to fight to stay relevant.
So why do we find ourselves in this state, and how do we get ourselves out?
So the first is the paradox of strategy.
A strategy works when you're in that life stage, but then it normally stops working once the context changes.
And context changes can happen when the markets change in terms of growth, like I showed the chart of smartphone growth, for instance, you're clearly not in that state anymore.
Installs are stabilizing, if not decreasing.
The market size, if it stays the same, preferences change, competitors come up.
And formula reliance is great when you actually know that you can invest.
But then there's a problem once you move out of that phase.
So what happens is that it ironically puts us in a path towards both player and developer fatigue, where they've been doing the same thing and expecting the same thing for a long time, when they really actually want something else.
So the real hard part that we found is that it's particularly challenging to build for a difficult stage, to tell the team, for instance, like the good days are not gonna stay forever when you are in the good days, right?
Like that has always been quite hard.
So lesson seven is the perpetual challenger, where we really try to answer the extremely difficult question of how can we live forever?
And it starts by really acknowledging that after years of doing the same things, or similar things, or trying new things, that we've built up a legacy.
And the legacy is shackling us.
So this is a term that our producer had coined to try to, you know, encourage the team to think differently, that we have to break the legacy shackles.
The main challenge here is that we are spending development time on things that don't work as well anymore.
Hence, reducing, you know, reduction of our return due to things like weakening foundations.
We are doing the same thing by getting just less in return.
Processes were set up for us to do the same thing over and over, when in reality, we actually should be trying new things.
And we have to overcome inertia by identifying what are the key problems again, which are now different, and build innovative solutions.
So if we can do that, then effectively, you kick us into a new stage of sort of like growth, but it's what you would term in the product lifecycle as the product extension.
So this kicks us into, you know, gives us more life, it gives us more years.
So how do we do that?
SimCity Play has done this multiple times by developing entirely new features that give new experiences to players.
And each time that we do that, we are finding more ways to stay relevant.
So we do so by embracing reinvention, where our goal here is to take a longer horizon when it comes to developing features.
We are trying to build something that has longevity for two to four years, not just let's build something where players can consume it in the next six weeks.
Because if you do that, then you'll find yourself very quickly ending up in a decline state.
Next thing is, it's very important to align the team.
You need to stay ambitious.
So that's interesting.
I mean, that's in the maturity phase where you go, you know what, the numbers are not really moving.
We actually should try to kind of push them harder.
And embracing change in order to get there.
When we develop features, we develop them with the goal of really hitting three different things.
One, they have to hit our hopefully new and ambitious business goals.
The next is they should hit what the players want, which we should have figured out by being keen listeners.
And lastly, they should also fix some problems that we would definitely encounter over time.
So that's ambitious, but you're basically trying to build something that hits all these three goals.
some features that we've introduced over the years that have managed to move the needle include we shipped a new live event system, where the goal here was to actually remove, reduce design time substantially, and allow us to kind of push our content to players with minimal effort, while still allowing players to earn lots of content.
So by doing so, we basically were able to grow the live ops return, and save a lot on design and code time, which can be used on feature development.
Another thing that we did was professions, which we had found was something that players had wanted.
This grew the baseline.
It helped to solve a problem of not having second-to-second gameplay in the game, because the game is basically all about appointments.
Next, we built Pregnancy and shipped it last year, which was one of the most highly demanded features.
Again, the goal here was to grow the baseline and reduce...
reduced amount of effort that we had to spend in maintaining more event systems.
So here, players could actually, they could just opt in to a pregnancy event.
And they just go, yes, I want to start this pregnancy event.
It lasts for nine days.
And they get to go through the experience of pregnancy.
Or at least the sim gets to go through the experience, and they get to win cool prizes as a result.
The last was the VIP system, which was a hard one to attribute any lifts to, but what we found was that in the CSATs, lots of spenders actually reviewed that that was one of the key motivations for spending.
So that was actually quite an interesting finding.
So lesson seven, in the state of decline, we're trying to kick ourselves into extending the product.
we really have to be perpetual challengers.
Because firstly, it's too easy to cruise on success, especially when the good times are here.
And we have to have ambitious goals, or keep trying to do better, and have actually good plans on getting there.
It helps to think long haul, because life service is a marathon, not a sprint.
And develop features that satisfy your business goals, player wants, and fixes the problems of your game.
And lastly, be prepared to face the legacy that has obviously been built in the game.
So there we have it, the seven key lessons that we've learned over the seven years across the product lifecycle.
Clearly we've been quite busy.
We've had to set foundations, solve some problems, invest in growth, keep listening, fixing things, making sure that we're learning and constantly challenging ourselves.
The lessons have been the blood, result of the blood, sweat, and tears of many of the team members who have cycled in and out of the team over these years.
But fortunately, these lessons remain, and as we get new team members onto the project, they still continue to actually guide the way we operate.
It's a strong legacy that we've built that keeps us alive, and hopefully we'll do so for the years to come.
So finally, some key takeaways.
One, the product lifecycle of free-to-play games.
This, at least I personally feel, reflects quite well on what a live service works, at least in Sims Replay.
Performance actually quite clearly maps onto this very nicely.
Where we have to understand the stages and determine the one that you're in.
And then once you understand that, be prepared for the challenges that are coming or the challenges that you're already facing.
I've dropped some tidbits about how simulation games actually work, and primarily they are very content-driven.
And as a result of surviving for longer, they actually get better over time.
Lastly, free-to-play live service is hard but rewarding.
And there really is no recipe for success.
It's just an approach of understanding, this is roughly how a live service is going to work.
This is how the product lifecycle is going to be.
Then how best should I navigate these waters?
Because you'll have different problems.
Your game will have many different issues that are not issues that, say, a simulation title like Sims Replay would face.
But with the right approach, hopefully you get to learn multiple lessons that will both determine your success as well as shape your future.
So to conclude, finally, well, the at launch or even before launch, the Sims Replay team, I don't think a single one of them ever thought that we could have ever made it this far.
Right?
We never thought that we could turn a premium simulation sandbox game into a staple that millions of players continue to play and continue to love.
So if there's anything that you can take from this, it's really just to be brave, to keep learning, and then go out there and defy some expectations.
Thank you.
I believe we have some time for questions and also a reminder to rate this talk.
I have a question.
Yes.
During the development phase, obviously, there's a ton of uncertainty.
You don't have that user base to get the information.
What would you say are sort of the baseline indicators and metrics, however sparse they may be, that you're looking for before you actually launch a game?
Because it would seem kind of like a bet the company kind of thing to come out with a game without having some level of understanding about how well the game is going to do.
So.
Given that, say, you have some reasonable amount of time to sort of build up maybe a smaller user base to kind of learn, what are sort of the things that you would try to hit before launch or have some trending metrics that would give you a good understanding or some measure of confidence that the launch is going to be not a complete failure?
Yeah, I think when Sims 3Play launched, that was when there probably wasn't any good best practice around what to do at launch.
But of course, more recently, at least in the past few years, we do lots of soft launches, or betas, and things like that.
I would say retention is probably the first thing that you look at.
But like anything, as any product manager would do, you are making assumptions on everything, like acquisition, installs, your retention, as well as your monetization.
If you can't keep your players, there's no way that you can drive any revenue.
So I would say retention is a big one.
But I'm actually personally quite interested in how do you actually forecast installs or test installs, which so far, I think there are some ways, but I haven't quite figured it out.
The way of mitigating that risk is using strong IP, like the SIEMS, which is clearly an advantage that we have.
But definitely, retention will be the thing that I'll be looking at.
Quick follow-up, is there a specific retention sort of number that you look at or?
Well, it really is, you know, short term and then you go into your mid and then your long. Yeah.
Any other questions?
No, if not, That's it. Thanks for coming.
