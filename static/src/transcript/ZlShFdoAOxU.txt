Hi everybody.
All right, mind your step, avoiding three common pitfalls in AI development.
This is a talk for beginners, as they've said, for people who start out.
My name is Jan Muller, I work for Insomniac Games as a senior engineer.
These are some of the games that we shipped in the last five years while I was working there.
The last game I worked on is Sunset Overdrive for Xbox One.
Excellent game, if you haven't played it, you should check it out.
We have a bunch of games coming out, actually.
Ratchet & Clank is coming out for PS4.
Looks amazing, you should buy it next month.
Some of the deepest in development, and for Oculus Rift, we're working on The Edge of Nowhere.
But I'm not going to talk about any of these, or kind of about all of these.
Most of my examples will be from Sunset Overdrive.
Alright.
Mind your step.
is about high level AI design ideas.
It is for beginners, it is for all experience levels, for programmers and designers.
There's no programming in here, there is no pseudocode.
It is divided into three parts.
The first part is called, your AI does not excel in the abstract and generic.
The second part, the buddy AI is not your friend.
And the last part, escalation is the mother of all challenge.
But overall, this talk is really about memorable experiences and how to make AI that's memorable and that carries your game. And there's only one number in this whole talk that I would like you to take away, which is 50%. 50% is how much more memorable your AI should be if you do all this versus not doing all these things I'm talking about.
All right, first part. Your AI does not excel in the abstract and generic or how to create memorable behavior.
So the idea is, you start out on a new game, you work on a new agent, and you're asked to make something unique and something memorable because the AI has to carry the game, bring in the players, engage them.
And you might have some existing code.
You might have a database, we have a shared code library in some of your games, with behaviors, behavior trees, all the base code that you can reuse for other projects.
And you might want to mix and match those behaviors to create something new.
And the pitfall here is simply to fail to create something unique from abstract systems.
And I will explain that ongoing.
So this is an example.
It might look very different in your game, and it's also just prerequisites.
I will go through this pretty quickly because we will get to the interesting part later on.
Let's say you have some collection of components or just mechanisms in your system.
Maybe it's just design documents.
You have some movement components, some awareness, some combat components.
And it might look like something like this.
So you have some walking, some flying, and some swimming.
You have line-of-sight awareness, omni-awareness, and audio awareness.
And you have ranged combat, melee combat, and area-of-effect attacks.
And then you can combine these, right?
You can say, okay, I want to create a bot that is flying, that has line-of-sight awareness, and has an area-of-effect attack.
And that might be something like a dragon.
Right?
Flies over you, sees the player, shoots fire.
Or you go ahead and you create something like, oh, it's walking, it hears you, it listens to your footsteps, and then melee attacks you.
That might be something like a clicker from The Last of Us.
So out of these components, you can create all kinds of different bots and all kinds of different behaviors, and that's great.
That's super efficient, that's how programmers should think, right?
You reuse what's there.
The issue is, none of this deals at all with how the player experiences your AI.
You have no idea whether you made two bots that are actually different for the player, or just different on paper.
So to look at it a little closer, you have to put on your designer hat, and you have to look at mechanics.
How does the player actually interact with your AI?
And that might be looking something like this.
you think about the player, you think about, okay, the player has to catch up, flank, or run away, the player has to take cover, or move really fast, or strafe to break line of sight, or break awareness of the AI, or the player has to run and gun, or get close up, or snipe from a distance, and now you can combine the mechanics from the player's perspective and say, okay, I want to create an AI that you have to flank, then you have to take cover and snipe from the side, and that might be an enemy that's really strong at the front, or really strong in close range.
Or you say, okay, I want to catch up with the AI, be really fast and run and gun it down.
That might be an AI that is harder and harder over time and that you have to take out fast.
This helps you, this helps you to really understand what the player is doing, right?
Whether the experience is unique for the player and whether one AI plays differently than another AI already in planning phase.
But is it memorable?
And what does it mean to be memorable?
Do you need a category of memorable mechanics?
And what would be in here?
Would it be like literally memories that you put in here and the player generates those somehow?
So to answer these questions.
I have to go a little bit into neuroscience.
When you read about memory and how memories are created and how memories are getting stronger, you will find that cat pictures are really memorable and that you should have them in all your presentations.
And I assume this worked.
I assume this picture is more memorable than the last 20 slides.
Because either you love cats and this is cute and you think this is a good idea, or you think this is stupid and I shouldn't have done this, and you hate cats or are allergic or something.
Either way, you probably have an emotional reaction to the cat picture.
Because when you do read into the neuroscience, you will hear the term emotional arousal a lot.
It's a very general purpose term. It basically just means anything that is off your neutral zone, anything that gets you out of your comfort zone, positively or negatively.
The father of the research in this, Professor James McGaugh, he's actually a California local, and he started studying this decades ago.
Memory and Emotion is one of the books that you can read up on this.
And basically what he did is he took two groups, one of them were looking at kitchen sink objects and the other group was looking at emotional arousing things like dangerous animals or crashes, mutilated bodies, stuff like that.
And then he asked afterwards, how many of these pictures do you recall?
Do you actually remember what you saw?
And the result was something like this.
Neutral objects and arousing objects.
The arousing objects were a little bit more memorable, about 20%.
Not 50, about 20%.
So he said, yeah, there is a connection between emotional arousing things and memory.
And he also said stress hormones can strengthen that memory.
Which just means, like, this picture is memorable, but this might be more memorable, especially if you actually encountered nature.
It's also the reason why I will remember this talk more than you.
And I will talk about it later some more.
So, thinking about all this, what does it mean for gameplay?
When you think about emotion in games, you will probably come up with a bunch of cut-scenes.
You will come up with moments that had, like, set-piece moments where someone was dying that you were fond of.
You will not find a lot of gameplay, but maybe some.
And I will bring some examples of how we do emotions in gameplay.
These are goals. These are the red, green, and blue, the simple emotions.
Positive emotions, synergy is the emotion of working together, and aversion is a negative emotion.
And by goals I mean the player might not like what you do. He might disagree.
So you might want to try to do something likeable and cute and the player thinks it's stupid.
Or you might do something that's supposed to be aggressive and nasty and the player thinks it's really cool.
But at least you get some kind of emotional reaction which, as we learned, is better than no reaction.
So affection.
Positive emotions.
What you want to do is you want to create some bonding moments, right?
You want to have lovable behavior.
Sounds funny, but one of my first memories of games that I still have in my mind it's not quite true one of the first memories of this was twelve years ago in Half-Life 2 you met Dog, the big mechanic robot and he looked kind of scary and the first thing you did with him is you played Fetch You were shooting a metal ball and he fetched it, caught it, and brought it back to you.
And you learned the mechanics and you learned to fall in love with that companion AI.
And we basically, in Sunset Overdrive, the last game I worked on, we basically just stole that idea.
We had a dog robot that actually looked like a dog, and when you met him, you learned to love him.
I will show a video of that.
And there's no audio.
Why is there no audio?
Yeah, you like playing fetch?
You want me to throw this thing for you?
Bark!
Hmm, how can I make this fun for me too?
How about...
Hell yeah!
Hey Sam, I got this stupid dog excited.
Now how do I reboot it?
Not the best news to break to you, but Margaret has to do that here.
All right, so what do we do there?
Well, there's obviously the plain things, like it's friendly looking, right?
It looks like Hello Kitty or something.
But there's a lot of behavior about this dog that tries to make it look friendly to the player.
It wags its ears, it wags its tail, it does a little happy dance whenever you interact with it.
It actually looks for attention.
It barks at the player and looks at the player and tries to get your attention when you look away.
All these things are trying to get the player to fall in love with the AI and play with it.
The second example is synergy. It's one of my favorite things actually in games.
It's the feeling of collaboration and working together and codependence.
It doesn't happen very often, but when it works, it's great. It's probably the best thing there.
My favorite example of that is Journey.
In Journey, you find a lot of floating creatures that you interact with, that you rescue, and then they play with you and they energize you and bring you forward.
And I will show a quick video of that too.
rescuing the dolphins or carpet creatures.
And they will call out to you and you can answer.
They will encircle you and when you call back, they actually pick you up and help you out.
And that is energy, working together with AI.
Alright, the last one, just as an example, aversion, negative emotions.
You will mostly find it in bosses, right?
When you think about negative emotions in gameplay, it's almost always the main villain.
Probably just because that's where we invest our time, right?
We don't have a lot of time to work on emotions with your foot soldier.
Aversion, dislike, betrayal, negative emotions, taunting often plays a big part in it.
My favorite example from other games is Wesker, who in Resident Evil, he's a friendly NPC originally in the first one, and he turns on you, he becomes evil, and this becomes part of his behavior.
He does evil things.
As you will see in the video, he's teleporting away from your bullets and he's sucker punching you and he's generally sucky to play against.
evil dude, teleports, and sucker punches.
Alright, in Sunset Overdrive, we had Fizzy.
Fizzy is our permanent aware AI that's kind of taunting you throughout the game, and you have to fight her multiple times.
And she's trying to taunt you both outside and inside gameplay.
And here's an example of that quickly.
Hey, it's me, Fizzy!
Trespassing and destruction of property is a serious crime!
Get ready to die, half-wolt!
A giant glyph is attacking me!
This girl's marketing is getting really aggressive!
Hey, you know what sounds like fun?
If you stop moving for a second!
Right, Fizzy says basically, please stop moving so I can kill you.
All right, so to recap the first part, creating memory experiences, memory behavior, is about the interaction of the player first, right?
Like you have to look out at unique interaction.
And then it's about emotion.
You find some emotional connection to the AI, whether it's positive or negative, and that will strengthen your experience.
At the end of the day, you oftentimes have to create some kind of one-off behavior, something that only happens once just to build this emotional connection.
For example, in our case of the dog, the whole dog park is one large set of interactions that only exist for this purpose and that are not being reused afterwards.
So Pitfall Avoidance, first part is over.
We can create memorable behavior.
We know that we need some kind of emotion.
And we know that it has something to do with strengthening the emotion after the effect.
The next chapter will be specifically about body AI.
And I put this in here because buddy AI, a lot of the things that I just said apply to buddy AI, but buddy AI has very different challenges than your average enemy or friendly AI.
The chapter is called the buddy AI is not your friend, or how to design the buddy AI around the needs of the game.
By buddy I mean a lot of different things here.
I mean all kinds of friendly AIs that play with the player and are part of the game.
Some people call it companions, some people call it team AI, all of those, all of these guys are meant.
Right?
I mean something like Elizabeth, I mean something like the RoboDoc I just introduced, I mean teammates and squadmates, all of them.
So the scenario is this.
You're working on Buddy AI.
And you know Buddy AI has special needs.
It's really hard to get people to agree on what is good Buddy AI.
And you might think, I want to model the AI after what the player wants.
And it sounds like a good idea.
The pitfall, I will say right ahead, yes, pitfall of the game, is to build up player entitlement.
And to explain what I mean by that, I will first give you some examples, then spell it out for you.
All right, so first example.
the buddy AI can revive you.
You are working on some team shooter, and the player goes down, and there's two or three AI teammates, and they can come and revive you.
Why wouldn't they?
But you have no economy, you have no health packs, or instant death, or timeout.
And then you get into a real problem, because technically you can never die.
The AI can always come and revive you, right?
And even if the AI fails for obvious reasons, like getting shot, the player will not accept that.
I had that problem actually in Fuse, where we had exactly this issue, where it went so far as the AI would come over, would bend down to try to revive you, get shot in the head, and the player would still say the AI failed.
The AI sucks.
Another example.
Buddy AI supports combat, fighting with you is part of the setups, and there is no tracking of the player progress.
Nothing that checks how many people the player shot or whether he pushed forward the combat.
And then you get YouTube videos of Call of Duty Black Ops that play themselves and the player just watches.
And you can argue that's what this game is supposed to do.
It's not about challenge, it's about feeling in the middle, you don't actually have to play.
But at the very least you're not matching the player expectation here, which is I'm the hero, I'm the most important person in this game.
The third example, this is really contentious.
Every time I talk about this, there is 50-50 people who agree and completely disagree with this.
The buddy AI gives you ammunition.
There is no rules on how much.
You just press a button, you get ammunition, and you get really used to that.
And then if it's missing, you get really annoyed, or at least I get really annoyed.
That is my one problem with Elizabeth.
She is amazing, and I will talk about how amazing she is later, but this is my one issue.
I get annoyed with her when she wasn't there or when she wasn't working.
And the fact that half the people agree and half the people don't agree with this just proves my point that you never know what people expect.
So player entitlement is about spoiling the player. It's about giving the player what he wants until he either doesn't care anymore or he's really upset when it's missing.
And it's also about different expectations. Everybody wants something else from Buddy AI and you can't really guess what it's going to be.
For some people this is sushi and it's amazing and for other people it's raw fish and they don't want it.
So, you might want to go about it differently.
At least I do.
I'm trying to, when I go for body height these days, I'm trying to model it around the needs of the game.
And that sounds very obvious, right?
It sounds like, oh sure, we all try to make the game better.
That's the goal.
But what does it mean, and what is really helping the game?
For me, there's three categories. These are my categories.
You might agree, you might have different names, you might mix and match them, which sometimes works and sometimes doesn't.
But these are my three categories.
The teacher, the VIP and the soldier.
The teacher explains the world, right?
He is there to give you the background, the plot, the story, explains to you why you're there.
The teacher is leading the way, showing you around, leading you by the hand, showing you a door, showing you a loot crate.
Maybe it's a dog that finds some equipment for you in the world.
But the teacher does not fight normally.
The teacher is an academic, doesn't care about combat.
And that's really where Elisabeth is good. That is why I like her. Not the other thing, not the giving me gifts.
That is where she's the best at, I think.
The second category is the VIP.
VIP is the purpose of the game, the purpose of the mission.
It's really why you're there and why you're playing this.
The VIP cannot die.
Meaning, either the VIP is immortal, or if the VIP dies, you're lost.
And that's usually where you find codependence, where like you save the VIP and eventually the VIP will do something for you.
My favorite example for this is Ellie from The Last of Us.
Without spoiling anything, she is the reason you make you play this game and more important than anything else.
The last category is the soldier.
The soldier is everybody who fights, everybody who supports combat, either just helping the player or just being fluff, being background, making the combat larger.
And most importantly, and that's really important for me, the soldier can die and it shouldn't matter.
Like, if the AI does something wrong, if the AI goes down, it shouldn't at all influence your game.
Any team shooter has soldiers like this, right?
Like Halo or Call of Duty.
Things in the background that don't really matter for the player.
So you can mix and match those.
But if you, for example, create a VIP AI that is also a soldier, you basically just create an escort mission where it depends on the AI whether your game progresses or not.
So, what happens if you don't work for the player's needs, right?
Why should the player care about all this?
Well, for all the reasons I explained before.
The player should care for an emotional connection.
He should care because he likes the AI.
He should care for story and character reasons.
And lastly, he should care because you play together with the AI.
The AI saves you, you save her, works together.
Alright, to recap this part.
Prevent player entitlement. Be very careful about your assumptions about what the player wants and that you think you know what actually makes the player happy, because everybody has a different expectation here.
Design around the needs of the game. If you can, think really hard about what your game is missing.
Is it missing some story explanation? Is it missing someone who leads it by the hand?
Is it missing a purpose? Like, why am I doing all this? Why am I fighting?
Fill that need.
And finally, motivate through story and emotion.
Think about how you can get an emotional connection and motivate through that.
Pitfall avoided.
We know we need some emotion.
We know that the buddy AI can spoil the player and we have to be careful about it.
We can make good friendly AI, but we haven't talked at all about enemy AI.
So the last chapter is solely about enemy AI and it's wrapping it up.
The last chapter is called Escalation is the Mother of All Challenge.
Or, Why Repetition is Better Than Its Reputation.
So, to repeat myself, we're talking about memorable experiences, right?
We're talking about how to make the game memorable for the player.
And you might wonder, what does it have to do with challenge?
Well, you remember the study I was talking about before, of Professor McGaw, who was taking group A and group B, and group A was looking at kitchen sink items, and group B was looking at emotional arousing objects?
Well, he did some more work on this, and one of the sentences you might remember is, stress hormones can strengthen memory.
So what he did there is the so-called ice water trial.
He basically took the two groups, and he split them up again.
And one half of them would just get a bucket of warm water and were asked to hold their hand in it.
And the other one was given a bucket of ice water and asked to hold their hand in the ice water until it really hurt, until they couldn't hold it anymore in there.
Basically he was torturing them, right?
So the result was this.
As soon as you mixed emotion with stress, with pain, your memory would jump up.
50 plus percent better recollection of what just happened.
And the interesting thing to note here too in this chart is on the right side are the neutral items, on the left side the arousing items.
So on the right side you can actually see that stress, when induced on the neutral items, reduced your memory.
It really only works together when you mix the two, stress and emotional interesting items.
that makes memory strong.
So, to talk about challenge here, let's say the goal is we have some combat set up and you're asked to make it harder or make it longer, it's too short, it's too easy, fix that.
And your approach might be to repeat an existing behavior, an existing mechanic, three, four, five times.
And it totally makes sense.
That is the right approach.
Because repetition is really good for your game.
Here's a quote from Ziggy Ziggler, the father of all motivational speakers.
Repetition is the mother of learning, the father of action, which makes it the architect of accomplishment.
And this really speaks for action games.
That's what we do, right?
That's what it's all about.
We want the player to learn.
We want the player to repeat the behavior, get better at it, get skill over time, and then overcome the game, beat the game, feel accomplished.
And also for developers, this is really important because we can reuse our work.
We can have the player fight the same AI 50 times instead of making 50 different AIs.
So repetition is good.
The problem is, you can very quickly cheapen the experience for the player.
If you do the same thing over and over, the player will get bored, right?
He will feel too skillful for what you throw at him.
He will think that you didn't come up with anything better.
So the approach that people take oftentimes, that I took in the past, was to say, okay, we add some weak spots.
We add some turrets.
You have a giant monster and it has five turrets on it, and you have to first destroy the turrets.
And the turrets shoot little rockets.
That is a really bad idea.
And here's why.
Destroying weak spots, especially if it's weapons, is kind of like cutting off the heads of a hydra.
Hydra is obviously the giant serpent with seven or ten heads of the old Greek mythology and it was fighting all the Greek heroes and you would cut off some heads and you would cut off some more heads and cut off some more and now the combat is boring and sucks because there is no heads left and it's just like a snake, right?
And the Greeks knew that, they were smart in that.
They knew they needed a real challenge for their heroes.
So they said no, no, no.
the heads grow back, or even better, every time you cut off a head, there's two heads coming out.
And that's really how you get challenge.
You really make the player think about it, and if you do something wrong, it's going to get harder.
So instead of thinking about just adding weak spots or just doing the same thing over and over, add heads, make it harder every time you progress through the combat.
Make it harder with each step, and increase the challenge.
Because the player learned something, the player got better, so your challenge has to become greater.
Alright, so think of this as escalating the combat.
Like think of your enemy like a wounded animal.
Think of it like what would happen if the enemy was scared, it was in a corner, it was more defensive or more aggressive.
Add attacks, don't show everything at the beginning, actually hold it back and during the progress of the battle bring out your extra stuff.
Scale combat intensity. This is really easy for programmers. Just put in some sliders.
Put in a slider of how much damage output you do per second, or how fast you react to the player, or how quickly you mix things up. And as the combat progresses, you just scale it up. In other words, build escalation in your enemy AI behavior. Turn this little puppy into this angry dog over time. Some examples for this from Sunset Overdrive.
There's the Hercar.
Hercar is this large thing in the middle.
He has a giant claw.
He's dangerous when you get close to him.
He has really strong melee attacks.
But if you wait for too long, he will collect smaller enemies.
If you don't take him down, he will collect them, they jump on his back, and he will start throwing enemies at you, literally.
So you want to be fast about him.
You don't want to ignore him.
He becomes dangerous.
Or another example is pretty much any boss in Sunset Overdrive.
They all are set up in phases.
They start out slow, they start out sluggish, and become more aggressive over time.
This is the Norton Dragon.
It's basically a giant penis-shaped creature that flies through a city.
And you're supposed to follow him and jump on his back and hit his head.
And every time you do that, he becomes more aggressive.
He will start throwing spikes on his back.
He will start shooting fire.
He will set the city ablaze and try to stop you from catching up with him, right?
So build escalation in your bosses.
To recap, repetition is the mother of all learning.
Escalation is the mother of all challenge.
Pitfall avoided, we know we need to create some emotional connection, we know we have to be very careful about body AI and assumptions with body AI, and we know that if you add stress, if you add pain, if you try to torture the player, well not trying, but if you add some stress level to the player, you will get a better response, you will get more memorization of what's going on.
Thank you for listening, please give me feedback after, there's like two minutes left for questions.
As you mentioned, we do have three minutes left for questions.
Please use the microphones in the aisles so that it shows up on the video.
Anybody have any questions for Jan?
Well, I will kill time for a moment.
He touched on a lot of interesting things, and Jan and I actually have to have a beer after this to talk about it.
A lot of neuroscience, a lot of psychology, and that's very important, it goes into AI.
As a matter of fact, I don't know if Brian's in here, but Brian Schwab and I did a lecture here in 2012 on psychology and AI.
And so it touches on not the same stuff, but very similar things about how we can engage the player.
through what they sit down at the computer or at the console with, is that they're built-in hooks of psychology.
And so the things that he was talking about here, about being cognizant of as a designer, for that matter, or an AI programmer, you might want to pick that up.
It's for free on the GDC Vault back in 2012.
Just look for Psychology in AI, or my name, or Brian Schwab's name, and you'll find it.
But it's also very similar.
And that's really an important thing for us to be aware of as game programmers, because that's all we're doing, is dealing with people's psychologies.
So, I don't see anybody coming up for questions.
You can just, if you want.
Otherwise, we'll go ahead and cut it off here.
Oh, go ahead and step up to the mic, please.
Go ahead, yeah.
Hey.
Great talk, by the way, man.
Thanks a lot. Thank you.
So you said the soldier's death is always relevant.
Not always.
I prefer it to be irrelevant.
You prefer it to be irrelevant.
Okay, that makes sense.
I was just like, in my mind, is that because you want to ensure that the death is something that the player can prevent?
to allow it to be fair.
If the player really needs prevent the death, then you're basically making a VIP, right?
Like you're making someone who's important for your existence or for the game.
The soldier is really more the, you have large scale combat, you have 50 AI fighting other 50 enemies.
That's the soldier, right?
Like it's the fluff in the background.
It's not so much about someone the player cares about.
If you have a squad, like a teammate, that if he dies, the game is over, you create a VIP and you want to have some kind of collaboration.
You want to have that, oh, I save your butt, you save my butt behavior.
Okay, thank you.
Hey, how you doing?
Also, great talk, man.
I just want to be, something I just want to clear up.
The soldier AI that you were talking about, it's not the same as the buddy AI, correct?
You can argue that a soldier is also a buddy, in a way, right?
But it's a buddy that is not, usually not emotionally connected to you.
It's more like, oh, I'm going out in the field with my 50 squad mates.
I might care that they die, but it doesn't matter for my experience if they do, necessarily.
It just adds to my experience.
Okay, I guess, like, you know, I'm still thinking, like, um, like, you know, a difference between, like, um, the Marines in Halo that would occasionally join you, like, in my mind, that's a soldier.
Yeah.
And, as a matter of fact, too, like, a garrison would be like a buddy.
Would that be a fair comparison?
Yes, yes.
That's exactly what I mean.
Thank you.
Okay. We're going to go ahead and have to wrap it up. But good stuff here from Jan Muller. Agree? Let's hear it.
