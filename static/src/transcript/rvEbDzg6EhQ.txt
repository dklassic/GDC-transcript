How we doing? I think we're good. Please make sure to turn off all your phones, electronic devices, anything else that might be making sound. And you'll get a, uh, we speaker form coming to your, um, inbox after this.
Might go to your spam box. So if you could fill it in, that'd be great.
Uh, the GDC folks really like it when you do that.
So, my name is Alex Moll. I'm the chief technical director at Criterion Games. We're a small EA studio just outside of London, England, where we're currently having the best time we've ever had and we're making the best games we ever have. And so I'm here to tell you how. So I'll start off by talking a little bit about our back story and then I'll move on to how that led us to come up with a new philosophy for how to make games better.
I'll then talk a bit about how we've proven that this actually scales to triple A production and why we're confident this is great. And then I'll move on to some specific practices that we use day to day to implement this new philosophy. And finally I'll sum up. So first of all, where did this come from?
So hopefully some of you have at least heard of some of our games.
We're really proud of these. We've got a rabid fan base who we're very happy with who are always talking to us about them.
All of these games are characterized by at least my memories of them are characterized by two things. So one is a very high Metacritic. So I think the lowest Metacritic on that slide there was about 86 and I think it goes up to 94 for Metacritic at launch. Huge critical success, very popular games and certainly I didn't work on Burnout 3 but I joined the studio because I loved it so much.
But the other thing that those games were all categorized by is really low team morale.
So there's, I know there's a whole bunch of ex-Criterion folks in the audience here and they're all smiling and so I think this is true, and not just for me.
So there was a bunch of staff turnover.
There was an awful lot of unhappiness and frustration, an awful lot of crunch, a crazy amount of crunch.
And when we looked at the reasons for that low morale, really a lot of it came down to this reason.
So on a medium-sized team of maybe 70 to 150 people, there wasn't really anyone who had a chance of making a good decision that would stick.
that led to much of the team pouring their hearts into features that were just always destined to be cut. And that was actually compounded by a constant feeling of being behind relative to some ideal game studio who was much better at it than us. And that feeling of behind meant that we were always scrabbling to build things as fast as we could rather than taking the time to figure out how to work efficiently and effectively. And so we wasted a huge amount of time and effort.
And the upshot of that was that much of the team was under-motivated despite being incredibly passionate.
And we had people working really crazy hours and making themselves properly ill, long-term relationships breaking up, all sorts of really horrible stuff that people were willingly putting themselves through and despite all of that passion, they were still really under-motivated.
No one really wanted to do this stuff.
And the other part of it was most of the team just weren't empowered to make decisions despite knowing everyone else on the team. And that doesn't make any sense because on a small team where you know everybody, you should just be able to walk over to the right person and ask for whatever information you need to support making the decision you're trying to make.
But that didn't happen. What happened instead was we would brute force our way to great games but at very high personal cost.
So in early 2014, there was a big change in studio leadership. You may have seen it reported in the press as the death of criterion. If anything, it was quite the opposite. The new leadership, myself included, seized the opportunity to do things better on a new game. We believed that it would be possible to make AAA in a sustainable way. And so we took our inspiration from the best of other AAA studios and indie developers and then found places where science backed up and codified our approach.
And I've got to be honest, I'm really grateful to the EA Studios leadership who gave us an enormous amount of encouragement and time and space to try these crazy new ideas and ultimately prove that they really worked.
So personally I was very inspired and still am very inspired by indies. I love coming to GDC and hanging out in the indie game summit. And one thing that was very clear to me was that small teams where everyone really knows the whole game that they're working on and they're able to turn on a dime just don't suffer from these really horrible issues that we were struggling with. So we figured, well, it's definitely possible for small teams, so surely we can get this to scale to big teams, too.
So we came up with a new philosophy. Given what we'd learned, we set about turning all of that experience into a coherent set of practices that would allow us to make games better. And over time we've managed to distill it down into something coherent. But we started off with this question.
If we just assumed that everybody's here to make the best games they can, what would we do differently? And we figured we'd do two things differently. So the first thing is treating people as talent.
That means letting people make the right decisions for the game using their own skill and judgment and expertise, because we hire great people, so obviously they should make great decisions. And the other thing we do is actively eradicate harmful dogma. There's lots of examples of harmful dogma. One includes the expectation of crunch. So research has proven that crunch is only beneficial for 48 hours and is detrimental after as little as a week or two.
So it's really, in my opinion, nothing more than legacy and fear and some macho posturing that means that we still expect crunch.
It's, you know, science tells us it's a waste of time.
But it's also things like expecting to use a centrally distributed list of tasks, maybe like a Hansoft or a Jira type thing, to determine how the game gets made.
Because the person with the best understanding of how to fix a problem is just going to be the person who will be fixing that problem.
It's not going to be someone off in another room typing tasks into some big spreadsheet.
So it's really the studio's job to facilitate the team to pick the best problems to fix and then really help them and guide them on how to fix them.
So we have this, as a little aside, we have this poster up in our office, and I really hope that this just seems totally weird and obvious to you.
Unfortunately, big games companies, and I'm pretty sure all big tech companies, often use the word resource to mean person.
Now I'd argue that's always inappropriate, but certainly for any creative endeavor, it's provably inappropriate.
Because a creative collaboration between the right people won't just get you the right results sooner, it'll generally deliver you a result that wouldn't otherwise have been possible.
So the trick is really to gather the right people and then help them to creatively collaborate.
So at Criterion, as leaders, we've stopped telling people what to do, because that presumes we're more experts in their field than they are. And instead, what we do is we take time to sell ideas to teams of creative collaborators. And then when those little teams and those creative collaborations engage with those problems, they're able to take them into delightful new directions that we would never have expected.
And I wish that I could tell you some more about the game we're making at the moment, because I have some videos that illustrate this just perfectly, but sadly we're not there yet.
If nobody on the team wants to work on a feature, wants to engage with a feature, then one of two things has happened.
Either we've not done a good enough job of selling it, and maybe that means we don't understand why it's truly valuable, or maybe it's just not a very good feature and the team is tacitly telling us, bin that one, move on, there's better stuff. Which is really great feedback for us to have.
And when, when as a leadership, when as a production group, we notice that someone's made a decision that surprises us, rather than telling them that they're wrong, we'll speak to them, we'll take the time to educate and be educated, we'll share the bigger picture context that maybe they don't have that led us to believe they'd make a decision differently, but we'll also listen to the detailed context that they've got on the ground.
and understand why they made their decision in the first place.
And either a better decision will get made, or we understand why that was actually the better decision in the first place.
And either way, both of us have come away from that with a greater sense of trust and general happiness.
So what we've done isn't just hand wavy nonsense as much as I love that. There is actually some science backing this up.
We've looked at a bunch of research and our main inspiration for a lot of what we do is this book, which is actually summarized in a TED talk which Dan Pink gave in 2009 titled the puzzle of motivation. I highly recommend it. It's a great TED talk. So really his thesis is when it comes to motivation there's a mismatch between what science knows and what business does. And he lays out a compelling case why existing ideas of motivation so things like financial incentives and status rewards like job titles and corner offices really don't have a big positive benefit on creative pursuits.
but the great news is that science actually knows what things do have a big positive benefit on creative pursuits.
And so really what we've done at Criterion is just the project management equivalent of taking a seven year old SIGGRAPH paper and getting it working in video game.
So as Dan Pink says, as soon as people feel that they're being fairly compensated for their work, money stops being a major motivator.
That said, it is crucial that people feel that they are being fairly compensated. That means that they're being paid what looks fair relative to the larger industry, but also what looks fair relative to people doing similar roles within their studio. But as soon as that's out of the way, and I really urge everyone to get that out of the way as soon as possible, there are some big drives that continue to motivate. The first one is autonomy over team, task and technique. The second one is mastery of a skill that an individual values.
and the third one is working in service to a purpose greater than ourselves. So I'm going to talk about all three of these in a bit more detail. I'm going to spend a chunk of time on autonomy because it's the most different from traditional project management and it's where we've seen the best results. So a rough little definition, autonomy is having control within project parameters. So I'm going to over what you work on, who you work with and how you approach that. And that's been shown to be hugely motivational. So we strived to come up with a way of working that supports all three of those big pillars. So this is the guidance we give out everyone on the team. So everyone on our team decides where they can have the biggest positive effect at any point in time. Originally we actually tried using this as the only rule. Um, And that worked actually pretty well until we got to about a dozen people and after that it got too hard to share enough context and communicate enough to make sure everyone's actually working on the same game. So now what happens is a production group will provide a handful of big themes, perhaps five to seven big themes, with suggestions of some priorities within those themes and then the team just takes it from there.
We've never ever had a situation where nobody wants to work on something that's really important. So I'll say that again because we've given this talk a few similar talks to this a few times within EA and this is always a question and it's a fair question but we have never had a situation where no one steps up to a plate to do some even dirty boring ass work.
That's just never happened. A couple of times we've had a scenario where no one's turned up to work on an entire theme.
and that was surprising to us, but when we dug into it, it turned out that the team had actually noticed that there was some big dependency that meant that that theme couldn't really usefully be worked on anyway, so they'd gone over to work on delivering that dependency before working on the thing that we'd naively assumed could be done right now. So the team is really wise, right? There's all this wisdom out in the team and now we get to use it, which is great.
The most surprising problem we've actually had with this approach is that we've had people choose to work on things that they don't actually value but they feel like they kind of ought to. And that's a subtle distinction but quite an important one. And it can lead to people being quite ineffective and miserable where their skills don't really match the work they're doing. And it's actually something that we're constantly vigilant of now, like double checking. Are you working on this for the right reason? Like you actually are interested in this, right?
So context becomes very important for us.
In a more traditional project management structure, the big picture of the game is held by a relatively small number of people on the team.
And those people turn it into chunks of work that get passed out and distributed out to the main team.
And generally, that keeps everyone working on roughly the right thing.
But it can lead to this feeling, where.
some folks on the team just don't really understand why they're doing the work that they're doing and it can end up to a lot of that, um, lack of decision making and really that feeling of helplessness and that huge amount of waste that, um, I described earlier. So by embracing autonomy and pushing decision making out across the whole team, we now have a situation where really everyone on the team needs to have as much of that big picture as possible or they just won't be able to make good decisions.
And I have to say, as a leader, it's much, much more effort to push that big context out and keep refreshing that than it is to just dole out tasks.
It just is.
But the payoff is huge.
As I say, it allows the experts on your team to make all of the easy wins.
that service your game in the best way possible and also warn you and guide you away from the big expensive moon on a stick rabbit holes that producers and designers tend to occasionally for the best will in the world lead us down and those just don't really happen anymore.
The context does change and fade over time so it is a full-time job for several people in the studio to keep making sure and double checking that everyone knows what game we're making and that that's kept up to date but it is, as I say, just astonishingly valuable. So that was the first kind of autonomy.
That was autonomy over task. The second is autonomy over team.
So as I mentioned, the feature teams in our studio form themselves around high-level themes that the production group has identified. And those feature teams will stay together for as long as it makes sense, and then they'll disband and go work on other stuff. But it is vital, and this is true for actually any studio, but it's vital that any team or sub-team is viable, which means it has the capability to deliver what it's trying to in the time that it has available.
and that's simply because a viable team is greater than the sum of its parts whereas a non-viable team just isn't.
One of the most common mistakes we've made on this journey is starting work towards a goal without a viable team in place and it can be surprisingly hard to spot when that's wrong.
The most common cause of non-viability is missing skill sets, but there can be all sorts of other subtle things, like it can be not having access to time from an important reviewer, and we've seen cases where a team will kind of spin its wheels for several days, like gilding the lily, honing something that they've already kind of proven all the important stuff on, just waiting for a review to tell them how they can move on with it.
So invariably there's two ways of fixing a non-viable team.
There's the obvious one of add more skills to it.
And there's the other really importantly valuable one, which is change the goal posts.
Change the goals that they're trying to sign up to.
If you don't have a 2D artist, well you obviously can't deliver anything that needs 2D art, but there's still probably tons of useful stuff you could deliver in the same kind of direction.
So that's very important. And so what happens in the studio after the teams have initially formed, they then figure out what goals they'll be working on and we then kind of rationalize and make sure that the teams are all viable by adjusting goal posts as necessary. And the third part of autonomy is autonomy of a technique. So as I've said, each team is responsible for creating the goals they'll sign up to, but they're also responsible for deciding exactly how they'll meet those goals.
That includes the exact deliverables that they plan to create but also includes their daily process. Are they going to work in like an agile scrummy way? Are they going to work in a Kanban iteration style?
they decide that. And actually we give each group a process expert, a DD in EA terms, I don't know what other studios call them, each group gets a DD to really help them, coach them on which process might work for them and then coach them on how to use that process throughout the milestone.
So all of this autonomy has the effect that everyone on the team kind of needs to get a bit better at selling. And this is a surprise to us. We didn't realize this would kind of be a sticking point for some people. But designers and producers need to get better at selling things to the team in order to inspire them to come and make them. Because just saying, well, because I said so doesn't work anymore, right? We can't do that.
There's a producer from Criterion laughing ruefully here because he used to maybe enjoy doing that.
There's also experts on the team need to be able to sell the value of long lead technical work.
in time for it to be started so that it can deliver value at the end. And they need to be able to sell it to people who can prioritize it within the themes for a milestone. And so as a leadership group we need to be conscious of this and we are.
And so we try and solve it in two ways. Both we coach people on how to sell better when we notice that there's an opportunity to coach that. But we also actively try and signal boost quiet wise voices so that we get the benefit of their wisdom across the team.
So that was the end of Dan Pink's first big drive.
That was autonomy.
So moving on now to mastery.
So mastery is everyone mastering skills that they value themselves.
And for everyone to do that, they need to feel that they're supported in their favored ways of working, that we can have a team structure where an engine coder and a gameplay designer both feel supported and able to grow.
and we spent a bit of time trying to figure out how do we balance this out, how do we even understand why those people have different needs and then how can we satisfy them. And we came up with this division of types of work. So across the horizontal axis you've got how well defined the problem is from very well defined, clearly briefed all the way to who knows. And then on the vertical axis you've got how well defined the solution is. So is this an R&D project or is this something that you've done a thousand times before and it's about applying known solutions to it. And so we've come up with some names for those types of work. So crafting is the process of taking a well-defined problem and applying a well-defined solution to it. So craft, craftspeople are really motivated by excellence of execution. These people will take a brief for a bit of work and then give you the, they'll use their, their skills and their judgment to give you the best whatever it is that meets that brief.
The next group is experts. Experts really like a well-defined problem that nobody has ever successfully solved before.
And they'll go away and do R&D and loads of hard sums and then come back to you with something amazing.
Then we have explorers. Explorers who really love uncertainty.
Who will take the brief of, it seems like jumping should be fun, right? Is jumping fun?
Can you tell us how jumping fits into our game and why it's amazing?
and that's, you know, that's the explorer mentality. And then the last one is what we call connectors is folks who take well-defined solutions to problems that the team doesn't know they have yet. So they're people who often talk to other teams. And so when the team comes up with the idea of, yes, we're going to try and put all of these badges into a box, they'll say. You should probably go talk to Dave over there because a few years ago he tried to put a load of badges into a box and now Dave doesn't have a face. So maybe you want to learn from Dave.
And the last big drive is purpose. So Dan Pink describes purpose as attaching your desires to something bigger than yourself. And let's be honest, in the video game industry, the purpose is typically pretty obvious. I mean, really not many people are in this gig for the money, right? This is borderline vocational, what we do, which is kick ass. A criterion we've actually tweaked and added a little bit more to our purpose that actually makes it even more motivational for certainly for me and I know for a few other people in the studio.
which is we make incredible games in the best way we can. So we explicitly care about the people in the process as well as the product that we're ultimately building. And that happily results in a better product as well as happier people. So that's pretty kick ass. So those are, those are the big ways that we treat people as talent. The other big thing we do is we actively eradicate harmful dogma.
and we just do this. I mean it's pretty simple. We don't do things because that's how they've always been done. Every process and plan we have is just the best idea for it that we have right now. Everything can always be challenged and we actively look for ways to get better.
One way we do that is that at the end of every milestone, each feature team will run a post-mortem on the last milestone to understand how they can improve for the next one.
And then the leadership team runs an aggregate post-mortem to figure out what large areas the whole team can improve on for the next milestone.
So hopefully that sounds lovely to you. It sounds lovely to me.
Um, does it actually work? I mean, this sounds kind of hippy and weird and like, I don't know. So, um, yes, of course it does work. Otherwise I wouldn't be here. Um, so the early signs were really good. By the end of 2014, we'd grown to be a team of like 25 to 30 people working on a new game franchise. And in terms of quantity and quality of what we were making, we were more productive than any team I've ever worked with.
we had executive reviews where the feedback was, I can't believe how much has gone in since the last time I reviewed this. I don't know if you've ever had an executive review. I certainly never had one where there was feedback like that until recently. Prototyping on our new game was consistently turning out really fun new features that all worked together as well as hundreds or thousands probably that didn't that we all happily binned because we were able to make those decisions as a studio.
And the other big thing is, within EA, every six months we have a company-wide team health survey where everyone rates themselves on how confident they're feeling in the game they're making, how well supported they are in the studio. And Criterion's consistently been reporting the highest levels of satisfaction, confidence and hope of any game team in EA. So I think we're totally hitting those two big pillars that we're aiming for. We're delivering great stuff and we're doing it in a great way.
So that was the end of 2014 and then suddenly the old world came knocking. So we had a request for help. We were asked whether we would be able to help another EA studio ship the best game they could which would involve committing a large chunk of our team to spend nine months working on their game. And at first glance I've got to say we were quite fearful.
We were concerned that this would involve a return to a much more traditional form of game development, at least for that big part of our team. And having seen such a promising new way of working starting up, we really didn't want that to happen. But we had a great conversation and with the support of the other team and with the A leadership, we managed to use this as an opportunity to try out our new highly autonomous way of working in a production environment.
to facilitate this we did build a very small interface layer to smooth over process bumps because the other team was obviously working in its standard way and, you know, there was some jiggling needed to be done there but most of the criterion team was just working in our new way. And it totally worked, right? So we built the cop experience for Need for Speed and we're really proud of what we delivered.
and we're even more proud of the way it was delivered. So despite zero overtime from the team, we delivered an experience that was repeatedly called out by reviewers as excellent.
The only times we really hit snags in our process were really places where our way of working butted up against the main team because they were scheduled in a more traditional way and weren't capable of fluidly moving their priorities as much as we needed.
And then it actually happened again before we were even done with that engagement.
There was another EA studio who asked for help on a feature that they felt would benefit from some of our special criterion source.
So we took the same approach.
The need for speed thing was going pretty well.
So we started working in our new highly autonomous way with a team that was all self-selected.
And the team decided what to build and how to build it.
And, yeah, that went pretty well, too. We delivered the speeder bikes for Star Wars Battlefront as well as some of the Endor speeder bike training mission. And the fans and the critics loved that stuff. So there's this quote from Euro Gamer that I really like. The two-minute thrill of an Endor speeder bike chase is as pure a hit of Star Wars joy as we've had since Atari's legendary arcade side show in 1983. I feel pretty good about that.
So once again we delivered that on time, on budget, without any overtime and with very happy people both in our studio and with the main game studio.
So since 2014, we've racked up 65 staff years of using this process in pre-production and 18 staff years, and actually both of these numbers are higher now, 18 staff years on titles that have actually shipped. So we're pretty confident that this totally scales to AAA production, which is why I'm now comfortable standing here and talking to you about it. So how have we actually put this into practice?
So we've experimented with a whole range of different time structures for working from completely free form chaos, which was fun but didn't really scale, to everybody swarming on a single feature until it was done. And there were good sides and bad sides to both of those, but really we've actually ended up coming back to something a lot more traditional with a regular seven week cadence for milestones and then six weeks of that solid development with work chunked up as appropriate, right, depending on how the team's working. If they're working in a scrum style, then maybe that's three, three two-week sprints. If they're working in an iteration style, then maybe that's one six-week block. That's totally up to the teams. But the big thing we've added is this big review and planning week between the milestones. And this is really our primary means for sharing context and pushing that out to everyone.
So this starts off with a review of the previous milestone.
The whole team comes together for this, and we all review the previous milestone, and then we start looking at where the game backlog highlights some themes for where we should go for the next milestone.
Then individuals will join a major theme to agree what can be achieved in that milestone, paying careful attention to team viability.
the teams then physically move all their desks together so we have a big chaotic 20 minutes of uh desk moving and then the feature teams spend the next six weeks sprinting towards uh the next deliverable with the reasonable cadence of intermediate reviews as appropriate.
We also have a broadcast. This is a team meeting which happens on Fridays. Fridays are also our formal dress day for some of the team which is why this is our technical director Christian Holmquist wearing a bow tie. This isn't normal attire in Criterion. But so every Friday afternoon we have a team meeting where any group that has something cool to show gets the opportunity to stand up in front of the team and do it. There's no Q and A's.
It's not super intimidating.
It's a high energy celebration of the great things that have happened that week. Aim to bring everyone along on the journey that the whole team's going on. And then actually talking about reviews. So historically in Criterion, I'm sure there will be some nodding on this point as well, software reviews have been a very, very fraught experience. They've often ended up being quite painful and actually quite ineffective as a result. But we know that software reviews are crucial to the success of making a great game.
So we set about figuring out how we'd make software reviews better.
I think there was another talk about this earlier, which I missed actually.
But we came up with the concept that there are actually at least three different, very different types of review.
And if everyone goes into a review with the same understanding that this is what this review is for...
then an awful lot of the, um, fractiousness goes away. So the first type of review is just an update review. We don't really need any feedback from you. This is just so that you know where we've got to so you can talk to other people about how the journey's going and we'll get back together next week and show you again then. The next type is a steering review. This is when the teams come to a point, a fork in the road and they really need some guidance from someone external to that team to really say, okay, maybe we should go, should we go like deep on this one thing or should we try doing like another four examples of this and see what, what breadth looks like instead. And that's a, that's great to have an external view onto, onto that. And then the last one is a quality review. So this is the team saying we think we're just about done on this feature. Like is this good enough? Should we stop investing in this? Should we stop working on this and move on right now?
And so by starting every review with this is an update review, we don't need steering here, we just need you to know what we're doing, or whatever, then the reviews go way, way better.
So as I mentioned, we also have frequent retrospectives.
And we've co-opted the agile start, stop, continue process, which is quite simple.
Everyone in a group writes down the things that went bad and the things that went good in the last chunk of time.
Then the facilitator groups those into themes that are related.
Maybe these ones are about communication.
Maybe these ones are about some tech that we're using.
And as they're sticking, sticking the stickies to the wall. If anyone wants to discuss something, if something is contentious, they just shout flash and you draw a big old lightning bolt on it. And then the team, once they're all up, then the team goes through and discusses the flashed cards and agrees actions for the big themes that have come out. So things we're going to start doing because that will make it better. Things we're going to stop doing because that will make it better. Or things we're going to make sure we carry on doing because they're actually really working for us.
And as I said, the, the, the twist we've taken on this is that once the teams have done this, the production group then does the same exact thing at a higher level with the outputs of their, um, of the, the, the team's start stop continues. And that allows us to come to the team and say, right, so for the next milestone, we're going to attack fixing this, this and this. Um, so the whole team can see that the process is continually improving and that, um, that we're really listening and making it better.
So we have those retrospectives in the morning of the Monday of the planning week.
And then in the afternoon of the planning week, we found...
it was pretty demotivational for the team to stand up. So we have a big team meeting to review the milestone. But we found it quite demotivational for the teams after a morning of critical self introspection to stand up and say, yeah, so we missed this goal because, well, it was really hard and Dave was sick. And, well, we missed this goal because of this unexpected dependency. And, well, we kind of missed this goal just because we're terrible human beings.
no one really liked that and actually we felt we'd already got all of the main learnings out in the morning. So instead what we have is a highly motivational celebration that we call the wall of awesome. So the feature teams demo the great stuff they've done and then the big highlights they stick up on a wall and they get a big round of applause and the whole team gathers around and it's all kick ass and it's way more motivational and also helps really sell the story of where the game's going. So everyone's really got a good feel.
for how development is going. The next big thing we've really changed is how the space is laid out in our office. And this really is to support the mastery phases, the mastery piece that I mentioned earlier as much as anything. So we partnered with some workplace consultants to design an office space built around the concepts of explorers, crafters and experts and their different needs. And we came up with this idea of an interruption gradient.
So explorers on the right, left, on this end, or that end, they really like chaos, right?
So the explorer teams embrace chaos and like lots and lots of stimulation and lots of new ideas because that helps them find fun in whatever they're working on and stops them getting drawn into little ruts.
Then in the middle of the office we have the craft area. So these are the feature teams that have agreed, okay, right, these are the goals that we're working on. We're going to crack on and just kind of, we'll collaborate tightly within ourselves, but we don't need to talk too much to any other teams like we can just crack on for six weeks and that'd be fine.
And then at the far end of the office are the experts who tend to be much more lone wolf, mind palace type people who really, really hate being interrupted because it'll take them hours to get back to the same state they were in before.
And so here's a photo of the explorer to, um, craft area of our office. And hopefully you can really see the difference just in this, uh, one picture. So on the left hand side of this picture, you've got the explorer area where everything's kind of chaotic, where we have, um, big two foot cubes that we build little meeting rooms out of as needed. We've got big open tables that are, that never have the same people sitting at them twice and lots of game playing, lots of music playing, lots of good stuff, lots of good distractions there. And then you can see as it moves to the right and the much more ordered groups of craft groups. So those are the feature teams working, disappearing off around the corner there.
And then in the foreground you can see the big kitchen table we've got. And we actually have a bunch of these big open tables around in the office and we much prefer them to meeting rooms for almost every case.
They're like meeting rooms in that a bunch of people can get around them and collaborate really effectively but have the huge advantage that they're super low friction to use. So if there's a couple of you sat at a desk talking about something interesting and someone else wants to jump in, it's virtually no effort to stand up and walk over to one of these tables and maybe grab another person on the way past that you know will have some good input. You don't need to find a free room and then check the calendars and send invites and all that jazz. You just grab a table. There's enough around the office and they're cheap enough and easy enough to use.
Another big thing we've got is a number of people who work from home or work remotely for some or all of the time. And so we've invested in a bunch of tools to make that more effective. And the most obvious one is this, it's called a double robot, which is essentially like a mini Segway with an iPad on top. And it sounds like just a stupid toy, right? It sounds just ridiculously exorbitant, but it's really not. So when you, if you've ever worked remotely, you can feel super isolated. You can feel super like you're hanging on the end of someone else's agenda, someone else's IM. You're just sat there waiting for someone to respond to you. And please, I'm totally blocked. I can't do anything until you answer this message.
And so now you can just walk over to someone and say, dude, check your email. And it's amazing. Like, it's astonishing.
So it used to take, um, three days and cost about $15,000 for us to rearrange our office. And because we've designed a way of working where we need to consist, like, constantly, every few weeks, rearrange all the desks, that cost had to disappear or else it would have bankrupted us. So we're inspired by Valve.
obviously. So we developed mobile desks that required only one power and one ethernet plug. For anyone who hasn't visited the UK, the thing at the bottom is a UK mains plug. They're designed to be more painful to the bare foot than Lego. And they'll have you down like a sack of potatoes. It's amazing.
So we also have console dev kits in mini audio racks on wheels.
So they can just wheel around the office as needed.
And then we have banks of power and network points in the floor along sort of well-designed lines, which really helps that craft area be kind of ordered and grouped and batched. And so now, as I said, we rearranged the whole office in under 20 minutes, and it's a very, very funny 20 minutes as well. Like, everyone loves that. And so the last thing we've built is we've gone back to school, and we've got a special cloakroom where that keeps a lot of clutter off the floor but it's also super fun to come into the office in the morning and just hang out in the cloak room for a little bit and talk about what you were doing last night and that's super nice and actually makes a surprising difference to how clean the office is. So to sum up then, how do you build a hyper engaged team? You treat people as talent. Realize you don't have resources, you have talented individuals who just want to make the best game they can.
Give them all the context and the alignment you're able to, help them to set up those powerful, creative collaborations, and then just get the hell out of their way and let them do amazing stuff.
You use proven drives to motivate your team.
Don't rely on management thinking from the 1960s.
Use autonomy, mastery, and purpose that science knows really work.
And don't accept a harmful status quo.
Actively seek ways to get better.
Let your team tell you how they can be more effective and listen to them.
don't accept any dogma and let everything be challengeable. So at Criterion we're now confident that we're building games in the best way we've ever heard of. And we're actually hiring. So if you want to come and work with us and hit up these URLs, we've got a few places open at the moment and we'll be opening a few more over the next few months. So that's everything.
Thanks very much.
And are there any questions?
Just one question to clarify. It was a great talk, thanks. And when you mentioned that you relocated people across the space based on their type, how do you actually get their type?
Do you test them or?
Yes, so the question was how do we actually move people?
So this is literally we have wheels on the bottom of our desks.
I mean that, how do you determine that this guy is an explorer and this is an expert?
I see. So this really comes down to the theme that they subscribe to. So typically they will have a core tech theme and by and large the people in core tech will really want to be experts. So typically the core tech team will just choose to locate themselves at the quiet end of the office. Yeah.
Does that make sense?
right? Yeah, there's like a big conversation because obviously you can't have everyone deciding on the same exact space so it's a bit of a negotiation but that's ultimately how it works is the teams choose how to make themselves as happy as possible. Great, thanks. Cheers.
I was wondering if you could say something more about supporting autonomous teams.
I've been part of an organization that said, go autonomy and put a group of people together they thought was a viable group and say go and come back six months later.
And not really support the team during that time.
And so I heard you have DDs as process experts.
I don't know if that's throughout the entire.
process, but what support do you see as necessary for an autonomous team so that not the idea that they can just go off in a corner and succeed by themselves?
Yeah. So that's a great question. So really you mentioned teams going off for six months at a time and I think that's too long. So context will change and fade within a couple of months. So you really need to bring the whole team back together far more frequently than once every six months. And the other part is absolutely the DD, the process coach, stays with them the whole way through the process until the end of the milestone.
Hey, I've got two questions.
One, when you have multiple autonomous teams that are working together, have you run into difficulties with all of them aligning on the overall project?
Like you potentially have two teams that are doing great work, but they're in different directions and aren't gonna overlap.
And my second question is, what do you end up doing when an autonomous team is failing?
Like have you ever had to have a situation where you have to actually stop an autonomous team or break it up or give?
Stronger direction to the team in order to help them succeed Yes, right, so, trying to remember your first question.
Aligning multiple...
Right, yes, so that really is, you're absolutely right, we've absolutely had that problem.
So when we first started, we didn't give much guidance to the team at all.
We'd have constant shares and constant discussions about the design of the game, but really it was not everyone came to those, not everyone was involved.
And we did find people would diverge an awful lot, like you say, you'd have...
everyone's doing great stuff but it's all different great stuff and we found that started happening after about a dozen people. And I don't know if there's something around that number where a dozen people do too much work for you to just absorb what they're all doing.
So we have the broadcast every week for that reason and we have constant big team wide shares actually. So one of the other things I didn't touch on is several times a week there will be like an hour long slot where someone will present like okay this is the new design for this vehicle or this part of the game or whatever. So we try to actively keep teams more aligned the whole way through. And we found that the balance we've got at the moment really doesn't result in that divergence anymore. So we feel like we've got that one nailed. The other one was about teams that are failing. And we absolutely have had that case a few times, and that's always been because the team wasn't viable. So either they signed up to unrealistic goals or they didn't have the right skills to meet the goals. And, um, it always takes longer than you'd hope to recognize that that's the case, but still, hey, we're all human beings, you know, it's not like anyone's perfect, but as soon as you notice that, you can catch it in those terms, right, of, hey, that, your team doesn't look like it's viable, right, and the team kind of knows it's not succeeding, so.
it's not like you're terrible people for not doing this better. It's like, hey, you aren't able to succeed at this, so what can we do to help? And we've had a few cases where we've recognized that, oh, well, you obviously need a couple of engineers in here to help you prove is that part of what you're working on or maybe you're missing 2D art design or maybe actually what we need to do is have a big, um, serious like two hour review of the work you've done and figure out the direction for you to progress in the next part of the milestone. Cool. Okay, cool. Thanks. Are there any tools you use to manage project wide high level tracking and predictability? Yes. So predictability is interesting.
We've been talking about it quite a bit recently.
I'm confident in predicting based on our past performance that we can deliver something kick ass at certain points.
What I can't tell you is exactly what will be in it because the team needs to figure that out along the way.
And so that can be a bit of a gnarly thing and we need to work with that.
And that's just constant conversations.
We do actually use roadmaps.
So the team, and it's the team that comes up with the roadmaps.
It's not us driving it.
but we do have roadmaps to figure out, okay, well, we know we need to be releasing something at this point in time, so let's have a talk about what's reasonable to expect to get in there and to align across different teams.
We don't have any specific, it's not like I have a silver bullet tool.
It's basically a big bag of conversation and alignment that we use.
Thank you.
Cool.
Hi Alex, thanks so much.
My question is around scalability along the two dimensions of size, so how many people you have, and complexity, how many things you're juggling.
And the first part is looking back, what were the inflection points where you really needed to adjust your approach because it was breaking, and then projecting forward?
Is there a limit that you hit and this will break down, like when you outgrow the space or what not, you're hiring, until when will you hire?
Is this forever or are you going to cut your size?
So, yeah, it's a great question, is how scalable is this?
So we've spoken about this quite a bit.
So we hit a big inflection point at about a dozen people, for sure, which, as I say, I think that's probably about, if you've got more than a dozen people, you can't all sit around one table, you can't all keep up to date for free with what everyone else is doing.
The next big inflection point was kind of around 25 to 30 people.
And that was the point at which we needed to start identifying teams as a production group.
So, less than 30 people, we were able to share enough good context that the team could just make the right calls about what they should be working on.
But going beyond that, we needed to do that.
going towards the future, like, we don't actually want to grow to be a huge team. We don't, because we all like being on a team where you know everyone. That's, it's a super nice thing.
And I think as we've showed with the Need for Speed work and with the White Shark work, actually what you can do very effectively is effectively subcontract out a chunk of your game. So I think if we needed to scale beyond a point when it got comfortable in our space, what we'd do is we would have a second team in a second space working in a way that they wanted to, which would hopefully be similar to the way that we work, and then feed the two together.
All right, thank you, sir.
Thank you.
So my question's about prioritization.
I mean, if you give your teams complete freedom and autonomy, like, how do you know they're not chasing shiny objects, you know?
They're already working on the textures of the wheels before they've really even built the engine of the car, you know, that kind of thing?
It happens a lot on my team, so I'm just curious how do you keep them working on the right things?
Yeah, that is a great question.
Interestingly, I think we've had fewer problems like that since we've gone more autonomous than when we were less, and I think that's...
partly it comes down to the bigger context, right? Because the decisions that people are making when they're spending too long on shiny wheels is just a bad decision. But then maybe they don't have the bigger context of, dude, you've got like 200 other cars to make. I mean, that wheel is good enough at this point. And so sharing that context constantly is a big help.
But I think also, I don't know, it seems to be the people take on, so if you are told you're making a car, you have less ownership over making that car than if you're asked, hey, we need to make some cars. And you then say, oh, I could probably make a car. So my question is more of like, let's say we're making a car racing game. You guys make car racing games. How do you make sure that they're starting at the right spot, just priority wise in general? Step one, we should probably make X, Y, or Z, you know what I mean?
are those just constant communications you guys have as a team?
Pretty much.
You're just talking about context and making sure we're just aware of what we're trying to do and I guess there's conversations that break out of that of, you know, like, well maybe this makes sense for us to do first, you know?
Yeah, exactly. I mean, so I remember at the start of the...
the need for speed work, what happened, we got some really great creative direction from um the main team from Ghost and we then got the whole team, the, you know, engineers, designers, um, me and other people, that's not like I do any work right, so, but we got the whole team.
around one table and we sat down and we planned out on like little cards and all sorts actually what's the story of a cop chase, how does this work, how does this all come together and because everyone was there, everyone totally just got, oh okay right so that means this thing's important and this thing's important and obviously these things are relatively, you know, more important than these things.
That makes sense, yeah. It just sounds like you guys communicate a lot more which is great anyway.
So, thanks, it was a great talk.
Cool, thank you.
I'm curious, it sounds awesome, I'm curious how and maybe if you could gel this with a traditional like work for hire or publisher relationship where you're having to design to spec or come up with features and commit to features ahead of any of the development on those things.
Yeah, I mean, so we did, it's a fine question for sure.
I'm fully aware that I'm, that Criterion are actually very lucky that we were in this position to be able to do this, first of all. Certainly I think not every team is as lucky as that and some teams will, won't be able to go as full autonomy as we've gone. That said, I think, I suspect most teams could be more autonomous than they currently are, certainly in my experience. So there are within, I was careful to put on the slide about autonomy within project parameters. So perhaps if you're working to spec, your project parameters are, well, we have to deliver all of these things by this date.
but then it's up to the team to figure out how we deliver all those things and who delivers what bits of those things. Does that answer your question?
Cool, thank you.
I would like to ask if you've ever approached a person who was overwhelmed by the autonomy.
Maybe a junior person on the team, they're excited at first, but in the middle of the milestone, they realize they don't have enough experience, maybe scared to screw something.
Yeah, I mean that, so, has that happened? I think that's, I can't think of a specific example.
I'm sure that's happened.
So we have...
whatever way you're working pretty much, you'll have a daily catch up with the rest of the people on your feature team. And our feature teams, so our DDs are very supportive and will notice that kind of thing happening. But our feature teams are also very supportive so a lot of the time it won't even be that person kind of freaking out and retracting a little bit.
It'll be someone else saying, hey, do you want a hand with that? I've got some cool ideas. Which is, yeah, I think that.
thinking about junior people that are not used to your system.
Yeah. So the junior people need to be working amongst more experienced people, right? So the more experienced people are typically good at supporting the junior people and saying, hey, it looks like maybe that's not going so great. Do you want a hand? Cool. Hi. Great talk.
I was wondering if you had any experience trying to go faster with this process. I work with a mobile team with 20 people and a seven week sprint is a beautiful luxury. That's like seven live pushes for us. Have you had success doing this with a smaller time scale? Yes. So not with a team of this scale. But when we were a team of a dozen people, what we would actually do would be we'd have...
the whole thing compressed down to maybe three or four of that whole cycle within one day so we'd have maybe three big build reviews a day and then everyone would leave the build review with notes, okay I'm gonna fix this, I'm gonna fix this and then come back and a few hours later we'd go again and that worked really well, we were flying at that point but it just unfortunately didn't scale to bigger projects like bigger teams and bigger time scales so we had to put more structure in, but yeah.
try it out.
Cool.
My question is almost identical, just where do you put the pressure of the time schedule?
Does that stay with your leadership or does that actually go straight down as just a parameter for the autonomous teams?
It's just a parameter.
So we've actually...
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
I'm sorry.
something I didn't mention is we've really recognized that there is a crucial difference between state targets and date targets. So date targets tend to be immovable, but what you're releasing on that date is typically movable, whereas state targets is a vision for your software that you need to get to for it to feel like you want your game to feel like.
and you just have to be comfortable that those two things are different so what goes in a release is more or less of what you meant to put in that release and sometimes you have to be flexible and change stuff around.
Hi, you've got quite a big team and I've seen it was an interesting way of just dividing everybody by space and their working mode That's a really good idea actually to implement. How did you do that?
How did you define the personality types of your teams and how much time did it take you to define that and put it in action?
So we actually we've never So we had the conversation where we came up with that grid and that perhaps took like a week of conversation between lots of people, you know, over the course of a week to agree that this actually made sense and everyone kind of fitted in it somewhere. We've never done like an official, hey, you're that kind of person, you're that kind of person. But because the teams choose roughly where they want to sit and they choose the way that they want to work, it's kind of as a I think that what we need to do as studio leads is make everyone feel comfortable that, hey, yeah, so if you're an expert, right, if you really want well-defined problems where we're not going to change the design on you all over the place and where it's really R&D work, that's cool and you can succeed. And also if you're...
if you just want to go play in a big open space and then kick out amazing bits that are fun, then that's cool as well. And so I think because we're explicitly saying that that's all cool and we've got this rough rule that the office runs like this from highest interruption to least interruption, like the team just does the rest.
Thanks.
I realized that I was thinking of your crafters and your experts just in terms of engineering.
I was wondering, there's QA, there's art.
So I was wondering if all the work, or how much of the work, fits within this team context.
amount. Sorry. Yeah. Design, QA, art. This is actually my bad.
So I noticed this week from some other talks that not every studio is as cross discipline as us. We're just crazy cross discipline. So each one of our feature teams will be composed of whatever needs to be composed of. So maybe that's a designer, maybe that's an artist, maybe there's an audio engineer, maybe there's QA, maybe there's whatever. Right? So.
have all of those skills on the team and the people will subscribe to a feature team. So we've got a, like a vehicles team that has a couple of vehicle designers and then an implementing vehicle designer and then a couple of hard core physics engineers and like an audio engineer and a producer and a DD and QA on it. So they are really, really well self-contained feature teams and that's really important for them to be viable and succeed.
Having worked with something else like this, one of the problems we ran into was, for example, audio. We don't have many audio people. And so a lot of features would have leftover bits. How do you guys kind of pull together those leftover parts? Like a feature might be complete but it doesn't have audio. And how do you keep from stretching one person too thin across multiple teams?
Yeah, and so that's where, that's a great question.
We also don't have many audio people, and I think we're hiring at the moment for an audio designer, so.
Oh yeah, we only have one animators as well.
Yeah, we're hiring for more of those.
But so we absolutely have that same problem.
really that comes down to making the teams viable and as I said there's two ways to do that so one is to change the skill sets so one is to add more skills and you can't do that past a certain point like you say if you've only got one audio engineer you've only got one audio engineer We do sometimes split one audio engineer across multiple feature teams. Like people do drift between teams. As I say the teams don't necessarily stay together for the whole time.
They do drift around. But the other thing you do is you just change the goals. So you accept that, hey, so do you know what, this time we won't get, we'll get to good handling feedback on this thing but we won't have the audio pass yet. And the next milestone we'll make sure that we've got the audio pass ready.
And so that becomes a question for producers to kind of wrangle with and work with those dependencies and talk to actually the audio designers and say, hey, so what do you think is the highest priority to deliver? Yeah, that's true as well. So we have, as we get to a release, we'll have a chunk of time set aside for hardening. And that's much more iterative, much more less blocked out. So all of those little pickups will get picked up then.
the hardening. Is that like a polish? Yeah, polish or hardening or whatever you want to call it. Yeah. Cheers. Okay, it looks like that's all the questions and I think I'm about out of time anyway. So I'll be over in the wrap up area just around the corner for the next little while with some other criterion folks if you want to talk to us about anything you've heard. Here. Thanks very much.
