Hi, everyone.
Welcome to Breaking Barriers Combat Accessibility in God of War Ragnarok.
Thanks for coming by.
There's a lot to get through, so let's get started with an introduction and some background.
My name is Adam, and I'm a senior combat designer at Santa Monica Studio.
I'm excited to speak with you today about some of the accessibility features that the team built out to reduce barriers within God of War Ragnarok's combat.
I'll be doing a deep dive on just a handful of our accessibility features and explain how they came to be.
The details I'm presenting today is the result of a collaboration between Combat Design, UX Design, Camera Design, Gameplay Engineering, and more.
I'm presenting their work to you.
Let's jump right into it.
For those unfamiliar with the franchise, God of War's combat aims to deliver intense character action in an approachable way.
Despite approachability being a stated goal, there are aspects of our gameplay that proved to be particularly challenging to navigate as we aimed to expand accessibility.
We have many aspects of the game that are intentionally punishing in order to drive engagement.
The player must keep track of multiple threats frequently and respond in real time with well-timed defense.
How do we balance keeping these aspects of the game, and where do we find opportunities to make accommodations?
I'll share a definition of accessibility and the types of disabilities I'll be focusing on today, so we're on the same page.
Accessibility is the practice of avoiding unintentional barriers that prevent players with varying impairments from accessing or enjoying the game through design or bespoke accessibility features.
Games constantly have intentional barriers, like needing to defeat an enemy or solve a puzzle to progress.
With accessibility, we want to avoid unintentional ones.
The primary type of disability I'll be discussing today and how we design for them is motor disabilities, those relating to control and mobility.
Some examples are limb amputation or tendinitis.
With less ability to engage with the game's controls, many common actions become difficult or impossible.
In addition, some players experience fatigue being only capable of playing for a short time.
Let's look at why motor disabilities can be a particular issue with God of War.
Here's an image of the control screen.
All the buttons on the controller are used.
Having a lot of actions and reasons to use them is all part of what makes gameplay fun and engaging, both in and out of combat.
But this presents significant challenges for us as developers to provide an accessibility experience.
How do we approach this?
There's some key context to consider from early in the project that impacted how and when we approached these problems.
Early on, while there was a push for expanded accessibility that many could be on board with conceptually, like with anything, there was also some healthy skepticism for a few reasons.
In evaluating features, we generally considered these three things.
First is player value.
Predicting value was initially tough.
Many didn't know what the opportunity for improvement was or how players would benefit from some suggested features.
We break out player value further into volume, which is how many players use it, and magnitude, which is to what extent does this feature transform the experience for those who use it.
Second is cost.
We had a good understanding of what it takes to make a boss or an enemy, but much less knowledge of what it takes to execute accessibility features.
This made signing up for a robust set of features difficult.
Third is whether or not the feature conflicts with the design intent.
Because of the first two features being so significant on their own, exploring features that can conflict with the intended design was much less common early in the project.
How do we move forward from this initial uncertainty?
We looked at things that wouldn't conflict with the design, that also had easier to understand player value, to get our feet wet, so to speak.
Some examples for us were highly expanded control remapping, which took a great deal of work due to the way our engine previously handled inputs and the sheer number of possible permutations.
Things that we could semi-automate, such as traversal.
We read the stick intent for contextual traversal that would previously require a button press.
These both showed value at partial implementation, even though full implementation took much longer.
So even if full auto-traversal is out of reach, automating Manson's alone may be feasible as an improvement.
The experience gave us an understanding of the complexity in the space and confidence that we could succeed here, leading us to take on more.
And that leads us to the first couple of features I'll discuss.
These are some of the trickier problems we tackled in enabling players with motor disabilities to engage with the combat while not conflicting with the design.
Having a player-controlled camera is a significant motor disability issue due to requiring the use of both sticks frequently.
Many players impacted by these disabilities can only really operate one stick at a time.
Because Kratos uses a strafe navigation set and his attack orientation is relative to camera forward, players can't use the navigation stick to aim their melee attacks.
Our playable character being encouraged to regularly switch back and forth between melee and ranged combat adds extra complexity to lock-on systems.
Players may choose to use lock-on exclusively, sometimes or never.
So we needed to solve both cases while expanding accessibility.
The entire combat system is designed to work without lock-on, and the player can disengage at will.
Many players decide to use it 100% of the time anyway.
That's okay.
So it's key it works well in as many scenarios as possible.
And the regular lock-on has a lot of things that are important to it working well in the system.
In a game where we're encouraging the player to switch back and forth between melee and ranged combat, it's natural to be locked on to the enemy and then pull aim.
And we allow you to freely aim even while locked on to support managing fights with multiple enemies.
When aim is released, the camera snaps back to the retained target, which you can see in this video as I incapacitate an enemy with the axe before reengaging with the locked on target.
Lock on is helpful for players who can't use bow sticks in combat.
But when viewed as an accessibility feature, there were issues.
When targets die, having to find a new target is a big ask.
A player needed to press R3 again, an input requiring force that's even on the right stick.
Enemies had to be on camera to be a valid lock-on target.
So if you physically cannot control a camera, this is counterproductive.
Enemies disengage lock-on in certain cases, like to enforce camera control as a skill.
Aim causing lock-on to temporarily disengage presents a barrier for players with low dexterity to use ranged attacks.
The enemy can move out from underneath the reticle by the time they can throw their weapon.
There was an opportunity to expand this for players with disabilities.
And the goal was to keep the default lock-on as is and allow players to opt in to more help, which comes at a trade-off.
So what do we do to improve lock-on for accessibility?
When a target dies, we can acquire a new target.
We continue to be locked onto the target, even during aim.
Enemies can't disengage lock-on, except in rare cases, like enemies going completely above the screen.
We were also pushing mid-combat traversal a lot this game, which reorients the camera.
We needed to introduce the concept of disengaging lock-on and then reacquiring the target afterward, which would come in handy later.
And we need to consider those off-screen targets.
Completely locking on to the target introduced a problem.
In this video, the right stick does nothing while locked on and aiming.
But many players play with lock on always engaged 100% of the time, meaning we needed to provide access to precision throw gameplay even with these lock on settings enabled.
That's where sub-target aim flicking comes in.
Initially, we thought we'd only allow you to flick when it would guarantee a positive result, common instinct when building assists.
This raised a lot of questions, made implementation complicated, and required we made assumptions on what the player wanted to do, which could prove false.
When we moved to a more generic model, this became easier to implement because we could share data across characters more easily.
Also important is that this granted access to experimentation.
Nothing prevents you from trying to headshot or trip an enemy that doesn't support those hit reactions under free aim, so there's not a great reason to do so here either.
In addition to solving the need of reliably finding a lock-on target, we also turn a largely analog endeavor, which is precision aiming, into a much less demanding activity for the player.
With auto target, we don't have access to free aim, but we can move the stick up or down to flick to various points of interest, like the creature's head for a headshot, or their legs for a trip.
Melee focused games rarely do this, except on very large creatures.
But because of our emphasis on fun enemy hit reactions, this worked very well for us.
And when precision throws were mandatory in certain sequences, this feature was there to help.
The player may not want to use lock-on due to its trade-offs or its input.
So let's get into a feature that helps players who are playing without.
Our close, intimate, third-person camera resulted in enemies being off-screen in scenarios they'd typically be visible in other games.
So Kratos always orients his attacks to camera forward.
So you can't use the navigation stick to aim at enemies.
Some players with motor disabilities were able to either attack or control the camera, but not do both at the same time.
In God of War 2018, we had a setting that re-centered the camera toward our target when we successfully hit an enemy, which we knew helped beginner players with a less frequent need to rotate the camera manually.
But we could expand this into an accessibility feature by always doing it when the attack begins.
So how does that work in practice?
Here's a video of Kratos fighting a smithdraugr with this feature enabled.
The player can focus on attacking and defending without the need to control the camera, which is a perfect fit for this type of player.
Even if an enemy is behind Kratos, the player can simply attack to rotate around and strike.
If managing lock-on was cumbersome or it self-posed a barrier, this would be a strong alternative.
Now, just like with anything else in the game, We also need to validate the design of our accessibility through playtesting.
We had a consultant with a motor disability test out the combat with these camera assists and other features enabled.
They were lower level quad.
They could still use their hands to some extent, but also utilize their chin to engage with controls.
The feedback was highly positive, and I'm going to share some direct quotes from that player.
It was hard for me to orient myself in battle in God of War 2018.
The features really allowed me to overcome the combat myself.
It helped me try different things I wouldn't normally try.
When I felt comfortable in battle, I could focus on using more of it.
Let me try using Atreus now.
So due to not experiencing as many barriers with the controls, they were able to engage more with systems like controlling the companion in combat rather than just focusing on getting through the fight.
This is a combat designer's dream right here.
We have an accessibility feature that helps the player engage with the depth that we've gone through great trouble to provide.
I think that's some serious player value.
We used information from this and other play tests with players with disabilities to inform our next steps, like the next feature I'll be discussing.
That wraps up the camera assists and how they help a player target and attack enemies.
But what about finishing enemies?
To go over that, I'll need to discuss stun grabs.
When a creature's stun meter gets full, they become crumpled.
The player can initiate a stun grab that would either do damage or execute the enemy, based on their current HP.
The input for this is R3, or holding circle.
Now, these stun grabs fulfill that Kratos power fantasy, and are also absolutely required to complete many boss fights.
Yet they presented a barrier for those with motor disabilities due to the input being on the right half of the controller.
There was an accessibility opportunity here.
Now, you might think we could automate this stun grab.
And some on the team thought so too.
Kratos becomes invulnerable after inputting one and during the grab itself.
So why not?
But an unmotivated action can be really jarring with a close camera, and a stun state may even be triggered by a companion acting autonomously.
The player intent and choice would be lost.
Additionally, we further pushed cases where you would want to wait to stun grab, like dealing damage to the enemy in the crumpled state and then initiate a grab only when it became fatal.
To drive the point home, here's a clip where Kratos and Atreus are fighting two Draugr.
I trip one of them and punch him into a wall, which triggers the stunned state.
I then attack the other Draugr while that one is crumpled before initiating the stun grab.
This allows me to convert what would have been one stun grab into two, thanks in part to Atreus' help.
We wanted to somehow capture the player's intent even with this as an accessibility feature.
So we very quickly moved to the idea of stick intent stun grab, later named MoveStick.
The player already needs to use the stick to move, so why not use that same stick to stun grab the enemy?
Successes with traversal assist also reinforced this idea, moving that button press.
This gave the player access not only to stun grabs, but also the fun and depth around the stun grabs, if they want to do something else before initiating one.
Further, having this stun grab check running repeatedly while holding the stick also helped identify technical issues with the setup.
This improvement led us to improve the implementation for all players.
By now, we've had some of those accessibility wins and tackled those first two issues I brought up.
The player value was clearly demonstrated and we had more knowledge of what it took to realize these features.
That third thing, aligning with the design intent, would start to come up a lot more often.
Even when there could be a conflict with the intended design, would the opportunity be great enough for us to explore anyway?
One example where the accessibility feature began to conflict with the design was the extremely popular mini-boss checkpoint feature.
For main bosses, we often use phase transitions to deliver narrative or emotional beats of fights and checkpointing afterward.
Checkpointing in our boss fights allows us to make each phase longer and more challenging than if we required you to do it all in one go.
This is not the case for many bosses.
Enemies with large amounts of health are often used as an anchor in a group fight or as one-on-one challenges.
We had gotten feedback from our accessibility consultants about long-duration fights leading to fatigue and that losing progress was particularly problematic in this context.
So there seemed like an opportunity to improve for these players who needed it by adding a checkpoint.
We knew we wanted to restrict this for the highest difficulty setting because playing correctly for an extended duration is actually a design goal of that difficulty.
With that one stipulation, we got these checkpoints working in game and they were selectable in play tests.
It was in the main gameplay section of the menu.
So almost every player would see it.
This is where problems came up.
The player awareness was low.
They turned it on because, sure, who doesn't like checkpoints?
And then they played for several hours or days without realizing it was still on, or when it activated.
I'll share a story from one of those players.
In God of War, you can unload your powerful cooldown abilities to reach a threshold, die to the mini boss, respawn at full HP with all of your abilities, and then just repeat the process.
Players would constantly do this, getting a checkpoint, then another checkpoint, and then another.
We had a player play through the game on a higher difficulty, so they wanted some more challenge, but they had the checkpoints enabled.
They gave feedback that the mini-boss was underwhelming.
And after checking the tapes, we noticed that a mini-boss checkpoint was triggered, trivializing the fight for them.
They were robbed of that challenge they were looking for, and they didn't know why.
Tuning on the miniboss could have been done to address this feedback.
We would have harmed the design for players not using checkpoints, yet the core problem of miniboss checkpoint awareness would have remained.
We were now feeling that this setting could also be conflicting with the design intent of this difficulty, not just the highest.
To address this problem, we moved this to the accessibility menu so that players would mostly find this if they were really struggling searching through settings for help.
We locked this out on both higher difficulty settings, instead of just the highest.
First step the player should take if they're struggling against mini bosses, is turning down that difficulty.
With the improved messaging, better location in the settings menu, and locking it out on both higher difficulties, the feature retained its purpose while being far less likely to deny a player of their desired challenge.
We also give the player a reminder that the checkpointing is enabled on each death.
This improves player awareness of the feature and reminds the player that it can be turned off if they aren't having any trouble.
We've helped the player a lot with attacking and finishing off enemies, as well as dealing with those mini-bosses.
There's also the problem of defending against incoming attacks, which is what this next feature did.
Importantly, there was a clear design and conflict here from the beginning, which we've been building towards.
I'll quickly share some details about evades.
In this video, when Kratos is blue, he's invulnerable.
And evades in God of War are split up into two parts, the initial sidestep and the full roll.
In both states, Kratos is invulnerable for some frames and then becomes vulnerable to hits.
There's also a directionality component.
Here's an example where I sidestep at the right time but get hit because it was done toward the enemy.
Some attacks require the player to evade to the side or backwards, not simply at the right time.
The player is often tasked with evading frequently with a strict timing requirement.
Other games have accessibility features that let you become fully invulnerable during rolls.
And in fact, some team members suggested doing this for our evades, prompting consideration.
For our design goals, it's important that there's some risk and timing involved.
It keeps defense engaging over many hours of play.
In addition, because of the existence of a companion in most encounters, the player can earn damage without paying an animation cost.
If you could stay invulnerable indefinitely, you can make progress and defeat enemies this way.
What were our design instincts telling us?
Now, due to that conflict with our design goals, our instincts were much like Kratos here.
The game and all of its content is carefully balanced around the existing frame data.
So a change like this would be detrimental to the combat.
But in discussions, this notion was challenged.
Do we really know for sure that any change here would ruin the intended design?
How can we know that if we've never tried?
Let's focus on the problem.
The timing constraint is actually an opportunity for an accessibility gain.
And after all, the player's doing what we're asking, which is to evade, but they're too early.
If we could help the player out here, even a little bit, what would that look like?
Thinking of the problem from this perspective, here's what we produced.
With evade assist, we add some more invulnerability to both states.
Here's a video of just the sidestep slowed down for demonstration purposes.
This may seem subtle, but keep in mind, this is a game where one frame is often the difference between success and death.
We're giving the players several here.
They still need to have timing and keep directionality in mind, so they're engaged with the defense, but it's less strict.
We were able to validate this as we did with the previous features through playtesting.
This feature is also locked on the higher difficulties.
In the same way that defeating a mini boss all at once is an intended part of the challenge on the higher difficulties, so too is the timing aspect of evades.
Now I'd like to bring it all together by focusing on a post-game boss.
We have optional challenge bosses in the game, like the Valkyrie Queen here.
They represent the culmination of all of our systems and are the ultimate challenge for the player, providing the experience that hardcore players and many of us as combat designers crave when we play these types of games.
They have a high power level, encouraging engagement with side content elsewhere in the game and to be deliberate about build choice.
Their attack sequences are balanced around Kratos' defensive abilities and their frame data.
They demand control of the camera, requiring players to keep up.
They have a high health pool and a damage output, demanding the player play correctly for a long time while making minimal mistakes.
At the end of it all, the player must input a stun grab to finish the fight.
Now, most of those assists I just discussed are global features, so they'd be usable here.
We'd even gone out of our way to allow the enhanced camera lock on features to reacquire these bosses after they returned from going above the screen.
But allowing mini-boss checkpoints on these challenge bosses was controversial.
Some felt we shouldn't support checkpoints at all, due to this direct conflict with the intended design.
That journey of repeatedly failing, learning, and achieving victory is a highlight moment for many players, even on the lowest difficulty.
This was at risk if we were shortcut with this feature.
We knew players struggling at retail could internet search for help at the first sign of trouble and find mini-boss checkpoints, rather than change their play style or upgrade their armor.
Now, when the line between difficulty tuning and accessibility became blurred, so too was the path forward.
So we needed to consider this carefully.
Now, a player might shortcut the challenge, but they could also turn down the difficulty.
We already trust them with that decision, even if these are meaningfully different in a few ways, like those cool-down moves I mentioned earlier.
The fight's optional, but narrative is delivered after these fights.
Locking some players out of these experiences could itself be a design conflict with the narrative goals of the game.
Players may rob themselves of that journey, but how do we know they will enjoy it less if they selected it, or needed it due to fatigue or any other reason?
And to reach the checkpoint, they first need to make progress, as opposed to starting the boss with reduced health in the first place.
They're only addressing the endurance part of the fight.
Behavior and attack sequences all remain.
Importantly, the two higher difficulties already disallow it systemically.
We were now more sensitive than ever to accessibility gains after having seen huge wins elsewhere.
And if we hadn't resolved that player awareness issue as I described earlier, this probably would have been off the table.
But we decided to allow one checkpoint on these challenge bosses, which is pretty significant considering they're tuned around no checkpoints at all.
Key to reaching this result and having a good conversation was validating the expressed concerns.
While many of our concerns remained, this checkpoint would do more good for the players who truly needed it than harm to a player who didn't.
In closing, this was a long and difficult journey.
There's certainly still room to grow and improve, but we learned some great lessons from this experience.
Getting early wins built confidence in many areas, allowing us to push further.
Validating the design through playtesting with players and consultants with disabilities was crucial not only to ensure we were delivering the feature to the players who needed it, but also to find new opportunities.
The trickiest problems were when a promising feature posed a direct conflict with combat fundamentals and design goals.
These were challenging, but often the most rewarding.
It was important to validate concerns and be empathetic to the arguments against possible features, rather than dismissing them.
This kept teammates working together on the problem, rather than pushing each other away.
At the same time, it was important to challenge our design instincts and ask ourselves if we truly knew for sure that the fundamental design would fail if certain features were added.
Throughout this journey, we became sensitive to accessibility, wins, making us reconsider and earnestly push toward features we wouldn't have entertained at first.
Not only did we break barriers for the player, but also each other as players, as teammates, and within our design thinking.
This made it very worthwhile.
Before I wrap things up, I wanted to highlight a few talks that took place earlier this week at GDC about the game's accessibility that will be viewable on the Vault in the coming weeks.
If you want to learn more about how we validated our accessibility through playtesting, check out Playtesting God of War Ragnarok Accessibility Options by Sue, Senior User Researcher at PlayStation.
If you want to learn more about how we designed accessibility for low vision players, check out God of War Ragnarok, designing AAA low vision game accessibility by Mila, the game's UX design lead.
Last but not least, we're hiring for what's next.
If what I've gone over today excites you, please get in touch.
Check out our careers page to see open positions.
And that's the talk.
Thank you very much.
I believe I have three minutes for questions. If people can line up at the mics on each side.
No questions? All right then.
Got the pioneer over here.
Let's hear it.
Great talk, thanks very much.
Could you talk a little bit about turning off accessibility options at higher difficulty levels a bit more?
Like what the thought process behind that was.
Right, yeah, so you're asking why we turned off the settings or disabled them on higher difficulty settings.
Right, so that was to protect the design intent.
On those difficulties, we're asking the player of more, and sometimes specifically what we're asking of them is something that the feature conflicts with.
We're okay with having those help and assists on the lower difficulties because there's not a design intent conflict.
Does that answer your question?
Yeah, cheers.
Thanks.
So for the design team, what determines whether or not an accessibility feature is a toggleable option in the accessibility menu or a feature that's baked into the game itself?
We made many improvements that didn't necessarily need a setting to be enabled.
For example, when I believe this is true, if an enemy gets stunned, they actually make a sound.
I don't think that was the case in the previous game, which helps.
We also have an audio cue that makes it much louder if you go into the settings.
But other things like...
There were considerations for trying to make sure that things were communicated both through audio and visual.
Where an earlier iteration would only communicate it through one, and that was just kind of baked into that content.
But, yeah, I guess it kind of depends on the specific feature.
I hope that answers your questions.
Yeah, totally. Thank you.
All right, then. Seems like we're wrapped up.
Thanks, everybody.
