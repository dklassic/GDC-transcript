So, interviews are split, thank you.
That's it, I'm done, mic drop.
Interviews, I think, are generally split into two sort of things.
There's two major things that you're looking for.
The first is the technical side, the second is more of the personality, do they fit into the culture side.
So, I'm going to be focusing on the tech, and Brian's going to focus on the other stuff.
So it's hard, right?
Interviews are super hard to be in and to give.
You're in this panel of people trying to decide within just a few hours, is this person the right person for our team?
Can this person do the technical stuff that we want, right?
It's hard.
And programming is a very time-intensive task.
So it's how can you really tell in just a few hours what, how someone's really worth when it could take weeks for them to even spin up totally on your processes.
Plus, I mean, you're super, a lot of people get super nervous in these interviews.
So it's sitting there going, oh God.
And so how do you try and ignore some of that stuff?
Well, I think it starts with the big question of what are we even testing for?
So for me, there are three things that I care about when I'm dealing with interviews.
The first is, can they write usable code?
Can they write code that I can use and ship and send somewhere?
What are their knowledge of just CS, computer science concepts, as well as programming and general like AI and all that kind of stuff.
And finally, can they iterate?
So basically it boils down to, can you do the thing?
Do you know about the thing?
And can you handle someone constantly changing the thing?
Those are the three major sort of things that I try and search for.
And I do this with a, there's three sections of a typical interview that I tend to go through.
There's a phone screen, there's a programming test, and then there's an in-person interview.
And so I'll start with the programming test, which is can you write usable code?
So the programming test basically is a simple take-home test.
It allows them to work in their own environment.
It allows them to, they can use Visual Studio with whatever settings they want.
They can do anything.
They're in a, a more calm environment than if I was sitting here with my arms folded staring at them.
You give them some simple framework, SDL or whatever, and I just tell them, get this working.
It's usually triangles, some squares, stuff like that.
Then I hand them a game design and say, here you go.
Make this, you have four hours, make this thing.
Treat it as if this is shipping code.
And so all of the stuff that's gonna be on this test are the things that I actually care that they know how to write code for.
Usually there's some math stuff on there, some AI stuff.
And I make them, I want to see what kind of technical decisions that they make.
I want to see what data structure did you choose.
A common thing that I ask for is collision detection.
Did you just do the n-squared method or did you do some spatial partitioning or something a little more fancy?
Where did you spend your time?
And all of that.
So it gives us a context to really start some conversation.
When I bring them in for the in-person interview, if I bring them in, then that's usually the very first thing that we talk about.
Here's the code that you gave us. Let's talk about these things.
Why did you make this decision? Why did you make that decision?
So the major things that I look for are consistency.
I don't care what your coding style is, but one thing I think hopefully we can all agree on is that whatever your coding style is, it should be consistent.
I look for readability and maintainability.
Can I actually read your code?
Or using a lot of just single letter variable names and that kind of stuff.
Maintainability, can I, if this was a system that you wrote in a game that I'm having you work on, can I go in there and make changes as well?
just good technical choices, did you make reasonable data structure choices, algorithm choices, that kind of stuff, and scalability.
If I say, hey, what if we take these five agents that are running around that I had you build and now we wanna make it 5,000 agents?
How would we change that?
So again, this gives us a context for conversation and gives me a view into how they write code and what they should consider a production environment.
So that's the programming test.
And that's how I determine whether or not they can write usable code.
So I think things like whiteboard questions and stuff like that, where you're sitting in front of a whiteboard and it's like, write a binary search on a whiteboard with all of us staring at you.
That's useless.
I don't know what that's really gonna tell you.
If that's super important to you, have them do it in the programming test.
The next step is CS Concepts.
So I do this partially in the phone screen and partially in the in-person interview.
My easiest questions and stuff are on the phone screen because we're just gonna end the conversation if you can't pass some of these tests.
And I'll start with my very first question.
I always ask this question, every interview in Canada.
So if any of you happen to interview with me, you'll get this question too.
So I guess you get a little bit of an inside track.
And here it is.
Ready?
What is the difference between an array and a linked list?
And why would I use one over the other?
That's my very first question.
And here's the crazy thing about this question.
I would say about 50% of entry-level candidates fail this question, which is alarming to me.
About 10% of experienced candidates fail this question, which is equally alarming to me.
I like this question because it's it gives me a bit of a view into how they think about things.
So for a new person, new engineer, just out of college, I expect the asymptotic answer.
I expect, oh, I can index into an array in constant time.
But if I try and find the nth element of a linked list, it's big O of n, and so on.
I expect those types of responses.
Whereas a more experienced engineer, I expect things like, well, an array is much more cache friendly, for instance.
Whereas a linked list implemented with just node, node, node, node, well, that's all over memory.
by by cache. And then of course we ask the questions like, hey, how can you solve for that kind of stuff?
What happens if you bring a linked list into an array and so on.
So I start with this question, and I build from that question to other questions. Then from there you ask the questions that are, that are interesting, right. Data structures, so like hash tables, trees, graphs. What are these things? Why would I use these things?
And in the in-person or phone interview, I'm never making them actually write code.
I'm making them, why would I use these things?
What are these concepts?
Breadth-first search, depth-first search, Dijkstra.
These tools that we tend to use, why would I use this stuff?
What's the difference between breadth-first and depth-first?
Here's a graph on a board.
Draw for me what the node expansion would look like.
And AI concepts, A star, utility theory, behavior trees, that kind of stuff.
One of my other very favorite questions, which I'll also give you, is describe a use for A star other than pathfinding.
Do they know that A star is not just a pathfinding algorithm, right, it's a graph search, it's a generic graph search.
You need some kind of source, some kind of destination, some kind of heuristic that can get me there, that can estimate.
Cool.
So these are conceptual questions.
These are not implementation questions.
These are why would I use this thing, right?
When should I apply this thing?
Have you heard of this thing?
These are not questions that are deep, technical, like write the code for this.
Because if they're sitting there in front of this panel, that's not gonna simulate what they're actually gonna be doing in real life.
That's for the programming test.
Leave all that stuff on the programming test.
That if it's super important to you that they do that.
So the next thing I want to talk about is the iteration side of things.
This is the third thing.
So iteration is, games are incredibly iterative.
That's, it feels like that's all that we do is iterate, right?
The Sims 4 AI is something like 10,000 lines of code.
So if I just took that code right now and just typed it in, that's not going to take very much time.
It's the iterations, the two years of iteration that we spend over and over and over and over.
How many times have I rewritten that freaking formula?
Just to make it feel right.
So iteration, it's important.
So usually what I do is I show them some kind of architecture.
Here's my AI architecture.
I describe it to them and I say, what do you like and what do you not like about this cool AI architecture?
Then I just start throwing everything I possibly can at it.
Basically, I play the world's shittiest designer.
So I gave them this architecture, and I try and break it in every possible way that I can to see how do you handle not only the failure of breaking this architecture, of your architecture starting to fall apart.
But how do you handle me as a designer making all these design changes?
Because again, that's life, right?
A designer is going to come and say, you know, I really like this.
But I think we should change it to do this.
How easy is that?
How hard is that?
How easily can I make relatively large, from a behavioral point of view, changes?
And so either they're going to handle it or they can't.
They're going to be the board cube on the left, and they're going to be perfectly fine.
Or they're going to fall apart completely on the right.
So that's what I do.
I spend those are the three main pillars of things that I look for.
Now, I want to talk about interviewing anti-patterns.
That's the next big thing.
Interviewing anti-patterns.
So these are the types of things that I've done.
I think probably all of us have done this.
And certainly all of us have been in these types of interviews.
And I've found that they've provided basically no utility in terms of whether or not this person's going to be a good engineer.
So the first one is questions that test whether or not you've gotten this question before.
This is one of my favorites.
Oh, God.
OK.
This is one of my favorites, and I've gotten this twice now, at least two or three times now.
And I, I have people ask this question quite a bit. Here it is.
Detecting cycles in a linked list.
This question.
Right, we all know it's Floyd's cycle finding algorithm, right?
It's the two, it's the two pointers that sort of race each other.
Like, there's a, there's a, a constant time memory solution for this.
But here's the thing, like, what are you really testing for here?
Right, linked lists were invented as a thing in somewhere around 55, 56, and Floyd's algorithm was invented sometime in 67.
Like, really? You're gonna expect somebody who has never heard of any of this stuff to find something what took us over a decade to figure out.
That's, I don't know what you're really testing for here when you're doing this kind of stuff.
Also, and I'm gonna actually ask this, how many of you by show of hands in some production environment have actually implemented this algorithm?
I'm curious.
Zero.
What the fuck are you testing for?
Right?
I hate this question.
This question is useless.
Do things that you're actually paying them to do, right?
Okay, second question.
Questions that test your memorization.
So this is like API questions, unless you need an API expert, like deep API questions.
And so I was once asked, this is one of the stupidest questions I ever got, was what does cster do on the string class?
Really?
OK.
Mathematical formulas, I don't like, Bezier curve is another good one.
I don't, I couldn't, I couldn't recite that right now, but I can look it up in two seconds, and I can tell you why or when to apply that particular thing.
What does it actually do?
What are the various tuning values for it, and so on.
So having somebody explain the purpose of these formulas, great, anything I can look up in two seconds, what's the point?
They'll just look it up.
In a real, in the real world environment, they're just gonna look that stuff up, and they should.
Again, the exceptions are if you need an expert in that particular thing.
So if you're working on a Unity game and you need someone who has really deep knowledge of Unity, great.
Ask all of the Unity questions you want.
Okay, esoteric language questions.
This is basically the same type of thing.
So these are like language, like deep, deep language questions that, does it really matter?
I mean, I can tell you I learned C sharp because I got hired on The Sims Medieval, which used C sharp.
I learned Python, that I know Python, because I got hired on The Sims 4 that used Python.
That's how I've learned, with the exception of C++ and x86 Assembler, that's the only, I've only learned languages because I've been hired on a project that used them.
So, unless you want a language expert, or they have it on their resume and there's gotchas, for instance, Lua's one-indexed arrays, thank you, Then I don't think that it's useful to ask these types of questions at all.
I don't know what it's really going to get you.
Again, if you're hiring an expert, all language questions are fair game.
OK.
Finally, clever puzzle questions.
Right? These are like, why are manhole covers round?
How many gas stations are there in San Francisco?
And this is maybe where I'm going to get the most pushback.
These types of questions, I get why they're asked.
Right, so like how many gas stations are in San Francisco?
Or I think the original one was in Seattle, because I think it was a Microsoft question.
So this question is basically asked to see how do you think about this sort of super abstract problem?
But I think there are better ways to handle these types of questions, right?
For example, one of my co-workers, Peter Ingerbretson, who I did a lot of these interviews with when I was at Maxis, he has a famous question, which is his sock question.
And he starts it off, prefaces it with, this is not a trick question.
How do you sort your socks when you first wake up?
Or when you first get them from the dryer?
And then goes into more questions beyond that.
So you can make these types of questions work, but just asking them open-ended abstractly, I don't think buys you anything.
OK, real fast, the conclusion.
Use programming tests to gauge their ability to write code.
The in-person interview should be about high-level CS concepts, AI concepts, that kind of stuff, iteration ability, and please avoid those four anti-patterns that I created.
And this is Brian.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
How much time?
I don't know.
All right, hi.
So I'm gonna, I'm Brian, this is Rez.
And you people are beautiful.
I'm gonna be doing the other half of the talk, which is the more squishy side of the interview, where I'm gonna try and talk to people and find out who they are as a person, instead of as a coding gent or gentess.
Jesus, what's the version of that?
Or a lady.
So anyways, three clowns and an AI programmer walk into a bar and the joke is basically, can you tell the difference?
Why is hiring a great AI person hard?
Is it literally because AI programmers are that special, that we're that rare, that it's just hard to find us?
I don't think so, it's the other direction.
It's because AI in general is a super broad subject.
You could be talking about navigation or...
you know, animation or cognition or decision making or, and I'm not even gonna get into like, the different genres of games have very, very deep levels of knowledge in each sort of thing.
So it's a super broad subject.
You need a lot of design sense.
Some AI challenges have to require design changes in order to solve really.
You not only have to be a computer scientist, you have to be a cognitive scientist.
And so you can really understand how the brain works so that you can like, trick it better into thinking that you're making an intelligent system.
And you need somebody who can basically talk to anybody else on the team, because a lot of AI systems that really, really come together well are a very hardcore gelled version of code art.
audio, the whole nine yards, like coming together at one.
And finally, you kind of have to write really high quality code because the AI programmers are kind of up on the top of the totem pole of the whole code stack. And so, if somebody throws a bad animation in there, the AI is broke. If somebody puts some bad markup data in a level, the AI is broke. And if you don't write high quality code, they're going to actually think the AI is broke over and over and over again.
Whereas if you can get your code good high quality and then make good debug systems, you can actually start having the rest of the people in the totem pole debug their stuff instead of always just basically assuming it's your stuff.
So it's a hard problem.
So you're going to interview somebody.
Be prepared is my first thing.
A candidate's going to come in.
They're going to want to have a lot of questions about what kind of genre you're working on, what the team size is, what kind of autonomy they can prepare for, all of this.
Sorry about the little purple thing.
That's a little scene in a sec.
And then the other thing you should also do is not only know all this stuff about your game, you should actually look at the person's resume ahead of time.
Most people don't do this. I have no idea why.
This is actually some random candidate's resume. I don't know who this is.
It's mine.
I usually just go through it and do some quick check boxes so that I know things that I want to ask them about, like what projects they've worked on in the past.
I want to quickly skim through and see what their role progression has been over the course of their career.
Usually, what I'm looking for is discontinuity in the graph of their things.
So if they go from college to CTO back to janitor, I kind of want to ask them about that.
That might be a good thing or bad.
I don't know.
And then finally I quickly scan through and find other words that I don't see in a lot of resumes like this particular person published a book and he also has led teams and he's also done design work.
So I'm gonna ask about that when I get into the room with them.
Don't read their damn resume in front of them.
It takes up a lot of time and it shows a lot of disrespect.
You don't have much time with a person and we're trying to find, we're trying to find out a lot about this person in a very short period of time.
And I don't have really cool ways that you supposedly went to college for to do it when I'm talking about these more soft human skills instead.
So, get in the room, and the first thing, like Rez was saying, is determine their nervousness level.
Again, we have a very short time, and I need to break that down really, really fast, because I'm gonna ask you to confide a lot in me over the next hour, let's say.
And so one of the things I've determined, actually, with personality, because I'm not gonna have them do whiteboard tests, I'm not gonna have them do, is if they're really, really super nervous, I'll just say, hey, do you wanna walk?
The little bit of physical activity actually sucks the nervous energy right out of them.
I actually had one interview where I walked in, it just happened to be on Halloween, and I came in dressed as Thor.
and gave the interview.
And I said, you know, I'm sorry about this afterwards.
She goes, actually, I was super nervous, but then when you came and dressed as Thor, it just all went away.
So now I do that all the time.
No, I'm just kidding.
So basically what you wanna do is quickly transition into a full-blown conversation.
This should be a very pleasant conversation.
Shakespeare is always good with the words.
You know, try to be pleasant and witty and make it an open sort of notion.
It's a very trusting environment, but it should be novel.
If things feel too rehearsed, people are gonna pick up on that really quick.
But this is where you really need to know something about yourself as an interviewer.
If you're not the kind of person that can walk up to anybody and start a conversation, if you're not the kind of person that feels comfortable sharing so that they'll feel comfortable in return sharing, things can get really weird really fast and you don't want to do that.
So maybe you're not the right person for this part of the interview.
Biggest thing you want to find here is, does this person fit into the team?
Is he a good ingredient in the team stew that you've currently got going?
So I ask a couple of questions, usually about what's the worst project they've ever been on and the best project they've ever been on.
depending on how the conversation is going so far, is which one I ask first, right?
And the thing is that these actually give you very different notions back about the person.
The worst job, it could be because the game sucked or the team sucked.
And in either case, I wanna know if they have any notions as to how to fix things.
I also wanna know how much smack they're gonna talk about their ex-employee or ex-peers or their employer.
I kinda wanna get a sense of like, how sort of spiteful people are, if you will.
You know, games are a high-tension environment and this is going to come up.
I don't know that I want somebody that's going to walk around for the next 20 years telling everybody what a POSI is because of one thing that I made him do someday.
I want to know if they'll take any personal responsibility for if things went bad, if they have any thoughts of it, or if they're the kind of person that just blames everybody else.
And then finally, I have to know their pet peeves.
Pet peeves are actually the thing that in many cases will ruin an entire project for people.
It turns out that this person just absolutely can't stand being in the dark, and the whole team loves to have the lights out.
and I know my team actually has the lights out and so if that's his pet peeve, it's probably not gonna work out.
In the other direction, the best job ever tells me their passions and what they think, what's most valuable to them.
They might actually tell me, I've had this multiple times where a person tells me that his favorite job ever.
had constant year-long crunch, and he hated half the people on the team.
But goddamn if he didn't love the game, and they shipped on time!
And so like, I know exactly what that person values and what he's gonna overlook every other bad thing if he just gets that one thing, right?
Secondly, it tells me where in the hierarchy they really want to be.
Type A, type of very, very go-getter people will rarely ever tell you that their best job was whether they were a foot soldier.
But they will tell you that, you know, somebody took a chance on me and gave me this huge pile of responsibility and it was the greatest job.
And so now you know kind of what they think of themselves as far as what they're capable of and also where in the hierarchy they see themselves.
Anytime you're talking about projects, though, please make sure you very explicitly ask them what it was that they did themselves.
Otherwise, you might get a story about their favorite job, and it turns out that they were an embedded QA on it for a week, you know, 20 years ago, and they just still love that job.
Just make sure that you find out.
Next area I go into is I ask this question, what kind of work do you want to do here? This just gives me their expectations.
And again, it goes back to that broad AI notion.
I want to know if what they think of as game AI is what I think of as game AI.
And I tend to just let them go on this for the longest time because even if they don't have a perfect fit for my team, there's a lot of other roles potentially in the company.
And so I let them go as to what kind of work they actually want to do, because that role might be down the hallway.
And so even if they don't fit specifically on my team, I can go get them to somebody else real quick.
And then finally, to Rez's Microsoft questions, the puzzle questions.
I don't really believe in them either when it comes to technical code or how abstract problem solving happens.
But when it comes to getting to the deep notions of what personality are, I actually agree with personality style Microsoft questions, if you will.
So I'll ask questions like, how often do you change the layout of your living room?
This gives me a little bit of a notion as to their OCD nature, how much of like the control of their environment they kind of have.
And to a certain extent.
This actually has a pretty good correlation with how they feel about code refactoring.
Do you like 20 problems or one problem with 20 parts?
This is a sort of a question that says, do you mind having a bunch of tasks that could go in a million different directions, or do you absolutely kind of need this tethering one direction that you can always steer back towards?
I find that people that are going to be doing prototyping enjoy more 20 problems, versus people that are more production-oriented want one problem with 20 parts.
When's the last time you changed somebody's life?
This is a sneaky way of finding out how good of a leader they are, even if they've never had a lead role.
Sometimes it doesn't take much to change somebody's life, and the people that actually have cool answers to this question are probably good people that you want on your team.
When was your favorite childhood toy?
If you're outside playing sports versus inside playing with Legos versus you had a bunch of action figures and dolls and you were doing more story-based stuff, I wanna kinda know the deep lizard-level brain of what you think of as play.
Because I know what this company thinks of as play and I wanna know if you're compatible with that and I also wanna know if the thing that really drives you is exploration or social dynamics or building, those sorts of things.
How many books did you read last year?
This is kind of a general one.
I know a lot of really smart people that don't read at all, but everybody I know that's a voracious reader is really smart.
And typically, if you're a voracious reader and you don't know exactly what it is that's going on, you'll probably go pick up a book and read about it and learn about it and be good.
And if you have that voracious reading habit, I find that those type of people, especially in an environment that's a little bit chaotic, I don't have to worry about them as much because they'll just read the damn wiki or something and figure out how to make things happen.
and tell me something there's no way I would ever guess about you.
If I actually have spent some time with you and we do have some trust, I find this is a cool question that they'll give me an answer to that there's no possible way that I could ever know how to ask them.
And so they'll give up information that's cool or deep about them that like I couldn't have thought otherwise.
So then I turn it about, of course.
I always give them, this is a conversation, right?
So I'm always asking them questions that they can answer, but at the end, give them extra time.
And now slam right up against the edge of your NDA because this is the place where you wanna show the company's flaws, you wanna say, hey, you know what?
No place is perfect, but here's why working here is good anyway.
The company is good, the project is good, the people are good, and therefore, the flaws aren't the problem.
Also, I have a lot of excellent answers to why do you work here, because everybody asks this question.
It's sort of like the easy, I'm going to ask the interviewer the question question.
And please don't have a rehearsed answer because it comes off as very...
It comes off as rehearsed and it's insincere.
And again, human beings are just gloriously good at doing insincerity.
And remember the doorknob questions.
This is a medical thing.
People will go to the doctor, they'll say they have something that's untoward, wrong with them, so they don't want to say it because they're embarrassed.
They'll say, I have stomach pain and a headache, some generic thing, and they'll hope the doctor can find it, and of course, he never does.
And then he'll go, okay, and he'll walk over to the door, and he'll grab the doorknob, and he'll turn around and say, so is there anything else?
And there's some actual statistic that some large percentage of all diagnoses happen with the doctor's hand sitting on the doorknob going, are we done now?
And that's actually right when the person says, oh well, I'm having, hmm, hmm, hmm, all right?
And then that's when it comes out.
So usually what happens at the end of the interview is I basically say, you know, here's my, you know, I have to go now, but here's my, my.
my email address, an hour from now when you think of a question, or tonight at 3 AM when you wake up with this question in your mouth, please just shoot it off to me and do it.
More times than not, that is the question.
The answer to that question is the one that gets the person to actually join the company.
That's the one that they really have a deep fear, or they really have and they didn't think of it on the time, because maybe we did have a good conversation and it took too long.
Anyway, so that's the last part of that.
So any questions?
if you're right in the back with your hand on the doorknob.
Hold on.
Yeah, go ahead.
We got you.
I put my hand on the doorknob.
He put his hand on me.
I am apparently the doorknob.
So, yeah, we've got two, three minutes.
Come back up here so you're on camera when you're answering.
So we'll start here, and it depends on which way you turn to in your second.
Sure, Jim Whitehead from UC Santa Cruz.
So I'll ask kind of on behalf of my students.
Seems like a lot of what you were talking about was aimed at people who had a little bit more experience.
And I'm just wondering if there were things you could say more to someone who's fresh out, entry level, who is also going through this process.
Like trying to get a job, basically, that sort of thing?
Right, yeah, like maybe they've done a game project as an undergraduate, they've done the AI on that.
Not like they've worked on some shipped triple-a title, but they would certainly love to break in and they love it. Yeah I had a whole extra five minutes where I was going to literally go through just that that I had to cut.
Very briefly, for technical stuff, when it comes to students, make sure that you study up on those things that I had mentioned.
Those are things that you could ask for, but the hard part is, especially entry-level jobs, I'll have thump, here's 60 resumes that are all, I have a four-year CS degree and have done a student project or something.
So it's really about...
It's really about those projects, those student projects.
And that's, in fact, I hired a student of yours once, based specifically on their final project.
At least that's what made me bring him in for the in-person interview and all that stuff.
So those personal projects, that's how you break out of that paradox of the industry of must have experience making games before you can come into the industry and get experience making games, is those projects are the magical ones.
I have a lot of other things that I could say.
Let's talk afterwards.
I'd love to.
Yeah, on my side, it's mostly the same.
I will talk to them about how they work together with their teams on their school projects, because I'm trying to test interpersonal communication issues and how you deal with people that just don't want to do anything, and those sorts of issues, which are exactly the same if you're in college or you're at Ubisoft.
Yeah.
All right, thank you.
Thanks.
Hi, so I've been on both sides of being a person who's interviewing people and also a person who has interviewed.
And for both sides, I've run into situations where someone can kind of talk the talk without walking the walk.
So they're able to kind of say the right buzzwords, answer the questions, like this.
Kind of.
faking their way through the interview.
Do you know of any red flags for both the interviewer and the interviewee that kind of dictate, oh, this might be a bad job, or oh, this is a bad candidate, and they're trying to kind of talk their way into a position that's not good?
So technically?
Like they're failing technically when they get on the team?
Right, but they're actually able to kind of list off the skills and answer a couple of technical questions because they've actually researched or they've been to panels about.
how to do a 10-hour interview.
So they're regurgitating what's in a book, basically, or what they've heard at a talk.
That's why the programming test is critical.
And that's why I also give it as one of the very first things that I do is I hand them this programming test and say, write code.
And it's not something that they're going to be able to look up.
It's like.
here's an actual thing that I need you to do that is somewhat related to the game itself. So, you know, they can sit there and use every buzzword that they want in terms of utility theory, but if I say, here's a little project, build me a little utility system for these autonomous agents so that I have a virtual city working, then they're going to be able to do it or they're going to fall apart.
And I've had the opposite be true, by the way, as well, where they can, and more often where they, I had a candidate who fell completely apart in the in-person technical interview, but when we gave him the programming test, it was really solid, we hired him, he was great.
Okay, so you see the actual technical test as an absolute must-win interviewer?
Yeah, oh, absolutely.
Because I've had that same problem when I don't give the programming test.
If someone will come in, they sort of know what they're talking about, and then, but they can't walk the walk.
They can't actually write the code.
All right, thank you.
You're welcome.
And that's it.
Thanks, guys.
