Bye everyone. Thanks for coming.
So I'm Simon Oliver.
I'm the founder of Hand Circus.
We're a small, independent studio based in London.
And the focus of my talk today is really just working out how you can do a lot with a little.
So we're a small team, core team of only four.
Most recently, we created Seabeard, which launched last year, which is a large scale, free-to-play adventure title.
It's absolutely huge.
And this talk is really about how we did that.
It's also co-written by Ben Christie.
So Ben Christie is our technical lead.
So he's really helped contribute and shape the talk itself as well.
So a little bit of background about us.
We're kind of from iPhone prehistory, so way back when the iPhone was very much embryonic.
Started playing around with a few ideas for the iPhone.
This was way back in 2007 when there wasn't an iOS SDK.
And then we launched our first game, Rolando, with Njimoko in 2008.
So we started off in paid iOS.
We then transitioned to do a paid PS3 game called Okobu, which was a much, much larger undertaking.
And then most recently, we've come back to iOS, but now taking a look at free to play with Cbid, which, as I said, launched in December.
So in terms of our overall history, this is generally an approximate graph of what we've been trying to do.
So we didn't really want to grow big.
The idea wasn't to have a huge team, but we wanted to take on these increasingly ambitious projects.
So in order to do that, we obviously had to figure out how we can do that with our relatively small resources.
So we've had some successes.
The early days were amazing.
We were very lucky with our timing.
We had an app that was just designed for the iPhone early on when there weren't 600 new games being released every day.
But we also made some mistakes.
So yeah, it hasn't always been plain sailing.
And I want to be pretty candid with the things that went wrong along the way as well.
So in terms of the structure of the talk, starting off just really talking about configuration and composition.
So how you build a team, how you work with partners, what kind of team members you're looking for, and yeah, really how to construct the composition of the team when you're working on a project.
Then focusing on efficiency, working out how you can remove blockages, working out how you can prevent wastage, and really making sure that resources you have get put to best use.
And then finally, I'm going to start talking about empowerment.
So really how you can empower your team members, what tools you can give them, how you can build a culture that allows them to thrive and really just enable the work at their peak capability.
But this isn't really a sweatshop talk.
It's not about efficiency at all costs.
It's not about wringing every last ounce out of your employees.
It's really about how to do it in a productive way, in a positive way, how to make sure the team are just enabled and can produce amazing things that they can be proud of and really enjoying that kind of high level of work.
So starting off with team structure, really just how you can...
Yes, so really how you can structure the team itself.
So first of all, yes, so there's obviously a balance when you're choosing the team members for your team, whether you go for core team or whether you go for contractors.
Now I'm not trying to be too disparaging about contractors there.
I was a contractor for a while and it was a really valuable experience and sometimes they can be the absolute right fit for the job.
So yeah, I think, you know, if you're building out your team, there's a lot of considerations you really need to make because there's pros and cons as to whether or not you have somebody in the core, permanent member or whether they're a contractor.
So first of all, if they are a core team member, obviously they have a much greater sense of ownership.
This is their game.
They're not just proud of one small part that they contribute to, it's their overall game and they want it to succeed and they want it to be great.
So that's a huge motivational factor when you're working on a game, is to be part of the team that did that.
Secondly, knowledge retention as well. I think this is a really interesting thing.
There was a great article in NH Magazine about the culture of Nintendo and how Nintendo managed to just maintain this extremely high level of quality.
And it's because generally people don't leave.
They tend to stay there for a huge amount of time, like the team that made WarioWare.
I think a lot of them were in their 60s and they've been in Tendo for 20, 30 years.
And obviously that creates this incredibly healthy library of knowledge.
And it means when a new starter joins, they can just tap into that and just absorb that knowledge from other team members.
Whereas if you go for a contractor, obviously the moment they leave, all the knowledge that they've acquired can no longer be passed on.
Also, it tends to attract top-tier talent.
You know, people generally want to be part of something.
There are exceptions to that, and there's obviously certain specializations where that doesn't really apply.
But generally, people that want to be part of a great team work with other amazing people.
So you will attract great people if you're looking for a core team member.
Also, financially, it's better long-term value.
Obviously, freelance rates tend to be a little bit higher than the equivalent you'd pay a core salary because they will end up having to manage the uncertainty and the fact they're not always gonna get work.
So, better long-term value for a Quartzii member.
But on the negative side, utilization.
Obviously, you need to make sure these people that are working to you full-time, you need to make sure they actually have something to do that's productive and is actually part of your core objectives rather than just them, you know, just keeping busy doing something.
Long-term commitment as well. Obviously when you take somebody on full-time, you have to support them and make sure that they have stability and that they are a full-term employee.
So yeah, that's something you need to consider.
And also there's a project fit risk.
If you get somebody that's a little bit too specialized, you want to make sure that they can join you for multiple projects.
Otherwise, if you have somebody that has a very, very distinct bespoke art style that might be great, you know, for the gothic horror game that you're making, when you move into doing something that's completely different, maybe a stylized cartoon game or space game, you know, they're not going to fit necessarily.
So there's a risk there.
You want to find someone that is going to work with you effectively across multiple projects.
The benefits of a contractor, conversely, specialism.
You can find somebody that is the very best at what it is that they do and is most applicable for your project.
So for example, we work with a couple of contractors internationally.
We work with a character rigger who's based in Belarus, and an animator who's based in Israel.
And we have the opportunity to go through polycount forums and conceptart.org and look for people that just nailed the kind of look that we were looking for.
And that's a huge benefit.
It means that you can really cherry pick people that are ideal for that particular role.
Also, flexibility. You know, this is great, the fact that you can have somebody for two weeks.
Obviously, depending on the way that you negotiate, the way you work together, you could potentially have them for two weeks, it could be a bit of a lull, bring them back, say, actually, I need some last-minute help, I need a couple of days here and there.
And that flexibility is just ideal, because again, it really minimizes wastage.
Again, yes, so tying into specialization, you can find someone that is the perfect project fit in terms of their style, in terms of what it is that you're doing, the platform that you're targeting.
And that's extremely beneficial.
But you do have availability risk.
You know, if you do have somebody that joins you for six weeks and then you need them for another couple of weeks, four weeks later, all of a sudden, they could be working on something else.
They may not have availability.
So that's something you need to manage.
And again, conversely, with the benefits of full-time team members, there's knowledge loss.
That knowledge working on your particular aspect of your project, something they're building, if that knowledge disappears, and you need that knowledge later on, that's a huge loss.
And they're obviously more expensive as well.
So, yeah, that's someone to take into consideration.
But there are other opportunities.
This is my favorite piece of cosplay ever.
This is somebody going as every Johnny Depp.
But you can go for a hybrid role.
So you can go for something where you can have contractors with kind of slight additional benefits or other aspects to it.
So for example, one of the things we did for our second, well, our third game for Okabu was to establish a bonus pot.
The idea was that if the game does well, the profits from the game will be shared between everyone, even if they're a contractor.
And this is something I know another few other studios do.
So TigerStyle, the guys that did the awesome spider on iOS, I believe they operate under a similar model.
So it means you get a few of the benefits of a core team member, but some of the flexibility and other benefits of a contractor.
It's not a perfect solution.
Well, it has some benefits.
It wasn't really ideal for us, because you lose some of the most important elements, like ownership, that's a real key consideration.
But, you know, there's other different industries that work in other ways as well.
So, for example, the way that the film model works, it's not too dissimilar to the way that we work, is have a core team that works across multiple projects.
So this would be maybe a director, the guy that owns the production company, you might have a producer, somebody that works across all the projects themselves.
And then when you go into pre-production, you bring on specialists.
You bring on perhaps a production designer, cinematographer, people that are ripe for this particular project.
And then when you move into full production, you expand, you bring on contractors, you bring on actors, everyone that really, you know, composes the full team.
And this is, I think, something quite similar to the way we work and we find pretty well ourselves.
So the question to ask yourself, first of all, do you have enough work for a full-time role?
Is this something that you really need over the full length of the project?
Or would it be better to suit it to somebody just to come in and work for a couple of months?
Secondly, should the knowledge required be retained in-house?
Is this vital knowledge, is this core to your business?
Is this something you need to retain for future projects and in order to maintain the project itself?
Also, is this role only required in this project?
You know, it might be that you're making an audio game and then after that you've got no intention to ever do a music-based game again, in which case it makes no sense to hire somebody that's a music specialist for this particular game.
Would a specialist of the perfect fit be better than a gemriss in this case?
So yeah, would it be better to find somebody that is just doing the most beautiful gothic art rather than hire somebody that's, yeah, pretty good at that, but yeah, isn't really ideal.
So for us, this is the way that Rolando 1 and 2 are structured, give or take.
So I was the only permanent team member.
Mikko was brought on as a contractor but incentivized, so he had bonuses related to the performance of the game.
And the musician, we worked with Denefian and you guys are fans of Nintertune.
We worked with Mr. Scruff and basically just had the opportunity to go and cherry-pick favorite Mr. Scruff tracks, which was amazing.
And NG Moko also helped facilitate.
bringing in a contract programmer that really helped taking my terrible code and turning it into something that actually worked on the device.
And this excludes some of the roles in Ninjimoko.
Obviously, as the publisher, they had a number of other team members that worked on the project and really helped us assist in launching the game and making it a commercial success.
So this is the structure for Okabu.
So this is the one that we self-published.
So I was, again, the only permanent team member.
But all of the others had hybrid roles.
So again, incentivized by a share of the profits.
This game was a disaster.
It was very, it just went very, very badly wrong.
I was trying to take on too much myself.
So taking on the responsibilities of actually publishing as well as directing the game, I had too much going on in terms of the roles that I was trying to take on.
And also, with the exception of the level designer.
he was the only one that was working five days a week.
So the others were split between other elements of work.
So again, it really kind of dissolved any sense of ownership and made it far, far worse.
So don't have a team structure like this ever.
This is just like a complete nightmare.
So yeah, that really wasn't as successful.
But now we've learned from that, and now really restructured things quite differently for Seabeard.
So we have four core team members, myself, 3D artist, our art director, Mikko, and our tech lead, Ben.
And so they've all been brought on as permanent team members.
And that's really helped build up a much stronger sense of ownership.
We also have a number of specialist roles.
Some were maybe for a few weeks, some were for three months.
And I think probably the longest there was a level designer, island designer.
And he joined us for about six months.
But yeah, so this really just allowed us to have that flexibility while also keeping the core team compact and really focused on what they needed to do.
So we had no hybrid roles in this particular case.
But tying into that role blending, I think this is something that, you know, anybody working on a small project is aware of this.
You end up having people that do multiple different roles, sometimes too many different roles.
But I love this idea of, it's a coin turned by a guy that worked for an agency called IDEO.
I did a little bit of freelancing for IDEO in London, and really, I was really impressed with the way the company has run, the corporate culture of the studio.
And this guy, Tim Brown, coined this idea of a T-shape team member.
So the idea is that they are amazing at one thing, they're specialists in one particular area, but they have an appetite for cross-disciplinary work.
So they like working with other people on the team.
So I'm just going to read you a little quote from Tim Brown here.
T-shaped people have two kinds of characteristics, hence the use of the letter T to describe them.
The vertical stroke of the T is depth of skill that allows them to contribute to the creative process.
That can be from any number of different fields.
The horizontal stroke of the T is disposition for collaboration across disciplines.
It is composed of two things. First, empathy.
It's important because it allows people to imagine the problem from another perspective, to stand in somebody else's shoes.
Second, they tend to get very enthusiastic about other people's disciplines, to the point they may actually start to practice them.
T-shaped people have both depth and breadth in their skills.
So again, this is awesome.
This is just the kind of person that you want to have on your team, somebody that is passionate about the other things that people are doing, they're curious about them and really wants to delve in to collaborate with other people on your team.
This doesn't mean jack of all trades.
This doesn't mean somebody that's not that great at a whole bunch of things.
It means people that are awesome at one or two things, or maybe even three things, but they have this passion and this enthusiasm for the other disciplines that make up the team itself.
So benefits of role blending.
So obviously, utilization.
This is great.
If somebody isn't needed for a particular role or a particular time on the project, it means that they can potentially take on other elements.
So for example, they might help with community management.
It might be that there's an artist who's curious about level design.
And obviously, they may not have the same level of expertise as a specialist.
It means that it really helps smooth things out if there's a little bit of position in the schedule where they're not needed.
It also improves collaboration.
You know, you naturally get that thing, I'm sure all of you have experienced that thing, where you get two people that just really ring into each other's disciplines, really pushing each other and trying to come up with new ways to work together, to innovate, to find, you know, really push the project somewhere new.
So, it really improves collaboration.
And it alleviates boredom, you know, especially if you're working on a long project.
So for us, CBIT was around two and a half years.
It alleviates boredom. It means that the people get given something else to do, which is great.
You know, it means that they can try their hand at something else.
It spices things up a little bit.
It means when they come back, they're a little bit fresher to work on what is their core specialization.
But there are some negatives.
So it can be a little bit less efficient.
Somebody that is a specialist is obviously going to work more efficiently than somebody that is, you know, doing this as a kind of secondary element to their profession, something that they're passionate about but not necessarily as experienced.
It can reduce healthy tension.
So this is something that I really experienced, particularly with Okkaboot.
When you're working on a project, when you have to inhibit multiple roles that have different responsibilities, you get to a position where...
If it's a really serious important issue and you're having to kind of have the two sides of the argument in your head, it's nowhere near as good as having two people actually arguing it out, discussing it out.
So say for example, if you have a creative director who's trying to push the project and make it as ambitious and exciting and amazing as possible, you have somebody that's in charge of the finances for the project as well, obviously trying to make sure that it's brought in within budget.
And if you have that inhibited in the same head, you're not going to have a realistic discussion as to, you know, all the different aspects of the project.
So it can be pretty risky because it reduces that healthy tension that you really want to have in a team.
Also there's a context switch penalty.
This is something I've seen discussed quite a bit here at GDC this week.
When you have a mental model in your head, you've really built it up and you've really invested a lot of time in taking this on for a complicated task.
When you're switching over to something else, it's a completely different mindset, completely different discipline.
It takes time and it takes a little bit of time to kind of move from one to the other.
So you want to make sure that if you are context switching, you're not doing it every five minutes, every hour.
Maybe you can try and split days up or have different days when you're working between different disciplines.
So a question to ask yourself when you're planning out the role blending you're gonna have on your team, does the work require specialist knowledge?
Is there something that's better suited, somebody that is amazing at this?
And I guess tied into that, should this be broken out into a separate role?
And I guess, are the people on the team actually wanting to take on this?
It might be there are people there that are relatively T-shaped, but that T does not go anywhere near into the discipline that you're trying to find skill for.
And could the lack of cross-roll tension cause issues?
Again, like I was saying earlier, that can be a really dangerous thing if you are trying to solve challenging issues and you're trying to resolve this all in your head without getting it out and reasoning.
So to give you an example of the role blending that we had for Seabird, these are the four different core members of the team.
So Ben's primary role was technical lead.
He was also doing network programming.
He was a server engineer, UX designer as well, so really kind of helping build out the UI and experiment with making that as efficient as possible.
And he designed a number of the mini-games for the sailing that we have in the game as well.
And he really relished the chance to mix things up a little bit.
I think the nice thing is all the other roles here genuinely came from a place of enthusiasm from each of them.
So Hai, our 3D artist, also started doing level design.
So we had a contractor that was doing the level design for the islands in the game.
He was with us for about six months, and then we had a gap as we were moving towards the end of production.
We needed to rework a few island designs, and Hai jumped in and was a natural.
You know, he called it...
like playing Minecraft, I really enjoyed just the challenge of using the level design tools to experiment and create art in a different way.
So Miko, our art director, also did all the concept art for the game, the UI design for the game, as well as handling a lot of the marketing materials as a graphic artist as well.
Myself, as game director, I was also in charge of running the business, a kind of business administration.
I was also the producer.
That's probably the biggest mistake I made.
We tried to hire a producer and it didn't work out, sadly, for the project.
But I think that was a massive overhead on my part and really was a distraction from the other aspects of the game.
So that's the one role, if I could have broken that into several, it would have been producer.
but also doing game design and before Ben joined I was doing programming.
So, yeah, another part of that, partners.
So, you know, certainly in most cases for all of our projects we've had partners.
And they come in many different shapes and sizes.
So when you're choosing whether or not you're going to partner with somebody, there's a number of different factors in this, a number of different types of partners.
So it really depends on your project, your team, and what it is you're looking to get out of a project.
So, motivation for partnering.
Obviously money is probably one of the biggest ones in most cases.
So, that can be money for development, although obviously if you're working on a free-to-play game it also includes money for marketing and UA.
I mean, generally includes money for marketing anyway.
It may be, you know, it's becoming increasingly challenging if you're a bootstrap studio to actually be able to afford to do this yourself.
So there are companies out there that are just specializing in just purely doing the UA aspect of it as well.
Distribution, you know, obviously this is becoming less and less of an issue.
The actual getting things into the hands of people isn't really a problem anymore, but it used to be an issue if you wanted to get a slot on say, XBLA or PSN, you needed to work with a publisher that had those slots.
Certainly if you were going into retail, this wasn't generally something you could do yourself, but it's becoming less of an issue.
Although that's now transferring more into audience and discovery.
So if you work with a partner that has a pre-existing audience, obviously that's a huge advantage.
They're able to cross-promote through the network, and they're able to aid in discovery.
They probably have a lot of experience in terms of getting...
your game out there.
And resources as well. So beyond money, it might be that they have, you know, an expert, a crack, you know, team around monetization.
It might be that they have some amazing technology that, you know, you really want to, you know, tackle.
So it might be that you're working with somebody producing hardware. It might be that you're working with somebody that has, you know, a fluid dynamics engine that you really want to, that you really want to harness.
And they're looking for people to collaborate with on a game.
So the question to ask yourself when you are planning out your, whether or not to work with a partner.
So obviously a key part of this, you're trading revenue for resources.
So you need to work out whether or not this trade is a good trade.
What are you getting back for it? Is it a good spend?
Obviously in some cases you may not have the budget to do this yourself, so it's kind of a moot point.
But it's definitely worth having a think about whether or not this is something that you want to go for.
In some cases it might be more efficient for you to procure the resources directly.
It might be better off for you to build out a team doing that particular skill set.
It may not be.
And again, it also really just might come down to whether or not it's something that you want to do yourselves.
You know, do you have any interest in building out a UA team?
Do you have any interest in building out a QA team?
or marketing team internally.
You know, certainly from my side, when we started working in Rolando, this wasn't something that I had a lot of experience in.
It's not something I had a lot of passion in.
And so, you know, with early conversations with Njimoko, it just naturally took that direction of it felt like a partnership where it was quite symbiotic.
And that's something where you really want, where there's not as much overlap, but it's very complementary.
So if you're not that interested in what it is that they could provide, then it would probably make sense, you know, to find that out, to work with a partner on that.
And lastly, is value generated by working together?
It might be that the collaboration of the two different companies produced something great in some of its parts.
So, yeah, really, I guess you'll naturally, when you start working and talking with potential partners, you'll immediately get an idea of whether or not this is going to be a fruitful solution.
So for HandCircus, we started off, as I mentioned earlier, we started off working with Njimoko, for Rolando 1 and Rolando 2.
We ended up self-publishing for Okabu, so handling all aspects of the submission, aspects of QA, localization.
And that was, as I mentioned before, a nightmare and was way too much of a stretch.
And as a result, the product suffered.
We weren't able to get it to a point we wanted because quite simply, we ran out of money and we ran out of resources to get it launched.
And then most recently we've been working with Backloop Studios on Seabeard.
And again, going to specialists in free-to-play really helped us just, you know, get the game to market and help it be a success.
So now moving on to efficiency.
So really how you can make the most of what you have and make sure that there's no wastage with the resources that you have.
And one of the first parts of this is utilization.
You want to make sure that there's no gaps there, you know, in a really poorly laid out Tetris-style way.
There's no gaps there where the blocks have stacked and there's no way you can get that used.
But to be clear, utilization is not keeping everyone busy.
Busyness has no intrinsic value.
You want to make sure that everyone is working on furthering established goals.
So obviously you need to communicate what those goals are, but there's no point having somebody sitting there just, you know, just busily going off in their own direction.
And that doesn't mean you can't have, you know, more open goals.
So for example, you know, Google 10% time, having something where it's much more open-ended of, you know, create something that has some kind of relevance to what it is that you do, or, you know, even your downtime work on improving the tools, but it's not about keeping everyone busy.
And obviously utilization becomes harder as the team grows to tessellate all those different resources effectively and making sure there's no gaps is much harder And so yeah, this is especially pronounced when you're talking about multi-team obviously multi-team are some advantages and you can actually start moving resources from team to team But yeah, it becomes an increasingly complex problem So yeah, there's some additional challenges around this.
So obviously, when you're moving between projects, it's hard, because generally, the early part of the project, the team is going to be smaller.
If you're working in pre-production, and if you're a single studio, a single team studio, that's incredibly challenging.
And it becomes more challenging, as I mentioned earlier, if you're working on multiple projects simultaneously.
I mean, there are some changes that are coming in terms of the way that we make games that are making this a little bit easier.
So living games, games as a service, has a different shape in terms of the product lifetime.
So obviously when you launch the game the next, you know, few months, the next years, you know, after that, generally it turns out to be pretty steady. The work that you're going to be doing, it's not like classic game where you kind of launch the game, then you're back down to, you know, maybe doing patch release, but nothing really substantial.
The nice thing about this is that the revenue should hopefully be stable or going up, and it means you can keep that team stable.
Another option is to go for what we've done here, compact core team, where it means that you can just grow and shrink, grow and shrink, primarily by working with contractors that you need on a basis.
So, questions to ask yourself around this.
Are you able to utilize all your team efficiently?
Is this something you have a plan for, or is this something you're able to create a plan for?
Also, do you have a plan for overflow work if any team member completes their work?
So can you have some secondary objectives that they can move on to once their work is completed?
So it means you're not constantly having to think, how can I make that guy work there?
How is she gonna be able to do something constructive?
So yeah, those are two questions I think can really help guide you in terms of your utilization.
So this is roughly how we were structured over the time of the project.
So to start with, it was just myself and Miko working on the project.
We then took on our 3D artist, and we started working with our level designers.
This is really when we were prototyping, exploring the game, and working out what the game was really about.
So the nice thing is at this stage, we were relatively compact.
Our burn rate was relatively low.
So it meant that we could experiment.
We could fail. We could try things before we ended up going into production.
We went into production, you can see it starts to spike, working with lots of different contractors.
So, as you can see, the spike isn't as prolonged.
You know, it moves down a little bit during production.
There were some roles, like the music, the music was finished about a year before we launched.
A lot of the writing was done, you know, relatively early on, then.
Our writer Dan came back to help kind of, you know, wrap things up later on in production.
But again, the benefits of working with freelancers allowed us to just have that kind of spike and then back down again.
And now we're in the post-launch phase, where again, it's essentially just the core team maintaining the game, pushing updates, pushing out new content.
So next I want to talk a little bit about communication and how that can drive efficiency for the project.
And one of the most important parts of this is vision.
Making sure that there's a shared ownership of that vision and that you've communicated what that vision is.
And that also goes down to explaining to people why the work that they're doing is important and how that forms a part of the objectives and how that fits into the larger goal.
And you tie it into that, you really want to make sure that people can be candid about, you know, any reservations they have about the work.
If they don't understand what fits in, they don't understand what they should be doing, they're not going to be great.
You know, if they don't believe in what it is that they're doing, then it's never going to work.
And obviously, you know, that requires just, you know, effort to make sure that you're listening to them and to make sure that they're understanding and you're clear about your communication as to why they're doing this.
If they don't understand why they're building, you know, the emotional model for this guinea pig in this particular farm team that they're doing, they don't think it will contribute.
to the overall product itself, you need to explain to them why why it's important and why it does that. And I think that will really help motivate them and help them produce good work and understand how it fits into the overall project.
And obviously this is, you know, much more of a case for core team members.
Less so for contractors. Contractors generally, it can be a little bit less emphasis there in terms of making sure they understand the vision of the project. But you certainly need to communicate how their part will fit in to what you're doing.
Um, meetings, again, in terms of communication, meetings can be a real efficiency killer.
Um, you know, depending on, um, the nature of the way you work, um, it's, it, they can be a complete waste.
I think really making sure that you are, um, careful about planning meetings, making sure they're short, making sure they're focused, making sure the people you invite...
really needed. Because again, there's a context switch cost when you are going into a meeting, somebody might have spent the last hour just building up this incredibly complex mental model about an aspect of the design or the economy, you bring them to a meeting, that is gone.
So, I mean, what we tend to do, and I'll go into a little bit of detail on that in a minute, is just have a meeting at the beginning of the day, set out objectives, and then shift to a little bit more just ad hoc communication.
We use Slack for internal communication and just making sure that if something needs to be discussed, people are available to just talk through those issues together rather than forcing everyone together to go through that.
We also have a challenge around the international way that we work.
So Mikko is based in Finland.
We're also working, as I mentioned, with contractors based in Belarus and Israel.
And our publisher is based in Colorado.
So yeah, there's a lot of different...
factors in there. And I think the international working and working from home, that really requires trust.
And it requires a really healthy working relationship. And it's something that I've been very lucky with Miko that it's been extremely healthy.
But you need to have somebody that's self-motivated, somebody that's reliable, somebody that you can trust.
And, you know, I think on their side as well, you need to make sure that they're comfortable doing it.
Because, so Miko works, you know, primarily alone. And there's, you know, there's a lot of challenges around that.
Around potential detachment, around loneliness. So you want to make sure that...
that that's something that they're aware they're going in for.
Also, yeah, communication with partners is vital.
You need to make sure that you have clear communication, clear shared objectives, and clear vision for where the game's going, about how you're going to help, how you're going to solve problems.
And again, if you feel like early on, early discussions, early negotiations, you feel like there's some issues there, you feel like communication isn't very clear, that should be a red alert.
So if there's early stages of negotiations, if they're not getting back, obviously that problem's going to be massively amplified when you actually have some real problems to contend with.
If they're not there and they're not able to jump on and help you resolve those problems, then yeah, definitely read a lot early on.
And also community.
You know, community, communication with the community is so, so valuable.
It's something that we found with the soft launch of Seabeard.
We really wanted to engage and find out what people found frustrating.
So we were doing that from day one on forums, through Touch Arcade and various other forums online, communicating with people on Twitter.
on Facebook and just finding out what they enjoyed, what they wanted more of.
This is especially applicable for games as a service. It allows you to really direct what you create in terms of content, almost from there.
So for us, community engagement helps us raise the average review score of CBID and SoftLaunch from 3.0 to 4.55.
And it helped us remove a lot of issues that we had around.
We had a very frustrating energy mechanic early on that we just ripped out entirely.
And a lot of that was just really just listening to players and understanding how we could adapt it to make it more suited to the way that they play.
You know, we had ideas in our head of how we thought people would play the game, and they weren't entirely accurate.
So, yeah, people wanted to play for much longer sessions.
And that community outreach really enabled us to take that on.
But obviously one size does not fit all.
You know, depending on the game, depending on the project, depending on your team and your makeup, I think you really need to find a communication style that works for you.
So questions to ask yourself.
First of all, do your team understand the vision?
Have you been really clear with them?
Do they understand, you know, if it's clear that there's just something going on there and they're not really getting it and repeatedly just not really pulling in that direction, then there's something you need to address.
Similarly, do they all understand the importance of their individual work?
How does that tie into the overall vision?
Do they understand why it's important that they work on this particular thing?
Have your team had a chance to feedback?
You know, are you giving them opportunities to feedback or are you just generally unavailable for them to come talk to you?
You know, you could do it in a more formal way of just saying, you know, on Monday mornings you have like 10, 15 minutes where anyone can come talk to you.
Or just in a more ad hoc way, just make sure that you have a temperament that is, you know, obviously available to them.
Do you have clear channels with your partners?
You know, making sure that communication is healthy, open, and clear.
And similarly with the community.
Do you make sure that they have a way of getting in contact with you?
Are you listening to them or do you just have an arbitrary Facebook page that you never update and never check?
And I'm hoping it's going to go to the next slide.
Yeah, so internal communication at Handsoakers, we cook up every day with a scrum meeting, 15 minute, just catch up what everyone's working on, what the challenges are, any blockages that they have.
We can talk through that and really help to, I think, make sure that everyone is clear on their communication, understands what everyone is doing.
And I think that's increasingly valuable when you have a distributed team, as it helps keep everyone on board and pulling in the same direction.
We use Pivotal Tracker.
We use this primarily as a way of, well, for project management.
It's an agile project management tool.
And that, again, helps with our internationally distributed way that we work.
So Ben also works from home for two days as a central location to see what everyone else is working on to manage the various user stories that they're tackling.
We also use Slack, like I think pretty much everyone now, for internal communication, and that has been extremely good for us.
Just great, again, to collaborate on a regular basis, show concept art, show work in progress, show videos, which you can't do if you're not located in the same location.
Google Docs, we use Fog Bugs for tracking QA, and all of this is supplemented with Trips, so we make sure that...
MECO comes over semi-regularly, anytime we begin a new phase of work, or anytime that we are tackling maybe a major problem or shifting, or something where it really requires its presence, and that kind of helps top it up, so it's not complete remote working all the time.
So, yeah, next I want to move on to risk management.
So this is, again, is a key part of making sure that you don't have any wastage, or at least you have minimal wastage.
So, yeah, you really want to make sure, if you're creating something that's innovative, you're making something new, there is going to be wastage.
Some of those amazing ideas in your head.
When you put them down, when you try them out, they're not going to work.
So you want to make sure, you know, there's a classic Silicon Valley saying of fail early, fail often, and it's definitely true in games.
If you're doing something innovative, you don't want to get to the point where you're in the game and you're like, this game is terrible. We need to rip out this feature, rip out this feature, and all those beautiful production-level assets you've created are completely wasted.
So, yeah, catching that early is very, very important.
So risk mitigation, risk mitigation pre-production in the early phase of the game, for me, it's all about prototypes.
It's about trying things out, seeing if they work, and find out if that idea in your head is a great idea after all.
So it doesn't need to be a digital prototype.
It doesn't need to be a playable prototype.
You can do it with paper.
It can be maybe a couple of days of work, maybe a game jam to have a look around different ideas that you might have in the game.
Prototypes are awesome.
We've been using them extensively for all the games that we've developed.
And it really, again, just helps crystallize ideas as well as leading to additional ideas.
You know, one idea, one prototype might be a complete failure, it might not work at all, but that'll lead on to something else.
And just playing with that and having something you can kind of tinker with and tweak just gives you the opportunity to lead on to new things.
So when you're in production, use testing.
Use testing is hugely valuable.
Encourage people to just tear it apart.
Get them to sit down to play it and be candid.
Don't be sensitive.
Don't just sit there and tell them, you've got to be doing this or you should be doing this.
The whole point of this is to see where their frustrations are.
So we work with an amazing company called Player Research.
They're based out in Brighton in the UK.
And they did the whole one day of testing behind a mirrored wall, where you just get to see completely unfiltered frustrations of the player playing through it.
At the end we got a report and we pushed almost all those findings into the game.
That was hugely valuable for us to really see early on, catch things early on.
I think it was about a year before we launched where those frustrations are.
And then pre-launch, yeah, soft launch, analytics, community engagement.
This is incredibly valuable, as I said again before, just making sure that before you launch, things are kind of ticking along nicely, they're working well, and that you can fix the kind of big, big problems that you have, which you most likely will have if it's, again, if you're doing something new.
So that's, yeah, incredibly valuable.
So questions to ask yourself around this.
What are the biggest areas of uncertainty?
Is there anything in the project you're looking at and you're like, you know what, I really just have no idea how that's going to work, or we've got this technical solution and we think that we can have this way that it's going to work and scale in terms of connection to the database?
If you have any questions or any areas you're just really not sure about, this is what you should be prototyping, doing technical spikes on, and really prioritizing that above all the other work.
Because if you don't resolve those issues earlier on, obviously you're going to go down the route of producing production assets, producing things that may not make it into the final game.
And then, yeah, taking a look at what will be...
At what point will the project be ready for user testing?
So the guys from Play Research, you know, they're always saying, just get in as early as possible.
You know, they will test on paper, they will test very, very early prototypes.
I think there's less value taking it to user testing when you are, like, two months away because there's not that much that you can change.
I mean, there's still some stuff, but, yeah, you want to get in as early as possible.
And then lastly, how long do you need to validate the game and beat a soft launch?
So again, the more new, the more innovative, the less you can reference other games, the longer you need that soft launch to be.
So have a think about that and plan accordingly to make sure that you have a soft launch that suits the title.
So for us at HandCircus, as I mentioned before, it's all been about prototypes in pre-production.
So the early versions of Seabird were absolutely bizarre and bear almost no resemblance.
They're actually a little bit further on than the game is now.
The first prototype was a game where you paint paths to lead goats around an environment, and then the goats stack on top of each other.
And then we're working on this other prototype that was about stealing from your friends and pickpocketing them.
and the two just kind of naturally evolved and just became this other game and this other prototype itself.
So yeah, for us it's not just a way of mitigating risk, it's also a source of inspiration.
So that's been, yeah, a huge win for us.
As I mentioned before, user testing with player research, very, very valuable.
Just sitting down and watching people's frustrations just provides so much information, so much guidance.
As you know, if a handful of seven people see it, by the time you're talking about millions of users, that problem is massively amplified.
So catch it early and fix it early.
And then we used Localytics for our analytics package.
And that's been great for us just to really dig in and understand where pinch points are in terms of the file, where people are dropping out of the game.
And again, what people are spending money on.
You know, there's a certain amount of information that you can get from engaging with the community.
But that needs to be complemented with hard analytics.
So one of the things that we found after global launch is how little people were spending on cosmetic items.
So we assumed we could have a little bit of like an Animal Crossing vibe.
to some extent in our game, and we thought that customization was going to be huge.
So that led to us looking into the analytics and just seeing this is just not really selling, and then modifying the game to basically give all the cosmetic items a functional upgrade as well for a badge system.
And that's been a huge win for us.
So paying close attention to analytics and making sure that you have that well instrumented to be able to ask the questions that you need.
So now I want to talk a little bit about technical considerations.
So things that you can do when you're planning out the tech and tools for your project to make sure again that there's little wastage and you're really kind of turbocharging the resources that you have.
So one of the first things here is ArtPipeline.
With Occaboom, with the PS3 game that we did, the ArtPipeline was gruesome.
It was absolutely horrible.
You had to export, there were all these like text files you had to copy and paste and then if we wanted to actually try it on PS3, we had to do a complete new build.
So I mean the iteration time was really, really long.
And I think, you know, great work usually results from being able to experiment and tinker and have fast iteration.
You know, if you're using existing engines like, you know, like Unity, this problem is pretty much solved.
I mean it's incredible the fact that you can just go in and update 3D assets, update textures, update sounds, and they just get updated in real time.
So you know, depending whether or not you're building like everything from scratch, this is a real key consideration to making sure there's no wastage on the artist side.
and making sure they can see an engine themselves rather than having to hand it over and then see it on another screen.
Again, just tightens up the iteration loop as much as possible.
Another thing is build pipelines.
So, yeah, builds can take a while.
Builds can be inconsistent if you're going through and like checking various check boxes to make sure that it matches.
You make mistakes.
So we automated the build pipeline on our side.
So we used TeamCity.
We had a spare machine and we had TeamCity to build a builds minion.
And this was great for us.
Saved a whole bunch of time on Ben's side.
You know, every time it was taking like an hour or two to get everything built up and push everything to test fly, create bespoke Xcode projects.
So that was a huge win.
The nice thing as well, obviously, it will test and check your code for you and then email anyone that's put anything bad into it.
We also had it so it tested and checked data and assets.
And I'll go into that a little bit in a minute.
It wasn't just the code itself.
We made sure that if somebody had accidentally deleted that was something that was vital for mission progression, it would get alerted.
So it really helped reduce the number of errors and the amount of fixes that we'd have to do when we got through the QA side.
So yeah, it really felt like we'd hired an extra employee and we got this all running.
The nice thing is, you know, Unity is starting to add this into their service as well.
So these Unity Cloud Bills that they've recently announced, for instance, we pushed.
And this means you don't even need to configure your own machine.
It's all in the cloud and it'll handle the various bills of various platforms yourself for you.
So that's, again, a huge win in terms of productivity.
So tying into that middleware, this really depends, you know, on the nature of the project.
Do you need to build this yourself or is it much easier just going and buying something off the shelf?
So are you creating a title that requires bespoke tech?
It might be that the tech you use in your game is something that's a real kind of centerpiece, something that's very unusual, something that's very kind of core to the experience, something you can't get off the shelf.
You know, so for example, like, you know, the kind of the amazing procedural environments in No Man's Sky, or, you know, the kind of the voxel landscape in Minecraft, a lot of that is not really something you get off the shelf.
If you've got a tech-heavy team and you really feel like you want to make your game distinguished by tech or by particular features, it might be that you're better off building the whole thing yourself.
On the other side, though, if you're a very design or art-led team, it makes more sense for you to get something off the shelf.
That's not really a specialization.
And obviously you need to measure off the cost of license versus cost of internal development.
How much would it cost you to do this?
You know, we use Unity, and for us, it means that we have, you know, this incredible expertise of people that would produce better code than we possibly could in terms of rendering, in terms of animation.
So, for us, yeah, it's a no-brainer.
And the last thing is, again, if you're licensing, you get ongoing maintenance costs.
So you're not having to fix up the engine for every new release of iOS.
You're not having to fix up any time new things are introduced that break things.
You're basically getting an ongoing maintenance contract with that as well that has huge value.
So as I was saying, we're using Unity for pretty much everything.
We used it for the creation of the game itself, the game itself runs in Unity, but also we had a lot of time that we invested in terms of extending the game, the engine itself, with a lot of bespoke tools that we used to create level design.
We use it for content management, so we have bespoke tools to handle things like accessories, items, things like that, and obviously for testing and debugging.
So on the test side, yes, so we use tests quite extensively in the game.
We use it for testing the consistency of the data itself.
So say for example, I don't know how many of you have played CBID, but if you play through the game, you have a smuggle request.
So every island needs to have a smuggle receiver.
It will generate...
a random quest that will pick one of the various smuggler receivers in the game.
We need to make sure that we have shakable trees that we can hide lost items in.
All these little things are kind of intrinsic.
And if somebody goes through and like starts deleting these by accident and pushes it, they'll be notified by the build server saying something has broken.
which has been great for us.
It also makes sure it goes through and checks for any inconsistencies, missing dialogue keys in various languages.
And this just, I think, cut down a lot of the issues that we would have found later on because we knew that we were pretty sure about all this data.
It didn't need to be tested by hand.
So yeah, a question to ask yourself when you're planning out tests for the game.
What future issues can be spotted by creating tests now?
So yeah, when you're going through the game, you might think, you know what, this is like, this is a huge risk here.
For example, like, if we accidentally delete these objects there, or if there's a lot of stuff, like, to manually check through, this is going to take a huge amount of time.
Have a think about what future issues can be spotted by creating these tests.
Put that in the plan.
Also, really consider the cost of automated versus manual test.
If there's one particular aspect that's going to be incredibly complicated for right or a mess test for, but it's something you only need to, it might take half an hour to test manually each time.
Obviously, there's, you know, that's a false economy and it's not something you'd really want to go ahead with.
So, really consider what the implications are of developing the automated test and whether or not it's really worth doing.
And, you know, tied into that, what information is required in the report to fix?
You know, it's great that you found this error, but you want to be as verbose as possible and deliver back to the person that caused this issue what the fix is.
So it's no use saying, like, a particular grid coordinate or an ID of an object has disappeared.
You want to make sure the information is there for the person to go through and fix that themselves.
So now I want to talk a little bit about servers.
So CBID was our first online game.
And for us, having not had a lot of online experience, it was a real question as to whether or not we wanted to host the servers ourselves, how we wanted to do that, and whether or not we wanted to bring that knowledge in-house.
There's obviously a lot of options out there which will take care of either a lot or a little of the overhead for you.
And obviously, the more that you farm out and get other people to look after, the more expensive it is.
But you have to balance that with the cost of hiring a specialist knowledge yourself.
So the questions you want to ask yourself when you're planning out your server solution, if you're doing a server-based game, are there any advantages in managing the server yourself?
It might be that you actually need to host the server yourself, various, you know, data compliance rules, or privacy, but in most cases, it's probably unlikely.
Do you want or need a full-time sysadmin?
Again, one of our objectives was to keep the team really lean.
There wasn't really a huge need for that, and they weren't going to be needed full-time.
There wasn't that much work there.
So that was pretty much a no-brainer.
Also, it might be that you don't even need to write the server code yourself.
There's a lot of commoditized services that are starting to come out there that offer a more kind of general solution that's totally fine for a lot of the games that you make.
So PlayFab is one relatively recently announced where they'll offer something which will provide a lot of things around currency, around in-app purchase, around inventory, that means that you don't need to create that yourself, and again, saves you resources.
So for us, we used Google App Engine for CBID.
This was fantastic.
It meant that we didn't need to do any administration ourselves.
We effectively outsourced all the sysadmin work to Google.
The server development, you probably saw in the earlier slide, that was outsourced as well.
So we worked with a specialist, a company called Lost Property, and they handled all of the server development for us.
They're also great in terms of responding to issues that we had.
So around launch, we had obviously a massive, massive spike in traffic.
And when we were heading above a certain threshold request, the whole thing like went crazy.
And they were great to work with.
They really helped resolve that issue and get that fixed as soon as possible.
But again, it really depends on your scenario.
You may, that may be just completely impossible.
You may need to have somebody that is just available yeah, every hour of the day.
So, tools.
Again, tools are something you really need to consider to really turbocharge the team that you have to make sure that they have the right elements to be able to massively improve their efficiency.
So can you invest to save time?
Is it worth spending a little bit of time early on to really create tools for them to use that will automate repetitive tasks or really just amplify their creative input?
So, you know, the questions you need to ask yourself when you're planning whether or not to create tools.
So what are the biggest areas of repetitive manual work?
Is there something you're just doing again and again and again that just can be repeated, that can be automated?
And also is the data input becoming unwieldy or prone to errors?
So when we were planning out the assets and the clothing and accessories for Seabeard, it's like one and a half thousand island assets at the moment that you can place down.
And the system for generating accessories was so completely unwieldy.
So you have like, we had this huge, huge JSON file that had like...
you know, whether or not it's compatible with old people or people with like this particular size of face or whether or not it's compatible with these particular cultures.
And that, you know, is completely impossible to visualize.
So it made it very, very error-prone.
So that was a perfect candidate for creating Bespoke Tool.
And yeah, can these processes be made more efficient?
So one of the things that we had in the game with the level editor, we wanted to make it so you could just paint and not really worry about the particular rotation of the tile when you're painting a path.
So if you could imagine you're painting like tile by tile by tile, you paint a corner, we didn't want you to have to go down and choose the corner piece and paint that.
We wanted it so you could just paint and it would just look great.
It saves a lot of time, it took a little bit of time to implement, but yeah, in the end it saved us way more time because it was fully automated.
Another consideration there is who will be using these tools.
So if you are creating these tools, you want to make sure that they're created not for the mind, the mental model of the person building the tool, but for the mental model of the person that's going to be using it.
And tied into that, there may be something already out there.
So again, one of the benefits of engines like Unity, a lot of people are creating these tools.
You know, certain things like editing grids and lighting, there's already tools out there that may do this for you.
So it's definitely worth checking to make sure that you can't drop, you know, $50 to create something that's going to take you a couple of weeks to build.
So in terms of our own internal tools, we had a bespoke level editor.
So this is something that we built on top of Unity that allowed us to create just the environment.
So internally the game is basically a 2D game. The representation is 3D.
But there is a ton of complexity to the dialogue itself.
So the dialogue is branching, we have procedural elements, templating.
and all this needs to be tied to progress events in the game.
So we wrote Bespoke Editor to take care of that complexity.
Again, there's no way that we could have done this using just flat text files.
We also used a Cmap Editor, so we could create something to create the ocean, to create the sea hexes, to create the sea paths and edit the sea paths from A to B.
And we had a content management system that we used to edit things like items, like island assets, that, again, grew out from these unwieldy JSON files that we had early on.
So here you can see the level editor that we created, and on the right you can see that's how we structured the dialog.
So, yeah, you can assign requirements.
Say, for example, you might have a mission where you needed to give them a particular item that was from this particular area, or you might have, you need to defeat certain creatures.
And this basically allowed us to intelligently query various other data systems and populate the options there rather than just choosing from a huge dropdown list or just putting in numbers.
And this is our sea editor, so this is how we created the islands and the paths between them.
So the sailing minigames use these paths.
And again, that allowed us to be a little bit more creative rather than just tapping in random numbers.
And this is the content management system that we created for editing items.
So this is online in this case rather than Unity, and this is one of the only online tools that we had.
And then Unity had a... when we built the project, it would just pull down all the various data from the databases online.
So another component, obviously a hugely important part of the process working with QA.
We were very fortunate working with Backflip's QA department.
They were awesome, really helped us get through a very complex project and produce something that was enormously stable.
But one of the considerations from this, there was some asymmetry.
Obviously, on our side, it was just myself and Ben that were able to fix issues.
And they had a considerable-sized team that were really throwing a lot of bugs at us.
So we really needed to be quite smart about how we could do this and how we could work intelligently with them to make sure that we weren't overloaded with the work that needs to be done.
So, one of the things that we did, and I highly, highly recommend using this.
I know I'm talking about Unity a lot, but I know it's pretty prevalent.
We used something there that's available in the Asset Store called Touch Console Pro.
And this allowed us to provide a ton of tools internally for them to use.
So, for example, incrementing currency, setting certain objectives being complete.
There's a task that needed to be done 25 times.
It meant they didn't have to go through 25 times.
You can just bind specific commands to there.
And it runs really nicely on device.
It also meant that if the game crashed...
could email the log along with the saved data file over to us and it meant that that process was super smooth and super transparent.
So yeah, that was highly recommended.
Another thing that was an interesting kind of problem, well not problem, but due to the circumstances we were working, they were in a different time zone to us, so generally it actually worked out quite well.
By the end of the day when we were working, we would send over new builds, just as they were waking up, that addressed all the issues from the previous day.
Similarly, when we came in the morning, then we would have a whole load of new bugs to work on.
So yeah, it actually ended up working out quite well.
So lastly I want to talk a little bit about empowerment, about how you can kind of create an environment for your team to really thrive.
And tied into that, really talking about culture.
So once you've found those awesome team members, building culture is really about creating an environment to thrive.
It's a little like building a zoo enclosure for a given creature, and so it really will be a lot like, yeah, it's really considering what they need and how they need to be supported.
So you know, an enclosure for a llama is going to be very different to a meerkat, it's going to be very different to a red panda.
So it will depend on your team and what your objective is and how you want to run the business.
So I want to give three examples of different companies that have created quite an empowering culture, quite a different culture, and I think are really interesting as a touch point.
It's certainly worth taking a look at.
The first one is Netflix.
So there's a great presentation given by Reed Hastings, CEO of Netflix, called High Performance Culture, and again, that's the URL there where you can take a look at it.
And he talks about creating a culture of creativity and self-discipline, freedom and responsibility, to attract the type of person that picks up trash lying on the floor, rather than just leaving it there.
And so he talks about the fact that, you know, a great workplace is stunning colleagues.
You know, it's not about, you know, benefits and free lunches and micro-scooters and whatnot.
It's really people want to go and be great at what they do.
And creating an environment that encourages that is important.
So yeah, it's essentially about hiring high-performance, self-disciplined people and keeping process and rules light.
So he talks about rather than really over-engineering process and having something that specifies every element of the rules, generally it's about hiring people that are able to kind of interpret a relatively right set of rules appropriately and intelligently.
So, for example, they have no policy for vacation or tracking of vacation.
The idea is that if you want to take a vacation, just make sure that you do it responsibly and, you know, achieve the things that you need to do within that.
Don't let that disrupt that.
Or they have a gift policy which is just act in Netflix's best interest.
They don't specify any more than that.
And, you know, the right person will just interpret that appropriately.
And I think that's really interesting.
So he was saying that's one of the things that allow them to grow quite efficiently is obviously when businesses tend to grow, the process has to scale with that and sometimes that can become quite unwieldy.
And by keeping the process relatively light and hiring people that fit into that and quite self-responsible, it works out very well for them.
Another one is Unity.
So this is an interesting presentation by Aras, who is Unity's head graphics guy.
And he talks about lightweight chaos.
So in his example, he has a similar discussion of saying that processes are for managing, well, like complex processes are for managing mediocre people.
And if you want to hire really great people, you don't want to force a huge amount of process upon them.
So they've got a highly distributed team, 17 offices, 21 person places, and he's saying a lot of them are very allergic to process.
They don't like to feel too constrained by them, but they're very responsible.
And so putting an emphasis on trust and responsibility just allows them to work really well the way that they want to, but still deliver great results without taking a lot of resources on creating, you know, a really complicated process.
And lastly, Pixar.
So this is a fantastic book by Ed Catmull, president of Pixar.
And he spent the last 10 years where this is his primary focus, just trying to understand how you can build a workplace that allows people to really thrive and feel good about the way that they work.
Allows candor and constant re-evaluation of the work that's being done and the way that you work.
And an emphasis on equality and balance of teams and departments as well.
So you really don't... he says in there, you know, sometimes you might have a company where there's like the rock star department, say for example, if you're...
you know, if you've got a game studio and the people, the rock stars, like say the game designers or the artists, and you might have people in QA that are treated like second class citizens.
And making sure that, you know, that's bullshit. You really want to make sure that if you launch a game and the game is, you know, full of bugs, then, you know, that's completely ridiculous.
You want to make sure that respect is there across all boundaries and everyone is treated equally.
And that way you're all pulling together the same goal.
I think that's...
Yeah, really interesting, very applicable to working in games as well.
Because I think ultimately, you know, productive people are happy people.
You want to make sure that, you know, they are given the chance to work their best.
You know, everyone goes to work and they don't want to just get through the day.
They want to do great work.
And creating an environment to be their best and to be supported to be their best.
And finding that sweet spot.
So really just find the balance of reaching and pushing the personal limits without going over to the point where they are just, you know, snapping.
And I think, you know, that takes clear communication and make sure you understand the individual employees to do that.
So yeah, the question to ask yourself.
What environment would enable your team to thrive?
Knowing your team members, knowing the nature of the project, knowing the nature of your team, what can you do to improve that?
What can you do to create that environment for them?
Does your process support or suffocate?
Do you have something that's over-engineered?
Or do you have something potentially that's just, yeah, there's not enough there, that people are lost, people don't understand why they're failing or why they're doing things wrong.
Maybe it hasn't been clear, maybe it hasn't been communicated well.
So getting that sweet spot, again, is vital.
Is there an imbalance between teams and disciplines?
Do some people regard themselves as the core of the company and the others as peripheral?
And try and balance that out so that everyone has an equal representation and position in the company.
You know, so for us, again, we're a relatively small team, but we tend to be quite intense in terms of the work hours.
We don't work long hours, so we generally work 9.30 to 6.00.
But the time that's there, from an external perspective, it probably doesn't look as fun as working...
So I started off working in digital design, and there are no micro scooters and foosball tables or anything else like that.
It's maybe a little bit dry, but I think it works right for the team and certainly the way that we work.
And it means that we don't work long hours.
The hours are flexible, location is flexible.
I was saying, you know, Miko works from another location.
Ben has a small child, so he works from home two days a week.
And that's worked great for us.
You know, it means that he has the flexibility to work that he wants to, and it means that we can hire people that do need and work better within those level of flexibility.
And we really don't have overtime or crunch.
Occasionally, we may work a little bit later in the evening.
Occasionally, we work at weekends.
But that's extremely, extremely rare.
And I think that's a key part of it, to make sure that, to see overtime and crunch as a failure.
Certainly on my part, if I haven't planned the project out properly, or we haven't put those plans in place, then we want to make sure that we minimize that.
And an emphasis on trust, responsibility, and shared problem solving.
Again, so problems aren't just one individual.
It's everything that we can do to make sure that we share those problems.
It's a key part of the way that we work.
So yeah, in conclusion, you can get a lot done with a small amount of resources.
I know there's been a lot of different topics covered here, but if you can build the right team, make sure they're aligned and have clear goals, give them what they need to do their best, get rid of any efficiencies, hopefully they can make amazing things.
So I've covered a lot of different subjects here, but I'm happy to take any questions that you might have.
I think we've got about four minutes.
Yeah, four minutes left, so yeah.
Thanks.
Hi, I had a couple questions.
Being a small team, did you have, I know you said you self-published, but you've also worked with a partner.
Yeah.
In both instances, how did you kind of build a community, like try and get people excited about the game that you're working on?
So I think in both cases, we announced quite early.
So we didn't do a great job with Okkaboo again, because we were a little bit stretched resources.
But certainly for the other games and Okabe we announced way before the game came out.
So then you can start just really cultivating interest and making sure that people are aware of it, going to events like this.
So yeah, GDC was instrumental for announcing both those games and just basically keep trickling that information over so it's always in the awareness of players.
Great.
The other question I had was, you talked about prototyping and...
like maybe like a small game jam or whatever. How much time did you spend on that before you determined, um, like, okay, this is something that we're going to move forward with.
And you said you had successes and failures.
How much time did you actually spend on that process?
Yeah, so I think for Rolando, it was probably around three, four months of prototyping until we actually had the feature set just absolutely down.
At that stage, it was just me.
So that was before I started working with Miko.
And obviously, at that stage, it means you can take a lot longer to get things right.
And I think that is a cool part about that.
If you're trying something new to make sure you have that kind of runoff time to make sure that you're not just forced into making something that you know isn't quite right.
With Seabird, pre-production was around six months.
So we had something together in around three months that represented what we felt the game should be.
But around three months after that, we had everything locked down that actually represented the final product.
And to be honest, we were actually still changing things up to around six months, because we had user testing, we had internal feedback.
So it wasn't, yeah, it kept tweaking.
We kept tweaking it right until the final stages of production.
Great, thanks. Also, I'd like to say it's great that other people are using Slack.
It's been a great tool.
Great. Yeah. It's been awesome for us as well. Thanks. Thanks.
Hey, I had a quick question in regards to you talking about wearing many different hats.
Yeah. You know, doing game direction, lead programmer and biz dev.
As all those departments would, throughout the course of a project, kind of have to give and take, and, you know, there'd be scope creep or, you know, stuff that you guys are going to have to sacrifice in order to ship the game. Yeah.
Just curious how you handled those types of situations or the advantages and disadvantages to doing that all kind of yourself and if you involved anybody else with it.
Yeah, I think it's important to try and wherever possible isolate the ones you know will have that natural tension and do whatever you can to extract that.
And I mean, I generally find the best thing is just writing the arguments for and against down if it is a role that has that natural tension.
So in some cases, for example, you know, it's really not a problem if you're doing community management and game direction because those don't really have a natural opposition.
But if it's one where the objectives are quite often kind of against each other, that I think the best thing is just, yeah, just writing it down.
writing it down, leaving it for a couple of days, letting it sink in, and then make a decision.
I think giving yourself breathing time to actually work through that is a real key part of making that don't-make-snap decisions, because otherwise they probably haven't been considered as well as they need them to be.
Thanks for the talk.
Great, thanks.
Just real quick, do you use your prototype code and assets for the final game, or do you throw that away and start over?
Mostly.
Yeah, so generally we won't write something that's too throwaway.
Because the nice thing is if you try and write something that's quite reusable early on, it means you can carry on evolving it in the prototype rather than having to make everything from scratch.
So yeah, generally we didn't rewrite the code base.
There's a few exceptions of things we actually just had to throw away.
So we had a terrain system that by the end was just total garbage.
And we're like, this just needs to rewrite.
But it was done much more on an ad hoc basis rather than the principle of always one or always the other.
Thank you.
Thanks.
Cool, cheers.
