Hello everyone, as Dave said, my name is Eric Martel.
I've been a lead AI programmer at Ubisoft Quebec for two and a half years.
And well, thanks for giving me the opportunity to talk a bit about vehicle AI and NPC AI, more specifically towards the usage of vehicles in video games.
So just to talk a bit about my credentials, I started in 2001 at a small company in Montreal called Mikraids.
There I developed Cyberia, Postmortem, and Cyberia 2.
Those are all point and click adventure games.
Then in 2004 I was fortunate enough to join Ubisoft Montreal where I developed Far Cry Instincts, which is the port of the well-known PC game Far Cry on the first Xbox.
And then I was truly blessed to work on the initial title of the Assassin's Creed franchise.
In 2008, I joined ADOS Montreal where I had the opportunity to work on the TEEF reboot.
And more recently, in 2013, I joined Ubisoft Quebec where I was able to work on Unity and more recently, Syndicate.
This talk will be mostly about Syndicate.
Also, I was fortunate to work with Matt Buckland on the programming game AI by example.
I was a technical reviewer on this.
I published in the AI game programming with some three, the Far Cry anchor system.
It's basically smart objects.
If you guys need some, it's an interesting article.
And more recently, I published in Game AI Pro.
a system on to build third person camera systems.
As you might know, the Game AI books are now open source for the first one, so you can easily go check it out and see the articles for free.
Back to our main topic, Assassin's Creed Syndicate.
Assassin's Creed Syndicate can be defined by five core pillars.
First, you have navigation, which includes parkour.
I would say that Assassin's Creed is probably the best game in the industry.
If you talk about parkour, the player is allowed to climb almost anywhere, perform many parkour tricks.
There's also a big part of it that's about fight.
Fight, in our case, includes assassinations.
We support many types of assassinations.
We have a big part of the game that's about the story.
We try to be history relevant.
So we take a time period and we try to adapt it and tell a great story with some historical elements.
It's also about explorations.
The cities are usually very huge, and it allows the player to explore the environment and reusing the navigation and parkour, it allows us to give a great challenge to the player.
There's also the stealth part, which is basically hiding, and it goes again with the assassination by using stealth mechanics.
The setting for our game decided by the creative direction was to go with Victorian London.
We were reusing a lot of the code from Assassin's Creed Unity and we decided to reuse the road system and add sidewalks and traffic for vehicles.
Basically, our goal was to allow to have a civilized city where people are following traffic rules and walk on sidewalks.
We also wanted the crowd to integrate fully with vehicles, so as to have a living and breathing world where NPCs just move freely on the streets and NPCs from the sidewalks can also interact with the vehicles and use them if required.
Luckily for us, Assassin's Creed Syndicate is the first Assassin's Creed where the time period is after the invention of the camera.
So we had some footage of what it looked like in London back in the day.
It confirmed to us that vehicles and crowd needed to blend together in order to give the player a great experience.
The objectives for us were to support various types of carriages. If you played the game you can see that there are many types of carriages. Some are more for passengers, well for driving people around. Some are for the police, firefighters, etc. So they all have different number of horses, wheels, some have a cargo section, some have doors, they're all at different heights.
They also follow the traffic rules.
So given the road system, we were able to give the level designers tools to create lanes where the vehicles follow and stay on the right side of the lanes, which is hard for us North American.
It's on the left side and not the right one.
We also gave NPCs tools to navigate using vehicles.
So any NPC, whether he's scripted or systemic, can just hop on a vehicle to go to his objective if the level designer gave him the rights to do so.
We also wanted to integrate the fight on the vehicles and also using vehicles.
Since you saw some of our pillars include navigation, we thought it would be interesting to allow the players to get on the vehicles and then fight the NPCs.
And it's not only carriages, we also supported trains because we thought it would fit very well with the Victorian era.
And we have boats on the Thames River.
As for the prerequisite, like I said, we wanted to have a road network, which was edited by level designers to create, basically it was bound to the visual meshes of the streets.
I'll come back to it a bit later.
All of our vehicles are physics based, so for the first time in Assassin's Creed we had a very physical world where rigid bodies move around, so we had to take proper precaution for the NPCs to handle the handling of rigid bodies moving around.
We also had to rework the navigation mesh system because we wanted to be able to detect path blocking whenever a vehicle would stop in an alleyway or in front of an objective.
We reworked the steering system and we definitely had to change a bit the decision making to take into account vehicles.
Lastly, we'll talk about the virtualization of NPCs, which is basically allowing NPCs to live for longer than their usual lifetime.
In this presentation, since it's quite short, I'll be mostly talking about the navigation changes, the behavioral changes, and the virtualization.
A lot more was required, but obviously with the time we have, I cannot talk about it, but feel free to come ask me if you have more specific questions.
As for the navigation changes, it's not per se vehicle AI that's tackled here, but it's prerequisites in my opinion to have NPCs use property vehicles, so that's why we'll look into it.
This is a debug display of the road network.
If you're interested in knowing more about this system, there will be a talk Thursday from four to five called Assassin's Creed Syndicate.
London wasn't built in one day by Damien Bastien, so feel free to go see it.
He'll be explaining a bit the tools that we developed for level designers in order to build London, which is quite a big achievement.
So going back to our vehicles, our vehicles are built in many parts, starting with the horse.
The horses are a bit like a tractor in a Freightliner, so it's pulling the carriage into the direction that's been given by the player.
We have various types of carriages.
Some have beams on the side, some have doors.
It's very varied, but it's all based on historical vehicles that were in London back then.
Most of our vehicles have a joint in the middle, which you'll see a bit later, makes it a bit more complicated for steering the acers.
In our case, it allowed the player to move the horse freely, laterally, and be able to go in whichever direction he chooses to without relying on wheel system like on a vehicle, on a car, sorry.
And then we have two to six seats in our vehicles, allowing NPCs to just sit at these positions.
We then added some bones to the meshes to be able to guide NPCs to specific places on the ground to then be able to interact and play a proper animation to either get on the vehicle or fight the player.
So navigation mesh patching, what's patching?
Basically, patching is technology where we punch a hole in the nav mesh using the rigid body size of the vehicle.
This way, the triangles are altered and NPCs at the navigation level, at the path finding level are able to know whether the path is blocked or not.
Most other games with simpler vehicles could have simply used steering behaviors to achieve that, but in our case, since the tractor has a joint, it was possible to create concave areas where NPCs could get stuck using only steering behaviors.
Whenever a patch is applied, we go through all the NPCs that are in the surrounding area, and if they have a path that's using one of the triangle that's being patched, we simply cancel the path and ask the path finder to recompute a new path for that NPC.
Here's what it looks like, it's debug display again, which gives you an idea.
As soon as the vehicle will stabilize, you'll see that the triangles are re-computed and the grayer areas where NPCs are not allowed to walk.
So if we get a better view of it, we start with the shape of the rigid bodies.
We then define that whatever's outside of this is walkable, and then we triangulate.
It's very simplified, but it gives you an idea.
Since navigation mesh patching is obviously quite expensive to do, we cap the number of vehicles that are able to patch every frame.
So in our case, we were satisfied with only a single vehicle, given that most of them are always in movement, we had great results with only patching one vehicle.
We also prioritize them by distance.
So obviously, whatever's closer to the player gets patched first, and then it disperses in the environment.
The size of our carriages allow the player to step on the top of the vehicle.
Since navigation is a big pillar in Assassin's Creed, we thought that it would be interesting to have NPCs go there as well.
So we reused the same technology for navigation on the ground and applied it on the rooftop of vehicles.
The same technology is used also on trains and boats, reusing the exact same algorithm.
So it's symmetric navigation that's possible on the ground is possible on any of the vehicles.
We also added whisker links, because we thought that it would be more interesting for players to have interactions between the dynamic navigation meshes and the static ones.
So we use some cat-like whiskers surrounding the vehicles to find connections between a dynamic nav mesh and a static one.
As soon as the vehicle patches, we run the algorithm and determine which whiskers should connect, and we create jump links using these whiskers.
So going back to the two previous graphics, we can see that we can create whisker links on all three sides, and connect the dynamic nav mesh to the static one.
Dynamic nav links were also added to have credible gameplay.
These were specific to trains and boats.
I'll explain the reason.
Our dynamic links were meant to connect two moving nav meshes together and allow jumps from one to the other.
The big technicality here is Since our scenes with carriages were so dynamic, we couldn't rely on a path being valid from the point where it was requested to the point where it was executed.
So since we wanted to have the paths valid at all times, we only applied them on vehicles of similar velocity.
This meant that two trains going next to each other, or two boats going next to each other, could be jumped from one to the other.
We also modified the steering behaviors.
For historical reasons, the steering in Assassin's Creed was radius-based.
It works great for characters and for especially bipeds, because their width is pretty much the same as their length.
But in our case, the carriages were much too long for it to work.
To avoid paths that were really not realistic, we went for a different method.
So here's an example.
If you compute the smallest radius that can encompass the entire vehicle, you get something like this.
And NPCs steer very far away from the vehicle, which doesn't really look good.
Doesn't look realistic either.
So we went with the convex hull steering.
So basically from our vehicles, since they were not rectangular, we had to build some sort of envelope around the rigid bodies in order to allow NPCs to use a convex shape for dynamics avoidance.
So yeah, we're trying to get rid of the concave shapes.
The shape is being modified by the different type of tractors.
We have some vehicles have one horse, some have two.
Vehicle with two horses can lose an horse and still be valid.
Vehicles can still be in movement, even though they don't have any more horses.
So we had to adapt to these variations in runtime.
We also add a few steering method that were used.
In some cases to go from outside of the convex shape to outside, sometimes to go in and sometimes to go out.
Here's a quick example.
We start from the rigid bodies of the vehicle and then by exploring all of the edges, we try to find an intersection between the two rigid body contours.
Once we get one, we switch the iteration of the edges on the other one, and we continue computing.
This results in the contour of the vehicle.
Given the contour, we then explore all of the edges in a clockwise manner.
And whenever the projected edge on the right vector of the previous edge results in a negative value, it means that we're going outside of our shape, therefore creating a concave shape.
So we pop this vertex and go back and continue the process until we looped to our initial point.
The main point that we were trying to avoid was the drawing I showed you before with the huge radius.
In this case, as you can see, if we do a collision check with the path and the concave shape, we can see that we can move much closer to the vehicle without any issue.
If the destination were to be on the other side of the vehicle, we then minimize the angle of the NPC.
We minimize the direction change, allowing us to compute a path going through one of the vertex.
on the outside of the vehicle that gives the least angle change.
Some methods could have taken into account the velocity of the vehicle, the turning, whatever, but in our case, since the situation was so dynamic, it proved to be good enough to simply go to the nearest vertex.
Whenever an NPC is trying to interact with a moving vehicle, it needs to go from outside to the inside.
So in this case, we use the outside to outside steering method until 2D raycast is allowed to cross the convex hull without intersecting with the contour, which is an orange, giving us a straight path that will not go through a collision.
Then inside to outside is a bit the same thing.
It's basically when an NPC is getting off a vehicle that's still in movement and wants to come out.
We basically find the closest edge where there's no collision with the contour.
We go in straight line and then we apply the outside to outside steering.
Behavior changes.
We'll cover some of the behavior changes, but obviously a lot of work was put into it to allow NPCs to properly support vehicles.
So I'll try to keep it simple and show some interesting examples, but if you wanna talk more about it, feel free to come see me.
First, local positions.
Since we had a fully dynamic world, we had to take into account that a position that's computed by an NPC needed to be in local space to its referential.
What I mean by that is that trains and boats were big enough to have an NPC perform a full search loop, and if they were computing positions like, oh, I should go search at X, Y, Z position, every frame the boat or the train is moving.
So that pre-computed position wasn't valid anymore.
So since we wanted to reuse most of the legacy behaviors from previous titles, we had to adjust that code.
This code was specific to moving platforms, so whenever an NPC was standing on something dynamic, we would perform a little extra operation to bind the position or direction to the entity on which it was standing.
We call them anchored vectors and anchored directions.
Basically by changing the interface of most function calls, we were able to trap all of the cases where world space vector was being used and pass it as a local vector.
For a combat, we had to support the combat throughout the game by adding new behaviors for NPCs on foot to fight a target that's on a vehicle and to implement a full combat loop on the vehicles.
Here's an example.
It's the takeout of a target.
So whenever you get on a vehicle, an NPC is allowed to come to you and take you out.
This is done by reusing the bones that I showed before on each side.
We can do a test for navigation on each of the bones.
So for example, in that case, if there was an obstacle on my right, the NPC would have been able to use a symmetric animation on the other side and interact with me and pull me out from the other side.
This allows the player to be fighting the NPCs most of the times on the foot, where he has his full fight skills.
then some players will simply stand on these vehicles, and since they're big enough, we wanted to support NPCs to be able to climb on these vehicles.
In that case, since the surface of the vehicle is quite small, we had to reduce the set of fight animations that we were using.
But it also allowed us to use a bit more often what we call the Sparta kick, where you simply kick an NPC off the vehicle, which looks great on trains.
By the way, this is a debug build, so there might be some glitches.
So sorry about that.
We also allowed NPCs to take you out of the driving position and fight you on the rooftop.
I'll get through this guy first.
By the way, I'm not very good at the game, so you might see me get quite a lot of damage.
I didn't go with God mode.
So here as you can see I tried to steal the guy's vehicle and he grabbed me by the neck and brought me back up on the vehicle, again falling back on our fight pillar, where the NPC is allowed to use all of his fight moves.
Here, we'll see an example of shooting.
We tried to use the shooting with the same rules as the NPCs out on the ground.
So basically, they don't fire too often.
They follow specific rules as to what's the percentage of chances that they will hit you.
But in our case, they were also able to shoot your horses.
And as you can see, the shooting allows the NPC to also handle a target that's on the foot, where he'll stay on his vehicle and simply shoot me from there until I get far enough where he'll start chasing me again.
If I stay too long on the ground next to him, he'll simply get off the vehicle and start fighting me in melee.
The ramming is one of the most interesting aspect of the vehicle fight.
Ramming is used by the player and by the NPCs, and it's also linked to damage on the vehicles.
So, as you could see, I destroyed the vehicle of the previous guy, and then other NPCs are trying to come and ram me to destroy my vehicle.
This allowed us to showcase a bit the ejection system in our game, leading to player recovery.
Most NPCs simply die when they get ejected.
Then, one of my favorite feature that we developed is the boarding.
It basically allows an NPC to climb on his own carriage and jump on yours and come fight you.
Again, in my opinion, it falls on all of the critical pillars that we described in the beginning.
It's a mix of navigation, it's a mix of fight.
Sorry about the camera there.
We also had to add the virtualization.
Virtualization is a process that we developed to allow NPCs to live a bit longer despite being unspawned.
In our game, for most of the NPCs, we're using what we call the loading bubble, which describes the area in which NPCs are living.
It's basically player centric, so whenever the player's moving, the bubble follows him, which means that if you're escaping at a high velocity, people that are left behind are likely to be unspawned.
We had the issue where the player could be on a vehicle and get into conflict with an NPC on foot.
Obviously, the NPC on foot has no way to chase you very fast, so he will have to use a vehicle.
If you go full speed right away, he's very likely to get unspawned, which would result in no challenge because the player is simply canceling any conflict as soon as he unspawns the NPC.
So NPCs were also not cheating, so they had to navigate to a vehicle and then interact with it, which led to a bit of time making them unspawn a bit too often.
So we decided to add virtual vehicles.
We used virtual vehicles by creating fake entities that were not living in the world, but living in a virtual space in which NPCs were grouped, living in these fake vehicles.
The reason why we're grouping NPCs is we wanted to avoid, if you unspawn five NPCs, to have five vehicles responding and then chase the player.
This way, if NPCs are sharing a faction, they can be grouped in a virtual vehicle and then only a single...
a spawning request will be executed.
All of the NPCs persist their health, their visual and the target.
This way the player can recognize that the NPCs that he left behind are still living and breathing when they respawn.
We also added simplified virtualized behaviors.
In our case, for the...
the conflict was the chase.
Basically the NPCs are using the road network that you saw before.
And this network is loaded at all times in London.
So an NPC, even if he's really far away from the player, he can simply query a path from A to B and chase the player without even existing in the world.
We also added a simplified search, which basically let the NPCs roam around the streets.
This is not really visible for a player, other than on the mini-map, because the NPCs are not spawned, so you cannot see the actions that the NPCs are doing, but you can see basically the path that they're following.
And you can also hire allies that will follow you everywhere in the map, and they will try to rely as much as possible on the road network.
De-virtualizing, sorry about that, is whenever the NPCs are coming back to the loading bubble, they would simply respawn.
We do a simple analysis of the traffic system around the player, and we try to find a spot that's not visible, where there's enough room to spawn the vehicles.
We also combine the spawning, so all of the NPCs in the vehicle get spawned at the same time, resulting in a full entity with all of its components available at the same time.
Unfortunately, this is a short talk, so I'll have to wrap up.
In my opinion, adding vehicles in Assassin's Creed Syndicate was mostly a navigation problem.
We decided to empower our existing systems and build on top of it.
So we reused the fights, we reused the searches, and we tried to adapt all of our gameplay loops to the new vehicles.
We also worked around our engine's limitations without getting rid of the baby at the same time as the bath water, we simply found out the specific points where we needed to tackle, and this meant that we added the virtual behaviors.
There will not be time for questions here, unfortunately, but if you want to talk to me, there's a wrap-up room, which I was told is unfortunately far away, so if you want, just join me at the back of the, yeah, in the hall.
Otherwise you can email me or talk to me on Twitter.
And tomorrow I will be at the Ubisoft lounge from 11 to 12, so if you guys are looking for new challenges or have any questions, come see me, I'll gladly help you.
And I'd like to quickly thank people in Quebec City.
This is a very short list of the people who worked on the vehicles, but there's quite a lot of work involved and all of these people worked as programmers on the vehicle system or the AI system.
And unfortunately I didn't have enough room to thank the designers, the animators, the mission designers.
There's a lot of people who worked on it.
So thanks for your time and I think my time's up.
Thank you.
Thank you.
Thank you.
Thank you.
