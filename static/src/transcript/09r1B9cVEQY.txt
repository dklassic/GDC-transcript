All right, let's get started.
Thanks for coming.
Quick reminders, please silence your cell phones and no video recording.
This hour-long talk is split into two halves by me and Robert Yang.
So we have separate evaluation forms.
If you didn't get beeped on the way in, like if you stayed from the last talk, if you can go get beeped, that would be great.
You'll get the evaluation form.
Please fill them out, because your feedback is important to us.
My name is David Shaver, and I'm a game designer at Naughty Dog.
Before that, I was at Respawn Entertainment, Shell Games, and Zynga.
I've been in the industry for almost 11 years and worked on lots of different games, the most recent you can see here.
I started out as a game programmer and switched to game and level design.
Years ago, this very workshop helped me realize my love of design and helped with that transition.
Now, this talk is about how to guide players naturally with your level layout and how to minimize the reliance on HUD markers and forced camera moves and all that stuff.
It's the talk that I wish someone would have given me years ago, because it really would have saved a lot of time.
Speaking of saving time, this talk is jam-packed, so this overview's quick.
Part one, guiding players with block mesh layouts with me, and part two, Robert will be talking about level lighting.
Let's go.
First up, let's get all on the same page.
What the heck is block mesh?
Well, at Naughty Dog, we call levels built with simple geometry and textures block mesh.
Unfortunately, our industry hasn't arrived at a single term at this yet.
They also call it gray box and white box and all kinds of things.
Mostly, I prefer block mesh because it includes color and lighting, which are very important when playtesting layouts, since they help guide players.
Also, handing off colored block meshes to your artists make it a lot easier to communicate the kinds of textures and colors you had in mind.
Green floor, it's probably grass.
Brown, it's probably dirt.
Now let's look at a common level design process at a game studio.
First, you need to establish the context and constraints of your level.
This includes things like the environment type, the time of day, location in the story, available character abilities, enemy types, all that stuff.
You should decide on the game plan narrative beats, too.
Once you have your requirements and beats, dive right into building a rough version of the entire level so that you can get a sense of pacing and scale.
Be sure to stub in those game plan narrative beats, too.
Get something playable quickly, and then watch other people play it.
There's no need for a formal play test or anything.
You can just grab anybody, because the feedback that you get from them is going to change a block mesh.
Repeat this iteration loop until you basically run out of time.
And once you run out of time, your layout's locked, and you hand it off to the rest of the team to make it look amazing.
But your job isn't done yet.
Your task at this stage is to ensure that your design goals mesh with their artistic goals.
So keep play testing, and work with your artists to ensure that it still plays great with the real art.
Now, it's worth noting that every studio has a different process.
but this core iteration loop is universal.
So now let's get to the block mesh tips.
Now, our game director Kurt told me that tips wasn't a strong enough word for how important these are, so I'm going to rename them now to guidance principles.
So first up, we have affordance.
One of the most powerful ways to guide players is by using affordances, which are properties of an object that define its possible uses and make clear how it should be used.
A classic example is a door handle.
Just by looking at a push bar or a pull handle, you intuit whether or not to push or pull the door as you approach.
Ladders afford climbing.
Edges also afford climbing.
Ramps afford jumping off or smashing through a vent in Wolfenstein II.
Affordances depend on your game rules because that's what they're communicating to the player.
So for our game designers, affordance is a great way to communicate to the player what they can interact with or where they can go.
Players will learn what is interactive, and it will attract them towards these affordances.
Consistent color and shape establish a trust contract with players who use these to learn your game rules.
You should ensure that all of your affordances work consistently throughout the game, or it breaks that trust contract, which will cause player frustration.
You should also include affordances in your block mesh phase.
It'll help guide players where you want them to go.
So let's see what it looks like.
So in this block mesh, it's not clear where the player should go next.
Sure, the ladder affords climbing up the little tower, but then what?
Jump to the cliff, dive in the water?
But if we add some affordances, it becomes clear where to go.
The boards on the roof afford jumping to the cliff, while the edge grabs on the cliffs afford climbing.
Of course, this example is tailor-made for Uncharted, but the game's same concepts will apply to your traversal mechanics.
It may seem silly to add them so early, but trust me, it makes a world of difference in how your playtests go, and it doesn't take that much effort.
And one more thing.
Ensure these affordances use consistent shape and color.
Follow the game metrics, and you empower your team with this information.
They could even be prefab objects that the whole team can use.
Next tip, denying affordance.
While affordances are important at showing the player what they can interact with, Showing them what they cannot interact with is also important.
This is denying affordance, and it prevents player frustration and guides them.
Now, you can't just disable a ladder or place an invisible wall.
I mean, you can, but you shouldn't, because it's frustrating to players.
So, you need to contextualize why you can't use the affordance by adding clearly visible things that say, can't use this, or don't go there.
Also, make sure the reason for denied affordance is clear in your block mesh.
At Naughty Dog, we record when a playtester tries to jump and grab something that they can't grab.
We call these bad jumps and overlay them as red spheres in the game so that we can identify problem areas.
Often, we'll find something that looks climbable but isn't supposed to be.
So we'll cover it with foliage or something, and after the next playtest, those bad jumps will be gone.
Like sanding down a piece of wood, this process makes the levels play smoother.
Here's an example of using spiky shapes and breaking up the horizontal edge to deny climbing affordance.
Even though the window is within climbing range, you still can't grab it because it's visually blocked.
Notice how this is contextualized to the environment with bricks and rebar.
This is important for games grounded in reality.
For games not so grounded, you can get away with a lot, and that's okay.
Just find the right tone and context for your world to make it feel natural and still deny affordance.
Now let's see some block mesh.
Let's say that we want the player to go through the window on the right, which is busted open.
The left window is covered with a bush, and the front porch window and door are blocked with boards.
Most players will glance at this house and go right for that window in a play test.
The intended way forward is open, while the rest of the entrance affordances are denied.
Next tip, shape language.
Establishing a consistent shape language.
communicates affordance and guides players.
Climbing edges in Uncharted are always horizontal and flat.
As a player, you learn this visual language of Ford's climbing, and you can spot it easily.
Also, people tend to have emotional associations with certain types of primitive shapes, which is even common across cultures.
We can use this to our advantage to guide players toward or away from certain shapes.
Round shapes tend to be viewed as non-threatening.
There's nothing to stab you with.
Rectangular shapes are viewed as stable and trustworthy, like a shelter.
And diagonal shapes are viewed as aggressive and dangerous, like a spear.
Now let's take a look at a screenshot from Uncharted The Lost Legacy and highlight the shapes.
As you can see, the spiky shapes feel a little bit uncomfortable, possibly causing you to want to avoid those areas.
The round areas aren't a threat, and they actually provide stealth.
And the square shapes are combat cover or buildings, nice and stable.
All of this subtly guides the player to the buildings.
Now let's see what it looks like in block mesh.
Let's say we want the players to go to the right, and they're being chased, so exploration will wreck pacing.
The path sort of leads there, but some players may veer to the left.
So how can we gently nudge them to the right?
First, let's add some spiky trees and some other pine trees that angle toward the goal.
Then we'll add some round bushes.
Finally, we'll add a small building.
And I'm not going to lie, at this point, I kind of feel like this.
But with a lot less hair.
All right, let's highlight the shapes we just added.
The spiky shapes say danger, and they discourage going there.
The square building implies, hey, stability is this way.
The round stepping stones on the ground act as breadcrumbs to that stability.
And the round bushes kind of act as bumpers to frame the play space.
Of course, none of this prevents the player from going wherever they want.
It just gently guides them where they should go.
Next tip, color language.
When you're trying to establish a consistent visual language in your affordances, shape is only half of it.
You also need a consistent color as well.
Adding color provides valuable context for an otherwise barren block mesh.
It also adds depth if you're making a 3D game.
Coloring also speeds up collaboration with your team, because at a glance, they can get it without explanation.
Is the ground supposed to be dirt, lava, water?
Now Naughty Dog is notorious for using contrasting colors to draw the eye to where you should go.
Here we have a bright yellow sign and rail, and it subtly lets the player know where to put the plank.
Most people won't question why only one rail is yellow.
They'll just remember that they intuitively knew where to go.
Here we have white climbable edges.
And here are some more edges.
But wait, these are green.
I thought you said to be consistent.
Well, it's not a single color that's important.
It's using consistent color and shapes in the context of the environment.
Try to blend them into the environment so it looks natural but still stands out.
Let's see how color can age a block mesh.
Here we have a gray box.
It's not really clear where the player should go or where they even can go.
Affordances are gray and they're hard to see.
Also, what kind of environment is this?
A desert?
An icy planet?
First, let's add color to the affordances so that you can see them in the path forward, sort of.
But we're still missing the context.
What is this place?
You know, everything blends together.
Boom.
We add color to the top of the blocks, and suddenly you're in a grassy, mountainous area with water down below.
As you can see, adding color to your block mesh helps contextualize the level to the players and the teammates.
And to further ground this on Earth, let's add some props.
OK.
Now.
Color is important, but it shouldn't be the only thing that you rely on because some players are colorblind.
You should combine color with other techniques, like unique shapes and using contrasting color values rather than hues.
Bonus points if you can get colorblind playtesters or teammates to help identify problems and make your game more accessible.
Next tip, landmarks.
There she is. That's our building.
There's the tower.
Here's the bridge, that's our way out of here.
Ever wonder why game characters spend so much time pointing at things in the distance?
Well, that's because they're landmarks, and they're a great way to orient players in your world.
A landmark is basically just a big object that can be seen from far away and from different vantage points.
If used correctly, players will see this object over and over as they get closer to it to let them know they're headed in the right direction.
Landmarks also act as a goal for the player to work toward.
They're also called weenies.
If you want to know more about that, just Google Disney and weenies.
Don't worry, it's safe for work.
Probably.
Depends if your safe search is off.
All right, check this out.
Zelda, the Breath of the Wild really goes nuts with the landmarks.
In just this one shot, there are several visible all in a row, and they're not overlapping one another.
They also have unique silhouettes, so you don't confuse them, which is also a great tip.
Try to have unique silhouettes for things in your game, so that players can distinguish them at a glance.
All right, block mesh time.
Let's add a landmark to this block mesh.
It's pretty basic, but it can have a huge impact on drawing the player toward a certain direction.
If I'm working with a landmark, I like to add it first and then build the level backwards from there.
That way I can always see it in the distance and shape the level accordingly.
Next tip, openings attract.
Caves, doors, et cetera, they all seem to attract people toward them.
These openings often lead to a refuge space, which psychologically feels safe.
Openings also have an air of mystery about them, and people want to see what's inside.
This attraction happens in the real world with hobbies like spelunking and urban exploration.
Here in Titanfall 2, a ramp affords jumping to a nicely lit opening that begs to be explored.
This underwater opening lets you know that there's something beyond it if you swim for it.
It even works in block worlds.
As soon as I saw this, I went right for it.
Doors and archways also draw you inside, even though an archway may not have a roof above it.
When adding openings to block mesh, it's important to have different colors for interior and exterior walls.
Here we have a cool white exterior and a warm yellow interior.
This helps players read depth in your block mesh.
If they're the same color, it's hard to tell that it's even an opening.
Also, communicate this design intent to your artist to ensure that they know that this is an entrance and that it needs to stand out.
Next tip, gates and valves.
Terrible joke.
All right, no, not those gates and valves, the kind that make way more money.
We want the level design kind.
Gates stop progress until some sort of conditions are met.
You've killed all the enemies, you've moved the debris out of the way, et cetera.
Valves are the opposite.
They let players move forward, and then they slam the door shut behind them so they can't get backtrack.
In this scenario, we want the player to enter the combat space and be trapped until combat's over.
We have a valve into the space and then a gate at the other end blocking them so they can't leave.
Once they enter, the gates and valves reduce the possibility space of the world to just the combat zone.
Also, there's less mentally to keep track of so players can focus on the task at hand.
It may look like this is only useful in linear games, but open world games can use it too with scenarios like arena battles.
The Halo series did a great job of having big open levels that gated and valved players when needed.
Now, gates are pretty straightforward.
There's something in your way, and you need to clear it.
So I'll focus on valves, which can be a little more nuanced.
In this valve example, you drop down, and you can't get back up.
A fairly famous valve is in Super Metroid.
where an entire chunk of level acts like a valve.
At some point, the player falls down this really long shaft, and there's no way back up.
They're stuck, and the vast possibility space of the game is reduced to a tiny portion as seen on the map.
In this space, they find two critical items, the high jump boots and the ice beam.
And they learn to freeze enemies and then jump off of them so that they can use it to escape the shaft.
The shaft that was once a valve has now become a gate that needs to be overcome.
Given the entire world to explore, they may have never discovered this ability.
Next tip, leading lines.
Leading lines are a composition technique where lines in the environment draw the eye to a specific place in the scene.
In this photo, the logs dry the eye up and into the frame to finally rest on the house.
In games, these are often things like roads and pipes and cables and all sorts of stuff.
Here in Titanfall 2, we wanted the player to focus on this door and not miss the reveal of a new enemy.
Pipes and floor grates form leading lines to the door.
And when you get close, a stalker rips the door open for a grand reveal.
Here in the block mesh is a hallway with a T-junction at the end.
Let's say you wanted the player to go to the right again.
Right now, it's a coin toss.
They may turn left, see a locked door and turn around, or they may smoothly go to the right and enter the next area.
By adding some leading lines, though, we can draw their attention to the right and increase the chances they'll go there.
Pipes on the walls and rug guide the player down the hallway.
But the pipes on the left stop while the pipes on the right go along around the corner, drawing the eye.
The caution cones break up the red line of the rug going left.
And to go over the top, we add a big, bright yellow cable that hugs the right side and goes along around the corner.
Just some simple shapes, but it can have a huge impact on smooth navigation in your play tests.
Next tip, pinching.
Pinching basically means your layout funnels the player to a specific spot.
You accomplish this by blocking off areas and angling shapes to naturally flow to that spot.
It's good for redirecting players to a specific area.
And it's also a great way to set up a cool reveal, like the view of a landmark, without forcing the camera to look at it.
If you pinch them to a specific spot, the camera will be naturally pointed at the thing you want them to see.
Wrong slide.
OK.
There we go.
Of course, all of this completely depends on your mobility mechanics.
It's much easier to do this in a game where players are stuck on the ground than in something like Titanfall where they're flying all over the place.
Let's look at an example.
Here, the buses and cars are angled to a specific spot, which you can see highlighted here.
Walking down the street, the shapes naturally bring you to the end of the pinch, which faces the way forward.
Let's see it in action.
In this video, the pinch lines up a perfect shot of the hospital in the distance, which is your goal, and the tunnel that takes you there.
Next tip, framing and composition.
Another technique borrowed from photography.
By framing your subject, be it a landmark, a big enemy, or a cave opening, you draw attention to it.
If you'd like to learn more, just Google some photography composition techniques, you'll find lots of stuff.
This one's really useful when combined with pinching to set up an important reveal on the level.
After you pinch the player to a specific spot, perfectly frame the object for maximum effect.
Let's see it in action.
As you saw, the player is naturally pointed at the dam, and due to good framing, it was the dominant thing on screen.
Also, a side tip, people's eyes are drawn to detail, and the dam is very detailed.
All of this with just some layout and no forced camera moves.
All right, next tip, breadcrumbs.
Aw, yes.
Breadcrumbs lead the player a little piece at a time to the goal.
They can be almost anything, chunks of stuff on the ground, pickup items, enemies, lit areas, et cetera.
It's usually better to add breadcrumbs to your block mesh after the early play tests, because they can hide fundamental layout guidance problems.
But if you still need them after a few revisions, don't feel bad about adding them.
In this example, the bits on the fence and roof create a visual stepping stones to the ledge.
In Destiny 2, these panels guide the player into the tunnel.
Now, if your game has pickups, they're a classic way to breadcrumb players around the level.
Like how many times have you played a Mario game and the coins led you to a new area?
Pickups are also great for letting players know they're on the right path in a cluttered or maze-like environment.
This one's placed next to an area that you can duck under, which some players forget they can even do, so it subtly hints, yep, you're going the right way.
So to go back to this house, let's say only half the players during our last playtest went into the house, and the other half got lost.
Let's add some rocks and boards as breadcrumbs leading to the window.
Notice how the boards are angled toward the window, creating leading lines.
You can also sprinkle these breadcrumbs in open world areas to lead players to interesting things, like the panels in the Destiny example.
Next tip, textures.
You can use textures to subtly, or sometimes obviously, point the way to a goal.
These can be just about anything.
Arrows, scrapes on the wall, signs, et cetera.
Here in Uncharted, The Lost Legacy, scrape textures on the wall communicate affordance that you can shimmy here.
This example leads to a secret area and a collectible.
So it's a good example that you don't need to do this for just the main path.
Here in Uncharted 4, these tire tracks on the rock communicate a fordance that you can drive here.
Now when I played this game, I didn't notice the tire tracks and I got lost.
I didn't work on this game.
I worked on the next one.
Once I noticed the tire tracks, though, the rest of it driving went totally smoothly.
Signs literally point the way to the hospital, which is also your goal.
These textures are often some of the last things added when making a level, so it doesn't, seems like it's not really gonna help your block mesh phase.
But guess what?
You don't need to wait for an artist to add them.
You can cheat, and you can build them out of block mesh for your play tests.
Here I've added an arrow and a sign to point the way.
And these scratch marks lead into the alley, indicating something heavy was dragged back there.
And the best part?
These are all just block mesh.
Labeling rooms and areas can be super helpful for both linear and open games.
If you're building a school, for example, having labels like gym and cafeteria provide valuable context and signposts as your players explore.
I totally hit next.
All right.
Here I've pulled this away from the wall a bit so you can see that it's just a bunch of blocks.
This stuff only takes a couple minutes to do and it works wonders for your play tests and also to communicate with your artist where you think signage might go.
And I'm not going to lie, this one is so easy and simple, it's obvious, it kind of blew my mind when I learned it.
All right, next tip.
Movement.
Movement grabs the eye and the player's attention.
This can be anything that fits your game.
Big scripted moments, birds, sparks, buddies, enemies, and even just something flapping in the breeze.
Also, make good use of the direction of the movement.
The player's eye will follow the movement, and it can draw an invisible line right to where you want them to go.
In this example I'm about to show, the birds draw your attention to the left, where there's this open trailer door.
And the trailer door is also banging in the wind.
Both of these things kind of subtly let you know, like, hey, maybe you should check out what's inside.
And the dead body totally helps too.
Of course, adding movement in the block mesh phase is highly dependent on your game and engine.
If you can, though, try to include them in your play tests.
Maybe not in the first ones, but definitely before you lock it down.
And you don't have to get fancy.
You can have basic cubes just lurping through the sky as a placeholder for birds.
Now, adding movement is also super useful as a bandage late in development when the level is basically done, but players are still getting lost.
Since the level itself is done, you can script in some movement to help.
But don't rely on it, though.
like try to solve the player guidance problems in the block mesh phase.
Last tip, light and god rays, a.k.a.
light rays or sunbeams.
Light and god rays are useful for guiding players to a goal.
People are naturally drawn to light sources, and god rays point a line right at the goal.
This is important even in the block mesh phase.
The Naughty Dog lighting artists begin very early.
In this example, the two lit areas are breadcrumb goals.
First the one with the bad guy in the middle, and then the one at the top right.
Here we have some god rays coming out of a window.
They take up more screen space, so you're more likely to notice them.
And they draw the leading line straight to the window, which is also the exit.
Also, notice that swordfish.
It is totally drawing an arrow right at the window.
So that's not lighting, but textures.
So since my talk is about player guidance, these light tips focus on that.
Robert's upcoming talk is about lighting a level, so let's start wrapping it up.
But first, a bonus tip.
Ah, the squint test, so simple and majestic.
But what is it?
Well, it's basically an easy way to see what stands out in your level.
Step one, squint your eyes and look at your game.
Step two, things will be blurry, but what stands out from that blur?
A lit door, a bright yellow truck?
The things that are standing out are the things that players are gonna notice first.
So step three, adjust your block mesh in your lighting so that the things that are popping out are the things that you want them to see.
And here's a fun quote Matias gave me.
My professor used to say that squinting can replace four years of art school.
Thanks for the quote.
Okay, let's see it in action before we wrap up.
Here's a shot from Titanfall 2.
Squint your eyes and take note of what stands out.
Go ahead, I'll give you a minute.
Squinting, are we good?
Squinting, got it?
Okay, good.
You probably noticed the yellow walls and the waterfall and the orange cave opening.
The yellow walls are wall running paths that draw leading lines straight to the cave.
And the waterfall uses movement and sound to grab your attention, and it also helps frame the cave.
Openings attract, and the cave is lit a totally different color from everything else in the scene.
OK, it's time to wrap it up.
But wait, there's more.
I want to tell you about hashtag Blocktober.
Last October, Michael Barkley at Naughty Dog tweeted this, but in his awesome Scottish accent that I am not going to attempt.
What's up, level designers?
Level blockouts are art.
Hashtag Blocktober should be a thing.
The response was overwhelming.
Everyone from AAA devs to hobbyists participated.
Now I bring this up because it's important to demystify game development and encourage people to make things.
So many people didn't realize that the self-deprecating crap that they were making looked exactly like their favorite games early in development and they were super inspired to keep going.
Blocktober's happening again this year and Mike created this Twitter account to collect everything people make.
So follow it and get started now on your block meshes for Blocktober.
If you like this talk, check out these other links and books.
If you make multiplayer maps, be sure to check out Elizabeth's talk from last year.
There's no need to write these down.
I'll put all this up on my website after GDC.
It has some bonus tips at the end.
Hopefully you found this talk useful, and I'll see your block meshes in Blocktober.
Thank you.
Thank you.
Thank you.
Thank you.
Okay, hi, this is the second half of the talk of Invisible Intuition.
I'm Robert Yang. I'm a professor at the NYU Game Center.
If you want to know more what we're about, come visit us on the expo floor starting Wednesday.
And David just talked a lot about block mesh and gray boxing, not gray boxing, sorry, block mesh, just block meshing and geometry.
And in this talk, I want to focus kind of more on the lighting side of things, because as David just said, at Naughty Dog, they actually start lighting really early.
So this is also kind of a dimensional level design that I think a lot of people are scared of and want to avoid doing, and you shouldn't be scared about it.
So a little bit about me.
I'm mostly known for my gay culture video games.
Can I get a round of applause for gay sex?
Okay, no, stop, stop. It's not about that, perverts. This talk is kind of more about maybe how I light my gay video games, maybe, a little bit. And it's okay if you're not cool enough to put gay sex in your game, but, you know, even if you're a straight person, you can put lighting in your game, maybe.
So in this talk, it's kind of aimed more for beginners and intermediate level designers.
Although even if you're an experienced level designer, maybe you don't think about lighting as much as you could.
So maybe it'll still be helpful for you.
We'll start with a more general discussion of lighting and then get more and more specific as the talk progresses until we end with how to light a level with a more specific suggested workflow that you can do in Unity or Unreal or whatever you use.
So first let's start with a brief history of light.
A very brief and simple history of light might start with the sun, right?
The sun is really great, let's give it up now for the sun.
Although it's gonna rain a lot, I'm told, so you won't see much sun in the next few days.
There's also fire, controlled burning in gas lamps, incandescent light bulbs with filament and run current through the filament.
There's also a stronger focus these days on energy efficient light sources like fluorescent lighting or LED lighting is also becoming more common.
And I think it's very tempting to think of this as a story about technology and progress and older light sources becoming obsolete or something.
But that's not exactly true, and I don't think that's exactly accurate.
Like the light bulb did not make the sun obsolete.
Right? Like you still like going outside and playing in the sun or whatever you do in the sun.
Um, I wouldn't, no, I'm a game developer. But, um, the LED did not make the fire obsolete.
Right? Uh, you'll go to a restaurant and maybe tonight and have a nice candle lit dinner or something and the flickering candle, it's really nice when that's actual fire, not one of those weird LED flickering things. Right?
So as a society, I think we still use fire as a light source, not necessarily as a task light source where you write letters by candlelight or something.
But it's still in our birthday candles, our campfires.
Fire hasn't disappeared, but our culture around fire has changed.
Fire used to be common, and now it's more like a special occasion kind of thing.
But it's still here in civilization.
So each of these light sources means something different and makes a space feel different, and I urge you to pay attention to the different moods and atmospheres these different light sources evoke.
And today, contemporary lighting design has been kind of heavily standardized and industrialized.
If you're a lighting designer and you're shopping for light fixtures or luminaires, as they're called in Europe, It's very common to, on the left right there, that's like a picture of like a lighting catalog.
And the lighting catalog gives you all these different stats so you can kind of predict what the light will do.
And there's also usually often like a chart in that lower left.
I've blown up the chart on the right there.
And that's a light distribution curve chart.
And that kind of shows you how much light that light source or light fixture is going to throw at every given angle.
So notice this light bulb with that light distribution chart on the right.
It's kind of shaped like a heart a little bit and has like a crease at the top.
Well, that makes sense, right?
Because the light socket is on top.
It's not gonna throw light through the light socket.
That doesn't make sense.
So it's mainly throwing light downwards and to the right.
So now you know how to read a light distribution chart.
It's pretty easy.
So this is how real life lighting design quantifies and standardizes the physics of light.
But in video games, light is often much messier than this.
So now I want to talk a little bit about what is game lighting and what do we mean by that.
Light is a complex phenomenon that's hopefully elegant with like a unified theorem and all that.
all these phenomena like reflections, occlusion, translucence, shadows, all those happen in real life like for free, so to speak.
But in video games, lighting is like a bunch of crap in a box, we don't, it's just a bunch of random systems that we like hack and tune together, and we throw all that crap in a video game and then pray it'll look okay in the end.
So it's not a beautiful, elegant system, it's just a bunch of random stuff.
And to give you an idea of all that random stuff, right?
In any given game engine, there's different cascading shadow maps, there's refraction shaders, there's caustics, there's fog, there's glow sprites, HDR, screen space ambient occlusion, bloom.
All these different things are all kind of representing one system.
But in a video game, it's like 20 different systems, right?
And we kind of just turn them on and turn them off on a case-by-case basis.
when you play a video game, maybe when you go in this room, that's when they turn on some screen space reflection.
And then when you go in this other room, they turn off screen space reflection to save on frame rate and optimize it and stuff.
And again, from a physics perspective, that makes zero sense, right?
The idea that you can turn off shadows in real life makes no sense, because that would just be like, you should go see a doctor if that happens.
That's not good.
So again, video games, we rely on this piecemeal approach of all this random stuff together.
So in this talk, I'm not going to be talking about a lot of those effects.
I'm going to be focusing on what I view as the fundamentals of lighting in level design, which are basically these four basic light types, directional light, spotlight, ambient light, and point light.
So let's say you're mocking up a level in Unity or something, and you don't have any lights going on.
It's just a dark level, no lights there yet.
And I just have a bunch of blocks there.
So first you might add some ambient light.
Ambient light is a kind of default amount of light you might add to a scene.
It refers to the whole scene.
It's global.
And you do that to make sure those shadows in your levels aren't pitch black.
because in real life, very few things are just pitch black like that, unless you're in a really dark cave or something.
There's always a little bit of light bouncing around everywhere.
So ambient light is kind of meant to simulate that a little bit.
But notice when we add ambient light, that doesn't really help us read the shapes or anything.
It's still very flat, right?
You still can't really see the shapes that well, but you can just distinguish the silhouette.
So that's when you might add another light source.
So here's a directional light.
Directional light is a global light source.
It illuminates the entire scene at once from one given direction.
And it usually doesn't matter where you position a directional light, depending on what tool you're using.
And now with the directional light, you can read the shapes much more clearly, because you add that directionality component to it now.
And notice how everything pops out more.
In games, we usually use directional light, usually for sunlight or maybe moonlight or something.
Then we also have a spotlight.
If the scene is set at night, maybe you want to add some street lights.
For a street light, you might want to use a spotlight.
A spotlight throws light in a cone shape in a given direction and from a given position.
So here I'm using a spotlight as a down light to emphasize this walkable floor area instead of emphasizing something else.
And lastly, I want to talk about the point light.
The point light throws light in every direction.
Some tool sets might call this an omnidirectional light, or you can call it an omni light for short, which makes it sound really cool, omni light.
But you imagine a point light as this invisible ball of light that's just washing everything nearby with light.
So a point light, I think, is usually really good at drawing attention to a focal point, because it ends up creating kind of this hot spot effect a little bit.
In contrast with a spotlight, right, it's not always clear where the spotlight is shining from, especially if it's a spotlight like a floodlight shooting light across.
And in practice, you should try to use all four lighting types at once because they all can work together really well.
Ambient helps bring up the shadows.
Directional light helps make those background buildings pop and helps guide the main mood of the scene.
Then you also have a spotlight highlighting an area.
Then you also have a point light highlighting the streetlight.
And again, all this stuff works together, helps create depth.
It helps push a background and a foreground for your scene.
And that's good.
And with these light sources, I would argue that they form a complete domain of lighting tools.
So stretching this gamut from like a global light source that affects everything to a local light source that only affects nearby things or a light source that shines in one direction or all directions I feel like it's like a complete domain kind of. So the kind again that's why every 3d engine or tool set usually has these light sources.
So now we should talk a little bit about why we how we should use these light sources.
And I'm going to talk about a lighting theory called three-point lighting, which is a very common form of lighting design theory that's very common in film and photography.
So if you have a background in that, this will seem very familiar to you.
Basic idea of three-point lighting is that you have three different light types.
And here's a diagram that hopefully explains some of it.
In that top left, we have a combined composite of three different light types.
But we can also break down what each light is doing into a separate channel.
So that's what those other three smaller pictures are doing.
And in the top right, you have a key light.
The key light is kind of like your brightest light source.
And it kind of sets the dominant lighting angle and mood for your scene or picture or image.
Then in the bottom left, we have a fill light.
A fill light helps brighten up the shadows, kind of like the ambient light we were talking about before, and helps fill in the darker parts.
Usually you want this at a lower intensity than your key light.
Then in the lower right, we have the rim light.
And it's also sometimes called a back light or a hair light, depending on what you're doing.
And it illuminates your silhouette to help pop it out from the background very faintly.
Otherwise the hair might end up, or the top of the head might be blending in with the background.
So notice they do some specular and stuff on top like that.
And a very common three-point kind of setup might end up looking a little bit like this.
You have a key light and fill light, usually kind of at opposing angles.
Usually don't want them falling the same direction and position, because then that kind of defeats the purpose.
So usually you want fill and key to be at least different angles and positions.
And in film and photography, there's also often the background light, that optional light right there.
The background light helps brighten the background to help get rid of any awkward shadows that come from the key and fill.
Remember, in real life, they can't just turn off shadows for the key and fill.
They actually have to have another light to get rid of that shadow.
And if you basically watch any movie, you can kind of break down any given film shot along these lines and try to see what all the different light sources are doing.
So these are some examples from a blog called Lighting Pixels.
You can see there's a key light, a fill light, and a rim light on that left.
The key light is kind of coming from that top left of that image.
So then it kind of feels like sunlight, kind of.
And everything in that image is kind of evenly illuminated too, so it seems very readable.
Meanwhile, on the right, the key light is not coming from the top, right?
The key light is coming from below, which means it's probably not sunlight, unless these people are like hanging upside down, that's probably not sunlight, right?
So to me, that means it's more like an artificial light source, maybe like a nice candle or something.
And when that...
candles illuminating from Bama's face. I feel like that sets up a very different mood in the right image versus the left image, right?
the right image feels kind of more intimate and Maybe even like romantic. I don't know what movie that's from. Maybe maybe they're breaking up or having a divorce I don't know some some shit is going down in that right image, right? But in the left image zero shit, right?
It's very very nice and safe And it's really important to note that with three-point lighting, it's referring to three types of light sources.
You don't always need to place three lights in every scene.
So, for example, in that film shot on the left, there's only two light sources there, a key light and a rim.
There's no fill, and the right side of his face is left in shadow.
And that's OK if that's what you want to do with your lighting, and that's the mood you want to create.
Same thing in that right image.
There's only one light source, just one key.
to help kind of emphasize, I think, the extreme close-up and intimacy of that shot.
So, again, it's just about what you want to do with your lights and what you want your lights to say.
So, here's another example.
I mean, Unity, say you want to light this hunky dude with three-point light theory.
The way I lit him, I had a key light kind of grazing him a little bit so I could catch some muscle definition.
And I had the fill light kind of a little off angle from there because I still wanted to maintain the key, but I wanted to soften how the shadows were hitting him.
If you see in the right, that's a variant without the fill light.
And without the fill light, I felt like his face was too much in shadow, and I couldn't read what was going on.
And if you're like a beginner level designer, I would say most beginners forget to do the fill part.
And if you're starting out, you should air on the side of more fill than less fill.
And then lastly, I have a rim light also kind of picking out the right side of his face there and help separating that from the background so you can read his features better.
And as for implementation, here I'm actually using three directional lights in Unity.
but just with the layer mask set to just one layer just for that object.
So it ends up being not that expensive if you use the culling masks.
In Unreal, you can use a feature called light channels, which kind of does the same thing.
It's super useful for isolating light sources for objects.
But most games end up doing just maybe one light source technically, with the key light might be your main directional light, but your fill might be ambient or spheric harmonics probes.
and then your rim light might be Fresnel and reflection and stuff in your shader.
But I think there's one big problem with three-point light theory for games, especially in regards to level design, and that is the fact that film and photography have a very tightly controlled camera perspective, but in video games, we often give camera control to the player.
So...
If you were looking at this hunky dude and then you walk around and and admire the back of this hunky dude now the key light isn't a key light anymore because the viewing angle has changed now my rim light is like a key light now my fill light isn't visible or something I don't even know what's going on in that image anymore so.
One big problem here is that we can't really know where the player is going to see this object which will affect how we compose our lighting.
This is why a lot of 3D games I think end up vomiting rim shaders and Fresnel effects everywhere because they can't predict where the player is going to be looking at this object so they just spam Fresnel and rim everywhere so that there's always some rim action going on.
But, you know, that should be your last resort.
Let's try to be more subtle than that.
And I would argue the way you can be more subtle is to think about how your level layout will facilitate the viewing angles for your subjects.
And then you can light accordingly and use that as a framing device.
So your level layout is a lighting tool.
You can suggest a view or frame a certain composition just by having the player move through a hallway, and that'll suggest an angle for them.
That's also why you need to do a little bit of block out and block meshing before you do some lighting, so that you have an idea of where the player's going to be going.
And lastly, I want to end with this section, how to light a level.
And I want to walk you through some steps that I would recommend you take with your own levels if you're starting out.
This example will be in Unreal, but you can do it in any engine, basically.
So first, you do your block out, or gray box, or whatever you want to call it.
with just some basic real-time light.
If you're doing some light baking, you don't want to do it at this stage because your level is constantly changing.
You don't want to waste your time spending an hour lighting a room and then you end up deleting that room or something.
Then you've wasted your time.
So right here is when I recommend you just use some basic real-time light and not worry about the lighting so much.
For Unreal, I like switching it.
I like using stationary lights for this and I also like enabling a setting called Force No Precomputed Lighting.
which will help you not worry about light mapping and light map baking and stuff.
And that's in the world settings in the Unreal Editor.
And in Unity, I like using real-time lights, and I disable the auto-generate lighting checkbox so that you're not constantly sitting and waiting and stopping for the light maps to bake.
Although I hear the light map's faster now or something.
I don't know.
Bye.
Step two.
Now you want to set up your main mood, your big mood in your scene.
And to do that you want to set up your global lights.
So remember ambient and directional, those apply to your whole entire game world.
So now's maybe the time to set that up before you worry about smaller stuff.
And here you can see I have a bunch of sunlight flooding in from those middle windows right here.
And I want to set up the main mood of this level with like a big sunny sun-filled area.
And to do that, I need to set up the indirect light bounces, especially for directional light or sunlight.
If you want something to feel like sunlight, you should be paying attention to your indirect light bounce settings.
And in Unity, that would be going to your light settings.
And in Unreal, that would involve going to your world settings and adjust the light mass section of the world settings.
And also look at the skylight actor in your Unreal scene.
And if you're not.
working with global illumination or light map baking for whatever reason, then the next best thing is to hand place, like, invisible, faint point lights everywhere.
If you're, like, working on a game, like, I hear there's a rumor that Fallout 4 did not have global illumination, so they had to place faint point lights to, like, simulate and fake all the sunlight bouncing everywhere.
So you can totally do that as well.
In Unity, I like switching those lights to not important so that they don't contribute to specular stuff.
And in Unreal, I like increasing the minimum roughness on those lights so that they don't create hot spots in your reflections.
Then step three, after you've kind of set up the main mood of your scene, now you should start thinking about the gameplay and lighting for your critical path.
To review, the critical path is kind of like the ideal things that your ideal player would kind of do in a certain order or whatever in your level.
And at this stage, you should probably focus on navigation and wayfinding.
Does the player know various entrances and exits and know where they are?
David talked about this a lot in his talk, about how they care a lot about wayfinding.
Lighting is another tool for you to do that.
And here I'm using it in like a really painfully obvious way where I'm using like bright orange lights on bright red doors.
Feel free to be more subtle than that in your own work, but for example, for the purposes of this example, it's like super obvious.
And when you're doing that, I also urge you to think about kind of like the hierarchy of different things you're doing here.
Here I would argue the left door is being lit to be more important than the door on the right.
The door on the left kind of has a wider spotlight and it's more intense and brighter and also kind of has its own room and shadow so the contrast is much stronger.
Meanwhile that door on the right it's certainly an option and it certainly reads as like an entrance or exit to this room but it's also a bit more faint so now we're emphasizing this door on the left super important this door on the right it's like okay you know it's an okay door but you you know, that door on the left.
Yeah.
Then once you're done doing main player wayfinding and also you're like testing throughout all of this, right, you should be thinking about the other interactions in your game. So if you're setting up any NPCs or set pieces or encounters, you should be trying to light those encounters so that the player will actually notice what's going on.
So here, these are like critical gameplay objects.
that you might want to light enemies coming into the room, or maybe the enemies are guarding an objective or something.
So on the left, they're guarding this orb.
The orb is very important in this game, I assure you.
And I have set up a blue, blue-green kind of turquoise light.
And it's kind of coming at this perpendicular angle to that orange arrow, which is what I imagine as the player's critical path in this case.
And when you have that blue light coming like a grazing perpendicular angle kind of, that helps set that up as a rim light to help emphasize the shapes going on there instead of the surfaces.
Kind of the same thing going on in the example on the right.
You might see two small people, two small silhouettes in the background.
And that's because I've kind of thrown a background light behind them.
So those silhouettes end up popping out and you notice them really easily.
So again, if you're lighting stuff where soldiers or enemies jump through windows or something, you might want to have a light behind them to help frame them and help them pop out.
And when you're doing this, you should be thinking about your texture paths.
Texturing is pretty important.
I think that's why David talks about using color a lot.
You should be thinking about the basic values.
This is a page I basically just said.
took these from some Unreal UDK documentation.
But here the albedo on the left is really dark, and the albedo diffuse texture on the right is much brighter.
And when you have that dark albedo, the light doesn't bounce as much, because most game engines use the albedo texture to calculate reflectance for indirect light.
So you can see that scene ends up feeling really, really dark in a weird way.
But if you use a brighter albedo in that bottom right example, now the scene is kind of evenly illuminated and it feels much more like sunlight.
And one really easy way to check this is if you open up your albedo or diffuse texture in Photoshop, open up the levels histogram, look at that.
Most of your values should be more in the upper mid-range.
And you usually want to leave the left and right, the extreme values, empty so that lighting can do its work.
So don't try to do extreme black or extreme white.
And.
Oh my god, I'm running out of time.
OK, I'll try to go fast.
So this is also where lighting is really, really important, I think, where some stuff might be too dark and some stuff might look great.
And I think that has a very strong political valence to it.
This is an example from an article called Black Skin is Still a Radical Concept in Video Games.
And in this one, the woman on the right from Skyrim, I would argue, is lit pretty well.
You can read all the different contours and surface planes of her face.
Meanwhile, the woman on the left is lit very poorly, I think, where I can't really read her face that well.
Her chin and jaw are totally lost.
And I'm not trying to call out Skyrim or Bethesda.
I don't think there was an evil racist at Bethesda going, ha ha ha, right? I think this was just another example of institutional racism that happens in video games where maybe playtesters were testing mostly with white characters, so they never saw that black characters are lit really poorly in this game or need more specular contribution on their reflection or light probes or whatever is going on in Skyrim.
It's important for us to take responsibility for our art.
And if in doubt, just ask a collaborator so that you can avoid situations like these.
And then the last step is you should maybe iterate on your level.
Keep trying different lighting schemes.
And this is an example of a sci-fi scene that's lit four different ways.
So keep experimenting with your lighting, but at the same time, know when to stop and move on with your life.
This is a trap that a lot of level designers fall into.
They keep tweaking lights a little bit brighter, a little bit darker, as if that'll make a huge difference.
It will not.
I guarantee you.
Just make the lights as good as you can, and then move on.
Maybe come back to it later if you have more time.
You won't have more time, but, you know, go back to it later.
just say that to yourself and move on and make the rest of your game.
So to review real quick, lighting sets mood and evokes culture. There's four different light types common to a lot of 3D game engines and tool sets. Three-point lighting argues that you should think about the task and function of each light and what it's doing for the image composition.
Light globally, do your big lights first and then start doing spot checks for gameplay and critical path.
And also, know when to stop.
fiddling with your lights and move on and make your game and don't just keep fiddling with one light. Thanks for listening. That was me.
Applaud. Bye.
