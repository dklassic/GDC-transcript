I'd like to know how many of you are currently a producer on a video game or VR entertainment?
Okay, lots of people. Awesome. How many of you aren't a producer yet but want to get into production?
Okay, and how many of you are game developers but not producers and you don't want to get into production? All right. And then how many of you are students? Oh, awesome. All right. Thanks a lot.
Okay, John Carmack says that focus is a matter of deciding what things you're not going to do.
All development teams are different, but almost all of them try to do more than is possible.
Either just because you have a lot of great feature ideas, or because your stakeholders, that is your publisher, or your lead designer, or your fans, or you yourself, ask for too much.
I've been a designer and a producer for about 15 years on a lot of different teams.
And I've repeatedly seen that even teams that are great at coming up with a coherent, focused design plan are rarely able to avoid doing work that isn't in that plan.
But the studios that survive are the ones who learn how to say no to features or publisher requirements or additional asks that they know they won't be able to get done.
How many of you have shipped at least one game?
And of those of you who have shipped a game, how many of you have ever shipped a game that had all of your good ideas in it?
Yeah, everybody cuts ideas.
You have to if you're going to ship.
So the question is, how do you make sure that you're cutting the right things at the right time?
Here's what I hope you're gonna get out of this talk.
First of all, some tools for recognizing and preventing feature creeps.
working within constraints, and making the best game that you can with the resources that you have.
Some ways to manage the challenges of your role as a producer, while helping your team finish what you start.
And some examples of successful teams that did stay focused on their game's core features and what they did to make that possible.
And last, just knowledge that you are not alone.
Other game teams have faced the same problems that you're facing right now.
They've solved them and they have shipped amazing games.
OK, this is the Iron Triangle.
How many of you are familiar with this or have seen it before?
Oh, awesome.
OK.
So a lot of game developers are familiar with this as cheap, fast, or good pick two.
But there's another way to look at it.
Each corner of this triangle represents a constraint on one of your resources.
So schedule is a constraint on how much time you have.
Budget is a constraint on how much money you have.
And scope is a constraint on how many features you can put in your game.
Now, time and money are pretty obvious.
They're limited resources, and sometimes they're extremely limited.
There's not much you can do about that most of the time.
But scope is something you definitely can control and do something about.
You can think of the area of the iron triangle as sort of the overall potential quality for your game.
The farther out any of those corners is from the center, the higher quality your game could be.
But the problem is, when you're making a game, your schedule and budget probably look a lot more like this.
So people tend to focus on that third corner, scope, that is your game's feature set or the design vision for your game.
If this is really good, you can make a great game even with very limited time and very limited budget.
A lot of indie developers do that all the time.
Now, a lot of game developers, especially new ones, will try to just add as many features as possible in the belief that it'll make their game better.
They just push that corner out as far as it could possibly go.
They try to add everything that they think of.
But the problem is that if your time and money are limited, which they are, you will not be able to finish all of those features.
It's just a law of physics that you cannot get all that stuff done.
And if you ship a game that has a bunch of unfinished features, your quality will be lower, not higher.
Only finished features count for improving your game's quality.
So that means that you need to make sure that the features you're choosing to spend your limited resources on are the right ones for your game.
So really, to maximize that corner of the triangle, you need to focus, not just add stuff.
Great game development teams have a clear, shared vision of the game design and an infectious enthusiasm for that design.
And this is from the Game Outcomes Project, which was published about a year and a half ago, and you should all look it up.
It's extremely informative about how to make good games.
Paul Tozer and his team surveyed hundreds of game developers, they asked them about their development process, their teamwork, their culture, and then they compared those responses and did statistical analysis comparing what the team said to the success of their finished games.
Now the results are really interesting, some of them are kind of surprising, but their strongest result is not surprising, and that is that teams that had a viable, compelling, clear, and well-communicated shared vision were the most likely to make a successful game.
And that doesn't just mean financially successful or critically successful, it also means games that met or exceeded the team's own expectations for what they were trying to make.
So if you only take one thing away from the talk, it's this, have a clear design vision for your game and make sure that your whole team believes in it.
So let's talk about some ways that you can create that focused vision and how you can communicate it to your team in a way that creates that infectious enthusiasm.
And by the way, Paul Tozer is talking on Thursday, so I recommend that as well.
All right, so if you have a strong design direction for your game, you can distill your design down into one clear, compelling mission statement.
The No One Lives Forever development team had a concise mission statement in place when their publishing contract was signed, and they used it to guide their work throughout the game's development.
And this was their mission statement.
Make the player feel like the hero of a 60s espionage movie.
It has to have a strong narrative.
It must feature a fiercely competent hero and an assortment of despicable villains.
The hero must have access to an impressive arsenal of gadgets worthy of Get Smart, memorable death-defying situations, opportunities for stealth as well as action, a variety of exotic locales.
And finally, every aspect of the presentation must convincingly evoke the era.
And this statement covers a lot of ground, and you can see how this mission statement could help a development team define everything in the game.
Character designs, gun sound effects, level design tools, lighting tech even.
It gives the team really clear guidelines on how to prioritize their work.
And it also gives them a way to determine when to say no to a new idea that does not fit this design vision.
Craig Hubbard, the lead designer, said it was our intention that every feature, task, and ounce of effort would ultimately either support the vision or end up on the cutting room floor.
Remember that limits on what you're able to do will always exist, but you can make sure that you're only spending time on things that directly support what makes your game great.
A mission statement is great if you have a strong design team or director and a clear idea of the game you want to make.
But what if your game idea is more vague?
Pillars are a way to identify and communicate what your game vision is.
Here's what pillars are and how you can use them.
Pillars are major features or selling points or unique aspects of your game that can be a strong foundation to build on.
Think of them as the core features that will make or break your game.
If you execute on them really well, your game will be successful.
So first, before you start development, early as possible, in pre-production at least, or at least very early in development, decide as a team on three pillars for your game.
Three is a good number because it requires some discussion from your whole team and some buy-in to decide on three.
It's also an easy amount to remember and any more than three can tend to split your focus.
Good pillars are actionable, specific, and positive.
They should cover large areas of your project and make it easy for your developers to know whether their work is aligning to your goals.
And pillars are often very similar to a game's unique selling points or marketing points, which makes sense because in a way pillars are how your team markets your game to yourselves.
Like the mission statement, pillars are a way for your team to have context for what they're working on and how it supports the game vision.
Of all the games I've ever worked on, the ones that have strong pillars from the start were the ones where the development teams did their best work and fully understood how that work was supporting the game design.
And the first game I ever worked on was Dungeon Siege.
And though we didn't have a specific enough idea of the design of the game to have a really detailed mission statement, we did know the main selling points of the game we were making.
And that was strategic party-based gameplay, painless loot management, and a giant continuous world with no loading screens.
Now Dungeon Siege 1 shipped 14 years ago, and I still remember these pillars really clearly.
And that's because they were great.
They were what we told the press.
They got players excited.
The development team was excited about making this game.
These clearly illustrate what the game is going to be like to play.
And they gave the team good guidelines for prioritizing their work.
These pillars are vaguer than a full mission statement or a 40-page design doc, but they did leave us a little bit of room to try some different things as we built the game.
And as a level designer on that game, I found these pillars really useful for my work, especially number three, because knowing that we were trying to make a big, continuous fantasy world with no loading screens let me know that, for example, I should prioritize exits and entrances to the dungeons, making those smooth transitions that are seamless, over, say, making the story really great.
Now, when the game came out, it was reviewed and people noticed that the story wasn't very great, but that was because it wasn't one of our priorities.
The continuous world, on the other hand, felt really good to players and they enjoyed that.
So pillars are a really great tool.
You should spend time on them.
You should work on sticking to them.
Because here's an example of what happens when you don't do that.
Now Diablo 3 during its development had seven design pillars.
There are two problems with these.
First of all, some of them are extremely vague.
Especially strong setting and highly replayable.
Neither of those are much more specific than just saying my game is going to be good.
And the thing is, as a developer, that doesn't help me with my day-to-day decision making because I already want to make a good game.
That's already one of my goals.
And as a player, this doesn't really get me excited about the game because I don't really understand what highly replayable or strong setting means.
And second, when Diablo III was released, the game actually didn't do a very good job of expressing the pillars here that are specific and actionable.
Jay Wilson talks about this on his GDC 2013 talk on the game's design.
So when Diablo III came out, The loop progression was actually fairly poorly paced.
The character abilities weren't very well differentiated.
And there's one more thing.
I don't see anything on this list about a real money auction house.
And in fact, it directly conflicts with at least two of these pillars.
But that feature took up a lot of development time and effort.
It wasn't ready when the game launched.
Players didn't particularly like it and it was ultimately shut down.
Now I'm not saying any of this to criticize Diablo 3.
The game was successful by many metrics and it made a ton of money.
But the team did not stay as well focused on their design vision as they wanted to.
And I'm bringing this up because even Blizzard, which is arguably the most successful development studio ever, has trouble with this.
This is really hard.
Creating a solid vision and staying focused on it is very difficult even for experts.
So make sure that you spend a lot of time working on it.
Here's a tool that can make it much more doable, which is voluntarily setting constraints on what you're making.
Limit your focus and your efforts to just what you know will make your game really great.
When the Rocksteady development team started work on Batman Arkham City, they knew that they'd not only need to increase the scope of the game from Batman Arkham Asylum, but also that they'd need to keep the design constrained to something their team could build to the same level of quality.
Here's how Sefton Hill, the game director for the Arkham series, described their decision.
Players will accept whatever rules the developer decides upon as long as those rules are smart and fun and fair.
When we approached the problem of creating an open world in Arkham City, we decided from the outset to create what we called the world's smallest open world game.
We created a rule that made sure that we were going to have to concentrate all our efforts on the things that really mattered to us.
Now, the world's smallest open-world game is a really good constraint.
You can see how this would help the development team make smart decisions.
It impacts things like enemy density and level size, how Batman moves through the world.
Those can all be guided by this rule, and the team can keep coming back to it as what they're trying to make.
It allowed the team to create a world that felt as dense and well-crafted as the levels of Arkham Asylum, but that also felt much broader in scope and that allowed the player to make a lot more decisions.
And very importantly, it empowered the team to say no to ideas that did not fit this voluntary constraint.
Making games is hard enough, so you should create rules which allow you to focus all of your energy on what counts.
If you have strong design rules that your whole team believes in, you can make sure that features that don't support the vision don't get worked on.
So you don't have to spend any of your precious constrained resources, your time and your money on things that don't fit your vision.
This is another pretty well-known example.
This is a list of Chuck Jones' rules for the Roadrunner cartoons.
This gets passed around the internet pretty frequently.
And it's easy to see how this list of rules would make it really easy to say no to ideas that really don't make sense in a Roadrunner cartoon.
Chuck Jones was a strong creative director with a very clear vision and he used these rules to clearly communicate to his team what his design vision was.
And in a way that made it really easy for them to evaluate whether their own work and ideas were a good fit or not.
Okay, so what if you don't even know what your game should be yet?
Maybe you just have a seed of a good idea, or a really vague idea of what direction you want to go, but you know that you'll need a lot of exploration before you're able to find that clear vision.
There are good ways to do that too.
Octodad is a good example of this process.
The team of student developers started with a basic idea for their game, and then they did a lot of prototyping, early playtesting, and major iterations on the design.
Because their game was so unique, They didn't have a lot of other games to compare it to.
The possibility space of what they could build or what could be fun in this type of game was very large.
So especially when you're building something very innovative or that no one's done before, an agile exploration approach to your game can save you a lot of wasted work and it can get you to a good game a lot faster.
So this is how games are traditionally designed.
You start with a design document, spend a bunch of time building that, you get to version 1, and then you realize, unless you're working on a slam dunk sequel, that you need to make some big changes to actually make a good game.
So then you do a lot more work, then you finish version 2, and then you ship it.
But more developers are starting to use a more agile approach.
They have less of a clear target, but just sort of a general idea.
They work toward it, but then earlier they prototype and play test, they iterate, and they change their design a lot more frequently.
This means that you do less work on the game overall, more of that work is spent on the right features, and it means you don't have a clear vision at the start of your project.
And that's okay, as long as you make sure that you leave yourself the time to iterate and that time to find what your vision is and focus in on it.
Now this can be risky, so you need to make sure that creating that core vision to find your game is your top priority at all times, and that you don't get too distracted by cool ideas that don't really get you closer to that finished game.
Once you have your game vision, once you've identified what you're going to be, you're still gonna have plenty of work to do.
Everything from the way Octodad walks to the kitchen challenges to Octodad's manly tentacle mustache was the product of an exhaustive list of possibilities and seldom did we go with our first idea.
Our dedication to exploring every avenue served us well.
There's a post-mortem by the Octodad team up on Game Career Guide and it's a good read.
The Octadad team represents the best and worst of this agile design approach.
They play tested early, iterated on their core idea and shipped something unusual and attention grabbing and fun.
But they also got distracted coming up with a lot more features than they could build.
They played a lot of Minecraft and they ended up cutting really big chunks out of their game.
Okay.
So you have a good design vision for your game or you at least have a plan of how to come up with one.
Now you have to protect that vision by managing your scope.
because sometimes your lead designer is this guy.
I was just playing World of Warcraft when I was struck by a flash of inspiration.
Our game should have epic battles.
Working on the email to send to the rest of the team now.
I think we've all worked with this guy.
You know, his heart is in the right place, but this is why scope management is so important.
Inspiration is everywhere.
Your team is made up of a bunch of smart people who decided to be game developers on purpose.
They're never, ever going to run out of ideas.
Ideas are an infinite resource.
But finishing those ideas, finishing a game that includes some of those ideas, requires resources that are not infinite.
Okay, back to this again, the iron triangle.
Constraints feel really frustrating, especially when you're trying to make something amazing.
We often get into the habit of thinking that if our publisher would just give us more money, or if we just had a little more time, or if our team would just work longer hours, or if your team would just get on board with all of your awesome ideas that you wanna put in.
that your game would just automatically be more awesome.
But that's not actually true.
Big budgets, lots of time, and freedom from creative constraints are seductive traps.
Don't fall into them.
Remember how having a shared, clear design vision was the number one correlating factor to game success?
The number two factor was protecting that vision by managing design risk.
That is, protecting against building the wrong things.
Statistically, the biggest risk to your game is not lack of funding or lack of time or someone else stealing your ideas.
The biggest risk is wasting your precious development resources building the wrong features.
Embracing your constraints will help you guard against that.
Say no to ideas that don't fit your time or your budget constraints or don't fit your game's vision.
Make the iron triangle your ally and use it to protect your game.
The features that you don't do are just as important as the ones you do.
If it's going to take away from the game, then not doing that feature is an important decision.
And this is really hard to believe when you're working on a game.
Often, your vision of what the completed game will be like includes all of your cool ideas and anything else that tends to pop into your head.
But when you have to cut really big features, it's hard to imagine a player seeing the finished project and not noticing those giant holes that were left by your cuts.
But if the rest of the game embodies your clear, focused vision, your players will not see what you had to cut away.
Incomplete or badly implemented features or features that don't really fit your game's design vision do stick out like a sore thumb, but missing features are almost always invisible if the rest of the game is executed well.
As Bruce Lee said, hack away at the unessential.
Now the last big game I worked on was Middle Earth Shadow of Mordor.
This game started and ended with a very strong design vision, but during production a lot of features were added that were later cut.
And I'm not talking minor features.
I'm talking about major game systems, entire levels, really awesome features that some players would have really loved.
And the final game was successful, though, without any of those things that were cut.
Players really loved it.
The nemesis system, where individual enemies that you fight, like, come back with more abilities and more personality, was a big hit with players, and the team was really proud of the game that they shipped.
Now, cutting big features did leave holes, but players, as far as I can tell, didn't even notice them.
I didn't see anyone online saying, oh yeah, I mean, that game was good, but it would have been way better if there were two totally different factions of orcs in a civil war and you had to politically manipulate them.
Or, the combat is pretty cool, but without that house-sized giant beast to climb and parkour around on, it just felt kind of empty.
Like, nobody noticed that those things had been cut, and a lot of work didn't go into finishing those features.
When those features that didn't match the vision were cut, it made the game feel more finished, not less finished.
So how do you decide which features are the right ones to cut?
And which features are the right ones to really focus on and spend time on?
It can help to have some kind of process for making decisions on new features or additions and to make sure that everyone on your team is on board with it.
This is often called change management or scope management.
So let's go over some tools that can help your team have good scope management so you can stay focused on building the right features.
The first way is objective feature ranking.
There are two big problems with new ideas that your team comes up with.
First of all, someone on your team is going to be convinced that no matter how expensive or risky or hard to implement a feature is, it's going to be the best thing in your game.
And the second problem is that person might be right.
You never really know which feature is the one that's going to be the thing that a player falls in love with and tells all of their friends about.
So if you find an objective way to rank your planned features, it can help a lot.
Like the Arkham City team, the Witcher 3 development team knew that their new project was a lot more ambitious than Witcher 1 and 2.
So they used a numerical grading system similar to the one in this table.
Team members voted on the features they liked the best, and the features were evaluated for level of effort to implement.
And then those two numbers were combined into a value score, and they used that to prioritize their backlog and decide what to work on.
Now a lot of teams hear about techniques like this, and they don't even try them because they know that the numbers won't be perfect.
And of course they won't.
If you're trying to rank your features early in pre-production to guess how much a feature will benefit your final game, of course it's not going to be a totally accurate number.
But what's important here is the act of looking as objectively as possible at your ideas and really considering whether they're worth spending time working on.
Assigning an actual number to a feature's value can help you evaluate that more logically, instead of just based on who on your team expresses the strongest emotions.
A second way to help manage scope is to have a feature backlog or icebox.
So if a proposed feature isn't very high value, or if you're just not really sure if it fits your design vision well, you can put it in your backlog, let it sit for a while, don't work on it, and then it's possible that as you work on your other features that you know are high value or essential, you'll realize that you didn't need those features at all and that they don't really fit your game.
It's also possible that you'll realize that they were worth spending time on, you can pull them back out of the backlog and finish them knowing that you have enough time to do so.
Make sure you do this early in development, though.
You're going to get closer to shipping much faster than you think you will.
And it's a lot easier to put something on the back burner if you haven't already put a ton of time into it.
And finally, external feedback is invaluable for scope management.
It's very difficult as a game developer to be as objective about your game as you really need to be.
So as early as you can, do regular play tests with people who aren't on your team.
Do they find your game satisfying?
Do they want to play more of it?
Do they see your vision coming through in what you're building?
Even before you have anything playable, when you explain your game vision or mission statement or pillars to people who aren't on your team, do they get it and are they excited?
Knowing what feedback to take from play testers and what feedback to ignore is a learned skill.
You should be as objective as you can and find some way to measure player feedback with numbers if at all possible.
This is a screenshot from Antichamber.
Alexander Bruce, the creator of Antichamber, tracked the play times of everyone who tried his game demo at conventions over years of iteration.
And he used that numbers as metric.
How long will a player play your game voluntarily before they walk away?
He increased that number from an average of five minutes to over 40 minutes.
And the result is pretty amazing.
Antichamber is also a great example of agile development and iterating until you zero in on your game design.
You should check out Alexander Bruce's GDC 2014 talk.
It was rated best talk of the year and it goes into a lot of his development process.
There was also a great talk yesterday by Ben Kane on designing Keep Talking and Nobody Explodes.
He also talked about using this process.
They eavesdropped on players playing their bomb defusal game at conventions and then they used the data they gathered to iterate on the game and focus in on their core design which was a game about communication between players.
So you should check that talk out as well if you're interested in the more agile exploration approach to game design.
And mostly remember that if you aren't measuring something, it's very hard to improve it, and even if you do improve it, it's hard to know that you did.
So having objective numerical measurements for things in your game that you want to be great will let you know if you're actually succeeding.
Here's another way to do metrics.
So Warner Brothers hired Immersive, which is a firm that studies player behavior, to conduct play tests for Shadow of Mordor and the Arkham games to see if the games were satisfying for players.
Immersive's research has shown that whether someone is having fun is a really poor indicator of whether they'll keep playing your game or if they'll tell their friends about it.
But there are specific needs that players have that they come to your game to try to fulfill.
And the needs that they use and measure are competence.
or the feeling that the player is effective and skilled when playing the game.
Autonomy, the feeling that they're in control of their own decisions.
And relatedness, feeling a strong connection to other players or game characters or the game world.
Troy Skinner and Scott Rigby from Immersive gave a really good talk on their process in 2015.
It's in the GDC vault.
And Jason Vandenberg is giving a talk Thursday afternoon about player motivation that also discusses these metrics.
And I'm not saying that you have to use these exact ones, although they are a very good set, and I personally believe that they were a critical part of why Shadow of Mordor was able to refocus on their design vision.
And they have a solid foundation in psychology outside of games.
If you think about what you find satisfying in your job and your day-to-day work, it's probably a really similar list to this one.
But again, the important thing is to identify something measurable that you want your players to do, and then measure whether you're doing that.
Alexander Bruce wanted players to play antechamber longer.
Warner Brothers wanted players to be drawn to their games in the ways that make people tell their friends how awesome a game is.
If you want your players to really be drawn into your game's story, for example, ask your playtesters to rate on a scale from one to 10 how immersive they think your story is, and then work on it some more, and then ask a new batch of playtesters the same question.
And if that number goes up, you're probably doing something right.
Remember though that having measurable goals requires you to know what you want your game to actually be.
So it always comes back to having that clear, strong design vision for your game.
All right, so many of us have worked or are currently working on free-to-play games that monetize through in-app purchases.
And for those games, you already have sheafs of metrics that you're supposed to maximize.
So you've got player acquisition, engagement, retention, install rate, monetization, how often your players are giving gifts to each other, you know, how often they tweet about your game, like basically anything you can measure about a player.
And that's great, but what's interesting is that this set of metrics is really strongly correlated to this set Which is that if players feel that your game is satisfying their needs they are going to keep coming back to it They are going to tell your friends about it So if you find some way to measure whether you're giving players what they need and make decisions based on those numbers Then you can maximize a lot of metrics at once All right, so you have a solid vision for your game.
Your team is excited about it.
You have a process for deciding which features to work on and which features not to work on.
You have objective numerical measurements that match your design goals.
Your team understands the importance of scope discipline and what the biggest risks to your project are.
But then someone on your team has a cool idea for an awesome design feature, but it doesn't fit your design vision.
So what happens next?
I once interviewed for a producer position at a major game studio, you've probably heard of.
where I kept getting asked the same question.
How do you deal with people hating you when you tell them they can't have something?
And that question really worried me and it indicated to me that the team had some really major problems.
People who are not willing to work within constraints are like a nuclear reactor with no control rods.
They cause a lot of damage and they don't produce anything useful.
Right now on your team, you probably have some people who act as your power source.
They're the ones coming up with the awesome ideas, building prototypes, feeding energy into your team, and staying excited about that cool game that you're building.
And you probably also have some people who act as control rods, the pragmatists who keep an eye on your priorities, your budget, your schedule, and who make sure that everyone is staying focused and working on the right things.
And you need both of those types of people.
They're both vital to your success.
If you're a solo developer, you need to be both of those people, which is really hard.
If you don't have that right balance between passion and pragmatism on your team, and especially if like that team I interviewed with, one or the other of those types of people is seen as a problem, then you have a major fundamental team issue that you need to fix.
Both your optimists and your pragmatists are precious resources.
You have to have both if you're going to ship a great game.
Now a lot of game developers and a lot of producers are afraid of saying no to cool ideas because they don't want to dampen their team's enthusiasm or slow down their momentum.
But enthusiasm is only effective when it's directed towards the right things.
People do their best work when they know that they're working towards a specific and exciting goal.
So give them that goal by having your clear design vision.
Now there are potentially bad consequences for saying no to features.
you might upset somebody, you might accidentally say no to the coolest idea for your game, or you might be overly cautious.
So let's go over some tools you can use when saying no that will minimize those negative effects.
The first is yes, but.
Before you say yes, make sure that the stakeholder fully understands the consequences of what they're asking for.
Remind them of the risk they're adding.
Make sure that they know it's their responsibility.
Remind them of the design vision that you agreed on.
Make sure they understand that design vision, they fully believe in it.
And protect that vision as well as you can.
So for example, yes we can do another demo for E3, but it will delay the next milestone.
Yes if.
Sometimes, well, all the time, your team will get new information that will mean you need to do something different.
Sometimes a major pivot in the project or a minor change or addition.
That will happen for sure.
It's okay when it does.
Yes if is figuring out how to do that necessary new thing.
So yes, we can do another demo for E3 if we cut half of level 14 or yes, we can add that feature if we cut something equally big.
What do you think we should cut from our list of things we agreed on?
This is where having that ranked feature list can come in really handy.
Cooperation, not conflict.
When a stakeholder wants something new added, and you know that it will add risk to the project or that it doesn't fit your design vision, don't let it become you versus them.
That's not productive.
It's not a position you want to be in.
It makes it really easy for people to dismiss you as someone who just hates fun.
But you and the person asking for this new thing both want to make a great game.
You both have the same goal.
So make it you and them versus reality.
Like, the priorities we agreed to at the beginning of the last milestone put this demo last, and now you want to move it up, so what do you want to move it above?
What can we change about our plan to be able to do this new thing that you want that's really important to the game?
What can we do to create a new game within those constraints that exist that we can't change?
And finally, follow your process.
Even if you don't have really strict numerical rankings or metrics, you should have some objective way that will let you be confident that a proposed feature will or won't support your design vision.
You won't have to worry about accidentally cutting the best thing in the game if you have some way to objectively measure what the best thing in your game is.
All right.
None of what I've said up until now will do you any good if the ambitious, optimistic people on your team just will not listen to your pragmatists or if your team's prioritization decisions get overridden by someone higher up the chain of command.
So what happens if, like that team I interviewed with, you have people in authority who just will not take no for an answer?
The best thing you can do is arm yourself with data.
Remember all those metrics that you're gathering on whether players are doing what you want and encountering your game the way you want them to?
Keep those ready at all times.
I know more than one really good producer who just keeps a PowerPoint always updated with the latest metrics that they can pull out and convince whoever needs convincing that their team is making the right decisions.
Make that person who disagrees with you show you in your data where you are wrong.
Be really clear about tradeoffs.
Present a menu of options if you have to.
Make them choose.
If the choice is realistically between feature A and feature B, show them the data that proves that that is a choice that needs to be made and then make them make that choice.
Stand your ground.
If you're working with someone who stubbornly refuses to rein in their ideas or requirements or refuses to cut features, if you are not just as stubborn as they are, your game will not ship.
And find allies on your team who might know more about how to get a specific person to listen or who might have more authority than you and who want to know the real situation and what's really doable for your game.
People who have been around for a while and who have shipped a lot of games often want to hear the truth about what your team is capable of.
And if you've been gathering and keeping track of that data, they'll see you as a valuable resource and they'll want to hear what you have to say.
Now last though, if none of those help, don't force yourself to stay in a situation where you can't be effective.
Haha.
Haha.
This is reality.
If you're going to be beating your head against a wall until you ship a bad game that was the best you could do under the circumstances, don't make yourself go through that.
Game development is hard enough without working under people that make it even harder.
And then remember that saying yes is never free.
It always costs you something.
For one thing, every feature that you add to your game adds some risk, maybe a little or maybe a lot, but always some.
Anything you add to the design requires more assets that need to be created, more gameplay that needs to be tested, more bugs that will have to be fixed later on.
Keep your eyes open to that cost and make sure that your team can handle it, and again, make sure that anyone requesting new additions fully understands that cost.
If you say yes to something, you are agreeing to really believe in it, and you have to make sure that your team believes in it too.
If your publisher mandates you add a My Little Pony champion to your MOBA, you have two options, and neither of them is saying no.
You can say yes and you can half ass it and your players will hate it and you'll hate it and it will be a terrible part of your game.
Or you can say yes and you can believe in it and you can make the best damn My Little Pony champion you can possibly make.
A great example again from Shadow of Mordor.
The game's publisher, like they do, required regular demos for conventions and for press.
And instead of reluctantly saying yes and viewing those demos as yet another unreasonable publisher request or demand and half-assing those demos, the team used those demos as a tool to make the game more polished and to get a better understanding of how long it took them to finish a feature.
They took something that should have been a burden, but they made it something that benefited them and that they actually believed in doing.
Ideally, anything you say yes to should add value to your game.
If it doesn't, see if you can figure out some way to get some value out of it if you have to do it anyway.
And remember that whenever you say yes or no to an idea from someone, you're setting a precedent for how much of a voice or how much authority that person has.
Anytime you say yes to someone, you're making it harder to say no the next time.
And anytime you say no to someone, you're making it easier to say no in the future.
The people involved in your game inherently have different amounts of authority.
If your publisher controls the budget, they're going to have more authority when they ask for something than, say, your audio designer.
But that doesn't mean their ideas are necessarily better or a better fit for your game.
This is another reason why it's important to have both a clearly defined design vision, but also a way to objectively rank features.
If you don't have those things, you're in danger of getting into the habit of just saying yes to ideas coming from people with more authority, regardless of how good for your game those ideas actually are.
And last, remember that any time you say yes to something, you're saying no to something else.
You just might not know what it is yet.
Because your time and money are limited.
if you spend them on something, that inherently means that you can't spend them on something else.
And especially when you start playtesting your game and when you start coming in towards the finish line, you're going to find things that can make your game a lot better, that if you hadn't spent time on low-value features early on, you might have time to really make great.
All right, in conclusion, making games is hard, making good games is nearly impossible.
A strong, clear vision is vital for a good game.
Your team needs to believe in and fully understand what that vision is.
You need to protect your design vision by saying no.
If you can't say no, you can't control your scope and you can't control your risk.
And constraints are your ally, not your enemy.
Make friends with the iron triangle and use it to work for you.
Thanks.
There's a There's my e‑mail address. If you want the slides, I will send them to you. Feedback is welcome. My Twitter. And then some resources. So the game outcomes project, if you were a producer or a designer, you should definitely read that. There's a lot of really great post mortems up on Gamma Sutra, which is where I got most of the case studies in this talk.
The GDC vault has a lot of great talks as well, especially, again, the talk on anti‑chamber in 2014. Books, the mythical man month is a classic old lady book.
30, 40‑year‑old book on project management, but it has a lot of good wisdom in it. And then I have been a project manager for nine years and I have learned some stubbornness.
So questions? I think they are going to want you to line up at the mics.
Hello?
Hi.
Hi, I'm Linda.
Great talk.
I'm wondering about sequels.
You said no one would miss the features you cut.
But what if they had been in a previous game?
Would you have cut them anyway?
Oh, you mean if you, so the question is sequels, if a feature had been in a previous game, can you cut it for a sequel, is that what you're asking?
Yeah.
That's a good question.
I've worked on a few sequels and usually they're easier because it's easier to zero in on what you want to add to the game, but I've also worked on some that were sort of floundering messes.
I don't know, I'm going to say it depends, but again, I think it's just as important for a sequel to have a really clear design vision of what it is.
And whether you're sort of incrementally adding things to the previous game or whether you're doing something completely different And and there have been really good sequels that have done each of those things where the sequel is pretty different from the first Game and still really good or whether it was sort of the first game plus a few features But I think it really again just comes back to like having a really clear idea of what you want to make and then Validating it by having people test it or at least you know like like the destiny team Just showed people their concept art really early on and they said does this look cool to you?
You know or like they would they would test players potential players on how they felt about the concept art so If you have the original game and players that are familiar with it and you have a few ideas for what you want to add to it or take away from it, I think it would be easier to validate even than just a brand new game idea.
Thank you.
Hi, my name is Franco.
The way our team works is we're a resource for different business units and we're constantly butting our heads up against people who think they know more than they should.
Like you're a shared services group?
Yeah, we're just a services group within the company.
So have you ever had to cave and did it ever actually turn out to be a good thing?
Well, let's see.
So the question is have you ever caved and had that turn out to be a good thing?
Well, first of all, shared services, I keep saying game development is really hard, and I know you guys all know that.
Shared services is five times as hard as that.
I've actually never seen a shared services group that worked really well.
And I think because when you're making a game, people assume that game developers can just do way more than they can actually do because they don't think about all those hidden costs.
And with shared services, it's much worse because people are like, oh, I have five artists.
I can totally use all five of them.
They don't realize that every other team is thinking the same thing.
So I think, like, my opinion is that with shared services you have to be even more anal about really ranking what you're going to do and having a queue and being able to say no and telling someone, you know what, you're not going to get that for two months because we have all these other things above it in the queue.
But I'm definitely familiar with teams where the stakeholders just won't listen to that.
And then I think it comes back to, like, what happens if they don't listen to you.
If they don't listen to you when you say, like, there is no possible way within the laws of physics that I can do what you're asking.
then at that point there's honestly not a lot you can do.
Sorry.
It's like, I think that's why shared services is so hard is because people are just really reluctant to agree that, you know, five people can't do 25 people's worth of work.
For the most part, we try to, like your slide said, show the data.
Just really stick to that.
But almost half the time it doesn't work so much.
Thank you.
And I think there's this tendency in game development where people are like, oh, data.
We make entertainment.
We make games.
Data is for people who make tax software.
It's like, no, data is data.
And I think the more data you can have and show, no, this is how long it takes us to make an asset.
We've done it 50 times.
This is time number 51.
I know it takes us this long.
Some people will be reluctant to listen to that.
If you can make it obvious, there will be some people on your team that will appreciate that.
Great.
Thank you.
Hi there.
So I have a question.
We have this really rock star programmer.
He's unbelievably good.
Keeps our stuff on time.
One of the problems we have, though, is that ‑‑ we work in an environment where our customers are just down the hallway from us and they will come down and say, hey, I thought about this thing, can you do that? Oh, yeah, sure, not a problem. And then we have all these added requirements that have been promised.
And unfortunately it's a military environment so you can't just get rid of them.
So I think that's something that happens. So the question is we have a really rock star program where people will swing by his desk and go, hey, can you do this thing? And he'll be sure I can do that thing and then he has way too much on his plate.
The problem is the question they're asking and the answer he's giving are not aligned to each other.
What they're asking is, hey, can you do this thing?
Yeah, of course he can do that thing.
He's a genius.
He's really good at stuff.
But what they should be asking and the question you should be answering is, can you do that thing and also all the other stuff you had to do?
Can you do that thing for me right now and not disrupt any of the other stuff on your list?
The answer to that is no.
That's impossible.
You can either sort of put someone in between him, which I've been sort of the buffer of come to me first, and then I'm a little better at answering the question of no, we can't do that and all the other stuff, which is really the question you should have been asking me.
So a lot of times it's sort of like reframing the question back to them.
If they say, like, can you do this thing, you answer, no, we can't do that thing and all the other stuff on his list.
Look at his list.
Here's the data.
It's not always possible to do, but I think that's the way I've found that kind of works, is just to remind them, this is the question you should be asking me, is can we do all the other stuff we already need to do, and this thing?
And the answer is no.
Perfect, thank you.
Yeah.
Alright, so this is about pillars.
About what, sorry?
The pillars.
Yeah, yeah.
So basically, you spend a lot of time defining the pillars.
You are in a safe house, you are very sure about them, and they're gonna guide you for, I don't know, nine, 12 months, two years, whatever.
What as a producer, not as a designer, but as a producer will do, will you do, if you discover after six months that one of the pillars was wrong, or unattainable?
Yeah.
That is terrible when that happens.
I worked on a game where that happened.
We had three pillars and one of them was not fun and we couldn't make it fun and it was terrible and we basically shipped half of a game and that's really bad.
So I think really the only thing we could have done in that situation was ‑‑ oh, sorry.
The question is what happens if you have three pillars and it turns out one of them is bad and you have to get rid of it.
I mean, ideally we would have had some kind of backup earlier, and also ideally we would have done more playtesting earlier to validate whether we could make this thing work.
And the thing is it was really innovative, so we didn't ‑‑ we kind of weren't able to playtest it until it was mostly done, which is a situation that you should try to avoid.
Sometimes you get partway through development and one of your pillars doesn't work and you have to cut a huge chunk out of your game.
At that point, I think it's either double down on the other stuff or pull something out of your backlog that can help.
Sometimes cuts really hurt and sometimes they make your game way worse.
That's a terrible situation.
Sorry, I don't have a magic answer for that, but it happens and it's terrible.
Thanks.
Hello. I've got a question. Honestly, it's going to be very difficult to answer probably.
developers, artists, engineers, they like to tinker, they like to continue working on things. At what point with a feature do you really get that definition of done that you decide, you know, this is done, you know, even if it's this buggy or this incomplete, it fits the vision that we're looking for and let's move on or, you know, I need it to continue to get to that point. That's my definition of done. So I'm going to cut these other features.
Yeah, how do you define done and how do you like pry something out of someone's hands when they really just want to make it perfect forever?
Like I always think of there's sort of two types of people on a development team There's artists and there's crafts people and artists are the types of people that will iterate on like a character's hair for like two years If you let them, you know, they would do that and and you need those people But then the craftsmen are the people who are like, this is good enough, let's ship it.
And I'm definitely that second one.
I'm like, this is great, it looks great to me, let's ship it.
Which really frustrates the artist.
So in a way it's like, come to some agreement on how you can mostly satisfy both of those people.
I mean, if someone's in game development, nobody gets paid if your game doesn't ship.
So they all know that you have to finish at some point.
But I know it can be really hard.
I don't have a great answer beyond just sort of talk about it and make sure that everyone understands that that's the situation.
I recognize that you were the kind of person who could fiddle with that thing for the rest of eternity.
And that's cool that you're like that, because that's a really good resource for us.
But we only have this much time.
We really need to let go of it.
And just kind of like make it clear to them why that's happening and not just that you're like there to ruin their life, if that makes sense.
Yeah.
Okay.
Thank you.
Yeah.
Similar to his question, he was talking about done.
And you mentioned exploration.
I think any experienced developer knows you need a level of exploration.
But it's the hardest to budget and schedule exploration.
So when you have a design feature, it's pretty easy to get with a team and say, how long does it take to make it?
So what's your experience and processes you've used to schedule and budget for that exploration?
And say when it's over and it's time to turn into production.
I think, let's see.
Most of the games I've worked on.
There's different types of games.
There's ones where it's like this game has to ship by Christmas to match the movie and therefore when you walk back from that it's like pre-production has to stop in September or whatever.
And then there's the kinds of games where especially indies or like right now I'm in research and we don't really have deadlines to ship stuff.
And then it's just sort of like...
recognizing ‑‑ it's kind of like the previous question of when do you rip things out of people's hands and say this is done now. It's just sort of self‑imposed deadlines and constraints and goals that aren't necessarily like set in stone and imposed from the outside and that's where it requires some discipline from your team to say, okay, we're going to playtest for a while and then we're going to stop. I mean, unless you're Valve. Valve has so much money they don't ever have to stop playtesting. They can iterate forever and ever and never ship anything. And that's a great situation to be in.
But I think recognizing that if you're not in that situation and saying, no, we're going to have to ship at some point.
I know that Spry Fox does a lot of calculations on how much money do they have and when do they have to ship in order to make some money and move on to the next game.
So when you don't have those external pressure of deadlines, you have to create it for yourself.
Hi. Good talk.
Oh, thanks.
So I'm producing a master's thesis project, and since it is one student's project and there are other students working on it, there's no budget involved, and there's a clear hierarchy of where the decisions should come from.
So I think that has created some problems in...
not only creating a cohesive vision between the group but also sort of deciding what level of autonomy the artists and the sound designers and everybody has. So I was just wondering if there was a non‑data‑based way to sort of reconcile that.
Okay. So, yeah. So for a student project where there isn't a clear vision and there isn't a clear hierarchy but there is someone who has more authority than everyone else.
I think what might help in that situation is to have a lot of discussions about what the game is.
I've been on teams where it was sort of fluid like that and there wasn't...
a lot of clarity and sometimes just sitting down and talking about, okay, what is this game and asking them to explain it to you and then kind of zeroing in on, oh, okay, it sounds like it's this and this and this.
You can kind of find pillars that way maybe.
And then once you have those pillars and again, sort of input from everyone working on it, at least some input from everyone working on it.
And you'll always have an artist who's like, but I want to make Final Fantasy.
and you're like, well, that's not what we're making.
It's like, but that's what I want to make.
It's like, well, here's the pillar.
You know, like sometimes you kind of have to override people.
But having some kind of community, like, OK, what is this game discussion kind of regularly can help.
Like you don't want to end up in a rabbit hole where you're just constantly doing that forever.
But if you feel like you're making progress, I think that can be kind of useful.
And just sort of like as a producer coming to it as a questioner and being like, OK, tell me what this game is.
You know, what am I doing?
Like, what are we doing?
and being a sort of objective questioner, trying to get them to define what it is.
What happens if you've asked and they just sort of don't really come up with an answer to collectively?
So sometimes if you've asked and they don't come up with an answer, sometimes you can kind of play dumb and be like, here's what I think the pillars are.
Show me where they're wrong.
And I think when you show someone something that doesn't match what they're thinking, it's sometimes a lot easier for them to point and go, oh, wait, that's wrong.
It should be this other thing.
And just kind of like write things down or say things out loud and have them correct you until they find out what that is.
As a producer, not having a lot of ego and just being willing to say things that are not true or that are wrong out loud.
and be like, oh, I think it's this.
And they're like, no, you're an idiot.
It's actually this other thing.
You know, oh, good.
You know, like actually, I got you to say what it was, you know, and not exactly like that.
But just being willing to like say things out loud and tell people, correct you to the right thing can be useful.
Awesome, thank you.
Good luck.
Hi, I'm a localization producer.
Oh, okay.
So, I often run into situations where I'm kind of the naysayer, where I have to convince the original content and the main office to cut features that are not culturally relevant to Western markets.
I just was wondering how often do you have to come up against...
going against the vision of maybe the, I guess, the powers that be, but still retaining, like, without getting them so angry at you, because you're always the naysayer. I have trouble dealing with, what is it, being, I guess, the negative person the entire time.
The dream killer, I guess.
Yeah, yeah. So localization, I think localization, UI, and things like accessibility or publisher cert requirements are all like that, where it's like, okay, like, these are things that we really have to do. And they're not fun things. They're not fun cool things. So no one's really interested in them. They put them off until the very last possible moment. And then they're like, oh, crap, we have to do all this stuff.
So, again, I think just really sort of presenting your data really objectively and being like, here's that list of things. I worked with a certification producer who was really good at saying here's the list of cert requirements. We hate those. We don't want to do any of those things. Well, here's the list. Here's where we're not meeting it and presenting it like over and over and over.
And people did have a tendency to be like, oh, she hates fun and she doesn't like our game.
But of course she did.
She wanted it to pass certs so we could ship it and make money.
And I think just sort of maybe reminding people of the overall context of like, hey, you're the one who wanted us to localize into Dutch.
I didn't come up with that idea.
It's tough though.
I think especially those sort of end finishing polishing things that no one's really interested in are really, localization is super hard.
Yeah, I think the problem that I run into mostly is kind of like I don't have a lot of data to back it up because a lot of it is cultural context and you can't really quantify cultural context.
So yeah.
I was just, yeah.
And even like articles or best practices or guidelines.
And yeah, sometimes those don't really exist.
But any kind of backup you can find of like this was written down on the Internet that like we really shouldn't do this in this country.
But yeah, that's a tough and thankless job.
Cool.
Thank you very much.
Okay. I think we're ‑‑ are we out of time? Yep. All right. I'll run out in the hallway, though, for overflow if anyone else wants to talk. Thanks a lot again, everybody.
