This is Puzzle Game Magic Secrets.
So let's talk about puzzle games.
First, who am I?
I am Brett Taylor.
That is my name and my identity.
I got my master's degree in cognitive studies and education from Columbia.
And I've been developing games for, actually, I guess it's over 10 years at this point.
I founded My Dog Zorro, my company, in 2015.
And my company, My Dog Zorro, made LineLight.
So let's talk about Lionlight briefly.
Because this is, actually, quick show of hands.
Who's familiar with Lionlight?
OK, all right, how about that?
All right, cool.
All right, so Lionlight, it's My Dog Zorro's first release.
It's a puzzle game, not surprisingly.
And we released it in 2017 for PlayStation 4, Steam, iOS, and Android.
In 2017 and 2018, after taxes, it earned about $100,000.
So you can do the math of the annual salary of that.
It also did pretty well review-wise.
There's over 10,000 Google Play reviews, 4.9 stars, et cetera, et cetera.
So here's the trailer so you get an idea of the mechanics if you're not familiar.
All right, so that's the LionLight.
Okay, so overview for this talk.
It's broken up into four main parts.
First, we'll talk about working memory.
Then we'll get into some puzzle characteristics like vocabulary for puzzles.
So we can have better conversations about them.
Then the bulk of the talk is the lessons that I learned from making Limelight.
And there were many lessons.
Then we'll end with how I make puzzles, so some actionable takeaways, actionable strategies, like toolboxes strategies that you can use and take home to make your own puzzles and stuff.
All right.
But before we get started, this talk prioritizes fun and non-random puzzle games.
So you might not want to make a game that is fun for specific reasons.
If it's like an artistic thing, et cetera, this talk sways towards that.
I just figured I'd mention that.
And you can also subvert these rules for alternate effects.
So if you want to intentionally disorient the player for some reason, you could do the opposite of what some of these rules that I say are.
And also this talk, I cut, I think, like 300% of it.
There's so much that I cut from this.
And this is just scratching the surface.
There's a lot.
So yeah, all right.
OK.
Definition, what makes a puzzle fun?
So in this talk, I define fun as any time the player gets to exhibit mastery skill or wit.
This is a theme I'll kind of come back to.
Also, it's a definition of mechanics.
When I say mechanics, things like boxes that you can push and pull, enemies, et cetera, et cetera, things like that.
So most game developers, when they hear the word mechanic, the first thing they think of is this.
But that's erroneous.
No, no, no.
Today in this talk, we're thinking about this on the right.
Yeah.
All right.
All right, part one, working memory.
Working memory.
Human RAM, this slide used to be much larger.
That's basically it.
That's the fastest way I can explain it to people.
It's the processing power that you have to hold information in your head and use that information to solve puzzles and do other things in your life.
So the way that I sort of, in this talk.
The way I picture it is it's, this is like an abstract metaphor of, if your working memory were a bar from 0 to 100%.
So things that you do occupy your working memory.
So let's say if you're solving a puzzle, you're taking up a certain amount, you're talking to a friend, and you're also eating, each of these things eats into your working memory.
So let's say that, you know, if you're juggling or something, it'll be harder to do math problems, because the juggling activity is occupying your working memory.
And this has big implications in what players are doing in a puzzle game.
So who here is familiar with flow?
I'll just say flow.
OK, so most people.
Yeah, so when I found this analogy, I was really excited about this.
So with flow, flow is basically, for those of you who don't know or aren't that familiar, if the player has, like, if the level is too challenging.
and the player is not out of skill, then it's overwhelming.
And on the opposite side, if they're too skillful and the level is too boring, then it's boring.
And that's not fun.
So working memory-wise, we actually kind of like, there's kind of a sweet spot to keep a player in terms of like how much stuff they're juggling in their head at any given time.
And it's sort of like, it's not quite in the middle because the human brain can hold a lot and too much is pretty uncomfortable.
But like there's a sweet spot sort of.
I don't know, in that range.
Again, this is super metaphorical.
This is not literally this.
Obviously, our brains don't work like this.
But it's really useful, at least for me, to think of it like this.
So how much working memory am I overloading or am I requiring from my players?
All right.
After repetition, concepts or ideas in puzzles, they take up less space in a player's working memory.
So let's say that rule A initially will take up 40%.
Rule B takes up another amount.
And rule C takes up whatever, 20%.
As the player gains experience over time, each of these rules takes up less and less space in the player's working memory.
And then there's all this freedom space, which naturally is filled with new mechanics.
That's just sort of how games work.
So here's a puzzle from The Witness.
For a beginner who is unfamiliar with the mechanics of this, this would be, let's say, I mean, this is metaphorical, again.
But yeah, this is overwhelming for that player.
There's too much going on.
They don't have enough experience yet.
But for somebody who has more experience and has played enough of the game, they can visually parse through each of these components, takes up less space in that player's working memory.
So for an expert, this is much easier to solve.
And where they're stimulated working memory wise is in a much more manageable zone.
And that's sort of the sweet spot that keeps them, that's the spot that we, it's the most fun as a player to be in.
All right.
So if an expert, let's say that the purple rule and the yellow rule only take up that much space, but for a novice it takes up this much space, what is all of this extra space?
Great question.
I'm glad you asked.
This is what I consider possibility space.
So possibility space, it's reduced as the player's experience grows, as I showed in previous slides.
So here's an example from The Witness.
You don't have to know the mechanics of this, but an expert who looks at this knows that they must draw a line through the center of this.
It has to be horizontal.
That's the only option that they have.
But for a beginner who's not quite as well versed with the mechanics of the game, might think that this is possible.
that extra possibility takes up a little bit more space in their working memory.
This could also be possible, and this, and this, and this, and this, and that, and et cetera.
So all of these things add up to the novice's possibility space.
So something that is relatively trivial for an expert, for a novice, it actually would take up much more working memory because they haven't developed, they haven't streamlined the neural pathways that would make them visually parsing it and understanding it more efficient.
And the expert is better at it.
Let me drink some water.
All right.
Moving on, puzzle characteristics.
Here's some traits of puzzles.
So first off, Braid doesn't equal Sudoku.
Revolutionary statement, I know.
I know, everybody's very antsy, they want to find out.
I'll get to it, please.
All right, so the way, so I sort of put this on a spectrum of handcrafted puzzles versus procedural puzzles.
Now, there are other types of puzzles and tons of other characteristics and components of puzzles.
But the most popular spectrum that I see that is easiest to categorize most of the puzzle games that I see and that are on the market is sort of like somewhere in the handcrafted and procedural realms.
So handcrafted puzzles, there's a finite possible amount of puzzles because they're handcrafted.
The player is rarely repeating skills.
It's much more novel.
Like, each solution is more novel and surprising.
That's why we've got these aha moments that we strive for and talk about.
And the content is authored, which is one of the most important parts for the developer, because you are, like, hand crafting each one.
And it's a much more fresh and varied experience for the player.
That's sort of why they're playing the game, is to see what's, you know, well, one of the reasons is, like, what on earth will happen next?
Procedural, on the other hand, is basically the opposite.
There are infinitely possible puzzles, for the most part.
The player is constantly repeating skills.
So if you can picture playing Sudoku, you're not learning new skills.
There's a finite amount of Sudoku skills and strategies that any one player can have.
And each solution is not that novel, relatively speaking.
I've never gone to my roommate and been like, Oh, I had this Sudoku board, and look at the solution.
It doesn't really happen.
And the puzzles are born from the system.
So that's, from the designer's perspective, you can theoretically make a random generator that would make these types of puzzles.
I've worked on lots of puzzles on both ends of the spectrum and in between.
And for the player, it's a much more predictable experience.
Like if somebody's playing Sudoku or a game like that, that's generally, it's like part of a routine, like maybe a daily routine.
When I played Sudoku.
For a while, I'm playing on the subway, on my way to work, et cetera, because I wanted that specific experience.
So these are just two different types of experiences.
And then there's games like Rush Hour also, and Flow on the App Store.
Those are both great games, or on the procedural end.
Then there's tons of stuff in between.
The Witness was kind of tricky to categorize, because it is, by its definition, it's handcrafted.
But the system itself lends itself to procedural puzzles.
There are points in the game where there are just randomly randomly generated levels.
This talk leans towards handcrafted puzzles, or at least, we'll talk a little bit more about that.
Because Limelight is in the handcrafted side of it.
Noise.
So if you take anything away from this talk, this is like the most important thing.
If I were to give you anything, this would be it.
Noise, the way that I define it is it's anything that occupies the player's working memory, but it doesn't contribute to the puzzle.
Noise steals working memory from the player.
So, briefly, here's a mechanic from LineLight.
These are called flippers and moving streets.
So you move left and right on that little hamburger thing and the street moves up and down.
So here's a level in Lion Lights that is all...
like this level is mostly noise.
So the solution to it, the solution to this puzzle is get three flippers in the right setting to complete a path.
That's like... if I were to describe what the solution is, that's the solution.
But because of all the noise, this level is basically like a big...
it's sort of like a big slipknot.
If I pull the slipknot apart, this is all the puzzle really is.
You just have to hit these two flippers, and then you've completed the path.
But I've added a lot of noise to sort of obfuscate that as the obvious solution.
And this is really in the game.
And I use noise pretty sparingly, but it's a good example of how I use it.
All right.
So here's an example from The Witness.
So in this example, the player starts here.
They want to draw a path to the end.
They can either end on the top right or the bottom right.
And that's it, just draw a path from start to finish.
All of these gaps in here, that is just noise.
Those could be replaced with ink blots because you can't actually pass all the way through them.
They're there to make it more difficult to visually parse that puzzle.
Photoshopped out, this is what it actually looks like, and it's so much easier to see what the solutions would be because there's much less noise.
And mazes in themselves are just like giant slip knots in the first place.
But anyway.
So on the left, yeah, let's say that it takes up, theoretically, this much player's working memory.
That noise occupies a lot of extra space. But on the right, without it, it's pretty trivial.
You can see how to get to the end much more easily.
Here's another mechanic from LineLight. These are called cover-ups.
If all of them are being touched, then the gate opens up.
Here is an example from Lion Light.
This is a level that nobody solves accidentally because there is noise in this level.
In this example, I use noise to prevent the player from accidentally solving the level.
The solution is for the player to back up into these two cover-ups to light them up because they can only control the head of the character.
I guess I will just challenge you folks.
Where could you see the noise?
The solution is to back up into the top area.
here to unlock these so you can continue and get those.
Any idea where the noise might be?
When you're countering the angle from the left as opposed to the right.
I don't fully understand.
Oh, so the crosshair.
Uh-huh, this one here?
Yeah, maybe if you haven't played the game.
Yeah, I mean, it's tough if you haven't played the game.
So the answer is, I mean, if you're not as familiar with the game, it's a bit trickier.
But the noise is right here. So it's this extra loop right there.
Yeah, celebrating that you got that. Very well done.
So without that noise, so people basically would go down, because there's only a few things to do. Like, that's a dead end, why would I go there?
They would go down, and then they would back up, and the puzzle would be solved.
And they didn't realize that they had solved it, or what they had done to solve it.
And that completely subverted the point of the puzzle.
because I want them to know what they're doing.
Unless you want to...
Actually, that would be interesting if you made a puzzle game and the whole thing was just the player accidentally solving each really interesting puzzle.
But I don't think that we're here to do that.
So anyway, I added noise intentionally here to prevent that.
So here's an example from inside.
So here, in this example, there is a crate here that you can push to the right.
The goal is to get up this chain here.
The player wants to continue up by climbing that chain.
When you push the crate to the right, or sorry, when you pull the crate to the left, the chain goes up, and when you push the crate to the right, the chain comes down.
So this, like that.
So if you push it all the way to the right, the chain goes down, but if you push it to the left, the chain goes up.
I'll give you a moment to think about where the noise here might be.
You got it.
It's the fact that you can jump on this platform here.
It's a red herring.
This does not, it's not part of the solution to the puzzle.
Yeah, you got it?
Excellent.
I appreciate you.
Yeah, yeah.
So it's basically, it's a red herring.
It's not involved in the solution.
It does not have to be a part of the puzzle.
It does contribute to the experience, but it's actually not part of the solution.
And by that definition, it is noise.
So noise makes puzzles artificially harder. I sort of like to think of it Another metaphor. It's a sort of it's it's like the breading in around general sows chicken Like a little bit is okay, but if it's just all breading if it's all noise And there's no meat. It's like where's the puzzle? You know I like that metaphor And it does it requires diligence to identify it like I've played so many games that have a lot of noise in them and So please take this away and look out for your noise and remove it.
Yeah, if you're not aware of it, noise will pollute your game.
I've played so many games that they have noise unintentionally.
The developer will understand that it's making the puzzle more difficult, but the nuance of having it be because it is not contributing to the puzzle, they might be missing out on that.
And that is not a puzzle-solving experience as much as it is a seeing through noise experience, which is different from puzzle-solving.
And it can be useful, as I mentioned, if used intentionally by deterring accidental solving.
And also using skill to see through it, like in solving a maze or something like that, or in a bullet hell sort of game, that's satisfying.
All right.
Seven lessons that I learned from Lionlight.
This is the bulk of the talk.
You ready?
Let's strap in.
All right, lesson number one, simplify.
Less noise leads to cleaner and tighter puzzles.
So, what do we want?
Cleaner, tighter puzzles.
How do we get it?
Simplify.
Exactly.
Can you repeat what was said?
Simplify.
Thank you.
Good call.
Yeah, so to unpack that, the method that I do is describe the solution of the puzzle and remove anything you didn't mention.
I'll let that hang.
Hashtag cut the noise.
This gets easier with practice.
I got way better at this as I was developing LineLight.
Like, the early levels that I made, which I thought were so cool, I'm just ashamed of at this point, but yeah, I mean, it takes practice.
Anyway, so, yeah, as I was developing Lionlight, I hacked every level down to the bone until there was really nothing left to remove.
There was no further extraneous elements.
And then I continued to remove extraneous elements because there were still some.
Like I would make things symmetrical, maybe when they weren't, I would streamline this, streamline that, and it's very rewarding, actually.
Yeah, and looking back, as I was making this talk, I was like, yeah, I simplified it so much.
I could have simplified it so much more.
So my advice is vet every level at least two times.
Check are these components necessary?
If your goal is to remove noise, which I would say it's a good practice.
It's a healthy practice so that noise does not pollute your game.
I vetted each of LineLight's levels at least four times.
Some of them I did up to a dozen times.
I would continuously just constantly mow in the lawn.
And if it doesn't belong, ultimately, it might just be worth cutting, which I did a lot in LineLight's levels.
And it's also, it's just really satisfying to, like, I got kind of addicted to, like, just, like, finding, it's, it was like, I would identify, like, oh, here's noise, and then I would, like, remove it out, and it's just, yeah, it's good, it's fun.
So my advice is, if you do want noise, try to start with none, and then add it from there, so that way you're at least doing it mindfully.
Because, you know, it can be used for good. It's not all bad.
It can enhance the experience, prevent accidental solving, and change up the pace of the game, and so on.
So here's an example on the left. This is what the level used to look like.
And I thought that this was super elegant. I was like, what else, what's there left to remove?
On the right, it turns out that there were a bunch of things I could remove.
It's the same solution. So describing the solution, they're identical between these two.
Here's another one. So there's about as many components on the left as there are on the right, but the right...
the level on the right is symmetrical, which is... it's much more pleasing to look at.
It's much prettier, and it's also easier to visually parse.
So that's simplified it there.
The one on the left here, I was like, this game is amazing.
I was super excited, at least, about this mechanic that I discovered when I was working on it.
But the solution ultimately is just on the right.
It's so simple.
And it took many iterations.
Eventually, I ended up with the level on the right, which is fundamentally what the level on the left is trying to be.
But it's obfuscated with a lot of extra components and clutter, which it doesn't have to be.
The level on the left is General Tso's chicken with a ton of breading and the one on the right is mostly just chicken Yeah, I like the metaphor. I don't know what Lesson two cut pointless levels this kind of ties into the previous they are there accepted So for each level ask what is the purpose of this level and if you can't answer that question it is a road to mediocrity Here's some possible purposes of a level.
Maybe it teaches something.
It could be to reinforce a skill, so some redundancy is okay.
I do that a little bit in Line Light.
There's unique identifiable moments, so it's just something that a player hasn't yet experienced.
Or it's maybe a palate cleanser or just to break up pacing.
There are some levels in Line Light, intentionally after a bunch of hard ones where it's just a big open space just to let people exhale.
I discovered that those were really important to have in there.
Also, here's a side note on the term mediocrity, because I have to say this.
You are good enough always, I promise.
That's a vow from me.
And if you don't believe it, come talk to me afterward and we'll chat a bit.
Don't be afraid of not being good enough and make things anyway.
Don't be afraid of making things that are mediocre, please.
And also, every expert has to pass through mediocrity in the first place.
So yeah, don't let that stop you from creating things.
All right, back to pointless levels.
It is not easy to admit a level is pointless, especially if you have nothing better to replace it, which is how I dealt with LineLight in the beginning because I was like these levels aren't that great, but there's nothing better to replace them with so I was like But over time I got better at making them So my advice is that every level, what do we not want?
Freeloaders, yeah.
All right, so here's an example of a level that I cut.
So this level I cut because it was not educational, interesting, fun, or unique.
Most importantly, it was not fun.
It was preceded by these two levels.
So this one on the top left explores an idea, the one on the bottom left unpacks that idea, brings it a little bit further, and then the natural trajectory would be the third level.
So I take one concept, I take the next point in that, and then what's the next logical progression of that?
of that level, and it was this, but it was just not fun.
It was redundant.
So I ended up cutting it.
I love water.
It's so much fun.
All right, lesson number three, you were the expert player, controls-wise.
So I had some complaints about Lionlight, the timing being too hard.
Even when they had a full 1 and 1 1⁄2 second window to do an action.
And I'm like, come on, it's like the barn door is all the way open.
And they're like, hey, help me into this door.
I'm like, it's right there.
However, knowing the solution and not being able to execute it is not a fun experience.
Yeah, so.
If people are complaining, listen to them.
My strategy is to play through levels with your feet, with your non-dominant foot.
Try that out.
And if you can't solve it with your feet, make it easier.
This is specifically for puzzle games.
Obviously, for action games, this does not apply.
But if it's a game where the promise is that people, if they can figure it out, that they should be able to execute it, play with your feet.
Foot play testing.
I feel like there's a clever term there.
I'll come up with it after the talk.
All right, new mechanic from Lionlight, lock steps.
They move when you move, as you move.
Oh yeah.
So, here's me, you know, in 2016, thinking I've logged hundreds of hours playing this game, so I'm pretty sure I know what the average player can handle, which was erroneous.
The lesson that I learned from this is that if people are still complaining, because I made changes, I made it easier, but people were still complaining, and I thought to myself, I made the changes already, you know, I've catered to the audience, but people were still complaining.
They're right, they're still right.
Continue to change it.
It's not them, ultimately, it is you, it's the game.
Serve your audience.
It depends, like, if your goal is to serve your audience, if you're making a game for your players, don't lose sight of that priority.
Lesson number four, keep action and puzzles.
separate.
This applies specifically for single solution puzzles.
So things where you're building a solution, or if it's like a physics-based Rube Goldberg, maybe, solution that it's inherent in the actual design of it.
But for single solution puzzles or few solution puzzles, this is very important.
So action or puzzles is great.
Action and puzzles is that frowny face.
So you wouldn't tune in ice cream on the same plate.
So why would you serve action and puzzle solving in the same moment?
So that's a bulletproof argument right there.
No, maybe.
So action adds randomness and distractions, but puzzle solving requires patterns and consistency.
The player needs an idea of what they don't yet know.
So action subverts the foundation of what the player needs, the stability that they need to actually solve the puzzle, because you need patterns and consistency.
And action removes that.
Yeah, so when a player enters a level, they should know if it requires either action or puzzle skills.
Because you can do, like, you know, LineLight has like action-y moments.
But it should be clear, like, are we in puzzle-solving mode or action-solving mode?
It does depend what you're going for, but this was a lesson that I didn't realize was as important as it actually is.
Yeah.
And about 10% of players complained, and that was too many.
So make action levels optional.
That's one obvious thing.
a suggestion to mitigate this.
So let's say there's 100% action levels on the left and 100% puzzle on the right.
We do not want levels in the murky area.
Basically, if you find that they have components of both and it's a single solution puzzle, push them out.
The ambiguity is, it's no fun.
Yeah.
Which leads me into lesson number five.
Make the solution unambiguous.
What's that mean?
Let's unpack it.
here are some red flags.
The player says, was that right?
Or they say, oh, I solved it.
My players sound like that.
Or a player is attempting an impossible action repeatedly because it's not obviously impossible, and that's just not a fun experience.
I'm sure most people here who have played tested games have seen this happen.
If the solution is ambiguous, it damages the player's trust in the game.
And that sucks, and you don't want that to happen.
It makes Toby McGuire pretty sad.
So we don't want him crying.
So here's an example in the line light.
So this one was most, like people ended up playing this through trial and error and it was not fun.
Here's why.
On the left, people would experiment.
They would, so the way to solve the puzzle here is to hit, to find one combination of these two switches.
So there's four possible combinations.
Each one can be on or off.
And then the player would travel all the way through here.
I intentionally wanted that travel space because I wanted them to stop and think.
I didn't want it to be easy to brute force it.
To brute force it, so I added all that extra travel space.
And then they would experiment up at the top.
But players still brute forced it anyway on the left, and they kept going back up top.
And it never was obvious, oh, this isn't the correct state.
Yes, I feel like this is right.
And now I can execute the solution.
It was they just continued to brute force until they got the solution.
And that wasn't fun, so I ended up cutting this level and several others like it.
Here's another example.
So, he dies every time in this GIF.
I hope someday he'll make it.
Nope, didn't make it that time.
Maybe the next one now, can we make it?
It's so close.
Ah, damn.
All right, okay, so I don't think that's possible to make, but it feels like it might be possible to make.
What I did to mitigate that, was I expanded this area here.
This is much taller.
And I also made this wider on there, so it's clearer that you can take refuge.
So players no longer attempted to, so if you see the player come down there, they clearly don't have enough time to hide in the bottom right line.
So that solved that problem.
So one strategy, as in the previous, is get some water.
Again, very fun.
Come on, water's fun.
You all know it.
Ever want water skiing?
Yeah, sounds fun.
So as a previous example, move elements farther apart.
That's a great strategy.
That's super easy.
Got extra stuff, cut extraneous elements.
That's like a theme throughout this talk.
If you're working on a platformer, please make all of your jumps obviously possible or impossible.
This is one of my pet peeves.
Yeah.
So I was showing somebody.
a platformer that I'm casually working on and realized that I had violated this rule very recently.
So this is the puzzle here, and it's not totally clear if that jump is makeable, if it's possible to wall kick and then bounce and get up to there.
It is possible if you time it like that.
And this is early in the game, so the player doesn't have quite enough skill and confidence to feel secure that they're doing it right.
So the feedback that I got was, I don't know if I should be doing this because I don't know if it's possible.
And that's just not a good experience.
Because is it a puzzle?
Or am I just not good enough?
And not knowing that is not great.
You want the player to know either there's something I don't know yet and I have to figure it out, or I'm just not good enough, but I can get better.
If there's ambiguity in between those two, the player doesn't know what they need to get better at.
And it's a frustrating, unpleasant experience.
So the solution?
Click, drag, and now way more obvious that you can make it.
Lesson number six.
Player trust.
Players assume inherently that there's no agility needed in puzzle games.
That's sort of the promise that most puzzle games will set up from the beginning with whatever the game promises in the beginning.
But if you break this rule once, every puzzle maybe requires reflexes in the player's head.
It completely transforms every other puzzle.
This is a lesson that I understood conceptually, but I never really accepted.
I never really internalized it to like, yeah.
But now I get it.
And it's because it was painful.
I didn't want to, but I have since.
So Lightning players assume that many puzzles required quick timing or quick reflexes because a few of them did.
So their perception of it was that there were a lot of...
Yeah, so like if...
Let's say there's two quick timing puzzles in one section of the game.
They might assume that 15 of these levels require quick timing.
Which they don't.
Like, from my perception, I know what they do and don't require, but the player's perception is different.
And the player's perception is all that's real.
I'll just repeat that a couple of times.
Because that...
Yeah, gotcha.
Lesson number seven.
This is less of a lesson and more of a pick your preference.
So this is an internal battle that I went through as I was designing LineLight.
So exhaustive design versus fun.
So fun, as we defined at the beginning, is when the player gets to exhibit mastery, skill, or wit.
And also, I would actually say this doesn't just apply to puzzle games.
I would say this is just like a broad definition of one type of fun.
Exhaustive design, as I would describe it, is like there's one of every possible thing.
It's about the system.
It's like we've explored all the possible avenues of everything that we can do.
But sometimes they're incompatible.
And I struggled with this for a year.
This was me back in 2016.
I have since grew my hair back.
I could watch this gif all day.
I love this so much.
So Braid and the Witness.
So Braid was a big inspiration in Lionlight.
And It was very much like in the John Blow design school of thought.
And those games are very firmly about exhaustive design.
And The Witness is especially about exhaustive design to the extreme, frequently to the sacrifice of what would be considered classically fun, because it's about the system.
We're exploring all the possible things about the system.
It's much more of an art piece in many parts of the game.
Ultimately.
Fast forward over a year, I decided what I innately wanted.
I went with player fun.
So this is just to bear in mind that this exists.
And sort of decide where you want to, what your priorities are.
Then you could experiment too.
But this existed, and I didn't know that I wasn't allowed, like I didn't know that I was allowed to go towards one or the other.
Because I was just very confused.
But I figured out all that.
It's all good now.
And also what's fun for the designer may not actually be fun for the player and that's Frequently true. Yeah, I made a puzzle game last year and it was kind of fun to work on it was fascinating It was like really really like some really cool design, but it wasn't fun for the player So I was like, oh geez, I guess I guess these don't always go hand in hand All right, so here's an example.
So here are a completely different layouts.
They are so unique, demonstrated by the names of each of the levels.
Completely different names.
Tons of diversity here.
Sarcasm.
For me, at the time, they were so different.
But it's a pattern.
This was like a series.
I was exploring a series of concepts.
I started with one thesis, and I continued building.
So in this level, there is a one-way street, which is what it sounds like.
And then there's a flip around it.
Once you get on the one-way street, you're going to hit the flipper.
So you need to time getting the lockstep down to the bottom right.
So the solution to do that would be just do it in sync with the lockstep.
Boom, perfect.
Great.
The lockstep goes on its own, and you've solved the puzzle.
Next iteration of it, just to make sure that the player understands what they're doing, I made the street much larger and made the moving street much tinier.
So they really have to know it.
And this is actually an example of, this is technically redundant, but I wanted to reinforce that skill.
Here's another example of it where I mirror flipped the bottom.
Totally, totally new solution.
Here's another one.
Oh, this is, oh, no, no, no, this one's great.
This one's really different, I promise.
Yeah, because I truncate the line, so then you have to think, oh, OK, what would the, oh, it's really, oh, it's super cool.
Oh my gosh, oh, how smart I am.
Oh, no, no, this one, no, no, check this one out.
Yeah, see this, OK, so there's like two of them.
And then, oh, no, no, even better, no, no, this one's even better.
OK, so we've got two of them, but the line is like, oh my gosh, this one, the thing moves so, so super fast, and we keep going.
All right, players got tired of the same layout.
Long story short.
Even though what I thought was a unique concept.
And the boringness was not obvious to me at the time.
Which is funny, looking back at this I can laugh at it.
Because I'm like, wow, these are boring.
But making it, I was like, I'm exhausting the design.
Like, what if I do this?
What if I do this?
Then what would it mean if I changed all these other things?
And I'm following that natural, logical progression.
But the result of it was not a satisfying experience.
And I was confused.
I'm like, hmm, but I thought I followed the rules.
It gave me the design.
At that point, it was my choice of what I did with it.
So before and after, I probably should have cut this down to three.
People told me to continue cutting it down, and I didn't because I was like, no, but they're so unique.
In the future, yeah, I would probably just hack it down to three even.
Yeah.
Here's another mechanic that did not make it into line light.
So lock steps, some of them can move faster than you, and some of them are about the same speed.
And why not have ones that are slower than you?
That would be exploring.
Like, you know, there's ones faster, same speed, slower.
Why not explore it?
It was just not fun.
You just ran into the back of them.
They were super unpleasant.
All right, time for a strategy.
You didn't know there would be performance dancing in this, huh?
That's an excerpt from a song I wrote called Eating Flowers, aptly titled.
I thought that was a funny title.
All right, so let's polish this off.
Let's bring this home with how I make puzzles.
Let's talk about some strategies.
First off, a disclaimer.
These are my methods, and I like games, as I mentioned, with handcrafted puzzles.
I've made all sorts of types of games, but these strategies apply to games like Lionlight and other handcrafted stuff.
And also, I don't know everything.
I'm always learning things.
So this is not like the penultimate collection of, it's not the perfect suite of tools, but it's a lot.
And it worked really well for me with making Limelight.
And it took a while for me to develop this toolbox.
So people would ask me, where'd you come up with this level?
And I'd be like, put down the surfboard.
First I put down the surfboard, and then I'd say, I didn't.
The mechanics did, as unpretentiously as I possibly could.
I really do mean this.
The mechanics came up with the levels.
My strategy is to create the mechanics.
That's my rule.
I will invent them, and program them, implement them, use them together, combine them, and then boom, we got puzzles.
And that's the end of my strategies.
Just kidding.
We'll unpack it.
How do we get the mechanics, you all ask in unison.
Experience, intuition, and luck.
Those would be basically the three things that, yeah.
And OK, so I like to create mechanics that are diverse.
So they're very different.
They could potentially interact in many ways.
And mechanics that excite you, mechanics that you want to work on.
It's like, this is cool.
I mean, we're making games, so hopefully at least some of it is exciting for you to work on.
Ultimately, cut the duds and don't force it.
There were many mechanics in Lionlight that just either were redundant, or they just weren't fun, or I couldn't do enough with them.
Like, they had very, there was only like maybe eight or ten puzzles total I could do with all the mechanics, and they just atrophied and eventually fizzled out.
The more you experiment, the more great stuff you come up with.
One of my philosophies creatively is the more darts you throw, the more bullseyes you'll hit, and that applies, of course, as well to mechanics.
And of course, have fun making games, people.
There's a dart board so you can remember the dart analogy easier because when we see pictures, we remember things easier, or so I've been told.
This is super boring.
So we've got mechanic A, it's red, mechanic B, which is like, I don't know, whatever, orange-ish.
And then it's like, oh, super boring.
But wait, whoa, whoa, whoa, what if we took blue?
Whoa, whoa, whoa, ready, ready?
Blue, and then yellow.
What would happen?
And then we get green.
This is actually what the experience is like.
I'm curious, raise your hands if anybody relates to feeling this.
All right, yeah, yeah, you know, when you combine things, you're like, wow, and you're surprised by it, and it's great.
It's very satisfying.
So the more diverse the mechanics are, the more surprising things will happen out of them.
So my goal with this specific type of these puzzle games, like Lionlight, is to have very few mechanics that yield many puzzles.
There are other games that can be just a constant new stream of mechanics, but I like to exhaust the possibilities first.
So I'll start with just a few and do as much as I can with them.
And this is easier said than done, because as I was making Lionlight, I had these ideas for.
Yeah, like I had programmed these really cool ideas that I could not wait to explore.
I was so excited about exploring them, but I realized, like I knew if I started making levels with them, I was going to shoot off to the moon and I was going to kind of forget.
I would not have properly finished the logical sequence of puzzles that preceded them without those new mechanics.
Basically, like I need to finish milking this cow before I move on to the next.
I like metaphors.
And also it's a great sign if you're surprised by your mechanics.
Like there were moments where I was just like kind of floridist and some of the cool stuff that happened.
And that's always exciting.
And that's fun as a developer.
It's very fun as a designer.
Solution sentences.
So this is what I call it.
Other designers have talked about this before.
This is not my original idea, but this is how I implement this strategy.
So Lionlight's best puzzles revolve around a single moment.
It's not a series of moments, it is one specific moment.
And my goal in developing each level is to make the simplest possible level of used components with that concept as the solution.
So, here's an example.
The solution sentence is, Use length to get locksteps moving clockwise.
The level I ended up with looks like this.
It is basically the simplest possible version of this level.
I mean, maybe I could just have two of each, but it works.
The solution to this is, you know, one of those bounce.
because they can bounce on your insides.
Nope, they're moving clockwise, beautiful.
You can pick up the key and head through that door.
So my goal was to design a level that had that moment as the solution.
And this is the solution that I came up with.
The moment that the player gets the lock steps moving clockwise, that's the aha moment.
That's like, oh man, okay, I've solved it.
That's where things click.
And it really, it puts the spotlight on what's important in that level.
Yeah.
With these solution sentences, elegance is inevitable.
This is one thing that I, like you could have told me this and I'd be like, okay, sounds about right.
But like experiencing it firsthand, I was just so energized by how easy it is to get elegant levels out of this relatively easy strategy.
I never really had to clench to get the stuff.
And as somebody recently told me, simplicity is intrinsic to elegance.
And that sounded fancy, so I added it in.
Diversity in layout will happen naturally.
That's another thing that I was quite surprised to discover, is that the layouts will be completely different whether or not I wanted them to.
It just happened naturally, which works out perfectly, because that's cool.
That's good.
So I like to think of each sentence, it's sort of like the secret to a magic trick.
Like if a player knows the sentence going in, if they knew that for the last example, if they knew that they had to get the lockstep enemies moving clockwise, then they could do that and then the puzzle would be immediately solved.
But they don't know that, that's the step that they're trying to get to.
That's the secret that they're trying to figure out.
And that's where the aha moment comes in.
Here's some examples that I have from LimeLight.
You can take pictures.
I'm not gonna go through these, but I had.
a lot of these. Oh, I have even more. I just, I wrote down so many of these. These were, it was just a blast to make a lot of these. Here's a cheat to get extra solution sentences.
So here, echo with the player with length block flipper. Yeah, so there's a pattern here, I'm sure that you're seeing. But each level is still a totally unique challenge, which I was also pretty surprised about. It's mostly because they're scattered, these five levels are scattered across the entire game. All five of these levels exist in limelight.
If these were in sequence, the player would probably pick up on the pattern that they're using some enemy of sorts, the length of that enemy, to block a flipper.
But they didn't because they're coming into a blind.
They don't know what the solution could be.
It could be anything.
So we get five unique, quite interesting levels out of it.
And astonishingly, a small change in the sentence resulted in a huge change in the layout, which is another thing that just blew me away.
I would not have anticipated that.
And I think especially, actually, now that I think about it, it's because each of these, the mechanics on the left are diverse enough that it's like the butterfly effect, like one small change in there ripples out.
So here are the levels, actually, from the previous descriptions.
The only things that these have in common are the moving street, the enemy, and somewhere there is length.
Um, uh, yeah, but these are like, they're completely different.
I would not have anticipated that these levels look so different.
Um, but these are the simplest versions of the levels that I was able to come up with.
Um, Yeah.
So how do you get those sentences, I hear you spiritually ask, ringing in the air?
Well, there's a couple of ways.
I like to force the mechanics together.
Just play it again and see what happens.
I've thought of it before as, it's like I'll just invite them all to a party and just be like, hey, what are you guys talking about?
What?
Oh, wait, have you met my friend, this mechanic?
And then the three of them are talking.
Like, whoa, you guys are doing cool stuff.
I love metaphors.
This is probably the most of the levels I'd say that came out of Lion Light would be when I almost saw something as I'm developing a level maybe or a play test or try something and I'm like whoa like that could be a solution that could have been a solution. This is something that I can't make happen on its own but I can certainly prepare for it by just writing down that idea of what I almost saw happen. That is where so many of Lion Light's levels came out of so just you know staying open-minded and keeping your eyes open.
Ask, what if?
Like, what if I combine these?
What if I do that?
That's just a general creative, cool strategy.
Ultimately, my advice on this is don't try too hard.
Don't clench your muscles too hard.
We want to let the system do the work for you.
It's not really supposed to be painful, because great puzzles will occur naturally with good mechanics.
Here's another strategy that I used.
This is a systematic approach where I basically pitted each of the mechanics against each other and pointed at, you know, like, what if I combine these two things together?
What would be interesting?
This is like sort of a map that just gave me places to look at if I, to make sure that I had like, I wanted to make sure that I was milking all of the, whatever, like 49 udders of this cow.
And like, which ones have I missed?
And which ones are probably fruitful?
It's one of four that are fun.
We all love cows.
Cows are great.
I was gonna make a pun, I'm gonna hold it back.
All right, oh, so story time.
Let's get a drink of water first.
Water is so much fun.
That's the real theme of this talk, that's the real takeaway.
Just kidding.
So show of hands, who's heard of the game Steven's Sausage Roll?
Oh, OK, actually a decent amount of people.
So I played the game Stephen Saucedral, and I was absolutely floored.
I was blown away, and I was confused as to how any human mind could come up with levels this elegant and this tight and this, like, just everything felt like it was accounted for.
I was blown away.
I can't even put it into words, as you can see, as to how impressed I was by a lot of the design in that game.
Um, and then fast forward, I'm developing line light and people, uh, you know, I got people asking me like, how did you come up with this idea for this level?
Like, how did you come up with this?
And I'm like, well, it was, what?
And I had a huge epiphany.
I realized for handmade puzzle games, nobody's brain is big enough.
The system the designer created thought the puzzles up.
So it's not the puzzles in Steve and Sauce Control, I am fairly confident, as well as the ones in Lionlight and probably most puzzle games.
The designer is not thinking them up from start to finish.
They're creating the mechanics.
And the effects of those mechanics, the weight of the creation of the puzzles, falls on that.
And that is not on you.
And that's great, because it's easier to design them that way.
So I like to think of it this way.
Designers don't give birth to the puzzles.
Designers deliver the puzzles.
So you want to be on the right here.
So this is you.
And this is your game on the left.
Please don't show this to John.
Yeah, so if you find yourself, you're like, oh, where's the epidural?
Very poor impression of a pregnant person.
Make sure that you hop out of the bed, clean yourself up, put on the scrubs, do your job as a designer, as the OBGYN designer to deliver those puzzles.
So if solving the puzzle takes, let's say, like 75% of a player's working memory, like a really tough Steven's sausage roll puzzle, my mind, like the perceived difficulty, like the perceived working memory required to solve that puzzle would be like, like just an astronomical amount, like an inhuman amount of working memory capacity to account for all of these crazy edge cases that are somehow neatly all solved.
But the actual difficulty in creating each one is much easier.
You basically show up, sit down, do your job, put things together, and finesse, etc. etc.
And it's much easier than I thought it was.
So that's good news.
All right, recap. First let's stretch.
Do my favorite activity ever.
I haven't done a spit take yet.
I'm not going to.
Next year, next year.
Spittig, the GTC talk.
Recap, all right.
So working memory, it's human RAM.
And it frees up with experience.
It sort of looks like this, this metaphorical bar.
It's just an easy way to think about it.
Again, it's metaphorical, obviously not literal.
But good zone is sort of keeping the player, giving them enough but not too, too much stuff to hold to juggle in their brain.
Like let's say if I ask somebody to memorize, for example, 10 digits.
or like, you know, 6 to 10 digits, hold those in their head while they're solving the puzzle, it would make the puzzle artificially harder because their working memory is occupied by that extra task.
So we've got handcrafted puzzles, handcrafted puzzles versus procedural puzzles.
The differences being the handcrafted ones, there's a finite number of these puzzles, and the solutions are pretty novel, and for the player...
It's a fresh and varied experience.
On the other hand, procedural puzzles, no novel solutions, and it's a very predictable experience.
These are just different types of puzzles.
And this is the most popular spectrum.
There are other types of characteristics of puzzles, but this is the easiest to codify.
Noise is the most important thing I want people to take away here.
So noise, again, it occupies players' working memory, but it doesn't contribute to the puzzle.
So if you say what the solution of the puzzle is and there's something in the level that isn't part of that sentence, that would be considered noise.
If you're not mindful, it will pollute your game.
I've seen so much of this.
And I feel like this is like my public service announcement.
Like, you've got to be the janitor.
Clean up that noise in your games.
Like, you can use it mindfully.
You can use it intentionally.
But if you don't check it, it's going to be there.
And it's going to really be at the detriment of the quality of your game.
So make it your practice to find, identify, and then eliminate it.
And it's okay in moderation. It's not all bad.
My preference, like I personally sway towards less noise, especially after making line light, but noise is totally cool.
Like, the witness is very heavy in noise and obfuscation.
That's like, it's one of the main features of the game.
Recap for my methods to create puzzles.
Homestretch here.
So, taking mechanics, making the mechanics, and then combining them together.
You could do it systematically, like in that spreadsheet, or organically, like when you see, you know, something about to happen, or...
et cetera.
Good mechanics will lead to great puzzles, like garbage in, garbage out, that whole sort of thing.
And if you're finding that you're not getting great puzzles, just keep making new mechanics.
Practice is what we're doing.
You've got to get better at it.
And the system births the puzzles.
The designer delivers them.
So remember, make sure you've got your scrubs on.
I'm just picturing myself wearing scrubs, sitting down to work.
That's too much.
All right, and have fun, because what are we making here?
We're making games.
Games are supposed to be fun for the most part.
So yeah, you're going to enjoy yourself.
Thinking fast and slow was a big inspiration for this talk.
I got a lot of concepts from it.
And also, another inspiration, every puzzle game I've ever played.
Yeah, and that's my talk.
Thank you.
You can find these slides online at the link provided below.
So I think we've got time for a couple of questions.
I've got six minutes.
All right, so I've got two microphones.
They hit me.
Anybody wondering things?
Until somebody asks, I'm just going to do my favorite activity.
A question.
Yes, question.
Hi, Brad.
I loved your talk.
Thanks, Heather.
You're fabulous.
How do you decide, when you're looking at all the combinations of mechanics, which ones are going to be filler and which ones are going to be the ones you keep?
What do you mean by filler?
Like levels that you're going to throw out, because there's too many of them.
It's only after I've created enough of them.
The beginning process of making LineLight, I didn't know, and I didn't have enough content, really, to have an educated decision as to what was good enough.
As I made LineLight, I I think this might answer your question.
Let me know if it does.
As I made Lion Light, I was constantly ripping out the bottom 30%, like the worst 30% of levels.
Once I had a level that was better than the top 60%, whatever, it would go in there and then another one would get cut.
It was a very organic way.
I didn't do this, it was not a one for one trade.
But I would go through it and I'm like, yeah, this one's not good enough anymore.
The puzzles that I have now are better.
Does that sort of answer?
Did you base it on player response or your own opinions of whether or not it's fun?
There are a ton of reasons and it's totally subjective depending on the experience that you want to get across.
It totally depended through context.
There was redundancy.
There was, yeah, I'd say for the most part, it was redundancy.
And the fact, I think most of the levels that I removed didn't revolve around one moment.
They were, like the player would kind of chip away at the solution, and it just wasn't satisfying.
It wasn't a satisfying experience.
And the most satisfying ones revolve around that single moment.
The ones I ended up cutting, most of them shared that characteristic.
Thank you, great answer.
Great question.
Yeah, let's go.
So you mentioned the exhaustive versus fun approach to mechanic exploration.
And so at what point did you see that your mechanics were just kind of bloating?
Or when was the cutoff point?
Because there's always room for more mechanics.
There's always room for more fun, quote unquote.
When did I stop adding mechanics?
Yeah, like when was that trigger point hit?
There was a, yeah, that's a great question.
There was a moment where I was like, this is it.
This is the final mechanic.
I need to finish the game.
It was entirely about, like if I had another mechanic, I am like, the end is not gonna be in sight.
I said, okay, it's painful because I have so many ideas that I wanna add.
There were, I had a, I did end up prototyping a couple, but mindfully knowing that I was not allowed to put them into the game, which is maybe kind of playing with dangerous waters.
Cause what if they were really cool?
And some of them were.
But it was entirely about, I need to finish this game.
And I'm going to set myself a specific deadline as to when to finish it.
And if I add any more mechanics, I will not be able to hit that deadline.
Thank you.
I'm curious at what point in the design process you decided to go with three or four platforms instead of just one, because one of the big issues we're having in my business is that we designed these puzzles in mini games.
And we gave it to the designers and said, OK, ignore platform, come up with how you want to play it.
And this is kind of the framework.
And one came back with exclusively mobile style controls, and one came back with exclusively PC-based controls.
And we couldn't put them back together.
Was this two different teams working on the same types of puzzles, or was two types of puzzles?
Exactly.
We said, here's the framework.
Ignore what console we're going to put it on.
What do you think will be the most fun solution for this, or control scheme?
So I'm just curious how you decided that we're going to go for three platforms where you need to come up with similar controls.
Yeah, so in my experience, it was originally intended, I made Line Light for console and for Steam.
And I released it in January 2017 for console and Steam.
And it's controller recommended, because it's much more fun to play with a joystick.
Enough people kept telling me, this should be a mobile game.
It's not a mobile game.
I'm like, whatever designer in me is like, no, it's not a mobile game.
Eventually I listened to people and I'm like, okay, fine, I'll make it a mobile game.
And then I added very intelligent virtual joystick controls to translate the experience to mobile.
And I also reworked the entire game.
It took me about six months reforming it, all the levels and the feel and the timing and everything to make it feel like a natural fit for mobile.
Does that answer your question directly?
Oh, it does.
Excellent.
So I know this was more about the not procedural side of puzzles, but I was wondering if your approach...
You said you made both types. I'm wondering if your approach to designing puzzles would change if you wanted a more procedural-based puzzle.
Like if you wanted to be able to generate them, would you still go with mechanics?
The procedural games that I've worked on...
Not a comprehensive view of all the types of procedural games there could be.
The ones that I've worked on specifically revolve around very, very few mechanics, maybe like two or three mechanics at any given time.
I don't know if that's 100% true.
Can you rephrase that question so I understand?
I suppose it's just if you were to make a procedural game now, if you decided you wanted something that you could procedurally generate puzzles, like, how would you approach it as opposed to how you approach this?
Like, would you still try and create mechanics and trial a few and then see if you can generate levels or would you try something else?
That's a good question. If I were to do it today, which I have done, like, I mean, I made a new one like a month or two ago, Each one is its own completely independent idea.
Because it is procedural.
If the core mechanic of it doesn't work, so let's say one is it's a path drawing.
If that itself isn't fun, then I will scrap the idea.
I'll move on to something else.
But that's the core of it, of the way that you interact with the game.
From there, if it's working, then I'll consider adding components and mechanics on top of it.
But your question is, how would I consider combining mechanics together?
Yeah, it's just sort of if you wanted something that you could procedurally generate puzzles, like would you take the same approach of like having very few mechanics and just seeing if you could procedurally generate interesting levels out of them or would you try and make more mechanics or try something completely different?
There are two main ways that I could see to do it.
The Witness does it in a specific way, which is in each level is dedicated to one specific concept.
The other way is much more mobile market friendly, where it's like that's how most of the casual games on the market are, which is it doesn't matter.
Like there's very few mechanics and it's extremely repetitive.
And these games are pretty successful.
So I've been, I mean, it's interesting because I've been learning about Sleight of Mane, either one of these.
I don't have a definitive answer, because I'm still experimenting with it, but I'd say, as advice, just try it out.
Like, what I do is I just, I'll try out tons of random different ideas, like little things, and if the prototype works out, then I'll continue unpacking it.
I have not made a game that is both procedural and is heavy on mechanics.
Cool, thanks very much.
All right, that's it.
If anybody wants to talk to me after, I'll be around.
Okay, thank you.
