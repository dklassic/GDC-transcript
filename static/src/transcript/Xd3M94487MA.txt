So I'm Tom Bible.
I've been in the games industry for about 19 years, six of which I spent at LucasArts, where I was audio lead for Star Wars 1313 and the Monkey Island Special Edition series.
I now run Submersion Audio with other former LucasArts audio team members.
And we do everything from mobile to AAA.
We're pretty focused on our VR work.
And I've had the chance to work on Dear Angelica, Henry, and Robo Recall.
And my name is Jesse Harlan.
I have been in the games industry for 20 years, 10 of which I spent at LucasArts.
And I have been freelancing for the last six years, working with companies like Sony and EA and Google and ILM, XLab on a bunch of VR stuff.
And with all of our VR experience between Tom and I, we thought it'd be great to give you guys a talk on a pinball game on the Switch.
So, who is this talk for?
Well, first off, it's for indie and junior audio professionals, people for whom AAA experience is either minimal or non-existent and who are interested in seeing how to apply some AAA audio practices to their indie work.
Also, maybe you're in the wrong room, and maybe you've got an hour to kill before your next talk.
We would welcome you to stay as well, senior audio people.
So what will we be talking about?
We will be talking about what it's like to interact with an indie company, the kinds of things that we look for, and the kinds of things that we do at the outset of a project from a AAA mindset, what are some of the creative challenges, and what are some of the technical challenges that we faced, specifically on the game Yoku's Island Express.
So, Yoku's Island Express.
Please put your hand up if you've ever played Yoku's Island Express.
Alright, hey, look at that, a few people.
Please put your hand up if you've never heard of Yoku's Island Express.
About double the people who've played it.
Okay, so, that's okay.
When the developers approached Tom and I, Villa Gorilla, the company, who made the game. This is how they described the game to us.
Yoku's Island Express is an open world two-and-a-half D metroidvania pinball game where you play as the ball set on a tropical island that happens to have a Cthulian Elder God problem. At which point Tom and I were like what? But they showed us the game and it was super adorable and we were like alright you guys had me at Cthulian Elder God problem.
So, it's actually been a bit of a critical darling over the last nine months, making a lot of best of lists at the end of the year, up for a number of awards.
Just found out we're up for two BAFTA awards, so that's pretty rad.
We had the honor of being the 34th best PS4 game on Metacritic, and the 53rd most discussed Switch game of 2018.
Hold for applause.
But not everybody likes your games.
A man that I'm sure needs no introduction, Twitter user Marudeus, said, I got it on discount and still regret it.
Which, you know, that's a bummer, but we'll put our faith more in the Bafta people than Maru Deus.
So let's take a look at what the game is and get those who don't know anything about it familiar with Yoku's Island Express.
Embark on a new kind of adventure.
Meet an unforgettable cast.
Experience amazing abilities.
Help save the island from a terrible fate.
OK, that's Yokuza Live Express.
Tom, if you will.
TOM LITTLEWOOD-SMITH Sure.
So, interacting with indies.
Let's take a look at the map.
So this is where we all were.
You had Villa Gorilla, based in Stockholm, in Sweden.
I had myself, based in Oxford in the UK.
And Jesse, sort of nine or ten time zones away.
Sorry, eight or nine time zones away in the Bay Area, right here.
So how did we get signed up on this project?
Well, we met Jens Andersen, co-founder of Villa Gorilla at LucasArts, where we worked with him.
He's pictured here in the red circle.
He's the only person on the screen, so I'm not really sure why he needs a red circle.
But anyway, he got in touch with us over e-mail and laid things out for us.
And we agreed a flat fee with a sales-related bonus.
So if you haven't bought Yoku's Island Express, now's a great time.
It's on sale.
It's on sale, yeah, exactly.
So and he said to us, I know that we need world class music for this game, but I don't know if we need world class sound design.
So my first job on the game was to persuade them that they wanted to put as much resources towards the sound design as the music, and also to make a case for Wwise, which I'll come back to later.
So he laid it out as a one-year project, which sounded great, except that it lasted three years for us.
So yeah, that was actually about double the work that I'd signed up for in the original deal, so we kind of had to go backwards and forth later in the project, but we're good friends, so it all worked out fine.
So here's a couple of principles that I use when I work with indies.
So, For me, at least, I think my relationships are way more important than the money.
So, the relationships are...
Sorry, the money serves the relationships, the relationships do not serve the money.
And what this can mean practically is that I try not to talk about money in the first meeting with an indie.
So often they're coming to me, and they're not audio experts, and they want to get an understanding of what that would mean, and they're kind of looking for a number, and when you give them that number, or when I give them that number, the conversation tends to end.
And, you know, because then they're going to need to make their decision about which person to use for the audio.
Now, I'm not saying you should be evasive about talking about money.
I'm just saying that it's great to build an understanding of the client, the project, and their expectations of what they want from the audio before you get into that money conversation.
And I like to approach that by kind of working backwards from what's their sort of audio budget, what's the scope of the game, and then coming up with something that's really appropriate for their project, maybe giving them a few options.
And they come away happy having increased understanding.
You've built up that relationship.
So even if it doesn't work out with them, you've built up the relationship.
And that's always helpful.
And then I recommend get things in writing and use a contract.
So we used an email.
I don't recommend doing that.
But yeah, I've heard stories, actually, where games got canceled and it caused problems because you had assets and it wasn't clear who owned them, who owned the music.
And there were legal wrangles.
But it was fine for us.
But don't do what we did.
And also, royalties are great, but they don't always work out, so make sure your cash flow works without the royalties.
Again, Yoku's on sale on the Switch right now.
Yeah.
And with Indies, don't forget about the marketing materials.
So there were a lot of videos that we had to make for, there was about five or six trailers that we put out, and I wanted to make sure that the sound matched the same quality as the game.
So I did all those, and I didn't plan for that.
So make sure you plan for that in your contracts like I didn't.
So, pre-production.
So we set up pre-production for every project the same way, whether it's a giant AAA game or a tiny two-man indie game.
So these are kind of the concepts and the rules I follow.
So firstly, pre-production is the most important phase for audio.
It's your chance to build every system, to test and refine every workflow, because once you get into production, you're going to be running through this workflow over and over hundreds or thousands of times, and any sort of clicks you can get out of that workflow are going to save you loads of production time that you can spend on improving the quality.
It's a great time to take all your creative risks and fail while it's cheap.
And do all your creative experimentation.
Try things out that may or may not work and set your direction.
So this is super key in AAA games and just as important in little tiny indie games.
I'll also say align your audio pre-production with the project pre-production.
Now this tends to happen anyway, but just in case it doesn't, make sure that your...
You're operating holistically in the prototyping phase.
So when they're kind of figuring out what the game is, support them with the audio.
So they're sort of iterating using all of the disciplines.
Communication.
Communication is key, absolutely key, especially when you have an indie team and you're scattered across the globe.
For example, with.
Yoku's Island Express, we had weekly Skype calls.
That seemed very doable when the game was supposed to be one year long.
The game went on for three years, though, which meant that every single week for three years I had to stay up until midnight, the stroke of Thursday, and call Sweden.
Had something like 150 midnight phone calls with Sweden and England in order to figure out what was going on with the game.
We made sure that we used a Google tracking sheet for things.
I recommend you use something like Google because emailing Excel documents back and forth or putting an Excel doc on something like Dropbox, they get out of sync very easily even.
Even using something like Perforce or any source control software, it is possible for your documents to get out of sync.
And then somebody makes change and now you've got two versions of something floating around.
And with documentation and communication, two versions of something can be really detrimental.
So we made sure we had this document that tracked all of our goals, obstacles, and progress.
And that way everybody knew what everybody else was working on, who was blocked by what.
And it made things go a lot smoother.
So some creative considerations.
On the creative side, let's start by looking at what I think is the most exciting element, documentation.
So, I find it helpful to start most projects with a short document I call a creative audio vision, which kind of sounds like a contradiction in terms, but it is really useful.
I start with a short summary, like what I call the audio pillars.
So for Yoku's Island Express, this was a world full of character and charm, a responsive pinball feel, and organic, relaxing, exotic exploration.
which is a really quick and cheap way to get alignment with the team over what you think the audio should be about.
Then, it's obviously pretty useful to gather a few YouTube videos.
You know, you're not working with audio professionals, so establishing a common sound design language by just some reference videos is a great way to get started and get aligned.
What I often do, especially on larger projects, is a prototype video.
So I'll take one to two minutes of a gameplay video of wherever the gameplay is at and score it in my DAW.
And you can go back and forth with the creative director of the project to kind of come up with what the sound of your game actually is like in practice without having to rely on setting up systems and all things like that.
And then this document's a great place to put all your technical features that you're going to need.
So we knew that we were doing 2D open world audio, which sounds straightforward, but really wasn't.
A bunch of physics audio, which could be a bit more straightforward, but wasn't.
And then a load of tools, which weren't straightforward either.
When it comes to music, I, like Tom, also begin with a document.
I call this document a music map, and the map is not a map in a traditional sense as in a map that leads you through locations.
A music map to me is instead an emotional road map of the game.
It is a document that spells out from moment to moment what the dev wants you to feel, or not you, wants the player to feel.
Where does the music need to change?
That might be location to location, but it also might be reliant upon puzzle completion, or it might be tied to the middle of some sort of cut scene.
a detailed list of where queues change and what they change to, then becomes my detailed blueprint for what I'm going to be writing throughout the entire development of the game.
It has everything listed out, and because I have created this side-by-side with the developer, they have sign-off already on everything, and there's no surprises as to what I'm going to be writing.
There's an additional added bonus to creating this document in that if you have everything listed in there, now your brain is down in a document.
And I can hand this document to a technical sound designer or a level designer, and they can handle implementation if need be, if for some reason I'm not the one that's going to be doing it.
And it means that when the time comes that everything is implemented, the same document that has now been making its way through the entire project can be handed to QA.
And I don't have to be the only person who knows how music is supposed to function throughout the game.
It's all detailed there and QA can go through and see what's not working as designed and what is working correctly.
So let's take a step back for a second and think about classic pinball.
So classic pinball has two main acoustic elements.
You've got the mechanical and physical sounds of the actual table, and you've got the additional sound effects and music layers to add excitement and reward to that.
So if you think about it from a UX point of view, for the UX of pinball audio, the goals are kind of like this.
To make short play time really exciting, to give you immediate visceral feedback.
to be really rewarding, and lastly to help the player know what to do.
So for Yoku's Island Express, which is, it was inherently organic with a lot of soft surfaces, so it made some of the immediate physical feedback a little bit harder.
You know, the surfaces are dirt, grass, snow, and with Yoku being a dung beetle, the ball is made of, well...
So, anyway, the reward sounds needed to be a lot gentler, because the longer playtime and the creative style of the world, so we were trying to give a calmer overall feel, which meant less intense sounds.
And a lot of the reward sounds only use C and G, because I was trying to avoid dissonance with the music.
And I actually asked Jesse to write all the music in the same key to make sure that there was no dissonance, which worked great for the first year or so until Jesse forgot that we were doing that.
Right.
Yeah.
It's a problem when the game goes on for three years.
Yeah.
So we actually got away with it in the end, but hey, whatever.
So the character voices were one of the biggest sound design challenges for the project.
We had no budget for VO or localization, so we had to take a lot more creative approach.
Now I spent a lot of years at LucasArts studying Ben Burtt's sound design, which has a very vocal quality to it.
A lot of the sounds used human vocal articulation, like the alien and the robot voices.
They followed the human speech pitch patterns.
And they were constructed using heavy editing of great source rather than heavy processing.
So for the characters of Mokumana Island, I looked for animal sounds that had those same sort of human speech pitch elements and edited those together, and I did impressions of those sounds and mixed them together.
So you got some animals that were a mixture, some that were all animals, and some were just all my voice.
So, you know, here are some of the characters.
You had, like, the parrot.
That was pretty straightforward.
I could imagine how to edit parrot sounds into that.
You had more complicated ones, like a giant eel and a pterodactyl.
That was a little more work creatively.
And then I wasn't exactly sure what to do with a giant talking mushroom and a yellow blob with a hat.
But, anyway, all in all, I was just trying to make the developers laugh.
So here's a quick video, and you can decide whether I was successful.
Like and Subscribe for more Game Theory content!
There you go.
Thank you.
So, about some of the other sounds.
So the physics sounds were...
Pretty challenging as I was saying the creative director and who's called Matthias and I and realized that we had to take a much more organic approach.
So in order to match the world I went out and I bought a cricket ball and a giant marble and I went out to the local nature reserve and chucked it at stuff and got weird looks from passersby.
And I also bought a load of children's toys and cut them apart and, you know, made weird sounds with them, much to the dismay of my son, who was three at the time.
And oops.
Yes.
And we had...
some metal rails which I grabbed the rack out of my oven and rolled the marble along it and also did a bunch of synth programming which I wasn't expecting to do.
Some of the voices were actually came out of synths, partly for saving time and partly just because creatively I just wanted to come out with something totally different.
So, musical motivation.
When I got on the project Villa Gorilla said to me, just do whatever you want.
And that's the first time in 20 years that anyone has said that to me in game development.
And I was like, oh my god, that's amazing, the shackles are off, what am I going to do?
And I had no idea.
Totally awful experience.
That's not how AAA works.
I've had 20 years of having walked into meetings and people say, this is what we want it to sound like, and here's some YouTube videos, and here's somebody else's soundtrack, and please go ahead and give us what sort of exists already.
So I had no idea where to even begin.
This was one of the biggest creative challenges I faced on the entire score.
So I decided to kind of almost zen-like go back to square one, see what was it that made me want to be a composer in the first place.
I took a look at all these different scores and all these different albums and all these different, like, NES games.
Everything, the melody writing of the Beatles, the production work of Mass Effect, Massive Attack, the current production techniques of remix artists like Pogo, all of these things influenced me and ended up one way or another in the game's score.
I had a number of goals that I set for myself with the music score for Yoku.
The first one was that it needed to service the game.
As with a AAA project, I knew the music needed to, first and foremost, serve the needs of the game.
So, do whatever you want isn't quite as self-indulgent as it sounds.
It had to...
It had a function, and that function was to support the game.
If I make a score that supports the game, I make the developer happy.
If I create something that gets called out in reviews, I make the developer happy.
If I create a soundtrack that people want to listen to on Spotify and buy, I make the developer happy.
So that was another goal.
The harder goals for this project, one of them is something I'm calling the dichotomy of opposites.
Yokozayn Express by its design is a Metroidvania mixed with a pinball game.
And it's like chocolate and pepperoni, but somehow it works.
And it works really beautifully.
So I knew I wanted to reflect that musically throughout the game's entire score.
And I'll get to that in a moment.
And I also wanted to find, much like Tom wanted to, one of his goals was just to make the developers laugh, I also wanted to just have fun with this score, because there was so much creativity already.
I wanted to see, how crazy can I take it?
Where's the boundary where I've gone off the deep end, and the developers are like, that's, okay, like all the other stuff was fine, but now you've gone too far, and that's just nuts and doesn't fit in our game.
And then I could walk it back and know where the boundary is.
So let's talk about the dichotomy of opposites.
Take for instance the opening area of the game.
It's a nice, sweet, tropical beach.
I knew I wanted to start with some ukulele, but because I wanted to have the opposite of ukulele, I also thought, why not mix that with turntableism and beatboxing?
And that led to this.
I was thrilled with that.
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
Thanks.
It hit everything I wanted it to hit.
It was two things that really don't go together usually, but they seemed like they'd just kind of always been waiting to be put together like that.
And it was happy, and it was bright, and it was a great introductory way to get into the game.
And another part in the game, there are these frogs who are monks, and they're building a spaceship out of wood in order to leave the planet.
So there's this, again, this dichotomy.
There's the science element, there's this very organic element.
And I knew that I wanted to reflect that in the music, so I thought, well, what if I take the...
The early 80s synth sounds that you'd get on like a elementary school science film strip.
And why don't I mix that with Tuvan throat singing?
And I did, and it sounds like this.
So again, I was really happy with how that turned out.
Thanks.
And you might have heard in the background, there's a vocal track going C-A-T-C-C-A-T-G.
Well, when I started the track, one of my ideas was to have a Gregorian chant in the track.
But instead of having them singing liturgical text, I wanted them to be singing chemical formula.
Deoxyribonucleic acid.
That kind of thing.
And I recorded it, and I put it in the track, and it sounded terrible.
Just totally didn't work.
Maybe that was me.
Maybe one of you could be successful with that idea.
Feel free to run with it.
But I knew I still wanted something to represent that.
So I decided, oh, well, what if I were to take the DNA sequence of something and speak it through a vocoder and just run that in the background of the whole track as almost a vocal.
So, I did a quick Google search and the first thing I looked for was frogs, because of the frog monks, but I couldn't find frogs.
But the first thing I did find was the DNA sequence of yeast.
So thank you Google.
I put the DNA sequence of yeast throughout the entirety of that track, just spoken in the background through vocoder.
And it works.
So how did I do with my musical goals for the score?
Well, I serviced the game.
The reviews frequently call out the soundtrack as helping with the atmosphere of the game.
It made a number of best of lists.
It got called out a bunch on Twitter.
So that was great.
Villa Gorilla was very happy with it.
They loved using it all over their marketing stuff.
The harder stuff, did I do this dichotomy of opposites thing?
Yes.
I figured that out.
I was very happy with it.
Now I got to a point where I thought, all right, this track is the one they're going to shoot down.
I had written a track that was a medieval fugue for sham and crumhorn and bebop saxophone, and after about 30 seconds of that, it became a reggae track.
And I said, here?
And gave it to the devs and they were like, yeah, cool, great, this sounds good.
So I never found a place where I managed to go too far.
I never found where they were like, no, that's too nuts.
So I think trying to push myself to find that, I don't think I normally would have gone for medieval reggae bebop.
But I got there.
Okay, so technical challenges.
All right.
So technical tribulations.
Let's start with middleware.
So I mentioned at the start of the talk that the team was a bit skeptical about getting Wwise into the workflow because it was expensive and it gave them not very much control over the audio code.
So I had to make a case for it.
And making a case for middleware is something I've done a number of times over a number of games with some success.
So here's how I approach it.
So firstly, when I make my case, I come up with a feature list of all the things we'll need from the middleware for the game, and then work out the cost of making that themselves, or ourselves.
And usually it kind of works out like this.
It's cheaper to do it ourselves, which doesn't seem that obvious, and then the team says, well, why do it?
Well, there are other elements too.
So debugging.
Yes, you can make it yourself, but when you add the time you're going to spend debugging, it gets more expensive, and to get it to the same level of quality and reliability as middleware, it sort of works out about even, but it doesn't end there.
You've got iteration time to worry about, like how quick is it to get your assets in there and then iterate on it and get it to the level of quality that you want, and that increases the cost as well.
And then if you want to make it scale, so it's all very well making it work for just a few assets, but then what if you're dealing with thousands of assets or tens of thousands of assets?
If your system's going to need more work to make it scale, it sort of ends up here, and then...
You know, the independence of the audio workflow.
Are you going to be sharing the same files when you're working?
Working with Wwise means I don't need to have those files checked out.
And it, you know, ended up kind of off the charts and the team were like, OK, fine, we'll just use Wwise.
So, music tech.
Yes.
I had the task of figuring out what is the interactive music functionality of the game going to be.
How granular did I want it to be?
And I had some really high concept ideas I wanted to try.
I wanted music that adapted as you solved puzzles.
Maybe the instrumentation changed as you completed a puzzle.
The team asked me, they said there's a central hub village in the game.
And they said that as you complete parts of the game, maybe as you come back to the hub, there's new layers of music.
And the track builds up the more you complete of the game.
And one of the things I really wanted to try was boss music that changed tonality when you scored a hit on the boss.
So, hit the boss, all of a sudden this minor key track switches to major for a few bars and then seamlessly switches back into minor.
And I had some prototypes that I made and it was working really beautifully.
Unfortunately, I had low time.
Because the game was only supposed to take one year, and because I'm freelancing, I have to go out and find jobs.
And as is so frequently the case with freelancing, everything hit at once.
And by the time it was deep in the heart of production on this game, I was actually working on five different projects at a time.
I worked too hard, and I ended up in the hospital because I worked too hard.
And I had to hire help, which I'll get to in just a moment.
Some of my other challenges is that being an indie game, there's not a very large budget for the music.
Let alone for live players.
And I knew that there was going to be mostly samples in the score, but I also knew that just recording a few live instruments completely brings tracks to life.
So I can't recommend it enough.
If you've got a track that is almost all samples, just find one instrument that you can record live and it just brings so much life to the track.
So I knew I wanted banjo and fretless bass, which I'd never heard in a game score, and a couple other things.
I knew I had male and female vocalists for the front main title screen and a brass section.
Where was I going to find players to do this?
Is everybody familiar with the Materia Collective?
No?
Great.
So let me introduce you to them.
The Materia Collective is a video game music fan community.
They are a group of musicians, not unlike the Overclock Remix community, who do cover versions of music, but they are also a record label.
And they put out their own albums.
And because of this, they are getting used to the idea of producing top-notch, high-quality music.
But they are still a fan community.
So I knew that these were going to be young players who were really good, liked game music, were familiar with it, would jump at the chance to work on an actual game.
But their experience level was going to fit the budget that I had.
So the first bit of help I hired.
was Francesco Del Pia.
He was what I'm going to call a technical music designer in Vancouver, which was great, because now he was in the same time zone as me.
So we could just chat throughout the day.
And I didn't have to wait up until like 3 in the morning to talk to him about iteration.
And he helped me out designing all the interactive music and trying to stitch together pieces on the fly and figuring out whether layers would work better or chunks stitched together.
He was great at that.
Then, after I hired Francesco, I seemingly hired every musician in North America to sing on the track or to play banjo for me or ocarina or harmonica and a vocalist down in Chile.
Now, the big challenge with this is that I needed to make it sound like everybody was recorded in the same studio.
I needed to make sure that everything was homogenous when in reality I'm getting who knows what from people across the globe.
And I needed to make sure they had the right delivery specs for everything.
Everything needed to be up to the quality level, that when I put everything together, it took some shaping, and it took some mixing and some tweaking.
But I managed to make it all sound very homogenous.
Tom.
So, underwear.
Yeah.
In the age of Unity and Unreal, it would be crazy to build your own engine from scratch, and that's exactly what the team did.
So Underwear is the name of the purpose-built engine that powers Yoku's Island Express.
So it's got a live editor mode, so you can switch backwards and forwards between the game and the editor and set up the audio really easily.
It meant a really fast iteration loop, which was awesome.
And in my experience, fast iteration is the same as greater quality, because you're spending more time on getting those assets sounding great in context.
And it had the visual editor that looked a lot like this, so I could easily see where I needed to hook the sounds into.
Made it very straightforward.
Although you did have some situations that looked more like this.
I don't really know what's going on there, but the sound works.
So there you go.
And we had a few key technical issues on the project, as it's a physics-based game.
Primarily, especially when you had multiple, is that there were too many loops.
In fact, we had so many loops that all the sound cut out from the game at times.
So we came up with a solution using the wise feature of multi-sounds, where you have a single sound that's sort of spread over multiple locations, and it takes the average pan.
And well, actually, that created some other problems.
But I'll take those problems over all the sound cutting out.
So, you know.
We also had an open world zoomable map, which was pretty interesting because a lot of the way that the sound is designed to work in Wwise is based on a 3D principle.
So when you can be sort of zoomed in on one game area or zoomed out looking at the whole thing or...
Part way in between, it made it a bit challenging to set up the attenuations in a sensible way and figure out what sounds actually needed to be playing.
So the way we figured that out was something we called the listener rectangle.
And here's a picture.
So this is in editor mode. We can see the listener rectangle.
You've got an inner and an outer rectangle.
And in between the inner and the outer is a range of 0 to 1000.
And that defined the volume and the pan.
And inside the rectangle, it was maximum volume and center pan, which was great because it was on screen space.
So however zoomed out or zoomed in you were, it would choose the appropriate sounds to be playing and set the volumes appropriately.
And this view gave us a view of all the RTPCs and the sounds playing.
So this is a really helpful debug view.
And I thought I'd give you a few key technical questions that I asked myself.
So when you're planning your 2D open world Metroidvania pinball game with a Cthulian Elder God problem, you can ask yourself these questions.
How fast is the iteration speed?
Like I said, iteration speed directly correlates with the quality, so that's important.
How is your tech gonna work with thousands of assets?
It's all very well if it works with one or two for your test cases, but when you scale up, what kind of problems are you gonna see?
How is your tech going to affect asset creation?
So you might come up with a new way of doing things, and that might require your assets to be made in a different way.
So you need to have this figured out early so that you can make all the assets in the same way.
How easy is it to debug?
So having great debug tools like we did is really going to make closing the project down a lot easier and a lot more straightforward and a lot less stressful.
But then what risks is your tech going to introduce, and how comfortable is the team with those risks?
So that's worth considering.
And then how flexible is your tech for special cases?
There's always going to be places where the tech doesn't really work.
So for us, that was boss battles or little scripted sequences that we kind of had to work into our tech.
And then lastly, what's the bang for buck?
So you could come up with the best audio system ever, the most nuanced and interesting, but if your average user isn't going to notice it, what's the point in spending your time and resources on it?
So when we sat down to begin the process of making the music tech, Tom said to me, just make it good enough for a GDC talk.
And I didn't, unfortunately, but here we are.
Reason is that too many simultaneous layers and streams totally nuked the engine.
And towards Tom's point of does it have bang for its buck, the team decided that all this nuanced, interactive...
mixing on the fly and changing out instruments and whatnot, they didn't notice it and they were working with it on a day-to-day basis, and it was nuking all of the game.
So, in the end.
It ended up music is just based on macro level locations.
There's a snow area.
It has two pieces of snow music.
There are caves.
They have two pieces of cave music.
It's way more basic than I wanted, but it is how it worked out.
So how do I spin that as positive?
Because when you are working on an indie title.
As opposed to a AAA title, you don't have the infrastructure that you get from a AAA development studio.
So if you're going to go out and try and promote the game, you're going to have to hire a PR company, or you're going to have to do a lot of legwork yourself trying to line up interviews with podcasts and websites.
So the PR hook that I decided to go with was, oh, music's handled like a throwback shoutout to the classic NES games I grew up loving.
Um, which is true, it functions that way, but it's not the goal I set out to do.
Um, but it sounded like a positive, and I could instead, um, hang my hat on the creative element of the score, the dichotomy of opposites thing that I had worked so hard at with the music's production.
Um, and I could let go, uh, the ability to talk about the music tech.
So.
All right, well, in summary, build your relationships and gain understanding before talking money with new developers.
Relationships really are what this business is all about.
Take all of your risks in pre-production and have all your systems working in pre-production.
It's really going to make production that much easier.
Do all your panicking early.
Maintain regular communication with the team. It really is the lifeblood of the project.
There was some times when we got a bit crunchy where that failed and it caused us loads of problems.
Always causes problems.
Live instruments and field recording are awesome. Do that.
Indie projects often don't have the infrastructure of AAA.
So often you don't have QA, PR, or marketing, though we did from Team17, and they were awesome.
But other projects haven't had that.
So you have to plan for that.
And then you have no institutional limitations.
So often you've got no NDA, which means we could tweet about it and talk about it.
That was pretty amazing, the ability to just screenshot Saturday anything I was working on.
That never happens in AAA.
Yeah, it meant we could come to GDC and actually tell people what we were doing, which is great.
And that's it. Thank you.
Thank you.
Applause Look at that. Look at that.
Applause Any questions?
Oh, do you want to come?
Do you want to come?
How many devs at Villa Gorilla?
The answer is, at the moment, one.
At the height of the game, four.
I think it was five.
Five?
Yeah.
But there were sort of two main guys throughout the, oh, yeah.
Well, I'm not counting us in that five.
Are you counting us in that five?
No, not counting us.
OK, so somewhere around less than 10.
for the development of the whole thing.
Yeah, it was a very small team. It was primarily Jens and Matthias, and then they brought on extra people as they got closer to completion.
Right.
Hello, thank you for the awesome talk.
I had a question about one of the first things that you said.
So I'm a composer and I'm doing music for independent projects and I'm always worried about the possibility of getting my payment in royalties.
I have always accepted like a fixed fee because I don't exactly know how that works on the long term.
Do they keep track of their sales and send them to you, the numbers, for infinity?
Like, the Steam sales? How does that work?
I mean, they're supposed to.
Does that happen in reality? No.
You have to chase it down.
Because... And it's like that with everything.
I mean, you talk to...
You talk to people who have royalties through TV and film, and they're always talking about how you have to chase down stuff, too.
So no one out there is dying to give you royalties.
And so you're going to have to keep tabs on it.
But, sorry, would you be doing that in 15 years, be sending mail to the developers?
Well, you have to, okay, so you have to be realistic about games because there is an extraordinarily steep fall-off curve of sales.
Take, for instance, when the game came out, I set up some Twitter notifications just to see how much Twitter was talking about the game.
Nine months later now, and there's almost no mention of it on Twitter anymore, except for when the game itself is saying like, hey, we're on sale, or hey, we've been nominated for these awards, or whatever.
But you don't get a lot of people talking about it.
And so there are ways for you to gauge how much life the project has in it still.
And as long as there's life in it, I'd say chase it down.
But 15 years from now, I think that that'd be crazy, to be trying to chase down.
In fact, you'd be annoying the hell out of your developer.
15 years from now, you're like, where are my royalties from 15 years ago?
You gotta judge the life of the project.
And keep tabs on it, you know.
If, you know, four years, it's not unheard of that four years later some new console will come out and suddenly it's, you know, a game that came out.
How many consoles is Skyrim on now?
Every toaster that comes out now has Skyrim on it.
So that thing's got some life to it still, you know.
So keep tabs on that.
Thank you very much.
Sure.
I have a question. When you do a contract, how often do you retain IP of the music you make? Is it all the time or part-time? And my second follow-up question then is, if you do have a clause that says you retain IP, how do you word it so that the developer still has the freedom to have that music and they want to use it, I guess, for another version of the game or something like that?
The answer to that question is basically how much are they willing to pay you.
The less they're willing to pay you, the more you should own the music.
With Yoku's Island Express, they own only one piece of music, and I own all of the rest of it.
They bought the main theme.
They gave me written permission to be able to put it on the soundtrack, but everything else I own.
And I can do whatever I want with it.
I could...
Send it to music licensing houses.
I can stick it all over Spotify if it's on Spotify.
You just have to spell it out with them.
It basically comes down to this balance of how low are you willing to accept a payment versus how much are you willing to give them of that music forever.
And it's a balancing act.
Does that answer the question?
Almost.
So in the future, if they wanted to make like Yoku Mastered on a new platform or something like that, they wanted to use that music again, would you have to renegotiate a new contract with them to have them use that music again?
I'd have to renegotiate the contract if they wanted to do another game, a sequel, and reuse the same music.
I'd have to renegotiate with them for everything except the main theme, which they own, and everything else they couldn't use without renegotiating with them.
Thank you very much.
Hello, great talk.
Thanks.
I was surprised when you said Materia Collective.
I'm a record collector and they've been doing a lot of really nice vinyl releases recently.
That's right.
And I was wondering if you have been considering working with them on possibly putting out the soundtrack on vinyl.
I'd love to.
The question was have I considered putting out the soundtrack to Yokozuna Express on vinyl.
I would love to put the soundtrack out on vinyl.
And the big question in that regard is, is there a record company that wants to take the risk on a soundtrack for an indie game?
It got a ton of creative accolades.
It got a ton of critical press really loving it.
Has it done as well in sales?
Not so much.
So that's basically a risk that the record labels would have to take.
I've had a couple people approach me.
I've talked to them.
Nothing's really happened yet, but I'd love to do it.
It would be my third album on vinyl, and I don't own a record player, which is funny to me.
My first ever soundtrack was for the game Counter Spy.
And the creative head of the project just liked the music so much that he did a small vinyl pressing of the soundtrack and handed it to me.
And I was like, this is awesome.
I got my first soundtrack ever, and I have no way to actually listen to it.
Anyway, that's off topic.
Thank you.
I don't know if that answers your question.
It does, thank you.
OK.
So this is a question for Jesse.
I really appreciated what you had to say about the challenge of starting with no creative constraints whatsoever.
I work with a lot of students who are learning how to do game audio, and that's one of the things that we struggle with is trying to set up some creative constraints for them.
But I was struck by what you said about in the AAA world how they hand you a pretty specific brief.
Yeah.
So what I wanted to hear was your thoughts on what would be a good approach for students.
Do you want to give them a specific set of things, follow this template exactly?
Do you want to give them a range of parameters?
What do you think would serve their interest best?
So the question is, what is the best way to serve students when it comes to educating them about how to begin a project by way of briefs?
Yes?
That'll do, yeah.
Okay.
And I would say the best answer really is to give them a number of...
different things.
I'm going to have a couple different projects where you give them a couple different versions of it.
Because they're going to end up dealing with a whole lot of different things.
They're going to have projects where, like right now I'm working on a project where it has a temp score and they just want me to recreate the temp score as close as I can without infringing copyright.
And that's not super creatively rewarding, but it's a job.
And it's with a company that I really like, so I'm happy to do it.
But then you also have other situations where the...
And then you've got this unicorn where they said, just do whatever you want.
I had a really interesting project I worked on at LucasArts.
This is one of my favorite things the creative director has ever done for me.
They brought me onto the project.
They said, here are the characters.
Here are some real solid descriptions of what the characters are like.
What I'd love for you to do is put together an iPod playlist of what each of these characters listens to.
Get in their head what kind of stuff they like.
And I found that to be fascinating as an experiment.
It made me really understand where they were coming from as characters, and it made me listen to a ton of stuff that was not film scores and game scores.
And it made me pull in influences from all over the place that I wouldn't have normally gotten.
I got like really into checking out the, like at the time very underground Chinese hip hop scene because of this, and it was really cool.
It was a great experiment.
So, you know, I'd say try and give them as many opportunities to be flexible or inflexible as is often the case as you can because that's what they'll really face.
Thanks a lot, that's really helpful.
Sure.
Okay, we've got about four minutes, so if there's any other questions, please feel free to ask, but otherwise, thanks for coming, everybody.
Any other questions?
I shouldn't have said that.
Oh, we have one question, we have one question.
Okay.
I'm sorry, I'm late with my question.
How long it takes to build its middleware, underwear?
Sorry, could you repeat that?
How long it takes to build underwear?
Yeah.
To build underwear, yeah.
So Jens was on this project for five years, and he built the engine from scratch specifically for this.
So I guess over the duration of that, five years, but probably You know, I can't say exactly without asking Jens, but I would imagine a couple of years because that was when he approached us and the tool was mostly stood up by that point.
So you didn't do this for this game specifically?
No, he did. Jens, the creative director on the project...
He built underwear specifically for this project and probably worked on it for about two years or so, got it into a really good shape before he brought us onto the project.
And then once we came onto the project, Tom thankfully talked him into using Wwise, so then we had nicely integrated audio tools and didn't have to worry about building that.
And so then we were able to just do our work with Wise while Jens continued to build underwear off on the side for what he needed.
Thank you so much.
Sure.
Thank you.
All right.
So, I think we have time.
Yeah, we have time.
One more question.
Go ahead.
Yeah.
Thank you, by the way.
The licensing scheme for Wise, does that expand if you want to integrate it into a custom engine or is it more expensive?
It is obviously a little bit more laborious, but what was the sense from Jens and the project of how much that factored into it?
Sorry, I'm not sure I fully understand.
So the question is about the licensing of Wwise.
And how does that work with a custom engine?
And I think that the tier, if someone can correct me if I'm wrong.
I mean, I can speak to this.
I mean, the license from a cost point of view, you'll find it actually all on the Audio Kinetic website.
So you can see how it's all laid out and the tiers.
So it's based on the total, I think.
It's a production budget of the title.
So there's no like, oh, custom engine implementation, search engine, or anything?
No, it's more like indie scale, triple A scale, sized games.
It doesn't have to do with the size of your engine or work on your engine.
The cost, they don't really factor in whether you're using Unreal or building your own engine.
The integration side is kind of your part of the deal.
Thank you.
Thank you.
Sure.
Well.
I guess that's all we've got time for.
So thank you, everyone.
Thanks, everybody.
Look at that.
