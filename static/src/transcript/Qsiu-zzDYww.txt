Hi everyone!
Alright, this is going to be fun.
Hi, my name is John Manning and this is May.
Let's talk about how to get other people to fix your bugs for you.
I am 50% of a game dev studio called Secret Lab.
We're based in Tasmania, Australia.
And I'm working on a small game called Leonardo's Moonship, which is an adventure game with a really pretty hand-drawn look.
We're really excited about it. Awesome!
I'm also an author.
We recently wrote a book on Kerbal Space Program.
This is a shameless plug. Please go buy it.
And also, more importantly, I'm helping on Night in the Woods, which shipped last week.
And it did pretty well.
In fact, one of the ways that we know that it did pretty well is because Arby's tweeted about it.
And we don't know why.
So yeah, that was really, really fun.
So Night in the Woods was developed by Infinite Fall and published by Finji, who are some rad people.
And massive, massive thanks to everyone involved.
And particular thanks to Ashell in the Pit, who did all the amazing sound.
So Night in the Woods, if you don't know, is an adventure-y, platform-ery type emotion game.
It's a game about this cat.
and...
Today we'll be talking about how Night in the Woods worked with the open source process, why you should do it, how to do it well, and also how to maximize the benefit you get out of it.
So, Night in the Woods hit a problem, and that is dialogue is really big and really tough to manage, the word count in Night in the Woods is ridiculous, and to manage it, a tool called Yarnspinner was written and open sourced, which I'll talk about that first, and then I'll talk more broadly about open sourcing and ways you as an independent developer can take advantage of that.
So we have about 130 unique characters, lots of dialogue, we have about 139,799 words in the game, not counting any code or character names.
Dialogue in these kinds of games is...
either typically node-driven or scripted.
So by node-driven I mean each line or choice is created in some kind of visual editor and each node is connected up.
Chatnapper is a really good example of that.
The other alternative is scripting, where you basically write code that describes how the dialogue works.
Node-driven is really intuitive but can be quite clunky when there's a lot of dialogue and it's difficult to manage in a very graphical way.
By contrast, scripting requires you to learn a whole other language, depending on the complexity.
Scott Benson and Bethany Hockenberry, who were the writers of the game, didn't have time to learn a new complex system on top of what they were doing already, because Scott was doing all the art as well.
So writing, I believe, should require the least amount of coding as possible.
You don't want to have to additionally burden your team.
So we noticed that one of the most popular game tools currently available is designed for non-programmers, and that is Twine.
Who loves Twine, by the way?
Yay!
Twine's awesome. So Twine is increasingly being used by people who don't know programming, but do want to tell a story, and Twine's syntax is really really sparse and focuses on letting you write. So this approach was perfect for managing Night in the Woods content.
Yarn is the editor that we built based on the ideas of Entwine.
It lets you create text files that get loaded into the Unity-based game engine, and in the game we wrote a library called YarnSpinner that does the parsing and the compilation and execution.
And we'll come back to YarnSpinner in a moment.
Here's an example of some of the Yarn code we did in the game.
So you can see how the amount of syntax required for a conversation is really, really sparse and minimal.
So Yarn became the scripting language that ran the entire plot of the game.
We have a lot of additional small commands that just make acting happen, that set some game state and things like that.
Most of the game, I would say, is written in Yarn, the use of visible stuff anyway.
Some very cool features that were specific to dialogue-heavy games like Night in the Woods got added to the syntax of the language.
Halfway through, that was really powerful and really great.
So like this really, really simple choice syntax, which helped the writers create lots and lots of branching dialogue very easily.
So we can just pop up a dialogue box and select an option and then easily write dialogue with a lot of player choice.
So Basically, the entire game is written in Yarn, all the dialogue, all the cutscenes, all the high-level game logic, and in fact, the game's save files are mainly a dump of all the variables that Yarn knows about.
The yarn tool was put up on GitHub with no license, which is not great for reasons I'll talk about.
So it was on GitHub.
At that point, me, I discovered it and went, okay, this is really cool, maybe I can improve it and I did and it turned into YarnSpinner, which is a totally separate and independent library, which had a more robust parser, some better tools, better error handling, support for localization and other good stuff.
And others started contributing to Yarnspinner as well.
So we got things like multiple type variables where previously they were all integers and bug fixes and all of these changes were able to be merged straight into Night in the Woods.
So if you go to this page you can find more information.
It also has a link to the GitHub.
It's kind of great.
Basically Yarnspinner is awesome and I think everyone should go and use it right now.
So yeah.
So, it worked for Night in the Woods.
Why should you do it though on your game and how are you gonna make it more likely to get a good outcome?
So, first of all, big thanks to Paul Fenwick who created the CCanon project for Kerbal Space Program.
A lot of this information is from a conversation that I had with him.
When a project is open sourced, it's guaranteed that if the author vanishes, that won't kill the project.
I happen to think this is the most important reason to open source anything aside from the personal benefits to the core devs.
Additionally, when you open source code, you make it more likely that others are going to use it.
Critically, for you, it means that you let other people fix your bugs.
That's less work that you have to do.
Now a lot of people are only aware of open source because they grab the stuff from GitHub, and with good reason, because it's free, so you don't have to pay for anything, and it's often quite good, and it's free, so you don't have to pay for anything.
But GitHub isn't where open source starts and ends.
I've given you some reasons why open sourcing is good in principle.
Let's talk about some practical things you can do to get the most out of doing it.
First of all, let's define what we're trying to get out of this.
You're busy working on your game, and that means your primary goal for releasing code during your production is to get contributions, which translates to community done features and bug fixes that you didn't have to do yourself.
Let's look at how we can do this.
The critical thing for building any kind of community of people who want to fix your bugs for you is to make it as easy as possible for them to make those contributions.
So we'll talk about two main categories for this.
Technical things you can do and things you can do to improve the emotional and social experience of those contributors so that people come back.
After all, your goal here is to attract help.
So a great way to start is to put your code somewhere where people are familiar.
So GitHub has kind of won this kind of battle, but it isn't the only one.
Bitbucket is also great, as is GitLab.
The reason why you want to do this is the popular code hosting sites not only are a great place to just dump your code, but also they have built-in social features which can really help your community.
So GitHub has the biggest thing because of the network effect, but Bitbucket and GitLab are competing quite well on technical features at the moment.
This is the slide that I want you to pay most attention to.
You need to have a license if you release code as open source.
It's the most important thing to take away from this.
You need to let people know whether they can make changes.
Additionally, if there's no license, it's unclear if they can even use your code in their games.
There are basically two types of licenses available for you to choose from, copyleft and permissive.
A copyleft license is designed to make the idea and the philosophy of open source spread.
So the idea behind copyleft is, if I use copyleft license code in my game, then I must release my game under the same license as open source.
So the GPL, the General Public License, is a really good and famous example of this.
Usually, games tend not to use copyleft licenses because of this.
And additionally, some engines, especially the Unreal Engine, specifically says you cannot use code that is under GPL in your project because doing so would require you to release the entire game source, including Unreal, under GPL.
And Epic says, no, thank you.
So, by contrast, permissive licenses say that you're allowed to release derived closed source versions.
In other words, use it in your game without having to release your game as open source.
So these are generally more commonly used in games.
Usually the only thing that they need is attribution and just, you know, acknowledgement that you are not going to try and sue them for warranty stuff.
You're busy, you're working on your own game, you don't want to have to think about which license to pick.
In which case, people generally go with MIT or the Apache 2 license.
So I'll talk a little bit about those in a bit more detail.
MIT is the simplest one, you have probably seen it around.
All it says is, you can do whatever you like as long as you give attribution and are aware that the author offers no warranty support.
I'm paraphrasing, please read the license itself for the details.
Apache 2 is more complex but it's also more thorough.
It gives a more complete job of explaining the user's rights and it also grants the recipients of the code a patent grant for anything in the code that is patented.
That's very useful to have because you can end up in situations where you have the source code to something but you can't use it because you don't hold the patent license to do it.
So, yeah, Apache 2 includes a specific grant saying also you get to use whatever patents apply to this code.
If you don't care at all, a lot of people default to going with Apache 2 because it's fairly straightforward and offers the most clarity to your users.
So that's often what I go with, but make your own decisions.
Next up, have a contributor's guide.
You need one of these.
This is second on my list of things you should know about.
A contributor's guide offers guidance on how someone can make a contribution, both technically as well as socially, so interacting with other people on the project.
It tells them what is expected in their contributions, who to talk to for help, and also how to get started.
It really reduces the dauntingness of a person's first contribution.
Critically, it should also direct people to your code of conduct, which I'll come to in a bit.
If you're using GitHub, then if you have your contributors guide in a file called contributing.md, then GitHub will actually link to that file whenever you go to post an issue, which is a really great way to get people directed to that document.
Another really good reason for putting your code on a server like GitHub and Bitbucket is that it keeps your code and your bug tracker in the same place.
That's really awesome.
So it's much easier to deal with both the code and the issues when you don't have to jump between them.
It reduces the friction, and again, reducing the friction means fewer people get discouraged, which means more contributions.
Have a central place where people can go to talk about your project.
A Slack, an IRC, anything that lets people chat.
What's really important about this one is you should be present there.
That doesn't mean be on call or reply to every single question instantly, but it's really, really reassuring to see that the creator of the project is invested enough to want to be reachable.
Make a list of very, very low hanging fruit, easy bugs, simple things that a person who's brand new can get started doing right away.
Make this very visible, put it in your contributor's guide, maybe even put it in your readme.
and direct people who come to you who say, I want to help out, say, well then, here's a list of things you can do right now.
So easy bugs is one part of it.
You can also direct people to look at your existing bug list and ask them to mark the bugs as easy sounding or hard sounding.
That's a thing that doesn't really require a huge amount of knowledge of the project, but it gets people going, gets people ready.
And finally, documentation updates are also a great source of non-technical contributions.
On the flip side to this, it means that you as the developer should focus on the stuff that requires the knowledge of the code and to resist the temptation to work on the easy stuff yourself.
Get other people to take care of the easy stuff for you and free yourself up.
If someone comes to you saying, hey, could you add this cool feature? I'd really appreciate it.
And you don't want to do it yourself, you should immediately reply, no, but we'd love that.
Then refer them to your contributor's guide or...
to an open ticket in the bug tracker, or even make a new ticket for them and then aim them at it.
So this helps to bring people in, because if they're able to, they're more likely to add the feature themselves.
One thing that a lot of open source projects have discovered is that even just noting that a feature is desired can be enough to bring people in.
Now it's important to realize and remember that contributions to your open source project aren't always source code.
Bugs, documentation and feature ideas are all just as valid as the code.
Anytime anyone adds anything to your project, you should notice them, you should thank them, you should promote them and you should make them feel wanted and welcome.
They'll stick around.
For best results, you should prepare yourself for when someone comes in so that you know what steps to take.
So let's talk about what those steps are.
you should have a pre-prepared induction process.
This is not a big complicated thing, just have a list of steps that you follow for when someone else comes along.
When someone comes along and makes any kind of contribution, even just a post on your forum saying, this is awesome, welcome them immediately and thank them for whatever their contribution was.
If it's their first contribution, you really, really want to accept it.
If this is their first chunk of code or pull request, accept it, even if it's bad.
People will feel accepted and it will get them excited to do more.
Additionally, you can modify their contribution before you merge it into the main branch.
People don't mind when that happens.
In fact, they love feeling like they're being given more information on how things work.
It feels like they're being brought into the fold.
So, yeah, this is kind of not obvious, but I hope that you do it.
Third on the list of things that you really should know, have a code of conduct.
I hope that this is not like an amazing newsflash, but you really should have a code of conduct.
Because if you have a successful project, then at some point there will be some sort of incident that will be considered inappropriate.
If you have a code of conduct, then you have a clear document to point to on how these things are to be dealt with.
And if you don't have one, then what will result is an endless and exhausting discussion on whether it was appropriate, what to do, and so on and so forth.
So this is a tool for you. It's not a hammer with which to club people who say something sexist.
This is a thing that you can use.
Because when these kinds of incidents happen, they create a ludicrous debate and they sap your will to live.
Imagine if you decided on your bracing style for your source code halfway through development.
Imagine the conversation that that would result in. It's the same kind of thing.
So, give people the ability and the power to point to the code of conduct and to shut people down on your behalf.
So it shouldn't be up to you to police it.
You can make the policing power available to your community by having a code of conduct and also the ability to lock threads and such.
don't worry too much about somebody going off on a huff.
So if someone says, well, I don't like your code of conduct, and I don't like the fact that I can't call people bad things, I'm going to take your source code and go and do my own damn thing.
And that sounds bad, but actually that can be often OK, because if they take your code and want to run it in a different way, and...
do their own contributions, then they'll probably keep it under the same license, especially if it's a permissive license, and then you can just merge those good stuff back, even if they, assuming they do in the first place.
In fact, there are more than a couple of examples of open source projects outside of games where the project had a hostile fork, and then it actually later completely re-merged back into the main thing after everyone had cooled down with more good stuff.
So at the end of the day, what you care about is contributions.
it's better to let the toxicity happen somewhere else if you can't stop it entirely.
So it's possible that you might think, well this is a big burdensome thing, but I guarantee that if your project is any kind of success, then you'll end up citing this code of conduct at least once.
Without a code of conduct, then nice people will disappear from your community, and that is the worst thing that can happen when your community is brand new, because a code of conduct isn't the same thing as saying you can't swear, it's saying you can't use racial slurs.
It also indicates that you are serious about the project, because saying that participating in your community requires a thick skin indicates that your community is toxic, and being in games, I think we know a bit about that kind of thing.
So, make it part of your induction process.
If someone becomes a core contributor, make it.
very, very clear to them that they are expected to enforce the code of conduct as well.
Make it clear to them that it's as important as welcoming newcomers or having good coding standards.
If you don't know where to start with the code of conduct, the contributor covenant, look it up, is fantastic, it's a great template.
You can just copy it and use it. In fact, that's encouraged.
So please adopt the code of conduct.
You might be thinking, wow, this is a lot to deal with, you're a really busy person and you don't want to have to take on a second job.
That's why we're going to talk about ways to reduce the burden on you as a developer.
So, how do you, as somebody who wants to get contributions, reduce the amount of work that you need to put in in order to get good outcomes?
First, make a list of stuff that you want.
Not just a future roadmap, just like unstructured list of things that would be nice to have and then publish it.
So this gives people an idea of the kind of help that you're looking for.
When people, if when people come to help you, say yes.
Doesn't matter who they are.
This is fairly obvious advice, but it tends to happen not as often as you'd think because of the problem of people's egos.
People tend to get quite defensive of how their project is run.
So I would strongly advise you to just take whatever help arrives and merge every pull request you can find unless it's obviously incredibly incompatible.
Give people the permission to do what they need to do.
So, for example, make people moderators, make people admins.
Give them permission to merge pull requests for you.
Give them permission to integrate into whatever workflow you have.
It's very, very difficult to screw things up completely when you're using Git.
You can always roll back.
Say yes to people, especially if they want to automate stuff.
Because if somebody wants to set up a build server, say yes and give them API keys.
If someone wants to create a bot that posts when new issues have been filed, give them permission.
Say yes.
Because getting hung up on how you want your project to be run while you're already busy working on your game is a very easy way to run out of energy for both of them.
And allowing somebody else to help you out is your main goal here.
Don't get picky.
If you're faced with the choice of either not doing something at all, or doing it in somebody else's way that you don't agree with, do it somebody else's way.
It's okay for mediocre contributions to happen, because you can always come back and fix it.
Your only question should be, is this contribution better than what it was before?
Don't wait for the perfect contribution, accept the okay contribution, even to the point of accepting technical debt.
because you can always accept the later contribution from somebody else that fixes it.
The only way that you can encourage people to take the first step to contributing to your project is to make sure that first step is not burdensome.
Make things easier to do.
In fact, find things that are easier for people to do.
Take the tasks and break them up into smaller tasks as well.
Leave them in the issue tracker like plantalizing plums.
An even better way to get a feel for how to run an open-source project is to contribute something to an open-source project yourself.
Doesn't have to be much, doesn't even have to be a long-term commitment.
Just, you know, push something to an open-source repo that you have liked.
Even if it's nothing more than you fixed a typo in the readme.
Additionally, if you participate in open source stuff, it's a really great way to add stuff to your list of contributions, if you ever want to participate in capitalism.
So, it's a really great way to develop street cred and make yourself known in this kind of community.
So, marketing is as important for this kind of thing as it is your game.
You already have an existing marketing setup, right?
Right?
So, use all that existing stuff.
Twitter, word of mouth, even do screenshot Saturday.
I did, and Yarn is a text-based thing.
I just took screenshots of text. It worked.
Also, Chris Dwyer, who did the marketing for Night in the Woods, had a session yesterday.
If you weren't there, go get it on the Vault.
It's fantastic.
Put the call out for help.
Just ask for help.
Just say, I'm looking for help.
People will respond.
You can also encourage people to turn up by saying, this is going to be great.
I love my project, but it'll be even better if I had this other thing as well.
More often than not, that tends to have someone who already knows about the thing come along and say, oh cool, how are you doing it?
Then you can assign them to the project.
This also ties into people feeling appreciated and included.
Additionally, you should automate as much as you can if you have time to do it, and also if you don't have time to do it, then ask someone else to do it.
So things like build servers, or a bot that closes the stale issues, or also a bot that announces when a new release is available.
You can also even automate bits of your community.
So a lot of the social stuff can be automated as well.
The Rust language project does this really well.
When someone submits their very first pull request to the project where they contribute code, a bot replies to them right away with a welcome message, thanking them, and then sending them to the Contributors Guide and the Code O'Connor and everything they need to get started.
It also pings a human who has been assigned to this newcomer to help them through the process.
And this bot's quite clever, it also reassigns that human if either of the parties don't reply in time.
Even a bot that just says, thank you, can be enough.
OK, so GitHub, the company, released this fairly recently, opensource.guide.
And this goes into much more detail about the kinds of things we've talked about today.
So I strongly suggest you check this out, opensource.guide.
I'll leave that up there, I see people taking photos.
You should open source parts of your game during production, it can be really rewarding.
It's not completely effort free for you.
You can't just dump stuff on GitHub and wait for the bug fix to roll in.
It doesn't quite work like that.
If you want to get something out of it, there's some work to do, but it's not as big as you might imagine.
It doesn't have to be a long-term, massive commitment.
It made Night in the Woods production much, much better, and I think that it can make yours better as well.
So, thank you all very much for listening.
Follow me on Twitter, you'll see in a second, and tell me about your awesome open source project.
Thank you.
So if you have a question, I think we have a bit of time.
If you can go to the mics, that would be awesome.
Oh yeah, in case it wasn't obvious, this is all in Indian as well.
So now we're playing Night in the Woods.
You were there first, yes, hello.
Hi.
So I was wondering about contributor license agreements because you didn't bring that up.
So someone.
writes a chunk of code, you put it in your game, and they didn't assign copyright to you, what do you do?
Okay, so...
Okay, I should preface this with I am not a lawyer, let alone a copyright lawyer, so none of this is legal advice.
However, I can tell you what has worked for me in the past.
Assignation of copyright turns out to be way more complicated than you might expect, especially when it comes to stuff like estates if the person dies.
So what we did on Yarnspinner is we said, any contribution must be licensed under MIT.
That's all you need.
So the copyright for Yarnspinner is actually Copyright Secret Lab, which is me, and Yarnspinner Contributors.
That way you have the right to use it in your game, people have the right to use the code, everyone goes home happy. It's great. So yeah, you don't necessarily, in my opinion, need to assign copyright. But again, your mileage may vary.
Thanks.
Cool.
Hi, what's your name?
Hi, I'm Jeremy.
Hi.
What are, what's an example, you were saying there were some classic examples of a community splitting and forking, and then that fork, after everyone cooled down, sort of got reintegrated back into the original project, and I was wondering if there's a particular example that shines.
I know that the GNOME project, which is a desktop application suite, and also it's a desktop, not just applications, has had multiple forks over its lifetime, and usually whatever patches from those have filtered back into the main project.
There are a couple, but I can't really recall them off the top of my head.
It doesn't happen very often, but it has happened.
Ghost melters.
Thank you.
Better take shelter.
Yes? Hi, what's your name?
My name is Jillian.
So I work for a company in Ohio, and we do contract work with people in California.
And I'm really surprised at how similar it is that we have the same problems and the same issues, working from studio to studio with Open Source Cores.
So I feel like the biggest problem that we have is two people working on the same problem at the same time, and at the end they have to choose, okay, which solution do we have?
Which code is better than this?
So do you have the same issue?
Not really, this is really a problem that's solved by really, really open communication.
Additionally, the fact that you can create a branch and publicly push code as the solution's being done, like it's, if the solution is so small that you could have done it on your own in a single commit, then really I don't think that's as big of a problem, but you know, this is really a thing that you solve by having the two teams work in the same repo.
I have a second thing.
So I do game development on Twitch.
And it used to be people doing game development on Twitch would just do their own project, and people would just watch them.
But now it's turning into this community effort where people in chat are doing the code with the coder and adding audio and adding art and stuff like that.
So if people want to be part of projects like this, Twitch is a great place to go to and be part of a community.
So are you talking about live coding collaboration or are you just talking?
Or are you talking about just general working together?
It's both, yeah.
There's a large spectrum of that.
Sometimes it's really focused, sometimes it's open for anybody.
So on the second point, which is just collaboration on the same project, just jump into any project that pops up on GitHub Explore or anything like that, and yeah, you'll be able to find something to contribute to and just get part of that community.
I'm less familiar with the live coding stuff, but I kind of want to get into that myself.
Cool.
Hi.
What's your name?
Hi, Sienna Leslie.
Hello.
Hi, so first, thanks for the talk.
I thought it was very good.
Thanks.
And I'm curious to hear a little more about some techniques that have worked for you for when it's a good idea to spotlight specific issues and which.
channels you've decided to spotlight them from because my open source project has several hundred contributors so we do have like utilize a lot of tags and stuff within the with within github but I'm curious to hear more about approaching other channels to spotlight specific issues so you're talking about like where to go to find more people to contribute yes who are outside of the community that you already have I think that you should rely on the same kind of mapping techniques that you use for the game itself.
So just, you know, don't limit your discussion of the project to people who already would be interested in doing it.
Go to your personal Twitter, go to your games, like your studio's Twitter, and just say, Hey, by the way, in addition to the game we're working on, we also do this.
If you're a coder, then please jump in.
Really, it's just a matter of running around and yelling about it as much as you can, every weekend.
And that's, yeah, that's really it.
Thank you very much.
You're welcome.
I think that's it for questions, so thank you all so much again for coming, and yeah.
Thank you.
