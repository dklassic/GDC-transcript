Starting over.
I'm Kristen Queeby.
I work at Microsoft Studios.
I was the publishing sound supervisor on Sunset Overdrive.
And my name is Brian Higa.
I'm a sound designer at Obsidian Entertainment, formerly of Microsoft, and I was the associate sound supervisor on Sunset Overdrive.
First and foremost, we want to give a huge call-out to the Insomniac audio team, and we'll talk a little bit how we collaborated with them, how we worked with them throughout this entire process.
But they have an amazing team down in Burbank, headed up by Paul Mudra, their audio director, and Dwight Okahara, yeah, did it good, as their audio lead, and a bunch of other amazing sound designers.
Next is a look at the Microsoft audio staff that ended up working on Sunset at any given point in time throughout the project and a little bit about how we work. During Sunset Overdrive I was a part of a content services group there, and we have a bunch of audio directors, sound supervisors, and sound design staff, and we will scale and do basically distributed development depending on project needs.
So we took on certain aspects of the Sunset Overdrive audio production as well as just assist in whatever area is possible throughout the production. So a quick intro just for those who don't know, what is Sunset?
Yeah, so can I get a show of hands of everyone that's played Sunset Overdrive?
Sweet.
Awesome.
Well, for the people that haven't played it, I'll explain a little bit.
So basically, Sunset Overdrive is an open-world, third-person action shooter adventure set in the awesome apocalypse.
The Fizco Corporation has poisoned the population and turned them into mutants, so you have to shoot, jump, fight, and just kill your way out of it in one piece.
So when we first got on the project, we decided we wanted to create standards or audio pillars.
And the first one we went on was we wanted to be unique, iconic, and identifiable.
One of the joys of this, working on this project, was it was a completely new IP.
So we had to figure out, you know, what's the sound of Sunset Overdrive?
What's the language of audio?
And it was a joy just trying to figure out exactly how we wanted it to sound.
So we wanted to make sure that players...
When they were listening to the sounds, like, these are new sounds that they've never heard before.
We wanted to make sure that Sunset was iconic.
So the next pillar was amplifies gameplay.
We always wanted to make sure that the moves that the player did was always fun and humorous and dynamic.
We wanted to make sure that the player's choices were fulfilled through the audio.
And then the next one is excels in high production value.
And this is something that we all try to achieve.
And we just wanted to make sure that, along with the systems that were in place that we were working on, we just wanted to make sure that all the systems in Sunset were held to a high bar of standard.
And then lastly, we wanted to be culturally relevant.
So we wanted to introduce...
We wanted to introduce contextual, non-literal moments in the mix, just to kind of amplify the gameplay and make it sound more fun and kind of reach into the psyche of the player to gather emotions that they would feel.
And so here's a trailer for Sunset Overdrive.
Before this whole thing started, I just floated through life.
I know this is going to sound crazy, but my life didn't start until the world came to an end.
All right, nerds. This ends now!
I sense some epic missions in my future.
To battle!
Together we'll take Bizco down.
Or we won't.
But we'll get some wicked respawn animations!
I'm ready to die, asshole!
Oh, shit.
Are you okay?
What a fuck-up.
Yeah.
I meant you.
XBOX SOUND So we just thought we'd break down some of the audio systems that Microsoft helped support the Insomniac team with.
We did a lot of coverage on some of the base OD'd.
We helped support UI content and in-game pickups.
We worked with HDR and really collaborated highly with them to deep dive into this.
We'll go a little bit into more detail on this later, but it was very much a new system to us, so a lot of learnings there.
We helped support some additional cinematic content, and as well as some music support for the interactive system, and Robert Ridihall, a programmer on our side and Paul Lipson, collaborated with Paul Mudra on that.
But the two systems we really wanted to focus all focus around the hero.
We spent a lot of time building out, really we like to use the hero as a starting point for any one of our productions because it's something that's really persistent throughout the game.
It's something that tends to come on really early online in production.
And we really think, you know, it's an experience that really glues you into your environment.
So, two of the systems we ended up focusing on, which is your LOA, or what we call your level of awesome.
And this was basically a style tier based system.
They had an in-game style meter that would change based on combos you were pulling off in the game, how you were pulling off attack moves against your traversal.
You would level up, and we wanted to create a more dynamic, interactive experience and make the player feel more powerful as they progressed.
Another system we're going to focus on is the vanity system.
There's a ton of art assets in that game, as anyone who's played it knows.
Ton of different outfits for the player.
And we thought this was a really great opportunity to really make players' decisions matter.
And so we decided to focus on getting as many different sounds as we could and making each individual sound as unique as possible.
Something I always like to look at, because I like looking at numbers and graphs, is take a comparison as to where we are, where we were versus where we are.
And basically what you're seeing here is a breakdown of the number of assets that we had on Crackdown 2, which I think is a very similar project, open world experience.
And essentially that totaled, with a DLC pack, about 13...
And in the center graph, what you're looking at is essentially a breakdown of the number of assets that we created for the hero alone for Sunset Overdrive.
And that was 10,000 assets between Vanity, Footsteps, and your LOA.
And what you're looking at on the right was an all-up.
the number of assets that ended up in our originals directory on Sunset Overdrive.
And while probably not 100% accurate on the number of sounds that shipped in the game, it goes to show how many assets got imported into the project at any given point in time.
I also like to talk about a breakdown of our schedule and how long it actually took us to build all that content, because it was a lot of content.
So, basically, LOA took us about two months, and we ended up, for Vanity and Footsteps, a total of six months.
We ended up having to do three full hero passes on all the animation sets.
There were a bunch of different animation sets broken out for the average male, female characters, a heavy set male hero, and essentially the LOA, vanity, and footstep system all tied into basically an animation tagging system and really piggybacked on one another in terms of the implementation.
We ended up taking about 15 days to do a full pass on just tagging animations in the project.
And we ended up for, and we'll talk a little bit more about this, for the vanity, they had a configuration file for every piece of clothing that you could wear.
And we had to go tag every one of those to be able to drive our appropriate switches and switch containers.
And that took two days.
For shipped assets in the project, just a quick breakdown of what we ended up building.
4,520 assets just for vanity and clothing pieces.
5,633 footstep assets, which seems like a lot, but it's awesome.
We ended up supporting, you know, tons of materials as well as shoe types.
And we'll deep dive that a little bit.
And that totaled over 10,161 assets just on the hero alone.
So next we want to talk about how we started our creative process.
So much like how artists have storyboards where they can concept their art on a page on the wall, we wanted to do something similar with audio.
So we had audio previs storyboards.
And so when we first started doing this, we collaborated with Insomniac for many weeks, like many phone calls, and we were trying to come up with different concepts and genres that we kind of wanted to fill out with what we thought the sound of Sunset Overdrive should be.
So the first one we decided on was we wanted to do a gritty fantasy world.
So this was kind of like a Tim Burton, Harry Potter, dark fantasy feel.
The next one we wanted to work on was retro superhero.
And this was heavily influenced by the movie Scott Pilgrim.
So, like, very big moments, non-contextual, or contextual moments, and retro 8-bit sounding audio.
And lastly, we wanted to do humorous horror.
And we wanted this to be ultra-violent and gory, but with this cartoonish flair to it.
So, which do you fit?
Well, it was two of them, actually.
We went with retro superhero and humorous horror.
We really thought the mixture of both these genres added to the style direction we wanted with the systems that we worked on.
So in this video, we're going to...
It's actually just an audio, so you don't have to see anything.
But in this video, we're going to play those two genres.
And at the beginning of each one, we introduce the traversal movements with the foley, and then we introduce characters, enemies, and combat.
Oh!
Whoo!
Oh yeah!
I shot you.
Where do you think you're going?
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Ack!
Thank you very much.
No!
No!
There it is!
Ah!
So in that audio.
Love this.
Thank you.
Just if you could hear at the very end, we had those really contextual moments with the bells and then the music playing.
So that's kind of what the idea we wanted to transfer back into the game.
So after that, we moved on to design documentation.
And this is pretty much taking the systems that we had and setting high-level goals for each of our games.
everything for that system.
And from there we had to think of, all right, so we have a high-level goal, and then how do we execute that?
So it's, um, how technically, how can we achieve this high-level goal?
And from there, once we had our system in place and designed, we went to execution.
And this basically just came down to what needed to be designed and what needed to be fully.
And so this leads us to our next portion of the talk, the LOA system.
So you're a level of awesome.
So the question that kind of arose when we got to this is, how do you let the player feel more powerful and awesome as they traverse through the world?
One of the gameplay mechanics that really stood out to us was the traversal mechanic.
And we really brainstormed and thought about how we can highlight this through the audio.
So we had lots of influences and lots of games that we love to play, so we, like, including Assassin's Creed series, Mirror's Edge, and Prince of Persia.
We played a lot of these games, and we really thought, you know, these were, like, kind of the benchmark in terms of the movement for the player, and we wanted to add Sunset Overdrive to that list.
So, interesting enough...
Early on in development, the basic idea of the style meter came online.
And this is just basically, as a player traverses through the world, they gain style points.
And so when they're meleeing and fighting, as they get more style points, they graduate to the next level of their style.
And once that happened, once we saw that, we were like, oh, let's tune in on that.
It felt like that was a good moment where we could highlight that through audio.
That's how kind of Level of Awesome was born.
So you go back to the question, like, how do we let the player feel more awesome and powerful as they traverse the world?
So we answer that by utilizing Wwise's switch event system to change completely the audio of the player's movements as they gain levels in their style tier.
So the next thing we're gonna talk about is our design goals for the Level of Awesome system.
The main goal we wanted to achieve was we wanted to have stylized gameplay feedback as the player traversed through the world.
When you start off the game, you start at level zero.
It's just kind of from the get-go.
And we just wanted to make this kind of intimate and realistic.
So it's just realistic foley, no added movement, only maybe in certain places where we wanted to emphasize some movement, but it was just kind of basic.
But then as we went to level one, we wanted to introduce our next design goal, which was having cinematic content.
So we just wanted to add more weight and more of that cinematic flair to the movement, just to make the movement more exciting.
And then once the player hits level two, we wanted to have another layer of fun to fill out the audio spectrum.
And so we added an old school ninja movie style audio.
So really nice high end swishes, just to give more speed to the player as they're traversing.
And then, lastly, level three, once you hit your max level, we wanted to introduce retro 8-bit style audio with hyper-realistic cartoon realism.
And we like to call that organic cartoon realism.
But lastly, our last goal, we wanted to make sure that we kept everything clean and it didn't clutter the experience, because with all the scope that we wanted to fulfill, that was the danger of...
we had the danger of kind of cluttering everything.
So we wanted to make sure that everything was clear, distinct, and felt good.
So here's our design matrix for the Level 3 Awesome.
This was the level where we kind of had a lot more fun, because we could add things that normal games wouldn't play in their audio.
So how do we make the game sound more fun and awesome?
Well, we were heavily influenced by...
The classic Looney Tunes style audio.
So, like, when you're watching Bugs Bunny, and they're hitting each other, there's, like, lots of percussive sounds, kind of these non-literal moments, just to kind of sell the humor and the funness of the cartoon.
So we wanted to take that influence and that style and apply it to Sunset Overdrive.
So we really had to figure out, you know, what's the language of level 3 awesome for Sunset Overdrive?
Well...
We wanted to make sure that the motions evolved.
On the left side of the screen, you can see we listed every single action the player can take while they're traversing.
And we wanted to see what audio can we add to the sound to kind of sell that motion.
So for example, when the player is falling from a great distance, when you're at level 0, 1, 2, it's just kind of fully flapping, some wind in the air.
But once you hit level 3.
We added a jet, the sound of a kind of a shepherd's tone, jet falling sound, just to kind of have that fun moment when you're falling.
For vaulting, we added more of the speed of kind of ricochets off of an object.
So we just took the old style Western kind of bullet ricochet and added that in the mix, just to kind of help sell that motion and make that motion more fun.
And so, lastly, we really wanted to put that 8-bit retro feel to the game, but we wanted to pick the moments that we can do the most damage or make the most influence in the game.
So we added them to the big moments in combat, so impacts.
Yeah, impacts, and then when you're falling from great height, we decided to have the land sounds.
We added an 8-bit flare to the actual impact of the land.
So some of the tools that we used to achieve the 8-bit style audio was the plug-in Chipsounds.
It's a really awesome plug-in that we love to use.
We used an OP1, which is just a really awesome synth.
That we, like, I needed an excuse to buy it, so this was a great excuse to use for work.
But basically, you can take sounds.
It's almost like a portable hard drive where you can take sounds and source and put it in there and just kind of just destroy and have fun with the synths.
So we had a lot of fun with that.
And also, we used a lot of source from the Sci-Fi Boom Library.
So here's a quick glimpse of the Wwise data structure for Level of Awesome.
On the left side, you can see one of the things we wanted to make sure we achieved in Chaos Squad, which is Sunset Overdrive's multiplayer mode, all the characters use the same hero event.
So we wanted to make sure that we were able to switch between when the remote player was playing sounds and when the local player was playing sounds.
Because we only want to hear you when you're playing.
We only want to hear the Level Awesome sounds on the player and not on other players because it would just clutter the mix.
So as you can see, we had a local remote switch.
for the first level.
And then underneath that, we actually had the Level of Awesome system.
So on the right side, you can see we had our sounds for AirDash in this example for level 0, 1, 2, and 3.
From there, we set our switch type event group to Level of Awesome, or LOA, and we just set our switch, our default switch, to no LOA.
And from there, we can assign the different containers to the switches for each Level of Awesome.
And here is the video showcasing our level awesome system.
I'm not sure what the point of this is.
I'm not sure what the point of this is. It's just a game.
It's just a game.
Thanks.
So another core element in the traversal system was grinding.
Insomniac worked very heavily on this to create a really cool material, like, switching-based system for when you're grinding on rails versus, you know, wood railways and things of that nature.
But really, kind of late in production, we ended up...
We ended up wanting to create a more interactive experience, but we were actually post-code complete.
So we couldn't get any additional engineering time.
So Christopher Melroth, one of our audio directors, and Jeffrey Domkowski, who's an extremely talented sound designer at Microsoft, ended up setting up an entirely event-driven RTPC changing value for when you're grinding.
And this would drive a YawRTPC value of a minus 90 to positive 90 value when you're undergrinding.
So depending on the angle of the player character, you would be able to drive things like EQ changes or...
Things of that nature just to get a little bit of a more interactive experience and help make it feel better.
We also drove pitch changes based on the horizontal speed of the player.
So as you're doing your grind boost, you get that sense of really speeding up.
And we also did gain changes between high and low loops.
So as you would start to increase speed, we could bring in a more intense sound that made you feel like you were going faster.
So here's kind of a look at our Wwise data structure.
You can see we have a top switch container that would then drive material switches.
And then if we looked at that top level container, we were driving makeup gain changes as well as pitch changes to get that increased speed that we were talking about.
We also drove EQ changes at that container level, and essentially we would drive two different gains on two different bands.
And this is how the RTPC looked on the EQ.
And here's an example of how that ended up turning out in game.
But I just want to stress the amount of work that went in to get this in the game.
Because you have to imagine every single grinding animation having to have a unique sound event set up that would essentially go, what do I need this yaw RTPC value to be and how fast do I need it to change?
And here's the video.
All right, just to wrap up this portion of the talk of Level of Awesome, we want to talk about are we happy.
Well, I think we're really happy with the way it turned out.
When it's working, you can really hear it.
And I think it's really rewarding for the player, the player that's, you know, doing the making fun, or having fun and, you know, traversing and comboing together.
It almost, it rewards them for being awesome.
And it also kind of incentivizes them to keep that style tier high so they can have that fun factor just always going.
Some of the things we could have hit up.
So one of the things we really wanted to support that was one of our core designs was being able to track the end of grind rails and to also have a lead-in when you're about to make an impact on the ground.
So we just wanted to have that extra player feedback just to let them know, hey, I need to stop grinding and move on to something else.
And also have that cinematic flare as if when they're about to hit the ground, we get that nice little whoosh.
This was a hard code tracking task that if we had maybe another month, maybe two, maybe less, we probably could have achieved, but we just ran out of time, so we didn't get to hit it.
So then, one thing we would have done a little differently is I think we would have had even more fun with the level 3 content.
We would have had more contextual, non-literal moments.
What the consensus was with the team was that...
with our original previous videos was that it added too much of a comical element to the game.
And so we were kind of trying to achieve a more mature style game.
But after the reception of the fans and the players, how much they loved the style of the game, we really think we could have gone a little bit more, maybe just had more fun with the style to make the system more distinguishable.
So the next thing we want to talk, and that leads us into our vanity system.
The vanity system, there was a really heavy emphasis, even from the beginning of the project, to just be who you are.
They really want to support the player's freedom, and the art team did such an amazing job at Insomniac creating just so much different, unique content that the player can wear.
And we really wanted to showcase this.
So what did that mean for audio?
So we ended up creating a limb-based switching system to be able to support all the different unique configurations of the outfits that you could actually put on.
What that meant is we ended up having different switch groups.
And we could have switchable content based on your torso, your torso front, which was essentially like jewelry or necklaces, your torso back, if you put on a backpack.
We would support your legs, your arms, your waist, your feet.
All of that could be uniquely changed at any given point in time.
The nice thing about this system was that we, we built it in a way that the pipeline was really effective and efficient and actually didn't require a ton of code support.
So a lot of people are used to coders having to go drive all their unique switches.
Any time you need a new one added, but Insomniac was able to build a system for us that enabled the designers to be able to go and add switch groups or drive switches.
Any time we wanted on any unique piece of clothing at any given point in time.
So audio design goals for this system.
We wanted the hero to be unique based on whatever outfit they were wearing.
We really wanted to push how many different sounds we could get out of different clothing types.
Which is harder than it sounds.
A lot of materials end up sounding very similar and the same, so we really worked hard to try and just create as much unique and identifiable content as possible.
We wanted the audio to always mirror the choices that the player was making.
We really think the player matters.
We really want to make them feel like their decisions are important and that that drives the experience of what they're having.
And we wanted to support a high level of detail through the hero actions.
So, as you'll see in a bit, we supported a lot of different behaviors that were completely configurable.
depending on which pieces of clothing you wanted to support at any given point in time.
What this meant, we ended up supporting about nine different behaviors on your hands, one for your arms when you're falling and flailing in the air, and about 16 different behaviors for any other limb set.
We supported material switching on the feet as well as shoe type.
We also wanted to ensure that the pipeline was really quick and efficient.
We wanted to make sure that our designers were spending more time in the studio focusing on content rather than working in the tools to have to just hook up the content, because it was a very large number of assets.
We also wanted to ensure that your audio would prioritize based on visibility.
Sunset had a system where you could have an undershirt on, a shirt on, and then a jacket on top of that.
So we wanted to make sure that our switches were always switching appropriately when you were taking on and off clothing, and would fall back appropriately to whatever you had had on previously.
So, what did this look like?
And the number of content that we ended up supporting?
Here's an Excel list of all the number of different clothing pieces that we ended up supporting.
We used this as a status tracking tool as well.
At any given point in time, I could come see what was edited, what was currently in game, who was in charge of it, and also add notes, because I like to give feedback all the time, apparently.
There's also, this is an example of what our footstep tracking would have looked like.
We had a status page that was in the front.
Same kind of deal.
You could see if something had been mastered, if it was final in the game.
And then each one of the below tabs is basically an asset list for that material.
And this is kind of a short snippet of what it might have looked like for the sneakers and bare feet.
on asphalt, and we would always have images so that the designers could see exactly what the material looked like for when they went in to record.
We also had a color-coding system, so we could track the state of what asset was exactly in-game, final, needed to get redone, what was implemented, but temp content, or what was, you know, what needed to get redone.
Brian got to spend a lot of time with some of our other designers in the Foley studio.
So here's an example of some of those images.
Yeah, so here's, on this picture, you can see our family of shoes.
We had six different shoes that we used throughout the whole project.
And I lived in the Foley room for three months.
Two months was the footsteps, and then the last month was all just the vanity clothes.
So some of the things that we learned.
When we were trying to perform the footsteps, we initially thought, OK, let's actually put shoes on our feet.
That's what you would think.
But since we had 10 different actions, we really wanted to make sure that each action wasn't wasted.
We wanted to make sure that each action really exemplified that movement.
So runs sound like runs, jumps sound like jumps, and so on.
And we really couldn't achieve that with just our feet.
So we hand-performed all of our footsteps.
And so we had lots of stinky hands for three months.
But, yeah, so we did that with all the precepts.
And one of the other things we learned was mic placement.
We used an 8040 and a 416, as you can see in the picture.
Since some of the materials that we used were a lot quieter and sometimes we had to get more detail.
We really had to kind of just crank that mic up to whatever we were recording, especially for the vanity assets.
This goes against some of us.
I mean, we got some advice, and people say, like, you know, you should be a set length away.
And we soon discovered that there was no rules involved.
We just had to get the right sound.
So, yeah, and here's another picture of just our beautiful, messy folder.
So, a quick breakdown on some of the details.
In the beginning for Vanity, we wanted to support 51 unique clothing types.
So, very ambitious.
But by the time we shipped, we'd actually ended up scaling it down to about 29.
Reason being, like, as much as we wanted to and tried, we just couldn't get that distinction between certain materials.
Another reason was that actually some of our recordings turned out a little bit noisier than I would have liked, so we decided to ax them, even using RxAdvance to try and clean stuff up.
For our footsteps, we ended up in the beginning trying to support 30 unique surfaces across six different shoe types.
But by the time we shipped, we ended up scaling it down to about 13 unique surfaces, but still supporting six shoe types.
Some of the reasons why we ended up cutting some of the footstep content was Some of the surfaces weren't actually flagged from an art side, so we weren't actually hearing them in game.
And based on how we were loading our bank content into the project, it was we would load a shoe type as a bank.
So you would basically get one shoe across all surfaces loaded in at any given point in time.
And we wanted to get some of that memory back, so we ended up cutting some things.
We went through multiple pipeline iterations when working on the vanity system.
Starting with each one of the implementation passes, we would start as building a proof of concept to see what the pipeline looked like in game.
Yes, so as you can see, we had some lofty goals and some big ideas.
And so our first pass we did, we did a complete pass in all the hero animations with a complete outfit, something that was kind of the default outfit in the game.
So just the top, pants, shoes, and some accessories for the player.
And once we were tagging the animations, we realized that it wasn't...
our initial implementation wasn't limb-based at all.
It was based on animation tags per limb.
So this required about nine different steps to actually tag animations through the animation.
And we also had to deal with something similar to Unreal's Kismet scripting for each article of clothing.
And then for each new behavior that we wanted to support, we had to have co-support.
So, you know...
As you can see, like, with our scope of the game, we wouldn't be able to complete the game with the way we implemented it.
And also, with those nine different tags, the timings were a little bit different for each, and so we wanted to make sure that we can have all of them play all at once so that the human ear can just hear everything in one fluid motion.
Yeah, I want to really stress the amount of time we took editing down to even the millisecond to ensure that all our assets would always layer properly.
For if you had a single action...
If you would jump, your content for your legs and your content for your torso had to be in lockstep in order to feel natural.
So for a second pass implementation, we kind of went back to the drawing board and flew down to Burbank and worked really closely with their team.
Hurchill Bailey gave us a lot of help when trying to get this set up in game.
And we basically stripped it down so that we could drive switches based on a single event.
So we would have multiple switch containers for our switch groups.
And what this enabled us to do was define, when we wanted to create a new behavior, say it was a swing behavior, say we wanted to hear the torso pieces but not the leg pieces, we would just assign all the limb pieces that you wanted to hear and exclude the leg switch group from that event.
Here's, I think we ended up with something a lot cleaner. They had vanity configuration files in the game, and essentially they just added text fields.
So we could go in and we could assign whatever switch group name we wanted applied to that piece of clothing, and what switch would get assigned to it. And we could actually apply multiple switch groups and switches to a single piece of clothing. So if we had, say, a backpack, we could add just a, like a cloth piece or a canvas piece as well as, like, a jingle.
And we could drive both those sounds at the same time.
Here's a look at some of our vanity data structures.
What you're seeing here is just a list of our switch groups and our game syncs.
And then what you're seeing on the right-hand side is just all of the clothing pieces that we would end up supporting and driving for just your legs alone.
What we're looking at next, I realize this might be small, but I wanted to show it because this is a list of every single switch for any piece of movement that the player would have played.
And essentially, you could imagine when you look at the top image, those are the switch containers that would have to be applied on an event just for that one behavior.
So you would end up with five switch groups assigned to a single event.
And what you're looking at in the bottom image is a breakdown of the switch that would drive the clothing pieces again just on the legs.
And here's an example of a video showing how the vanity system turned out in game.
Oh, honey, it looks like you're wearing a poor person costume.
We also wanted to show a little bit of our footstep data structure because we had the added challenge of dealing with material-based switching.
So on the left side, you can see our footstep events.
For each different action you can take.
And on here, it looks like we have ten different actions.
And so we were able to set the first switch to shoe type.
And we had the default set to sneaker.
And then on the next slide, you can see our switches based on the different shoe type, and then from there we had the action-based.
So this was run.
And then on the right side, under the run switch event, we had every single surface in the game playing.
And here's a video of the footsteps in action.
So just to wrap up the portion of the talk where we're talking about vanity, we again want to talk about if we're happy with it.
There are definitely things that I would do differently if I were to go back and do it again.
Overall, I think we're pretty happy with the amount of detail we were able to support in the project.
Again, this is just a glimpse of a few of the outfits that we were able to support.
But, you know, ultimately, I, I think we could have stayed in lockstep with the art team better.
There were definitely some art items that came into the, the game that I would have absolutely just killed to support, like jester shoes with bells.
Missed opportunity for me.
But also I think I would have scaled back on some of the behaviors that we were supporting and just tried to spend more time playing with our different materials to get more unique sounds out of them and really distinguish them.
But I always want...
People always ask about this.
I do have some really funny photos that we should have included in the picture slide of Brian in some high heels.
I would have loved to have done that.
Everyone always asks about the memory because it's a lot of content, so I thought I'd do a quick breakdown of some of our memory structure information.
So LOA and vanity just for data structure alone ate up 1.2 megabytes.
The footstep structure memory just for all our data was 1.6.
Total data structure, 2.8 megs.
And when we look at some of our media support.
One shoe type across all surfaces was about two megabytes.
You could in multiplayer end up with your worst case scenario of having all the shoes loaded at any given point in time.
So worst case scenario was actually 14 megs.
This wasn't really, I don't think, a problem for us because enough stuff got unloaded during Chaos Squad from the single player experience that it wasn't making a huge dent.
for one outfit ate up 2.85 megs. And this is with a full outfit loaded. And here's kind of a breakdown if you're going to look at the memory based on a per limb structure. And I'll kind of run through this a little bit quicker. 0.68 for the bone necklace, 0.33 for the jeans, 0.57 for a backpack, and 0.53 for a t-shirt.
And then our chain belt was 0.74.
Again, this is like our worst case offenders for each limb piece.
And that totaled out to 2.85 megs.
Something else I like to talk about when we talk about Sunset is HDR, which was new to us in Wwise.
This is their high dynamic range mix system.
Several games have been using it now, including Infamous, I think, shipped with it.
And Dice did a talk on their own HDR system that they built a couple years back.
Essentially, we had to deep dive into this and really figure out how it was working and wise and we collaborated very intensely with the Insomniac team, Chris Colander, I want to call him Colander every time, Chris Olander, his alias is Colander so I'm used to calling him that.
We really looked at investigating how exactly this was working.
We ended up rebuilding our HDR system three different times throughout the production of the game.
But basically, we ended up with a category-based system.
So we were able to define what we wanted to certain categories.
And it was really based around loudness.
So if something loud happens in the game and you want it to push out your quieter moments, that's exactly what this is good for.
HDR system was really.
Perfect for a game like Sunset and an open world experience where you just don't always know what kind of scenarios are going to end up occurring in the game.
But the two categories we ended up driving it with, of course, is voice volume.
Voice volume ends up driving HDR priority within Wwise.
But also, we had to look at our reverb sends and kind of come up with a category system that worked in lockstep.
with how we were using our voice volumes in the game.
Because this is additive volume, and it impacts the priority in the HDR system we were observing.
So here's a breakdown of how we broke out all our different categories in the game.
And you can see it was based on things we wanted to be really loud versus just baseline content.
And you can see on the right how we ended up driving our attenuation.
So if something ended up being applied to the loudest category and you went to look at its attenuation and the reverb send in there, it would be set to minus three at max.
So when we were approaching this, there were definitely some challenges along the way.
Yeah, so as you can imagine, we had...
One of the things was just keeping it all cohesive.
We had three months of Foley recordings, but we needed to make sure that it sounded like we recorded it in one day.
So we had a very strict guideline to the timing.
So we were down to the millisecond.
We measured where our peak was in the file, and we had to make sure every single file kept this strict guideline that we did.
So we used a lot of Adobe Audition just to get to that granular level for the timing.
And then we also had to make sure that, you know, once we were done with the Vanity and the LOA, that these two systems kind of merged together and played well.
So we had to kind of carve out time and space for each one to be heard, but not to overpower the mix.
We also experienced some changing style goals through development.
This was kind of a new thing for me, being at Microsoft.
We did a lot of UR testing, which is very common across our games, but it was the first time that I'd gotten a lot of feedback around audio.
Sunset was going for a mature-rated game, and we were getting feedback that some of the more, you know, Fourth wall breaking contextual but not literal content was lending itself to being a little kiddie or a little teen-based, like Brian said earlier.
So we really had to be careful about how we approached that.
And we ended up moving more towards trying to go for more of a Hollywood cinematic design with really light flavors of more of the 8-bit content to try and help keep it set in more of this mature.
Rated game.
Working with tools off-site can always be a challenge.
For us, we're based in Redmond up at Microsoft.
And this is something we've been doing for a good while now, taking tools that are typically built in studios and taking them off-site and working with them.
And Insomniac Games was, they were amazing at supporting us and getting the pipeline set up off-site.
They were passing us EXEs and code builds to constantly be running the game again.
We had a lot of people sharing sessions with us, where we'd do desktop sharing sessions so they could help us see the issues that we were running into on our side.
So ultimately it was a great experience and they're a wonderful team to collaborate with and they're very creative and they have an amazingly talented audio department.
And they're actually giving a talk on Friday on open world audio.
I think Dwight and Herschel.
So please, if you're interested in Sunset Audio, please go check that out.
And then that's pretty much our talk on the Sunset Audio for vanity and tradition.
Thanks. If anyone has any questions, just step up to the mic.
Yes, thank you.
Did you find yourself recycling any of your imported assets in Wwise by using things like plugins, RTPC, whenever you could?
You know, like let's say you wanted to change the floor from metal to wood, would you use a reverb for that?
Or were you very strict on having a fresh piece of Foley?
We were very much fresh fully. We didn't necessarily do a lot with, on the processing side, to get more variations, but what we ended up doing was sharing content from piece to piece. If we weren't getting enough, like, enough of a distinction between it, we would share. For example, a lot of the footstep stuff, we did scuffs, push-offs, things like that, and when you're going from, like, a loafer to a sneaker, and really it's just a kind of slide motion, you're not getting A super material based on the shoe.
But there were definitely like more hard transient actions that were definitely unique per shoe.
So we would keep those and share more generic experiences.
Also soft surfaces like grass and things like that.
We shared assets across all the shoe types.
Cool, thank you.
Yeah.
Hey guys, thank you. So you touched a little bit on your file memory sizes for these limb systems in the vanity system. I was wondering if you had any specific tricks that you guys might have pulled off to maybe keep those sound banks from eating up all of your memory and maybe how that influenced your process. Sure. We ended up...
being able to pretty much load and unload all the vanity pieces uniquely, because you're always in an in-game menu.
So essentially, that's why we broke it out per material piece.
So like, I could load in a jacket just independently in the menu.
So we didn't have to carry all our vanity banks at the same time.
Cool.
Thank you.
Yeah.
You're welcome.
Hey guys.
Hey Luca.
Hey.
Hi.
First, I just want to say as a guy who worked on a similar, like, infinite variation type game, I appreciate the scope and care of what you guys have done, and you made it look really easy to have all of these layers fitting together and switching and all making sense, but I know that that is an incredibly difficult job, and it's so cool that you guys made time to just push the envelope in that direction, because this is like the best movement system I've heard in a game in, like, basically forever.
So all that said, is there anything that you wanted to even do for the movement system that you didn't get to?
I mean, it seems like you basically, you know, ordered lunch and everything came.
So, any stuff you'd do for Sunset 2 that you just couldn't because you didn't have support, or...
Yeah.
I think like Brian mentioned, being able to track the end of the grind runs.
We really think it, you know, we wanted to help make that system feel really good.
And maybe you can speak more to the lead-ins.
Yeah, so one of the things we wanted to do was...
You can hook onto the power lines from a set distance.
And almost like if you press the button, it kind of just leans in toward it.
So we wanted a sound almost like a magnetism type sound to let the player know that they executed this and they're going to attach.
Just for more player feedback.
And that was one thing.
That was along with that.
It was just a lot of hard code tracking that we just didn't have the time to do.
It's more like games are, it's really hard to be predictive, right?
Yeah.
That you're about to do something opposed to, hey, I'm doing this thing.
And a very, the majority of the voice for our base OD standing right here asking questions.
So that's awesome.
Thanks.
Yeah.
Thank you.
Props to talking rain seltzer for keeping me going.
All right.
Great talk.
Thank you.
I'm wondering if there were any unique challenges in terms of mixing and priority with the awesome and the vanity system.
How you dealt with that.
Well, yes is the answer.
HDR, like I said, we rebuilt it three times and I think HDR ended up driving the way we were really mixing the game.
So, like, where and why you end up mixing really changes when you turn HDR on.
So instead of being able to just grab your slider that's on your, you know, front page when you click on an object, you're now going into a menu over and dealing with a lot of makeup gain.
And so we ended up, like, once our HDR rules were set...
You kind of don't want to mess with those.
So we really ended up going into and driving the mix through makeup gain.
And we also learned there are multiple places that you can apply makeup gain.
So that was some, like, interesting gotchas, because there's makeup gain settings on the object level as well as the source level.
And so we were finding that people occasionally would edit the makeup gain in two places, and we're like, why is this so loud?
Like...
So it was really digging into a granular level about what was exactly going on.
And there's just becoming a lot of gain stages, I think, in Wwise that are becoming awesome because it gives you a lot of freedom, but also you have to really come up with some strict rules about how you want to keep yourself organized and not kind of back yourself into a corner.
Do you start your buses at perhaps a lower level to give you more headroom?
Yeah, we did.
So, as you can see, we were obviously cranking up things above zero, but also with HDR, really that's a, depending on what your ratio settings are, that's a hard cap.
And so anything that looks like it's going to be at plus 15 is not actually playing at plus 15.
It's just saying, I'm the loudest thing that's supposed to be playing right now and stops at zero.
So yeah, we ended up turning down, I think, our HDR bus as well as our master bus above that.
And we tried to meet our loudness all through and mix to a loudness standard of minus 23.
So, hopefully, hopefully we achieved that.
Cool.
Can I ask a quick follow-up?
It's more for the awesome stuff.
Was that always action-based, or was there some sort of sequencing or event-based triggers so that they would be more random and so they're meant to be fun and sort of arbitrary, I guess?
Oh yeah, we just set these up in random containers and tagged to the animation.
And sometimes if it was more complicated, we would have to hook it up through code.
The only thing that worked really different was falling, and it was more of a layered-based system opposed to a switching system.
And I love that it's becoming all the awesome stuff.
Like, we can keep calling it that.
Do we have time for one more question?
Yeah, sure. Hey, thanks. Great talk.
I was really curious as to, like, whenever you first started out, like, developing all, like, your ideas for the game, with such, like, a huge volume of sounds that you're gonna have to, like, come up with and, like, record, Like, Brian, what were you thinking when you walked into the Foley Closet for the first time and you were like, well, I'm about to eat, sleep, live here for the next three months.
What's your mental process to kind of be okay?
I'm nervous.
I don't know if I can.
I can't.
I just can't.
I don't even know if I'm gonna get it.
I wrote the scripts.
