curses. There's always one. Hi everyone. Morning. Welcome to day two. I hope you weren't all drinking too much. First day GDC parties are always a thing, right? Hi, my name's Danny and I am literally from the other side of the world.
That's 36 hours of travel every year for GDC.
It's good fun.
I'm from South Africa.
I run a studio there called QCF Design.
And I'm also part of a thing called Make Games SA, which is our South African game development community.
We're busy starting an industry body, and we're doing all sorts of cool things there.
We've gone from, I think it was like 25 people employed in the games industry in South Africa five years ago, to 250.
So we're doing pretty well.
In 2011 a prototype called Desktop Dungeons did that and won an IGF award and like changed the future of my company forever, which is pretty cool. Desktop Dungeons actually ended up finally releasing on Steam in 2013 and made its way to Android and iOS last year. But that's not what this talk is about, unless you really want to buy my game, in which case feel free and I'll stop talking.
This talk is about shipping games, or at least the impact that shipping games has on indie developers like us.
It seems that everybody has some sort of horror story about shipping something.
I mean, I know that desktop dungeons could colloquially be described as having an aftermath.
And chatting to indies for advice about what was happening to us once we finished shipping made me realize there's a lot to talk about here.
And I think it's really important that as indies we get a better handle on this stuff because hey, shipping games is a pretty large part of what we want to do.
If shipping is the worst thing in the world, your studio is not going to survive very long.
So in the interest of science, I augmented my sort of like off-the-cuff chatting to people, like, hey, I'm feeling down.
What do I do with developers?
And added 18 interviews with developers, sort of like really formal things, recorded them and everything, ranging an experience from like zero game shipped to tens of games shipped, so kind of the whole gamut.
I also chatted to a few publishers to try and get their angle on these things.
And.
After that, I turned the interviews into a series of questions that I lobbed another thirty, a further, a further forty-five developers to get their thoughts on the things that the interviews had highlighted as important areas. And now, this can be a pretty loaded topic.
Like, if everybody has a terrifying story about shipping their game, chances are they feel quite strongly about it. And there are some pretty hectic memories. So.
The whole point of this was to isolate learning from those events as opposed to like make them identifiable.
So I tend to talk in the immediate person and I only show graphs when they can be fully anonymized.
And I'm not providing any information that was given to me in confidence because I trust and respect the people who told me things that they probably shouldn't have told me.
So time for some background.
For the context of this talk, shipping a game is mostly from the indie perspective.
I'm not talking about the AAA kind of pump and dump cycle.
That's a completely different thing.
It's terrible, and hopefully it makes more indies.
Also, shipping is a nice problem to have.
One of the reasons we probably don't talk about that this much is because in the industry, 90% of games don't ship.
and they don't ship for a whole host of reasons.
And sorting out those problems up front is probably a really, really good focus point.
But if we want longevity, if we want to avoid what people are talking about next door, we need to get better at shipping.
And one of the things that came out of this is that shipping is a relatively long process.
So as a starting point, I said, cool, shipping is when the game is first released to the public.
So when players can first download your game or can first buy your game as a finished product.
And it ends when in-house development ceases.
So that includes porting and bug fixing and everything.
At some point, everybody has a stage where they can say, I'm putting this game to bed.
It's done.
Maybe they revisit it every once in a while, but usually it's done.
And shipping tends to vary in impact quite hugely, depending on the experience levels of the team working on it.
So if you've shipped a lot of games before, probably your next ship is not going to be terrible.
And shipping isn't uploading a game to a store and kind of just hoping.
And that happens a lot.
I know in South Africa, that's kind of the major issue that we have.
That's literally just putting something out there and meh.
Shipping is the point at which business intersects most strongly with game development.
So if you're not thinking about business and the business impact of your actions, you're not shipping a game.
And shipping isn't early access.
I know I'm going to get questions about this later.
But.
Early access is a preamble to shipping. Yes, some of the things you're doing are putting the game in front of people, and now you're dealing with player responses, and you have to deal with tech support, and you have to handle a whole bunch of issues, but you're still in this creative development mode. You're not really focusing very much on the business angle of things. And early access often tends to suffer when you focus on polishing your game.
Players tend not to like that because you're not giving them this drip feed of new content all the time.
You're just making that content look slightly better, and the menus have less bugs and stuff like that.
That's not really fun.
And even if you do early access, you're still going to do some kind of full launch later.
That is the point of shipping in a project like that.
So shipping is a process.
It starts well before release day.
You start thinking about how you make this game ready to release instead of what you can add and what new cool things you can change and how you can make this better or whatever.
You're literally just like, what is the product we can put out there?
And often this is the point at which development stops being fun for a lot of indies.
Because, you know, face it, feature cuts aren't joyful.
Maybe they are, but generally they're not.
The game, once the game gets to players, that's sort of just the tip of the iceberg.
So shipping continues after release.
Now you have commitments.
You've got to keep this game going.
You have players that have paid you money for what you've been putting out there.
And also, shipping seems to be difficult for everybody, or at least difficult for the developers I spoke to.
These are the morale level responses in the questionnaire for both a team and individual perspective on your morale at the start of a project, halfway through, two months before shipping, date of shipping, two months after, and then like putting the project to bed.
There's a definite downward trend.
And I mean, it's difficult to compare a six month game project to a five year project.
So we had relative cycles.
There's a definite downward trend in morale.
Although being in a team does seem to have a stabilizing influence, seeing as individual morale tended to be more negative than the perceived enthusiasm of the teams that people were part of.
So people who were having really negative experiences said their teams were more positive than they were.
So teams tended to lift people up.
And also, sometimes you would have people with like.
wildly varying levels of morale at different times in the project and their teams were always a lot more stable, apparently. The thing about shipping is that no team survives. Even if being in a team helps and the same people stick together, their roles will have changed drastically because shipping is a different thing.
And this is the part that kills studios.
Either you embrace these changes that your team is gonna have to go through and you survive or you don't.
So the reasons teams change is because a team is going to have to suddenly start performing really different tasks to what they've been doing for most of the cycle of development before. These graphs, I don't know how readable they are, show the relative experience levels from the questionnaire in the skill categories that we identified via the interviews. So we have programming, you know the classics, programming, content development, game design, testing and QA, project management and human resources, community management, PR and marketing.
business development and tech support. I don't think it's a surprise that there's a serious skewing towards the front of that list. Most of us are developers, we focus on the development side, but, and this is even more obvious in teams that have never shipped a game before. The numbers of answers where people said they had absolutely no experience in the bottom half there, kind of interesting, and a little bit scary.
And the skills that have the least experience in this graph are the ones that are only really necessary once normal development stops.
Once you stop building your content, then you have to focus on your PR and marketing and your business development and your tech support.
And if a team hasn't recognized that these responsibilities are going to change as the project moves towards a shipping conclusion, that's going to cause a lot of problems.
One of the things that happens is that development becomes support.
So, you know, hands up everyone that loves bug hunts.
Yeah!
Okay, you're all going to be super popular later, so just everybody sitting around them remember who did that.
You have customers now, and you owe them a fully functioning product, otherwise, you know, Steam refunds and everybody dies.
you have to keep that going.
If you don't support, your game suffers in sales.
Your reputation goes down.
Your visibility goes down.
Obviously, that's a terrible thing.
So support switches programming tasks into this bug finding and killing mode from the fun development mode.
And not just for a little while.
It goes into that mode for the rest of the lifetime of that game.
And testing is really, really difficult to keep up.
So in interviews, everybody mentioned the importance of testing. Every change you make needs to be tested absolutely exhaustively before you can release a patch.
Otherwise, all you're doing is making more testing work for yourself and more patching work for yourself.
And yeah, you think you've tested before. Once you release a game, testing is a completely different procedure.
And there's a major difference between experienced and new to shipping teams.
Like you could tell instantly who had done what based on how they approached testing.
And this isn't like saying experienced teams have less bugs.
Sometimes they have more.
It's literally just that experienced teams have a very, very, very different approach to testing than inexperienced teams.
And support means talking to pretty horrible people.
Like you're generally speaking to the angriest players in your player base, which is not the best thing in the world.
Design starts becoming public relations.
And in a way, design becomes basically apologizing for things.
You're no longer solving interesting problems.
You're not designing the huge fun things that the game was built around.
And in fact, you can pretty much never change those again.
You're stuck with them.
So you end up justifying the old solutions that you came up with.
Sometimes.
That's through support emails where you try and explain stuff to people, or literally through Band-Aids in code, or in your design, or in your UI.
Things that you need to support a decision you made in the past.
And maybe you have a better idea now, but changing it is probably going to impact the game in a much larger way than you would like to.
This is a bit like thousands of the worst customer emails ever.
All the memes where people are like, make it green.
Change that.
It's not good fun.
And copywriting versus design documentation management is just not the same.
It's a completely different skill.
And you have to produce a lot of PR emails and marketing copy.
And basically, that's just finding 15,000 different ways to say the same thing as opposed to finding ways to communicate about development stuff to the rest of your team.
And marketing loses immediacy.
So you're never going to be a new game again.
So press care about you a hell of a lot less.
So once your game comes out, yay, press attention.
Once your game is out for a long time, try getting more press attention.
And everything is work to create that press attention.
You have to come up with new stories.
You have to come up with new ways to try and get people interested.
It's tricky.
And a launch spike makes all your other long-term marketing look kind of bad.
The very necessary marketing work you do need to do feels less and less effective, because you're comparing your spikes to your baseline, unless you're a perfectionist.
And this is where the actual skill of marketing comes in.
Up until this point, you could get away with regular development updates and, you know, pretending to be a marketing campaign.
But here, this point is where marketing stops being a side effect of other work and it becomes a job all on its own.
That's a different set of skills.
And, obviously, this causes problems.
As the demands on a team change and people start doing jobs they're not used to or may not even understand 90% of the time, obviously things go wrong.
So, caveat briefly here. If your game flops, you probably don't have to deal with the things I'm about to explain, but you have a completely different set of problems.
You're like, yay!
One of the biggest things people complained about was a feeling of a lack of creativity.
Creative coders and designers often chafe against the boringness of support tasks, and support can just feel really stagnant. People want to work on the next game or new prototypes or the next thing, whatever it is, and it's difficult to abandon something, especially once you've shipped it and it's earning income for your team. And burnout often just adds up. Very few people know how to deal with burnout effectively.
If you crunch super hard before launch, obviously that makes everything worse. The pressure that you built up doesn't get a chance to abate in constructive ways. Everybody is still kind of angry at each other.
And the pressure of making a ship date can often sweep issues under the rug. So like, teams kind of just tend to ignore things that have gone wrong, hoping that like, once we ship, we'll fix it. It'll be fine.
We'll all go away in hot tub and everybody will love each other again. And those things do come back to bite you later.
And post-launch depression definitely exists.
I wish you could see some of the comments we got about this.
Some people are lucky, and they don't experience it personally.
But when you're looking at it from a studio perspective, and you have more than one person in your team, it's definitely real.
And you just release something that carries expectations.
Those expectations are sometimes different, and often they're not met.
And the resulting lull after development can be pretty depressing, especially if you're not actually in a lull and you're scrambling to do things that you didn't know how to do before that are different to what you did while you were working on the game.
And finally, there are people. Chances are, if your job involves staring at a screen all day, you might not be a people person. And support often means really, really angry people.
And dealing with that is never that much fun.
We used to have a saying, love and tolerate the shit out of people.
And that is often tricky.
And people write things about you and your work.
Reviews and opinions can definitely impact team morale.
And everybody's reading them, even if they say they're not.
It's like, oh, just ignore what's going on.
Sneakily, off to Reddit, see what people say.
And they never say nice things.
Or when they do, you never notice.
And all of these stuff kind of snowball and hit small teams much harder.
If your team was built to do development work, it'll have development skills.
And when shipping happens and your skill needs change, as they do, it will have to scramble to meet the needs. If you don't hire new people, this is like super harsh. And less people to man the ramparts means if something breaks, you have less options for people to go away on holiday, to recoup, to do anything different because somebody has to be there in case things hit the fan. And when you do start a new game, Working on it will never be the same as previously when you didn't have something to support.
So now any new game you make has some kind of thing in the background that always needs your attention. You basically have a baby and it needs its diapers changed and it needs to be taken to school and it needs to have sleepovers with its friends and all sorts of things like that. That is the weirdest analogy for bundling I've ever thought of.
But the biggest issue with all of this is that people expect things to be very, very different when they ship a game. So shipping is kind of this inflection point in a studio's lifetime. And it definitely is, but not for the reasons that people think. The reason skill changes are so damaging is because the skill change is unexpected and people were literally hoping for this massive amount of relief. This is a graph of the most common expectations that respondents had about shipping their games. People who'd never shipped a game before on the left and multi-shippers on the right.
By the time a game ships, teams really are carrying a lot of assumptions about what shipping means.
Often it's pretty cathartic.
And there's a big skewing towards people wanting to be done with a project after they ship.
You can see that in the number of people who are talking about moving on to new projects.
The sense of closure was a really big one.
And also, freedom to leave or start over or join a new team.
Those are all about getting out of the current situation.
So it's kind of like a certain level of unhappiness with what's currently going on.
And the fact that community management and tech support isn't like at 100% is really weird.
Who doesn't expect to do tech support when they ship a game?
And if you do, there.
So experienced developers ship games easier.
And here's what those I studied do to mitigate the issues that I just talked about.
They seriously engage in hardcore expectation management.
I know that sounds like marketing speak, and it kind of is, but expectation management is a thing.
Just being aware of what shipping entails and being realistic about that makes life a lot easier. You don't get blindsided by the same problems.
There are new problems, but they're kind of less big if they're not on top of the other ones as well.
And they track perceptions of success.
This is the thing that I think really kind of took me a while to understand, is that different people in your team have different goals.
They have different ideas of success.
And those change massively per person.
are going to be like I want the art to be absolutely amazing, other people care about making sure that your players are super happy, other people only care about like finances or review scores or whatever and it's totally cool to track all of those but as somebody running a studio or somebody as part of a team you need to kind of be aware of what other people care about as success in your team.
And you need to make sure that you, as a team, define your own success.
So that you can look back after you've shipped your game, or while you're shipping your game, and say, hey, we're hitting this success factor.
We're hitting this.
We're doing this.
We can remind ourselves, because everybody always expects their game to do better than it does, no matter how well it does.
Everybody always expects it to do better.
As long as you have those milestones and those ideas of this is what success means to us, you can remind yourself.
And that keeps people a lot more grounded and keeps people a lot happier.
And they also plan for what happens after they ship their game.
And they plan realistically.
Like I said before, a lot of people assume that, hey, I'm going to ship my game and we'll be able to hang out as friends again, and life will be good, and we'll be happy, and sunflowers, roses, and pineapples.
I don't know where the pineapples came from.
Cool.
But experienced developers don't see shipping as this big cliff where everything stops, and they're like, oh, relief.
They plan ahead.
So they plan as though they're going to need to ship again, and again, and again.
They want to ship more than one game, so they need to keep that planning going.
They also tend to have some pretty good systems around support and testing.
A good support ticketing system will lower your load or the impact of any kind of support load immensely. And a good system will let team members work together to fix issues and tag each other and all sorts of things. And there's loads of systems out there. I'm not going to do a laundry list of the things you should use. Just try them. See which ones work for your team.
And they make life a lot easier. And again, testing.
And how testing was handled across teams was a major differentiator in levels of team morale and happiness and how well people felt they were doing with their next games as well.
Teams that liked shipping had super robust testing in QA.
Internally, externally, paid, it didn't matter.
And these are pretty small indie teams that do paid external QA.
But they tested for bugs and issues all the time.
Teams that had a hard time shipping were blindsided by testing all the time.
And they only set up things towards the end of a long process of shipping, when they were already annoyed, and they were already tired, and they already felt like this shouldn't be a thing that they're actually doing.
And business is important.
This is where the business part of the games industry gets the most real for your studio.
So.
you have to know where the money, if any, if you make some, is going and how.
If you don't know how people are going to get money, how your investors are going to get paid, what your bonus cycles are, everything. If you don't have that lined up, and before you actually start making money, negotiations when dollars hit the fan are going to be absolutely terrible.
And you really need proper contracts.
Contracts give you the security of knowing what everybody's job is, what people's responsibilities are.
You have to know those up front.
That's what contracts allow you to do.
If you're not sure whose job it is to make sure the servers are running, if you don't know who's responsible for all your tech support and responsible for the marketing, that's going to be a problem.
And also, you kind of have to be aware that now that you're thinking in a business mode of your game, things might well go wrong.
And this is the time when that's most likely to happen.
Due to all the other stresses we had, or we mentioned, and the things that might go wrong, and the way that the team might be thinking about stuff, this is when shit hits the fan.
And it's a time of really, really huge change.
So make sure that if things do change, you're not just going to shut down and die, and everybody's going to hate each other.
And.
I don't know how obvious this is, but other people and companies are suddenly going to do their dondest to earn money from you. And that means everything from like G2A spam emails and you know, streamers asking for thousands of keys to people literally just trying to like scam you and get you into weird bundles and whatever.
Sometimes these things are fair and they're good opportunities.
Sometimes they're completely unfair and they're terrible opportunities.
You've got to be prepared to be able to handle that.
Don't just take every opportunity that you see.
Don't just be like, yeah, we're going to bundle right now.
It's going to be the best idea.
Chances are it's not going to solve whatever problem is preventing your game from succeeding.
Experienced developers tend to think in terms of teams, mostly because teams can do so much more than people on their own.
Even solo developers often have people that they're working with.
They have contractors.
They have acquaintances that often rock up and help them out, and they feed them, or whatever their agreement is.
We had very, very few respondents who only had, like, it's me working on my game.
I'm some kind of crazy superstar.
And teams are an exponential multiplier on the amount of work that goes into a game and the amount of the outcome that the effort has.
So make sure that the team that just made this cool thing, this game that you're thinking about shipping or that you're near to shipping now, make sure that that team can still survive and ship another thing, because chances are you're pretty good at working together now.
Sometimes that means you need to sort of take a backseat from the individual perspective and think of things as a team instead of just like, I'm annoyed about this.
And also, everyone interviewed mentioned how team communication was really, really important.
And it was really interesting hearing how different developers were talking about their teams and talking about how their team interaction worked.
And this isn't just from the perspective of friendliness, but from a trust perspective.
A team that trusts each other can critique each other, and they will always work better together.
And don't let things build up.
Handle your problems early, as soon as they appear.
A lot of times, especially while you're crunching or you're chipping and things are bad, you'll let these things build up and sweep them under the rug, like I said before.
that's going to come back and bite you later on.
And if these things are recurring, consider making pretty large changes to your team or to the team structure itself to make sure that they don't keep coming back.
If you've taken steps to try and solve something and the real reason is something else, don't assume that doing the same thing again is going to have an impact.
And these can be difficult conversations.
But everybody said they will always be way more difficult if you leave them later.
They don't get easier if you leave people alone.
And sometimes you need to be aware that your team is going to grow. In fact, all the time you need to be aware that your team is going to grow.
You're going to be working with different people. You're going to be working with contact people in terms of distribution, people in terms of marketing, etc.
So your team is going to get larger. How you communicate and how you handle that...
is a pretty good indicator of shipping success.
Teams that were OK with embracing more people and were welcoming to those people were much more likely to succeed and to stay around after their game finished.
So what lessons can we take from this sort of stuff that I've been talking about in terms of what can we do explicitly to make shipping easier for all of our studios?
I hope you've noticed that I talk about skills a lot in this talk.
And mostly that's because the skills that people require to ship a game are very, very different to what development needs generally are.
So you can get away with building a game with none of these skills for ages. That's cool.
But when you start shipping and you need these skills, you have to find them, or hire them, or build them inside your team.
Whatever you need to do, you need to start thinking about, cool, we need people that can handle PR.
We need people that can handle HR and deal with the burnout factor.
That shipping is an entirely different job, and that needs a different team.
And perspective on these things is everything.
I mean, there are detail-oriented programmers out there.
the people with their hand up earlier, who don't want to necessarily be working on gameplay code. They're great at handling bugs, and you can sort of think of it as people who would rather race cars or people who would tune them up. There's a big difference in perspective between those things, and those people see cars as completely different things, but we're like, yeah, it's a car, okay.
That perspective is really important.
If you can find somebody who has a different perspective on the sorts of skills and the problems that your team is having, life is better.
And it's your job to get these two kinds of programmers, and by extension, these two kinds of people working on everything, HR, et cetera, to play together well.
I mean, that's why this is a team sport.
There are people out there who will positively love every sort of interaction that your team seems to hate.
And if your team hates something, it's actually an opportunity to do something crazy well.
It's an opportunity to succeed, because chances are if you hate it, other people are going to hate it, too.
And therefore, their game is not going to do very well.
or you can do something better than their game isn't doing.
And finding the right skills or the person is, or the right person for a specific job like that is often this rocket fuel motivation that takes your team to another level of building stuff.
Instead of being super drained by the act of shipping, that can energize everyone.
And yeah, you kind of have to allow people to change.
As you go through a long development cycle, people's needs are going to change.
People's approaches to what they enjoy or what they dislike are going to change.
Sometimes people will say, yeah, sure, I'll try this task.
I'll try being the tech support person or being a bug ninja.
Maybe they don't like it.
That's OK.
Maybe their needs have changed so much that they no longer want to be a part of the project, and they leave.
That's OK, too.
These things happen.
And business, again, like I said, is what shipping is all about.
Generally, people who had a biz dev perspective really enjoyed shipping.
Often, this is where publishers were most useful to indie studios, because they provided a business development angle, and studio publishers lived to ship.
And from a business perspective, your studio is a garden.
So it puts out what you plant in it.
The people who've shipped 20 plus games talk about projects in very different ways to people who've never shipped a game before.
The super shippers, they're positive, and yeah, they're nervous, and they're anxious about success, and they're worried about what their game might earn.
But they believe in what they're doing.
And they can tell you exactly why what they're doing is a good idea, realistically.
And they will talk about things you have never thought of.
And, you know, again, crunch is bad.
Crunch is bad.
OK.
Many people I spoke to missed their own launch parties.
Yo.
Because they were developing until the final moment of release and then carrying on after that.
It's terrifying.
And while crunching is probably inevitable if you're not a very experienced team, it means you failed at management.
Just crunch is bad.
don't do it.
And there's very little to commend Crunch.
Most people said it was way better to push back their release date and release much later than to Crunch for months to hit something that they thought was crazy important.
Crunch changes perspectives from producing quality to producing output.
And that's a bad thing.
You're never going to ship something when you're just trying to produce output.
Burnout, when coupled with crunch, is even worse.
So one of the tricks is to manage developer burnout upfront.
Some studios had multiple teams and, obviously, workers with different kind of skill loadouts.
Think of different characters in an RPG.
And they would cycle people on and off of their projects because of it.
Others would mandate time off after shipping.
Everyone I spoke to, literally everyone, gave at least two weeks of paid leave after a game shipped at different times.
Most did more.
And you don't want to kind of force people to come back to work.
It's much better to wait until people are literally going crazy because they haven't built something in like a few weeks than to try and force everybody to sit down and like yeah, come up with the next prototype, come on, do it.
And so the next thing is to think in terms of the long term.
We asked a lot of questions about where people got mentorship from and the sorts of questions they asked.
And there was an interesting skew towards the business angle that people approach mentors for, at least in the experienced studios.
The inexperienced studios were all like, how do I program?
What does art work?
And that was a bit telling.
So experience doesn't need to be yours.
This is a conference covered in huge amounts of experience.
Go and ask people who have shipped games.
If you're worried about, oh, my project is x long.
I don't know if it's going to work.
I'm not sure how we're going to survive.
Everybody hates everyone else now.
How do we deal with this?
Lots of people here have dealt with the same problem.
And they'll be able to tell you their personal solutions.
And in terms of the long term, publishers are a really good solution.
If you can't necessarily hire people to take over the skill burden of shipping games, publishers live for that.
Interviewing a publisher and interviewing a game developer and talking about shipping was like, I wasn't talking about the same thing.
The one person I was talking about being ill for three months, and the other person I was talking about cake.
It was just like...
And where developers are like, oh, I really like being able to do the stuff that I was doing before, publishers are like, shipping is great.
We need more ideas to ship this thing.
Come on.
It's pretty interesting.
But again, with publishers, make sure they're always providing value to your team and value to your game.
You don't want to just sign with a publisher because you're hoping, like, yeah, they're not going to hate this as much as we are.
Chances are, if they don't find something to love, if they don't find a way to add value, it's not going to be worth it for you.
And budget for time after you ship.
Make sure that you're not like, hey, we're going to ship this game, and then immediately we'll go on to the next work for hire project, and we'll hope that we make enough revenue share while this is happening, and then life will be great.
You're going to need it.
I mean, if you're broke, how will you support the studio?
That's a question you need to be able to answer.
How will you find another client if you've been pushing really hard for three weeks or pushing really hard for five years to finish your game?
Deal flow is tricky.
What do you do if the game doesn't earn?
Where is your income coming from?
These are all questions you need to have and shipping is never going to be a magic bullet to solve those problems.
Like, oh yeah, we'll put this game out there and everybody will make a million monies.
No, there's like five people in the history of ever that that's happened to.
And think of your plans as being at least a year long.
So try to plan for the six-month plan, a year plan, and maybe an 18-month plan if you can.
They don't have to be super detailed.
Being asked, so what's the next game, is often the most annoying question that you'll get at dev meetups and when you're talking to press.
They're like, what are you doing next?
And that sucks.
But if you don't have an answer, it kind of means you don't have a plan.
So if you have a little bit of a plan, answering that's really easy.
And it doesn't have to be super accurate, just, you know, hey, yeah, we're going to do this next, or we're spending this long prototyping.
But be careful of putting the burden of running your studio on prototypes.
So when you do prototype, have goals.
How many prototypes are you going to do?
How long is each prototype going to last?
How long is the entire prototyping session going to last?
What new skills do you want to learn?
Who do you want to try in different positions on the team?
What new people do you want to bring in and try on the prototypes?
Goals for prototyping are crazy important, and that requires a longer term plan.
Prototyping on its own is never going to solve any of your issues.
And then the most important thing is to look back and learn.
You need to re-evaluate when every time you finish a game, or every time you get a game to the point where you're, oh, the GIF's working.
Yeah.
Every time you get a game to the point where you're thinking about shipping it, look back and go, OK, what could we do better?
How can we do this differently?
What problems could we solve?
If your PR was bad on your previous game, do something about it.
If you crunched and everyone hates each other, avoid it next time.
Figure out your management problems.
The reality is that even if you've shipped a lot of games before, and this surprised me, Every developer I spoke to always had things that they wanted to learn from about their previous game.
They were like, ah, we shipped this and this didn't work and we shipped and this didn't work and then previously we tried this thing and blah. And one of the reasons for that is that the market conditions change.
When business hits your game, when you start trying to make money off of this thing, you're never going to be shipping the same game that you or shipping into the same environment that you started building your game in.
So your predictions are going to be wrong.
You kind of need to learn how to deal with that, and that's a skill.
You've got to practice that.
And if you're already reasonably good at dealing with the problems you had last ship, then now the new problems are going to be much smaller, and they're going to feel much less overwhelming.
Oh, and there's just one more small thing before I wrap up, and we can do questions.
And this is pretty universal.
Don't live together.
Being in the same space constantly while trying to ship a game is a multiplier for every single stress I've mentioned and every single problem that developers have.
It creates an environment in which crunch is much, much easier to get into because you never really stop working.
and it offers few outlets for the relaxation necessary for people to kind of turn off work and calm down and go do other things.
You might all love each other and be the best of friends and have the best time, but the teams that live together had the hardest time.
And hey, this is not necessarily a cause and effect thing.
It might be that teams that live together for budgetary reasons also had the worst approaches to management, and et cetera, et cetera, et cetera.
But even teams that were living together because it was convenient or because they thought it was the best way that they could make games still had a bad time.
So questions.
And yeah, feel free to ask stuff about early access if you need to.
I also really wish that I could take all the interviews that I did and make them podcasts, but that would violate everybody's privacy.
There's a huge amount of learning in those things.
I strongly recommend that if you have questions about the business of running a studio or what it's like to deal with the problems you're currently having, reach out to a developer that you think has already solved those.
Chances are they'll respond.
So I feel like everybody has kind of an assumption about what the term crunch means and I never hear a formal definition. Would you mind describing your definition?
Wow, okay, I'm being asked for a formal definition of crunch.
In the questionnaire, I asked people what flavor of crunch they'd experienced, mostly because a definition of crunch is a tricky thing.
I think a lot of people use time at work, so anything above whatever your current work environment standard hours are.
And other people use amount of time taken from other activities, which is what I personally prefer.
So if you're taking time from family time, that's crunch.
If you're taking time as a team, you know, and there's a difference between mandated crunch, where it's like a producer is on everybody's ass and saying like, you have to be in that X time in the office or everybody's fired, versus people choosing to crunch on their own because they feel they have a goal or they're like, oh, I'm slightly behind on this thing, I'm gonna work on this a little bit harder.
It's the things you're taking time from that you most often don't notice. A lot of people only start thinking about crunch as crunch when they're taking time away from sleep. But there are things that you're taking things away from before that point. So, yeah.
I just wanted to say, excellent talk. It's been one of my favorites so far.
curious to know either your personal opinion or the opinions of the people you've interviewed in regards to answering support e-mails. Specifically in terms of honesty, like how honest do they recommend being? I've seen it go both ways. I've seen people be like, oh, thanks, I really feel like I understand what you're going through as a developer more and I've also seen it backfire where somebody's been like, oh, you're not fixing the net code?
You're abandoning the community.
I don't want anything to do with you.
I'm going to scream as loud as possible about it.
So general strategies for responding to support emails.
I think those change according to the team and according to the skill sets you have.
If you have somebody that's good at writing on your team, then you can afford to be a little bit more.
responsive. If you have somebody that's really good at community management and they know how to talk to your players and they're an established voice, because the things where people like often listen and really respond well is when they're being responded to by somebody that they expect to respond to them.
So there's a way that the studio communicates or there's a way that ex-tech support person communicates with people.
This can vary.
I mean, if you're funny, or you think you're funny, and you have a cool response.
I mean, we have this massively sarcastic form email when people ask us when something's coming out on the phone.
And we're like, this is the worst phone ever, and this is your search replaced for x, x, x, x, x, for whatever phone they've mentioned.
It's like, this phone is terrible.
It's the worst.
Everything is bad.
We hate it.
And then it goes in this weird tirade about movies in the 80s, and then comes back.
And it's really stupid.
But people love it.
And they love it because that's sort of how we communicate in the game already.
And therefore, that makes sense.
Generally, if you're unsure, ask someone.
And ask someone outside of your team.
And these are things that you can build strategies for.
So as robotic as it sounds, have a flow chart.
Like, is Steve here?
Yes.
Steve should answer the mail.
Is Steve not here?
No.
Are we currently angry?
Yes.
Send the email to Steve.
build processes for this sort of stuff.
And it differs according to your team.
Hey, Danny.
You emphasize testing a lot in your talk.
And you mentioned that regardless of the size of your team.
like experienced teams tend to have, whether it's a paid QA or internal QA, a very robust QA process.
And I was wondering if you could give more details about what worked for certain teams, or if you saw any patterns that emerged.
Different teams had, okay, so the question is if there were patterns in QA responses, because I was talking about it a lot, and how teams tended to test.
It wasn't so much the teams had specific ways of testing that were common to everybody.
Some teams had days of the week where no new development happened and they only did testing.
Other teams had internal QA people that were constantly testing.
So, like, there were always a couple of builds behind, and if a build was not okayed for release by this person, it didn't go out.
Okay.
And obviously, that person was plugged into their bug finding and bug system and all the rest of it.
Testing is often an interaction between how good your bug notation is and how many cheat keys you have in your game for your developers.
So if you have really, really good bug notation and your bug system has no repetition and everything is assigned to the correct person or whatever, that's great, step one.
Step two, if that person, when they're fixing the bug, is using cheat keys that players are not necessarily going to use, then you often have issues where that bug is marked as fixed and it's not actually properly tested.
So having that kind of semi-pedantic angle.
to making sure your testing is as close to what players are going to do in your game as possible, that's really important.
And then there's also kind of like an approach to testing that relies on marking systems as dirty.
So if you have a very compartmentalized game, then OK, you change your collision detection a little bit.
That makes everything pretty dirty, because if you have an endless runner, collision detection interacts with everything in the game.
But if you change an animation system, then that doesn't really mark everything else as dirty.
So you don't need to retest everything.
You only need to test those animations and what they look like for the player, because they're not going to suddenly make your scores change.
They're not going to make players clip through walls unless your animation system is really weird.
So if you make a roguelike, every time you make a tiny change, or a procedural game, every time you make a tiny change, everything is marked as dirty and you have to retest the entire thing from scratch.
So don't do those games.
They're bad.
Awesome, thank you.
Hey, Danny. I was just wondering if in interviews or experience, any of your advice would be different when dealing specifically with contractors, people who aren't necessarily planning on sticking with the team after a project is done. You know, you're in production and you can't really support like full-time whatever, so you're bringing out a bunch of people who in their mindset is the game is done, I'm leaving. Is that any different? Like do you treat them differently? I don't know.
There are some interesting approaches here.
A lot of people recommend, in terms of dealing with shipping, focusing on a more Hollywood model, which is all contractors and bringing in people for very specific things.
If you're bringing in contractors, often what happens is they leave when the game is done.
And unless you're really prescient and you're aware that the skill needs of your game are going to change, you don't have them for tech support.
So tech support falls on a different person, which is fine if that person is okay with it.
If that person is you, and all of these skill changes suddenly end up falling on you because you were running a team and now all your contractors are gone, that's going to be terrible.
There were a lot of stories where people were telling me things like that.
They were like, yeah, everybody left when the game was done.
I'm like, well, did you hire them for when the game was finished?
Or did you hire them just to finish the game?
And people are like, oh, I never thought about that part.
And also, why not hire contractors to help you with shipping?
Hire a contractor that's really good at community management.
They should pay for themselves.
Hire a contractor that's really good at bug finding.
They should pay for themselves.
So if you're only contracting people, you should pay for yourself.
your contracting loadout doesn't go away after you ship.
It just changes.
So you might need more people.
And maybe you only need them part time.
But focus on getting people to do the jobs and the skills that shipping needs.
Thanks.
Hi.
How early in the development process are you thinking about testing?
Hm, how early should you test?
Well.
Well, planning for testing, too.
OK.
I kind of think relatively early.
I'm a big proponent of fast prototyping.
So fast prototyping is essentially undirected testing really early in a project cycle.
It's not like, oh, hey, we've built the entire game design document, and then thing, and whatever, and waterfall model, and everybody starves.
It's.
Once you understand your game and you understand what you're offering your players, and the things you want your players to feel, and the goals that players are going to have while they're playing the game, and you have methods to evaluate your general gameplay, that's when you should start building a testing system, or a testing methodology.
And the earlier you build that in, less of a imposition it's going to feel on the people that have to implement it, who may never have thought about implementing something like this before.
So if you suddenly only start focusing about testing after your game ships, and you have just released patch number 5 in day 2 of your game being on Steam, and everybody is really angry with you because now the same bug that was fixed previously is back, but it's worse, people are going to be upset with your testing methodology.
If you have a robust testing methodology from super early on in development, that's great.
If you have a system that allows you to automate some of your testing because you've been building that into your game continuously, that's going to save a huge amount of time.
So I would say start as early as you have some kind of metric.
Cool, thanks.
Hi, this is sort of a question about the end. You've been supporting a game for two years and now you're going to really stop committing resources to that and move on and it's been two years and really we're done with it. Did you get any feedback from people about like how to handle the e-mails like why haven't you patched your game in six months? Well, we're done with that now and we've moved on. Any ideas about how to handle that?
like end of the relationship.
So how to handle when a game is done and you're no longer necessarily working on it actively.
Again, that depends on the team and it depends on the game.
You need to be making these decisions from a business perspective.
So if.
the cost of time of putting in more time into this game is not going to return.
It's probably a bad idea.
There's better things you could be doing with that time, essentially.
If the only reason you're no longer working on this game is because everybody's really angry with it, and you're super annoyed, then chances are maybe there are not better things you could be doing with your time, and you're just feeling the impacts of some kind of burnout or some kind of other problem to do with skill mismanagement.
So I would say that it depends on what kind of amount of work is required.
And those are always business decisions.
Sometimes you'll get somebody coming to you in a year's time or whatever, and they're like, hey, a year after you start patching a game, they're like, we want to localize this game into Swahili.
It would be a great idea.
None of you know where people speak Swahili, do you?
Yeah.
Yeah.
You fail.
they want to localize the game into a weird language like Swahili or whatever.
And you're like, well, it's going to take me half a minute to change the localization text file, because I have one of those.
Yeah, cool, let's do it.
And then you re-release because of that.
Basically, if supporting the game is damaging to your company, don't do it.
And if your communication around that is the thing that you're not sure about, hire someone.
You know, there's lots of people that handle PR.
There's lots of people that, I mean, if you go to any kind of like VC or startup environment, there are people who will tell you, oh yeah, don't say that to people, or don't say that to people, or don't say that to people.
Your communication should be in the same style.
And I think as indies, we're generally pretty open with our audiences.
So if you just say, hey, look, we gotta work on other games.
Often the easiest way to tell people you're no longer supporting a thing is go, oh, yeah, sorry, we're not doing this anymore.
Here's a screenshot of what we're currently doing.
And you give them a link to a prototype or whatever it is, and you kind of deflect people to the new part of your forum where they can interact with the current game that you're building.
And at that point, people are usually pretty happy, because they're like, oh, you're doing something new.
Well, that's cool.
So, yeah.
Rad.
Nobody asked about early access.
Yes.
It's brilliant.
That means my wording change worked.
I think we're pretty much done.
So if you'd like to head out, please remember to fill out your evaluations.
And thank you very much for coming.
I hope every single one of you ships your games.
