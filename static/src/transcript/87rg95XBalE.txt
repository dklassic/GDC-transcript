Hello? Hey. All right.
Uh, so good afternoon, everyone, and, uh, welcome to this GDC 2014 programming track session titled, uh, Deformable Snow in Batman Arkham Origins.
So before we begin, let me quickly introduce myself.
So my name is Colin Barry-Brisbois, and I was the lead rendering programmer on Arkham Origins.
And in case you haven't played it, Arkham Origins is the third installment in the critically acclaimed Batman Arkham series, the fourth one that's coming up soon.
But so the two previous titles were, so Asylum and City were created and developed by our sister studio in the UK, Rocksteady Games.
So, just like the title says, well, this talk is basically about a novel, extremely fast, and low-memory technique for the rendering of surfaces covered with fallen deformable snow, basically to represent visually convincing and organic deformable snow surfaces that we developed for this game.
So, here's a quick agenda for the talk.
So first, I'll give a quick overview of the motivations behind.
the deformable snow technique.
And then I'll explain how the technique is novel in its approach of acquiring arbitrary deformation, as well as present all the details you need in case this is something you want to implement for your next game.
And one thing to know is that while we originally designed this technique for previous gen, I'll also give additional detail on how the DirectX 11 approach we took with our friends at NVIDIA allowed us to bring this technique to the next level on PC and making it next gen ready.
In the case you haven't played Arkham Origins, the game is basically a prequel to Arkham Asylum, where the main events of the story happen on Christmas Eve.
And obviously, nothing says Christmas Eve like a snowstorm.
And coming from Montreal, Canada, we definitely know what this means.
So we kind of had no choice but to put a significant effort in making sure the visuals of snow were definitely on par with what we're used to back home.
So in the end, we wanted to support a wide range of snow environments, from the light snow that you can see on this picture, to temporary yet heavy wind gusts and deformable snow surfaces.
Now, from the previous two images, I'm sure you'll agree that most of these snowstorm effects can be covered by the usual, whether it's VFX, a fog, a sphere, or cylinder that follows the player.
You know, the usual.
But in the case of deformable snow surfaces, there's usually a visual discrepancy.
So to fake deformable snow, people have been using decals.
And it can do the job, but often it's just not enough.
Even if they're properly lit with parallax mapping, they can look pretty repetitive.
even if you use some kind of shading trickery, such as normal or diffuse randomization.
And to kind of cover all cases, you kind of have to customize decals for every way a character can interact with a surface.
You know, you'd have one for the feet, one for the hands.
And that's kind of getting insane if you think about all the possibilities that can be there, which is why people usually stick to footsteps.
Now, we wanted to come up with something a bit different, something that would capture.
the organic nature of character movements, and at the same time, the dynamics of gameplay.
So basically, we have three requirements for the technique to be interesting and, I guess, viable.
So first, it must depict iconic visuals of deformable snow.
then it must have represent, it can, it has to represent organic deformation from walking, falling, sliding, fighting, and more, so not just limited to footsteps.
And we have a low memory usage and low performance cost requirement because we're making an open world game. And so what do I mean by iconic visuals of deformable snow? I mean identifiable and realistic visual deformation, just like for the footsteps on the image to the left, where feet are not all showing the same.
If you look at the image clearly, you'll see that some footsteps there left trails depending on how fast the person was walking, if the foot was half up, half down, if the player stopped, looked around, started walking again, to the extreme extent of organic deformation, just like the image to the right.
where, you know, it could be from throwing a thug to the ground, in our case, Batman running, then sliding, then running again with the cape brushing against the ground, and making a snow angel.
And obviously, you can't do this all super efficiently and with high fidelity with decals.
So, you know, we asked ourselves and said, so has anyone tried making deformable surfaces before?
And it seems so.
And some of the results in previous games are actually quite nice for what they're trying to achieve.
This is especially true from Jean-Francois' talk on Assassin's Creed III, where the thickness of the snow also affects character animation.
And in Journey, it's the sand that does that as well.
So, and most of these approaches, they tend to modify and propagate deformation to a terrain.
And in our case, we don't have that kind of information on a unified grid, per se, like a terrain.
We mostly have, in our case, rooftops and streets.
And so, while you could definitely raycast your way and figure out where you are in the world relative to the surface, we didn't want to add raycasts.
And also, in our case, if you think about the organic part of the requirements, it's like, do you only raycast from feet?
Obviously, no. So how do you represent raycasts for something like a snow angel?
I guess you could use, you know, you could use thick raycasts, or you could use actual physics collisions and paint variable thickness and that sort of stuff.
But it's starting to get a bit complicated, and I'm not sure it scales really well to...
At some point in the game, you can end up with 18 characters on screen.
So...
And also to properly have deformables, so like in the images I've just shown, you know, it's more than just trails, you need very high and or variable triangle density.
And obviously you can say that this is feasible for Dijkstra X11.
with tessellation, which is what we did, but also the game shipped on PS3, 360, and Wii U, so we didn't really have that option.
So, like I said, we needed some option that works great on console, that is really fast to compute, and that we could extend on PC for future hardware or future hardware.
So instead, our approach is to generate these displacement-height maps at runtime.
We're kind of relying on a cheap approach, which I'll explain in just a bit.
We definitely went for something that falls into the tricks category, which I find personally really satisfying as a graphics programmer, rather than focusing on a technique that is 100% accurate or closer to ground truth.
And also, it turns out that these height maps can be of low resolution.
And the results will look nice, which is a plus, which again allows us to stay in that low memory footprint and keep it manageable.
And so with these height maps, we can then use simple things, like three or four taps of relief mapping at runtime on 360, PS3, and Wii U, with no or with none or barely any noticeable, uh, textile swimming, because the camera, the third-person camera, never gets that low with respect to the floor.
So as I said, our city has many rooftops and streets.
We can, therefore, allocate and deallocate.
So just a bit like the image there.
So we can, therefore, allocate and deallocate these height maps on a per-need basis, you know, and only keep the ones we need based on occupancy, visibility, and size.
And for our game, we also have the luxury that it's always snowing.
So the player shouldn't be too offended if he flies around and snow surfaces that he previously saw or previously interacted with.
are now back to their original min state.
So this is basically what the displacement height map can look in the game.
So this is basically just a trail I did walking around with Batman.
You can see the trail from the feet, but you can also notice the cape brushing against the ground as I turn around.
One thing to notice is that there is a gradient.
So it definitely means that this is not binary, so we actually get varying height.
during, uh, relief mapping.
So here's the matching shading part, uh, shaded part.
So the question is, how do we generate those height maps?
And so basically, here's the trick.
So all you have to do is render the snow-affecting actors or objects, such as characters, but also anything that can move on those surfaces, like interactable physics objects, for example, looking from under the surface using an ankle-high orthogonal frustum.
So if you clear to black and render these objects in white, then filter and accumulate ping-pong style.
Basically, anything contained inside that red frustum there will be part of the deformation.
And one thing to note is that we use an orthogonal frustum so that we don't want any perspective distortion.
And the frustum is basically contained inside the bounds of the deformable surface.
So here's another view of the ankle-high arthrofrestum.
We also added a scale and a vertical offset to the frestum so it can be tweaked on a per need basis, depending on if we don't have perfectly flat surfaces or if you just want to increase the range at which the camera is capturing.
So here are some more in-game screenshots on the consoles.
And, like I mentioned previously, since the deformation is not black and white, and definitely a grayscale value, a significant amount of detail is there to show the differences in movement with feet, again, being half up, half down.
You can kind of notice this on the image.
And you can also notice, like, places where the player was standing, rotated, standing on spot, that sort of stuff.
So we definitely get that kind of variation.
So here's another shot after a big fight.
You can definitely notice how the snow was patted down by all the feet during the fight, but also following the shape where the thug to the left is lying on the ground.
I mean, images are great, but let's see what it looks like at runtime.
I've got multiple calls available.
Sending them out in priority order.
And again, as I mentioned, the technique wouldn't be complete if you weren't able to make snow angels.
So there you go, some thugs making snow angels.
Now, let's go a bit more into implementation detail.
So if we take a look at the CPU side update loop.
So for every active snow surface, we figure out if the surface affecting object, again, the character or other physicalized object, is on the surface.
To do this, we have a quadtree lookup, again, because we're a city, rather than keeping an actor list for each surface.
Kind of works.
fast that way. And by active, I mean a surface that is active is basically a surface that has either thugs on it or Batman that falls into a certain distance and that has been registered, you know, to our manager. And we make sure to not have too many surfaces up close, but again, we have a two meg budget and with the low resolution of the, that's not too big of a deal.
So we override material on parts.
Again, we replace with a simple white material.
We then render actors and process accumulate with the post-process that I'm just going to discuss in a bit.
So about height map accumulation, actual surface rendering.
So this is basically done in three stages.
First stage, we take the result of that render and we apply a small blur.
A simple four-tap bilinear Poisson disk is fast.
because of the low resolution is good enough to have some nice gradients.
We then add the filtered results to the existing height map.
Simple as that, you know.
And but another trick is, so for that second stage, you can also subtract a small value to the height map.
This is how we slowly bring back the height map to its original min state.
And again, to fake the fact that it's snowing outside.
So we kind of get that for free.
And then the third stage, which is shading.
So I'll spend a bit more time on that.
So, um, for perfor—performance purposes, we always have two materials on a snow surface, the non-deformed one and the one that actually applies a deformation.
So as you probably expect, the non-deformed one is, uh, the material that— it—it just looks the same with deformation not active.
So basically, uh, you know, no deformation, less textures to fetch, less math, cheaper.
Um, and also matching materials means we can easily load out the deformation.
Now, in the case of the second case, in the case of the deformable snow material, this material effectively blends two materials in the same shader using the height map.
Now here's a closer view of this shading where you can see the blending between the two layers.
We also add glitter, but only on the top layer, on the top layer because, well, everyone loves glitter.
And for the transition between the surface, we also apply some kind of subsurface scattering color, which is based on sky color, nothing complicated, to kind of show better transition.
And so in the case of the deformable snow material, I mentioned we blend between two materials.
So for the diffuse, really simple, just lerp with the grayscale value from the height map.
All textures are fetched with the relief mapped UVs, so we only compute the offset once.
And then we use this offset to fetch all textures required.
independently of whether they have local space UVs or world space UVs.
Now for normals, we don't lerp between them.
So instead, we blend them using reoriented normal mapping.
And the reason we do this is because normals are not colors.
And you simply just can't lerp normals like that, or apply some non-vector math sensitive operations, such as overlay, that people have been using.
So basically, reoriented normal mapping uses an optimized quaternion-based approach to achieve this operation.
And you think quaternions, you think expensive, but after optimization, it's actually quite cheap.
And we've used this all over the game for detail normals, which makes a big visual difference.
So here's the code you need to do this operation.
Pretty simple.
I don't want to get into the details too much, so make sure to check the references and the blog post.
So, just some quick results.
So, in the case, this is what you'd get if you had a base normal to the left and added with simple linear interpolation a detail normal on top of it.
This is what you'd get with the all-time artist's favorite overlay that people like to use in Photoshop a lot.
And this is what the results you'd get with reoriented normal mapping.
You can notice on this technique, with this technique, how the normal looks properly, the base and the detail normal look properly combined, and how the detail fits right on top of the base normal.
And again, uh...
you know, generalizing here, but you should definitely check the blog post for comparisons with other techniques that are either faster or more expensive or more or less mathematically robust.
Now, here's some bits and pieces of additional, or general info, I guess, about the technique.
So, make sure your surface UV is aligned with the ortho frustum.
This simplifies any lookups.
It's pretty simple, you know, 0, 1 range.
Simplifies heightmap to displacement lookup.
And make sure to scale world space heightmap resolution.
based on actual world space, and try to keep texels square.
Again, we don't need high resolution, and also deformable snow looks better in low resolution.
We tried increasing it, but you don't need that.
You don't need that level of detail. And you also need to scale your relief mapping parameters.
Um, also it's nice to process surfaces that are close, but that you haven't seen yet.
You can actually use this as an element of gameplay.
Uh, in our case, you can see paths taken by thugs before you actually encountered them.
Um, we didn't end up doing proper visibility tests.
Distance is good enough, combined with update over multiple frames, which is what we do.
So we only render two surfaces, uh, per frame.
This is tweakable, but it's good enough, uh, good enough for what we need.
And also when a surface gets far, we swap the material back to the non-deformed default one, release the memory used by the surface so that other potential surfaces might use it.
We don't really fragment because we keep all of these allocations in a pre-allocated memory trunk.
And as I mentioned earlier, we've enhanced the results with tessellation.
This has been a great collaboration between Warner Brothers and NVIDIA.
So basically, this feature was developed with our good friend Evgeny Makarov at NVIDIA.
And...
different to the height, the color height map, we actually use accurate displacement based on depth.
So we capture the height map basically like a Z-buffer, and we, the latest version has two channels, so we have a minimum height field and the projected displacement.
Having those allows for additive results, which I'll show an image of what it looks like, and allows for basically any kind of deformable surface, such as a snowbank.
Um, yeah.
So here's what it basically looks like from the side.
So you have your orthogonal capture frustum, your minimum height field in green, your projected displacement in blue, and the final surface that is displaced in darker blue.
So, I mentioned that the tessellated version adds detailed displacement that is actually calculated from the normal map, which is applied globally to the snow surface.
So, this is something you don't get from the relief map, and it kind of allows us to have these...
So, the floor surfaces are described with two normals, the macro-normal and the micro-normal.
So, this is additional waves in the surface using the macro-normal.
So this is what you would get without tessellation.
So you don't get any macro deformation, pretty flat.
And with tessellation, you can notice additional waves that kind of break the uniformity of the surface.
So we like this a lot.
We have a runtime approach to we do adaptive, sorry, dicing of snow meshes, which is similar to what was presented on Monday in the Dark Text course by Andrei Tatarinoff.
So I would definitely check this out.
But moving to real geometry has definitely some advantage.
Works with dynamic shadows.
You know, shadows actually follow the surface and shift with the deformation.
We get self-shadowing, self-shading, that sort of stuff.
And ambient occlusion also comes in and fills in the trails or where the snow is.
So that's another benefit of moving to real tessellation.
And we keep the same height map resolution as on consoles, again, because it's a really low frequency effect.
So here's some of the results, which with HBO+, you can see definitely the macro waves on the upper part of the image, and how the HBAO adds a ton of volume in the final result.
Now, with regards to performance, we, on consoles, we try to keep it under one millisecond of GPU updates.
Since we update the deformable snow surfaces over multiple frames, we can kind of control that.
Again, we have a small memory footprint of two megs.
Again, because we're using low-resolution height maps, and because we allocate and deallocate on the fly.
So that's why we can have that low memory footprint.
Some issues with the technique, of course.
So, obviously, deformation with the relief map approach will never look as great as actual tessellation.
So I guess we could replace that with parallax occlusion mapping.
That's an option.
And also, we don't have.
that AO in the height map, so I guess we could derive some parametric AO from the height map.
I believe there's a talk from Killzone that talks about that in the previous years.
And the tessellated approach, well...
So when artists were working on the game, it kind of came in late, and displacement was not really taken into account.
You know, so we had issues with, like, pre-pass actors, open edges, that sort of stuff.
So some meshes couldn't use tessellation.
But we added that second channel in the tessellation stage, which allowed us to fix most of these issues with minimal artist interaction.
So future endeavors?
Well, I guess you could save the height maps and reload them.
That'd be cool.
You could also use this for other things, such as sand, mud, that sort of stuff.
We didn't need that, again, because it was always snowing.
So we could replenish the height maps.
So in summary, I presented a fast and low memory footprint technique to render deformable snow surfaces that adds a really nice level of interaction between players and the world, and depicts iconic and organic visuals of deformable snow.
And it's also a good testation case for your DirectX 11 game with minimal editing and art tweaks.
So obviously there is no I in team.
And so I would like to thank all of the following people who've helped in some way, shape, or form in making this happen.
And that's all I have, so I'll be taking your questions.
Thank you.
Hey, so this technique seems to work really well on flat terrain.
Have you tried it on arbitrary geometry, like organic terrain?
Yeah, so on consoles, obviously, because we use the colored height map, we have it on some snow banks. It doesn't look as nice.
You kind of get some deformation, but again, because of the limited...
you know, only three taps or four taps of relief map, you don't get that really nice cutoff that you would get with tessellation.
So if I had to recommend some, so on PC high end, you actually get the full, like the snow banks kind of fall apart as you go through them.
So I would recommend using the depth-based approach rather than the colored approach.
Thank you.
All right. Thank you.
