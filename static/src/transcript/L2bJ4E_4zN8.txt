Hello, my name is Fabien Graveau, and today I will present Final Fantasy VII Remake, Automating Quality Adherence and the Tools for the Future. But before, a small warning.
Most of the developments that I will present here have been done at the end of Final Fantasy VII Remake project, and only part of it have been used before the Master. But the development teams allow us to use their game to continue to develop our tools and maybe use it for another project.
First, I'd like to talk a little bit about the problematic of QA4Game and focus on the main part of this talk, that is the replay system, with an overview of the system, what kind of data we use, how we synchronize them, what kind of workflow we are using, and some results that we got.
I will also talk about a small extension, that is explorations, to allow the bot to explore the game, and conclude on some future works.
But first, game development is evolving. More content, more interactions, greater freedoms, lots of playstyles, and also the game is not finished when you release it. You have now post-release content, DLC, a patch, and so on. So this will lead to growing QA cost. And you have to test it again and again.
What we can do to improve that? We can improve reporting tools.
So you have some great GDC talk about that.
We can fill a part of the bug report automatically.
We can completely automatically report crash and assert, for example.
We can add telemetry to the game so we can gather data and evaluate the quality of it.
We can also try to make, in some way, replay or play the game automatically.
So with scripting, or with replaying already played data, or with explorations.
But first, let's focus on replay.
Even in replay we can divide it into two big categories.
Things that are done without game change.
So what you can do to control your input is basically the screen.
And you can control time. You can control the game through the gamepad driver. And the good thing, you can test the final release of your game. The one that your user will be using.
So the bad thing is that it will be really hard to support non-deterministic actions, and level change will probably need to rewrite part of the script.
So this technique is generally used at the end of the development.
You can also try to add Auto QA and replay feature on the game engine side.
that allow you to access the whole code, but probably you want to restrict you to something that is more near what the user can do. And especially in our case, we want to register in fact the game state. We can also control everything, but you want probably to restrict you on a gamepad emulator, even if time to time you may want to add debug command maybe.
You are restricted to the test build, but The good thing is that you can now try to spot non-deterministic actions, and you can be robust to some level change.
See that allow you to start to use these kind of techniques as soon as you have a first vertical slice. This is where we will focus our talk. But first, a small example.
So I will first record a small gameplay by using my gamepad.
And we record not only the gamepad input that we are using during the menu, but also the game state that we will use after to help the play.
Here we will have a tutorial and a game battle.
Battle are typically something that is not data-mystic.
And just to personalize my replay, I go forward and go back.
Ok, let's stop it for now, and replay it.
So, as I said, we record not only game input, but also game stat.
So once the game screen opens, we can push a button.
There is no additional wait time, basically.
And here we have the tutorial, skip it.
And now we use a battle bot to control the game.
So we will have different battles.
And the battle bot can even test all the commands randomly to be sure that we didn't break anything in the battle system.
And we go back to where we played.
And now we can go forward and back, as I have done in my recording data.
And I finish by.
a replay success that the game has detected.
So what is a stem? We will have this kind of UI, the launcher, but we can also have command line for Jenkins that will start two processes.
One is an auto-QA server that will be used to supervise and control the game.
The second one is a watchdog that will be platform dependent and can start to monitor the game.
The AutoQA server will ask the watchdog to start the game. The watchdog will really start the process.
The watchdog can also be responsible for recording videos and so on, screenshot and detecting corruption.
On the game start, it will try to ping the watchdog to be sure that we hang or not.
And the game will also send a generic game state that the AutoQA server will use to control the game by giving some requests.
We will have also some UI commands like stop and so on that we can send to the QA server.
Inside the game, in fact, we can split it into two parts, one that will be in fact game engine specific, that will be in charge of communication, some default behavior, and another part that will be specific to this game. We will have this kind of bot and we will say what are the game states.
So just take a look at this game specific part.
So in Final Fantasy VII Remake, we had a few bots.
So just give me some example of them.
In the left side, you have some bots where, in fact, you are merging bot usage with replay because the control of your character is completely different from what we are seeking first.
Either you control a robot arm or you are on the ceiling.
But basically, you are using replay to control where.
The middle part is a battle bot, one of the most complex ones, that means in fact both replay and a battle.
Just to be able to be sure that some battle techniques, or if you want to climb during a battle, or do things during battles, can be still replayed if needed.
The last part are very small mini-games that generally we implement a bot in one day.
just to be able to pass successfully because synchronizations will be a little bit too precise on this part which just replay data, forges replay data.
Ok, so we have talked about the game specific code, now let's talk about the generic game state what kind of data we are using.
So, generic game state will be will contain where we are, so the positions, the level ID, the orientations, and also the velocity of the characters.
When we are, we will have in fact several times because depending on what kind of game state you are, you care about different times.
You may have, like we have seen in the battle, some slowdowns that...
are used to activate the debug menu and so on, the control menu.
And time will flow in different speed during the game.
So we adapt.
UTC time will be mostly used for video synchronization.
Frame count is generally the default behavior that works basically everywhere.
After you have some...
action and event that you want to know what you are doing and also you want to know why you are doing it and this is done by knowing the game state and we say not game state but game state stack. Why? Because we can have replay data and for example we can start a follow mode so if you go too far from the NPC that you are following you may have a warning and make you go back. This is one of the game modes.
And you may have a battle that started while you are still in follow mode.
And during the battle you can have a tutorial that interrupts the battle.
So you will have always one step but you have the other ones that are continuing inside the background. So this way we have a game stack.
And what we will do to identify each text is an ID that will be based on the type and the the game specific code that will specify those values.
So game ID is generally a fixed ID for battle or cinematics.
Maybe each of one has a different name or something like that.
We can store user data that will go back when we are doing replay.
And we can store synchronization flags.
and timeout override that we'll just talk from now on, that is used to synchronize, in fact, the replay.
So we will not explain all the synchronization flags during this presentation, but let's take a look at a few of them.
So let's suppose that you have a game set and you want to go to it.
You are replaying your data, and now you are supposed to get to the game set, but maybe it's not popping up.
So if you have a non relocatable flag, it means that you need in fact to be at these positions to be able to start this game state. So what you will do is first start a timeout to say okay I will have given time to succeed and you will start to continue to do some play or motions to be able to be sure at these positions or maybe it can be either motion or also maybe weight.
And if you reach it, you can synchronize again. And after, because you succeed during your start timeout, you have a success and you start an end timeout.
before the end of the time.
Let's see another flag.
In that case, it's very similar.
We go to this state, but it didn't start.
Ok?
But now it's a relocatable flag.
So, we want in fact to continue on replay, because maybe it's not exactly at this position that the game state can start.
So, let's continue.
And we push a little bit the data.
But if we push that much, at one point we cannot push more, so we have also to decay, to push everything together.
Not only the start.
And if we start the synchronization, we can now again compute and timeout, which is based on the original recorded time, not on the current one.
and we will try to replay the data.
So, let's go on again and maybe we can go on the next part of the replay.
Other example, skippable.
Skippable means that when you are replaying your data, you have a new game state that you were not expecting.
It can be a new cinematic that has been added to the game, a new battle, I don't know.
And what the replay system will say, if this one is skipable, let's try to skip it and ask a skip request.
If not, we may fail this replay.
Most of our replay data, in fact, are skippable.
We can also have startable.
It means that now we have a session that the game state that is inside the recorded data, that if it's not there inside the replay, we will not continue to go to move.
We will ask a request to start it to the game.
This is typically used for interactions.
And so on.
Because those ones are really essential for.
the game flow. So we wanted to be sure that we start all of them at the right time.
We can also have an optional flag that is very simple. We try to replay if we get a game state that is find the future after some optional we just skip them.
Typically, optional flights can be tutorials that can happen only the first time, for example, other games. Now let's talk about the move to part. So we say that we move, but in fact we don't use directly navigation mesh. In fact, we mostly not use navigation mesh.
We create, in fact, a 3D grid map during the replay.
You will use both the recorded data, so previous replay data.
So we can create a path and say that we are able to connect them.
But also, we will have the current replay.
We will try to detect wall when we are not moving.
in the desired direction. So, for example, we wanted to go in this direction and we go on the other side. Probably have a wall. This is still probabilistic only. And if we are lost, we can try to do pathfinding. We will also assume at first that going back is possible, even if it's not a necessity.
We will also use simple heuristics to extend the map if we are blocked.
We can even, in some cases, or first simple heuristics didn't succeed, try to request to the game a pathfinding rule. That may help us to go out on some situations.
But the important part is that, in fact, the player may go to some place where you don't have a navigation mesh.
So we don't assume that navigation mesh is ready for us.
Okay, so we have talked about game generistics.
And, in fact, we can find out that a lot of things can be shared between the users.
not the game-specific codes, but as long as you have the same game engines, even the auto-QA tools can be shared between projects.
Now let's go to the workflow.
You will have someone that will try to record a replay, like you have seen, that will give a database of replay data.
We will have the game build system that will trigger all Jenkins.
that will ask a set of build machines to build the corresponding executable, and ask a set of test machines or consoles to test the game.
We will update everything to a test with a database to do some test monitoring, but we will also send it to a system to do some bug classifications.
Some of them will be sent directly.
to the QA team or to the game team because they are assert and crash and we are sure that they are relative to the game. And some of them will go to some auto QA specialist so you may have some replay failures that can be in fact change in the data that is too strong for us to be able to to cope with. So we need to record the data.
it can be also some problem in own workflow.
So we will try to analyze it and debug it.
And we will report what we need to do on the other teams.
What kind of advantages we got with this system? We were able to find real warbugs, warbugs, logics, multi-threads, something that happens even less than 0.3% of the times, so several thousands of replays to get it. We were able to test levels about 3,000 chapters per day basically.
We were able to test a large code change, so we get some requests to test some changes and test it maybe for one week to be sure to have a stable result.
We can test the game with also bad frame rate, so if you want to have a memory analyzer on, the game may be really slow and really painful to play for human player, but the system is able to cope with that.
We were able to perform tests 24 hours a day, and even aging tests that were generally about 18 hours for one test by playing the game in several tiny loops.
The main disadvantage is probably because we test only what we have recorded.
We don't go outside your path.
So if you want to do a complete test, you need to create a lot of levels.
So now let's go to look at another example, exploration example. So this one has been developed on UE4, basic UE4, and we have in fact two agents that are playing together the game to try to create a map. Like I said, we are able to create this 3D maps, this 3D grid map.
And the goal now is to find where we were not, where we didn't go.
So once we have explored part of the room we can see that we try to find another way out and together we can start to explore in fact the whole map.
So The advantage of exploration is that we can find bugs outside of the normally tested pubs that we had.
We can capture performance, so FPS, memory usage, everywhere on the map. We can check for collisions.
The problem is that by trying randomly a lot of things, we will not go very far.
Quests and games are too complex for that.
will not be able to clear any game, any level.
So what we have done is map mix both.
So here we have in Final Fantasy, some replay and explorations meshed together.
So currently we are exploring the map.
So as you can see, we try to go everywhere and we kind of try to detect where are walls.
the first time of the exploration is random, so we go there and there. But as more as we are exploring, we will start to fill up the map and we will need now to find where are other edges that we didn't explore. And in blue, you can see some path findings that we are doing to try to test other edge cases. By doing that, we will finish by filling up all the maps. So here we are finishing the last holes that are left.
And when we have filled all the holes, we can start to explore new areas that we have not yet explored. But sometimes you can have game events that pop up.
For example, here we have a battle.
What we will do is when we have new game sequence that pop up, we'll synchronize with the replay data.
So we'll try to use the replay data of these battles if they are won.
And we continue the exploration until we time out of it.
And we go back to the replay.
So we are doing, again, pass findings to go back to the end of the replay data.
That is after the battle that we have done during our exploration step, because we are able to do it.
and they are reordainable.
So now let's try to go back to the replay.
We have some cinematics and so on.
And we had another expression there.
So how we do it?
We generally record a replay.
And if we want to add expressions, we look at the movie.
We synchronize.
We add some replay.
exploration event inside the replay based on when we are compared to the movies. And after we can explore, decide where to explore in fact the different part of the map. Okay, so we go back again to the replay data now, so still with pathfinding above the navigation data. And now we can find out which to continue the game. One other thing that we can have is, we can have telemetry. So here is an example of replay data, 14 replay data at the same path. So each time that we are replaying the data without expressions, we are basically at one only path that we follow. If we use expressions, that will take more time, but now we can see that.
we have a more wider range of use.
Sure, exploration is not necessarily used everywhere in the game, but for example if you have a bomb that will explode you probably don't want to explore now, you want to go out, but so this way we have also this kind of events. But it can be used really to increase the range of the part of the game that we can test.
and get data from, for example, this telemetry tool.
So, the advantage is that we were presenting, in fact, an automation system that avoids a lot of repetitive testing. We were able to show how to share development costs through several projects by making this.
this part as more common as possible. I'm trying to have a generic game state in which we can store a lot of data, even some user data, like what kind of objects we want to interact with. So in the replay we can use this kind of ID to look for these objects and not go to the...
recorded data, but to the new position of this object. This allows us to have some margin with level change. We were also showing that we have a navigation system that is outside the game, that can allow you also to have something that is less game-specific.
And with mixing explorations, you can start to have also support for some variety inside the game level. Even if you have new obstacles during your own path, you may be able to explore rooms and go around these obstacles. The problem is that we are not able to do any qualitative QA, so graphic issues and so on.
The replay system was perfectly fine to say that the game was working when there was a black screen all over the place, just because it was able to complete the level. But we have still some graphical movies and songs that we can export to help QA, in fact to make some decisions about that.
So What we want to do is, in fact, add more of this extract video and screenshot to, in fact, for example, gather all cinematics that are inside the game and have a QA that just checks the cinematics, doesn't have to run the game.
several times to gather all the possible cutscenes depending on its different actions.
And we want to maybe use expressions on other things and positions, for example on menu or maybe on minigames.
And things that I have said that the explorers may be able to detect collisions, but this is something that we have to work on. We want also tools to find large change in level collisions.
Okay, so if you have any more questions, you can always contact me and thank you for listening.
