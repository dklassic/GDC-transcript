Obviously it's a massive spoiler warning you're going to see not the entire end of the game, but yeah.
Towards the end of inside this happens.
The HODL, a compound polyhumanoid blob of muscle, fat, skin and bones.
A project-spanning experiment involving constant iteration across several fields.
During the six years of production, the HODL was worked upon at any given moment, from the beginning to the end.
Almost all of Playdead have laid hands on it, in some way or another.
And we are going to give you a peek at what makes this monstrosity.
The movement conceptualization that I did.
The physicality of the main body or the core that Lasse did.
The handling of auxiliary attachments, legs, arms, torsos that Søren did.
And finally shading the beast, that's Mikkel.
If you haven't seen the huddle before, of course, yeah, this is the same video.
The huddle does things, comes out of water, crashes through stuff.
And this goes on for a lengthy 20 or 30 minutes time.
I'm Andreas Norman Grønvede and I'm the animator at Playdead.
I was invited to Playdead in 2011 to do the animations for Inside.
And my first assignment was to do...
concept animations for this beautiful thing.
This is a drawing of a potato by Morten Bramsen, our lead artist, and it is often referred to as the huddle drawing in the company.
Because throughout production, we would often refer to this drawing when taking decisions on modeling, shading, lighting, shadowing, and not just for the huddle, but for the entire game.
It is visually distinctive, but it doesn't show a lot of motion apart from what is naturally embedded in a picture.
And as an animator, the first thing I thought about when I saw this was the demonized boar god, Nako, that chases Azteca around in the forest, in the woods, in Princess Mononoke.
It's aggressive.
It's violent.
But most importantly of all, it morphs and recalibrates to sort of accommodate its mission.
So if it needs a leg or an arm at some point on its body, it'll just spawn it.
Another thing I couldn't stop thinking about was the old physics-driven stickiness game, GISH, where you play this little squishy.
oily blob of something.
And it deforms and it squeezes to kind of get through small gaps in the levels.
If you put arms and legs and general disgust on this, you kind of get a charming little bouncy huddle.
Another thing that I used as inspiration for the limbs, the arms and legs, was crowd surfing.
In crowd surfing, in the crowd there's a lot of hands, and they sort of share a common goal.
Some of them.
Well, they all want to move the CrowdSurfer, but some of them does that gently.
Others try and keep the CrowdSurfer fixed in a certain position.
And some just wants to tear down the CrowdSurfer.
And this sort of mixture of motifs in a crowd is a great inspiration for how the huddle actually is.
a large cluster of individuals with a common goal, but with different motifs.
So I made this really quick.
rough huddle rig.
It consists of, it has four bones in the spine, and it has about 20 bones scattered around the surface of it.
It has six legs, six arms, no, four arms, three torsos, and two bodies that are free-floating so I could pull limbs and torsos into the potato and stick them out again somewhere else.
if I needed it.
It's really quick to animate, and there's no complicated tech to get in the way.
So here comes a bunch, a couple of animations I did for concept before we even started working on the huddle.
This is the huddle first time standing up.
You can see it here.
It's actually done as early as late 2010.
And all of these animations sort of drove the locomotive development of the huddle in years to come.
And please disregard the rendering and the visuals of it, the lighting, and the quality of the video.
So it's just movement.
These are the huddle's first steps.
Martin Stianessen, our lead sound designer, was kind enough to put some of his sounds onto this test from his elaborate recordings of oily, naked people getting slapped with large pieces of meat.
I hope there's sound on.
Oh, there is.
It's just going to watch it again.
This is really embarrassing for me, because I don't really want to show these animations.
My original plan was for the huddle to have a lot of idles for when there was no input from the audience, from the player.
So when it was standing still, the huddle could have many activities for it to do in idle state, and one of them being peeing.
peeing on itself and slipping in it.
And here's a potpourri of some simple idols I did.
There's some scratching, a little twitch in the leg, an internal conflict at the top, some more scratching, and some dog scratching.
And a bird landing at the top, which we actually implemented towards the end.
In the forest scene where the huddle runs around, there's birds landing on it.
So that's pretty cool.
Six years before.
Yeah, he wants it to get back.
It's cute.
Here the huddle lifts a large crate that is reproduced as well in the inside.
There's this point where the huddle pulls a large server out of the wall and brings it to the other side of the room.
So it can get on top and.
Get over a tall ledge, which is here. You can see the scrambling behavior of the lakes.
My idea was that the legs would sort of help in every way they could, even though they didn't have ground contact or contact with the wall so you can see that.
back side lakes. They sort of they tried to still at forced to the hot and some peddling and of course we would you lies the natural squishiness of the huddle so here it pushes itself through some narrow gap in the wall and sadly, there's no gap like this in the game because we deleted it but he does push itself through a door and a hatch.
in the floor at some point in the game.
Walking on ice, of course, if we needed it.
Sadly, we didn't make any ice in the game, but we do have a newly mopped floor at some point.
And there's a spot in the game where you convert a CEO to a bloody mess.
And then the huddle will skid around in the blood that remains.
Yeah, it's nervous about ice for some weird reason.
Here's one of the last animations I did.
It's an inspiration for the pendulum scene in Inside, where the huddle kind of grabs onto a swinging crane and swings the crane back and forth to pull out a piece of wall to get through the wall.
And this animation tests a couple of things.
There's some squash and stretch in the beginning.
Let's watch it again.
and a little jump to grab on to the hook there.
We talked about keeping or preserving the silhouette versus plausibility.
As you see, I use only three arms at the top.
And if we were going for plausibility, we would need 20 arms maybe.
Before I started working on the actual game, I made 40 of these animations.
And they gave a sense of where we were heading.
And I like to think that the animations contributed as an inspiration for the team, a spot on the horizon to aim for.
And needless to say, the team outdid these animations by miles.
The broad audience thinks that the huddle consists of thousands upon thousands of animations strung together in sequence.
And that's not true, nor is it feasible.
Every game developer might already know this.
So I didn't make the huddle.
I just animated a bit on it before we actually did it.
And since it's not animated, these guys had to use magic in my book to do it.
Up next is Lasse.
So.
Right.
Hi.
My name is Lasse.
I am a senior programmer at Playdead.
And I'm going to do the next part and talk a little bit about the HODL core physics.
So as Andreas just mentioned, the huddle isn't really animated by conventional means.
It's animated through physics simulation.
So we have a skinned mesh at the end of the day.
And the bones of this mesh, they're just bound to some dynamic bodies set by the physics engine.
It's using a custom physics model developed by Thomas Cole and every frame and the huddle call reads and analyzes the world around it.
A ton of internal impulses are generated and it sinks these back constantly to the physics engine.
The huddle core is kind of like a it's like a piece that you would say, OK, this is a central piece and it's central in a set of largely independent systems.
And many of these independently generating impulses that affect the call.
So the end result is a system like a total system that is very right for emergent behavior.
Something unexpected.
We tweaked and we tweaked and we tweaked.
We spent a lot of time tweaking the totality of this system so that it would feel really good and be interesting to play with.
I would like to show you a short video just to start off with some debug overlays of the internal impulses and velocities in the core, just to give you an idea of the amount of acting forces.
Oh.
So there's still a lot of stuff going on this lots of forces in there.
So let's go through the different components of the model that the custom physics model and dissected of it.
So first of all we have in dynamic bodies and these are just rigid bodies with spherical it is a test for them and they're being they're governed by the physics engine. We here in this 26 we have 26 of them and the huddle and they live in the physics engine.
Then on top of these internal or the dynamic bodies, we have same number of internal bones and these are structures that cash, uh, the various properties of the, the dynamic bodies, such as position, velocity, mass, et cetera.
And these bones also responsible for the accumulation of internal impulses that are synced back to the physics.
And on top of the internal bones we have and it isn't the graph that established edges between the closest neighbors in them sort of like the internal mesh of internal bones when the game boots up the dynamic bodies are positioned placed on us fear and the edges I established at this time they knew that it's configuration never changes.
Every edge also has a target length.
And the target lengths are deformed all the time.
So every edge acts as a spring between a pair of internal bones.
As I mentioned, the target lengths continuously deform.
And they do this based on the scale and the total height of the core, like the configuration of internal bones.
So you could imagine vertically stretching that initial sphere configuration to get the new target lengths.
And yeah.
Then finally, we have another pair of bones.
And these are two spine bones.
These are not just animated.
And they're not just driven by physics.
They're driven by logic states, a little bit of animation.
And they are also updated every frame.
And the interesting thing is that it's of these spine bones stay effect a cluster of the internal bones.
So the internal bones given local positions.
So what's a specific spine bone.
And so when you if you take the top a spine bone and you apply talk or some type of impulse to it.
and it's moving it's going to try and forced surrounding internal bones to follow it. So we can use these fine bones to model sort of a macro level motion of the internal bones.
Essentially this is like skinning the physics.
So now we know a little bit more about the different components, let's just take a look at some more debug over this.
and yeah, the 2 spine bones drawn us couldn't frames and we have to internal mesh and I've added some coloring to the edges so we can see how they tense up and relax if they get bright their tense if they are relaxed a going purple and you can see how this is affecting or happening during a time.
Yeah, it's another type of overlay where the.
Impulses applied by the spine bones to the internal bones are colored by the spine bones that the impulse is originating from.
So the green vectors in this image is like, okay, these are impulses from the bottom spine bone and the red vectors are impulses from the top spine bone.
So we can see how the spine bones affect the internal bones.
The spine of the huddle, generally speaking, is pretty important, so I'd like to talk a little bit more about that.
specifically reconfiguring the spine that run time.
So the spine. It's also the huddles of it and the huddle is to stand it wants to find to face upwards.
But at the same time as if you have played the game, you may know the huddle tends to.
behave in a bit unpredictable way it tends to grow and fall a lot and most landings the spine ends up in a in a non-vertical configuration.
So what do you about do about these situations.
How do we get up from this horizontal pose.
And what we could do is rotate the spine to stand.
But maybe you agree that this looks a little bit silly.
So what we are doing is that we reconfigure the spine bones so that the internal structure, the core, will rise vertically.
and there's some small issues here so if we just do this for just say OK here's the new spine configuration.
These are your new it's links to the internal mesh.
Then we're going to get a pop because suddenly the constraints are all different and and for a few frames are going to get very strong forces so that the springs can contract or expand to match the new configuration.
We work very hard to avoid all the kinds of visible pops in the game to to to get the expression that we were going for and we used a lot of plans and in the same in this case we just we just landed the its links to mask the pop and and the result was satisfying in pretty much all cases.
Coming back up a little bit to surface level.
So the huddle is comprised of many types of systems.
You can make a division between these.
So there is the core.
And the core, you can consider it the internal bones on top of the dynamic bodies, the spine bones, and the internal mesh, the constraints that hold all this together.
Then next to that you have a ton of logic states and even more auxiliary systems that all affect and feed into the huddle core.
As I mentioned, the core is the part that is responsible for holding the model together.
It was a huge piece of work in its own right.
It maintains edge lengths and drives spine bones.
It receives impulses from other systems, and then it talks to the engine and handles all of that.
control impulses on the other hand they come mainly from the logic states so what happens when you push the stick left or right that's driven by and it's a different piece of code of course it knows some thing about how the course operating but all of these can be considered lot systems in their own right some of them are really complex and they really deserve time on their own we don't have time for that today And then as I mentioned there's a ton of auxiliary systems visuals, visual systems, audio systems, many of those.
And level specific systems, things that just happen in one place in the game.
And all of those lovely details, there are so many of those.
So we have the call and then we have impulses coming from control states and internal states and systems and all sorts of pieces of code that all have their own internal state and at the end of the day they feed impulses into the call and then level scripts on top of that.
I mentioned that we have It was ripe for emerging behavior, and I think it's maybe you can see this when we have such a huge network of impulses.
It becomes unpredictable and a bit emergent.
What I've talked about is just the core part of it.
and I'm going to reiterate again there are so many more things to the huddle and also on the programming side.
So next up is.
Hi, I am Søren Traudermassen. I am a gameplay programmer.
I usually do animation programming, like the gameplay that handles playing of animations.
And I joined this huddle thing pretty early when it was looking like that.
Basically just a lot more buggy.
And the task was to add a thin visual layer on top that would show some arms and legs to see if it was feasible to do whatever.
And I was not allowed to touch the physics in any ways, because that was changing constantly.
So it was pretty important to get that done early, even though it sounds like polish, because as you can see here, here we have a floating blob.
And in my opinion, this does not look very convincing.
It does not look like a big heavy mass.
I would be really sceptic whether this thing could actually be shipped and made to work.
But of course, here the story is that this is the final huddle.
This is the huddle that you see in the game.
The only thing I've done is make the legs invisible.
So to take one of my favorite internet hypes, there is a bird here, some people say.
I can only see a little hyper kid playing with his dog after eating too much sugar.
And of course, the only thing that's been done is that someone has drawn some very crude stick arms on the bird.
And all of a sudden, it's an entirely different creature.
So if we could just draw some stick legs to the huddle or something early on, we would be able to see if this would actually be convincing.
And I think this looks a lot more convincing than the other one.
And it's the same thing, just with crude legs drawn on it.
So.
That was my job so this is the huddle has it looks in the end game and it's made up of some different parts on top of those polls that we saw just before we have like a mesh we put on a mesh. It's actually on the front side of the backside is just empty because we never seen the backside and on top of that mesh we at in this case 6 legs that they added to some of the physics polls at the bottom of the huddle.
Then we add six arms.
The top left one is actually a leg, but it is behaving like an arm.
And they are always there, and they're there to have a good silhouette.
And if the huddle turns around, they reconfigure themselves, so they're always sitting kind of in that way.
And then we have a lot of just motion on the front, a lot of body parts sticking out that we should animate to make it look alive and responsive.
And then on top of that, we have several dynamic arms that are not on this picture because they are normally hidden inside the huddle, and they can shoot out and assist the huddle in grabbing stuff if that's needed.
I'll start off with the blue ones, the purely visual body parts.
In this animation here, we can see the huddle banging into a wall.
And we see all those arms and heads and things on the front.
And initially, we simply did that by attaching some ragdoll meshes and just gluing them on and then it would look like that for a long time.
In the end, we had to switch them out with some custom-made springs because of performance reasons.
And when we did that, we also had to make a system where they could retract into the body of the huddle.
If you got near a wall, you can see the head and arms on the left, they retract here.
We had to do that because when we removed the rectals, we also removed the collision, so they would clip through everything if we didn't retract them.
We could also with this the springs that we made we added some small forces on the spring so that the bodies would squirm and and and twirl by themselves so that it doesn't look like it unconscious body parts but actually like their life and the heads of turning and looking around.
But that's that's actually it it's just some rectals put on top of the mesh.
So the next thing here's his when such get interesting it's with the next.
And the task was, as you saw, the huddle was floating above the ground.
And the task was to just add legs to make it look like it was running instead.
I was not messing with the physics.
It was still floating.
But the legs would make it appear to be running.
So what people always say is, wow, didn't you use a lot of animation for that?
And this is where I'm a bit embarrassed, because I'm standing here at GDC and talking about this thing.
And it's so simple.
You could all do it.
These are all the animations I'm using.
I would have for running animations on top and the 2 on the left is for running forward to on the right is actually for running backwards.
They'll be played in reverse in reverse when the huddle is animating.
Then we had one animation for when the huddle is dangling over like a pit.
And then two for when it's falling.
And that is all we're using.
So yeah, here's the algorithm for it.
We have this green circle here.
That's the huddle ball that we attach the legs to, like one of those physics balls that Lasse told you about.
The white spot is the point where we choose that this leg is going to be sitting.
Then we shoot a ray down to find the ground.
So that's a yellow spot on the bottom.
And we can then blend between the two running animations, the high and the low running animation.
relate in relation to how far we we are from the ground.
So that's just setting a blend value between two animations.
Then we can use the the velocity of the physics body that we are attached to.
And we can just directly map that to the run cycle animation speed.
And after that, we can, as I said, blend between different cycles for flavor of the forward running or the backward running in this case.
And that's it.
Profit.
We're done.
No, except of course there's still a little bit more like for instance when you're running and all of a sudden you stop, then the animation will be in some arbitrary position and if it's in the air, no one is standing with their feet in the air unless they are a guru.
So in that case we could blend into a pose in the animation where the foot is on the ground.
And also, the legs should be synced differently.
When the huddle is standing still, the legs should be together, because that's what most people do.
But when it's walking, they should be as far apart in the animation as possible, because people don't jump normally.
They tend to walk.
It can also gallop.
It can run fast.
And when it does that, we take the animations and make them come like, doom, doom, doom, doom.
And so the synchronization is like 25% apart when it's galloping.
Also, the huddle could occasionally slide, as Andreas showed on the ice.
And it's actually pretty easy to make it slide with this system, because you can just freeze the animation.
Then it slides on the ground instead of animating.
And then, of course, if the huddle runs over an edge, we need to have some systems to make the legs dangle in the right way.
And hundreds of other tweaks along the way.
Like generally, we tweaked the huddle as much as we could for the gameplay we needed.
And if we couldn't tweak it enough, we removed the gameplay and made some other gameplay where the system worked.
That's a pretty nice way of doing games, I guess, I think.
So here's an example.
It's running back and forth.
You can see the white line is the ray cast that will ground the foot.
The red line is the velocity of the physics object.
And then it sets the animation speed.
And then you see the animation just running back and forth and being grounded nice that way.
Here's an example with the sliding.
I love this place.
This is my favorite place in the game.
The floor is slippery, so the huddle will just slide back and forth.
Actually, the physics here are not at all different from what we're seeing in the rest of the game.
The only thing we're doing is we are stopping the animation when we're taking turns.
So the feet will slide on the ground, and then we'll play a slide sound while it is happening.
So I think that's a pretty nice effect.
There was a little bit of force feedback from me.
Normally, as I said, I didn't touch the physics.
But when we are running, what we're doing is whenever a foot is being planted, we send up a little shock wave of impulses up the body of the huddle, simply to make it look more like an elephant with a lot of blubbery muscles that.
yeah, that shake when it takes the steps.
It's pretty difficult to see, actually, but when you're playing it, it makes a lot of difference.
It does make it feel more like a human, or not a human, a body, like an animal, instead of just something translating back and forth.
And there are a few of the places where I could at some the impulses to the physics when the huddle is scrapping things and moving around with a box sometimes the the box would get too far away from an arm and then I could allow the the huddle bones to so like reach out for for that box or pull the box back in also in the huddle is pulling in the server or hanging from the crane I could push a little to the huddle pose to make it more likely to look good.
But generally, this is the only real place I use physics feedback.
Okay, the arms.
We have six arms.
They are supposed to touch and grab anything that is interesting to touch and grab.
And then we have the dynamic arms that can spawn out from the center.
And the same question is also, you've used a ton of animation, right?
And in this case, we actually used some more, because we have all these idle animations, six idle animations, so yeah, that's a lot of animations right there.
Well, it's not really.
But those are the animations that play when the huddle is just standing still and doing nothing.
And if it's running around, we add some forces to them to make them a little bit ragdoll-y.
But generally, that's what you're seeing.
And on this slide, we have some other animations.
The top ones are for when the huddle is in pain, if someone hits it.
And the middle ones are when it reaches out for something, but it can't really reach it.
Then it can sort of try to reach it.
And the two bottom ones are the ones that we're using the most.
The grab animation, which is pretty much used like the legs.
That is an animation where I can scrub back and forth on the play position to have it grab things at different lengths from it.
And then the retract animation that is an emission of the place whenever one of those dynamic arms that can spawn gets tired of being alive and just pull back into the to the belly.
So here here we're grabbing a box and we have no arms in this case so the box is just floating around this is the physics model that we made for for grabbing stuff and this is again the model that I'm supposed to put some arms on to make it look believable.
So I've done that here.
Some arms with a little bit of debug drawing on top to grab the box.
And again, it's the same physics.
The arms are just visual flavor on top of it.
So what we're doing is we have an arm, and then we introduce something called an aim point.
This is a point that the arm really, really wants to reach.
So every arm has one of these points.
And the point is autonomous.
It just floats around the huddle and makes decisions of where it wants to be so that the arm will point in a nice direction.
And the arm, on the other hand, it will try to reach it.
And if the point ever gets close enough, it will play a grab animation, shoot out, and attach itself to the point until the point gets far away.
And then the arm will let go and go to idle.
Or if it was a dynamic arm, it will retract into the center of the huddle.
Then we have this is the arm manager and she is responsible of tracking interesting objects in the scene and assign grab objects, aim objects, points to that object.
So for instance, we have this crate.
The arm manager detects it and says, wait, I'm going to create these five interesting points on the crate.
And then I'm going to assign this aim point to one of those grab points.
And when you then saw us like we saw that the physics system would take the crate and like put it in next to the huddle, that arm will get close enough and it will then grab on to the crate.
It can also spawn these extra arms because at any time we want to have at least two or three arms holding a crate, otherwise it looks very floaty and unreal and there are not enough static arms for that.
So generally when we are holding onto crates, we have a lot of extra arms being shot out to grab the crates.
We can see here, here's an example where the huddle wants to climb over this crate.
And as it starts to climb now, you can see some of those points, there's one there, and another one goes down and attaches themselves to the top of the crate.
And here's on the left another point coming down.
And that will make the arms shoot out and reach the crate.
I think we just see it again.
See, look at the point just above the crate.
There's a point that comes here and attaches.
And another point comes here and attaches to the crate.
And then on the left side is a point that attaches.
Just to make the hodlite feel the stuff that it's climbing on.
And it makes it a lot more alive.
Here we are grabbing on to a crate.
we're kind of like moving around and you see a lot of arms getting in and reaching them and all those and I'm a gunsman they have to let go of them that rep on points of just shoot away as you see it in the left of the picture now that's a lot of points that just shoots out and that means that the the dynamic arms can no longer reach and they will just retract that was the system.
So generally, that is it.
That is how the huddle grabs onto stuff.
All these arms and legs are just objects.
They're not a part of the full huddle model.
They're just their own meshes that we add runtime.
So normally, that would look really bad with a lot of clipping.
But luckily for that, we have Miguel, who can do magic with rendering.
So that's why he took over.
So hi, I'm Michael on inside I mostly did visual effects like smoke stacks and splashes and well, most actually most of my time I made and maintain water over the game, but I got to do something fun. I mean this guy I did surface appearance on it and most importantly, a sunset I'm trying to make it look like more than the some of its parts and trying to do these things together with a bit of shade of glue. So yeah, let's take a look at what it looks like.
This is as he looks in the final game and we try to bunch of things with this guy a bunch of us try to bunch of things I try to bunch of things in the beginning and they has tried a bunch of things with like physical polls that are rotating around and our graphics program a good also tried making a huddle shader and after all these experiments were very close to really needing something so yeah, I got to work on on a thing here.
But before I did, a bunch of people started throwing some inspirational material at me.
I gathered a little bit of my own.
But the things that I was generally sent by the more artistically literate people at the company were things like this.
So these are some sculptures by John Isaacs.
I don't know if you can tell how we were inspired by them.
But they've got these nice folds and lumps and stuff.
But the color is, yeah, it could be better.
So we've got these paintings by Rembrandt, little known.
Indie dude.
But what's nice about these is even though he's just drawing skin, even though he's just painting skin, he's got a whole palette going on here.
He's generally just never hitting those pig tones.
It's just all over with green and blue and red and yellow.
But somehow it comes together to look skinsy.
And right in between these two we've got paintings by Jenny Savelle.
which I don't know how you can see this, but they're kind of in the middle.
They're like the colorful paintings, but then with bumps, right?
So this was sort of the main inspiration for the texture job that actually Andreas ended up doing the main texture of it.
But yeah, here it is again.
Now.
like like like sunset, there's a bunch of arms and legs that we need to go in there so let's start with the most obvious part of the shade of you which is normal us. So in the beginning of an of our normal recipe we've got it looking like this it's a little bit hard edge. It's a little bit it's a little bit dull. So let's do something to these numbers you think normal mapping right now I don't like those so.
What we've got here is just the, what you're seeing is just the regular normal huddle normals that come from the model.
And that's what the normal looks like instead of max with some debug.
And yeah, it's just too hard.
So that's actually, instead of doing normal mapping, let's do normal unmapping instead.
So here we've got the polar opposite.
It just looks like a meaty soap bar now.
That's perfect right.
So we need to find somewhere in between these 2 entities.
So that's figure out how we can do that we've got over on the far left we've got the the hot almost again in the middle we've got a sphere and if we try to project the almost as a sphere on to the huddle.
Yeah, that's sort of the what you're seeing here with the soft and that's all it almost except that just an initiator instead.
But yeah, something in between these things would be nice.
So on comes a blend factor.
And this is what the blend factor looks like.
What it likes to factor is to show detail around the edges where we are okay with showing detail, but keep it vague in the middle, very vague.
And it also likes to show the detail in the rigid bodies that are attached to it, the spring rigid bodies.
But most importantly, it likes to blend together the auxiliary bodies.
So it blends from the hard normals at the tip of the feet and the tip of the fingers into the soft normals at the elbow and the thighs, which ends up looking like this.
So if you just look at the normal buffer, at least that's where it's most obvious, you can see the legs going from looking very auxiliary-like to look much more integrated into the mesh.
And on the Lid Renderer, you can see that it's now vaguefied the center a little bit, but without looking unnatural and soap-like.
That's nice.
Anyways, these are just recipe slides I'm rolling in here.
I've got code down below.
I'm not going to explain it in detail, but if some of the more technically-minded out there want to know some greater details, you can look into them.
So after normals comes lighting, right?
So at the bottom of the lighting hierarchy, we've got ambient lighting.
A few of our characters and NPCs, actually all of them, have an ambient term so that you can see them in the dark.
It also helps them stand out from the rest of the environment.
And the huddle is no exception.
This is the huddle with just straight ambient, no occlusion whatsoever.
It looks kind of flat.
You can see some of the diffuse albedo details, but otherwise it's flat, right?
So let's add a bit of occlusion to that one.
The first and least obvious part of the occlusion hierarchy are these limb and body decals, as I call them, or actually AO decals.
We use them also on characters.
like the boy and any MPC the by nose and generally just most characters in the game.
You could think of them like point lights except instead of adding light they subtracted on multiplied out it's pretty simple and we covered it in a different talk last year and GC is on the boat.
Next up and much more obvious in the in the occlusion hierarchy is a texture right so we've got it just a big crease texture that sort of tries to give it a little bit more shape and definition again made less way even though it just spend a bunch of time became more vague anyway. The texture looks something like this it's just a 10 texture on top of the existing and in turn and that's it.
most important part of the occlusion hierarchy is this vertical gradient that's going from top to bottom. We don't use it on any other entities, but for a big entity like the huddle here, it's very important to have self-occlusion going from top to bottom. So if you look at just the tops of the far right and the one next to it, you can see that the tops are equally lit, but the bottom the far right one is very dark on the bottom, so it really helps it ground itself to the ground.
And this is what that normal gradient looks like.
It's literally just using the y normal as occlusion, nothing else.
Well, actually, it's a bit of a mix between those.
Anyways, it's in the code.
So.
After ambient what's next in the hierarchy, obviously some sort of diffuse lighting, right?
So the diffuse lighting had a bunch of requirements.
Most importantly, just not looking boring.
But it also needed to not burn out when there are very bright lights, because we like to light our characters very brightly, put them in the spotlight.
And to avoid this burning out thing, what we wanted to do is tone map it, right?
So the tone map that we used for the huddle is just this exponentially decaying tone map, which came for free, actually.
Actually, it was cheaper than free because we happen to be rendering in Unity's LDR pass, which happens to just store light as exponential with multiply blend mode.
So all we do to get this tone map is not unwind it, and that's how we get it.
Next up, I like rim lights.
So we've got this thin little rim light around the edge.
It just helps separate it from the background even more.
And now that it's totally painfully obvious already.
But it also helps to clue it in with the boy, because the boy also has the same rim light thing going for it, all the NPCs do.
And rims are just nice.
You know what I'm saying?
It's done very simply by having, if you have the depth buffer of the huddle and you sample it with an offset with the, what's it called, view normals, and subtract those two normals from each other, you get this Sobel depth.
And all we do is just amplify the existing incoming lighting with that Sobel effect.
Next up, more rims, right?
The intuition for lighting the huddle is that it looks a lot better to light it from the back than from the front, just because it's less you know you get to see less is nice to keep it slightly big, you know here this is one of those cases where it's not that from the back it's that from the side we would like to imply that it's that from the back so this sort of just amplifies that coming from the backside rather than the one coming from the front side and I ended up calling it roughness because I'm terrible at naming.
But just to show what my intuition was with that naming, if you take a regular Lambertinian term and turn it into a Ornea term, it sort of gets that edgy look around the edges.
So that's why it ended up being called that.
And finally.
it needs to be to find so the boy and other in pieces again are more to the characters so we need this guy to have the same sort of hard edge lighting we try to straight up to nances for the her call off but in a booking a little bit wacky on a big model like this one so in abusing a much smoother approach that just ends up kind of contrast enhancing the thing a little bit The only special thing we do other than add the smooth step to it is fade it away once we're getting away from lights because we don't like to have this effect where you're moving away from a light and then it's lit, lit, lit, lit, not lit, not lit, not lit.
We like to kind of smooth it off after a while.
Anyways, that's enough of boring diffuse lighting.
Next up is specular.
Well, here there's no specular.
There's a specular.
This is just regular boring Phong specular.
No tricks, or well, there is one trick.
This Phong specular is a lie.
It's a total lie.
And it's also a lie that looks a little bit like lubricant in this case.
So it would be nice if it looked a little bit more like skin.
When I made this thing, one of the Merrick who is sitting next to me, one of our artists said it would be nice if it looked a little bit more like Saturday night chicken roast. So we added a chicken skin normal map to it, which is just this normal map of dots and veins and stuff. And I'm only using this in the specular, it's used nowhere else because like I said, I like to un-normal map things usually.
So what did I mean with the specular is a lie. Well, in inside we don't actually have specular in the regular been rendering pipeline we just have diffuse lights but then we also have dedicated spectra lights that we use for just making things that what the Chinese specifically just gives us a lot more control. But we didn't want to add a ton of specular lights to the huddle and we always wanted it to look a little bit sweaty at any given time so we have is.
basically a fake lighting direction.
And it looks something like this.
We just have lights, fake specular lights coming in from the back and the top and the sides at any given time in shader.
And the way that we make sure that it's only shown when it's actually lit is just multiply it by the incoming diffuse light.
So you use the regular lighting as a mask for the fake specular light, and Bob's your uncle, right?
One more lightning thing, I promise.
Just one more.
So, subsurface scattering is a thing that can make not meaty things look more meaty and maybe more gross.
Here there's none of it.
And here there's some of it.
So this is a really, really naive subsurface scattering.
It's really just a blur of the incoming lighting buffer from the pre-pass deferred that's been sampled four times.
We sample it four times in a spiral pattern and gather in the samples and summarize the valid samples and color them red and blend them in with dodge.
And.
What do I mean by valid sample?
Well, we did have some problems with just blurring the light because you could have a hand that's casting subsurface scattering onto the chest or the other way around, which tends to not look so good and also a little bit wrong.
So we tested against the depth buffer, just making sure that we don't go too far away off center.
And we also, because we happened to get some problems where the bright floor could make things look more subsurface scattering and soapy, we also tested up against a is this the Hubble stencil buffer, for example.
But yeah, that's basically it.
It's pretty hacky, right?
Now.
You know that feeling when you're about a few months away from content complete, but you just have this killer idea and you just want to do it.
So here we've got here we've got the huddle with just the regular diffuse texture. And this is as he looks in the final cafeteria.
And I thought it would be nice if we could maybe you know and this up a little bit in certain cases so on the right hand side. It's been it's it's a little bit more bloody on the right side. It's the blues and the yellows and the greens are much more pronounced in it.
And this happened because well it happens over the course of the game that the audience of the player probably is and some of using the huddle a little bit and this effect happened specifically because I started beating up for the crane and then it's so they get spruced of a time it's not nice.
Again, here it is totally not crispy.
And on the right-hand side, we've got it looking a little bit bacon-y.
Looks like it might smell good.
That's because I hung it over an open oven for a little bit.
Don't know why you'd do this.
Yeah.
Over here, we've got the huddle in its great innocence.
Yeah.
So all these effects are using these masking systems that I came up with, which are just these very low frequency masks to do these weird effects.
We've got the bruise mask, and we've got the burn mask.
These masks are all using the same technique, even the seal mask.
And the way that they're done, you can see that they're very, very low frequency.
It's just really to localize them a little bit.
The way that they're done is.
This is all you guys that it's using a physics simulation and it's got 26 rigid bodies. So to do this effect I picked out my nine favorite rigid bodies which happen to be an equal six around the rim and three in the center.
And I just put my ear down to them with a script and listen for any sort of activity that I'm interested in.
And the activity I was interested in was, in case of a collision, we just add a little bit of damage to that bone, you know, to bruise it up a little bit.
In case it enters a trigger or, well, a bonfire, we add a little bit more burniness.
And in the case that the CEO splats on the ground outside of his office, we find any single one of these bones that's facing downwards toward the ground and we splat them up.
And then if we have this on the CPU side, on the GPU, we can then gather up these results into a mask.
I did this by just hard coding where the bones are in UV space with numbers in code, and did it until it looked right.
Here we see the IDs just exposed as random colors that I thought looked nice.
And we just take for each of these bones, we add in their, you know, Their damage data and multiplied by the local splash around where the bonus.
And then we have a bruise mask that we can send from the vertex shader.
And we can fade in our effects and the effects are pretty simple to we're pretty simple to do.
Here's the regular diffuse mask before any abuse is done by the audience.
And then with a regular tense we can take this.
Well, it's not really subtle now because I.
I amped it up a little bit so you guys can see better, but it amps up a lot more once we start bruising it.
So that's what that looks like, it's just a regular tint.
And then the same thing goes for the burn mask, except in this case there's a little bit of a dissolve effect going on, because of the intuition that bacon burns in a dissolve mask.
And finally, The blood splatter which is very dissolving and as you can see it really favors to be bloody around the edges rather than the center. It really just likes to put these little bloody dots in the center rather than splotches.
And the blood is not using any sort of texture color. It's just the color red that's being put on there and.
That's your home.
So it took a lot of weird iterations and and stuff and in the end of course I didn't make the huddle, these guys did. Thank you very much.
