Hello, and thank you for coming to my Contract Killers talk on the legal ins and outs of video game publishing agreements. I'll be looking at some key provisions in publishing contracts and suggesting how developers can snuff out any red flags that could cause issues as you develop and launch your game.
Before we get started, I'll just give you a little bit about me.
My name is Tim Ripper-Davies, and I'm a media and entertainment and games lawyer and partner at Sheridans, based in London, UK.
I work with developers, publishers, and a host of other games industry professionals on a wide range of matters, including, unsurprisingly, video games publishing contracts.
And that's what we're going to look at today in a little bit more detail.
What I hope to bring to this talk is my insight in acting for lots of indie devs and ethical games publishers in publishing contract negotiations.
If you have any questions after the session, then please feel free to reach out to me on any of the methods I've listed here.
If you'll forgive me for doing a quick plug before we get started. I'm also a passionate mental health advocate and I'm very fortunate to work as a trustee at Safe in Our World.
a video games mental health charity that advocates for better mental health awareness and support for games industry professionals as well as players.
If you'd like to know more information or if you'd like to make a donation or if you'd like to get involved then please visit safeinourworld.org for more information.
So a quick disclaimer before we get started.
So while I am a qualified lawyer, sadly this talk is not legal advice.
It should be treated as legal education and guidance concerning publishing contracts.
It is also not a definitive list of things that you can or should change during a negotiation process.
While I'll do my best to run through as much as I can in the time we have.
we still might not have enough time to cover everything that goes into a publishing contract and all those things that you might want to change or that might be nice to have changes done when you do that, go through that process.
We could easily stretch this to another two to three sessions.
I suspect that might be a bit boring, so we'll just keep it to this one for now.
However, I have written some articles that you can find on Garma Sutra, also under the Contract Killer's name.
So if you want more information or reading after the session, then please feel free to look those up.
I'm also trying to keep this talk a little bit more commercial, so we're not going to look at necessarily the boilerplate things or represent warranties that might come into a contract.
But if I can give a shout out to my fellow legal professional Chris Reid, who has given numerous talks at GDC in years past, I would highly recommend checking out his Practical Law 101, 201 and 301 series that you can find in the vault and on YouTube.
Well worth checking out.
So my goal of this talk, I want to give developers confidence heading into a negotiation with the publisher that it is okay to ask for certain things in your contract to be changed.
My main reason for doing this, well, publishing contracts are inherently drafted in the publisher's favour.
After all, they would have probably engaged a lawyer to draft it for them, or it might have been someone internally, either the producer, business development person.
that would have drafted it for the publisher.
So they've been drafting it from the perspective of protecting their business.
So by default, the contract that any publisher gives you is going to be against you.
And that might even include situations where you as the developer haven't done anything wrong and you're not at fault.
So this is what I want to rectify.
Now it's unlikely that you can expect a publisher to sign your game on completely different terms from the contract they've given you.
and the end result of any negotiations are likely to be a symmetrical contract whereby both developer and publisher have equal rights and obligations.
The publisher is always going to win on that one.
But the end result of any negotiation should be a compromise and it should be a compromise that both sides are happy with.
So to meet the same, we'll be looking at some reasonable and fair changes that developers could think about making.
And if there's any publishers listening, and I hope there are, then these could be fair and reasonable changes that you might reasonably consider accepting.
So what factors can affect your publishing terms or your negotiating position?
Now there's probably more than you think, but the most obvious is probably the publisher themselves.
And that comes down to actually some publishers won't even negotiate their terms at all, whether they're too stubborn, lazy, or other reasons.
And they're the kind of partners that you might want to think about whether it's actually a good business decision for you or your studio or your game going forward.
Other factors might include the budget you're asking for.
Generally higher budgets will come from larger publishers.
Larger publishers tend to be a little bit more unwavering in their ability to negotiate or will to negotiate their publishing terms.
If this is your first game, then you can definitely expect to be low board in terms of the commercial legals.
And they'll generally be seen, you'll generally be seen as a higher risk prospect or signing to a publisher's existing portfolio.
However, projects that are in the latest stage of development will tend to be seen as lower risk, as generally the publisher's upfront costs will be lower.
That usually allows you to be able to negotiate better commercial and legal terms.
So, what are the contract killers that I'm referring to in this talk?
To me, these are terms in most publishing contracts that will invariably affect the developer in a negative way, especially in the event of a falling out between the parties.
and even if the developer is not at fault.
So some of the red flags we're going to look at include what's happening with your game IP and to do this we'll dive into what the difference between an intellectual property assignment and an intellectual property license.
We'll then look at publishing licenses in a bit more detail and some of the bad license terms to look out for.
And then we'll look at how you can get paid and some of the terms around that and some bad payment terms to look out for.
So, Contract Killer 1, what is happening to your game IP?
In particular, are you giving this away unwittingly?
Publishing contracts will vary from publisher to publisher.
However, most of these contracts will have at least one thing in common, and that is a clause giving the publisher the rights to publish, market, distribute, and otherwise export your game across various platforms and territories.
Now a publisher needs this permission from a developer before they can actually publish your game.
Yeah, obviously, I think that's probably quite an obvious statement.
But this is because games are a bundle of intellectual property rights that you as the creator of the game, the developer will own.
So obviously the publisher needs permission from you first before they can just go and publish it.
Similar thing would happen if you wanted to use Mario in your game.
You'd need to get permission from Nintendo to do that.
Although that's quite unlikely, I'd say.
This permission is normally detailed under the Grants of Rights section, but it might also be called the Operative Provision, Ownership, Publishing Licence or something like that.
In each case, this Grants of Rights section will give the publisher the right to use the intellectual property rights in your game.
The publishing contract might deal with this in a couple of ways.
The first being an exclusive license.
That's the most common way.
And this will give the publisher the right to be the only person allowed to publish your game across various platforms in various countries around the world.
And that would even stop you as the developer from self-publishing or from engaging any other party from doing any of those things.
We'll refer to this exclusive license as the publishing license from here on out.
The other option is an intellectual property assignment.
And that's effectively where the publisher buys the IP or percentage of it off you.
It's arguable that the exclusive license approach is better, normally because publishing licenses are only temporary, so they might last for a few years before the rights revert back to you.
But the worst case scenario for both the publishing license and an assignment is that you as the developer can't get the rights and you're getting back.
that could obviously be a bit of a disaster, especially if you're planning on doing future games or have future plans for the game and the franchise you're making.
So let's look at assignments in more detail.
So how does an assignment work in the context of assigning rights in a video game?
When people talk about assignments, they're really talking about transfer of ownership.
So think of it like selling a car.
Person A, the current owner of the car, sells the car to Person B for money.
Naturally, Person B is now the new owner of the car.
Person A can't then use it again.
But they have been compensated by receiving money in return.
For video games, the transfer and assignment we're talking about is that of all the intellectual property, I'm just going to refer to that as IP, that goes into the game, and any other materials relevant to the game itself.
So the IP rights in a game being pretty much everything you can think about on the front end and back end.
It might be the things that you can see, so the art, the animation or hear the music, but it might also be the things that you can't see, such as the code and anything in the back end.
So in the context of a grant of rights, an assignment of IP in this instance, that being the IP that exists in the video game, is where the ownership of that game IP is legally transferred from the developer to the publisher.
The publisher then has the rights in the game IP and can publish it, distribute it, create new versions, basically do anything it wants after that point.
So how does this work in practice?
Well, for a finished game, it's fairly straightforward.
Developer assigns its IP rights in the game to the publisher.
Publisher then takes those rights and publishes the game.
The rights will be legally owned by the publisher.
So yes, the developer will no longer own the IP, but it might still be paid a percentage from the sales of the game, or they might have received money up front as compensation.
For a game that's still in development, it works pretty much a similar way, except that the developer will be deemed to have assigned IP as it delivers certain milestones or builds to the developer until effectively it's delivered a finished game, in which case all of the rights will then be deemed to be assigned over to the publisher.
So same thing applies, publisher ends up with a finished game, it has all the rights into that game and then can do what it wants, including publishing it.
An assignment of rights especially intellectual property rights that we discussed in this way, is far more common for worker for hire or contracted development.
So if you're working on your own IP and talking about a publisher in that sense, then you probably don't want to assign these rights away.
And you don't have to assign all of your IP rights.
Some publishing contracts may only require a developer to assign part of its IP to the publisher.
This is common in co-funded or co-development of agents between a developer and a publisher where both parties are putting in equal amounts of money.
But co-ownership of IP can be messy.
It's not like real property, so like houses, flats, buildings, and the like, where lines can easily be drawn about who owns what or who has access to what.
Even giving away the smallest percentage of your IP can cause problems down the line, especially if you don't have the permission from the other party to use it.
This will definitely cause a lot of issues or can cause a lot of issues in the event of a dispute, especially if you're the developer and you're naturally at a disadvantage when it comes to bargaining position.
And as we've spoken about at the start, if the contract has been drafted by the publisher, you can bet that in the event of the dispute, the publisher is going to come out on top.
So what does an assignment clause look like?
In fact, something like this.
In this case, the developer owns 50% of its game IP and assigns the other 50% to the publisher.
Thereafter, the game IP is held 50-50 between the parties.
So if we use the analogy of two people sharing a house, one person gets the upstairs, and the other person gets the downstairs.
So how does this work in practice?
Because if the publisher doesn't have all of the game IP, also they'll likely need an exclusive license to actually use the developer share of the IP anyway.
So we get to a situation where in order to make this work, the publisher also needs an exclusive license in order to use the developer share.
So some common arguments or reasons suggested by publishers as to why they need an assignment of your IP.
It might be 50%, it might be more, it might be less.
But the common arguments are, we need this to protect our investment in you.
This gives us something tangible that we can show our investors.
Or one more frighteningly that I heard fairly recently was, we need this in case you go insolvent.
So when might an IP assignment or partial assignment be justified?
And there's nothing wrong with assigning your rights away in theory, but if the plan is for the game IP to revert to you at the end of a set period of time, or when the publisher is in breach, then you need to make sure that that is in the contract.
Otherwise, you might have given your rights to the publisher and you can't get them back.
Whereas the previous example was pretty clear that the developer and publisher would carry the IP 50-50, you need to be aware of sneaky assignments like this one.
On the face of it, it seems fairly innocuous.
I mean, after all, what's 1% of your game?
What's 1% of the game IP?
However, co-ownership of IP rules actually give this a lot of power to the publisher in this case.
So if you're giving any share of your IP away, you need to make sure that at the end of a contract, you get the rights back.
And that goes doubly in the event that the publisher is in breach.
There's no way they should be holding on to your game IP in that case.
So some quick fixes. If you receive a publishing contract with an IP assignment, ask yourself the following questions. Am I comfortable with giving away the rights to my game to my publisher? The answer might be yes. If this is your first game and this deal gives you sufficient funds to live, pay rent, eat food, all that good stuff, then it might be the right thing to do.
If the answer's no, then does the contract provide for the game IP to come back to you after a certain period of time or where the publisher is in breach?
If not, then that either needs to be fixed or you need to make sure that you're fairly compensated for the fact that you're effectively going to be selling your IP to the publisher.
Understand the reasons why a publisher would want to take ownership or part ownership of your IP and ask why they can't get the same result from having an exclusive license.
You also need to make sure there's a carve out for your proprietary tools, tech, and code libraries.
These might be things that you want to use from project to project, or you might have already used in previous games that you've made.
An assignment of IP can be pretty much a blunt instrument.
So if you're assigning all the intellectual property rights in a game, that will also include things that you necessarily might want to use again.
So you need to carve those out and provide the publisher with a non-exclusive license to use those.
That will allow you to use those again for your future projects.
Exclusive licenses are far more common than IP assignments in terms of how a publisher gets the permission from you to publish your game.
This license will normally give the publisher sole permission to publish, distribute, and otherwise exploit the game across various platforms and countries for a set period of time.
In granting this permission, you're also going to exclude yourself as the developer from being able to sell the game during this time.
However, if it's done wrong, an exclusive license can also be equivalent to an IP assignment or an IP transfer, and you can easily lock up your rights with the publisher if you're not careful.
So an example of a publishing license looks like this.
As you can see in this slide here.
sorry, previous slide, as you can see here, you can see it gives exclusive right during the term and throughout the territory to be able to publish and otherwise export the game on the platforms.
So as you can see from that example, a publishing license is normally limited in the following ways.
Term, that being the length of time during which the publisher can promote and sell the game, this would normally be somewhere between five and 10 years.
The territories, that being the countries around the world where the publisher can promote and sell your game.
And the platforms, the formats or distribution channels where the publisher can sell your game, such as Steam, Nintendo Switch, Playstation, Xbox, that kind of stuff.
So this brings us to our second contract killer, Bad License Terms, where we're going to look at these publishing licenses in a bit more detail.
So we'll start off by looking at the first two areas that will be caught by a publishing licence They're the term of the agreement and the territories caught by it So here's an example of a pretty standard definition of a publishing licence term describing how long the publishing licence will last for So as you can see it says five years and that's nice within the standard range we're most likely to see But be aware of the second part that's highlighted in red here it's actually five years from the last version of the game that's released.
So if the definition of game includes any DLC, add-ons, or maybe even ports or different versions of the game, then the five years will be reset every time a new version is released.
So you need to be aware of that.
So check the publishing term quite carefully.
As we mentioned earlier, the exclusive part of a license is the permission given to the publisher to do certain things.
to the exclusion of anyone else, and that includes you as the developer.
So normally these publishing licenses are granted for a set period of time, that being a fair amount of time for the publisher to have a fair crack at publishing your game, normally between 5 and 10 years, but they vary from publisher to publisher.
So you need to be aware of long license periods. For example, if a publisher's license is lasting for 25 years, like in the bottom example here.
Or you need to be careful where a publisher takes the rights to your game in perpetuity.
Like the top example.
That's obviously perpetuity meaning forever.
In that case, you need to be prepared not to get your rights to your game back.
And that's even where the publisher's not doing a good job.
So, how do you fix it?
Well, simple answer, ask for a shorter license period.
The publisher needs a reasonable amount of time to publish the game and that's it.
If they need anything longer, then ask why and try and get an understanding of how they plan to use your rights going forward.
You don't really want their rights just sitting on the shelf or them not distributing your game after 10 years time.
After that time, you probably want those rights back so you can do something with them yourself.
And even shorter licences might be able to run on beyond the initial agreed term.
And that might happen through an auto renewal mechanism.
This might work through inaction by either side.
So for example, the licence term we saw on the previous page of five years, it might just renew for an additional period of one year, and that might be if no one has given notice to terminate before the end of that five years, the contract will just renew either for another year, might be two years, might be another five years.
So it's sort of like your PS Plus or your Amazon subscription.
If you don't terminate in time before it renews again, effectively, you have to pay again and you're locked in for another year.
So how to fix this, you need to know how long the license term runs for and how much notice you need to give before the end of the initial term in order to get out of it, if that's what you want to do.
Another example of an auto-renewal might be like the example here.
Here the contract extends for one year terms, where the game is still generating revenues above a certain threshold.
And that enables the publisher to continue benefiting from selling the game, even though the initial term has ended.
And it's how you'd expect those smash hit games to still be, or how a publisher can make sure that an evergreen game or game that's an absolute smash hit, how they can ensure that they can keep publishing it, even long after the initial term might have ended.
In theory, this might be a nice compromise, since the game itself that you've created and the publisher's marketing actions should have helped generate revenues long after the game has been released.
However, you need to be aware of setting the threshold too low. Like the example shown here, €10,000 might be too low a bar to set when taking into account the publisher's cut.
In this case, it might be better for the developer to self-publish their own game at this point, so you might want to ask for the rights back.
Let's look at how far a publishing license can reach.
Most publishers will ask for worldwide rights to publish your game.
That's so they can sell it in as many countries as possible.
So you normally need to check the definition of territory in the agreement to see exactly what this is and exactly what they're taking.
And this is a genuine example of a publishing country that I've seen recently, how they define territory.
And I just quite like the ambition that they show here, that they might need the rights to cover parts of space in the future.
And there's nothing wrong with a publisher wanting to publish the game in as many countries or planets as possible.
As a developer, you want the game to get in the hands of as many players as possible around the globe.
However, you should ask the publisher how they plan, what is in their marketing plan, and to confirm where they plan on selling the game and how they're going to do it.
It is unlikely that the publisher has a presence in every territory around the globe.
So they're going to be using third parties in different territories to help them do it.
So you should know how they plan to do this and who they plan to use.
If possible, ask for case studies based on the developers in their portfolio.
If they don't have plans to publish your game in any of the territories, for example, China, then you don't necessarily need to give those rights away.
It's better you find another partner for those rights.
That might be a different publisher or might be doing it yourself, rather than have those rights waste away on the publisher's shelf.
So contract killer number three.
Still looking at bad license terms, but this time we'll look at the platforms and porting.
So as we've seen with term and territory, the publisher is going to want to take rights on as many platforms as possible.
They'll want the license to be as long as possible and to cover as many countries as possible too.
As you can see from this example.
the publisher is asking for rights to pretty much all platforms.
And that also includes a catch-all so that they can put the game out on any next generation platforms that arise in the next 10 years.
So yeah, it's pretty broad.
The rationale that publishers will give for this is that they want to control the marketing across all territories and platforms and thereby control the quality.
However, if the publisher is taking rights for all platforms, you should check whether you have to deliver a version of the game for all of the platforms too.
So first off, check what are you being paid to develop.
If you're only developing the Steam version of the game, and that's the only version you're going to deliver to the publisher, then you need to include that in the contract.
Otherwise, you might be on the hook to develop console versions as well.
A key thing to check might be including PC versions.
PC might also include Windows, but it might also include Linux and macOS.
If you don't have the ability to develop for Linux and macOS, then you might want to exclude that.
And you might want to specify that PC means Windows PC only.
If the contract is clear as to what platforms you're delivering, then you should ask who's going to be developing the other platform versions.
If they don't have plans to develop these right now, then ask why they need the rights right now.
If the publisher is only providing refunding for the Steam or PC version, as we mentioned, then you shouldn't necessarily have to lock up the rights for console, mobile, or other non-funded platforms with that publisher, unless they've shown you that they do have specific plans to create versions for those games and those platforms, and that they're going to cover the cost of doing so.
Rather than locking up those rights to the start, a more developer-friendly approach might be to give the publisher a first option to publish on those platforms or to fund the publishing and fund the development and publishing of those ports or console versions.
That means they don't get the rights initially to make them, but they get first dibs in case they want to fund them or develop them down the line, or in the event that you want to find an alternative funder or third-party partner to fund and develop them.
So that's a fair and reasonable approach for both sides, since the publisher gets a fair chance to fund those ports at a later date, presumably once they've seen how well the game is sold on the initial platform that they're funding you.
But it also allows you as the developer to explore other options in the event that the publisher doesn't actually pick that option up and they aren't interested in publishing the game on those consoles.
If it's agreed that the game will be ported, then check who's doing the porting.
Do you have the in-house expertise to develop the console versions?
If so, then you might want the first option to develop them and be paid for doing so rather than the publisher doing this in-house or engaging another third party to do that development.
If you don't have those expertise, then the publisher might develop these in-house or they might engage a third party, but check the contract to make sure that it provides something about the quality of the development of those ports.
As the developer you're going to be providing various warranties and representations and legal promises about the quality of the game that you're delivering to the publisher.
So if the publisher or its third party partner is going to be porting the game they should be providing those same legal promises to you about the quality of the ports.
Now they'll want to carve out the quality of the source materials and source code that you provide them but everything else that goes into the port is going to be their responsibility therefore they should be responsible for guaranteeing its quality.
So most publishing contracts won't include that as standard so be sure to ask a publisher to include that or add it in yourself.
The worst case is the publisher or its third party partner develops buggy ports, they don't review very well, and effectively tank sales across all of the other platforms.
It's not your fault, and it's unlikely that you can do anything about it, and it's unlikely you can get out of the contract because those provisions won't be added in the standard.
And that's something generally that I've seen when a developer has come to me too late.
It's really sad to see.
Next, contract killer number four. Still bad license terms, and hopefully this shows you how much there is to think about when it actually comes to looking at the publishing license and what it covers. In reality a publishing license is likely to extend beyond just your game.
For example, many publishing licenses include rights over merchandise such as the game's soundtrack.
But it might also include other things as well.
So it might include rights to publish future games, like sequels or prequels, for example, games set in the same universe.
But it might also include just the next game you make, Full Stop.
So if a publishing license is exclusive and that prevents you from doing certain things, then your publisher should be able to justify exactly how they want to use the rights they're taking.
So some additional things to check through in respect of a publishing license scope are as follows.
Sequels, prequels, and spin-offs.
Does the publishing license extend to other games that you might develop in the future, like these?
Does the publisher even have a plan to publish these in the future, like now or in the future?
If not, then why lock them up?
If a publisher does want to lock down future games, or thinks that a game might turn into a franchise, then there's a couple of developer-friendly ways to go about this.
The first off is a writer-first refusal, or first option it might be called.
So to recap that, it doesn't give the publisher the right straight away to develop these future games, but it does give them the first in line or first opportunity to fund them and publish them if they want at a later date.
They might also, especially for some larger publishers, they might want an option to acquire the game IP.
So scrapping the exclusive license and going to the assignment we talked about earlier.
They might want to do that so that they can control the franchise and create future games.
You know, and they might see a real value in doing that.
So similarly to the right of first refusal, the option is likely to be framed as a way of ensuring that the publisher is first in line should you decide to sell the IP or work with someone else to do something with it.
Alternatively, it might just be a way that the developer has a right to negotiate you, negotiate with you about buying the IP during the term of the contract.
And neither that right of first refusal or the option to buy your IP should continue or last beyond the term of the publishing agreement.
So include and also include a time limit on the period of negotiations in respect of the right of first refusal and the option as well.
That's going to keep both sides honest, and it prevents negotiations dragging on indefinitely that are another way of locking your rights and preventing you actually doing what you want to do.
You should also check if the contract includes other restrictions that might prevent you from developing or releasing future projects, either indefinitely or for a limited time.
Anything that stops you from doing something on an ongoing basis should be reduced or cut down to a defined period, so you know those restrictions are going to end at some point.
The restriction shown here is aimed at protecting the publisher's investment in you and is to prevent you from leasing a similar game.
You just need to check the scope of this restriction, or these sorts of restrictions that you might find in your contract.
In this case it's pretty broad. It includes not making a game in the same genre.
So these restrictions are only to preserve the publisher's sales of the game.
That is in your interest too, but if the restrictions are too broad then you should ask them to be changed.
Check what the publishing license also actually attaches to.
Does it include other rights like merchandise, the soundtrack, or film TV rights?
In some cases, the definition of game might also refer to merchandise, or ancillary products, or something similar.
These might be subject to the same exclusive publishing license.
And as we've drilled to death already in this talk, exclusive also means that you can't do anything with them.
In some cases you might be fine with these rights being in the publisher's hands however in each case you should know what the publisher plans to do with it and do they actually have any plans to use them.
Also if you've already signed deals, merch deals with companies prior to signing with the publisher then your exclusive licence with the publisher might also cut across that and it might put you in breach of the other deals you might have already signed.
So you might need to carve those out or carve it out with the publisher or just give the publisher non-exclusive rights so that you haven't harmed their rights, they still have some rights to use it.
But you make sure you're under breach of any other contracts you've signed.
Another option that we often see now is that, especially indie developers, might grant rights to the composer of the game's soundtrack so that they can release the game or benefit from a revenue share from sales of the game's soundtrack, or allow the composer to sell the game's soundtrack or distribute it via their own channels, whether that's on Spotify, Bandcamp, Soundcloud, or something similar.
So if you do have those terms already agreed, then you again, you need to make sure that you don't cut across them with the publisher.
Just make sure that the publisher is aware.
It's highly likely that you can come to some arrangement whereby both sides are happy.
And also check whether the scope of ancillary products includes film and TV rights.
that relate to the game.
Does the publisher have any plans to use these?
If not, then just ask to remove them.
The publisher can also always ask for a right of first refusal like we just talked about.
So if you do plan to use them in the future, or if they want to use them in the future, they can always come back and ask, and you come back and negotiate for them.
So now that we've looked at bad license terms, let's turn our attention to how you actually get paid.
So the primary reason for most developers wanting publisher support is access to funding.
That might be cash during development so that you can actually help finish your game or so, you know, helps pay the rent, helps you eat and live.
And we'll refer to these development payments that you receive prior to the launch of your game as front-end payments.
But obviously publishers also have a great marketing reach.
So they might also be providing with revenue payments as well.
That being...
revenues generated from the sales of your game and we'll call these back-end payments. So for this section we'll look at those bad payment terms that might affect how you get paid during development.
So what are front-end payments? So as I've just alluded to, these front-end payments are made by a publisher to you during development. They usually come in the form of development fees, development advances, but you might also see them referred to as guarantees or MG, something like that.
So for simplicity, I'm just going to refer to them as front-end payments.
That being fees you received prior to the release of your game.
Now, it's unusual for a publisher just to hand over cash to you without any sort of control in place.
So as such, front-end payments are going to be tied to a couple of things.
That will be your obligation to develop and deliver certain builds or milestones.
and they will almost certainly be tied to the publisher's approval of those builds or milestones that you've delivered.
So you're only going to receive a front-end payment in respect of that build and milestone once you've actually delivered it and once the publisher has signed off on it.
So how is this dealt with in the contract?
So most publishing contracts will have terms outlining the delivery evaluation feedback mechanism and requirements.
For example, your delivery of a particular milestone or build is going to be tied to dates in the contract, most likely linked or listed in a milestone schedule or delivery schedule or something similar.
There should then be a mechanic that provides for the publisher to review that milestone or build.
And they'll either approve it and that will trigger payment.
or they reject it, whereupon the developer, you will have to implement fixes and then resubmit the build to the publisher, whereupon that whole process begins again.
But what happens if you don't get publisher approval?
Well, there might be valid reasons why a publisher has rejected a milestone. For example, it doesn't comply with the agreed specification or the build requirements that have been set out in the milestone schedule. However, what if issues are there that aren't your fault?
An absolute publishing agreement classic is not accounting for delays that are caused by the publisher.
And that would be, or can be caused, especially where there's no timing specified for the publisher to perform certain actions, such as reviewing the bill that you've just delivered.
This can be a major issue, especially if the publisher's delay in carrying out their obligations is going to affect your ability to get paid.
It's also grossly unfair, because you can see the knock-on effect.
You deliver a build.
You're waiting for the publisher to sign off on it.
They don't sign off.
You don't get the money.
You then can't finish the next build, because you haven't had the money to develop it.
And then you're in breach of the contract for not delivering that next build.
So again, that's going to then put you in breach of contract and it's not your fault.
And how is that fair? So how can this be solved? So to avoid delays that aren't your fault, you can put time limits on the publisher to perform certain tasks. In particular, there are obligations around evaluation and approval of builds and milestones.
This is completely normal practice and publishers are generally amenable to having a reasonable amount of time to review each milestone.
normally 10 working days.
But if a mechanism like this isn't in the contract, then be sure to add it in.
But what happens if you still haven't received a response after that time limit is up?
Well, it's also common practice for a developer to ask for automatic approval if the developer hasn't given his approval or rejection within the agreed time limit.
That will be approval for the purposes of payment only, I might add, but it's usually a fair compromise because it means that you can get paid and you can invoice for the next milestone and start working on that.
But it also allows the publisher for you to also allows the publisher to ask you to make changes or fixes to that build in the event that it's broken all those bugs that need fixing.
Publishers should also not be rejecting milestones or builds that meet the agreed specification or delivery schedule.
That is, they shouldn't just be arbitrarily rejecting builds.
So if it isn't already included in your contract, then you need to be sure to add in a requirement on them to provide reasonably detailed feedback where there is any rejection.
The whole point of the evaluation and review process is so that the development of the game stays on track.
And the publisher will guide that development in the event that it goes off course.
So any feedback or rejection that they give needs to be sufficient or should be sufficient for you to be able to make the necessary changes to the build in order for it to comply with the agreed specification delivery schedule.
The publisher shouldn't also change the agreed scope or specification of any deliverables once that's been fixed.
So...
It's good practice for the parties to agree the specification and milestone deliverables at the start before anything happens.
You might also have a more agile process whereby the next builders agree between the parties once you've delivered the next milestone.
That's also fine, but make sure that the negotiation process is fair and they are adding any and they aren't adding any unreasonable features that require more time, money or resources for you to actually implement so check if you've got the creative control and vision of the game that you have control over that if a publisher wants to make changes to the agreed specification or delivery schedule then this should naturally require your approval As of all of them, any changes that require more time, money or resource, that being, you need to bring more people onto the project to help, should be seen as outside of the agreed specification.
That's not to say you and the publisher can't agree those changes at a later date if you want, but you should be ensured that you're paid for any extra work or deliverables.
And that would normally require an amendment to the contract to adjust the agreed spec and reflect the fact that you're going to get paid a bit more in order to do it.
To avoid this scope creep, you want to make sure that the contract should include a change mechanism in order to avoid that.
And that scope creep term is normally associated with freelance or work-for-hire arrangements, but it can also play a part in publishing agreements too.
And you need to check the timings in cash flow and how long it is going to take you to get paid.
One of the final points of this section is to understand how long it takes for the publisher to actually send you the money, and then how long it's actually going to be until it hits your bank account.
So always check the payment terms of any contract.
The payment terms are the length of time that the publisher takes to make a payment.
In particular, you need to make sure that this doesn't leave you in a bad cash flow position.
An example of a standard payment term might be 30 days from publishers approval of a milestone.
So that means once the milestone has been approved, then you still have to wait 30 days for the money to hit your bank account.
If we take a step back as well, and if you factor in the fact that a publisher might have 10 working days to approve a milestone or review a milestone, then there might be additional time added on until you actually get the money from the publisher, especially if there's been a round of reviews or fixes.
So make sure that this doesn't leave you in a bad cash flow position.
If the publisher's payment terms are too long, then ask if they'll change them.
You shouldn't put yourself in a bad financial position, and most publishers are happy to move milestones around to make sure that you aren't left in the lurch, and make sure you do have money to live while you're making the game.
So contract killer number 6.
So we're still looking at bad payment terms, but this time on the back end.
That being money that the publisher pays to you once the game is released.
So backend payments are usually in the form of a revenue share, but you might also see it called royalties, profit share, or distributed earnings, or something similar like that.
Essentially, it's a percentage of the revenues that the publisher has received from selling your game.
But backend payments should factor in.
any money that the publisher has received in respect of or revenues attributed to your game.
So not just sales of the game itself, especially if the publishing license includes more than just game sales, it should include money that the publisher has received from other sources as well such as cash from exclusivity deals. So for example if they've signed a deal with for the Epic Game Store or Xbox Game Pass for example.
If your game includes this functionality, then it should also include in-game purchases or in-game advertising.
If merchandise is caught by the publishing license, then you'd also expect revenues from merch sales to be included in this definition too.
And don't forget, if they've got the film and TV rights, you should make sure that you're paid if they ever use them or utilize them.
The back-end payment is going to come to you after the publisher has made certain deductions.
So it's unlikely to be a percentage based on the gross revenues that the game has generated, that being the total amount of money based on number of sales multiplied by the actual sale price of the game.
Far more likely is that any back-end revenue share is going to be calculated as a percentage of net revenues.
That's the amount that's left over once the publisher has made certain deductions from gross revenue.
So how much does your publisher cost and what deductions are they making?
Publishers are not doing business with you for free and like most businesses, they will want to make a profit and a publishing agreement gives you an indication of how they're going to make that profit from you and your game.
So to guarantee a return on their investment, most publishers will aim to recover their sunk costs incurred in publishing a game before paying any back-end payments.
So the amount and timing of back-end payments is likely to depend on the value of those publishers' costs.
As such, you need to know exactly what the publisher is going to be charging you so you can show that they're paying you correctly.
So to do this, you need to check the definition of permitted deductions or net receipts and net revenues to determine what the publisher's costs are.
So publishing contracts will deal with this and the publisher's costs in different ways.
A common example is to have a list of permitted deductions or agreed recoupable costs that the publisher can deduct from gross sales revenue.
An alternative approach is to have a definition of net revenues or net receipts, that being the amount of money left over once the publisher has deducted its costs.
And in that definition, there should be a list of deductions that they're taking.
In either case, it's not unreasonable for you to ascertain exactly what the publisher's costs are.
And you should be asking for evidence that they've incurred them and exactly what they've been spending.
If a publisher is providing you with front-end payments or advances, then they'll normally have to recoup those first as well.
Ditto with other publishing costs such as marketing, localization, or QA, depending on what services they're doing for you.
However, if a publisher is looking to recoup any internal costs, particularly relating to marketing, porting, or QA services, then you should query the value of those.
Internal publishing costs can be easily inflated and they might not actually represent good value to you as the developer.
For example, it's reasonable for a developer to ask for a publisher's recoverable marketing costs to be limited to third-party costs only.
That being the cost that the publishers are incurred engaging an external PR or marketing firm to help give the game an extra marketing push before launch.
Publishers should also be able to evidence its incurring of any of these publishing costs.
So ask to see evidence of invoices of third party suppliers so that you can verify that against the statements or information that the publisher is providing to you.
And as a matter of course, most publishing contracts will include audit provisions and that will allow you to check the publisher's accounts and sales records to make sure that you've been paid correctly.
If a term like this isn't included in your contract, then make sure to add it in.
It is fair and reasonable to make sure that you get paid.
So having an audit provision like this is seen as customary.
Check your payment terms again.
As with front-end payments, the publisher will usually set out the timescales for paying the back-end payments as well.
So again, you need to be sure what these are and change them if you think it's gonna cause you cashflow issues.
So in particular, in respect of the timing of back-end payments, you should check the following.
And this might not also be the timing, but also the detail that you're getting as well.
So first off, is the publisher providing you with a royalty statement?
So if they are, it's not unreasonable to ask for them for you to provide information or a statement based on revenues on a monthly or quarterly basis.
So they might provide a statement showing a breakdown of game sales across platform or territory, or any other information that you might reasonably ask for.
So if that detail isn't in the contract, then you can always ask for it to be added in.
And some publishers will have example royalty statements that they use, and they might provide those to you before you sign the contract, so you have an idea of what this looks like.
If you're getting a royalty statement, then that's all well and good, but check that the publisher is, check whether the publisher provides you with the statement first before it pays you, or if it pays you at the same time.
Because if they're providing the statement to you first, then that might inadvertently extend the amount of time until you actually receive the money in your bank account.
So check that time period in the contract, and then check how long it takes for them to pay you after you've received that statement.
And then you need to calculate how long it's actually going to take for them to actually receive the cash in your bank.
For example, some publishers' payment terms might be 45 days from the end of the month in which they've received revenues.
So you can imagine if they've received revenues on the first of the month, you aren't going to receive that money until 75 days later.
My final point, and it's a big one, and it concerns where the publisher deducts or recoups its costs from.
And by that I mean, how is the publisher actually recovering its costs?
The most common approach taken by publishers is for them to recover their sunk costs 100% from gross revenues.
So once they've hit that break-even point and they've recovered all of their advances in publishing costs paid to you, then the revenue share split and the back-end payment share split will happen.
And that's when they'll start paying royalties to you.
However, not all publishing contracts are created equal, so this is something you definitely want to check in the contract.
And in some worst cases, and there's plenty of example of publishers that still do this, the publisher might look to recover their costs, including the advances they've paid to you, from your share of royalties only.
So this is grossly unfair for several reasons, but namely that one, it ignores all the investment that you've put into the game before signing with the publisher.
The publisher makes profit from day one.
It's naturally gonna take you much longer to receive any backend payments because the publishers are covering all of their costs from a smaller pool of revenues.
And last but not least, but that could also mean that you lead to cashflow issues, especially if you're relying on these backend payments to stay afloat.
So while turning down money is hard, you probably should seriously consider if a publishing deal is structured in this way and ask if they will change it to the model that we've said first.
While it still might not be ideal that a publisher recovers all of its costs first, especially if you've incurred significant swept equity or incurred significant costs prior to signing with a publisher, it still means that at least once the publisher's hit break-even, you know you're gonna get paid.
So contract killer number seven, so to finish off, I wanna look at some of the timing issues that might affect your ability to carry out your obligations under the contract.
So we've already looked at delays that might be caused by a publisher during the evaluation and review of milestones and the impact that that delay can have on you in your ability to receive front-end payments.
So now I'll just look a little bit more generally about what you can do so that you're not liable for publisher delays.
So plain and simple, you should not be liable for publisher delays or failures.
This should also extend to any third parties or people or individuals or outsourcers that the publisher requires you to work with, such as porting houses, for example.
So a publishing contract is there to protect the publisher more than anything.
But that doesn't mean that you need to be penalized for the developer being delayed or for if any of their parties that they're partners that they're working with aren't very good or delay or cause failures.
So this is unlikely to be covered in the contractor standard, so you should add it in.
And if there's any publishers listening, then this is a change that you should definitely consider adding so that it's fair and reasonable.
And that is just ensuring that there's something in the contract that says if there's any, if there's any delays caused by the publisher and it's not the developer's fault, the developer's obligations just get extended on a day for day basis until that delay is rectified.
just means that the developer can pause its obligations and it doesn't have to fear that it's going to be a breach of contract for late delivery or performance.
Now, publishers aren't always at fault for a developer being late and carrying out its obligations.
In a publishing contract, the obligations for development ultimately fall on the developer.
But late delivery happens.
Publishers know it happens.
And missing a milestone would normally be considered a material breach.
But material breaches usually come with a cure period during which time the party at fault can fix any wrongs.
So check the contract to ensure that the contract actually does include a cure period, because it isn't unreasonable to have one.
Especially for late milestone delivery.
You'll normally see if the contract has any cure periods by checking the termination section.
Now a cure period doesn't give you a free pass to deliver builds late.
That's a surefire way to burn bridges with your publisher, but it is reasonable for you to have time to fix in areas or late delivery.
And finally, check if timing is of the essence for delivery of any builds or milestones.
And be careful where a contract states that delivery of milestones are of the essence.
It's a rather innocuous phrase, but actually it allows the publisher to terminate the agreement for your breach in the event of late delivery.
And cure periods won't matter or apply on that.
So it's a very powerful right and not really appropriate.
So how do you fix it?
Well, step one, just ask for it to be amended so that missed milestones are material, but they're not of the essence.
This allows you to benefit from the cure periods we've just discussed.
So where a publisher won't amend this clause, then the way around it is just to deliver something on or before the set milestone delivery date.
It doesn't need to be a complete build and it might not pass the evaluation process, but it will avoid the publisher from being able to terminate for late delivery.
So if there are any publishers listening, just consider removing time of the essence requirements out of your contract.
Any developer with a good lawyer is gonna know how to get around it.
And that concludes my talk. So thanks again for coming to Contract Killers on talking about the legal ins and outs of publishing agreements. The talk should be available again via the GDC site and you can find the written articles on my Contract Killer series available on Gamasutra to read for free, so please check those out. I hope you found this session useful and have more confidence going into your negotiations with the publisher that it's okay to change certain things in your contract.
If you have any questions or follow ups or want to ask me anything, then please feel free to contact me on email address or twitter here or any of the contact details I provided earlier.
Thanks again.
