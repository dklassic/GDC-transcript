So, you might look at this and assume that this title is a mistake, that this is some sort of typo, game design at 0.0003 frames per second.
I'll get into that.
Let's just kind of set that...
This is actually what we're doing.
Extrasolar actually renders one frame per hour.
So, set that idea aside for a moment.
I'm going to talk a little bit about what the experience of Extrasolar is like, and then talk a little bit about the evolution of Extrasolar.
It'll slowly sort of explain why I've created the world's least performant video game.
So when you play Extra Solar, it's this story that plays out through video messages, emails, voicemails, websites, photographs, audio from the planet's surface, images from the planet's surface, terminal systems, all these sort of familiar digital media from your everyday life.
All the interactions are done through the web, which makes Extra Solar a very realistic experience at times.
Realistic enough that some of our new players have actually asked us to delete their accounts because they were freaked out, which is pretty cool.
And it's very accessible.
This is all done over the web.
So to really understand Extrasolar, I need to talk a little bit about how we got to this point.
My background isn't really from games.
I got a PhD from MIT in computer graphics.
It was very much non-real time, photorealistic rendering.
Spent a couple summers at Pixar working on Monsters, Inc.
and Finding Nemo.
And I was really interested in this idea of how could I bring gorgeous photoreal graphics to a casual audience that's never really seen them before.
And the web made sense as a platform for that.
But WebGL isn't quite there.
You have to worry a lot about minimum specifications and hardware.
So it just wasn't quite clear what we could do through the web.
You know, there are people like OnLive who are doing streaming in the cloud, you know, video generation in the cloud.
But even OnLive can't afford to do...
live video streaming, as it turns out.
So I started to think about what if I was rendering clouds non-real time, or rendering images non-real time in the cloud, one image every few hours.
And as soon as I sort of came up with this concept, I thought to myself, what would that game be?
The answer was immediately obvious.
This is exactly the way that exploration on Mars works right now with NASA.
They upload commands to the rover, hours later they get back a gorgeous image, and they move on in their exploration from there.
So this was sort of the inception of the idea.
So what we did when we created extrasolar was we created this fiction where in the world that we've created, we're claiming that more than a decade ago, a private space agency launched a rover, a mission to an extrasolar planet.
And it's not just any extrasolar planet.
This one has the...
It's in the habitable zone of its destination star.
So there's the potential for life.
On this mission, we packed our probe with rovers, dozens and dozens of rovers that we're putting down on the surface of this planet, on this island.
And so we're going to crowdsource exploration.
So now that we've arrived, we're looking for volunteers to log into our web-based system and help explore this planet one photo at a time.
And those volunteers will help us uncover not just the mysteries of the planet, but also the mysteries surrounding XRI, the private space agency that's running this.
So I think I skipped a slide there.
There we go.
So it's a really unusual and new design space.
And so with that in mind, it's sort of like we kind of found ourselves wandering in the wilderness and trying to figure out how to move around in this really open-ended space and how to focus our design ideas.
So I'm going to try, like in retrospect, we found some rules that worked really well for us.
So I'm going to try to relay those to everybody else out here in hopes that other people can apply the same rules to their own projects.
So what we came up with this with this idea of core design values, nothing really, you know, crazy novel here, but something that we found that if we really focus time on this at work for us, we wanted to make We wanted to find a set of values that allowed us to make fast, consistent design decisions.
And oftentimes, like, when you're designing a game with your team, you have hundreds of individual design decisions to make.
And it's often tough to get your team to agree on those individual design decisions.
But what we found is that it wasn't very hard to get our team to agree on these core design values.
And once we could agree on those, it was a lot easier to reference those to make these lower level design decisions.
So these are something that the whole team should understand.
They don't necessarily have to agree on the core design values, even though it's usually not tough to get people on board, but they should at least understand them so they can reference them to make their lower level decisions.
And these core design values is fine for these things to evolve over time, and it was very much the case for extrasolar.
Extrasolar started first as an exploration game, starting from this inception, this seed of one photo at a time to explore an alien planet, all rendered in the cloud.
Using, sort of applying the best practices and trying to increase virality of that game, we quickly arrived at using social mechanics.
And we thought, we'll do this like an alternate reality game.
I'll talk a little bit more about that in a second.
But sort of, you know, we'll have people explore together and you can share your map and you can share your species catalog and all your discoveries.
And we thought, to really have a hook to get people on board, let's add a little bit of a story element here.
So we added a little story.
And the more we built on the story, the more we realized that the story was really a lot more special than the cloud-based rendering was.
Not only that, but the social mechanics interfered with the story, because the story was setting up this position where you, not an avatar, but you were a special character at the center of this giant conspiracy.
And when you were sharing your feelings as you were going through this conspiracy with your friends, it just didn't work.
The fiction fell apart.
And so we sort of minimized the role of the social media.
So the process that we were going through here in our evolution was first to find the gem at the heart of your game.
Then adjust your core design values to allow that gem to shine through.
And here's the hard part.
Throw away anything that isn't working for you.
Throw away anything that's interfering with your core design values.
And it's really easy to fall into the trap of assuming that the place and subsystems where you've spent most of your time are going to be the gem.
And that's not necessarily the case.
And for this case, what we realized was that the renderer, the place where we'd spent all of our time, really needed to be subordinate to the story.
And the story needed to shine through.
So these are the core design values that we ended up with after going through this evolutionary process a few times.
One, the fiction is paramount.
Two, it should be as accessible as possible to as wide an audience as possible.
And three, to be very respectful of the player's time.
And I'm going to talk about how these core design values led us to make some really unusual and unconventional decisions.
So it's hard to discuss extrasolar without talking about alternate reality games.
I'm going to talk a little bit about it here, partly because the term ARG is overloaded in game design.
It can mean augmented reality games or alternate reality games.
So I'm going to be talking about alternate reality games, which are things like the launch of Portal 2, The Beast, The Majestic, or I Love Bees, which launched with Halo.
As Extrasolar Evolved, it definitely looked like an ARG.
And so we looked, I did a lot of research, and read a lot of white papers on previous ARG design to figure out what lessons I could learn from that.
And there are a lot of business challenges with an ARG.
If we wanted to create this emotional experience, a feeling like you're a character...
in this world, this story that's wrapped around you, that feels very real.
But we wanted to avoid these ARG pitfalls.
So we wanted a story that you can start at any time and play solo at any pace from any location.
And these are some of the common ARG channels that we avoid.
So community-driven puzzle solving, real-world media and events, physical locations, all of these things limit.
Generally, with an ARG, you have these players that are coming in.
They're solving really hard puzzles as a community, moving forward in time.
But if you come in late, or if you come in after the ARG is over, there's nothing left for you to do.
Or if you don't live in San Francisco or Seattle or wherever the ARG is taking place, there's nothing for you to do.
Or if you're just intimidated by working with a giant group of people, there's nothing for you to do.
So we really wanted to create this experience that you could play at any time, any place, at your own pace.
And these last two ones, SMS messages or phone calls, these are really cool channels for storytelling, but it also assumes that you have a North American phone plan for the most part.
And we found, very surprisingly to us, even though we just launched four weeks ago, 25% of our players are from countries that don't have English as their primary language, even though we have not localized into any other languages.
So it's made, like, this accessibility, what I'm saying, it's really mattered.
So these are other, also, common channels for storytelling.
And these are the ones that we're using.
Websites, email, PDF files, these are all, they can all be accessed over the web, all accessible through basically any browser, including your tablet or your phone.
And the nice thing about these channels is that everyone understands them, and they're part of the fabric of your everyday digital interactions with your life.
And the result is that weaving a story into these channels feels really compelling and very real.
So as I mentioned, as I kind of hinted before, our core design values led us to make some unconventional design decisions.
And to frame, as a reminder, those are that one, that the fiction is paramount, make it as accessible as possible, and respect the player's time.
So to frame this portion of the conversation, I want to talk a little bit about the magic formula.
We all spend a lot of time looking at other games and trying to reverse engineer the magic formula.
This is unfortunately why there are 60 new Flappy Bird clones a day on the iPhone, because everybody just thought that, you know.
They can reproduce that success.
So the problem with...
Looking at the magic formula, trying to reverse engineer someone else's success is absolutely a worthwhile activity.
But there are some things to be careful of.
One is that there's a feedback loop in the system.
So once a niche has been exploited, it's unlikely that you'll be able to make money on that niche again, the way that the original niche exploiter has done.
Two, and this is a big one, the space of all possible games is enormous.
And we have seen about this much of it, maybe about this much of it, this tiny little bit.
And when we explore only, when we allow our design mechanics to be driven by the lessons learned from others, we're really, we get tunnel vision.
All we're seeing is this little space.
It also means that we're a little fish in a big pond.
We're competing with all the other people who are trying to compete in that space.
So what I really want to encourage people to do, and this is easier said than done, is just to write your own formula.
Be okay with...
not necessarily following the path and making your own rules.
It's okay to be a small fish in a small pond, and if you're the first one to get there, you're in a great advantage to own that niche.
So I'm going to walk through four specific unconventional design decisions that our core design values led us to make.
The first one, and this is going to be a bit of a spoiler, I assure you there are plenty of other surprises to be had by playing Extrasolar.
The first thing is that when you first sign up for Extrasolar, you do it through a website, you apply to the program, it all looks like this is real stuff.
You're applying to a private space exploration company.
and then we reject you. We're sorry, we're over capacity, no more rovers available.
A few minutes later, the next chapter of the story plays out in your email.
A hacker contacts you and says that they can get you in the back door.
You need to cooperate with them.
And it's controversial because we lose about 24% of our players at this stage.
And we're improving that, and so this is the kind of thing that no company would ever do.
Part of the reason we do this, this is really just the email validation system, but going along with our core design value of respecting the player's time, we thought, wouldn't it be cool if the email validation system was part of the story?
And so, from the get-go, we do this.
So we lose players here, but it helps to establish the emotional experience.
And it's really powerful when people get this message.
It also helps to establish the expectation that this is going to be unlike any game that you've ever played.
It's going to play out through multiple channels.
And the result is that the retention rates are ridiculously high.
So we just looked at our accounts yesterday.
Of the 4,400 players who have gotten through this step in the four weeks since launch, 35% logged in yesterday.
So, you know, for a free-to-play game, these retention rates are ridiculous.
To give you another example of how engaged players are, the whole story is about 250 pages of written content that plays out through all these channels that I mentioned at the beginning of the talk.
We have a player who's written 194 pages of her own analysis.
So people, like, you know, this gets along with, like, with Glanbier's talk just before this, like, the community will find you, and they will, they will pimp you when you don't have to.
Unconventional design decision number two is our ridiculously generous demo.
So partly because, and this is kind of starting from the bottom here, partly because Extrasolar is such a weird and unusual experience, It's very hard to sell up front.
It's very hard to get people on board.
We decided that the only way to really build an audience was to give away all of what we're calling Season 1 for free.
And it's not a small amount of content.
Like I said, it's about 250 pages of written content.
On average, it takes a player 27 days to complete that content.
27 real-time days.
And players can optionally pay to upgrade, but there's no penalty if you don't.
You still get the entire story.
You can just play a little bit faster if you pay.
Unconventional design decision number three is that we force the players to wait.
Like I said at the beginning, the whole mechanic started with what do we do with rendering in the cloud?
So especially for players who are accustomed to sitting down for two or three hours and playing a game and really kind of just getting into that game, the waiting is really frustrating at first for this gamer audience.
But even those people, they come back to us about a week later and post on their forums, they really appreciate it's become part of their daily routine.
And it doesn't waste their time.
And I wouldn't necessarily endorse playing games at work, but everybody says it's a great game to play at work.
And because there's no filler, and it's respectful of the player's time, it's just like, it feels, I don't know, it just feels, it's just much more satisfying.
This all leads... Oh, the other thing is, on this point, we brainstormed...
People kept asking to spend more time in this game.
And so we brainstormed all kinds of little mini-games to grind, and other things that you can do.
And they all sucked. I mean, they might have been fun to stand alone, but they all compromised the fiction.
And none of... They all just made it feel like a game, rather than a story that you were a part of.
And so, in chorus...
In a lot... Going along with our unconventional design decision number one, which was...
make everything subordinate to the fiction, we threw all those mechanics out.
And this kind of leads us into unconventional design decision number four, which is monetization.
And this is, you know, this is the source of a lot of talk here at GDC.
The image that I'm showing here is kind of a caricature, maybe, of what the best practices say for monetization right now.
The whole dual currency system, microtransaction with a grind economy.
The dual currency, you typically have one currency for your time-rich cash-poor player who wants to grind to earn more.
You have another currency for your cash-rich, time-poor player who would rather pay to get ahead.
They value their time.
And there's usually an exchange rate between these things.
But it all focuses around grind.
And as I mentioned, any attempt that we made to add grind to the game compromised the fiction.
And the other thing is, when you see these currencies, like when every transaction that you do within the game has, basically, you have the choice.
Do you want to make the better version of this transaction?
Or do you want to do the lame, free version of this transaction?
It just feels icky.
And it really was a reminder, constant reminder that this is a game, and not a story that you're participating in.
So what we ended up with, so the constant microtransactions hurt the fiction.
Paying up front, like I said, is not an option.
You can't ask someone to pay up front, and then immediately reject them, because they'll just be really pissed off.
So we basically went with an episodic content model.
So you can play the whole episode one for free.
You can pay $9.50 to play a little faster, or $25 for all three episodes up front, only one of which is completed so far.
And the numbers are pretty good based on this.
We actually have 15% of payers play, and our average revenue per user is about, it's probably going to settle around $2.50 when we're all done, which is pretty darn good for a free-to-play game.
So rather than our interface looking like this, which basically is, this is the kind of interface that you get when you worry about.
How do I make my players pay?
We ended up with this, which is much more of an interface designed around, how can we allow our fans to easily support us?
And it's not just by buying a membership for themselves, but they can also buy gift memberships for their friends.
So, I mean, it's easy to say, make unconventional design decisions and find success that way, especially since we haven't really found our financial success yet, we're still working on that.
But one of the ways that we found to do this was to involve unconventional contributors in your process.
And for those of us who grew up as gamers, and those of us who have been in the industry for a long time, it's very hard to get away from our assumptions.
But it's really easy to just take other voices from outside of the community.
And I don't just mean non-game developers.
I mean non-gamers.
Bring them in and have them involved.
And the example that I want to give in this case is that we involved a biologist named Jane Van Susteren in the development of extra solar.
We wanted it to be very science heavy.
We really want to create positive role models for scientists.
So we would show images of the surface of the planet to Jane, and we would say, what do you want to know about these plants?
And she would say, first of all, you can't call them plants.
They're not related to plants on Earth.
Let's call them something else.
We'll call them photobionts.
Secondly, I want to know, are they cellular?
Do they photosynthesize?
How do they reproduce?
And we took this content word for word and actually turned it into missions in the game.
And our fans love it.
The science, the real science that came from that has been amazing.
And these are missions that would never have come from someone who spent a lot of time playing World of Warcraft.
It's just a different mentality around the design.
And in fact, we love them so much that Jane Van Susteren actually plays a character by her own name in the game.
After all, if we want to be serious about making positive role models for female scientists, why not have one directly play a character within the game?
And that's also been extremely well received by our community.
So I like to think that Extrasolar feels like a big game, and from an indie standpoint it might be a large team and a large budget.
But I think for the size that the game feels, I think it was actually a fairly small team.
The core team is four programmers and one artist.
I'm the only full-time, everybody else is part-time.
Development cycle has been about three and a half years, and the cost so far has been about $600,000, with $400,000 of that going directly to our part-time team.
So the way that we've managed to make this big feeling game with this beautiful imagery is really taking advantage of some of the constraints of the system that we have.
So the big one, you know, when you make a normal real-time game, and I'm sure pretty much everybody in here is familiar with this process, where you spend a lot of time at the end of the game development cycle making sure that the frame rate is good for every piece of hardware, making sure that it operates on every piece of hardware and doesn't crash, you know, making sure that it works, you know, setting your min spec and making sure that it works with that, making sure that you don't have popping artifacts and you have temporal coherence.
making sure that it degrades gracefully on lower end hardware.
These take actually a ton of time.
And when you toss these constraints out the window, and you don't have to worry about these, our renderer takes an average of six seconds to render an image.
About half of that is actually pulling it out of the back buffer in high resolution, compressing it to JPEG, and uploading it to the Amazon Web Services.
But the point is that we just don't have to worry about frame rate.
And that's been extremely liberating.
We can basically operate in much more of an academic environment.
We want to, you know, we want to ray trace the clouds.
Well, how much time is that going to take?
It's an extra half second.
Not a problem. Half a second. Not a big deal.
So it's really liberating.
It's been a lot of fun to work on this project because of that reason.
Another place where we're really taking advantage of the constraints is in our client design.
So we wanted the client to be as accessible as possible, which was our core design decision number two.
We wanted the client to be able to basically run on any browser, old computers, all the way down to IE8.
So we decided no Flash, no Unity, no WebGL, no Canvas, no plugins, and the result is that all the development is done in JavaScript, which actually ends up being.
We have to use JavaScript and HTML4 in some very clever and creative ways.
But it's ultimately a much easier development process.
So I want to talk now about some of the lessons learned and hopefully distill this down into things that will be useful for other teams.
First one, as I mentioned before, find the gem at the heart of your game.
Use that gem, design your core design values around that gem to allow it to really shine through.
And here's the tough part, cull away anything that compromises your core design values, ignoring sunk costs.
It doesn't matter that you spent a year of time sinking it into some subsystem.
If that subsystem is making the game worse, you need to throw it out.
And the corollary to this is that if there's no gem, If you really look and there's no gem, no amount of polish is going to help.
No amount of artwork or sound design around that is going to help.
Go back to the prototype stage, keep iterating until that gem shows up.
It's probably there somewhere.
Next one is to establish question design principles.
And it's important to study these and understand the rationale behind these things, but also decide if they're applicable to you.
And the reason is that taking a different route can lead you to a less crowded niche.
This is a common one.
Listen to your fans.
And by listen to your fans, I don't just mean read the forums.
If you have any way to look at actual player behavior, Vlambeer was up here talking about watching the YouTube videos.
That's a great way to directly see what your fans are doing and trying to figure out their intent.
And we do a lot of this.
We look at how people play and adapt the parameters of the game accordingly.
An example of this, one of our super fans was mentioning that she kept setting up a camera at the same location at different times of day, and she was using it to do a study on the tides.
And we hadn't modeled the tides, but there was no reason that we couldn't.
And so we went ahead, it was something that was easy to add, so we're adding back in the modeling of the tides, which is really great when fans are that invested in what you're doing.
Also, be careful, don't listen to your fans too much.
Partly because Extrasolar is such an unusual game, we got all kinds of requests for people who wanted to upgrade their weapons, and shoot aliens, and shoot their friend's rover.
And if we allowed people to make those decisions for us, obviously it would heavily compromise what the game was actually all about.
So, be careful there.
And finally, unencumber yourself from preconceptions, design preconceptions.
Like I mentioned before, a good way to do this is to get diverse voices, to give you new ideas, people who don't consider themselves gamers.
Write your own formulas for success.
And here's going to be my final takeaway, is jam frequently.
You know, I go to a lot of jams and more and more I see that there are a lot of people looking for jobs there, but not a lot of people who are established in the industry.
I don't get it. Guys, you're not too old to jam.
Jams are so liberating and fulfilling.
When you've been grinding on a game development cycle for years, completing an entire game in a 48-hour cycle is hugely empowering and liberating and energizing.
It's also a space where you can fail without consequences.
And a lot of really great game ideas have started out as jams.
So Jam, the other thing that Jams teach you is to design with constraints.
It's very typical for a Jam to be run around some theme.
And the nice thing about those themes is a lot of diversity in ideas emerges around those themes.
So try designing with constraints.
Get accustomed to designing with constraints, because that's a really good lesson to work with.
And with that, I think we have about a minute for questions.
Any questions? Or you can take this time and pull out your device and go to extrasolar.com.
to like the regular tier, but then if you pay me, because I'm a hacker and there's a little bit of a risk on me, like give me $30 and I'll get you into like the super tier.
Did you think about something like that?
I could totally see a hacker doing that.
This is a mail message that we have like redesigned and redesigned over and over again to try to, one, get as many people through that back door as possible, and two, get people to stop emailing me telling me that there's a hacker in our system.
I guess I'd make it worse then.
But I think that, you know, we've decided to delay the option to pay as long as possible.
Was that the question?
It's like, have we thought about moving up the monetization layer earlier?
Just one another another way of getting like the upfront charge.
So like sell them the whole game or, you know, the first part of the game.
We hadn't considered it, but at that point you still really don't know what you're getting into.
Like, you might have come into the game in a way that familiarized you with the mechanics.
We have kind of a kiosk system where you can explore the mechanics first.
But we don't really hint at the story until this hacker gets you in the back door.
So we kind of, we think it's best to let people wait to make that decision until later.
All right, and one, I'm sorry, real quick follow-up.
I haven't played the game, but does that hacker...
Do you have a relationship with that hacker?
Or is that the last contact you have with him?
You have a very big relationship with that hacker.
That plays out through the entire season one, and there are, I promise you, a lot of mysteries in store there.
All right. Thank you.
And I think that, yeah, I'm being told to cut off.
If other people have questions, I'm going to go to the wrap-up room, which I believe is room 3000.
So if anybody wants to ask other questions there, please join me there.
Thank you.
