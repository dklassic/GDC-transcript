So, hi everyone. Thank you to everyone for coming out today. We'll start off with a brief introduction about ourselves.
My name is Alicia Leidecker. I've been working as a programmer for a little over 10 years now and I joined Ubisoft a little over 4 years ago.
At Ubisoft I've been working as an AI and behavior programmer and I joined the Assassin's Creed team starting with Assassin's Creed 2 and now most recently on Assassin's Creed Brotherhood.
On those two titles, I was responsible for working on the new behaviors that were needed for the games, and I also helped develop our data-driven behavior systems and some of the animation tools that we'll be discussing today.
Hi, my name is Nicolas Barbeau, and I was part of the core team in animation for Assassin's Creed Brotherhood.
I also worked on AC2 for NPCs and main character behaviors.
I worked at refining the navigation system, simplifying the navigation systems for NPCs and the reaction system also.
So today, we're going to focus this presentation on what we call crowd life.
We define crowd life as being the characters that make the world of Assassin's Creed a living and breathing world.
Creating, evolving, and changing crowd life brought a few challenges in this short period of time that was our production.
Challenges in animation with a never growing number of animations to do in less time with limited budget.
It's also challenges in programming as we were confronted to these issues.
We needed to find solutions that give us the best results with as little maintenance as possible.
So we're going to show you some tools that we developed and how we use them in production.
Then we'll open things up for questions.
Alicia will continue to talk about our pipeline.
So, before actually getting into anything related to the crowds on Assassins, we first wanted to talk about our AI team structure.
So, first show of hands who actually is in AI or gameplay.
Okay, good, this is rather relevant then.
So, why are we talking about the AI team structure?
How is this relevant to the crowds and the animation tools?
Well, it's a couple of reasons. First, the animation tools that we're going to be discussing today really ended up playing an important role for how our teams work together.
The tools we ended up developing allowed all of our AI teams to create much more content and in less time.
Another reason is because the AI team structure on Assassins I find is really unique.
On previous projects I had worked on in the past, we usually had one team that was dedicated to just AI and one that was for gameplay.
But on Assassin's, we did things sort of differently.
On Assassin's Creed Brotherhood, we had 24 programmers and eight animators that were all assigned to this global AI team.
So with the number of people that we were, we really had to make this cohesive structure to the team.
The goal of what we wanted to improve upon from Assassin's Creed 2 to Assassin's Creed Brotherhood really dictated how we divided up our AI team.
So we broke the team up into five multidisciplinary sub-teams.
Each team had their own team lead to manage the features and responsibilities of that team.
So we had our core AI team, missions, behavior, fight, and the crowd team.
So I'm going to explain briefly what each team does, give some in-game examples of what they would have worked on, and talk a bit about how the teams actually interacted together.
So first up, we have our core AI team. This team basically deals with anything that's much more low-level AI.
They'll work on the core mechanics that are required by the other core AI programming teams.
Some examples of what they work on in-game is how our spawning strategy works.
They developed our save systems and our replay systems.
Next up, we have our AI Missions team.
This team supports any programming needs that are required by our mission designers.
So, if new gameplay features are required that are specific to a mission, then this team will develop it.
So, for example, in Assassin's Creed Brotherhood, we had one of our exotic gameplay missions which involved using cannons.
So the mission team was responsible for developing the gameplay for that mission.
The mission team works very closely with the behavior team for any animation needs.
So, the behavior team.
This is the team that Nick and myself have worked on for Assassin's Creed 2 and Assassin's Creed Brotherhood.
So I first want to address the question of what is a behavior and what a behavior means to us on assassins because we treat it sort of differently.
Typically you would think of a behavior as for an NPC as something that could be broken down into three major steps.
There's the navigation of the NPC to get that NPC from point A to point B.
There's the AI decision logic of what that NPC should be doing.
And then there's the physical states, the actions, the animations for that character.
So on Assassins, we broke these tasks up between two teams.
The behavior team deals with anything related to the physical actions and anything related to the animations of a character, whereas the navigation and decision logic is really handled by our crowd team.
The behavior team is made up of behavior programmers like myself and animators.
So having the physical actions, the states, the animations being handled by the behavior team really allows us to monitor what's being put in.
The animators work very closely with the programmers and each time a new behavior has to be developed, the animator gets to make sure that the level of the quality for the animations are very high.
So we're working very closely and our goal is to create high-level, high-quality animations.
The crowd team, they're much more high-level and their focus is not at all on the animations or the behaviors. Their responsibility is to create working NPC AI, whereas the behavior team focuses on the animations. So again, it really helped us to break down the tasks and share the responsibilities between the teams.
I would say that the behavior team deals with three main things.
The physical state of a character, anything that's related to the main player, and any gameplay animation needs.
So some examples that we would see in game is behavior team deals with the three Cs, the character, the camera, and the controls.
We also develop the crowd progression and we've developed any of the abilities that the characters can do, such as our free-run parkour in Assassin's, the ability for characters to climb, or riding the horse.
The one part that we don't deal with is the fight system.
We have a separate team for this.
The fight team is really a self-contained team.
It's basically a mix of NPC AI programmers, behavior programmers, and animators.
But they deal strictly with the fight.
So they'll develop the behaviors, they'll work on the controls for the main player related to the fight, and they'll also develop the enemy AI, again, just for what happens during fight sequences.
And finally, we have our AI crowd team.
This is the largest of all of our AI teams.
The team basically has two main responsibilities.
They deal with the AI logic for the NPCs that we discussed.
And they also handle our gameplay systems.
So for example, they develop our economic system.
In Brotherhood, they developed our Rome upgrade system, where you were able to renovate certain districts of Rome.
And you really get to see the ambience of having a poor district that becomes a rich and lively district.
They also developed our Assassin's Guild, where you were able to train assassins, send them on missions, and have them to fight alongside you during fight sequences.
Other examples is our reaction system and NPC AI.
So that pretty much sums up our AI team structure on Assassin's Creed Brotherhood.
The structure really allowed us to give clear ownership while still encouraging communication between the teams.
So we're going to keep referring back to these five AI teams throughout the presentation and give examples of how the animation tools really helped everyone's lives and everyone was able to create more content in less time.
So now to talk about the actual crowds in Assassin's Creed.
I'll give a quick overview about how the crowds have progressed over the last three Assassin's Creed titles.
First up on Assassin's Creed 1.
The big thing for us was just the concept of having crowds and getting this dense group of NPCs that were navigating throughout the cities.
Our focus here was really on the technology to create an open world game.
On Assassin's Creed 2, we wanted to start pushing this further.
AC1 was really about the tech for having crowds, but on AC2, we wanted to start finding ways to break the zombie roboticness of the crowd.
So that's where we came up with this idea of static crowd life that we could use in the world.
So for example, in Assassin's Creed 2, we had our carnival scene.
Here we had people that were dancing together, they were socializing, we had flamethrowers, we had acrobatics.
So we did all of this using our crowd life system.
But we really used crowd life in Assassin's Creed 2 to create these memorable moments.
On Assassin's Creed Brotherhood, we wanted to start pushing the concept of crowd life even further.
We wanted to use crowd life everywhere in the world, and not just for memorable moments.
Nick is going to discuss some of the challenges we had with this new mandate of creating way more crowd life content in just a 10-month period.
So design choices were made to push the crowd as far as possible.
to actually reflect the state of the world you're playing in.
So to create a more believable crowd, first we wanted missions and reactions to be as polished as possible, to really have their own specific sets of animations.
For example, we had a mission where Courtesan is being poisoned.
This is a side mission.
It's not part of the main path.
But we really wanted her to have a specific walk cycle in idle animation.
This is what makes it believable.
So that's what.
one of the things we really wanted to achieve.
Also, we wanted NPCs to be different, depending if it's day or night.
So we really wanted our day and night cycle to be much more than just a shader and light change.
So we'd have characters that go from being an old man during the day, and during the night, you'd have a drunkard walking the streets.
Or a man reading a book would switch into somebody lighting his way with a lantern, for example.
And finally, we wanted to illustrate the renovation and the liberation of Rome through our crowd life.
So the crowd would go, you would see in the animation that the crowd would go from oppressed to free.
It would go from poor and begging to rich and working.
And all of that considering the day and night cycle, of course.
So it's a multiplier.
So what does it all add to?
It adds to creating three times more crowd life than in AC2.
but with only 10 months.
So we need to find solutions.
We need to make this game differently.
So Alicia is going to continue about the tools.
So yeah, new mandate thing.
We had to create tons of new Crowdlife content in just 10 months.
And honestly, it scared us.
One, we couldn't use our old tools from Assassin's Creed 2.
Whenever we wanted to create a new Crowdlife, that character state had to be individually scripted.
It took up a lot of time from our level designers, and our animators had very little control for creating these new crowd-like characters and states.
And now we were told that we had three times the amount of content to make, so the option of scripting everything was completely out of the question for us.
The next big issue that we had was how our behaviors were being developed up until that point.
Because to us, it seemed like a logical decision to have the crowd life be developed in the framework of a behavior.
Because then the responsibility would fall on our team, and the animators would have much more control.
But there's an important thing to explain about how our behavior systems were being developed up until that point.
Each and every behavior is very programmer-centric on Assassin.
So when a new behavior has to be developed, it's the programmer's responsibility to create the new behavior states, to hook everything up into the code.
When new animations have to be integrated, again, for us, it was the programmer's responsibility to hook all of this up into the code.
So, it seemed like using the behaviors for the crowd life was going to be just as problematic.
So we had this little animator versus programmer moment at the end of AC2 and on Brotherhood, where the animators basically came threatening and told us that if we didn't come up with some new type of tools to be used on the behaviors, well, there was no way we were going to be able to accomplish what we wanted to do.
So that's where the idea of starting to create these simple, lightweight, data-driven behavior systems came from.
So obviously, pre-R data, everyone would be very happy with this.
It would benefit everyone.
Animators would have much more control to create simple behaviors on the fly.
It would take off a lot of the dependency from the programmers and the level designers.
So I'll talk briefly about the data-driven behaviors that we developed.
And at the heart of this tech, it's something that we call the custom actions.
So first off, what is a custom action?
In its simplest sense, the custom action data is used to play a set of animations on any entity.
It's pretty simple.
The custom actions is an object that serves as a container.
It's a lightweight object that interacts with all of our underlying behavior systems.
So, if I wanted 100, 120 of our NPCs to be fully controlled using the custom action technology, we could do that because it's really just a wrapper layer to our existing behavior structure.
We didn't want and we didn't have time to start doing major changes to our animation system.
We didn't want to start using heavy external third party utilities, so we really opted for developing a bunch of this in-house tech ourselves in a very short period of time.
The custom actions basically just can contain a set of animations with a whole slew of parameters for how it should interact with our behavior system.
So we started working together to see what type of parameters the animators wanted to have access to.
So I'm going to explain some of the parameters, show some examples.
We'll start off with the really simple ones and then get into some more interesting parameters that we could do with our custom actions.
So first up, obviously, the animators wanted to have access to the different body parts.
In the custom action, can we play the animation on the full body, upper body, two arms, one arm, anything?
The second option was body part transferring.
What this is, is say for example, you have an animation that starts playing on an NPC, and it's a full body animation.
But then that NPC gets a command to start moving.
The animators wanted to have access to specifying what should happen at that point.
Should my animation just blend out and let them go into a basic movement cycle?
Or do I want that animation to continue to play?
Maybe I want that animation to get propagated to my upper body.
Or maybe I just want it to get propagated to my right arm channel.
So we exposed a bunch of these parameters for transferring full animations to different body parts.
Other simple options that we had in the custom actions were, how do we handle transitions?
Can we specify different types of look at?
So while that animation is playing, do I want to activate just my eye look at, my head look at, or the upper body look at?
Also, can that custom action be looped?
Can I add variety?
Can I have multiple animations and weight them?
Maybe some of them are played at 90% and some of them are played at 10%.
So I'll show a short example, the simplest example of just playing the custom actions with body parts and body part transferring.
So here we see one of our courtesans, it's just custom actions being used on the upper body.
Something the animators wanted with the custom actions was maybe the animation was actually flagged as a full body, but in the custom action, they could flag it to be upper body.
And then they can make another custom action with that same animation to say that it's used on my two arm channel, because it looks much more fluid while a character starts jogging or running.
Again, just a couple simple examples.
The next interesting part to see is what we call the orientation settings.
This is one of the features that we use very often with the custom actions.
What this setting does is it automatically propagates a full body animation to the upper body, because we want to be using the lower body to orient towards a specific target.
So there's two types of orientation settings.
One is for when the NPC is idle and wants to orient towards a target.
So, what we do is we propagate the animation to the upper body, and then the lower body plays a turn on spot behavior.
So, say for example, you have in Assassin's Creed Brotherhood, you have a bunch of beggars that are in the streets.
Here, we're going to play an upper body animation of begging, while the lower body keeps orienting towards a target.
So, let's say our target is Ezio.
When Ezio comes into range with the bager, he'll continuously keep orienting using either 180 degree turns, 90, 45, we'll blend between it so that we're continuously pointed towards that target.
The second level of orientation is what we call the oriented moves.
This is a separate movement system that we developed.
If you take your default movement system, you're basically playing with one parameter, which is the direction I should be moving in.
But in the case for the oriented move, you have two parameters.
The direction I should be moving in, and the direction that my body should be oriented towards.
So, this allows us to have examples where maybe characters are walking backwards, maybe they're strafing, and it's because their movement direction is in one way, but their look at target is in another.
So I'll show a couple examples of the turn on spot and the oriented move.
Can we put the sound on?
This was one of our first test examples. We used the turn on spot a lot for our group minutes.
So whenever you come into a range with thieves or courtesans, they'll have this dialogue upper body and they'll be oriented towards FQ.
What am I being put through?
Amen!
Amen!
Here with our audience in the movie, we started to see how Ezio can start moving in this 360 degree range.
But we really used it a lot for our NPCs.
Because let's say we had crowd NPCs when they were walking by us, we wanted them to acknowledge Ezio.
In some cases, the animators wanted to be able to fly this and say, during this custom action, we want the character to continuously be oriented towards Ezio while they're walking in the street.
Our next option is what we call the blended animation setups.
Some of our custom actions are set up so that we can blend between a certain set of animations together.
The previous example showed how an animation would be played on the upper body, and the lower body would be orienting towards a target.
But sometimes we wanted the full body or just the upper body to blend between a certain set of animations to orient towards a target.
So again, let's take the example of the beggar.
This time, the beggar is sitting in the street, so I can't use a turn on spot behavior on his lower body.
Here, what the animators did is, in the custom action, they just flagged the custom action as a three-way blended animation, and they set three animations.
So you'll have your beggar who's blending in the front, one for the back right, and one for the back left.
And whenever the target comes into range, we'll continuously keep blending between these animations to follow our target.
So I'll show a couple examples here.
This is what we used for our beggars.
We ended up using this a lot just any type of crowd life where you wanted them to really interact with MCO as they walked by him.
We used a couple of these pre-set blended animation packs so maybe characters would continuously keep waving.
We had it where we could point, and it really allowed for a 360 degree range while it was blending between the animations.
And for the case of the animators, they were able to do all of this, which looks like new behaviors we would have had to develop ourselves by the programmers, but they did it by just flagging one of the options in the custom actions and feeding a couple of animations.
So finally, the last example is what we call the random look at target.
For the previous examples, I kept mentioning orienting towards a specific target or orienting towards a specific direction.
But in some cases, the animators wanted it to be done randomly or systemically.
For example, we had a case where we had a.
a character who is placed in the middle of the streets.
And we really wanted to give this sense of someone who was a little crazy.
He was trying to get the attention of anyone who was walking by him in the streets.
So it really helped us achieve this new mood.
So basically the animators just used the custom actions, they set an animation that should be played, and every one to three seconds this character would keep orienting in different directions, really giving the sense that they were trying to get the attention of anyone passing by him in the streets.
We also used it to achieve new moods, so I'll show a couple of examples of how we did this with Ezio.
In the first example, all it is is we're using a custom action, no animations being played on the upper body, but we applied the random look at target.
So it really gives a sense of Ed Field searching for something and every say 1 to 3 seconds he'll start looking and orienting towards a different target using the orienting tool.
Here's the same example, but now we plugged an upper body on Ezio.
So, typically, this would have usually involved doing a whole new movement system, a new behavior that had to be developed, but now the animators were able to do this by just plugging one upper body animation, checking off a couple of these flags in the custom actions, and creating this whole new move.
Ezio is scared.
So we really used the custom actions as this strong narrative component.
The other AI teams really ended up benefiting from using the custom actions, because a lot of the times they needed simple behaviors like this to be done, and the animators were able to create the packs for them on the fly, and it really removed the dependency of waiting for the behavior team to develop new features for them.
So Nick is going to talk a little bit about how the custom actions were actually being used.
Yeah, so now let's talk about how we used it, how we use the custom actions.
To start off, we'll talk about reactions.
In Brotherhood, we have really thousands of reaction-related sounds.
We need to find a way to link those sounds to animation.
And of course, we don't want to bake one sound for one animation.
So we use custom actions to link those sounds, make sure they could be linked to either specific animation or generic animation.
So it was great.
But creating a custom action can take about five minutes.
It's not that long.
But multiply that by thousands, it ends up being a job on its own.
So we needed to accelerate that pipeline, find a way to do things differently.
So we used software called Oasis.
Oasis is developed in Ubisoft by the Ortec Group.
It is used by sound designers to manage their sound bank, basically.
So it's very simple.
What we did is attach a custom grid to the Oasis system.
Really, it looks like an Excel sheet, no more than that.
What we did with that is take all the parameters of the custom actions as you saw.
There's a lot of them.
And we made six basic templates that we knew that we used very often in reactions.
And we used these templates inside this Oasis grid.
So it was really easy to define custom actions through that Excel sheet.
For example, for a simple sound of a bummed guy saying, hey, be careful, we would specify an animation.
We then choose a template.
The template would define, OK, the animation is playing upper bodies using oriented move without look at.
Or another would be, oh, this animation is full body.
It doesn't use oriented move, but it uses look at.
So it was really easy for us.
It took seconds to create custom actions.
We would create hundreds in minutes.
So yeah, it was a great thing for us to manage all those thousands and thousands of reactions.
So next, how we use custom actions to create static crowd life.
We use something we call the crowd life coordinator.
What is it exactly?
I think of it as being a character in a box.
So its basic use is just having, it can spawn a character and play a custom action on it.
So back in AC2, we needed to actually script those scenes with those characters, those crowdlife characters.
It took quite a long time.
And now with this, it's such a generic tool for all the static crowdlife.
that we could use it without the help of an integrator.
Just animators could create their own crowd life from top to bottom.
And what that meant is that LDs could just pick that as an object, drop it in the world, press play in the engine, and it would work.
So it makes creating a unique ambience really fast and easy.
So basically, we need one coordinator for one character because each character has his specific settings.
Again, the purpose is just spawning the character, play a custom action.
But you can spawn with spawning specifications, which are contained inside the crawl life coordinator.
One of those specifications could be the mesh.
Let's say you could define that for this coordinator, for this character, I need a poor peasant in dirty clothes.
Or for another, I need a rich woman in red dress.
You can also define if the character needs a prop.
So let's say the character for his animation needs a hammer, a paintbrush, a broom.
You can define it in the coordinator.
So when it spawns, it spawns with its defined object.
And finally, it manages interruptions.
So let's say you have this static character that's sweeping the streets, but I decide to assassinate someone right next to him.
It manages the interruption of that animation.
and so that character can actually play a reaction like any other characters in the streets.
So I have a couple of examples here.
It's actually nice because this is the level used for level designers.
So they could go in this test map and see all the crowd life that we created.
And you can see the letters now.
We divided it in different districts.
Is it night or day?
which level of the Rome upgrade system is it.
And what's fun, you can see the characters actually spawning, and you can see they're spawning with their objects.
And as they spawn, they use a transition animation to go into their specific crowd life animation.
It would be the same if they get disturbed.
They would just do a transition animation out of their system.
So this is really just a sample.
The map is really much bigger than that.
I love that falling guy.
Yeah.
So now to talk about our walking crowd.
Usually in game, we use basic two steps walk cycle animations, like the one you see here, illustrated.
It's really great for most characters.
It works well.
It's small and everything.
But we found that for some crowd characters, it felt a bit redundant.
And it really limits character creation.
So to break that sometimes robotic feel of the crowd walking just in two steps, we created a tool called Character Action Set.
Well, it's really basic.
It's just saying I'm taking this original action that's a two-step walk cycle.
And I'm replacing it with an action that can maybe be six steps, eight, 10, 12 steps before the character actually loops his walk cycle animation.
What we wanted to achieve with that is having uneven characters, characters that are asymmetrical, to make them feel more human, really.
So the perfect example of that is our drunk character, which is almost impossible to create a drunk character in just two steps.
We want to create the feeling of imbalance.
So two steps is not enough.
I have to go back to my original fixed pose.
So we use that for drunk people.
So here's a couple of examples of where we use it.
We have our nice drunk character here.
You can see he's not, after two steps, he's not going back to a single pose.
He has many, many, steps to do is looping animation.
This one was a limping animation, where we really wanted each step to be different, sometimes more painful, sometimes OK.
So it enabled us to do characters that are really different.
This is a panicking civilian in the villa when there's a villa attack.
So there's bombs flying everywhere.
And it was really nicer than just doing a.
simple cycling animation that's a bit boring.
So there it is.
Another place where we use it is character with props.
We really wanted character with props to be the highlight of our crowds.
There is something specific about those characters where the animation is actually stored inside the prop.
So when a character spawns with the prop, the animation is pushed onto the character.
and if ever I bumped into him and he drops his object, the animation will actually be pulled out of him and you'll play a simple walk cycle like any other characters.
So you won't walk like if he was holding an object.
It was really good for acting also, trying to do different characters.
Yep, thanks.
So now that we have all those nice walk cycle, it's all great, but we still needed to have a way to make characters faster.
It's an AC2 that we found that characters, NPCs from AC1, actually had hundreds and more animation to do the whole navigation system.
Because originally, we needed to replace each and every animation to create a new character.
So that's where the idea of our NPCG, which is our generic NPC, came to be.
If you want to change a walk cycle, like how we did it previously, this is how it is.
If I only want to change a walk cycle for a character, of course I have to change the transition between the wait and the walk cycle, because we use a pose-to-pose system.
And if the pose from the end of the transition does not match the start of the walk cycle.
we're going to get a jerk or a pop.
So really, we want to get rid of that.
So the tech behind NPCG, because we like to call things, we called it TransBlend.
So the use of TransBlend, what it is really is just using a generic cycle to blend into a specific one.
What we wanted to achieve with that is basically, say, we're a bit tight in time, and we want to create a character.
We just want to create a character by doing a weight and a walk cycle.
So we created this NPCG, this not very distinctive character.
His animation could be played on a fat man, a thin man.
It could be played, actually, on a woman, a guard, anybody.
Its purpose is just to share his transition, share his basic animation so anybody can use it.
Because these animations are about 70% of a character's animation in navigation, let's say.
But you only see them maybe 10% of the time.
What you see 90% of the time is the weight and the walk.
So every NPC has this base layer, NPCG, for TransBlend to work.
So in this example with TransBlend, what I did is, if I just, again, want to change the walk animation, the character is going to start from a wait state, let's say.
He's going to use the generic weight.
He's going to use, again, generic transition from weight to walk.
And he's going to start his first frame with the generic walk.
But as the walk cycle goes on, he's going to crossfade.
He's going to blend into that specific walk.
So it was a great way for us to create characters really fast.
Some characters have no more than six animation.
Because I'm using the walk example, it's good for jog, for any motion animation, and even for weight.
But six animation for a character versus hundreds, it was a really good thing for us.
I have an example here where we used it.
Actually, it's an example where we used it on Ezio at the beginning of Brotherhood, where Ezio is wounded.
We only created the motion animation, really.
So he's using his transition animation, his basic transition animation.
But when he starts running, you can see that with two steps, it's just enough to.
crossfade into that specific animation.
This is where we use it for a courtesan in a specific mission.
Again, it wasn't a main path or anything, but we were able to say, yes, we can create that character, even if it's last minute, because it's just a wait and a walk, and that's it.
So.
And now we have our last example.
This was our first test video that we had made, trying to see how the NPCG TransBlend system works.
And when we first did it, we wanted to test seeing the crossfade happen from one motion cycle to another.
So we made something that was sort of flashy, something that really show off.
We're trying to push the limits.
TransBlend and also showing we have fun at work.
with a little typical Xeer flare to it as well.
But at the same time for us, it was really a great way to see the actual cross-lead happening from a generic walk into this specific wall.
It was fun.
Ha ha ha.
So now that we have all these animations, all these assets, that's really nice.
But we do have to talk about budget.
Yeah.
Each time we do an Assassin's Creed game, we're a bit tight on budget, because we keep building upon previous games.
So we have a whole lot of stock of animation to build upon.
So first up for budget, NPCG was really great help for us.
Creating characters with very few animations versus hundreds is a big memory saver.
Of course, we did characters that had more than that.
But for characters that show up only once, you can really get away with it.
We also made sure that Crawlife characters were a bit less complex than in AC2.
In AC2, we had a lot of breakers and everything.
So we made it simpler, but we added more variety.
Another way is to reuse animation, of course.
Example, for Mission Givers, we didn't want.
long animation, they would have dialogue for like 10 or 20 seconds.
So we made sure that we had these small bits of animation that all branched together, and we used them for all the mission givers, basically.
And also custom actions were a good thing, where we could reuse animation in different body parts, even though originally it was structured as a upper body.
We could say, oh, well, we used this one, but we use only the two arms, because that's what we want.
Also, Rome is divided in different districts.
It makes sense, but it's also really good for us in terms of budget.
Because the Crawl Live coordinator can load animation dynamically, what it does is that we have specific animation for each area of Rome, but they are not loaded all at the same time.
So the animations from the beggars in the slums.
are never loaded when you're in the market district, and you have all the rich merchant.
So it's also a good way for us to make sure that, because if we had all the crowdlife character at the same time, we would bust our budget.
But that's a really good way for us to do it.
And that's it.
So memory was a big concern for us.
But by being smart about where you spend it, we overcame that problem.
To wrap things up, it was a hell of a challenge for us on Brotherhood.
We wanted to make all of our crowd feel really much more alive, but how?
And at the beginning, you can imagine our view, we had limited tools and 10 months to make a game.
So we opted for developing all of this in health tech ourselves.
It really helped everyone make all of this great new content much more, less time.
So we had the Crowd Life Coordinator where we could just drag and drop these characters in the box, have all these static crowd life in all the cities of Rome, really giving it this great ambience.
We had the character action sets where we could have diversity in our walk cycles, so breaking the typical two-step version that we previously had.
We had the NPC Trans Blend system, dancing.
where the animators were able to make new animation sets by just replacing a handful of animations versus the hundreds that we would have previously had to do for new animation sets.
And then we had our custom action data-driven behaviors that allowed us to create simple behaviors on the fly.
really removing the dependency from the level designers and the animators.
So, the systems ended up being really beneficial to everyone.
One, all of our custom actions could be used from different contexts, so whether you were walking, idle, riding on your horse, or running around on beams, you could reuse the data in any of these contexts.
Our AI missions team ended up using a lot of our preset custom action packs.
So we had some missions where they used the pointing custom actions.
We had an example in Brotherhood where we had the courtesans that kept pointing the way that Ezio should be going.
So a lot of the different teams used the custom action packs that we provided to them.
Our crowd AI team used this a lot for their simple behaviors.
All of our reactions in Assassin's Creed are driven by the custom actions, so if you're running around with a crossbow and you kill someone next to a whole group of NPCs, all of their little reaction that's all handled with the custom actions.
Also simple behaviors, the interactions with the doctors, with the shopkeepers, it was all done that way.
And lastly, our big huge benefit with all of this was with outsourcing.
Because on Assassin's Creed Brotherhood, we had four studios helping us create this game.
So we had us at the Montreal studio, we had Quebec.
We had NC in France and Singapore.
So once we made all of these internal tools and they were available in our engine, everyone was able to benefit from using these.
So some of the teams ended up doing specific parts, specific maps, and they got to use the same tools.
So everyone got to create more content, less time.
So, we're really, really happy with how everything turned out.
We ended up with a bunch of great new tech, and in 10 months, we were able to accomplish what we set out to do, which was creating the living, breathing crowds in Assassin's Creed Brotherhood.
Thanks!
If you have questions, you could...
