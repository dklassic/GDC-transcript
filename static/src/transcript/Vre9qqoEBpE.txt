Good morning, and welcome to Blending Autonomy and Control, Creating NPCs for Tom Clancy's The Division.
My name is Drew Reckner, and I'm a game designer at Massive Entertainment, which is a Ubisoft studio.
And I designed and implemented the behaviors for most of the combat NPCs in The Division.
I'm here with Phil Dunstan, senior AI programmer, and we'll be sharing this talk.
In the first half, I'm going to be discussing some of the high-level behavioral intentions for our NPCs and kind of the design philosophy behind them.
And then in the second half, Philip's going to talk about more of the low-level behavioral systems and the scripted control that we gave to level design.
So we're going to start with just a brief overview of the division, and then we're going to also give a brief overview of the combat NPCs in the division.
Then we're going to move on to the design philosophy, kind of what drove our decisions behind making the NPCs.
And then we'll briefly explore the different archetypes and factions.
Then we're going to move on to what I think is a pretty important topic, which is challenge scaling, before finally concluding the first half with the structure of the behavior tree.
For those of you who aren't already aware, Tom Clancy's The Division is an online and multiplayer open world shooter RPG.
We just released on March 8th.
Since we're specifically going to be looking at NPCs though, here's a brief video of the different factions in our game.
There should be some audio.
Yeah.
There was an audio cable up here, too.
It's plugged in.
OK.
Yep.
Good to go?
Yep.
All right.
Sorry about that.
We'll continue.
It's a bit loud.
Good.
Yep.
You guys are good to go?
OK.
Great.
So, here's the video of the factions.
Take two.
When our city started to collapse, the dark side of humanity took control of the streets.
No, no, no!
No!
No!
No!
No!
No!
No!
No!
No!
This city fell apart.
It's crazy out here every man for himself Survival of the fittest You got to take what you need in this world This world is our playground now and no one's here to stop us We got out of Rikers jail And we ain't ever going back in that cage It's all ours now.
We're the new kings of these streets.
These streets must be cleansed.
To save our city, we must burn away this disease.
Every trace of it.
Only through the power of fire can we be free.
Freedom is not a right.
Liberty is not a given.
This city needs an iron fist to restore order.
There shall be no resistance.
It is the only solution.
This is not our solution.
Our mission is to save what remains.
To save what's left of our city.
We are The Division.
And we do have one friendly combat faction.
We'll briefly mention it, but we won't really talk about it much today.
Our NPCs feature a suite of different features, such as a detection system, a threat system, scripted controls that level design can use to control our NPCs, reaction to the player's vast array of abilities, dynamic objective handling, reactions to civilians and wildlife, and various idle activities, the majority of which Philip will talk about in more detail in the second half.
Our NPCs were both used in what we call the open world, which is a less scripted, more systemic gameplay space, and a more highly scripted story missions, which are a bit more like your typical third person shooter missions.
As I alluded to earlier, we used a behavior tree architecture in our Snowdrop engine, which is a brand new proprietary engine developed by Massive.
One other thing before moving on, I think it's just important to note that our AI was completely server side.
Next we'll look at the four design pillars that we had for creating our combat NPCs.
The first pillar is that our NPCs had to support the idea that our game was both an RPG and a shooter.
So this meant that we needed to allow the player to play in different ways and use different roles.
So think like disruptor, tank, sniper, medic, and others.
This was especially important because we were a co-op game and we wanted players to combine their skills to synergize with one another.
And that also meant that they needed a reason to do so.
On top of that, we incorporated typical RPG systems like aggro and crowd control that aren't always seen in shooters.
Another thing we wanted to do is we wanted to incentivize the pre-combat setup, something that we coined as the investigation phase internally, which basically gave the player the opportunity to scope out and plan for a tactical attack.
And finally, of course, because we were an RPG and a shooter, we wanted to reward the twitch gameplay of a shooter, so that was the basic timing and positioning and dexterity challenges that provides.
The next pillar was that it was important that our NPCs fit into a realistic setting.
The Tom Clancy IP is of course known for its realism and its highly detailed universe, so our NPCs needed to have some kind of realism to them, so they were constrained by that to some extent.
So that meant we couldn't rely on magic and sci-fi even though we were an RPG.
At first, this kind of seemed like a bit of a limitation, and it was a challenge.
But later, we found that the constraints and the guidelines that provided actually empowered us way more than if we had kind of a blank slate to work with.
The player could go basically anywhere in the world in our game since we were open world.
So we had a near one-to-one recreation of Midtown Manhattan.
So that also meant that we needed to develop ways of encouraging the player to come back to locations when they've powered or leveled up, although we mostly solved that through enemy level scaling.
Most importantly though, even though we were in this realistic setting...
fun was still the most important thing for NPCs.
Our NPCs were mainly there to drive fun for the player.
even though that some of their behaviors were a bit gamey, we decided that that was best for the game overall.
We felt like we could push the boundary a little bit on that.
And personally, I mean, that's a bit hard, right?
Working in AI, because sometimes we get our egos a little bit involved, especially me, and you have to remember why you're making the game in the first place.
Our third design pillar was to create strong archetypes.
So this meant creating NPCs that fulfilled various roles that challenged the player in different ways.
This meant encouraging the player to use different tactics based on the enemy compositions.
Now we created, excuse me.
We created NPCs that used different strategies and skills and would synergize with one another.
And that was kind of a core part of creating combat was to create something we called combat puzzles for the player.
And that was where we used two NPCs that worked really well together.
Now, this of course meant that we had to create really clear signs and feedback to the player.
And we did that through the UI color, the icons in the UI, the appearance of the enemies, and of course their out-of-combat and in-combat behaviors.
The final and most important pillar, though, is one of continual challenge.
So our NPCs needed to provide new concepts and gameplay to the player over time because combat was such an important part of the division.
So we kind of introduced a basic rollout of our NPCs and the different skills.
But that also meant kind of introducing the loop of introducing something new, having the player practice it, then master it, and then introduce new and more evolved concepts.
Additionally, we did provide multiple difficulty levels for missions.
Don't necessarily need to talk about that, though, for the case of this talk, though.
So creating a continual challenge did pose some problems to us though in development because it meant that we needed to create a ton of different NPCs.
So I'll discuss how we attempted to solve this problem a bit later in the talk.
Now that we've covered the overall design philosophy, let's take a quick look at the different archetypes featured in the division.
Before we do that though...
I think it's important to note the real reason why we created archetypes, the real reason we thought it was important was because each archetype poses a different challenge.
And we broke this down into six separate archetype challenges.
The first of which is what we call target prioritization.
And it forces the player to deal with an immediate threat or face the consequences.
The next challenge that we identified was a repositioning challenge.
It forced the player, usually out of cover, to a new position to avoid a dangerous threat.
Next was the minimize exposure challenge.
And this meant that the player had to minimize the time that they were popped out aiming or in between covers.
The target ordering challenge challenged the player to figure out an optimal path for defeating the enemies.
Next was the positioning challenge, which encouraged the player to move to an advantageous position.
Now, this is really different than the repositioning challenge in that it's a very proactive action instead of a reactive one.
And finally, the endurance challenge was one where the player had to spend a lot of time in order to defeat an enemy.
This is a table that we gave to our level design team to create interesting challenges.
So this table is really meant to kind of show which archetypes fit really well together and their skills synergized using the challenges that we showed in the last screen.
Before we move on though, just a quick warning that the videos shown in this presentation from this point on feature test maps with incomplete lighting and propping.
So you guys probably are all aware of this.
Just something to point out.
So down to the archetypes.
The first archetype that we had is what we called Assault.
And that's kind of your basic cover using grunt.
It's your basic third person shooter challenge.
but they're really there to kind of balance out the fire team and and yeah they they were a grunt role within the fire team is what we called them next is the rusher archetype which runs directly at the player and forces them to prioritize them or face the consequences they got more dangerous as the player got closer so it was really important for the player to take them out as quickly as possible sniper archetype Pretty typical sniper, long range, high damage, single shot, very accurate.
They force the player to minimize their exposure, so not stay up too long, not go in between covers too often.
The thrower archetype throws a grenade or other dangerous objects to force the player usually out of cover.
So this is a repositioning challenge.
Next are the controller and turret archetypes.
The controller sets up and fights through a proxy, generally a turret, and repairs it if it ever gets damaged.
Now the turret automatically fires at the player, usually with a high rate of fire, suppressing them.
But what this did was this introduced an interesting target ordering challenge because the player could make a decision if they wanted to try to take out the controller before the turret was set up, or they could damage the turret and lure the controller out, or they could damage, or kill, I'm sorry, the controller while the turret was up and have the turret malfunction on its own.
Next is a heavy weapons archetype, suppresses the player with a high rate of fire, force the player to minimize their exposure.
But what's different with this and the sniper though is they typically had kind of a long reload time and allowed the player to come up and kind of exploit them.
The next archetype is the tank archetype, which are heavy NPCs who take a lot of damage to kill, but they also generally deal a lot of damage as well.
They have weak points on them, and this allows the player to position themselves in a way that they can hit the weak points, and some require flanking.
And they always end up either damaging the NPC by a lot or crowd controlling them.
Leader archetypes affect the behaviors of other NPCs, generally making them more aggressive, so it's advantageous for the player to usually take them out as quickly as possible.
Next is the support archetype.
Assist teammates by healing them.
Generally, think of a medic or something like that.
Again, it's a target ordering challenge, but medics are also really defensive.
So the player also has to kind of position themself if they want to take them out or lure them into a wounded ally.
And finally, we have what we called special.
And that is basically all NPCs that didn't fit into any of the categories.
Now, this meant that NPCs in this category were a bit harder to find, and thus, the player didn't have a lot of education, necessarily, on the specific mechanics.
So we primarily saved these for endgame, to keep it interesting for the player.
Now we're gonna take a look at our five enemy factions, as well as our friendly combat faction.
Now these are introduced in the order of which they're introduced to the player.
So the first faction the player will encounter are the rioters.
They present a really introductory challenge to the player.
They're our starter NPCs.
So they're really there to kind of teach the player the mechanics of the game and really introduce them to the various archetypes that we have in the games.
So snipers, throwers, with very little distraction.
They're disorganized, they're unskilled, they're low-tech.
The next faction the player will encounter are the cleaners.
Now the cleaners present a slightly more advanced challenge to the player.
And most notably they introduce a few new archetypes to the player for the first time.
And that's the controller and thus turret archetypes.
And then of course the tank archetype.
They're a bit more organized and they're a bit more deadly than the rioters.
The third faction the player will encounter are the Rikers, and the Rikers present a slightly more advanced challenge than even the Cleaners, and they're a bit more coordinated, so this is the first time the player will kind of see coordination in combat.
The fourth faction is the Last Man Battalion, and the Last Man Battalion is a kind of militaristic faction, so it fits kind of the Clancy IP really well, and it provides advanced challenges to the player.
They're organized, they're tactical, and we'll talk about some of the things that they do in just a bit.
And the last enemy faction that the player will encounter is the Tier 2 of the Last Man Battalion.
Now, narratively, they're the same as the Last Man Battalion, but they actually are, gameplay-wise, a pretty separate faction.
They're intended primarily for endgame because they present such an advanced challenge to the player.
We also blend our archetypes a little bit at this point.
So we kind of blend what a controller is with a support, for example.
So we kind of change things up a little bit for the player.
They're very organized.
They use a lot of group tactics.
So they're really intended to be a difficult fight.
And last but not least is our sole friendly faction, combat faction, I should say, which is the Joint Task Force, or the JTF.
They have pretty basic combat behaviors, only a single archetype.
And really, their main purpose was to be a cheerleader in the game for the player.
So they would just cheer the player on in and out of combat.
So now that we've talked about the different archetypes and factions in the game, I want to talk about the NPC challenge tiers, which was pretty important to our game.
It'll combine kind of these two components.
So to provide a continuing, continually involving challenge for the players, we took each of the five factions and we split them up into tiers, starting with the rioters and ending with the last man battalion.
Now we had a bunch of different aspects that I listed there that we improved as we increased the faction tier.
So we did this really for two reasons.
Like one, we wanted to provide a continuing evolving challenge for the player, which is one of the pillars I mentioned, if you remember.
But possibly the more important reason to that as well, or equally as important, is that we needed a quick and relatively easy way to create a lot of NPCs.
So we kind of picked components that we thought we could tweak that would be interesting in order to provide the greatest variety possible.
So we're going to briefly look at each of these elements and how they're scaled.
And we're going to start with reaction to player skills and actions.
So to efficiently scale the way that NPCs reacted to the player's vast array of abilities, we created what we called profiles, or reaction profiles.
Now, these profiles changed depending on the faction and the role of the NPC, which I'll talk about in just a second.
So first is the dumb profile, and this is used exclusively by the rioters, and it allows the player to be a lot less careful with their abilities and how they use them, so the player doesn't have to use a lot of consideration.
They get a lot of, you know, kind of bang for their buck with their skills.
Also, as an example...
If the player uses a seeker mine on an NPC, and a seeker mine is an autonomous ball-shaped bomb that rolls towards an enemy that explodes in close proximity, a dumb profile NPC will run away in a panicked way, and they're going to run towards an ally, a very reluctant ally actually, and hopefully the bomb will explode and kill them or damage them both.
Next is the default profile, which is used by the majority of our NPCs in the game.
It's slightly better than the dumb profile in terms of the reactivity and the way that the NPC avoids the player's abilities, but it's still not very effective.
So in the example of the Seeker Mine, instead of running towards an ally, the NPC just runs away from the Seeker Mine in a panicked way.
The next profile is the elite profile.
And the elite profile is only used by the tier two of the last man battalion and elite role NPCs.
Now this profile actually allows the NPCs to counter some of the player's skills.
So if we looked at the seeker mine example again, an NPC targeted by that will roll out of the explosion.
Next is the tech profile.
And the tech profile is only used by, it's kind of rare, so it's only used by a few NPCs in the game.
But it allows NPCs to counter or even hack some of the player's skills.
Again, to use the seeker mind as an example, if the player deploys it towards them, they will hack it, send it right back to the player, and the player's own seeker mind will blow up in their face.
And the final two profiles are the heavy and the turret profiles, which are used by the tank and turret profiles, respectively.
So heavy profile, the NPC doesn't usually react to a lot of things, because they're kind of big and heavy, but they do have a couple few unique ways that they counter skills as well.
And finally, to use the seeker mine example, the NPC will actually kick the seeker mine if it gets close to them, and then have it destroy.
So our next difficulty modifier that we used was movement speed and style.
So we increased the movement speed, basically, of NPCs as we improved the faction tier.
However, we only limit this to the strafe speed of the NPCs and the rush speed of rushers.
Now, we primarily did this for kind of technical and production-related reasons, but we actually thought it ended up being pretty sufficient.
So some NPCs actually also had some kind of panicked movement styles, specifically in the lower tiers.
And then as we got up into the higher tiers, they used more composed movement styles.
Additionally, we had two different overall cover movement styles, so when NPCs were moving to cover.
The first one was what we called mixed movement, where an NPC would sprint to a location, stop, shoot, and then either run into cover or strafe and shoot into a cover a short distance.
The other option was called full strafe, where the NPC would strafe into a cover while shooting the entire way.
Now, a faction could have one of these two profiles, so we made it pretty easy.
The next modifier we had was the group behavior modifier, which we have split into two groups, which again, the faction got one of.
The first was what we called disorganized, which is where NPCs didn't coordinate their movement, they didn't communicate to each other, so they didn't provide cover fire.
And then we had organized.
And organized is where the NPCs did provide cover fire for each other, they did coordinate their movement, and they also actively attempted to swarm and surround the player.
The next modifier was cover usage.
So we split this into two major groups, one of which was assigned to each faction.
The first is inconsistent, where NPCs would occasionally wander out of cover and start shooting really aggressively at the player.
By contrast, the consistent one meant that NPCs always stayed in cover, and if they ever found themselves out of cover for some reason, they would attempt to get back in immediately.
Now one of the more important ones was skill usage.
So we scaled skill usage not only in terms of the frequency in which NPCs use skills, and the speed, and the duration, and things like that, but we also ended up swapping out entire skills.
So as an example, let's look at the thrower archetype.
So the thrower archetype starts off in the lowest faction, the rioters, with a tear gas grenade, which is non-lethal, provides a satisfaction for the player. It's not particularly dangerous, but if there are other NPCs around, it can be a little bit dangerous for the player, so they still want to avoid it. Next, as we move up into the cleaners faction, we swap that out with an incendiary bomb. It's basically the same thing as a tear gas grenade, except it does have damage over time included.
After that, we improve with the Rikers.
In the Rikers, we swap out the incendiary bomb with a frag grenade.
And the frag grenade deals quite a lot of damage, and it has a shorter fuse.
And finally, the last kind of evolution of the thrower is the Last Man Battalion, where we actually swap out the frag grenade with a grenade launcher that shoots three consecutive grenades that explode on impact.
So hopefully you can kind of see a progression of challenge there for the player.
And finally, I think it's worth mentioning that we did a little bit of health, kind of stagger, suppression, resistance, and damage and accuracy improvements with Faction Tier.
We tried to keep this as minimal as possible because we found that all the other things that we do, like behavior, I'm sorry, players respond to a lot better.
So it's less about numbers and more about behavioral changes.
So I'm going to show a video about, or that compares the first faction of the game, the Riders, with the final, the most advanced faction, the tier two of the Last Man Battalion.
Now, please note the differences in the cover usage, the skill usage, the tactics, and their skills in combat.
And also just a quick note, just a reminder that this is a test map.
And I have God Mode in, God Mode on, so I don't embarrass myself by dying.
Shooter gonna come out You gotta jump out of there!
There he goes down!
Ratcher!
So we also scale difficulty in a few other ways, which I'll just briefly mention here.
So we scale the challenge of individual NPCs by using something we call NPC roles, which is basically our one way to change the difficulty of an NPC without changing the faction.
So we start off with the, what we call, veteran NPCs, which is the first improved role.
And they're essentially the same thing as normal NPCs, except they have a little bit better weapons, and they feature the addition of armor.
So their health bar looks very visually different to the player.
The next role is elite, and elite NPCs have improved weapons, even more improved actually than the veterans, but they also have special ammo types.
We give them brand new skills, and they have improved ability reactions, so they start using the elite profile, for example.
They also have additional armor and even better aiming.
One quick note though on the skill modifications.
We actually ended up just using the next faction up or two factions up skills generally.
And that was mostly just to save production costs.
And they end up working actually pretty well, I think.
And then finally, we have the named role NPCs, which are basically just reserved for bosses.
And they're the elite NPCs, but they just have more armor, unique weapons, and do a little bit more damage.
So my final topic, before passing the stage over to Philip, is just to talk really briefly about the structure of our behavior tree.
So as I talked about before, one of the big challenges we had on the project was creating a huge number of NPCs.
And of course the way we decided to do that was to make our behaviors as modular and reusable as possible.
So we split them up into the groups, which you can see here.
So I'll kind of take you through the flow of the NPC behavior.
So we first start off with what we called high priority at critical events.
And so that's basically an evaluation of is there a grenade nearby?
Is there a seeker mind that's attacking me?
Or things like, is there a status effect applied to me?
Or is my weak point exploding?
Something like that.
Now if those checks fail, we move on to what we call scripted events.
And these are all events that are level design controlled.
So these are move orders and things like that.
So Philip will be talking more about that in just a moment.
We then move on to low priority critical events and NPC objectives.
The NPC objectives being dynamic objectives that the NPCs do.
It affects their behavior and movement.
Then if that fails, we move on to our detection system, which is basically controlling whether the NPC is in combat, if they're an idol, investigation, and so forth.
Then we move on to some of the very specific archetype behaviors before finally ending up with the base behavior that almost all NPCs share.
Now, that controls cover usage, reloading, shooting, group behaviors, things like that.
And you'll notice I also pointed out the faction tier modifier.
So all those things that we listed before, those all are listed in those blocks and are controllable in those blocks.
So before digging any deeper, though, in the behavior tree, I'm going to pass the stage over to Philip.
Thank you.
Thank you.
Thank you.
Thanks, Drew, and good morning to everybody.
My name is Philip Dunstan, and I'm a senior AI programmer on Tom Clancy's The Division.
You've just heard Drew talk about our design intent and philosophy for the NPCs, and how we differentiate these through their archetypes and the factions.
I'm now going to describe some of the more technical elements of the NPC behaviors.
And I'm going to begin with a brief description of the combat encounters, before diving into some of the behavior systems that underlie our NPC behaviors.
I will then talk about how we give control over the NPCs to level designers, both directly and through these behaviors.
And finally, I will finish with a few lessons that we learned working with cross-discipline teams and particularly working with level designers.
The Division is a mixture of open world and narrative-driven story missions.
Our open world consists of emergent behaviors with roaming mobs interacting with level design And our story missions are generally authored linear series of encounters with a very predictable player movement.
Across both open world and story missions, a core creative intent on Tom Clancy's The Division was to give the player control over how combat is initiated.
And as Drew mentioned earlier, this is called the player investigation phase.
The player pulse skill helps players identify high priority targets.
Gameplay mechanics allow players to coordinate targets and to synchronize their combat.
And importantly, we wanted to allow the player to be able to relocate prior to the beginning of combat.
For a group of players to be able to move, to flank a mob of NPCs, or for a single player to approach within an optimal combat range based on their combat loadout.
To make this possible, we needed a system to allow players to approach the NPCs without triggering immediate combat, and that was the responsibility of our detection system.
Our detection loop is built of five alert levels, escalating an NPC from idle up to investigation when a target is spotted and into combat.
After combat, if all hostiles are dead, NPCs can transition to a combat investigation phase, and from there, either back into idle or into combat.
As Drew mentioned, spoke about earlier, the alert level controls some of the behaviors in the base of our NPC behavior tree.
The detection system is built on top of the alertness value.
And this is affected by both audio and visual stimuli.
And it's defined per archetype.
Our audio visual stimuli are governed by standard vision cones, and I'm sure you're familiar with these.
We have forward and periphery cones, and these are shown in yellow in the video.
In addition to the standard vision cones, we have instant combat cones.
These are shown in orange.
If a target is seen within the instant combat cone, combat is triggered immediately.
To prevent the player from sneaking up behind an NPC, we have a 360 degree close awareness area.
And our vision cones differ if an NPC is in combat or out of combat, if the NPC is aiming or not aiming, and they're also modified by the weather.
Interestingly, to allow the player to be able to sneak up on a group of NPCs out of combat, we modified the line of sight test slightly so that a player in low cover remains hidden more easily.
Our audio events contain a sound type and a radius.
The radius governs the maximum distance at which the sound can be heard, and the sound type specifies, limits the maximum alert level that can be triggered by that audio event.
An interesting, suspicious sound, sorry, can trigger, such as player vaulting over cover, can trigger an NPC into an investigation alert level, but not into combat.
And a threatening sound, such as shots fired or an explosion, can trigger combat.
In addition to creating pre-combat gameplay options for the player, we also want to give the player the ability to exploit the detection system during combat.
And to facilitate this, the NPCs remember the last position a hostile target was seen.
The last known position contains two points, the aim at position and the navmesh position.
The aim at position in green provides a point for the NPCs to aim at, where they no longer have line of sight to the target.
This is particularly useful when the target is in low cover.
We can position the aim at point slightly above low cover or outside of corner cover, so that bullets and flames are seen to naturally flow past the cover edge, with the occasional shot hitting the cover.
The nav mesh position allows NPCs to find positions that can see behind the cover, either for flanking or as part of an investigation behavior.
Moving on to our position system.
This is core to all of our combat behaviors.
And we use this for both cover and non-cover position queries.
We don't use any local steering on the division.
So we use this for nearly all of our NPC combat movement and some of our out of combat movement.
The position system operates on pre-generated tactical positions.
Across six square kilometers of Manhattan, we have almost two and a half million tactical positions, both cover and non-cover.
Our cover-based positions include information about the cover depth, the cover height, and the cover-facing direction.
And our non-cover positions are generated on a rotated grid with approximately four meter spacing.
We use a rotated grid here to avoid some of the artifacts arising from the north, south, and east, west orientation of most of the buildings and streets in Manhattan.
As behaviors are run on the server, these tactical positions are permanently resident memory.
To perform queries on the tactical positions, we use a single uber position evaluator with memory parameters affecting the scoring.
Some of those parameters are shown here.
To make it easier for behavior authors, we expose sets of parameters through different behavior tree nodes.
You can see in the screenshot here, we have a find cover position and find non-cover position nodes.
And these are the workhorse nodes of our combat behaviors.
In addition, you can see other types of movement queries.
In the top right, for example, you can see a node which allows an NPC to find a suitable place to place a turret.
And the bottom right, we have a node for an NPC to find a position to run away from a nearby grenade.
we often perform multiple successive queries in behaviors with more and more permissive parameters.
For example, we might perform a cover position query with an optimal range.
If that doesn't work, we'll fall back on a non-cover position query with requiring line of sight to the target.
And finally, if both of those fail, a cover or a non-cover position query without line of sight.
And we found that this gives us better results than trying to identify a single best position in a single pass.
It avoids the challenging problem of having to try and tune the different weights for the different parameters for the different queries.
Caching both navigation and line of sight results was key to making this work with acceptable performance.
In addition to combat positioning, we reused the tactical positions and the positioning system for investigation behaviors and other non-combat behaviors.
The example here is our scripted investigation behavior.
A group of NPCs is instructed to search an area.
And I want to reiterate something that Drew mentioned here.
This is a lot of the videos and screenshots you're seeing are not indicative of the final quality of the game.
They're taken from test levels generated in our Snowdrop engine during development.
So back to the example.
The search query here is a simple algorithm.
We take all of the tactical positions within the search volume.
When we query the positions, we look for a position based on the distance from the NPC and looking for corner-covered positions.
And finally, as the NPCs move through the area, we eliminate positions that have become visible to the player.
This is a simple algorithm, and it works well with multiple agents.
The division, finally I'm going to talk about the threat system.
The division is designed to be played co-op with up to four players.
And so we needed an aggro-style threat system.
Target threat scores are calculated from a base threat, which is made of stable parameters such as whether the agent is a player or whether they're currently behind cover.
And an action threat, which is usually a single frame event, such as the target shooting or the target using a skill.
And the action threat decays over time.
So those are some of our core NPC behavior systems.
We're now going to take a look at how we allow level designers to control NPCs, both directly and through these systems.
The Snowdrop engine provides level designers with a visual scripting environment.
If you've used CryEngine or Unreal before, you're probably familiar with this type of environment.
We provide nodes that allow level designers to issue low-level orders to NPCs, to set an NPC's alert level, and to modify positioning and threat systems.
We also provide nodes to set high-level objectives on groups of NPCs.
One of the first tools that we made available to level designers was low-level orders, and we call these NPC orders.
NPC orders are typically used to control a single NPC in a scripted environment, such as putting a hostage behind cover or having an NPC follow a player.
It's tempting to implement these as an override behavior that replaces all of an NPC's behavior.
But we found it much more effective to implement them in the behavior tree as a reaction to a critical event.
In this way, we can have them override the base NPC behaviors, but still have the NPC respond to very high priority critical events, such as grenades or blast skills.
Now, I'd like to take a moment here to talk about level design.
In my experience, level designers like to have full control over the player experience.
And part of that is having knowledge about how the NPC is going to react in any given situation.
So what happens when you give level designers, who like to have full knowledge of the NPCs, you give them fine positioning control over NPCs with NPC move orders.
Well, to borrow a bit of an old meme here, you get move orders for everybody.
You get a move order.
You get a move order.
You get a move order.
And you don't get a move order.
And so this, uh, thanks, Dave.
Yeah.
OK, so this isn't very good.
Because move orders have some serious downsides.
Move orders skip the evaluation of the underlying systems.
We no longer use the results of our sensor and detection system and our threat evaluation system.
And so move orders, load level orders, break NPC reactivity.
And this is really big for players.
Players seem much more likely to notice missing NPC reactions to events in the environment than they are to notice missing NPC abilities.
Also, NPC orders don't provide any context to the behaviors that follow those move orders.
And take, for example, we have a move order that is interrupted by combat.
The behavior that follows that interruption has no information about what the NPC was trying to achieve with that move order.
And finally, and I think most importantly, low-level orders force level designers to have to create AI.
They need to plan for all of the permutations of combat and the environment, and they need to script accordingly.
And this isn't a burden that level designers want, and it's not one that we should be forcing upon them.
So we're going to prefer systemic approaches that work with the behavior systems rather than circumventing them.
So the next thing we gave to the designers was the ability to modify the positioning system.
And initially, this was through NPC zones.
An NPC zone acts like a binary filter to the positioning system.
The position evaluator will only accept positions that are within the volume specified in the NPC zone.
If NPCs are outside of the zone, then we can allow positions that move them closer to the zone.
But once inside, they will remain within that zone.
However, this doesn't work so well in the open world.
Short-range combat NPCs break down at the boundary edges when their target is outside of the zone.
And even medium-range NPCs can be sniped with impunity from players from outside of the zone.
So we also added tactical position modifiers.
And the tactical position modifier was a soft version of NPC zone.
We changed the position evaluator to score positions that are closer to the volume are higher and give maximum score bonus to positions that are within the tactical position modifier volume.
Even still, we found that these modifiers could become easily overused.
One of the problems level designers was trying to solve was, with position modifiers, was to prevent combat in one area from attracting all of the NPCs nearby.
And this was happening particularly often within narrative-driven story missions.
But it could also happen in the open world, in the denser parts of Manhattan.
A level designer would set up different encounters in adjoining rooms, but as soon as combat initiated, then all of the NPCs in that mission would come running.
So we gave level designers two additional pre-combat alert levels.
The first of these is the scripted investigation alert level.
And we saw this earlier when we looked at the scripted behavior, and how it reused the tactical position system.
With the scripted investigation, NPCs would continually search an area ad infinitum.
And second, we gave them a scripted combat alert level.
And a scripted combat alert level instructed NPCs to take cover and act as if combat was going to take place with the level direction specified by the level designers.
Importantly, both these alert levels skipped the initial combat reactions or initial reactions from an NPC entering combat, such as barks and other combat reactions.
and they don't transition back into either combat investigation or idle.
The NPCs will stay in those areas until combat has begun.
Finally, and somewhat very successfully, we added high-level objectives.
And you can see the list of high-level objectives that we provided here.
These objectives are built on top of the underlying NPC systems.
They modify the position of the detection system, the position evaluation and positioning system, and the threat system.
The primary behavior for these objectives was implemented a slightly lower priority than the NPC orders.
But throughout the behavior tree, the NPC objectives can be used to provide additional context to behaviors, animations, and barks.
And high-level objectives can be used in both in-combat and out-of-combat situations.
And we're going to take a little deeper look at one of these objectives, the interact with prop objective.
So for the interact with prop objective, a group of NPCs is instructed to move into the vicinity of an object.
And if there are no high-value threats, then to start interacting with that object.
We modify the positioning system to score the positions near the object higher, and score even higher positions that are between the object and any hostile targets.
And so NPCs are naturally seen to take cover in front of players approaching the object.
We modify the threat system to increase the value of the threats that are in the area around the object, and further increase the value of threats that are targeting NPCs that are interacting with the object.
And finally, we introduce new behaviors to move NPCs that are a long way away from the object near the object.
And also, if there are no high value of threats in the vicinity, for an NPC to begin interacting with the object.
So the question arises then, low-level orders or high-level systemic behaviors?
Well, to tell the truth, we needed both.
In the open world, we prefer the systemic behaviors of the high-level objectives.
This handles the unpredictable player movement, and it allows us to maintain as much NPC reactivity as we can.
Low-level missions, however, are great in story missions.
They give fine control over NPC positioning, and they work much better for scripted sequence than animation sequences.
They are more interruptible, and they don't have the same constraints with initial player NPC positioning.
We found across low-level orders and high-level objectives that players will find a way to break all of our NPC behaviors.
but we, and certainly low-level orders are more brittle than the high-level objectives, but we certainly, we still found them very important to have for the division.
So, I've now discussed the technical aspects of the MPC behaviors, and how we give the control to level designers, and I'd like to finish up with some of the lessons that we learned working with cross-discipline teams.
and particularly working with level designers.
And I think this relationship is one that doesn't really get discussed enough.
We often talk about the relationship between AI designers and AI programmers, or animators and AI programmers, but rarely the relationship with level designers.
And yet, level design is so important to good AI.
Good level design matches the capabilities of the AI.
It shows off the strengths of our AI, and it hides any shortcomings.
And of course, the most important thing about any relationship is communication.
And we're talking about two-way communication here.
Yes, we need to educate the level designers on the features that we're giving to them to control the embassies and how we would like them to be used.
But we also need to talk with them about the bugs that they're having and to try and identify features where we can improve the tools that we're giving them and the AI behaviors in the level design they're creating.
I'm going to grossly generalize a bit here, and I certainly don't mean to make any offense at all to level design.
In my experience, level designers are used to making things work with the tools they have available to them.
And the systems they use are often in flux during the whole state of the project development.
They often have very tight production schedules and may be too busy producing content.
to be able to make suggestions on AI features.
So talking to them about the issues they're having and how we can improve our tools becomes even more important.
We found that wikis and emails are completely insufficient for this.
During the height of development, wiki pages get bookmarked, emails get marked as follow up, but no one gets a chance to read them.
On the division, we use cross-discipline teams to great effect on certain particular gameplay aspects.
One of my favorite things we did on the division was weekly sync meetings with key level designers and members of the MPC teams.
This was particularly effective with our remote co-dev teams.
These level designers became funnels for the type of communication that I'm talking about between level designers on their teams and the MPC team.
And also, and I'm very proud of this, is we had an embedded level designer within the MPC team.
This level designer became an informal point of contact for other level designers on the project with problems they were having.
And the level designer could respond quickly and detect patterns in those problems.
Validation and debugging tools are also very important.
We can validate as much as possible in the editor.
For instance, we can check the volumes that are passed to investigation areas or NPC zones to make sure they contain enough tactical positions to be viable.
One of the powers of the Snowdrop engine is our ability to create and iterate quickly on test levels.
And we use these both for reproducing the problems that levels are having away from the complexity of the full game.
And we also use it to provide examples of the intended use of our AI to level design.
Both of these tasks became a very important role of the embedded level designer on our team.
And finally, we found it very useful to expose our debug draw environment to level designers.
Not all of the level designers would use the debug draw, but some of them found it very helpful to be able to quickly debug simple AI problems.
On the division, we have a very powerful behavior tree editor and debugger.
And you can hear about more of this tomorrow with Jonas Gilberg's talk in the AR Summit.
But we have found that this was never used at all by level design.
This is simply too low a level that they're interested in for debugging NPC behaviors.
And so in conclusion, you've heard me, sorry, you've heard Drew talk about the four pillars of design that we use for creating NPCs.
how the division is both an RPG and a shooter, how we prioritize fun, but we respect the realism for the Tom Clancy universe, how we create combat challenge puzzles with strong archetypes, and how we continually challenge the player through increasing NBC behavior complexity and abilities.
You've heard me talk about the behavior systems and how we give control over level design to be over the NPCs, both directly and through these systems.
And finally, you heard me talk about the cross-discipline teams, and particularly that relationship with level design that I think is so important.
Like to shout a big thanks out here to the four Ubisoft studios that worked on the Division, Leeds Studio Massive Entertainment, and our three co-dev partners, Reflections, RedStorm, and Ubisoft Annecy.
There are a lot of people that went to making, contributing to the NPCs on the division, and we thank everyone for it.
A quick plug for Jonas Guilberg's talk tomorrow in the AR Summit.
Jonas will be discussing behavior tree editing and debugging tools.
And also a plug for Nikolai Stefanov talking later in the week at the main conference on the global illumination in Tom Clancy's division.
I'm pretty sure there aren't any time for questions today, but if you do have any questions, Drew and I will be around here afterwards.
We will also, along with Jonas, be at the Ubisoft Lounge on Wednesday morning from 11 to 12.30, and you're all welcome to come and ask us questions about the division, about working on AI, and about working at Ubisoft.
And in particular, if you'd like to speak to us about working in Sweden at Massive Entertainment, we'd love to hear from you.
We're always looking for good people.
Thank you very much.
