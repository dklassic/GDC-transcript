I am Chris Remo, I am a game designer and composer on the former Campo Santo team, which about a year ago was peacefully absorbed by Valve.
We shipped Firewatch in February 2016 and just a couple months ago on Nintendo Switch.
On that game, I served as a game designer and narrative designer, as well as composer and audio director.
I've worked in a number of different roles over the years on a various variety of games.
Worked as a writer, game designer, composer, and producer at different times on games including Bioshock Infinite, The Cave.
30 Flights of Loving, SpacebaseDF9, and most recently, the Rogue One X-Wing VR mission.
Currently, though, I am working on In the Valley of Gods at Valve.
But today, I will mainly be talking about Firewatch.
On Firewatch, we set out to tell a compelling human story in a believable and beautiful world, and to make that story central to the gameplay experience, really to be the gameplay experience.
We wanted no challenge-based mechanics of any kind, which means no failure state, but we also wanted a player-centric game where interactivity still mattered.
These goals were often difficult to reconcile.
Many design decisions led us to the final result of what we shipped, and I'm going to divide them into three principles that can hopefully help re-center your own design decisions around tackling deep interactive narrative.
Believability, reactivity.
and flexibility.
I'm going to discuss high-level considerations involved in organizing your game and team, specific game design practices and decisions, and tools we developed to facilitate those practices.
We definitely did not do everything right on Firewatch, and I'll touch on some of that as well.
But I really believe that these principles and the practices we arrived at to adhere to them are of tangible use beyond Firewatch in particular, both for developers who are also interested in tackling their own combat-free, puzzle-free interactive experiences, as well as for developers working in more traditional genres who have an interest in deeply integrated interactive narrative.
In attempting to tell a convincing and detailed story about human characters, believability particularly matters.
Not in the sense of literally representing reality, but in the sense of suspending the player's disbelief so they're receptive to your story.
The structure and limitations of your game, they must believably integrate as much as possible with your narrative goals, not impede them.
Our own starting point with Firewatch was pretty minimal.
It was to be set in rural Wyoming near where our writer, Sean Vanaman, grew up.
The player would be a summer fire lookout.
Something sinister would happen, and the tone would transition from peaceful to suspenseful and eerie.
Art director, Ali Moss, created an evocative piece of key art that guided our visual target.
And finally, we knew interactive dialogue would be key.
Campo Santo co-founders, Jake Rodkin and Sean Vanaman, had just come off Telltale's The Walking Dead, which leaned heavily on interactive dialogue.
Past that basic premise, we had to start making specific decisions about mechanical and structural elements that have a big impact on how the player engages with and is immersed into the game story.
We settled on the following properties.
A constant first-person perspective, a single interconnected world, a story told largely in the present tense, not just uncovered from the past, and a lack of challenge-based mechanics or failure state of any kind.
As an aside, the first two of these, the perspective and world structure, are particular to the needs of Firewatch.
I'll explain why we chose them given our situation, but they're not intrinsically necessary, obviously, for other games that are looking to deliver on these other things, a present-tense story without failure state.
That lack of a failure state is one of the things most likely to get a game characterized as not a game.
But something really interesting happens when you set the constraint of eliminating the player's ability to fail.
It forces you to find new ways to allow the player to progress through an active story.
And it gives you opportunities to more deeply immerse the player.
into the story itself by reinforcing that everything the player does is part of a single series of events that starts when the player first loads the game and doesn't end until the entire thing is over, without ever needing to reload and try again.
all of the player action is canonically part of the narrative.
Nothing the player tries is invalid.
Instead, as a game designer, there's simply a spectrum of how well you've supported whatever possibility space you've presented to the player.
This is a principle I call reactivity, which I'll explore more later.
To consistently suspend disbelief, it's important to get your creative goals and your practical necessities aligned as closely as possible.
The more those work in concert, the more your unavoidable limitations will feel organic and intrinsic to the story you're telling, rather than feeling imposed on it by petty reality.
For instance, in our game in particular, the first-person perspective was a reflection of the story's intimacy.
You're playing a specific, defined character, Henry, but you're also totally physically alone in this world.
The only other character you come in regular contact with, you can't even see.
Maintaining that integrity of Henry's perspective reinforces that sense of solitude.
And frankly, it was a budgetary advantage as well.
We wanted to hit a high level of visual fidelity, and having to constantly render a human character up close at that level of detail would have been pretty tough with our budget.
This ended up playing to a strength, highlighting Jane Ng and Olly Moss's beautiful environment art, which was as much a character in our story as Henry and Delilah are.
It's an overwhelming and all-encompassing presence around you, which suits a story about a man who's desperate to lose himself in a new environment, away from his real life.
Next, the desire for the story to be told largely in the present tense, not the past tense was important if we wanted to really believably immerse the player inside of the story itself.
A lot of heavily story-based games, the sort of category that a lot of people refer to as walking simulators, tell stories that have largely happened before the player has arrived on the scene.
And then through environmental storytelling devices like journals and audio logs.
the player pieces together what happened in that story.
There's definitely an element of that in Firewatch, but it was really critical to us that there be an equally important track of the story that is directly happening to and as a result of Henry's presence in the world.
The idea is that the player is a participant, not an archaeologist.
And I should note that I have absolutely nothing against uncovering stories in walking simulators.
In fact, I've contributed to a couple of them myself, including Gone Home, totally pro-walking simulator.
different than what we were specifically attempting to achieve.
So having one contiguous world was an effective way to communicate the big, meandering, and ecologically diverse reality of the wilderness.
By blending nearly all of the game's locations into one complex and beautiful space, we could drive home how Henry would feel in his own little corner of an ostensibly even huger environment.
And the player can, just like Henry, learn all of the roots and contours of this world deeply by the end of the game.
It might not suit a story of wider ranging scope told on a grander scale, but it's a structure that was utterly believable given our particular story.
Unfortunately, it also presented some significant narrative challenges.
It's a lot easier to tell a tight story across a linear series of discrete levels.
You have a lot of control over the flow of the story that you give up when you let the player traipse all over the place all the time.
So how would we maintain the kind of tension and pacing that's necessary for a paranoia-involving story like ours in this situation.
The narrative spine of true open-world games often suffers when the sense of momentum is undercut by the player having so much freedom that the illusion of time and urgency is broken.
And in a tightly plotted game, you often have to either arbitrarily change the world state as needed for your story or constantly invent plausible reasons why the player needs to go to such and such location next or prevent the story from breaking if the player stumbles on a key location or item before they're supposed to.
We found our solution to this problem in two influences.
In 2012, Brendan Chung released 30 Flights of Loving, a video game short story companion.
to his earlier story game Gravity Bone.
These games are really great examples of telling surprisingly effective stories inside extremely short video games.
30 Flights takes about 10 minutes and tells a story across non-linear fractured vignettes which are slammed together with sudden cuts.
We love the idea of using hard cuts ourselves.
It's a common technique in film, obviously, but given how often games are described as cinematic, it's kind of surprising how many cinematic techniques remain really underexplored in actual real-time gameplay, despite often being used in non-interactive cut scenes.
When we were attempting to solve this pacing problem, I happened to see the film Dallas Buyers Club, in which Matthew McConaughey's character is diagnosed with AIDS and told he has only about a month to live.
The movie then hard cuts to a title card reading, day one.
And we realize suddenly we're going to be counting the days until the character's likely death, which really drives home the urgency and terror of the diagnosis.
So we had hard cuts on the brain already, and then this felt like the missing piece.
We could bridge the gap between a linear story and an open world by splitting our game up temporarily into days, and then skipping the days in which nothing narratively interesting is happening, and placing the cuts at points of closure or tension.
We could go from day one, to day two, to day three.
But then, all the way to day nine, and then everything in between the cuts would be in the player's control.
It may not be believable in the sense of operating like the real world, which unfortunately has no boredom-diffusing or pacing-enhancing cuts.
But it's entirely believable and intuitive relative to our understanding of how stories work.
And it's a reminder that practical game design decisions can be stolen from just about any source, game or otherwise.
If you want to tell a good story in a game, expose yourself to as many types of stories as possible, as often as possible.
Unfortunately, there was a big design drawback to the day system, which is that players didn't know when a cut was coming.
This was intentional, but it also meant some players ended up being softly discouraged from treating the world as a fully explorable space, since the story might theoretically interrupt their exploration at any time, obscuring the explorable side content we built.
Every game design decision in that sense reflects a set of trade-offs.
You can only negotiate those trade-offs consistently over the course of development if you have a clear set of priorities.
In our case, the narrative integrity of the game was ultimately a priority over certain expressions of player agency.
I really do think if we made Firewatch again, we would navigate this particular trade-off a bit better, but knowing our priorities did at least keep us honest enough to make some clear decisions and move forward with functional, if imperfect, solutions.
I also think the contiguous world had a more subtle benefit.
In a game without a lot of mechanical complexity, having a map that's accessible at all times and having Henry progressively fill out the map as he encounters locations throughout the course of the game lets players actively plan and learn routes throughout this world and feel a sense of tangible gameplay progression.
It kind of offers some more traditional gameplay to chew on behind the softer narrative content.
And it's arguably one of the last remnants of a much more mechanically dense set of ideas we tossed around early on.
We explored incorporating mechanics such as actual fire finding using the fire finding apparatus in Henry's Tower, which we prototyped out.
And we had a number of more complex map implementations in mind, including filling out the map by way of triangulation inspired by the game Miasmata.
But ultimately, these didn't fit.
They were distractions that spoke more to the literal job Henry, the character, was doing in the fiction, rather than to the narrative and emotional experience we were hoping to deliver to the player.
They might have created a more believable depiction of a fire lookout if that's actually what we were attempting to create, but it wasn't.
The importance of scoping and cutting was really driven home working on this game, particularly with limited resources, which is every project, relatively speaking.
It's important to put your focus on the elements of the game that are going to speak directly to your priorities.
You only need the mechanics that believably support the game's goals.
Everything else is extraneous at best and potentially works against your narrative goals.
To that end, if story comprises most of your game experience, the way the player directly interacts with the story must be believable.
It must help suspend disbelief.
Think deeply about how immersive, intuitive, and interactive your story mechanics themselves are, not just the content.
By way of comparison, in an action first game, if the player is to engage deeply with your combat or traversal mechanics, then those mechanics should be fluid, responsive, and dominant in your game.
That makes the action believable whether or not it's realistic because the player is sucked into it.
Their disbelief is suspended.
And if your players are going to constantly be engaging with story mechanics for the duration of your game, remove as much friction as you can from the act of doing so.
We iterated a lot on our dialogue selection mechanics on both PC and console to ensure that they had input models that didn't interfere with world traversal, which is almost nonstop in our game.
So this decision to discard many non-narrative mechanical elements ended up putting a really massive burden on the player-facing systems we did have, most significantly the interactive dialogue, which had to support propelling both the narrative as well as providing most of the moment-to-moment entertainment value.
How would we turn just talking about stuff into consistently compelling gameplay?
How do we make the overall game experience itself feel interactive?
A lot of mechanical interactivity in character-based games has to do with the player's ability to change the state of the world or other characters and entities in the world.
Combat is a rich vein to mine here because doing damage to an enemy is a very intuitive and clear way to change the state of the world and remove obstacles.
Plus there's a direct causal and generally predictable relationship between the player's actions and the outcome.
But on Firewatch and our next game in the Valley of Gods, I think a lot about what I call reactivity, my term for a softer version of interactivity.
By reactivity, I mean the game's constant active observation of the player's behavior in order to validate and encourage the player's explicit and implicit decisions.
With reactivity, the game world directly reacts to the player, whether or not the player even was consciously attempting to influence the state of the world.
Rather than the game world being a static environment through which the player moves to discover a story, the game is trying to say yes to the player as much as possible.
This is achieved largely by keeping track of the player's choices, big and small, in order to pay off those choices and make the world feel alive.
It's critical in achieving that believable sense of the story happening in the present tense, not the past, because it puts the player in direct conversation with other characters and the world itself.
To support this, we landed on three important qualities for our interactive dialogue.
One, dialogue choices are mutually exclusive.
Once you choose an option, the other options are usually gone forever.
You can't work through all the available content.
As you have conversations, you're implicitly walking a path you can't undo, ensuring dialogue is always effectively a choice.
With one or two exceptions, it's impossible to hear the same voice line more than once in Firewatch.
we wanted to imitate as closely as possible the feeling and flow of human conversation, in which at some fundamental quantum level, nothing can ever really be unsaid or literally repeated.
Next, in most cases, dialogue responses are timed.
You can't sit around forever choosing a response.
Not answering is an answer.
Much like mutual exclusivity, this approximates real dynamics of conversation and also adds yet another axis of choice.
And finally, every dialogue choice can be tracked.
Conversations aren't discrete information delivery devices, although that's obviously one function they serve.
Rather, conversations are all small parts of a larger continuity of conversation that stretches across the entire game.
When dialogue choices can always have consequences, it effectively turns them into player-centric gameplay.
Here you can see how the name of a location on the game map is drawn directly from an earlier conversation option chosen by the player.
So interactive dialogue was our starting point for this principle of reactivity.
At any time, we were able to arbitrarily set a Boolean or integer value, a fact, based on any dialogue line.
This means every dialogue choice the player makes offers the opportunity to influence a line later.
Here you can see how the dialogue choices about that steep shale slide Henry encounters set facts that will be checked by the map to name that area.
This practice became really as much of a philosophical guiding principle as much as a technical capability.
Sid Meier is said to have defined a good game as a series of interesting decisions.
Some research suggests this might have initially been a misquote, but it seems like Meier himself has adopted the phrase anyway, and it's been widely spread, and clearly has a lot of value and resonance.
I would like to propose an inverse definition for a different kind of game, a type of design centered primarily on intimate narrative interaction.
Rather than a series of interesting choices, a good narratively driven game can be a series of interesting outcomes.
In this framework, less emphasis is placed on the making of the decisions themselves, which entails analysis of risk and reward, cost and benefit, and shifts the emphasis onto the results of those decisions, some of which the player may not even be aware that they're making at all.
I think this more closely models human interaction in life.
All of our human interactions are made up of small decisions constantly.
These decisions have consequences, even if often minor ones.
Narratives are constructed out of these outcomes and we're generally limited in our ability to intentionally plan and control them ahead of time.
Much of our understanding of our own stories is in our interpretation of them in retrospect.
Of course, we try and plan our narratives intentionally in real time.
And in a narrative game, there should be opportunities for the player to do this when appropriate.
A lot of dialogue choices in Firewatch offer clear alternatives.
Times to be honest or dishonest, forthcoming or withholding, cooperative or aggressive.
And these are important if you want the player to have some sense of narrative, some sense of agency inside of your narrative.
On day two of Firewatch, Henry investigates a disabled communications line, which leads him to other clues that start fleshing out the game's plot.
This takes the player across wide swaths of the game world, meaning in between key quest points, there's a lot of travel time.
We populated some of this time with a series of substantial conversations designed to build the relationship between Henry and Delilah.
Because the world of Firewatch is contiguous and interconnected, there are usually several equally plausible ways to get from point A to point B.
So each possible conversation has many possible start points, which are mainly initiated by Delilah, not Henry, as the player navigates.
These conversations allow the player to share details of Henry's past life.
And in turn, Delilah shares elements of hers.
What you choose to share influences what she shares in the current conversation, the following conversations, and throughout the rest of the game.
For example, here's a game logic event that starts a particular version of a conversation that applies when Delilah already knows Henry has a partner, but does not know about his breakup or current relationship status, as an example of how the game is sorting these different conversations according to the game state the player has created.
It's possible to play the game in different ways that result in the characters having very different levels of knowledge about each other's histories, including Henry keeping almost all of his past life under wraps.
And while our intention was that the player experience some version of these conversations, by design, the game is open enough that you can skip much of it depending on how you play.
So we soon realized that our seemingly linear story was generating an overwhelmingly complex possibility space that we could not maintain in our heads.
So we created a repository we referred to as the Delilah Brain, essentially a list of states that tracks what Delilah has learned from Henry and what she has told him.
If someone was working on a scene that needed to retrieve or set information from earlier in the game, they'd first search through the Delilah Brain to see if someone else had already explicitly started tracking.
that particular piece of information.
So it allows Delilah to maintain a believable and continuous awareness of what she and Henry have shared with each other, including whether she knows about Henry's wife, his dog, his DUI, and what Henry knows about her life.
This was really as much a best practices solution as a tools solution.
Without that central clearinghouse and habit of checking for existing information, it was all too easy for two team members to create one fact called Delilah Knows About Julia and one called Henry told Delilah about Julia, which ostensibly track the same information but could cause a false negative hours into a playthrough if different conversations are checking different facts to see if Delilah knows about Julia.
In a game with many thousands of lines, any of which could be setting multiple pieces of complex game state, this can become a spaghetti nightmare of logic and wiring.
We had a lot of mind-numbing gameplay debugging before we started developing safer ways of working.
So if you're making a game with complex interactive narrative, examine your content creation workflow and consider the ways in which different team members might inadvertently create redundant or subtly conflicting data.
which can really dampen your enthusiasm for relying on these kinds of complex state combinations.
The day two conversations, these laid the foundation, I hope, for a game-long relationship between Henry and Delilah that tried, at least, to respect both the player's own sense of agency and investment in Henry's story, as well as the fact that these are still two defined characters with established histories and personalities.
Much of the creative side of developing Firewatch's interactive narrative was that balancing act between honoring player choices and telling a story about these middle-aged people who come to every situation with a lifetime of preconceptions and history.
They aren't ciphers who can be entirely molded like some RPG characters might be, for instance.
Throughout the game, we were on the lookout for places where we could interpret dialogue choices to call back to even throwaway lines in ways that deepen the relationship or raise tensions between Henry and Delilah or cast light on the story's central mystery.
But reactivity becomes a more powerful principle when it's applied across all of the systems of a game.
There's an entire additional realm of decision making that is implicit.
The result of something going on at more of a gut level in the player.
These are the ways the player naturally interacts with whatever systems they're given.
Some of which often aren't even typically thought of as expressive systems.
Like simple object interaction and basic camera and character movement.
Early in development, we did some visual prototyping of how players might make these choices.
As an example, we used a scene in which Delilah directs Henry to restock his rations.
She requests he not take more food than he needs, because the supplies are to be distributed to several lookouts.
It's a clear A-B choice.
Do you take just enough food for yourself, or do you take more?
Our original design reflected this binary by depicting each option as a defined choice.
But such a system was entirely superfluous.
The game already included the ability to pick up physics objects.
So why not let the player express their choice implicitly rather than explicitly through the set of mechanics already in use throughout the game?
When you play this scene, there's no indication that you're making a choice, per se.
The food is there and you just do whatever you want to it.
The reactivity comes in very quickly afterwards.
If you take more than your share, you experience an entire short additional day in which Delilah calls to chew you out for disregarding her request.
Hey, you didn't take all of the supply drop food, did you?
Because, remember, it was for a lot of people, like five.
I'm hungry.
So you did.
I gotta go.
It's played more for a joke than anything else, but it was an important moment for us in terms of reframing how we even thought about what it means to make a choice in this video game, both from a designer standpoint and the player's standpoint.
That extra day was pretty cheap to make.
It was just our existing basic systems, a few lines of dialogue, a pre-existing location.
But for the players who experienced it, it was a really funny and character-deepening acknowledgment of a choice they may not even have realized that they were making at the time.
Over the long-term construction of a story, this kind of reactivity can build and maintain credibility in the characters and the world, which aids suspension of disbelief.
Players get the causal link in retrospect regardless of whether it was a calculated decision or not.
This is how a lot of life works and in my opinion it's just as valid a way to model interaction as is a more traditionally information or rules driven game play model.
A more complex example of using more than just dialogue to produce reactive outcomes occurs.
when Henry must track down whoever's been illegally setting off fireworks in the forest.
It turns out to be a pair of teens skinny dipping in a lake.
They notice Henry when he approaches and immediately start berating him for being, in their estimation, a boring old lonely guy in the woods.
From there, the player has a lot of options, although none of them are required.
You can yell at the teens in an attempt to placate them, you can insult them back, or you can say nothing at all, in which case they'll accuse you of being a creepy skeever.
If you grab their whiskey on the way over, you can use that to needle them.
You can pick up their boombox, which is blasting music, and when they complain, you can put it back or throw it on the ground or throw it into the lake or you can just take it with you.
Many of these choices have discrete reactions, some of which overlap and influence each other.
You can even rush past the entire encounter and never directly encounter the teams at all.
Because after all, what stops the player from just leaving immediately?
In a game with puzzles to solve, or enemies to defeat, or physical traversal challenges to overcome, it's easy to imagine putting an explicit obstacle in the player's way to ensure they fulfill a mechanical goal or at least stay in the same place for a certain amount of time.
Maybe with a higher budget, we could have had you directly interact with clothed teens instead of shouting at naked ones in a lake.
And they could have a pile of their own stuff that blocks your way until the encounter's over or something.
But it turns out we didn't really have that at our disposal.
And I'm actually glad we didn't, because it encouraged a more reactive approach to scenes like this.
As best we could, we simply tried to support player behavior.
Eventually Delilah will check in to see how everything went, and it's up to you what you tell her.
Your response doesn't have to bear anything in common with what actually happened.
Delilah has no way to know.
The game knows, though, at a very granular level of detail what you did and what you said you did, and any of that information can be used.
In fact, if you were dishonest with Delilah about bungling the situation, she eventually calls you on it.
Here's another example of what we call content wiring.
There's a dialogue event named On Exit Lakeside for Canyon, which is called when Henry leaves the teen zone going in a particular direction.
There's several events with this identical name.
This particular version of the event, which has the teens yell at Henry about leaving with their boombox, only plays if all of its requirements are met.
Boombox held in hand is true.
Teens have seen Henry is true.
Teens saw Henry exit is false, teens fled is false, and property destroyed is false.
These states are all set based on player action.
Some of them, like boom boxes held in hand, are very specific.
Whereas some, like property destroyed, could be set through a variety of different player actions.
If any of these five conditions are not met, the game will choose a version of the on-exit Lakeside for Canyon event whose requirements can be satisfied, meaning it's more appropriate to the situation the player has created.
These same narrative techniques could be applied in dramatically different ways.
We in our particular game tried not to draw attention to the many ways player behavior influences outcomes, but there's absolutely no reason that that has to be the case.
These same principles and systems could be applied in ways that call attention to, rather than downplay, the reactivity.
Firewatch came in at one end of the spectrum, extreme subtlety if that makes any sense, but you could go in the other direction with explicit UI elements that track your choices or somewhere in between with dialogue lines that more directly allude to the choices that you've been making in the game.
I think of design at the most fundamental level as the art of putting yourself into someone else's brain.
essentially empathy.
No matter how brilliant your idea or system, it has to survive contact with players who are going to encounter it with lifetimes of experiences and assumptions that differ to yours.
That doesn't mean you have to design for the outcome players most want.
Exhibit A being the ending of Firewatch.
We were under no illusions that would be a crowd pleaser, but the better you can anticipate what someone else might think or try or conclude based on what you've put in front of them, then the better equipped you are as a designer.
We often spent hours talking through scenarios to avoid simply putting up invisible walls or hard gating player progress through similarly stark means although frustratingly, frustratingly, we were not successful in every single case.
I did at least one full playthrough of the game, as an example of this, never proactively talking to Delilah, never using the walkie-talkie to contact her myself, and then any time I was able to let a dialogue choice simply time out.
I would just do that.
I wanted to make sure that no quests flat out broke, but also that all of the critical path story still actually made sense, that Delilah didn't inadvertently reference knowledge that she couldn't have and things like that.
It's definitely not the version of the game we targeted, but it's a totally valid way to play the game that we actually made.
So that style of play had to work and react appropriately to the player.
In another case, along similar lines, the player is told to go get a new handheld radio because Henry and Delilah fear that Henry's current radio has been bugged.
As in the team's example, we can't physically force the player to complete this quest.
If the player ignores Delilah's order and continues on to the next objective, either because they already know where to go or because they're just a proactive explorer, Delilah gets increasingly frantic that Henry turn back and go get the radio.
Their communication is very different in tone and content when playing this path.
path. And those who did play this way had a believable and reactive experience. Maybe they knew they were sequence breaking and got a thrill out of it. Maybe they had no idea whatsoever and it's just how they ended up stumbling through the world. But either way, the game supported them and reacted appropriately. I know there's a fundamental difference between these webs of discreetly authored pieces of content that I'm describing and...
more traditionally rules-based systems that often underpin game mechanics.
And I'm under no illusion that we're creating procedural narrative or anything like that.
But I do think games like this can benefit from their designers thinking about their authored content as though it is a living system.
In pursuit of reactivity, you want to pay off as many player behaviors as you can inside the context of the verbs your players have been given.
And although it's the designer's role to foresee those behaviors, you're never going to imagine all of them yourself, hence playtesting.
Firewatch was developed in a small office originally built as a two-bedroom apartment.
We subleased one bedroom to our friends at Asymmetric, makers of Kingdom of Loathing and West of Loathing.
So we really worked out of a one-bedroom apartment.
And that remaining bedroom was our conference room and recording studio.
So effectively, we worked out of a small living room.
The conference room doubled as our playtest space.
We would set the playtester down on our couch, and anyone from the studio who wanted to watch could follow along on an internal live stream that looked like this.
It was really valuable for uncovering bugs and pain points, but it was also really valuable for observing how players attempted to interact with narrative content.
For instance, it was a play tester who first attempted to throw the boombox into the lake in the teen scene.
We then supported that choice by shorting out the boombox and adding a reaction from the teens, and then that experience prompted us to start thinking about even more boombox behavior.
So if you take the boombox with you, blasting music the whole time, Delilah comments on how loud the music is when she checks in.
Taking these seemingly throwaway narrative interactions seriously became a really big priority for us and it significantly influenced how we thought about and made this game.
And for Critical Path Story Beats, playtests reminded us that content should be given room to breathe.
I remember sitting down with a stopwatch to speedrun quest objectives and make sure that even for players who are rushing through the game, the accompanying conversations wouldn't overrun the necessary travel time.
So if a day's first quest starts with Henry getting from his tower to the nearest supply box and a player can achieve that in 54 seconds, we would keep the critical path portions of the conversation.
to under 54 seconds to cut down on overlap or undo standing around.
We would often rewrite conversations or remove content entirely to achieve this, but writing is very often improved by being edited down anyway.
As a former professional editor, I think that's true even for the very best writers in games as much as anywhere else.
In populating your game with reactivity, seek to surprise and delight the player whenever you can.
At one point, Henry can find this gross trowel, and Delilah dryly informs him that most likely its purpose was to shovel poop.
If the player has not yet dropped the trowel, by the time Henry receives this information, he replies, and I'm still holding it.
And if the player still doesn't drop it, Henry continues remarking on his inexplicable behavior.
Moments like these, which combine multiple kinds of player input in order to trigger small reactive outcomes, seek to engage in almost an improvisational relationship with the player.
If you can make story content in a time and budget efficient way, after all, writing and recording a few lines of dialogue on top of what you're already writing and recording is a relatively small marginal cost, then it becomes practical to include bits of fun and surprising content on a frequent basis.
Individually, they might all be throwaways, but in aggregate, it becomes meaningful.
Allowing and encouraging the player to constantly interrogate your game world in different ways, and rewarding the player with acknowledgement and validation of that interrogation, both creates the sense that this is a believable place and encourages investment in your character relationships and story.
Players can also be given content reactively beyond dialogue.
Some of Firewatch's music, for instance, is scored directly to specific moments in the game, like a traditional score, but some is implemented in a more reactive way.
This is true of much of the music on day two, the part of the game that pairs long personal conversations with the player traipsing all over the world.
Knowing that the player may end up going reasonably long periods of time, being lost between quest points and big conversations, There's a music manager that's evaluating what conversations the player has had, how long it's been since they've had one, where they are relative to their objectives, and so on.
When the system identifies a potential sort of interaction valley, meaning the player hasn't experienced important content in a little while, isn't likely to hit any soon based on their current state, then it plays a little bit of music to kind of inject some emotion and weight into the moment.
Players' brains will do a lot of work in terms of applying specific emotional meaning to creative content.
if you've sufficiently suspended their disbelief and given them enough existing meaning and content to chew on.
I'm sure that no one technique I've shared here is new to games, obviously, but applying this reactive player-centric approach to narrative consistently without fail states is actually surprisingly unusual.
Treating it as the primary element of the game rather than just as flavor or Easter eggs is what really opened up our horizons.
I will freely admit we did not always succeed at this, or didn't take full advantage of the possibilities.
And we didn't always patch all the logic and behavior holes in the most graceful way, as Reddit and Twitter will attest frequently.
But solving interactive narrative problems while attempting to preserve player intention, while it may be difficult, is a really satisfying and challenging design ambition.
We also unintentionally front-loaded our playtesting.
So the closer we got to ship, the more we were scrambling to just get the thing built on our fairly small budget and time frame with fewer opportunities to playtest, and as a result, a lower density of really reactive content.
On top of that, making a game like this the first time through, it kind of felt like we were feeling out our philosophy and practices as we went along.
But hopefully we'll continue to build on this in our next game.
But my bigger hope than that is that other teams will take this thought process and set of ideas to further and better places than we have so far.
So in order to design for believability and reactivity, you have to build your game and structure your team with certain kinds of flexibility in mind.
In your game systems, you have to be willing to change or expand the capabilities of those systems in order to support types of reactivity you may not even realize would be valuable when you start development.
And then in authoring and implementation, it means your tools must allow for revising content without that work being so onerous that it discourages iteration.
And on your team, it means treating writing as an integral facet of game design, such that your writers are able to both react to the design needs of the game, as well as let the needs of the story influence the design in turn.
Going back to the classic teens example, before Henry actually encounters the culprits, he comes across evidence of their presence.
Empty beer cans, discarded backpacks and clothing, unused fireworks.
Henry can pick these things up, he can throw them, simply look at them.
After picking up a beer can, the player can stow it in Henry's backpack or drop it on the ground.
He can report the cans to Delilah with various reactions.
And then any of these things, in theory, can set facts for later use.
So tossing a can prompts Henry to remark, I'm not the maid.
And then In this scene as well as the following day, when Henry's attempting to track down the teen's campsite, the game tracks how many beer cans the player sees and collects and then uses that information to trigger lines appropriately.
The teens drink a lot of beer, it turns out, and we leaned on beer cans pretty heavily as trail breadcrumbs for the player to follow.
The result of this, though, all of this, is that within the bounds of Henry's defined personality, the player is enacting their own sense of Henry's purpose and attitude.
And at its best, the game interprets these tiny, discrete choices the player is making, and then infers and reflects back that intention to the player.
Reactivity is often particularly effective when the reaction is in sync with the player's intent.
A lot of our design effort was in trying to create complex sets of conditions to reflect that intention back to the player through as many different inputs as possible.
This necessitated more and more player-facing systems tying into the designer-facing tools.
Our first iteration of tools mainly allowed for setting facts through interactive dialogue, but we expanded the scope of what player inputs could be observed and used to set state over time, including many different types of object interaction.
For another game, there might be an entirely different set of inputs and interactions that end up being useful to support reactivity.
It was important to us that just about all be implementable by writers and designers without needing to constantly bug programmers to support implementing some particular piece of gameplay.
So except in extreme cases, when we needed a particular kind of player action to be tracked or observed, an engineer would integrate that ability into the design tool set rather than special casing it in code.
This flexibility allows writers and designers to iterate on their own work directly in engine.
And as a consequence, it has this other important result, which is that it feeds back into expanding the possibility space of what kind of creative content and writing can and should be made.
Once you know that the game is able to, for instance, react to what object the player's holding at a given moment and that reaction can branch depending on any number of other states based on past player actions, then your awareness of that possibility will always be present when you're coming up with new ideas for creative content.
Rather than the writing being a separate track to the player-facing mechanics, treating game systems and tools flexibly allows those two domains to be mutually influential.
It encourages habitually thinking about hand-authored narrative as a reactive system.
Which isn't to say that every new interaction idea should immediately be implemented as a repeatable system.
You should sit down as a design team in conversation with the engineering team to ensure that there's a legitimate case that expanding the systems and tools in a given way will actually be useful enough times to justify whatever technical cost it will incur.
You may come up with enough use cases that it's a no-brainer or it might be such a specific case that there's an alternative route to a similar outcome or you might put the idea on ice until you determine there's an ongoing need which may never happen.
In order to achieve that kind of flexibility, it's crucial that writing is an integral part of the development process.
Having worked as both a game designer and a writer and in full-time and contracting roles in those disciplines, I can confidently say that the more your writers are integrated into design and development at a fundamental level, the better the writing itself will be integrated.
Regardless of how your team is physically organized, whether it's distributed a single office or a combination of those, Writing and design must be in conversation.
Writers can't simply throw material over the fence and then expect it to be implemented in a way that takes full advantage of the possibilities your design offers.
I think of writing as a world building tool just like models, textures, animations, music, and audio.
It's easy to come up with cool story ideas that are appealing in a vacuum.
in practice can't be directly integrated into the game design, or would only be appropriate in a cutscene.
When writing and design are in close, ongoing partnership, you start to develop an intuitive sense about which story ideas will cleanly fit into your game design, which ones are likely untenable, and which could be appropriate with some massaging.
To that end, consider a television-style writer's room approach, in which a small group of team members meets as needed to solve overarching plot issues, as well as micro-level issues of narrative and design, before the writer goes off to write the actual words.
How can we motivate the player, say, to get from point A to point B?
What could justify changing the world state at a particular point in the story to set the stage for the next big plot development?
What physical evidence could the player find and directly interact with in order to outfit them with an important piece of information?
And importantly, what specific versions of these solutions will be appropriate and implementable in the context of our game systems?
These problems are at the intersection of writing and design, and you'll need a flexible approach to your team roles to solve them on an ongoing basis.
It's beyond the time constraints of this talk to delve further into the workings of the Firewatch writing and design toolset, but there are two GDC talks that go into more technical detail.
The tool's underlying principles were based on a 2012 talk by then Valve programmer Elon Ruskin entitled AI-Driven Dynamic Dialogue Through Fuzzy Pattern Matching.
It explains how Valve implemented dialogue in Left 4 Dead and other games by matching possible lines in other gameplay events against hundreds of facts based on player and AI state.
And we applied that approach in Firewatch, as explained in 2017 by Campo Santo programmers Will Armstrong and Patrick Ewing in their talk, Do You Copy?
Dialogue System and Tools in Firewatch.
Both of these talks are available on the GDC Vault and are very useful if you're interested in tackling some of these techniques and systems in your own games.
And our experience across Firewatch and into the development of In the Valley of Gods taught us that the specific form these tools take is highly informed by the needs of your particular game systems, which is another reason I didn't go further into our specific implementation.
The Firewatch editor was in many ways very raw and required some amount of finesse, but it was accordingly extremely open-ended and extremely flexible as well.
On In the Valley of Gods, the requirements of narrative content for a physically present companion character with her own set of performance needs meant we ended up spending a lot more time on the editor to get it a bit more visually refined to avoid being overwhelmed by all the systems it had to tap into.
This brought with it some sanding down of the pure flexibility of the Firewatch system, but that was necessary given the needs of In the Valley of Gods.
And having made one of these games already, we had some better instincts about which of those edges would be a little safer to sand down.
the second time around.
Firewatch was also extremely engineering constrained, so it's something of a miracle that our few programmers developed that tool set to the extent they did.
As with everything in game development, it's all a set of trade-offs.
In development of your tools, do your best to consider who will be using them, how they will be used, and for what.
Polish and usability of tools that the players will never see may feel like an indulgence, but it may end up saving a huge amount of time that can ultimately be put back into making the game better.
Part of my motivation in giving this talk was to make the case that narrative can support an entire game's worth of player-centric interaction.
I've had a number of conversations with game designers I really respect who see games like Firewatch as essentially not quite being games, even if they don't necessarily mean it in the inflammatory way that you often see online.
I do understand what they mean in some sense.
I myself have a deep love for heavily systemic games like Spelunky, SimCity, Stalker, Civilization, XCOM and many more games in that vein.
But the systems those games model, and model very beautifully, are not equipped to consistently model certain kinds of intimate narrative interactions as the primary focus.
To tell a story in a reactive way in a game, and to have that reactive story be the single most important and dominant element in the game, requires acknowledging that the way humans interact and the way life works can't be modeled in the way that many game systems operate.
But importantly, we can still take the kind of habitually systemic thinking that we as designers apply to games of all genres and use that to deeply influence and inform.
carefully hand-authored narrative in order to make something new.
Those who know me well know of my deep love and appreciation for the systemic integrity of Far Cry 2, led by Clint Hawking and released in 2008.
It's a game that uses unforgiving but very player-centric game systems in ways that not only reward and punish experimentation and provide consistently surprising outcomes, but also speaks deeply to the themes and goals of the game.
In many respects, it couldn't be a more different experience to Firewatch, but its holistic and player-centric approach was a huge influence on me, and I hope that we brought some of that to our own game.
Given that hope, I was extremely gratified when a recent positive video review made a particularly resonant comparison mere seconds in.
So I finally played Firewatch.
I hope Firewatch's best elements spread like the blazes you're ordered to spot.
Because in spite of the genre, its handful of mechanics reminded me of Far Cry 2, of all things.
In the past I've criticized- So yeah, that was a good day.
And that's all I have for you today.
Thank you for attending.
I really hope that these principles and lessons can encourage other teams to take some of the work I've described even further.
Thank you very much.
Thank you very much.
And I've been told by multiple people to please fill out your session, remind you to fill out your session forms that I think are emailed to you.
I think that's how it works in my experience.
If you want to ask any questions, I'm happy to answer them to the best of my ability based on this or anything else, I guess, probably mainly this stuff.
Thanks for your presentation.
You mentioned in your presentation that the length that you guys went to emulate real life, especially the way that the dialogue formed.
And one question that I had was that in real life, certain choices that you make are not weighted, they're not as significant as another choice.
And so in particular, when players are just starting off and they might not realize that their implicit choices have impact on consequences, how did you guys approach weighting of the different choices?
That's a good question. I would say in Firewatch, we didn't worry too much about weighting choices equally.
That wasn't a concern for us.
So, I mean, this isn't a dialogue choice, but just as a way of example, the scene I talked about with the choosing food, like, there's a reactive outcome if you take too much food, and there isn't one if you take the normal amount.
Like, we weren't trying to always do a 50-50 wait.
The way I would think about it would be, you wouldn't want to wait the game such that if you're always kind of an asshole, or if you're always nice, then that's how to get all the stuff.
Like, there should be reactive outcomes happening regardless of how the player plays, but they don't all need to be equally waited for every single interaction.
You know, we weren't making a game with sort of a stat-based tree that the player's trying to min-max.
In fact, we were trying to do quite the opposite.
We were hoping that players would simply choose whatever response or implicit action they felt was most appropriate to the situation without making...
without trying to weight their decisions ahead of time.
So in the case of our particular game, we didn't put a huge amount of focus on that.
But like I said in the talk, I think you could make a game that uses literally these exact same systems, but does put a lot of emphasis on that and is constantly drawing attention to it.
It just wasn't necessarily appropriate for the particular story we were telling.
Great, thanks.
You're welcome.
So you talked about player testing and how that affected interactivity.
Did player testing actually change narrative or how tight or how close was the dev team to the narrative and the story?
And how much did player testing affect the actual outcome?
The narrative itself, I would say, usually was not that influenced.
The sort of broader story, the narrative spine of the game, the linear story that was the backbone of the game, underneath all this other sort of player reactivity, we didn't change that very much due to playtesting, which I would say was in part because we had a particular way of...
putting the story together that was, you know, had particular goals that we just wanted to achieve.
But also because realistically, you know, the game was made on a pretty tight schedule.
We made it in just about two years, just a shade over two years.
And we didn't, going back and constantly changing the story in response to playtesting, I think would have been challenging.
We did rewrite basically the last third of the game a few months before ship, which was pretty intense.
That was less because of like, sort of a playtester said it was bad and more because I think we all sort of suddenly realized it was bad.
So, which included people playing the game, but also included just it being obvious.
So the playtesting I think was a lot more about the kind of micro level and systemic issues.
But to the to the point I was saying about writer's room like...
Even though I wasn't the writer on this game, I was still, there were several of us who were kind of the writer's room who spanned disciplines including design and were constantly iterating on the story on a creative level as well as on the kind of reactive level.
So I do think it's, as I said, it's really important that the actual writing and story and plot be super integrated into the rest of development for sure.
Hi, I've got a question about the way that you were constructing facts and how that affected the design.
It looked like your strings were like you added a fact as you needed it in the story rather than having some sort of grammar or something that was more fully systemic.
Was that deliberate and did that have an effect on how you thought about the story or was it just that it was simpler to do it that way?
That, I mean, probably for more concrete detail on the technical underpinnings of that, you should watch the talk by Will Armstrong and Patrick Ewing, who are our programmers on that system.
I would say, from my end, the flexibility that that offered was useful in terms of being extremely non-prescriptive.
Being able to arbitrarily add any fact about any, sort of topic of any kind ever.
It sort of, facts can be added based on like a particular object that might sort of suggest some grammar that I think you're getting at in terms of like, did something to this object or did something to this line of dialogue or whatever in a more deterministic way, but.
I think this sort of encouraged us to take a really wide ranging and sort of open-ended approach to tracking any kind of information we could pretty much ever think of as long as there was some way to read it from the game inputs that we had.
Yeah, I'm trying to think if there's anything else that I think is valuable to say about that.
You mentioned Delilah's brain and how people understood where things were.
So if Delilah knew something, another character potentially could know it as well, and therefore you'd have to duplicate it and all those things.
Yeah, but if Delilah knows something and a different character knows it, those are fundamentally different world states.
Those shouldn't be the same fact, right?
Delilah knowing something and something being known in some other means, those are...
totally separate and one could be true and the other might not be or they might both be true or both not be true so you wouldn't want those to be the same.
Sure.
It was just that, you know, were there any facts I guess you didn't use?
Oh yeah, probably.
There were, I mean, like God, probably hundreds of facts we didn't use.
Will Armstrong, who I mentioned, is over there nodding vigorously at me.
Yeah, we didn't worry too much about that.
There wasn't really any harm.
in setting a fact that you might have used and then deleted the line that checked it later, it doesn't really do any harm to have that fact just being true, it might end up being useful still.
Hey, in terms of team comp, obviously you had like five or six...
In terms of what, I'm sorry?
Like team composition when it came to working on the game, obviously you had like five or six roles.
Was there ever any difficulty in balancing that and sort of how...
And others on the team as well, and sort of did that ever cause any reason for like a pause or sort of a reevaluation of how y'all were doing things?
Yeah, I mean, so we had about, I would say about 10 people, like basically over the course of development.
It started out a little smaller than that and ended up maybe a shade larger.
We didn't have, there was more duplication of, it's the case that there were multiple people on the team with several roles.
So like I was on the story team and a game designer, but also the composer and the audio designer.
So that kind of was the opposite of causing conflicts, because like I was the only person on music, for instance, so like there wasn't anyone else to butt up against.
I would say that people were relatively self-sorting in terms of how much they cared about the story.
So like Jane, our environment artist, for instance, who's like, I mean, an absolutely incredible environment artist, she...
was like, I'm gonna find out what the ending is when I play the game.
She was not deeply interested in being part of those conversations on an ongoing basis.
And the people who were more interested in that ended up sort of self-selecting into those roles.
So I don't think it caused a huge amount of conflict.
It looks like I'm getting a signal here to stop talking.
So, thanks for your question.
Thanks.
Apparently there's a wrap-up space on the other side of this floor, so I'll head over there and if people want to ask me other things, come over and do that.
