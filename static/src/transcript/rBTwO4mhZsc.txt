I did. The other thing is, on the other side of that wall is my lead designer, running a talk right now at the same time as me. I think that's why he has everybody shouting.
So can you all do the same for me? And please shout, and we'll get this started.
Fantastic. Thank you very much. It's always great to start something with people cheering for you rather than coming at the end. So I'm Connor. I'm the senior producer on RuneScape.
And I have had the benefit of, while doing all of the other things that you do in production, also spending three years focusing on a single product's pipeline and moving it from things that may have caused issues onto what we have today, which allows us to, every single Monday at about 11 o'clock, put out a new piece of content.
And we used to have a problem where we would slip from Monday to Tuesday, Wednesday, Thursday, and you start encroaching on future releases as well.
So what we're going to go through is how our rapid release cycle has allowed us to improve that over time.
So what is RuneScape?
Quick question, I always like starting with this one.
Who's heard of RuneScape?
Yay!
Who's played RuneScape?
Who still plays RuneScape?
We still have people, so that'll do.
It was the first free-to-play MMO.
It's been alive for 15 years continuously.
And over those 15 years, we have continued to release content week in and week out.
Right now, we have two live versions.
We have the main game, which is the one that's been running continuously.
And a number of years ago, we forked the game from a 2007 build, and that has had its own progression and now has 300,000 members.
We tend to have 500,000 people every single day, and we have over 2 million people every month.
So it's a big game, and there's lots of people there.
We have an insatiable growing player base.
We're looking for more and more content.
And as a game, we currently hold the world record for the most prolifically updated game.
And those updates aren't just little bug fixes or slight changes.
They are big, meaningful pieces of content.
So we do quests, which are two to four hours of, rather than fetch quests, you're talking about custom narrative, bespoke encounters, new environments.
The event systems are small, time-limited pieces of content that players have to jump in and get involved with.
We have brand new skills being added into the game, rarely, but we had one at the start of the year.
And then we're always releasing new bosses, new monsters, new pieces of content that way.
So the important thing is that every week you come back to RuneScape, you see something new and substantial to get involved with.
And that means that we can hold our players into the game, and this is something that I'm hoping that by the time you leave here, you'll understand what you can do to match that for yourselves.
And I see this as a bit of a challenge, a release challenge, and there are three components to it.
The first part are your updates.
What is an update? What does it mean to you?
We have large updates that come out each week.
But for yourselves, it's about finding that balance between, as a development team, what can you do?
And as a player base, what you actually want.
It can be a difficult negotiation to have.
And we'll go through that in a moment.
And then you have to consider your pace and the cadence that you're going through.
How do you release?
How often?
And how do you make that as simple and as smooth as possible?
As we update weekly, that means that we can refine and adapt it very, very quickly.
If you're looking at more of a monthly or annual update, then it's a bigger day and you've less chances to make those tweaks and improvements.
So hopefully you learn from us going crazy and you can take them into the bigger update that you're trying to do.
And then once you've gone live, all that content that you've just put out, you need to make sure that you can maintain it.
Because no one will ever give you any credit for fixing bugs.
It's just kind of what you're supposed to do.
But it still takes time.
You still have to give your thought and your attention to it.
And so how do you keep making sure that while you're maintaining your game and your service, you're also releasing new and big updates to hold players back into the game?
So let's start.
Updates.
Like I was saying, it's a negotiation.
You need to listen to your players.
With RuneScape, we look at our social channels.
We have that conversation, Facebook, Twitter, Instagram.
We listen to what they're saying, and we try and take that on board.
We also speak to them on forums.
And then in-game conversations.
You'll have a certain type of player who will engage with you in social.
You have a different type of player who will only speak to you inside in your game.
And in game, people are really happy when you have a dev just kind of turn up and have a chat.
It's a nice thing to do.
But we also have to look at the quantitative types of feedback.
So you're looking at analytics data.
What are players actually playing?
They may say they like one thing, but they're actually playing something completely different.
Make sure you're getting that kind of balance up.
And you understand what does an update need to be to really get good feedback from your player base.
Then the conversation moves to your team.
It doesn't matter what you promise to your players if your team can't actually deliver it.
And the people who best understand what a team can deliver is your own team.
We like to aim for being comfortably stretched.
So we feel like we're kind of pushing ourselves every time, but we know we can do it.
And every time we do it, we push ourselves a little bit further to see how much bigger we can go.
It comes down to us understanding what kind of rate can we deliver at, what's our velocity in getting through content.
And then with all of that, we let the team actually decide the releases.
We speak to our players and get a pool of ideas that they're really looking forward to.
But we let the devs decide what that would actually be as a smaller team.
Rather than top-down decisions of what the design would be, we let the devs power that and feed it back up.
And so.
The first thing that we did when we were having problems with trying to get our releases out on time is we thought what we need is we need some strict checks and process.
So we'll put in controlling the steps that people are going through.
We'll put in our sign-offs.
We'll make sure that everybody's on board.
We put our detail up front.
We make sure everyone is agreed as we step through it.
And it stops waste, right?
You don't have to build something that you won't be building or using later on.
And we detail our face, all of those ideas.
actually happened is we kept slipping anyway and every time that did not work for us. So I have a couple of samples of responses that we got when I asked the teams, what do you think about how we work? And you see it was sort of reasonable, it was practical, we're always scrambling to get things out, everything is merging into a single blob, stakeholders, and it's just the same things over and over again. And we got this back from the teams.
So with this in mind, we decided what we need to do is really look at what we've done with our teams.
How we used to be structured is everybody would be in their each individual disciplines.
So you'd look at artists, be it concept, modeling, animation, any artist.
We're in one group.
We'd have our code, design, and everything in another group.
And then you pass it on to QA, a very standard waterfall process where you step from one to another to another.
And it's those pass-throughs that were actually causing us a lot of the problems and heartache that we were having trying to get content out the door.
you'd have problems of it getting delayed, feeling like they didn't understand what they were being asked for.
The handover didn't exactly cover the requirements at the start.
So we decided to split it up.
and we made six autonomous teams.
These teams are like small little development studios and we took each of the devs and we moved them into those teams.
And you'll see you have a mix of every discipline.
Those teams have a unique identity.
Each one of them does things in its own way and they talk about things in their own way.
And they're like six completely different groups of people and they bring their own flavor to the game.
We also expose that outside of the studio to the player base.
and they understand which team is responsible for which update and how they'll expect stuff to come in. They tend towards specialties but we didn't design the teams to be specialists. It just kind of happened. It goes with their own way of doing things. What we did then is we created two release trains and we assigned the teams to it.
So the content updates are those big, meaty, large updates, those bosses, the quests, any of those raid-style content.
And then we have supporting updates, which are a little bit smaller, smaller events, putting things into the store, all those kinds of stuff.
And what we do is we plan in chunks of a month.
Rather than trying to think of 52 extra things to do throughout the year, we're looking at 12 big blocks of content that will be made up of a number of updates.
and each of those teams is assigned to one of those months and they work together.
So we have a support team and we have a main content team looking at a month as a chunk of content and understanding how they can work together to get the best flow through the month and handing off to the next team that will be in the following month.
Also means that each of your teams doesn't need to think about the whole year.
You can split it out and you can start understanding, I can deliver this month.
I don't need to think again about a release day for a couple of months.
I have to think about the release day every week, but that's not their problem, that's my problem.
And then we look at the types of content the teams are doing and we can put one of those other teams and they'll have a larger step between their months for a content team.
Whereas a support team, because they're doing smaller updates, their cadence can change.
They leapfrog each month.
And it means that we get a better understanding of that velocity.
Like I was saying, you understand your team, you understand your velocity, and you build your cadence based on what they're able to do.
And you let them feed back to what they're able to do.
But of course, splitting up into those autonomous unique teams is a new form of challenge for communication.
Before, we had to make sure that communication went through the disciplines.
And now we have to make sure that one team doesn't develop the game in one direction, and another one develops in a completely different direction.
So we put other structures in place.
And the first thing is disciplines.
So we brought those guys back, but it's more of a temporary group on the outside of the development teams themselves.
And this is how do we work?
Make sure that even though you have a reduced number of each of the disciplines working very closely together, you ensure a community of practice across everybody through each of those teams.
And this is done through show and tells, just demonstrations of how we work.
And you have the same thing for our coders, make sure QA.
And so those guys still feel like they have a bond and they're still part of a larger team even though they're in the smaller teams to deliver the actual content.
The next thing we had to do is what we're making and make sure that that also works.
So we started to see kind of a divergence of, you know, is the lore going to go in the right direction?
And we created councils.
And these are groups of interested individuals across each of the teams.
And they're interested in various parts of the game, like combat, like balance, like the lore.
And we make sure that we cause a coherence through all of those teams.
So with all of these things in place, we now have our teams who understand what they're building.
They're making sure that everybody's moving in the right direction, even though you're one of six autonomous groups who are releasing content.
So we've got it all tight.
We're building our content.
We understand our velocity.
Now we need to make sure that actually when we're putting it out the door, it doesn't fall apart.
And that's the second part of the challenge, the release.
And to be honest, probably the meatiest part of this, but I prefer the first section.
So we'll go through it anyway.
When you're releasing, we have actually a seventh team.
We have the release team who are slightly different to everybody else.
And it's made up of our build manager, our lead tech, a group of dedicated testers who are specialists in merge conflicts, which I'm sure everybody has had to deal with time in and time out.
They don't need to worry about as much of the content.
They need to worry about how it comes together and the impact of the issues that you will receive when it goes outside the door.
We also bring in our community management team at this section so they understand the content that we're releasing and are embedded within the development team so they know what's going to be happening in the future.
And then we also have marketing in this group as well.
So the marketers understand the content, they know what's coming out, they can work with the release team to make sure that the right things are in the right place.
And it's this kind of split of different disciplines once again, and not the normal disciplines we had for development, but the people who will be most impacted by what goes outside the door of the studio.
It's become incredibly effective for us in this way.
And with this team in place, we had to build a bit of a process around it.
The other teams, the six content and support teams, They work pretty much in the way that they like.
We try and step back.
I don't want to put process in the way of them getting good content out the door.
And because they're a small enough group, you don't have to have a heavy hand in what they're doing.
It's more of a guiding touch.
But what we did find is there is a place that you do require process.
And sometimes it needs to be fairly strict.
And that came in the release.
And this is why we're able to do things on a Monday.
So if you consider us trying to put something out the door, we've got a nice three weeks here.
And if you want to release something on Monday on week one, I want to come in, or week three, I want to come in Monday morning and know that that's going to go out the door at 11 o'clock, and I can start thinking about the thing that'll come out in the next couple of weeks as well.
What actually happens is the content team will finish their work.
And this doesn't mean finish deving, because if somebody's still deving on that day, I'll be furious.
It's more that team has come together and they agree that by the Thursday, they can sign it off.
The support team will be coming along at the same time as well.
So together, they feel that in isolation, what they have built, along with everything that has been released previously, is ready for players to consume.
It may not have everything else that's going to go out on week three, but on its own, they're happy with it.
What happens on the Friday is we kind of smash it all together and hope that we can make a release that'll go out the door and everybody'll enjoy.
And that's where we lead with the lead tech and the build manager.
That's their key place where they come into play.
They know the game. They know the structures.
And we just have to deal with merging lots and lots of things together.
And what happens for the week two, we test it.
We verify the merge didn't cause any problems.
We target what key areas of the game would have been touched by the content that's going into that update.
On that Friday, I need to have a sign-off from my team.
Because if they don't sign it off on that Friday, I'm not ready to go live.
It's very rare that that happens.
In fact, I've only had one slight suggestion that we may delay something in the past 12 months.
because we have to make sure that the previous week, on that Thursday, that those content teams and support teams are happy for that to go out the door.
We should only be dealing with merge conflicts.
It would be very strange for us to be dealing with any other types of issues.
And the main reason that exists is because on that week, too, we also released on the Monday and the test team were doing something on the week beforehand.
And then on the following week, they're also testing something else.
So it all gets a bit convoluted.
So if something falls out of place, we have a lot of things to start juggling and fix.
It's important for us to be aware of issues long before it gets into this process.
This needs to run smooth.
All right.
We got it out the door.
Probably the meatiest part, but shortest as well, so it's quite nice.
We've released something.
We have a game.
RuneScape is a game as a service.
So it makes sure that there's always something for people to come back to.
But we need to make sure that we're dealing with any of the things that come up.
We don't want to die a death of 1,000 cuts from all the little things that get released each update.
I'd love to say that we're great, and every update that we've ever released has had no bugs.
It doesn't exist.
Nobody's ever done that.
What we found is that process at the end, which I said is incredibly important, and has allowed us to move from slipping to Tuesdays, Wednesdays, Thursdays, and lock it into place and know that by the time I have my lunch on Monday, I know the game update's gone out and I'm looking at what the players think.
We put that bureaucracy in place, but it reduces agility.
Imagine if I had to wait three weeks to deal with a bug issue on Monday.
There's also been two other updates since that originally happened.
And if it's a major issue, I'm going to just lose players.
People are going to disengage. We need to keep that quality going.
We also need to demonstrate that ability to react.
It builds and fosters trust in our player base by continuously listening to what they're saying and adapting to it quickly.
Part of that is allowing us to do quick hot fixes.
So there is zero downtime for the player if we're doing slight tweaks.
It's very occasional that something would be a major issue that we actually have to bring the game down.
But the other thing that we have done is built that last team.
So you remember on the six slides, one of those teams didn't move anywhere, and that's our Ninja team.
They have one goal, and it's to make everything run smoothly.
They're focusing on what are the things coming from the players, what are the issues, what are the slight bugs, what's the thing that we released 10 years ago that's still kind of niggling and it's now not working as well with a piece of content we just released.
And they have no restrictions.
They have no need to go through the same process.
They work directly with the release team.
Well, I say directly, closer than all the other teams.
They're getting more fixes in, lining them up, and getting them ready to go out the door.
And it's because we have this team, we've actually improved the health of the game overall.
In the past three years, that's all they've been doing, is just taking out those small little rough edges and making the game a better experience for everybody.
We've seen the players, the players love them.
They made that beautiful picture down the end that my lead designer told me not to put in, but I put it in anyway.
But they love them. They are always talking to them. If you look at the RuneScape Reddit, you'll find that there's a tag saying Ninja Fix. They've just adopted this as something that they found incredibly useful. But it also means that internally, whenever the Ninja team go and get involved with a piece of content, they're fixing in the back end. I'm sure anyone who's had to deal with a game for an extended period of time knows the lovely story of Legacy Code.
These guys are cleaning that up.
It might be a small fix for the player, but the next time I'm trying to do an update in a particular area of the game, if the Ninja team have been there, they've made it better.
And so the dev team are getting faster over time.
There's some bits that we've had is they've released named 26 updates because they're so close to the game and they're so close to the players.
Even a small little tweak from these guys is enough that gets an invested player bought back into the game.
And we can call it out as a named update.
They've delivered 760 little tweaks and fixes throughout the year.
And they've just made everything better.
If we do something with a Ninja update, we get an immediate positive return from the player base.
The sentiment on any update that has a Ninja update is always better than if it didn't have a Ninja update.
And this is something that we have just doubled down in.
We're increasing the amount of effort we put into the Ninja team, while also trying to make sure that all the other updates continue to go out, which is a fun challenge, but a different talk.
And with this in place, and with these teams doing that kind of work, what it's meant is that we're looking back in on ourselves.
And so we have the game being maintained, and we're looking at everything that we're doing, but that doesn't mean that it stops.
And we're always looking to continuously improve.
And we have three parts that we always do.
We're incredibly transparent with how we work.
Before we were very enclosed, very protective of what we've done.
Now we're open and honest about everything that is a problem with what we're developing or how we're developing.
We talk to everybody and get everybody involved in conversations.
And when we have that shown and made clear for everybody, we're inspecting what people are actually saying so we understand what their problems are and then we adapt and make it different.
We've gone from a place where we had process, and our answer to problems was to put more bureaucracy in place, and put more checks and more balances.
And we've stepped away from that.
And we let the team lift up what they need to get fixed, and we fix it, and we focus on what goes out the door, not what we're doing inside in the studio.
So some things on what we've done in the past year or so.
We had 112 named updates go into the game.
Most weeks don't only have one update.
There'll be a couple of things, because we have a large player base, and they all have different wants and needs.
That was across 48 weeks, because we take Christmas off, and a couple of other ones across the year.
But actually, of all of those weeks, in terms of inside the studio, none of them had any day or any week without a change.
And they're not all big changes.
I mean, there are some things where we bring in hardening playthroughs towards the end of a project, just to make sure that maybe our backlog doesn't mean anything, because the game we've just built, we need to make sure that we make that better, rather than just doing the thing we wrote a week ago.
are getting better involvement from our concept artists earlier in the game, or earlier in the development.
But it's also things like somebody didn't like the headings that we used on retrospective documents, so we changed those.
There was one day where we decided we'd have weird refruit Wednesdays because it was getting a bit boring in the middle of the week.
But all those things make the lives of our developers and our teams a little bit better.
And when you see that things are getting better over time, and continuously changing and making what they're doing easier for them, We get better sentiment internally, and that's reflected in our player base, and they enjoy seeing what we're doing.
So what we're going to do next, and what we're trying to do, gets a little bit scary.
We're trying to get the teams more autonomous.
We're trying to give them more ownership.
let them pitch the release schedule, let them pitch what they're trying to do. Our devs are incredibly close to our player base. Every single one of them is on Twitter constantly.
But they're listening to what the players are saying and what they're looking for. And I can't tell them what they should do when they know it better than I do. We have our design and our top-level group making sure that we're going in the right direction. But the actual specifics can come from our team and they'll probably do a better job than I will anyway.
We're also trying to become more autonomous.
Not autonomous, more automation.
We have that process at the end.
I do have the specialist testers that are dealing with merge conflicts.
But trying to pick up an entire code base and move to more test-driven development and unit testing and more continuous integration is difficult.
But it's something that we want to do, and it's something that we'll do with our future games.
So that we know that we are testing it thoroughly, and we can push out faster and earlier without having to lock in that three-week process.
We also want to try and move to a place where we are continuously deploying.
I'd be much happier on my release day if I'd actually released it a month ago and flicked a switch for the players, because I know it's been running.
We've done it recently.
We released a telemetry package into RuneScape.
The telemetry package itself and all the backend infrastructure required to run it had actually been running for about four or five months previously, and we were just gathering data to make sure it worked.
It meant that our release day was a button switch.
We turned it on.
Well, actually we turned off the thing that said, don't show this to anybody, and suddenly everybody had access.
It was the smoothest release day I've ever had.
But we had to put things in place that would hide it from the players while we were testing it.
And that's difficult. Built from the ground up would be a little bit easier.
A lot of what we're trying to do is retroactively fit it to a very old game.
And so I hope you enjoyed this. There's some takeaways.
I encourage you to mix your disciplines.
Every time I speak to people and they have problems with communication, it's generally because they've siloed the discipline teams.
Holding QA off to the end.
handing things from an artist to a developer and back again.
Mixing them up means that you're getting better integration between those teams, and they have different ideas that help each other's work.
Consider leapfrogging.
That was the biggest change that we've done recently, and it's had a good impact.
Teams aren't as stressed.
They get pretty stressed one month when they're just about to release something massive they've been working on, and they're a little bit afraid of how the players react.
But that stress is based on them hoping that the game is good enough, rather than worrying if it's going to fall over when it goes live.
So it means that they are able to focus on something big and don't have to have everything else there.
We still have our group at the top who are making sure that we're going in the right direction.
Consider why you're doing things in process.
Sometimes it's really useful.
Sometimes it's essential.
But it isn't always.
Make sure you're doing it for the right reasons.
And then maintenance can be a massive distraction.
I'm sure everybody here who's released a game or released any sort of service has seen the impact that you've had on your development ability when you have to deal with all the problems that you're seeing as it goes live.
it's going to happen, you're gonna have to deal with it.
Make sure that you've put it into place and you understand how you're gonna deal with that maintenance before you go.
So thank you very much.
I hope you enjoyed the talk.
I tried to go fast enough.
We've got five minutes.
If anybody would like to ask any questions, please.
Straight in.
So I imagine, since it's a continuous development cycle, you have a schedule far ahead.
Did you have to pitch out your entire schedule and just start over when you switched to this?
No, but because of the structure that we had in place, we were able to transition nicely.
We knew what we were building, and we knew the day that we'd have to move.
So what happened is we just moved one of the teams into it.
I would recommend that if you ever do something like that, don't do it over Christmas like we did, because the first team that was releasing on January was crying through the Christmas holidays.
Don't do that, that's a terrible idea.
Hi.
How do you prevent the dev teams from handing off tech debt to Ninja?
And then who deals with live issues?
And then secondarily, do you have any issues with Loke with your tight schedule?
Sorry, what was the localization?
Ah.
So to answer the first question, Ninja will only ever jump on a project after it's a number of months old.
They won't fix things immediately.
We make sure that the tech dev, our lead tech dev and our build manager, as they're merging, that's their kind of place to really put the final check to make sure everything's OK.
There's also code reviews and everything during the process, as you'd expect.
In terms of localization, we have an internal localization team, which is really handy.
Jagex has been built up from the ground to do everything internally, so handing out and having to come back.
It is definitely a pain point for us, though.
We have to make sure that we are getting all of our content locked down early enough.
And with all of those things coming into the localization team at the same time, it's very difficult.
But our guys are great.
They managed to keep up on top of it.
And we're trying to make their lives easier right now.
It's actually on my list of things I need to change.
Thank you.
I'm going to keep swapping.
OK, hi.
So I was wondering, how many producers does it take to manage all these teams?
Or are you the only producer?
Or how does it work?
There's only one person in the RuneScape team who is the title producer, and that's me.
What we have is a product owner.
So if you're familiar with Scrum and the concept of the product owner and Scrum Master, we tweaked it a little bit.
Each of the teams has its own product owner, but those teams are also, those product owners are also developers.
It's kind of stretching the rules, but it's worked for us and we've kept it that way.
Each of them has two jobs, but they also have support for myself.
I do have two project managers who tend to do things that go outside of the development team, but I don't have an internally focused producer on the main team.
Okay, cool, thanks. No problem.
Thanks for a great talk. What happens if you miss a Monday, like don't receive a sign-off on Friday? You postpone one day or one week?
So I was trying to cover that. It depends on the issue.
We have occasionally done a Tuesday. It hasn't been nice.
Because also, slipping to the Tuesday is reducing your test time on the following week.
So it may be an option as long as the following week is not a massive update, but it's something a little bit more routine.
Everything we do, we try and avoid that.
We make sure that the content coming into the team as a release team is actually ready at that point.
And if it isn't going to be ready at that point, I know weeks or months in advance.
And at that point, we're adjusting the entire release schedule, not just one or two weeks.
So it's the concept of making sure that you're looking holistically on everything you're changing, not just that week, and then the following week and the following week.
It's a bit of a juggling act, but it's doable.
I have a quick second question.
If your Ninja team is releasing an update that's not critical, they follow the release schedule, the release team schedule?
Yeah, if they're doing something that is a significant or named update, they'll always do a...
they will work with the release team to make sure it goes through the regular process.
It tends to be fixes or tweaks or changes where they just kind of sideline it.
But to be honest, we kind of do it on a case-by-case basis.
One of the things we have kind of leaned on a bit, occasionally, is we kind of fudged doing it on Monday, is we had a Ninja update ready to go.
and found a very last minute bug. It came in right in the middle of the release team's test week. We ended up having to slide in a ninja update at that time. We saved it and it was a bit hairy. But it is very, very rare that happens. It's nice having a backlog ready to go.
Thanks. Thank you.
believe we're about 80 calling. Including each of the dev code, yeah, about 80. So how do you deal with conflicts when people disagree on process or what goes into a release? I rely on myself and I'm the bad guy.
There are cases where I have to say we're doing this and not that.
We tend to have those conversations fairly far in advance.
There are definitely pieces of conflict, but quite often it comes down to myself and lead designer will have a chat and try and come to a good conclusion.
So far we have the trust of our, I say so far, we have the trust of our dev team.
They believe that we're doing the right thing.
So when we do make those choices, they've seen the benefits that it's had in the past, and they trust us.
If we lose that trust, I don't think I can keep doing that, but that's a bigger problem.
you said the ninja team jumps on months after a release goes out. Is the dev team that put changes into a release, are they responsible for monitoring those changes live and responding to them?
Absolutely. If you consider the release team themselves and the testers there, they actually get bolstered by whatever team is doing the release in that week. Because that team doesn't really have anything else to do. They need to focus on what they're putting out the door. So they become just kind of a bit of an aid.
And that also kind of helps with the conflict, in that teams tend to share amongst each other when they're in trouble.
We frequently, each of the POs and myself will sit down either weekly or monthly, depending on how much stuff is going on, and just chat about what's going on, and make sure that we have a good relationship between all our teams, rather than a competitive one.
So everybody's kind of helping everybody.
Thanks.
Hi, thanks. My question is kind of related. So if you had a bug that went out, you know, through testing, got out to a release, how fast would be your hot fix time? Would it be you would inject into the next week's release or would it be the three weeks out?
No, if something goes wrong, our fastest hot fix has been ten minutes. We will fix anything that is a major issue within one to two days. Holding my hands up, we released the skill and there was a significant issue in it.
Skill is a major piece of content.
I'll try and do this fast.
Skill is a major piece of content.
It's thousands of hours of gameplay.
The balance and progression curve was something that had an issue.
We went from a point of trying to deal with the progression issue to having a fix to getting it have it built, tested, and live in under three days.
So as a team, when we have to mobilize, we work fast.
And we've built our deployment systems in a way that we can push something out quickly.
So that's the big way that we try and do things.
And it's that release team that does that fix and pushes that together?
Absolutely.
Well, the release team will test it, but the development team will be the people who make sure that it's working.
It's their responsibility.
Development team, that's what I meant.
I'm sorry.
Yeah, yeah.
Part of giving them ownership means that they also have the response.
Great power comes great responsibility, right?
So we lean on them.
Real quick, in one slide you showed the distinction between content and support teams and had on the Friday, two weeks before the Monday release, you had a merge of their two builds.
And I was just wondering what you were merging at that point.
What separate paths were being worked on such that a merge took an entire day?
So, to give you a structure, an idea of the structure of our code base, we have a mainline and each of the teams will have a branch for the release and we're pulling those branches back together.
We actually go round main.
It gets a bit technical.
We build a release cycle by taking two child branches, dodging main, putting them together, and then pulling that back down into main.
Because trying to merge to main and then build out will actually cause us more of a delay.
It's something that we've come around.
It's one of those many, many changes that we've done.
So yeah, those two are coming together into their own release build.
And each of them will have the previous release.
So when that build is made on the Friday, the following Monday, all the other development teams update all of their streams to make sure it matches that.
It's a bit of chaos, but we've gotten it working.
That's great.
Thank you.
Thanks.
Great talk.
I was wondering, your Ninja team, if you have any problem with motivation, since they are not as creative as other teams?
And if you allow people to change teams, like if they're a Ninja team and they're just fixing bugs, if they want to do some release, do some content.
We let people change teams quite frequently.
Oh, I say frequently.
We let them choose to change teams.
There are occasionally times when we've had to move people into different groups.
So the first question was moderation.
Is it external?
No, if they're always motivated to fix bugs, fix issues.
Do you have any motivation about creativity from your Ninja team?
They work very closely with the community team and themselves, watching exactly what's happening with the players.
Also, we have a lot of analytics and stats coming back, so we're watching that too.
And we let them choose what they're building from that.
Okay and that motivates them too.
Oh motivate, sorry, yeah definitely.
If you see a release come out and you have about 15, 20, or 15,000 people screaming at you saying that is the best fix ever, they have a goal where on a major release they want to make sure that at least three posts on Reddit are saying this is the best ninja fix ever and it jumps over the release content.
It works for me.
Cool, thanks.
I'm going to have to wrap up, I think.
I'll do the two.
We can say if anybody else has any questions, I'll be over in the wrap up room and we can go there.
Do you have any analysts working in each team, or do you have an analyst working for all teams?
Is it analysts?
Yeah.
Yes, so we have a game analytics team.
They're a shared resource rather than trying to employ six analysts.
Also, they have a more holistic view in that case.
Okay, thanks.
Thanks.
Last question.
Go, go, go.
So you have multiple teams of different disciplines.
How is hierarchy organized?
Like your official boss?
Technically all line management follows the discipline lines.
There is no line management within the development groups.
So it looks like a traditional line management hierarchy.
OK.
All right, thank you very much, everybody.
If you have any questions, I'll be in the rapid thing.
Thank you.
