This is so sick to be up here and see all of you here.
Thank you all for coming.
Can you please silence your phones?
And also this talk is very full of spoilers.
So if you have not played Tunic yet and you're like, I might play Tunic one day.
If you leave right now, I will fully not be offended.
and it'll be you having an untainted gameplay experience.
So do your thing, please.
Okay.
Thank you for coming.
My name is Kevin Reggeme.
I was audio director on Tunic and I've been outsourcing and freelance and that kind of work for like 13, 14 years.
I've contributed to 300 some projects.
I'm not really sure at this point, various ways.
In sound design and editing and music and voiceover and kind of everything in between.
and I also host Realtalk.
Who's seen Realtalk?
Who's been on Realtalk?
Wow, sick.
I should meet all of you later, probably.
Uh, yeah, it's a, it's a bi-weekly stream.
We break down and review demo reels from up-and-comers and say, here's how you can increase your chances of being hired.
And also, a bit of a deep cut, who's played Phonopath?
Skitch?
No one else.
It's an audio puzzler I made like 2012 and you can't play anymore, it's in Flash.
But if you DM me on Twitter I can just give you all the game assets so you can play it at home.
It's a good time.
Okay, so I'm currently creative director at Power Up Audio, though.
We're a team of six up in Vancouver, Canada.
And, yeah, thank you, Power Up Audio, thank you.
We do sound, music, and VO for games, and we're in our 11th year right now.
We have some 150-ish credits thus far.
I like Darkest Dungeon, End of the Breach, Super Meat Boy Forever, Crypt of the Necrodancer, and the new DLCs like Synchrony recently, Decayden's Higher Rule, Celeste, Subnautica Below Zero, Ruined King, and recently Phantom Brigade released in February.
And now we're working on Darkest Dungeon 2 with Red Hook, Wayfinder with Airship Syndicate, Moonbreaker with Animal World Entertainment, and Rift of the Necrodancer with Brace Yourself Games, and Earthblade from the Celeste devs.
So we're real busy.
but we're talking about tunic today, yes?
It's gonna be a, aw, you.
No, it's gonna be a breakneck speed talk.
I have like 300 slides.
So it's like an animation basically.
It's gonna be just nonstop.
So it's gonna be a lot of stuff.
This isn't really an essay format style talk.
We're just gonna blast through a bunch of shit and hopefully some of it lands and you find it inspiring or interesting or helpful.
Sound good?
Okay, sweet.
So there'll be some creative directions, some technical implementation and sound design techniques and how-tos and hot tips.
And also we'll talk about game design and forming some audio decisions.
And the talk might get a bit wild, so please enjoy.
Okay, first up, we are talking about creative direction.
And the first thing is we went for a rounded kind of sound design.
We're talking simple and smooth contours, like not, you know, but cool with that.
All right, that land.
Okay.
Also tamed transient, so less ta and ka and more da and ja is great.
You know, and pleasing frequencies.
Here's some white noise 321.
Bring it up, Ru.
We all love some white noise, right?
And here's... Can I play it again?
Let's do it again.
Can I?
Yeah.
And here's pleasing white noise.
Yeah, it's warm, right?
Okay.
Here's a good example in-game of some... Some round sound design.
No shrill, no piercing, no scraping.
Just soft everything, you know?
Next up, some generalized and synthy stuff.
We don't want to lean on library source recordings too, too much.
They do appear all over the game, certainly plenty, but we don't want to be focused too much core wise, you know.
So here's the air boss coming up next.
It's the air, it's the final boss of the game.
It'll be three iterations.
V1 was a bit too much.
It's a sword, just too real.
The second one, Craig Barnes was the designer on this, on our team.
Craig went a little more stylized, got kind of like thunderous and crunchy, is a bit too far, too aggressive.
And it came back in this really nice synthy zinging, zingy whoosh area.
So have a listen.
It's a bit subtle, so check it out.
Too crunchy.
Now zing.
And one more victory lap for Kite Barns.
Thanks Craig.
Okay, next up.
We got, this can be very video game, the sound wise.
We're talking non-diegetic sound is great.
Anything for the sake of the player is great.
Things like physical objects don't need consistent sonic properties.
Nothing needs to make sense.
It's totally fine and there'll be plenty of this in the talk.
We'll get to that later on.
So we're gonna move into some technical implementation now.
This is the listener.
Who knows what the listener is?
It's real important.
It is basically the audio version of the camera.
It's the ear in the world.
The camera gives us a window into the world and the listener gives us an ear.
So the placement is paramount and it dictates everything you're going to hear in the mix and everything the player is going to do as a result.
It's super, super fucking important to get it right.
So where does it go though?
What's the goal?
The goal is to communicate everything the player needs to know to them in a way that they expect and can react to, they can perceive in a meaningful manner.
So For example, first person shooter, where's it going to go?
On the head.
Carly says on the head.
Okay, sweet.
Correct.
Well done, everyone.
Carly?
Okay.
All right.
So, it's on the head, of course.
The eyes are on the head, the ears are on the head.
If they hear a door open to the right, the player turns to the right and they shoot the guy, right?
It's going to work out for them.
And but for a game like Celeste, a platformer, it's 2D.
If we have a listener on the player character, it's not going to make as much sense.
That fire's going to sound like it's a hard left.
But the player's looking at the fire right in front of them.
It should sound like it's right in the middle, in the middle of the panorama, yeah?
So instead, it's more like we pull the listener back from the plane of the gameplay, like it's going to match the player on their couch at home, you know?
OK?
But what about Tunic?
What do you do for an isometric game?
You might think, listener on the camera, because you're seeing the world, it's right in front of you.
But here's an image I've sent to many clients, problems that arise with this.
The distance from the camera or the length of space between the camera and the target of the camera, that is the center of the screen, what the player is currently focused on, is like a hypotenuse in a right triangle.
And the thing is, if the listener is right in the camera, stuff beneath the camera and listener in 3D space will be nearer and therefore maybe louder.
And suddenly we have a disconnect between what the player is looking at and what the player is hearing.
It's a big problem in terms of communication.
So instead, here's a solution for Tooth and Tail, the last game.
We move the listener above the center of the screen, the target of the camera.
And now we have absolved that problem.
We now have the things that are closest to the listener are the thing that the player's looking at.
So for Industries of Titan, it's a little more complex so that you can zoom out.
There's like zoom levels, it snaps to zoom levels.
So our solution was to just scale the listener position also.
So the camera comes out and the listener comes out too.
Easy, right?
And going further, we also employed cone attenuation.
So if we're really far out, there may be something like down low right, some ship battle or something we want to hear.
But if we're super close in, we might not want to hear that thing way off to the right, because the player is looking at this right now.
Or maybe less of it at least.
So things outside that angle of the cone would be turned down as a result.
For a game like Hades, Darren Korb put the listener on Zagreus, and it was still 3D audio.
They put the sound size in FMOD, so they're automating sound size.
It's a bit hard to describe in a short talk like this.
I mean, in a long talk, but in this short slide.
The gist, though, being that as things get farther away from Zagreus, they become more directional in quality.
It's a bit easier to understand with a game like Death's Door, though.
David Fenn put the listener on the player character as well.
And automated spread in Wwise.
So the farther it is away, the less spread there is, yeah?
So imagine there is a sound source on the crow, our hero character.
If it's mono, we have widespread.
That means coming out both speakers.
Therefore, the phantom image is right in front of you, and it sounds like it's right in front of you in the middle of the screen.
Makes sense, right?
consistent with the player expectation.
If it's a stereo sound, it might be that it has full spread and we have full envelopment, like there's a big ass waterfall or something and it wants to take over the entire mix.
If it's in the middle, we're gonna hear full spread too.
As the sound source moves to the right, we're going to have the whole spread moving right, the phantom image moves, the spread of the waterfall moves, and further yet, it gets less and less spread and more point source.
Likewise, far away in front, you may have that stereo sound moves to a point source.
You hear the waterfall over there rather than all around you, yeah?
Make sense so far?
Okay.
A lot of nods.
Awesome.
Okay.
But the thing is, all of these games use 3D audio natively.
It's like native 3D audio in Wwise and FMod.
But for Tunic, we have things like altitude differences.
We have enemies making sounds.
There's sound sources above and below the characters, sometimes in other rooms.
we have a ton of camera play that camera can pan around the player it can go above the player we have envelopment to consider with all these issues as well so in the end we decided no we're not going to do 3D space we're going to do screen space instead so what this means in practical terms is every sound is playing in 2D in the game and we're driving the playback with a set of parameters to define how it comes across to the player So these are the parameters.
We have off-screen distance, screen space X position, screen space Y position, ortho size, and altitude delta.
So off-screen distance is the easy one.
It just simply is the sound source on the screen.
Is it here at all?
Is it here far away, near?
It doesn't matter.
Is it there?
Then it's zero.
If not, how far away is it?
Is it one away?
Is it 40 away?
And then we can just make kind of classical, typical-looking attenuation curves that you'd see in like a 3D spatializer in FMOD.
X position and Y position, very simple.
Zero is the center of both.
Positive one, negative one for X and Y and beyond.
It could be like 40 away to the left in X position, right?
Negative 40.
So with the panning, with the X position, we can handle panning so it makes sense, right?
We have things on the left side of the screen come out the left side of the speakers.
Again, we're just being consistent with player expectation.
And up top there, keep in mind, this is the edges of the screen, yeah?
So that's gain up top.
What this means, this is on both Y and X in some cases.
And if you can picture, that means if you're in the middle of the screen, you're a bit louder.
We still wanna hear things at the left, but if it's right in the middle, it's probably a little more relevant to the players, so we'll hear it just a bit bumped up in the mix.
Altitude delta is a little bit weirder.
It is simply the difference in vertical height between the fox character and the sound source in 3D space.
So this is the unity view.
We have a little scavenger above.
That's our height.
Yeah.
And ortho size, orthographic size is kind of the weirdest one, but a decent analogy would be something like a telephoto lens.
The camera position isn't changing across these photographs.
It's just the gear used, right?
And changing the lens, changing the settings, it alters the amount of world that we're seeing as a result.
So something like this, this is ortho size 15.
This green prism to the right here, that isn't the camera.
It's just like a mock-up by me to show you like here's what it where it might be and here's like a window into the world, yeah?
So, something with this green prism, this is 15, this might be 50?
Does that make sense?
So, you're not pulling the 15 back to see more of the world, you're just making the prism bigger.
So, this again, 15, this might be 50, but the camera hasn't moved.
So, again, we couldn't like scale listener distance with camera position and stuff, right?
Wouldn't make any sense.
Here's eight, if you're curious, and here's one.
Look at his feet, it's so cute.
Okay, so again, everything is in 2D, kinda, but, and without native 3D spatializers, and this text here is a debug tool that Andrew Sholdice, the primary developer, threw together for us, and it really helped in like live update with FMOD to kind of keep track of where the numbers actually were for a given sound source.
So we'll see it in action with some waterfalls here.
It's only three point source sounds for all these waterfalls.
I'll be debug warping around just to watch the numbers there.
So because we know as developers exactly where the player can go, we can set up curves to suit to ensure things sound correct.
Make sense?
Okay, sweet.
And on top of that, it's not just making sure things sound correct, we can tell a story as well.
So with this tuning fork up top, altitude delta is now zero.
We're right in front of it.
It's all we care about as a player, right?
Come back down, it comes down a bit in the mix.
We can go away, fade away.
perhaps towards it again, we can drop off entirely to the left.
Because over here, it doesn't matter at all.
But walking up on this thing, we get a taste again because the camera's panning over.
It's all just done with the curves.
And if you're thinking, holy fuck, Kevin, how many curves did you make?
Yeah, a lot.
but we have FMOD effect chain presets on our side.
So like the spider preset, for instance, we set up panning and or the exposition and the off-screen distance, all these curves we need for a given enemy and drop that effect chain preset on all the given events like hurt and attack and death and so forth.
And then if we think, oh, we want to hear the spider from a bit further off screen, I can change that curve in one place and it'll proliferate across all the places we need it to change.
Make sense?
Super useful.
Shout out to Matt Block for telling me that because I'd never used it before.
Dynamic music and ambience is our next thing.
Here it is in action.
We're going to see a little crossfade, find a waterfall.
We'll go to the piano instead.
And then we're going to fade out entirely as we discover a secret room.
I told you there were spoilers.
So easy.
Here's that room in Unity.
And here's our first basic trigger volume to talk about.
There's a portal there.
You can see where the fox spawns into the scene.
These guys here, these portals, have a play music on load script.
Each scene in Unity has a play music on load script.
You can see the event there at the top.
It's one of the tracks in the game.
And coincidentally, this track in this scene is the same one as in the overworld.
So nothing happens for the script.
But we also have the parameter data on the basic trigger down below, the volume trigger.
And in this case, we say overworld layer 3 should be 1 now, and 2 and 1 should be 0.
So we're going to fade out entirely over that piano.
And then down here, we have a gradient trigger volume instead.
It's kind of similar, but we have an A and B on each side, so we're able to float between two parameter values over the length of the volume.
So you can see here it says, go from 1 to 0, from A to B, yeah?
We have these all over the game.
Here's one in the overworld.
It's the first one most players encounter.
We fade to kind of the B side of the overworld tunes.
So in this case, we're fading 1 on each side and 0 on each side, right?
Not just 1 fading out.
And next up is another main trigger type.
This is a room-specific trigger in the Frog Cave Vault.
The player's got in here looking for a green key, and they see, oh no, it's empty.
So we have a room system to handle a bunch of stuff in the game.
It handles rooms kind of fading in and out of view as you go through doorways.
It handles a bunch of stuff.
And it also handles some audio here for us.
So the volume, the gist is the volume only works if the current room that the fox is in is active.
So in this case, we have a door with a trigger on each side.
and we're able to snap according to the room being activated.
It's a bit better than having a gradient there where the player can like walk kind of half in the gradients and then the sound is changed halfway but the room snapped over.
It's just a little bit more elegant, right?
So next up, tuned sound effects.
Tuning sound effects to the music.
Let's have a look.
So many sounds in the game will always play in tune with the music regardless what track is playing.
But how?
We did this in every single music event.
We dropped command instruments across the board that were sending global parameter settings, in this case, set music key center to C, to F, or to G sharp.
Any fans of G sharp out there?
Yeah, H sharps, okay.
Yeah, I know humans are reading this, so the letters don't really matter, right?
It's just like C, C sharp, D, D sharp, E, F, et cetera.
So, all that said, we have two things to deal with mainly in-game, two problems to solve.
One is held and one is one-shot sound effects.
The held is the easy one.
The changing room music event is simply throwing parameter data over to this event for the prayer.
And it's like, cool, gotcha.
And it just changes over time.
No problem.
but one shots what do you do?
Some problems arise.
So if a command is sent after a sound is done, we're good.
It's totally fine.
No problem.
But if it's sent during the sound, we can get re-triggering going on.
It'd be very likely for players to encounter this, yeah?
And some of you out there are like, ah, Kevin, come on, just hold value during playback, it's so easy.
Well, this would break the held ones, unfortunately.
It's a cool idea, it's super useful, lifesaver, checkbox.
But, uh, we wanted to use only one parameter to control everything, and it's gonna break one of them, right?
So, our solution was this, a big-ass transition hub.
So, When the event starts, these are all conditional transitions.
They say what keys are currently in, and it sends it to the right place.
In this case, it says, go to G sharp, our favorite, and then to the end.
So regardless of what plays, it's going to go to the right place and then go to the end.
And if a parameter changes during that event, it doesn't matter anymore, because it only mattered when the event started.
With me?
OK, awesome.
Last thing, some of you may have been keenly noticing that these command instruments are a bit pushed ahead of the beat division.
And if you like play jazz or just composers, whatever, you might know of like a push.
So you put a note that applies to the next chord.
So it rings out in the right key as opposed to being in the old key.
So we have this happening.
Pretty cool, right?
Right.
Sound design techniques.
This kind of blurs with the previous technical stuff, but just we're just gonna keep going, okay?
So first up, first is the Siege Engine Foley, one of the bosses in the game.
Here it is with the boss soloed.
FL Studio, any fans?
for life.
I've been there since like version 2.7 or something.
It's the best.
So, uh, this is a 3D granulizer.
I've used it so much.
It's my favorite ever.
Most granulizers have the same, like, similar functionality.
So we'll just, you know, Mangler or whatever you're using, just, uh, transpose this to that stuff instead.
This knob is the best one.
It's the random knob.
And these are a bunch of layers of different stone sounds.
Here it is in action.
Yeah.
So here's no random.
We're going to crank it up.
Pull the key down and hear random grains from all over that waveform.
The source material is just a bunch of stone stuff, right?
Easy.
We have our various layers and a layer instrument at the top, so we can just play a single thing and it'll play all of them together.
And now we're no longer in the place or in a position of dropping a shit ton of regions onto a Pro Tools or a Reaper timeline, we can just simply perform the Foley.
Sick, right?
So cool.
And if you're curious how I filmed that, not a GoPro, it was a phone and a shoelace.
That was what I did.
Metal Impact Variations the Easy Way The blue region here is a single variation.
The top bin is like the reflect sound.
It plays on a bunch of stuff in the game, but the blue one is the metal part, the big tuning fork specifically.
I put two little parameters in this event, and it's randomEqNotch, randomEqPeak.
We put them at 0.5 and randomize their value 100%, so it goes either 0 to 1 every time the event plays.
And then we tie those two to EQ positions on this multiband EQ.
Here it is.
Maybe?
There it is.
What the?
It's not there, apparently.
Well, it sounds sweet, I promise you.
Here we go.
I'd be sad if the highly edited video didn't play.
Okay, so next is the void strength effect.
Okay, so void strength is tied to various things in game.
In this case, proximity to these strange crystals, yeah?
There's enemy attacks and stuff also in the game too.
We hear the same sound.
So the source here, to start things out was a main theme of the game's soundtrack, the title theme.
And it's the random knob, yeah, let's go.
And what we were going for in game, hopefully, was like downsampling it.
That was the ambition.
So that was the aim.
But unfortunately, FMOD doesn't have native bit crushing.
I did find this weird free thing online.
It was free, so it's always kind of sketchy to put in a commercial project.
And also there was no Xbox libraries or anything else anyways, so it's kind of a moot point.
So back to the drawing board, I considered making a bunch of just baked loops.
Here's different values of bit crushed whatever.
But the thing about downsampling is it's really obvious when you swap across different levels.
You're gonna get the stair casing effect for sure, so that's not gonna work.
So back to the drawing board again, instead I thought perhaps a random square wave LFO, in particular these two knobs, the base level and the volume, it's like a range so you can move the knob and it'll change to suit.
What we're talking about is randomization within a range over time.
So we're going to have five baked loops, let's say across the void strength as it increases.
We won't have this static set of loops where you're going to be staircasing so horribly.
We'll have this instead.
And now we have this expression over time as opposed to just these hard stairs.
We have access to way more nuance as you do in game.
So here's loosely what it looks like in action in FL.
With me so far.
We're like half with your void strength.
So it's going to keep going.
Okay.
So, but first, before you go forwards, the goal of what we're doing here is to make it seem like the in-game content is being bit crushed.
Like it's being down sampled.
We can't do it actually.
So we need to fake it.
So to make it seem like we are, we consider when you down sample anything, it's the top most frequencies that are affected first.
Yeah.
So it goes like, These tickle of changes top to bottom as you crank up the downsampling.
So the thing is with that, it leaves unaffected frequency range beneath it.
It's kind of just like this wave traveling as you crank the knob up.
So we want to have two things in-game.
We have the progressively low-passed game audio, which is like the unaffected stuff underneath we're faking, and the bit-crushy downsampled stuff on top of it, okay?
Here it is.
So here's the event in Fmod.
We're looping on silence because the event's always playing.
Various things in the game cause void strength to take place.
And here's the void strength parameter timeline.
We don't hear anything at first because we don't want to have anything happen until some void strength is in effect at least.
So we'll get some reference audio going.
We have two snapshots.
The first is part one.
The second is part two.
We crank to 100% over the first half for part one and then for part two.
and part one is basically just a high shelf to make space for some for those down sampled highs it's not much happening so far just subtle and part two is a big old low pass and keep in mind we're again we're adding bitcrush stuff on top of this that's the most it'll get low pass to 100 again the goal to make it sound like the in-game audio is being distorted okay The second snapshot also bandpasses the in-game, like the gameplay sound effects, like Fox stuff and enemy stuff.
We still kind of wanted to hear it, so we didn't want to cut it off entirely, like the music and ambience.
So now, we'll get a reference sound effect going.
It's that hit from earlier, yeah?
And we'll hear the kind of screaming sound design loop we put on top of the void strength down below.
and we side-chained the SFX against the screen loop too.
Cool?
Alright.
So, and for the Bitcrush loop specifically...
That's that nested event in that previous video, yeah?
So, as mentioned earlier, we're mixing the in-game audio with the Bitcrush stuff.
So we're high-passing this.
All we want is the tickles, right?
We don't want all the main theme stuff underneath.
So we have this high-passed Bitcrush content with the low-passed game audio, and we're sweeping both.
It all makes sense?
Because I had to relearn that.
So thank you for bearing with me.
I did it a long time ago.
Okay, next up, using game design to inform audio decisions.
First up, first kind of umbrella of points, we're talking supporting the player's narrative.
And what I mean by that is not necessarily like the narrative of the game, the story being told, but rather what's happening for this player specifically.
What is their personal experience with the game?
It could be there's a hallway and a door at the end.
Well, did they just run down speed run style and like slam through it, like glitch through the wall?
Or do they hang out for a while and like make a sandwich or talk to their wife or something?
We need to make sure that both experiences are covered.
So the, it all comes down to the choices they're making and the experience they're having as a result.
So first thing here, it's really easy, real simple one, but checkpoints in music.
For a long time, the checkpoints didn't reset the music and it just kept feeling kind of wrong because the world pauses, the whole world resets.
It makes sense to have the audio follow suit.
Yeah.
Antunic being a game where everything is hidden, or many things are hidden in plain sight, and you're not really told how the game works or where to go or anything, this had a bonus knock-on effect of kind of implying further what the checkpoints do and how they work, just through the audio alone.
Next up, we're talking first sightings.
The first time players hit something, regardless of when.
Here's a big reveal right here.
Wow.
Right?
We're throwing a parameter down the timeline in the music track.
It's not sound effects.
Can you hear the same thing?
Big reveals.
So this is the void touched, we call it, under the hood in Unity.
And this is the first hint of darkness in the game.
It's mostly like a light, bouncy, colorful thing otherwise, right?
So the player is like, oh, this is the game.
OK, I had no idea.
So this is a big moment.
We wanted to make sure that the player was, their eyes were widening at the same rate the sound was increasing.
So right there, gasp, oh my god, it's right there.
It's possible they can go back up the ladder, but it's unlikely, right?
They're going to keep coming down.
And next up, same thing for the fuse field.
Oh my god, it's the thing.
Easy.
And similar situation with some secret rooms, the player could never discover this room potentially, or they could discover it immediately.
But regardless of when they get there, we want the music for that room to start when they get there.
So when they arrive here, this trigger volume is like, hey, welcome to the room.
Music start.
And then if you leave and come back, it's going to crossfade in from where it started before, because they already know it exists.
So we're keeping track of what the player knows.
Okay, I'll write quick one here, but still kinda in first sightings.
We're talking distant sound sources and massive spaces.
So regardless of when the player arrives here, it's probably the first time they've been in such a massive space.
And we wanna simulate travel time through the air, just push it forward on the timeline a bit.
All right, isn't that elegant?
It's like, here we go, done.
Check it out, it's a bit subtle, but check it out.
The Thunk.
What a big space.
Some streamer was like, wow, they did like the air travel time.
I was like, fuck yeah, let's go.
I totally heard it.
OK.
Next up, predicting and informing player behavior.
It's kind of the next category for game design, informing player, or audio decisions, sorry.
So, first thing, this is something I like to call heavy discouragement.
The gist here in the quarry is you can travel down, and if you don't have a certain item, the void strength cranks up real quick, and it's just saying, hey player, maybe go somewhere else first.
If they get that item, and they equip it, that negates the whole effect, they can see what they're doing, they don't have this thing screaming in their ears, and their health isn't gonna be drained to zero.
It's like a pretty clear turn back now.
It doesn't always work.
Most people turn back, but not always.
with this audio holy shit fuck it's not even tied up that was a bug we shipped, when I made that whole voice strength effect I went through earlier, making it, I broke its connection to the volume sliders by accident and just never realized.
But I kind of liked it because it was like you're going down and someone's like, oh, I gotta turn that sound down.
It's like, no, don't turn it down, just go, like leave.
So yeah, we did fix it though in the end.
So next up in predicting player behavior, these wind chimes, this puzzle here.
The gist here is the chimes play in pairs and the sequence of pairs that happens, it could be ascending or descending or simultaneous, consecutive, same note.
The sequence indicates a D-pad input sequence.
and then you do the thing and you get a prize.
So another challenge though is that there's this waterfall here and it's real loud.
So while this is kind of a nice accessibility thing anyways, we specifically put the ambient slider in for this puzzle.
Because while the chimes are arguably an ambient effect, this is like a point source thing hanging out in the ambient space, right?
We put it on the sound effects slider.
And in the end, we do want people to solve this stuff, right?
Keeps not playing videos.
It's like that.
It was like a duh by itself.
What does that mean?
Let's, I wonder.
Let me turn off ambience.
Okay, that should be even optimal.
Designed moment, right?
Right.
Down, left, right, up.
We want him to solve it, right?
Just set things up to allow for it, that's all.
So finally on player behavior, Sonic foreshadowing.
For context, this concerns the moment right after the player saw this void touched from earlier.
This is an open world game, it's a bit difficult to foreshadow things with audio if the player can just sort of go anywhere.
It can be done here and there, kinda, but it's a bit easier when it's like in front of them, they have to go forwards, yeah?
So here, they must go forward.
We just don't want them feeling great about it, you know?
They've already been kind of unsettled from seeing that dark thing upstairs.
They've gone down this elevator.
It was real slow.
We're just guaranteeing that they do hear this sound, right?
In this case, we had a mono and stereo pair.
The mono pair and stereo pair have, or stereo effect, have different spatialization settings.
And like I was saying, it just guarantees that we can like crank this up when they're far away and pull it down when they're close to have the direct sound instead.
I don't like that sound.
What are those noises?
Oh no.
What the hell is that noise?
That's a rare spawn animation, you got it.
And not once, twice!
That was great.
Okay, so the first, I'm sorry, final category here in game design informing audio is serving design pillars.
Game design pillars, the first being here, hidden in plain sight, we're doing spectrogram content.
So consistent with the creative direction of hidden in plain sight, we want to have things a player might not ever know about.
Here's the shopkeeper.
room sounds like nothing.
Again it can sound like anything.
That's the point of the audio direction.
So this being the shopkeeper, here's the ambience track if you rip it from the game, just record the output.
And there are little glyphs in there, like the ones that appear throughout the manual and stuff.
In this case, in the shop, this one means buy.
there is a shop elsewhere, there's one shop like this, it's a special version, and in this case the shopkeeper's like, this one's on the house, have it, here take this manual page, it's all yours.
And here's that ambience track, and this one means free.
So we're nearing the end, last thing in design pillars, this is More hidden in plain sight.
I'm not going to tell you what it is at first, though.
Some of you probably might know, but I'll just get into it, OK?
Let's do this.
So this is arguably the biggest secret in the game.
Last chance to leave.
OK.
So one main goal of Tunic's overall design was to make it feel like the world's not for you.
You find chests that are already open.
You can't read the language.
There's no clear path, no direction.
You aren't the hero.
That's the idea.
You're just small and lost in a land of mysteries, many of which are hidden in plain sight, like I've been saying.
So Tunix glyph cipher for instance, you roll in here, you can't really read it, it's been since dubbed Trunik by our players.
There's no expectation the player ever solve this, but if they want to take the time, the words are there.
The garden path shortcuts, the secret controller inputs.
the functionality of various items and props in the world.
It's all there from the beginning.
The player just might not yet possess the knowledge required to interact with it or understand it.
So Tunix audio design was aimed in that same direction.
Early in development, we imagined the game having a voice of sorts, maybe like from us, the devs, or just from the game itself.
But regardless, as a voice, the player wasn't equipped to interpret.
So I designed a musical cipher.
It's heard throughout the entire game, and it's never acknowledged.
But first, Shrewnik.
So if you did take time to solve it, you'd find that it's phonetic in nature.
Over the left you have no, then joy, pi, cheer.
Here is a rundown, if you weren't aware.
So a single character can be a single phonetic pair of consonant and vowel, or it can be by itself, just one part of those two things.
The interior defines the consonant, the N part, N, of no.
And the exterior is the vowel, in this case, O. So together we have no.
But there's a little circle underneath.
You swap the constant vowel order.
Now it's vowel constant for own.
With me so far?
Sweet.
Deciphering this might eventually lead the player to discover the secrets of the final late game glyph tower, which upon solving leads the player to do you fear the eyes of the far shore dot co, a website.
This is where we finally reveal the existence of the audio language, the musical cipher, kind of.
Downloading and viewing the website's audio and spectrogram view shows a series of glyphs.
and importantly the audio track also features a series of musical arpeggios that occupy the same time space as the glyphs and correspond one-to-one in meaning.
Have a listen.
This is our musical cipher's Rosetta Stone.
Dubbed Tunic by our players, doesn't make things hard to communicate at all, it's fine, Tunic.
This cipher is the same as Trunic in structure.
It's like a sister language, sister cipher.
So for Trunic, a given phoneme is defined by the presence or absence of lines within a glyph frame.
For Tunic, it's defined by the presence or absence of notes over two octaves of a pentatonic arpeggio.
For trunic, we look at the internal and external components.
For consonant and vowel, and for tunic, we're looking at the lower and upper ranges of notes.
So I recognize we're getting into musical theory a bit here.
It probably won't be a big deal for a lot of you, but I apologize to those who aren't as musically versed.
But here's the briefest tutorial for those who might be out of the loop.
A musical chord is notes all at once, yeah?
An arpeggio, they're broken out and played separately, often ascending or descending.
That was the phone in the shoelace again.
I designed TUNIC with numbered notation in mind.
That is, considering notes as scale degrees, as numbers, as opposed to absolute pitches or note letters.
So for a C major scale, we're looking at not C, D, E, F, G, A, B, C, but instead 1, 2, 3, 4, 5, 6, 7, 8.
And to that end, I said it's a pentatonic arpeggio, so we have 1, 2, 3, 5, 6, 8, 9, 10, 12, 13, 15.
The consonant is defined by the lower octave, and the vowel by the upper octave, the notes up top.
And one phoneme in tunic is one arpeggio.
One arpeggio can be a consonant sound, a vowel sound, or commonly, the two put together for one phonetic pair.
So for example, no would be 1-2-6 for the n, and 9-12-13 for the o. Is that gonna go?
Oh, you're not gonna hear it, cool.
There we go.
All right.
There it is.
And by default, the phonetic pairs like in trunic are always constant vowel as an ascending arpeggio, but we can have a little circle underneath and have it vowel consonant instead with a descending arpeggio.
Can we, please?
Jeez.
Okay, a pentatonic scale can be built starting from any note, any root note, and therefore tunic can be written in any key center.
We can even follow along with chord changes.
As long as all notes in a given arpeggio move together, it's still decipherable.
All right.
So every constant includes a one as part of its encoding.
And that's because all, all note numbers are derived relative to that root note.
So if it's not there, it can get tough to know what you're looking at.
So for example, like the one, three, five, eight of guh there, if we kill the one, the three, five, eight becomes like one flat three flat six or something like that, you know?
So, and then, yeah, notably for vowels alone, like ooh, we also use the one as a placeholder.
We just say one and then go top right away.
And sometimes, we'd even have a descending arpeggio lead directly into an ascending arpeggio.
And in this case, we might employ only a single one acting as kind of an apostrophe connecting the two phonemes.
And furthermore, since we're working in terms of numbered notation, the cipher's design accommodates for all kinds of expressions of tonality.
All right.
So major, minor, diminished, mixolydian, whatever you're writing in, it's all fair game.
A flat five is still a five.
Anyway, tuneic shows up all over the game.
It's in UI sounds like when you start a new game.
or when you hit the finish line in a speed run.
It's an enemy sounds like this little probe guy.
or this spell being cast.
Finding a secret directs your attention.
And one of my favorites, this is a secret spell, leading the Fox to some secrets to be found.
And of course, the door in the mountains.
I like this one a lot, actually, because it's kind of unique across Tunic.
All the top notes are the same.
So as a result, the subsequent root note of each arpeggio kind of helped to inform what the chord changes would actually be.
It's pretty cool.
Anyway, the cipher shows up all over the soundtrack as well, some three hours of music created by Terrence Lee and Janice Kwan.
And for each track, I brainstormed secret lyrics of a sort with the primary developer, Andrew.
These are words that were thematic or relevant in nature to each track's corresponding area or purpose, that kind of thing.
So I'd make simple MIDI files for Terrence based on the words we selected.
it's in it's most simplest form, right?
It's like kind of like Morse code, it has like a very simple minimal form, but you can, if you know you're listening to Morse code, you can like do anything.
I can do this.
And you know, it's like dots and dashes, you know?
So, and Terrence would then check my work.
There's a misspelling.
Kevin, come on man.
He got pretty good at this stuff.
And then Terrence would create a track working around that MIDI content.
And here's an example of what I workshopped with Andrew versus what Terrence produced.
It's Under Earth, it says.
In this case, Andrew and I actually had some other reference material from like Zelda or something that was like, let's try to make it kind of feel like this tonality.
So I already had the tonality built in and sent it Terrence's way.
So see if you can hear it, Under Earth.
And And here's my favorite.
The game was called Secret Legend for a long time, and in fact, in the title of the game, it says Tunic with the glyphs above and below, that says Secret Legend 2.
And here it is in the end credits.
So I know what you're all thinking.
Why?
Why do all this fucking work?
It's so much work.
Why go to all this trouble?
Well, apart from following suit with the secrets everywhere in plain sight kind of direction of the game, our dev team had a little phrase we employed throughout development, and that was content for no one.
We use that phrase to refer to little or large things that we hid deeply in the game, very deeply in the game, for no other reason than we just liked making it, and we liked knowing it was there.
Will anyone ever find it?
Will they find it?
Maybe, maybe not, but either way, it's totally fine, it's okay.
And by the way, if all this talk of musical ciphers tuned to the music has you wondering, yes, this is a large reason why we called the game Tunic.
So that was a lot.
Hope it was helpful and inspiring and interesting and entertaining.
I'm not sure, hopefully.
But if you want to see more of Tunic, we're in the IGF booth until tomorrow at three.
And thanks a lot.
Thank you.
Also, I wasn't sure if I'd have time for this.
This is a bonus video of the source material for the Slarm enemy's voice.
Thank you, Isla, the dog.
Yeah.
She just had some salmon or something.
And that was, yeah, I heard across the room.
It was like, Oh my God, I got my H6.
Okay.
All right.
Yeah.
So please fill out your evals.
Of course, everyone's saying that just please do.
It helps me improve.
It helps GDC improve.
It's super helpful.
And, uh, I thought this would be like right to the hour, but that's fucking much fast.
That was sick.
So I'm available right now.
Any questions, please.
The mic's right there.
Hello.
Hi.
In the lead up to release, Andrew Sholday said that his favorite sound was the lever puzzle activating.
And when you were asked the same question, you said, that will have to be asked me after release.
So now I'm asking you after release.
Yeah, we kept that cipher pretty close to the chest.
Not even like friendier for the most part.
A lot of our indie pals around the industry.
It's tough to pick one out.
The existence of this thing.
I mean, we had to... I kind of skipped over this, but it's heavily implied.
We did this before like any music was written.
It was done so, so, so early.
So, I think the sound effects wise, I mean, I think that the secret, the fairies and their voices, oh you know what, I have an answer for you.
So there's a waterfall and it's like a fairy fountain kind of room in the game and all the fairies you discover here and there with little secret inputs all end up there.
And there's one fairy in that room that just sort of flies like to the group and all the other ones like fly into the sky and you just find the waterfall later.
So I decided without telling Andrew to just make a special case fairy sound.
So they don't say like, woo, hee, ha.
They don't say, hey, I'm free.
They don't say those things.
He has like this very long...
uh... like stand-up comic style routine is like roasting andrew and i mean a bit it was like it was a bad thing and i can go through and and making just a little or the lore of the game is tough and it's also pitch to the music over time it's like enough modding key with the music it's just it was way way too much work but uh... yet a search waterfall very fountain tunic i'm sure you hear online it's kinda ridiculous and totally unnecessary awesome thank you Hi, thank you for the talk.
Cheers.
I'm a freelance game audio designer and one of the things I often find really hard and difficult to do is figuring out how much work a project will be and how much to charge for my services.
And so I'm wondering how you and how Power Up Audio does it with a project like this where there's so much more to just like per sound effect price, there's like so much design that goes on behind this.
So how, if you can speak to that, that might be a subject for a whole nother talk.
Yeah.
What's the itemized invoice look like for this, right?
Yeah.
Okay.
So I can answer in vague terms, certainly.
So PowerUp works in a variety of ways.
We do hourly invoicing and we just like track our hours and charge monthly.
We do lump sum payments over installments like you know now and beta and like a release date or something we do revenue share where it's more like a partnership we do like the game releases and like at certain milestones of profit we get a little bonus payout it's across the board but in general For projects where we are diving into the trenches with the core development team, we definitely prefer to have some element of revenue share.
It might not be all.
It might be an advance plus some small percentage.
It could be a variety of things.
But having more of a partnership-style agreement and relationship makes this make a lot more sense.
I answered that question without telling you what the contract terms were for tuning.
I hope that was good.
Yeah.
Hi.
Thanks.
Great talk, by the way.
Cheers.
Thank you.
So I'm kind of new to audio.
Basically, I did a lot of graphics work.
And then accessibility talks got me really jazzed about, like, everyone needs to be able to, you know, audio is a big thing for some people.
of How do you make sure that, like, what are the best techniques and the best things to, like, track down where I'm, like, I'm gonna get the most bang for my buck, even if they have, like, a junky audio.
Like, no one gets audio, standalone audio cards.
Okay, so it seems that the question is about how do you ensure that the work you're doing, the mix you're preparing, is gonna translate across different systems?
Yes, thank you.
it's important to, yeah, play your game on a laptop, play on your home theater system, play it like on your phone, play it with your, like plugged into your car speakers.
You can do any variety of things and it will, it will help you find like a good average.
It may reveal things you didn't know that are problems.
I mean, I'll hear work from up-and-comers, like students and such, and they'll have a big sound effect happens.
It's like sub-bass, crazy thing.
Up top, like some twinkly Chimes or something.
I'm like yo if you're playing on a laptop.
You're hearing the chimes only you're hearing no subs So so be aware of what you're designing some lows would be good some low mids probably to help I mean it sounds like you want to communicate some power if you put that in there also at least some and Yeah, that's the kind of problem that might be revealed if you play on like some shit system, right?
Oh, is that adequate for response oh?
Yeah, yeah, absolutely.
I didn't know if there's any other documentation or anything you knew of.
Kind of like when, like graphics, you can just pull down the resolution.
Oh, sure.
You can design multiple textures.
Just big crush it.
Yeah, multiple textures, like high-end, low-end.
I didn't know if there's anything compatible with audio, or you just have to test things?
It's not something we put in the game.
No, it's not like audio quality.
Perfect.
Yeah, I didn't know.
Thank you so much.
Yeah, cheers.
Hello, I'm Sabrina Fideli.
Thank you for visiting my room.
Hi, I had a question about your magic sounds in the game.
So I noticed besides them being rounded, they had a lot of similar characteristics feeling very cool.
He's like long reverb tails that shimmered.
For someone who wants to incorporate those kinds of adjectives or warmth or coolness in their magic, what kind of steps you need to take to make sure you have that consistency?
I mean, I am pulling from similar VSTs is an easy start.
Things like the EQ palette is important too, right?
If you have something that has a certain kind of presence or ratio or whatever of highs versus lows or just areas of the frequency spectrum, that's kind of important to have it in the same neighborhood at least.
the long tails and stuff is yeah again to be consistent with that direction of like smooth it out if it's just like a hard thing and stops that's a big jagged edge right so it smooths down just come down for a landing it's super easy as far as warmth and coolness.
I mean, yeah, you're talking lows and highs, right?
That's kind of, that's a very common thing.
Coolness.
I mean, find anything that's like in a, in a, in a VST instrument, it's called like ice chimes or something like that.
Like cool avalanche, whatever.
And it's all like super shimmery high stuff.
Cause that's what we've come to associate with that kind of thing.
Okay.
Thank you.
Cheers.
I feel like Tunic is an incredible example of what game development is, where nothing makes sense until it totally does.
In your realm, audio took such a big part in being at the forefront of kind of going through development, when usually audio is kind of at the back end, the tail end of things.
And so do you think working on this game, kind of flipping it on its head, has changed the way that you are going to look at working in future projects, and how audio is going to be much more at the forefront of design, or has that always been at the forefront of your mind?
Well always will be a generous word to use but I think a Decent way to answer that is that I came before power-up audio.
I was at another third-party house.
That was very service-oriented they're like they would never do revenue share ever be hilarious and you'd be left out of the room and It was like get it done throw it over the wall and never look back I'd find a problem with a game and like a bug in audio and I tell my boss He's like, ah, they paid don't worry about it.
It was like it was terrible and Jeff and I formed PowerUp, and we wanted to kind of change how we operated in general.
We didn't want to just be this last-ditch, last-minute-decision paint job on some mobile game like Clash of Whatever anymore.
We wanted to be involved much early and be entrenched with developers.
And even if we're not doing production early on, this is kind of a unique example, obviously.
even if we're not making stuff right away, early on, we can at least be in those meetings, we can be apprised of the kind of systems they're developing, the direction the design is going in, and maybe we can pipe up and be like, oh, for audio, we could do something in like 12 months or whatever, but they can build it, they can accommodate for it right now, whereas if we're not in those meetings, and 12 months pass, and now we say, hey, can we do this cool thing in audio with the system you've done?
They're like, oh, we have to tear it all down and do it over again.
No, absolutely not.
So one thing I wanted to bring up I think really speaks to this particular project is this intersection between music background and sound design as a not a separate thing from music, but sort of as a partner to it because so much of the sound design for this game is musically informed and uses musical instruments and tools like the grain lights of VSTs and stuff like that.
The main question is, what is some advice you can give for students or those who are primarily composers that have apprehension about breaking into sound design as a discipline and may not feel like they have the chops to do it?
Oh sure, I mean, I think in my experience, talking to students and such, that apprehension is often coming from a place of they don't want to, they want to do music only.
And if that's the case, that's totally fine, you can do music only.
And in fact, you probably should do music only.
If you don't like doing sound, people are going to smell it.
You know, they're going to be like, oh this, I mean, I'll play games, like yeah, this sound was definitely done by the composer and they probably didn't want to do the sound.
And I'm often correct, you know.
that said if you want to get if you do genuinely want to get into sound design I mean there's tons of things out there I mean watch real talk you know you can get some advice there there as far as I mean I am trained musically I mean obviously and I went to school for music composition I'm at a college you know I that was thing in film scoring for a long time and eventually I was like, yeah, sounds pretty cool though.
I'm still using music all the time in my day-to-day.
Even like a short, a sort of like shing, like that note of the ring out, it's got to be on the fifth, you know, like make it dominant.
It's going to be better than like a tritone or something.
It's the kind of thing that no one notices or like tweets me like props for, but I mean it's important to the mix, right?
So if you're looking to break into sound design, like have that be a larger part of things, if it's genuinely interesting to you, then great, you have a great foundation.
I mean, even when we're hiring a power-up, having a musical background is like the biggest plus on the consideration for it, you know?
They gotta have some kind of background in music.
Alright, thank you.
Thanks, Skitch.
I think we're out of time here.
Please, E-Vals, yes?
Thank you so much.
