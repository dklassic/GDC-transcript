think that's it. All right. So I'm mayor shepherd and this is Reagan burns and together we're metanet software. So we're a tiny game developer based in Toronto and we made N and plus and N plus plus. We've been designing levels for the series off and on since 2004. So at this point we've got about 10,000 levels that we've made which is roughly equivalent to each of us making at least one level every single day for the past 12 years, which is kind of a huge amount of levels.
So if there weren't so much potential variety in these games, that would have gotten old really fast.
And that's kind of what we're gonna talk about today, our design process and what we've learned over the past decade of making levels.
And hopefully there will be a few things that you can take back to your own processes.
So there's a lot to designing levels, and this talk is only an hour, so I definitely could not fit everything in.
Also, I only have time to talk about solo level design.
Multiplayer is a huge can of worms, so don't have time for that.
But if I do end up skimming over something that you really want to hear more about, or I guess if you just want to hear more in general, please feel free to get in touch.
Here's our emails and Twitter things, and we'd love to chat.
Okay. So let's get started. Who has played N, N plus or N plus plus? Awesome. Thank you. Lots of you. So for those who haven't, N plus plus is a stylish 2D action puzzle platformer where you control a tiny ninja who can run and jump.
So here is a video of a new player playing through the first set of levels in N++.
And then we'll show a video of an advanced player playing through the last set of levels in N++.
So you don't really get a sense of what it feels like to play the game, though, and that is part of what makes it so unique.
So if you haven't tried it, please do pick it up.
It's on PS4 right now.
We're trying to get a version for Steam done this year.
But in any case, hopefully this video gives you some sense of what the style of the game is, what it looks like, and basically how it works.
So there are thousands of levels in the game, and each was painstakingly handcrafted by Reagan and I, which I will be describing in detail.
And in each level, your goal is to touch the switch to open the exit, and then get to the exit to beat the level.
Levels are grouped into sets of five that we call episodes, and that lets us give a sort of dramatic arc to the levels.
We arranged the episodes into a 20 by five grid with a difficulty gradient, so players always have 20 episodes available that they can play at any time, and that way hopefully they don't get stuck.
You have 90 seconds to beat all five levels in an episode, and collecting gold adds to your time, which is also your score, and that's that timer bar at the top.
And you can't attack enemies, you can only avoid them.
So you can manipulate their behavior to get around them, but you're a pacifist, so that's really all you've got.
Okay, so even though this talk is about level design, we need to start by just briefly discussing the game design of N++, because there's a ton of interconnectivity there, and there's a lot of overlap.
Level design is heavily influenced by game design.
So, makes sense to go over that really quickly first.
So, generally, a game's design is the set of rules, entities, behaviors, and relationships that makes up a game.
And that implicitly defines all the things that can happen in a game.
So Reagan and I designed the game, too, and that means that we know it very well.
But even if that weren't the case, our job as level designers is first, to explore that huge possibility space that's latent in the game design.
so that we can discover various arrangements of elements that produce interesting experiences for the player to engage with.
And second, to develop a deep understanding and knowledge of these elements and experiences so that we can combine them in unique ways that have some depth and can really sustain the game's intrigue.
So, before we talk about how we did that specifically in M++, let's just take a look at the gameplay rules and how they influence the level design possibilities.
So, M++ seems really simple.
There are just three buttons.
You can run left, you can run right, and you can jump.
But because of the way the game works, there's actually a lot that you can do within that.
So the biggest thing that makes N++ different from other platformers is the movement model.
Movement is the essence of a platformer.
It's the core of the genre that has a huge influence on level design because it determines what the player character can do.
So the movement model that we designed in N++ is the reason each level feels a bit different from each other level.
And it's also why controlling the ninja doesn't feel like controlling Mario.
So let's start there.
In most platformers, movement is trivial.
If you want to run left, you press left, and you're instantly running left.
If you want to jump, you press jump, and you're jumping, and that's really all there is to it.
But in N++, the controls aren't that direct.
So the Ninja has a lot of inertia and it takes several seconds to change direction or to reach top speed.
But your top speed is really high and you can outrun most of the enemies in the game.
So that makes it feel a lot more like a driving game where you're constantly adjusting your velocity and you have to develop a feel for your vehicle's momentum.
It's a pretty different experience for a platformer.
And it means that as a player, you always have to be anticipating the future state of the world, instead of just relying on Twitch reflexes.
Jumping is also a little different in N++.
So instead of a single jump arc, you can choose between two types of jump by pressing left or right when you jump.
So if you're on an angled surface, you can jump forward uphill, or you can jump outward perpendicular to the hill.
And if you're on a wall, you can jump up the wall or out the way from the wall.
So this is where level design matters.
It affects what jumps and moves are available to the player.
These jumping mechanics require learning and experience to develop a feel for, but once players master them, they have a huge amount of fine-grained control over the ninja, and that lets them be able to tackle more difficult challenges.
So in Mario, it's your horizontal velocity that affects jump height.
So you can jump higher by running faster.
But in M++, it's your vertical velocity that determines jump height.
And combined with wall jumping, this creates a feedback loop where you can build a huge amount of upwards momentum if you time your jumps right.
So there are all these little subtleties to the controls that give players choices, and those choices are complemented by what's afforded by the level design.
A big component of that is the tiles that the player character collides with.
So another part of what makes N++ so different from other platformers is the set of tiles that we designed.
In most platformers, there are just usually three types of surface that your character can move around on.
Horizontal, vertical, and 45 degree angles.
But we didn't want to just stop there.
We wanted to build on that foundation and...
open up some new movement possibilities.
So we added 22.5 degree and 67.5 degree angles and curved surfaces.
And that gives players more opportunities for acrobatics and for gaining and conserving speed.
And they give level designers lots more tools for creating interesting shapes and nuanced environments that really feel distinct.
So the last thing that I want to mention about movement is that in most platformers, the character's collision shape is a box and you move in pixel-sized increments.
But in N++, your character's collision shape is a circle and you move in fractions of a pixel.
So this makes collision detection a lot more precise.
And it means that the game feels extremely smooth and fluid, and there's a wide range of moves that players can execute.
And we tuned gravity in the simulation speed so it feels more slow-mo, and players can actually use that precision.
So as a result, you can develop your skills to the point where you can pull off incredibly specific maneuvers and narrowly squeeze between enemies to fit into tiny spaces.
And then there are various expert techniques that emerge out of that, like corner jumping, which is not required to beat the game, but it means that there's this whole new set of moves that you can kind of unlock once you master the basics.
And again, it's only three buttons.
So for players, movement in N++ is a performance that needs to be learned and mastered.
And that's the foundation of level design.
So our goal as designers is to have a deep understanding of how to control the ninja, to teach the control to players, and then to provide a variety of different contexts and motivations so that players can apply what they've learned and test and expand the boundaries of their skills.
Each level in M++ is sort of like a puzzle, but as a player, you rarely have to stop and think.
It's more that your practical knowledge is constantly being tested, both how to move through the level and what's possible in terms of movement, given what's nearby.
So, we talked about tiles and movement.
Now let's get into the other entities in the game, the enemies and objects.
So, to make moving around levels even more challenging, we added a variety of very simple enemies.
First of all, there are mines, which are the little red dots that you can see scattered around.
They're static and passive enemies, and they're the main staple of N++ levels.
We use them to fine tune the possibilities that are defined by the tiles.
Then there are drones, which are those little turquoise circles moving around.
They're driven only by time, and the player has no control over them.
So they're mostly used to generate different patterns and rhythms of available and unavailable space.
The other enemies are all driven in some way by the ninja's position.
So they motivate players to move, and they do that with various types of chasing and seeking and shooting behaviors.
So since movement is constrained by the tiles and the mines and the other enemies, negotiating this constantly shifting set of constraints is the main activity the players perform.
The last ones are toggle minds and evil ninjas.
And they're special because they're overtly about the player's past actions affecting available future actions.
And they transform areas of the level that you've already moved through.
So toggle minds are safe to pass through once before they become deadly.
And evil ninjas are evil clones of you that do exactly what you did two seconds after you did it.
So that can be a little bit difficult for players because it's way more complex than any of the other AI in the game.
So evil ninjas are very challenging enemies, but they're also very intriguing because they're different every time you encounter them.
So then there are objects, which are all tools that either shape the space the ninja can move through, or let the player manipulate the ninja's motion beyond what's normally available running and jumping.
So we have launch pads that shoot you into the air, bounce blocks that slingshot you in various directions, boost pads that double your current velocity as you move through them, one-way platforms that block your movement in a particular direction, and then there are doors that you can lock and unlock.
So, because the enemy and object behaviors all relate to the ninja's position, each level is essentially a mechanism that is indirectly controlled by the player as they move the ninja.
And as designers, our job is to make sure that that's intriguing and fun to navigate and manipulate.
So one major way that we try to do that in N++ is we try to add many paths through the level so that players have options and they can find one that works for them.
This is another thing that makes N++ different from other hard platformers because they tend to prefer a single fixed route through the level that the player just has to execute perfectly.
But creating a variety of routes is a really important part of how we design levels and I'm gonna go into a lot of detail on that in a bit.
So the last part of the game design that I want to talk about is the single screen presentation.
So each level, as you can see in N plus Plus, is all on one screen, and that contributes to the puzzle elements of the game's design, and it lets players see everything all at once.
So the graphics of the game really need to support the design in order for both to work well.
And we designed the graphics of N++ to encourage players to look at a level and read it really quickly without much conscious effort so that they can get a feel for the possibilities and plan a route and then just start anticipating what will happen on it.
So we chose a minimal visual aesthetic for N++ that was functional, extremely functional, and as stylish as we could make it.
And we made sure to be consistent about identifying dangerous entities and safe ones with color and shape.
Because the game is so challenging, we need to keep visual design simple so that players are not overly distracted or overwhelmed, because that would make the game incredibly frustrating.
And making the state of the world obvious and clear lets us push the complexity of level design to extremes that would be way too hard to read if the graphics were any more ornate.
So here's an example of what I mean by that.
This is the sort of thing that would just be impossible if the graphics weren't so simple.
Because as it is, it pushes right up to the limits of what you're able to parse and focus on as a player.
There's a lot going on in that level, and you have to kind of be on your toes all the time.
So that's the basic game design.
Now that we've gone over how the game works, I can get into level design and talk about our process for designing variety.
AKA, how do we keep players interested when there are thousands of levels?
So the basic process is, we make levels, we test them, we refine them, we revise them, we retest them, and then when we think they're done, we rank them for difficulty, and we order them into episodes, and arrange the episodes into a grid.
So this process takes a tremendous amount of time, and we pretty much just edit and refine levels from the start right to the end when we ship the game.
That's okay though, because N++ is a game that lives and dies by the quality of its levels, so if they sucked, this game would not be special at all.
So the first step in the level design pipeline is coming up with new ideas.
Making new levels is something that we did constantly throughout the entire project.
Sometimes for months at a time, and others when we just had a free day here and there.
So it's a collaborative effort, but Reagan and I both make levels individually, and then we pass them back and forth, which is really useful.
Because if a person is stuck on how to make a particular design work, often the other person has fresh eyes and good ideas about how to approach it.
So the goal, generally, is to create levels that are as different from each other as possible so that we can ensure playing the game is interesting and varied and it doesn't get old.
So the ways that levels can be different are the general difficulty of the level, the length and duration of the level, the types of movement required by the player, whether you're traveling mostly vertically or horizontally or a mix.
whether there are lots of flat surfaces or mostly angled surfaces, the types and combinations of enemies and objects in the level, the various types of pacing, whether the level peaks at the beginning, middle, or end, the types of skills required on the part of the player.
Do you have to be really patient or do you have to have great reflexes or be good at higher level planning?
The types of space in the level, whether it's more wide open or it's more full of narrow hallways.
and the use of space in the level.
So is it more of a linear level?
Is it kind of a there and back?
Is it an open unstructured space?
Or is it kind of a hub and spoke situation?
So there are lots of ways that structurally and visually levels can be distinct.
And the main way that we find new ideas is really just by sketching and playing around in the editor and seeing what happens.
We figured that we would gradually learn the nuances of game design through play.
So for us, the process is enjoyable and low stress, and we can develop and expand our vocabulary naturally.
Generally, we try to be really careful about what we add to a level, and ensure that absolutely everything has a clear purpose.
And we try to make sure that both aesthetics and gameplay are highlighted, because we really like a balance.
So here's a finished level so you can see how it works.
The goal is to ride those thwomps, which is the little square enemies that are traveling from right to left.
And you need to avoid all of the mines and drones and that laser, and try to get up to the exit in the top right-hand corner.
It's not as easy as it looks.
So here is a frame by frame recording of that level being made.
And you can see that we started with the basic idea of the player needing to traverse the screen on those slumps.
And then we played around with the spacing of the enemies to find something that worked really well.
And just started developing the rest of the level around that.
So what the space that you're moving through really looks like.
And after every screenshot, what you're not seeing is that we play test.
And so that we know how the changes that we're making affect the level.
And that's one of the great things about our editor, is that you can just switch back and forth really quickly between developing the level and testing it.
So it makes that process really easy.
Here's another level that's more open, and it's focused on the idea of avoiding a whole swarm of death balls, which are those purple circles that are coming out on the left there.
And here is an example of refining a sketch into a first draft. So again, you can see we started with the idea of an open space and some death balls and then we just play around with the placement and we add some mines and gold and further define the roots in the level and then we polish the tiles a bit. So here we're just loosely playing around with things to figure out what works and what we want to keep. So...
In order to create levels that are really difficult from each other, we try to approach level design from many different angles.
We really find that the process influences the results, and you get out what you put in.
Also, you never know where inspiration will come from, so we really try to be open-minded.
So sometimes we start with an evocative level name and just try to think about what kind of level would match that name.
Sometimes we look to architecture.
We find that the exteriors of buildings, as well as the floor plans, are huge sources of interesting shapes.
Sometimes you're just making a level and you have an idea for another level.
It's like a happy accident.
And sometimes we just sketch in the editor until we find shapes that feel like they might be interesting to move through.
So we have a lot of different strategies.
And something that we found really useful is keeping an in-progress file, which for us by now is filled with thousands of levels.
But often an initial idea doesn't totally work, but there's something there that's interesting that you can build on or use later.
So here's an example of an in-progress sketch.
You can see it's totally not done.
We were just trying to figure out different toggle patterns, a grid arrangement of mines and bounce blocks, and we were just getting a sense of what players can do.
But we couldn't really find how it was gonna turn into a finished level, so we just left it.
And this is great because new stuff from scratch feels a lot different than when you're working with in progress fragments.
So trying to fix or rearrange things is a really different creative challenge than coming up with new ideas.
And that means that you can alternate between the two approaches and not get as tired.
This is an example of a sketch that was in progress for a bit, and then we finished it and put it into the final game.
So it starts as just a really plain idea, a very simple space with a few fun movement possibilities.
And then we developed it further into a first draft version, and then we, oh, where we expanded the level around that initial space.
And then finally, we tweaked the placement of a few things and polished it a little bit, added some embellishments, and put it into the final game.
So having this file of in progress ideas really let us feel free to try new level ideas without inhibition because we didn't have to stress about an idea working or not.
Or we didn't get hung up on trying to make it work because if it doesn't work, you can just throw it into the bin and come back to it later.
In practice, most of the in-progress levels never actually make it out of the bin, but psychologically it's nice to have it there so that you don't feel bad about failing or wasting time.
And especially when you're dealing with this volume of work, being productive is often about managing your expectations and keeping yourself motivated, and having the freedom to just scrap an idea at any point really helped keep things moving.
Okay, so once a level seems good enough, which is just a gut feeling, we think the idea is solid and we sit down and go through it together.
So whoever made the level, the other person would play through it.
And this is a really fun dynamic because you kind of naturally want to impress or surprise the other person.
Overall, we approach making levels as a collaboration and we pass things back and forth and talk about problems or potential that exists or we just talk about...
what the other person has created and why it might be interesting or not.
So generally we find this a terrific method for generating a diverse and varied set of levels because we're both individuals and we each have our own tastes and interests but we can team up to cover a much wider range and compensate for each other's weaknesses or blind spots.
So the main focus of this early review together is to rank the difficulty and to rate the quality of each level, which is data that we use later when we're organizing them into episodes and putting that in the grid.
So our quality rating is just a scale from zero to two, and it's based on the specialness of a level, which really is just, does this stand out compared to an average level?
And it's very subjective, it's just a gut feeling.
And being able to determine what we would consider specialness is just developed over time with our experience playing and designing the game.
So here's an example of a zero level.
It's fun but it's just kind of repetitive and it would really need some editing to add a bit of variation and interest to it.
So this level either needs more work or we should just cut it.
Here's an example of a one quality level.
So it's relatively plain and simple.
It has some varied options for movement and it looks nice.
It's good but it's not exceptional and this is really important.
It doesn't have to be any better than this.
You do not want all your levels to be twos, because that gets exhausting, both as a player and as a designer.
Dynamics are really important here.
So just like in music, where the quiet parts of a song help the loud parts to feel even louder and more impactful, relatively ordinary levels like this one help the exciting ones feel even more exciting.
So here is an example of a two.
Oh, sorry, PowerPoint's a bit buggy on this computer.
This is a two.
It's very different.
There's lots going on.
It's relatively long.
And it features two completely different sections, one of which is entirely optional.
So there's lots for players to do here and lots of interesting situations they can get themselves into.
So that's great.
This is our difficulty scale.
So it's a rank from zero to seven, and we base that on our estimate of the skill and knowledge required to beat the level.
We're always trying to find that sweet spot where a level is just challenging enough that it requires effort, and it feels really satisfying when you complete it, but it's not too frustrating.
Players always need to know that they can do it.
Maybe they just need a bit more practice or to try it a few more times, but they can get there.
So our eight-point scale really helps us.
figure out where levels need to be in the order.
And again, completely subjective measurement.
We both vote and then we average the results.
And we don't really get too hung up with finding that perfect rating immediately, which we think is also important.
Because if we try to make things perfect all at once, we grind to a halt and we just focus on that.
So instead, we find that if we make things better incrementally, we eventually get close enough to perfection.
So a lot of this process for us relies on gut feelings.
The next step of the pipeline and the main level design task in Ed++ is editing.
So we constantly played through the entire archive of levels, refining them, improving them, and sometimes cutting.
This kind of playtesting led to our tough but fair level design style.
Because we played through the levels so many times that anything that's overly frustrating or clunky or just unfair naturally gets smoothed out because those parts annoy us and we cut them or we fix them.
So the idea behind our editing process parallels the game.
Most M++ levels are really short and they take less than a minute to beat.
And it gets exhausting and boring to work on the same level for hours at a time.
So we took our cues from playing the game and instead we split the hours of editing across many different passes.
And we iterate quickly through every single level again and again instead of doing a few large passes.
We focused on one specific task at a time.
So for example, the placement of gold in all the levels.
Because as you look at that one task over thousands of levels, you get really good at understanding all the nuances of it.
But if you were constantly switching focus and looking at many different issues on each level, you get distracted and you miss things.
And you might never really develop as much insight into each element.
And then when you return to a level on the next pass, which is much later, you have a better idea of how everything fits together and you're fresher.
So generally, it's been great.
Well, one warning about that iterative approach is that you can end up overdoing things because it's really hard to figure out when to stop.
So near the end of development, we reviewed all of the levels, and we realized that a lot of that beautiful simplicity that we love so much had totally been lost, and things weren't really very minimal anymore, which is something that we love, because we just messed with them too much.
So here's an example of that.
This is Occam's laser.
And the initial level is based around a series of jumps between platforms with some lasers that interfere with your jumps and force you to jump at certain times.
So we played around with that a lot and we added some variety and we kept adding more and more and more embellishments until that simple idea was totally lost.
So we dialed it back a bunch and we kept the original idea but also added some of that nice variation back.
This is where having good tools really saved us.
Our level archive contained every single version of a level that we'd ever made.
So we could make a case by case decision to revert or not.
So one thing to note though, getting carried away with the edits actually ended up being a good thing for us because it helped to inspire the secret levels, which I am really excited to get to in just a moment.
So the last important step in making levels is naming the level.
Meaningful level names is a way for us to add another dimension to a level and make the experience more rich than like level number 967 would be.
So this is Bullshit Mountain.
And this is an example of a level name that we think really works.
It's unique, it's silly, and it signals something to the player.
So there are a few really tricky parts in this level and the title lets players know that that's intentional.
It's not really a mistake on our part.
And it hopefully undercuts the frustration that they're going to experience with a little bit of levity.
Level design is kind of like cooking, so you have to constantly taste the food to know how it's coming together.
But that also makes you get used to the flavor.
And since we've been playing this game for more than 10 years, it makes it really hard for us to keep an objective perspective on the difficulty of each level.
But difficulty is something that you wanna be able to craft and sculpt and really control.
So it's crucial to have a good understanding of it so that you can use it effectively as a tool.
We have a number of strategies, but the main one is showing the game during development at events.
Her experience with showing the game is we watch horrified as no one can make it past even the easiest levels, and then we go home and we tone down the difficulty of everything.
And then the same thing happens at the next show, and the next one, but eventually we've refined it a bit more and smoothed out everything so that finally people can actually play it.
And it's still really hard, but at least the difficulty curve is smoother.
So this whole process of making levels is iterative, and we think that's necessary because there's just way too much to focus on all at once.
Okay, so that's the basics of level design.
Now we can talk about the really fun, more complex stuff.
So, as we make levels.
We're trying to consider what the player's thinking and feeling as they play.
Because aside from designing spaces, of course we're also designing experiences.
Reggie and I really try to be sympathetic to the player, while at the same time we want to challenge them as much as possible.
Because ultimately we want them to succeed and feel proud of their hard earned skills.
N++ is a tough game, but what's fun about it is how satisfying it feels to get through the challenges that you're up against.
So we really want every player to be able to feel that.
And it's not just one player that we have to consider.
It's a whole lot of different ones, and they each have different talents and personalities.
So a big part of our job as designers is understanding players and giving them ways that they can be themselves.
So in order to support and accommodate a wide range of skills and techniques, one thing that we do is to design multiple routes through each level.
So let's take a look at routes using one example.
This is Trivium Reactor.
And the first path that we're gonna show you is the just beat the level route.
So there's a line here, but it's not a specific line that you have to stay on, it's really just to sort of illustrate what we're talking about.
There's a huge amount of looseness and flexibility there so that players have the opportunity to be creative.
That's something that we think is really important.
So, this is the Just Beat the Level route.
It's the most basic and the easiest route.
And we try to support a range of Just Beat the Level routes, which does happen naturally a lot of the time if you don't constrain the solution too much.
So expert players naturally just try to blaze through tricky sections as quickly as possible.
And novice players try to move through them slowly and they can do that relatively safely.
So doing this this way lets players modulate the difficulty themselves in an organic way and they feel empowered to do so, which we think is a big part of game design.
The other main type of route is the all gold route.
So in N++, we give you a badge for collecting all the gold in a level.
And we design the all gold routes as a bonus for advanced players, either to make their first play through more interesting, or just as an extra challenge that they can return to later.
So we think that this is interesting because, again, it gives players agency.
It's a difficulty mode that you don't have to choose from a menu, you can just try for the all gold and you can abandon your plan if it's too hard.
Come back to it later.
All gold routes typically involve longer, more difficult routes than just beating the level.
So you can see here that the all gold route involves going around the level twice and then there's a pretty tricky jump at the top.
So some of these challenges are already notorious among fans for being marathon tests of skill and patience and really stress management.
So, this is the Lunatic device, which is another example of us telling the player what they're in for.
And this level is pretty easy to beat, but the all gold route is extremely difficult.
It is optional, but.
It's quite a challenge.
This one took Man Vs. Game three entire hours to beat.
And I really wish I had sound for the video clip that I'm going to show.
But you can find it on YouTube.
And hopefully, it's funny enough without the sound.
But this is what happened when he finally beat it.
It's so good.
Yeah, so it's a tough game.
So this is the last path that I want to talk about.
It's the secret challenge path.
They are very devious and they're extreme challenges that we made for expert players.
And we hid them in plain sight within the levels themselves.
So the secret challenges are only unlocked once you've beaten the game and you've collected a lot of all gold badges.
And they usually force players to unlearn all of their previous successful routes and approach things really differently.
So, in this example, the secret challenge is to touch all of the toggle mines without touching any of the gold.
And figuring out how to do that includes a bit of a sneaky trick.
So one of the mines in the top right is slightly misplaced, which creates a slightly larger gap that you can just barely pass through.
We only use this slightly misplaced object trick twice in 600 levels, so it's not something that players are expecting, and that makes it even cooler when they see it and they figure out what it is they're supposed to do.
Okay, now I'm gonna talk a bit more about secret challenges because they're brand new to the series and we're super excited about them and really proud of them.
So these are some videos from YouTube of a streamer doing some secret challenges.
And in both of the videos, the secret challenge was to touch all the toggle mines without touching any of the gold.
And you can see that the routes are incredibly difficult and they really require moving around in ways that feel almost wrong.
So what happened during development was we sometimes got bored while we were testing levels.
We started inventing weird goals like, I wonder if I could beat this level without getting any of the gold.
Or like, I wonder if I could toggle all the mines and survive.
And it turned out to be pretty interesting.
So the secret challenges came out of us finding these hidden potentialities and then polishing them into fun experiences. And we made them for hardcore fans but also for ourselves because they're so weird and different. They give us something to be excited about even after such a long time.
A lot of the time, secrets in games don't really have a lot to do with the game itself.
They're just an unrelated surface layer.
But we wanted to follow the example of Super Mario World secrets, which really show how magical and transformative it can be when the secrets are integrated right into the very core of the game's design.
So, we have the secret challenges that emerge from the level design, and then there are secret levels, which are unlocked when you beat enough secret challenges.
Just like the secret world in Super Mario World, the secret levels in N++ are dramatically different from the normal levels, and they subvert all the normal design rules that we use and really push everything to the extreme, which was pretty exciting for us.
So M++ secret levels are all remixes of existing levels, and like I mentioned before, when we were editing, we realized we'd sort of taken it too far in some cases, and all of that elegant minimalism that we love so much was totally gone.
But the new stuff that we were doing was also really exciting, it was just a bit weird.
So making secret levels was a way for us to take these weird offshoots and push them even further and give them a place in the game that felt like it fit and didn't feel gimmicky.
So for example, this is Orbital Habitat.
We really liked how this one looked.
This is just a normal level, like a regular level.
And we liked how it felt to move through the space.
But then when we were editing.
We ended up adding all these additional flourishes, which were fun, but they totally destroyed the elegance that we felt the original version had.
So, we reverted to the old version and put that one in the game.
And then later, when we were making the secret levels, we took that overcooked version and we just kept going with it until it looked like this.
So the secret level version is even more complicated.
It's totally not minimal.
And the all gold and secret challenge routes are incredibly involved.
They're really long, they're quite difficult, and they have a few tricky moves and require some sequence breaking to accomplish.
But that's what makes them so incredibly satisfying to complete.
So, like I said before, the process really influences the results, and our process for making secret levels was totally different than for making regular levels.
And that really helped them feel special.
So, we would strip out everything but the tiles from an existing regular level, and then we'd manipulate them in some way.
So we would rotate them, or swap the solid and empty space.
We would often just copy and paste fragments all over the level.
Basically keep working with the tiles until we generated some new shapes that felt interesting.
And this approach was really different.
It turned level design into kind of a game or puzzle for us.
So, like you have this set of tiles, what can you do with it?
What can you come up with that makes it feel different but maybe still references the original?
Here's an example of a secret level where we took the original level, and we inverted it, and then we flipped it vertically, and we used that as the basis for a level.
So this is actually the last level in N++, and it's a very tricky sequence puzzle.
So there are tons of different options for where you can jump to and from, but all of the sequences but one end up trapping you on the way back.
So three people in the world have beaten this level right now.
It's a tough one.
So since the foundation of secret levels was already there, we could put our time into making extremely complex and involved enemy and object designs, and especially for the all gold and secret challenge routes, because secret levels have those too.
So here's another example of a secret level being made.
You can see that we start with the original level, and then we just kind of start playing with it and trying various things.
We took it, oh.
You can't see that right now.
Is it playing?
OK, well, anyway, so we.
This level especially was quite complex.
It ends up being really, really intricate and difficult.
And there are so many options and sequences of events in the final level that it's quite bewildering.
And that's sort of what makes it feel so refreshingly different from the other minimal kind of elegant levels.
What's that?
All right, I'll just keep going.
Okay, so that's the practical stuff, but there's a more considerate side to level design too, and we think that that really helps make the game and the levels memorable.
So, as we design levels, we try to teach players the concepts and keep them interested in bettering their skills and taking on new challenges.
But we really try to think about why people are playing and what they might be thinking.
Our philosophy is that levels are a kind of conversation that you're having with the player.
We want that conversation to be playful and intriguing and constructive and loose, but never bullying or mean.
N++ is really difficult.
If it were unfair or it took cheap shots, it would just be infuriating.
And this is where repetition in level design can be really helpful, because it helps players learn without being constantly frustrated.
It allows them to recognize situations that they've been in before, and then apply the skills that they've learned.
You just need to be careful that the repetition is more like theme and variation, instead of the exact same situation over and over.
So here, hopefully, is an example of subtle repetition that feels different.
So those two bottom hallways look very similar.
They've got gold, they're guarded by a floor chaser enemy.
So the same skills are used to get through both of them.
But the varying lengths of the hallways, the placement of the gold high or low, and the different arrangement of toggle mines is enough to help each experience feel a little bit different.
Another strategy that we use to generate interesting repetition is to make sibling levels.
So those are two different takes on the same idea.
So here's an example of sibling levels that are an easy and hard version of the same basic idea.
So they both have similar tiles and two evil ninjas that you have to evade.
But in the easy version here, the level is quite short.
You only have to double back through the evil ninjas once.
The gold is pretty easy to get.
And there are only a few mines.
But in the hard version.
Here, it's much longer.
There are multiple sections where you have to double back through your past selves, and the gold's really hard to get.
But in both, the skills required to be successful are essentially the same.
So to keep repetition from being boring, we vary the context each time the player revisits a space.
So because of gravity, moving up through a space is a very different experience than moving down.
So when we reuse vertical space, it automatically feels different.
Horizontal movement is symmetrical though, so it's important to use enemy placement patterns that break that symmetry so that each leg of the journey feels like you're moving through a different area.
So here's an example.
The vertical ascents on the outer left and right are the exact same tile shapes.
So we offset the spacing of the mines to make each one require a slightly different approach.
The center part is an example of varying context to make that same space feel different.
So the micro drones are patrolling counterclockwise around the room, which means it's easy on the way there since you can just go with the flow.
but it's a lot more challenging on the way back when you're moving against the current.
So even though we've reused that space in the center, each time you're in it, it feels like a completely different room.
Another way that we try to ease frustration is by giving players choices.
So we try to make sure that players are only rarely required to move quickly through the entire level.
It's really nice to leave some spaces where they can move at their own pace and breathe a little.
This freedom lets players really express themselves and find their own paths, which is a lot more enjoyable than a more constrained design.
And it leaves room for speedrunners.
So here's an example of a level that gives players a lot of freedom.
So there are lots of challenges, but there's space to pause after each one of them.
And there's no real need to rush through it unless that's what you want to do.
A big part of our job as designers is to keep players on their toes and invested in the challenge without exhausting them.
And there are tons of subtle ways that we can do this.
So I mentioned that the Ninja in N++ has a wide range of speeds. And we try to use this as much as possible. We want players to be constantly negotiating and maneuvering within the range of possible trajectories. Because that's much more rewarding than just holding the button down and running at top speed the entire time.
So although we usually stay within the middle of the range of the ninja's motion, we try to guard against players becoming complacent by occasionally requiring them to hit those behavioral extremes.
So that way the whole range is always useful.
So, in this level, the first jump needs to be taken at max speed.
You have to hold the jump button down the entire time to make sure that you clear that first gap.
But the bottom jump changes things up a bit.
It looks really similar and an inexperienced player might be tempted to just apply the exact same approach, but if you do that, you'll go too far and hit those mines on the wall above the exit.
And if you don't jump hard enough, you'll fall short and smash into the ground.
So you have to perform a very delicate moderation of your velocity in mid air to make sure that you land safely on that exit.
And it's really satisfying when you nail it.
Part of the challenge of playing N++ is that players need to be responsive to the demands of the level on the fly and to develop the skill of reading the level to see what's possible to do.
So you can't always blaze in at top speed and you can't just apply one strategy across the board.
That would really be boring.
We think that engaging this sort of higher level contextual awareness is just as important as the basic muscle memory reflex skills so that all parts of the brain are engaged and learning because that's what Regan and I find most fun as players.
So to make that work, we really need to try to understand and appreciate each player's experience.
We also try to consider player psychology, especially understanding the varying amounts of tension through a level, and how that affects the pacing of the level.
So here's an example.
The top part is incredibly difficult.
So you have to weave through a whole bunch of evil ninja clones of yourself, which gets harder and harder as time passes.
The bottom part is relatively easy, but you probably spent a lot of time and effort finally clearing that top challenge, and you don't want to have to go through that again.
So that contextual stress follows you into the bottom section and makes it feel much more tense and exciting.
Part of the motivation behind the design of the Toggle Mine and Evil Ninja enemies, which are new in M++, was to provide us with more tools to reuse the space.
So these enemies are modified by the player and they allow players to influence the difficulty and challenge of the level as they play.
So this lets them intuitively connect their ninja with the mechanics of the level and it really makes it more interesting because when they return to a space, it's a bit different and they've had a hand in making it that way.
So understanding and supporting or subverting player expectations is a really important part of making great memorable levels.
And it really helps players connect with the game in a meaningful way by making them part of that conversation.
Our biggest goal is always to support player agency by rewarding learning and growth.
Because we want players to be choreographers as well as performers.
We want them to plan a route and then execute their plan and then make changes on the fly, rather than just being forced to execute a sequence of moves that we as level designers preordained.
Here's an example of giving the player lots of options and letting them figure out their own way.
So we made sure that you can pick any pair of adjacent switches and construct a single jump that will pass through both of them.
It's really hard, but it's very rewarding.
It feels great.
Or you can just get them all individually, but you still need to figure out an order that will work.
And that rocket means that the specific order matters because you'll be in a different position at a different time, and that'll change where the rocket is and what trajectories it blocks.
So there's an incredible amount of freedom in terms of how you want to tackle the challenge with a sort of combinatorial explosion of branching possibilities.
And plus plus levels are about players finding their way through it, rather than the way.
So overall, level design in M++ is about creativity within constraints.
We have a fixed small set of entities and tiles and a fixed single screen to work with.
So we could really get into and understand all the nuances and details about each component and how they all interact.
That let us create a variety of levels to challenge and reward players.
And to refresh the series with some ideas that really felt like they belonged there even though they were brand new.
M++ is a dialogue between player and designer, and we really try to respect and support and encourage players, and to understand them so that we can create a game that's varied and challenging, and ultimately, incredibly satisfying to play, which is what we think keeps players coming back for more, even after 12 years.
Here are some conclusions and take aways that I thought would be more applicable to a variety of games rather than just N plus plus. And yeah, that is all I have time to talk about today. Thank you so much for coming.
So again, a quick reminder to fill out your feedback forms, which should be arriving by email shortly.
And do try N++ if you get a chance.
And I think we have time for some questions if anyone has any.
Come on up to a mic and.
Great talk.
I just had two questions kind of related to the amount of time it takes to pass levels.
So I remember one of the later legacy levels took me a good six or seven hours to pass.
So I was just wondering, based on that, did that slow down your design process?
And following on from that, what was sort of the average amount of time it took to make a level?
And did that slow down your design process?
Well, I mean, very quickly off the top, it takes, I think, about four hours start to finish for every level.
It varies depending on the complexity of the level and what sorts of things we're testing for, I suppose.
But yeah, each level does take quite a long time.
Did you want to add something?
No, sorry.
OK.
Yeah, I mean, just definitely making the levels, we want to make sure that we try to explore every possibility.
And yeah, it sometimes takes a really long time.
Also, levels, when we make them now, take us a bit more time to, like, it takes a little bit more time to come up with a good idea, because at the beginning, there were so many.
We could just do anything.
And now that we've made, like, 10,000 of them.
There's not as much that we can do anymore.
Thanks.
Thank you.
Let's go over here.
Let's go back and forth.
I'm just going to stand on my feet instead of.
You talked a lot about player agency.
Have you ever thought of allowing players to design their own level and create modification of their?
Excellent question. Yes, actually there's a built-in level editor in the game and we support online free global level sharing for all. Because, yeah, we really love that, we love to see what other people create as well. And it's often really, really interesting to see especially how they differ in their level design. It's awesome. Thank you.
Kind of an offshoot of that question.
Years ago when you made N+, I entered the contest and one of my levels got into the game.
Awesome.
And I was wondering, it started my career.
I've been making levels ever since.
Oh, cool.
And I'm curious if you had any interest in doing maybe another contest.
for that again. It would be great for me but also those getting started. It bolsters your confidence. I can do this. Look it made it in a real game. It was huge for me. So thank you.
Thank you. That's awesome to hear.
Yeah, that's like super, super amazing.
I should point out that that was actually a contest for legal reasons. We were not allowed to call it a contest because that would involve, I don't know. And actually I think like one of the reasons why we did that was that we were trying to get the global level sharing working in N plus. But Microsoft had some concerns about people making inappropriate content.
They didn't have, anyways, so we weren't allowed to do that.
So we were kind of like, okay, this is a way to get people to see what the community is making.
And we sort of specifically for N plus plus decided we didn't want to do one of those because we wanted to make the.
level sharing so good that there was no need for us to cherry pick. There is a little featured section in the user made levels where we curate it and pick out our favorites. That's sort of the same thing. Thanks so much for letting us know. That's really, really cool.
you guys for answering questions about physics and things like that way back in the day on the forums. All those tutorials were super helpful. As far as my question, I just wanted to ask if for N plus plus or even N plus if there was any new features that you considered that you decided just added too much complexity or disrupted the game play when you were in the process of building it out.
there are a few new enemies and stuff that we were prototyping that we ended up scrapping because they, it was just too much. It was like specifically we kind of added portals. One thing about 2D games is you have to stuff, empty space has to be contiguous or there's no way to get to it. And so this was a way to let players could beam through a solid region and end up in an empty. That's way too much. It's just getting to be like we tried to kind of, yeah we're kind of saving it for the future basically.
Hi. How long did it take you to come up with controls that you thought were really solid and how did you know that when you got there?
it was so long ago. How long did that take? I think it took about a week to write the player controller. We made the original in for a flash games contest. And we did have a lot of stuff already like the rag doll and the tile collision. Everything was already laying around so we were just kind of figuring out how to make a game out of all these pieces we had. But the player controller took about a week and then probably we tuned it like.
over the course of the next month as we were adding the other stuff. I don't know how we decided.
when it was done. Honestly we didn't know that it didn't super click until we added it. Initially it was just you were a circle. And that was sort of like okay, whatever, this is fine. We proceeded with development. But once we added all the animation in, that's when it really started to feel.
It made a pretty dramatic, which is strange because it doesn't actually change the motion at all. But it really changed our perception of it. And we had not anticipated that at all. But it was quite a huge thing when it happened.
Thanks.
Hi.
I like the presentation today.
So for the level zero or potentially boring level designs, would there still be use cases for them?
Like, for example, for tutorial sections or whatnot?
Or would that just be a case by case basis?
Yeah, it's mostly case by case.
So tutorial, I mean, we historically had not really done a great job on the tutorial.
So we really tried to do that well in N++.
And I think generally we succeed, especially comparatively.
But mostly for tutorial levels, you just have to keep it super, super simple.
So even the one that I showed, that zero level, would probably be too complex.
I mean, I guess we could put it at the end of the tutorial.
But.
They often had to be a lot more simple than we thought.
Because, I mean, it's hard to make a very simple level without it being boring.
So there's like a fine line that you kind of have to, again, it's a gut feeling.
But you just kind of have to play with it until it seems just interesting enough, but also isn't overcomplicated.
And I feel like that level might be over complicated.
But again, yeah, it's a case by case thing.
So some of them, yes, we can totally repurpose.
Some of them we would use for secret levels.
Because again, the tile shapes might be interesting.
Surely we could strip out everything else and then play with it a bit and see what happens.
But some of them you just have to cut.
And that was something that we had to deal with too.
We've done all this work, but you know what?
There's no way to save it.
Right.
And then somewhat related to the tutorial, when you were still crafting the player controller, did you ever attempt level design?
Or did you wait until it felt right enough to start developing?
remember? We didn't have the level editor built then but we certainly had a bunch of different levels that were just kind of like defined in code just because you kind of need all those different angles and the different little just like a variety so you can test like all of the different ranges of movement and height and stuff like that. So there's definitely like.
Yeah, I mean, it wasn't like levels that you could play.
It was just sort of a level that sort of would have one of everything, or would have sort of a bunch of different configurations that you could drive it around and get used to how it worked.
Okay, thanks.
Thanks.
Hi, thanks for the great talk.
I have one question, but before that, just a really small sort of a remark slash request.
So when you were talking about all the considerations of what makes the levels feel different from one another, like the speed of traversing the level, the layout, et cetera, I found that really valuable because it sort of gives you a set of parameters so you can just think about how you can even think about making your level of, you know, like.
just the task of making all of these thousands of levels wouldn't be possible without it.
So if you ever put this online or anything, it would be really good to have all of those sort of in a list.
Yeah, so the question is actually about the sort of grid size for the levels.
Was it a fluke, or is it flexible, or is it fixed, or did you get to that, you know, possible space. In N plus we actually because we had to support SDTVs we had to implement zooming and panning and stuff. And so since we were doing that we supported like a range of level sizes. But for N plus plus we sort of started with like okay, it's 720 is like the lowest common denominator and all the UI and everything was designed around that. And the tiles were all like we kind of, because you can't everything has to be in multiples of a tile. You can't add half a tile to the level. So we basically right at the start of development just figured out, okay, what's the biggest space we can make where stuff is still big enough that you can see it on a TV from a certain distance sort of thing. And I think what we ended up with is like 44 tiles horizontally and 23 vertically. And it's fixed. In N plus plus it's only that and it doesn't change. But it is like I mean maybe we should have gone a bit bigger or smaller.
It's hard to say.
Thank you.
Thanks.
Thank you.
OK.
So if anyone still wants to chat, we're going to head over to the wrap up room briefly.
And otherwise, thank you so much for coming and have a great day.
