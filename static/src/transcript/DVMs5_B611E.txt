OK, hello everyone.
I'm going to be talking about The Sims 3 today.
In particular, the dynamic living world and the unique personalities.
OK, so this is a programming talk.
It's going to be quite technical, but not super technical.
There are going to be quite a lot of movies interspersed throughout, little oasis of fun in the desert of nerd, if you like.
So we had two big goals in Sims 3, which is to simulate a larger, varied, dynamic world.
and to make these unique sims, unique snowflakes.
But why those two goals in particular?
Well, one way of looking at it is that those two goals serve a wider goal of having a system which allows emergent narrative.
So what does emergent narrative mean?
Does it mean anything?
Is it just a sort of trendy buzzword or catchphrase?
Well, the idea is that I'm So, lots of games you go through one particular story, whereas the idea of an emergent narrative is that the game enables a huge bunch of different stories.
It's like, the game is like a story box, and you can create a wide variety of different stories through player action, and through autonomous NPC action.
So, after the game came out...
An example of the sort of thing that we wanted in terms of emergent narrative appeared on the internet, and we were very excited by this.
It's a really excellent blog by Robin Burkinshaw, who's a game designer, about a pair of homeless Sims.
And the surprising thing, this is a quote from his website, a surprising amount of the interesting things that happened in this story were generated by just letting go and watching the Sims' free will and personality traits take over.
So, Robin created these two sims, a father and daughter, and the father was called Kev.
And he was a really kind of difficult to get on with guy, apart from being homeless, he had a number of different personality issues.
But his daughter Alice is very different, she was sweet and kind.
Now the sort of thing that happened in terms of emotional narrative is that, I mean, so Kev needed somewhere to stay, he didn't have his own home.
So he would go from house to house and sometimes people would let him in.
But then, he was a deeply inappropriate kind of guy.
All the mean-spirited and inappropriate things he did in the house would eventually cause his hosts, no matter how forgiving, to chuck him out.
And he was back on the street again.
And eventually he even alienates his own daughter.
So if you like, the high goal, or one of our top-level goals was emergent narrative.
And two of the sub-goals are simulating a larger, varied, dynamic world and making unique sims.
Okay, so I'll be talking, so the first half is about simulating the larger, varied world.
Okay, so I'm going to be showing some videos to show you what I mean.
OK, so this is Pauline Wan, who is a young lady.
She is engaged to be married to a handsome policeman called Hank.
And it's a Sunday afternoon, and she's cycling around town.
And she arrives at the park.
So one of things that's going on here is that wherever she goes, there's already a whole lot of stuff going on, which is sort of suitable for the venue she's in.
it's already halfway through if you like, there's already people talking and doing things and these people, you know in a game like Grand Theft Auto, or a ton of games like that they sort of spawn people to be there when you get there whereas our game doesn't use spawning, I mean these are all real simulated sims and we sort of encourage them to come to the venues and we encourage them to sort of behave suitably when they get there So for some reason I had this weird urge to sort of spin the camera around all the time, so I apologize for all the vertigo induced on you guys.
Yeah, I don't know what I was thinking of.
Yeah, I'm silly.
Okay, so next she's going to go to the gym.
You can see just in the corner there, there are people sitting having a picnic.
And again, they're people from a family and they've been encouraged to sit together because they're members of the same family.
So they want to sit together.
So when we arrive there, they put the roof down.
So by the time she arrives there, there are already a ton of people doing suitable situation-specific behaviour in the different venues.
So that's in the foreground, but you can also see in the background that there's all the other stuff going on in the other areas.
You can see some of the people leaving the park now, because they're no longer so needed at the park, because the players are no longer focusing on the park so much.
Okay, next video.
I'll just show you one more video.
So she's next, she's going to go to the library.
No, I think it's going to take a little bit longer.
Okay, we'll stop the video there.
Okay, so, how did we, what techniques did we use in order to simulate this larger world?
So obviously we needed a number of optimization techniques, we also needed some behavior techniques to make them behave suitably when they get there.
So one of our optimizations we used was hierarchical planning.
So the basic idea is to massively reduce the branching factor by instead of making some decisions with a massive number of options, making a small number of decisions with fewer options.
So we've got all these different lots, and each lot has got lots of agents.
And each agent, you can perform lots of interactions on him.
So the naive and inefficient thing to do would be to go through all the lots, go through all the agents on each lot, go through all the interactions on each agent on each lot, but that's wildly inefficient.
So instead what we do is the sim will choose which lot to go to, and then choose which agent to talk to, and then choose which social interaction to perform.
So if there are L lots and M agents on each lot and N interactions on each lot, then this, you know, significantly changes the performance from order L times M times N to L plus M plus N.
Okay. So here's a graphical depiction of this.
Instead of having a wide variety of different actions on the left hand side on different agents, we first choose which lot to go to and then which SIM to interact with and then which interaction.
Okay.
Okay, so when the.
When the sim is deciding which lot to go to, the first decision, how does he make that decision?
To start with, we tried, each of the individual sim had all these different individual motives.
So, oh, I quite want to go to the park at the moment, and another one was like, oh, I quite want to go to the library.
But we found that very, very hard to tune, because we had these high-level tuning goals.
Like, we wanted a certain number of guys in the park at a certain time.
We wanted a certain number of people in the restaurant at dinner time, and stuff like that.
So eventually we added, if you like, motives to the venues as well.
The lots had motives too, but they had an urge to have a certain number of people in them at different times of the day.
So here is some of our tuning data for the restaurant, which is the stuff that's circled.
And this is basically specifying the number of agents we want in these venues at different times.
And as you can see, there are two peaks for we want a lot of agents in the restaurant at lunchtime, and we want a lot of agents in the restaurant at dinner time.
Okay, so that was our first optimization technique we used in order to get this living world.
The second optimization technique was what we call commodity interaction maps.
Okay, so this is an important optimization technique.
So what Sims 1 and Sims 2 did was, when considering what to do on a particular lot, was iterate through all the objects on the lot, and then go through all the interactions on that object, and then think, is that interaction currently available?
And then finally, do I want to do it?
But this is very inefficient when most of the desires are satisfied most of the time.
To take a concrete example, let's say that the Sim has just eaten a massive meal, he's completely full up and sated, and he lives in a house with like 20 fridges in it.
So in this naive thing, he'll go through all the fridges, he'll go through all the interactions on each fridge, he'll work out if he can do each of those interactions, and then he'll think, oh no, I'm not hungry, and he'll keep continually doing that on all those things, which is sort of a bit of a waste of time.
So...
So in Sims 3 we do it a different way.
It's a classic memory time trade-off.
We store a map from the things that we might want, which we call commodities, to all the different interactions which satisfy that commodity.
So here's an example. I don't know how well you can read it. On the left-hand side is a subset of the different commodities, and then on the right-hand side are all the different ways of satisfying it.
So the top line is all the ways of satisfying your bladder motive.
so using all the different toilets.
So one thing to notice here is that we have much, much more motives in Sims 3 than in our previous Sims games. Sims 1 and Sims 2 have eight motives.
We had a really large number, the technical term is the metric assload of motives, for all sorts of different situations.
We have the traditional ones but we have a whole lot as well. You'll see near the bottom of this some example of sort of venue-specific motives.
which is what we use to encourage people to behave appropriately when they arrive at venues.
Okay, so that was the first two of our optimization techniques we use in order to make the larger world.
And the third one is what we call auto-satisfy curves.
So we have like 80 sims or thereabouts in our living world.
And we can't afford to simulate all of them at the same level of detail.
So we simulate the ones in the foreground to a much higher level of detail.
And the guys in the background...
we can't afford to do so much processing.
In particular, motive decay, which they've all got all these motives and they've got more than they had in previous games.
Instead of decaying all the motives on all the different Sims, the guys who are in the background, we don't decay or update their motives at all until they come to the foreground.
And at that point, we work out what their motive should be.
So in the lower corner there is what we call the auto-satisfy curve for hunger.
And this is what we expect a typical Sim's hunger motive to look like during the day.
he gets hungrier and hungrier and hungrier until 6am and then he has his breakfast, so he's full up for a bit and then he gets hungrier and hungrier and hungrier until 6pm dinner time and then he has his dinner and then it's okay to go so he doesn't bother having lunch in this model so then what happens is, if this sim is in the background and we haven't yet, and now we want to update his motive because he's coming to the foreground we work out what the time of day is and we sort of randomly displace it by a little bit so that not everyone has the same values and that's his new motor value. So that's much more efficient than computing it all the time.
But obviously for the guys on screen, we do it in the traditional decaying kind of manner.
Okay, so that's the final technique, important technique we use for simulating a larger world.
We call it story progression.
So the problem was, we can't simulate all the sims at a very high level of granularity.
But all the sims do need to make progress in the world.
I mean, even the sims in faraway houses, they need to get married, they need to get promoted, they need to get divorced possibly.
Their lives need to go on as well, otherwise it just won't seem convincing.
So the solution that we came up with was that the low LOD sims, the ones in the background, perform the long-term significant life actions at a low frequency.
So this system was designed by Ray Maza and implemented by Peter Ingerbrigtsen.
So the central idea is that the town has various meta-level desires, demographic desires, desires to keep the various statistics about the town at the right levels.
And it uses these long-term life actions to satisfy these life desires.
So just as a sim has a hunger desire which is satisfied by eating, the town has a desire that the gender ratio is at a certain point and it can satisfy that desire by killing sims or creating new babies of certain genders.
So I'm going to show you a little movie of...
So this was an early prototype to test out this idea.
So we've got a very large number of sims.
And they are all simulating, but they're all simulating just the life actions.
So here there's some of them moving from one house to another, as they get too many objects that fit in their houses.
And the lines between them denote the different types of relationships they can have.
And what was cool about this is that it runs really extremely efficiently, no matter how fast you run it, because they're performing actions at such a low frequency.
Okay, so here's two examples of story progression.
So one of the demographics, and there were a real ton of demographics in the game, but one of them was gender balance.
We wanted a more or less even number of males and females in the town.
You can imagine the sort of degenerate things that would happen if that went wrong.
So on the x-axis is the gender balance, and so 1 means everyone's a guy, and 0 means everyone's female, and they're clearly very bad.
And then the y-axis is how happy the town is.
about that.
And then the actions on the left are the sort of long-term life actions that this story progression system can perform in order to modify the demographics.
So effectively at a low frequency, I think at midnight, it performs these actions in order to update the town demographics.
So here's another example.
Employment rate.
So the designers wanted most of the people to be employed, but absolutely not everybody.
It's just more interesting, I think, if some people are unemployed.
So the absolute optimal value is like 80% of the people are employed.
And then again, it has various life actions for modifying that demographic based on whether it's too high or too low, like getting a job or quitting a job and getting fired.
Okay, so that was the first of our big goals, which was...
simulating a larger world.
And the second half is going to be about how to make unique Sims.
Okay, but before we can really make unique Sims with individual personalities, we really need to make them look after themselves well.
I'm sure you guys know about Maslow's hierarchy of needs, which is the idea that you've got these you've got this sort of pyramid of different types of needs. So at the bottom you've got the survival desires.
higher up you've got social desires, then you've got individual desires, and at the top you've got some sort of hippie notion of at-oneness with the universe, or something like that.
But Maslow had a sort of controversial...
well, the claim that he made that was slightly controversial was that people don't even try and satisfy high-level desires unless their lower-level desires are already satisfied.
There do seem to be some counter-examples to that, like the starving artist in a garret.
who's doing his life's work even though he hasn't got enough to eat or whatever.
But I think what is more uncontroversial is there's a sort of perceptual version of Maslow's hierarchy of needs, which is that the player will not perceive any fancy kind of stuff about individual behaviour if they can't actually survive or look after themselves in a basic way.
I mean, if for example they're weeing themselves or whatever, you're not going to think, ooh, he's got his great unique personality.
What you're going to see is that he wees himself.
So it was really important that they don't read themselves, they don't die of hunger, that sort of thing.
Okay.
So there's a couple of techniques we used in order to do that.
So here is just a sequence of interactions, and how much the sim wants to do them, in this particular case.
So he's quite hungry, and he slightly wants to watch TV, kind of thing.
So that's how much he wants to do these actions.
But then we need to actually decide which action to perform, and that might seem obvious.
But it's not completely obvious, because...
On the one hand we've got the...
we've got how much they want to do it, but then we've got the probability of them doing that particular action.
How do we transform the utility into probability?
So the one obvious thing to do is think, hey, well, let's always choose the highest scoring action.
And in a lot of games, that's the right thing to do.
But in a Sims type game where you're modeling people, that gives really quite robotic results.
I mean, let's say, for example, that the Sim has got some food to eat, and then he wants to go and sit down somewhere.
If he's always choosing exactly optimally, he's going to go to the absolutely nearest chair every time.
And so you're going to see a very small subset of all the available behavior, which is a bit of a shame.
So another thing you can do is choose randomly from one of the N highest-scoring actions, which is what Sims 1 and Sims 2 did.
So, for example, you choose from one of the three highest-scoring actions, which seems sensible.
It certainly seems less robotic.
However, let's say that you absolutely desperately need to go to the toilet, and there's two toilets.
So two of your actions are...
going to the toilet, but then the next highest scoring action is much, much, much lower, and that is watching TV. Then there's a 1 in 3 chance of you watching TV, so there's a 1 in 3 chance of bladder failure, which doesn't seem completely optimal.
So the thing we did, we used this sort of simple Boltzmann distribution to convert the utility into the probability. So P is the probability, S is the score, and and T is the temperature, which is a cool, tunable constant for effectively how random to make it.
Temperature intuitively should go up and down, depending on how well the synthetist thinks he's doing, to create a simulated annealing kind of effect.
If he's doing really, really badly, if every action he does is failing, then we want to increase the temperature, so he becomes more random.
Whereas if he's doing well, we want to lower the temperature.
OK, so another important idea was, in terms of...
So we've got all these different motives, we've got tons of motives.
How do we tune the relative intensities of these motives so that if he's, for example, choosing between eating something and fulfilling one of his own internal personality things, which is more high priority?
So one of our high-level design goals was that survival should take precedence over manifesting their individual personality traits.
And so we sort of used Maslow's hierarchy of needs as a sort of a way of tuning the desire.
So each level...
in the pyramid is like ten times more important desires.
And that more or less worked.
That more or less gave us the idea that if a sim is that survival should trump manifesting their autonomous personality.
Okay.
So now we get to the heart of the thing which is the unique sims.
So we wanted to make a town that was full of distinct individuals.
As Matt Brown says, we wanted to make each sim a unique snowflake.
But we also wanted their personalities to be very...
immediately obvious to the player. We didn't want it to be the case that in order to notice what this guy was doing you had to sort of graph, you had to write down all their interactions over a period of days in a spreadsheet and do statistical analysis and think, ooh, this sim is spending like 2% more of his time cleaning than this other sim, so ooh, I think he's a bit of a clean sim. We didn't want that at all. We wanted to be really sort of in your face sort of caricature personalities. So those are our high-level goals in terms of uniqueness.
So the high-level design was based on, um...
that each personality was a bag of traits, and there was up to five traits that you can choose and we had a large pool of traits and we've added to them in subsequent expansions.
And these personality traits affect the Sims in a variety of ways. So one thing they do is affect the available actions, the different things that the Sim can do. So, Plyptomaniacs can steal, and inappropriate Sim can troll people on internet forums, which is a genius one by Tom Wang, and Pyromaniacs can set things on fire.
and over-emotional sims can cry while watching romantic telly so that's basically they get new types of actions available to them just because of their personality traits and personality traits can also affect adverbs they provide adverbial modifiers on common actions they affect the way you walk so grumpy sims will like mutter under their breath as they're going along traits can affect the way you idle so workaholics are always pulling out their cell phones So even while they're not doing anything, they're manifesting their personality traits.
They even affect the way you look.
So neurotic sims, I changed the parameters, so they're always looking around like this and looking a bit edgy.
And the flirty sims are always checking out sims.
And they affect the way you react to things.
So just try forcing a vegetarian to eat meat or a hydrophobic sim into the pool.
So one of the things that surprised Will Wright when Sims first came out was that people liked so much the punishing the sims, or torturing the sims.
but that was something that was very, very appealing for some reason.
And one of the things that's great about personality traits is it gives you a whole new dimension of ways of humiliating your sims on a sort of individual, specific basis.
Okay, so all that stuff is cool, but it's how the traits affect their decision-making which is what we're going to focus on.
Okay, so on the one hand we have all these personality traits and on the other hand we have all the different interactions.
And in order for the personality traits to feel rich, we want millions and millions of connections between these two systems.
However, as good software engineers, we want to minimize the code arrows between these code systems.
We want nice lean APIs.
This is exactly the sort of thing we don't want. This would be very naughty.
So in the middle of find best action, right?
Oh, if this sim has this specific personality trait, and the object he's trying to look at is a book, then, oh, let's increase the score.
When we start having tons of examples of that scattered through our code...
then it's not maintainable.
So that's not what we want to do.
What we want to do instead is create massively data-driven systems in which the interconnections between the gameplay elements can be added without touching the code at all.
OK, so a little example of that.
This is just some of our tuning tools, which we use for updating which.
interactions or which traits advertise to each other.
So these are the interactions available for evil people.
Okay, so for example, couch potatoes are specifically encouraged to do these interactions.
Other people will do these interactions too, but effectively the couch potatoes have got an extra reason for doing it.
And here are the family-oriented sins.
And there's tons of examples of...
Yeah, neat guys have got tons of stuff.
Okay.
Okay, so...
So, top level is that...
So, we've got all these different personality traits and each one is associated with its own motive.
So, the different sims have different wants.
And by satisfying their unique wants, they are manifesting their individual personality.
So for example, a mean-spirited sim has an extra motive effectively to undermine other people's self-worth.
And various interactions, like mock people for example, advertise to that motive so he autonomously does it.
And a couch potato has an extra motive to sort of slob around, and things like watching TV and sitting down advertise to that motive.
Okay so then what we did is we logged out all the different interactions that all the simmers do.
did so we could then look at these logs and see if it was sort of transparent just from looking at the data what the personalities were.
So for example this is what a lady called Tamara did one Sunday afternoon.
She gussied up in front of the mirror and she chatted to a friend and mooched some food, ate some cereal and then complimented this guy's appearance and made a flirty joke.
And you can sort of read off quite clearly what sort of a lady she is.
You can infer the personalities from what they do.
So this is the same lady as before, this is Pauline Warren, and she is flirty and has commitment issues.
And she's engaged to Hank, who I think also has commitment issues.
So they're young and they love each other.
And now these are all the interactions that she's currently considering, which are advertising to her specific personality traits.
This is the way that probability is gained from score, which I was talking about earlier.
So here she is going over to autonomously...
to hug her boyfriend.
I see the traitor glowing to indicate that she's sort of autonomously manifesting it.
So a lot of things she wants to do are sort of flirty things, because she is a flirty sim.
Okay, this is not a very good video.
I don't know if you noticed, but they're coming closer together.
So one of the things we wanted to do was manifest their relationship state by how close they were together.
Okay.
So in Sims 1 and Sims 2, every Sim had the same eight motives.
But in our game, each Sim has a different set of motives based on their traits.
But the set of these motives doesn't just vary between individuals.
It also varies within the same individual over time.
So we're adding and removing motives through time on an individual in order to model the Sim's understanding of various social situations.
which is the thing I'll show you next.
So...
This is the same lady again, Pauline Wan.
She's going to visit her neighbours, who I don't think she's really met before, the Frio brothers.
And there's a whole social situation modelled around visiting, encouraging people to behave appropriately.
So, for example...
The hosts are encouraged to look after their guests, not just to ignore them.
And guests are encouraged to do things that are sensible.
So first of all, she's going up to ask, Hey, I don't really know you, but is it alright if I come into your house?
So here she is coming into the house.
So she's discouraged from doing the sort of things you shouldn't really do if you're a guest in a stranger's house.
So for example, and she knows this inside her autonomy.
So for example, she shouldn't really, just bringing up this for me, she shouldn't really just go up to the computer and start browsing the web.
You see it's got a negative score there.
She knows this is inappropriate and that subtracts from the utility of the action.
So a ton of interactions here are inappropriate.
And she knows that.
If you leave her to her own devices, she's going to behave appropriately as a guest in the situation.
However, what we're going to do in a minute is the player is going to override her autonomy and make her behave in a naughty way.
So for example, he's going to make her sleep in the bed even though she doesn't know them.
So this guy, one of the Frios...
It's a little bit slow to notice this. I think he's too avidly watching, playing his video game.
Ah, but now he's got up. He's like, ooh, Pauline, you're being very naughty.
What the hell are you doing lying in our bed kind of thing?
So next she's going to do another injury, she's going to insult their home.
So the user is overriding her autonomy to make her behave really rudely.
And he's like, oh.
Again, that's made her even more inappropriate, basically.
And there's a sort of social situation where she's keeping track of the sort of...
And now finally, as the straw which breaks the camel's back of inappropriateness, she's going to try and make herself some food in their house.
And now at this point, they've really, they've just had enough.
Yeah, you're putting... It's time to go, mate.
You've been very naughty.
OK, so the way these situations work is they are hierarchical finite state machines which sometimes encourage or force Sims to do agents, and also sometimes add motives to, or remove motives, in order to encourage them to behave appropriately.
So there's these various different states with various different substrates.
So for example, the yellow states are the warning states.
So when Pauline started doing the wrong thing, like insulting the home, she went into the warning state, where the host was encouraged to warn the guest.
And then eventually, she was so rude that we went into the red state, where the host was forced to make the sim leave, and the sim was forced to leave.
Yes, the way this works under the hood is we're actually adding motives, a different motive for the host.
and a different motive for the guest to encourage them to behave appropriately.
But sims with different personalities have different interpretations of these motives.
So inappropriate and insane sims, they have the motive for behaving appropriately in the house, but they don't care about it, basically.
So you will get, in fact I got a bug near the end of the game, which was that someone had come to my house and had gone straight upstairs and fallen asleep in my bed.
But it turned out that she was an insane sim and that's what she should have done, if you like.
So we have different interpretations of these motives.
So another example of the way in which different Sims interpret the motives differently is at the picnic.
Sims in situations are encouraged to sit with people they know, to give a sense of social cohesion.
So people having a picnic, people from the same family will be sitting together.
But Sims with different traits have a different understanding of these motives.
I mean, the inappropriate guy actually actively goes out of his way to sit with people he doesn't know to freak them out, sort of thing.
Another example of that.
So here is a mother and son having a nice picnic, but here is coming Xander, who is a notorious inappropriate sim, and he's thinking, ooh, I don't know these guys, I'm going to come and stand near them and freak them out.
But fortunately here comes the father and husband.
Okay, so the high-level design idea is that we've got these individual traits, and we've got these social situations, and that somehow, modeling both of them is a complementary activities.
The more accurately we model the social situations, the more specific the social interactions are, the more we'll be able to manifest their individual personality traits.
So individuality and sociability are mutually supporting like two parts of an arch.
And here is my first pretentious quote from Arthur Schopenhauer, that the revelation of the idea of man is accomplished by two means, by accurate drawing of significant characters, and by the invention of poignant situations in which they reveal themselves.
Yeah, if we're going to have these much finer-grained personalities, we're going to need much finer-grained social interactions to support them.
So Sims 1 and Sims 2 had very broad speech acts.
like talking and joking.
But in Sims 3, we added a ton of specific contextual socials, like complimenting home or worry about relationship, which were partly designed in order to manifest these much more specific personality traits.
So these personality traits affect the different social interactions which they choose autonomously.
So the snobs like to boast about their cars, and the neurotic sims will accuse their partners of cheating on them, even if they haven't cheated on them.
And if a mean-spirited sim is talking to some nice other sim who turns out to be a vegetarian, they might mock her vegetarianism.
But as well as affecting the social interactions that they choose to perform, they also affect the way they respond to these social interactions.
And how they respond...
depends on a series of production rules.
So here is a simplified version of some of our production rules for what happens when a sim is trying to be funny.
So the default rule is just, hey, if you're trying to be funny, then it's sort of neutral.
The second rule says, hey, if you're trying to be funny, but I've heard this joke before, then it's boring.
The third one says, if I'm trying to be funny, but you and I aren't getting on very well, then it's insulting.
And the final one is, if I'm trying to be funny and the person I'm talking to has a good sense of humor, then they find it funny.
Interactive fiction was one of our inspirations for the socializing system in two specific ways.
One was its use of production rules.
I don't know if you guys have seen Inform 7.
The latest version of Inform uses production rules as the fundamental unit.
The other main sort of guiding inspiration was the idea that in some interactive fiction that the conversation can be an end in itself.
So for example, in Emily Short's Galatea, you have a...
She's talking to this statue.
And there is no ulterior motive to talking to the statue, you're just being in the conversation.
So in a lot of games, the reason why you talk to people is for an ulterior motive.
You're effectively treating people as means rather than ends.
You're manipulating them.
For example, in a large number of MMOs...
you're treating these NPCs as experience points dispensers.
And this is, of course, violating Kant's dictum, that we should always treat people as ends and never as meat.
OK, so this is showing all the different production rules for different, um, for the different social interactions, and how they choose which one's going to fire.
So for example, invite over.
I think the tab at the bottom is all the different production rules which apply to the selected social interaction at the top.
And we're sorting the different production rules by specificity to see which one's actually going to fire.
What we're showing here very quickly is that the flirt is going to succeed because of the top most specific production rule, which says, if I'm flirting with somebody.
and that other guy is also flirty, then it's going to succeed.
So now she's actually going to try flirting with him.
And yes, sure enough, it succeeds.
But what's nice is that at the very same time, Pauline learned that he was flirty.
So this is sort of learning of traits at the very moment in which they manifest in behavior.
Okay, so these production rules are ranked by specificity, and the most specific rule fires.
Often, the personality traits of either the actor or the target determine which rule fires.
And when a rule fires, the other sim will learn the trait, and the trait learning is thus contextual.
Okay, so Chris Hecker sort of posed this sort of complaint about AI in games.
So I've tried to undermine his professionalism here, as you can see, by drawing a little beard about him.
But his view, which is actually quite interesting, is that the field of computer graphics is significantly more advanced than AI in games, and he gave an interesting explanation of this, which is that graphics have a clean decomposition of form and function in terms of texture and polygon, and then artists are free to add any texture they like without any fear of anything going wrong.
Graphic engineers deal with polygons, and they're in sort of two happy separate worlds.
and there's no analogue in AI of the texture polygon decomposition.
So that's his argument, and it's an interesting one.
So the underlying explanation for why computer graphics are successful is that artists can manipulate these textures freely without worrying about side effects, without being able to break the game in any way.
I mean, you can cut a part of a texture out and it's still a valid texture.
You can merge two textures together and it's still a valid texture.
This is because the texture is homeomorous.
A part of a texture is itself a texture.
So here is a pretentious word for the day, homeomorous, from the Greek homo miros, meaning that a part is the same.
So for example, butter is homeomorous.
So if you take a little bit of butter, it is also butter.
But a human is not homeomorous, because if you take a person's finger, the finger is not himself a person.
Okay.
So what we ideally want, in order to answer Chris Hecker's challenge, is a homeomorous unit for game AI.
And it certainly isn't the script or the function in C++.
Because if you take a couple lines of a script, or you just cut out a little bit of a function, it's not even going to compile, let alone do anything good, because of all the implicit dependencies with the variables and what have you.
But a plausible candidate for a homeomorous unit for game AI is the production rule, which is why I find it exciting.
Because you can cut conditions out of a production rule, and it's still a valid production rule.
And you can blend two production rules together.
and it's still a production rule.
So the production rule is, does have this property of being homoamorous.
So does the social system answer the Photoshop challenge?
Well, we were able, producers did add lots and lots of social interactions without needing to touch the code in any way.
So the whole thing was completely data-driven.
And they also added thousands of production rules.
so they could make really really fine-grained little bits of behavior without worrying about crushing the game.
So, you know, so like, or if I'm trying to mock someone's vegetarianism and that they really really really like me, then they're still going to find it really really annoying sort of thing.
So very very specific rules they could just add without worrying about anything.
So they went in this nice safe data-driven environment, but yet they could still define conditional behavior.
Okay, so some of the emergent narrative comes from the individuals manifesting their personality traits.
But another aspect of emergent narrative is what happens when you get two Sims with some sort of trait conflict between them.
So for example, if you put a computer whiz and a technophobe in the same house, the technophobe has various extra actions available to him.
sabotaging the computer and stuff.
And then when he's done that, he's got new social interactions available to him like I think he can gloat about the broken computer or something like that.
So you get these sort of micro-stories emerging.
And similarly, if you put a Neatsim and a Slob in the same house, then sure, the Slob is not going to do any of the cleaning and the Neatsim is.
And the Neatsim has got other specific interactions available like complaining about the mess and what have you.
And these personality traits also create the ability to have, to do the same series of interactions, but have very, very different results, depending on the personality of the guys you're interacting with, which adds to replayability.
So you go up to someone in the park and ask him about their career.
In one case, you learn he's a policeman.
And now your mean-spirited sim has the option of complaining about the police.
But now let's do it again, we ask someone about their career and you learn he's unemployed and then the conversation turns awkward because the very act of revealing unemployment is awkward.
And in the third case you learn he's unemployed but he's hot-headed, he doesn't like to be reminded he doesn't have a job and gets angry.
So this is all the different ways that the same actions can pan out depending on the personality traits and situations of the people involved.
Okay, so to summarize, Sunset Valley is a town that's full of these individuals, and the more you play, the more you get to know their quirks.
And as you get to know them, they will learn about your sim's personality traits as well.
And some take-home actionable items is to data-drive as much as you humanly can, and take the time to make some good in-game visualization tools, and also to prove out all your simulation ideas as much as possible using early prototypes.
So my last movie is...
So this is our nice 2D prototype, which I love, which is done by the Sims 3 designers.
And we tested out a lot of the behaviour in this early prototype.
So here, for example, is the same sort of visiting situation with the same sort of contextual interactions like complementing home, working in this sort of simple 2D world.
And this helped us to test things out much quicker and was really, really great.
So here again, it's the same sort of thing, but in our little 2D world.
So a big thanks to the Sims 3 team for making this game, and allowing me to talk about it with you guys today. Thanks a lot.
Hi, very impressive.
You're talking about data driving everything.
Data driving everything.
Could you tell us a little bit about the process, the development process, how you make sure that people who create motives, actions, rules, work together?
For example, adding a motive.
Unfortunately, it wasn't completely data-driven.
There were sort of enumerations in the code that had to be added as well.
The social system was more data-driven.
You could add completely new social interactions and these production rules.
We can't data-drive absolutely everything and we could have data-driven more.
I mean, it would be great to data-drive absolutely everything about motives and we didn't get as far as that.
That would have been very cool.
My question was more about coherence between many people working together on the same problem.
How do you achieve coherence?
It's a good question.
Do you mean like tuning coherence, for example?
What sort of coherence do you mean?
There are many ways to represent the same kind of motif or need or whatever.
How do you make sure that there are no behaviors that stick out?
Oh, you mean like duplicates and stuff?
Or incoherence.
We have some really nice tools for browsing all the data as well.
So we could see all the different interactions which satisfy this motive or the.
different things that this interaction does.
And so using these inspection tools, we could quickly find if there was anomalous data.
So basically, if you build nice visualization data tools, you sort of let people do what they like, but then you can go back through.
And we did find a lot of little data bugs near the end.
I'm sure there was still some more, but yeah.
Basically, we use big browser tools to try and find anomalous data.
Okay, thanks.
Thank you.
Hey.
Hi.
How did you handle fringe cases and how did you deal with, possibilities of feedback loops that, since everything's so data-driven, and you're kind of hands-off on certain levels of interaction, how did you prevent your sims from spiraling out of control, like two flirty sims talking to each other and not really caring about doing anything but flirting, because both of those interactions are going to be really high on the list?
That's a good question.
So, in that example, basically, once their motives are satisfied, they no longer want to do it for a certain period of time.
So if you have...
So basically motive satisfaction is the general answer.
So if one sim is flirty, then he wants to manifest his flirtiness by flirting.
But once he's done that flirting, he's satisfied his flirty motive for a period of time.
The other sim...
So then there's a period of time after which he will do other things to stop exactly that sort of repetitive behavior, which would be unfortunate.
Yeah, if you like.
It's in the general system of motive satisfaction.
Okay.
So you showed a couple of production rules and you said you had the ability for designers to add new production rules.
How did you handle, even in the example you showed, I think there was one production rule for, if you're flirty, then just get a neutral reaction.
And of course that production rule could always match whenever somebody's flirty.
So how did you select if multiple production rules matched which one to actually run?
So we started off, I started off naively thinking that I could do it programmatically looking at the number of antecedents on the left-hand side.
And then the more antecedents they were, the more specific it was.
I could compute the specificity of this rule, and I, the megalomaniac programmer, could decide which rule was more important than another rule.
But it turned out that system really wasn't working very well, and then a very cool designer lady came along and just added.
She hand-tuned all these production rules to give them nice numbers, and then the system worked significantly better.
Hey Richard, great talk, thank you.
You said that when the system says sometimes that when the interaction happens, so-and-so learns that so-and-so is flirty.
Yeah.
So does that affect, do they have a notion of other sims' internal, like other sims' personalities, or how is that?
Yeah, yeah they do. They know, I mean it's quite simple, but they basically, they either know or do not know about the different personality traits of the sim, which is just five bits of data if you like, and also about their career and...
whether they're married and whether they're rich, I think.
So there was a small amount of bits of data so that sims would learn stuff about other sims.
It felt like a nice way of collecting information about the game.
Also, the other thing about it was, it was interesting from a design perspective, that it meant that even when something failed, you were gaining something.
Because let's say, for example, you tell a joke to this guy, right, and then he's sort of like, ah, like that, and you feel frustrated that your interaction failed.
But then, bling, you learn that he has no sense of humour, so it turns failure into an achievement.
So I think it was a useful thing.
And that affected the autonomy of the characters too?
Like, if I know that you like to use lots of pretentious words, for example, does that affect my autonomy?
Like, when I choose an interaction with you?
It would be great if it did, but no, it doesn't.
That would be cool.
I also really enjoyed the talk.
Thanks, Ian.
I was really interested in the interplay between what you talked about at the beginning, the sort of coarse graining where you step back and just simulate the whole town in terms of low frequency events, and then the latter half where you're simulating in detail.
It seems like some traits you could do that with fairly reliably, like hunger, people are going to go up and down, but then the more fine-grained, individualized traits, you maybe couldn't do that.
Like, for example, a flirty sim might be more likely to be in a relationship than a non-flirty sim.
So where did you decide which things you could simulate for the whole town, and which things you just had to instantiate individually?
Ah, well that shows I wasn't explaining very well.
So it wasn't on a per-trait basis that they were doing low-LOD or high-LOD.
It was that if the guys in the background were hardly doing any competition on them at all, apart from them deciding where to go to next.
It's not like they do a subset of their low-level actions.
I mean, they hardly do anything apart from go from place to place.
if they're in the background area.
And you're suggesting an alternative architecture where like sort of different parts of their mentality are loading in and out.
I was just wondering, so how do you decide, for example, if a given sim is in a relationship when you instantiate them?
Like, you know, so you track all the relationships of all the sims at all times?
Yes, we do.
And that does create an N-squared potential problem.
And then we decay them.
If these two guys, like, they know each other but they don't really have any strong things, then after a while we forget about the information.
But there is a, there was a significant memory overhead of doing that N-squared tracking of relationships.
Thank you.
I love the game. I want to make that clear before I say something critical here.
My pet peeve with the Sims is that they don't seem to have a concept of temporal reasoning or the consequences of their actions.
What's, for instance, the most common thing I see is that, like, they'll be extremely tired and very hungry.
And instead of getting a quick snack before going to bed, they'll go to bed, sleep for a couple hours, wake up in the middle of the night, you know, and go through all that.
Do you think that kind of temporal reasoning is something that can be expressed in terms of production rules?
Or is that a separate system that you would want to tack on?
It's certainly true. You're absolutely right. It would be great to add that sort of thing.
You could do it using some sort of HTM type planning or some sort of long term planning.
or potentially production rules, it certainly would be great, it would make them much more plausible.
Yeah, and production rules is one way of doing it.
So yeah, absolutely.
So you think it is expressible in terms of what you have?
Oh, sorry, no, it's not expressible in terms of that.
So that was production rule system, right?
For a subset of the game, just for doing social interactions and the responses of social interactions.
It's not like we had a general production rule system for all of behavior.
It wouldn't, we needed to do something better.
We did have more long-term planning in an early prototype, but it didn't make it into the final game.
But you're absolutely right.
That would be a great and important feature to add.
Thank you.
So really excellent and thought-provoking talk.
That was really neat.
So I had a question.
I think you touched on, but I'd love to find out more about production rules for traits.
And I'm thinking specifically of, for example, well, in the game Tropico, for example, if you had to assassinate somebody because they were they were threatening your rule, their children would be much more troublesome than they would ordinarily be, because you had killed their parent.
And then when you were talking about traits and production rules, I was thinking about how, say, an abusive parent might produce a child that starts out neurotic and then grows into an abusive adult, or if a flirty sim just perchance ended up flirting with a bunch of mean-spirited sims who mocked her, then eventually...
maybe she becomes less flirty because, you know, and so I guess the question was did you have specific production rules that created traits or would you rely on the simulation over time to change people's traits?
Very good question. So, no, just to repeat, the production rules were only used in this very specific sub-part of the game to do with how they responded to socials.
It wasn't a general mechanism for doing the whole of the gameplay, although that is also an interesting idea.
In terms of your question specifically about traits and how they change...
we didn't really change them very much in code at all because I think the high level design idea was that these players has carefully crafted his character to have this personality.
Maybe he's trying to model his irritating ex-girlfriend or that really annoying math teacher or someone. And you know, he's done the work of creating that. It might be frustrating to him if through some clever simulation which he doesn't fully understand, it changed his personality underneath him. So we basically were a little bit scared of doing that sort of thing at all.
We do completely acknowledge that.
It's often the sort of turning point, the most dramatic point in some great piece of literature or something is that moment in which the guy gets self-realization and changes his personality.
But we just shied away from doing it at all.
And certainly if we had done it, we would have done it in code and not in production rules.
Thanks.
Keep this on.
Hello.
Thanks again.
I have a very specific question of just a small detail of the production rules.
Essentially, you have this interaction between two people based on the production rules, and then based on their behavior, the sims understand something about the other person's traits.
There's this discovery process going on.
I was wondering, is the discovery process explicitly encoded in the production rules, or is it somehow inferred by the engine?
It's inferred from the antecedents.
If one of the antecedents of the production rule is that the target has that particular trait, then it automatically learns it.
So we didn't need to add extra data.
The data is sort of implicitly there in the production rule itself, so we can pull it out.
Okay, thank you.
Thank you.
Can I ask you Japanese?
Sorry, I don't know how good this is going to be.
Sorry, sorry.
I did it wrong.
Yes, thank you.
That's a very good question.
So the question is, how do we debug with such a large number of agents and such a large number of interactions?
So the only thing to do is to have good in-game visualization tools.
So we built a number of .NET little things that can run inside the game, where you can see all the different.
individual sims their complete state at any time and all the interactions that they're thinking of doing and how much they want to do them and what the probabilities of them doing it.
But the other thing we added was like a counterfactual engine where, because it takes a long time to get it into the state you want it to get into in order to test your particular situation, so we added the ability to change the state of the guy just with a few sliders within this same tool so we could say, oh, what would happen if this guy really was really, really hungry?
and he was in a really bad mood about this, and he was really annoyed about this guy, what would happen then?
So basically, we created a way of doing counterfactuals very quickly in our tool so as to test autonomy.
I understand. Thank you very much.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Wonderful talk.
Thank you.
Thank you.
Thank you.
Thank you.
If I'm understanding you properly, you had designers authoring the production rules?
Sorry, this is another production rule question.
Yes.
And I was just curious, you know, on a good day, the great thing about production rules is you can kind of add more and they don't have bad interactions with one another and so on.
Yeah.
And on a bad day, it's like any other kind of, you know, code and you can get interactions between rules.
Yes.
To what extent did you have issues?
with different designers adding rules into the system and having the rules step on one another?
That's a good question.
Well, there were two main guys, one producer and one designer, who were adding rules apart from me.
So it wasn't like a huge bunch of people doing it.
We did try and look at each other's stuff.
The main problem we had was just adding too many rules too quickly.
And so she went a bit crazy.
I think there were 1,500 rules or something.
And so for a bit it was a bit inefficient, because I wasn't anticipating adding this many fine, which is very cool, but these many fine-grained rules, but there was more rules than we expected.
But also we had a sort of simple, it was a simple model of production rules.
It didn't have, you know like in typical Horn clauses, you can have extra, extensionally quantified variables on the left-hand side.
It didn't have that sort of functionality, so it was a less expressive system, unlike a classic Horn clause, which made it less easy to have some of the more hard problems.
Was it actually a quantified system, or was it purely propositional?
Well, it had three variables in it, but it didn't have any extra.
You couldn't introduce a new variable that wasn't already part of the variables, if you know what I mean.
Okay. Okay. Cool. Thanks.
Thanks.
Hey, man.
Hey, Richard. Back in October, when I mentioned that I created a sim to model myself, you put me on the spot and said, what five traits did you choose for yourself?
So I think a lot of people would hear, I know that you had to create a sim in your own image.
It's just got to be natural. So what five traits did you choose for yourself?
I don't know. I honestly never tried to do that.
Oh!
Who have you tried to convince? If you were to do it now...
Thank you. Okay, thanks very much guys. Thank you.
