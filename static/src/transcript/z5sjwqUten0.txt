Has anyone here actually heard of Space Station 13?
Heck yeah.
Okay.
So, I'm a maintainer for Spacestation 13, more specifically the TG Station flavor of Spacestation 13.
We boast thousands of stars, forks, contributors, we get tens of thousands of commits, making us one of the largest open source games on GitHub.
We get tens of community contributions per day in the form of pull requests.
meaning people bringing in their own features, bug fixes, whatever else they have in mind.
Our code is 100% AGPL licensed open source, but the influence of Spacestation 13 expands far past just this one repository.
In order to explain that, I'll need to go into the history of Space Station 13.
I'll talk about how our open source model works, how we accept contributions, and how we interact with our player base.
I'll talk about the benefits we get from doing our way of open source, as well as some of the bads, but also how we live with them.
And I hope by the end of this talk, we will have a good understanding about how open source games work at a large enough scale, and maybe give you some thoughts on open sourcing pieces of your own games.
So how did we get here?
Spacestation 13 originally was not even a game.
It was a tech demo built on an engine that, at the time, was made up of primarily anime fighting games.
Eventually, they start building a game around that and just adding whatever comes to their mind.
Peak concurrent users at this time was about 10.
The source code is shared between some forum users until eventually it gets published under CC by SA.
Basically, the code is free to use, but you have to upload your own changes to it.
Ever since then, several communities decided to take Spacestation 13's code into their own hands and build their own versions of it.
There's hundreds of unique forks out there.
These are just the ones that I could fit on one slide, and they don't even include every active server there is now.
The longer these forks stay in development, the more radically they differ from one another.
They're all driven by vastly different communities with vastly different ideas about what makes a game fun.
So if you ask, what is Spacestation 13?
It depends who you ask.
If you ask a TG Station player, they might tell you it's a steadily paced sandbox game with a focus on high action and unique complex mechanics.
However, if you ask a Goon Station player, the very original version, they might tell you it's an arcade-style game with a heavy focus on individual player knowledge and stories.
If you ask a Baystation player from a community of Dwarf Fortress fans, they might tell you it's a slow-paced game with a heavy emphasis on roleplay between players.
And if you ask a TGMC player, they'll tell you it's a PvP team deathmatch game because they took the code of Space Station 13 and flipped it completely on its head.
They're basically just using it as a game engine at this point.
And these aren't niche communities either.
Spacestation 13's popularity comes not from any one version, but in the hundreds of forks with huge communities, building games that might only barely resemble one another.
And while our game engine beyond might not be open source, there's countless projects that intend to move us to a freer platform.
Projects like Open Dream work to recreate the current game engine into an open source alternative, allowing us to port our existing code.
While projects like Space Station 14 and Unity Station are taking traction as full-fledged remakes in other game engines.
Space Station 14 is championing its own open source game engine.
But while we're on beyond, we make huge use of open source tooling to replace the engine-specific proprietary software.
We have a few open source map editors, such as strong DMM, which are all vastly superior to the built-in map editor.
We have aux tools, which reverse engineers the game engine itself in order to let us do things that would otherwise not be possible.
And we have support for external editors, whereas the game engine would normally have us use a basic text editor with colors.
But just being open source can mean a lot of things.
Maybe parts of your game are open source, and others are closed source.
Or maybe your code is open source, but only a subset of paid workers can actually contribute.
There's a lot of different ways to do open source, and so it's important to know the way that we do it.
On TG Station, we let anyone make pull requests, and we have fairly loose guidelines on what can actually be added.
In practice, this means we frequently get both fun niche stuff, like high fives or blowing kisses, but we also get large content expansions, such as new maps, planets, or game modes.
Due to our fairly lax restrictions and our extremely high output of contributions, Space Station 13 boasts a huge amount of content.
What you're looking at is our wiki.
All of those are separate, full-fledged guides to every nook and cranny of the game.
And when I say extremely high output, I mean at a rate that traditional game development has trouble competing with.
We get hundreds of commits merged per week.
We do squash commits, so in practice, that's hundreds of pull requests per week.
Remember, a pull request is a community contribution like a bug fix or a new feature.
And we get this from over 100 unique contributors per month.
While contributors might come and go, we're always getting fresh ones ready to work on the next big thing.
Our team is still fairly small.
We have a little over 70 members in our organization.
Around 25 are considered maintainers and are tasked with reviewing the code and the design for pull requests, as well as having the final decision on if they're merged.
We have about 40 issue managers who are tasked with helping triage and label our nearly 2,000 issues as much as they'd like to see that number go down.
Despite hundreds of pull requests per week, we managed to make a decision on most within seven days, and we're always talking to contributors about what types of changes we'd like to see on both GitHub and Discord.
We regularly help new and old contributors learn the proprietary language, our own code base, as well as walking them through our general game design process.
So sort of by necessity, in order to keep the game alive, our open source model turns players into designers.
If someone has an idea on how to make the game better, they can easily hop onto our support channels and learn how to get their idea into the game.
Players are very active throughout the entire design process, from ideation to production, both in terms of those that originally came up with the idea and those who want to help flesh it out with their own perspectives.
In fact, even before the pull request is merged.
Our open source model provides content to players at an unmatchable rate.
A day in which several bug fixes and quality of life improvements are not added to the game is an abnormality.
And a month without some large part of the game being changed or added is almost unheard of.
To the point where when we do instate things like feature freezes, there's always a tiny bit of uproar.
The bits about community involvement are really important and very unique to open source game development.
So I want to go deeper into that.
So in larger traditional game development, you have dedicated members in fields like design, programming, art, and so on.
Of course, the more indie you are, the more of these roles are going to be filled by the same people.
But my point here is that the developers are separate from the players.
Developers play their games, of course.
But pure players and developers can have vastly different ways to view the resulting game.
So for example, if we have a class shooter, maybe as a designer, my focus is on things like team compositions, win rates, pick rates.
But as a player, my focus might instead be more on what I actually choose to do.
My class, what I would have fun with and what I find frustrating to play against.
In Spacestation 13, our development is nearly entirely from this category.
And I'm not saying one style of thinking is better or makes better games, but I'm saying it creates a substantially different design that I think is pretty interesting.
As said before, basically all of our pull requests come from players.
While across maintainers we do have a broader vision for where we want to see the game go, we don't write much code ourselves compared to players, much less features.
And we can't force anyone to work on anything that they don't want to do.
Players know this, and they know that if there's anything they want to see to the game, usually the only thing stopping them is themselves.
So let's think back to the class shooter example.
In Spacestation 13, players are split up into departments, which are split up into jobs, similar-ish to classes.
As maintainers, we do have a rough idea of how we want departments to interact on the macro scale, but nobody knows how the micro interactions play out better than the players themselves.
So as maintainers, we know that we want engineers to build things.
But some players know that they want to build couches.
So they send that as a pull request.
There's nothing harmful about it, so it goes in.
It might not have been something we thought of or would have made the art for, but it's definitely not something we're going to deny.
As maintainers, we know that we want people who are security officers to be responsible for handling crew that commit crimes.
Some players think, why not let people choose to be a prisoner if they want to give security something else to do?
It aligns with the way that we see the game, and so it gets in.
This style of thinking, of just adding what you think would be fun within reason, is something that you'll only see from player-driven development.
And open source can make it super easy and inviting.
People who enjoy a department, who play it for hundreds of hours, are invited to add content that they think other people in their department will enjoy.
Maintainers still have the final call, of course.
We're not going to let security players give themselves machine guns anytime soon.
But players are able to provide ideas from a super unique point of view.
This helps the game, either at large or job-specific or map-specific or whatever else, feel super vast.
There's always something to do, made by people who have fun doing what you do, and new or experienced players are always giving you more to have fun with.
And even if you're a game developer who does listen to even the nichest of player suggestions, your time is still limited. You can only add so much.
In open-source, player-driven game development, time often isn't being diverted at all.
A player who enjoys character customization, adding the ability to customize glasses, is someone who might not have contributed anything at all otherwise.
The presence of these contributors is way more often than not a net positive for us.
So in order to show our processes at work, let's walk through one good example.
Let's look at circuits.
Circuits look like this.
They're like Unreal blueprints, or like WireMod and Garry's Mod.
They're little contraptions to automate some work.
But most importantly, they're a feature built upon by several separate contributors.
For context, they used to look like this.
And I kind of still don't know how you were actually meant to use them.
That version of Circuits got merged in late 2017.
It was a collaboration between five separate contributors, that being for design, sprites, code support, or any mix of those.
But it has some problems.
One is that it's really easy to make circuits that just kill people, and really fast.
Death in Space Station 13 can be impossible to come back from, and you might be out of the game for upwards of a few hours.
Circuits can be saved and then sent to others, meaning basically everyone who wanted to could have one of these really powerful weapons every round.
And to top it all off, these weapon circuits could then just be hidden away in your hand, nearly impossible for other people to see, until you used it and they died.
And also, you saw how they look.
Only a handful of people could actually make anything with these because of how clunky they were.
So over the next year, countless contributions are made for circuits.
Some add new features, some fix bugs, and others try to rebalance them so that people weren't just using them to kill everyone.
But eventually, as these problems seemingly got worse, not better, the decision was made to scrap the feature entirely, though with the hope of going back to it later, with a little bit more thought.
So what went wrong?
Well, one of the downsides of our open source model is that with lots of contributions coming in, it's very hard for us to thoroughly investigate the design of every feature that gets made.
Features getting made and not working out, and then necessitating full removal is not uncommon.
We have lots of contributors, but we have very few chances to onboard them.
While larger features like circuits do get more attention from maintainers, more often than not, stuff is just dropped on us.
And we now have to figure out how to deal with it.
Sometimes we'll ask for a design doc, but most of the time we're just figuring out amongst ourselves if it seems like a good idea.
Because of this, we struggle to keep a consistent model in our head about how everything interacts with each other, especially once this new proposed feature is added.
We don't have a clear roadmap or anything due to our contributions being from motivated players and not people paid to push the design of the game.
And even when we do notice problems, huge pull requests like circuits often don't get denied.
People pour a lot of work and not uncommonly money into these.
And on a human level, it just kind of feels bad to be the one person responsible for letting all of that go to waste.
We've done our best to resolve these problems over the years.
Maintainers are very easy to contact if you're working on a feature.
And we are starting to amass a large amount of design documents, though presently they're only really for very large features, and they're not required.
This lets us discuss and iron out our thoughts more into a better feature, but my goal is not to scare you off from open source game development, because we did go back to circuits.
Here are these.
So circuits, we're going to get it right this time.
In early 2021, I wrote this crude design document on the second iteration of circuits.
It's rough. Our design doc process is as informal as it gets, but I wrote it.
It's based very much around the failings of the first iteration and clearly documents what won't be added.
But here's where open source gets interesting, because I made the document, but I didn't make the code.
Someone else saw the design doc posted and decided to write the 7000 lines of code it took to get it into the game.
This itself is not uncommon either.
Not all players can or will code, but ideas getting passed around to other interested people happens all the time.
Remember, one of the best parts about our open source model is that players are working on the features while designers are the ones to approve them.
So from there, just like most features we make, pull requests come in from tens of different contributors, all adding new stuff, fixing bugs, and changing what's already there.
We've gotten nearly 100 pull requests for just this version of Circuit specifically.
And now that we have a design document, even a rough one, maintainers know what features should and shouldn't be added, helping us to protect them from removal again.
All in all, this feature is what it is today, thanks to the work of maybe about 100 motivated contributors.
So as you've seen, open source and open contribution development helps us to amass a large amount of contributions.
But at a large enough scale, it comes at the cost of it being fairly difficult to maintain a consistent path for the game.
But it also carries the additional cost of the work required to maintain those features, such as code or balancing.
Along with requesting design documents for larger features, we also have other ways to keep quality control.
One problem we get is that a lot of people are excited to make features for the game, but not so keen on maintaining them.
Features having bugs being pushed to production isn't a new problem.
They need to get in eventually, after all.
But it's a worse problem the longer these bugs stick around, especially since we're 100% volunteer work, and not uncommonly, the only person who understands the code is the one who wrote it.
In worst case scenarios, this leads to features just getting outright removed.
That's what you see in the screenshot right now.
Both of those had some fairly big problems to them that just nobody was fixing.
So our solution to this is PR balances.
And here's how it works.
The core of it is that every contributor has a score.
The score goes up for contributors that help maintain the code base, and you spend your points on PRs that will require more maintenance, such as adding new features.
So let's say that I'm a new contributor, and I made this brand new feature.
Right now, I start at 0 points.
When my feature gets merged, I spend 10, and now I'm at negative 10 points.
From there, if I make another feature, maintainers will be notified of that.
It doesn't close the PR, and it doesn't mean that it will get closed, but it acts as a warning to us.
Or if I instead submit a coder factor, then I'll gain back that 10 points when it gets merged.
Now I can make features again without the warning.
The system works quite well.
We've reward positive changes like bug fixes, quality of life improvements, improved accessibility, et cetera, while still being able to gain consistent features from those who we can trust to maintain them.
In fact, if you're interested, I turned it into a GitHub Action.
It's a bit strange to set up, but you can look at our repository to see how it works or file an issue requesting documentation.
So one of the obvious downsides of open source is your source is open.
The fact that anyone can read the code and know every single bit of information there is limits our design a fair bit.
Things like damage numbers, spawn chances, all of that are easily searchable.
We recognize this in features we make, such as this one, which lets you examine an item to see how much damage it does, rather than just try it and see.
Because pull requests represent individual changes, it's also not terribly difficult to keep up with them as a player who wants to be able to gain an advantage.
Some players will try to form strategies around changes before they're even merged.
And of course, we can't really do truly mysterious designs such as, say, Destiny 2 raids being intentionally fairly esoteric at times with its puzzles.
You might be thinking we can just put the secret stuff somewhere else. In fact, Goon Station does exactly that, and we have the basis for a system like that.
But because the rest of the code is open to contribution, it's possible to cause bugs in the secret stuff that, at best, only a small handful of people even have the ability to fix, and at worst, won't show up in unit testing, since that only has the public source code.
But I'm not even really talking about the obvious stuff like this when I refer to mysterious design.
I'm also referring to the fact that if we send you a message saying you don't feel well, a good chunk of players will in that moment literally just search that text in the source code and find out exactly what's wrong with them.
But just because we have this limitation doesn't mean good doesn't come out of it.
So because players have access to every little detail about the game, our wiki is really in-depth.
Pages have all the stats you'd want to know if you're digging deep into the game.
What you're looking at is our page for chemical reactions.
All of what you see should be automatically generated from the recipe code itself.
There's one downside that I think is intrinsic to open contribution that you won't find in traditional game development, at least not truly independent ones.
And I like to call it the every change has a username problem.
It's about how people react to controversial changes in our open contribution environment.
So for the sake of example, let's pretend that Spacestation 13 isn't run in broad daylight, but instead is a product of a game studio, a closed source product.
We're calling the studio Toolbox Games.
And the developers at Toolbox Games have a change they want to make.
They want to remove nanites.
They know that this is going to be really controversial.
A lot of people really like nanites.
And apart from them, removing a big piece of content from any game doesn't often draw applause.
But they've gone through the rigmarole of ensuring that there isn't any other choice.
This controversial change has to, unfortunately, get made.
Eventually this change gets announced, and people aren't happy.
I mean, we expected that.
But the important bit here is that while they're angry, their complaints are directed at toolbox games, or maybe even just Space Station 13.
The actual people, the humans behind the change, don't have the hostilities directed at them personally.
They're directed at the game at large.
And sure, developers read forums and reddits and all types of social media religiously, and it sucks seeing a lot of people really upset about the work that you know is going to be good for the long term, even if everyone's mad about it now.
But this changes in the context of open pull requests.
Because in open pull requests, they show who made it.
They show the individual who felt motivated enough to make that controversial change.
meaning the abuse is a lot more directed.
And mind you, there can still be a lot of people behind the change, but eventually someone has to open the pull request.
And idly reading players aren't going to know the full context behind a change or even be expected to read the motivations behind them.
What you're seeing on the screen is all chat logs directly from the game.
And even though this change was made like a year ago, I still get a ton of directed harassment over this.
I like the one on the bottom left.
That guy came up to me in the middle of the game, like role playing, and asked me why I removed nanites.
I don't think he's malicious at all.
I just thought it was funny.
But this can be a huge problem depending on your community.
It's especially a problem for us in specific, where we make a big deal about separating the concerns of the game servers from the concerns of the code base.
So people like this don't often end up getting banned in game, and we don't control the game subreddit or anything like that.
But we do take this problem really seriously, and we do take some steps to mitigate it.
Our lead maintainers, along with their usual duties of trying to manage a project at large, also take the role of public relations.
They're often on the forefront, advertising and defending controversial changes, which means that a lot of the blame shifts to them rather than the contributors.
This helps shield both ordinary contributors and maintainers whose names are often forgotten in the hostile discourse.
We make huge use of GitHub moderation to block people who are just being toxic or otherwise provocative on pull requests.
GitHub seems to take ban evasion pretty seriously, and we haven't had a problem of people doing it to try to disrupt the codebase.
This only affects GitHub, though. As I said before, our moderation of the codebase is separate from the game, but we also don't control any third-party social media.
And I also thought I'd throw this one in here, that being a maintainer can kind of suck sometimes.
If you're a part of any open source project, make sure your maintainers get the appreciation they deserve for the usually stressful and thankless work that they put in.
So while open source game development has its flaws, it still creates massively interesting design by virtue of the fact that players play such an important role in its future.
Open source game development also is the best way to support derivatives or mods.
I only briefly touched on them, but all the different forks, just the fact that they exist, help constantly push the bounds on what we think Spacestation 13 can be.
And Space Station 13 is also only what it is today, thanks to open source game development.
And I would be super excited to see this space develop outside of our little corner.
That's that.
There's a microphone there if there's any questions.
Hey, so I'd like to hear more about pretty much everything about assets.
So you mentioned they're all Creative Commons licensed as well.
Attracting non-code contributors is kind of the worst part of every open source project.
So about that, about what you're using for a library, because all the open source asset libraries suck.
Like everything about assets would be great.
A whole new talk.
So is your question in regards to how we get Spriters and such to contribute or just non-code in general?
All of it, sure. Whatever you guys talk about.
So, for sound effects specifically, this is kind of the only part where we actually do use third-party assets.
We often use public domain free sounds, or we use things that are available with attribution, or sprites.
really hard. We can't use anything we see online. We have this, you know, 32 by 32 icons. We have this specific art style we're trying to maintain. The best I can say for that is we got really lucky by having a ton of really talented people contributing art. The only method that I would say is slightly interesting to open source specifically is that sometimes when writing a feature, if you can't make sprites, will kind of let you in if they're good enough.
And then eventually someone sees that and it ticks them off enough to replace it with a good sprite.
And also sometimes we have, like, bounties on making sprites that replace old ones.
What are you using for an asset library?
What do you mean by that?
Where are you storing all that?
Oh, this is kind of a game engine specific thing for us.
It's just like a clumped icons folder.
Like we don't get access to like, you know, like texture unpacker or like third party tools.
It's kind of just all built into our engine kind of okay-ly.
It sends the, like a resource file with all the sprites when you actually connect.
I don't know if that answers your question.
No, that's cool. Yeah. We have an open source SIG meetup on Thursday, so hope to see you there.
Cool.
Hi, I had a question about secrets, as in, like, say, maintaining the database, the logs, running servers, and stuff like that.
One of my concerns with open source is that, I mean, everybody can see everything about, say, my prod database keys and all of this kind of security issues that I find concerning.
How does the game handle that?
Are you asking about in terms of, like, stopping cheaters?
Or you're asking in terms of, like, storing passwords and stuff?
basically who is running these servers, who is maintaining and paying for them, and when basically if people are debbing them, using on local environments, there's all sorts of just they would have to see the nooks and crannies of this in a way that yes, it could lead to hacking, it could lead to all sorts of problems with just all the shared servers, and who's maintaining this, how exactly does that ecosystem work if it's all open contributors?
So in terms of the code base itself, we have configuration files that are not...
We have configuration files that are on the repository as templates, but with different information on the actual servers, so passwords and stuff aren't stored.
In terms of who's running the servers, right now it's one guy who is just really really good at sysadmining and stuff and has been pretty good about like stopping DDoS attacks, that kind of thing.
As for cheating, I'm assuming that is in regards to how it's a lot easier to find out exploits and things by reading source code.
Our answer for that is when we do see a new exploit, it happened this week actually, of there was a server crashing bug that was actually related to our code itself.
Because we have so many eyes on this code base at any given point, the problem was identified in like 15 seconds and a pull request was made in like a minute.
Of course, that doesn't extend to everything, and of course some cheats are kind of just like problematic with the game engine itself, or like, if you're a game that has a lot stronger control of the client than we do, then client-side cheats are kind of more or less unsolvable without like, you know, Vanguard and that type of overlapping stuff.
Finding exploits definitely happens, but we're pretty good about fixing them. Does that help answer the question?
