Hello everyone. So I'm Zach. This is Drew. You can introduce yourself.
Yeah, my name is Drew Messenger Michaels. I have a podcast called Everybody's Talking at Once.
Zach has been on a couple of times and he didn't want to just do a talk so I'm here pretty much just as someone Zach enjoys talking to about his games.
So he's gonna introduce, I'm gonna back off the mic a little there, he's gonna introduce the games that he's made over the last 10 years or so and then I'm gonna ask him a bunch of questions that you probably didn't have time to prepare because you didn't read the entire Zach-like book.
that recently got kick-started.
Yeah, I'm hopefully gonna get some good stuff out of you.
So, despite what it may look like, I'm in charge here.
I'm here as a provocateur, but you're in charge.
Last year they assigned me a provocateur, but this year I got to bring my own.
OK, so we're just going to blast through this, because I think the discussion is what's really interesting.
So who here has played Zachtronics games?
Or who hasn't?
Maybe that's the better question.
OK, so I'll be really quick, because there's not that many people here.
So we're going to talk about three games mainly today.
Shenzhen I-O is the first one.
So these are the.
So from a historical standpoint of Zachtronics, we were a privately owned company, we did indie stuff, it kind of was like whatever, blah.
I went to work at Valve for ten months, and then after that I came back to Zachtronics and we sold Zachtronics to another company, and that was like new Zachtronics.
And so these three games are like the new Zachtronics games.
So Shenzhen I.O. is the first one.
I'm just gonna show the trailer really quickly and describe what's going on.
So this is a game about, you build circuit boards and you write code into them and you have to build products.
You can see at the bottom there's like little timeline graphy things.
Those are the inputs and outputs to this like machine that you're constructing.
So it's definitely like a programming game.
And there's like cool parts that you can integrate with.
There's like a screen on the side and you can see like in this case if this was our trailer actually that we We built like a circuit like the puzzle if you solve the puzzle it will light up the screen in that way So it's like somewhere in between like a simulation and a puzzle and stuff like that These are just some other puzzles for it, just showing off the nature of it.
The game is sort of infamous, I guess, because just like TIS 100, which is a game we did before it, it has lots of documentation.
Like you actually have to read a manual in order to play this game.
It also has a solitary game, just because.
Opus Magnum, second game that we're gonna talk about.
Here's the trailer for this.
This is kind of a throwback to like Spacechem or some of my older games.
You build a machine with inputs in the form of like little marbles and then outputs in the form of like groups of marbles and you have to build a machine that turns those inputs into those outputs.
So again, same formula.
I'm gonna skip some of this trailer.
But there's an optimization aspect to it.
I guess that's the primary draw of the game.
But yeah, it's about optimizing.
You see that now.
That's a smaller solution.
There's an infinite number of possible solutions you can build.
Opus Magnum was kind of famous because it had a GIF exporter in it that worked really well.
And I think that helped it blow up on the internet when it came out.
It's definitely our most successful game to date.
It's like a fucking jewelry add-on.
Embrace Beauty is my favorite.
I still feel kind of gooey about writing that.
But yeah, but you can build all these cool things.
It's cool because there's a real aesthetic component to it that is, oh, it's the Embrace Infinity.
That's out of a Diamond commercial.
Yeah, so yeah, whatever.
Opus Magnum.
It also has a Solitaire game in it.
And then Exopunks is our most recent game.
Here's our kick-ass trailer.
This is like a 90s alternate universe hacking game.
Okay, come on.
It's kind of cyberpunk-y.
It also has a manual in the form of a zine.
Actually, two zine issues that we sold as fancy printed zines.
In it, you also write assembly code, and then all the puzzles are little networks that you have to accomplish things within.
So maybe you have to go find a file and bring it back.
There's one you have to hack a highway sign with counter-cultural messages.
like wake up sheeple.
There's also like a game console you can program.
There's also multiplayer modes, blah blah blah, but it's all about programming.
And they're all little scenarios.
Like here's a scenario where you have to like repair part of your body.
Like it's like fixing something like in the heart and like the puzzle is designed after like vaguely how your heart works and what regulates your heartbeat.
There's some zine pages.
There's also a solitaire game.
And then there's also a second arcade bonus mini game thing.
And that's the end of this.
So now you guys know everything about all of our games.
So that's cool.
Thanks for coming.
Yeah.
So I did a book, which is a bunch of game design sketches.
and stuff, and some of you guys might have heard of it.
I'm gonna use this for reference, because this has all of my sketches in it, and so this talk is kind of based off a talk I gave at NYU, where I brought out a couple of documents and showed them off.
Like now we have access to all of the documents in the archive, so I'm just gonna use this for reference once I put this into the right mode.
Okay, yeah, okay, cool, so we're good.
So we can get started, I think.
And then just when stuff comes up, I'll just flip to it up there.
Yeah, I mean, so let's get started here.
For anybody who doesn't know, your process for designing a puzzle begins on paper.
Yeah. Right.
So you you make yourself a worksheet that essentially expresses the system of the game you're working on, and then you create each puzzle on one of those worksheets.
Yeah. So first of all, why do you do that?
Besides the general love of paperwork.
Yeah, I like paperwork, I guess, which is fair to say, which is like a weird personal quirk.
It helps me organize my thoughts, which is kinda nice.
I mean, I guess like, okay, so first you need to capture the ideas, right?
And so being able to capture is important, but like everything can do that, right?
Like if you're like drawing on like a tablet or like going into OneNote, that captures the information.
But I really like paper forms because they give you like a format, right?
So like, I'll pull up a picture, obviously.
That's why we're all here, to look at these pictures.
Let's find a good one.
152 is the stamper in the shipyards in Infinifactory.
Is that a good one?
Yeah.
Start simpler than that maybe.
So these are fine.
So here's a good example.
This is for Infinifactory, which is a game that I didn't introduce.
I mean, like, obviously it's super crude, but there are places to write specific things.
And it seems stupid, but like this kind of, it forces, it allows you to create a process that like forces your mind into that process.
And so now when I'm trying to come up with 40 of these, which is difficult, it's difficult to come up with a bunch of puzzles all at once.
It's really clear what needs to be filled out and then afterwards you have like a physical record and so like with Opus Magnum I pinned up all of the puzzles on the wall in our conference room And then you could look and see like okay. Where like where is the game to say me?
Where is like where is there where's something missing where there too many puzzles like and then we can You can do it visually.
And I think that's a big part of our design process in general, is creating things that when somebody looks at the game state, they can visually figure out what's going on in the game.
They can read what's going on in the game.
And in the same way, we've created a process where we can text up on the wall and just visually, without even having to think about it, you can quickly assess where you're at with all your stuff.
Right, it also probably makes it easier to figure out like difficulty curves, which I imagine is really hard with your games.
Usually we have to test those.
Well, I would hope so, yeah.
But that's probably one of the more interesting things about your paper process is there is, I think it's fair to say, a longer than normal period during which you've designed the puzzle, but no one has played it, or at least very, very few people have played it.
It's not like a valve style iterative process where you prototype something and then you get a bunch of notes and then you iterate on it within the game engine.
It's more like you're iterating on paper.
Yeah. Yeah.
So that seems very different.
And is that just because paper is higher resolution than any screen we've come up with so far?
Yeah, that's true.
That's also true.
Yeah, I don't know.
I guess it's kind of hard to defend the paper thing as a thing that, I don't want to come out and say, you should use paper as a design tool, but it's.
I'm also not trying to talk you out of it.
Yeah, yeah, yeah, so yeah, okay So the other thing that I think this book and like these drawings show is that Zachtronics puzzles more than most puzzles I think are always story beats They can especially in these last three games. They convey something about the world or the characters. They move things forward I think you'd be sad if we didn't mention cool dad. Oh, yeah We'll get to cool the bigs and or wedge of the Zachtronics universe. Yeah. Yeah but I think It's interesting to think of these not just as puzzles or as escalations of a single challenge, but as expressions of a system.
That's part of why the forum thing makes sense, is Zachtronics games, more than most games, rely on the player understanding what the pitch is, what the actual sense of the world is.
Yeah, definitely.
We can talk about that process a little bit.
So how do you decide what is going to be a toothy enough concept for a Zachtronics game?
Like, alchemy worked, but submarines and harvesting cultivated.
Oh, so starting at the beginning.
Yeah, yeah.
Um...
Yeah, okay, so I guess I should explain the framework, kind of.
So with Shenzhen I.O., we sort of started developing a process for making these kinds of puzzle games.
And so, I guess, if most of you have played these games, you kind of understand that the puzzles are not random.
They're connected together.
Each puzzle is intended to be like a small story.
And so this is something we've really doubled down on.
Do you know what page that's on?
Which one?
Just like the list of pitches.
Oh yeah, there's a, let's see here, 258.
There's a bunch of, I think they're Opus Magnum ones.
OK, yeah.
So we've actually gotten kind of locked into this process now, for better or worse.
So our writer, Matthew.
When we come up with a pitch for a game, which we'll come back to in a second, how do we start the first concept?
But when we actually figure out what we're making, like, okay, this is a game about alchemy, and you're going to build machines that do alchemy, we sort of started coming up with ideas for what the world is like.
It's kind of like a bullshit fantasy kind of thing.
You know, everybody loves that.
And then I basically tasked our writer, Matthew, with coming up with a list of pitches for puzzles in the game.
And so we call them puzzle pitches.
And each one of them is like a small little narrative thing.
And you can see some of here.
I guess I shouldn't leave too much text on screen for too long, because then it's going to distract you guys.
But the idea of.
Well, so one of the opening puzzles in Opus Magnum is you turn lead into gold, which is supposed to be in real life alchemy.
That's like the ultimate expression of the art, but the whole joke is in this world, that's passé.
Yeah, exactly.
And so that's actually one of the, I think that's like one of the first real puzzle you do is turn lead into gold.
And so that's interesting because that one didn't come straight from Matthew.
That was like, oh, it turns out in our engine it's actually really easy to create gold from lead and then so.
Like, we should create a pitch that captures that thing and then shove that to the front.
Some of these are more like, I would have never even thought of them.
I'm trying to think of what's a good one.
There's one about like a stamina potion.
That's one of the classics for Opus Magnum.
It's a stamina potion for an heir who, or somebody, a member of the family who was having difficulty creating an heir, maybe, and stamina potion.
And so I would have never thought of that for a puzzle.
Like, that's not where you come from when you're like, oh, okay, how can I challenge people to combine two inputs together with blah, blah, blah?
No, and so Matthew came up with that one.
And then basically hand it off to me, and that's where it's my job as the puzzle designer to come up with, okay, what's a molecule that kind of evokes this thing?
While in Opus Magnum, it's all about fake molecules, there's no real system there.
So I was creating something that, how do I, like a visual language, I guess?
Like a visual language that doesn't really map to anything real, but something so that everything feels real within the system, and then map that into this puzzle.
Yeah, you're hitting the secret sauce and this might lead us to the way things get started.
But you said, I mean the exact thing you said to me one time was that you'd be in a worse position if you were smarter, which I think is your self-effacing way of saying.
What you meant was that you have a quality, a personality quality that your audience doesn't necessarily share, which is that you want things to be simpler.
When you learn about a concept or you start thinking about alchemy or you're looking at integrated circuits or something, your brain always wants to come up with the version that's going to make more intuitive sense and be easier to manipulate.
And you can see in sort of the user created levels for some of these games, that that's not necessarily an instinct that everybody who's into this kind of stuff would share.
They want it to be a really complicated math problem or something.
You always want to sort of abstract it down to where it's gonna be repeatable and a game, essentially.
Yeah.
So is it fair to say that that's sort of when you know that this is gonna be a Zachtronics game or could be, is when you're able to abstract things down, boil them to their essence like that a little bit?
Yeah, I mean I think that's, I mean really, I mean it's, I guess this is almost more of like a production question, which is like how do you know, or how do we know when we want to make a game?
And like, we have lots of game ideas, right?
And so it's not just like pick any game idea and then proceed to like burn a year making it.
We have to kind of evaluate concepts and see what that, and a lot of times it probably comes down to just the confidence.
like that, it's like, I think like, okay, we're gonna make a game about alchemy, so I'm on the line to make like, a bunch of puzzles that are like, little like, molecules, and that like, have enough mechanics.
And at some point, like, in your soul, it feels like, it's like, yeah, we could probably do this, right?
And I think for me, a part of that is figuring out like, a simplified model of how it works.
I guess with alchemy, it's not real, so it's easy.
But like, with Shenzhen I.O., it was like, okay, what, like, what is...
a way in which players can connect things that look and feel like microcontrollers without being as complicated as microcontrollers, the idea to make it a simulation would have never crossed my mind.
It's just like coming up with a simple version of it.
Definitely.
Yeah, and that'll allow, I mean, is now the time to talk about Cool Dad, because I think it's probably, for anybody who hasn't played Shenzhen IO, Cool Dad originally was an idea for a game you didn't release, correct me if I'm wrong, the second Golden Age, which is something you kind of chopped up for parts and bits and ended up in a bunch of other games.
But 217, I think, is Cool Dad.
This is, so, you know, we talked about it like really briefly when Zach was introducing the games, but in Shenzhen IO, you're making stuff.
Very often you're making the kinds of simple electronic junk that a lot of us buy and use briefly and never think about again.
In this case, there is a musical, you know, artist named Cool Dad who wants a bunch of light-up vape pens that will change color in sync with each other for a concert.
Yeah.
So you're creating that mechanism.
Yeah.
Yeah.
So like we could, you want to talk about the creation of this puzzle?
Yes, exactly.
So like how did, like did this begin with Cool Dad being extremely funny, which I would agree that he is, or did this begin with the idea of synchronizing lights, or is that not even a relevant distinction?
I think like probably the way to trace this puzzle is that it started off in A Game We Never Made, Second Golden Age, and then it became...
Oh god, okay so it started off in this game, Sengen Age, where it was just a character, so it was just part of the story, and then from there we didn't make that game, and then I don't even remember how it came into Shenzhen, I just love that idea, right?
I just remember that and loved it, and we sort of like worked it into the story somehow, and then at some point I probably pitched like an idea for...
like what it could be physically, like that it lights up, right?
And so there's like that, like this kind of weaving together, like things that I could imagine being plausible in the world, like the mechanical system that we've created, right?
Like you can't just make anything with circuits.
Like it has to be something that's like a circuit, like a problem that could be solved with circuit boards.
So there's like a mechanical part that I'm bringing, and then there's the narrative part of like Matthew having to write something that he can live with and make work.
And then they just kind of circle around each other and push back and forth.
And so the light-up RGB...
The specifics of the puzzle is that you have an RGB LED and you have to sequence the different...
You turn on red and green and blue and now it's white.
Or you can turn on red and green and make yellow and that kind of thing.
And so that's definitely a mechanics-side thing that pushed in.
But it was taking this story element from a previous game and it...
It was never, at no point, I guess a lot of puzzles are built, I mean I guess there's a lot of ways in which our puzzles are different from other puzzles, but there was never a solution in mind.
There wasn't even like a, oh I want players to learn how to do this specific kind of thing.
It was just like, well, you know, like one common thing in electronics is modulating things with PWM, which is like an electronics thing, that like that would be a cool idea for a puzzle.
Like it's not like, like that's not like, oh God.
Like a lot of puzzle games that are really mechanical seem to be that like it's.
like they have an idea for a way that mechanics could be used together just in the game, not like in the universe of the game, but in the game itself.
And it's like, oh, I'm gonna make a puzzle that scratches that itch, that uses that, this thing I figured out as a designer.
For us, that's never part of it, right?
It's just like, well, PWM is real in real life, so we could make a puzzle about that.
And then, like, Cool Dad is a character who's real in this universe, and so we can synthesize those together.
But at no point is it ever about how players will perceive it.
It's just like, let's make something that's real within the game.
Yeah, nor is it- Which is kind of crazy, I guess?
I don't know.
Well, I think traditional puzzle design, at least, you know, like, you know, small C conservative puzzle design, says you make a working system and then you slowly take away parts.
Yeah. And then you challenge the player to put those parts back in the proper place.
And it usually is like the proper place, as though there's only one. Yeah.
I get the sense that you don't think about puzzles that way at all.
It is more like what makes sense within this universe, or maybe even just the universe.
Yeah. And if it's a valid problem, then any solution someone's gonna come up with that works within the system is by nature, by its nature, a valid solution.
Yeah, exactly.
Yeah.
So that's, I think, for a lot of people who design puzzles, bonkers.
Is that fair to say?
That would be my phrase, yeah.
Anybody who designs puzzles?
I guess.
I don't even know, right?
I mean, I've never, like, and that's something that I've been wrestling with a little bit, is like, are these even puzzles?
Like does that even matter?
Right, right.
I don't know.
I don't care, I guess.
I don't know.
Yeah.
Well, it's intuitive to you.
Yeah, yeah.
That's what's really interesting about it.
I think you've said before that you've, you know, you've tried, in fact, in the book, there are a few just like nonograms, like Sudoku-style.
Yeah.
Oh yeah, yeah.
That you made.
They're bad.
I mean, they're not your best.
They're not bad, but they're not Shenzhen IO level interesting.
Partly because they're not narrativized.
Partly because they're not your lane.
And partly I think because, especially with these last three games, there's always an insistence on a connection to the physical world of the game.
With Alchemy, with Opus Magnum, you're always making a thing that makes sense in the world.
The stamina potion makes perfect sense in the context of these great houses.
the cool dad vape pens or something that you can picture.
And that's a thing that almost exists, right?
Like, you know, color-changing vape pens are not, you know, all that out there.
And even in Exapunks, you know, I mean, it is one of the Zachtronics coding games, but it's sort of in the wrapper of one of the Zachtronics, I think what you've referred to as the gluing spheres together games, right?
Like, it looks physical.
Because the Exas, the little, you know, executable dudes who are deploying the viruses, they move around in space so you can see when it breaks.
Right, so like, do you want to talk about that for a quick second?
Let's talk about that, yeah. I'm gonna flip back.
So this is one of our, I don't really know what the theme of this talk is, unfortunately, sorry.
It's why are Zachtronics puzzles the way they are, right?
Or what do we do, yeah.
So this is something that's super important at Zachtronics.
And I'm gonna show you, oh it's probably gonna start at the beginning because I don't know how to use PowerPoint.
Come on. No one does.
Okay, so we're gonna look at this.
So this is a game about building circuit boards and writing code.
And...
The thing I want to draw your attention to are the bevels on the sides of the chips, and that they're physical, right?
Like it would have been really easy to make this game where they were just like symbolic kind of rectangles, but we tried really, really, really hard to make them look extremely physical.
And this is one thing that I'm not really sure even how this resonates with our players or if it drives our success, but everything in the game is supposed to look like you could just physically pick it up off the board and throw it or something, right?
And it's like the Hearthstone does this pretty well, right?
Everything feels really physical.
A lot of people who make programming games and things like ours don't do this at all.
And I like to think that this definitely makes the screenshots of our games pop more.
And like the chip on the right, we actually have a shader running to make the LCD.
There's a whole engine in Shenzhen I.O. that lets you make custom LCD screens.
and it actually does like a shader to layer it, to make it look like you can kind of like see the light shining through it, and to make it really feel physical.
And I think this is kind of one of those things that maybe it's just taste and it's impossible to tell like if it matters, but like all of our games are designed to be super physical.
Opus Magnum is a bit more abstract, right?
Because your alchemy table goes infinitely in every direction and stuff.
Yeah, but it doesn't matter.
Like it's still, I guess I don't really have a, the Solitaire game evokes the same idea.
The same stuff that everything is really physical and like really.
You see where the marbles would actually like slot in.
Yeah, exactly. And like in contrast with Spacechem.
I was gonna say, that is something Spacechem does not have at all.
Yeah, Spacechem just sort of has circles, everything looks very flat, they're floating, there's nothing like the isometric view, for example, in Exopunks.
Exactly. And so this was a game that was sort of looking like we were maybe kind of worried that it could be too symbolic and too abstract, and then I was playing Mega Man Battle Network for weird 90s game reference or whatever.
It's 2000s.
And I was like, oh, we should totally do this as like chunky isometric platforms.
And I don't know.
I think it works.
I think it takes a game that would otherwise look way more boring and like kind of.
pops it up a little bit.
Yeah, what I think, and I'm sorry if this is disappointing to anybody in the room, but one of the interesting things about Zachtronics puzzles is it's not possible, I don't think, to talk about the puzzle design and why it works without also talking about things like story and art direction.
I don't think you think of those things as necessarily separate things, and maybe this is a good time to talk about the process of creating a game.
I think for you, lately, the last three games anyway, has involved primary research. You're saying you were playing Mega Man Battle Network, you were looking into actual hacker zines, you know, 2600 and that.
Well that's just a personal, that's just me. It's not very often I get to put my actual like history into our games.
Yeah, yeah, yeah, well I mean if you want to talk a little bit about your hacker history maybe that's relevant.
Oh yeah, I was never a hacker but I used to read 2600 in high school and I was like obsessed with it.
You aspired to be a hacker.
I do, yeah, that's the correct term probably.
Yeah, I really, really wanted to be a hacker.
And I'm not, and never was, but, and I don't even know what that means, but.
But when we made ExoPunks, that was totally like a chance to indulge that fantasy.
And there's, I mean, primary research is of course, again, harder in something like Opus Magnum where you're making it up, right?
It's a fantasy world to a certain degree.
I think it's all made up.
Yeah, well sure, well okay, yeah, alchemy is entirely made up, but there's a history of people thinking about alchemy and there's also like you said...
Oh, that's true, yeah, it is actually kind of based, I mean like, we tried to base it off of like alchemy, which is unfortunately not a science and hard to, you know, to base stuff off of.
That is unfortunate, I agree, yeah, but I guess what I'm trying to get at is you try to make it as real as is possible.
With Shenzhen, it's extremely real, right?
You could have the puzzles in Shenzhen I.O. look like diagrams or something.
And all the same visual information would be there, they would arguably be just as readable.
But the aesthetic of that game, where you feel like you're in a place, I do think, I mean I'd be curious to hear what folks in the room think actually when we get to Q&A, but whether or not it makes it sort of easier to get into, I think it definitely makes it more believable.
And yeah, yeah.
Yeah, so we have like the manual for Shingen.io is filled with these data sheets like this, or like this, I keep forgetting the screen over there.
And these are absolutely based off of what real data sheets look like like we printed out a bunch of real data sheets from a Bunch of companies and then sort of like synthesize that internally and use that like it use that to create these new things So the game could look like that right, but it does yeah, I think that's pretty pointed Yeah, totally and and so we there's a funny anecdote I guess that we we sold like a thousand binders like like custom binders that held the data sheets in it and somebody one of our like somebody that is like a a friend of like somebody who works at the studio but also as a tronics fan bought one of these and they had it sitting out at home and is his wife found it and was like oh are we are we moving to china what is what is this for you know because it has like a fake like employment letter at the beginning of the creation for immigration forms and yeah i i i there's like an unfilled immigration form in the beginning which is great right because i mean because that's that's a good example of like you know that these manuals are not just utilitarian it'll just teach you how to play the game you just flipped the one that's relevant to your puzzle, they're roleplay.
I mean, the immigration form is your D&D character sheet within this electronics world.
The first five pages of it are just storytelling.
And they're storytelling throughout.
I mean, this is probably the most integrated and true in Exapunks, where instead of a manual, which you have with TIS-100 or Shenzhen I.O., you have zines. And these zines, you know, like some of it actually gives you practical information that you need in order to solve some of the puzzles, you know, unless you're just incredibly intuitive or you looked it up on Reddit or something. But it also has a bunch of information about how these hackers relate to each other, there's recipes in it, and that stuff is absolutely not strictly necessary to solve any given puzzle, but it's 100% necessary to get into the spirit. I think maybe that's more important than people realize when you're dealing with super abstract puzzles.
I guess? We don't know. We don't have any data on any of this stuff, right?
So we're not able to fork the universe and make boring X-O-Punks and fun X-O-Punks and see how they do.
You don't A-B test where it's just frictionless cubes in a blank room?
Yeah. I think it's important to me, right?
And this is how I am able to make these games, is by doing all this stuff.
If we didn't have the story coming before everything I do, I don't know if I would even know what to do.
So talk to me about the primary research, for example, in Exapunks.
Like what does that process look like and why is it important to you?
Because you wanted to be a hacker, but I think it was important to you not to just remember what it felt like to want to be a hacker in the 90s, but to actually look at primary sources about people who were or wanted to be hackers in the 90s.
I think the real danger that we talk about internally is not misremembering it ourselves, but copying the way that other people think that they remembered it, which is weird.
Like there's lots, like if you think of like the 90s, right, there's like a zillion games about the 90s out there now, and like they have a lot of stuff in common, like, you remember floppy disks?
You bet yeah, do you remember the internet like you remember dial-up sounds like there you go It's the 90s right and and for us like we also remember floppy disks and dial-up sounds and stuff But we don't want to make a game That's just that right And we want to like sort of put our own spin on it and one thing cool that we found especially useful with xapunks And now I guess we're like addicted to it is We went back and found a bunch of like 90s cyber culture documentation So like I have like a stack this big of like wired magazines from the 90s about an eBay you can buy it on eBay it turns out I guess it's like an ad for eBay buy old game you know all old stuff to use as reference materials on eBay yeah we have a copy of the wired style guide which tells you how to write like wired writers and like what cool words to use and like you know when it's like the I bond you can call like the The internet, the information superhighway can be shortened to Ibon.
Everyone will know what you mean.
Yeah, exactly.
It's totally allowed, possibly encouraged.
You should make up words and they should have at least three hyphens in them because it has to be like CompuGlobal, HyperMeganet.
Exactly, yeah.
So we found that.
We found too much Timothy Leary, Mondo cyberculture stuff that was actually useless it turns out.
Maybe in a second order way because Steve Jobs was obsessed with it or whatever.
But that comes later, right?
It's not the 90s.
So I think that comes, again, it comes through really clearly in Xapunks because a lot of the levels are real hacks or they're based on real hacks.
Whether it's brute forcing a credit card or I wrote down the page number for SnacksNet which is an Xapunks spoiler so I don't know if we...
We're going to talk about SnacksNet.
All right.
Let's talk about SnacksNet.
That is 341.
So, that's 341.
I'm going to do a countdown to 3, 2, 1. 3, 2, 1.
3. One.
Two.
One.
Two.
One.
Two.
One.
Two.
One.
Three.
Three.
Three.
Three.
Three.
Left.
Left.
Right.
Left.
Left.
Right.
Left.
Left.
Right.
Left.
Right.
Anybody here deeply sad about getting spoiled on X-Files?
I think anybody here who cares deeply has probably played it, so that's all right.
So this is a really good level, really good puzzle in its own right, but it's also a really big turning point in the story.
And it's also based on one of the more famous hacks in the real world.
Do you wanna talk a little bit about that?
Yeah, I'll explain it.
So who knows what Stuxnet is?
So Stuxnet was a virus that got into everybody's computer, or worm, I guess technically not a virus, but it got into everybody's computers like early 2000s or somewhere in there, 2000, maybe not, maybe later, I don't know.
And it turned out later that it was actually designed by a government or something to specifically disable an Iranian nuclear centrifuge facility.
And everybody's like, what?
That's kind of weird.
And so when we were going through historic hacks, we were like, OK, we want to make a puzzle where you have to write a virus that disables a nuclear centrifuge.
And that was kind of just a thing on its own.
And we're like, OK, how do we fit that into the story?
And so we had a bunch of other elements that we just kind of wove together and made that viable.
In the case of Exopunks, there's a convenience store that is rapidly spreading and also has some sort of reality is fake.
cult thing going on.
Deaf cult.
Deaf cult, yeah, where they, um, and so this is just kind of synthesized from like stuff that we felt was kind of in the air, like, you know, it just seems kind of 90s, like deaf cults, you know, tied to companies, convenience stores and stuff.
Right, right.
No, it's just kind of 90s, right?
Like, it's...
There was no convenience store deaf cult as far as I'm aware, but convenience stores and deaf cults are two of the most 90s things imaginable, so it makes sense to stick with that.
them together. Yeah and so and then we were able to tie it in with like other points in the story like there's a character who works there and then we're like okay like she can uncover this kind of thing and like yeah yeah yeah. Can you walk me through like the puzzle itself like what was interesting about the nuclear centrifuge thing from a puzzle design perspective? Turns out nothing. This is actually a really tough one. So I looked up documentation for nuclear centrifuges and tried to find out like there's actually like a huge Does that sound worrying? I don't know.
There's some murmuring.
You know we're on camera, right?
Yeah, it's okay.
So, well, I'll explain it for any feds listening.
So, there's actually like, so I was trying to figure out like, okay, what actually happened in this hack.
So first place Wikipedia, right?
Do some research there.
not a lot of information.
I guess there's actually a fair amount of information, but I found a report that was put together by a security agency or something, and they were talking about this is exactly what happened during this hack, and this is exactly how it was supposed to work.
It turned out they were doing two different things.
The main thing they were doing is they were spinning up the centrifuges to...
It turns out that there's like a...
the unstable speed for the centrifuges, that in order to get it up to speed, you have to bring up the speed, and you have to take it through the zone where it's unstable, and the solution they had, which was just to do it, to get through that zone as quickly as possible, but hypothetically, you could bring it down into that zone, and then it would vibrate a little too much, and then the metal would expand, and then if you slowed it back down, the metal would contract, and somehow it would cause it to jam and then get destroyed.
It was actually really ineffective.
I don't think it really slowed them down at all.
I think it was a failure.
but create chaos it's well i don't actually don't think it really i think we have a chaos in the general public i think that's like the real take away of some stuff that which is that which is kind of interesting from from a accident perspective anyway it's as much about what it makes reality appear to be as the actual effect of the hack because a lot of the hacks you're doing in exopunks are stupid yeah they're making all the copiers go off at once at the copy place or ordering a pizza you didn't pay for or like you know dumb stuff yeah so this one's arguably less dumb uh... so turning it into a puzzle so obviously like the only way to do this is like you have to like We're kind of stuck reflecting this reality, so we're going to have centrifuges in it, and then you'll increase the speed, and then hold it at a point, and then wait for it to shake itself to death, and then bring it back down.
And that was the first version of the puzzle we made, and it was terrible.
It was actually one of the worst puzzles in the game.
It just didn't work within the system.
It's a sort of like real-time control aspect.
Like a lot of, I don't want to say it's a complaint we get, but a lot of our puzzles, especially like Shunshin.io and Exapunks, they're not like feedback systems.
It's not like, there's not like a puzzle like, oh, drive the car around or whatever.
And the reason why is it's really hard to telegraph like what you have to do, how close you are to solving it.
If the puzzle just has like, these are your inputs, these are your outputs.
It's kind of limited, but it makes it really clear, and it makes it really approachable.
If there was a thing where it was like, drive this car around this simulation, you'd have to figure out not only how to drive the car and how to write code that does that, and how to do a good job at that, which is basically they all just turned down, they turned into writing AIs or something.
But you'd also have to figure out, okay, what are the physics of this car simulation?
And then you'd have to write a test framework so you could directly control the car or something.
And it was just like, no, that's just gonna, that's gonna get away from the point of these games, which is.
You're supposed to know what you're doing when you're supposed to write the code to do the thing that you know that you have to do.
Yeah.
So, again, this became a sort of feedback-based simulation where you have to get it up there and get it shaking and then bring it back.
And it didn't work at all.
And so we ended up, this was one of the puzzles that we kind of scrapped the entire thing and then made a new version of the puzzle that was just like, Oh God, we just need anything that'll work in this case.
So maybe that's a bad example, but we ended up making a puzzle that was better.
and had a gimmick, and this is actually maybe one of the rare examples of the kind of puzzle design where it's like, okay, what's something that would be mechanically interesting, and how can I make that agree enough with the subject material that I'm comfortable with it?
So this would be one of the points where I compromise and just make a bullshit puzzle, and then try to integrate it better.
But it's kind of an interesting puzzle.
It's unlike a lot of other puzzles in the game, because it was designed from that kind of mechanics.
And sneakily, this is, I think, the other bit of your secret sauce, which is that you base this stuff on the real world, you try to ground it as much as possible, but you're not beholden to making it a copy of the real world in any way.
Yeah.
And another good example, I mean, in TIS-100, you were changing the way the language worked right up until the game came out.
In all of these.
Right, which is not something you could do if you were basing this on real assembly or something like that.
That's something people say often, like, oh, why don't you use JavaScript or real assembly?
It'd be great if I could learn real arm assembly.
It's like, no, it wouldn't be great.
Like, that would not be the same.
Yeah, Shenzhen IO is a good example of that.
That we had the sleeping behavior work one way, and it just kept confusing people.
And so instead of trying to teach them harder, we just made it easier to use.
Right.
And there's a lot of these kind of factors that push back and forth.
Like, we can make something that's more realistic, but we can also say, OK, we're just going to stop and just make something that we can actually do.
Or with puzzles, we want to do something that's informed by reality, or we just want to make something that's mechanically sound.
Yeah. How do you know when you've pushed it too far or not far enough as far as it being reality?
Is it just instinct? Or is it seeing people have a bad time?
You can't... Okay, yeah, so when somebody's playing your game and having a bad time, you know you're fucked up.
Sure. That's like the only objective measurement.
And I don't even mean having a bad time, because people don't have a good time with our games anyway, and they're notoriously difficult to playtest because people don't feel good about, like, our games in the short run.
Was it in Finifactory, where your wife was testing a puzzle and it took her eight hours to realize, oh, this is impossible?
Yeah, yeah.
I didn't accept that it was.
I was like, it's not impossible.
Keep trying.
And yeah, she was a good sport about it.
We've definitely had people who we were, oh, god.
OK, so SpaceChem had just come out.
And we were at a really low cost festival, like a local festival thing.
And we had set up SpaceChem on a computer.
It was at a local school.
And somebody came by and played it for five minutes.
And they just kind of, and just walked away.
That's a common reaction to our games.
That sound.
Yeah, it's kind of disgust.
I mean, we have like Opus Magnum is set up in the IGF pavilion and it's just like, people are just going to walk up and just be like, what is this?
Well, OK, so let's talk a little bit about tutorials.
What do you think of as the bumpy funnel?
Oh, yeah, yeah.
Because you, I think.
I don't always call it the bumpy funnel.
I can cite my sources and show my work.
It's the best I got.
But it's like you, I think.
There's a little bit of chaos in what order Zachtronics puzzles are in.
It's impossible for it to be a gentle difficulty curve in sort of a traditional way.
That's why some of the more recent ones you can pick the order you do them in to a certain degree, right?
At least in chunks.
But I think you've said you're really careful about, let's say, the first four or the first five puzzles to make sure that people get on boarded.
The care drops dramatically over the course of the game.
The first puzzle has to work perfectly with most people and the next puzzle they have to not get lost.
And by the time you're halfway in, who cares if you complete the game or not?
A lot of people don't.
A lot of people don't, but some people do, and trying to balance for what's the right level.
We can't just have a difficulty setting to make sure that everybody can find their difficulty and get through.
It's a puzzle game.
If it's too easy, people complain that it's not, there's not enough there.
If it's too hard, people will just stop playing.
It's unclear if you even have to beat a puzzle game to like...
play it, right? Like feeding it is necessary? I don't know, it's like a philosophical thing.
I don't really know the answer to. I mean the more there's a story, the more it feels like you maybe need to. Yeah. Because there's resolution. Yeah. Yeah. Yeah. So we can, yeah, that's definitely a thing to think about too, is how it ties in with the story. But, yeah.
What was the original question? Well, how do you make tutorials? Oh yeah, how do you make tutorials? Yeah. Bumpy funnels. So, yeah, so, like I'm Hypothetically, when you're doing it, there's the idea of a concept map or whatever, in education stuff, where you start with something that you teach people first, and you build out from there, and if you try to, like, I was just talking to Matthew about this yesterday, if you try to just jump all the way to something on the outside of this concept web, they're not going to have the dependencies necessary to understand that.
And this is a theory in real education, not whatever we're doing here.
that you need to figure out basically a dependency map of which concepts are dependent on other ones.
And so hypothetically, if we were really good at this, we could figure that out and test it and figure out what concepts do people have to learn before they learn other ones.
Our games are kind of like an educational space in that they have lots of concepts that work together in emergent ways and they build on top of each other.
And I'm not smart enough to build that map, right?
we sort of end up solving it the bad way, which is that we kind of put somebody in the game, we see where they get confused, and then we either try to better, we try to create it so that they either understand it because we've simplified it to the point where it's intuitive enough, or they can learn what's going on with a tutorial.
A common thing we do in our games now is the first stage will be not, so some people will suggest that they would love to see more half-completed puzzles in our games, where it's half-completed and you have to figure out what's missing.
I will never make a puzzle like that.
Well, the first puzzle is often.
Well, the first part, no, it's that there is a solution to one puzzle over here, and then there is another puzzle over here.
And it's hugely different, right?
Because you see a fully working example here, and then you have a space to do your own while it's still on screen at the same time.
So Opus Magnum, the tutorial is a bunch of these.
Our other games, there's just like one of them and then you have to just like fuck off and read the manual, I guess.
But that's... sorry.
In Opus Magnum, you're cramming for your exam.
Yeah, exactly.
So it makes sense that there's a bunch of sort of guided exercises before you get set loose as a professional.
It's funny you say it makes sense that that's the case.
Like, obviously the story Conceit came after.
Sure.
Right?
But we want it to feel like it's obviously that way because of the story.
Yeah, yeah.
Yeah.
Well, you talked as well about how when you approach tutorials, the story beats are almost like the character becomes an analog for the player, in the sense of like in Opus Magnum, Anateus is impatient with the fact that he has to go through a tutorial.
That's your players all day.
Yeah.
In Infinifactory, the people you're seeing dead all around are the people who wash out before they get very far into the game, right?
That kind of stuff.
Exactly.
I think games work really well when like the, or at least our puzzle games work really well when like the player is in a similar space.
I think that's why so many games start with like characters with amnesia.
Yeah.
It's because like the player also doesn't know what happened prior to the game starting.
And also wants to know what the hell is going on.
Yeah, exactly. And so, yeah, that's like a little story trick, is like, like, like, physically aligning, like, the mental state of the characters with the players that are on the same boat.
That, like, our players really wanted to skip people. We saw people complaining about wanting to skip the Opus Magnum tutorial, and it's like, oh, cool, we wrote the right story to go with it. You're totally in Anditeus.
Yeah, like, wanting to skip, there's a lot of layers to wanting to skip a tutorial in which the protagonist is complaining about wanting to skip.
Yeah.
Yeah, all right.
Should we put up an early puzzle while we're talking about this?
Yeah, sure.
Maybe like 264 is I think calcification and bonding in Opus Magnum.
Okay.
Which one?
Maybe, oh, maybe I got the wrong page number.
Or maybe it's an early sketch of that concept.
Is it the final, like the final exam puzzle?
Yeah.
This one?
Yeah, there you go.
Okay.
Yeah, so this is super simple, but it really sets you up for everything that comes after.
Yeah.
Yeah.
What about it?
What about, yeah, well I guess this is a good example of how you can teach somebody this kind of system, because like you said, it's not the same as teaching someone fractions or biology or something like that.
I think you've actually one time compared it to the Neil Stevenson book, like Anathem, is that what it's called, where the monks have to learn an infinite amount of useless information.
Oh, well that's me shitting on our games, yeah.
You do that a lot though, even though people like your games.
Yeah.
They're demonstrably pretty good.
Good.
Like.
building those maps for what is essentially fake knowledge but now it's gonna be useful to you within the fictional world that you're in yes something you guys have gotten much better like yeah space can i think it's uh... you know this is i think it's fair to say space and i have the world's best tutorial no it's terrible okay well this is the the bumpy following it was talking about so uh...
so it's based on had no idea how to like teach people how to play a game like space camp and we we built a bunch of screens of text with pictures and like when you start a puzzle it's like here's a full screen of text please read this understand it look at the pictures get it and then play the game. And it doesn't work. Surprise! And a way that you could also build tutorials, which also, spoiler alert, does not work, is that you can walk people through a process and you say, hey, you have no free will, like you have to... Oh, I'm gonna tell the kitten carousel story. It's fun. So, we'll get to that. So, what a lot of tutorials try to do is they'll say that...
like you, like, don't do anything, now click here, now click here, now click here, now click here, and they kind of explain why you're doing it, but they're really just telling you click here, just click where we tell you to, and now you know how to do it. You're like, what, no, I just was telling, clicking where you told me to, and... Even if you're reading it, there's some part of your brain that's not interpreting... Exactly. The actual information.
So this is like a totally bogus pop-sci thing.
I'm going to mention a study that was done that has nothing to do with this, and then I'm going to draw a comparison.
Because I drew a comparison from a study, it's going to make it sound authoritative, but you shouldn't listen—you shouldn't take it that way, because that's not how these things work.
But I'm going to do it anyway.
We're going to illustrate how not to gather knowledge.
Yeah, yeah, exactly.
Well, so in a way, this is a metaphor for how we gather knowledge.
So, we'll come back to that too, don't let me forget that.
I will not.
So, there's a study that was done by a moral scientist in the 1960s called the kitten carousel.
Has anybody heard of the kitten carousel?
If I had internet, I guess I'd pull up a picture.
Yeah, so, and I'm totally probably getting it wrong, so that doesn't even matter, right?
Because it still works even if it's wrong.
It's just adding layers, yeah.
It's all good.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
So, um.
Kitten carousels, you take two kittens who were born in the dark and have never seen light and therefore their eyes don't know what's going on, and then you take them out of the darkness for like half an hour once a day, because it's the 60s and you can get away with this shit, and you put them in this like carousel configuration where, so there's, I'm gonna just kind of pantomime this.
So there's like a...
like a cylinder, and there's like black and white stripes on the cylinder, so there's like a visual pattern.
And you put the two kittens in it, and you put them on this little carousel thing.
And so one of the kittens can walk and walk around, and when it walks, it'll pull the other cat the opposite direction.
And because it's like a cylinder, the cats will see the same thing, but one cat is walking and one cat is being shuffled.
And the cat that walks will develop like a functional visual cortex system, and the cat that is just dragged along but sees the same visual input will not.
And so this, now science metaphor time is over.
If you have a tutorial where you're just telling people where to click, and you're showing them what happens when they click, and you're telling them to click it, it's not the same as somebody thinking, OK, what am I trying to do?
And then they click it and see the reaction.
Like you need that feedback loop.
Just getting like a one-sided feedback loop where it's not a feedback loop, it's just stuff coming at you, is not the same as try something, see what happens.
It changes your model as you do that.
The possibility of screwing up, I think, is actually really important, too.
But not even screwing up.
And ideally, you want it to be that you can't screw up, but you have the autonomy to take the steps, right?
Like, that little kitten's locked into that little thing.
It's not going to walk out of the science experiment and live a normal kitten life.
I thought science metaphor time was over, but okay, yeah.
It's locked in, yeah.
No, it's...
You...
And so this is the bumpy funnel.
And we got this from taking a scientific research paper, at least this time from a games department, and then interpreting it into a way that made us feel good and was not necessarily true.
But the way we design tutorials is a bumpy funnel, where you create environments where players can learn on their own, but you're trying to funnel them towards a goal.
And so they're just kind of doing literally random stuff.
If you've ever seen somebody playtest your game, they will just try random stuff because they have no idea what's going on.
But you've constructed this funnel.
in a way that they're kind of like working their way towards the end stochastically, whether they want to or not.
And that's how we design tutorials.
So create these experiences, these like, and it's a lot like in a platformer or whatever, like you have that first level in a platformer, you're walking down a hallway and you can only go right and there's a wall on the left and then it's like, there's like a little obstacle and like there's a sign on the wall that says like press A to jump and then they figure out you jump over it.
Like that's great because it's a platformer.
Everybody's played platformer at this point, right?
But like.
We do the same thing with our games, but it's just different because it's not necessarily a thing that somebody knows how to play or whatever.
And they may not even know what they're looking at, initially, right?
The first time you look at an alchemy table in Opus Magnum, what factually are you looking at, right?
The game has to explain that to you in a way that, at least at this point in game history, people don't need platformers explained to them, generally.
Yeah, and that's one of the hard parts.
We actually had to, one of the hardest levels in Opus Magnum design was the first one, where we're just trying to explain what the hell's going on.
Because the idea that they're inputs and you're gonna transform them into outputs is like...
Like that's that's hard to explain weirdly like platformers are easy. Yeah, they are so so you were saying the kitten carousel Yeah, for how you gather knowledge. Yeah, so it doesn't like it doesn't matter if I got the kitten carousel thing right or not Mmm, right because I'm not actually talking about the development of visual cortexes, but I'm using it as like a metaphor for something So it's a story right and the stories have you know, the ability to like convey information or whatever and so like Like, yeah, I'm by no means an authority on the development of feline visual systems, but it worked as a story to convey this idea, and it worked as inspiration.
It feeds into the process, right?
And everything in our games is like that.
I'll read about something on Wikipedia, not be an expert in it, not understand it, and then make a game about it.
In the same sense that the goal of this talk is not to explain visual cortex development.
The goal of a Zachtronics game is not to teach you about the thing it's ostensibly about.
Yeah.
And in the same way that this talk is not meant to teach you how to make games, right?
It's just like this is information that you will then take and turn into maybe something useful to you.
Yeah.
This might slightly be a talk about how not to make games or how not to make puzzles, which is to say don't just, you know, don't take the top ten ways to make a good puzzle and sort of copy paste them and, you know, even if they're not working for you or someone is not having the reaction you wanted them to, stick with it because, oh, this is how it's done, this is best practice.
Maybe don't do that.
Maybe, yeah, I mean, you're not giving advice.
I can't, yeah, I don't give advice anymore.
That's fair.
When did you stop giving advice and, you know, why?
It was gradual.
Okay, that's fair.
It's because I'm full of shit.
I don't know.
I don't think, yeah, I don't think advice is like, my situations are different than anybody else's.
So I gave a talk that was kind of like this, but more like spiritual than like technical, if we can call this technical last year.
And some of the feedback I got was they're like.
you know, like you should pick better people to interview than Zach because like he's clearly been successful.
And so like, you can't, you know, you put this guy up there just saying like, just do your thing and like, don't try to like worry about being successful.
But it's like, I've already been successful.
And so like it's survivorship by.
Yeah, exactly.
Like, and it's true, right?
And it's just like, I, yeah, I don't like, we got lucky.
Like I think a lot of people get lucky.
Yeah, like I don't know, but I'm not qualified to give anybody advice.
That's fair.
Yeah, I was trying to draw out the patterns between the games that you would say were either creative or commercial failures and the ones that are successes in one or both of those ways, right?
I think there are patterns, but that's not to say that's a formula that other people can follow.
Yeah.
Can we talk about a late puzzle real quick?
So as things, how long do we want to leave for other people's questions?
We're going to do questions.
We're going to do a lot of them, but they're going to be really fast.
So there's a question.
Lightning round.
So think of your question, think of how to say it quickly.
Yeah, we'll get to that.
I'll explain the rules later.
But yeah, we'll do one more thing.
Where are we right now?
Let's see. 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
Yeah, 282.
So you talk in the book a little bit about how often the puzzle that you think is going to be the last puzzle ends up being too hard to be the last puzzle.
Oh yeah.
Yeah, yeah, yeah.
So we have a theory which is that the last puzzle in your game should not be the hardest.
The last anything in your game should not be the hardest.
And then, because sometimes people go and do this and it sucks because the last level is really hard and you just can't...
The last Spacechem level is pretty absurd.
Yeah, the last Spacechem puzzle is really hard, that's kind of bad.
I don't know how many people get to that and then don't complete it.
It's actually a couple levels before that I've seen a lot of people complete, but nobody gets to the end of the game anyway.
It's like how the dropout rate in grad school is really low.
Not because grad school is easy, but because if you're there, you're in it anyway.
Exactly, yeah. And so I did an escape room for the first time, and we got like all the way through, and then we got stuck on like the very last thing.
And it was clearly like a little difficulty tick up, and it like, we felt kind of cheated.
It's like we came all the way, like we should be able to finish.
Yeah.
Right? And so, yeah, in general we try not to make the last puzzle the hardest, but at the same time, like, there's a really like strong instinct too, and I think we do it all the time.
We try not to.
You've started making the next to last puzzle super hard and then there's a gimme, not a gimme, but like a, you call it a cinematic puzzle.
I don't think we, I want to do that, but I don't think we pull it off.
Like the last level in Opus Magnum I think is harder than the second to last one because like I can't help myself.
Like it's, you just want to make a puzzle that's like wow at the end and that often means harder.
definitely the space marine game like that from years ago kind of does a good job of this that like the the final boss battle is almost like a quick time thing which I'm sure pissed off a lot of people but it was kind of a relief after like having to slog through it all that it's just like oh it's just over thank god you know yeah yeah That's kind of a nice thing.
Yeah, other developers have embraced, like the Tomorrow Corporation games usually break out of the conceit of the game for the last moment or something.
It's usually not even a puzzle per se, it's just some stuff.
Yeah.
Yeah, yeah, yeah.
So, I mean, I feel like you've gotten better at that kind of pacing stuff, both at the beginning and at the end.
The middle is probably still chaos, but it probably can be chaos because the whole idea is being literate in the system.
You still divide them into chunks in a smart way.
I mean, do you feel like you've gotten better at that?
I think the testing is the real thing.
So we collect lots of metrics for all of our puzzles, and so we know how hard they are, basically.
And I talk about this all the time.
It's super important.
I've built a metric system for a friend.
And yeah, it's super useful.
You don't know what's going on in your game, especially if you're making a puzzle.
I can't imagine making a puzzle game and then not having, collecting all the data about people trying stuff, not being able to solve it, et cetera, stuff like that.
I guess people probably do it because Indies are not the best about like collecting metrics from their games.
Yeah, we've alluded to this but I don't want to leave it unsaid too.
Your games have sort of an opt-in hard mode in the sense that some people care about the heuristics and the histograms and some people don't.
That was one of the things with Opus Magnum is we actually, we wanted to make it easier to beat the game and then you could just go deeper with optimizing it and I think it worked really well.
It made it really accessible.
We tried to do the same thing with Xpunks but I think it was kind of harder.
Like assembly programming is probably harder.
Is harder, yeah.
I mean Xpunks again is dressed up like a spatial puzzle but it really is an assembly programming game when you get right down to it.
So last question, I think, before we go on to other people.
Is that good?
Leave that amount of time.
So there are a few things that you have prototyped and tried to do as Actronics games that so far you have not been able to do as Actronics games.
One thing is open world.
In the book you talk about a couple of things where you tried to create an open world game and it didn't happen.
Project Typhoon you talk about.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Oh yeah, I guess this'll, if you got the book, you'll find out about this.
There's stuff in the book we've never talked about before, but we can talk about it here.
Yeah.
Yeah, well these are unreleased games, and you talk about like, you know, you get requests from people, you know, to fan remake your games that you never finished or something, and you always say no, because you might do something with it later.
But I guess I'm interested in like, there's open world, and there is synchronous multiplayer, are two things that have sort of never quite happened in Zachtronics games.
You have asynchronous multiplayer, both with the histograms and with the hacker battles in Exapunks.
But do you have a sense of what it is about those things that don't quite work?
Oh, well the open world... So we tried to make an open world game.
We ended up making Opus Magnum, but we tried to make like an open world exploration game.
Yeah.
And it just didn't... I didn't have it in me.
It was kind of... I don't know. It started off like it was kind of...
It seemed like a cool idea, and then when it actually came to make it, it's just like, oh god, there's nothing here, we have to reconstruct all these, like, crafting trees and, like, nonsense, and, like...
Our games are fake, but to me, they're real, and, like, that's really important to me on a personal level, but, like, I need to make something that I can believe in, and, like, crafting is not a thing I can believe in.
It's like the...
Our games are also fake, but they require real effort.
Crafting is fake rewards with fake effort.
And that's where I draw the line, apparently.
Everything is fake rewards, I guess, but fake effort is not acceptable.
Yeah, your games do involve real effort.
They reproduce doing it, like it's doing a job that is hopefully more interesting and more involved in a narrative than one's job, I mean, not hopefully, hopefully.
Hopefully everyone in this room has a great job.
But in general, people who are coming to games are expecting a little bit more of a narrativized, bounded, Rewards, you know, yeah, well structured. Yeah, well structured exactly life is not well structured. Yeah, and it is a reward structure I mean like I like in my personal life I will rail against games with that are like trying to just hook people and be addictive with these but like our games are that Like our games are addictive there They present you with little bite-sized problems that are like clearly defined and you don't have to go to meetings and whatever They don't use any of the Skinner boxy extension stuff with like random roles. It's like there are no loot boxes And it's a nice game, but we're still like hooking people. It's still bullshit I still feel bad about it, right?
But like, you gotta do what you gotta do.
Is fun inherently sinister?
Is that like the question you're- I don't know.
We don't have time for that.
Okay, we don't, we don't.
All right, I'll leave it at is fun inherently sinister.
Do people have questions?
I'm imagining people do.
So you wanna talk about rules?
So the rules for questions is you have to be, like your question has to be one sentence.
Are you ever gonna make a game that doesn't have solitaire in it?
Oh, probably not.
Okay, so the solitaire thing is weird.
I really get a kick out of making solitaire games, apparently.
We have a bunch of games planned as potential games, and I have solitaire games designed for all of them.
It's kind of, okay, so I've discovered that mini, especially when somebody else is funding the development of your games, that mini games are a really great way to do little experiments that, into how to do other kinds of games.
I've actually learned a lot about making solitaire games, and I've learned a lot about puzzles in a sort of indirect way by making these solitaire games.
And you could just slip a mini game, it's like a game jam.
I don't do game jams, I can't really motivate myself to do game jams, but I can totally ship a solitaire game in one of our games, and it's like a little game jam for me.
If puzzle games are about finding a solution, the solution to a problem, and design is about creating something that can solve a problem and then iterating on it to make it better, are your games design games rather than?
puzzle games.
Absolutely.
The only reason I consider, like I would even use the word puzzle in describing it is that there's like a, there's like a specific thing you're trying to do, which with a design is often not even that true, right?
Like design is often more abstract.
When you're designing a game, you certainly don't know what you're designing often.
And so like they're, they're laser focused in the way that like a puzzle is a like laser focused scenario.
So.
For Opus Magnum, did you have all the verbs and mechanics before you started writing all the puzzles, or did some come out of the process of creating those puzzles?
Both. Like the basic—here, I'll—I have a sketch in here really quickly.
Um, the— Oh god, there's too much stuff in here.
It's a beefy book.
Yeah.
Yeah.
This is sounding like an ad.
So OK, so I did this skit.
We're not here to show the book.
It's just a wealth of stuff for this talk.
So when I went to a Starbucks by myself one day when we were starting work on Opus Magnum, I'm just like, what is this game about?
And I just started drawing little things like this to try to figure out what are.
It doesn't even look like the game.
I don't even know what it is.
But it was just the beginning of a process of brainstorming what the verbs are and what happens.
And so there was an initial attempt.
I sort of initially proposed stuff internally.
And then we kind of start trying to build that.
And at some point, there's going to be a narrative.
thing, but you can kind of do the narrative thing independently, like, cause it's, there was, like, there's an important step that we didn't talk about, which is there's a moment in the project where I will talk to Matthew, and I will say, I need you to go come up with a bunch of content ideas.
Here is what we can and can't do in a puzzle.
And so this is super hard in Exapunks because it's like, okay, all of the tropes you imagine about hacking, we can't really do.
We can't do a puzzle where it's merely like you need to go find information and hack into a system.
The game doesn't really facilitate that.
We need to show everything from the get-go.
And so we can't do that that often.
The verbs are that you can manipulate devices that are connected to the network or move files around as records.
And we have to sort of like...
come up with that interface, and it's like we go for a walk and we talk about it, and that's like a really important point because after that we can just branch off and do our thing.
And so with Opus Magnum, the contract was that a puzzle is where you make a product.
You don't make a process in a puzzle. Like, you will make a process as part of it, but like the narrative contract is that like it has to be like, I need like a vial of this chemical or whatever, and that's like the interface point.
And so like we have to figure out stuff to get to that point.
Uh, so I don't believe you actually ever explained how you come up with the initial concept.
Oh, OK, so it's, I have a lot of ideas, and then I sort of have a list of those ideas, and other people come up with ideas, and then we sort of keep them together and try to, like, I don't know, it's kind of like skimming some kind of nasty soup, and you just see what floats to the top and starts to congeal, and at some point we'll have something that congeals, and it's like, OK, I believe in this enough, I can imagine making puzzles for this, and then we kind of go ahead on it.
It's hard.
I mean, like, everybody has ideas, right?
Ideas are the things that are worthless and dime a dozen.
And you just collect all your ideas and just say, OK, we have to do something.
So what's the best one?
Oh, when Typhoon turned out to be a disaster and we needed a project, we're like, oh, god, we need to make a game right now, and it needs to be good.
What do we have?
It's like, well, we've got this idea from 2013 where we're going to make a space chem sequel about alchemy.
And it's like, yeah, we could do that.
And it was at the top of the list.
It had floated to the top.
And so we scooped it off and made it.
I was wondering if you could maybe name a game that you like made by someone else that wasn't commercially successful and what you thought maybe didn't work for it.
Oh, that's tough.
Sorry.
It's always the game.
And so all the games that have failed have failed because no one wanted to play the game.
I think that's kind of the thing.
It's probably not PR.
Do you have any games that you really like that people don't like to play?
I don't like games.
Yeah, he did say he doesn't play games.
Sorry.
Make them instead.
When analyzing difficulty curves in your games, which other metrics beyond completion rates do you find useful?
The big one is something we call bounce.
I wish I had a chart of it.
We call it bounce, which is how many people will open the puzzle and then never solve it.
And so that means they either skipped it, which is often not a thing that you can do in our games, or they fired up the puzzle, they're like, fuck this, and then they like uninstalled the game, and that was the end.
And that's, it turns out we actually, in Infinifactory, we did a survey where we asked people at the end of, during early access at the end of puzzles, who beat puzzles, like how hard was this puzzle.
Do you think it was too easy, too hard, or just right?
And we took that data and we looked at that alongside the more objective measure of who uninstalled the game after getting to a puzzle.
And they kind of tracked enough that we feel kind of comfortable saying that when a puzzle — when somebody doesn't beat a puzzle, it was too hard.
Which seems obvious, but the survey was only people who beat it, and so it was even people who beat the puzzle were like, no, this was too hard.
Which is a good indicator that your puzzle is too hard.
Like if somebody doesn't beat it and says it's too hard, of course it was too hard, right?
But if somebody beats it and says it was too hard, that's like, well, we're on the wrong track.
If a group of people complaining that, no, the puzzles take two hours, said it was too hard, then it's probably too hard.
Exactly.
Yeah.
What was the most craziest solution you've seen, maybe, that surprised you to any of the puzzles?
none of them really. So the funny thing is that when you see a bunch of what everybody's doing none of them are that surprising. People ask Opus Magnum, I don't think I've ever been surprised by anything. Okay, I take that back. Somebody hacked our save files so they could overlap a bunch of glyphs and they make these incredible solutions where they're just pulling stuff out and it's instantly being bonded.
it's just like a magician, like this molecule just appears out of nowhere and you're like how did that happen?
And it was, that was cool and that surprised me and then I had to go in and like delete all of his leaderboard entries because he had leaderboards turned on and his friends were complaining.
So, yeah.
I was wondering if you had any other puzzle design takeaways from your escape room experience?
I don't want to badmouth escape rooms.
I don't want to answer that question.
Do you like escape rooms?
Oh, okay.
I don't dislike...
I've only done one, so I don't know.
And it was fun, because I like puzzles.
I like feeling smart like anybody else, you know?
And so puzzles are good at that.
There was a mechanical contraption at the end, an electromechanical contraption.
And as somebody who built electromechanical contraptions in college, it was amateur and disappointing because it didn't have any fucking feedback.
And you can't build your own custom interface that has no feedback.
And the rest of the puzzles were great.
They were on paper, we could solve them.
And then there's this mystery box with buttons and it's just like, don't do that.
I don't know, that's not professional.
That's just somebody who had a bad time at the end.
In one sentence, when will you make a truly mobile game at last?
Never.
Why?
We've actually pulled all of our mobile games.
They didn't sell well.
They're a bitch to support.
The people who run the platforms want to, like, get rid of old games and just, like, send them to the depths of hell.
Like, no.
Buy a PC.
How do you clearly convey the abstraction of your game right at the outset?
Can you say that again?
How do you clearly convey the abstraction, the system that the game is using, to a new player from the beginning?
I don't know.
What do you mean?
Can you rephrase your question?
Sure.
So you're introducing them to a system.
Yeah.
Verbs, nouns, predicates.
How do you let them know what that language is?
I mean, literally manuals for three out of five of them, right?
Those opening puzzles where you see a solution and then come up with your own right next to it though, I think we're a pretty great tool for that, right?
Because you see a machine that works and then you...
Well, not as well as you want.
It's actually really confusing to show somebody a machine that works and be like, here you go.
They're just like, what the hell is this?
Like, it kind of doesn't solve it.
Like, I'd say that's probably one of the bigger problems with our games not being broadly accessible, is that like, it's complicated.
It's not everybody's...
I don't know how people understand.
Like, we just make the games, right?
Hi, each time I listen to the Zachtronics podcast, I think maybe it'd be great if you made a game about revision control.
That would be impossible.
I'm OK with taking technical topics, but version control is terrible to teach people.
So it's 10.01.
Technically, this talk ends at 10, but I've been told that we can run over a little bit.
So we'll take two more questions, and then we're going to stop.
But then we have swag, so if you want swag, don't leave.
So what kind of metrics have you found to be most useful to decide how to balance or how to decide what are good?
So the bounce rate is the big one.
That like puzzles that are like...
So the cool thing about bounce rate is that it's in like the progress of the game.
So if you see like bounce rate is like this and then it spikes and then it goes back down, it means that everybody who got to this part of the game, like a lot of people got stuck here, but then the people who got stuck here were okay with the rest of it.
And so it probably means there's something wrong with this puzzle with the big spike.
And so we actually just, it's like, it's not the same as like an interest curve necessarily because you don't want people bailing on your game really, but like, we just try to like squish those down.
And so often we'll just like replace a puzzle with a new puzzle that is not as hard.
Thanks.
Last question.
Hi.
How do you, how do you design a puzzle with multiple solutions if you don't know what all the solutions are?
That's how you do it.
If you don't know what any solution is, there's probably a lot of solutions in it.
You do occasionally in early access tweak a puzzle once you see the solutions and it's either way too easy or way too hard or way too broken.
But that's not about the number of solutions, right?
It's really a result of the systems we build.
They're fundamentally open-ended systems, right?
And that's why I think our games aren't really puzzles.
The nature of a true puzzle is that it has one solution and you can use logic and stuff to get to that solution.
We just build systems of tools and then say, build something that does this.
Right? And so it's just fundamentally different.
And I think that's what enables it.
So if you were to try to build a game with tools and open-ended puzzle, not an open-ended puzzle, but just like tools and tasks, you would end up with a game where there are probably lots of different solutions to stuff, as long as you don't add too many constraints.
I've worked with people who made other games that were like...
I worked with the PrimeMover guys, which is another Zach-like.
And one of the things they had early on were a lot of squares that were closed off.
And so that was the suggestion I gave them, is just get rid of that.
The game's already hard because you already have to think about how to apply these tools to solve a task.
Get rid of the extra constraints, and it'll be more open-ended.
A lot of people in Shenzhen I.O. actually didn't like the circuit boards, which is why Opus Magnum is completely infinite in size.
It was like the circuit boards made it so that if you had an idea for a solution, you might not be able to build it.
And that kind of sucks in a game that's supposedly open-ended.
It's the same reason why Xapunks lets you build nearly as many Xs as you want.
And now it lets you write as many lines of code as you want.
Just period.
As someone who's terrible at it, I ran into the line limitation many times.
And that was never even meant to be a difficulty thing.
That was because you can write a 10,000 line program that's very fast.
Yeah.
Yeah.
So, yeah.
Okay, so that's all for questions.
Thank you.
Thanks.
Thanks.
