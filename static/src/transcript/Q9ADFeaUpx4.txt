so First thing I want to do is say a handful of thank yous.
I'll make it quick.
Thank you, Damian, for mentoring this talk.
Thank you so much.
Thank you to Brian Schmidt and GameSoundCon for allowing me to give an earlier iteration of this talk at GameSoundCon last year.
And massive, massive thank you to both the audio and QA teams on Diablo 4 for listening to the absolutely atrocious first version of this talk and giving me all the feedback I needed to make it good for all of you.
All right, let's go.
So, who am I?
Why am I here talking to you about Audio QA?
I am a composer and sound designer in my own right, a man who loves music and sound.
I am currently the Audio QA subject matter expert on Diablo 4 at Blizzard Entertainment, specifically Blizzard Albany, which used to be Vicarious Visions.
Prior to that, I was the audio test lead for Tony Hawk's Pro Skater 1 and 2 at Vicarious Visions.
I have an MFA in music composition from the Vermont College of Fine Arts.
I'm a cat lover and a yarn connoisseur.
You can see my two cats there, Aurelia and Oberon.
They are vital to the game development process.
My co-workers get a little bit disappointed if they don't show up to our morning meetings.
A couple things I didn't put on here.
I am also the chair of the Albany IGDA, and I am also one of the organizing members of GWA Albany, which is our QA union at Blizzard Albany.
What is QA?
This is apparently has been a a hot topic today.
Uh so QA stands for quality assurance and it is what it sounds like.
We want to assure the quality... Oh no!
Ah!
Okay.
All right.
We want to assure the quality of the game.
What does that mean?
We want to make sure that everything that has been designed is working the way it's supposed to and isn't working in any of the ways it's not supposed to.
Right?
And how do we do that?
We gather information.
We ask questions.
We author documentation to guide testing.
We find and report defects, also known as bugs.
And then once bugs have been fixed, we go back and verify those fixes to make sure that they haven't broken anything else.
Um, so this, the image that I have here is a screenshot of the playlist from Tony Hawk's pro skater one and two.
And just a little bit about this.
It works like an MP3 player on shuffle.
So things that we needed to test for it, make sure that it's random, make sure that no songs repeat until every song in the playlist has been played.
Make sure that you can check and uncheck songs so that you can add and remove them from the playlist.
Some other things we had to test.
The game had a T rating.
That means that we needed to make sure there was no language in the lyrics that was going to threaten that rating.
So that meant listening through, making sure everything was properly bleeped, properly censored, right?
In order to do that, we created an audio test spec, a glossary of terms, test passes, a custom bug tracker for UI, including instructions for testing.
and so on.
I apologize, my notes are on my phone because we couldn't make the computer work.
Alright, moving on.
Common misconceptions about QA.
What is not QA?
There's a very common misconception that QA and playtesting are the same thing.
This is not true.
While it is true that we may organize and participate in playtests, we being QA testers, it is not far from the bulk of our job.
It's kind of more of a rare thing, to be honest with you.
We are not breaking the game.
We are merely exposing the ways in which it is already broken.
We're also not fixing the game.
We're not fixing the game.
We're just telling you how it's broken and then it's up to y'all to figure out how to fix it.
It's not getting paid to play games all day.
A lot of the time we're not even really playing the game, not in a natural way that a human being would do it.
Often we're actually testing in the engine or we're looking at documentation.
A lot of time I spend test planning.
Very rarely am I actually in the game playing the way a player would.
We cannot find every bug.
There are going to be things that are only exposed in really unique circumstances.
There are going to be situations where you need thousands upon thousands of players in order to expose a bug, and you're not going to have a QA team that big.
So every game ships with bugs.
And not every bug that we find is going to get fixed.
And I have a couple little funny stories about that.
That's why there's lobsters on the screen right now.
Diablo II Resurrected.
I didn't actually really work on it.
I did a little bit of testing support, but there was just the absolute funniest bug that someone wrote.
One of the testers had actually grown up in the Caribbean and knew the difference between a warm water and a cold water lobster, and wrote a bug that there were cold water lobsters being sold at a fishmonger in an area of the game that would have been warm water area.
It's the wrong kind of lobster.
that didn't get fixed.
Didn't get fixed.
Uh, and then another one down here is something that also didn't get fixed in Tony Hawk's Pro Skater 1 and 2.
This is actually a bug I wrote myself.
And since this screenshot is just from Google, uh, you know that it didn't get fixed.
So if you look at that little, uh, concrete thing to the right of the screen there, and you see how it's sort of turned to the side.
Concrete does not do that.
It doesn't work that way.
It'll break, it'll break, it'll crack, but it's not just going to get picked up.
Like floor tiles do that.
Concrete doesn't do that.
I know this because my dad does concrete for a living.
That didn't get fixed either, as you can see.
So audio QA, and by that I mean a QA tester or testers who are specifically assigned to work on audio testing.
Why do you want that?
Specialization allows for expertise.
When you have someone who is specifically trained in your audio tools and in your engine, you're going to get more and higher quality bug reports.
That doesn't mean that there's more bugs in your game.
That means that more of them are being exposed so that you can make more educated decisions about what you want to fix.
Uh, you'll get fewer dupes, NMIs, WNFs, NMIs meaning needs more information, which is when you get a bug report that is incomplete and does not give you what you need to actually fix the bug and you have to send it back and wait for the tester to go and add more information to it.
WNF being a will not fix, uh, you don't want them writing bugs for things that are actually intended, right?
A well-trained audio QA who understands your system and your design will also anticipate potential points of failure.
So one way that I did this when I was working on Tony Hawk's Pro Skater 1 and 2 is that I had found an area very early in development.
I had found an area that when you skated on it, the skate loop did not play.
It just went silent.
And I asked the audio team about it.
And this was pre-pandemic.
So one of the sound designers came to my desk and showed me in Unreal the exact settings on that actor that were incorrect, that were causing the loop not to play.
And since I then had that information, I was able to figure out that that was probably going to happen in a lot of other places.
So because it was early enough in development that I had a lot of free time, I went through every single level in the engine.
And I pulled up every single actor.
And I checked the collision settings for all of them.
And I made a massive document per level with every actor that had incorrect collision settings.
And I sent that off in bug reports.
And that got fixed so early that by the time the game shipped, we really didn't have that problem anymore.
That also falls into understanding where the bug needs to go, because that was actually a level design bug, it wasn't an audio bug.
And because that had been explained to me, I was able to send it right to the level design team and the audio team didn't have to waste time looking at it and figuring it out that it wasn't up to them to fix.
So a well-trained audio QA tester will also provide additional information.
If they understand your middleware and your engine, they will give you specific actor names, specific file names, specific Wwise events.
They will capture Wwise profiling sessions.
They will give you more information to make it easier and faster to fix your bugs.
Audio QA can also gather information and perform tasks for you if they know what they're doing.
When I worked on Tony Hawk's Pro Skater 1 and 2, I actually helped with some of the VO recording.
All of the exertion VO was recorded with the exception of Tony Hawk and Jack Black.
All of the other skaters' exertions were recorded in-house at Vicarious Visions, and I was able to help set that up and facilitate those sessions.
What are the relationships that your audio QA tester has with different members of your audio department?
Well, when it comes to design, we need to know what your vision and goals are.
We need to know what the theme of the game is.
What is the narrative?
What is the mood?
So that when we hear a sound that isn't conveying that, like Tony Hawk sounds a lot different than Diablo 4, right?
You don't want them to sound the same.
So we need to know what your vision and what your goals are.
When it comes to implementation, we need to understand your systems and your structure.
How do these work?
How do these sounds work?
How are things set up?
And to be honest with you, just the way that your middleware, just the way that your project is set up in Wwise can inform our test passes a lot.
I've actually directly used the Wwise project for games to inform the test passes that I've been writing to check functionality.
When it comes to engineering, we need to understand how the audio relates to other features, how it's set up, is the sound on the VFX, and then when the VFX doesn't play, the sound's not gonna play, and then we understand that that's not an audio bug, it's a VFX bug, so we're not wasting audio's time with that again.
When it comes to production, we need to understand the timeline and the state that the work is in.
You don't want a million UI bugs for missing audio when you haven't actually started to create your UI audio yet.
And when it comes to other QA testers who are testing other features, there is significant overlap in testing.
You really don't want to have your audio testers go through and retest features that have already been checked for functionality and art and so on, just listening to the audio.
It's very redundant.
It makes a lot more sense if you can coordinate that testing so that everything's getting done at the same time.
What do we do all day?
What does QA actually do?
So now we understand the goal of QA.
But what does the average day in a tester's life look like?
So often we'll start the day with either a smoke test or a build verification test.
The terms are interchangeable really.
And what that means is we'll get a nightly build.
And we want to make sure that all the core functionality is available in that build.
We want to make sure you can get into the game.
We want to make sure you can select a character.
We want to make sure you can move around, and so on.
And these tests will vary based on the project, but you want to make sure the core functionality is there so that the build is actually viable for other play tests that other teams may be doing and further testing.
If it's not, then you need to roll back to a previous build.
We'll do a lot of targeted ad hoc.
Ad hoc just means unguided testing, means you're not following a test pass.
You're just going through and playing the game, sometimes the way a player would, sometimes the way a player wouldn't.
You're trying to access areas that you shouldn't have access to, trying to perform abilities that you shouldn't be able to perform, trying to use things that you shouldn't be able to use, do things out of order, see what happens when you do stuff that wasn't intended in the design, right?
Because often you'll find things that are broken.
The first bug I ever found when I was working on Tony Hawk's Pro Skater 1 and 2, I actually was able to, there was an issue I think with the velocity of the skate and I was able to get way higher than I should have, but the bug I actually wrote was that I was able to jump up on top of a building and actually fall right through it because I had no collision.
So that was the first bug I ever wrote.
We create and maintain documentation.
This is documentation relating to test, but not always.
Sometimes the documentation that we create can be very, very helpful to other departments.
I created a bespoke bug tracker for UI audio bugs on Tony Hawk's Pro Skater 1 and 2 at the request of one of our sound designers, which was very helpful to me to keep track of that work being done, but also helpful to him.
We can also perform dev requested tests and tasks.
So if you've just finished work on the music for this part of the game, and you want to make sure that it's all transitioning smoothly, we can go and do that.
And we can go do it in ways that you wouldn't want the player to do it and see what happens to the music when we do that.
So you can get really intense testing on a specific feature.
We can also sometimes do tasks for you.
So like I said, the VO recording thing, I actually helped out with the batch material tagging for the skate system on Tony Hawk's Pro Skater 1 and 2.
which saved a lot of time for the sound designers.
And test planning and execution.
Test planning is the art of actually figuring out what is to be tested, how you're going to do it, what the prerequisites are, what the actual steps for executing the test are, what the expected results are.
And execution is actually performing that test, writing any bugs that come up, and passing or failing the cases, and generating reports on the state that the game is in.
We also perform confirmation and verification.
So once a bug is marked fixed, that's not the end of the story.
There's a couple things that we need to do.
For one, we need to make sure the fix actually worked.
Sometimes it doesn't.
And we also need to make sure that it didn't break anything else, because that can also happen.
So dev requests, what can you ask your QA to do?
We can gather information for you.
We can do media capture.
We can tell you how to trigger certain events, how to get to a certain part of the game, how to put the game in a specific state.
I remember on Tony Hawk's Pro Skater 1 and 2, I was asked, hey, is there a way to set this up so that my character always spawns at the top of this building?
And I was able to figure out that you could move the player start location.
If you were in the engine, you could move it wherever you wanted it and just make sure not to check it in.
Um, we write bugs.
So you can ask us to write bugs.
If you find something, please ask us to write bugs.
Please don't do it yourself.
Because if you haven't been trained in QA, you probably don't know what is needed in that bug.
And what's going to happen is that's going to get sent back to QA and they're not going to know what you're talking about either.
Uh, so then they're going to come and pester you.
So you're much better off just reaching out directly to your QA and saying, Hey, I found this weird thing.
Can you go investigate it and write it up?
And we'll be happy to do that for you.
Again, you can ask us to test specific features or areas.
We're going to do that anyway, but if you've just completed something and you want stress testing on it or you have priority that you want to make sure it gets done, you can definitely reach out to us anytime and let us know.
We can answer questions for you.
So QA touches every part of the game, right?
Audio touches every part of the game.
Every feature makes a sound.
That means that QA needs to understand how to test pretty much every feature of the game.
And to be honest with you, we spend a lot of time testing things that aren't audio, too.
So we often know how to start that quest, how to get to that location, where that character is, how that debug functionality works, right?
So please, reach out, ask questions.
We can often get you that information really fast.
And even if we don't know, we usually know who to ask.
And again, helping with dev tasks, like the VO recording and the batch material tagging.
How do we make this work?
How do you get the most from your relationship with Audio QA?
Help us help you.
Invest in your QA testers.
Create documentation and maintain it.
Invest the time to sit down with your audio QA point of contact and walk them through your WISE project or your FMOD project.
Walk them through how things are set up in the engine.
Take the time to answer their questions.
Give them tasks and testing.
That often helps.
We are capable of doing things on our own, but having that guidance of knowing where you need our attention the most helps us as much as it helps you.
It helps us make sure that we are focused on what we need to be focused on.
Maintain open communication.
Answer questions.
Ask questions.
Invite your QA into your Slack channels.
Invite them to all of the relevant meetings.
Invite them to your sprint planning.
Do triage, bug triage with them.
Invite them to some of your social meetings.
Create thorough, up-to-date documentation.
Create thorough, up-to-date documentation.
And maintain it.
Please.
Please.
Please.
build strong relationships, build friendships, collaboration, and advocate for your QA.
It's not really a secret that QA in the industry isn't always treated very well, and I think that the misconceptions around it contribute to that, the idea that, oh, you're just getting paid to play games all day.
No.
So please advocate for your QA.
If you don't have full-time QA, please advocate for your company creating full-time positions.
If your QA is not paid well enough, if your QA doesn't have benefits, if your QA is not allowed to talk to developers, which tends to be more of a publishing QA thing than a developer QA thing.
So there is a difference between those two.
And I had it in my notes to tell you, but since I don't have my notes, I forgot to tell you that.
So publishing QA comes at a much later stage and doesn't have as much interaction whereas development QA is there from the very beginning and is in constant contact with the developers.
And contact and memes.
I think I kind of rushed through this because, again, I didn't have my notes, so sorry.
Does anyone have questions?
Hi.
For the how to write a QA bug report, do you have any resources that could be helpful for proper language or proper orientation for those type of bug reports so they don't get bounced back and forth between dev and QA?
So it's going to vary a lot based on your project and the type of information that is needed for your project.
Our bug reports for Tony Hawk look different than our bug reports for Diablo 4.
But the core things that you need to have, you need to know what build you're on, what branch you're on.
You need repro steps, and you need detailed repro steps, not just go to this place and do this thing.
But be specific.
If you're using a debug tool, indicate how to access that tool and how to do it.
Give exact coordinates for where in the game you are.
Be as precise as possible whenever you can.
You should also include your expected results of what you thought was going to happen when you encountered this bug, as well as your actual results of what actually happened.
Keywords can also help to make your bugs more searchable, especially on a really large project that has thousands upon thousands of bugs.
Media capture is very important.
If a screenshot is sufficient, if it's just an art bug where a screenshot shows the problem in full, that's great.
Video is better.
and any other information that you might need, the team that's going to work on it and so on.
Hey, how's it going?
Good.
How are you?
Yeah, good.
Um, I was just wondering if there's ever any, um, uh, I don't know if this is like technically bugs, but, um, like kind of mix issues that might come into play.
Like if I've made a song and there's like a certain amount of high end and then, uh, this sound designer has made some sound effects and they're all like really harsh as well.
And those two things are clashing.
If you would ever be like, Oh, this is it.
Is that a bug or is that a mix issue or who would kind of look at that?
Yeah, so if we encounter something and we're not sure if it's intended or not, best practice is to get a capture of it, a video of it, send it to the design team and say, is this intended?
Is this what you want?
Right?
We're not here to judge your work.
We're not here to tell you we hate it.
We're not here to tell you that you're doing it wrong.
We want to make sure that the vision you're trying to convey is what is actually getting across.
So often we may run into something where we're not sure what the intended functionality is and the proper practice is to ask.
Great.
Thank you.
You're welcome.
Thank you for your talk.
If you were to hire an audio QA, would you look for someone in audio with an interest in QA or someone in QA with an interest of audio or neither?
Well, I can tell you how I got hired, which is that I had more of a background in audio and I was applying for a QA job.
And that was actually what got me hired for Tony Hawk because I happened to apply at exactly the right time that they were looking for an audio tester.
So the way that Vicarious Visions and Blizzard hire is not to list a specific audio QA position.
It's, it's just hiring generic QA, but I have helped hire candidates before.
I've helped interview candidates before.
And we do look for folks who have specific interests because that means that they may have more knowledge that can be applicable to testing those areas.
And then they'll have more interest and be paying more attention to those areas.
So I don't know that I've really answered your question, but I'm also not in a hiring capacity, so it's a little hard to say.
But I was primarily an audio person who was applying for a QA job, if that helps.
It helps.
Thank you.
You're welcome.
Thank you for your talk.
And I was just curious that if you have any standards for listening environments for audio queries in your team.
Could you clarify a little bit what you mean?
Like some people can listen on headphones or speakers or surround systems.
And I was just wondering if you guys have some kind of standardization team.
some kind of a setup, whether it's at the studio or like I have a surround setup that was sent to me that I need to finish assembling when I get back home to be able to test on surround.
So you do want to test in every format that you're shipping in, but probably not every tester is going to have access to those formats.
Okay, thank you.
Hi, perhaps this question has already been dealt with a little bit But for those who already have some QA experience maybe outside of audio QA, I have work experience in like software QA or perhaps they're a game tester QA but not for audio.
What would you suggest the skills they would want to have besides obviously audio knowledge to say work in what you're doing and what would you recommend for them to know?
I think a knowledge of middleware and knowledge of game engine.
And again, those doesn't have to be the exact middleware or engine that's being used.
Like for example, Diablo four is in a proprietary engine.
So there is no knowing that engine before you work on that project, for example.
But having a base knowledge of other engines, it's the same thing as like knowing one DAW, you can kind of, you can kind of figure out the other ones from there.
Right.
So you want to have some experience with engine.
You want to have some experience with middleware.
and you definitely want to have some experience in QA if you can.
I don't think I can get much more specific than that because every project is so different and every team works so differently.
Thank you.
You're welcome.
Hi, that was a great talk and I was taking some rigorous, crazy notes.
You mentioned earlier about the way the Wwise project is being set up.
kind of help with that.
And I was wondering if you have any best practices or suggestions when setting up a Wwise project as not the QA person but as one of the main sound designers or one of the main people setting up the project.
Are there any best practices when setting that kind of project up so it can be easily read and understood?
I think it'll be the same practices as, uh, you know, if you're working with other sound designers, wanting to set things up in a way that is clear and it's the same thing, right?
So you're, you're going to want to train your QA to understand how your project is set up.
So it's more that you want to educate them on how you've done things rather than trying to tailor what you're doing to them.
But the more clear and readable and the more sense it makes, obviously.
The easier it'll be.
So it's more about taking the time to train your QA on how you've set up your project.
versus tailoring your project to your QA person.
Uh, okay, thank you.
You're welcome.
Hey Amanda, thanks for sharing all the insight.
Um, as someone that fixes a lot of audio bugs, uh, let me tell you how valuable I think two services are that you, that you provide.
One is regression testing.
To ask you folks to tell me exactly which code change or asset change made the bug appear is dramatically valuable because I can super surgically know that is the delta that I can investigate and fix it.
The other thing is that I constantly ask QA is to reproduce the bug in the simplest form ever.
Like if you are on the fifth mission in the third level after leveling, like go into the test map, do this console command, there's your bug.
That is such a good valuable thing that you provide as well, so thanks for that.
Yes, definitely.
That is a really good point.
Sometimes you'll run into a bug really deep into gameplay, but you don't need to get that deep into it.
Simplify it.
Keep the steps as simple as possible.
Make it as reproducible as possible.
Definitely.
Awesome.
Are there any more questions?
I'm sorry the talk was so short.
I had other things I was going to talk about, but I didn't have my notes.
so