Ladies and gentlemen, please welcome to the stage GDC advisory board member, Chris Hecker.
I'm going to make this mercifully short. Yes. I've known John for, I don't even know, 10 or 11 years and I've been on the GDC advisory board for eight or seven or eight years and we've been trying to get him on the advisory board to speak at the conference for almost as long as I've known him and certainly as long as I've been on the advisory board and finally this is the year. So ladies and gentlemen, we're going to show a short video and then John Carmack. Thanks.
My job has always been finding the right balance between evolving hardware requirements, user experience, and the development process.
The sweet spot in the solution space.
Our earliest titles were notable for the use of hardware level graphics techniques that were rarely seen on the PC, but they were also developed almost exclusively in C, at a time when game developers still held assembly language development as a point of pride.
A horde of technologies and methods have emerged and been explored since then.
EGA graphics, floating point calculations, DOS extenders, cross-platform development and portability, offline processing, networking, and now a half dozen generations of 3D accelerators.
The drive has always been to produce something exciting for both the developers to work with and the users to experience.
Identifying the things that matter and focusing on them.
Okay, this year they hit on the winning strategy of convincing my wife that this was something I needed to do and letting her work out the details.
So I am going to talk about some topical development issues, but first I'd like everyone to just step back a little bit from the kind of daily labors that we go through and just be amazed at the progress that we've seen here. If you go back and look, my first computer was a VIC-20, 4K of RAM, 1 megahertz processor. The first commercial program that I sold was developed on an Apple IIc, 128K of RAM, 8K of video memory.
And if we look at that to what we've got today, there's a factor of a million difference in power between that.
I mean, we had, you know, the Apple IIs could do maybe half a kiloflop with the best code possible on there.
And now we're looking at, you know, hundreds of gigaflops of processing power on our systems.
And it's easy to kind of lose, to just not be aware of just how tremendous that really is.
I mean, a factor of a million, that's almost like a euphemism for impossible.
Somebody says it needs to be a million times faster.
And we look at what we've gotten from there.
The early computer games were very much things that people had to be into that specific thing.
You had to have a huge suspension of disbelief to be able to sit down and enjoy the early games, while now we have things that can just reach right out and grip people that are just normal people that are used to a film or television type experience, and we can give them quality like that with the games.
So it's an interesting question to sit back and say, well, If we continue to have progress like this, what are we going to do with another factor of a million? And while it's likely we're not going to see necessarily all the same progression levels there, we probably won't see terahertz processors 10 or 12 years from now, but we're certain to see massive strides in most of the other levels and certainly increased parallelism to make up for limits in scalar clock rates. So if we look at what we've got now...
There's a lot of things that are actually pretty close to being done.
The resolution that we look at on monitors today, which a lot of games are actually starting to render natively to, is equivalent to film resolution when we're looking at 2 megapixels or so.
We've just recently made the step to floating point pixel formats, which gives us the entire dynamic range that the human eye can perceive.
The frame rates that we see on some games when you're looking at 120 hertz rendering That's as fast as you can basically use for presenting anything to anyone.
So a lot of these things are tantalizingly close to being able to be written off as this is completed.
Now, there's a bunch of things, obviously, that still separate what we render from reality.
There was an old saying many years ago in computer graphics that reality is 80 million polygons a second.
That's clearly not the case because here we are today.
We can render 80 million polygons a second in many cases.
and we're still a long ways from what anyone would really term photorealistic. But the things that we can actually look at improving here, we're probably a factor of 100 off from the real world in terms of real world clutter, object complexity. A typical crowd scene in a game might have a couple dozen people where you look at an auditorium where there might be thousands of people and you get down to all the little tiny things that we're used to sort of abstracting in games where a cluttered desk in a game might have.
a couple sheets of paper, a coffee cup, a keyboard and a monitor where if you look at most people's offices, there's going to be a couple thousand discrete little items there.
So there's a clear path that we'll take there on increasing the complexity of the worlds.
There will be probably, you know, another factor of ten that we just crank up in terms of the normal things that we do today in games that we want to go ahead and bring up to those done levels where we're doing everything.
very high resolutions, very high frame rates, very high color depths. But, you know, another factor of 100 or so will probably come in in terms of what we'll do with extremely high quality surface rendering, going ahead and doing a good job at all of the analytically intractable problems like soft shadowing and motion blur and doing really good reflections throughout the world without necessarily simplifying assumptions. But it's still ‑‑ On the graphic side of things, you look at it and a factor of a million is basically doing at 60 hertz what takes four and a half hours to do now.
And of course four and a half hours has always been sort of what a rendered frame takes no matter what computing power that you've got.
It will be interesting to see if people are able to suck that up in the offline side of things there.
But still it means that we can quite credibly with no huge leaps of imagination or breakthrough technologies expect to eventually be rendering.
Lord of the Rings rendered quality, CG graphics and games, a decade or more from now. But there are a lot of kind of subtle issues that are seen there when you look at the offline rendering world, which gaming will have to put a little bit more cleverness into. That's like in, say, Lord of the Rings.
Every frame is basically gone through and tweaked dynamically with an artist's eye, and that's something that we aren't able to do in a realtime situation because we've got more flexibility than that.
But the problems that a lot of gaming has related to the offline stuff is very much one of being able to give the player the freedom to move around there and losing the ability to completely control the experience there.
Really different types of games will be...
done quicker than others. When you've got a third person constrained view, you're going to be able to put most of that level of detail and sophistication and the games will look like a movie. Third person rendered games where you have a director's perspective moving in there. I have very little doubt that that will be solved to the quality level of looking like a movie.
First person games where you've got complete freedom are a little bit harder or a lot harder in some ways.
The actual fidelity that you'd like to render on there for an immersive experience is something that requires a little bit more in the way of advances in I.O. devices where, you know, interestingly, the resolutions that we're at right now, if we had the proper display technologies, they're actually perfectly acceptable to render reality if we had retinal scanning and direct retinal imaging.
If we have to use something as crude as a cave imager for the entire thing, we might need another factor of 50 in terms of pixel rates to go ahead and give the complete level of look around at anything immersion.
But some of the things that make it even more difficult are when we start looking at the ability of people to look at whatever they want rather than whatever the camera view wants, which brings you up to the whole issues of things that are tweaked and massaged in the offline rendering world that need to somehow come across automatically and convincingly.
And that leads up to a couple of the problems which really aren't so much nearly done in what we'll do in computer games.
Another one that basically could be done right now is audio.
If anybody wanted to spend all the resources that we have today in terms of using the GPUs for it and all the floating point processing power, audio could be done.
We could go ahead and have all the head modeling, all the radiosity style sound transfer through very complex environments.
We certainly have the...
the sample rate and the bit depth for all of that. But it just doesn't really pay off in the current generation of things to devote that much effort to it. But given a couple more turns of the processor generations, audio will just be done.
Now, the things that aren't done, physics simulation, which ties in with that hand tweaking of all the rendered views where we're much, much closer to being able to render exactly what we want than we are to being able to simulate exactly what we want.
In many cases, physics is still one of those things where everybody's got a physics engine now and they all sort of kind of work in many cases, but everybody knows pretty much what you do to go ahead and break your ‑‑ break most physics engines. And we're still doing basically trivial things. It's cool to have a couple boxes bounce around and knock off of each other and land in different orientations and to ragdoll a character. But when we start looking at things that people will be experimenting with.
in current and future game generations. There will be simulations of weather, simulations of liquids, simulations of dust motes going through the air and transferring through the environments. And all of these are interesting, challenging problems that we can get some mileage out of.
Kind of interestingly with something that's happened in the game industry over the last decade in that a lot of things that were academic pursuits are actually really relevant to what we're doing now.
Ten years ago, gaming had nothing whatsoever to do with what people would do academically with simulation or graphics.
What you were doing was basically all implementation level things.
The trickery was in figuring out how to do something clever and make some implementation thing.
you know, a small integral factor faster than what would be the straightforward algorithm for it. But now with the power that we've got and the fact that not everything is nailed down so hard in terms of exactly what fractions of the CPU need to go to these things and what are left over for other things, we've seen it certainly in the last five years, you know, a huge amount of beneficial crossover from the academic graphics research world into computer graphics, because now what people do for, you know, for a college thesis or something has direct applicability to what you can use in a computer game. So physics rendering is something that's still going through a lot of that, and that's not my specialty, but it's one of those areas that you can clearly look at and say, this is going to be a very exciting area of research that will be important as we start more or less polishing off many of the graphics side of things.
That also brings up the largest issue, which is what you do with AI level things.
And of course that's a field that goes much beyond gaming or entertainment even into really large kind of world scale important issues on there.
But when we come down to it, as we start rendering all of these completely perfect worlds that are just looking absolutely fabulous.
The process of making everything else look as good as the rendering involves many things that are difficult physics simulations and then many things that are just AI complete problems.
And it's going to be really interesting to see how those things are addressed.
One of the major ‑‑ one of my major strategies at id has always been if you're not going to try and solve something really well, try and dodge the issue as completely as possible.
which is why we don't have a lot of character interaction, because character interaction is hard, and if you start making characters look really, really good, but they still act like cardboard cutouts, it's an open question whether that's actually a good direction to pursue.
So AI is one of those things that in games industry is still addressed completely as a set of techniques and tricks, and you're working at it specifically for a limited set of outputs. But we're going to be demanding more and more out of that.
And when we start looking at what we really expect to see in a game, if people just sit back in kind of blue sky, they want to have some, like I say, a fantasy environment where you go in and you've got all of the people there and they're acting like people. That's a really tough problem. Now, it's interesting in that I believe personally that as the direction of research goes, game environments are a really wonderful place to actually conduct AI research because it gives you a simulated environment where you don't have to worry about sensors and actuators and you can still work on kind of the core computational problem there.
So there's some hopeful bits that there may be interesting research elements going on there, but it always has to be kind of tied in with the fact that in the end we are making a product that's supposed to entertain people.
The choices that you make in technical directions, if you want to be successful, you have to kind of keep your eyes on the value rather than necessarily in some ways what you consider the quality of what you're doing.
And AI in many cases, there's some interesting aspects to the gaming world on there where a lot of what people look at as AI like bot programming and things like that.
are issues where you're addressing a very domain specific element of the game, and that's been good mileage. We've gotten good value out of the effort that goes into that. But when we start looking at harder and harder problems on there, it does become closer to a pure research topic. And I'm probably not going to be one of the people at the forefront of that technology, but it's going to be an incredibly important area that we look at over the next decade of game development on there. And there is always the possibility that Transcribed by https://otter.ai some real fundamentally important wide-reaching results may be obtained by the efforts of people to make a game in there, to make something come out the way they want to have characters interacting there.
That is one of the big problems still yet to be done in computer science, and I certainly believe it's a solvable one.
But tying that into the actual process of sitting down and making the games there is always been interesting to have.
A goal with a project that you're working on, trying to do something new at each time, you know, to try and kind of meter out the time that you've got for developing something new and interesting to actually tie in with producing a product that's going to pay for your company to continue to be able to do games in the future.
And that's one of the other major topics that I want to go over is the extensive stretching of the game development cycle and some of the problems that I think I see with our development cycles and to some degree with the industry as a whole.
We've been obviously Doom 3 hasn't shipped yet.
We're going into our fourth year of development on that.
It's really close.
But there's some interesting things that I can look at on here where I can remember clearly.
in previous projects thinking, okay, we're down to the wire, we're pushing everything through. I've done a good job on all of this, but wouldn't it be nice if I could sit back and really clean up the code, perfect the interfaces and just do a wonderful nice craftsman job on that? And interestingly, this project, I've had the time to basically do that. And I've come to the conclusion that it sort of sucks to be in that position where There's a small level of ‑‑ you know, there's a level of craftsman satisfaction that you get from trying to do what you do at an extreme level of quality. And one thing that I found is that's not really my primary motivation. I do take some enjoyment in it when you go ahead and, you know, work and polish and improve something. But in the end, that's not what's really providing the value to your end users. And that has really become clear to me. And it's been ‑‑ It's been something that's driven all of my developments over the years in that you want to pick out the things that are really important and you need to be able to categorize and say this is perhaps has value but isn't the best use of the time on there. And that's gone back through, you know, every project we've ever done has had those kind of decision points on there where is this going to be the thing that we focus on? Is this going to be key? And when you get little bits of time and you can sit back and do that, you do a really nice polishing job. It's kind of nice, but it's not the point of maximum leverage. And I found that I get the most satisfaction out of the development work when I can tell that the work that I'm doing has, you know, major leverage on the final product.
And there's a lot of things that have changed, you know, with the industry that to some degrees have kind of lessened the ability of that to happen. You know, in the early days you would have...
a company that would have a couple of programmers working on a project, and there would be a good chance that a single programmer would basically know everything about what's going on in a project. And up until recently, every aspect of a game that came out of ID was something that I had originally written, and then we would have one or two other programmers that would pick up the foundation and go ahead and work from there.
The last game with Quake 3 was the first game that had a major chunk that was something that I didn't write, which was the bot AI logic.
And in Doom, it's the first game that we started off intending to have multiple developers developing completely independent areas.
And it's necessary at some point to do that if we follow the current design trends that we're doing with games, because at some point you just reach a level where one person can't possibly do all the things that you decided are critically important for your product.
You have to split things up. But there's a big cliff right there when you go from one person being able to deal with and manage and go over and change and fix anything in the product to a point where you have three or four or more developers that may not actually know what's going on in everybody else's code. It's been unnerving for me sometimes to realize that there are source files in Doom that I've never even opened.
On the one hand, I can kind of berate myself a little bit and say I should be doing more comprehensive code reviews over everything, but it does just mean there's a finite level where there's just only so much that one person can deal with at one time.
And there's, again, it's necessary if we continue to have the kind of feature lists that we have.
If we have to do everything we've always done before and then do many more things, everything that all the competitors are doing.
But to some degree I feel that we might be falling into a kind of trap, kind of a mainframe trap where you looked at the old computer vendors that would look at things and say, well, this is the serious work. This is, you know, our group of competitors.
We have large products that have decades-long, you know, histories or legacies with them. And we need to keep maintaining this level of support. And while I don't have specific know, visions for how this can go, it does still strike me that there's the possibility for things that are not yet another first person shooter, third person action game, you know, RPG, whatever, that there are game possibilities that are not just working directly off of the existing paradigms, you know, the genres that we've got now. And certainly id's major claim to fame probably is that we, you know, we invented a genre with the first person shooter.
And to some degree, we're still trapped by that success.
I don't expect anyone to cry over our woes on this.
We're very happy to be successful with this.
But there are subtle issues there that prevent us from doing radically different things.
Just the concept of having dozens of employees that have certain skill sets kind of determines where we go in the development process on there.
We can't just say...
oh, I've decided we're going to do a strategy game with some interesting and clever objective, and we really don't need all these level designers.
So there's, you know, there's an aspect of the established game companies having sort of a mainframe bias on there, and I have high hopes that there's still many of the creative small development teams that, you know, can be working on more of an innovative new approach in there.
There are factors of efficiency there when I can still look back kind of wistfully at the time when there were six of us sitting in a room working all night to get the project done rather than having a project manager and multiple kind of departments working on the different things there.
And on the one hand, there's no question that what we're doing now really is superior in every way.
I mean, I'm not going to go longing for the good old days of the extremely simple games.
What we're doing now is just better.
It's better at a much larger cost. And the development process there I do think still is open for, you know, that six‑person team doing something really innovative, but it's not going to be a first‑person shooter or any of the established genres, because it's just taking incredibly massive amounts of development time and effort to do this.
And the time ties in on a really depressing level with the technical requirements and strategy on there.
The new Doom game was based on strategic decisions that I made over four years ago.
They've turned out good in that the hardware has pretty much evolved the way I expected, although, you know, to be sure, I have sort of a Heisenberg uncertainty principle effect on the hardware industry where the strategic decisions that I make do influence, you know, upcoming generations of hardware.
So it may not be completely strategic brilliance on my part.
But the decisions looked good.
But I looked at this and we were rendering the same pictures that we do now effectively I am over three years ago, you know, on a G force one class hardware and here we haven't shipped the title yet and we've had three, you know, three generations of hardware that could have used this technology that we haven't been able to get out and actually really take maximum advantage of.
And right now we're looking at starting new research for the current generation of hardware with floating point pixel formats, doing all the interesting rendering things that we're looking forward to on there.
But I'm looking at this and saying, well, we ship Doom really soon now.
Generally we'd like to go ahead and have the next title.
It's going to be much shorter development time, which usually means that we have to not get really aggressive at developing new things.
We basically took Doom and spiffed up the technology a little bit for the couple of things that we can now count for in the changing market share.
That means that a brand-new level of technology, if I do the kind of level of clean rewrite that I did with Doom, might not even be started being worked with for two years from now.
And then it could take two or three years to develop a new title.
I mean, if we're lucky, it could be another four-year title after that.
That's looking at six years from concept, you know, to actual deployment on there.
And then of course there's the kind of legacy tailing on there where we'll have licensees that are using that through two generations of product after that.
That's requiring to some degree looking ahead almost a decade on the hardware technology.
And certainly you can't be appropriate at that point.
You might be scalable on some level there, but it's sort of like running, you know, you can run.
quake on a modern processor, but it doesn't take advantage of what you can really do like it would with a current game on Doom 3. So that's one of my big trouble spots on there about I want to bring new technology out kind of as rapidly as possible. I mean, the new stuff is great. The things that we can do with the cards that are just coming out. I mean, I just got an NV40 into my dev system, and it's spectacular.
The power that we can get with that to really go ahead and utilize all the floating point calculations that we want to use, the new generations of things that I want to do in the rendering.
And it's really disappointing to think that at the absolute best possible case, if we decided to kind of, you know, go for it and do a real high end product for the next one, it would be two and a half years, best case, before we could have something like this that actually gets into people's hands.
And I don't really know what to do about that. An idea that I floated early on in Doom's development that I wish we had followed up on was to go ahead and do a product that's specifically a rendering showcase. And a lot of people accuse id products of being that anyways, but that's not the case. We do look at all the aspects of the game that we want to improve there. And certainly rendering has not been the thing holding up Doom 3's development. It's all the other aspects of the game that we're improving on there.
So, you know, I have some hope for tiny little specialty products and things like that. What I had pitched the idea early on was basically doing kind of a Quake II remix and taking a game and not changing the game, you know, not going in and trying to redo everything, but build new media sets for it and use the new technology and get it out there knowing that you're targeting a small section of the market just so people can go ahead and get some value out of the newest generation of graphics technologies.
get people experienced with it and kind of start the cycle a little bit faster, where everybody always wants to see the second generation title with a new technology once everyone has learned the ropes for it and is ready to apply all the lessons that they learned there. It would be great if we could shorten the development cycles on there rather than having three or four year development cycles so you wait six or seven years to see the second generation technology. If we could bootstrap that somewhat earlier.
But even the idea of just kind of re‑skinning an old game, you know, brings with it the problems that as we're doing this newer and newer graphics technology, the media creation demands have just gotten worse and worse on there.
Certainly we've got more levels of maps that are higher resolution that we're applying to everything.
But what we also see is that things that were acceptable in the earlier games. I mean, you go back, Wolfenstein was blocks. You had a texture on it that was tied to the same thing on each side. It took 30 minutes to make a map. There were shipping maps in there that were done in less than an hour. Somebody scrubbed something out, play tested it for a while, said this is fun and it's in, you know, Spear of Destiny. And, hey, they worked. They were fun. But when we look at things now where it's taking man month to deliver a level to even kind of the beginning of the play test stage on there. It becomes a real problem and I worry about the interactions between the media creation and the actual game content side because we go back again to the Wolfenstein maps and if somebody goes into a room and this is not much fun here, you just scrub out a couple more tiles to connect it in and make a cycle to some of the other areas.
And if you go in and you spend your couple months and you build an area in a current game generation and you say, well, this play isn't working out all that well, that same knocking a hallway into another room can take a week.
It can take a week to go ahead and rebuild a room that then looks good, that connects in a different way and has slightly different flow and relights the different area.
So ‑‑ That's a concern, and it's certainly something that's taking, makes the kind of final end of the game development process take a lot longer, and I'm afraid that it has the possibility of actually making the games less fun on a pure kind of game development symbolic level, which you hopefully more than counteract by the kind of increased richness there, or you just kind of bite the bullet and take the time and get really late and slip and actually deliver something where you have had the time to go do those two-week fixes.
every time you find a game development problem on there.
And each time we've kind of done a technology, there have been things that I thought would help this process, like the level of interactivity that we have in Doom's content creation is one of the really amazing things.
that we have over there. When we have other developers in looking at the technology, looking at the game is one thing. You can always kind of set piece a scene, especially if you don't let them touch it that looks great. But what usually leaves kind of the biggest impression is when our level designers kind of go ahead and bring up the editor, which is now integrated with the game, stretch out a rendering window.
and everything is looking right with shadows in the bump mapping and they grab a light and drag it around and all the shadows and lighting and everything changes in real time.
And contrasting this with the previous generation where we had usually a 30‑minute cycle to go ahead and send something through the visibility and the lighting process before you could actually look at it in the game. So at the start of this development I'm thinking, okay, we've got a little more work to do here, but this level of interactivity is so much better that it's going to you know, shrink our development time on there somewhat. And it hasn't worked out that way.
And it's sort of like, I believe, the offline rendering world where you get more capabilities or the ability to do something faster and people will spend more time going ahead and trying to make it absolutely perfect. And it's, you know, the demand for the interactivity there has been kind of amusing where at first when I brought it up, we had our normal kind of level editor and you would hit enter to go ahead and render a scene. And it would bring up the scene exactly.
you know, as the game renders it with the bump mapping and the shadows and all that. So that was pretty cool. Then we got a little bit faster computers in there and everybody is like, well, we'd like to be able to go ahead and stretch geometry and move around in this. So, okay, we put in continuous render mode on there. Then people want to see the particle systems dynamically acting in there. And you add that in. And it finally got to the point where I'm ‑‑ They were complaining about the fact that to change a light's color, you would have to bring up a color picker dialog, click on that and then close it. And now we've got like continuous color dragging in a live color window on there. And all of this is great and we have a lot of really wonderful scenes in there, but it hasn't shortened the content creation time. So we are looking at it a little bit more from a higher level strategy and strategic view now where There is going to be some attempt to start, you know, building libraries of media and sharing to some degree. There are some media assets that we've shared with Raven, you know, working on Quake 4, and we've got some things we've shared with other licensees, and we are hoping that our next title will be able to reuse at least some of Doom's assets. So that's one of those things where that sort of gives us a constriction on our possible game designs there. It's going to be some near future, either present day or near future thing where we can reuse the fire extinguishers and waste baskets and some of those things like that in the game, which is another one of those kind of to some degree hamstrung by our own directions on there.
Now, you know, we ‑‑ I still keep looking at things where there may be some possibilities of technical solutions to this, but I'm beginning to fear that ‑‑ no matter what kinds of new technology I can bring in to help bring some of these things a little bit easier, that it's not actually going to help. That even if we get, say, some forms of real world data capture to go ahead and grab materials from real radiometric light values and doing some interesting things like that, that the next project is going to take yet more man hours per media element. And the decision that we wind up coming to is that the games are going to have to get less diverse to maintain an increase in quality on there.
And that's always been something that I, even before it kind of reached critical levels like it is now, it always seemed clear to me that a lot of game designs where you have four completely different environments, you know, you want to have world one, world two, world three, world four, it always seemed to me like four times the work for, you know, one times the profit on there, that if you want to make a game, you know, pick a single and try and make that as lush as possible. But we've sort of got, especially like first‑person shooters sort of have an ANSI standard 30 levels to them or thereabouts. And that's a lot of acreage to just kind of fill out there. And I think that we're trying to learn some lessons from genres that people have been forced to, you know, for outside development reasons like cartridge console games.
Ultra 64 is where you're limited by the total amount of cartridge ROM that you can have on there.
You're forced for various reasons there.
Even if you've got a hundred person development team, you can't create too much effort.
So you change your game design styles based around that.
And even in the kind of high end game development space where you may have large budgets, large teams, just to get things done in reasonable amounts of time, we're going to have to start making some of those decisions as well.
Because it's easy to have kind of vast, expansive worlds if you're basically painting with a very broad brush.
But now that we've given people the capability of going down and painting with extremely fine brushes on lots of different levels, it's ‑‑ it can take an arbitrary amount of time.
And as we approach the level of fidelity that you can get with movies, the problem becomes, you know, almost insurmountable, where movie development right now will employ hundreds and hundreds of people building some of these issues, and these are sets. They have no backs. You can't just turn around at some scene in a movie and then go and like jump up onto a ledge and explore down the hallway, because that stuff hasn't even been created by those hundreds and hundreds of people. And when we can draw pictures that look just as good as what we're doing currently in movies today, people are going to expect sets built to that level of detail.
but then they want their 30 levels of adventure there, or even worse when you go into large scale online games where you want to have a considerable size of a world there. And these are real problems. It's possible that there may be opportunities for kind of stock books of different data, and certainly this has been tried. There's a few companies that sell stock models for different things.
with gaming, as long as we keep revving these technologies like this, the actual requirements for the media keep evolving, and that has kind of double edged problems there where on the one hand you have to keep retraining your own artists, and if you want to get something done fast, maybe you have to throw a whole lot of artists on it and you have a whole lot of people early on at the learning curve there. But if you want to get it done fast, you kind of throw ‑‑ you lose the benefits of, you know, of people ‑‑ You want your learning curve to occupy a relatively small fraction of your development time.
And if the learning curve is relatively short, you can go ahead and you spend several months learning and then two years developing or something.
But as things get more and more complex, that takes longer for people to not necessarily like understand how it operates, but to kind of find their ‑‑ find the artistic groove on how they're going to use the technology effectively.
And that could still wind up taking a good chunk of the entire project there.
And the fact that it continues to change, that the skill set is necessary for a Quake generation game versus a Doom 3 generation game, means that you can't necessarily just have what the movie industry has is a huge pool of people where you can just go out and say we need 100 carpenters. We can't just go out and say we need 100 Doom 3 modelers or texture creators because the skill set isn't specifically there. It takes months to go ahead and build any level of that.
And I have some hope that the next generation of rendering technology will be a more general purpose tool where it won't be the kind of notchy changes in features that we've seen up until now. And that's something that I do think is fairly important where previously all the generations of things that we've done, including Dune 3, are based on notchy sets of hardware features where, okay, we added cube maps or we added dot 3 blending or something like that. And the relationship between a game engine and an offline rendering tool, you know, for people that actually work with them, they're completely different things. There's some overlap in terms of what you wind up producing on the output, but they're just not approached the same way in a content creation or a capabilities fashion.
But the next generation does look good for being something that will be more general purpose.
It will be something where you can kind of program it as much as you want because we have our floating point pixel formats and we have our dependent texture reads and we've got longer programs.
And effectively we can decompose anything we need into this.
And the next level of technology will probably be taking advantage of this.
This may mean that as we look five years from now.
that the skill sets required for content creation do become more uniform across the industry and across the industry boundaries into the offline rendering world.
And this will probably be a good thing in terms of, you know, allowing people to move to different projects more readily and allowing companies, if they choose, to bring on kind of waves of developers if necessary, where, you know, nowadays, especially, you know, it's throwing developers at a project that's behind schedule just very rarely is a good thing.
You can bring on twice ‑‑ you can double your art staff and not actually get that much more done if you have to train them in doing brand new different things in ways that they haven't seen before. So being able to, you know, to leverage broader bases of, you know, people to work on there is good. And we will probably be seeing actual data sharing between, television motion picture rendering and what actually goes on in games. There's a little bit of that that can go on right now. Certainly things are stolen for cut scenes and all. But occasionally you'll still find some model that was used, scrunched up really small on a motion picture screen is actually something that can be rendered as part of a game right now. On the material side of things, that's going to be coming fairly fairly soon in terms of game development. Next generation technology should be able to go ahead and do most of the surface models that are used in rendering right now. The resolutions will come down just to fit reasonably on there, but it will still be a pretty direct path on there. It's a little less clear when the geometry is going to start using exactly the same kind of tools and techniques that they use there.
You know, I've historically not been the biggest supporter of, you know, hardware curved surfaces for various reasons.
You know, it hasn't fit in what I consider the best, you know, the best value for the effort on there.
But that may also be coming in the relatively near future.
And then you start using the same models to go ahead and first do your television show, have your weekly animation or whatever, and make your game out of it.
But in some way, these types of strategic directions are, you know, it's not ‑‑ it's certainly not what game development used to be about. I mean, now we're talking like a Hollywood studio about being able to manage, you know, huge numbers of people to be able to cross promote over different product lines. And there's definitely, you know, an aspect where I can look back wistfully at the ‑‑ the early game development where you just got some people together that wanted to make a really fun game, built something that was cool and people played it and had fun.
I do still hope that there are people out here that are going to be following that path that can still bring the kind of new elements in.
I don't think that it's a closed off completely industry.
I do think that innovative and really exciting new things.
do have a place and can still be successful. That's something that, you know, I know that my position isn't something that's really shared by too many people here. But the, you know, when I hear developers moaning and complaining about different things about whether they can't get a publisher or getting contracts for different things, I very rarely comment on those situations because, you know, my position is somewhat unique with regard to all of that. But...
You know, I do think that there's still exciting things that can be done on the small level.
And there will be things that won't be coming from id software because in those ways we are kind of a prisoner of our own success there.
We have our way of doing things and it will continue to grow the company larger, to do larger and larger projects, you know, to go ahead and cross license and cross promote and all that.
And that's, you know, that's sort of our lot in life there.
There are going to be exciting things yet to come on the large scale, but I do still hope that there will be a place for that programmer artist combination to go off and do something really kind of interesting.
Because the capabilities that we're getting, on the one hand it sucks up more and more resources, but on the other hand, it does give raw capabilities to smaller and smaller numbers of people.
When we look at the graphics rendering capabilities...
that we've got right now that are coming out soon, you can put what would have been ‑‑ as soon as the technology matures a little bit with the current generation of cards for doing sophisticated offline rendering with the current hardware accelerated floating point pixel format stuff, you will have a render farm in a person's desktop computer.
And the capabilities that that will give people is pretty exciting when you start thinking about it.
Well, one artistic vision could now go ahead and do something that previously would only have been possible to render if you had a Pixar‑sized render farm.
If you wanted to take ‑‑ if you wanted to do a 60‑second short or something, if it took you four and a half hours per frame, you just don't get too many cycles through the creative process on there. But, you know, it's not long at all until we have, if not real‑time rendering like we expect in the game engine.
very, very fast hardware accelerated rendering of things like that. And I think that's going to be an interesting kind of artistic outlet. And that's always been one of my major kind of motivations and rewards on there is kind of seeing what I do as a canvas that the artists and the creative people actually work on. And each generation of game rendering technology and the game interactions and just all the things that make up the game engine, I am The best moments for me have been when I look in someone's office and see something really wonderfully cool that they couldn't possibly have done before that's now possible.
And that is not slowing down at all.
This generation will see kind of cinematic director's visions of things that you couldn't do before, where in previous games you would have some things that had sort of a director's style to it that would have some interesting things with camera angles and so on. And the way you could crop scenes and set them up. But you really couldn't apply the tools and craft of a director or a real set layout person. But with the current generation of technology, if you look through like a book on film lighting, just every tool that they've got there, everything that they do with barn doors and cookies and shutters and how you go ahead and do key lights and fill that stuff comes out directly now.
And over the course of a few years, as people get to experience, experiment with that and kind of find their personal style with it, that's going to be very exciting to see.
And the next generation will take that to the level of surface quality rendering that is movie quality on there, especially if people are willing to sacrifice a little bit of frame rate or do things in a not quite realtime frame rate, but if they want to generate really fabulous images.
It's something that is going to be very exciting.
So, thank you for letting me do that.
I'll see you next time.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
I ‑‑ you know, it's a canvas and paintbrush set, really the likes of which no one's ever seen before, and that's going to be, you know, really something to watch.
So the next ‑‑ I've got a pretty clear idea of where things are going for the next five years.
Things are, you know, kind of ‑‑ there's a path out there and there's a lot of inertia kind of covering what things evolve in the electronics industry, but I would not hazard to guess too much about what things are going to look like.
five years past that. If you go back again to the very, very early days, working on my Apple IIc or something, and somebody said, okay, a million times more power, I wouldn't have had the visions of bump mapping and stencil shadows and all that. I would have been happy to be rendering Tron in a video game.
So we look at it today and we can say, well, we want to have characters that look like Lord of the Rings.
We want to have that moving around in a game.
And we'll get that.
I have no doubt whatsoever that we'll be seeing that.
But there may be other things that are just more ‑‑ that may be even more important.
Like what we see in terms of online communications and everything.
The fact that ‑‑ while bandwidth and latency haven't improved all that much, the number of players that you have access to has improved by, you know, that factor of a million. You've gone from playing with your brother or something to having the whole world of online gamers open to you. And there may be, you know, aspects like that that turn out to be far more important to where games go than the actual raw audiovisual technologies. So I think we're just about out of time here. So I do have ten minutes left to take questions.
if you have questions, and I will come over to you and you will ask the question. Yes.
John, what are your expectations from the next generation of the consoles versus the PC capabilities? What are you expecting from the PlayStation 3 and from the Xbox 2?
Okay. Console games. You know, I'm not I'm not intimately involved in most of the console development.
It's not a business model that I like all that much.
You know, I don't make a point to go out and get disclosed really early on it.
I would say that I'm a little bit bothered by the next generation push towards, again, multiple processors, which I thought most people would have learned the lessons from the previous generation where If you take a console that has one fast processor, one fast graphics accelerator, everybody loves to work on it.
It's nice to program.
If you take a console that has multiple processors that add up to some wonderful figure of power, it rarely gets utilized as much, and it hinders development time.
And I'm a little bit surprised that that's kind of come back as another development strategy for that.
Since you see team sizes and costs in video game development rising, do you ever think they'll reach a critical mass where the industry can no longer support teams of that sizes and production costs that high?
I don't really see a specific end in sight right now.
I do expect that the major top flight titles will be increasing in budget, and there will probably be more attempt to go ahead and directly tie with movies to get more in.
more kind of return for the investment there. But if we looked, again, five years into the future, I would not be shocked to see $100 million game development budgets looking that high there. And I do think that's a problem that we should be concerned about, but I'm sort of at a loss as to, you know, what to do about it, because if we're given this capability and you have the choice of either exploit the capability as much as you possibly can because your competitors are doing it. That's going to require more and more media resources. And it's a serious issue.
Yeah.
So it actually relates to the comfortable thing. I mean, I think everyone would agree with you that it's way easier to program for a fast CPU and a graphics card. But, hey, they didn't pay attention. So given that the next consoles are all multiprocessing, how would you architect?
in broad strokes obviously an engine to work on that.
Since it's a pain.
Well, the most straightforward thing is to go ahead and try to find ‑‑ it's hardest when you've got a small granular number of processors. I mean, talking two to four processors is something that makes it really difficult to split things up. Because you could go ahead and say, all right, let's amp up the audio and use fully one processor to just make audio done. That's not a bad thing to go ahead and do there.
When you want to try and really accelerate, say, rendering there, you're going to pick ‑‑ there's no really optimal way to split rendering over two or three processors. We split into a front end, back end where you do kind of like CPU‑based things, all the animation and deformation separated from the actual rendering. And that can get you kind of sort of to a 50% split. But when you start looking at numbers, like if you want to split four processors across graphics, it turns out that ‑‑ just about the best way to do that is to section the screen. And you get some benefit from that, but it's not a 4X improvement over there. You can also like try to ‑‑ if you're running at very high frame rates, you can pipeline full frames, which is a pretty good thing. So that's an interesting possibility where if you want to go ahead and use kind of sub sampled aspects in there with ‑‑ if you want to do your soft shadowing, your motion blur.
your order independent translucencies, all the analytically intractable things by rendering many more frames than your frame rate and doing a final compositing pass on there.
That would be a reasonably good way to try and use four processors for something.
But it becomes much worse than when you've got four CPUs and a single graphics resource where you wind up queuing up all of those things.
And I'm not thrilled with those directions.
And I think that we've We've got several generations showing that this was just not a great thing, which is why I'm, again, kind of surprised that it's in vogue again.
More questions?
Given what you said about the future of game development and the interest that universities seem to be having in game development as a new discipline, how would you like to see the education of future game developers proceed?
I've always been a little bit skeptical about, you know, game development courses at universities, largely because the field has been so dynamic where it's difficult to make a curriculum for something that's changing this rapidly. I can't say I've done any detailed surveys of the teams doing this, but it is difficult to, you know, if somebody went through a four year university program and they had a syllabus for game development on there that was made it could have been made at the time we were doing Wolfenstein.
Somebody makes a syllabus, runs one generation of students through it, comes back, and it's just to the point of being almost not relevant on there.
Probably you get more from ‑‑ there's valid stuff to be done in the current computer science curriculums.
Graphics research now is directly relevant to the game design side of things, or to the game engine side of things.
There are probably kind of ‑‑ meta courses that are useful in terms of game design and development, but those are the kind of, you know, soft academic things that I'm always a little bit leery of and I'm hesitant to place a lot of value on somebody that's gone and gotten a degree in game design versus someone that personally as a person hiring people at a company, what you've actually done is far more important to me than what you've been taught.
As we go on, again, maybe in this following generation where things do stabilize a little bit more in terms of general tool, there may be a little bit more opportunity for it to be kind of codified into a syllabus there.
But at this point, I am ‑‑ well, I guess it's kind of like breaking in a new graphics technology where the first generation isn't necessarily so much to actually be used.
It's sort of kind of bootstrap the process where you eventually move into something that really is valuable later on.
going to be a little bit of a tough situation there, but it will eventually kind of work itself out.
I was intrigued by your statement that there are still exciting things that can be done on a small scale.
Can you elaborate on that a little bit?
Well that's kind of one of the things where if I could say exactly what they were, I'd probably just go have some people go do that.
You know, I just don't want to fall into the trap of kind of the hubris of thinking that what we're doing is the be all, end all of the development.
And I certainly hope that there is the equivalent of, you know, a microcomputer revolution that has all of us that are going to be, you know, we're the establishment.
You know, we're the big corporate developers effectively, which is weird for, you know, for it, a company start, like many game companies effectively started in a back room.
But I'm ‑‑ You know, I think that there's a degree of blindness to the possibilities when you're immersed in something that you do kind of for a living all the time there.
And yes, I suppose there's a remote possibility that there's really not anything clever and innovative to be done on the small scale, but I'm not willing to take that as gospel right now.
And I definitely encourage people to continue looking at the small things.
the small game development things, and actually some of the new markets that people have found.
It's great to see some people doing reasonably well on things like downloadable games. It's interesting that the numbers that some people are doing there are better than the numbers that id Software was doing as a shareware developer in our early time that bootstrapped the rest of our development. So that's a hopeful sign. There are people there that are in exactly analogous situations to what id Software was 12 years ago.
in terms of the scope of the projects, the funding, and the rewards for the development there. So I think there's probably a pretty damn good chance that there may be some of those that can follow a similar kind of curve of growth and expansion into what they can do.
Question?
I'm curious as to your opinions and or predictions for the future of games as art as opposed to just simply entertainment.
Could you say that again?
I'm curious as to your opinions and or predictions for the future of gaming as art as opposed to just entertainment.
Okay.
I do have a pretty direct opinion on this in that I don't look at what I do as art.
I am making a product for people and my job is to give them something entertaining.
It may be a self‑selected group that thinks more similarly to what I do, but I don't think that looking at it as art is a particularly ‑‑ positive direction to go at. And again, it comes back to what I was saying about how you can do quality and you can do value. And if you want to be a successful company, you want to focus on value. Because you can do something that may be extremely artistic, that may be the work of a master craftsman and is extremely high quality, but if it's not providing value to the people that are actually going to buy the game, I am it's not the best thing to actually be working on. And there's certainly a place for art, just as there is in any media, but I don't think it's correct to look for, expect or even try to make something that's expected to be a mainstream AAA title a work of art.
I think it's kind of following the wrong path there.
You mentioned after you ship Doom 3 you're going to do a quicker rev, just polish up the graphics a little bit and push another title out.
Where do you see Armadillo's X Prize relative to that second rev?
Which one is going to come first?
Say again, didn't catch that.
Your second game, right after Doom 3, the little quick rev, and Armadillo's X Prize, which one is going to ship first?
Okay. Yeah, well, I could talk for another hour about all the rocketry and aerospace stuff, but we're hot firing the vehicle, all four engines on Saturday. If that goes well, we're lifting off on a test flight the week after that. If things continue to go well over the next year or so, we'll be flying big vehicles very high with people on them, and eventually heading off horizontally for orbit.
All right, thank you very much.
