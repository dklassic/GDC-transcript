We are going to talk about designing the bustling soundscape of Marvel's New York City.
So I am Alex Previty.
I'm an audio designer at Insomniac Games.
And I am Blake Johnson, also audio designer at Insomniac Games.
And yeah, we're very excited to be here today to share how we, us and obviously a lot of talented people at Insomniac Games, came to create the sound of Marvel's Manhattan in Marvel's Spider-Man.
So before we get going, just a little background on Alex and I.
We met at the Savannah College of Art and Design.
We were randomly placed as roommates and had a lot of ridiculous times together.
And we did graduate.
And swap that out.
That's us last night.
So we're here now living the dream at Insomniac Games.
A little background on Insomniac Games, it's a pretty great place to work for.
A lot of these places thought we were pretty cool to work with up until recently as well.
And we are looking to hire in a handful of positions.
And I want to highlight one specifically, if you happen to be an audio programmer.
Yeah, come find us after.
I'll be at the booth later today.
And you can find it on our website as well.
Insomniac has been around 25 years.
We're celebrating our 25th anniversary this year.
And we got our big start with, I think, Spyro, and then Ratchet and Clank, Resistance, Sunset Overdrive, The Unspoken, and, of course, what we're here to talk about today is Marvel's Spider-Man.
A little background on our team.
Internally at Insomniac, we have one audio director, one audio lead, four audio designers, including Alex and I, one dialogue coordinator, and then we extensively use Sony product development services.
We just call them Sony PD.
And from them, we had 10 sound designers, three which were working in-house for a bit of the end of the project.
One dialogue coordinator in-house.
Four dialogue coordinators external.
Three music editors externally.
And yeah, that's the team.
Specs on the project.
We used Wwise, so you'll be seeing some screenshots from that.
We add 256 megabytes of RAM for audio, and that includes the 60 megabytes for WISE and engine overhead, and the remaining about 190 megabytes for sound banks and media.
Today we're talking about Marvel's Manhattan, and Alex will first be discussing the city ambient bed, which includes the city room tone per se, and then the faked 3D layers.
Crowds and the crowd system.
The city perimeter spline emitter.
Reverb and how that is created on a mass scale.
And dynamic ambient systems, this being things like weather, time of day, stuff like that.
And then wrapping up with the performance and optimization for those areas.
I'll be talking about the ambient and scripted vehicle systems, so traffic and the like chase vehicles and things like that.
That entails the engines, their horns, brake squeals and turn squeals, and doppler-bys and what I like to call the whiz-by system.
So before I pass it off to Alex, here's just an example of what the final version of Marvel's Manhattan sounds like from a handful of different perspectives.
Three rows on that one. Three rows.
Hey, hey, so we had to make the city sound great.
That was kind of our first major challenge we had to tackle on this game.
So as you know, New York City is one of the busiest and loudest cities in the entire world.
I think on average, in the Midtown area in Manhattan, it averages about 75 dB at any given time.
So basically, we needed our sound to represent how crazy New York City was and how bustling it can be.
but we also needed the ambience to not be fatiguing, you know, because when you're out in New York City as a pedestrian, you maybe will be walking for 10 minutes, go down to the subway station, go home, go to work, but you know, in our game, you know, you're gonna be out in the city for maybe 10, 12 hours of gameplay time.
So we kind of had to make sure that we were, you know, making this happen.
So we're kind of stuck, you know, rock on a hard place in this game, trying to figure out that dichotomy between having a game.
be bustling and crazy sounding but also be in the background enough so it's not, you know, kind of reputation, no, whatever.
Anyways, it was tough reputation to kind of uphold for New York City, so we kind of had a challenge in front of us, like what do we do?
So we kind of had to find a way to basically construct New York City's ambience from the ground up.
So what we kind of had to do first is, you know, find some good source recordings that kind of were very characteristic of what New York City sounds like.
So what we did first is this first step into deconstruction was basically taking some good profiles, some good samples, and kind of running that through iZotope RX.
So I used a kind of room tone generator that's normally used for kind of filling dialogue and stuff.
But I used that for this system.
So basically...
we kind of took all these New York City ambiences, ran it through iZotope RX, and kind of generated these very static tones that kind of had the energy and frequency spectrum of what New York City felt like, but stripping every element out that would be considered distracting.
And then using that same edited sample bank, I also ran it through a GRM evolution, which kind of smears things and kind of makes them like cream cheese on a bagel kind of thing.
You know what I'm saying?
So basically we kind of layer that in with our more static Rx generated stuff to kind of get this like very amorphous kind of moving feeling of New York City without having anything that sticks out like police whistles, car horns, people talking, etc. So this is really helpful for us because we kind of had to sell the energy of the city without really having anything that's recognizable and things that you would pick out with things loop.
This was also really helpful for kind of stereo and quad imaging in our game.
You know, if we relied on 3D elements only, we would just have problems with it not really feeling full.
And I think just having things be 2D as just a foundation really helped fill out the stereo field.
Unfortunately in this game, for reasons we'll get into later, we didn't have a lot of streaming bandwidth.
So a lot of our beds and loops were actually stereo, but we tossed them through our reverb in our delay, which were surround, it kind of fill out the back speakers a little bit.
So the next element we have for our ambience is they're kind of random 3D layers.
So, you know, while we stripped everything out that was interesting as the foundation, we kind of had to add that stuff back in to kind of make the city interesting.
So, you know, New York City has a lot of cool sounds, got like car horns, sirens, you know, people yelling at each other, construction, dogs barking, car alarms, whatever it is.
So we kind of edited those out and kind of created these banks of different ones.
So once we pulled all these interesting one shots of different categories, we basically kind of separated them into different.
categories and different banks.
So we had three actor mixers in Wwise that were used to organize everything.
We had our close sounds, which we could hear basically when we were really close on street level, which kind of had a lot of our energy in like low level street noise.
We had our medium actor mixer, which had a lot of stuff regarding like car horns, things you would hear from a pretty average distance.
Then we had our far layer, which was kind of like sirens, construction, things you would hear from basically anywhere in the city.
And we also had a sky layer just for, you know, when you're up higher, you can hear planes and helicopters, things of that nature.
And this was really helpful for us in the long run because we were able to take all of these three different layers, including the sky one so far, and basically kind of mix them all differently depending on where you were with states and RTPCs, which we'll get into later as well.
So here's kind of a video showing, you know, the different layers being added one at a time to kind of create the full bed that we have in a game.
So that's basically the bed only.
There's no actual 3D diegetic sounds in that video at all.
So that's just the faked bed.
So that worked really well for us, you know, for being inside of the city, but you could also traverse outside of the city's boundaries kind of on that, you know, outside road area by the seawall.
So we had to make sure that when you were outside in that area that the city sounds were being spatialized correctly to basically the center of the city.
So what I had to do basically to start off was draw a pathway kind of exactly detailing the outline of our road where all the buildings were, and we had a path following emitter that would just follow the player, you know, along that rail that we drew.
And then we had our technical artist at the time who still works with us David Santiago He helped us basically kind of draw all these volumes I'll create this network that whenever we would walk inside of it It would kind of turn off the 2d surround ambience and kind of activate this 3d point source emitter. So look at this photo here All those blue volumes are what were automatically drawn and also hand authored so whenever you step into that area turns off the surround reverb and Everything kind of turns up the 3d stuff If you look really closely with the arrows pointing to, there's that little magenta line, and that's the line that I drew.
It took a while to set up, but once it was all working correctly, it was great.
So, another thing we had to do is make sure all the crowds had sounds.
So yeah, like, you know, New York City's great, lively, but it's full of people.
That's what makes it so lively in the first place.
So, we needed to make sure they all had the proper Wala and stuff, and 2D Wala was not going to cut it at all.
So for Sunset Overdrive...
we kind of developed a system called the Crowd Horde Emitter System.
So instead of Overdrive, you can basically fight and battle up to 40 different bots at one time.
So instead of them having all their individual emitters running at the same time, it was kind of hard to manage performance and sound-wise.
We kind of had a system where it would take about 5 to 10 people and it would basically find the center of mass and generate a 3D point source emitter and it would basically every couple frames it would just follow it and when the crowd would dissipate it would play a stop event and go away.
So that's kind of how it worked for this game.
It was really helpful for us because we were able to basically find crowds, place an emitter on it, it would follow it, and we'd take it away.
So here's a video of it being soloed.
If you look at the blue orbs in debug, you can kind of see where that static emitter is being drawn.
So you saw it's kind of coarse and sometimes it can spawn in kind of weird, unexpected places.
So instead of making the actual source that's playing on the emitter an actual mono sample, we had it stereo, it's mostly mono when you're farther away, but when we got closer it kind of spread to a more stereo quad image, so that when you were kind of closer to it, it kind of felt like it was enveloping you, which really helped to not only sell the size of the city and the crowd, but to kind of mask some of the imperfections in our system.
So our next thing we had to do is kind of come up with other diegetic 3D emitters.
So Spider-Man can be on the street level, everything is lively down there, but we kind of needed a way for the upper levels of the city to sound lively as well, because Spider-Man can swing, crawl, run, wherever he wants to go basically. So we kind of need more dynamics and also when you're swinging at mid to high levels we needed everything to kind of feel like it was moving.
We couldn't just sell that on our 3D ambience alone, in our 2D stuff.
So basically our easiest way to do this was to take every single HVAC in a window on a rooftop, rooftop vents, et cetera, and place audio emitters on them.
It was really helpful for us because our artists used Houdini to kind of populate everything out.
So we're kind of able to open up all these art prefabs, place our sounds in them, close them back up, and the game automatically updates them, which was cool, but there's a lot of these.
So we kind of needed a way to manage the voice count.
So basically our audio programmer at the time came up with a system.
where once we generate sound banks on these special emitters it actually recognizes the max attenuation settings so once you get outside of that range the engine actually shuts off and hibernates the emitter so Wwise isn't being pinged a lot and our engine has a much more manageable voice count as well.
So here's a video of that in action.
Again, if you look at the blue orbs of the sound emitters you can kind of see them going in and out depending on how close or far away you are.
So yeah, that was really helpful, because when that was not on, we crashed the game, and everyone hated us, so thanks, audio programmers.
So, you know, that was all cool and stuff, but we kind of needed a way to balance our 2D and 3D elements.
Not only our 3D faked elements, but also our diegetic stuff.
And it kind of took a while to strike that harmonious balance to make everything right.
It basically took us, from when I started, basically almost two years to really get that fine line between, you know, having our fake stuff and our real stuff sit together nicely.
And we kind of had issues with things sticking out too much, so we just kind of made everything flat.
turned it down and it kind of made everything fit nicely. So here's a video kind of showing the 3D elements that are diegetic only to kind of hear how the city sounds with all the real stuff and then halfway through I'll kind of unmute the 2D fake stuff to kind of hear how big it sounds.
So for the sound design and everything, you know, that was a good start, but we also needed a way to kind of make everything sit well in the world.
So one of the first things we needed to do was kind of fill up the space with reverb.
So No Space is complete without its reverb, and it kind of helped all of our sounds feel worldized, and also helped our city kind of feel more grounded as well.
So here's some quick stats for you.
Our open world in this game is six kilometers by three kilometers as its general size.
There's nine districts.
There's over 500 roads and over 1,200 alleyways.
There's 8,300 buildings.
So we needed a way to kind of make sure that all these alleys, courtyards, and other spaces were assigned the proper audio volumes.
So initially, I did these by hand, and it sucked really bad.
It took me about two to three days per district, and it was just time consuming, stressful, and did not make me very happy at all.
And any time that any geometry was adjusted, if buildings were moved and stuff, we basically had to redo everything from scratch, and it was not a good time.
So we kind of needed to find another solution for this because this was not sustainable in the long term at all.
So what we did was turn again to our technical art team who is great and we love them very much.
They already have all this data for how all the buildings are, what the spaces are between them and their shape, so they kind of use the space and measured it to kind of generate these volumes for us. And every time, you know, something would change, they would just regenerate it, it would take a few minutes and it would all be good.
So we kind of gave them a few parameters for size for alleys and courtyards and stuff, and every single, you know, type that we would generate in place, they would have a different reverb and delay assignment from Wwise to kind of give a different space. We also kind of use this.
to apply different Y states as well.
So every volume type, other than having reverb and delay settings that are different, also have a different Y state as well to kind of dynamically adjust the mix of the city and other sounds as well.
So here's a photo kind of of all of the streets and alleyways in our game from a bird's eye view.
And then here are all the volumes that were generated.
A few of these are hand placed, kind of the ones on the edge and some of the more bespoke areas.
But most of what you're seeing here is what was automatically generated from our team, which is super helpful.
So that's all fine and dandy, but we also needed a way to make our city kind of react to whatever's going on.
You know, the city can sound great, but it also needs to be dynamic and living and breathing, which makes New York City so special.
So, one of the first and most important things we had to figure out was making sure that our city was changing appropriately based on player position.
So basically, gameplay gave us this parameter of player height, and we would basically use that to kind of drive an RTPC in Wwise, and that would drive a bunch of different things, like blending between blend containers, it would do EQ, volume, reverb, and delay adjustment, and it would also change some various mix assets we would bring up and down.
For Y states as well, we had over 10 different categories of environment types, like parks, different alley types, and that was also further used to kind of push our mix in the game, to bring elements up and down.
So here's an example of a Y screenshot of one of our layers, and you can just see a few ways we're just taking our player height and doing some subtle things with the mix to kind of make it feel more realistic.
And it's not shown here, but also in the effects tab, we're doing some high shelving and low shelving as well with this RTPC.
So here's a quick video just kind of showing how the city will sound a little bit different depending on how high up you are.
And that's all continuous too, so there's no like on and off states that are happening.
Like if you move up and down, it's all dynamically happening in real time, mostly via RTPC.
So we also kind of needed a way for our districts to sound different, you know, we have our neighborhoods, we have our different pockets in the city.
So we kind of needed those to sound different as well.
So we kind of talked with the art team in Match Notes to see kind of what's your art Bible, what's your goal in this space, and how can we take that same idea and kind of apply it to our ambience and our different audio we have here.
So in our ambient bed, we had certain sounds play a lot more, or not at all in some cases, and we would do some subtle mix changes to make sure that like how the space felt from a visual standpoint was reflected in a very subconscious and subjective way on the art side, and the audio side as well. So...
For example, like in Harlem, it might be a little quieter because it's not as busy, but in Midtown, we would mix up a lot of elements.
Maybe in Hell's Kitchen, there's more construction happening so we would kind of make sure that it was all being represented properly.
And then we also had to make sure that our wallow beds were different as well.
Basically, we had our loop group actors come in and record in different languages to make sure that the wallow beds that happened in different areas, like Chinatown and in Harlem.
and in Hell's Kitchen kind of had a different sound and had different languages throughout.
We also made sure that our diegetic music that was playing on boom boxes, storefronts, and cars kind of had different genres as well, depending on what district you were in.
So another feature we had that was kind of cool, but also very subtle, was making sure that our city ambience was mixing differently depending on our activity level.
So what we kind of did was we had a programmer.
create the system for us that would basically draw this like radius around Spider-Man and inside it would count how many active pedestrians there were, kind of what they were doing and also all the ambient and active traffic vehicles. And we kind of used that to, you know, track this float value that they would give us and that float value would be passed to us as a wise RTPC and then that would kind of...
help us lean into stuff more.
So if the area around you is really busy, we could still rely on the diegetic sounds that were coming from those people in those cars, but actually being able to lean into it further and really push up our intensity layers in our bed to kind of help sell a fiction that this area is super populated, but if you kind of go a couple blocks down, it's emptier, it would really change the mix of the city.
And we could also adjust our thresholds, our radius sizes, and other things with the config and the engine that they set up for us as well.
So for our weather, it was pretty simple in our game.
We really only had day, night, rain, overcast.
So we kind of had to figure out how rain was gonna work in our game.
So of course, we had a 2D rain bed, but we also had some 3D assets as well.
So for our 2D rain bed, most games, your traversal's pretty limited, so you can only kind of walk, run, drive, et cetera.
but Spider-Man could go anywhere, so we had to make sure that our 2D rain bed reacted accordingly.
So we set up a raycast system for that, which I'll show you soon.
We also had to make sure that all of our 3D objects in the game were tagged with the correct surfaces.
So similar to earlier how we set up our static emitters on HVACs, rooftops and stuff, we had to make sure that umbrellas, trash cans, and other things were tagged with 3D rain emitters that would turn on when it was raining, and also were tagged with the correct material type as well.
So for our 2D rain, our audio programmer set up the system to where it points a ray cast from the hero to the ground, and as soon as that impact point happens, we get an RTPC that measures that distance, and basically we kind of drive the mix of the 2D rain with that as well.
So here's a video kind of showing that in action.
So it's pretty simple, you know, it's just mostly volume and EQ changes, but once it kind of sits in the rest of the city ambience, it really feels pretty nice.
So another one that was a little more subtle, just kind of time of day change.
So basically day and night was our biggest difference we kind of had to sell.
And this was a very subjective approach.
So basically daytime would be kind of the default city ambience, it would be very bright.
A lot of the more intense sizzly layers that had a sharper EQ spectrum, we would kind of mix those up during the day.
And at nighttime, we would kind of re-EQ a lot of the beds to kind of make sure that they were sounding more cold.
So we kind of introduced more like low mids into the mix to kind of make it feel emptier.
And we also changed our reverb and delay completely to kind of make sure that it kind of reflected how the city was a little bit emptier feeling.
We also turned certain things up, like dogs barking and cars racing at night to kind of give the flavor a little bit more of a different kind of vibe.
So, all that stuff was in, game sounded great, but we ran into a huge wall, which is performance in optimization, which is everyone's favorite subject.
So basically, a lot of times in our game, especially towards the end of the title development, we were kind of over limit a lot.
We only had 180, 190 megabytes to spare for the whole entire game.
And since the open world was loaded most of the time, we'd make sure that was fitting into memory.
So one of the first steps we did to kind of get in memory was switching from A-track 9 to AugVorbis, which was really helpful because that kind of made our overall RAM usage drop by about 10 megabytes, which for us was huge.
However.
This caused us to rise our CPU usage by about 12% from the engine having to decode the Vorbis stuff.
So we kind of put a lot of ambient elements that were being streamed in A-track 9 so they wouldn't have to be decoded, but they were being streamed anyways so they weren't taking up any memory at all for our resident memory.
And distant layers were also more compressed, so distant sirens that were more muffled, we just used a really aggressive compression ratio on those.
If they were being low-passed anyways, you wouldn't be able to tell those nasty artifacts, so that was a huge win for us as well.
We still had to kind of be, you know, smart with what was streaming and what was resonant.
If everything was streaming at once, we were also competing with quad music and a bunch of dialogue and everything that was happening in the world.
So we kind of had to make a lot of our things that would normally be streaming, we had to make those resonant.
So we kind of chopped up those longer loops into shorter segments and cross-shaded between them.
So this not only helped with variety, but kind of gave us more bang for our buck when it came to what was being loaded.
Unfortunately we had to sacrifice a lot of our more dynamic layers and kind of sum things together before they went into Wwise just because we couldn't run everything at the same time.
And like I said before, we couldn't do quad ambiences in our game because we had just too much streaming contention, so we basically had to make sure that everything was stereo but using our surround sound re-ribbon delay to kind of fill out those rear speakers.
So that's kind of how the ambience, fake and real stuff worked in our game.
I'll pass it off to Blake to talk about the cars.
So as you saw, Alex, when I came on, Alex was in the midst of putting together a really dynamic and layered ambient system.
But there was still one system, especially in terms of the actual interactable objects that really needed to be taken care of, and being New York, of course, that is cars.
There's a lot of cars in New York.
So cars became my first, like the vehicles, the traffic became my number one priority and first big task on the project.
So just creating that bridge between what Alex created in the 2D system and bringing that, like matching that with the actual cars you interact with on the street.
Just a quick overview of the traffic or ambient car system.
there can be up to 180 active cars at one time.
That's not including parked cars.
And I learned, Alon did a really great talk yesterday, and I think there's something in like four digits in terms of parked cars.
Thankfully for sound, we don't really need to do much for parked cars.
But 180 active vehicles, I'll get to how we worked with that because 180 is too much for us to be actively doing things.
classified into five car types, and the traffic vehicles essentially had four core sounds that they could make, being engines, the tire road noise, their brake squeals, and car horns.
The five car types we had were commercial, which is like your box trucks, delivery trucks, that kind of like diesel-y engine sounding stuff.
Compact and sedan were used pretty similarly and only had some variations in terms of the engines we used for them.
SUV class we used for the Sable kind of Humvee vehicles towards the end of the game.
And then electric were the taxis because Marvel's Manhattan is pretty eco-friendly and the taxis look like kind of electric vehicles.
So engines was definitely the biggest hurdle to overcome.
If you've ever worked in audio, and specifically with vehicles, you know that it's, especially dynamic vehicles, it's a challenge because an engine sound is a very complex sound.
If it's static, it does the same thing every time.
That's one thing, you can kind of bake what you want to use, but in the traffic system in Spider-Man, the vehicles can be interrupted and they stop and go any time.
So I started experimenting with a plug-in you may know it's for wise and other middleware called rev by crankcase audio and a granular synthesis based engine simulator So I was playing around with that in using it with our traffic system, and we all agreed that it sounded the best.
It was the best sounding option over using like loop-based audio.
But A, it's really CPU intensive, and obviously with the number of vehicles, that also throws another wrench in the system.
But I'll get to performance more later.
So we used nine Rev models, many of which were created and provided by the Audio Guys in the UK.
But we did use a loop-based system for the electric taxis because pretty much any non-classic, like gas engine sound, does not really work in Rev.
It's really just meant for that.
And then we used loops for the police sedans, because at the beginning of the game, there's like a ton, and to try to have rev instances on those.
Plus, they pretty much do the same thing every time, and they're not a focus, so it works to make those loop-based.
Oh, and just a note on Rev, it used about 1.5 to 2.5% of our audio CPU thread per instance.
So it was a little expensive.
So what I ended up doing for the engines was essentially faking a RPM curve over speed.
So on the X axis is the speed of the vehicle, Y axis is RPM.
Because these vehicles don't have any traditional physics you would expect in like a driving game or any game where vehicles are actually being driven by physics, I had to kind of fake things.
In terms of programming support, potentially you could get parameters that could fake the RPM accurately, but to do that on a large scale and just in the amount of time we had on the project, it just didn't make it in.
We weren't able to get something realistic.
What I did was fake this RPM curve.
Which ended up sounding pretty good.
You know, most of the time, you could never really tell.
And the only issue was when a vehicle would be constantly moving at a steady speed.
Especially if it was at, like, a higher RPM, because it just kind of sounded flat-lining.
But thankfully, in New York, there's a lot of traffic, so they're constantly starting and going.
Next, I'm gonna look a little bit at the brake squeal skids and horn honks.
They really provided a nice level of immersion and just kind of personality to the city.
So first, the horn honks.
So in this example, a sedan spawns into the city and the vehicle type is set to sedan and this is done on the model level.
So on each type of model, like the sedan, compact, et cetera.
the switch would automatically assign based on that.
And then we used what we called a random switch because we had this issue where you, the player is Spider-Man, you jump in front of this car and it would honk at you.
Okay, that's normal.
You'd move out of the way, it'd stop honking.
You move back in front of it five seconds later.
We have a completely different horn, you know.
And while we wanted the variety in, amongst sedans and compacts especially, because there are many different horn sounds in those car types, we needed to be persistent amongst the life of the vehicle.
So we got some programming to support, programming support to essentially create a, what we called a random switch.
It just randomly selects one switch out of a handful that you give it.
So, sets it to number three, so we can stay with a consistent sounding horn, but it'll still do a variety of different types of honks.
So at the heart, just an overview.
Honk start event, looks at the car type, checks the random switch, and plays the honk.
Just a side note, they will honk any time they're interrupted abruptly, and a very, very low probability if they're just stuck in normal New York traffic.
Next we're gonna look at brakes wheels.
In this situation a delivery truck spawns in.
The vehicle type is set to commercial and the random switch would also be set but not relevant in this case.
For our brake event, the first thing we look at on the engine side is the distance of the object causing the brake.
To give some granularity, we use this and speed, which I'll also get to in a moment.
So if the distance of the object from the vehicle was greater than x, I think it was around maybe like 10 meters, we would then play something much more subtle and slower like this.
However, if the vehicle, or if the object causing the brake was on a shorter distance, then we would look at the speed of the vehicle.
If it was moving pretty fast, we would give it something short, but pretty intense and a little louder, like that.
And if it was going slower, then we would just get a subtle little brake squeal, like that.
And to Brent, just in a cacophony of brake squeals.
we had to make sure there was kind of a threshold.
So we didn't play them for minute little movements.
So this guy's maybe wondering, hey, what about the tire noise?
You know, that's a big part of what we hear when cars are actually driving around.
It's not really the engine all the time.
So, when a vehicle spawns in, if it's moving, it will just automatically start playing the entire road noise, and it's a pretty simple system.
This is the RTPC graph of the sound on x-axis is the vehicle speed.
So, we had an issue where sometimes the vehicle would stop, but it would continue to play its sound, and we didn't have a ton of time to thoroughly debug the issue, so just as a fail-safe, we just dropped the volume to zero when the vehicle wasn't moving.
There's also some slight pitching up, not a whole lot.
Otherwise, it sounds weird.
And the purple line is also just a priority playback.
So it doesn't prioritize it if it's not moving or moving very fast.
We also have kind of like a wetness system on the ground.
So there's puddles in our game and on the road.
And when you would drive over any object really, we could send events.
So.
When you drove over a puddle, or not you, but a vehicle would drive over a puddle, it would send like a wetness value on an RTPC.
And you could do it with just like a switch system as well, but I just found this to be a little more granular and give me a little more control.
So it would send like hey, you know what you're driving over is wet and it would fade over to the right which is that kind of wet concrete wet asphalt kind of sound and Then go back to dry once it got off the puddle So that's most of the aspects of the ambient traffic system, but what about those crazy scripted vehicle moments where they're racing around the city, flying around turns, crashing into stuff?
We needed to do something extra for those vehicles.
And the first aspect of that was the tire squeals.
Now I wanted to create a dynamic system that kind of took care of itself amongst any situation that would, that the designers would throw at it.
Because they had the control of, you know, how fast a vehicle would go and, you know, the kind of angles it would go at.
And a lot of it was kind of auto-generated too.
So here's a look at a switch container, sorry, essentially the tire squeal sound, and on the x-axis is the curve of, or the angle of the curve of the vehicle.
So you can see if it's within plus or minus two degrees, it's not playing the sound at all, but as soon as it gets above that, it will activate the tire squeal sound.
Here's another view of the blend container which it's in.
And in the center there's a more subtle tire squeal sound and also some volume reduction.
And then on the outside you have a more intense tire squeal sound.
There are also different tire squeal sounds for different vehicles, so like the bigger box trucks had a little different sound than say a sedan.
Now the x-axis is showing vehicle speed, and so the pitch would be a little higher when the vehicle's going at higher speeds.
And also to prevent cars sounding like.
they're going crazy fast when they're not, this just prevented the chance if, sometimes designers would script in a vehicle to not be going that fast, and this made it so we wouldn't have to go in and mute it manually or something, or it would just be very subtle.
So that's volume on the versus speed.
Now here's an example video in a later part in the game where you can kind of get a sense for the tires wheels just doing their thing.
You can kind of hear them in just the subtle turns and the bigger turns varying with speed and such.
Next we're going to look at a classic sound that you expect to hear playing as Spider-Man swinging over Manhattan.
And that is, you know, that Doppler-Bi when you swing or move past something really fast.
So we got some great programming support on this to create an event where when Spider-Man is at the peak, or I guess, no, the bottom of his swing, an event is sent to nearby vehicles, or first it checks to see the closest vehicles to Spider-Man and it will choose, I think about three or four vehicles to send the event on.
And it'll play a baked Doppler sound.
So to visualize again, we would filter based on the vehicle type, so if we have a sedan here, and the event is fired on the sedan that Spider-Man is swinging over.
And it checks speed, because we wanted to have, when you're swinging a little faster, to get more intense doppler buys that are louder, and also the pitch change is stronger.
Checks it's a sedan, and it'll play something like this.
Then we also checked kind of that middle speed and might play something a little more subdued like this.
A little slower.
And we learned we also definitely needed to make sure we weren't playing them when you were below a certain speed.
Otherwise you could just hang there as Spider-Man and you would constantly be getting these dopper-by sounds as you're not moving at all.
Similar to the Doppler bias system, I was working on the scripted chase and crime system and the engines were in there, the tire squeals, all that stuff, but it just seemed to be missing something and I realized it's that feeling of motion as you're whizzing by cars parked and active.
So I put together a really terribly CPU heavy system and why is it just to get the idea across and to share it with a programmer to explain what I was going for.
And I just pitched that it was very similar to the Doppler by event, but we just needed it for the car chases.
So what we got was a system very similar where only when you're on a vehicle, attached to a vehicle, will this system activate? And it looks at both parked and active cars that you're going to be passing. And it'll just pick, um, and this gets fired off maybe every second, not too much because we were pretty tight on, you know, resource CPU and such at the time.
And it would pick, um, about three vehicles to send the event on.
And we were able to reuse the Doppler by events, and then for the parked cars was more of just a clean whoosh, not with like engine or horn in it.
So here's an example video.
It's pretty short, but in the beginning you'll hear, there's none of that movement, no that whiz by, and a few seconds in, it'll turn on.
And I don't think you'll hear it in surround, but it's extra great in surround, just FYI.
Lastly, to wrap things up on the vehicles, performance and optimization was a big issue.
Like I said, Rev was very heavy, and we really had to make sure we limited the playback of Rev.
This went back and forth a few times, because we found if the number was too low, and you were swinging over a very busy area of Manhattan, you would hear the vehicle engine pop in and out as it switched from virtual to actually playing back in Wwise.
And I believe we settled on around seven instances for the traffic vehicles, and it could potentially be more if it was the scripted vehicles.
Activating and deactivating the sound component on a tight race really helped us control this.
And similar to the static emitter system, but on the moving cars, we had a radius in which the sound component would turn on and off.
That way we didn't have 180 vehicles registered in Wwise at all times.
And yeah, which really helped with CPU.
We also found though that if you were at a higher elevation, you could be looking down at a street and seeing cars go by.
but you wouldn't hear them because it was below that threshold.
But the concern of having too many cars active at a time wasn't really an issue up there.
So the radius was essentially set on ground level.
So even if you were high up, you would still have a few cars active, which is really nice because it's quieter up above.
Act three also produced some issues where it's much quieter, there's far less cars on the street, and you could see a car coming down the street and it would just all of a sudden turn on, and then, or turn off if it was moving away from you.
And once again, because there's far less cars on the street, CPU wasn't really an issue there.
So we were able to change the radius and make it bigger for act three.
Not using rev for electric taxis was also very helpful.
And we just got a lot of memory savings from using rev because we didn't have to have a handful of loops saved for every type of engine we used.
Just to conclude, this is an example video of just walking around and swinging around New York City without the traffic sounds and then with them plopped in.
To be continued.
Devil May Cry II Devil May Cry 2 What if the game has where all of yourbefore that?
Devil May Cry 3 Devil May Cry 4 All right.
Hey, okay, so lastly, we're just gonna kind of show a little video kind of, you know, showing all the elements in the game in a final product, you know, in full mix with everything activated, just kind of showing different aspects we talked about with the vehicle sounds, crowds, and ambience.
This is a little, you know, end cap for this.
I tried catching it a lot of times, I suck at playing the game, so it was a little sloppy, sorry.
So that kind of does it for us.
Just wanted to thank all these people.
So Insomniac Games, obviously, for making this game happen.
All these great teams, programmers, developers, everyone on the team, super helpful.
Sony Interactive Entertainment for not only helping us make this game, but providing so many incredible sound services for us.
Marvel for literally inventing Spider-Man, but also just being a great resource for us and being there for us.
And Audio Kinetic just for making Wwise, which we all love.
Here's our Twitters, pretty easy to find us on there.
So it'd be cool if we could chat, all that stuff.
Yeah, thanks for coming out everyone.
We have some time left, like 10 minutes, so if you have any questions, we can do a Q&A.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
great job guys uh I had a quick question about how you managed uh rev instances uh did you end up needing to have a fallback for if you you know wanted a car to make sound but didn't have enough instances did you need to fall back to a looping system or were you able to just be like no like it's not important like focus is is fine so don't play anything.
Yeah, that's a good question.
I was talking to someone yesterday about this with kind of like, I think a lot of games might use a LOD system where at a distance it moves to loops, kind of what you're saying.
New York is just so dang loud that it was never really an issue, except for Act 3, like I said.
I think if it was something that we did here more like, like I said, from above it was potentially an issue, but then we fixed that by moving the radius to where they could be heard down below.
And with Alex's system where you kind of hear tire squeals and this and that around the city, I'm sure you could find moments where you're like, oh yeah, I don't think I quite hear that engine.
But then again, I've spent a lot of time just listening to traffic on the street and whatnot.
And engines don't really make that much sound unless someone's really gunning it too.
So that, yeah, that was kind of our solution there.
Good question.
Kind of adding to that, I just feel like a lot of games have a lower noise floor, you know, because of the location, but for this game we were able to get away with a lot of stupid stuff just because it was so loud all the time, but also it's like, you know, we had to mix it down, so it was never really meant to be the main focus because it was just supposed to be in the background.
So even if it sounds loud up here, in the game's mix it's actually pretty low.
Hi, thank you for the talk, it was awesome.
I was curious if, because you have a lot of stuff going on in Wwise, like the RTPC stuff, and then like just pulling out sounds and then putting them back in, was there one specific thing, whether for the vehicles or the ambience, that was like really kinda kicked your butt and you were having trouble getting it to sound right, and what did you do to go about fixing that or making it do what you wanted it to do?
Engines were definitely tough.
Like I said, the biggest challenge was it's not a racing game.
So I don't just readily have the RPM value being passed to me, or the throttle, things like that.
I was able to get acceleration just for the scripted vehicles, which gave me a little more control.
I'm trying to think what other...
Oh, we had a weird instance where squirrels actually were, like, crashing the game.
Yeah.
So yeah, I just found these cute little squirrel cheeps, or whatever sound they make, and put them on.
And hey, I realized there are a ton of squirrels in this game.
They're like everywhere.
So I had to really reduce how often you would hear them.
But there was a, I think it was just kind of some old code that was, the way it was deactivating or activating the sound source was like pinging Ys really hard.
Oh yeah, that was fun.
So there was a bug we had for a while where basically like whenever a sound instance would be generated on a crowd or a person, it would just never go away, ever.
So you would look behind you with all of them activated, you can just see this trail of like all these emitters and like Ys would crash after like a couple minutes.
Yeah, I think for me personally, the biggest challenge is kind of getting that dichotomy just working of like, this city needs to sound huge and we got constant feedback, it needs to be busier, it needs to be louder, but also making sure that everything is just out of the way, because this game is very busy, there's a lot of swinging, combat, you know, the music is very bombastic and cinematic as well, and also there's a lot of cinematics.
in the game, we had to make sure that everything kind of sounded really huge, but also was never fatiguing, never in the way, in a way that the player would never really pick out you mixing these things.
So I think that was just kind of the biggest challenge for us, at least me in particular.
All right, thank you very much.
I love the game.
Thank you.
Hey guys, great job in bringing the city to life.
It really feels well done.
I wanted to ask if you had any...
issues that you had to adjust everything that you had set when the action would ramp up and be bigger and more bombastic like you were saying?
Yeah, so we didn't really talk about it very much in this because it's kind of a whole other subject in this game, but we had a ton of mixing systems.
Some of them were a little bit more simple, like states that would come on and off, but we also had a lot of side chaining too, so we didn't use HDR for this game because Well, by the time we had that idea, it was too late.
It would have sucked.
So we basically just used the WiseMeter plug-in and side chaining to kind of manage all that stuff.
So the Ambient City bed bus had so many people from different buses and states and everything just taking it down for impacts.
Even the music too would take it down a little bit.
And we also had these states that would come on and cinematics that would kind of neutralize the ambience in like really different ways and turn it down slightly so it doesn't get in the way.
Also whenever you're in combat, the city goes way down so you can just focus only on like, you know, the action.
Excellent, thanks.
You just answered the question I was gonna ask about cinematics.
Sorry, yeah.
Is there anything else you'd like to add to that?
Like if you have like a really crazy busy city scene and then it's like a cinematics and maybe it's like an emotional beat that you just need to.
Yeah, so basically there's only three states for cinematics.
It was like default, which we used 99% of the time.
We had our extra heavy state, which is only used once in the entire game.
And our light state, which is only used once the entire game.
So there's one state.
literally took care of it the entire game.
It was a very awesome kind of one size fits all solution that was living in our kind of global audio script that was always loaded and just had like a little relay.
So whenever we wanted to like call it, we just go into our like, you know, cinematic scripts or go to our level script and just kind of add a call back to the state, turning it on and off.
And instead of just kind of simply turning down the bed, which would have worked, there was a definite like obvious fade happening as soon as you get into a cinematic, which was kind of jarring.
So it kind of worked on a bunch of different levels.
I think that state was present on over 20 different sounds in buses and actor mixers individually to kind of do this thing where the actual feeling of the bed is still there, so there's really not an apparent dip in volume.
but it strips out a lot of the more distracting elements.
Like, all the close ones, basically, like the bustle layer kind of went away completely.
But then all the things like horns, and like the brake squeals, and more aggressive distracting elements would come down quite a bit, but you'd still hear it in the background.
And the sirens and things that were a little bit softer would still kind of be at the similar volume.
But then all of the 3D objects that were diegetic, like music would go all the way down for boomboxes, cars would be a lot lower, and kind of all that stuff would kind of be just like...
mixed in a way where it was just working.
And it would also be a little bit less so, higher up, so a lot of the high elements were naturally quiet or would not be dipped as much.
So it kind of just felt like a natural, like, you know, neutralization of the ambience.
Nice, thanks.
All right, I think that does it.
So thank you guys for coming out so early, I appreciate it, and have a good GDC.
