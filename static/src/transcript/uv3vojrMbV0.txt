I have a lot to talk about, so I'm going to start now.
This is a huge amount of information I'm going to pop at you.
I basically theme this talk around development versus live.
I could give a whole nother talk on live, too, which I may do next year.
And the reason I do that is because I think a lot of the problems that I see in live are caused by production problems.
And so what I want to cover today is more focused on that.
Now this is probably one of the hardest presentations I've done because in an hour to talk about everything about gains of the service is almost impossible that I've learned in the past 20 years doing it.
But I picked up some things that I bubbled up based on what I call patterns, mistakes that people continually make.
So the first thing I'm going to do is this is a statement I said in 1998.
It's a service, not a game that you're making.
And I think it's really important as you're developing the game that it's a service as well.
So the game, I always refer to this as the iceberg theory.
The game is right up above.
And what people don't realize when they get into this is there's a whole bunch of things below that are huge, invisible to the player, but very important because if you don't do any of those things right, you're going to have a bad player experience at launch.
So as you see on this list, there's tons of things that have to be built around your game.
that makes it a very complex piece.
I would say games as a service is probably the most complex thing any developer can build.
This is another theme that I have throughout my presentation that's extremely important.
It's not a sprint, it's a marathon.
Everything you do in development will affect you in live some way, somehow.
Some are good, some are bad.
It's how we handle things like pre-production.
You don't want to sprint through pre-production when you're building games as a service.
But a lot of people do, because they want to get into things as fast as possible.
It's how you treat production as well.
And I'll talk about that later.
The whole thing about marketing and PR, a great story about this was with Swotor.
We launched Swotor, and EA's marketing department says, oh, we're done.
What?
No, no, no.
We do this as beats.
You only did one little part of the beat.
We're open now.
Now we have to do a whole bunch of beats of how we're going to market and get user acquisition and awareness.
And community management is another one.
You have to be in this for the long haul.
This is probably one of the biggest things I've seen as a pattern that people don't realize is when you launch a service, it's live, it's there.
You have a lot of people playing that game.
And if you don't maintain it, people are going to leave, especially the competitiveness that's out there today, especially today.
One of the things I saw.
On Swotor, EA made a decision on Swotor to pull it down in favor of Anthem without replacing the people they were pulling down on.
They made a million dollars a person for every person that was on Swotor, made a million dollars.
And they were generating over $200 million in revenue, but the fact is their next project, which is a new thing, over here was pulling people away and they weren't backfilling.
So now that product is going down a lot, has been for two years.
That's, every investment you make on that product, every dollar you put in, you'll make 50 cents easily on it, versus something over here that's an unknown brand new IP.
What I would have done as that game, I would have invested in that game, put it on console and easily probably pumped in 300 million dollars a year, which is not insignificant.
And that's what I mean by you're in it for the long haul.
I look at building online games as a service as like the Apollo program.
It's amazing how that thing launched, if you think about it.
It's amazing how games as a service games launch.
When you think about all the complexity I showed you earlier under the iceberg, everything has to be working right, everything has to be asynchronous, everything has to apply well to run a service well and to make the revenue that you want.
Lots of moving parts, basically.
My first lesson that I'm going to talk about is short-term versus long-term thinking.
This is the one I always preach about.
And I'm sorry if I sound like a servant here.
This is the one I always preach about, because this is the one that most people don't get when they're building games in the service.
As I said before, everything you decide in the game as you're building it will affect you somehow in live.
It is a fact.
I've seen things like tech debt, I've seen design debt, that are very hard to get back once you go live.
And we'll talk about that a little later.
Systems, as you're developing game systems, or any systems that you're working on, it has to be simple, scalable, extensible, secure, and stable.
Those are the words I use all the time when I look at game systems, when I look at any other thing that supports the Games as a Service platform.
Is it simple?
When you develop complex game systems that have multiple global variables that call over the place and you're not sure what happens, you can fix something in live and break something else.
You can fix a bug in live and break multiple bugs in live.
Secure is another one.
Whatever you do, you can't trust the client.
Whatever you do has to be validated by the server.
A lot of times I see in teams and when they're developing games of service, they become short-sighted and that's why I talk about short-term decisions because they want to get things done, they're under a tight schedule, a tight deadline and they make decisions and I say, wait a minute, you make that decision, you're going to have this effect when you go live and it's real and sometimes they don't see that and that's why I call it being short-sighted.
When I talk about that, asset pipelines is a great one.
You have to develop a cadence at live, a delivering content at a certain pace, as well as features.
You better make sure your asset pipelines are lean and mean.
You don't want characters to take five months to develop.
You want characters to take far less time to develop.
Don't overcomplex things.
Make sure you have solid asset pipelines for one, if you're doing free to play game, to make sure you can stock your store up appropriately.
Two, if you're making a premium plus game, when I call premium plus, I'm talking about you charge retail and then microtransactions afterwards, is you gotta make sure that you always have content available.
after you launch.
It's extremely important.
Look at the cadence on Fortnite.
That's a great example of good pipelines working.
Technology choices matter.
Everything you choose and select in development will affect you in live, including the engine you use and the technology you have behind the server and the platform.
Be very careful of those choices.
To refer back to what I said earlier, scalable is very important and stable.
Getting the core loops and the metagame right for a session-based game, okay, for a virtual world, the elder game, you want to call it that.
These things are really important to take your time and get them right.
Don't move past them.
Monetization is another one.
Think about what type of product you're building, what type of audience you're building on, what platform you're building on, because console and PC are different than mobile.
A good case study is Swotor.
In Swotor, we're going to make a BioWare game online.
If you know how much content is in a BioWare game, that should scare the hell out of you.
It did me when I first was told about this.
We decided that we had a choice between two engines at that time, one Hero engine and the Big World engine.
Well, we chose the Hero Blade engine.
That was a very, very bad choice.
That caused lots of issues.
I actually wanted the other engine, because it was more like UO.
And UO is something I was used to, and I knew it could scale.
I was very concerned about this choice, and it came true.
What we had to do on this list, the tech debt that we gathered for that was so huge that I literally had to stop work on it.
get a whole bunch of TDs to look at where we are, and figure out how we get this thing finished to make an online game work.
And what that did is it took away programmers from the system side of the game.
We could develop content, but not the systems.
The problem is you need a good balance of content and game systems so you can have emergent game behavior and the stickiness that's important.
As well as technology, especially since that was an MMO, that you can do character transfer, you can do collapsing of servers if you need to without the players knowing about it.
That stuff didn't exist at launch because of the massive tech debt that we had.
And it slows your ability to update, which is critical for you for sustaining players.
And one of the things I've learned by that decision, it cost us big time in live.
So be careful what you choose.
Finding the right cadence.
This is another one.
As you're developing games as a service, because of the amount of content you have to deliver at launch, You really have to be careful about driving the team.
Continuous acceleration is not a good thing for games of the service, because one of the things as versus a single player product is, it's opening night. You're just starting when you launch this thing. You can't take a break, as we said. Excuse me.
It will cause burnout.
I have done this a couple of times, and I learned my big lesson about burnout.
You can't take time off the ship.
People are tired.
They're not making good decisions.
They basically will leave, actually.
What I've learned is when and how to accelerate.
And what I did is I divided my schedule up into releases, and pretty much these are gates, we call it today.
But remember, this is 2011, 2009.
I developed some gates.
Everyone knows what the gates are.
They're pretty much standard today.
Your first playable, your vertical slices.
I actually do more than one vertical slice in games of the service.
And at those points, I release.
But one of the things, if I ask people to put in the extra effort when it's necessary, I have clear goals for everyone on the team.
They know what they need to build.
I establish clear guidelines, and it's voluntary.
Because if you don't, again, you run the risk of burning out.
You have to be very, very careful about how you do.
One of the other things is how to release.
One of the things I've learned on that is after about halfway through.
A development, you should do a game jam.
Game jam is two weeks.
Do anything you want.
Anybody can do it.
Anybody can get together with anybody else in the team.
You have two weeks to put something together that can be used in the game.
You could get more done in that two weeks than you have in months.
It also re-energizes the team midway through.
Highly recommend you do that.
I also start hiring DevOps and LiveOps well before we launch, go into beta testing because you want to buffer the team that's currently working there.
You have to buffer them through test.
And I usually rotate people out of DevOps for a reason because I want them to be able to feel the pain that DevOps has during testing if they need to.
So I rotate them around.
With UO and SWIG, one of the things I've learned is you could see the massive amount of crunching that I did.
UO was in horrible shape when I came on board.
It had to be crunched.
And because of that, I had no choice.
But it was awful.
It was nine months of crunch, and then nine months afterwards.
We had a team of 64.
I think we went down to 12, and then went down to eight.
people for running that kind of franchise.
That's how burned out people were.
We had no live ops, dev ops, or anything like that then.
We all, everybody on the team had to bear the burden of working 24 by seven.
SWIG, because we were under massive time constraints, we basically had to crunch the team as well.
And I learned my lesson a lot from that.
I'll never ever do that again.
It's wrong and I learned how to set tempos and schedules for the releases.
It's just something to try to avoid.
One of the things I did with Swotor, which is a good thing, I didn't crunch the team like that in Swotor at all.
And it was a huge team, 550 people.
And what I did was I actually had better planning.
That's why I started out with a start.
I had a release roadmap for the product.
Every six months, I went bottoms up on the schedule.
I defined what the MVP was.
I triaged all the releases to that MVP.
I added producers.
I broke the team up, since it was 550 people, into 32 autonomous teams that worked on different parts of it.
I established a technical review board, and I built dev apps, live apps early.
All that created the way of actually pacing the team where I did not have to do any long-term crunch at all.
There was very little at all putting in effort to get the game up, which I was very proud of.
So it does work.
One of the biggest things that I see is not enough pre-pro.
I don't think anybody would love to see their house foundation rushed.
I know I wouldn't.
That's what you do when you push through pre-pro.
I've seen so many times people going too wide, too fast.
That is something that's very common.
Don't do that.
Take the time that you need to get your core looped, in particular, your core loop, your moment-to-moment gameplay, your inner loops, working really well before you move on to the meta or before you move on to anything else in the game.
Case study was Battlecry.
Battlecry was a brawler game that I worked on with Bethesda.
We were trying to do an online brawler.
game. No one's ever done that before, fighting game. And lots of risks. But one of the things we did is we moved through pre-production way too fast. We had blockouts on our levels.
We had what I call crash test dummies for our characters. We only put three classes.
We had a total of five. We should have put all five classes in and worked out that moment to moment before we arted it up and made it look pretty.
And what happened was we lost the core loop just wasn't there when we needed it.
And it just haunted us.
Content treadmill.
This is another one.
It takes a lot of effort to build these games.
These games take a long time to make and to build.
And the content side is the reason.
One of the problems I had with Swotor at the start is we wanted to build a Bioware game and we wanted to have voice over on all the NPCs.
So we had 200, we wanted to build 200 hours of content per class.
There were 18, 8 classes so you know that's 1,600 hours of content.
We wanted 185, it would work out to be about 185,000 lines of dialogue, 4,000 cinematics.
The first thing I thought was, how are we going to get this done?
And what I did, I talked about this earlier, is I broke the team down.
It broke as we were scaling.
We scaled from 80 to 200.
It didn't, from 80 to 150, it broke.
I had to redo the way we're planning, the way the whole organization worked.
It just fell apart.
We went from 150 to 250, it fell apart again.
I stopped for two weeks and said, no one else is doing anything.
We're gonna stop right now and figure out how to proceed in a way that we can be successful in scale.
So what I found out is I broke it down to small autonomous teams that work together, they're interdisciplinary, I broke down my tech because it was a hundred programmers, I broke down my tech into seven TDs that watched different aspects of the game in real time and they had responsibilities.
I had people sit who had dependencies on each other, autonomous groups that had dependencies on them, sit close to each other.
I had weekly scrum of scrums and I did dailies.
So when I did dailies, the thing I said is it takes five minutes to write, one minute to read.
That's really important because I don't want a thesis.
I just want to know what people are doing.
Now, why did I do dailies?
Dailies were awesome because it allowed the producers to see what people were doing inside all the 550 people in the studio and allows us to look at, well, wait a minute, why is he working on this?
He's supposed to be working on that because there's so many things going on at once.
It gives you that micro-level detail that's important.
So, the other thing I did, was I hired contractors, a lot of them.
I had 150 contractors on that project.
I found a CodeDev partners.
I had people in St. Petersburg working on it.
I had people in Asia working on it.
I had people up in Virginia working on it.
And the course EA, one of the great things about working EA, they do have a fire hose, the people hose.
And I had the people hose access.
I don't like the people-holds access.
I learned that that's really hard to scale very quickly.
And that's what actually broke the last time.
I had the people-holds turned on full blast.
I said, whoa, stop.
We're breaking.
And I outsourced large pieces of audio and art.
That worked out really well.
I had a core team of artists that did reviews.
That also did art, the more complicated iterative art, but it also had a ton of outsourcing done on characters, weapons, and all the customization.
So that's how we got that done.
Now, what I've learned through doing this so many times is you really have to start generating your content for launch.
If you want things at D1, D5, D30, D90, or D60, you really need to start that before you ship.
That's really hard, by the way.
That's not an easy task because you're on fire before ship anyway.
And so, but you have to ring fence some small teams, not big ones, small teams to get the starting point for doing your small updates to your monthly updates to your quarterly updates.
And then you've got to leave the dev team alone once they ship.
They should start planning what the big update's going to be.
That works well.
That goes into another topic is your heartbeat.
When I talk about your heartbeat, I'm talking about how quickly you can respond to fixing something, how quickly you can update and move content to the users, to the players.
It's critical.
What affects your heartbeat?
Your patch size.
I've seen some things lately that blows me away.
When I see a D1 patch bigger than the game, I go, what the hell is going on?
You have to look, as building development games and servers, you have to get discipline on your patch sizes.
Because people don't have the time to wait for an hour or so to get a patch down.
Think about that.
You lose people.
The more friction you put in front of the people, the funnel, the more they may just say, hey, I'm gonna go play Fortnite.
I'm gonna go play Division.
You know, there's tons of things out there to play.
Complexity of your art assets.
How quickly you can get new weapons, new effects, new animations, new character stuff, new characters.
Systems design, how quickly you can get things updated in the game and out there is critical.
Your pipelines, and I'm not just talking about art, I'm talking about design as well.
Branching is another one.
Branching is critical.
There are a lot of friction when some people use certain engines for branching.
I'm very experienced with that one.
You have to think about how you're going to branch when you're live because if you're on multiple platforms, you have to have multiple SKUs, and you have to have multiple branches.
You also have to have, as I said, continuous stream of content being developed by three or four different groups as you're working through live.
And you have to keep.
Your main line, which is your main thing that you or the players have, you never want to touch that because if you ever mess that up, you have to repatch the game.
That you never want to do, trust me.
And your build system, how quickly you can deploy and build something.
I'll talk about one thing that people don't think about a lot until they're up against it.
It's hot fixes.
These are emergency fixes that you have to do in live.
This takes development time before you launch live.
A partial build should take no more than 45 minutes to build.
A full build should not take more than four hours.
By the way, a lot of people I've seen do this, our build takes 32 hours.
No.
OK, we got it down to 24.
No.
We got it down to eight.
No.
You need to be four hours.
because you don't know what you're going to have to deal with on executables when you're in live.
Deploy should take less than six hours, so you better have a good QA process on top of that.
85% of the fixes in order to make this happen are on the server, not the client.
And they don't revolve changing the executables.
Sorry.
How is that done?
The data is stored on the server.
Design systems are data driven.
This is one mistake I've seen over and over and over again about people not developing tools.
for development in design where they have an advancement tree.
And by the way, it should not be done in Excel.
It should be done in something that can scale, especially a store.
When you're dealing with empty microtransactions, you better make sure you don't put all your items in an Excel spreadsheet because Excel won't be able to handle it after a certain point in time.
Automated QA.
How many people have estates or computer programmers who do QA?
See, those are lifesavers and necessary because you know what?
If you make a hotfix, can you check it in time?
You better have some automated tools to help you white-glove it to see if it works.
A scripting language is one way to help.
when you're developing game systems to be able to make fixes on the fly without recompiling the servers.
It should be seamless to the user basically, or the hot fix should be.
What does a cadence look like when you're live?
You should do weekly patches.
Whether you're fixing bugs, store updates, small additions, what I call breadcrumbs to your next kind of beat, they're important.
Monthly patches, weapons, abilities, level, whatever you decide.
These types of things, you look at Fortnite, they're getting it.
Quarterly, seasonal.
Seasons are a great thing.
New levels, new characters, new models.
Anything you can think of that fits kind of a nice big, not a huge update, but a nice little tick on the register to get users to come back, quarterlies.
Large content features should take no longer than six to eight months.
Sometimes you can wait a little longer to a year.
But if you wait longer, they should be really, really big.
The next topic I'm going to talk about is transitioning into live, into testing.
You've done this throughout the development process.
Your focus tests, what I call tissue testing, is basically getting in people that you can just throw away easily to test the game.
They're an awesome thing to do.
And internal playtesting.
I believe that everyone that's working on the game should playtest the game, and I actually have mandatory playtests to make that happen.
Because if you don't, people won't.
People need to play what they make.
I don't care if you're an artist.
I don't care if you're a designer.
I don't care if you're a programmer.
You need to sit down and play the game.
Now, when you start going to test, you have three more loops coming in to play.
You have community players.
You have the customer support loop near the end.
And you have the KPIs.
When you're building a live services group, this is when you start.
When you start going, right before you start, when you're ready to go into test, you start building all these elements out.
Not all of them need to be fully flushed, but you need to start building these services out.
Now, what I usually do is I use DevOps and LiveOps to buffer the dev team before we launch.
Because what's going to happen is you're going to get a lot of feedback when you start testing, external testing.
that you didn't get when you internal test.
Internal test is not going to get you the same thing that external testers have.
Don't make that mistake that think you can do an internal testing group that's a QA group.
Now, if you have a company that has over a million employees or more, or you can get a million players to play, then yes, that's a great sample set.
And yes, you should do it that way internally.
If you don't.
which most people don't, you're going to get different feedback than if you were, even with internal, I'd say, with a company that big, having going out is even better because it's more randomized and it's not as biased.
But you're going to find things come up.
And you're going to have to balance and triage all the things you're finding out while you're testing the game to what you're building.
in test. And that's the hard part. So I have DevOps and LiveOps buffer the team enough so they can do their work to finish the game. Now, things have changed once you get into test. Everything has changed on how you release the game, how you make updates. You're branching now off a mainline.
You're triaging every release.
You're writing patch notes.
Community management is totally involved in this now.
And so, this is the phase in closed beta where you're starting to act like a live team.
And all these things are done, need to be done, and this is where you get the team acting like a live team.
Transitioning a team from development to live is hard.
Every time I've done this, a lot of people haven't been there and they don't understand it until they are.
And so this is a time to start training them, putting training wheels on them before you launch.
If you look at the development process, it's now a loop.
You're sitting there, you're going through pre-production on your stuff, and by the way, pre-production just doesn't happen in the beginning.
On a Games as a Service, it happens all the way through development.
You're constantly doing pre-pro on things.
Features to content, good example, you build a new level, you block it out first, you play test it, then you start putting in your level zero to level three to level four type of assets, all going to final.
And so this is this feedback loop I was talking about.
Now that you're starting it.
Now you start to act like a live development process.
This is maybe basic to people, but I feel like I need to somewhat go under this a little bit, go over this a little bit.
I'll try to get through this quickly.
Closed beta, I use closed beta.
It basically means that you have a key and you're invited to it.
It's used to validate what you have.
You can do a lot of focus testing for UR, UI.
and usability, that's awesome.
But for the way the game feels and plays, I think this is really where you're gonna get.
the validation because I've done a lot of focus tests that have been somewhat biased.
The data that I got there versus the data I got when I went live was surprisingly different.
And so this is a time where you validate your assumptions because that's what they are and you drive to figure out what works, what doesn't work.
And this validation is very important to figure out if you have a fun, engaging game.
That's what closed beta is about.
Is it fun?
Is it engaging?
What I usually do is I start out with 5k.
get to 10, 20, and then 100.
That's kind of like a good sample size, in my opinion, for a closed beta session.
It's good enough.
If you can get higher, that's great.
In fact, I recommend it.
One of the hardest things, by the way, to scale, especially if you're doing your first games of the service, is how many players you have on the server.
It's really hard to break that 100.
It is very painful.
Once you break the 100, getting to the next 1,000 is hard.
Getting to 5,000 is hard.
Once you start breaking above 50 to 100, things are a lot easier.
What happens, I warn people about, is when you start hitting 200, PCU is when things start popping again.
Closed beta is all about balancing and tuning the content as well.
It's about the virtual currency, especially if you're doing, and most people who do games as a service has some kind of revenue model.
Most of it is either premium plus or free to play.
And so you want to make sure your virtual economy is working well before you start charging people real money.
So that's important.
Player wipes are possible during this phase, and I want to warn you about that.
Every time you do a player wipe, you're going to have a problem with retention.
So be careful with that one.
Telemetry is very important.
By the way, designers always ask for a list that's 18 pages long, and I laugh at it.
And I said, cull it down.
Pick your top.
Because you can get really bogged down in data if you're not careful and not have the capability of storing it all.
It's not 24 by 7.
I usually don't run these things 24 by 7.
They should last six to eight months.
Anybody that does it less than that is asking for serious problems at launch.
especially for an online persistent world game, even a session-based game.
Online games are complex.
They need the time to work through the gates of how many PCU, of how your technology will scale.
It needs the gates of how your design and game systems will scale.
You need those gates.
And closed beta is where you practice and go through that.
Open beta doesn't have to be that long.
Open beta is really tried before you buy.
It is, you better make sure that game is extremely polished.
Really what you're doing in closed beta, open beta is seeing how far you can scale beyond your PCU limits.
It's really push it hard because you want to make sure that that thing's going to break, it's going to break then.
and how your patching and distribution is working, how all your monetization is working.
You actually turn on the storefront for the first time for the players.
You do that earlier, later in closed beta, but really out there now.
There's a tendency to have to refund, by the way, in tests.
You should make that very clear to your player base.
Try not to, but there's always that tendency of rebalancing.
And I usually start out.
with limited sessions and go near the end to full-blown open.
You need to practice that full-blown 24 hours to see where your memory leaks are, your CPU utilization, and everything else at scale.
So it's important to get to that point.
The reason I do durations at the beginning is so I can get mass amount of people in at once.
Because if you have it open, you will see your curve start driving down, your PCU curve.
And so what I want to do is close it.
open it up for a weekend and get that mass rush in.
This is another thing I want to talk about.
There's lots of ways of measuring KPIs in a game, but they're extremely important.
Game design, for instance, you have a lot of telemetry.
These are the things you're looking at with the telemetry on game design.
They're just as important as your business KPIs, by the way.
And they will develop KPIs of their own for design.
What they do is they set the goal post.
for all your phases of test.
So what you should do before you go into closed beta is, when should we go into closed beta, we have to meet these key indicators.
When we go from closed beta to open beta, we make sure that we have these key indicators.
Sorry.
These are the key indicators that I look at.
Ratio to invites to logins, you can read the list here.
The D1 is really important when you're in closed beta.
How many people come back at D7 to play your game that went in from D1?
How many people after 15 days, and I try to keep it up at least 15 days on closed beta at once to see how I'm tracking there.
I occasionally have a test server, which I set up, and I'm open to all the time, but I have exclusive invites into that test server.
so that I have a sub-sample of people playing so I can get my D30 going on.
And that test server, by the way, is something I don't see many people do, but I highly recommend that goes out in live too.
It's where you put your latest stuff on.
Yes, the user has to patch a new client to play it, but it's so worth it.
You don't have a lot of testers testing there, but the amount of testers you have and the feedback loops you get are amazing.
It's well worth it.
And if anybody understands what k-factor is, k-factor is the viralness.
This is really a key indicator as I'm moving towards open beta.
The first question I ask is how many people would recommend a friend to play this game?
And if I get a high percentage of people saying yes, that's a good sign.
A lot of times people say if you don't get over 90%, everything else is irrelevant.
To say that I would recommend to a friend.
In Swotor, I did this and 80%, 85% of the people said I'd recommend it to a friend.
That was a good indicator for me.
K-Factor is another one is how many keys I give out to friends, because I always put friends keys in there.
How many friends are playing that actually got the keys and logging in.
That's a good sign to track.
Predictive analytics, I can't talk about this enough.
I had it in Swotor for the first time, and this is in 2011.
I had forecasting models built.
I had trend analysis being done.
I actually had some people from USC come into my data that I was collecting in live and do machine learning for me.
And they would predict.
For example, in Swotor, we had farming problems.
They wrote a machine algorithm that tracked how farmers were doing things and learned from that and would temporarily ban all the farmers.
When we put that in, 85% of the farmers went away.
85%. Today, this should be common.
Anything you should do, try to use machine learning to do it.
Another one they did was predictive churn.
They could predict through player patterns when people would churn out.
That was awesome.
It would initiate a CRM, Customer Relations Management System, would put out an email to go tag that person, say, hey, come back, or what's wrong with a survey.
All automated.
Another one is if you want to do things like bots.
Bots are big.
Bots can ruin experience on a session-based first-person shooter type of game.
If you could do machine learning to automatically temporarily ban those people and have CS be called, that is well worth doing.
Anything that affects the player in any bad way for bad behavior, You should automate today because you can.
I didn't have that ability on UO and SWIG.
I started it in SWOTOR and I see where it's going now and all the talks being done about it.
Definitely look into that.
It's well worth it.
One of the things I talk about and then I'm going to blast through this is what you need to have for live.
Look at the list here.
You need to have the ability to record bugs in the game.
A lot of people forget about that.
No, you need to have the ability to automatically build a system where you have a slash bug or something like that.
They automatically get routed to a specific place that QA can look at and validate.
You better be able to have surveys in the game that you can pop up after a mission, after an encounter to see if they liked it or not.
Do that. All the community management tools, you define your KPIs.
This all should be done before you open up for closed beta.
It's the same thing for your survey, your website, your virtual store needs to be operational.
An escalation plan for community and for live.
What do I mean by that?
If something happens, you need to have a plan to deal with it.
Open beta.
MTX Storefront should be live and operational.
Everything should be working like it does, and this is in closed beta, that you're launching everything in the cloud, all your platform connections, everything should be fully functional by open beta.
And that is in closed beta, by the way, as well.
CRM tools, CS tools should be all online.
Scenarios for community management is real important.
I did scenarios with legal to say, what if this happens?
What should we say?
Let me tell you how valuable that is.
You, as a community management team, could be caught.
Because when something bad happens on a service, it goes to all the media.
If you have a reactionary plan in place that you can immediately comment on without legal review or executive review, that is a very good thing to have.
Because if you don't, and they take a long time for someone to respond to that, it just inflames the community.
Again, community management.
I'll just say one thing about community management.
You're in an emotional relationship with your community.
It is important to not treat them like PR piece.
A PR person talking to them, talk to them honestly, openly.
Talk to them not like you're doing a PR beat type of thing.
That's where a lot of single player products, companies get involved in the community management, is they do it like PR beats.
No, you have to be constantly involved with the community.
Think about Twitch and streaming, all the things we have available on social media, all should be utilized for community management.
I'll leave with this one slide.
I said this probably 100 times in my development career to a lot of different execs.
You only get one opening night.
If you have a good launch, here's some hypothetical curves, you're doing really well.
If you have a bad launch, That potential, that gap where that curve is and where you see where it peaks out, that gap, you missed the moonshot.
You're never going to get that back.
Can you recover?
Yes.
There are lots of instances of games out there who have done very well in recovering from a launch that the games didn't meet expectations.
However, you'll never meet that bar, the moonshot type of revenue potential that you could have.
That is something everyone in this room really needs to think hard about because that will either damage your franchise that you're working on or your new IP.
And it also could, if it's bad enough, if your core loops weren't done well, and you had to do major surgery on the game, and you had a sentiment running bad for 90 days out, you could start damaging your cohorts, your zero cohorts, your first people in the game.
They're your stickiest people.
You could damage, you could go right into that curve of those people, and you'll never get those people back.
And you risk shutting down.
One of the things is Swig.
Swig had a horrible launch.
It melted down.
It had lots of issues with the world not filling up with content because we only had, where our tools came on eight months before launch.
So we did something very risky on the development of a platform, but that platform was amazingly powerful.
That's a whole nother discussion I could talk about later.
But there was risk there.
And we didn't do enough stress testing.
We lost it.
We had 5 million people on our site, Unix, before launch.
We lost easily half our first round of cohorts, easily, that week.
We never got it back.
We stabilized around 350.
That could have been a million player game.
It was done right.
and had another six, 12 months.
We really did need another 12 months of development on that team.
We did everything from beginning to end on that project in two years and eight months, which was amazing on new tech and everything else that we did.
But we needed another 12 months to simmer.
So that decision for a long-term bet wasn't the best.
But there are a lot of contractual things that, again, let's don't look in a vacuum.
There's a lot of contractual things in business cases that don't allow you to do that, right?
That's the reality of some of that, than some of that I realize.
But think about what does that mean?
So if you know going into it, there are gonna be problems, realize what it does to your revenue.
Face it.
Fallout 76 is a great example.
You can't test a game of that scale and magnitude in less than two months.
It can't be done.
You cannot rely on your external testing group to get a game like that and all the bugs.
What that did is dinged that franchise.
I don't think it deviously hurt it, but it dinged it.
And they started, as you saw that initial curve of the bad launch, they went down very fast after launch.
They'll never recover where they could have been.
They'll never get the moon shot.
And one of the key decisions was, is there's too many bugs.
They were trying to fix too many bugs at once to try to make up the time, which was bad because then if you fix too many bugs, you can't check all those bugs thoroughly and you create new bugs.
It's important to realize where you are and how you proceed.
You can turn things around, as I said.
The expectations on that game was it was going to be a Fallout game.
Everyone knows NPCs are in Fallout game.
That is how people play Fallout.
They love it.
And in console world, this is a fact I've known from watching different games, is almost over 50% of the players in console play single player.
which was surprising to me.
And because of that, if you knew that kind of quantity and that kind of people listening to it, you need to have single-player content that represents that particular IP.
And so those are the things, the lessons learned on that I think is really important because it made the world feel empty.
So everything you do.
affects you in development, affects you in life, one way or another, decisions you make.
Now, I open for questions, so it would be a good time to pause.
I know there's a lot of stuff here, and I wish I had more time because I had over probably 150 slides I could talk about, and I just had to cull it down.
There's lots of things I could talk about.
Anybody have any questions they want to ask?
I can't see you really well.
So thank you.
Thanks a lot.
Thank you.
I will say, please fill out the surveys on there.
It's really important that I get feedback, even for me, to help me improve.
And provide me with that kind of feedback would be very good.
Anybody want to step up to the microphone and ask questions?
This is a great Q&A time, but highly recommend you ask them.
Yes.
Hi.
I had a question on your analysis on The Old Republic, Star Wars The Old Republic, about the decision you made between the Heroblade engine and the Big World engine.
Yeah.
I mean, obviously you did pre-studies on what the advantages and disadvantages of those particular engines were, but how would you do those pre-studies differently now, seeing the consequences that resulted from that?
I would have gone with BigWorld because it's more like what I'm used to of UO.
It was a seamless server engine and had a scripting language above it.
There was an issue with BigWorld with source control on the seamless server boundaries, but I think we could have pressured to work through that.
That was one of the decisions, that's one of the decision points of that.
But I really think that choosing the Heroblade engine just was not going to scale.
and was not going to, it was a great prototype tool, beware of that.
Don't pick an engine because you can prototype quickly.
Pick an engine that will scale.
Pick an engine that if you're on the consoles, if you're going to be AAA, that can do AAA.
development, including Look, and be able to run it the framework that you're going to need to do.
If you're a shooter, if you need to be 60 frames or no less than 30, you need to pick something that can do that.
If you're doing something that's both glass as an input, controller, and keyboard, then you need to pick something that can do all that, too, and scale with you.
Hi, I'm over here. My name is Blake Mitzi. I'm from League of Geeks.
We run our games and service across PC and consoles.
My question for you is how you evaluate your content through your monthlies and your quarterlies?
Because you're generating that content on the fly very quickly.
How do you lock it down, test it internally for its effectiveness before you launch it to the public?
So what we do is we think what we like to the public.
We see what players are doing.
So there's a lot of telemetry in design to see what players are doing.
So if you look at that telemetry thing, you see the player's path in the world.
You see what players do and what abilities they use the most, what features they like the most, what customization they want the most.
And so what you want to do is you want to tune.
your content toward what you're seeing in your telemetry and design, what players are migrating to.
One of the things I use telemetry for too is it helps validate some of your design assumptions, but one of the things I think is very important that I think I want to tell people is how something feels.
may not necessarily equate in telemetry or KPIs to what you want to do.
Right.
It's sometimes the way it feels may over we may overweight your decision for that versus true data points.
Right.
I use data as validation points but to me it's how it feels is more important.
In a lot of ways, in game design.
If I could ask a quick follow up.
Yes.
Do you beta test your quarterlies and your rolling content?
All right, so the way we do that is we have QA embeds that write test plans for those.
We run bot testing on that to make sure it works and everything.
And then we go out and we put it on the test server I was talking about and see how players like it.
Right?
We do some focus testing on that.
But like I said, tissue testing is what I call that more, friends and families and things like that.
But a lot of times, putting it on a test server out there and letting a player see how it does is the best way, in my opinion, to get the feedback loops you need.
And also talking to community, too, asking them about certain things.
And getting a community involved in some of the design stuff isn't a bad idea.
Excellent.
Thank you very much.
Yeah.
Hi Richard, thank you for today.
Can I ask a question around your technical review board?
Yes.
I'm just keen to understand, how wide was that board?
Who was on it?
What were you looking from that board?
Yes, so the technical review board had, one person was the TD for game, game systems.
Another one was TD for platform.
Another one was TD for the client.
Another one was TD for the server.
Another was TD for the database side of things.
Another one was TD for the analytics side of things.
Right?
All the things we had to track, how do we track it, making sure everything was tagged appropriately, getting into the database, the details are done properly.
Everyone had a division of area responsibility.
And that worked out really well.
And basically, they met every week, and they started triaging together.
That helped with a large team a lot, actually.
Instead of making one person owner, no, we had seven.
It was awesome.
And dividing it up like that was great.
Because everyone has different problem sets that they're dealing with in that team.
And talking amongst each other, they work as a unit to help solve it.
That's great.
Thank you very much, appreciate it.
Hi, I'm a community developer on For Honor at Ubisoft Montreal, so I've lived the live life.
So this is super interesting.
Thank you very much.
My question is, do you have any insights into doing good patch notes?
Because that always seems to be a nightmare.
Yes, so one of the key thing requirements, and thank you for saying that.
That's why I love Q&A more than anything else, because I kind of forget about certain things.
Anybody that's doing coding, you better have your comments right and formatted in a way so that I can pull out changes that I need for what's changed in code as well as design as well.
So Confluence is a great place to start doing that.
We use Confluence, we have Jira, we have Shotgun, we use GitLab as our, if anybody doesn't know GitLab, it's a great version control tool, but boy does it have a lot of power behind it, and we're trying to get rid of P4 because I hate it.
ProForce.
Because it's antiquated.
I hate to say that, but it is antiquated.
And the new tools out today, it is important to make sure that people tag their changes, is basically what I'm trying to tell you.
So you can easily pull it out.
And it is a hard, that's a hard thing, by the way.
Any community manager understands building patch notes is hard, because you're wrangling cats.
And sometimes you miss things.
Yes?
Yes.
I agree.
I agree.
I agree.
I agree.
Yes, you spoke about outsourcing to USC as to machine learning, some predictive data modeling.
Yes.
And you talked about how you recommend that going forward for Games as a Service, and I'm wondering if that's something that you see coming on to the team where it's valuable enough.
that you would have data science on the team and you're iterating those models going forward.
Absolutely, absolutely.
And there's great Python.
There's actually an R plugin for Python, or a light plugin for Python, actually, that does all the statistical analysis and everything in Python, because I could find Python programs a lot easier than I can find R programmers.
But yeah, anything machine learning AI wise, yes.
To do, and I use, to do the predictive behavior and be able to ban for bad behavior as well as do CRM initiatives, absolutely think that a data scientist on a team is part of the crew now, and should be by the way.
Thank you.
But I don't think people know how to look for that type of person.
I really don't.
Even know how to write to JD for that type of person, actually.
and understanding how to hire someone like that because they'll look at a JD, well, you have no gaming experience.
No, that's not what you're trying to see.
You're trying to see what their root of what their experience is that you can apply to gaming, right?
I had to write a JD for that.
It was really hard to me to get that approved.
I agree, it's at the tip of the spear right now, but I'm excited to hear that.
Thank you.
They don't see the value yet, but it's just like, for example, I'll tell you with Swotor, when I left, they owed some money on that and they decided it wasn't worth doing all the way through.
We had it all prototyped and working on CRM stuff, and they said it wasn't worth it.
And I said, how could you say that?
That amount of money they're asking is trinkets to what it will do, right?
But again, that was 2011 that that was done.
I think today I would probably not get that anymore.
Hi, Linda Fane from Bungie.
Just to follow on, I wanted to know if in moving to games as a service, if there are new roles that need to have prominence and how that power shift might happen?
And also, is there a different ratio of types of roles?
Yes, so QA, to think QA is on the outside, on a Games as a Service group, that's insane.
QA needs to be integrated, part of the leadership of that team, not a lot of, I've seen this happen, I'm not kidding you, where they're not in leadership when I say, what are you doing?
QA is the person, the group that says, are you ready to go or not?
They're the ones that push the publish and the release management structure to the service.
They're the ones that should say, no, it's not ready.
But that's a lot to get to.
That's a lot to absorb to a company that's used to making not games as service products.
So QA is one of them.
The data scientist is another one.
Data analyst, right?
The person that does the ETLs and everything else that you hooked in all your telemetry and gathers that data and interprets that data for you and develops your dashboards for you.
that person is extremely valuable and should be on the leadership of a games of service team.
Having in beds on your QA team to doing different things from platform to development are all important people. And I would say the one thing that's missing too on your leadership, some people need to put community management on their leadership board, right? And the community, the lead community guy should be on the leadership board.
and have a voice and saying our sentiment is this it's negative.
Now it's turned neutral.
Now it's positive.
These are all indicators you need to know and measure.
So yeah I would say first and foremost is QA and how you treat QA.
The second one is data analyst.
The person that actually puts the details in and tells you what you can or can't track are very important.
And which roles are reduced in importance?
I mean, that's really kind of elephant in the room a bit when you transition.
So I would say the live producer has a stronger voice than the lead producer.
in development at that point when you're live, because they're right up to the, they have everything and responsibility.
I try not to separate live, when I say live, development team is part of the live process, they're not separated out.
Everyone that's working on that game is live.
A lot of times people try to make this little wall between it and say, no, no, no, it's all live.
We're all live.
And I rotate people in and out of those other teams, I was telling you.
It's real important to do that.
As far as hierarchy goes, I think it's important to establish the right hierarchy in the beginning as you move forward.
And all you're doing is hiring people at certain times to take those positions that are not filled because you don't need them right now.
It's the way I respond to that question.
All right.
Thank you.
Thank you.
Go ahead.
I'm sorry, I can't see you really well with these lights.
He's next.
Okay, thank you.
Okay, uh, uh, my name is Wei from NetEase. So you talk about the hotfix, uh, I'm wondering do you have any specific process, uh, between the hotfix and the, the branches because in real life sometimes you have, uh, uh, DevOps team is working on the content you are going to release in the future. Uh, at the same time you have your live ops team is working on the hotfix on online, right? So, so do you have anything to share about the...
So the live fix is going into main.
It'll be going to test.
It'll be put into test.
And then when it's ready to go, it goes into main onto the service.
So you mean the hotfix?
The hotfix, correct.
It is a QA branch, a test branch, that goes into, that gets tested, white-gloved, then it goes into mainline.
So did you consider you fix the hotfix on the live branch and go back to your main?
Because sometimes the hotfix is fixing the very urgent issue.
So you want to be on the same?
The live, by the way, the live branch is the mainline.
Oh, OK.
That is, there's no difference between the two when you're live.
That was why I was telling you the big transition when you go into test for the first time, is your main line, is your live.
That's it.
That's when you really kind of, that's when the main line becomes real to the team.
Okay.
Okay.
Thank you.
Yeah.
And, sorry.
So, hi, I'm a designer from Vicarious Visions, and I'm curious on your thoughts on burnout, because as a studio, we try really hard to keep that from happening, but it does occasionally.
I was curious if you had thoughts of, like, if you see people burning out, or someone burning out, do you have any thoughts on how to bring them back from that, or do you generally find it's like, they're out, they're burned, they're done?
No. So what I do is I have my leads do one on ones with everyone at a at a week cadence. And you can see that I walk the floor personally myself and look for it as well because I kind of know what to look for. And I try to train my leadership team to know what to look for when burnout occurs because some people like to work no matter. Some people have these hours that are crazy. There could be life issues that cause that whatever they don't want to go home or whatever. And I I literally have to force them out the door when I see that right stop.
Don't do that.
You're not effective.
And a lot of studies have shown not being effective once you reach a certain point anyway.
So why you do that, I'll tell you what causes crunch.
The number one thing that causes crunch in my opinion is top down schedules.
If I had to say anything, it's top down schedules.
Not bottoms up.
And that's why I try to do the discipline of every six months in a three year project to do bottoms up roadmaps to triage against to figure out where my risks are.
Yeah.
Oh thank you.
Sorry.
Hi, thanks for the presentation.
My name's Elliot from Square Enix.
When you said SWIG had launched, the back end melted, was it due to poor capacity planning or elasticity issue?
And how did you guys recover from that?
It was poor planning.
Basically, they were confident because of EQ that they could launch without any problems.
Didn't realize, I told you, there were five main uniques hitting that website, right?
That's if that's not an indicator a KPI to look out for a spot to look for.
You better be careful.
And so that came as a shock and it melted down the whole Apache distribution system that we use for load balancing and things like that.
It just collapsed and it took about a day and a half to get fixed.
which is denial of service for a lot of people.
It was just it was very hard to watch from a development point of view because that's platform.
But it gave me a lot of big lessons learned of what to do when testing before launch.
I literally have done this on a platform that we're launching on.
I literally disconnect the logon servers to see if they roll over properly.
I've actually put bugs in the game to see how autofixes work and didn't tell anybody.
I actually did that.
And I wanted to see how quickly, because I knew when it was going in, they'd find it, fix it, and get it out.
I did severe bugs where you had to recompile.
I did a, where you only had to do a, not a full compile, not a full build, a partial build.
I did things like that as well.
And I found out when they had to do a full bill, it took 14 hours.
I didn't know that.
They said it wasn't.
And I don't believe them.
I trust McVerify.
And I actually had engineers do that for me.
I highly recommend you do that.
Trust but verify.
Thanks.
Just a quick follow up.
If the environment had been more elastic, perhaps, would that have helped you recover easier from the capacity limit?
Yeah, well, Ben, this is 2003.
OK?
Everything was starting to get virtualized by that time, right?
So they didn't have a lot of things we have today that makes things a lot easier.
God, I mean, when I look at platforms and where we're going, right, I mean, I look at C++ we used to use or Java.
I use Golang now, right?
I use GitLab.
I use Kubernetes and all the other things that exist today to help you push out, push out, and distribute and have a service layer that's agnostic to everything that can attach to it.
It's awesome.
And virtualizing everything you can do today just makes things so much easier.
to when I started.
Thank you.
Yeah.
Hi, Rich, my name is Dominic, I'm the QA Manager at Square Enix.
So the presentation was awesome and I love hearing the questions from fellow Square Enixers.
One of the things I wanted to touch on was just the security point that you had there.
Yes.
What was the general split for you between the infrastructure level security testing and the application security testing and the timing of that?
Yeah, so basically one of the problems with game programmers, especially doing game systems, is security.
They don't realize that they have to validate certain things.
And so one of the hardest lessons to teach games of the service when people haven't done it before is to learn how to do that server validation.
It has to do with movement.
It has to do with collision.
It has to do with if they have a system that is dealing with advancement, that there's checks to make sure people are not out of bounds, and all sorts of things like that.
And so at Swotur, I hired a security officer.
And the security officer did two things for me.
He hired a team.
This is one of my slides I didn't get to.
It's like one of those things I threw out.
But I had a security team with a security guy I hired.
He did both external security and internal game security.
So for example, he locked down all the USB ports in the company.
He made sure that everything had dual auth, that we went to the service, the cloud, everything had to be dual auth.
He was responsible with his team, because there was facilities, and then there was IT, and then there was the game.
Because if you're going to get hacked.
It's going to come from outside into your IT infrastructure, not into your game.
I guarantee it.
And so that helped us out a lot.
And then he had to make sure the game programmers, he had a person responsible to work with them, to make sure things are tidied up with SDETs to do the testing for them.
But again, you'll miss it.
I mean, every time I go out into live, there's something that happens again.
Did you not put that?
No, I forgot it.
Because you have hundreds of systems that are interrelated, especially in an RPG.
Because one of the things I will tell you game system wise, and on games as a service, it's so much of this, interconnected.
I've had things that I fixed on, and we checked.
And when it went live through some kind of Scale issue that we never discovered until you got scale.
Something happened over here that had nothing to do with what we had here.
But there was a global variable that was called upon.
We had no idea it hit over here that caused a massive problem.
And it took a long time to trace back because it happened at scale.
And you can't test, even all the bots in the world, no offense, cannot test things at scale.
And this is why I talk about things popping.
You are going to have that, especially if you start hitting into the millions of PCUs.
Anybody else?
Thank you.
Thank you.
I can't see.
All right.
Thank you very much.
