Okay, alright, thanks for coming to this presentation.
So, the way this is gonna work is basically I'm gonna talk for about 25 minutes about the level design in Trainyard, and then Semyon from ZeptoLab is gonna talk for about 25 minutes about Cut the Rope, and then afterwards we're gonna open it up for some questions.
Because this is the last session, we'll have a bit more time for questions if there are some.
All right, so this is a level design post-mortem.
And really, what I'm going to be doing is just kind of giving my level design philosophy I followed when creating Trainyard.
So my name is Matt Ricks, and I live kind of outside of Toronto.
So that's me.
But really what I want to talk about is Trainyard.
So to give you the super brief story of the game, in 2010, I was working at an advertising agency as a Flash developer.
And I was getting really sick of my job.
and I've always loved games, but I'd never actually made one.
And so I decided to make a game in my spare time.
So every day on the train to work and whenever I could find time, I would work on this game.
And over the course of a year, I did all the parts and finished it all up and released it on the App Store.
And so it came out, and at first it didn't really do that well.
So for a few months, everyone seemed to love it, but the sales weren't very high.
And then I released Trainyard Express, which is the free version, and the game got a whole ton of buzz.
And through a variety of different things, it climbed all the way up the App Store to number two, actually behind Only Cut the Rope.
And it stayed there for a few months in October of 2010.
And since then, it's kind of dropped down.
I don't know if anyone was in Phil Hassey's talk a couple days ago, but I really liked how he gave out some real sales numbers.
Trainyard is priced at 99 cents and to date it's been bought over 800,000 times and the free version, Trainyard Express, has been downloaded over 4.2 million times.
So for something I made in my spare time and for pretty much the first game I've ever made, it's been pretty amazing, really.
So that's the story of the game, but now let's talk about the actual gameplay.
Trainyard is a logical puzzle game.
The only thing you do is draw tracks for the trains to follow.
That's it. So the way it works, on the left there's a blue station, on the right there's a yellow station.
The trains are going to come out and follow those tracks and combine to form a green train.
So color theory plays a huge role in the game, and the timing and mixing of trains, whether they either crash or don't crash, plays into it.
Now again, the only thing you do is draw tracks.
There are no points, there are no scores.
Literally the only thing that matters is solving puzzles.
So that's the basics of how the game works, but again, this is about level design.
So level design, to me, is all about teaching.
You can almost look at each level as a lesson and the overall flow of the game as a course.
You're teaching the player how your mechanics work.
You're trying to get to a point where you've taught the player how to become a master at your game, how to be an expert at your game.
And so that was what I was always trying to do throughout the course of level design in Trainyard.
And as a teacher, your most important consideration is really knowing who your students are.
So in the case of Trainyard, despite the fact that it's kind of like a hardcore logical puzzle game, I was aiming it at the very casual App Store audience.
And so that had a number of implications for my level design.
I think there's this sort of perception out there that casual players are somehow less intelligent or dumber than average players.
And I don't think that's actually the case at all.
I simply think it's the fact that they haven't been playing games their whole lives, and so they're missing out on all this experience and this whole vocabulary of games that most of us just take for granted.
And so because of the fact that they don't have that vocabulary, I needed to take the level design in Trainyard and start it from a much more base level to make sure that they really understood all the core concepts.
If you're making a game that's targeted at actual, like, hardcore gamers, you can skip a lot of the steps that I made sure to include in Trainyard.
Alright, so, as a StarCraft player, I like to break everything down into micro and macro.
So, in the case of Trainyard, I see microâ€” sorry, in the case of level design, I see micro as being the specifics, the individual design of actual single puzzles.
And then macro being the overall flow of the game, the way all the levels fit together and kind of the difficulty curve of the game.
So first I want to talk about macro.
One of the most important things I was trying to do was to add elements progressively, making sure that I was only teaching one single thing at any given time.
So an element could be something like a gameplay mechanic, it could be some sort of technique, some sort of way of using the current elements in the game, or it could be almost some new form of practice to teach the player how to use the elements that they already know.
And along with that, I also wanted to treat combinations of elements as if they were a new element.
And I'll have these diagrams that hopefully make that more clear.
So in traditional gamer-focused games, you have this sort of approach to teaching elements a lot of the time.
So you teach element A, and the next level you have element A, and then you introduce element B, and the next level you have A, B, and then you introduce element C.
And there you go, you've got your levels.
But in Trainyard, because of the casual audience, I wanted to break it really down to a more granular level.
So I would teach A, and then teach B in isolation, and then teach A and B together, and then teach C in isolation, and then give them an example with A and C, and B and C, and finally come to the end when there's A, B, and C.
Now, obviously mathematically looking at this, a couple more elements and you're ending up with thousands of puzzles.
So it's not practical to do this, but at least...
taking this sort of approach to level design, really breaking it down to the granular parts and making sure the players actually understand all the nitty gritty things you're trying to teach them.
Okay, so instructions are a big thing in game, and George Fan had a fantastic talk this morning about this in Plants vs. Zombies, and I kind of have a few similar takes on it here. So, in early versions of Trainyard, there was kind of a wall of text teaching how to play the game, and that was totally ineffective. No one really reads text.
And so I was trying to figure out what approach to take, and I ended up looking at things like this.
So this is the, an IKEA, like page from an IKEA manual, and I think we can all agree that most of our games are probably easier to do than assembling a piece of IKEA furniture. And so, I figured if this works for them, This will probably work for games.
And I discovered that, in fact, games like Angry Birds, there's a picture, there's no text there, and yet you can understand how to play this relatively complex physics game with a single picture.
So it's really, really powerful.
And there's actually a couple other benefits to this.
Well, there's one big benefit, and it's that localization becomes less important because all of a sudden, anyone from any culture can understand how to play your game just from seeing a single picture.
So there's one, there's something I like to call the Wingdings Test.
which is where you take a game, replace all the font files in the game with wingdings, and then give the game to someone who's never played it before.
And if they can understand it with all that nonsense text there, then you know that you've got a game that is no longer dependent on text at all.
And that's actually a really fun test to do.
All right, so with Trainyard, it's much more complex than a game like Angry Birds.
I couldn't just simply show them a picture and have them understand how the game works.
And the best way to show someone how a game works is to show it actually being played.
On iOS, file size is a premium because of kind of the 3G download limits, and so I needed to do something else, and what I ended up doing was this sort of system.
So, this is the tutorial, just like one screen from the tutorial system, and it runs on top of the actual game itself, and it's kind of...
I spent like two months of my development time just making this tutorial system alone.
It's really robust, XML-driven, very adaptable, and it's running on top of the real game engine, so there's this super ugly hand you can see on the right screen.
That hand fires real touch events into the game and does exactly what a player does when their finger touches the screen.
And you can see that I've used text there, but the text is only there to add some context and some terminology.
It's definitely not necessary to understand the game at all.
And they can actually watch the game being played and see all the techniques being done.
Only teaching the player what they need to know.
George also touched on this this morning, but...
frontloading everything that you can do in your game all at once is not a good way to teach the player.
They don't know, if you're getting all these instructions right up front, or all these tutorials, how do they know which thing they're actually going to need to know right now?
There's no way of them choosing, so they just choose one thing to focus on, and it could be the totally wrong element that they actually don't need to know at all.
Something else that can happen is that...
you teach them everything up front, and then you have this whole game for hours and hours and hours, and all of a sudden they get to some super hard level in the game, and you have this element that you only taught them at the beginning of the game, and they've long since forgotten it.
So, the easiest way to solve this is just to split your tutorials out over the course of the game.
and uh... in the case of train yard when you started up the first tutorial is literally teaching the player to drag their finger across the screen and that's it and then they have a few puzzles to let them practice that and there's another tutorial and it teaches them how to drag their finger in a corner shape then there's a few more puzzles to let them practice the last tutorial doesn't come to over seventy puzzles into the game like three-quarters through and uh... and so they've been playing for five or six hours but it spreads it all out so that they know what they need to know at a given time This seems similar, but it's actually kind of different.
So you can teach players things through tutorials, or you can teach things through gameplay.
But it's important that players have an opportunity to actually practice those things and try them more than once.
If you teach someone in a tutorial, and you have a level that uses that tutorial, or uses that skill, but then you never come back to it for the rest of the game, And then all of a sudden, I see a lot of games do this.
They'll teach something right up front, and then you get to the end of the game, and all of a sudden there's this ultra hard puzzle at the end of the game, and it uses that element, and you haven't actually seen it for hours and hours and hours.
So I think it's important to come back to things over the course of the game.
Make sure you're giving them a chance to practice things, not just when you teach them, but come back to them over the course of the game again and again.
So this...
is just an abstraction of the sort of difficulty curve I was trying to follow when I created Trainyard.
So you have this ramping up in difficulty, and then every few levels you drop it off and give them kind of a break.
And this is just, having a constant ramp in difficulty can be incredibly overwhelming for a player.
You never really get that chance to relax.
And so these dips, it's giving them a chance to kind of chill out and do something and feel good about solving something that's easier.
They feel kind of content that they actually have some skill and some mastery over the game.
And like I was talking about in that previous slide, these kind of dips in the difficulty curve give you a great chance to go back to some earlier mechanics, some simpler mechanics, and make sure they still really understand them and have an opportunity to practice them.
So level unlocking is one of the things in Trainyard that's probably one of the things I'm least proud of.
So the way it works is kind of confusing to explain, which is pretty much a given fact that it's actually too confusing in general.
But, so each puzzle is assigned a number of stars based on how difficult it is.
So an easy puzzle, one or two, a medium puzzle, four or five, a hard puzzle, nine or 10, whatever.
And then when they solve those puzzles, they're given that number of stars, and then with certain number of stars, it unlocks the next section of puzzles.
And yesterday I was actually talking to Semyon about this, and Cut the Rope has something very similar, but the difference is that in Cut the Rope every puzzle is worth three stars, and in Trainyard they're worth variable amounts.
And I think some players, it wasn't a huge deal, but I think some players really got confused by the fact that they didn't really understand where these stars were coming from.
And that could actually just be an issue in my communication of it, more than an actual problem in the game design itself.
So something that happened a lot, because I had this unlocking mechanism, I would get a lot of emails from players that said, you know, I got a new iPad, I got a new iPhone, and for some reason iTunes screwed up my data and I can't get it, and so I have to start over from the beginning, and I really don't want to have to play all these easy puzzles again.
And at first I was kind of like, I don't know what to do, you know, the easy puzzles are easy, just go through them I guess.
And then I realized...
there was a really easy solution.
And it was just to put a button on the options screen that when you press it, it allows you to unlock all the puzzles.
It says, are you sure you want to do this?
And if you do, you just have the whole game available to you.
It's really like a cheat code from an old school game, except instead of making a cheat code, some obscure thing, it's just right there in options if you want to do it.
And this solved so many problems with syncing and all that, and it took me probably an hour to code in, or not even that much.
It was a huge amount of effort for the amount of actual results I got.
It was really awesome.
Something else that worked really well was having a main game and then bonus levels.
So in Trainyard, there are a hundred main puzzles in the game that kind of constitute the main game.
And what happens is when you finish those hundred puzzles, a screen pops up and it says, Congratulations, you beat the game. And then you can post it on Twitter and Facebook.
And then right down below that, there's a little button that says, Want more puzzles? Play the bonus puzzles.
And to me, the real game is in the bonus puzzles.
There's 60 more puzzles, and they take way more time and way more effort, and they're much more interesting puzzles.
But...
A lot of, the reason I did this was because I knew a lot of casual players, and this is exactly what ended up happening, a lot of casual players would get to that screen where I said, you beat the game, and they would kind of close train yard and be completely content with how far they got.
And so, those players left the game really happy, and if I ever make like a train yard two or something, they'll be big fans of it.
And then the hardcore players, who are the ones who are better at the game than I am anyway, they would go into the bonus levels and have a blast playing all these super hard levels.
So this worked pretty well, except there was one issue that I didn't really consider, and it was this kind of mystery demographic.
So there's the casual players and the hardcore players, but what I didn't realize is there was also this demographic, which I kind of realized afterwards that I fall into this demographic myself, and it's the players who just want to complete everything.
They're not necessarily the best players at the game, but they want to complete everything you throw at them anyway.
And so, what was happening is that the casual players were happy, the hardcore players were happy, but I made one kind of fatal mistake, and that was that every puzzle I made, I put, not every puzzle, but every kind of hard puzzle I made, I put it in the game.
So I had some puzzles where I had spent like 5, 6, 7, 8 hours solving them, and finally solved them.
And there were these like insanely hard puzzles that I put at the very end of the bonus puzzles.
And so these completionist players would go through all the bonus puzzles and then get to these insanely hard puzzles and just get frustrated and quit, because they're literally puzzles that I myself struggled with.
And the hardcore players would still solve them anyway.
I came to an easy solution, and it's basically just don't put those puzzles in the game at all.
The casual player will be happy, completionist player happy, and the hardcore player, they won't be happy no matter what you do.
So, what's the point, really?
No, but I actually found another solution to the hardcore player, and that is creating a level editor.
And so, I did that much later on, and that was actually a huge success, and all the hardcore players are happy, so now everyone's happy, and it's all good times.
Alright, so now moving on to micro, the specifics of individual puzzles.
Each level needs to have a purpose.
So when I was, anytime I would kind of have a blank slate there in front of me, I would know what I wanted to accomplish with that puzzle before I put any pieces on the board.
So, kind of like what I was talking about earlier, a purpose could be like teaching some sort of element, some sort of mechanic, giving them practice, or it could be some sort of theme, some sort of idea I wanted to evoke through the design of the puzzle.
So there's a lot of different approaches that can be done there, but the important thing is that you know what you're going to do before the actual creation of it.
And visually, I really like to aim for symmetry and balance.
I want everything in the puzzles to look intentional, to be...
Well, let me just show you an example.
So, this is a puzzle called Magic Carpet, for some reason.
And, so you can see there's kind of a diagonal symmetry there with the rainbow effect.
And...
Really the reason I do this and the reason I have that kind of symmetry and balance there is that I want everything, every puzzle I make, I want it to look handcrafted.
I want it to look like someone spent a lot of time and effort actually making this puzzle.
I don't want it to look procedurally generated like some sort of algorithm just spit out another puzzle for the player to play.
I really want it to be just like human.
And so that's why I go with that.
Now, yeah, I'll show another example for this.
So this is one of the player made puzzles.
Kind of all my examples of bad puzzles are from player made puzzles.
So this doesn't really have that symmetry, it doesn't really have that balance to it.
But the thing that really bugs me about it is that rock in the middle of the screen.
Rocks in train yards serve one basic purpose and that's to limit where you can draw tracks.
And it limits your solution space for the puzzle.
It can be an incredibly powerful way of making the player think in certain ways and use certain techniques.
But in this case, it just kind of gets in their way.
It doesn't make the puzzle any more interesting.
It doesn't make the puzzle require any more cleverness.
It just makes the puzzle take longer to solve.
And one of the benefits of Trainyard, or one of the greatest things about the gameplay mechanics is the fact that there are many possible solutions for every single puzzle, but all of a sudden this rock just kind of gets in there and restricts their solution base, but doesn't make the puzzle any more fun or anything.
So, really not a big fan of just arbitrary elements thrown everywhere.
Using themes. So, this is a puzzle called Cooksville Creek, and it is...
meant to evoke the feeling of a river.
Now unfortunately I don't have a video of it in action, but if you can imagine, a blue train will flow from the top down to the bottom, and then split into four blue trains, and then flow to the left side, and to the right side, and across the bottom, and finally up to the top right.
Now you don't really have to visualize in your mind, but the important thing is that it has this kind of blue flow throughout, and I was trying to evoke the feeling of a river.
And there's no real...
perfect reason for that. The only thing is I just wanted to look handcrafted. I wanted to look like someone took the time and effort to make something interesting.
So this... don't overwhelm the player. So this is another player-made puzzle and anyone who's playing Train Yard instantly is going like, what is that?
Because it's...
there's like 60 trains there and 60 goals and it's just an overwhelming amount of information.
And the way I kind of like to look at this is that each player, almost think of it like a computer or something, every single player of a game has a certain amount of memory, a certain amount of state that they can hold in their brain at any given time.
And if you're starting with too many elements on the board, it could be the easiest puzzle in the world to actually do the solution of, but if you're starting with too many elements on the board, they're just going to get overwhelmed and confused with the amount of information.
And so whenever possible, I like to use the absolute minimum number of elements I can to get whatever purpose I'm trying to achieve across.
There's no point in throwing more things in just because I can.
I really want to keep everything to the absolute minimum necessary.
When beta testing or when watching someone else play the game, if you ever hear someone say, I don't know how I just solved that puzzle, or if you're watching someone and they start devolving into trial and error, to me, like, a bit of trial and error, like educated trial and error is fine, but when they, it's just straight up trial and error.
That's like the ultimate bad thing for a puzzle game, because they might as well not be able to solve the puzzle at all.
And so, that either means there's some problem with your core gameplay mechanics, or much more likely that your difficulty curve up to that point and your levels up to that point aren't teaching the player the skills they actually need to know to solve that puzzle.
So that's a huge problem, at least in my mind, that's a huge problem that needs to be solved somehow.
So having a level editor, so this is the train yard level, it's like this super ugly Adobe Flex thing, but it works for creating puzzles.
And it's visual, which is great, but the most important thing you can have in a level editor, at least in my mind, is some form of versioning.
You need a way that you can quickly clone and duplicate puzzles and try out experiments, and if they don't work, you can go back to whatever you were doing before.
And another thing that's really important is being able to switch between solving the puzzle and creating the puzzle as quickly as possible, or a level if you're making a level-based game, whatever.
You need some way that you can quickly swap between them.
If you're waiting for compile times or something like that, it's going to drastically impact the amount of experimentation and iteration that you're actually willing to do.
And finally, I want to talk about making players happy.
So when you're creating a puzzle game...
Players love, or human beings in general, love solving puzzles. We love figuring things out.
So there's no reason to go overkill with experience points and all kinds of blinky things on screen all the time.
You don't need to do that, because players love the fact that they're solving things and figuring things out.
The only thing I really tried to do is when the player's already feeling that kind of internal joy from solving something, I like to amplify it.
So, in Trainyard, when you solve a puzzle, that's when I go crazy with particle effects and sound effects and all that sort of stuff to really kind of lock in the feeling the player is having.
And finally...
discovery of untaught mechanics.
So a lot of this has just been about teaching things kind of explicitly, but the most powerful thing you can do as a level designer is give the opportunity to the player to figure things out themselves.
So this is that puzzle color theory from the start of the game.
And color theory is interesting because it comes 20 levels into the game and up to this point, I haven't ever told the player that colors can mix together.
I haven't shown them that that's possible at all.
And so I put them in this situation where they can do nothing else but discover this mechanic.
And I think that's the key thing, is that if you're making gamer-focused games, it's pretty easy to kind of assume they have some knowledge and can figure things out.
But for casual players, they can get frustrated really quickly and think that there's just some knowledge that they're missing to solve a puzzle.
So you need to kind of give them the minimum amount of informationâ€” not information, but a minimum amount of room to work in.
It's almost like you don't want to give them too much rope.
And so that's what I was trying to do here.
And this specific puzzle, I've heard so much feedback from people about how this kind of, this was the moment where the game changed for them, when they discovered this for themselves.
All right, so wrapping up, that's basically all I have to say.
Now I hope some people can find this useful, not just for puzzle games, but for any kind of level games.
Yeah, so that's about it.
Thanks for listening, and that's my stuff.
Now Semyon's going to come up.
SEMYON ZAPTALAT Alright, so hello everyone. My name is Semyon. I'm a creative director and co-founder of Zaptalat.
And I will continue Matt's talk on the level design from the perspective of our game Cut the Rope.
And I will also share some sources of information that we rely on when we're trying to analyze what are the things that we did right and what could be better.
And it will take another 25 minutes, I mean my part overall, and then Matt and I will answer your questions.
So in case you haven't heard about Cut the Rope, it's a pretty popular game which was initially released for mobile platforms.
And it happened around one and a half year ago.
And it's built around really simple principle of delivering object from point A to point B by cutting the ropes in some specific order and with the right timing.
And you can see how the game evolved from the very early draft to the final look.
And you can see that point B ended up being this green creature called Om Nom.
And Because the game was originally intended for mobile devices, it uses a really short session approach with the levels.
So many levels, or even most of them, can be really completed in several seconds.
So game can be really considered a snack of gaming.
And those snacks are the levels.
And our job as designers, as level designers, to make sure that those snacks are tasty.
So in order to do that.
We set three goals from the very beginning.
And first goal is that we want players to feel smart.
It doesn't mean that they aren't, but we want to remind them about it.
That's the kind of purpose of our game overall.
The second goal is that we want to appear to a really wide audience of the player, from hardcore to the very casual, like the one you can see in the picture.
And the third goal is that we want players to feel hungry for more.
And that's essential for us to keep the game high in the charts.
All right, so we defined the goals.
Now we needed some set of principles we would use while creating the levels.
And there are seven of them, and I will now go through all seven.
So the first one is the positive reinforcement.
And it's not a big surprise that it works much better than the negative one.
And in this example, if you play the game, you know that you can move that blue holder on this blue rail.
And if you, on the first picture, if you move it really fast to the right side, the rope will pull the candy up, and it will do this kind of jump and end up in the mouth of the little green monster.
So in the first example, we're kind of forcing player to do this trick by placing the spikes there.
However, the better way of doing it would be placing the stars there.
So, first, it would be a positive motivation for the player.
It would encourage him or her to do this trick rather than forcing.
And what's even better is that then the player will have an option of not collecting the star at all.
And that really helps us with the goal of appealing to the wide audience.
Because, you know, many kids don't really care about the stars.
All they want to do is to see Omnom happy.
So it's good to have several options for different kind of audience.
And what's even greater about the stars is that it's really a self-manageable difficulty within your game.
It's up to player to decide how hard the game should be for him.
whether he wants to collect all the stars or just complete the levels.
And also all of those kind of players will feel satisfaction because they set the goal for themselves and they achieved it.
And to give even more value to the stars, we've introduced this functionality of the level boxes being unlocked by some specific amount of stars.
And we made sure that those values are not too high, so unless the player is skipping too many levels, he'll be able to collect the necessary amount of the stars.
And by the way, skipping the levels is another cool thing that we got out of the system.
We basically let players skip any amount of the levels he wants, of course, unless he hits the next.
the next level box, which helps to minimize the frustration of being stuck at some particular level.
So, the next principle is that when a player launches the level, he should already be able to plan the solution.
And what's overall the beauty of the physics-based games is that players already know the biggest bunch of the rules.
from the real physical world.
And that's the reason why even small kids can play these kind of games.
Because they don't know the math.
They don't know the physics.
But they know how these things work around them, right?
So the only additional thing that we basically need to explain to the player is cutting the ropes.
And they already get it from the title of the game.
So that's pretty cool.
But here's the tricky part.
Even though our physics engine is pretty cool and we're proud of it, of course it's not as complex, as not detailed, not as detailed as a real life.
So it is possible to trigger some events within the levels which wouldn't look natural or would look unexpected to the player.
So our job is to make sure that such things don't happen.
And as a proof, you can see this picture taken actually from the YouTube video where apparently one of the game fans have replicated several levels from the game, like in the real world, and it seems to work.
You can check the video on YouTube.
And just to give you a bit more details on this principle, here's another example where.
Basically, it's not only about the physical behavior of the object, it's also about how we put the object within the level.
And in this example, the candy floats up in a bubble.
And on the first picture, it's not very clear whether it will squeeze between those spikes or not.
So the better way of doing it would be either moving the spikes further away so that it will be absolutely clear that the candy will pass, or moving them really close to each other, or maybe even uniting them so it will clearly communicate that the candy won't pass.
We can go as far as placing a little gamble there, but it might be a bit of an overkill.
And here's the principle that Matt also talked about.
Basically, it's not only about that the solution should feel logical.
It's also that the wrong way of solving the level should feel wrong.
And we've seen many times when we were doing play testing, when some player was playing some level and trying some wrong way of solving it over and over and over again.
And wasn't even considering the option or the alternative ways of solving it.
And that happened because that wrong way of solving wasn't communicating clear enough that, you know, it's wrong way.
It had a feeling that I almost did it last time, so I'll give it another try.
So it should communicate something like, you tried that, good job, didn't work, try something else.
And in a way, it limited about, it a bit limited our game with the amount of solutions every level has.
So it's not really a sandbox approach.
There are usually just one or a few ways of solving the levels.
And there are some good and bad things about it.
And the good is that we can really control the experience of the player.
All right, and here's another thing is that no game is perfect, including Cut the Rope, of course.
And it is possible to trigger some.
visual glitches, some technical bugs, some controlling issues by placing some elements in some not really smart way. So we need to make sure that it doesn't happen. And in this example, again, with the blue rope holder, if the rope is really short, and player wants to cut it, he can accidentally move the blue holder instead of cutting it.
And that's a bad experience. So at some point we agreed that we would set some minimum amount of ropes attached to such holder and we won't use any shorter ropes. And it already solved this kind of problems in many levels.
Another thing is that as we have a reset button on the top right corner of the screen, we don't want the player to do any actions like popping the bubble or pressing some air cushions within the level, because he can occasionally press the reset button and that's again not a good game experience.
So we're trying to make sure it doesn't happen.
Another thing that Matt talked about is that, well, of course, everyone knows that the tutorial is a very important part, and I agree with Matt that images are working even better than text.
But another important thing here is that we realize that if we're just...
like trying to explain something to the player, but there's still a space for completing the level without using that principle or using that gameplay element that we're showing.
And sometimes, sometimes players will just skip it and...
And then they'll get frustrated later when they'll need this knowledge.
So basically people need a reason to learn.
And in our case, a reason is usually that they can't complete the level until they try what we want them to try.
And in most cases, they don't really need to read the text.
They can just play around with the object and they'll find out how it works.
And here is the most important principle.
And you'll see the proof for that principle in our game, in our levels quite a lot.
It's OK to ignore any of the principles.
And the only requirement here is that there should be a reason for that.
And in our case, the reason is usually some cool combinations, or combinations of objects, or some cool idea.
And the benefits of having it, the, the coolness factor of it, is much higher than the, than the harm that it causes by violating some of those principles. So it's okay. We, we think it's okay to, to break the rules, and in many cases it works for good. So that's it for the principles.
I also wanted to share some some things that we do with the level ordering.
And this spreadsheet might look a bit complicated, but we kind of got used to it.
So it's really a good visual tool for us to see how the levels are going.
It basically has the list of the levels, the list of the gameplay objects, like elements, and we can see which objects, which object is used in which level, how the unlocking rate looks.
By this grey area you can see the tutorial levels, you can vary the arcade and puzzle kind of levels.
So it's pretty cool.
And we're also usually trying to make the last level not the hardest one.
I mean the last in the level box, which is basically like each 25, each one of those have 25 levels.
The hardest level is usually the one before the last one.
And the purpose of the last one is, it's sort of directed to the goal of keeping players hungry for more.
It's usually not very hard, to avoid causing any frustrations, but it's really inventive.
We're trying to keep some really cool idea to the last level within the box.
And it should basically communicate to the player that the best part is still waiting ahead, and that we haven't run out of ideas.
And another thing that proves that we haven't run out of ideas are the new gameplay elements that we add.
And from the very beginning, with every update we set quite high bar of expectations by adding new gameplay elements with every update.
And we weren't sure how many of those would be able to come out, but so far we've been quite cool inventing those.
And our process of coming out with those gameplay elements, that's really changed the mechanics, by the way, in many cases.
Well, the process is quite traditional.
We brainstorm, we pick the ideas we like most.
We try drafting the levels on the paper to understand whether we will be able to create some cool set of levels based on that.
Then we prototype it and tweak the parameters, start creating the levels and put the final art.
And from the very beginning, the logic for adding new elements for us was to add more directional freedom to the candy.
So there was a gravity affecting, obviously pulling the candy down, so we needed something that would move it up.
So here goes a bubble.
And then we need some horizontal freedom as well.
And we add the air cushions.
And what's also cool about them and what we're trying to keep with all the elements that we add, is that those are intuitive and fun to interact with. So it's fun to pop the bubbles, it's fun to click on the air cushions because they make farting sounds, and stuff like this, it's really cool, it's important to keep the game entertaining.
All right, so...
Another, so adding new stuff is cool, but we also have a luxury to learn from, like, each time we add new stuff and do new update, we can and we should learn and analyze what we did right, what we did wrong.
And not only we can use this knowledge to, you know, while adding new stuff, we can also look at the existing stuff and maybe tweak it a bit, maybe improve it, maybe change it.
There's some controversy about changing the levels in the game after they're being released.
We feel it's okay to do it if it doesn't harm the scores of the players and if we're not going too wild with that.
So, to understand what needs to be changed...
We're using several sources of information.
And one of them, of course, being user reviews.
This is a great channel to receive the feedback overall.
And you can quite often see also the feedback about the levels.
Like this one saying that the level 9 in one of them boxes is impossible.
Why would you do this to me?
And if we see several of those, there's obviously something wrong with that level.
Another great thing is to have players as fans on your Facebook page.
Not only it brings some marketing possibilities, but also it's a great way to communicate, to talk to your players.
And we're also from time to time asking some things that help us to make decisions on how we move forward and how we maybe improve the existing stuff.
Surprisingly, Game Center can be also used as a statistics tool.
So we keep leaderboards for each one of the level boxes in the game.
And we can see, in this case, the amount of weekly submitted scores for each of the level box.
So this way, we can see that obviously not all players reach the very latest levels of the game.
We have plenty of those.
We've been updating for one and a half year.
But still, we want as many players as possible to get to the end.
So at some point we rearranged the level boxes a bit, we tweaked some levels, and we were able to improve the percentage of the players that reach the end of the game by 5%.
It might sound like not a big number, but considering the audience of the game, it's huge.
And there's, of course, more complicated, more complex and advanced ways of getting data, getting statistics, like Flurry. And for level designers, the most important metrics are failing rate and skipping rate.
which we track for every level in the game.
And basically, failing rate is the amount when players see the sad face of unknown.
When the candy gets broken, when it falls out of the screen, these kind of things.
So if this parameter is high, usually it means that players get the understand how to solve the level, but they can't execute it well.
So it means that probably we need to simplify the arcade part of the level.
If the skipping rate is too high, then probably players can manage the difficulty, the timing challenge of the level, but they just don't understand the puzzle component of it.
So then we maybe should simplify it a bit or add some tip to the level that would help players to understand how to solve it.
So, it's really a tough balance really.
On the one side we want as many players as possible to reach the very latest levels in the game and then impatiently waiting for updates.
At the same time we of course want to keep some challenges in the game.
So it's a really hard balance and we're trying to keep it and we're trying to learn and that's one of our biggest challenges.
So...
The results that we got so far as level designers, we created more than 900 levels and less than half of them ended up in our games, obviously because we're trying to create more levels that we need and then we pick the very best of them and we put them in our games.
And we are proud to constantly invent new things, new gameplay elements, and there have been already more than 22 of them added to the game.
But the most important achievement, of course, and it directly serves the goal that I've highlighted in the beginning, is that players want more.
And that pretty much fits the expectations of this little green guy.
All right, thank you very much.
Michael and I will get to answer questions.
Thank you very much.
Is there a microphone?
I have one question. So in the updates of Color Road, you said it's data-driven, so did you change any existing data levels?
And how did you change that so that it doesn't affect the balance of the game or the existing saved data of the player?
Well, we're making sure that on the technical side there's no problems happening.
Sometimes we, like, there's some bugs of course coming up and we're like trying to fix them as fast as possible.
But basically it's more of a technical challenge. It can be solved pretty easily.
From the design perspective, the most important thing is that players wouldn't really get upset about this kind of change.
And from our experience, they don't. They notice that maybe something has changed, but they're okay with it.
Thank you.
I'd like to ask, how just...
Sorry.
Yeah, go for it.
Sorry.
How you just came to the ideas of your games?
I mean, this train, this rope, and actually about the rope, I'm not sure who is this guy.
Sure.
Sorry, how did we come up with the ideas for the game?
So, yeah, that's a funny thing.
I came up for the idea for Trainyard while I was riding a train to work.
And so I was just like, wait a second, this would, yeah, I really wanted to do something where there was something with paint.
I mean, there's no real paint in the game, but the idea of colors mixing together.
And then it really felt like I was almost discovering the play mechanics rather than inventing them.
It was just like, once I started looking, I was like, wow, there's like a whole lot of really interesting possibilities here.
Yeah, and for Cut the Rope, we basically had the physics engine, the rope engine, already in place.
It was done for our previous game, but it never was used there. So then we started brainstorming about what can be the gameplay we can build around that rope physics. And it was really a good starting point. We made several prototypes around the rope and one of them was the best, and it ended up being the game.
And this green thing?
Oh, the green thing.
It's just a product of many, many doodles, you know, and experimenting.
And he really plays a big role in the success of the game, I believe, because he's kind of like a baby monster.
in a way he encourages the parental feelings.
So each level is not about getting some amount of score, but rather it's satisfying the needs of this little green cute creature.
So the emotional goal is much bigger than any competitive goal.
Thank you very much.
Thanks.
Hi, I have a pretty picky question for Matt.
Oh boy.
I love train yard, but I noticed the color mixing trains don't follow the primary colors of light.
And I just wondered if that was a deliberate decision on your part.
Well, yeah, I've had a few people complain about whether I should be using subtractive or additive color systems.
I mean the basic thing is just that people seem to understand subtractive color systems more than additives, so that people seem to really understand the fact that blue plus yellow makes green rather than using like magenta and whatever so it's yeah I mean that was really the reason people just seem to really associate with it and I think part of it was just because of the fact that the game was really originally was supposed to be about like these cars of paint and there was like a almost like a paint crash on the middle of the railroad where these colors were mixing together.
Yeah. Great, thanks.
So Matt, you mentioned that you'd created some levels that took you like up to eight hours to solve. I'm wondering how do you go about making a puzzle that's hard for you yourself to solve, but not impossible? Like how do you know that you've created something that's still solvable?
while still challenging yourself?
So the problem with Trainyard is that there's no way for me to really know whether something's solvable at all.
So I would just literally just sit there and have kind of a...
Basically, my first step is just to work it out mathematically, whether the colors add up and the number of trains add up.
And then just make this puzzle and try and solve it, and try and solve it, and try and solve it.
And I have a few, like a pile of puzzles that I've never been able to solve that are in my pile of like...
Moby Dick puzzles that one day I will conquer.
But yeah, it's just really a process where I try to solve them, and sometimes I can't, and sometimes I can.
How much time does a single puzzle take for a level designer to make?
And how many level designers were working on the later levels of Cut the Rope?
It usually takes, I would say, several hours, like maybe two hours for the first iteration of the puzzle.
And then, of course, when we have the full set of the puzzle for the level box, then we all play them, we do play testing, and then more iterations add.
So it's like an iterational process and it's not that much related to some particular level, it's rather looking at the levels as a whole.
And how many people work in the later levels of Cut the Rope?
So we have, I think, three level designers at the moment working on the levels for our game.
Alright, thanks.
Thank you.
Awesome, yeah.
Samyan, when I saw, when you showed your spreadsheet, I saw you had a difficulty rating on a scale of 1 to 10.
In a pre-release state before you have...
like high volumes of playtesting, how do you get a reliable measure of difficulty?
There is no reliable measure.
It's a gut feeling, really.
And we were asking different people to play the levels and then put the difficulty number that they felt, how difficult it is.
And then we were trying to calculate the average.
But then, you know, you can't really.
The trickiest part is then you can measure the difficulty of the arcade gameplay.
But with the puzzle, you have no idea.
Like one person can come out with some solution right away, and some will spend like several hours completing it.
Thank you.
Thanks.
This is for Trainyard.
How do you determine the grid size and how does that affect designing your levels?
That's a good question.
So the story of Trainyard is actually that it started out as a Flash game and originally it had an eight by eight grid and then I never released the Flash game.
It was just like a prototype basically.
And then when I put it on iPhone, eight by eight wasn't working and I really liked the kind of...
not quite balanced of having that middle row with seven, like I really like that for some reason.
And yeah, so basically seven worked really well with being something that your finger can actually go through the puzzle really. Was there a second part of the question or that was the...
Well actually I guess, wouldn't you make it...
bigger on the iPad, like maybe more grids, a bigger puzzle, or, I mean, or you thought about doing that?
In theory, yeah. Like, the way the game works, adding even one row would exponentially increase the amount of possibilities, which is a great thing, and I'm, at some point I may consider making a version that has more rows.
But yeah, it completely, like the amount of possibilities...
With the 7x7 grid, right now there are over 40,000 player-made puzzles, and there's still, like, things that surprise me every day.
So it's pretty crazy how much possibility there is there, really.
Hi, I was wondering what your total, sort of, development time was, and if your total budget was what these cost.
It's a bit tricky to say what the development time for Cut the Rope because the physics engine and the rope engine were developed as a part of a previous project.
But approximately it's around maybe four or five months I would say.
But that was only the initial game.
Since it was released like one and a half year ago we've been constantly working on it.
So you can say that like four months and one and a half year.
And as for the budget, working on Cut the Rope, we pretty much didn't have any budget.
It was just a bunch of guys working from home back then and just doing what they like.
I think that's it.
All right.
All right.
Thank you.
Thank you very much.
