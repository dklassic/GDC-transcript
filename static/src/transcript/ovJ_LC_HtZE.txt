Good afternoon, GDC.
GDC 2010, all right!
Best GDC ever.
Good afternoon, and welcome to Among Friends, an Uncharted 2 Among Thieves post-mortem.
Please set your mobile devices to mute, and don't forget to fill out your feedback forms at the end of the session.
Thanks.
My name is Richard Lemarchand and I'm a game designer at Naughty Dog.
I was the co-lead designer of Uncharted 2 Among Thieves and today I'm going to talk you through how we went about developing our game, what went right, and what blew up in our faces like a red explosive barrel.
As you might know, Naughty Dog, our studio, is the creator of the multi-million selling Crash Bandicoot and Jak and Daxter series of games.
We're based in Santa Monica in Southern California, and we currently have about 120 people on staff.
In 2007, we released Uncharted Drake's Fortune, our first game for the PlayStation 3, which introduced the world to the adventurous fortune hunter Nathan Drake.
And last fall we released Uncharted 2 Among Thieves, which has turned out to be the most successful game in our studio's history.
Now we'd had a rough ride on Uncharted Drake's Fortune, including a mid-project production reset that saw us throwing away a lot of what we'd done and starting over. We were very happy with the game that resulted, but with our next game we wanted to do a lot more.
Well, we got what we wished for because Uncharted 2 was the most ambitious project we'd ever attempted at Naughty Dog.
And we chose to tackle some particularly brutal challenges, both technical and design-related.
So how did we manage not to screw it up?
Well, there were some things that we nearly did screw up, and hopefully this post-mortem will help you to avoid at least some of the spiky-ceilinged pit traps that we fell into.
So we start every new project with a short list of project goals and we refer back to them throughout development to make sure that we're staying on track.
As we completed Uncharted Drake's Fortune, we already knew that we wanted to make a sequel and we began to discuss what we wanted to do with it.
Our top line goal was that we really wanted to create something that a lot of us at the studio had been dreaming about for a really long time.
That is to say a fully playable version of a big summer blockbuster action-adventure movie which kept the player in moment-to-moment control nearly all the time as the drama exploded around them.
When we were making Uncharted Drake's Fortune, we'd gone back to the roots of adventure romance and pulp fiction for our inspiration, kind of giving them a contemporary spin.
Well, this time out, we wanted to stick to the same guiding principles for the world of Uncharted in terms of creating a colorful adventure that didn't take itself too seriously, but we also wanted to outdo ourselves in every way that we could think of.
Our story in Uncharted is character-driven rather than plot-driven, and we decided to include a larger cast of characters in Uncharted 2.
The other characters would help us to show more of the world that Nate operates in, and would act kind of like emotional satellites, revealing more about both the good and the darker sides of Nate's character.
So going through the process of discussing the goals of the project led us to decide what Uncharted 2 would be about.
While Uncharted Drake's fortune had greed and its consequences as its theme, Uncharted 2 Among Thieves would be about trust and betrayal and whether it's better to stay loyal to your friends or to act out of self-interest.
We were going to improve and add to the gameplay of Uncharted, of course, in a focused way that would service this playable cinema feel that we wanted to capture, and which would drive many different technological improvements in our engine.
We also knew that there were a lot of graphical improvements that we could make.
And finally, we wanted to make an online multiplayer game using the Uncharted mechanics.
We knew that, at the very least, we wanted to make a competitive game with several different game types.
So, armed with our project goals, we set out into the pre-production phase of our project, which lasted for about the first six months of our 22-month development cycle.
Pre-production is, of course, a very important phase of any game development endeavour, and messing it up often means messing up the whole project.
The way that we handle pre-production at Naughty Dog is one of the things that we think makes us unusual as a studio in that during pre-production, we don't have anything in the way of conventional deadlines or deliverables.
Our pre-production period is this very free form time where we conduct brainstorms, we talk about gameplay and story ideas, we make loads of concept art and pre-visualization animations and we do as much prototyping of gameplay as we can with whatever tools that we happen to have on hand.
And I'll show you some of our previous animations in a few minutes.
So by doing this we pretty quickly come up with a handful of ideas that are simply too good not to include in the game.
One such idea that came to us very early was embodied in a simple photograph, that of the Paro Takt Stang, the famous Tiger's Nest Monastery in the tiny country of Bhutan, at the eastern end of the Himalayas.
The way that the monastery seems to cling on to the side of the cliff seems perfect for Uncharted.
So the photo gave us a good grounding in reality for the larger than life scenario that we invented and it was also suggestive of the kind of perilous climbing gameplay that we love so much.
So we soon began to design and build a level based on the tiger's nest, long before we had any real idea of how it fit into the rest of the game.
And there's a cautionary tale in there which I'll tell in a moment.
Another idea that came to us early in pre-production was the notion that Drake would fight along the top of a train as it sped through a landscape. The idea was such a perfect fit with the pulp-inspired tone of Uncharted that we knew that we had to do it, and this piece of concept art illustrated the idea for us just perfectly. However, we didn't want to go the same route that train levels in video games had taken in the past.
where the train is actually static and the background is scrolling by creating the illusion of movement. We wanted to do it for real and that gives me a chance to describe how gameplay ideas like these in pre-production can drive the technology path that we take. So the desire to create this level, which was one of the first that we conceived and one of the last that we completed, drove an enormous chunk of the new technology we created for Uncharted 2.
technology that became very important for the cinematic set pieces throughout the whole game. We called it our dynamic objects traversal system.
Anyone? Anyone?
This system provided us with the ability to have player character Nathan Drake and all of his allies and enemies in the game able to use all of their traversal and combat abilities on any moving object.
Now this might not seem like a big deal, but for those of us who had been working on 3D character action games for a while, it was pretty much the holy grail, because it would allow us to do things that we had only been able to dream of before.
It was amazingly complicated to get this dynamic object traversal system to work.
Our programmers had to touch or rewrite nearly every system in the game, from the player control to objects, to collision, to the enemies and allies AI.
Once we decided to do it though, our programmers got to work on it straight away and they were already busy with it while we were in pre-production, finally finishing it partway through full production.
Taking the leap to do something like this, as crazy as this, took a lot of tenacity and courage and we had to keep going even when it felt like an impossible task.
But happily it paid off in countless ways.
from the collapsing hotel to the convoy, Uncharted 2 was able to stand out from the crowd and wow our players with things that they'd just never seen before.
One more idea that emerged from pre-production was that of Nate collapsing in the snow and being rescued by a mysterious stranger that for a long time we just called the Rescuer.
Nate would then wake up in a peaceful Himalayan village and discover that his savior was a village leader named Tenzin and that they didn't share a common language.
We planned that Nate would leave the village with Tenzin to explore a puzzling mountain cave system before returning to the village now, to a village now under attack by a very well-equipped army.
We thought that this would create a particular sequence of emotional experience for the player.
almost entirely through gameplay.
And even though much of the rest of the story was still undecided, we were able to stick a pin in this idea and proceed, confident that it would find a home in the game.
Now you can hear much more about these kinds of techniques and how we used gameplay and allied characters to create emotional experiences for the player by heading over to tomorrow's session.
uh... creating the active cinematic experience of uncharted 2 by our game director Bruce Straley and my co-lead designer Neil Druckmann. It's going to be excellent, don't miss it.
So as our list of ideas grew, we experimented with putting them together in different orders to see what kinds of story ideas would emerge.
We used a board full of index cards with story beats and character goals and gameplay moments that we could move around easily to try on different sequences of play.
So with a lot of conversation, lots and lots of in-depth research into places and history, and then with a great deal of careful thought and hard analytical work, sequences of storytelling gameplay started to come together.
And we soon had big chunks of the game figured out.
Now this is how we create one of the most important documents of the project and the only deliverable for our pre-production period.
It's a short spreadsheet, you can see part of it here, that we call our macro design.
So the macro design is basically a list of the game's levels and corresponding story beats.
It shows the locations that the game will visit, what play mechanics are used in each level, and whether they're core mechanics or special gameplay sequences like, say, a vehicle sequence.
It shows the enemies that the player will encounter and what allies will accompany Drake on each stage of his journey.
The macro also showed us that we would have a focus on Asia as a location for much of the story.
that the true story of Marco Polo's lost fleet would provide us with our real-life historical mystery for the game and that the plot would hinge around an old friend of Nathan Drake's who would ultimately betray him.
So the macro is something like a game design document.
But it's a lot more concrete than any 100-page game design ever written at the end of pre-production, because it has enough of a level of abstraction that you don't waste time devising details that later get changed.
The macro design for Uncharted 2 was only 70 rows long, and it shows the structure of the game that we shipped a full year and a half later, almost exactly to within 5% or 10%.
So as we progressed through pre-production, there were a couple of other important gameplay systems that we decided to get busy with.
There were a few gaps and spaces in the play mechanics of Uncharted Drake's Fortune.
So for Uncharted 2, we gave Nate some new mechanics to fill things out, like brachiating on monkey bars, swinging on free ropes, and a nifty new hand-over-hand free climbing ability.
We also wanted Nate to be able to pull out his gun and return fire to an enemy no matter what he was doing in the world.
Whether he was climbing, balancing on a fallen beam, and even when he was in mid-air during a jump.
It didn't take us very long to flesh out these abilities and expanding Drake's traversal gunplay like this was good for us when it came to devising combat scenarios because it meant that we could throw down some enemies in just any section of the game and in that way discover novel combat setups in the most unexpected traversal sequences.
We also started work early in pre-production on improvements to our AI that let players choose to engage with our combat setups in an action stealth way.
In order to let players hide out and observe the enemies and figure out how to possibly infiltrate their ranks.
and even manipulate them into positions that would make them easier to defeat.
We gave our enemies an investigate behavior that they would use when they thought they'd heard or seen something unusual and also a search behavior that they would use when they had seen Drake but they didn't currently know where he was.
Now these techniques paid off right throughout the whole player experience so it was really good that we got started on them early during pre-production.
One last important thing for us to do during pre-production was to get a handle on how long it was going to take us to create the big set pieces that we wanted to have in the game.
One particular sequence from Uncharted Drake's Fortune had stuck in our minds and really fired our imaginations.
It was the one you can see here, just a simple sequence at the island waterfall where an explosion near a truck full of enemies flips the truck and forms a bridge.
It was a really dramatic moment, just like something from one of our favorite action-adventure movies, but it played out almost entirely in gameplay.
It made us feel that we had only begun to scratch the surface of what was possible in terms of delivering a truly interactive cinematic experience.
And we thought that making bigger set pieces and moving away from so-called quick-time events was probably a great way to go.
Well, it was a great way to go, and everyone seems to really like the set pieces in Uncharted 2.
However, they are enormously time-consuming to implement.
We had foreseen this, and so early on in pre-production, we got busy building a version of the collapsing bridge in the monastery that you encounter towards the end of the game.
We confirmed our suspicions about how extremely time-consuming that kind of sequence was to build.
and so we hired some very technical scripting designers trying to make sure that we had enough people to get everything done in time.
It didn't quite work out perfectly though, as you'll hear later on.
One of the most important things that we had taken away from our post-mortem of Uncharted Drake's fortune was that simply getting on and starting to build something is the very best way to go about the creation of a video game.
We'd spent far too long theorizing about our game's design and production during the creation of the first Uncharted, and it wasn't until we pressed forward with the construction of some gameplay and levels that we made the real discoveries that allowed us to optimize the production and finish the game in good style.
So we did our best to hit the ground running with Uncharted 2.
The team was eager to keep the production momentum that we'd built up over the previous three years working on Uncharted Drake's Fortune.
And using the first ideas we decided that we would use, everyone began to create art and implement game mechanics and layout levels almost immediately.
Now this meant that our artists were polishing their level building approach and making useful assets much earlier than they'd been able to before.
And by the time we hit full production, we were in a much better position than we had been at the same stage of the last project.
However, moving forward so quickly meant that the end of pre-production and the beginning of full production kind of got a bit blurry.
We came to the official end of pre-production when we finished our macro design, but it was something of a soft finish.
The parts of the macro to do with the way that the story came together at the end of the game were a bit light on detail.
And this led us directly into what could have been an enormous disaster for our project and which we only narrowly avoided.
It took us a long time to work out how the story would come together, in the monastery in particular.
And when you play it through, you might notice that there aren't really enough strong story beats there to match the length and the intensity of the gameplay.
And it's the first place in the game where the pace of the experience kind of begins to lose steam a bit.
Of course, as soon as we realized what was happening, we scrambled to patch things up.
but at the end of the day we had committed too much to the level in terms of its final art and we couldn't really bring about a perfect fix.
So this is the first major takeaway from this post-mortem of Uncharted 2.
That it's important to have a strong macro design.
If the macro is solid and describes a rising and falling rhythm of story that tightly matches the rhythms of the gameplay, then you can be confident that your game is going to rock.
However, if your macro has any weak spots, do make sure you firm them up before you commit too much in the way of final art to that part of the game.
and tried to pay special attention to pacing issues for parts of the game whose level design starts early and whose story design finishes late.
So anyway, to round off the pre-production section of my talk, I want to show you guys what is a world exclusive, especially for GDC.
While we were making Uncharted Drake's Fortune, we had learned firsthand about the power of pre-rendered, pre-visualization animations.
By making quickly and loosely animated sequences, pre-rendered linear sequences, with blocky, low detailed worlds and characters, we can very quickly start to refine our ideas, the kinds of ideas that we've had for moments in the game.
They're kind of like moving concept art, and we refer back to them all throughout the level layout process.
Only one of these animations have been seen outside of Sony before, so I'm delighted to be able to show them to you guys today.
The previous animations are silent, and I'll kind of talk you through them, and then we'll look at some comparative pieces of gameplay from the shipping game.
So this first one is very simple, just to kind of get you into the idea.
I think we were during pre-production when we made this, we knew that we wanted to have this sequence of exploration, we wanted Tenzin to put up a free swinging rope that Drake would then use.
And you can see just how much of the camera blocking in particular we discovered in the process of creating and refining this animation.
Check out Tenzin's awesome hat and pipe.
Okay So you can see how we worked out the camera blocking very early very early this one's in two parts we didn't use these previous conceptions Very much. We did use this one Drake taking cover on a corner which then gets blown up by the tank. We made it so that if you ran directly away from the tank you would get killed by the tank's machine gun in order to be able to push the player around the level while still giving them freedom of movement.
But it did really help us start to set the tone for the village.
This next sequence you can see much more directly translates into the game.
You can see the ongoing love affair that we have with parkour and free running and the fact that we've probably recently seen the Bourne ultimatum.
And if you played Uncharted 2, you will recognize this moment.
It didn't translate directly, and in fact you'll see that the sequence of play leading up to this...
And then this last one is a little different.
This shows the use of previs animatics just ahead of full production.
We made this one just before we implemented the sequence in the collapsing hotel, which was part of our E3 Sony press events demo.
And you can see that there's an extremely tight correspondence between this previsualization and the events of the ship.
How was it, Joe?
This isn't good!
was in that.
So hopefully you can see just how valuable these kinds of pre-rendered linear animatic movies are.
It's also extremely cool to involve your talented animators in the pre-production phase, because of course they have so many great ideas about moment-to-moment action, and you can all start to have an on-screen discussion about just how.
events in the game might play out.
So we officially started full production when we finished our macro design in April 2008.
Of course, once we were in full production, we needed some micro design to go along with our macro design.
What we call micro design is all the detailed design work that needs to be done to create a video game, level layout, mechanics development, and so on.
We do this macro design work on a just-in-time basis.
It's a bit like Gromit laying out the toy train tracks only just ahead of himself in the wrong trousers.
We had gotten a leg up with the micro design during pre-production, and we were just far enough ahead of the team that we were able to move forward smoothly.
Even though this part of the way that we work might seem like a pretty seat-of-the-pants way to do things.
We think that it's the way that a lot of game development happens in truth, and that we just have the courage to make it an official part of our process.
One very important and time-consuming part of the micro-design is level layout, of course.
Inspired by our philosophy that getting on and building out the game is the best way to go about things, we adopted a new level layout approach for Uncharted 2.
that saw us spending less time working on detailed paper maps of our levels and instead designing our levels by creating what we refer to as block mesh which some studios refer to as white box or grey box.
We started by sketching out an experiential flow for the player and then meeting with the artists and the programmers who would be working on the level with the designers to get their input and their ideas.
Then we just started building a simple geometry in Maya to rough out a physical footprint for the level and playtesting it on literally anyone who came within arm's reach and getting constructive input from as many different people as possible.
We started to do paint-overs with our concept artists to move our conception of the look of the level along.
And after that, it was simply a question of iterating as much and as quickly as we could before we needed to hand off the block mesh to our environment artists, who would continue to iterate on the level by making progressive detail passes until we eventually arrive at the finished art.
There is one potential downside to rushing ahead with level layout in block mesh like this, which is that there's a danger of not putting quite enough thought into the layout.
and of missing some opportunities to make it multi-dimensional in terms of its gameplay possibilities.
You also run the risk of not thinking about whether what you laid out as a blank wall will become filled with attractive detail and look climbable, misleading or confusing the player.
And unfortunately this is a pretty serious problem in Uncharted 2, especially in detail-rich areas like the one you see here.
So in the future, we're going to try and find a better balance as regards these aspects of our layout process.
And we're going to try and have more of a layout focus on realistic architecture earlier and how its details will affect the player's experience.
In full production, our project runs much like a conventionally scheduled game development project.
Working from the macro design, we drew up a simple schedule for the environment art in a spreadsheet.
blocking out week-long chunks of time for our environment art groups.
We were able to do this with confidence because the macro design had given us just enough detail to see where our effort should be distributed, and we knew that since the creation of the environments was the most time-consuming thing that we had on our plates, we could use this main schedule as a kind of backbone of schedule for everything else to hang off, and that we could always be sure that we were making solid progress towards our final goal.
As the level designs firmed up, we also got busy making lists of everything that we needed for each level, since we wanted to make each one as functionally complete as soon as we could.
So we listed out objects, sound effects, visual effects, and animations that we needed to tie everything together, and we got them into the hands of the relevant leads as early as we could.
We need an enormous volume of entities to make a game like Uncharted 2.
For example, we had 80 in-game cinematic animations, what we call IGCs, in Uncharted Drake's Fortune.
But we had 564 IGCs for Uncharted 2.
Now, this is a pretty amazingly large amount of work to requisition and produce on an ad-hoc basis.
So the leads of each department had to juggle their priorities a lot, and they worked very hard to get everything built in the right order.
They had to be very patient as the designer of each level came up to them, bugging them over and over again for the stuff that they needed.
And it's really only because of our ability to work together without much friction that our games always come together on time.
So now let's talk tech for a bit.
We had created an entirely new engine from scratch in the course of developing the first Uncharted.
And that really allowed us to hit the ground running when we started Uncharted 2.
But we had a long laundry list of improvements and updates that we wanted to make.
And by the time we finished, we'd changed so much that we dubbed the engine the Naughty Dog Engine 2.0.
As you've probably heard already, if you're interested in PS3 development, we went cell processor crazy on Uncharted 2.
We were famous for saying that Uncharted Drake's Fortune probably only used about 30% of the capacity of the cell processor, which is of course the powerful chip that lies at the heart of the PlayStation 3's architecture.
And so from the very beginning of the project, our programs were focused on making sure that we squeezed every last ounce of performance out of the cell.
The key to doing this was deciding which jobs we wanted to farm out to the cell.
and then writing hand optimized code to do those jobs as efficiently as possible.
And you can see just how much of what the cells' SPUs are doing has been diligently optimized by a cycle counting programmer in this screenshot.
Probably the biggest technical change from the way that we did things on the first Uncharted was that we used the cell processor as a graphics chip, running it in parallel with the PS3's dedicated graphics processor, the RSX.
We only did vertex processing on the SPUs before Uncharted 2, but now we do pixel processing.
And we get much richer graphics by doing this.
By moving jobs to the SPUs, we were free to do more on the RSX.
and you can see the graphical leap forward that we made as a result of this when you look at the snow and the ice shaders that we created for the ice cave you can also see the fur shaders uh... who also made the fur shaders possible for our awesome howling wolves i so wish we could get this t-shirt We used light maps for the first time to get better detail in our pre-rendered shadowing in Uncharted 2.
And to complement them, we were also able to use a lighting technique called Screen Space Ambient Occlusion, or SSAO, which was hugely instrumental in making our game look as solid and as grounded as it does.
SSAO is a rendering technique for efficiently approximating the computer graphics ambient occlusion effect in real time and as I move through these slides hopefully you can notice the effect.
Ambient occlusion is what simulates the real world effect of the darkening that you see in nooks and crannies and in the concave space where two convex objects touch each other like in between your fingers right here.
Our SSAO is completely on the cell processor's SPUs.
Our graphical post-processing effects were also completely on the SPUs.
These included big improvements in the quality of our bloom effects and the huge leaps forward that we made with depth of field, which was kind of a hack for the first Uncharted, but which for Uncharted 2 was a much more physically correct solution.
which of course made the times that we used it in the service of cinematography that much more powerful as a storytelling tool.
We also implemented a filmic HDR response curve.
And Uncharted 2 has a much wider range of colors in between light and dark than its predecessor, making it look much more like the game was shot on film, again, supporting our goal of creating a cinematic reality.
So nine months before launch, we suddenly realized that our frame rate was, to put it bluntly, pretty crap.
So we had to mobilize to fix it.
And right up to the end of the project, we had a huge focus on frame rate.
Both our programmers and our artists had to work very hard on the issue to make sure that we hit 30 frames a second consistently throughout the whole game, and so banish some of the issues with tearing and stuttering.
that we'd experienced with Uncharted Drake's Fortune.
We had to give people the analytic tools they needed to keep the game inside framerate, and we had to make a memory sacrifice in order to achieve the triple buffering solution that finally got rid of the tearing.
Now, this is an issue that plagues many teams, I know.
And we just wanted to stand up and say that the only way that we were able to tackle it was to regard it as a very serious problem.
that we simply couldn't let slide, and then educate those on the team who needed more insight into the specialist knowledge required to fix the problem. So it was a ton of hard work, but it was totally worth it.
So speaking of hard work, and to close out this section on the technological chops of Uncharted 2, I wanted to quickly come back to the subject of our train level.
Like I said, the train was one of the first levels that we started on and one of the last levels that got finished.
And to be frank, it was an evil monster of a level to create.
In our train level, there is a train of 50 separate train cars that are really moving along through our streaming environments at a pretty good lick.
uh... you could see all fifty cars at pretty much anytime during the level uh... and when we first started building the level when you looked at the first car from the last car the little lamp hanging on the front of the first car was still swinging we had developed but we haven't really used uh... a level of detail system for the first uncharted uh... but the train certainly made us put it into action in double quick time as i'm sure you can imagine Now we had as a design goal that the train should only progress in the world if you were progressing along it.
And in order to make this happen we had to do a lot of weird stuff.
Sometimes teleporting the train into new positions depending on what you did and where you died.
And this along with just the general craziness of the whole idea of doing a train for real like this led to a lot of bugs as you can imagine.
Particularly with the enemy's navigational systems.
they would get really confused every time the train teleported for instance uh... also for a long time when you shot the enemies and they dropped their weapons the weapon would zoom back off down the track where you come from as it shifted into the coordinate system of the world even better than that grenades would fly back in your face and blow you up after you'd thrown them To cap things off, at one point we realized that the player's gun aiming raycasts were aiming at where the enemies had been a frame ago.
Now this hadn't made much difference in most of the levels, but in the train level the enemy was back down the track two meters a frame ago, and so your aiming was suddenly two meters off.
So that was just another bug that we had to fix.
And all of this goes to show why, even though the train level was a real headache for everyone involved, it was a very positive thing to have such an extreme test case around, because it helped tighten up our game right across the board, and it made every system much more robust.
We could say to each other, well, if it works in train, it must work everywhere.
In other words, not only have we made our game run at 30 frames a second, we'd also made it run at 60 miles an hour.
Thanks for the laugh, that got groaned at when I rehearsed it.
So it would have been a real disaster if we hadn't started work on the train level right at the beginning of the project.
But it now represents a real technological marvel for us where good game design and an amazing feat of engineering come together to create something that we hope is truly memorable.
Now, as I said, we decided fairly early on in the development of Uncharted 2 that we wanted it to have a multiplayer component.
And we were happy, looking back, that we'd made the right decisions at the right times in order to make this happen.
You can see one of our multiplayer arenas right here.
In fact, we'd had such a good experience making the multiplayer part of Uncharted 2 that we think that we would now not want to make a game that didn't have some kind of multiplayer or at least networked capability, since it's such a good way for us to connect with our community of players and because it affords so many interesting game design opportunities.
In order to create our multiplayer game, all we did was simply take Nathan Drake's moveset from the single player game and implemented it in a competitive multiplayer environment.
And we were delighted, by the way, that it immediately felt right.
We devised a whole bunch of different game types, building outwards from pretty simple team deathmatches to intensely collaborative match types like Plunder, which is our take on Capture the Flag, where you have to get a big gold head back to a treasure chest in your base.
One of our studio's co-presidents, Christoph Bollestra, wrote all of our networking code in-house from the ground up.
He gave us a very solid base to build our multiplayer game on, and he was able to support us throughout the whole of development, even though he had a lot of other responsibilities.
Rather than going with a dedicated server service, we chose to use the Amazon Elastic Compute Cloud, otherwise known as EC2, for things like our statistics and the machinima cinema files that players are able to upload to the network.
Amazon's EC2 service is very scalable.
Basically, you only pay for as much bandwidth as you use.
And by choosing to use it, we have saved ourselves what will probably add up to a large fraction of a million dollars across the lifetime of our multiplayer game.
So that's something to think about.
We'd hired a dedicated multiplayer designer in August of 2008, which meant that we had someone acting as a full-time champion of the multiplayer experience for the most important phase of its development. As soon as we were able, we started having daily half-hour playtests of multiplayer right after lunch, with the whole company invited to take part, and the short, often very heated, discussions.
that would take place after each playtest were really vitally important for helping us to refine our multiplayer gameplay and for troubleshooting the problems that we encountered.
About halfway through full production, we decided that it would be great to have some cooperative missions.
And we put another designer that we had just hired in charge of them.
As you'll know if you've played them, they're like little alternate reality missions set in levels that we excerpted from the single-player game, with new scenarios for the uncharted characters to have little short mini-adventures in.
They're a ton of fun and we think our players love them.
But looking back, deciding to try and create co-op missions so late in the day might have been the point where we began to overextend ourselves.
But our multiplayer guys became such a great team and they really rocked the huge responsibility that multiplayer implied.
When we announced our multiplayer game at a special press event in early 2009, some internet posting fans of Uncharted Drake's Fortune were concerned that the single-player game of Uncharted 2 was going to suffer as a result of the attention that we would have to give our multiplayer game.
Well, even though we did have to do a lot of hard work to realize all of our ambitions, it turned out that the multiplayer actually helped the single-player game.
You see, we had to tighten up the player mechanics.
and make them a lot snappier once we got them into a multiplayer context.
And that actually fed back into the single player game and gave it a much better, tighter feel.
These are the kinds of synergies that we love to find when we're building a game, and we're always on the lookout for them.
So that was a terrific one to discover.
During the development of Uncharted 2, we took our first steps into what was for us We took our first steps into the brave new world of outsourced art assets.
We worked with Expec in Taiwan and Lady Luck in the Philippines, and both studios did a really amazing job.
For our part, we made sure that we gave our partners everything they needed to succeed, and we almost went as far as training them to make art that we could use.
We would provide a package of reference materials.
that included specifications and quite detailed construction instructions, screenshots of the locations where the assets would be used to show their context, and prototype geometry to define precisely the volumes that the assets should occupy.
We ended up outsourcing all sorts of work from environments and cut scene stages to characters and accessories, along with monotonous work like UVing and LODing.
And it's really thanks to our outsourcing teams that our game is as full of eye candy as it is.
Outsourcing in this way didn't seem to have any uncomfortable or negative effects on our company culture either.
We were simply very happy to have the additional help.
And it meant that we could scale up and down where necessary without having to strain our internal infrastructure through costly expansion or the horrible discomfort of layoffs.
It also meant that our level artists were able to spend more time focused on maintaining their levels and iterating on level design with our game designers, while someone else sweated at least some of the details.
So about two months out from E3 last year, we started to organize what we were going to show at the event.
We had two big deliverables.
a playable demo of a section of the game in our fictional Nepalese city, and a movie-style trailer that would show a lot of different parts of the game.
However, while we'd started work on everything that we wanted to show, a lot of the assets and gameplay were going to need a great deal of polish if they were going to be as impressive to E3 attendees as we wanted them to be.
And we often do this with our projects at Naughty Dog.
using a deadline to do with showing our game in public to drive production and the raw terror that it inspires certainly helps us to buckle down to some serious polish in the end our E3 demo went very well creating the right impression at the Sony press event where our other co-president Evan gave it an amazingly sure-footed live drive and we were also very pleased with the way that the trailer turned out But the next time you watch our E3 trailer, I want you to bear in mind that the things that you see in there were almost the only things in the game that were finished to that level of polish.
And if the camera had turned just a meter to the left or the right, you'd be seeing behind the scenes and not in a very good way.
So making the demo and the trailer was extremely useful, because it told us exactly how much work we were going to have to do to bring things up to a level of polish that we were happy with.
And we found out that that was a lot of work.
Indeed, it was roundabout this time, in the spring of 2009, that we realized just how much game we had bitten off, and that we were going to have to either chew extra hard, or make some cuts, or choke.
Between competitive multiplayer, our co-op modes, and our sizable single-player game, we've been really ambitious, probably over-ambitious.
In particular, even though we tried to plan ahead for them, the set pieces in the single-player game had taken much longer to create and polish than we'd anticipated.
And putting them together was immensely difficult, far worse than some of us had experienced even in our most brutal crunches.
Can you hear that throbbing?
It's kind of matching the dramatic tone of this moment.
We know that a lot of developers who enjoyed Uncharted 2 are probably going to be aiming high now in terms of their own set pieces.
And so another important takeaway from this post-mortem is a warning about just how long it takes to get that stuff right.
Even though we'd planned ahead, the set pieces took much, much longer than we'd expected, and they contributed significantly to the crunch that we experienced at the end of the project.
So as Alpha got closer, we set about seeing where we could make some cuts and reduce the scope of the game.
And we managed to make layout reductions to several levels early enough that we hadn't invested that many art resources in the affected areas.
We'd also lived with the prototype block mesh versions of the levels and their gameplay for long enough that we could see fairly clearly what we should keep and what should be cut.
However, we didn't cut to the point where we were going to be able to coast to the finish line.
And life throughout 2009 was tough for pretty much everyone at Naughty Dog.
We have never had mandated crunch at Naughty Dog, but we have hired people with personality types that make them hardworking, willing to accept responsibility, and perfectionist.
and that led to many months of long hours, late nights, and truncated or skipped weekends of downtime. The E3 demo marked the beginning of long hours for almost everyone at the company, although many people had been working extra hard for much longer than that, and that led to a summer of stresses on people's family lives and personal health, and of course the problem of the reduced productivity of tired people.
So fortunately no one got into as bad a state as this guy.
And while we don't think we'll ever be a studio that works nine to five year round, we do take the threat that Crunch presents to the integrity of the studio and the well-being of the naughty dogs very seriously.
We're continuing to discuss ways that we can avoid ever having to repeat the experience of Uncharted 2 in terms of the toll that the projects Crunch took.
We know that we have to become more disciplined about setting and hitting internal deadlines, as well as external ones, to get more traction on our projects earlier.
And we're going to try other approaches, like putting mandatory limits on the amount of time that people can spend at the office.
So changing track a bit, in the course of Uncharted 2, we did more playtesting than we'd ever done before, running 15 playtests over the last 10 months of the project.
compared to only seven over the whole three years of the development of Uncharted Drake's Fortune. Now these were formal playtests with groups of ten players selected from the general public who would play the game, or as much game as we had, right through. We do this in addition to all of the informal playtesting that we do every day on each other.
Playtesting and metric data analysis have always been very important tools for us.
But they were particularly important for Uncharted 2 because several complex sequences of gameplay only came together very late in the project.
And in order to make sure that we weren't introducing any difficulty spikes, we had to scramble to add additional sanity check playtests right up to just days before Gold Master.
Doing the playtests in-house was the only way that running so many tests was possible.
especially when a lot of them took place at short notice.
And it also had the enormous benefit of allowing all of our designers and QA leads to regularly see their levels in action with brand new players.
As our playtesters played, we uploaded metric data about their actions to a database over the network.
Things like how long it took them to complete each part of the game, or how frequently they died between continue points.
When we put that data into a spreadsheet and looked at the maximum, minimum, and median values for each point of data, and then color-coded cells that had values above certain targets, parts of the game that were potentially problematic immediately jumped out at us.
And we could then start looking at the gameplay videos that we had recorded during the playtest sessions to investigate each potential problem.
Notice that one poor player had to play our train yard fight 27 times before they finally beat it.
That was horrifying when we saw it.
Luckily we were able to spot that one and fix it.
So it took a lot of energy and commitment to properly carry through with diligently play testing every last thing we built.
But it was definitely worth it in terms of the quality of the game that we shipped.
As we approached our alpha deadline, we organized a series of rolling deadlines, locking down the levels in small groups over the course of the four weeks leading up to each of our alpha, beta and gold master dates, rather than having the whole game come due on the same day.
With a game as large as the one that we were making, it made good sense to do this in order to have fewer moving parts as we got close to the end of the project.
We'd always planned to have long alpha and beta periods of six weeks each.
We simply needed that much polish and bug fixing time for the size of the game that we'd made, and we're firm believers that allocating sufficient polish time can make or break a game's quality.
However, having said that, we didn't have any time for any kind of post-production, and that was one last small disaster that we just had to suck up and deal with.
Our particle artists and lighting artists and sound designers had to scramble for every second of polish time that they could grab, since the rest of the team, designers and artists in particular, were making changes and bug fixes that affected their work right up until the end.
In the future, we're determined to build proper post-production time into our schedules, so that our games can have the level of aesthetic polish that our audience increasingly expects.
So we hit gold master on August 20th and after that there was just the usual work to do.
Copy editing the strategy guide and starting to look towards the press and promotion work for the release of the game. We were extremely happy with the way that the game had come together and we thought that we probably had a hit on our hands. Now all that we could do was wait and see how critics and the public would receive the game.
Happily, it seems that everyone agreed with us, that Uncharted 2 Among Thieves is the best game that we've ever made. We're delighted to have been awarded quite staggering 33 Game of the Year awards. So I quickly wanted to thank and congratulate everyone at Naughty Dog and at Sony and all of our partners beyond the studio who have helped our game become such a big hit.
So at some point during the development of Uncharted 2 Among Thieves, we started calling it Uncharted 2 Among Friends.
Just for a laugh really, and to keep ourselves g'd up in the middle of all of this hard work that we were doing.
But it also meant something deeper, at least it did to me anyway.
I haven't really had time today to detail all of the unusual things that we do when we're developing a game at Naughty Dog. If you're interested to hear more about our unusual methods, please check out a talk that I gave just last month at the Dice conference. You can find a video of it by googling Naughty Dog Dice G4.
In short, we work in a very fast, loose, seat-of-the-pants way.
that puts an emphasis on our team members taking responsibility for the production and organization of their own work and for the design of the game.
We encourage our team to stay constructively critical and honest with each other at all times and to always keep an open mind about our design and production process to make sure that we're working in the best ways that we can possibly work.
We always take the time to listen to each other respectfully and we never make things personal.
We always have to remember that we're all in it working together towards the greatness of the game.
And working in a way that builds strong collaborative relationships between our team members is the only way that we can make a game like Uncharted 2.
And there is nothing as satisfying, of course.
as the feeling that you're working at your optimal capacity among peers who respect and trust you. One last tiny bit of advice. If you're working on a story game, make sure that your game is about something, apart from just murking on dudes. Human experience is incredibly varied and complex, and when we discuss it in our games, we're not talking with subtlety and nuance, people invest their most personal values, their fears and their hopes into the experience, and it becomes not only more entertaining, but also more culturally valuable.
So I'm afraid that I don't have time to take questions on stage, but if you wait for me just outside the room here, I'll be happy to try and answer any questions you might have.
Don't forget to go and hear the other Naughty Dog's talk.
You can see a massive list of their talks right here.
In addition to Neil and Bruce's talk tomorrow, Naughty Dog creative director Amy Hennig and Cinematics Animation Lead Josh Scher will be talking about the process of capturing the performance of our amazing actors.
and of animating our characters in just half an hour, right now.
3pm, room 303. It's going to be a must-see session for fans of Uncharted, so rush over there to ensure you get a seat.
We're hiring. Go see us at the booth. Fill out your feedback forms.
Thanks for your time. Thanks, guys.
Thanks very much.
