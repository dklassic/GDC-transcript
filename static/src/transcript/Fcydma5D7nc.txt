All right, everybody, we are going to pick things up again with the one and only Seth Marinello, who's going to give a talk on Dead Space 3!
Hi everybody, so as Corey introduced me already, I'm Seth Marinello, I was a level designer on Dead Space 2 and then most recently Dead Space 3.
And rather than kind of do a full post-mortem on Dead Space 3, I decided to focus on one specific element, which is the cooperative design that we added to this game, so that we can kind of drill down and look at what building this sort of, you know, major new feature meant as a level designer as we step through the different phases of development.
And I've kind of broken this talk down into four distinct areas, and there was definitely overlap between these, but I've separated it out based on what's the predominant thing on the design team's mind at any one point.
So at the very beginning, the main thing we were worried about was what's the concept?
We're adding co-op to Dead Space.
What does that mean to the Dead Space franchise and the universe, and what do we want it to feel like as a design team?
And then there was this period where it's like, all right, great, we've got an idea of what we want to do, but there's all these technical problems because we're going from a franchise that was predominantly single player, an engine that's predominantly single player, how do we make that work in a multiplayer world?
And with those two players that we now have, how do we adapt our gameplay and make it work in a way that still feels balanced and tight, like the single player campaign does when we drop another player in there?
And also now that we have two screens, how do we take that and create something that expands the experience that's possible in the Dead Space universe?
So that we're not just, you know, adding another feature of it's like, alright, yeah, great, your buddy can drop into the game now.
But it's like, we're leveraging it in a way that makes something possible that we couldn't have done before without adding this.
But before we get ahead of ourselves, we're going to kind of start off with phase one, which is the concept.
And when we announced that we were adding co-op to Dead Space 3, I think the first thing that popped in pretty much everyone's mind is, why the hell are you adding co-op, right?
But if you actually step through it, I think it makes a certain amount of sense.
In Dead Space 2, we had a multiplayer mode called Outbreak.
And it was a 4-on-4 competitive mode that, you know, was a lot of fun and coming out of a legacy of like making multiplayer maps for Quake and things like that.
It was fun to make these small maps that you didn't have to do any streaming on.
And it was also fun to have a part of the game that we could go and interact directly with the community.
We did, you know, viral suits and we had some people that really got into it.
But ultimately, it didn't really set the world on fire.
And at the same time, we have, you know, all these videos going up on YouTube where large numbers of people are beating it on hardcore mode, which is where you only have three saves and unlocking special weapons and things like that.
And we have a lot of people that are playing the game over and over again on New Game Plus to sort of explore the full breadth of our weaponry and experiment with all the different things that are possible within the levels.
So we're looking at it, it's like, well.
You know, the thing that everyone likes about Dead Space are these immersive narrative levels.
And that's the thing that seems like it's the strength of our team.
We're really good at the art.
We're really good at creating atmosphere.
And people like playing this content over and over again.
And we added a number of features that would leverage this, things like our weapon crafting mode, which we have a talk about on Friday.
the co-op dungeons and the beta dungeons.
But specifically, co-op gave us a way to go through that campaign an additional time with sort of like a different perspective on everything and make it feel fresh in a different way. So we decided to take the resources out of the competitive multiplayer mode and put those into creating a co-op mode that played more to our core strengths as a team.
And once we decided that this is something that was worthwhile and that we really wanted to pursue, we had to lay out some high-level goals that would dictate sort of all of our future decisions as a design team.
And the first is, we're going to leave single player untouched as much as possible.
And this doesn't mean that we're not going to change anything going from Dead Space 2 to Dead Space 3, but that there's this core loop and this core feeling that you get as a player, which as a team we're fans of, and we know that the people that have played the previous two games are fans of, and we want to preserve that as much as possible.
So single player has to be largely untouched.
But at the same time, we want the co-op mode to feel like it's an extension of the core experience.
It needs to be complete.
If I beat the game in single player, it needs to feel like I beat a complete game.
And if I complete the game in co-op, it needs to feel like I've reached the end of a complete game.
There's a full journey.
So it shouldn't feel like this sort of disconnected, separate bonus mode or something like that.
And once we had these, we went out and looked at, you know, well, is there an existing pattern in the industry?
Is there some other game that we can look to, to draw kind of directly from?
And, you know, if you're familiar with the history of the Dead Space franchise, it's like, well, RE4 was a huge influence on the original team, so looking at RE5 is a natural touch point.
But they went down with the decision of having a follower, or that would allow you to, you know, script the same thing in single player or co-op.
You didn't have to change the story, you didn't have to change the puzzles, you just had a follower.
And in a lot of ways that would have been an easy path to go down, but for us it just didn't seem like it was a fit for the Dead Space franchise, and it would have changed too many things that we wanted to preserve.
The other sort of approach to this...
I think you can see in games like Halo where you have the ability to play campaign co-op, but every time you hit a major story moment, it's like, oh well it's actually just the story of Master Chief.
Like this other guy over here, he doesn't really exist.
And you know, they experimented in Reach with this a little bit, but ultimately the second player is just another gun running around the world.
And it's a lot of fun. It's actually my preferred way of going through Halo.
But when you're making a game where you need to be immersed in your character and you have this third-person camera and you're looking at someone, that you're investing in your weapon upgrades and things like that.
I think it's very important that whatever player, Isaac or Carver, which is the name of our secondary character, that you have some sort of investment and understanding of them as, you know, an entity within the Dead Space universe.
So it was obvious that there wasn't an existing pattern that we could directly apply and meet all the needs that we had for Dead Space 3.
So we ended up coming up with these sort of two distinct universes.
One is this the single-player universe where it's the story of Isaac struggling alone on Tau Volantis against Necromorphs, and the NPC interactions are just like they were in Dead Space 2.
He's still talking to people on his rig system, getting audio logs and things like that.
And at the same time, we have this parallel universe.
And in this one, it's got the same core story, the same plot thread about the markers and this ice planet.
But the core character arc is about Isaac and Carver working together and kind of overcoming their differences to unite against this greater evil.
And this required us creating a sort of flexible narrative that could go one way or the other.
And this was basically in a lot of ways an impossible challenge, but I think that our writing crew actually was able to come up with something that would allow it to, for the most part, feel like Isaac could achieve all the goals that were put before him alone, but that when Carver was there, it felt like he was important and that, you know, him being there was an integral part of the narrative.
So by having this same core backbone story throughout the whole game, we're allowed to have game progress be shared between these.
Because since we want the single player in the co-op mode to be sort of like peers on the same level of campaign-ness, we want it to be that you can play up to chapter five with your buddy.
And then he can't play that day, and we don't want it to be, well, now you have to start the game over again.
So you can just continue at chapter 5 in the single player campaign and the game sort of automatically configures to what universe it is that you're currently decided to play in.
And to encourage people to take advantage of this feature, which was obviously something that took a lot of work to implement, we made it so you could freely move back and forth between the modes.
So I can be single player and I can just invite someone in.
And now, all of this sounds really great on paper, but then we take this to the engineers and they're like, well, you had a level that we didn't have doors in multiplayer in Dead Space 2.
Like, what?
So there's a lot of technological challenges that we had to deal with.
in order to implement this. And actually during our design process we had to hang this sign in our meeting room that says don't let science get in the way of awesome town. Because we kept having this thing that's like oh I know we'll do this and then it's like uh no the engine doesn't do that and that will take you know two weeks to two months to implement. So we're like all right we're just going to focus on the design for a little while. But eventually we have to start addressing these technical issues and actually implement something right.
This is just a very narrow view of the challenges we ran into.
I'm looking at it mostly from the level designer perspective and things like scripting and level layout.
If you have larger questions of how did you deal with low-level streaming issues or whatever, just feel free to send me an email afterwards.
But as a level designer, one of the major things we're doing is setting up all of our scripting, setting up all of our puzzles and combat and things like that.
So we had to figure out, how is it that we're going to structure this?
And we went with the very industry standard way of having all of the gameplay scripting reside on the host machine.
And the client, for the most part, is just sort of receiving information.
But we immediately ran into an issue where it's like, oh, well, I've got one player here and one player here.
So they've got two different views.
So we had to make it so that the environment coloring or the visibility, the lighting, the VFX, things like that that are very positional are independent between host and client.
And one challenge that was a little unique to Dead Space is we have the ability to use the telekinesis ability, or TK, to pick up almost any object in the world.
So I just, you know, like, I grab like a pickup, and I'm moving it around in space.
And initially, since those are gameplay relevant, we had those be host controlled.
But as the client, it just felt terrible, because you're touching a thing, and it has to go across the network and come back, and it didn't feel responsive.
So we ended up making it so that the authority of any TK object is transferred to the client.
And that's really the one exception we had to make in terms of host controlling all the important stuff.
So once we kind of knew the high level layout of our level scripting, how do we implement this whole multiverse, this two sort of universe thing?
And one of the first things that we did was we had to come up with a way of setting, all right, this is going to spawn in single player, this is going to spawn in co-op, but only on the host, and this is going to spawn in you know, on the client. And those are represented by these heads that you see in the upper right hand corner of these two entities from our editor. And why it's not just like an S, an H, and a C, you can ask our UI designer. But the good thing that came out of this is that when something wouldn't spawn on one thing or the other, we could refer to it as like, oh, well, your hats aren't configured properly, or like, what's your current head situation? And From there, you also see we have an example of the co-op gate, which is the most dumb, simple thing ever.
But these are the kind of things that are awesome when you're doing scripting, right?
It just takes one input and then outputs one message in single player and one message in multiplayer.
So if I want to have some sort of branching content, I want to have this cut scene happen in single player and this cut scene happen in multiplayer, there's an easy way to do it as a level designer.
You don't have to think about a lot of flags.
And the other thing is, is.
when we're going in and trying to final the game or trying to debug something, you know, me as one of the technical designers, I can go in and be like, all right, show me all the co-op gates that are in this level, and I can get a good idea of how much branching we're doing, and I can also make sure that our testing plan is covering all those different branches.
Because as soon as you start adding this in and you've got a 20-hour campaign, it's really hard to debug all that when you're trying to get the thing out the door.
So having something that's easily searchable is very important.
But we have to build content, right?
We can't just put a bunch of scripting in a void.
And we have to build levels.
And if you're dealing with data streaming, which you're going to have to in any sort of a campaign game, one of the big issues you're going to run into is how do we gate these players?
How do we keep them together?
Because all the scripting is executing on the host.
So I can't have the client somewhere where a trigger is that isn't loaded yet on the host.
And in Dead Space 1 and Dead Space 2, We had a kind of natural gating system.
We just had these doors, and right here we have one hallway that's drawn, and two closed doors.
And if Isaac goes in forward, he just opens it up and it says, all right, yeah, draw the next room, and if we need to stream it off the disk, we have a natural gate for the player.
And this was something that we didn't really have to think about that much, because once we get to the next door, it's like, oh, well, the door closed behind you.
So if we had guys in the first room, we can unspawn them and spawn guys in the next room, and everyone's happy.
In general, we draw two rooms at one time.
and in general we have a way of air walking encounters. And then we get it running in co-op and it's like, oh Carver, what are you doing? Right?
Now we're drawing three rooms simultaneously, and I don't have a good way of air-walking these two combat encounters.
So it's like, oh, what do we do? And we went down and did a lot of different sort of investigations of like, well, maybe we should just get rid of this whole weird door system because it's kind of unique to the way games, you know, most games are built nowadays. But Dead Space is a lot of corridors, a lot of tight spaces.
So we wanted to try to preserve that.
And we were lucky that we were able to come up with two relatively easy changes to our door code that allowed us to sort of enforce this behavior which happened naturally before.
And that's only one door can be open at a time.
When you open the door, all the other doors get disabled.
And that door will remain open until both players are on the same side of the door.
And this solves issues where like, all right, they're separated, where's my buddy?
Or I just went off and triggered this door and screamed out the ground that my friend was standing on.
Or some other terrible thing.
And these changes are relatively easy to implement and for the most part, preserved the player experience and the way that we built levels.
So we didn't have to re-architect the fundamental way that we connected our spaces.
This is great, because now we've got a world where the door is open, but the next door is disabled.
We have to wait for both of them to be in that thing, and great.
We only draw two rooms at a time.
It's slightly less elegant than just moving through the space on your own in single player.
But in general, it works and allows us to build the game the way that we've built the game for two games already.
And once we have this pattern of.
the way the doors behave in Dead Space 3, we can apply it to other things, right?
So elevators, we just made sure that they have a door on the outside.
So all the other doors going into the room with the elevator have to be closed before it can open.
So the environment artists can go crazy with the interiors of the elevators or put whatever VFX they want in there.
And the elevator can't leave until both players are inside on the same side of the door and then the door can close and you can go to another floor.
So it's the same pattern that we had before so we only have to sort of teach it once.
But obviously if we made a game where you've got two players and they always have to be you know within one or two rooms of each other...
it would be like, well, you're kind of undermining the point of adding in co-op.
So we kept the lifts, and we added in ladders in a way that it didn't require the players to sort of work in tandem.
One player could go to the top floor of a room, and the other player could be on the bottom floor, and now we can have combat on two tiers.
Or we can allow players to take advantage of the weapons that they've crafted and sort of go to different layers of the space that they're fighting in.
And with that, we know this is how we're going to lay out our scripting.
This is how we're going to implement these two universes.
And we know that we can start building a space.
But there's this problem, right?
Engineers had this whole path they had to go down to figure out how do I spawn NPCs?
How do I get them to follow two different players simultaneously?
But that wasn't so much of a design task.
What was a major level design challenge was, how do I balance this thing?
Because we put in all this combat, place all their combat, and it's all for single player.
And it's like, oh, well, now we've got two guns.
This isn't challenging, right?
And a Dead Space game with no challenge is not really a Dead Space game.
So we had to figure out a way of fixing this.
And the first thing we tried was the really obvious thing of take that co-op gate and have it go to a single player encounter, and then make one that's harder and have that one be the co-op encounter.
And we can do some of that by just putting in harder enemies, tweaking their health values a little bit.
But ultimately, our enemies in Dead Space are really expensive.
They have all these different animation states.
They have all these ragdoll parts that you can introduce by shooting off limbs.
And we can only have about five or six of them at any one time.
And we're running up against that ceiling, even single player.
So this was a solution that worked about two to three times per level, but wasn't something that we could just blanket through the whole game.
And honestly, we didn't want to increase the number of enemies just everywhere when you were playing in co-op.
So we went to the engineers and were like, we need a fix for this.
And they gave us these co-op damage multipliers that allow us to make the enemies take a little less damage from you or deal a little more damage back to you in co-op.
But obviously there's an upper limit on this because we have strategic dismemberment.
So if I shoot a limb, you need to get feedback that you're receiving a damage multiplier by shooting a limb and not the chest. So we can't start making bullet sponges or else you lose the feedback as a player.
And the other thing is, is we've got a hardcore mode, where you have essentially permadeath.
And so we can't make it so as soon as you go into a hardcore mode on, you know, Impossible, and you have a co-op buddy, that one hit kills anyone, basically.
It would just, it wouldn't work.
So we needed a third lever and that was aggression. So most of our enemies have a state where you shoot off enough limbs and they'll go berserk or they'll start swinging their arms at a higher rate and not taking breaks. And we just made it so that we could conditionally turn that on on enemies. So if we wanted to have one guy that would help escalate the fight a little bit we could say all right in co-op you're just going to go wild.
And this actually encouraged the behavior that we wanted, which is players covering each other and grappling being a more common thing.
So when our enemies grab you and you go into a button mash mode, it gave the other player opportunities to have to shoot the enemies off the other player.
There's another side to this point of combat, because killing all these enemies is draining your resources, your health, and your ammo.
So we had to come up with a way of making the economy work in co-op.
And initially, on our design land, we're having all these visions of players arguing over who gets to pick up on the ground, and all these kind of things.
But ultimately, there was a lot of issues with this.
Because it basically meant that if we dropped one item out of every enemy still, that we had sort of half the items that could go in any player's inventory.
And we couldn't do the stuff that we do in Dead Space, which is look at how much health, how much ammo you have, when the last time you got resources were, and then tune the drops based on this information.
When you end up in a situation where one player has no ammo and the other one has no health, it's like, what do you put on the ground, right?
And so we want to be able to take advantage of that.
And we ended up going down the path of having independent drops.
So you stomp a corpse, it drops one item on the host, one item on the client.
And this gets us around the issue of one player just gobbling up all of the items.
It allows us to use the balancing that we did in single player in co-op, so we don't have to balance the game twice, which is important, again, when you have a really long game and a relatively small design team.
But we had quest items, right?
You'd go through a dungeon and you'd get this magical item, or some Tesla engine.
And it was a story moment when as soon as you picked it up.
So we added this shared pickup flag that would make it so important story elements, things that were tied into the progression of the game, or things that we didn't want one player to miss at the bottom of a dungeon.
If you're getting a special log that explains the whole reason why you did this for the last 20 minutes, we want both players to get it.
So we turned those into shared pickups.
And that got around a lot of the limitations that we had in doing this independent drop pattern.
But co-op isn't the only thing that we have in Dead Space.
And also, combat isn't the only thing that we have in Dead Space.
There's activities and puzzles.
And we have, historically, these large things like the centrifuge puzzle in Dead Space 1.
We have the Gravitron puzzle in Dead Space 2.
And we wanted to do even more of those to reinforce the idea that Isaac was an engineer.
And so this was an important part of the single-player design.
And we wanted this to be reflected in co-op.
And because we're building these large set piece environments to support these puzzles, we wanted to make sure that they could be used in both, because we couldn't just redesign the whole puzzle space if we were going to go into multiplayer.
And at the same time, we wanted the second player to feel like, oh, I'm actually helping solve this puzzle.
It's not just like, I'm going to watch my buddy do it.
Because again, Carver needs to feel like he's an important part of the narrative.
So to step through how sort of initially we struggled with this and then overcame it, I'm going to go through one of the first major set piece puzzles that we have in the game. It's in the CMS Roanoke and you come into this big generator room and you need to restore the power so you can get to your buddies that are up in this command saucer. And initially we had this gigantic circuit board with all these sliding breakers and you needed to align them with connectors in order to, you know, be able to start the generator up. It was kind of interesting. It was a little abstract but I liked it a lot.
and in single player it worked but you had to move everything in sort of a particular order and when we got it up in co-op there was two major problems. One is that if there's any lag on the network you're kind of drawing two dynamic havoc objects into each other and they can get stuck and just things go crazy really fast with dynamic constraints. And the other thing was that solving this kind of felt like two people trying to solve a ruby cube at one time.
It was like, you could be like, oh, this is what I'm doing.
I'm going to move this here.
And you have a plan, right, that's multiple steps.
But then your other guy is doing something that's counter to that.
And unless you're on a microphone coordinating in some way, it just didn't really work.
So it was obvious that we needed to go back to the drawing board on this.
What we ended up doing was creating three separate instances of one action that was relatively simple.
It was one step.
And it's these.
We have this turning handle here that you can see sort of in the foreground and that rotates a coil and on the outside you can see it kind of on the left there's a ring of magnets and so the overall goal here is you know TK the ring of magnets around the coil and then spin the coil in order to generate some electricity and it's a relatively simple act in single player you just move the thing in place and spin it and it walks there and you're good.
And we can do ramping external from that by throwing in enemies, having environmental hazards.
And so we can have the difficulty ramp be external from the activity.
And when we're in co-op, the important thing is, once you get it one time, it's easy to communicate what you need to do in the subsequent phases of this activity.
And the other thing is that the actions you need to perform are independent.
So one player's sliding it up and down, and the other player is rotating the coil in the center.
And you need to coordinate at one instant.
But it's not like you can be moving the thing up and down and stop the player from rotating it, right?
So you don't feel like you're fighting each other.
You feel like you're coordinating.
And this pattern of hold this in place while I do x was actually something that was super successful.
And we used throughout the game in sort of different guises.
Because it was a relatively easy thing to teach to the player and to script one way or the other.
Really, there's only one downside that we found to this pattern or this solution, which is that you have to use two Xbox controllers or PS3 controllers, whatever platform you're on, in order to actually test your scripting, right? So you have, you're doing all these crazy sort of hand contortions of like, oh, I'm going to aim and hold that while I then do this on the other leg or whatever. So if you're going to be making a co-op game, I highly recommend, like, getting some interns or something to just sit in your cube and, yeah, help you test your, test your co-op scripting because your neighbors will get tired of it.
So one thing that this deals with is another side effect of having both players needing to be physically connected via a TK beam to this object is this problem of two cameras at once.
This is something that's come up before when we were talking about performance scripting and doors and things like that.
But in puzzles, it's also really hard because if you come into a room and you've got a trigger that you know, makes the thing you need to shoot spark.
But it only does that one time.
The other player, that's the guy that's gonna figure it out, is like looking somewhere else.
He's down a ladder, he's in some other room, who knows what, stomping a corpse.
and they miss this cue.
So messaging becomes something that you really have to think about when you're dealing with these two cameras.
And so while it wasn't necessarily required in this particular generator puzzle example, we ended up testing out this idea of a centralized console.
And we used this a number of times.
So we've got a central console that you see when you first come in, and it has the information of the state of whatever activity you're currently doing.
It gives you output, and it's got everything labeled that ties into the other generators that you'll see.
It also functions as a logical place to send the players back to when you want to do sort of the final moment.
Because if we want to have a cut scene or we want to have a reveal of some sort of VFX show, it gives us a way to pull the players back into that space in a way that's player controlled.
We don't have to do a camera cut.
We can send the players there and we've got two switches that they have to press simultaneously.
And this is a lot like a pressure pad.
It's very gamey in some ways.
By building a console that felt like you're arming a bomb and both people have to turn the keys simultaneously to activate it, I think we were able to fictionalize this traditional game mechanic in a way that fit within the Dead Space universe, and that was a huge boon in terms of us being able to do whatever we wanted as level designers, but then send them to the place that the animation team was demanding that we get the players to move forward in the story.
You know, we've got combat, and we've got activities, puzzles, interactions with the world.
So sort of the core bare bones things that you need to make a Dead Space campaign are there.
But at this point, we haven't really done anything with the co-op mechanic that is unique or expands the Dead Space experience in some sort of meaningful way.
We've basically just found a way for two players to play Dead Space, which is great, but it'd be optimal if we could find a way to take that a little further.
So I kind of like this story because it comes out of a bug.
And we would script the game so that we have a prop, something great, like the sun prop.
from Dead Space 2.
And it shows up great on the host.
I'm playing as Isaac, and it's like, awesome, Sunprop.
And then I connect in co-op, and it's like, there's a Sunprop-shaped void in my life.
I'm not seeing it right now.
And normally, this is a heads issue, right?
We're just not wearing the right hats, and it's not spawning on the client.
But it's easy to fix.
But we started thinking, well, what if that was how it was supposed to be, right?
What if we want to have?
the sun be on one machine and then have something really terrifying on the client, like the alarm clock from Dead Space 2. And this might be really interesting. How do we leverage this? And we're actually really lucky that on one hand, pretty much every character in the Dead Space universe is either insane or on the road to insanity.
And we also had this whole backstory for Carver that we created for the comic Dead Space Liberation that we hadn't necessarily explored fully in the main campaign, right?
Because it's mostly about Isaac and Carver's relationship when you're playing co-op.
It's not necessarily about Carver's backstory.
We just built that to flesh him out within the universe.
So we thought, well, what if we make some co-op only missions that are focused on Carver and we can take advantage of the fact that he hasn't sort of dealt with his inner demons in the way Isaac did in Dead Space 2, and start making, you know, toy soldiers appear all over the place for the client, but on Isaac's machine it's just seeing like a box or some artifact from the alien dig site or something like that.
And so we start doing that.
And then we start thinking, oh, well, what if we have a scurrying sound that only appears on one machine, and that's random?
And then you're playing on the mic, and it's like, hey, did you hear that?
Or then we put in an audio log where.
One player is just hearing something that's like, oh, hey, you need to go do this and get this.
And then the other player just starts hearing someone screaming the entire time.
And so we just started having more and more fun with this idea of how could we create this divergence.
Because we've already got a single player and a multiplayer campaign.
But then it's like, well, what if we fracture that multiplayer campaign into kind of?
two more universes where we've got what one player experiences and the other player experiences.
As we're trying to take this idea of two cameras that up until this point had been kind of a burden, something that we kept being like, god damn it, we got these two players in their two different positions. It's like, how do we leverage that, right?
And so this all sort of culminated in us thinking back, well, you know, in Dead Space 2, we, you know, spoiler alert, I'm sorry, Isaac kind of goes into his own mind and has to confront these issues that he's had for two games into this place that we call Dementia Land.
And Carver hasn't gone through this same process.
And also, if you play Dead Space 2, you know that if you die, we transfer back to the real world and have sort of established that this whole thing happens in Isaac's mind, and he's just really standing in reality.
So we're like, well, what if we could have someone that's standing in reality and another person that's going inside of his head?
And so we created these sequences where we teleport Carver into his mind, and we have all these things that are being told, or he's seeing reenactments of.
you know, some of the terrible stuff that happened in his backstory, while Isaac is just seeing Carver kind of raving on the ground and has to cover him from being attacked.
And now we're really taking advantage, I think, of the fact that we have two players that are in two different things, and we've reintroduced this kind of uncertainty that you had when you were playing alone.
you know, in Dead Space 1 and Dead Space 2, and it's kind of, we found a way to reintroduce some of that, the spirit of that, I think, in co-op. Because, you know, a lot of the, there's a lot of struggles when you're talking on a mic, you're just like, oh, I'm gonna go get dinner or whatever, right? And it's hard to be immersed in that way. But when you start playing with what's real between the two players, I think it does something really interesting.
And this is something that we explored a lot in Dead Space Awakened.
Because one of the things that became obvious to us as we wrapped up Dead Space 3 was that this is something that we really wish we'd been able to build upon more, and we'd been able to do some more interesting things with the Isaac side of the equation.
So this is something we really played around there.
And if there's one thing that I think in Dead Space 3 I could expand upon the concept of, it would be this idea of a fractured world between single player and multiplayer.
And with that.
We've kind of gone through all of the major phases of development and we've come up with a concept where like this is what co-op means to Dead Space.
We dealt with kind of the level design technical challenges of alright this is how we're going to be able to do it.
We figured out how to transfer the gameplay over so that we can create mostly the same sort of balanced experience that you had in Dead Space 2 or Dead Space 3 single player into this new co-op world.
And we found a way, I think, through this sort of fractured environment to create something that feels very, very Dead Space, but it's something that didn't exist in the franchise previous to this game.
So in a lot of ways, we found a way to take this feature and have it actually add to the franchise in a meaningful way, which is really important with something like this core, right?
And through all of these things, I think there's a number of lessons that you could take.
And, you know, if you want to ask me questions later tonight, I could talk for hours about this.
But I think the most important thing that's most applicable to, you know, whatever game you're going to make, because you're not going to go make a Dead Space co-op game.
is that you should create useful patterns.
Because making games is really, really hard.
And if you're, as a level designer, continually having to be like, well, how do I keep the players together?
How do I introduce enemies into the scene?
How do I line up this character to start this animation, right?
You're spending all of your time worrying about these kind of problems when you're building a level layout.
And you're not getting to the point where it's like, all right, well, how can I make interesting permutations?
of these gameplay items that I already have, or how can I take these existing patterns and turn them into something interesting, right?
It was only when we had the foundation laid down on the ground and we could stand back and look at what we'd built that we're like, you know what, I think we could do something interesting with this.
And so getting to that point as fast as possible is good.
So solving a problem in a way that solves it one time.
sure, but if you can find a way to solve that problem in a way that's repeatable and makes it so future instances of that same kind of class of issue can be overcome easier, then great, because that's going to give you the time to add the stuff to your game that really matters. Because I think there's a combination of...
you know, having unique ideas, good new ideas, but then also having a strong foundation that's executed really well, combined with a story or a fiction or some sort of hook that really draws the player in, that creates a really quality product that players are going to enjoy.
So, and I think this is something that can apply to really anything that you're building.
With that, I think we have a little bit of time for Q&A before we move on to the next talk.
So feel free to send me an email.
All right, so we got 10 minutes.
Just step up to mics.
OK, yeah, because we're going to have to do a machine switch, we'll do two or three questions.
Yeah.
Hi.
That was a really good talk, by the way.
Thank you.
But so did you guys run into any problems?
And if you did, how would you solve with the scary sequences where you would maybe see something scary in co-op?
Like, did you guys have any trouble with that?
Because the players might be looking at different things.
So would you have something that you wanted the players to look at to be scary at the moment, and it wouldn't work out for both of them?
I think that, in general, our approach was, if one player is going to see it, that's fine.
Right? So, we've got, like, in the Roanoke, one of the early things that we do, we have a door that opens and you immediately see, like, a Weeper crawling up and it'll cast a shadow into the other room.
As far as I'm concerned, if the other player reacts to it, and, you know, I'm the other guy on the other side of the room, and I see him, like, running back or firing his gun at something, that works too, and it keeps you immersed in the space, right?
As much as I can, I don't want to take control away from the player.
If you can find a way to set both things up simultaneously, that's good.
But if it starts feeling too scripted, you take away the natural kind of immersion that happens.
Audio also really helps because normally you're in the same audio space, even if you're not looking the same direction.
So it's always been an important part of Dead Space, but it was kind of doubly so in Dead Space 3.
Thank you.
We'll do the middle.
When it comes to doing airlocks in co-ops, specifically, if you had the second player just sitting outside somewhere, did you do anything about that specifically?
Like, did you teleport them in, or did you give the host the option to kick them or something, or what?
So...
If at all possible, we tried to never teleport the player.
In Dead Space 2, we actually tried to make sure that we never had a camera cut in the game.
There's a few times that we do it.
We had to break that rule on Dead Space 3 a little bit more than we would have previously.
But we actually created things called the Lazy Susans, which are these self-contained heat airlocks that you get in, and it rotates, and then you pop out the other side for those kind of situations.
Because we realized at a certain point, like.
Oh crap. We've got like a tent and a gigantic outdoor canyon. How do we make this work?
So we sort of fictionalized these heat exchange devices that we called Lazy Susans and that solved that problem.
So you guys have amazing environments in your game.
I'm curious, like we heard from the Skyrim guys, like they have the kits and that's how they make massive amounts of content.
But your guys' levels are so, you know, like heavy on art, at least in the end product.
What do you, do you guys draw on graph paper?
Like do you guys rough it out?
How do you guys build levels?
We white box in Maya to begin with and we also When when Joel sent out his talk earlier This is what I sort of tweeted about like my mind was blown of like why didn't I get this a while ago?
Because all of our side dungeons and stuff we realized we were building so much game in Dead Space 3 That we needed to start you know, actually using some sort of tile models.
And we actually did that in this game a little bit, just because the sheer scale of the game that we were building.
But we do custom what we call phase C, which is the last sort of pass of going in, putting our blood and our hand prints and everything.
That's unique per room.
So that's sort of how we balance that out.
Okay, so you'll block that in Maya, and then do you just put in like ground triggers and stuff like that to move around your...
We block the whole space out in Maya in very rough shapes, and then work with the art team on a phase that we call art block, where they take the LD block and turn it into something that looks somewhat logical from sort of my deranged sketches.
Right.
Cool, thank you very much.
Yeah, all right.
