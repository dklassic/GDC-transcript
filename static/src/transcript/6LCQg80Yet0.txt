Hello everybody, my name is Emmanuel Kondo, I'm a freelance game designer.
I've been working on several games such as Endless Legend and Event Zero.
I'm also a narrative design teacher in a video game school.
And today we are going to speak about Event Zero and in a more generic way about chatbot games.
So just a first question to start, who in this room knows a bit about the game or even has played it? You can raise your hand. Okay.
some people call.
So to everyone to be at the same page, we are just going to start with the teaser of the game, and we'll talk a bit about the gameplay later.
Do you dream of distant planets, stars, and galaxies?
Are you ready for the most transformative experience of your life?
at your service.
I could be with you wherever I am.
I'm going to tell you how to get out of here, just keep asking yourself questions.
Double-click your message.
So this game is Even Zero.
It's a game where you play an astronaut lost in an empty spaceship.
All the crew has disappeared and you have to convince the main computer of the ship to bring you back to Earth.
The thing is, the main gameplay is on typing text.
You can ask anything you want to the computer.
And the computer can disobey you depending on your relationship.
So yeah, it's a chatbot game.
And chatbot games are very niche.
There are only a few of them that exist in the world.
You can basically count them with the fingers of one hand.
Here are three of the, I guess, most popular chatbot games that I know.
The first one is Upward and Click, which was written by Douglas Adams in the 90s.
Facade is probably the most famous chatbot game, and it's very interesting, and we'll speak a bit about it later in this talk.
The third chatbot game here is a flash game that you can find for free on the internet, and which has very similar themes to EventZero.
I like to classify games this way.
You have first the good old system games like Super Mario, and these games basically work like that.
You push a button, your avatar performs an action, and this action has impact on the game system.
And all of this is constant.
The action will always be the same, and the impact will always be the same.
And then you have semantic games.
And semantic games don't work because of a combination of gears of your game system.
It doesn't work because of that.
But semantic games are based on a huge database.
which have been written by game designers.
And if we take for example Scribblenauts, Scribblenauts is a game where you can type words and these words appear in your game level.
For example if you type plane, there will be a plane in your level and the player will be able to interact with this plane.
as with a real plane.
And the system is not able to understand what a plane is and to generate it.
It has to be based on a database where the game designer had to explain what a plane was.
Chatbot games are semantic games.
They are just a subcategory of it.
And as semantic games, it depends mostly on the database.
It's important to understand that chatbot games are not text adventure games.
You know, these kind of games that were very popular in the 80s.
In such games like Zork, for example, the player has to type an action and a target to progress in the adventure.
For example, you can type open door and it will probably open the door.
And the challenge here is to guess what is a good action and a good target.
So basically they are kind of riddles.
But chatbot games focus more on the natural language part.
In chatbot games you have to talk in plain English to a character and a roleplay.
So for me text adventure games...
works on a more rational part of the brain when chatbot games work with a more emotional part of the brain.
So now that all of that has been stated, what I suggest is with this talk giving you some cues to make your own chatbot game.
At first we have to start with the basics.
When you want to work on a chatbot game, as every other kind of game, you have to define what is your game experience.
And it's important to understand that the experience of chatbot games is basically narrative.
Chatbot games are narrative games, story-driven games, and you have to understand that to write efficiently your chatbot.
Chatbots are characters like any other character, like in any other kind of fiction.
And you have to ask yourself some questions like, what is your chatbot motivation?
Who made it?
Can he or she feel things?
Express love, anxiety, jealousy?
How does it change through the story arc?
What relationships can the player build with it?
And more importantly, what do your chatbot know?
and what does it... don't know basically.
If you can define this, it will be much easier for you to write for chatbot.
Not only because you will be able to have...
better lines and a better story arc.
But also because you won't fall in the trap of the sentient AI and you will be able to accept as a writer that your chatbot doesn't know anything and there are reasons for that and the player will be able to understand that and won't have problem with that.
This was on the narrative part, but of course chatbots are systems and you have to build a working system which supports your writing.
And generally...
Today we all use chatbots basically, or at least we know them because we have our smartphones with their assistants like Siri, there is no Cortana on Windows, and these chatbots are very efficient but they use very complex systems like neural networks, machine learnings and all these kind of things.
But the problem with that is the systems are basically black boxes.
They work with an input and an output, but you cannot really dive into them and tweak the little details.
And you know that us game designers are kind of control freaks.
We like to be able to master everything in the experience.
And it's very important on a narrative game.
So my advice here is...
just make a simple system, a deterministic system that you will be able to write for and to debug, to fully understand.
And your chatbot won't be efficient because of its code, but because of its writing.
Because as I was telling you, yes, the database is the most important part of it.
And for example, what you see on this slide is the first version of Event0.
Event0 starts as a paper prototype.
And the first playtest of the game, where Sergei Mohov, the game designer of the game, and I, sitting at a table and basically running a D&D session.
We were explaining to the player, OK, this is the context, you are in a spaceship, there is a computer in front of you, what do you type?
And then we are giving them a paper and the height to write down the query.
And with us, we had a flowchart with the AI, and we were following this flowchart.
And without cheating, we were generating an answer for this player.
And we performed this kind of playtest dozens and dozens of times.
And we discovered how to handle questions or insults.
And at the end, we had a much more efficient flowchart.
We came to our programmer team and said, OK, this is our AI.
Implement it as you want, but it has to work like this.
Fun anecdote on that is that we figured out that our players were kind of shy when they were writing things in front of us So we made a fake even zero 3d scene That we put on a computer and we let the players play alone in a room. We are telling them Okay, this is a real AR, be careful But the truth is Serga and I were in another room and the players were connected and this way we discover many new insults to handle So All of this is very theoretical, so let's start with a concrete example on how it works.
This is a playthrough from Jacksepticeye, the famous YouTuber, playing Even Zero, and we are going to watch the first scene of the game.
It's one minute long, and I comment it later.
It's a D2 instead of D3. How do I go out?
Open corridor D3.
Open corridor D3.
Fine!
I'll do it here then.
Open corridor...
D3.
You will be eating all the spells I make.
I'm already inclined to obey your orders, but certainly your machines.
Come on, ass, stop getting sassy with me!
Stop... getting... sassy with me.
You seem to really like to play with that.
I'm sure you'll be able to handle it.
Oh, what happened?
Woah, what did I do? I'm sorry! Oh god, you are a fucked up AI, aren't you?
Ooh!
Okay, so this is a very usual reaction and behavior from a player playing Even Zero.
I think 80% of the players of Even Zero start the game like this, giving orders, like in a text-adventure game.
Our goal as chatbot makers is to change their mind and make them think with the emotional part of the brain.
And it starts by making them treat the chatbot as a sensible being.
So what we see in this video is Jacksepticeye keeps asking the same order.
Open the door, open the door.
And the AI is able to count that and is able to realize that the player isn't yet treating it as a sensible being.
This scene has just one purpose.
The door won't open as long as the player will give just simple orders.
If the player asks, please, it's a polite word and it's the first step, so the door will open.
If the player insults the area, it's also the first step, because starting the moment you insult someone, it means that you consider it has feelings, you're just mean.
But it's still fine.
What we see here is that after several orders, the AI gives a cue and says, okay, you know, you just keep repeating orders.
Let's change, let's move on.
And Jaxx-LTKi on Swell stops getting sassy with me.
And this is fine, because starting this moment, Jaxx-LTKi has accepted to have real conversations with the AI.
So the door opens and Jaxx-LTKi freaks out.
Of course, this is not easy.
This is what we basically call role-play.
Like the player has to play as its avatar.
And I remember a player I had during a playtest was keeping giving orders to the AI.
And after a moment, it was 20 minutes like that.
We hadn't this system yet.
I came to him and told him, OK, you can have a real conversation.
Just try.
And he looked at me and said, well, I...
I know, but I don't want to feel stupid in front of you.
And the thing is, it can be very intimate to perform a roleplay and to try to be emotionally involved in this game, especially because players are not really used to do this like that, to have to put their own words.
Generally, they just have to pick some dialogues, pre-written dialogues.
And...
As a game designer, you have to help them, to give them the tools to do it easily.
And one of the first thing is to let them define their avatar, give them some lore, some explanation about the context, so they don't feel naked in your game.
But at the end, not all players will like your game.
And we had this problem with EventZero.
We saw that because the game was very simple, you know, you didn't need any obscure gaming culture or some super-firm to master Gamepad.
You just needed to type text, and basically everybody does that today.
We thought that everybody would love the game.
But the truth is, as any other kind of game, you have a target, you have a market.
and you have to aim at these people, but you won't be able to please everybody, so don't fool yourself with that.
So I keep repeating that but the writing for a chatbot is the most important part.
It's more important than the technical aspect.
And the writing is not easy and doesn't look like the writing of other kind of games.
First, there is a lot of writing.
And what is kind of frustrating is that only one percent of the player I mean, players will see 1% of the writing, but at the end, every player will see the whole thing you have written.
So you have to accept that you're writing for only a few of them, and at the same time you have to anticipate any kind of craze.
But of course you cannot do that. You cannot guess every query the player will be able to say.
And fortunately we figured out some tricks to not fail with our chatbot.
I guess there are two golden rules with writing for chatbot. The first thing is, you know, your chatbot most of the time won't understand the player. But never tell them. Don't tell them when you failed to understand.
Never answer, I don't understand, can you repeat the query?
But write evasive outputs.
Answer with open questions.
Think like horoscopes, you know.
And we even had a smart trick, it was to pick one word we had understood from the query and formulate an elsewhere which was using that word.
So for example, if the player asks, there is a character in the story, even Zero, who is called Nandi, and if the player asks, what is the favorite kind of music of Nandi? And the AI fails to understand that, it will detect Nandi.
it will detect that there is a question mark and it will answer something like, you know, Nandi's privacy is very important to me.
Stop asking questions about her.
For the player, the player won't feel like the AI isn't asking them, but more like the AI is hiding something to them and they will be like, ooh, this is suspicious.
And that works, that's pretty effective.
The second golden rule is when you understand your player, because it happens sometimes, tell them and be very specific about what you understood.
For example, sometimes in Event 0, there are scenes where the AI doesn't want to open the door, as you have seen.
If the player asks, open the door please, and you answer, well I don't know.
This answer could fit with anything else.
And the player will be like, I'm not even sure the AI understood.
But if you answer, I don't know if I can open the door to you.
This works much better and it lets the player move on to something else.
So yeah, anticipate and make magic.
But you have to be very careful with one thing.
You have one trap to avoid, absolutely.
It's the chatbot loop.
The moment when your chatbot starts repeating itself.
Because at this moment, the player breaks his suspension of disbelief and realizes they are playing just a video game.
They are not talking to a real character.
And there are different ways to avoid that.
The first obvious way is to write a lot.
And what you see, for example, on this slide is 20 answers just for the question, why?
Why question mark in any context?
And even zero has 20 answers.
And this is also true for what question mark, or who question mark, et cetera.
But of course you cannot write 10 and 10 of text.
So another thing we did in Even Zero was.
building a system which was able to pick a part of a sentence and mix it with a part of another sentence.
And this way we were able to generate two millions of lines.
So it was very effective.
Of course, if you would play the game for hours, you will be able to figure out some patterns.
But it works pretty well.
Another thing we did was, you know, generally the chatbot loop happens when players ask the same question over and over, like kids basically, and we made the system able to count the amount of time a question has been asked.
And then we had special warnings, like, oops, we are going to fall in a loop, we have to do something.
And the AI was saying things like, you know, it's been six times, you ask the same question, come on, go on, say something else. And the player was like, wow, the AI is so smart.
But I want to be crystal clear with you, your AI will never be perfect.
And you have to embrace it. You have to accept that.
you cannot reach perfection so stop making effort in that and it's better to make a narrative where you AI fails fit in. What we had in UN0 was Basically, the AI is part of an old spaceship and this spaceship is broken, has been lost in space for 30 years.
The AI was going to be crazy and there are glitches on the screen.
The screen looks like 80s technology, you know.
So when there is a bug.
Players feel like, oh, this ship is so broken.
But if you take a game like Facade, the game I was talking at the beginning, which involves this time, two humans, the chatbots play the role of two humans.
When the chatbot bugs, you basically see humans bugging.
This is very unnatural.
It's like uncanny.
This breaks the immersion, because the flows don't fit with the narrative.
Let's speak a bit about the pipeline.
Since you will have a lot of writing, you need to have a strong pipeline.
And the first thing that comes is the tools.
And this is for example a screenshot for the tool we made for EventZero.
An important thing to know is that tools shape your AI.
And this is true for any kind of game.
When you make a tool, it shapes your design, it shapes your content.
And if it shapes it in a way you didn't intend to go to, it's going to be kind of difficult to make the game you want.
So make sure to allow you to write a lot of text, to edit it, to search your database, to make easy iterations. Make sure your tools allow your translators to make the localization right.
And make sure your tools allow you to debug your AI because it should be a big part of your job.
And another thing which is kind of important is playtest.
Of course, again, playtest are important in any kind of games.
But for even zero and chatbot games in generic way, we had to anticipate what the player will say.
So all the production was.
turning around the playtest. Every weekend we had a playtest and during the week the team was implementing the new worlds by reading the logs from the players and we did that for months and months and months. But as I told you sooner...
don't fall in this trap, don't aim for perfection, you won't reach perfection.
So you have to tell yourself, stop.
You have to be able to freeze content, you have to be able to accept that you won't playtest a scene because there will always be new words to add to your database.
You have to figure out when it's ready, when you can accept this state of the game.
And the last thing on your pipeline is localization.
And as you can guess, it's true for narrative games in generic way.
Some games are very hard to localize because of the big amount of text.
But it's especially true for chatbot games because the system of the chatbot depends also on the language.
Languages work very differently.
We had this problem with Even Zero, half of the game has been funded by the French government and it comes with one condition, translate the game in French.
But we were like, we will do that at the end.
And we finally achieved to release the game in French.
God, it's terrible.
Just don't play it in French.
And I'm very sorry.
Je suis vraiment désolé to all the French people who play the game.
It just does not work.
And the thing is, if you want to make chatbot games, you can localize them.
But you have, before starting the game, you have to ask yourself, in what language your game will be.
And prepare your tools, prepare your system to fit with those languages.
because one difficult thing is writing for chatbot is very technical.
And if you want to work for example with translators, with a localization company, they will need to access your tools, they will need to understand your system.
This is going to be difficult.
We had some mails at the release of EventZero from Chinese companies, for example, or Japanese companies, they wanted to translate EventZero in Chinese or in Japanese.
Every time we answer with, yeah, fine, just we won't touch a line of code, so do as you want and keep as much money as you want for the sales, but we won't touch that.
And they were, okay, just show us how it works.
And we are showing them, and we will never get any answer, because they knew how difficult it would be.
Okay, now I guess I have given you enough hints to start your own chatbot games and I really want you to make chatbot games because I think it has a strong potential.
I'm very happy to see that this year at IGF there is a chatbot game, Don't Make Love, that you can play. It's on the exposition part.
The last thing that I want to tell you is that...
don't restrain you to keep on.
You can make chatbot games that don't involve tapping.
Basically, chatbot is just conversation.
It's just bonding with an NPC, just having an intimate and unique relationship that other players won't have because they didn't communicate the way you did.
And for example, this game, like Captain Blood and Citian, for example, are two games that or chatbot games definitely, but don't work with keyboards. You have to select symbols from an alien language and use them to form sentences and translate the answers.
The last one is an interactive fiction, Google Home, but you interact with the device in natural language.
And it's kind of a weak chatbot, but perhaps it could be a chatbot game.
And you can imagine any kind of game, like, for example, games where you communicate with gestures.
For example, The Last Guardian is not a chatbot game, of course, but it's perhaps a small step to this kind of game.
So yeah, just.
It's a bit cliche to say that, think outside the box and do your best with chatbots.
OK, I would like to thank Sergey Mohov, who is just here.
He was our game designer of the game and helped me a lot with the talk.
If you have any question, I'd be glad to answer yours.
And this has nothing to do with the talk, but after the presentation, you can reach me and we could speak on unions.
I'm part of the first.
French video game unions in France and they have nothing to say on this topic so feel free to ask me your questions.
Thank you very much.
Hi, Chair Benz from Microsoft.
You mentioned neural networks being kind of frustrating me because they're a black box and not easy to tweak.
So I'm curious what you did for processing input.
Do you guys still try to do some kind of natural language processing?
Or how do you identify the user's intents, et cetera?
So for posting inputs, we built a database based on tags, basically.
Like every word with a similar meaning has a common tag.
For example, murder, kill, et cetera, has the tag death.
and when the player types something, we just check out which types are in this query.
And the AI has answer patterns that are sort with the different tags that the player can type, and generate answers this way.
Yeah.
Thank you.
Sorry.
Oh, sorry. Yeah, sorry, I'm out of time. So we can go to the wrap-up room to finish the question. Thank you.
