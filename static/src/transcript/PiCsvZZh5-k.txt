Hello, my name is Ian and I am an accessibility specialist and that's what I'm here to talk to you about today. Accessibility and specifically how it relates to smaller studios. I've got a few different angles on that to cover but first of all I'm going to go over a few of the basics about what accessibility is and how it works just to make sure that we're all on the same page. So fundamentals.
First up, what even is accessibility?
So to answer that question, we need to take a step back and look at what disability itself actually is.
And I have this chap here to help me explain.
If you're looking at this picture, you might be able to have some kind of a guess at what it is that's making this guy disabled.
You might be thinking that he has cerebral palsy, and he does, but cerebral palsy is a medical condition, and that is a very important distinction to make.
So what else? You might be thinking about him being in a wheelchair, but again, that's not a disability.
That's kind of the opposite of disability, it's what's actually allowing him to go about his day.
Which he was doing just fine, until he tried to go into this bar and encountered the steps.
And that's what disability is, it's mismatched interactions like this that result in some kind of barrier performing day-to-day tasks.
And those barriers, whether it's steps, small text, inflexible controls, color use, they're usually put there by other people, by us.
And that is a bit of a heavy thing to get your head around, that as designers, developers, content producers, we can actually disable people.
But the flip side is that by being aware of barriers and working to avoid or remove them, we can actually prevent disabling situations from happening and ensure that more players are having the kind of experience that we intended.
And it's that that's known as accessibility.
And it matters for all kinds of reasons.
For the human benefits of the access that games can give to recreation, to culture, to socialising.
The financial benefit of reaching more players.
Disabled people make up at least 20% of your target audience.
To keep up with your competitors and also keep up with player expectations.
The design inspiration that thinking about different kinds of problems can give you, which is something I'm going to talk about a bit more later.
The PR value, extra visibility, word of mouth through new loyal fans.
And also how it can benefit wide swathes of your players, as designing for a permanent physical impairment like one arm, also means you've designed for temporary impairments like a broken arm, situational impairments like holding a baby or holding a beer.
And also players, just different.
preferences and levels of experience too.
But it can feel intimidating, right?
It's hard enough designing a game that works for you.
So how do you design for something like this?
And the good news is that you don't have to.
So if you think back to the guy in the wheelchair earlier, this is a list of medical conditions, which isn't what's important.
If you take, for example, Parkinson's and dyspraxia, Those are two conditions that have absolutely nothing in common with each other medically, but they both come up against the same barrier of small fiddly interface elements. If you address that barrier, you've addressed both of those conditions and you've also addressed a whole swathe of other motor and vision related conditions too. So it's really not about the condition and the person, it's about our designs and how those designs can be more successful.
So at a high level, it boils down to a few core groups.
So barriers relating to people's ability to see, to hear, to take in process and action information, and also manipulate controls.
And speech too, although that doesn't really come up unless you're making something that has player to player communication.
So even if you just spend a few minutes early in development thinking about what kind of barriers your game presents to each of these groups, you'll be able to make a big difference.
Sometimes through the design choices that you make, sometimes through communicating information in more than one way, like a symbol as well as color or subtitles as well as speech.
And sometimes through flexibility like giving people a choice of controls.
Some of the barriers in your game will be intentional and an essential part of what gives the experience value and that's fine. It's figuring out which barriers are unnecessary that is how we make accessible experiences and that's what we're digging into today.
So how does this fit in for you? Where do indies sit in all this?
The Last of Us 2 is an example of where the industry is currently at.
It has a vast swathe of accommodations, including being the first AAA designed from the ground up to be completely playable by people who are completely blind.
But they are a big AAA with vast resources. How can someone with a tiny budget possibly compete?
It can be pretty tough seeing the industry changing, feeling those player expectations shifting, but feeling like it's something that just isn't achievable for you.
So here are a few other games that are way up there at the top of the industry.
Sequence Storm in particular by far surpasses The Last of Us 2.
And Hyperdots accessibility efforts made them a finalist at the Game Awards.
I would very strongly recommend checking out these three games.
Even if you aren't matching everything that they've achieved, there's still a lot to learn from and be inspired by, and even the smallest tweaks can sometimes make a tremendous difference to your player's experience. These three games are all very different from each other, but they have something in common. They were all developed by solely indie developers, each made by one person.
And this isn't unusual either.
Indies have always been at the forefront of accessibility with games like Terraformers from 2006, VVVVV from 2010, Sheet One Up also from 2010.
And again, these are all made by solo Indies.
Pioneering games like these are still ahead of most AAAs today, and AAAs have only really started getting properly involved in the past few years.
So the idea that it's out of reach for smaller studios really is a myth.
And being an Indie even actually has some distinct advantages.
There are some common misconceptions around accessibility, usually some combination of these.
And all of this is demonstrably false. They are misconceptions.
So if considered early enough in development, there is a great deal that can be done for relatively little effort.
And rather than diluting anything down, it just means ensuring that your vision is kept intact for as many players as possible.
Including the over 20% of gamers who experience some kind of disability.
And these misconceptions can be a huge barrier at AAAs because there are so many people that need to be convinced in order to do anything. But smaller companies don't have that problem.
So the smaller you are, the less people need to be convinced, right? If you want to do something, you can just do it. And you can do it quickly.
When Legend of Grimrock was in development, a gamer emailed asking for some on-screen mouse controls because he was physically unable to use a keyboard or a controller. And as you can see on the right, they implemented it. So within hours of this gamer's email, the team had already replied saying the feature was now in the game. And that kind of responsiveness, that kind of direct personal community engagement, those are things that AAAs can really only dream of.
So accessibility is important to you and as a small studio you have some distinct advantages but what about the development itself? How can you fit accessibility into tiny timescales and tiny budgets?
The most important technique actually applies equally to AAAs as to Indies so let's go back to Naughty Dog for a second.
The Last of Us 2's predecessor was Uncharted 4.
And Uncharted 4 did some cool things.
A relatively small number of them and latent development.
That's what you're looking at in this slide.
And the reaction from the team was the same as it always is in those situations.
Man, if only we thought about it earlier, we could have done so much more.
We could have done it so much better.
So that's what they did with the next game.
Naughty Dog had been really open about what their secret sauce was for The Last of Us 2, and it was simply considering accessibility from early in development. There is literally no time at which it is too early to think about it. If thought about early enough, there's a lot that can be really cheap and easy, even free, a simple zero-cost design decision.
Like text size. If you decide up front that you aren't going to use tiny text, That's it. Job done.
Compare that to a game called The Outer Worlds.
Now they launched with very small text, and they actually addressed that in a post-launch patch.
And that work took them three months.
And if you're thinking about accessibility early, it can inspire and inform how you design your game.
So to explain how, I'm going to jump back in time a little to the dawn of human civilisation.
Back to the first time somebody made a finger mark on a cave wall with some mud.
And since those days, many people tried to reinvent writing, resulting in the stylus, the quill, the pencil, the fountain pen, the biro.
All variations on the same theme, right?
Because if you try to answer the same kind of question, you're likely going to come up with the same kind of answer.
But I'm pretty sure that none of you use devices like that for most of your writing anymore.
I'm guessing most of you are using keyboards, right? And the keyboard comes from the typewriter.
And how did the inventor of the typewriter come up with such a wildly different kind of answer?
By asking a different kind of question. The inventor of the first working typewriter was trying to figure out a way for someone who was blind to be able to write letters.
And what you're looking at is actually one of that blind woman's letters.
So anytime you type anything, you're actually using technology that was invented for blind people.
So that was a little bit of a detour, but it is relevant, I promise, because the same thing happens with games like this game, Puzzle Retreat. In the early stages of development, they started thinking about accessibility, in particular for motor and cognitive accessibility, and they found inspiration in that. They liked where their thinking was heading with it and just adopted that thinking as the game itself.
So they scrapped the idea of timers, scrapped move limits, scrapped retry limits.
They even scrapped progression.
They made all the stages available from the start to complete in any order.
So they went for more of a relaxing, zen-like experience instead of the usual frantic action puzzler approach they had originally aimed for.
So they had made their game accessible by design.
And in doing so, they had actually differentiated themselves from the competition enough that their game was featured on the iTunes front page, with all the commercial implications that that brings.
So, what to consider?
Well, what's appropriate for your game is something you'll need to figure out for yourself as it's dependent on the kind of barriers that your game includes and also on what your personal vision is for the kind of challenge your game should present.
But there are a few core basics to try to hit across all games.
And these five you're looking at here are the most commonly complained about accessibility issues.
That's not the same thing as most important for a whole bunch of reasons, but if you can nail these and nail them efficiently, then you'll be getting good bang for your buck, solving issues that have a significant impact on the experience of significant numbers of players. First, text size. This is by far the most common accessibility complaint.
there's a pretty wide range of needs.
So ideally, what you want here is scalable UI.
But even if you can just decide from the outset that you are not going to go below 28 pixels at 1080p, which is roughly the size of the text here in Lovers in a Dangerous Spacetime, you'll be able to make a huge difference for really zero effort.
Next up, remapping. So letting people move actions over to inputs that are more usable for them.
Unity's new input model is supposed to have this covered, but it's currently a bit of a pain to work with.
But there are plugins you can use instead, things like C input, rewired, in control, and S input, but more of those later.
Something that is worth highlighting, the simpler your controls are, the more effective remapping becomes.
You know, a controller having 16 buttons doesn't mean that you're required to design controls that use all of them.
Always try and keep in mind whether complexity is really necessary.
And think about physical strain too, so things like button mashing or holding buttons down.
If you can figure out ways around those that can be really quick with too.
Colorblindness. There's a pretty widespread misconception that this means filters, modes and so on. Don't use filters. They aren't what colorblind people ask for and they cause as many problems as they solve. And modes should actually be a last resort too.
Because what a mode is, is actually a workaround for inaccessible design choices.
So instead, try to make your game accessible by default, like Puzzle Retreat did. So this means not relying on color alone to communicate or differentiate things. So also use something else like shape, patterns, icons, text. Subtitling. Most games now have subtitles, but they're usually pretty rubbish.
There's a whole bunch of nice stuff you can do to make them better.
Things like toggleable speaker names and speaker direction and scalable text.
But if you can just ensure good size and good contrast without too much text on the screen at the time, you'll be way out there on top of the industry.
What exactly does that mean?
It means at least 46 pixels at 1080p, with a solid plain background behind the text, ideally black.
No more than two lines per subtitle.
no more than 40 characters per line.
If you want to take things up a notch from there, a very quick and easy way is to let people change the transparency of the background behind the text.
And the last is intensity.
Firstly, what you're doing with the camera, anything that gives a sense of motion that doesn't match what the player's head is doing in real life can make people ill.
So that means things like screen shake, motion blur, weapon bug.
So if you can avoid or minimize these then great, but if not then at least let people turn them off.
And secondly, intensity of effects. This is the really important one. Photosensitive epilepsy isn't common but seizures can cause serious injury and they can be induced by flashes, flickers and patterns. There's actually an internationally agreed standard of what constitutes a reasonably low level of risk.
and you should try to avoid anything ever falling outside that. Giving people a warning or a toggle doesn't really cut it because the way people find out they are prone to seizures is by having one. Like the time a boy had his first seizure playing Raving Rabbids which resulted in Ubisoft introducing mandatory epilepsy testing across all of its games.
What you're looking at here is a setting in a game called Everhunt.
The imagery on the right actually sits below that reasonably low level of risk, but they still offer a setting to turn the flashy effects off.
And this is a good thing to be able to do because outside of seizure risk itself, there's a whole bunch of other people who intense effects can impact negatively, sometimes even painfully, with conditions ranging from autism to migraines.
there's actually paid software called the Harding test that can evaluate footage of your game for seizure risk and that's what Everhood used and it's what the big publishers use too.
But what if paying isn't feasible?
Well that international standard on risk avoidance is publicly available and what you're looking at here is a slightly simplified version of what it is you need to avoid. So I'm not going to cover all the details now but it is pretty straightforward stuff.
So if you can keep this in mind when you're developing your game you'll be able to make a big difference without too much effort.
So hopefully you can see that nailing the basics isn't too hard and even just covering these will put you in a really good position because it's still pretty rare for any developer to nail them all. But what about going further? Well, even on the smallest budgets and time scales, there are always low-hanging fruit, things that are quick and easy, especially if you're thinking about accessibility early.
What you're looking at here is a bunch of accessibility settings in an indie point and click platformer called Layer of the Clockwork God.
And here's what the developer had to say about them.
It was astonishingly easy, to be honest. I spent about four to five hours total adding nine core changes.
And honestly, it was all pretty straightforward, easy work, which is exactly what I need right now.
In the scheme of things, that's probably less time than I spent choosing the color of the options.
And concentrating on the easy things is fine.
It is totally okay not to be able to do everything.
I'm going to come back to that idea again at the end.
Another example, this time of a specific feature. This is from the solo indie title Epic Eric. The developer added a high contrast mode which was just a rectangle between the foreground and the background.
It's transparent by default and players can tint it all the way to white all the way to black.
This is really valuable, but very rarely seen across the whole industry.
And this feature took the developer 15 minutes to implement, most of which was actually making the Slider UI itself.
And a very well-known example, Celeste.
So this game has been hugely influential on other indie platforms in particular, with many games copying and building upon Celeste's ideas, which were in turn developed in response to how exclusionary Cuphead's inflexible design was.
Celeste's whole feature set took two weeks to implement.
And if you look at the kind of accommodations they implemented, that brings me neatly on to the next thing.
So this is another indie platformer from a few years before Celeste called Even the Ocean.
If you have a look at the kinds of options that games like this and Celeste have, quite a few of them look an awful lot like debug options. Options you implement to make your life easier while developing or variables you tinker with balancing that you then turn off and hide from players when you release the game. So maybe don't hide them, put them in the menu instead.
chances are there'll be a useful accessibility consideration for someone.
So you may even have built a bunch of useful stuff already without even knowing it.
But isn't that cheating? Won't that break the game? Pushing people further away from your vision.
With options like these, like invincibility and slow motion, you might think so, and in some cases they may be. But it's always worth thinking about the full breadth of who might want to play your game.
For example, I know someone who is unable to use his hands and interacts with technology, including games, by using voice commands.
So for example, he speaks the word jump, and that triggers pressing the space bar.
As you can imagine, that's quite a slow and imprecise way to interact.
So as Celeste is a precision platformer, the default game is unplayable for him.
With invincibility and slow motion turned on, he can play, but it still takes a great deal of practice and trial and error for him to get past each screen. And that success through persistence is exactly the experience that the developers had in mind for their players. So those options are actually letting people get closer to the intended experience rather than further away.
And that's something really important to keep in mind, that difficulty is relative, the product of someone's capabilities versus the barriers in the game.
So if you have a specific level of challenge in mind for your players, you need to find some kind of a way to accommodate human variance.
And learn from other people too. We're in a luxurious position now of the field being mature enough that there are loads of great examples of good practice that you can copy from other games and a ton of great free resources too.
These three are just a few of them. When you look through resources like these, you'll often find things you're already doing that you didn't realize were useful for accessibility because accessible design and good design are often just the same thing.
If you want to spend time on R&D and pushing the industry forwards, then that is awesome.
But there is absolutely no shame at all in just copying what other people have done.
And other developers are always happy to chat with you about their work too. Accessibility is a field that thrives and seems to encourage openness and collaboration. And as John Knowles from Turn 10 says, It's almost as if there's a race among developers to see who can make the most accessible game.
And I know a little bit about racing.
It's honestly a race where everybody wins.
So on that note, here are a bunch of indie accessibility superstars to check out.
I'm not going to list out what they all do, but they're all great in their own ways.
There is a ton of great work out there that you can learn from.
That link there is just to a text version of the list.
Or grab a screenshot or whatever as well.
The last three sections are pretty quick fire.
So firstly, tools.
By tools, I mean third party and middleware solutions.
There are some bits of external software that you can use to help you identify things like contrast and cold lined issues.
And there are a bunch of plugins available to take care of some of the heavy lifting of feature development, predominantly for Unity, but also some for Unreal as well. They cover things like remapping, like I mentioned before, and subtitling, right through to making interfaces and gameplay accessible to blind gamers. So if you scroll down to the bottom of this page, there is a handy list there. And this kind of middleware help is only going to increase in the future. For example, Unity recently hired a dedicated accessibility team with two goals.
Firstly, to improve accessibility of the editor itself for disabled developers.
And secondly, to build tools to help developers make their games more accessible.
And Unity want your input.
So if you have ideas on either of those two things, please, please get in touch with them.
And player input.
nothing about us without us. This is a very well-known saying in the disability community and it is very important. It's easy to make incorrect assumptions about what people need or misinterpret guidelines or even just miss niggly little things that actually cancel out your work.
So working directly with the audience is invaluable and it's easy to do if you have a dedicated user research team with a decent budget behind them, right? But what if you don't?
There's still a load of easy ways to get player feedback.
So things like asking for input through social media call outs, beta questionnaires, asking on forums on your Discord, through engaging with fans during early access and crowdfunding.
Even actually asking in-game like the accessibility feedback battle in Candy Crush here.
But make people feel like their feedback is wanted and be respectful of their time too. So don't expect too much more than a quick reply for free.
But also, remember that giving people something in exchange for their time doesn't have to mean money.
So sometimes a copy of a game or inclusion in the credits can count too.
And make use of prominent advocates. Don't feel shy about asking somebody who has lots of disabled followers to signal boost for you. That's exactly how Eagle Islands ended up with its industry leading low vision considerations. So the developer put a call out on Twitter for input.
asked for a signal boost and then ended up with a whole bunch of low vision gamers giving him direct feedback. And reach out to experts and specialists for advice too, but again be respectful of time, don't be too demanding, but still ask. Most of us are happy to give some degree of help for free.
So you've recognized the importance of accessibility.
You've used techniques, tools, and player input to ensure as many people as possible can have a good experience, but there's still one vitally important thing that can undo all of your work.
So let's take a look at two indie puzzlers, Dots and Flowfree, and quite different games, but both based on the idea of connecting similarly colored dots.
There is a significant barrier here, and to see what it is, I'd like you to keep your eye on the orange, red, and green circles on the right.
This is what the games look like with one of the common forms of colour blindness. As you can see, not playable. And the social media response was predictable.
This game really discriminates against us colour blind people. I won't stand for this hashtag fight for what's right. What these games could have done with was some kind of consideration of colour blindness, right?
And actually both games did.
Dots through palette changes and flow free through the additional labels.
But people just didn't know that was an option.
If the games had been accessible by default, that wouldn't have been an issue.
But if you're implementing any kind of a setting, you can't just put it in a menu and assume that everyone who needs it will find it and use it.
So make sure you tell people about what you've done.
This could be part of your trailer, like in Legacy of the Elder Star.
It could be within the game, like the loading screen, hence here about colorblindness.
Or like how the pause screen is used in Layer of the Clockwork God.
Or something as simple and cheap as a bullet point in a feature listing in a storefront or in a press kit.
That's what indie platform puzzler Hugh did.
And people noticed, not just players, but reviewers too.
All of the top scoring reviews on Metacritic were reviews that talked about the game's colorblind mode.
And the quote on the top review you can see there was about the colorblind mode.
And the game made it into green by one point.
The devs are absolutely certain that without that simple bullet point in their press kit, they would not have made it into green with all the critical and commercial implications that go along with that.
And one last thought to leave you with, and it's an important one.
don't sweat it. There is no fixed bar for you to hit or miss. Instead, look at accessibility as an optimisation process. As with any kind of optimisation, it isn't an all or nothing thing.
There's always more that can be done, but every little bit you're able to do, every low-hanging fruit you're able to reach simply means that more people are able to have the kind of experience that you're hoping for.
