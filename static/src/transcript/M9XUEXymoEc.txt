Alright, let's fire this up.
More room for my nudes.
The nudes.
Hello.
Hello everybody, we're gonna get started now.
So those of you who are wandering in, wander quickly and sit quietly.
And everybody else, let's rock and roll.
In the tradition of the failure workshop, we have had some failures in room scheduling and AV.
So, we're all set already.
and a failure in making a too obvious joke.
OK.
So Failure Workshop is a session that I really love.
And so we resurrected it last year after it had been gone for a couple of years.
And the brief is basically that in our industry, and particularly at conferences where people are worried about appearing competent, We don't want to discuss our failures.
But I actually find that when you're discussing failures with people is when you really get to the good, meaty, delicious parts of what will actually inform your design practice and make you better at things.
And we're weird.
We don't want people to know that we have failed.
We want to cover up these failures.
And collectively, if we can all agree to sort of hold hands and all fail together, and we can think about those failures, I think we can agree that we're all going to be better developers for it and happier people if we don't have to be hiding our failures all this time.
Um, which really sucks. It's kind of how it is. Um, was there anything else I wanted to say about... It's sort of the therapy workshop. Yeah, totally. Um, yeah. And so that's the impetus behind having this workshop. So, in fact, we had multiple cancellations this year. Uh, and I think that speaks to how hard the, our industry has gotten this year relative to years past. And I think that in particular this workshop is...
more important this year than in years when things are going extremely well.
And we have a whole panel about the so-called indiepocalypse, which, you know, whatever, we'll talk more about that later.
But I do think that the fact that people were canceling out of the failure workshop, not wanting to share their failures, is a symptom of the fact that things are getting tougher and tighter and it makes this type of gathering of all you beautiful people getting together and thinking about these kinds of things all the more important.
So today we have three failure workshop speakers.
We have Paul from Mode 7 Games, who made a game called Frozen Cortex he's going to talk about.
Kaim's going to talk about Earth Primer.
You're not going to talk about it.
You don't know what I'm going to talk about.
I don't know what I'm going to talk about.
It was the last minute to fill in, so we're not really sure what Kaim's going to talk about.
Hopefully he doesn't fail too hard.
And Joe is going to talk about the sophomore slump phenomenon relative to his successful, I'm going to call it successful game, Tower of Goods.
I'm sorry, he's going to go first.
Let's give it up for Joe.
Joe Marabello.
Hello, everybody.
I'm Joe Marabello, and I made a game called Tower of Guns.
Quick background, Tower of Guns was a roguelite first person shooter that I released about two years ago.
I'd been working as a tech artist for a large studio that went out of business before that.
And instead of moving on to a new company when that company went out of business, instead of moving to another game dev, I decided I would go ahead and try and do my own thing.
So I'd take a couple of months and make this kind of as a learning project.
I hoped that it would sell a couple thousand copies, and it went on instead to sell a couple hundred thousand copies.
It was not a runaway super blockbuster kind of hit, but it did pretty well for a small indie project.
And I expected the project to be kind of a small sabbatical from AAA, and I kind of expected to go back into the...
AAA industry afterwards, and instead this became the beginning of a new career path.
Now I'd heard about post-release blues a lot. I understood it as a very common depression that happens after developers ship a project. But I never really gave it much thought. I'd shipped a couple of games before, prior in my career, back when I worked for larger companies, and I didn't think that this post-release blues would really affect me. I was under the impression that post-release blues were for people who identified too much with their pet projects.
And so that when they released them, they kind of felt this suddenly hollow feeling from releasing their project basically to a very cruel and critical world.
That wasn't... that was kind of how I understood it.
But that wasn't how post-release blues manifested itself for me at all.
I had no problem getting Tower Guns out the door.
But then I was faced with this.
When it came time to start on my second project, I felt a sudden vacuum of purposelessness.
And I didn't know what to move on to.
Here's the thing, I had no shortage of ideas.
I had ideas coming out of my ears, too many ideas.
My wife was making fun of me because she was like, you're not going to know what to move on to next because you want to move on to too many things.
But then, instead, when I actually was faced with the opportunity to move on to something new and exciting, all of those ideas felt like flat.
They all kind of just didn't feel exciting anymore.
So I did what a lot of developers do, I think, and I retreated back into supporting my game.
I put out a lot of patches, I put out updates, I helped out with ports, I focused on promoting the game.
This led to the game having a lot more legs than I think it would otherwise have had.
It made its way into a PS Plus deal, into a major Humble bundle.
That focus probably helped make the game stronger.
But it was still me avoiding the hard problem, and that hard problem was Project 2.
I knew I wanted to work on something that wasn't like Tower of Guns, and I knew that I also wanted to make something quick.
And I knew that sometimes you just need to start something.
So I did what a lot of indies do, and that's I made a little puzzle platformer.
The concept was that the entire level is broken up into slot machine style reels, and you could spin each section and come up with the best solution on how to progress.
It created some interesting puzzles, requiring the player to essentially mentally traverse a maze backwards, and then they had to remember how to go forward by realigning the pieces as they played.
After completing the prototype, I looked back and kind of realized the design wasn't all that solid.
People solved the puzzles more out of trial and error.
They couldn't really get a forward read on the puzzles.
But I was okay with that realization because that's why you prototype.
So you could get a sense of what works and what doesn't.
And I never intended this to be anything other than like a little filler project while I was kind of thinking about what my real project was going to be.
In the meantime, I developed a few more mental goals.
For example, I had a lot of new tech I wanted to catch up on.
It had been years since I had really been on the cutting edge of game art, and a lot had happened in the meantime.
Back when I worked in AAA, I was an environment artist and tech artist, and while working on Tower of Guns, I really... like, the art in Tower of Guns was really, really, really rushed, and I feel like the entire game dev cycle of that was...
had more in common with Game Jams than with my work in AAA.
And so I really wanted to make something that felt like it looked better than Tower of Guns.
However, being a former full-time artist, I knew that art could come later.
I knew that I didn't need to focus on it yet.
I hit a couple of spots where I dove into art polish too soon on the subsequent prototypes that I'll show, but usually I was pretty good at keeping things to programmer art.
And that's important. I'll get more into that a little bit later.
So my next prototype was this little game that I call Design My Kitchen.
You had to plan out a kitchen layout in order to maximize counter space, floor space, and storage space.
And you were kind of given point requirements for each room, and you had like a budget of how much you could spend, and how much each piece cost, and how many pieces you could use.
And the idea was that you had to balance certain requirements for rules, certain kinds of multipliers against each other in order to meet the requirements.
I was actually having my kitchen redone at this point.
It was inspiring.
Like, that gave me the idea.
I was like, you know what?
I'm kind of planning out my own game.
Maybe they'll make a good game.
I was feeling very inspired.
And it was kind of a cool idea for a prototype, I guess.
I had a couple ideas on where to take it, but I realized that I was having more fun building the prototype than actually designing the puzzles.
And that was a huge red flag for me.
The puzzles weren't fun to design.
If the puzzles weren't fun to design, then they wouldn't be fun to play.
That was at least my personal opinion about design.
This prototype went on for a couple of weeks.
And during that time, my actual kitchen remodeling in real life went from new and exciting to, holy cow, why can't this be finished?
And suddenly, it didn't seem so fun to be thinking about kitchens all the time.
By now, a few months had gone on since Tower of Guns release, and fans were beginning to ask me about what I was working on next.
And I realized that people were watching me now.
And I began to get nervous about whether or not I would have something they would like.
I mean, would Tower of Guns fans like a game about building kitchens?
Would anybody like a game about building kitchens?
So I added a few more mental goals to my list.
Starting to feel a lot of pressure to develop something.
And I was having trouble getting my feet moving on anything.
I was starting to have trouble sleeping at night at this point.
This right here is a turn-based, grid-based first-person shooter because for some reason I thought that would be a good idea.
This is a first-person game where you are blind and you can only see things when you bump into them.
The less time we spend on that slide, the better.
This is a landscaping RTS called bunniescaping where you had to save your flowers from being eaten by bunnies or else they would procreate.
That was more fun when you lost.
So by now months had passed since Towergun's release and I began to panic.
I had nothing worth showing for my time.
I couldn't stick with any plan long enough to validate whether or not it was good or bad.
I just kept ping-ponging between projects.
I was sleeping terribly.
I was feeling sick often, and I was basically in a full-on sophomore slump at this point.
This is a little first-person shooter prototype where I got caught up in playing with the art technique and kind of lost interest in it.
I don't even remember what this was.
And I don't remember what this one is either.
Like, I was building tons of these things, dozens of them.
And I began questioning myself as a developer.
I mean, as a former AAA dev, and as an indie who had made a game that had been played by thousands of people at this point, I was supposed to know what I was doing.
And I knew that I had learned so much, and I was still floundering anyway.
And then a new goal was added to my list.
My wife was pregnant, and I was going to be a father.
And for some reason, that created this firm line in my mind.
I knew that things wouldn't be the same after that.
I couldn't afford to be stupid with my time after she was born.
So I sunk my teeth into the prototype that I happened to be working on at that time and said, this is it. I'm building this. No turning back.
And that prototype was called Fulfillment Center.
The basic idea is that I was inspired by reading about the automation of Amazon's warehouse fulfillment centers.
There were these little Roomba delivery bots that they had made.
It's pretty cool stuff, but in this prototype you basically played a more humanoid robot, living in a not-so-distant future warehouse, running around fulfilling purchase orders for customers that you never see.
And along the way you struggle to meet your weekly quotas, you customize the warehouse and your little prison cell-style room to your liking as you progress.
You make friends with the other robots around.
Basically, there was no action, there was no puzzles, there was just narrative.
But, like I said, I needed to dig my teeth into something.
I showed my wife, and she told me to show the game to other devs and see what they thought.
I told her I would have a prototype that would be ready to show within a week.
So I built a system to manage inventory, an auditing system, a stat tracker.
I made this fun little PDA to tell you what missions you had and how much time you had to complete them.
I made the warehouse expand over time, over the game's length.
Now, experienced developers will know where this is going.
I told my wife I'd be ready to show this prototype off within a month.
I built a working dialogue system with branching paths that were ready to be localized.
I built a quest tracking system.
I built a fully realized save state system with quest tokens and states.
And I was reading every single book I could find on Amazon and Walmart and warehousing software.
And I was going to be ready to show this to people within two months.
I made a shop system where you could unlock items.
I made it so those items affected gameplay.
I made it so that your relationship with your coworkers were tracked and everything was going to be ready to show other people within three months, for sure.
So, to make a painful story short, I was getting caught up in the details.
I was making things that didn't help support the core question and I was hoping the details would save the project.
And I knew all this stuff.
This all stuff was like Game Dev 101.
And while I was doing it, I knew I was doing it.
I still did it even though I knew I was doing it.
I mean, I'm a fairly young designer when it comes to the design side of things, but I mean, I've been in games for 10 years now working as an artist, and I know that it's important to test core hooks, and I know how important it is to not get caught up in the details, and I know how crucial it is to show others the idea early on.
And I knew this project had issues, but I still couldn't help myself.
I couldn't look my wife in the eye or myself in the mirror and say that I needed to scrap another project.
because it was indulgent or heavy-handed or boring or had bad gameplay or whatever excuse I had in my mind that made this project unfinishable.
Because that's the thing, that not all these ideas are terrible. Some of these ideas actually had some interesting things behind them.
Some of them, some of the prototypes actually did a great job of proving that there was something there I could explore.
But my confidence was shattered at this point. And whatever compelling elements some of these prototypes had, none of them were enough to keep me moving forward.
So back to Performance Center real quick.
One week stretched into one month, then into two months, then into three.
And the further that tailspin went, the harder it was for me to show people.
When I finally did show a handful of friends the actual demo, it kind of confirmed my fears.
I'm not someone who believes that every game needs to be fun, but I do think that every game needs to have something compelling.
And this particular prototype didn't have anything compelling, at least in its current manifestation.
Looking at this screenshot, the thing that I'm most proud of in this particular prototype.
was that was what's not there. For all the time I spent on systems and tools at least I didn't spend any time on the art. I was confident enough in my art abilities that I didn't need to concern myself with that yet.
Now why couldn't I do the same thing with the design or the code?
And catch myself earlier? It was because I made tower guns. Because this was not my first project. This was project two. And I didn't feel like I could show anyone anything that was any worse than what I'd already shown.
There were expectations now from others, but mostly from myself.
And I wanted to show the world that I had improved as a developer, and that meant showing nothing until I was satisfied.
This would be very difficult to talk about if I were still in the thick of it.
I've been pretty candid because this is in the past now.
But rebuilding my own confidence has been pretty slow.
My daughter was born a few months back.
And wouldn't you know it, the world didn't end.
I'm still able to make games.
And now I have a little buddy to help me.
Additionally, shortly after this prototyping train wreck, a second project finally did stick.
I can't say it's a much better fit for me, but I can't really say too much about it.
I'm actually contractually not allowed to talk about it any more than that.
But I can say that, most importantly, I actually have partners now.
For the first time in years, first time in four years, co-workers.
And that's already creating an ecosystem of shared confidence.
And I think that's crucial for combating some of the problems that I was facing here.
I mean, everyone goes through confidence ebbs and flows.
And teammates, by their simple presence, basically offer daily validation for what you guys are building together.
A few more positive things that I should end with.
First, if this is going to happen, It's good to have it happen to a solo dev with an existing revenue stream.
I mean, I had a really ridiculously low burn rate.
My only real loss was a few months of my own time and my pride.
Both of those are not the worst of casualties.
And I also came out of this process learning a few things.
I think it's, I've heard that it's bad business to chalk up any failure as a learning experience, but I don't believe that.
I believe that there is value to improve technical expertise and to increase tool comfort and to an improved instinct about what makes good prototypes.
And most importantly, I think I've learned to trust myself a little bit more.
That's the hardest part about being a designer for me.
I trusted myself as an artist.
I knew that I could make something look decent later on once I found a road to commit to.
Why didn't I have the ability to trust my own design sense that same way?
Why couldn't I avoid fussing over details?
Why couldn't I listen to my instincts and redirect a project when I knew it wasn't going to go the way I wanted it to?
I didn't trust myself early enough to show the work early to others.
And I didn't trust myself to recover from failure when it happens.
Failure happens sooner or later to everybody.
Multiple times it happens.
And when it happens, I think that in the future, I'm a little better equipped to deal with it.
And that's because I'm starting to see failure as a road to improvement.
This goes back to something a friend, a badass artist, once told me.
He said that the difference between a master artist and a student is only about 10 feet.
That's just a 10-foot tall stack of paper with a terrible drawing on each one.
And I feel like in this last year, I churned through a big chunk of that 10 fee.
Thanks.
No whammies, no whammies.
Well, hello everyone. Can you all hear me okay?
If I talk...
No.
No? Okay.
That's... Do I have to... Is this mic on?
No.
No.
Give it one second.
Yeah, correct.
I mean, I can shout like this, if you prefer.
Oh! Okay.
I think we might have a little mic action now, too.
I'm going to project.
Project failure across the room.
My name's Paul Kilduff-Taylor.
I'm from a company called Mode 7 Games.
Some of you may have known me before when my name was Paul Taylor.
But when I got married, I decided that what I needed was a name that nobody could either pronounce or spell.
So with that in mind, here are some of my favorite misspellings of my name.
This one, Paul Kildoff, quite good, quite creative.
Kilvas, not even the correct letters in that one.
Kiddoff, I like this one, it sounds a little bit like someone bouncing a basketball off the head of a child.
Kildoff-Taylot, a good one.
The interesting thing about this one is that it's normally the first point of my name that people get wrong.
Taylor's quite a common name.
So more points of creativity.
And finally, my favorite one. This was quite a big conference.
I don't know if you can see that.
Paul Kildroth-Jones.
So...
We don't really need to say anything about that.
Oh, wow. Thank you.
Oh, that's much more comfortable.
Ah, lovely. Good.
It's great.
Yes, so my talk is about conceptual failure.
And what I mean by that is the kind of, the idea of a game concept as something that combines the kind of core fantasy of the game with the aesthetic, with the mechanics.
And when that goes wrong, it can go very, very wrong indeed.
Because it's the kind of strange alchemy of those things that...
makes people enjoy games in the first place.
So it doesn't matter what you do on top of that.
If you had a conceptual failure, you're gonna be fighting against that for your entire dev cycle, and you're certainly gonna be fighting against it when it comes to PR and marketing.
So yeah, just a quick bit about us.
We're Mode7.
We've been making indie games for 10 years.
There's four of us.
We're based in Oxford in the UK.
And if you've heard of us before, it will be for this, a game called Frozen Synapse, which is a simultaneous turn-based tactical game.
You basically make a plan for the next five seconds of gameplay, your opponent does exactly the same thing, and the plans play out together at the same time.
Um, yeah, so this game did pretty well.
It came out in 2011 and kind of made our name as a studio.
And one of the great things about it was that it was kind of a very immediate game.
Uh, when you look at what it looks like, you can kind of imagine the sort of gameplay that you're going to be enjoying as you play the game.
You're going to be making these plans in quite a detailed.
environment, had procedurally generated levels as well, as you can tell that because they're all squares and rectangles. And that was sort of a really interesting project to work on and something that we found that resonated really well with other people. So when it came time to make our next game, what we wanted to do was take the core of Frozen Synapse and then add something to it, change the aesthetic.
basically kind of frame it in a way that we thought would make it a bit more accessible.
So the idea for the game was Frozen Endzone, which was going to be based on a game that we really loved called Chaos League.
Now, Chaos League was the first adaptation of the Blood Bowl franchise originally, and then the developers, I believe, lost the license someway midway through the process, but they released their own.
So this is a kind of fantastical sports game with orcs and elves and all that kind of thing going on.
It had a really good simultaneous turn-based mode.
So just as Laser Squad Nemesis had inspired Frozen Synapse, Chaos League kind of really underpinned what we wanted to do with Frozen Endzone.
But we didn't really like the kind of fantasy aesthetic, so we thought we'd go for an aesthetic that we hadn't seen for a while, which is this kind of future sports thing.
This is a game called...
Hyperblade, which we always thought looked really good.
And of course, the classic of this genre is Speedball 2, a really popular game.
And we felt that bringing back this type of futuristic aesthetic, we always preferred sci-fi, and then coupling it with this futuristic sport idea would be something that nobody had really seen before and certainly hadn't been done for a while.
So what I'm going to do now is I'm going to show you one of the early trailers for Frozen Endzone.
If I can actually get to my desktop in the spirit of failure.
There we go.
Right, let's have a quick look at this.
I'm not going to show you all of this, but this was how we announced the game.
So people had known us for a kind of very pared-down aesthetic, so we opened up on this big shot of a stadium.
We thought people would go, well, what the hell's this? It's something completely different.
have to remind people who you are, which is another thing which is difficult if you've had a sort of singular indie game that's done quite well.
People don't know you as a developer, they kind of just know your game.
And then we started showing this.
In this you can see we have randomly generated pictures, we have these players running around, and we had a system where it would take your plan and then interpret everything into these kind of quite elaborate animations with really nice art.
We had some really great artists working on this game, really great animators as well.
And here is the section of the trailer where we are showing you what the gameplay is.
And this is very critical. I'm going to come back to this again later on.
So the idea of it being your decision and showing the planning here, and then we show that plan interpreted into these cool animations.
And we thought that was the core fantasy of the game.
We thought it was going to be something where if you looked at your plan being translated into these amazing animations, it would be something that really excited people, really interested them.
So there we go. That's enough of that.
However, the response to this was not ideal.
Now these are some of the more polite comments that we received.
I'm going to read some of them.
Is this from the same people as Frozen Synapse?
At least that is one soundtrack absolutely sold for me.
People always like our soundtracks irrespective of how terrible our games are.
I'm not that sold about the game, seeing as I'm not that big a football fan.
It's mainly about tactics, sure, but it's still about handegg.
Now this is the first time I learned the unfortunate term handegg.
It was a word that I was going to see a lot over the course of the four years that we spent working on this game.
Now, this really indicated to me that the one thing we've got critically wrong with the game was that people thought it was a sports game.
Now, sports games are, obviously, as you all know, generally action recreations of existing sports.
They thought it was an American football game, or a football game, if you're American.
And that's not what we wanted. We wanted people to see it as a tactical game.
This was just the fluff around the kind of nice gameplay.
It was there to make the gameplay feel exciting.
Suddenly we were kind of caught in this world of people who hated sports.
Generally, people who like very, very hardcore tactical games are not big fans of mainstream sports, and this was something that we learned.
So we tried a few things to get us out of this.
We changed the name of the game to Frozen Cortex, which is a much better name, and people couldn't make a funny...
funny nickname out of it, as they did with Friendzone, from the original title.
I can't believe I said that word in public.
Good.
So we also changed a few things.
We changed how the ball looks.
We changed how the goals look to make them look less like football goals.
We started doing promotional stuff like this, which shows the game much more as a kind of nerdy tactical game.
with lots of lines and things, and there's a character talking up there.
We also shifted to much more fantastical settings.
We put out lots of screenshots like this with big particle effects and explosions and stuff, trying to say, like, yes, this is a sports aesthetic game, but there's a lot more going on than that.
And yeah, sort of shots of our stadiums like this is kind of, you know, you wouldn't look at this and necessarily think that's a traditional football stadium.
So yeah, this was the core of the conceptual problem.
Now, this is a box. It's a box for two games, Strike Commander and Wink My Other Privateer.
And it was the most exciting box I'd ever seen in my life when I was about 11.
And the reason was that it was so conceptually exciting to me that I was a Wing Commander fan, and then there were these other things that were like Wing Commander, and that was so exciting.
And on the back of the box, it really kind of goes into detail about the promise that you get from these games.
And it has this phrase, be what you want to be.
And thinking back to all the games that I really, really liked and what we'd done with Frozen Endzone, we had this problem where there wasn't a kind of...
core fantasy at the heart of it. Nobody really wanted to be sort of managing a futuristic sports team with tactical stuff. Nobody really wanted to do that. Whereas being a space pilot, doing all the other things you can do in other types of games, they're fantasies that people have. They're things that people like.
Now, I've got a slide of Rocket League here, because this is a game that took the sports aesthetic but it made it so fantastical and so ridiculous that as soon as you see it, you want to kind of play around with it.
You go, why are there cars?
Why is there a huge ball?
Why is there this weird stadium?
It takes people out of, oh, I hate sports, and it puts them in the mode of, wow, what's that?
I want to try that.
And that's what we'd completely failed to do.
So just to kind of wrap up a little bit on some of the most important things here, I think the concept of a game is really delivered by that core fantasy idea that I talked about.
What are you doing in the game? What do people want to do? What's exciting about the idea?
If you get that wrong, it's very difficult to sell these other things.
Immediacy is very important.
Frozen Cortex is not a very immediate game.
You have to learn how to do the tactics, you have to understand the rules.
And that hampered us as well.
When you have a difficult core fantasy, if the game's not immediate enough, then people won't get over that problem and they won't start advocating it to other people.
The aesthetic, obviously, the visuals, the way you translate that core fantasy, I think we all understand that's important.
And finally, notability.
When someone does something in your game, it has to be notable.
If you look at the way journalists often review games, they will often tell stories about what they did in the game.
If you can't tell an exciting story about the thing that you did that was tied into the core fantasy of the game, then no one's going to talk about your game.
We hoped that people would talk about their losses and victories and so on in Cortex and that did eventually start happening when we built up a core of players, but it just wasn't enough to get people through those initial problems.
Now, when I hear people talking about their failures, I often wonder if the games that they're talking about were any good at all, because that does matter still, believe it or not, even in this day of indiepocalypse.
So, Cortex did okay.
These are some of the better reviews.
That score from PC Gamer is quite nice, and Eurogame and so on, but it really wasn't enough to elevate the game. If you're hampered by your concept, it doesn't almost doesn't matter what kind of review scores you get. People won't even look at the reviews if they don't like the idea of the game.
So, wrapping up on where this has taken us now, we started work on Frozen Synapse 2, which we announced recently.
And the idea behind Frozen Synapse 2 is to take what people liked conceptually about Frozen Synapse, but then to kind of blow that absolutely out of the water and just add more stuff to it that we think is core to the main fantasy of the game.
So very quickly, again, I'm just going to show you a little bit of a trailer, and you'll be able to see the contrast with what we did with that Endzone trailer.
So here you can see, after this little iDubbbz, we get straight into gameplay.
One of the things that I found working on that Cortex trailer that I showed you at the start is that people were dropping off very, very fast when watching the video if they didn't see gameplay straight away. And this is about telling people what your game is for.
What are you doing in the game? What's it going to feel like when I play it?
If you get into that immediately, it helps. This trailer, by the way, has already started to get many more views than that Cortex announcement trailer.
Here you can see we pulled back from the level to show this procedurally generated city.
And the idea behind the game is that you can have this completely generative, vast city, you can do missions in absolutely any building.
And this is a core fantasy that people like.
When they play Frozen Synapse, they want to...
expand on the experience, they want to take that gameplay to some different places.
So the idea behind that really is just to feed directly into that set of ideas, something that we failed to do previously.
So although Cortex was difficult, it didn't make as much money as Frozen Synapse by a long margin, but it managed to keep our studio going.
We feel that we've learned some conceptual lessons about how you design and promote a game in order to connect your audience with your key ideas.
Thanks very much.
Are we being sent?
You may have to sort of just like stand right here.
This may be your microphone right now.
Oh.
We had it here earlier.
We changed cables.
Yeah.
There we go.
That works.
Oh yeah, you can hold that mic too.
Yeah, I need another hand.
Do we need to switch something here?
Do we just plug that from?
Yeah, we're up.
You're up.
Oh, no!
Oh, no!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
Oh!
No, I'm not.
It's just black.
OK.
The time is now.
I needed to jump into the water now or never.
Maybe it was now or later, but I didn't have the patience to find out.
It was time to jump ship.
The year was 2007, and I had been working on Spore for 4 and 1⁄2 years.
I had started as an intern in 2002 when the project could have fit comfortably in a very, very small lifeboat.
Now, years later, the creature creator, or editors we called it, and all the editors, they were done.
It was years of research and development, and I was proud and happy with my design work, and the work of all the people who had made the editors so amazing.
While I worked on many parts of the project, the editors, they were my baby, and they were done.
The rest of the project, things were looking so sunny, and I wasn't excited to become deeply involved with them again.
We were paying the interest on bad loans that had been made years in the past, and it was slow and painful.
Meanwhile, exciting things were happening outside of the walls of EA, outside of the bounds of AAA games.
I was 27 years old, and definitely on my way to becoming an old man.
It was time to move on, to trade in my vanishing youth for adventure, to do the things you do when you are young, visit exotic places, create ambitious projects, and make bad decisions.
It was time to become an indie developer.
Clearly, that's where the action was.
The creativity, the autonomy, Braid and World of Goo were about to come out and make boatloads of money.
The bounds of the meeting were being pushed.
out there. Out there you had creative autonomy and boatloads of money. Who wouldn't want that?
No large development teams to waste your time. No one else to negotiate with, just you and the open road. No more producers and their annoying schedules. Who needs schedules?
People who don't know how to make, how to move fast, be creative and nimble, and think deep thoughts. I had money saved up in the bank. I could find another job if I needed to.
It was time for me to do what I could do best. Make cool stuff and prototype it. The rest will be easy.
Mistake number one, scope.
I made a directory for my project.
It was called Eden.
It was a simulation game.
There would be a world simulator, and there would be a lot more.
The actual title was Pocket Kingdom.
I got off to a good start, and then immediately started making a playable game.
Two months in, I had a network server and a basic multiplayer RTS game working.
It kind of worked.
I could play against someone.
The game would have a single player mode, a multiplayer versus mode, world building tools, an intricate economy, a people simulator like The Sims.
a sophisticated 3D user interface for making things.
There was a lot of stuff.
At this point, I should probably tell how big the dev team was.
It was me.
It was this guy, this genius right here.
I figured my game wasn't too ambitious.
I mean, it wasn't like we were trying to simulate the whole universe or anything.
And I could get halfway done with it in no time and then find some collaborators to help me finish it.
It'd be easy.
Looking back, it was as if I'd forgotten that I was no longer on Spore.
I was no longer at a big game company.
where I would just build prototypes and then have engineers and artists to collaborate with and back me up and keep me in check.
So this is the situation. I was the brave general leading the charge and there was no cavalry behind me.
I didn't even know there was no cavalry. If I did know, I don't think it would have bothered me. Everything was going great.
Turned out that was a big mistake. So onward I plunged deep into the wilderness.
I'm not going to show a lot of screenshots from the thing, but here's a few to give you a sense.
So mistake number two, trust me, I'm an expert.
My secret weapon was prototyping.
I was an expert at failing fast, at starting over, at throwing stuff against the walls.
I'd done it for years on Spore.
That was one of my superpowers, one of the reasons the editors had come together so nicely.
I'd given talks to GDC about prototyping.
I'd written articles about it.
I knew what I was doing.
I would prototype something playable.
So there was good news and bad news to this.
The good news is that I had some amazing ideas for Prototype.
The bad news was I completely forgot how to do it.
I kept working on this playable Prototype, this number of multiplayer game.
And meanwhile, development started getting very slow.
Where was the economic game, the world simulation, the M-basis 3D user interface, the people sim?
In part, I was feeling the thrill of being an engineer, of building a multiplayer network system, of running a not very good 3D graphics engine.
The wind was in my face, and it felt great.
I was learning about 3D graphics, network simulation code, and all kinds of things, but I got bogged down.
Five months in, I was distributing a playable 3D game to some friends that had some combat and world simulation, but it didn't really fit together.
My ideas were still all over the place, and the stuff that I had implemented wasn't really jelling.
Finally, it dawned on me that I was doing it wrong.
I wasn't prototyping.
I was building the actual game.
Here's another screenshot.
I had no idea what game I was making.
And here I was making all this stuff in 3D, a big network simulation game.
It was going very slowly.
It was going too slowly.
And it was a mistake that cost me five months.
This is a screenshot from the game join select screen.
And you see there's cute little stars in the background that are twinkling and animating.
And it's just too much.
It's all wrong.
All right, so mistake number three.
is scope.
And here's actually, this is a screenshot of all the builds that I made in the first year, with all the dates.
I was looking through this last night to get a sense of where I went.
So you see my progress over time.
So my big success at this point was realizing that I was prototyping wrong, and realizing I needed to actually start prototyping.
So I started making one from 3D to 2D, and then things got really fast.
So I started making world editing tools in 2D, and then 3D.
They were really, really cool.
I started building multiple fun, playable economic simulations that people really liked.
I made cool simulations of pandemonium here, stuff being built and then stuff being destroyed.
This was made in like a week, two weeks.
This inspired an iPhone game I later made.
I made a fun interactive weather simulation.
I made a sim-style people simulator that was tons of fun in like a week or two.
I made an awesome RTS game with the rhythm and rules I've never seen before, with results which came out of months of careful research.
I made a world generator.
I made a cool SimCity tower defense hybrid game.
I made a lot of great little great prototypes.
Finally, six months in, I was actually prototyping the game, but the problem was I still had no idea how it all fit together.
I was discovering all these amazing things.
It was as if my ship had run aground on a coral reef, and I was too busy marveling at all the amazing fish to actually notice that the ship was sinking.
There are things there that I want to go back one day and salvage in this amazing reef, but that will come later.
So the thing that I was missing is the project had no center. Nothing was holding it together.
I wasn't going deep in any one of these things.
I either needed to go deep in one of these directions, become a design genius overnight, or somehow find a team of 100 to help me actually make this thing.
And the team of 100 wasn't forthcoming, nor was the design genius.
A very smart designer friend of mine told me that I needed to focus, which was a big realization.
I was like, oh yeah.
But he wanted me to finish my project while I was still young.
And he was right.
Part four, finishing is hard.
Thanks to the experimental gameplay project dot com, I spent a couple of days making an iPhone game called MinMe.
It taught me that even finishing something so simple was a lot of work.
So I took another break, a detour, and decided to dabble and experiment with the iPhone user interface and made this game called Earth Dragon.
It was that.
It was inspired by one of the prototypes I showed earlier.
It was tiny, and it took a few months to make.
But again, it taught me how much work it was to actually finish something.
For better or worse, these little successes both humbled me and inspired me to carry on even further.
So I try once again to make something simple and finish it, but floundered again.
I started getting lost in a 3D world in Weather Simulator.
Finishing any product is really hard.
It's important to have focus.
But how do you finish a project whose scope is sometimes as big as you are?
My scope was still crazy.
I was still the general without the army, the captain of a shipwrecked vessel dashed on a lovely ship, the juggler of too many metaphors and too many prototypes.
It's hard to finish a project even when it's working.
You have to decide you want to stop.
You have to set deadlines and hit them.
You have to fix bugs.
You have to make lists and you have to check off things on those lists, and it's a lot of work.
Trade-offs have to be made.
If you've shipped to Optra, you know what I'm talking about.
It's exciting and it's exhausting.
But how do you finish a project that isn't happening?
A project without lists, a project with no bugs.
Because in some sense, the entire project is one huge bug.
The huge bug that I loved was hooked up to a life support system.
The machine is beeping out its unsteady pulse and its breathing is unsteady.
I loved it dearly and I put my heart and soul into it, but clearly it's not going to make it.
Its breath is raspy and slow.
It's everything I ever wanted and nothing I could ever have.
And somehow, from within deep inside of me, I had to find the energy to pull the plug.
And that was really painful.
I decided to pull the plug and try something else in my life for a while.
Wrapping up, I haven't heard a lot of failure talk, so I'm not sure if I'm breaking the rules by doing this, but I want to talk about the silver linings of all of this failure.
Because the silver lining is how I find my way in the world.
It's how I keep it together.
So I like to limp away from the wreckage of any problem in my life, whether it's professional or otherwise, on my good foot.
I like to look down on my good foot and feel really lucky about that foot.
I like to look up at the glowing mushroom cloud behind me and marvel how beautiful it is, how I'm lucky to have gotten to see it.
And maybe if I'm really lucky, I'll get a cool mutation.
I learn so much.
I have a newfound jealous appreciation of people like Jason Rohr, who seem to have an uncanny ability to pick just the right projects, to pick a super interesting and big and hard problem, and yet one that's small enough to hold in their hand and get it done by themselves.
I think that's absolutely an amazing skill.
I think I learned things about focusing and about simplicity and about finding the center in design.
There's just no other way to do it.
I exercised and refined this new ability, this new mutation in my new project.
I managed to pick up, coming back another year or two later, and pick up part of that weather simulation and world generator that I made, and I made this.
Which I don't think is a failure, thanks.
Sorry.
Sorry, the road that you've used to get to Earth Primer, that's really cool.
But I think it's interesting, though, that you're like, well, what are you going to talk about?
Because you're like, I haven't seen the projects that you're going to talk about that's failure because I don't actually share the failed projects.
Right?
That's the point of this session.
They're buried in the graveyard behind our houses.
Like a shallow grave.
Here's a shovel.
Yeah, here's a shovel, thanks.
Yeah, exactly.
So anyhow, so yeah, so one day, so anyhow, see, I'm really happy with how things turned out at the end.
But it's not to say that, but that was like years of work.
And this is sort of the tail end of.
So anyhow, so one day I plan to go back, go back to that coral reef and salvage more of the treasure that I found there.
And next time I dive in, I hope that I'll be a little bit more modest, a little wiser, more focused, and more humble.
Thanks.
All right.
So we have a little bit of time for questions.
I have some questions here that occurred to me while I was listening to what you guys were saying.
This happened last year, too.
We ended up with sort of a theme.
The theme was kind of chasing the correct concept of the correct scope.
And you guys both went through a zillion prototypes.
Yeah, I was feeling some class.
Yeah, there's definitely some like.
Yeah, yeah, why don't you move over to that side, join the group.
All by myself over there.
Ha ha ha.
Um, so I had a question for Paul.
Um, and, and this is, this question actually works really well for you guys too, so you can answer it also.
But how do you feel, uh, in hindsight about having sort of changed your design midstream based on external feedback?
Because I think that a lot of people, I think sort of accepted wisdom is that you're the genius designer and you have this idea for what it's going to be and if you change that midstream then you're compromising your vision.
So how do you kind of reconcile that with the practice reality of like, okay, this is garbage, like what am I doing here?
Well, there's a couple of things there.
One is that our lead designer, Ian Hardingham, is quite a mechanics-focused guy.
So he just wants to find the best way of showing off the mechanics.
So in terms of pitching the changes as an idea, he was instrumental in that himself.
But yeah, with Cortex, it really seemed to work.
We definitely seem to get.
people to start understanding more about what the game really was as we went through those changes.
So even though it kind of can feel like switching horses in midstream to some extent, you can do some things to mitigate those problems and I'm glad that we made the changes.
What was your strategy for sort of mitigating the problem of changing so quickly midstream like that or once you're so far along?
We just used it as a PR point.
Yeah.
So it's kind of...
We've heard you.
Right.
It's kind of interesting if a game changes its name, and it's interesting if a developer is kind of reacting to feedback and stuff.
So we just talked about that in public and went, hey, you know, this wasn't coming across the right way.
So we got PR focused on, you know, the stuff we wanted it to be focused on.
Yeah. Do either of you guys want to comment on that at all, or...
Also, I think there's a kind of balance between the intellectual producer part of your brain, like the rational planner, and then there's this dreamer part of you that's responsible for thinking up crazy ideas and then just not thinking about boundaries, and somehow you have to reconcile those things.
I think it's easier to do it if you're collaborative with other people than if you're trying to do it all by yourself.
One thing that I noticed that struck home to me was when you were talking about how you had this idea of the sort of grand, infinite fields of brilliant genius that you were going to go join, and you had your own idea internal to you about what you wanted to create.
But then you sort of got out there, and you were like running, and you're like, wait, where am I?
What's going on?
So I don't know.
I feel like there's this thing that happens retrospectively when you look at really good games where you say, OK, well, this was really good, and clearly they had that core idea the whole time.
But very often, as a designer, you just kind of like, right, that's the thing that I want and you just like run toward it and you get there and you're like, okay, well this is not working but I don't know where to go next and like how are you guys advancing in your ways of dealing with that I feel like it's kind of like what this has become about.
Well, I mean, we're giving a talk at how we failed at that. Right. In a lot of ways. Yeah. With like the aim that people can take their own lessons away from it, I suppose. Right. I mean, I think.
A lot of it comes to the feedback loop, and I think the smaller you are, and indies are very small in terms of the size of the studio, the easier it is for that feedback loop to get into oscillating into something where you're way off target from where you originally thought that there was something interesting.
Whereas, I mean, whereas I think a larger studio, you're constantly being checked against whether or not something would actually...
make money, which is another way of saying whether or not people would be interested in it, just from AAA speak.
But as an indie, you target something very specific and you're like, that's what I want to build.
And you may be the only one in the world interested in making that or interested in playing that.
And that's okay if you're a solo dev and you've only got yourself to support, but the larger you get, the more you've got mortgages on the line and the more you've got to concern yourself with whether or not people are going to be able to feed their families.
I think that it seems like what you experienced was like, like, when you showed the game to, like, the world at large, that's when you had your reality check.
And I feel like that reality check can come through at any time for any of us.
And it's like, I don't know.
I have a lot of respect for the solo devs out there who are able to make their own game, and somehow they get to something that people want at the end.
And like that Undertale guy, like that's amazing.
But even then, I mean, he wasn't working in a vacuum because he did have the Kickstarter.
And so he was getting validation immediately about everything that he was doing.
Right, at least to the point where he was like, OK, people are kind of interested in this, at least enough to support my Kickstarter.
And I feel like showing the world at least stuff early on, I mean, that's the something that I feel like I, that was my major failure, was not showing what I was doing.
Does anybody in the audience, if you want to ask a question, feel free to hop up to one of those mics.
Can you do the mic?
Yeah, awesome.
Thank you.
I want to just say that I think people said necessity is the mother of invention.
But I think desperation is the mother of invention.
And the question is just how desperate you are.
But if you're too desperate, you're screwed.
But if you're just desperate enough, you're going to come up with some really brilliant solutions to problems.
I have a talk desperation-based game design that's in here.
It'll come out someday, I'm sure.
My question is, in my experience a lot of times when I failed, I have learned a lot from that experience, but I've still had to face the consequences of failure, you know?
And, like, my question is, you know, how do you mitigate that or how do you get past, how do you process the consequences of those failures, you know?
Like, spending so much time learning rigging and then...
not learning any, or learning a lot, but not actually getting anywhere to a portfolio, and then because you're spending so much time on that, you're having to learn about portfolio as an example.
You can talk about that, I guess.
Well, there's two different kinds of failure that you can be experiencing.
There's failure of your ideas and a failure of your...
your project on a large.
And then there's failures that are localized, about tech failures.
Everybody in this industry hits tech failures.
The industry changes so fast that there is no way that you can ever keep up with everything.
And everybody in this room feels like they're behind.
So that's nothing new.
If you're saying, specifically talking about the rigging example, if you feel like you're failing at rigging, but your game is something where you're really excited about something that has nothing to do with rigging, you're kind of getting caught on a tangent there.
And it's inconsequential to them.
Like, there are reasons that people go and just become animators.
And that's all they do.
And I just lost the mic.
There we go.
There are reasons that people just focus on being an animator, and that's their entire career.
I mean, I feel like one of the quickest ways to failure is distributing yourself across too many disciplines.
And I'm saying that as somebody who has distributed themselves across way too many disciplines.
I suppose you could give a whole other talk about how you should focus yourself, how you should start to minimize your risks.
Like for tower guns.
I didn't animate those things, even though they were animated, and I didn't hire an animator.
I just had things spin around in place, or I had things that were like bone rotations to aim, or I did the animations in the vertex shader, causing things to like shake like they were an engine.
I mean, I cheated the animation, and I let that limit define the game.
And I feel like, as an indie, you can get away with that a little bit better than you could as a AAA.
I mean, I don't know, it's a hard, it's a hard road.
Yes, so when you were talking about being in the spiral, Joe, you mentioned that it was a hard thing to talk about while it was happening.
But in retrospect, you feel confident that you can talk about it.
My question is kind of based around the assumption that it's most useful to actually be able to talk about these things while they're happening, right?
what did you say to people who are asking, oh, hey, how's it going?
Because that's a thing that happens a lot when you release a game, right?
Delta developers will be walking up to you and saying, how's it going?
You know, what are you doing?
What's happening?
And then what did you actually say to them, and how did you actually feel?
It's like that Facebook meme that went around.
It's like that kid was like, oh, it's the first day of school.
How's it going?
I was like, great.
Really?
Hey, you're working on a game, right?
Yeah.
How's it going?
Great.
Really?
I mean, for me, I would say that I was still prototyping.
I would also say I was still supporting tower guns, which was true, because I was doing both.
I was juggling the post-release support of that with new prototypes.
But the further and further along I got, because you're talking about a 13-month span here for me, the more that didn't fly.
People were like, they wanted to see something.
If nothing else, my friends and family wanted to see something, let alone the internet at large.
So it just became harder and harder and harder.
And that was when I began to realize that this tailspin was going along.
And when I was in the middle of this, I knew it was going on.
And I can't say that I was in denial because I knew it was there.
I just couldn't avoid it.
It's like once you start getting into that habit of not showing something, that is a self-feeding cycle.
I don't know if you guys wanted to add in all that.
I want to say something about that in the last question, which is I think the story you tell yourself is really important, and it becomes hard to answer that question about who you are and what you're doing when people ask you when things aren't going well.
And then the question about how do you, when you have wasted a lot of time, what do you do with that?
I think the answer is to lie to yourself and just basically retroactively tell yourself a really good story about how things are going.
Like, oh yeah, look at that mushroom cloud.
It's really beautiful.
Let's check that out.
You know, like maybe I'm gonna get a cool mutation.
And I think that, I'm being silly, but I think it's true.
Like I think that that's how you sort of have to ramp up into the future is to keep a positive outlook.
And so like now the story I tell is yeah, I screwed around for a while. I made Earth Primer Let's not talk about everything that happened there I learned a bunch of stuff, but like whatever like the story is now this you know But this workshop is about telling a different story Yeah, this workshop is sort of meant to be a dredge for all that really good work that you did, that you hate yourself because of it, to remind you that it was good work at the time, and it was valuable work, and it's not just pouring down a hole of infinite blackness, right?
It's valuable. Bring it to the workshop. Share it with people. Share it with your friends.
Just share it, you know, if you don't want to get up on stage and talk about it, share it with the developer next door that you know, that you're friends with.
And the other thing is, it's a lot easier to talk about it and learn from it if you can keep going.
Or if you've set up your studio or your own situation so that a failure of one project doesn't mean that you go bankrupt and you have to leave the industry.
If you actually have some safety margin, then it's a lot easier to say to people, hey, it's not going great, rather than, hey, everything is now in a pit of disaster.
This is in reference to Tower of Guns.
I kind of want to know the rest of the story.
You got to the point, you did a great job of explaining about your family and about going through all the prototyping and being afraid to show things and all.
And then you mentioned that now you're working with someone else.
Was there, what caused that?
I mean, what, what, what was it that you realized?
Well, maybe I just can't do this alone.
I need someone else.
Or was it something else completely?
Well, OK, I have to be a little bit vague here because of contracts and legal reasons.
I had had, let's say, an opportunity that was like a year out while I was working on these prototypes, and I kind of knew it was there in the background, so it was almost like a safety net, this next project.
And I kind of kept on working on my prototypes, being like, well, maybe I still want to do my own thing, but this other opportunity was always there.
And it was kind of a fellow dev reaching out and being like, we liked working with you, let's keep working together.
That kind of situation, I was a little wary of because I had come, the studio I was working at before I went indie was 38 Studios, which had a very catastrophic bankruptcy.
It was in the press.
It still is in the press in New England.
If you're from New England, then you see it show up in the news every so often, because there was FBI investigations and stuff, and a $70 million loan from Rhode Island.
It was really crazy.
I was just an artist on that team.
I had nothing to do with any of that.
I was just like, whoa, why are there 30 news crews at the office today? It was pretty amazing. But it was also, I was like, kind of wary of being like, okay, let's go back and work with a large team again. I kind of was enjoying the idea of working in my pajamas from home, seeing my wife a lot more than I would when I was crunching at a game dev, at a AAA game dev.
And I was kind of worried about the idea of taking on teammates because in my mind, you couldn't do something that was crazy.
I wanted to do something really batshit crazy.
And I didn't feel like there would be.
I felt like, in my mind, the more teammates you acquired, the more you had responsibility to them to make sure they could feed their family.
I didn't realize that there could be other developers who were totally on board with making something crazy.
And so the partners that I'm working with now, I've worked with before and I know I work with them well and we're building something that's crazy. So, yeah.
Cool.
Hey, so one of the things that I do is I work with, I'm a program assistant at a two-year program that's really project-based and quick-paced for our students.
And there's really no safer place to fail than in your educational institution.
But I talk to so many students who are scared to share their ideas or scared to dive into their dream project because they're scared they're going to fail.
Do you have any tips for students or any of us who are hesitant to jump into a project because of the fear of failure?
It's endemic to our society.
We systematically educate people out of creativity by saying that the worst possible thing you can be is wrong.
So that may be too large for the scope of a question and answer session.
But I don't know.
I think you kind of have to actively fight against this instinct to be afraid of the failure.
It's the blank page, right?
Yeah.
Well, I feel like I'm hogging the mic.
So, the best thing that has come out of game culture in the last 10 years has been game jams.
Game jams, there's no obligation to make something good. Nobody's expecting anything good.
The deadline for them comes and goes within days or hours.
I feel like if you're in an educational environment, and if you're in an educational environment, you should really be pushing your students to enter every game jam there is out there because that's how you fail quickly.
And you can put stuff behind you as fast as possible.
And I feel like that, the game jam culture is amazing.
And it's making some really, really strong designers just because they're getting through that pile of paper of bad designs really quick.
I think also for us, there's a group of game developers around where we're based, and we talk a lot.
I'm sure a lot of people here have that.
So I guess with students, one of the things that could happen is to create that environment where.
They're happy to share with each other everything that they're doing.
And then if you see someone else who's not having a good time, you don't feel so bad yourself.
I think trying to get that idea into students early on, that it's about that community where it is acceptable to talk through some of the ideas that aren't working, it is really good, because that's something that professionally absolutely everyone needs that.
So one of the things I did when I stopped working on the Pocket Kingdom project was I went back to school and started doing a PhD.
And I taught an undergraduate studio class. One of the things I did in that class was every week the students had to do a whole new prototype.
And every week they also had to do a whole one-page design document.
as well, and it was all about just make a bunch of stuff, and it's okay if it's not good.
And part of the point of doing it on a one-week cycle is that you just, it's like you're filling up that stack of paper, you know?
And you're learning, you're calibrating your own sense of scope and focus.
But it was still a tension because students still want to get good grades in classes.
You know, like, if you tell them it's okay to, like, I want you to take a risk, I would encourage them to take a risk, but they still are worried about, there's still that structure of the class that, I mean, I didn't, it's still like, there's still that paradox there, but I think you can push in that direction.
I think also improv has a bunch of good...
If you look there, you'll find good stuff.
There's a lot of like, you fail an improv and you take a bow.
It's all about you celebrate your failures.
And it's a lot about just cultivating a sense of acceptance so that just all kinds of crazy stuff has a place to kind of come up and be there.
And then you can move on and do another scene.
However you feel about Jim Carrey, there's a great story about him as he was trying to learn how to do stand-up before he became famous at all.
And just some nights he'd be bombing so hard, and on those nights what he would do is just lie on the ground, roll off the stage, and then just pretend to be a cockroach and try and wedge himself as far as possible onto the stage.
And he would do that for like three minutes.
And he'd do it until he got a laugh, and then he would stop.
Even like a pity laugh.
cool. Yeah. Excellent. I think that's going to wrap it up for the failure workshop unless anybody had any like really burning closing comments. Yeah, I'm sorry. We have to wrap up because we're at time now. So.
There's the wrap up room too.
Yes, there is. Yeah. Yeah. Huge round of applause for these guys. Thank you gentlemen for having the courage to share your failures with everybody.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
