Hello, can you guys hear me?
Cool.
So hi.
I'm not sure if we're going to have time for a Q&A, because I have only 25 minutes and over 100 slides.
So with that in mind, hi, I'm Nicolae Berbece.
Most people know me as Xcelu.
I founded that company.
I worked on this game.
I also worked on these games, but these are less important because they're browser games.
And I also talk about stuff, apparently, but none of that is important.
I'm here today to talk about the T word that everybody skips.
And I'm sure you already know I'm talking about tutorials.
So in short, tutorials are self-paced instructional phases that provide step-by-step information in presenting a concept to the player.
In the context of press the trigger on a controller, if you hold it in a different pop-ups are not very efficient when it comes to like.
Yeah, you're laughing because you know what I'm doing, right?
You're laughing because we've all been there.
We all know that tutorials have this bad reputation.
And usually, they're badly designed.
They feel like the developer is holding our hand.
I mean, have you ever wondered why her name is so similar to tutorial?
Anyway, it's our fault for this. It's our fault that tutorials have this bad aura around them.
And it sucks because tutorials are super important.
They are the first impression you get on the game.
They are the first five minutes or the first few seconds.
So with that in mind, what to avoid?
First up...
Pop-ups.
Stop it with the pop-ups.
They're really annoying.
They feel like you realize at the end of your development cycle that you figured out your players don't know how to play your game, so you just slap some information on the screen really quickly.
And we know they're bad, right?
Because we make fun of them.
If you look at Far Cry 3 Blood Dragon, they make fun of pop-ups, right?
Like how annoying they are and how they break experience.
And then you look at Far Cry 4, and they do the exact same freaking thing.
So please stop it with the pop-ups.
Mostly because they break the gameplay and it's a horrible thing to do.
If you want to do something like this, at least embed the information within the game's universe.
So it's more interesting and it doesn't break the gameplay.
And you might think, oh I need a 3D game to do this.
No you don't, you can do it in 2D games.
A lot of 2D games did this and it's immersive, it's nice, it's blended in that game world.
Next up, controller schemes.
Stop it.
We've all seen these.
And usually, you see this.
Actually, I want to see how effective these are.
Memorize this.
Usually, you see this before you get to play the game, like in a loading screen.
And they don't last on the screen for very long.
So who can tell me what the stealth button was?
Yeah, I thought so.
What about the collect experience orbs button?
Yeah, you see?
The thing is, this is information overload.
And showing the player something like this is the equivalent of your friend explaining the entire board game before you start playing.
And we all know how that feels.
So don't do that.
Another thing, bad controller prompts.
It's 2016, I shouldn't say that the game should display the correct prompts on the screen based on the controller you're using, and yet that's not the case.
And it's really annoying, seriously, don't do this.
This is another example.
This is Sonic, and in here the character was telling me, press the X button to do this.
And aside from the fact that the prompt was wrong, the prompt was baked in the voice line.
So please, please don't do that.
This is from my game, this is how I think they should be done.
When you use your keyboard, the keyboard prompts should show up and the instant you touch a controller they should change in real time.
As well as when you touch the mouse, the cursor shows up and all the prompts disappear.
This is ideally how I think prompts should be handled and most developers don't do this because it takes a lot of time to create all the prompts for all the controllers out there.
So I got bored and I did that.
So all of these are completely free for anybody who wants to use them.
You can find them on that link.
And if you don't manage to take a photo of that, don't worry.
Hello, you're watching this on the Vault online.
You're here for this link.
We can move on.
Another thing to avoid, walls of text.
Seriously, I shouldn't tell you this.
No player would go like, oh, goody, my gameplay is interrupted by a wall of text.
Just what I wanted.
Don't do this.
Don't teach mechanics that you immediately lose.
Prototype did this.
Also, Bionic Commando, I think, did this.
It's a very good story tool.
It's called Emedia's Res, where you drop the player in the middle of the story to make it more engaging.
But it's not as good when it comes to mechanics.
So avoid this.
So with all these things in mind, like all these are bad things that you should avoid, what to do?
And you probably expect me to list a huge list of things to do like tools and stuff, but no, it's super simple.
It's like one sentence.
Teach gradually through experience.
Don't break gameplay, don't do any of that.
Teach gradually through experience.
While I'm working on my game Move or Die, it's a four-player party game, and I was looking at other four-player party games, and I stumbled upon this game.
Now, this was a really cool example of a good tutorial because in this game, you don't only move around the level, you dash around the level by pressing a direction and a button.
And the way they teach you that is they made the menus interactive.
So the way you add an AI bot or a new player, you do this by dashing around.
Even selecting a level, they make sure you understand how to move around the game in the menu before you start playing.
So this is a great example.
Here's another example that I first saw on Mark Brown's YouTube channel, Game Maker's Toolkit, which you should totally check out because it's awesome.
Let's say you have a game in which your character has to dismember the enemies instead of like shooting them right in the head.
How do you teach the player that? Well, if you're Dead Space, you first write, Cut off their limbs on a whiteboard.
followed by a pop-up that tells you how to cut off their limbs, followed by an audio log that basically tells you the same thing, followed by another audio log that tells you the exact same thing, and you finally end in a pop-up called Dismemberment.
Now this is horrible, but the thing is, a few years early, four years earlier, a little game came out called Half-Life 2 that did the exact same thing.
And the first thing they do is they put the image of a dismembered body in your mind by showing you this, and then you move on, and you're like, you stumble upon this, and you're like, okay.
And you try to move on.
And you notice that a table is blocking your way, so you jump on it, you see some saw blades, and you pick them up.
And the moment you pick them up, a zombie wanders in your view, and your first reaction is to get startled and to press the fire button, and that shoots out the saw blade, and it shows you that it's a very effective weapon against zombies.
Now that's teaching gradually through experience.
Half-Life 2 is filled with examples like these, like the barnacles, the enemies that are on the ceiling and they suck you up with their tongue and kill you.
The way you are introduced to these enemies is in a very safe environment.
You see a bird flying to their tongue and you can immediately see how they work without being put into danger.
Later on, you move on, you stumble upon some barrels, you knock them over, and they just so happen to slide in a barnacle's tongue.
And now you know there are some explosive barrels in the game.
So you put the two and two together, and you realize that maybe you can do something like this.
which is really cool because you as a player figure this out.
If Half-Life 2 would come out today, there would probably be like huge arrows, like hey, you can combine these two things and explosions.
And other things as well, like the exploding zombies, they're presented behind a wall.
When you were playing fetch with dog, you weren't actually playing fetch, they were teaching you how to destroy the helicopter.
or how to avoid these little annoying things.
And there are more traditional tutorials in the game, but they are baked within that universe.
They are characters addressing your character, or like things written on walls, or it's within that universe, it's immersive.
So don't treat your players like morons.
One of the best examples out there that I'm sure all of you know is Mario, of course.
And this is a game that came out in 85.
where you couldn't really afford to use text on the screen that much or pop-ups, because we all know how that went.
Anyway, the thing is, with Mario, this is a great example because they teach you gradually through experience.
And I'm not going to go into detail, just Google this.
There are so many videos on this.
And they kept doing that with future iteration.
Like, for example, this is how they teach you that you can double jump.
by just having a subtle trail of coins.
And in later titles, in Super Mario 3D World, where they introduce new mechanics almost every level and they gradually ramp up the difficulty, which is awesome.
So yes, teach gradually through experience.
Some other amazing examples is Mega Man X, where they teach you almost...
Almost all the games mechanics in the first level sequelitis had a great episode on that God of war where you take down a boss in the first level We're using one button and that makes you feel super powerful and portal which is my favorite game Which is basically a tutorial the whole thing, but it doesn't feel like one. That's why it's so good Now, there are some challenges, for example, real-time strategy games are a bit harder to teach the mechanics of, so what you would do in a case like this is handcraft like a single-player campaign, which is what most games do, most RTS games do.
For example, in my game, in Move or Die, it's a four-player party game where the rules change every 20 seconds.
and I had to make sure that all the players sitting on the same couch know the rules of the game without making it annoying.
And the way I did that is by showing this.
It's the rules of the game mode in one sentence, and also a little animation in case you don't like reading.
Now, the thing is, I had to make sure the players know how much time they have left to read this info and to understand it before it disappears.
Because if I allow any player to skip this, there might be players who are left out because they didn't get to read it.
Or if I don't allow players to skip it, those who already know the rules will get bored.
So the way I did this is I added the information at the bottom of the screen and I made it slowly move upwards so the player knows subconsciously.
how much time he has to read this before it's gone, because once it reaches the top, it's gonna disappear.
And that's basically allowing you to focus on the contents of the rules without having to worry that, oh God, it's gonna disappear, because we have all been on the subway next to somebody who's reading a newspaper, and you're trying to read it as well, and you read it really fast because you're afraid they're gonna turn the page.
It's that feeling, and it's horrible.
Alternatively, the bad way of doing this would be to have like a time left progress bar, which would be horrible because it would put your attention on that instead of the actual contents.
So yes, testing tutorials.
This is really weird because you have to basically go through friends because you have to make sure those who test your tutorial have never tried your game before.
And a very important thing, don't be a backseat gamer when somebody tests your game.
Don't try to explain what's happening, what's going on.
Let the game work on its own because you won't be there when people play the game in their own house.
And just a little side note, when somebody's giving you feedback on your tutorial or on your game overall, just take it in and figure out what to do with it later.
Don't try to justify why things are the way they are.
take it all in.
Attention span.
Now, if you were working on a game like 10 years ago, you could probably assume that the player will spend some time with it.
But nowadays, if your tutorial annoys the player, he'll just close the game and move to the other one because there are so many games nowadays, and it's so easy to get distracted.
So even the first few minutes of the game have to be very, very engaging.
For example, I come from a browser games background, from Flash games background, and this is one game that I worked on in which you control two characters at the same time.
the small character with WASD and the big character by clicking on the screen to move him.
And I tried so many ways to teach the players this and nothing worked, nobody understood it.
And then I kind of gave up and I did this, which I'm not really proud of, but hey, it works.
And yes, in Flash games, even if the loading screen is bothering the player, they'll just close the tab.
So another thing to keep in mind, game literacy.
This is the assumption you make as a developer.
of how much the player knows about games in general.
So for example, you can assume that the player doesn't know anything, and you have to teach them everything from looking around with the mouse or moving around with WASD, which is what Overwatch does.
Or you can be like Pledis Inside, where they assume you know everything and they don't tell you anything.
This is the first thing you see when you open the game.
and you have to figure out that you move with the joystick.
They don't tell you anything.
There are no prompts on the screen.
And in my point of view, this makes the game better.
For example, in here, they could easily tell you, press A to jump, but they don't do that.
They allow you to figure it out on your own, and it makes the game more moody.
It's better.
because it benefits the game.
There's also the option of no tutorials.
Now, it's not written in stone that all games need to have a tutorial.
For example, Starseed Pilgrim, it's a game where it doesn't tell you what to do on purpose.
It's about mystery.
It's about figuring out how the game works, and the game is better because of this.
Also, Pokemon Go.
Now, let's not discuss if it's finished or not, because it's not even 1.0 yet, but the thing is, for example, I didn't know that I can spin the ball or how the Pokemon tracker worked.
And these are things that I found out from other players in the real world that came up to me and explained these mechanics to me.
And that made the game better for me.
It encouraged the social aspect of the game.
And then I explained those things to other players.
So regardless if they designed it like that or not, it made the game better from my point of view.
So, in case you have like very weird mechanics, you can still make things easy to understand without simplifying your mechanics.
And you do this by using standards.
Now, we all know green is good, red is bad.
We all know that lava is bad.
You don't have to tell the player to avoid it.
It's very instinctive.
In case you're making an interface, red is usually used for health, blue is for mana.
Some developers use green for health and blue is still mana, unless you're making an anime fighter, in which case you just use all the colors there are.
Or Spider-Man.
But yeah, anyway, we take this for granted.
And the player already knows that red is bad.
And you can even take these standards and flip them on their head to make fun of the player if your game allows you to do that.
And it makes the experience better.
Other cool things.
Key standards.
Now, we all know that in a shooter, for example, you move with double ESD.
E is the use key, F is flashlight, control is crouch, and yes, unlike colors, please don't change this.
Please keep these standards, because otherwise you will end up with something like this, which you don't want to do because it's very weird.
So yeah, you can use all these to make your games more engaging, basically.
Directing attention.
Now, tutorials aren't only about teaching mechanics.
They're also about navigating a space, or basically directing where the player will go next.
And for that, we can use things like contrast.
All the games use this, and it's super, super effective because it's very subtle.
It's not like an arrow pointing where you have to go.
For example, in this screenshot, you already know where you're gonna go next strictly because of the lighting.
Other games do it more directly by using cables.
For example, in The Witness, you solve digital puzzles and they're connected by cables.
And once you solve one, the cable lights up, leading you to the next puzzle.
So if your game allows, Portal does the same thing, you should do this because it's a more direct way to tell the player where to go.
Other games are like super blunt about it and they just have a magical flying orb telling you where to go.
So yeah, other things.
Localization.
Now I'm not talking about translating your game, but we've all played PlayStation games.
We all know that X is confirm and circle is back.
But have you ever played a Japanese game and figured out that they're flipped around and you were very confused for a few minutes like I was?
So yes, things might be the same everywhere.
So keep in mind where your game will be played.
take all these things into consideration.
Controllers are another very interesting thing to make your game more intuitive.
For example, a trigger on a controller feels like pulling a trigger on a gun or like accelerating a vehicle.
The Wiimote is designed to be used as a sword, and many games take advantage of that.
And VR controllers, they open up so many possibilities.
For example, this is something I really like from Hover Junkers.
It's a game where you reload your revolver by pressing the trackpad.
You rotate your thumb on the trackpad, so you put the bullets in, and you just slap the chamber back in, which is a very intuitive thing to do.
You don't have to tell the player, press X to reload.
For example, when I got the Oculus Touch controllers, the first time I got them, I looked at the thumbsticks and I noticed that the surface is shiny and I was like.
That's horrible, who would do such a thing?
But then I realized that they're actually capacitive surfaces that are also used on the triggers.
And us developers can use those to figure out if the finger is touching that surface or not.
And based on that alone, we can allow the player to do very intuitive gestures without pressing any button, just by moving their hands.
So things like these are super exciting for the future and for designing more intuitive tutorials.
And VR in general is super interesting because, for example, in Fruit Ninja, they don't have to teach you how to swing a sword.
You already know how to do that.
It's intuitive.
In Space Pirate Trainer, they don't have to teach you how to avoid bullets.
it's very intrinsic that when you see a projectile coming towards you, you lean in the other direction, and that's a mechanic of the game.
And that's why it's so natural to interact with things in VR, because once you remap the hands in the virtual world, you just interact naturally with everything around you.
For more traditional kind of text or buttons, they are usually mapped on the controller, so they follow your controller.
And the interesting thing about VR is that in traditional games, you would usually tell the player the goal and how to get to the goal.
Now, in VR, you don't necessarily have to do that.
For example, in a in budget cuts, they don't tell you press the trigger to grab an object, they just tell you try picking stuff up. And you do that naturally, because it feels natural. So that's super, super interesting. As well as even better, closing things and interacting with things just by touching them without pressing any button, like closing a drawer with your forehead.
That's amazing. But yeah, teach.
gradually through experience. Now, uh, I want you to think about a really, really great tutorial, like a mind-blowing tutorial that you, you played, most likely one that I haven't mentioned here, and uh, and think about that and think what made that tutorial great. Now, you might have some trouble doing that, like I did, because the conclusion of this talk and the conclusion I reached is the best tutorial is the one nobody remembers.
Thank you.
So I'm not sure how we are on time, but do we have time for any questions?
Are we good on time?
We have five minutes for questions, so shoot away.
Cool, no questions.
It means I addressed everything.
Oh, there's a question.
Is there a microphone that we can get there?
It's coming.
Wait for it.
Sorry, Vault viewers, this is taking forever.
That was complicated.
Hello.
Hi.
Thank you very much for the talk.
It was very interesting.
I just have.
A little question in terms of environmental design, you know when people are building the whole thing The level or the open world for example, how would you like to how would you like address the issue of?
Navigating the player you mentioned nice examples with contrast and with the shiny wires and everything but maybe there are some more ways that you could use, you know, the environment to guide the player, how to move and so on.
Thank you. Yeah, so there are a lot of ways to direct the player within a level through level design by maybe shaping objects like arrows or having or using a lot of color like Mirror's Edge, for example, like the Runner's Vision.
And there are a lot of ways of doing that.
And I would say contrast is the most used one because it's so easy to use and it's so subtle.
But overall, I would say tutorials is mostly level design.
Like, that's the most important part because...
As I mentioned, Half-Life 2, most of the things you learn there is through level design.
So not like UI elements.
So that's why level design is super interesting.
But I can't really think of that many other ways of directing the player around, even though I'm sure there are tons of them.
Thank you very much.
Thank you.
Yeah, thanks. Great talk. My question is, what do you think of prologues for tutorials?
Of what?
Prologues, so that you start the game with something very interesting, like a big bang that really...
that tries to get into the people's mind that they really wow them.
Yeah, no, that's great.
And that's basically what God of War did when they let you take down a whole boss by using one button, which makes the player input very easy.
But what's on screen is very impressive.
And yes, you're encouraged to do that, as long as that doesn't imply giving mechanics that you then take away.
Because that feels like dangling a carrot in front of the player and be like, hey, look at all these awesome things that you will play with, but later.
And then you take them away.
So yeah, that's encouraged.
Thanks.
Hi.
Hello.
Thank you.
Spectacular presentation.
Thank you.
What do you think, or how would you introduce item shops or currency shops in free-to-play mobile games?
Because they are often part of the tutorial, and I think there's no good way.
Right, so I don't think it's.
I don't think it's necessarily a thing with mobile games or free-to-play games, but you're talking about a UI element, like introducing a mechanic through the UI.
And basically, the secret of that is what I kept saying, teach things gradually.
So for example, if you have a piece of UI that is not used right away, don't show that.
And teach, show a very bare-bones version of the UI where the player can navigate it really easily, and then gradually introduce more and more things.
You can direct the player through the UI as well by having elements of it flash or animate subtly.
Please just don't use huge arrows, like press on this, now press on this.
But it's like the secret of all tutorials is to teach things gradually.
And yes, I think that's all the time we had.
And thank you again.
