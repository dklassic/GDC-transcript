I think we'll get started.
I'm Catherine.
Welcome to my talk on game design tools.
First, I want you to know that I am completely sober.
I've just come from the Women in Games lunch, and there was a lot of drinking going on.
But I didn't have a single drink because I knew I was doing this talk.
So I'm pretty proud of myself about that.
So, thank you, well done me.
Yeah, so I won't get too excited because I'm not actually drunk.
So, I've been asked to remind you all to do your evaluations and also to turn your phones off.
I've turned mine off, I think, yeah.
So what are game design tools?
Well, they're tools for helping you solve design problems without having to build playable experiences in order to test out your ideas.
So they can be conceptual tools, diagramming systems, notation systems, or they could be software tools that provide computational support.
And one of the most notable things about game design tools is that the vast majority of us aren't actually using them.
And this is kind of unusual, because creatives in other fields do use design tools.
Like in music, it would be hard to imagine composing a film score without a notation system.
And the fact that we generally don't use design tools is something we've been talking about for quite a while.
Some of you might remember reading Doug Church's piece in Game Developer Magazine from way back in 1999, where he called our lack of design tools the primary inhibitor of design evolution in games.
So right now, you might be thinking, really?
But designers do use tools.
I'm a designer, and I use at least three different tools on my current project.
So yeah, obviously designers do use tools in our work.
We use level editors, all kinds of scripting and asset creation tools, and of course tools for prototyping.
And yeah, we do often use these tools not just to build stuff, but also to help us think through our ideas.
However, it's important to remember that these tools are first and foremost production tools, or authoring tools.
And their primary function is to help us produce playable games.
So their goal is to help you to create data and logic that's bug-free and actually runs.
Production tools try and offer an orderly, efficient process that helps you produce clean, optimized data that's nicely tidied away.
And it's usually quite easy to show how much progress you've made.
So programmers and producers are very comfortable with the idea of production and authoring tools.
But they might come along and look at authoring tools and say, how do these weird design tools help us build the game?
Well, building isn't really the point of design tools.
Their primary goal is to support thinking.
So your broken, ambiguous, and even outright contradictory ideas that you have in your unfinished design aren't necessarily treated like errors or mistakes.
The idea here is that they're tolerated and supported as a natural part of the design process.
So what do we currently use to support our design process?
Well, traditionally, we've developed ideas through writing design documents, improvising diagrams, working out problems in spreadsheets, plotting out gameplay progression structures using flow charts, and so on.
And of course, more recently, we've embraced an iterative process based on prototyping and playtesting.
I think you could call this a design by making kind of process.
And we've been able to sort of amp up the power of this iteration process with play metrics and data-driven design methods.
But interesting things can happen if you add design tools into the mix.
So the tools I'm going to talk about today cover a range of typical design tasks, such as system design and balancing, narrative design, gameplay progression design, level and mission design.
And I'm also going to talk about tools that tackle some of the new design challenges we're starting to encounter, like the kind of meta design tasks that you might have when designing for procedural content generation, for example.
So I'm going to start with tools that have been around for a few years and that you can access right away.
First up is Joris Dormans' tool, Machinations.
So Machinations is a tool for game system design.
You can use it to design and balance your overall game loop and its most important subsystems.
So this makes it particularly useful for games that feature emergent dynamics.
It means it's a natural fit for board games, strategy games, and management sims.
For example, at its core, Machinations is, as you can see, it's a notation system.
It takes some notation ideas from designers like Mark LeBlanc, Ralph Costa, Stefan Buehrer, and some other people.
And it combines this with PetriNets, which is a mathematical modeling language.
So in Machinations, you use the concept of resource flows to help you visualize your game economy.
Resources could be skill levels, hit points, money, types of consumables, or basically anything that you can abstract out and quantify.
So this diagram here shows the game system for Elite, which is, of course, the 80s space trading game.
The different shapes of nodes you can see in the diagram function as ways to generate, transform, or consume resources.
And the arrows connecting them control resource flow.
And as well as a notation system, Mackinations is also a software tool.
So if you run this diagram, you get an interactive simulation that shows you how resources are moving through the system and the game dynamics that result.
So here is, if I can get it playing, yeah.
So here is an example from my own work where I use machinations to help me balance a time management inspired puzzle game.
So I use machinations to refine and balance my prototype.
This is definitely a prototype.
The art is pretty shit here, so.
I assure you it's a prototype.
So I used it to balance my prototype's spawning mechanics for power-ups like speed boosts.
And by running the simulation, I was able to get a rough abstract visualization of how different spawn rates might affect game pacing.
I was able to feed these values right back into my prototype as part of an iterative process.
So doing this helped me make faster progress on my spawning mechanics, as compared with simple trial and error and guesswork.
So Machinations is for modeling and balancing your game systems.
But once you've learned the Machinations notation language, it's also great for just quickly sketching and trying out ideas.
And I've also found it useful for analyzing other people's games and learning from their designs.
As for limitations, well, Machinations isn't going to be useful for every kind of game.
It's not really suited to games with data-heavy, non-repeating scripted gameplay.
And even though Machinations does allow you to simulate the game system in real time and even interact with it, don't expect to get an accurate reading of something like game feel.
If you're looking to gain insight into the player interaction aspect of your design, you're best off just making a playable prototype.
And the same goes for a heavily topographical game bay.
It's hard to use resource flows to model gameplay that is based on exploration or tactical use of space.
So you can download the tool from Joris Dormans' site.
But if you really want to get the most out of it, I recommend the book that Joris co-wrote with Ernest Adams on game system design.
And this book essentially serves as an introduction to the tool Machinations.
Next up is Articy Draft, which is developed by a company called NeverGo.
And it's a tool for narrative design and mission design, particularly for RPGs and adventure games.
It gives you a flow diagram style interface for creating graph-based structures that you can use for things like branching dialogue and mission graphs or skill trees.
As well as a design tool, it can also be used as a fairly sophisticated authoring tool, so you can export assets from Articy to use in your game.
Obviously, there are a number of tools out there for writing interactive narrative, like Inkle Writer, for example, but the key difference here is that Articy also serves as a design tool.
So because of this, it goes a long way to help you visualize and organize your ideas in a way that supports you while you design and write.
So I guess some of you here might have used the writing tool, Scrivener.
It's a really popular tool with writers, I think because of this approach.
So if you've used Scrivener, I think you will understand how powerful this visualization organization can be.
So for example, for an adventure game I've been working on, I found Articy useful for quickly filing away any new story or puzzle ideas that just come to me.
These ideas, I don't know if you have the same issue as I do, but they just come at inconvenient times while I'm working on something else.
And normally, you just note these ideas down in some kind of design notebook.
But for me, a design notebook can, become kind of like a black hole for my ideas.
So I write an idea down, and if I'm not super vigilant about regularly going back and looking through my notes, chances are I might not ever find it again, or I might not find it when I actually need it.
But when I use Articy Draft to file an idea, I can use its referencing system to sort of tag my ideas with themes and characters that it might relate to, and then use the nested flow diagram structure to basically feel reasonably confident that the idea is likely to be there when and when I need it.
So it's not in this great big unstructured linear notebook.
One thing to be aware of, though, is that while Odyssey is pretty flexible and it has a lot of customization features, straight out of the box, it is rather heavily skewed towards RPGs and adventure games.
And finally, as I said earlier, it does also serve as an authoring tool.
Using it as a production tool has its own pros and cons, but that's off topic for my discussion here.
There's where to get it.
So next up is Skill Atoms.
And this is a conceptual tool by Dan Cook.
And it gets you to systematically break down your gameplay into basic units from the point of view of the player experience.
So these units are called Skill Atoms.
And they're basically a description of how the player gains a new skill in terms of the action they perform and how that action translates into simulation and feedback in the game.
Once you have your skill atoms, you can connect them together into what's called a skill chain, where you're mapping out dependencies between skills.
So for example, if you have a couple of skills like running and jumping, they might be prerequisites for the skill running jump.
So it's kind of similar to a skill tree-ish in a way, but you can use it as a design tool to work out the order in which you introduce new gameplay to the player.
So skill atoms can be a good framing device for planning out and doing some close analysis of your game's scaffolding or your onboarding phase.
It can help you make sure you haven't missed any details that could disrupt the experience for new players.
However, when I've tried to map out the player skill evolution for an entire game, For some games, your skill chain is going to be really big and hard to read and untangle, because I think even a simple game can involve a lot of skill atoms.
So those are tools you can use now that I've just covered.
So now I'm going to talk about some of the more advanced and experimental tools that show us some of the ways we might be using technology to support our design process in the future.
And these tools I'm going to talk about are called Mixed Initiative Design Tools.
So these are tools that use artificial intelligence and procedural generation to assist you with design tasks.
And this creates an almost collaborative design process between you and the tool.
It's one of the developments in academic game design research from the past few years that I think is worth paying attention to.
So first up, the Sentient Sketchbook.
This was created by Antonius Liapis, and it's an AI-assisted sketching tool for roughing out strategy game maps.
So what you do is place key features of a map, like player and enemy bases and resources and obstacles.
And while you're doing this, the tool is evaluating your map design for qualities like fairness between players and some aspects relevant to gameplay pacing.
It also visualizes paths and choke points.
While you're sketching, it's also creating and suggesting in real time some more detailed alternative designs based off of what you're doing.
And then you can bring any of these suggestions into your sketch and continue working with them as part of an iterative process.
So as you've probably gathered, the Sentient Sketchbook is something you might find useful at the grayboxing stage of level design.
It was originally built for designing strategy game maps, but Antonios has been trying to broaden it out to serve other genres as well.
And I believe he's using it on an FPS at the moment.
However, it is currently quite genre-specific.
And if there are key elements in your game that can't be added to the sketch, the problem is that the evaluations and the suggestions it makes aren't going to be super useful to you.
And you're currently limited to four or so preset map sizes.
So it doesn't give you the chance to edit in much detail.
But that said, the point of this tool is to be really rough and high level.
Here's a link where you can download it.
Bear in mind that development of this tool is ongoing.
So I hope he doesn't mind me saying this, but you should totally contact Antonius and hassle him to add features so that we can use this tool on Wargames.
So Ludoscope is an experimental tool for mission and level design.
It gives you the ability to procedurally generate and manipulate level designs using rules that you create.
So on the left, you can see a level design being populated with enemies and puzzle elements for a top-down action game.
On the top of the image, you can see the empty level.
And below it is the level after the generation rules have been applied.
Next to it, on the right, you can see an example of one of these rules being created.
And another interesting and truly ambitious goal of this tool is to help you transform abstract mission structures with tasks, events, and goals into concrete spatial level designs.
The image on the far right gives an idea of what that process can look like.
Sorry, image on the right.
There, that's enough time.
OK.
So Ludascope can be used to generate ideas for level layouts or for populating your existing level designs with details.
But you can also use it to come up with rules and ideas for procedural level generation without having to build a game or do any scripting or any programming.
Perhaps the most valuable thing about Ludascope is that it gets you to think about your level design process in a bunch of interesting new ways.
For example, I now think much more about my level design in terms of design rules and patterns, even when I'm not using tools.
I just need to warn you, though, that Ludoscope is not for the faint-hearted.
It requires you to think really hard in often very abstract ways.
And it can take a bit of experimentation to figure out which of your design problems can benefit from it.
So like Machinations, Ludoscope was also developed by Joris Dormans.
He's a very clever guy.
And you should contact Joris directly if you're interested in using this tool and being a beta tester.
Sorry.
Again, that's his email address.
So this next tool.
was built by researchers at the University of Washington's Center for Game Science.
Is anyone from there?
Anyone there?
Anyone here from there?
I don't want to.
Yeah.
That's easier then.
It's a level editor for their science puzzle game, Refraction, as well as being a mixed initiative design tool for Refraction's game levels.
It also features computer-aided progression design.
So if you remember, back to skill atoms and skill chains that I covered earlier, this progression design feature, which you can see on the top right there, is essentially the same kind of, well actually, it's all those images.
It's actually the same kind of thing, but it uses a matrix style interface and it adds computational support.
So this means you're no longer dealing with a giant, messy graph.
And I think this shows how powerful even simple computational support for design can be, taking you off paper and giving you a little bit extra, something that goes beyond Excel formulas, for example.
Unfortunately, you can't use this tool because it was built specifically for designing levels for the game Refraction.
But I think it's valuable simply as an idea.
And I think this idea is, what would happen if we started adding support for thinking and solving design problems into our level editing and world building tools?
Like, what would that be like?
Like, I think it might be good.
One thing to bear in mind with this is that Refraction is a casual puzzle game with a relatively small feature set and linear gameplay progression.
So the tools approach would have to be adapted for more complex progression design needs.
So here's one of my messages for today.
Let's make game design tools.
So I've shown you some design tools that do a bunch of different things.
But I think there's more scope for experimenting and trying to make some tools.
I think the first step is psychological.
We need to say in this industry, we need to say, hey, we're pretty good at making tools, right?
We're pretty good at making tools that help us build games.
But maybe it's time we started thinking about making tools that help us design them as well.
For a number of reasons, I think that's a bigger and arguably much more interesting challenge.
No disrespect to tool designers who make level editors.
So taking my own advice on this, here's a tool that I've been developing actually as part of some research I did at the Conservatoire National des Arts Métiers in Paris.
Thanks Stéphane for coming.
And Flinders University in Australia.
And it's been helping me on my own projects and some other designers' projects, usually my friends.
For this tool, I was inspired by the progression planning ideas in the refraction level editor tool that I just talked about.
And I decided to build a standalone tool that I can use to plan progression structures for my own games in a variety of genres.
So for this, I gave Progressimo a graph-based interface to cater for not just linear, but also open world and branching structures.
It also provides some number crunching to help you calculate and visualize changes to game state, to manage things like gameplay gates, also to get ballpark answers to questions like, when will the player run out of money?
Or does every path through this mission provide the player with enough ammo?
So far, I've used this tool on a top-down shooter, an adventure game, and a casual strategy game.
And other designers I know have been using it on their RPGs and an open-world game.
And they've been using it for designing missions or working out how missions fit together and work concurrently within the game.
I've also been using it to export data for use in a game and also to drive procedural content generation.
This tool was built to help with the kind of problems posed by progression-heavy games.
But it's not really suited to games where progression is primarily driven by emergent system dynamics.
So for those games, I would use machinations, which is the tool I talked about at the beginning of this talk.
So if anyone is interested in using progressive mode, please do give me a shout.
I'm running a fairly low key closed beta at the moment, and I'd love to get more feedback and input.
So that's my email address there.
So why bother taking an interest in the obscure, fringe, and desperately uncool world of game design tools?
Well, first off, when you're using a game design tool, you're adding structure to your process.
And this gives you a way to organize, visualize, and sort through your ideas in a way that can be quite beneficial.
Another benefit is being able to have what I like to think of as a safe space policy for your design moves.
And by this, I mean that some of these tools can let you define your own design constraints and then help you to work within those constraints.
So this can give you a sense of security that can free you up to take risks and attempt more ambitious, complex designs.
Design tools can also allow you to work on more parts of the design without necessarily waiting for the game to be built or a particular feature to be prototyped, lessening design's reliance on production.
And finally, using design tools can broaden your mind and challenge you.
I mean, they introduce you to new ways of thinking, and these new ways can impact the way you design, even when you're not using tools.
For example, I've noticed the way that learning new ways to formalize and abstract my ideas has really changed the way I go about structuring and noting down my ideas, even on paper and in my head.
There are, of course, some big limitations and pitfalls to using these tools.
Some of them take a while to learn, and they can require you to think quite hard about how to best to use them on your particular design problem.
It can be worth it, but sometimes you're spending a lot of time and effort before you're getting to a stage where you're really getting value out of them.
For example, with machinations or any notation system, you not only have to learn the notation syntax, you have to learn how to recognize what good game mechanics look like in an abstract system level.
And this requires a lot more literacy than playtesting a prototype and asking yourself whether you're having fun.
Design tools tend to formalize and abstract your ideas, so some aspects of interaction and game feel are lost.
And finally, if you remember what I said earlier about tools adding structure to your design process, well, some of you might be thinking, and you're right, any tool has its own agenda and biases.
It acts like a kind of filter on your ideas.
And by this I mean it emphasizes some qualities of your design and it de-emphasizes others.
But I think as long as you bear this in mind and you're aware of what the tool's agenda is, it's not that much of a problem.
And finally, it's totally possible to misinterpret your models and get fake positives and fake negatives about how fun or robust your game actually is.
especially if you're new to using the tool.
So here are my suggestions about how to approach game design tools.
In general, my advice would be to adopt a toolbox approach.
This is because I think the nature of game design is such that no one tool or approach is ever going to cover all our design needs for all game genres.
So think of game design tools as more about adding new approaches and techniques to your existing repertoire.
So you have a range of tools to hand to cater for different needs as they may arise.
In my experience, game design tools can help complement other more traditional methods.
So they can be useful for filling in gaps in your process where you feel you aren't getting enough information within your existing design workflow.
So briefly, here are some examples of workflows where design tools have been integrated.
I asked Dan Cook from SpryFox about how he uses tools in his process on games like AlphaBear and Steambirds.
And according to Dan, when he's fleshing out a new game concept, he uses machinations and skill atoms.
And they help him figure out resource flow, the game's learnable skills, and even how the monetization might work.
And he told me that by doing this, he's able to figure out whether the idea is even worth spending time on to prototype.
Once the game has reached the prototyping stage, Dan then uses skill atoms and machinations again, this time to analyze problems that the team have identified during playtesting.
One thing that's interesting to note is that Dan uses machinations purely as a notation system and doesn't find the interactive simulation aspect of the tool super useful for his purposes.
I also talked to the developers of the hybrid platformer RPG Wanderer about how they use Odyssey Draft as part of their design workflow.
The project uses Odyssey as both a design tool and an authoring tool.
And they use it for developing storyboards and quest ideas at the concept and narrative design stage, and then continue to use it to produce their design and narrative assets for the game.
Finally, here is the design workflow for an action puzzle game that I've been working on.
So my process on this project is that I prototype and play test some gameplay.
Then I use any gameplay I've found fun as a basis for abstracting it out into a set of level design patterns and gameplay concepts.
Next, I bring these patterns and concepts into Progressimo, and I create a progression structure for how they're introduced and used over the course of the game.
Then I bring both my design patterns and my progression structure into Ludascope.
And within Ludascope, I generate playable level designs, which I then playtest and come up with new ideas for design patterns.
And I keep iterating over this cycle.
So using a process like this has been interesting because it's allowed me to focus on the high-level, big picture of the game as well as the low-level details, but almost simultaneously, right?
Instead of the traditional stage-based process of having to lock down key aspects of the progression and gameplay before the levels are designed.
And I'm not doing this in code.
I'm doing this with design tools.
So I hope that's given you a bit of an introduction to what game design tools are.
And if you're still interested, I hope you do some of your own research to find out more.
I don't think we have any time for questions.
But I'll be in the wrap-up room, wherever the hell that is.
But thank you very much.
