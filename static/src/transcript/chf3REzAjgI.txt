So, good morning everyone.
My name is Piotr Tomczynski, and I would like to welcome you on the presentation about the Wiches 3 Cinematic Dialogue System.
I'm a Mission Technical Director at CD Projekt Red, and on my average day, I write code developing our in-house Red engines.
As you can see, in the past, I was working on the Witcher game series, and currently, I'm working on our new game, Cyberpunk 2077.
Okay, first, I'd like to show you our awesome dialogue team.
Programmers, animators, QA, and programmers, and designers.
Because everything I'm going to show you today is a result of our common work.
And for those of you who have not played The Witcher 3, let me briefly show you the game I will be talking about.
Okay, so what is The Witcher?
Witcher is an open world RPG with no nuanced story as its core element.
For CD Projekt Red, story is a king in everything.
Every game system is built around this principle.
Our main tool for communicating story to players is dialogue.
Because dialogue allow us to present choices to players.
However, it's much harder to present a meaningful choice using only gameplay.
That's the reason why cinematic dialogue was a keyword for us.
To make a meaningful choice, players must feel an emotional attachment.
For this to happen, we need to build a connection between the players and the game characters.
Building such a connection can be achieved in various ways, like camera work, facial expression, or general non-verbal communication, according to the rule, show, don't tell.
So, simple gesture and close-up can tell us more than many lines of a dialogue.
Okay, so if cinematic content is so important for us, animators can create every single dialogue, right?
Unfortunately, it wouldn't be possible.
We had to create over 35 hours of cinematic content.
So it would require an army of animators we simply didn't have.
Additionally, cutscenes are expensive to produce.
Every cutscene requires a dedicated mock-up session and many days of animator work.
As you can see on the picture, we had to create over 1,400 dialogues.
So it's insane number for a small team.
So what was the solution?
The solution we implemented was a dialogue system that allowed us to create cinematic content using only pre-made assets.
Like building something with Lego bricks.
I will show it on the simple example.
So, the one side you can see a cut scene.
Every cut scene starts as a mock-up session.
And simply speaking, one cut scene takes one mock-up session.
Dialogues, on the other hand, are made from generic pieces.
So, from the same set of building blocks, we can create many dialogues.
And this is the key.
This approach scales much better and is cost effective.
Of course, it's also worth to mention that when you have all these pre-made assets already done, everyone can create a dialogue.
You don't need to know the Maya, MotionBuilder, or Max.
You can open editor and create assets.
And even I, without any cinematic background, made almost all examples you will see in this presentation.
Okay, wrapping up, Classic Cutscenes.
Classic cutscene made by animator.
is one of our building blocks that we can use in the dialogue.
And usually, cutscene was necessary in unique scenarios that otherwise would be hard to build using only generic pieces.
So cutscene building blocks looks more like this, like a unique piece for a special situation.
At the beginning of the development, you had a dialogue system for The Witcher 2.
It was rather simple, like motionless characters with full body gesture or idle animation.
The camera movement was limited to simple cuts.
When you compare it to the cut scenes, dialogues were less dynamic and lower quality.
For The Witcher 3, you wanted dialogues to have the same feeling the cut scene had.
The same amount of quality, the same amount of polish.
So, first, let's see how our final result looks like.
34,33,33,33,33,33,33,33,33,33,33 other And now, a special treat for our special guests.
The Witcher Geralt and his enchanting partner, Shani.
Musicians, something lovely for the loving couple.
At last, music for our loving embrace.
Come, Shani, it's time you discovered my romantic side.
Oh, you're rather good at this.
Okay, so summarize our goals for the Witcher 3.
We wanted to create unique cinematic content using only generic building blocks on a massive scale.
And before I will explain all the details, I'd like to show you the big picture.
How the dialogue is placed within the game.
So, we start with a story.
One is defined and split into the quests.
And every quest, there's a part of it.
Quests are implemented in our visual scripted language that contains a lot of nodes for different needs.
And one of the nodes is a dialog node that starts a dialog.
And finally, the dialog editor provides all necessary tools for working with dialogs, like from the beginning to the end, the final push.
Okay, so now let's talk about details.
Because dialog system is quite complex, I'd like to show you the pipeline of single dialog so you can see how it works step by step.
So we have writers, quests, dialogue designers, and post-production.
So we start with the writers department.
Every dialogue starts as a text script.
The screenplay is written in our visual, in our dialogue editor.
And at this point, it's split into the sections and choices.
So we have the basic story structure as a graph.
It's important to keep this structure organized because dialogue in Witcher can be really complicated.
So graph approach scales really nice.
Asset prepared this way is passed to the quest team.
Quest designers define things like when the dialogue should be played, who are the actors, and in what appearances, and finally, where the dialogue should be played.
It's important to say that non-linear story that we have in the Witcher means non-linear dialogue.
How it's done?
The quest designers are responsible for adding flow conditions, the blue nodes you can see on the slide, that control the signal flow through the story graph.
So previous player decisions have impact on story progression.
At the same time, dialogue can control the game, the gameplay state.
by using the script node or by setting the game fact database.
So the communication between the game and the story goes both ways.
Okay, so once quest designers are done with the dialogue, dialogue designers came in.
They created visual side of the things.
And this is the major part.
So take a closer look what's happening here.
Dialogue designers are like movie directors.
The primary tool is a timeline.
It works similarly to video editing software.
So the length of the timeline is tied to the voiceovers, and timeline holds events.
Events represent actions on players, actors, items, or lights, and so on.
And you have a lot of events for different needs.
What's more, events can be joined, interpolated, weighted, or trimmed.
So it transfer to a simple system, but at the same time, it's quite flexible.
So to make it 100% clear, let's watch a simple example.
So in this case, we can see two characters.
We can add the simple event, like look at, or we can add the duration events.
For example, animation, do it.
Every event can be modified, so we can change the duration of the event, so the animation is slowed down.
Or we can clamp the beginning of the event, so the blend in factor animation will look different.
The same way we can control the body animation, we can control the facial animations.
or any object in any time can be moved in dialog editor.
So let's say you would like to move the Geralt a little bit.
As I mentioned, we can interpolate the events.
So let's do this for this case.
And you have a super simple animation.
Okay, cinematic content demands that the scene has to be grounded in the game world.
So, because of this, dialogue designers wanted to be aware of the dialogue surroundings.
So we added feature that you can edit dialogue not only inside the empty dialogue preview you can see on the slide, but also on the final game level.
So thanks to this, they crafted tailor-made content for a particular location.
Now of course, let's see how it works.
We have the same example on the timeline.
And just pressing one button, we can edit the same dialogue on the final game level.
So now you can see the final lighting, shadows, all the props around the characters.
It was a very useful feature.
So timeline was our playground that you can put events and create content in fast and efficient way.
An event based approach is easy to use and easy to extend.
So adding new feature wasn't an issue for programmers.
And as you will see in the next part of the presentation, almost every visual element in dialog was controlled by timeline.
Okay, so now you know what the timing is, so let's talk about how we can fill it with content.
So let's talk about dialog designer's workflow.
The first thing is the dialog set.
Dialog set is a template that contains the list of the characters with some basic information about them, like position, emotional state, pause, and so on.
So dialog set is like a snapshot of a dialog state that we can later reuse or return to if necessary.
The next step is the generator.
It sounds crazy, especially for the artist, but we do generate dialogues by code.
Generator purpose is to fill timeline with basic events.
So it creates the first pass of the dialogue loop.
Designers found out that it's much faster to fix or modify existing events than to insert every event, every time, every character.
Generator works so well that some of the less important dialogues could be barely touched by the human hand.
So, how it works.
Generator requires three different type of inputs.
Information about the actors, so more or less dialogue set.
The set of rules, like cinematography, like what is the 180 rule, or what is the establishment shot.
And finally, the extracted data from voiceovers.
So I don't want to bore you with details, but what's important is that we use MFCC algorithm to generate markers or accents from the voiceovers, so later you can match the events and animation with the sound.
So we put all this data into the generator and it generates events, like cameras, facial animation, body animations, and lookouts.
So of course, let's see how it works.
Okay, and you can generate it one more time in row.
Those two seeds are like special prepared.
Madam Marina, can we talk?
Geralt of Rivia, Dandelions told us so much about you.
Is he with you?
No, but I hope to bring him back soon.
Here to talk about doodoo.
Hmm, let's speak in my quarters at the back of the theater.
We'll be undisturbed there.
Okay, I have one more example with a little bit different settings.
This video is really long, so I would like to show you on the first iteration, and later you can watch it in the bonus slide section.
I'll go in alone, you know?
You'll stay outside.
I can't let you go alone.
Anything happens to you, Daryl will rip my head off.
Someone must secure our retreat.
There's bound to be a struggle. Things could get intense.
We'll need to flee fast. Disappear in the crowd.
Okay, so generator saved a lot of designers time.
Of course, the quality of generated scene is not as high as a custom-made cut scene, but it wasn't generator goal.
Using this tool, you can generate very fast different dialog variations.
So if you don't like current dialog instance, there's no problem, just press one button and you have new iteration.
So later you can fix things you don't like as long as you have time for, or as long as is necessary.
Next, dialogue is processed by hand.
First, dialogue designers improve the camera work.
So the dialogue set stores some basic information about the cameras.
So the same shots can be reused, which ensures cohesion.
It's also possible to create custom shots for special cases.
So with even interpolation method, designers can create interesting shots that balance common over-the-shoulder dialogue cameras.
Next is time for character ideas.
Ideas are especially important for us, because they are like foundation for future character performance.
So we had almost 35 different ideal animations per character type.
So it means 35 per woman, 35 per man, dwarf, and so on.
Additionally, we have different ideas for different poses, like sitting, standing, kneeing.
So each idea is chosen from three categories.
Act of social status, emotional state, and pose.
So it maps nicely into a tree structure.
For example, high aggressive standing, or high aggressive sitting.
Okay, next up are lookouts.
Lookits are one of our most powerful animation tool for dialog designers.
So it's important to explain our solution.
In Witcher 2, we use procedural lookits.
It work by rotating the head or torso by a certain angle, in code.
So it's common solution, but it doesn't work well with more complicated items, like sitting or laying.
So in Witcher 3, animators wanted to have full control over poses.
So we decided to implement animation-based look-ads.
The less popular solution was quite interesting.
For the input for the algorithm, is an animation with look-at poses.
And for instance, we have one pose per every second.
Animator can create as many poses as needed.
So it doesn't matter if the pose is simple like standing, or it's more complicated like sitting.
So in this case, character touches the ground.
It's not an issue because every single pose is created by animator.
So the key is fact that we modify the whole pose, not only the few bones like head or torso.
So thanks to this, we don't need to write like the Uber look at in code that supports every special case, like standing, sitting, kneeing, but we can...
write a very simple code, and for every special case, we can have a special look at animation.
So this solution is full data driven, and it's very artist friendly.
So, how it works.
As I mentioned, the input for the algorithm is an animation look at poses.
So, for every pose, we calculate where the look at target is.
So here it is.
Later, we collect all these points, and create one tree mesh around the character.
And in run time, when you have the target from the dialog, so this yellow box, this yellow box position is projected onto this three mesh, giving us like one triangle.
From this one triangle, we have three vertices.
It means three look at poses.
Blending these three poses with proper proportion using Barycentric coordinates, gives us proper deformation.
And we have two levels for the look at four characters.
Like full body or head only.
So it means that you have to create two dedicated look at animation per every single eye there.
Some of them were really simple, some of them were almost 360.
It's also possible to create look at four eyes, but it's done through the facial animation rig.
So now let's see the final result.
So, summarize the animation-based look at.
It's very simple from code point of view, fully data-driven solution.
Like animators have full control over poses, and in practice, it's not time-consuming, because they have to create only poses, not like the full animation.
So using a software like Maya or MotionReader, it's quite easy and fast to do.
And because it's based on the animation resources, the programmers can analyze those assets offline, and in runtime, you can create many interesting variations, like or extensions, like procedural transitions, secondary motion, or overshoots.
Okay, so let's move from Lucas to animations.
We had over 2400 dedicated dialogue animations.
Like, so much content, you might think.
But we have to divide this number by number of character types, emotional state, poses, and so on.
So it's end up that there's only a bunch of gestures for every single item.
Moreover, we have to count monsters as well.
Some of them have sophisticated dialogues with a lot of content.
So because of these limits, we have to rely on reusing animations wherever possible.
It's common practice and even the greatest ones like Disney did it.
So in Witcher dialogue system, every animation can be played as a normal additive or override.
You can weigh down or mask out center part of the skeleton.
The whole animation clip can be controlled by the user-defined curves.
So all these simple operations gives a lot of freedom to designers.
So I'm going to illustrate this on a simple example.
So let's assume you would like to use gesture with standing pose for sitting case.
So on the first part of the timeline, you can see the standing idle with standing gesture.
On the second part of the timeline, the sitting idle.
So we just copy paste the gesture.
Of course it doesn't work, yeah?
But we can convert this animation into the additive in runtime.
So now it's much better, but still you can see some artifacts on the girl's legs.
So using the masking with weights, we can select the set of part of the skeleton.
So let's say the upper body part.
Okay, and now it's much better.
See, the quality is not as high as a dedicated dialog animation, but as you saw, we did it in seconds.
And we reused a lot of animations this way.
Next interesting feature in dialog animation system is Control Rig.
We found an inspiration for this feature in SourceMaker, which is like amazing software for me.
Being able to create poses within the editor for special cases gives a lot of power to designers.
I mean, to designers, not animators.
Because thanks to the Control Rig, everyone can create custom content within the dialog editor.
So we use them mostly for free cases.
To create a custom pose.
In practice, we don't use it that much because it's time consuming.
So mostly it was used for final details like turning the head, adjusting the fingers on hands.
It's a programmer's act, so don't look at this too much.
Okay, next is correction for gestures.
It's quite interesting, so let's analyze it.
For this case, we have two characters.
And you would like to add gesture like me and you for the girl.
So in this scenario, like everything works perfectly.
But let's move the Yennefer attack a little bit.
So now this gesture doesn't fit anymore.
So we have two options, we can rotate the Geralt, but let's assume we cannot do this in this case, or we can apply the correction.
So we insert the post key on the timeline, and using control link we can rotate the hand or head.
So when we link this post correction with the animation, the proper timing will be applied for the correction.
Yeah, so now it's much better.
Okay, and like on simple gestures, you can apply corrections on IDs as well.
And mostly we use them for fixing mesh penetrating issue, like on this example.
So it's end up that we create a small database for controlling presets, so we can fix issues like this in seconds.
And facial control work similarly.
So you could create the custom poses, you can apply the corrections for gestures or for others.
So to interpret myself, I would like to show you the control panel.
So this time, instead of bones, we have plenty of joysticks for different facial deformations.
Okay, so Control Rigs with animation reusing pipeline gives a lot of freedom to designers.
They can create custom content within the dialog editor like on demand.
This is very important because with tight schedules, you either be able to create something or mix something in seconds, or you have to leave unpolished dialog and move to the next one.
Okay, placing all items and props is the last stage of dialog designers' work.
So as I showed you, every scene element can be moved anytime.
You can use even interpolation methods or Bezier curves to apply simple animations.
When you have a lot of props, we can attach to each other, or when you have the animations, those can be synchronized.
So all these little things help us to create details that are rooted scene within the game world.
And that was the dialog designer's workflow.
So now you know how the visual side of the dialog is done.
So I'm going to summarize this part and show you the progress shots of one of the dialog from the game.
So you can see how it works on the examples.
So first, we have the empty timeline with recorded voiceovers.
We use generator to create the first part of dialog look.
You there, Mr. Rovan, what's the word?
Impatient old bastard.
What?
Nothing. Be there soon.
Okay, next we move from the first stage to the next one.
So designers improve the cameras, ideas and animations.
You there, Mr. Rovan, what's the word?
Impatient old bastard.
What?
Nothing. Be there soon.
Okay, and the final stage, so the final polish, facial animation, the corrections, and all the details.
You there! Mr. Roven wants a word!
Impatient old bastard.
What?
Nothing.
Be there soon.
Okay, simple scene like this took a few minutes to be done, even for guys like me.
Okay, so at the beginning I said that we had to create 1,400 dialogues.
So we've got the building blocks.
we can generate a dialogue, or we can mix existing generic pieces.
But what of the special cases?
Special case may look unique, handmade and similar to casting, but it's our second goal that dialogue should have the same feeling the casting has.
So now let's see how we can create custom cases within the dialogue editor for the Witcher.
This time I would like to analyze the scene from the beginning of the game, from the prologue, passing the crossbow.
So first, let's see the dialogue.
Let's go give it a warm welcome.
Wait, take this.
A crossbow.
Want it in a card game while you run around.
Might come in handy.
Okay, so we don't have special animation for passing crossbow.
But we have one with receiving a key.
So this will be our base.
Next we spawn the crossbow probe and attach it to the hand.
Like making sure that the crossbow fits to the hand.
And the camera shot is set carefully not to show the mismatched parts.
And later we can use a control rig for adding final details like adjusting the fingers and hand.
And that's done.
So let's see how it looks in the final game.
Let's go give it a warm welcome.
Wait, wait, yes.
A crossbow.
Wanted in a card game while you run around.
Might come in handy.
Okay, so being able to create unique dialogues is equally important to make them on a massive scale.
and we do not put quantity over quality.
So every dialogue should have something special that makes player feel emotionally attached to the story.
So now let's see a little bit more complicated example of the custom cases.
Oh no you don't, hear me, don't you dare.
Please don't do this to me.
Shani?
Geralt?
What are you doing here?
Trying to save his life. Help me.
Shani, calm down. He's dead.
I'm sure something can be done.
And if you think it's a cutscene, it's not. It's still our dialogue system.
Shani?
Geralt?
here trying to save his life help me Johnny calm down he's dead I'm sure something can be done let it go damn it all for nothing you did all you could Thanks Geralt Okay, so let's leave dialog designers and move to the next pipeline step, post-production.
So, when you talk about cinematic content, lighting is a crucial element to take into account.
Sometimes in games we have to add lights because it's hard to see what's going on without extra lighting.
But for The Witcher, when story is the king, lighting helps us to create a proper mood, like support storytelling.
So you can see how large impact custom lights have.
From this stage to this one.
But it's not easy to light dialogues in open world game with day and night cycle.
Because lighting always needs to look good.
It doesn't matter if it's like raining during the night or it's sunny afternoon.
So let's see how we did it in WeChat.
First, to make it 100% clear, I would like to analyze a super simple example.
So let's say we would like to add the yellow light for this steel.
So when you just put this yellow light on the level, it seems okay.
But when you change part of the day, this light doesn't fit anymore.
It's like too yellow and too bright.
So we'd like to have something like this.
that light has different color and value during the different part of the day, but have the same feeling, the same impact.
Okay, so how it's done.
Final game light value depends on global light value which is set by lighting artist in the weather editor multiplied by the dialogue light which is set in the event on the timeline by the dialogue designers.
And every light property is not a single value but is a curve.
So we can have different values of different part of the day.
And of course, let's see how it works on the funnel again.
Okay, so lighting is super important part of the cinematic content.
And even when you have to create like open world game with day and night cycle, this feature cannot be missed.
Our solution works great for us.
Lighting artist creates the global light value and later everyone can create custom lights for dialogue without breaking the final game look.
Second part of the post-production are VFX and sound effects.
It works always the same as I showed you before.
So we use timeline to set up specific events.
You can move or touch effects to different things in time.
Unfortunately, we don't have enough time to describe everything, but I'm sure you get the idea.
Okay, and that was the...
pipeline of a single dialogue in Witcher 3.
So we have the writers, quest, dialogue designers with their workflow, like dialogue set, generator, cameras, idols, look-outs, animations, special cases, and scenography.
And finally, post-production with lighting and VFX.
So I showed you all these videos and features, but as you can imagine, not everything was so easy to do.
We had a few problems, and some of them are worth to share.
So the Witcher is localized into 15 languages, and eight of them have different voiceovers per language version.
So I showed you that the length of the timeline is tied to the voiceovers.
We didn't use dubbing, so every voiceover have different duration per language version.
So it means that the whole dialogue can have different duration per language version.
So you can imagine that with cinematic type of content, when everything is placed carefully on the timeline, and all the gestures are synchronized, this is a real issue.
So you cannot just change the duration of the timeline, because everything will be out of sync.
So the solution working for us was something we called timeline scaling.
So it means that every event is placed relative to voiceover.
So if voiceover is longer, event will be in different absolute time, but in the same proportion to voiceover.
So with some features like event matching or joining, it works really well.
So in this example, both events start at the 30% of the voiceover, but voiceovers have different durations, so the event have different absolute time and length.
So of course let's analyze it from the example from the game.
So we have the English version, which takes 12 seconds, and French version which takes 14 seconds.
So this two second gap can completely ruin the dialogue.
But thanks to the timeline scaling, everything should work okay.
So let's check it.
First the English version.
Who the hell do you think you are?
A witcher.
A witcher?
Hear that boys?
Either Velen's got a bumper crop of witches, or this is the bastard who cut down our boys at the crossroads.
And now French.
The same dialogue with the same content in French.
Hey, pour qui tu te prends?
Pour un sorceleur.
Un sorceleur?
Vous entendez les gars?
Soit Velen grouille de sorceleur, So I say, the fist of put the massacred in the water.
I'll have to watch it.
OK, now side by side view.
So you can see that both instances are slowly out of sync.
But for every instance, everything works perfectly.
Okay, next interesting challenge was a non-deterministic Witcher world.
So we put a lot of effort to be sure that dialogue itself is completely deterministic during playing or editing.
So it means that you can skip any part of the dialogue any time and on the next frame everything will be placed properly.
But at the same time, our leading work team put a lot of work to make Witcher World full of life, vibrant.
So by design, Witcher World is not deterministic.
And we had a few issues with this.
For instance, NPC from community have their own life.
Sometimes it means that one of them really wants to be part of the dialogue action.
So the solution was to put a denied area around the dialogue that contains all the actors and cameras but blocks the NPCs.
Another example can be player state, like riding a horse.
So sometimes at the beginning of the dialogue, players assume to be on the foot.
So we cannot force the player to dismount every time before dialogue starts.
So instead, we'll play a shortcut scene before the dialogue that shows the player dismounting the horse.
That cutscene blends to the dialogue, creating a smooth transition from the gameplay.
Okay.
And now, as a final part.
I'm going to show you the dialogue with some annotations.
So you can see all the features, but how it works in the final dialogue from the game.
I hope this will be a good summary.
Give it a rest.
No point talking to that lot.
All you get is angry gurgles.
And they puff up, you notice?
While them fish, what is it they're called?
Is there anyone here who speaks common?
Ah, there's this mercenary with him. Looks Edernian to me.
He's the one who recruited me to show him through the sewers.
Oh, and the mage what leads them knows of it.
Heard him talking. No doubt either will talk to you.
Oh, how's you? Constance, or should I?
Oh, go on, flop in me tum. Got a long voyage ahead.
with that's what I want greetings Geralt remember me I remember we met in white orchard your Gaunter Odin known also as master mirror I helped you find your Yennefer we meet again and it seems you need my help again That is, if this slot doesn't kill you first.
I haven't tried it yet.
Doesn't look promising.
Not unlike your situation.
I could try to extract...
Because you do wish to disembark, do you not?
Yeah, sure. But what on earth could you...
Oh, more than you'd ever expect.
I shall help you, Geralt.
But before I do, I must know you'd return the favor.
Right. Can't possibly get something for nothing.
Indeed. When all's said and done, I am a merchant.
Do you want my help?
Yes.
It's a deal.
Once it's all over, we shall meet at midnight at the crossroads, meet the willows near the village of Yantra.
Ah, and I must give you something to remember me by.
What's that?
A mark, to show we're... associates.
Who are you gabbing with?
With no one.
Never liked bolt. Not one bit.
They heave like devils. Make me stomach churn.
It'd be prime to sleep through the whole thing.
Okay, so what is VORUG doing?
I believe that our dialogue system is a success.
We made 35 hours of cinematic content without army of animators.
Reading logs with custom cases allow us to create memorable dialogues with good quality that help us set a story as a main game feature.
and solid and flexible dialogue editor boosts our artist.
In one place, everyone can create dialogue from the beginning to the end.
Not deterministic, Witcher world was a challenge, but thanks to the features like dynamic lighting, every player can see his own version of dialogues and story.
And of course, there's no time to do everything.
We had to cut a lot of features.
But all this unfinished ideas and knowledge that we have now, we are using for our new game, Cyberpunk 2077.
So if you'd like to be part of this, we are hiring, of course.
OK, so whoops.
There's a bonus slide section that will be available on GDC Vault.
So I did a bunch of videos and slides with extra details.
So you can always read it later.
And if you like The Witcher game, we have two more presentations on this year's GDC.
So you can check it out as well.
And that's all.
So if you have any questions, please shoot.
I'm super nervous, so please ask only simple questions.
How many of the tools that you showed were third party versus developed internally and how much of your engineering staff was developing the internal tools?
Okay, so all the tools I showed you are made internally in our Red Engine. So we use only external tools like Maya Motion Builder for animations and the rest everything is built into the system. Even like the screen play, like the even like the tool for VFX and everything is one place in our editor.
And about the engineers, so I showed you our team on the beginning and we had three programmers, like one senior and two specialists.
And we had to create everything, like features, animation parts, the connection through the quest, and even all the tools.
So there are like three people and the rest are artists.
So the dialogue graph and the timelines, all of those are internally developed?
Yes, yes.
Everything is on one data at the top.
Yeah.
Thank you.
Hi.
Great talk.
So a big part of the narrative-driven games is that some people want to skip dialogues.
How did you deal with issues of maybe like animations not finishing when people skip?
Okay, so yeah, it always hurts when I see people skipping the dialogues.
I understand that some of them are really long and maybe a little bit too long.
Yeah, so from the technical point of view, the skipping was a real issue.
Because as I said that...
Dialogue has to be completely deterministic, because when you skip any part of the dialogue, maybe in this part, character, I don't know, draw an item or do something, and later you need to have it.
But the same issue we have with the editor.
So even during the editing, when you press, you can press any section, any time, and you should have the proper frame.
So it's almost the same problem.
So it took a lot of time to write everything to have it.
So even from the code point of view, every subsystem has to be controlled by the timeline.
So in the animations, for example, so you cannot have like the cool down or like the...
dumping inside the animation system, because then when you change the part of the dialogue like in one frame, you will see this dumping no going down.
So yeah, it was a real challenge.
And I think this is one of the hardest tasks for programmers to do.
Thank you.
I was just curious how these tools seem insanely complex and extremely useful for you guys. How long into development did it take you to get everything working or was it a trickle process throughout the entire project?
So as I mentioned at the beginning we had a dialogue system for the witcher 2. So some of the tools are already there like the graph for example and the screen play.
So the rest we have to completely rewrite because we have the different requirements.
Even the deterministic stuff and everything.
So, yeah, it took.
So, okay, so because of this, artists could create something from the beginning based on the Witcher 2 dialog editor and then we try to improve it.
So, for example, this animation bit look-at.
I think it took like one year to have it, like finally.
Because we had different tasks and everything.
But we still have the lookouts from The Witcher 2, like this for head and torso.
So you can use it and later you can even switch to the new ones.
Thank you very much.
Hi, I'm Denis from Various Ukraine. I have a question about the sound design.
You didn't tell a lot about how the sound and the dialogue was set up, I mean the 3D parameters, volumes and so on.
So did you do it before in some specific third party environment?
Or you let your sound designers to design the sound parameters just in the editor when they designed the dialogue?
Okay, so honestly I'm not sure, because this part is like the sound design is a little bit like a mystery for me.
I think they create, there should be somewhere here, our sound designer, okay.
But I think they create sound on their own side.
So you can put events, like sound events, and you know, do some simple stuff on the timeline with sound, but the assets are made on their side.
So does it mean that you don't stick too much to the 3D stuff and so on?
I mean, if you move the camera, the sound is not changing.
Okay, so you had a few options to specify this.
You can attach the sound listener, let's say, to the camera or to the characters.
But honestly, I'm not sure how it's done under the hood.
Okay, thank you very much for a brilliant talk.
Thank you very much.
you guys are giving us a run for our money right now. How dependent are you on VO? Do you have TTS or something while you're waiting for that to come in?
Like voiceover, like the acting?
Uh-huh.
Like do you not work on it until you get it, or do you have TTS, like text to speech?
Yeah.
Okay, so I hope there will be this short part about this in bonus slide section, but basically you have two different ways you can specify the voiceovers.
You can record voiceovers yourself as a designer.
Oh, really?
So you can use the microphone and you have the voiceover.
Unfortunately, they don't use it that much because they don't want to hear their voices.
So the second option, we can use text-to-speech.
So we can generate, based on the text, we can generate the something, which is a base.
It was used mostly for the thing that you have the timing for the dialogue.
And later, when you have the final voiceovers from the actors, you can put it.
But sometimes it means that you need to have one extra step for polishing the dialogue when you have the final voiceovers.
So sometimes it was an issue, especially that for the monsters, for example, there are a lot of post-processes on the voices, so sometimes you get the echo or something, so the duration of the dialogue is growing.
So we need to make sure that everything is placed properly later.
Awesome, well, thank you again.
Thank you for the awesome lecture.
My question is about actually lip-sync, not in terms of the phrase length, but in terms of the articulation.
How was it made?
So for the lip-sync we used AnnoSoft.
I said like the tech behind it.
Of course we had different lip-sync per language version.
And you had the small features that before the lip-sync starts, the character should take a breath or something, like the small details.
Sometimes it's visible, sometimes it's not.
It depends on the dialogue.
But.
The lip sync is built into the facial animation system.
So when you have the final animation for the facial, lip sync can like overwrite some of the parts and blend nicely into this.
And so you still can have like the smile and talking or something like this.
What about the voiceover? Does it analyze the voice and make the sound?
Yeah, so the Arnold software works like this. You need to put as input text, voiceover like the wave, and it generates the curves.
And every curve is like the facial pose. So later we blend it into the, in our editor we blend it, or in our game we blend it dynamically.
With some extra features because...
You can have also corrections for the facial animation, so we have a lot of no inputs, and then we mix it in one place and generate the final deformation based on the bones for the facial animation.
Thank you.
I had a question about the pre-built gesture animations you guys used.
Did you create them before the dialogue script was written or afterwards?
Most cases afterwards.
Because as I said, the designers are like directors.
So you have the script.
You can also, of course, you have to cooperate with the quest designers and the writers.
But you need to figure out how to create this dialogue in a good way.
So sometimes it means that...
You can request a special dialogue animation, because it will be very hard to create without it.
But in most cases, they try to reuse as much as possible.
They do a lot of magic with this.
Sometimes, from only a few gestures and with smart camera shots, they create a really good performance.
Thank you.
Fantastic talk. Thank you very much for it. It's really inspiring.
My question is along the same lines, but I was wondering how did you manage to organize having so many pieces and not overlapping work between animators and making sure that you have everything that you need?
What was the general pipeline that you used?
So, pipeline was very similar that I showed you.
So, it was like the script, later the dialogue.
So using the generator, you can always create very fast, like the first dialogue iteration.
So we can, the quest designers put it into the game, so you can play, you know, and check how it works, and how the game looks like with this.
And later, the dialogue designers can create, the final visual parts or they can request assets like okay we need to have a special effect so please do it or we need to have special sounds or something.
So later we have the producer for this and they collect all the small tasks and request them for different parts.
So basically it's like an iterative process you work with what you have and if you need something.
Yeah, we have a lot of iterations.
Even with the dialogues, it's not like the dialogues are done and it's completely done, because even with the localization, you need to go back for every language and check if for every language everything is okay.
So it's always time consuming.
So sometimes you need to tweak something because of the different language version, because we would like to have the same quality for each language version, of course.
So it's end up that even you could have...
different timeline version per different language version if you want.
So by default it's like this, you can scale it, but if you really want to change it, there is option that you can say, okay, for example, for French, I would like to move stuff a little bit or add extra details.
Because we don't use dubbing.
So this was the problematic case from us, yeah.
But in the same, At the same time, there are a few benefits from this, because we can have the real performance from the actors.
So in some languages, you can have the custom jokes, because you know that the joke can be longer, because it's in Polish, on different language.
So there are some benefits.
Thank you.
I think it's okay, yeah?
We are done?
Any time for any more questions?
Okay, so you can also, we can go here and ask it, okay?
It's not a problem?
Thank you very much.
