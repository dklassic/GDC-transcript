Hey everyone, thanks for coming to our talk today.
My name's Teddy Lee and I'm the game designer for Cellar Door Games.
And I'm Kenny Lee, the programmer.
If you guys don't know, we're brothers.
So we're here today to give a post-mortem on Rogue Legacy with an emphasis on budget design. For those who don't know, Rogue Legacy is a casual man's roguelike. Even though many people still find it very difficult, it's far more accessible because we added permanency to the game. So in this game, every time you die, all the money you found, you get to spend to improve your family. And I say family because with each death, you never play the same hero twice. Instead, your children succeed you.
To start, we consider ourselves to be a budget-oriented team.
That means we focus more on gameplay rather than trying to make expensive, highly detailed worlds.
That also means we're always on the lookout for solutions that are cheap, fast, and reusable.
So we often implement solutions that aren't as good if the cost savings are justified.
That also means we'll never make the perfect game, but we're OK with that.
So we've been doing this for a long time now.
A lot of people think Rogue Legacy was our first foray into game development, but we've actually made eight games before this.
On average, each of these games cost us about $1,000 to make, with development time ranging from two days to three and a half months.
And it's through this experience that we are really able to solidify how we go about making games.
So you might recognize some of the games that are available on Flash and mobile.
So this is our development timeline for Rogue Legacy.
As you can see, it starts out with me working on the project solo, and as time went by, more and more people joined the project.
For Rogue Legacy, it took us a year and a half to make the game, and I was the only person who worked on it full-time from start to finish.
Teddy actually came on full-time five months before release, and everyone else was contracted.
So this is Rogue Legacy by the numbers.
As I mentioned in the previous slide, it took us a year and a half to develop the game.
And in total, our out-of-pocket costs for the project was less than $15,000.
So that's still a lot of money compared to the $1,000 for our previous projects, but if you consider the scope of the game, I think we did a pretty good job of keeping the costs down.
When the game went up for sale, we were able to cover all of our development costs in less than an hour.
And within the first week, we were able to sell over 100,000 copies of the game, which is well beyond anything we had ever anticipated.
To show how seriously we take budget, we need to talk about Rogue Legacy's beginnings.
Rogue Legacy was actually never meant to be a roguelike.
Instead, it was a matchup of three games you might be familiar with.
It had the death system of Dark Souls, the platforming of Castlevania and the cartography system of Etrian Odyssey.
And it had virtually no roguelike elements in it.
It was a game of crazy scope that emphasized exploration and puzzle solving.
So this is Dark Souls 2D, the first build of our original non-roguelike game.
And it took, at this point, about three months to make.
Oh, sorry.
So as you can see in this game, none of it's procedural.
Every single room's been handcrafted.
And all of the art assets is just Castlevania.
You might recognize some of that.
Yeah, we just wear our inspirations on our sleeve.
But what you can't tell is that.
We only spent a week and a half actually making content.
Everything else was like building up the engine and everything.
And it took over five minutes to go from one end of the game to the other.
So it was pretty massive.
And we actually already had eight enemies in the game and five different mini bosses.
Yeah, so you can't see that very much in this video because it's all separated, but there was quite a bit of content for just three months of work.
So, what you can see here is actually the original fairy chest rooms, which were rooms that you'd enter and have a very highly difficult challenge that you had to overcome to get a special item.
And for those who've actually played Rogue Legacy, this is one of the bosses which actually went from prototype to final with very little change in it.
This is just a platforming test room.
I don't know why I added this.
Yeah, just to test like jump heights and stuff.
In any case, at this point we were feeling pretty good because it was already starting to feel like a game.
In fact, it was even kind of fun to play.
So we did what any developer would do in our position.
We killed the project.
At this point, we were able to better evaluate the costs for the game and came to the fatal conclusion that we simply could not afford to make it.
It was a tough pill to swallow, but our experience working on all of our previous games made us fairly certain about those projections.
So from here we had to go into salvage mode and try to build a game from the scraps.
We had a basic 2D platforming engine, an AI logic system, and a level editor that could create rooms.
And that's when we decided to make Rogue Legacy.
Procedurally generated rooms resolved our biggest bottleneck, which was art, while opening up the strength of our tools, which is rapid level development.
It was also a natural extension from Dark Souls 2D, since a lot of the appeal to Dark Souls is its semi-rogue-like concept of consequence upon death, where when you die, you drop your souls and you have an opportunity to pick them up again.
It's similar to Rogue-likes, but it's not as punishing.
So here's another video.
This is Rogue Legacy.
After canceling the first project, this version was created two and a half weeks later.
any day now. Okay, so to really signify new beginnings, we removed all of the placeholder art and replaced it with my amazing programmer art.
So what you can't see here is, in the previous video we said that the world was stitched together.
In this one it was procedurally stitched together by the system.
So it's pretty much the same logic as the retail version of Rogue Legacy, but you can't tell in the videos.
And for some reason we also spent the time implementing a lot of new enemy types.
I guess we didn't really have our priorities set straight.
And we also had things like new zones running in the game.
So I think, yeah, you can see a new zone here with new enemies that have amazing AI stuck in a corner.
Because Buzzard drives us, we try to salvage as much as we could.
And in the end, we surprisingly managed to salvage everything from our previous project.
And this was about a year before the game launched.
We were able to launch so quickly, despite the setbacks that we encountered, because we embraced the new direction immediately and pulled the scope down with no regrets.
But the challenges didn't end there.
We like to put twists on the genres we work on, so we decided to make a more casual roguelike experience.
This meant changing some of the most common tenets found in roguelike games.
So the first thing we wanted to fix was the harsh punishment of deaths.
But for us, we didn't want to just make deaths less painful, we wanted to try and make it fun.
So that's when we decided to add permanency to the game by using the mainer skill tree and the equipment system.
That way you never had to start from scratch.
It was a contentious decision because we knew we were dilating the spirit of roguelikes, where usually when you die you kind of have to start all the way from the beginning, even if your run was 10 minutes or 50 minutes long.
We also wanted our game to be more skill-based and less chance.
So in a lot of roguelike games, there's a big emphasis on the roll of the dice.
So you could have critical misses or instant death events, and we wanted to remove as much of that as possible.
So we did a lot of tweaks to the game, especially inside the castle generation system, to make sure everything was fun and fair.
We still do have some random roles, but for example in critical strikes, but whenever it's just beneficial to the player, we're okay with that.
So the other thing we wanted to do was reduce obscurity.
Roguelikes often go out of their way to obscure information so that players can kind of discover the world.
While some people enjoy that, we wanted to make our game more transparent and easier to memorize.
So a lot of the pointless obfuscation stuff like 50 potions which are only labeled by color, we wanted to remove all of those instances.
This is why we have descriptions for virtually everything in the game.
Some of them are flat out explained, while others just provide hints so that the second time around you more or less know what it does.
Fourthly, we wanted to make the game faster and shorter.
So, in most roguelikes, the first few minutes of play are usually the same.
You need to start to power up before you begin to take on unique characteristics.
We wanted to fix that, so we designed the lineage system to upfront all change to the very start of the game.
This was important because we wanted to make our games to be very easy to pick up and play, and that meant we wanted to make the average life last around one minute.
So if you die a lot playing this game, don't worry, that was by design.
But these short lives also mean a lot of streamlining.
Because we didn't want people to play for 40 seconds and then they had to spend the next two minutes navigating menus again, we had to just streamline absolutely everything.
So an example of that can be seen as the trade names.
They're all purposely very distinct, so you can recognize them at a glance and not have to read them every time.
It's kind of why we flip-flop between scientific terminology and slang.
So an example of that is hypergonadism, which if you have that trait, it means you hit enemies really far back.
And we had the inverse trait, which was hypogonadism, so enemies wouldn't get knocked back at all.
But if you were playing the game and you'd see these traits, you'd actually have to like stop and then read the word out entirely because they're so similar.
So in this example, we turned hypogonadism into muscle weakness, just so that it's visually distinct.
The next point is that we wanted to remove floor clearing from the game.
So a lot of roguelikes segment their games into floors, where the further you go, the harder it gets.
But if you bypass a floor without clearing it out entirely, enemies will start to outscale the player, putting you at a disadvantage.
So this floor clearing really slows the game down and limits players' choice on how they want to progress through the game, since there's really only one true route that you can take.
And so we were able to resolve this by removing all forms of character development during a run inside the castle.
So this is our last point, and it was actually the first decision we ever made for Rogue Legacy, and the primary reason we were able to stay on budget.
So we call it the game loop, and it explains how players go through one life.
And this term might actually mean something in game design, but I don't know, we've never like read any books or anything on this type of stuff.
So it looks like a fairly standard loop, except the RPG mechanics happen after death and before you explore the castle, instead of during play like most games.
It seems like a minor change, however, almost all the previous design decisions that we spoke of were built to support this.
So by putting RPG mechanics after death, you had something to look forward to, which made it fun.
And because no character development happened during gameplay, we could lessen downtime and resolve the issues related to floor clearing.
And best of all, it gives you that one more time feel.
This is what we had eight months later.
So some of you might recognize it, it's actually very similar to our final build.
So with the title screen, we had like a start menu and a load menu, and we actually took that out for the final version because, like we spoke earlier, we were so focused on streamlining that we took out any sort of step that we thought might impede players into getting to the game as fast as possible.
This was actually our IGF 2013 build.
We're not particularly happy with it because it's missing a ton of the features that the final game does have.
But I think you can see, generally, it's much closer to what Rogue Legacy is now than what we had in the previous build with my amazing art.
So some of the art you might see is a little bit strange because this is not final art.
And we actually touched upon that in a later slide.
And we do have all the...
different areas working. In this build we actually had six areas.
We in the end decided to cut it down to four because it made more sense with the top, bottom, and right areas, and along with the center and the left being the entrance.
Oh, I love this part.
This is our previous death system.
So whenever you die, it's really cool, a whole bunch of enemies and coins would start raining down depending on your performance.
The reason why we couldn't keep it, though, is because people who had some really, really epic quests, that the enemy would just fall forever.
And if we added more enemies dropping to the screen, we found that it would start to affect performance.
So we had to simplify things to what it is today, which is just enemies appearing on the screen after you kill them.
So this is pretty much the retail version you see now, with a bit of older art, and as I mentioned earlier, a lot of the features missing.
Even though things like Charon, traits, and even the lineage system weren't in, we were fairly confident that we would be able to complete the game on time.
Honestly, a video of the final version probably would have made more sense for this slide, but we thought this would be more interesting because you can just see the final game on like YouTube or something.
We've been pretty strict with the budget to every game we've made.
Rogue Legacy is no different, but we did come into it with a fair bit more experience.
Here are a few key budget tips that we try to use on every game that we make.
Autonomy.
Work with people who can be independent.
This is important for a small indie team because everyone wears multiple hats, and it's tough to micromanage people and fix their mistakes.
You gotta be able to do that on your own.
This has implications though, that not every developer would agree with.
This means our development process is not very democratic.
Opinions matter, but when it comes down to it, the most trust is placed on the experts, and nothing is decided by vote.
A good example of this happened with our character artist, Glabr Kotaki.
We originally had a separate character and background artist, and I was stuck in the middle trying to get their styles to work together.
You can see from this picture how much the background and foreground clashed with the character art.
Things were clearly not working, and thankfully, Glabr decided to step up and fix things for us.
So that was, the previous slide was what we had before, and this is the final product.
What's amazing is that Glauber had very limited experience on backgrounds before.
He'd worked on them, but he'd never worked on something of this scale.
Budget-wise, it's crucial to work with these kinds of autonomous people.
For Rogue Legacy, we didn't catch on fast enough, and it cost us dearly.
Before Glauber fixed things, 20% of the entire project's costs were spent on this problem, and we didn't even get it resolved.
We went through many, many different artists.
The second rule we follow is to make custom editor for each game.
So try to make the editor for the game, not the company.
This isn't for everyone, but for us and the size of our projects, it always turns out cheaper and faster.
So this is a picture of the editor that we used to make the rooms in Rogue Legacy.
It seems intimidating, but it's actually quite simple.
The map editor can only do one thing, make rooms.
Because it's so rigid, it only took us two weeks to make.
There were tweaks that came afterward, but the bulk of the work was within that time frame.
What's really great, though, is that we could create and bug test a room in as little as five minutes.
There won't be much that we can salvage for this for our next projects, but that's fine because the time that we saved creating contents more than makes up for the time spent on the code.
Okay, sorry.
Our last point is to always have design alternatives.
This ties in with what we mentioned at the beginning of the talk, where we always look out for cheap, fast, and reusable solutions.
it's usually necessary to come up with multiple ideas to find the one that best suits the resources you have.
When everything is categorized based off cost, it's a lot easier to gauge how far you can go with an idea.
For example, the original lineage screen was going to show your entire ancestral family tree.
So you could track spouses, children, follow branch offshoots, and so on.
It was really expensive, and we ditched it early for the lineage line that only shows your preferred children.
And we lost some of the ornamental features with this change, but the idea of an expanding legacy was retained, and we were able to do it for a fraction of the cost.
So another quick example of design alternatives is the skill tree economy system.
The choice we made for this was very contentious and illustrates how budget can play a big role in the decisions we make.
In this case, we actually chose a bad solution because it was so much cheaper.
So the original skill tree economy is fairly straightforward.
Every time you spend money to upgrade a skill, that particular skill price would raise.
It seems simple, but there's a hidden problem to it.
There's no way to save money in the game, because Charon's always taking it at the beginning of every run.
So optimal skill builds always meant putting an equal number of points into each skill.
So you'd put like 10 points into health, and then it'd get too expensive, and you'd start putting 10 points into damage and so forth.
In other words, there'd be no skill diversity.
We wanted to encourage players to personalize their builds, which meant there had to be consequences to player choice.
But harsh consequences were counterintuitive to the casual scene we were going for, so the repercussions had to be very light.
So in the end, we decided to use a universal modifier.
Buying a skill increases the cost of all other skills by a very small amount, as well as the skill you purchase by a large amount.
What this did is it deterred players from evenly leveling up their characters throughout the game, resulting in more unique skill builds.
This is just one example.
Even though the solution worked, it was terrible for a lot of reasons.
First, it feels bad having everything go up in price.
When you purchase something and ancillary items get more expensive, it's not a good thing to do.
And secondly, it punishes casual players who blindly upgrade their skills because they'll start reaching that point where things become really expensive really quickly and they don't have an optimized character for it.
And thirdly, and probably the biggest problem, was the negative effects of the fix aren't noticeable.
people would see the solution that we did, but they wouldn't know why we were doing it.
So they'd go on to forums or they'd go on to send us emails asking us just to remove it.
And it's such an obtuse problem that explaining it isn't very easy.
But on the other hand, the pros were too much to pass up.
So this is what we like to call a zero dollar solution.
There was no art or audio that was needed, and implementing it took literally less than 10 minutes.
And because it's so self-contained, almost no time was spent balancing, and there was no QA required either.
So our game is full of these kind of workarounds.
Some are better than others, but they're a big reason why Rogue Legacy had such a small budget.
This example sort of encompasses our design mantra of good, not perfect.
So, where do we go from here?
We're now financially stable, and a lot of these budget workarounds might not be necessary anymore.
So, the question is, would we still do things this way?
And the answer is that we most likely will.
There's more to it than just saving money.
Finding simple solutions to big problems is useful in any scenario, and we often surprise ourselves with the things we come up with.
For us, it's also the most entertaining part of development, because that's when it's the most challenging.
Anyways, that's it.
Thanks to everyone for attending this talk and we hope it was insightful.
Thank you.
Okay, I'll say the rest.
