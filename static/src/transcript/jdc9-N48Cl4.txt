My name is Christopher King.
Over the last couple of years, I made a game called 20XX, which we'll talk about in a bit.
We were in early access for a really long time on 20XX, for about two and a half years.
This is a talk about community building and how to leverage your community during your game's development, specifically during access, but I think the lessons kind of apply outside of that too.
We're gonna talk about how to build goodwill and build trust in your early access community, and then use that to make your game better.
So let's dive right into it with a couple of quick facts about 20XX.
20XX is a co-op action platformer.
It's very heavily inspired by Mega Man X, so the very similar kind of old-school action platforming gameplay, but it's multiplayer, so you can play it online or on the couch, and it's a roguelike, so it features high arcade-style replayability through random game generation and permanent death, and it's out on every current generation platform.
On day one of Early Access, we sold a whopping 64 copies of 20XX.
I was very thrilled by this.
I thought this was outstanding.
The idea that, for this first game I had made, that 64 whole people were like, yeah, I think I can pay my money for this thing that you've made was outstanding.
Obviously, in hindsight, that was kind of terrible.
and counts as a bit of a slow launch.
And here today, we are gonna talk about one of the factors that got us towards selling over 220,000 copies of 20XX as of today.
An awful lot of factors contributed to our success, but we're here today to really dig into one of them, which is our community management strategies.
Just a quick outline.
I'm not going to dig into too much here but there's going to be a brief introduction.
I'm going to hit on these six points about specific things we did with our community to either build goodwill, build trust, build loyalty or use it to get better feedback.
And in the event that I haven't run out of time, I'm going to take a couple questions.
So let's get into it.
What is this talk?
When you properly nurture your early access community, you can get a fantastic source of design feedback and testing.
If you treat your fans right, they will treat you better and help you make a better game and they will love doing it.
So today's goal is actionable second level information about how to build community goodwill and use it effectively.
And when I say second level information, I'm referring to actionable stuff that's one level of detail past what's blatantly obvious.
Hopefully stuff you can go ahead and use today.
First things first though, before we get into the meat of this talk, it's point zero, it's not one through six.
Early access is not free.
This is a chart of my time spent on 20XX.
That's 17% in the middle is my time spent managing our early access community.
Over our 142 weeks in early access, that's two and three quarters years or so, I spent about eight hours a week interacting with our community.
And as our game's primary designer, creative, tech guy, level designer, all that stuff.
That's a very, very large cost.
It's about 28 full-time weeks or seven full-time months of community management.
And if you're not interested in really integrating player feedback into your game or helping your players help you design your game, this is a huge cost.
And you obviously have to account for this.
If you just assume that community management is free or effortless or doesn't take any time, you're gonna be real disappointed.
So one, establish a schedule and keep your word.
This section is about loyalty building.
As a developer, you want to build loyalty because it increases your player retention, it makes your players more likely to give you better, more detailed feedback, it engenders kinder communities, and I really can't overstate how nice it is to have people not be dicks to you over the internet, especially when Steam communities can be very toxic places and thankfully ours was not.
and it makes players more likely to be your fans going forward.
So when you work on more projects, the people who have played your games before will remember your positive interactions and be like, oh, I kind of have some basic default trust with that guy.
I'm going to check that out.
So first thing, set an update schedule and stick to it.
This is a very concrete thing.
On 20XX we updated the game every other Wednesday at 6pm Eastern throughout our 142 weeks on early access.
So that's 72 bi-weekly updates.
They were very, very, very on time.
One of them was off by a single hour, one of them was off by a day, and the other 70 were smack on time.
And it really builds a sense of reliability in your fan base.
Even if you don't have a lot of players immediately, the players you do have will come to rely on the schedule that you've set and they'll plan play sessions.
Like 20XX has two-player online multiplayer, so we'd have people, like, organizing sessions with their friends.
Oh, we're going to play at 6.05 on Wednesday because I am confident that the game will have updated and we can rely on that plan.
and it really builds a lot of loyalty in your fans when they know exactly when they can come back and see the cool new stuff.
And if you take absolutely nothing else from this talk, take that, add an update timer to your main menu.
Here is an example of that.
So this is a picture of 20XX's main menu at one point during development.
You can see that very professionally drawn green circle around next update in and then a timer Very simple just look at the time that you're going to update Compute the difference between now and then and put it right on your right on your front page Much harder than this is actually adhering to your schedule. You know sometimes You're going to have to make cuts to features you intended to push on time.
Being reliable here is important, and it's much better to release a small update now and then than be late, and it's much better to not set a schedule at all than set a schedule that you reliably cannot adhere to.
If you're going to do this, make sure you actually can.
And finally on this, make sure that the time you set is life-friendly for you.
This is actually a mistake we made on 20XX.
I set our update timer at 6pm Eastern every other Wednesday, and I lived on the East Coast, so we would be pushing regular patches right before I was supposed to either go out to dinner or go to an evening social thing or do something right after I was off of work, right?
And instead, because of my very poorly chosen timer time...
I would very frequently either have to push a patch and then just leave and not bring a computer and potentially have crashes or other bad bugs in the live build for a few hours or I'd have to cancel going out or I'd be like, hey friends, I brought my laptop because also I have to work.
Pick a good time, preferably right in the middle of your workday.
If we had done 2pm instead of 6pm, we would have been much better off and we will do that going forward.
Lastly, on this guy, never promise anything unless you're 100% sure it's going to happen.
I'm sure you guys can think of more than one game community that's been kind of ticked off by a developer making lofty promises or specific, or promising specific release dates for features pretty far in advance and then letting their community down.
And this is really just about, oopsie.
One back.
This is really about expectation management.
Announcing features too early really doesn't win you a lot, especially when you're on a slow launch or a relatively small team and don't have a huge player base.
And it risks eroding community faith and trust if those dates slip.
When you do tell your fans what you're working on, pick better language.
Instead of saying feature X is gonna be available on date Y, say we are actively working on feature X, say feature X is really high priority for us, and then don't announce a ship date until it is tested and ready to go.
Oh, actually, lastly, on this guy, be open about your mistakes.
In a lot of cases, making a mistake, admitting it, and then fixing it leaves you with a lot more goodwill than just trying to cover it up.
If you goof in a publicly visible way, admit it, say, we goofed, our bad, explain how you plan to fix it.
This is a high priority fix for us.
We understand there's a crash in the game.
We're working on it right now.
If you can't fix it, explain why.
This is a relatively small issue and we've got a lot of hotter irons in the fire.
We're gonna take care of it at this point-ish down the line.
But of course, note the publicly visible part.
There's no reason that you have to sort of make up fake mistakes or mistakes that nobody has noticed because they're relatively invisible.
You don't need to tell anybody that you did those sorts of things.
When you patch a crash out, announce it.
When you fix a balance issue, announce it.
Pretty straightforward stuff.
It's not some kind of life hack.
People just like honest developers.
A lot of developers don't seem terribly human in the way they interact with their fan bases.
When you can appear human, it's nice for you.
Two, maintain an active, visible relationship.
This section is about making sure that your presence and your actions are known and felt in your community.
When you make changes, nope, that's one slide too many.
When you make changes that players have suggested, do so very visibly.
Call them out in your patch notes, post in the forums.
Like if there's a Steam community post where you got a really good suggestion, post after you've made it.
Post when it's made it to the backlog and say, hey, this is a fantastic idea, thank you.
closing that loop with a player and making sure that they're aware that their awesome suggestion actually resonated with you makes them a lot more likely to give you stuff like that in the future.
Similarly, take advantage of low-hanging fruit here. If a user suggests something to you that is already in your backlog, so it's not actually a new suggestion, feel free to say that's fantastic. It's in our backlog anyway.
Keep early access sexy. Armstrong gets a fade transition. It's the only one.
Be ready to shuffle around your backlog.
Be ready to shuffle around your backlog?
Yeah, sure.
Yeah, be ready to shuffle around your backlog.
Once you're developing your game in front of what's basically a live studio audience, you suddenly have a major priority that you weren't dealing with before, the immediate now customer experience, and your backlog has to take that into account.
You're going to have to address player pain points sooner than you intended.
If you know there's like a really bad quality of life issue in your game, or if you know there's an awful crash, you're going to have to come back and fix those things earlier than you intended.
And you need to be aware that whatever your regular development process was, isn't going to be exactly that way once you also have a whole bunch of users like telling you about their experience on a day-to-day basis.
Similarly, you might want to ration out exciting things you're working on if you have a whole lot at once. Like for example, maybe you have 10 new levels that you're ready to drop, two new modes, and you know that the next month of early access is a pretty dry time. Consider putting the modes in one patch and then one mode in another patch and then the other mode in the third patch so that your users coming back always have something exciting about your constant updating.
Finally, though, don't ration bug fixes.
Don't do that.
Basically, if the thing you're working on, the rule of thumb, if the thing you're working on is a detrimental to player experience kind of thing, don't ration that out.
Fix it as soon as you can.
Hot fix it if you have to.
Don't wait for a patch cycle.
Make sure that anything that might be turning your users off that is an unintended part of the experience gets out right away.
Never ration that.
As an aside, here's a quick example of our community forcing us to shuffle around our backlog.
So it's August of 2015, we're getting ready for PAX West, and a major competitor of ours screws the pooch big time and gives us a press opportunity.
This is another game pretty heavily inspired by Mega Man that had built a big hype wave and ended up kind of disappointing their fan base.
And they gave us a press opportunity.
So we got together and we said, okay, what do we have, what do we have that's ready?
If we wanna sort of set an announcement, if we wanna set a milestone.
what can we put in this milestone to be kind of major?
And we said, okay, we've got a couple character redesigns.
If you guys have followed the development of 20xx at all, you know that we changed the art, we iterated on the art style numerous times.
I think we had six different main character designs between the very first Steam launch and 1.0 a couple years later.
So we said, okay, we've got these new character designs we're really excited about.
We've got a couple of new modes.
We can throw all that in there.
That'll be great.
That's perfect.
Let's go with that.
So 11 days before this big beta launch, which was sort of the day that our competitor was supposed to have had a major event, we pushed that stuff to our Steam community first, to our early access users to say, hey, can you guys gut check this for us?
Let us know if anything here is super broken or if there are any immediate feedback bits you have or anything like that.
And this was our response.
These are a little bit cherry picked, but this was pretty much the response of our entire Steam community.
It was overwhelmingly the most negative feedback we've gotten about anything at all we've done with 20XX.
We're 11 days before our biggest press push of the entire development cycle, and we're getting this about our main character.
So we scramble to fix it. We cancel a vacation, we build new character models using a lot of the lessons that we learned from the sort of failed character designs we had.
And of course our characters feature very prominently in all of our promotional media.
They're in our trailers, they're in our screenshots.
So a couple of days before this major event, we have to remake all of our trailers and all of our screenshots.
And we end up doing all of this.
We loop in the community with every single step.
The moment it is clear that we have something approaching outrage on our hands, we say, We goofed.
We're working on this.
You know, please bear with us.
Trust in us.
We're going to work on this.
And every single day we would post our new concepts.
We would post models in progress.
We would post animations.
We would basically just show our entire community day by day, this is the new stuff we're building.
does this fit your expectations better?
And if we hadn't done this, we would have just gotten toasted, honestly.
This was a really big press push for us.
There's a really solid chance that if we had pushed that beta with unappealing main character designs that we just would have been dead in the water right there.
Like this moment is one of the major sparks that made us successful, and we almost wasted it.
This was some of the feedback we got after having done this.
So keep in mind that these were community members who were downright pissed.
We had turned their beloved characters into something they found so hideous that they couldn't even play with.
They didn't want to look at these characters while playing the game.
And even though we had made a mistake of that magnitude, once we sat down with them and we fixed it, they loved us.
And we got a lot of this.
We got a lot of, I can't believe you guys were willing to go that far for us.
Like, thank you for listening to us.
And we're like, thank you for telling us.
We need that stuff.
Three, develop and maintain a group of super friends.
These are early, early access players, they're sort of a side group from your basic EA community that you're gonna use to test content that isn't ready for your entire user base.
They're gonna get to see cool new content before it's ready for release, or maybe it's work in progress or experimental stuff.
And you're gonna get last line of defense QA before stuff goes live, you're gonna get an awesome source of feedback before you're really ready to show your greater player base something you're working on.
Feel free to handle membership in this group, however you like.
You can opt in, you can have people send you a nice email or say I like your video game that you're making.
You can just have it be invite only if you have a big enough community that you can afford to cherry pick.
As long as you're getting the feedback you need, the way you handle membership, the size of your group doesn't really matter.
Set your group's expectations accordingly.
If your superfriend's content is going to be full of garbage or pushed relatively infrequently, it's very important that your fans know that.
You can afford to push less frequently or less consistently.
You can afford to push relatively lower quality stuff.
As long as the people you are pushing to understand that that's what you're doing.
If they are expecting the same level of quality in your regular releases and then you push them kind of garbagey stuff, they're going to feel bad about it.
Respect the shared value relationship here.
Remember that your super friends are a two-way street.
You're getting something really valuable out of them because you're getting sort of an earlier line of feedback, you're getting awesome testing from them, and they're getting to see a lot of cool new stuff that you haven't actually pushed yet before it's ready.
Accordingly, don't push super friends content that are only full of relatively boring stuff.
If you have performance enhancements, if you have engine changes, if you have things that are not really impactful to the average user experience, like content, really.
Don't push these things to super friends, at least don't push them alone.
If you have to test this stuff, maybe you have engine changes that you're really excited about or you have optimizations you've written in that you're not sure are safe because they might break other things that you can't really test on your own.
Either wrap them up with other stuff, wait until you have other content to test to push them or push them to just another public facing build that isn't super friends.
Say this is an optional test build on Steam, this will go live in a month, whatever like that.
Lastly, your super friends are not They're not employees.
are gonna have something that you could possibly show that would ruin your plans if it gets out.
Like these people are in your super friends group because they love you, but you can't just explicitly trust them 100%.
Don't show anything in this group that will absolutely ruin your plans if it gets out.
It's very likely that if you're kind of a slow early access launch, this doesn't apply to you.
And if the special stuff you're working on gets out to whoever actually cares about it at the time, that's probably fine, but just be aware.
Four, interact efficiently.
Section's about cutting down on the time that it takes to do this job right.
Encourage public space feedback.
So when you're communicating with your players, encourage the use of forums, encourage the use of Discord, encourage the use of any kind of public space where your words have a force multiplier, where when you respond to something, you can reach a whole lot of players at once instead of any one-to-one mediums like email or Twitter or calling me at three in the morning.
Reducing the number of times that you personally need to deliver a given message saves a lot more time for other stuff, just makes this take less time.
Similarly, once your fans are using these public spaces, once you have veteran players in your Steam community, in your Discord chats, stuff like that, they're gonna answer a lot of questions for you.
They're gonna take over a lot of the softballs.
If they've seen you answer a question once, they're gonna come in the next time somebody else asks and either directly link to your comment or say, here is the answer, and it's a huge win-win-win.
You don't have to spend any time on this at all.
your veteran player gets to feel like they contributed to the community and they get to feel like they helped somebody, which they did, and the fan gets their question answered. Everybody wins, and it's awesome.
Here is an example of how we tried to encourage this with 20XX using the same awesome main menu screenshot.
You can see on the bottom there we've circled our community button, which at the time linked directly to our Steam community because we hadn't done Discord yet.
And we had a similar circle over there linking people to the subreddit.
In hindsight, I don't know why we didn't just make that a separate button.
We probably could have gotten away with that pretty easily.
This is also a perfect example of a mistake.
I have an email address on my main menu screen.
And I have no idea where people are getting this email address, but to this day, I still receive support emails for 20XX, even though this has been gone for literally two-plus years.
Somehow this email address has circulated, and now I'm doomed and stuck with it forever.
Always encourage public spaces.
Never encourage one-to-one mediums.
Of course, there will be some users that are not comfortable speaking out in a public space, and they will find your email or they will tweet at you anyway, and that's totally fine.
But in general, make it clear that your preferred method is anything public.
Like this, use a public bug database.
You're going to get fewer bug threads in the other communities.
If you're not already using a public database, please do.
We use Mantis, but there are a ton of really good ones.
Lead all of your bug complaints there.
Get them out of your other communities.
It turns them into more positive places.
How many times have you loved playing a game and then the subreddit or the community for it after a big patch just turns into a big mess of bug complaints and nothing else?
It really drags you down.
Strategy two does apply here.
You have to make sure you're visible in your bug tracker.
If you have people reporting a lot of bugs, you need to make sure that you're spending at least some amount of periodic time looking at your bug tracker, visibly fixing bugs, marking them complete, submitting notes for feedback, stuff like that.
Otherwise, people are gonna come to your bug tracker, they're gonna see a whole mess of open bugs that haven't been interacted with in a long time, assume the bug tracker is dead, and either not report the bug or report it on one of the other forums.
Pick your battles.
Don't respond to everything.
Over time you're going to get a really good sense of the kinds of messages that your veterans can handle for you.
Ignore them entirely.
Let your veterans do it.
Take the time to respond to a player when they just make up a love thread.
If they say thank you, developers, so much for this game, put yourself in their shoes.
If you are telling the developer of your absolute favourite game, how much it's meant to you and how much you've enjoyed playing it.
There's really nothing that would make you happier than that developer coming right around and saying, God, thank you. This is the kind of thing, like, this is what I love. This is what keeps me going.
And closing that loop really cements them as a fan pretty much permanently.
This is a very easy way to convert somebody who likes your game into a permanent fan.
Respond to popular feedback that you disagree with.
If there's a long thread of comments or a big discussion about something in your game that people want changed, that isn't aligned with your vision, that you don't intend to do, your fan base is going to understand if you explain.
This is where we are and here's why, instead of just completely ignoring them.
Lastly, you can respond to feedback.
You should respond to feedback if it's not very popular, but is a good idea.
The whole point of doing all of this is to get as much good feedback as possible, and it only takes one person with one idea, sometimes even in a single sentence to get a point across, and responding to those sorts of people makes them a lot more likely to give you good feedback in the future.
Don't respond to everything unless they're negative Steam reviews.
Negative reviews can be a really good solid source of actionable information.
For example, if multiple users post the same technical issue, I crashed when doing X, this is my negative review, you have no idea how many players are experiencing the exact same issue and just not telling you.
They're either walking away from your game, they're leaving a negative review.
Either way, they're not your fans and they don't like your game because of this thing.
If multiple users post the same misconception, and we'll talk about this in a bit, you probably have a messaging problem.
If a lot of people are posting negative reviews in your Steam review section and saying, I didn't like certain thing about your game that you didn't actually intend for people to think, you probably have some way that you're messaging your game or some way that you're appealing to users that doesn't align with what your game actually is.
And if users have a pain point about the game's design that is intentional, for us, we were very heavily inspired by Mega Man X.
The game is very challenging, the action is very precise, and for some people it's just real hard, and they wanna get into that kind of thing, and it's just not their cup of tea because it's real difficult.
You may or may not have actionable information.
Like, sometimes your vision is very solidly on the side of, well, you know, this game just isn't for these players, and that's kind of how it is, but sometimes you may realize that you can do something relatively small to alleviate those pain points.
As an aside, just a short story about how we learned something from our Steam reviews.
In this super great pie chart, the green is the 31% of, oh, I didn't want to roguelike complaints.
So just as a brief refresher, 20XX is an action platformer where everything is randomly generated every time you play it.
So you go through a set of levels, you die, you retry.
And we had a lot, a lot, a lot of negative views, 31% of them, where it basically boiled down to, I wanted to play this style of game, but I didn't want to roguelike.
And we were very sure that we had covered our bases on this.
We said roguelike all over the place on our Steam page, pretty much all of our press stuff, all of our marketing sort of showcased this game loop.
And for some reason, a lot of our fans, or a lot of our unfans, I guess, just weren't really getting that.
And we just sort of figured, you know, some people aren't going to read your game store page, some people are just going to look at your game, they're just going to buy it, and there's nothing you can do about it.
And we eventually had a fan point out, hey, maybe, you know, games are really, these days, they're implementing a lot of different kinds of sets of roguelike elements, like some of them don't do permanent death, some of them do permanent expression, some don't.
If you laid out exactly what you're doing, not only would fans of roguelike games understand exactly what about your game is a roguelike.
but people who don't understand roguelike games would also know exactly what those terms mean.
And we're like, oh, oh Jesus, they're right.
Oh man.
So we did that, and those reviews basically vanished.
We stopped seeing that influx almost entirely.
And this was kind of a painful point for us.
You know, we stopped the bleeding, but if we had done this off the break, if we had messaged this properly from the get-go, there's a really good chance we'd still be over that 95% review threshold on Steam, that overwhelmingly positive.
And we believe that has an impact on sales, but we don't really know.
Five, develop a motion agnostic evaluation.
You have to learn to read feedback out of context.
When you get a suggestion, when you get feedback, strip it of any context whatsoever.
Ignore the way it's written, ignore the tone of the writer, ignore your relationship with the writer, ignore the fact that the fan might be angry with you.
Is the suggestion good for the game, and is it within scope?
It's all that matters.
Angry fans and players are often going to have good points and they're just mad because they really care about your game and something has happened that is not the way they wanted the game to go.
Obviously, this has its limits.
If you have an upset or angry user who is resorting to either harassing you, harassing other players, hate speech, anything like that, ban them straight away.
Don't deal with that.
But somebody who is upset is not somebody you should inherently ignore.
you know, try and forgive their undiplomatic approach to contacting you.
Similarly, don't reject feedback just because it's poorly written or poorly worded.
We have a user who speaks in some of the most broken English I've ever seen.
It is as though I can't tell if it's, it seems like he's kind of speaking in memes all the time, but he's still like one of the best players of the game.
He has really sharp suggestions.
He has like specific design critiques and taking the time to like try and actually understand what he's saying.
And sometimes it takes a really long time.
has been entirely worth it for us.
On the other hand, don't favor suggestions just because the community is clamoring for them or they are popular or because they are from your favorite players.
And yes, we have favorite players.
Popular suggestions aren't necessarily good ones.
And lastly, hone your evaluation skills.
All of this is about getting your community to trust you enough to give you all the feedback you want.
And if you can't decide what good feedback is from bad, all of this is kind of worthless.
Unfortunately, this is a little bit subjective.
You have to define the ways that you judge feedback.
For us, how well does it fit with the game?
How well does it fit with our current community?
Because once you're making a game on early access, you have to take that into account.
What's the scope cost of this?
And what's the impact?
Is this going to be good for my game?
Is it going to make my fans happy?
Can I implement it quickly enough to be worth it?
Do I have time?
And is it actually impactful?
You might have things that are really good fits but end up, when you think about them being kind of very minor or maybe only 1% of your fans are going to see them.
and so they're nowhere near as important.
Each dimension obviously has weights that are gonna shift over the course of development.
When you are right at the beginning of production, you have plenty of scope, probably, as long as you have money to deal with it.
As you get closer and closer to shipping, you're probably gonna have to cut stuff and you're gonna have to be looking at great feedback you've already taken that you can no longer deal with by 1.0.
So when evaluating suggestions, try and maximize positive community, positive game stuff per unit scope.
And as a final example of some of the concrete value we've gotten from our community, netplay testing sucks.
Netplay testing sucks really hard.
Setting up networked bug conditions, even if you get full repro steps, setting it up and testing it and trying to figure out what the hell is going on is so much worse and so much more time consuming than almost anything else we've dealt with.
And as we built the game's online community, we got hundreds and hundreds and hundreds of hours of co-op footage of people playing the game with a friend online with fraps open or something like that.
and sort of bug hunting.
They'll play the game and then they will go through their hours and hours and hours of footage and they will clip out all of the bugs and they will say, here is a bug reel.
And they'll give us a ton of information on every single last little thing.
So not only will they post all of that stuff in our tracker very neatly for us.
but they even have video footage for everything.
And without getting the respect of our community, if those fans didn't know that I was going to go over every single inch of that footage and fix as much of stuff as I possibly could, they wouldn't have done it.
We got thousands and thousands and thousands of dollars of free value out of them submitting these bug reports, and there's no way we could have shipped 20XX's online multiplayer at 1.0 on time without their help, full stop.
And on top of that, most of your fans that are reporting these bugs do so with a really intimate knowledge of how the game works.
They've played for hundreds of hours, they know exactly what this looks like, they have a good feel for why something might be occurring because they know how your systems interlock better than third-party QA might.
Obviously internal QA should know the game just as well as anybody else in the team, but if you try and use external QA that hasn't really seen your game a lot before instead, they're not going to do as good of a job, at least in our experience.
This is a blank slide so a little bit of additional reading two years ago after we finished 20xx 1.0 on PC I wrote a really really really detailed post-mortem on gama Sutra That has all of this stuff and an awful lot more Less than the kind of stuff that I learned over the course of making 20xx for four years And I have two additional articles here.
I linked an article about community building on Discord from Andy Nguyen, in case you wanted more concrete stuff on how to actually get more eyeballs and build awareness of your community while you're making it.
And I also linked Tanya Short's excellent Medium article about building Boyfriend Dungeons community pre-Kickstarter.
I just sort of see those as...
supplemental information to the kinds of strategies that I used while making 20XX because they're much more about getting the people there in the first place and my stuff is much more about keeping them engaged, keeping them loving you, and making the best use out of their feedback.
And that's my talk. Thank you so much for coming.
We probably have time for one question.
If you have a question for Chris, please come to one of the mics in the aisles.
And while we wait to see if anybody else has a question, I have one for you.
Okay.
So how did you keep your update schedules consistent even when you were doing things like packs?
Because it's pretty dang disruptive.
So how did you manage to actually release something two weeks later?
We would just plan all of that stuff out far enough in advance.
If we knew that there was going to be a week where we weren't going to get anything done, we would basically finish an entire patch way ahead of schedule and then just release it when it was time.
It's all about planning.
Right.
Makes sense.
Hi.
I was wondering how many people you had and if each person kind of took a different medium, like one person did Reddit, one person did Steam.
We had a couple of them.
We had two full-timers.
Sorry, the question was how many people did we have working, I guess, on the project or just the community aspect of it.
There were two full-timers on 20XX and then a big army of part-timers doing things like sound and music and stuff like that.
In terms of community engagement, it was basically just me, full stop.
This might be something very particular about me as a person, but I am very anal when it comes to messaging and making sure that...
my way of communicating with the community is upheld.
And as a result, I just kind of did all of that work myself.
You know, every so often, somebody else working on the project would interface with a fan, just sort of happen stancely, but it wouldn't be like, this is their job to do it.
They would just see it every so often. So it was really all me.
Was that helpful?
Thanks.
All right.
All right, so please make sure you fill out your email surveys to give Chris feedback on his talk.
Thank you so much, Chris.
