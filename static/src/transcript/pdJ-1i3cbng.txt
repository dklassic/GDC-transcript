Thanks everyone for showing up to the session with the longest title.
It's just that I had to take the font size down a tad to make it fit and extend it.
But anyway, we probably did not think through when we came up with that title in the first place.
So my name is Alex. I am the co-founder and former CEO of Showdown.
I'm saying former CEO because we got acquired last year.
So everything I'm going to show you today, you can't buy anymore.
At least I won't be selling it to you.
But on the upside, we learned a ton in the process.
And this talk is really about getting you guys to kind of figure out how the role of a community manager is evolving as games are evolving, and how a couple of really cool tricks can help you a ton.
Quick question first.
Who here is a community manager?
OK.
Who got hooked by the AI and machine learning thing for nerds?
Yes, me too.
OK, excellent.
So for you guys, I'll try to not go too deep into the tech.
We can have discussion afterwards.
Because it's really about how we can make it simple and useful for the purpose of creating communities, which is kind of why we're here right now.
So this is Bia.
Hi, I'm Bia.
I'm the former head of marketing at Showdown.
And yeah, let's dive into it.
All right, and Alex will be talking about the techie stuff, and I'll be talking about anything that doesn't involve code.
So let's get started.
Where are your players interacting with one another today?
We're not here to tell you that communities are beneficial to products or games, we already know that.
But what we're here to talk about is where these communities are shifting to, and where it's important to begin allocating resources to.
And what we're talking about specifically is in-game communities.
There's a clear trend between long-running successful games and games that have in-game communities.
So player engagement is critical today.
It's as important as the gameplay itself.
And how do you improve that organically?
by enabling in-game interactions.
In-game interactions have shown to keep players in the game and make them more likely to spend.
Take in a basic in-game social feature such as chats.
Chats have been shown to double retention.
This is because players are staying in the game to get their social fix, and not only that, but they can also request help from players in the game without ever leaving the game.
There was research published in 2014 that showed that players that had invested time in online communities were more likely to stay through the concept of social capital and interdependence.
So people that invest more heavily in your communities are going to be more likely to stay.
And throughout this talk, we'll be using Clash Royale as an example because they've just crushed it in terms of building in-game communities and they have every social feature in the book.
You know, unfortunately for most of us, most studios can't really deliver this kind of experience.
So what's really interesting, if you look at basic social interactions like creating forums, creating chats, those end up being quite personal.
Creating a connection with a player is really a one-on-one relationship.
The chats that Bea mentioned earlier, basically it's about you guys, community managers, talking with players and getting personal with them.
So how many of those players can one community manager know and interact with?
I don't know, maybe a thousand, ten thousand if you're super good in social skills.
Pretty standard for me.
And how do you even choose?
whom to spend time with, because if you have a million players, 10 million players, even 100,000 players, how do you choose which one to focus on and make sure that you keep in the game?
Is the player that's spending the most the most important for you?
I think we have proof later on in this talk that this is not the case.
So what I'm getting at here is that scaling in-game interaction is hard, because interaction is inherently one-to-one.
And well, I know Bia.
We've built a relationship.
I don't know any of you guys.
We may become friends or not.
It will take time.
So this thing, there's a trick, though.
Because you guys, through your games, are sitting on a ton of data, literally.
So this is typically a simple screenshot from the Google Play Games Player Analytics.
It's one of the.
X analytics tool that you may or may not be using, you probably have one.
If you have a game, you are probably getting those events stored somewhere.
And if you look at it, that's super nice.
It's actually a drill down of some of the events in a game.
And well, if as a human being you can actually take any conclusions from that, you're my hero, because I can't.
You need technology to do that.
It's like a ton of data, very hard to.
find the patterns through that data.
Luckily, there's tech for that.
The way we built Showdown as we did, it was really not to create another analytic tool, analytical tool.
There's a ton of them.
We really worked hard with a couple of community managers that we handpicked of top games, trying to figure out what were the objectives that they were trying to achieve.
And we came up with like literally five of them that we focused on as we created the tool.
One was creating a community pulse.
Really figuring out what, how is the community doing?
Is it getting closer together?
Is it getting personal?
Or are people actually falling apart?
Are they happy?
Are they helping?
Are they fighting?
What's going on in your community?
How is it performing?
Preventing churn.
Basically, everything you put in place, you want it to be...
to kind of help preventing children.
You want people to stay, to feel that they belong, that they have a space where they have friends that they can go to to have fun and be in a cool place.
you want to push them into paying.
You don't want to push them into paying and increase conversion by marketing them the new in-app.
You want that their friends help them discover how they can beat a boss easily, how they can use that item in a better way, and really kind of get that knowledge from the crowd, from their peers, and not from the marketing.
Then, one of the things that we realized is that you guys are spending way, well actually you community manager guys are spending way too much time making videos for ads.
We automated that because it was boring.
And we wanted that sense of community to really be a thing and we wanted to be able to measure it and make sure that this is not.
a crowd, not a group, but really a community where there is kind of a love being created between the players and they are feeling like they belong and that they want to be there.
So the way we really did approach the program was through the videos. Text is cool.
But like we discussed just earlier on, you have multiple languages.
There are a lot of barriers to text. Text is complicated.
But videos are so easy. It's the video game in the first place.
How do you describe what you're doing in the game?
Hey, I jumped here, I took this word, I slashed it through.
What did I do wrong?
I can't really tell you if I don't see how you do it.
So video is paramount.
And we recreated the whole thing around the ability to identify when something is going on in the game, capturing that moment, creating video sequences, and using that to fuel social loops.
That's pretty much what Bob does here.
He wins, he has a cool video, and he gets social rewards.
The same thing happens when he fails.
He can get help.
So social loops were really the core of what we build the technology around.
And this is based on academic research.
There's a paper here at the bottom that I really suggest you read if you wanna have a good foundation for building your own social loops.
But this paper basically outlines the components required to build a sense of community.
And they are reinforcement of needs, membership, influence, and shared emotional connection.
And here's an example here on the right that I'm gonna go into more on the next slide.
So how many of you are familiar with Nair El's hook model?
One, good.
So for most of you, the 99 of you that don't know, it's a really popular product design model, especially here in Silicon Valley.
And what it's designed to do is create a habit, create habit forming actions at high frequency.
So to quickly go over it, a user starts with a trigger.
It can be either internal or external.
An example of an internal trigger is boredom.
External can be a notification.
An action, which should be really easy to complete, otherwise people won't because people are lazy.
Then we have the variable reward, which is the most important step.
People like being able to predict things and variability drives them crazy.
So anticipation is mostly a stress response to what you're about to receive.
So making sure that your reward's a variable is key here.
And then finally investment, you know, the action that you want the user to take that's going to, you know, enable him to invest more time or effort into the game.
And this ideally should load the trigger by setting off a chain of events that enables the delivery of the next trigger.
So as you can see social books are really a social adaptation of Mary also model and we've we have our favorite class rail here and we have to to examples we have the game hook. So you know you you get a notification that it just been unlocked you open the chest you receive for new cards, you know what they're going to be and then you know play a match and then that loads the next year is probably going to try to unlock a new chest.
So on the social side, we have, you know, you get a notification, you have a new clan message.
So you go and you scroll the clan chat.
And just a quick plug about news feeds here.
The reason that news feeds are so ubiquitous in products is that they're kind of like a slot machine.
You know, you go, you scroll, and you don't know if you're gonna find a shit post or if you're gonna find something really awesome.
So, you go to the clan chat, and maybe you find an interesting new tactic.
And to thank the person for sharing that tactic, you might donate a card, and then you go to play a match, and that really just kind of sets off the loop again.
So the way we built the system, and this is pretty much, I think, very representative of what you guys will need or are using, probably, if you're doing that kind of thing.
You first need the telemetry.
You need access to the data.
Data is paramount.
It's what you build everything on.
So you need to be able to access not just the events, but sometimes real-time data.
And that's what we actually built.
We were caching the events that you already logged through your game as a service platform.
We were also hooking on variables in the game engine and looking at them in real time.
So that's really like the cornerstone of everything.
No data, can't know if the user is doing well, can't understand anything else.
Then we had the video production.
So that one, you can get away from if you can.
You should get away from if you can.
Because in our case, we're building a platform to integrate into games, into third party games.
So we couldn't assume that you guys and that game developer had cooked into his game the ability to do replays.
in a smart way.
And by smart way, I mean just replaying actions.
Clash Royale typically does replay you.
When you watch a TV Royale game, it's not a video.
They are playing the game over through the events and just putting the cards on the deck at the same speed, at the same pace.
Comes with a few caveats, but it's definitely much lighter and easier to implement.
So if you can avoid doing that, it's cool.
If your game is highly physics-based, super complicated, maybe it's not always possible.
Then the social is cool.
When you have users, you understand them, you have content, you can push and you can connect those users with content.
You need a place to do that.
So we built chats, forums, groups, all kind of systems to allow interactions between the users and the ability to publish and promote the content to those guys.
And finally, the one most important thing is for the community manager to actually understand what's going on, who are those guys, what are the various interactions that are happening inside the game, and creating hooks and creating automation so that you can see, hey, I feel like all those guys that are doing the same action are having the same problem.
Maybe if I put a reward cycle or a reinforcement cycle here.
that will help out some of the game design problems, and we actually built that.
So it's pretty cool because then you can use social and you can use your community to help out when maybe the game design has a few problems that would take too long to solve.
You can make it a quick fix by giving the power to users.
That's pretty cool.
So a couple of things about telemetry.
So telemetry really is like in a Formula One.
If you ever looked, watched a Formula One competition, you always see all those curves going up and down in every direction.
It's super cool.
So basically, it's analyzing what's going on in the system in real time, and as fast as you can.
So it's getting a lot of data, and by a lot, I mean a ton.
You can be as verbose as you want.
Does it matter to get all the data?
Well, if you don't have something to analyze it does not, obviously.
If you are alone and you are going to be analyzing all the data about yourself and you don't have the right tools to do it, it's pretty overwhelming and it's going to be very hard to analyze.
But it's the...
it's like the step one to be able to train an artificial intelligence model to learn stuff.
So one of the things that we found is that in order to train.
an artificial intelligence system, basically what you need is data and information.
So that, like, classified information. I know that the user managed to pick this word.
I know that the user performed well. I know that the user hit the milestone.
I know that the user missed a turn or missed a quest or missed something.
And basically, all that data comes from your QA team.
As you are building the game, as they are playing the game, they create a ton of data.
So they're actually creating your training set for you.
And this is really enough just to bootstrap the whole process.
You need a ton of data, and the system really learns along the way.
It needs to be bootstrapped, and QA does that just fine.
And what's the ultimate result of data, of that much data?
It's really about figuring out whether it's a hot dog or not.
So if you have watched Silicon Valley history, what it does, it tells you if that thing is there or not.
So in Silicon Valley, hot dog, not hot dog.
In our case, it's beat the boss, not beat the boss.
Lost many lives, not lost them before he got to the boss and came to the boss in good shape.
he always drifts too much and ends up hitting the curve on the Formula 1 game, it's all those information that you are able to identify through the data to figure out what kind of a player you have in front of you and what was his trajectory through the journey in the game.
Data is really about, it's basically probabilities.
The engine looks at the data that you give him, and what's really cool is that once you've had all those data pre-processed, you don't need them anymore.
Basically, you have your model, and you can just, in real time, analyze the data of any player and tell, hey, OK, so he's taking the turn just fine.
He is changing gears at the right time.
he is not speeding too much on that line because there is a turn coming up, he is braking at the right, about the right, the right position, and you can analyze all this information and make it very holistic.
And this is how the engine actually perceives your game. It's just statistics and looking whether you hit another threshold.
So, uh...
It's really raw, but at the end what you know is that you are able to characterize how your player is behaving.
And some things are really complex, but what I really want you to get away with is that you can do it in very simple ways.
Because every game, we looked at it in a very generic and holistic way.
If you start looking at your specific game, how your gameplay is made, and how everything has been built, you can oversimplify a lot of the assumptions that we had to keep very generic, and make it much easier for you.
So another added benefit of using this technology and having in-game communities in your game is you have the potential for enhanced metrics.
So in the past we've looked at things you know such as referrals, growth, and engagement.
And then when you have in-game communities you can start looking at things like network density and social value.
As Alex was saying earlier, network density is basically measuring how many of your players are, or know one another, or are connected to one another.
And this is a good measure of the community's health.
Another really cool concept is social value, which was coined by our friends at Ninja Metrics.
Check them out.
And what this identifies is basically the influence of a particular player across the spend of the community.
So what they found was that your highest spending players might not be the most important ones because there are players called social whales that actually influence a lot of the spend.
And through in-game communities in this application, you can really measure that.
So that's really cool.
So to show you how this technology can be applied, we worked with True Access last summer to prototype a showdown implementation.
And this video should be playing.
Yeah, well, it's not going to be playing.
Well, they make True Skate, which is a really cool mobile skate simulation game.
It's kind of like a tech deck.
You ride the board with your fingers.
How many of you guys have played it?
No, yeah, yeah, it's really fun, it's one of my favorites.
It's been in like the top 10 for over a year now, it's like the number two game on the sports, in the sports genre.
So they already had a replay system, and what they really wanted was to, you know, automate it, make it a little better, cleaner, because the runs were limitless.
So they wanted us to find the highlights and quickly produce highlight reels that then players could share.
And we also wanted to tack on that social loop, that social component to build those in-game interactions.
And the thing that we were focused on here was enabling players to receive help automatically from their peers.
So to allow a video to surface, for example, if a player couldn't nail a certain trick, if he had failed X amount of times, to be able to see a replay from a player that had successfully completed the trick.
And here's an example of a specific social loop.
Again, our objective was to enable peer collaboration.
And here we have a case where, again, these videos already exist because TruSkate has a replay system.
So maybe you've been playing this this level and you're unable to beat the high score challenge and you you know you quit and then a player you know happens to do a certain combo within the realm of where you've been playing and you get a notification that says a new video has been selected for you or something with better copywriting and the action is to watch the short highlight reel.
And then your variable reward is maybe you discover a really unique combo that you hadn't tried before that you're able to use to beat that high score challenge.
And the investment then goes to, you know, directly in the game, you can complete the level and load the next trigger, depending on what kind of, if you have any social graphs or, you know, other social features implemented in the game, you can also give that back to that creator with a good old follow.
So the way we integrated that is actually pretty simple.
I'm going to go through the slide because there are a few ideas that I really want to share.
So first, we integrated pretty deeply into the engine.
They had their own game engine, so we had to hook pretty deeply into the rendering, their analytics, their events, grab a few extra events that were missing that we needed to be able to really analyze properly what's going on, and basically grab data.
What was really fun is when we started doing the edits, because we were giving the power for the users to let us know whether one of the, what we thought was interesting, whether it was interesting or not.
So we decided, hey, it looks like you were doing a trick, you were either attempting it or succeeding at it, we think you did a good job.
But sometimes the user was just like, hey, no, this is bullshit.
This is not interesting.
I don't like that.
Let's remove those.
Or on the contrary, hey, you totally missed that trick.
So this is how you create a feedback loop into the model by letting the users can't let you tell you how you perform, how well the model really understood what they were doing, if they understood everything, if they missed some pieces.
And every AI system needs those feedback loops, because it's not a thing that you build once and hope it will live forever.
Unfortunately, everyone is different.
Some people have other expectations.
So we ended up actually tuning the engine for different people, so that some would...
like, were more experiencing, were expecting, like, much really epic tricks and only epic tricks, not the average tricks.
The others were really like, oh, give me everything I would like to share as much as I want, and were less, wanted more quantity, and not just the best ones.
And so it was really interesting to create, to understand how every user actually had different expectations in terms of the content that they wanted to see created for them and wanted to share.
And giving them that ability to give us feedback and enhance the mode, it really allowed us to tune it for some different type of users.
Finding the publishing is really easy.
It was like one click that goes either on social or in the inside feed, in the internal feed of the app.
And what's really interesting here is that.
We realized a few things along the way.
What we're doing here, it's cool for social, but QA loves it because they're able to actually understand what's going on in the game when something is going wrong.
Why are the users failing?
They can't judge when something is wrong from the telemetry.
They can't always reproduce.
But when you gave them video, they're super happy.
It's like double thumbs up.
And the other guy that loved that is the ad networks, because you create a ton of content that can be turned into ads if you want to.
So we actually had a few interesting encounters based on that that we did not expect at all.
So it's really like understanding, being able to put together videos and use them as basically the steam for social loops.
That's a pretty cool idea, and that's not hard to do.
What, since last summer when we stopped doing it, a ton of people have tried, have started going into that direction.
Whether it's creating communities through chats, whether it's analyzing better who are the key players, whether it's cooking more tools.
So those are, I literally randomly picked four of them to put some stuff on this slide, but there's like a ton of them.
Everybody's going to that direction.
And what we've seen from working with some of the top publisher and editors in the industry.
is not only are they on par, but they are definitely cooking those things from the inception of their games.
Now, every game that we've been, we've talked with some pretty big shots, and, like, they were literally, including all those mechanics, at the start of the game.
And that's one of the few takeaways that I really want you guys to go home with.
A, as community managers, your role is changing.
It's not only about acquisition.
It's not only about social.
It's about building a game with social.
So it's just as important as the game mechanics.
It's just as important as the game design and comes first in the game.
You players are your number one asset.
It's about figuring out how to keep them here and how to invest on them so that they create a community and stay together.
You want them in your game. You don't want them on Facebook. You don't want them on Twitch. I love Facebook. I love Twitch.
If you guys are here.
Duh. Duh. Duh.
You want them in your game. Your game is your medium. Keep them there.
and you already have a ton of data.
You are going to have a ton of data.
It's about building steps, step by step, and building on top of the data to understand your players and be relevant and help them.
find their place in your game.
Finally, social loops are really your responsibility as community managers.
I've seen too many times in game studio that divide where game design works on his side, data analytics on another side, and there's a social here that tries to get a few ideas to create rooms, create tournaments, create stuff, events.
And there's really that disconnect.
And what we've seen is that games that really make it are games that manage from the start of the process to put all those things in the same room at the same time and build the game from all those different perspectives.
And that's like paramount, and it's really your role as social, as community manager to be there and to put that idea that social loops are going to make the game.
Just like game mechanics. If you have bad game mechanics, it's not going to happen, but provided that you can make proper games, you need social loops to make it really happen.
So a little shameless plug, now that we're not there anymore, I'm doing a blockchain network for cross-game inventory trading.
We are needing community managers.
Please come and see me.
And Bia.
And I'm the marketing director of Blacknut, which is a new personalized game streaming service.
Think Netflix for games.
And we just launched in select countries in Europe.
And we'll be in the US soon.
So check us out.
And we managed to have a few more minutes for questions.
So please feel free to come.
Yay, thank you.
Thank you.
Oh, and before I forget, you are not allowed to leave trash under your seats and stuff.
And you have to clean up the room.
And you have to give us a super cool rating, because they're printing those trading card games with the name of the speakers from last year, next year.
So your rating really matters.
Please rate us.
Thank you.
And questions, anyone?
Come on, don't be shy.
I won't bite.
Yes, there's a mic right here.
Oh.
He does bite.
No, only on occasions.
So I work in analytics, so I really want to know how you measured effectiveness of that social loop that you just introduced to your community.
And two is, do you give, for example, A-B experiments or at least different treatments to your community members?
Because one thing my game experiences a lot is when players experience variable treatments, they yell out and be like, hey, why are other members receiving different things?
Have you encountered situations like that?
So in our case, it was a bit easier than that.
So we had the base model.
Basically, we had the baseline that was analyzing what is going on in the game.
And that's pretty much the same for everyone.
That one was pretty standard.
We didn't find any need for variations there.
What we found a lot of need for variations is how we assemble the video, how we identify what's interesting, what's good, and what's bad for a user.
From one user to another, some will want to.
to fail more before they kind of get in touch with someone, someone wants to fail less.
So there's a kind of variability.
And that, in our case, it's really about social interaction.
So people, it's not impacting the gameplay at all.
It's like you lost, and you end up in that chat.
And you have that guy, hey, what happened?
Why did you lose?
Why did you not take the sword before going to the boss?
You're like, which sword?
Well, you know, the one in the closet, two rooms back.
Wait, what?
There was a room?
And that's how you had them.
So we had the variability mostly for the social sharing.
Some people had different needs for social share.
When we came from reward loops and social loops inside the game, not so much.
The only thing we tried to.
to do is to not push too many interactions.
We really wanted not to disrupt the gameplay.
Gameplay had to stay as it was, because we're coming on top of games that were already there.
And we didn't want the game designer to start blowing a fuse and say, oh, you are changing everything in my game.
It's never going to happen.
So we had to recreate and wrap the game around with a social layer.
So from that perspective, it was easier.
Let's say, so we did not have that many issues, aside from creating the content itself.
Sorry to follow up.
How did you measure the effectiveness of the things that introduced to your game, for example, that interactive video?
That's going...
Those are the, uh, basically the metrics that we introduced in, uh...
So we created a few metrics, the network density score that we are measuring.
We were also measuring the social value of the user.
We were also measuring a few other stuff that I can come here up, right here.
We were measuring the community person, that was kind of a metric that we put together based on a number of different...
how many people are following each other, how many are they connecting, are they talking, how many people are interacting one with another.
So there were a bunch of variables that we kind of put together to create a community pulse, and that was kind of a core KPI that we're trying to optimize against.
The other were pretty standard, like the churn, all the other were the basic KPIs.
But when we were creating content, the idea was really to use content to create, to spark interactions.
So we wanted to, I'm pushing that content to you guys, to you because I believe that if you see that content, you will react.
If you're not reacting, I did a bad job, and we need to iterate my model.
But it is important to create specific KPIs for each social loop and implement them into your analytics dashboard.
Anything else?
Any jokes?
You guys got jokes?
We don't.
Oh, I think at 3.30, we are good.
Thanks so much, guys, for coming.
We appreciate it.
Don't forget to rate.
We want to be on the cast next year.
And thanks for coming.
