So in the next 30 minutes, I will talk about why building a UI framework can be beneficial for multiple teams, a project's company, how to approach, the overview of our main UI framework components, and about benefits.
But first, I would like to make just a quick introduction.
My name is Natalia Rybrova, and I started my career as a UI designer in games around nine years ago working on the AAA project.
But after that, I was mainly focused on creating free-to-play mobile games in different genres.
And right now, I'm a UI UX designer at Cyber Games.
But when I joined the company around three years ago, we were only 40 employees and had a lot of ambitions to grow.
Right now, we are more than 100.
We have multiple independent teams working on different projects.
But during that intensive growth, it was very important to restructure the process of the UI development and make it more effective.
So why build a UI framework?
Several years ago, front-end frameworks for web development became very popular.
And the accessibility of HTML, CSS, and Java combined together with the software that allowed designers to turn their mockups into code led them focused on creating unified design systems and design itself rather than on implementation.
And it was a pretty big step forward.
But if we're talking about games built in Unity, the situation is a little bit different.
Unity UI system has never been perfect, and it requires to know a programming language like C Sharp for advanced use.
And C Sharp is much more complex than HTML.
And the third-party solutions, like solutions you can find maybe in Unity as a store, are usually not well supported or poorly adopted for mobiles.
And of course, some of you can argue and say, sure, there are still a lot of games that use Unity UI, so why wasn't it enough for us?
And we had two main reasons for it.
And the first reason was that designers didn't have enough control over the implementation.
And this is a simplified version of the pipeline we had before the UI framework.
And the implementation part, as you see, completely belonged to engineers, mostly because of the complexity, and it made the process of redesigning and iterating very slow and demanding.
And because designers didn't have enough control, it sometimes led to a static and interaction inconsistency, and especially closer to deadlines.
And we also didn't have good technical solutions that were unified across the projects.
And so the second reason was that very often multiple teams had to solve similar problems implementing in developing UI.
And designs and technical solutions varied, and there was no consistency across the projects.
And you know when it happens, player experience suffers, and so does the company's brand.
And besides, it was also very time consuming.
It was very difficult to maintain.
And teams were less flexible because simply people had different set of skills.
And problems were solved differently.
And knowledge sharing is something that happened that permanently in the companies.
And so back then, we tried different approaches, like making UI kits, writing specifications, making guidelines.
And the problem was that all those solutions were static deliverables that nobody wanted to use. And it was also inconvenient to use and maintain them up to date with limited resources. And it also required a lot of communications between designers and engineers.
And so the third party solutions that improved collaborations between also designers and engineers, like for example Zeppelin that used web design, were just expensive and also were not perfect because required some communication between designers and engineers.
But however, we already knew one thing, that if you could make an accurate and reusable implementation once, we were much more confident in the design quality.
And it was also very easy to maintain it from one place and then share it across the projects. And so that's why to unify our UI on implementation level, we started to build our own UI framework. How to approach. So the first step for us was to define principles and components we wanted to reuse across the projects. And the initial idea is based on atomic design approach. And then build our application. At this time, we found it was very important where like, it considers UI as a set of elements and behavioral patterns, and I assume most of you are pretty familiar with the concept where basic building blocks, like atoms, like buttons, labels, transitions, even color palettes, can be combined into more complex components, like molecules that can be combined into organisms, and organisms can be grouped into screens that provide context. And since the UI framework we built was meant to support multiple projects.
It consists of technologically unified components that can be skinned and combined into templates that can be then combined into screens, and reusable behavioral patterns and transitions.
And visual language was intentionally excluded and moved to a lower project-based level because we wanted not just to create a UI system for a specific project, but a universal tool that would allow us to create UI system for any project, saving time.
And so after we had defined these principles and components, we built them as a prefabs with a hierarchy that made sense for the desirable functionality with the minimum hierarchy. And we actually had to rebuild most of the basic uh components that were already present in Unity UI.
And we actually had to do it because even though UI framework expands Unity UI, some of the components were not just suitable for us.
And the main reason was because they were not adapted for mobile.
And in some complex cases, Unity UI requires programming knowledge for advanced use.
And just to illustrate, I would like to show you as an example one of the simplest UI framework components, like the button.
and it has an improved structure for providing feedback and it also has more of a hierarchy.
And one of the biggest differences that we have is that the framework button has a hit box child object that basically is invisible image that defines the interaction area for the button.
And it's placed above the animated part, it's placed above the graphics so it prevents the situation of click not being registered in two cases.
When we interact with the small size elements in mobile or when due to scaling during the animation for example in the press state when these small elements can become even smaller.
And just to show you, so you can see at the top you can see the Unity button and the Unity Collider scales together with the Unity button when I press it.
And at the bottom there is a framework button and I have a selected hitbox and it stays the same so even I press it, it still defines the interactable area for the button and it's the same.
And so framework buttons use only animators for providing feedback.
So we don't have an option like unity button that provides like simple feedback like tink-tink as pride.
But it's mainly because using animators we can actually create any type of feedback we need and plus it's very easy to reuse animators across the components with the desirable behavior.
And so the template we use for like framework button has an improved also animator state machine that can be easily copied and adjusted.
and we improved some transition times and we also added a release non-click state for our buttons and we completely excluded hover state which only caused problems on mobile.
Other components like radio groups, tabs, toggles, progress bars, they all had gone from the same rework process and combined and composed a library of the template assets.
There, we of course have some special components we developed specifically for the UI framework like view config and transition config. I will return a little bit later. But instantiated this templates can be skinned, animated and extended, extended according to specific project style. And then they can be added to a specific project style library which is like very custom. We call skin assets and uh.
The name may be not the perfect one because in SkinnyAssets.org also can be included some components, for example, like combinations of components with a specific anchoring or hierarchy for different project needs.
And so it's very easy to instantiate them with one click from a specific window.
And to show an example how we use it, I just want to show you a little video.
It's not a real game, I just made this case specifically for this talk.
And so I have a press of a pop-up and I want to fill it with the skin assets and here I just add some list item, like two, and then I want to, for example, to add a button, just adjust the position.
And basically, you can see how just in a second, I can create a variation of a pop-up using this window without going anywhere and looking for anything else.
I can, of course, also adjust some sprites or text.
And we know and we expect this to become obsolete after we start to use nested prefabs, but we built the UI framework even before nested prefabs were announced last summer, so we were pretty much satisfied with the solution.
So yeah, it was fine so far.
And the second reason, the second step in building the UI framework for us was to provide freedom for non-engineers.
And it's actually one of the main benefits of the UI framework because right now designers can implement UI without a big necessity to code. And it significantly reduces the iteration time between designers and engineers and also designers get much more involved in the implementation process.
And the use right now help from engineers only to create complex transitions or just when we need to work with data.
But even though we right now also work on some solutions where designers also can start to work with data.
And it's much more easier for them to start testing the aesthetics and it happens much earlier in the process.
And very important to say that it only became possible after we gave designers freedom to work with two main complex areas.
And these are navigations and transitions between the screens and controlling the rendering order of multiple layers, including 3D.
Because let's be honest, just to add some sprites in the projects and make layouts in Unity.
It's not that difficult for designers, but if we're talking about creating transitions and flows, this is where things get difficult.
And to dive into the details, I would like to present one of our main components in the UI framework, the slice.
And so slices serve as containers of canvases, graphics, and cameras.
And a slice can be built as an entire screen, like loading screen or 3D model, or they can be built as a part of the screen, like for example, pop-up or top bar or bottom navigation bar, and so on.
And so the framework slice template consists of a root object with three million children, and those are cameras, graphics, and animation targets.
And let's take a close look.
cameras. So the Slice template comes with one autographic camera per default. It's because it's most commonly used cameras for 2D graphics if of course we assume that we have our UI's 2D. And we can add as many cameras as we want, but if it serves a purpose, but of course we should be mindful about the performance. And the usual case where we need multiple cameras can be when we need to render both 2D and 3D, and so we can use orthographic and perspective cameras accordingly.
And so, added cameras, they just got automatically referenced in the field we called camera list.
And the order of the cameras determines the rendering order.
And where this, like, last camera is rendered topmost and was pretty much inspired by Unity render order, Unity UI.
And so at the end, we can easily build multiple layers, operate with them, and correctly build a hierarchy just in a short period of time.
And if I want to change the order of the cameras, I just don't need to operate with any values.
I just need to drag the camera I want to render topmost at the bottom of the camera list, and that's it.
neat and designers really like to work with it where they don't need to Assign any like camera depth and so on Graphics acts as a parents for all the graphics contained in the slice and the children of the graphics expect to be canvases and Because what is where the 2d gets rendered and the children on the canvases expected to be slice panels And this is another UI framework component, which is very important for us, because slice parents, they of course, parents of graphics assets for our slice, and they are also very similar to your generic Unity panel, but it has an added component that allows us to associate this panel with a specific animation target.
And animation targets is actually our favorite feature that we developed for this UI framework, because animation target.
they propagate animations for our slice panels.
And this is the way for us to reuse animations across all slice panels in our projects, independent of amount of children and naming.
And if you have ever worked with a Unity animation system, you probably know how painful it can be to be tied to a specific naming if you want to reuse an animation.
Right now it's possible because it's basically an obstruction layer that allows us to reuse animations because we are assigning just an animation target type to a specific panel.
So we don't care what's underneath it, we don't care how it calls, but we just assign the type.
And I would like, of course, to go into more details, but I would need a longer presentation, so let's move on.
So, to assign and execute these animations, we need to use our slice somewhere. And for that purpose, the UI framework has another component we called view config. And this is basically a recipe for our UI system about how to build and present a view or if you can, you can call it a screen. And so, we need to fill in the information the system needs to know about how to build this view correctly.
And a view config can include one or multiple slices.
It has to have at least one slice.
And slices also can be shared across the views.
And again, the rendering order defined by order, like where I add my slices in this view config.
And it's also very easy to manipulate with this view in run time.
So to illustrate, I have another small example.
So here I have a view config that I called inventory screen, and please notice it doesn't have a top bar here.
And what I need to do is just like in the inspector, I just need to add another slice, I need to reference it.
So let's say it's top bar, it's the same top bar I have in the character screen.
And it immediately added this top bar in the inventory screen view.
So it's pretty easy, it's very fast, and it literally takes seconds and I can do it one time.
So I can reshuffle all my small pieces of my UI and create different combinations.
So the benefits are the redesign and iterations right now are very fast.
And once I broke down my UI into small pieces and assembled them, I can combine different setups and it's just a matter of seconds.
And the render order of the slices in the view config defines the rendering order.
And it's also very easy to show or hide previous views.
It's just a matter of ticking the checkbox.
So if I want to hide the previous view behind the pop-up I just opened, I can just easily do it.
And after we have defined the view, the UI system knows what to show, but it doesn't know how.
I mean, in the previous example it already knew how, but for knowing how it needs another component that we call transition config.
And the UI framework provides transition examples for different configurations, like sliding, scaling.
It can be instant transitions, or it can be absolutely custom animation.
And after that, all these transitions can be copied, adjusted, and they can easily be assigned for every view config.
And uh, so to show this also a small example how we use transition configs.
So here I have a popup settings which has an animator popup transition config.
And it looks like this, so you see the background fading, like pop-up is scaling.
And what I want to do is just change it to the slide right transition config that I created before, like both hiding and showing.
And as you can see, immediately will apply the changes.
So, the benefits of the transition config, so the main one is that it operates with a whole slice panel through the animation target, which is again an obstruction layer that allows us to reuse animations across all slice panels without depending on object naming.
They can be also reused not only across the views, but also can be reused across the projects.
So if we work with multiple projects that want to reuse the specific transition between the screens, we can easily do it without redoing it again and again.
and it allow us to create different combinations of animations for multiple slice panels in one slice so as you saw before I had like a combination of a background that just was fading and the pop-up content was scaling and it's possible because I just broke down my content to two slice panels which has two different animation target types.
And so right now I just would like to show you how we execute animations or navigations using the UI framework because I mentioned that it's very easy just to create flows.
And this is also just a small example.
So now I'm just running a project and I have a starting prefab where I can assign my starting view and right now it's a splash screen.
kind of a splash screen. I can use any. And as you can see, this has a view has a button, start button. Right now it does nothing. But let's assume I would like to execute navigation to another screen. The character. And so what I need to do is just to find this button in the hierarchy. And I need to add one navigation script.
and then I will have a field with animation target, this I'm adding a view I want to navigate, it's like GTC start view, and then I just need to add a function, navigation, execute navigation.
And that's basically it, and I didn't touch any transitions, so it will happen instantly.
Just press apply.
And I can operate it with any button.
press and navigation happens.
So as you can see, it's super fast.
It's very easy for designers to just start create these views.
And it's not only fast, but right now I'm doing the animated prototypes not using other software, like before I used like Principles and Sketch.
But right now I'm just using Unity because it's so much easier and the result looks like the final result.
And.
Just to make a quick maybe recap, I would like to say that the UI framework is built around this concept of navigations between the views that reference slices.
And navigations are requested to be done between the views.
And views can reference one or multiple slice, and slices are responsible for containing graphics and logic.
And in a specific case, like slice panels and animation targets.
And slices can be included in one or multiple views, and they can be shared across.
And so navigation transitions right now can be built by a designer, and once they're built, they can be easily reused across the views and also across the projects, and it's easy to start prototyping inside the project, saving time.
technical unification.
So interaction design principles and basic UI architecture is unified to maintain the holistic design, and is very much less time consuming and requires less resources to develop and to maintain.
So we have right now like one or two dedicated engineers that help us to maintain the UI framework.
It's also much easier to drive the UI innovations.
So once a good solution is found and implemented in the UI framework, all the projects get the benefits of using it.
And of course, in-house development allows us to adapt it very fast to all technical needs and not wait.
Yeah, it's just really nice.
But of course, it's very important to remember that building a UI framework is not just a silver bullet.
We still complement it with other tools.
And just to give you an example, we still use TextMeshPro stylesheets for coherent typography.
So it's the place we control all the text styles for the projects.
And we can easily adjust it, and then it will propagate the changes across all the text styles we need.
You work with the desaturated assets and use Unity color library.
and easy, very easy to adjust these color palettes and it will also propagate the colors across all the assets.
Yes, with the nested prefabs it will be much easier and we're also waiting for it.
And yeah, we'll also draw all our assets, this regarding the project style in vector and we are working right now on integrating NSVG importer to Unity.
and to support the original assets inside the project so we can always have original assets inside the project and keep them up to date and if we need to correct something we just need to open it from Unity project and save it back.
And we still use UI systems in Sketch, and we still use other software for creating prototypes, especially in the concepting phase.
So there are still a lot of things that support our UI framework.
And so in the end, I just want to say so.
It doesn't matter how you build your UI framework, but having a living design system of components and interaction patterns inside the projects can give you a lot of benefits.
And it's not right now for our engineers or game designers to start to use this UI framework and start creating good-looking screens, just opening the project, because all the guidelines are already inside it.
You don't need to go and look to other guidelines or read documentation.
And Of course, first of all, UI framework for us was a time-saving measure that allows our designers to focus on research, design, and testing rather than on implementation.
And I think that's it.
Thank you so much for listening.
I think we have some time for Q&A, just four minutes, maybe several questions if you have.
I have a small question, if I may.
Could you share with us how big was the team developing the UI framework, or how much time did you guys take to develop that framework?
Yeah, actually we had one year of one engineer's time that work dedicated, like work on this thing with the support sometimes and advice from other engineers.
But mostly, yes, it's one engineer that helped.
Of course, you shouldn't probably just put the UI framework on engineers because they don't want to work with UI usually.
But yeah, it's not that much.
It wasn't too bad.
Thank you.
Of course.
Hi. Yes, I would like to know if you came up with the need to make debugging tools for your UI framework?
I mean, it all happens inside the tools team, so the engineer who worked on the UI framework was a part of the tools team and we still have a bigger thing for our internal components.
inside this thing?
I mean, the question was, because if the designers and these other persons in the team who doesn't have the technical skill, maybe they have problems and you have to go to the programmer who makes the tool for support.
I mean, if you have that kind of problems in your project.
Now, the thing is, our teams are pretty small and we have usually one UI UX designer per team.
So, we...
Yeah, I mean, if something is wrong, it's very easy to communicate, so...
I think our UI UX designers, like, test it themselves.
Usually, yeah.
I know that we use a similar system.
Okay.
But especially with transitions.
Yeah.
And input.
I know there's a few, QA really love to just keep tapping things.
So how does it know what the topmost one is?
So if you have like the slide transition, push the button to open it and then push it again.
Uh-huh.
Is there like, like does it know what the topmost?
So the rendering order defined by order, I placed the slices in this view list.
So if I want to change it, I just can drag it.
Like, it's... that's the beauty of it, because it's just super easy.
You don't need to, like, mess with numbers or anything.
So the UI... well, if you tap anywhere on the screen, it'll know...
like don't interact with the screens behind?
Yeah, yeah.
Okay.
Of course.
It's just completely different view.
So if you navigate to another view, it just open.
We just can choose to show or to hide the previous, but you won't be able to interact.
Yeah, we also like, I remember this thing.
Hi.
Hi.
I was wondering, you mentioned data bindings and how you plan to rule out sort of remove engineers.
Yeah, it's in the plans.
Can you elaborate?
Or is it still something very?
Yeah, it's still in our plans, actually, because it's not something that you will.
We're already testing it, but I wouldn't like go into more explanations.
Yeah, but it's still in development right now.
All right.
Yeah.
I understand.
Thank you.
but it's definitely will make our lives much easier. I think this was the last question. I think we can continue in the hall if you want. You're very welcome. Thank you so much again.
