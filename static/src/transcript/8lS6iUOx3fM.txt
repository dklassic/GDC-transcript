Hello and welcome to this GDC talk about cloud gaming. I'm Adam Billiard and I'll be sharing my thoughts about where cloud gaming is today and where we all are going with cloud gaming.
If you are watching this live, feel free to ask any questions in the chat and if you're watching this in catch-up, please share your thoughts in the comments below.
So let's kick off with a simple fact, which is that cloud is becoming increasingly an important part of our lives.
From web applications to AI to Alexa to Siri, banking, login, authentication, it's a pervasive part of our lives.
So I guess the question is, why have we not seen the full potential of cloud in gaming?
So today I want to look at why we haven't seen that mass adoption of cloud gaming just yet.
So I'm going to be guiding you through a history of cloud gaming, its successes and its failures, and we'll give you a sort of general overview of game streaming from a business and development point of view from someone who's been in the game technology and streaming side of the world for a very long time.
I want to give an insight into what cloud gaming offers, how it's actually delivered, and what are the challenges that have stopped so many streaming companies from breaking out.
So mostly I think I'm looking to arm you to ask better questions of the vendors, as well as evaluate the potentials for uses of cloud gaming, you know, from a business or from a sort of creative point of view, and help you, you know, get going with thinking about what a cloud-native experience might be.
So, before we get started, who am I?
Why should you listen to me?
Well, I'm Adam.
Hello.
I'm a Brit. I actually spent my high school years in Minnesota, and that's when I got into programming, hanging around in radio shacks and playing with TRS-80s.
I've been in the games industry for a very long time.
My first game was published by Atari in 1983.
And of course back in those days, you not only, before you actually wrote the game, you had to write the tools to do the art to write the game. So it's a very different world.
I was co-founder of Criterion Software, where we built the RenderWare game engine.
And that was for PC, Mac, PlayStation 2, PlayStation 3, Xbox, Xbox 360, mobile.
There was a time when 50% of all PlayStation 2 titles were using renderware.
So I worked with amazing teams around the world during that time.
And when we got acquired by Electronic Arts, I became the tech CTO and VP in EA.
And I worked with a lot of the internal teams and amazing teams in EA.
More recently, I co-founded Polystream.
And the idea is that we are building a scalable cloud streaming platform.
So, why care about the cloud?
You know, you may well be sitting there thinking to yourself, you know, why do I need to know or care about what goes on behind the scenes in cloud gaming?
I just want to write games.
Sure.
But I want today to lift, show the sort of magic behind the curtain in some ways.
I mean, I still get very excited about, you know, when you start a stream, I find it incredible that you can start a stream and you're playing something from the cloud, and it's such a great experience.
And I know a great deal about, you know, what's going on behind the scenes.
I still find it absolutely magical.
But I think there is clearly a huge untapped potential for game developers with cloud gaming.
And the growth of the market isn't slowing down.
And 5 billion as the revenues is the mark that we're gonna be passing in 2023.
So despite cloud streaming and cloud gaming's sort of slightly meh reputation, I think there's a lot of reason to be very optimistic about the cloud streaming future.
There is, I guess, a perception of cloud streaming somehow defying economics and physics in some quarters.
And I think, for the avoidance of doubt, it doesn't.
You know, power costs money and the speed of light remains constant.
Who knew?
To understand the sort of history around cost, reach and scale and give insight, and knowing and sort of to give insight and also to understand the capabilities, the strengths and the limitations of this medium, help will help, I think, help make sort of informed decisions, I guess.
So what exactly is cloud streaming?
Well, the cloud in this context is, we're referring to an instantly accessible content on demand.
So the computer resources, compute, storage, are available and brought to bear without direct active management from the user.
And you're playing a game that's running on a server and it's streaming to your device rather than playing it, you know, on your, you know, in your living room, on your local device.
I think the other sort of piece of it is, of course, that the nature of the streaming part is that you're playing those apps, you know, games, movies, music, where you're not downloading the content first onto your device.
So you're streaming and that whole sort of instant play piece.
And just so we're on the same page, I'm talking today about true streaming.
I'm not going to talk about progressive file downloading schemes.
I also want to cover some of the moving parts of cloud streaming.
And I think it will aid understanding.
And if you've got questions, then feel free to drop in questions and or email me afterwards.
Thank you very much.
Why cloud streaming is good? I think people generally, you know, today, understand what the promise, what the advantages of cloud streaming are, you know, from instant access to content, to not needing to manage your own storage, not the whole sort of piece of do I delete this game in order to install this new game locally, that all goes away with cloud streaming.
the ability to save a game from one location and pick it up in a different location, potentially on a different device.
So you could start a game on one device and you could finish the same game on a different device.
And there's things like reduced piracy.
There are a couple of other things that we haven't really seen before so far, which is in the offerings that we've seen to date, with things like bringing to bear huge compute that is in the cloud to give a different experience, and also the whole sort of leveraging the cloud to give never-before-seen scale experiences.
Those two things, we have not seen a great deal to date on that front.
Okay, GDC diagram time.
So, I think if there was sort of one diagram, one slide you took away from this talk, hopefully you'll take more than just this slide.
This would be the slide I think is incredibly useful to have insight into what cloud streaming, cloud gaming is.
So, when you're in a coffee shop, Starbucks. I think we all know that when you're close to the Wi-Fi access point, you get a better experience.
So if you're close to the access point, then typically if you're streaming videos or movies, they are less glitchy. If you're down on emails, it's faster.
Now, the reason that that's the case is that as you go further away from that access point, the interference, there's a whole range of things where your dataâ€¦ essentially gets dropped and it has to be retransmitted.
And that slows everything down.
And as you come closer to that Wi-Fi access point, the connection gets better and less packets are dropped.
And so your experience gets better.
So in other words, you're closer, good, far away, not so good.
The internet, of course, doesn't work that way particularly, but I think it's an okay analogy.
So in this diagram I'm showing, on the left hand side we've got your home setup, you've got a router, you may have some Wi-Fi, you may have an ISP router provided by the ISP.
But ultimately, you get that your traffic, your game traffic, going through a series of routers, a series of networks, and those hops between routers, where each of those hops cover a geographic distance, are the thing that introduces the latency.
And so you may have, you know, you may have 5, 10, 15, 20 hops before you get to your actual data center where it's going to answer your, you know, send the data back, whatever it is. And that's important.
I mean, just sort of roughly to give you a sense of it, crossing the US is kind of roughly 100 milliseconds. That doesn't seem, a tenth of a second, it doesn't seem very long.
But in the context of interactive games where your frame time is 16 milliseconds, it's a very big deal.
And so that notion of being close to the data center is very, very critical to having a good cloud experience.
You can't put your data centers thousands of miles away and expect any kind of decent experience.
It has to be quite close to the users.
And to give you a sense of that, I think, you know, I ran Traceroute from my home to Google, and just to get to Google's edge nodes, for me it was 10 hops. And that's just to get to the edge of Google's infrastructure, and then there'll be a few other hops to, you know, get to the actual servers themselves.
So there are broadly two approaches to cloud streaming, or game streaming.
There's sort of pixel streaming and command streaming.
So how does pixel streaming work?
Well, pixel streaming works by sending images using video technology.
The idea is that you read the user input, you run the game loop on the CPU, and then you render the game.
using a GPU that's been provided in the cloud.
So that right there means that for every single user you have using your service, they need to have a GPU assigned to them.
So that GPU renders the output, and then when that image is complete, when the rendering is finished, then you take that image and you encode it using a video encoder, which is itself a process that is quite compute intensive.
And you then stream those video packets to the user.
And then the reverse happens. On the user's device, those video packets are decoded into an image, and the process continues.
There's a couple of points. One, this idea that you have to wait for the image to finish before you can start encoding it.
So there's some sort of latency that gets introduced at that point.
Command streaming is quite similar.
So command streaming doesn't send images, it sends the data in order to create the image, in order to draw the image, not the image itself.
So you read the user input, you run the game loop, and then as your application, your game is drawing the image, those commands used to generate that image are captured and they are compressed and streamed to the user's device.
And it's on the user's device that the GPU on the user device is the thing that interprets that data and does the actual drawing to generate the image.
So the end result is the same, but it's a different way of delivering that content.
I'll go into more depth later on in the slides about command streaming as it sort of pertains to where we're going in the future.
So, a sort of a simple summary, I suppose, is that on the left-hand side, you have pixel streaming, where you have in the cloud, you have a CPU and a GPU for each user.
and that GPU renders the game and sends it to your computer or your device.
Your local GPU, which you have nowadays, doesn't really do a lot because it's just video decoding that's happening.
Command streaming is slightly different, where you just have a CPU in the cloud.
You're sending those commands to your device, and it's your local device.
Your local device's GPU that does the rendering.
So you might sort of ask, why would you want two different ways of streaming?
And I'm going to come back to that.
But I think in order to understand that, I think it's worth sort of going back in time.
So the announcement of Stadia at GDC 2019 was the first that many had even heard of the concept.
But cloud streaming and cloud gaming didn't appear overnight.
And there's quite a history.
And so I think understanding how we arrived here in cloud streaming and what those choices we made, both on technology and on the business side, explain more about how we've got to where we are today.
So I wanted to do a little bit of a timeline and go back and show you know who are the biggest players and what we know and learn from their technology and business stories.
So going right back and when I was doing these slides I mean someone did say to me you know 1980s you know most of your engineers weren't born in 1980.
But I think it's kind of an interesting observation that, you know, in the 80s you had x11 from MIT, you had news from some some microsystems, and they used command streaming in that they ran the applications in the cloud and then they streamed the commands to draw the output to your what was called a thin client.
X11 was essentially a command protocol.
News was a bit more groovy, designed by James Gosling, who obviously went on to write a language called Java.
It was PostScript-based, News was PostScript-based, in which you sent programs.
So you sent a program as a bunch of commands to draw what you want to draw.
So it's an interesting kind of piece and I, my post-grad time, rather than doing my post-grad time, I spend an awful lot of my time messing about with PostScript and news.
So moving on to the 90s, the big kind of thing, I suppose, was video on demand, VOD.
And the idea was you could choose your movies to watch, and then they were streamed using compressed pixels, VHS resolution.
There were billions of dollars invested into video technology and the delivery of video on demand.
I remember many times sitting in ATSC days, meetings, thrashing out how VOD and HTML was going to solve the world, save the world even.
Onto the noughties, the 2000s, I guess the big piece here that arrived was H.264.
H.264, you know, it's just an encoder of video, but it dramatically increased the quality.
And I think, you know, you probably remember before that, you'd be sending these MPEG-2 smudgy little sort of thumbnails that nobody could actually make head of tail of.
H.264 was a huge step in fidelity.
It was also in order to get that fidelity it increased significantly the amount of compute you needed to encode the video content itself, but it's a H.264 is a truly stunning piece of engineering You know from quarter-pel filtering to residuals. I mean, it's what's not to like So I think it's the other sort of piece, I suppose, was at that time was sort of wider adoption of of, you know, YouTube and Netflix, you know, started streaming in what, 2007?
And computers, I mean, you know, home computers, they started, you know, graphics cards became commodity devices. It wasn't whether or not you were doing graphics. All PCs, all home computers had graphics chips.
So.
2009, in fact, OnLive at GDC announced on stage that this would be the last console you would ever buy.
And the idea of OnLive was that you would run AAA games from the cloud.
the natural technology choice was to take the existing video stream-based solutions and use those to stream not movies but games, interactive games.
It streamed compressed pixels to consumers at HD resolution, so 1280x720.
And it also included, as you can see in this picture, a microconsole, which was the decoder, plus it looked after it, Fedja TV, plus it looked after the controller itself.
And...
You know, that was, I think, just to get a sense of how radical that was.
You have to remember that you went into the WBAR after that launch, and it was wall-to-wall, you know, self-certified domain experts telling you why it was impossible what they were doing.
And, you know, I've done the maths, it's impossible, it doesn't, you know, it'll never work kind of thing.
And yet, there were lots of people, not least the engineers on live, who had spent the last few years building this stuff and knew perfectly well it works perfectly well.
Soâ€¦ What we learned from OnLive was, you know, what were the sort of motivations and sort of expectations, I guess, that they had.
And it was very much around, you know, building, developers building a more sort of direct relationship with their, you know, with their customers, with their players.
And, you know, the fact that you didn't need to have a download or invest in PCs or consoles, you know, that was the idea.
It was kind of sort of, you know, make games more accessible in some ways.
So, you know, in summary, it was.
You were going to purchase games, regular games, and they were going to be hosted with OnLive.
There was no downloads, you could play anywhere.
You could play on any device.
There was also some added kind of interesting social features.
I think you probably remember there was the idea of sharing brag clips.
So you could take the last 30 seconds of your game session and you could share it with your friends.
which is kind of cool.
And there was CloudLift, which was the sort of feat of engineering that was offered to allow you to play your Steam library from your onLive account.
So this led to, you know, there was a whole history of OnLive, I think, I'm sure many of you know what happened, but it led to a wave of sort of early cloud gaming pioneers in some ways that were trying to emulate that whole OnLive piece.
So, you know, there's a selection I've got here of, by no means exhaustive, I think the interesting thing is that when you look at the history of cloud gaming, many you'll notice have either closed their doors, pivoted, or been absorbed into bigger companies, and you hear very little more about them.
So what happened?
I think to fully understand what happened during what I will call the rise and stall of cloud gaming, you need to look quite carefully at what the pros and cons of cloud streaming today are.
But before I do that, there's one entrance that I haven't mentioned that should have been, should have differed from all the others, because it wasn't a startup.
Stadia. So Stadia announced in GDC 2019.
That's a decade after OnLive launched at GDC, and it promised super powerful data centers, delivering blockbuster games, no need for downloads, any device would be supported.
And it was particularly, again, aimed at people who didn't have access to high-end PCs and consoles.
Does that sound familiar?
In many ways, Stadia was a carbon copy of the online playbook.
But I was personally super optimistic that when it launched, that Google did bring something quite different and new to the table.
I mean, first off was world-beating infrastructure and deployment expertise.
There was the promise of tight integration with existing services like YouTube.
Very ambitious aspirations they talked about, about delivering 4K and 8K resolutions.
And lastly, and probably most importantly, they brought an infinite money tree to pay for it all.
So, given all that, why is it not working?
Well, I think...
I think it's an interesting question as to why have most cloud gaming stream offerings turned to pixel streaming more than anything else.
Well, the pros of pixel streaming, it's a known technology from the introduction of VOD, Video On Demand. It's pretty easy to onboard content, reduced upfront engineering. Consumers have video players or things like video players already.
It plays on a potato and that is an interesting piece.
I mean, so the way video technology works, it's designed from the ground up to make it so that while the encoding of content may be fiercely expensive from a compute point of view, the decode of that content is very, very low compute requirements.
So it was very much this idea that you could run, you know, fantastic content on super, super low-end, you know, 10-year-old laptops.
And plus, you know, existing network transport, firewall videos are known quantity, I suppose.
So let's just look at the, you know, I mean, because given all that, you kind of wonder, well, that sounds great.
The cons, though, are kind of interesting and perhaps are more relevant to, you know, the history of cloud gaming.
You can't use CDNs and caching when you're doing pixel streaming.
And the reason is, is because it's interactive, you don't know what the next frame is going to be.
You can't sort of cache 10 seconds in the future because you don't know what the player is going to do.
So not being able to use CDNs and caching, which are in some ways the very heart of what the internet is built on, is a bit of a blow in some ways. It requires also ongoing GPU upgrades.
So If your model is you can turn your game up to ultra and you can run it, you know, at insane settings and I'm going to stream to a potato, that's great.
But ultimately, it does mean that every few years, everyone, including Google, are going to have to replace all those GPUs and get new GPUs.
So just to stay current, so you get a new game, the next AAA game that's using all the latest cutting-edge GPU features, and if your model is you can stream that at ultra, it does mean that you're going to have to replace all those many, many thousands of GPUs.
The other sort of piece, I suppose, is, you know, as we move towards increasing resolution, the egress, the amount of bandwidth you need for an 8K display is significantly more than a 4K display.
You know, that's a piece that it's not a now problem, but I think, you know, you can see coming down the road that that is going to be quite a challenge for pixel streaming.
It's worth talking about time of day.
And time of day is an interesting one.
So.
The difficulty with interactive content is, as I said earlier, you need to be close to your users.
You need to be physically close to them.
You can't, for example, from midnight to 5 a.m.
in the morning, use your GPUs, your expensive GPUs you bought in San Jose to serve the East Coast or your European customers.
You have to have GPUs in all locations in order to serve your customers.
And that's problematic.
You know, pixel streaming in some ways is a little bit like a gym subscription model, which is you kind of want lots and lots of subs.
You just really don't want them all turning up on January the 1st for the jogging machines, you know, because you're going to have a capacity problem if a lot of people turn up and all want to play games at the same time.
I think it's kind of telling in some ways at the real-time conference last month, a panel with a lot of luminaries, significant players in the cloud gaming and cloud streaming world, said categorically that Pixel Streaming is not and probably will never be a B2C offering, just because you can't predict user numbers, you can't scale on demand.
So, The fact that each user needs a GPU in the cloud makes it so it's difficult to scale.
Okay, the challenges of pixel streaming comes down to power and scale.
So for power, and I mean electricity, for cooling and running these things, the average cost of running a GPU stream is going to be of the order of 50 cents per hour per user.
Some people are more efficient, some are less, but it's of that sort of order.
And if you just pause for a moment and think as a business, if you are going to cost you 50 cents per hour per user to deliver content, that's quite a lot of monetization that you're going to need to do to make that a viable business.
So, notwithstanding Google's quantum entanglement work they talked about at the Stadia 2019 launch, it's going to be of the order of that price.
The other piece of this is scale.
So, if you look at the launch window for a AAA title, today it's in the multiples of millions.
So you go and look at Steam stats and see how many millions of people are turning up to playing some of these new games. You contrast that with the CCU capacity, how many people can simultaneously play on some of the pixel streaming vendors, and it's in multiples of thousands.
They're just, it's a huge expectation mismatch between the consumer, millions of consumers playing games and the quite limited scale that GPUs are able to scale to.
So, you say, wait, what about Netflix?
They serve millions of customers.
Well, Netflix is serving movie files essentially, and that is not the same as streaming interactive content.
It's just not the same thing.
You know, for starters, if you've got a movie, you can take weeks permuting all combinations of your encoder settings so that you can get the most optimal compression for this particular movie.
Because you have the whole movie, and you can run your encoder, let's say, four weeks to get the thing.
And it's all done offline.
Once you've done it, you save it in a file, you're done.
In cloud gaming, you have of the order of eight milliseconds in which to make those choices.
It's a very, very different kettle of fish. The other thing with Netflix, of course, is that you can use CDNs and caches. And so you can cache portions, segments of your movie around the country, around the world, so that they're close to users. And that is something that, again, is not available to interactive cloud gaming.
because of the nature of the interactivity.
You can't predict what the next image is going to be.
And lastly, Movie encoders have a notion of B-frames.
B-frames essentially reference, think of it as a cache warming for MacroBlox.
It's a frame in the video stream that looks forward to video information that's not yet shown, but will be shown in a short period of time.
For movies, you have that information because you have the whole movie.
for a game you clearly don't have the very next frame even. So B-frames are out and that has a pretty significant effect on both quality and bandwidth. Netflix, you know, can, as I say, they can take weeks and weeks compressing these things to save egress and it's a very different thing. I think the other sort of piece is with Netflix is, uh, If your movie starts 300 milliseconds late, it's not really a problem.
You know, it's just not a significant problem where you've got something that starts a few hundred milliseconds late, you probably wouldn't even notice.
And the last thing I think is that, you know, dash players, you know, the movie players, if you like, they themselves will cache seconds of content to completely hide any network jitter that you may have.
So Netflix, very different proposition.
If, you know...
Colleagues, boss says, what about Netflix?
Just say no. It's very, very different.
So, what do we need to do to succeed?
Well, I want to focus now on the future in some ways, and it's a very positive future.
I want to remind, just sort of a reminder, I suppose, is what we're talking about here is commodity cloud gaming.
For the audience of doubt, there are plenty of enterprise uses of pixel streaming, and they're quite happy to pay $5 per hour per user for a timed experience.
But that's not what we're talking about here. Here we're talking about something which is an on-demand commodity for millions of consumers.
So there are two sort of key issues that need to be addressed.
One is delivery, and two is content itself.
On the delivery side, the three pillars of this are cost, reach, scale.
So on a cost basis, if you want to have a commodity consumer facing service, it has to be pennies per hour per user.
You cannot build a viable business if you're paying 50 cents per user per hour.
It needs to be pennies. It needs to be a significantly small amount of money.
Secondly, there's reach. There's the whole idea of being, as I talked about earlier, you need to be close to your players, your users, your consumers in order to make this happen.
And that means that being able to spin up capacity close by.
when as necessary.
And I think, you know, that sort of scale piece of, you know, even today you look at, you know, a stadium, it's full of spectators, for example, and then it's empty.
And that's sort of the landscape I think we're gonna be looking at for cloud gaming.
That's kind of spiky and it has to grow.
And I think we've seen that already.
I think with some of the digital events that we've seen, by their nature, they are transient.
So, the other sort of aspect of this is content.
Taking existing content and simply sort of putting it into the cloud, take a game, you put it in the cloud, that's just not enough.
You know, reducing friction through instant play.
You know, and...
We all get frustrated when we sit down and, you know, want to play a game and it says, I'm going to do patches for the next 40 minutes.
Yeah, it's irritating.
But ultimately, you know, the friction that comes from Instant Play, you know, it's a great feature.
It's just not enough.
It's not compelling enough.
And the last thing I suppose is, you know, offering the same old business models that we used for physical goods as much as anything.
It hasn't really changed a great deal.
And using the same old business model is just not enough.
So we need to play to the strengths of the medium.
So what are those strengths?
Well, I think we have many kind of existence proofs that synchronous social has been very well served by cloud infrastructure.
So be it Facebook, Twitch, Discord, they're all cloud-based services and they work very, very well.
The other piece I think of the strengths of this medium of cloud is composable compute.
And the idea of being able to scale up and down dynamically to support different demands is something that's at the very core of elastic compute.
And it's something we have to leverage, not from a necessarily, partly from a capacity point of view, but also from the kind of experiences that we want to build.
And I think the other sort of, I've said, solved network, netcode.
You know, one thing that's interesting is once your game client is running in a data center, the...
the interconnect between and the communication channel between your game clients and the other players, for example, can be super low latency and super high performance.
I mean, the intra-data center connectivity, it starts at the bottom as very, very, very high, and then goes up from there.
So, leveraging the fact that you're running these experiences, these games inside the data center, so that you can make use of all those cloud services, but at super low latency is something I think is really sort of does play to the strength of the medium.
So, you know, it's about building cloud native experiences, and it's already happening today to a degree.
So if you look back on absolutely 2020 hindsight, what have we learned from cloud gaming to date?
I think certainly the early strapline of cloud gaming, which was throw away your console and trying to reproduce that console experience in the cloud, now looks...
a little bit short-sighted, I think, and it's essentially trying to cannibalize a different SKU by putting it in the cloud, instead of trying to create experiences which play to the strengths of cloud, rather than just try and do what a console does.
I think, as far as the do's are concerned, rather than the don'ts, thinking of beyond the traditional game mechanic, win mechanic that we've had with us for, you know, 30 plus years, and to sort of create unique experiences and thinking beyond those traditional audiences. So it's about not necessarily building experiences for gamers, but building it for non-gamers.
And so, you know, we have these things and we see examples of it, you know, today of having game worlds.
which you're exploring in-game content for entertainment.
And it's creating a cohort of people that are spectators and they are sort of orthogonal to the player mechanic.
They're completely sort of orthogonal to the player mechanic.
You can have great player mechanics and you can have spectator mechanics and they're not necessarily the same thing at all.
The difference is the spectator mechanic is hundreds of times larger than your player mechanic.
I think the other piece is leveraging, as I do, is leveraging Cloud Compute and AI.
So again, as I said before, that when you're running your game inside the data center, that means you have available to you a whole bunch of services and bringing to bear compute that is super low latency and can be it fromâ€¦ you know, deeper behaviors to, you know, more satisfying kind of cinematic experiences, to, you know, even faster content creation of using AI. And there's a bunch of stuff out there already that does that. But what changes, I think, is when you're running the game itself in the data center. So you're not doing that back all the way back from the homes.
So...
The two things I think we need for a future of cloud gaming is, one, you need it to be business viable, and secondly, it needs to scale with demand.
So before we look at where we might go with cloud gaming, I think it's worth to revisit how we might deliver to consumers.
So justâ€¦ This is a techie slide, it's just a slide.
We'll get back to more broad stuff afterwards.
But I think it's interesting to look at command streaming, because I think when I was talking earlier, I was talking about how command streaming works.
And I just want to take a little small step deeper into the tech, because I think it helps unlock a viable business and scalable elements that we need.
So the way command streaming works is you choose your stream's visual fidelity based on each user's device GPU.
In other words, the visual fidelity you get is based on what GPU you have, and so that different people with different GPUs get different, can have different experiences.
It can utilize caches and CDNs, which is obviously good for reducing egress.
command streaming workloads are containerized, which means you can dynamically scale.
They're also kind of obviously cloud diagnostic because you're not chasing the availability of GPUs, you're chasing the availability of CPUs, and there are hundreds of millions of those.
So you can get close to the user.
And again, back to the earlier is, excuse me, is being close to the user, reducing that distance is an important part of giving a great environment, a great experience.
So less hops, good.
You know, the transport uses a sort of BBR style, you know, it's a round-trip time congestion control.
But interestingly, it also accommodates having burst mode chunking a bit like dash players because of the nature of command streaming not being pixel-based.
I think most significantly of all is the cost to serve.
The CTS for command streaming is in some sense, you can see it as being shared between the data center and the user device.
So, what does it all mean?
Well, command streaming, I think, can enable creations at massive concurrent engagements, and they can be built from the ground up.
I mean, so we know that a little bit about the technology behind it.
There's plenty of existence proofs of command streaming delivering content, and there are absolutely examples of existing content running poorly.
So we need to be designing these experiences from the ground up to, you know, play to the strengths of cloud.
Look at those new spectator mechanics that are beyond traditional gamers.
How do we bring in different people to enjoy that experience?
And playing to the strengths of command streaming, which is the way in which I think we can deliver at scale.
So that I think leads to a lot of benefits.
And as much as anything, it's low friction access to synchronous social experiences.
It's bringing non-gamers, as I say.
The business models to monetize non-players is something that I think is a really exciting and...
something very different from the slightly sledgehammer thing we've done up to now.
And it's moving beyond games and the sort of win mechanic we tended to do for our games.
So the challenges are that, you know, moving from experience to experience is going to require a whole bunch of interop between content vendors.
You know, and that means things like, you know, shared industry standards.
What do we do about walled gardens?
You know, the reality is that a lot of walled garden experiences that are great out there, you know, how do they get incorporated into something where I can move seamlessly from one experience to another?
And also, I think it's about supporting developers, about how they create for cloud and command streaming.
There's also, I think the challenge is that there's a reluctance to move away from expensive pixel streaming infrastructures because they're familiar.
So if we look today, there are quite a few games out there that have spectator modes.
The next step will be having thousands of spectators viewing the action and using cloud streaming.
So again, you've got a player mechanic running and an orthogonal spectator mechanic that's running completely orthogonal to that.
But in their thousands, what does that mean?
Spectators become a cohort, as I say, and they have their own play mechanic.
It's about meeting in virtual spaces, it's about moving seamlessly from one experience to another.
And I think, you know, it's...
If you look at the trend right now, it isn't strictly come on streaming.
It's more sort of metaverse style of trying.
What do we need to do to make it so that we can move between these experiences without, you know, and do it, do it at a huge scale?
So I think there's a whole bunch of interesting companies that are doing great stuff.
You know, there's, you know, Unreal, Hadean, Improbable.
I mean, it's interesting that game engines in some ways are misnomer and increasingly it's a collection of tools for powering, you know, interactive experiences.
High Fidelity I think is an interesting one, I'm sort of calling out in some ways because they're looking at the audio and how do you deliver spatialized binaural audio to massive 3D audiences and experiences.
The TIFCA guys, you know, again, the whole client to cloud revolution work they're doing, and I urge you to go and look at some of the stuff they're doing about how do you in practice, you know, solve some of these interop problems across a wide range of industries and platforms.
And I'm excited by, you know, mainframe industries, you know, the things like scavenger and from midwinter and entertainment.
Avakin Life, Manticore, Roblox, I mean all these guys are doing incredible stuff with regard to bringing in a whole bunch of new participants that weren't there before.
I think there is a piece here, though, about, you know, you can't join these things unless you've got the wall garden installed.
And, you know, we've all read that.
Well, please ensure that you download, you know, the game well in advance of the concert, I think is the phrase.
But we can stitch these together as a sort of heterogeneous metaverse experience, I think, you know, with things like cloud gaming.
So my key takeaways, I suppose, is content needs to be cloud native.
We need to play to the strengths of cloud compute.
We need to design for millions of consumers and beyond the traditional game mechanic, wind mechanic, and even the gamers that we've traditionally targeted.
And I think there's a huge opportunity for transactions between participants.
What does that actually mean?
So content delivery needs to scale to consumer-level numbers in order to deliver these kinds of experiences.
So, thank you very much.
You know, if you have questions, you want to chat about stuff, feel free to drop me a line.
You can find me on LinkedIn.
Thank you.
