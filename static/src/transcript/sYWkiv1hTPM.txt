everybody. Good morning. Jeez. I've not had coffee yet so it's good to see that you have. My name is Mark Barrett. I am currently independent about two weeks ago. I'm formerly from PopCap and this talk is a hitchhiker's guide to rapid prototype.
It is designed for those of us with limited money, opportunity or skill set who want to make games anyway.
A little bit of a heads up, we have a lot of ground to cover and only a little bit of time.
So we're going to go pretty fast.
As soon as I figure out the button to push.
So I got my timer.
All right.
Let's do it.
Overview.
about me. We're going to define a rapid prototype, talk about setting a goal, vision, process and conclusion. Seems easy enough. About me.
Chapter 1. My road to games is almost a perfectly straight, boring line. I grew up in Wyoming. I was surrounded by snow. I played a lot of RPGs. I pretended to make games in Mario Paint. At some point I read a magazine that there was a school where you could learn to make games. So I headed out to Seattle. I went to DigiPen Institute of Technology and graduated with a Bachelor's in Fine Arts and Animation.
a fine arts and production animation. They like long titles there. And you pay for it. I have worked at places like these. I've been in the game industry for a little over ten years now.
And I have worked on games like these. And today we're going to talk about, well not any of that actually.
We're going to talk about game jams. A game jam, for any of you unfamiliar, I doubt there is anybody but just in case, it's when a bunch of people get together and plan and design and create a game in a short span of time. Typically anywhere from 24 hours to a week.
And my very first game jam was at PopCap back in 2010.
And on that one, everyone was given a randomly generated theme.
And our team got unpleasant horse racing in the sky.
And this is how I thought that might look initially.
and this is what it turned into, a cutely violent game about jumping on horses and pushing them into grinders. And this is the crazy part, though, is somehow that won best of show and PopCap actually released that game for a little bit of time.
That experience to me was just like the speed, it was a 24‑hour game jam and the speed and just working with people I had never worked with before and getting a chance to do everything got me hyped up. And I started going game jam crazy. I started making as many prototypes as I possibly could. These are a few. I'm going to show you this one. It's called Cat Butt.
The point and the fun of this game is in trying to get other people to play it. You dig around in a cat's butt looking for treasure. It was not successful. And then this is a totally different take on a game. This one is called Boy or Girl and it's a game about the limits of binary labels. So you have 60 seconds to look through random images and you can choose to label them.
the labels that you're given are boy or girl. And at the end, you get to see how many images you labeled. And that's the whole game. And to get through all the images, you have to really race. You have to go quick if you want to get through all of them. But if you pause on any image for even two seconds, the labels will start to fade. And once they're gone, you automatically progress to the next image. And you can play the whole game this way.
just simply accepting things as they are. And these prototypes and a lot more that I can't show you, led to me having an opportunity to work in the former R&D department of PopCap called PopLabs. And when I was there, it was a great opportunity to work with the changed the way I viewed careers in the industry. I thought there are a bunch of ladders, we all choose one, we start at the bottom, we climb to the top and the optimal strategy is to just stay in your lane and be the best you can because to a large degree that's how our industry values us.
But through prototype, I discovered the intricate and exciting ways that all these different disciplines weave together.
And it let me be more than an artist, and more than a designer.
It let me be a diverse and resourceful person.
And to me, that is just as crucial as intense focus or incredible technique.
So today I'm gonna share some of the stuff that I've personally found to be effective to get started.
prototyping and avoid some of the very, very common pitfalls. My hope is to encourage all of us as individuals and as an industry to start thinking of prototyping as a form of cross training. The benefits are hard to judge and slow to gain at first, but with each experience I think it compounds in a way that can improve the satisfaction, productivity and overall performance of anybody.
So with that, what is a rapid prototype?
I think we can all agree it's something we'll do quickly.
It's a rough draft, maybe even a first version.
Usually just an experiment, and I think that's a general view.
Let's go a step deeper.
You've probably heard of this.
It comes from the book The Lean Startup by Eric Ries.
He refers to a prototype as a minimum viable product.
And the idea is to do as little as possible to get that product up and working.
And that sounds good, but what I found is if you approach a minimum viable product literally, then you risk focusing too much on what you're trying to make and not enough on the reason you're making it.
So take a look at this. Both of these are valid ways to build, measure and learn about a prototype. And look, they both end up positive. And you have all at some point, I'm sure in this GDC, heard the mantra fail fast. Well, I can tell you from experience, if you go about it the way they did in the top one, where the end justifies the means and your focus is only on building a good product in the end, then I think you'll get shut down long before you reach step four.
On the bottom though, the focus is always on the interaction.
Every step trying to produce a needed behavior.
And I found this to be a really, really helpful distinction.
So that's the one that I personally use, minimum viable interaction. And I feel like I should say this, all of what I mention prototyping is going to be in the context of games and all of this is opinion from my experience that I give to you as information. I hope you will find your own point of view and I hope you will give a talk on it and I will go and learn new stuff from you.
Setting a goal.
Setting a goal is an outcome you desire that motivates you to action.
A goal without action is not a goal, it's a wish.
Seems simple, but not really.
To achieve a goal, we all know we must act, but how must we act?
That depends on your goal.
If your goal is to be poor, throwing groupies into a pond is exactly the right action you should take.
If your goal is to defeat the forces of evil and restore balance to the land, then throwing your money in the water is a curious decision.
Whenever I'm deciding how to act on a goal, I always start by asking this question.
Is this urgent or important?
Urgent is what you are currently trying to accomplish.
And these choices can range from totally mindless to very stressful.
Link here is pondering, should I smash this pot or grab that rupee?
That is an urgent decision.
Important goals are more like a destination that you're headed.
They're the long-term manifestation of something deep inside, your core values.
Link hoists the sword and says, I will wield this master sword, and with it smite all who oppose me.
Uncle, you shall be avenged.
If you have an important goal, then you have a direction.
And that direction will tell you how to act and what to do.
And the only thing stopping you is all the other goals that you want or need to do. And this is a very typical phenomenon. It's called putting out the big fire. It happens on a daily basis.
And instinctually, without thinking, we are programmed to put out big fires because big fires are very dangerous. But fires used properly are also an amazing tool. If you can control them.
So when I find myself working on a goal that usually I don't remember setting, chances are I'm focused on something urgent.
And if the goal is urgent, I resist, I resist my immediate impulse to stamp it out.
I don't react to it, I try to control it.
And the way you do that is looking at it creatively, trying to see what can be done to nudge it in the right direction.
How can you turn this chaos into something of value?
and doing this will help you build up your momentum and your focus which will have a dramatic impact on what you're able to achieve and how quickly you can achieve it. So for the first place you want to start is that clear direction, your important goal. And a great tool I found to get my long‑term goals nice and clear is the smart checklist which I have Illustrated for you here in rainbow color because it's so exciting.
Smart goals are specific, precisely what is to be accomplished.
They are measurable.
How will progress be visible and tracked?
Attainable.
What actions are needed to make it happen?
Relevant.
How is your goal meaningful and realistic?
and time bound. What is the estimated time for completion? You use this and you write your goal one line at a time. So let's say I'm making a goal, a smart goal for prototyping. Boom. I will create a rapid prototype for a game that users will be able to test and offer feedback by signing up for and participating in a game jam. This would make me a more resourceful dev and will be completed in one month's time.
Goals are the motivational foundation that lead to your choices, and your choices lead to your actions, and your actions lead to your outcomes.
So I urge you, take the time in the beginning and the care to make your goals specific.
Write them down, make them visible, so that when the urgent comes along, you'll know what to do to get your MBG, your most valuable goal.
All right, strategy.
who thought I was going to do chess.
I didn't, I went football scrum board.
A strategy is a plan of action carefully designed to enable us to achieve our goal.
It accounts for, well a good strategy will identify all the targets you want to hit.
The deliverables, features, functions, tasks, deadlines and costs involved.
And then you narrow those down into something called scope.
Scope is the focus that you can hit.
And scope is a delicate process.
Any attempt to rush or phone it in, and your project will likely die a grisly death or spend the rest of its development trying to outrun the consequences.
And bad scope is at the heart of so many failures that I feel like I need to just talk a little bit about how that happens because it sneaks up on you. Bad scope is almost never something you do on purpose. Usually it's the result of your big loud ego being its totally normal and healthy self.
Ego, though, is a very blunt instrument that has a way of disregarding anything it does not want to consider.
In particular, it has a blind spot for any barriers outside our bright, shiny goals.
And this is a problem because those barriers absolutely have an impact on whether or not you're gonna achieve them.
And if you're unable to recognize or acknowledge them, then you're gonna have bad scope.
So your ego is just simply not equipped to handle barriers.
It's too fragile.
But you know who is?
Humility.
Humility is quiet and sensitive.
We don't listen to it near enough.
But humility can feel out your internal barriers, things like attitude, emotions, understanding, creativity, skill.
And humility will spot external barriers, things like time, resources, location, opportunity.
competition.
And the thing that humility realizes is that acknowledging your barriers isn't gonna keep you from working at places like these, it's gonna keep you from trying to match the level of production at places like these.
So I chose all these images for actually a very specific reason, they are from a short film called Rejected by Don Herzfeld, if you haven't seen it, look it up.
In the film he has one goal, it's to make commercials for different companies, but Don Herzfeld is a very smart man, his internal barriers are that he has no training as an animator, he can barely draw more than a stick person, and he actually has zero internal desire to improve or be commercially successful.
His external barriers were that in real life, when he made this, he had no job, he had no money, he had very limited time, and he used crappy equipment that no one else even knew existed in the school where he was working.
And that sounds like a fantastic recipe for failure.
And in the film, it is.
All of his cartoons are rejected, their creator loses his mind, and the animated world collapses in on itself.
And it's on purpose.
To date, this weird guy who basically hates money, works by himself and draws stick people has created six short films, two features, a couch gag for the Simpsons, and has been nominated for an Academy Award twice. How many people that work at those other studios have done something like that? They have their own barriers, by the way. Luxury is one of the biggest barriers you will ever face.
He had barriers and he used them as part of his creation instead of a reason to stop, or even worse, a reason not to start.
This is a great strategy.
That is an amazing consideration of scope.
So when you're coming up with what you're aiming for in your prototype, these are some words of wisdom that I lean on. It's a quote by Arthur Ashe, start where you are, use what you have and do what you can. Don't try to be somebody else that has a whole different situation. Listen to your humility. All right, vision. Vision for me is two parts, game and design.
The first part is the game, a game concept, generally a specific imagined solution.
And it is designed to capture a theme, it highlights a goal, and you want it to describe the user experience and get everybody inspired and desirous to make that thing.
And it typically comes in the form of either a description or a piece of art.
Or both.
So let's say I was designing Pac‑Man, my game concept might be a game about eating everything and avoiding ghosts. Or if I really wanted to persuade you, maybe I would craft an awesome image such as this.
And the second part of vision is submitting a plan for how your game concept can be executed. This is generally done with rough design mockups of possible implementation.
And these should be quick and dirty, easy to understand, correctly formatted to the parameters of whatever platform you're making your project for, and appropriately scoped. Thank goodness we covered that.
So the word possible is really key here.
These are not final blueprints to be slavishly followed.
They are educated guesses for a place to start so that you can hit the ground running.
And to me, vision is the foundation of game design.
The obvious but frequent pitfall is to spend too much energy on the first half and not enough on the second.
So this is a tool that I found to help keep those in balance.
I discovered this through a blog post by Charmy Kim on Gamasutra.
It's called A Core Diagram, and the idea is to approach understanding and evaluating a vision from the core app.
So for game design specifically, your core mechanic is where it all starts.
This is the purposeful interaction that occurs most frequently.
and layered on top of your core is the secondary mechanics.
These are the interactions that happen less frequently.
Progression is the conditions required for progress, of course.
It's a system that envelops the mechanics through a required series of conditions to create change.
on a holistic level. And narrative puts all the inner layers into context, usually through a theme and overall goal. And how you fill these layers and the degree to which they relate to one another will have a dramatic impact on your game and on your vision.
So let's go back to our Pac-Man example.
This is how the core diagram looks when we plug in my game concept.
Core mechanic is eat, secondary is chase, progression is clear mazes, and the narrative is eat or be eaten.
Is that right?
If you close your eyes and you imagine yourself playing Pac-Man, is eating the core mechanic of Pac-Man?
core mechanic of Pac-Man is move. If you do not move, then you do not eat. If you do not move, you will lose. Eating is a secondary mechanic. Knowing what your core mechanic is can help you figure out what that viable or that minimum viable interaction needs to be. And knowing that can go a long way in helping you sketch up some simple explanation for an implementation.
a possible implementation of design.
In this case, it's the correct one.
And in my opinion, you need both parts to form an effective vision.
Okay, let's talk about process.
I think process gets a bad rap.
And the reason is that some people...
that for some people, like project managers specifically, it feels very comfortable.
And for the dev team, it can be totally rigid and uncomfortable.
And that's because there's just no one size fits all solution.
But that doesn't mean you shouldn't do it.
This is especially common with small teams or individual developers.
I like to imagine process as the invisible tracks on which the development train runs.
It makes everything faster, a lot less bumpy.
But the thing about process that makes it feel merciless is it just, it doesn't care what's most convenient to you right now.
It cares about sustaining a development over time, keeping it moving in one direction.
It's the small, tiny sacrifices that you make for the greater good, exactly like exercise or eating healthy.
And if you don't like the processes that you've worked with before or the process you have currently, find another one that suits your needs. I think processes are an inherently personal thing that we try to just pull off the shelf. Take the time to decide or to explore and decide on what parts of different processes are working for you.
These are a few that I like a lot and I borrowed liberally from. Agile development in some form is what you're likely to find at just about any professional game studio. Lean startup method we already talked about by Eric Ries. It centers around minimum viability and validated learning. But the one I'm most excited about and the one that I just tested recently is called Sprint. It's by Jake Knapp. He's from Google Ventures.
What I like about this method is that it's a week long.
And you build your prototype in one day.
How can that not inspire you?
So I gave it a shot, and I tracked my results.
Not exactly, I needed a little break in there.
I took nine days. Also he worked with a team of seven people. I did it by myself. And real quickly before we wrap up, because I only have five minutes, I'm going to quickly show what these five steps look like in practice. Don't worry about the details. If you want to know those, just check out the book or look online. He has all kinds of YouTube videos. Okay, so this is make a map and choose a target. Here I'm outlining my goal, the questions I want to answer and what I want to build, which is a playable prototype. Makes sense?
I decided to make a game about working at a dog rescue, a mix between Tamagotchi and Papers, Please. What could go wrong? These are just some rough sketches of possible implementations. I used to be a professional artist.
This is a good level. You can do this. Don Hertzfeld. These are the possible solution sketches that I came up with. And again, I drew nothing here. I grabbed all this from Google images. Even the dogs. I did no actual drawing. Just laying things out in Photoshop.
Then to build the interactive prototype, I used a program called Proto I O. I used their free trial. You can also use Balsamiq. It's free. It is a wire framing program that lets you create two scale interactive testable and shareable design mockups in a really short amount of time without any coding. And I sent this version that I made out over Facebook.
and I asked for feedback and to my very pleasant surprise, a programmer I knew wanted to help me take it a step further. And he put a few weeks of code on it and then I conducted user testing through anonymous surveys made possible by SurveyMonkey, also free. And then I scheduled five half‑hour user tests with people that represented my target audience.
And that is the prototype I'm currently working on.
All of that took about a month to get the code and everything in there.
So in conclusion, here we are.
I would say be resourceful, not a resource.
These are all fortune cookies, sorry guys.
Optimize for interactions, not ideas.
I hope somebody makes fortune cookies.
Goals are your foundations, make them strong.
Scope with wisdom, not wishes.
Vision is a lot of work, not just an idea. And process is necessary. But if you remember only one single thing that I said in this whole talk, go do a game jam. Seriously. None of this, everything I showed you, everything you've done at GDC so far will compare to what you learn in 24 hours of actual experience. The two most popular are Ludum Dare and Global Game Jam. If you want to find out more or start your own, go to itch.io and click on the game jams tab.
and that is all I have. Thank you so much. I'm sorry that was so fast.
If you want to get a hold of me, that's how you do it.
