Hello everybody, today I'm gonna talk about the theory and practice of cameras in side scrollers and 2D games in general.
Side scrollers is just a private case of what I'm gonna talk about.
There are a lot of parallels to 3D games but we're gonna focus on what's interesting to me specifically for the game that I'm working on which is Mushroom 11.
I've been working on this game for the past three years and still not ready.
As you can see, there are quite a lot of issues with the camera that needs to be tackled, which kind of threw me into this journey of trying to figure out how to do proper camera systems.
And the result is what you see here, and I'll talk a little bit about that later on.
Scrolling, when we have more to show than what the screen supports, we'll obviously need to leave some things out of the screen.
But when we start moving the screen, there are some neural aspects that we need to figure out.
So first of all, let's talk a little bit about the neural aspect of scrolling.
We view the image.
through our eyeball and the image is presented on a set of cones and receptors in the back of our eyeball called the fovea centralis, the parfovea and the perifovea.
The centralis is in charge of the...
center of the image, gives a very sharp image, but kind of low frames per second, so to speak.
There's a secondary belt, and then the third and biggest belt with the most cones is the periphobia, responsible for the peripheral vision.
It has a very low density, but great depth of color.
But in order to get all this information from such a huge set of receptor, it actually compresses the images into patterns.
And the patterns are visual textural patterns as well as motion patterns and changes in velocity.
That information is fed like other pieces of signals from the brain through our thalamus.
And then it's sent to the visual cortex as well as the amygdala.
The amygdala is the part of our brain that's in charge of...
emotional reactions and inhibition of those reactions of fear and anxiety, what we call the fight or flight.
By teaching our brain to ignore those signals, eventually our amygdala knows to ignore those signals and just let the visual cortex take charge.
And when we're talking about visual patterns in our peripheral vision, it could be something that just reminds us of something scary that we've seen in the corner of our eye, could be something that moves really fast, or it can also be the entire image, which is the background of the screen, moving really fast.
On top of that, we have what we call the vestibular system, which is our internal spatial orientation balancing system, allowing us to.
basically stand straight.
And when this thing is coupled with the vision, it basically gives us a full orientation of where we are, how to walk and whatnot.
Now, the amount of information is given to our, sent to our brain, we try to minimize that information.
In fact, even if you try to move your head really fast, you'll see that your eyes will use what we call the vestibular ocular reflex, trying to minimize the amount of changes in our view.
We are not wired to see the image move really fast.
In fact, when we have any conflicting sensory signals between our eyes and our vestibular systems, then it may lead to nausea and discomfort.
Of course, this, everybody knows it when they, well, some people are very sensitive to reading in a moving car, and this is even more dramatic when playing first person games or virtual reality, obviously this is much more dramatic.
So.
How do we properly scroll?
I split it into three main groups.
Tension, interaction, and comfort.
Attention is making sure that all the necessary gameplay elements are in the frame.
Interaction, how do we make the cycle that we teach the amygdala to know that those changes are predictable and tightly bound to the controls.
And those changes, as they are made, and they have to be made, they need to be easy on the eyes.
Those, of course, are all part of the same equation.
They all fit into each other.
So throughout this presentation, I'm gonna go through my own personal nostalgia of games all the way from the 80s, how they started working with scrolling, as well as the indie games of today, where all the innovation and the care and attention that you can see in.
Only in indie games, really.
So, how do you scroll?
First of all, obviously, you need to follow your character.
So, if we go back to what's considered the first real scroller, it's a game called Rally X, from 1980.
It did the only thing that you could really do, which is follow the character.
I call it position locking.
The camera moves with the character.
interesting here except for the fact that scrolling at the time was really, you know, difficult feat to achieve.
There were issues with the fact that the resolution was really low, the CPU was very slow, there were segmentation issues, you couldn't display more than a few sprites per line, bunch of issues.
So this technically is a huge breakthrough.
By the way, you'll see that throughout this presentation I'll present my own terminology.
just from my own reference, and I'll definitely post it later.
Moving on, the game called Kung Fu Master used the same idea, only horizontally.
You just lock to the character.
As the level ends, you'd snap to the end of the level.
Obviously, this is so obvious that I'm not gonna really talk about edge snapping.
I just wanted to, you know, just mention it quickly.
Just a quick shout out to Takashi Nishiyama, the guy who made this game.
He made this game between making Moon Patrol two years before and Street Fighter 1 three years after.
So this technology still works very well today.
Some games really benefit from this kind of behavior, especially when you have a smaller character, it doesn't move really fast.
You need to see everything left and right, up and down.
Terraria is the perfect, this position locking is the perfect technology to use here.
How do we curb camera motion in order to eliminate those unpredictable bumps?
If we go back to 1981, there's a game called Jump Bug that is still considered the first platform.
It introduced a system that I call camera window, which allows the player to move within that window without moving the camera, without scrolling.
Again, scrolling was a really problematic thing to do with the CPU and the resolution.
So you would move freely, but as you touch the edge of the window, it will start pulling the camera with it.
So this system is...
Pretty problematic if you think about the fact that you're moving away from that window, which leaves you very little room to see what's ahead and what's up, and the exit of the level is up.
One way you could do it is like they did with Rust and Saga, one of my favorite games of the 80s.
They just placed the window off center, allowing for 50% view forward and downward.
This is great, but the problem is that when you start backtracking, or if you jump and end up in the middle of the window, you'll have even less room to see what's coming ahead or above.
This system is still used.
In Fez, it's used perfectly.
In fact, the system is maintained, the horizontal window is maintained even throughout dimension shifts.
And we're gonna talk a little more about this game and the camera system here.
So we talked about, when we showed Raston Saga, we showed that the character could end up in the middle of the window.
How do you snap it so you center the player back into the center of the window?
My favorite game of all time, if I may say, is Shinobi from 1987.
It used a horizontal locking system, but vertically it had a really long window.
because it fit the game perfectly, the player is pretty big on the screen, the jumps are really high.
So they tried to keep the window as high as possible.
The problem is that the player would potentially be off center really quickly.
So what they would do is every frame when the player was off center, they would start slowly to focus back onto the player, keeping you always in check.
And we're gonna talk a lot about the work of Shigeru Miyamoto, but going forward a little bit, Super Mario World was the first one that I noticed that introduced platform snapping.
And in this game, they really tried very hard to maintain the minimum amount of camera movement.
And in this case, the window is the entire screen.
The camera window is the entire screen.
It will only move when you push the, edge of the screen, unless you land on a platform where it would quickly snap.
I think this is obviously a brilliant idea.
Some find the landing and the snapping a little abrupt, but that's the first one that I noticed that used it.
You can see a more regulated version of this in Rayman and throughout the Rayman franchise.
You still see this today.
Awesome and Outs from 2012 use the same technique.
Obviously there's always a problem when you have characters that don't land on platforms.
So like the jet pack character would be pre-snapped, basically keeping it position locked both horizontally and vertically.
the motion that we have to do, either horizontally or vertically, or when we touch the edge of the window, how do we smooth that motion?
And may I remind you that in the 80s, we had a very low resolution.
We're talking about 256 by 240 at the NES.
So the pixels there were huge.
Today, when we're talking about pixel art, we can, we need to remember that, The pixels that we use actually contain a lot of screen pixels, and that's a luxury that people in the 80s didn't really have.
So, for example, if you look at Pac-Land from 84, which this is actually considered as their first real platformer, it didn't really do anything special with regard to smoothing the window.
It just locked to the position of the player, but the player actually created some sort of pseudo physics, and that physics was smoothing the camera.
on its own.
When we're talking about pseudo physics, obviously, even today everything is pseudo physics, but in this case, we didn't have, they didn't have damping and friction, so we're talking about accelerate from one pixel per frame, two pixels, three pixels, and so on, then slowing it down back again.
Now I'm gonna do a quick shout out to Chigero Miyamoto.
And remind us his first early experiments in scrolling.
In 1984, he made a couple of games that introduced scrolling in some way.
One of them was Excitebike, which the scrolling was kind of the background of the game.
It didn't really have a lot of, the game was not about scrolling.
You didn't really have a lot of control with scrolling.
Devil World, from the same year, had...
everything to do with scrolling.
In fact, the game, the devil, was controlling the scroll in this really weird Pac-Man clone.
And this game was, I don't know if it's considered one of the best work of Miyamoto.
In fact, due to some weird religious iconography, this was denied release in North America.
And the reason why I'm reminding this really quickly is that I don't know, more in a philosophical way, if you look at some of the early works of the geniuses of today, seeing some of their more mediocre work is kind of encouraging to everybody.
And I do that a lot sometimes when I feel down.
Maybe the biggest accomplishment, and this is completely my own conspiracy theory, is that I believe that there's some cross-reference to bubble bubble.
from this, but I'm not sure, it's not official.
All right, so moving on to 1985, Miyamoto actually did his first true experiment in scrolling, and in Super Mario World, the character was moving really, really fast.
And if you think about it, this is a one-sided window.
You could backtrack for the half of the screen.
And then when you would go back and push against that window it would move from zero to maximum speed in one frame.
And that would feel very uncomfortable.
What he did is something I call speed up push zone.
So it would, as it hit a certain point on the screen, it would start spinning it up.
So when Mario hits that anchor point, the camera's already in full speed.
And this thing, I actually didn't notice it for 30 years because it's so brilliant and so clean.
And I think this is just a genius solution.
Another solution of the same idea, but kind of the opposite, is what they did with Metroid.
They had either a horizontal or a vertical window, depends on the level, and it allowed the player to step out of that window and then start catching up with the speed of that window.
So the character would always be a little bit, a couple of pixels, depending on the speed.
out of that window, but that worked really well.
It didn't leave a lot of room to see what's ahead, but that's the problem with camera window in the first place.
When you're talking about smoothing, of course, when there were more pixels to play with and use of floating point became a little more easy, you can start doing LURPing, which stands for linear interpolation.
The idea is that you would, in every frame, you would reduce the distance.
between the camera and your character by a certain factor.
They did it with Donkey Kong Country.
That's the first game that I've noticed that they did it properly, but they do it ever since.
You can see it in almost every game of today.
Super Meat Boy uses it.
It's one of the best ways of easing the camera motion.
If you think about it, lerping is ease out.
There's another thing which is ease in out, if you know that term.
The idea is that you ease the camera into motion and then out of motion again, by applying some actual velocity to the camera itself, using for example, a smooth damp function.
It's used in the amazing Never Alone game from 2014, and many other games of today.
It works very well when you need to have some drama and narrative and smoothness that, some games really benefit from.
And if we go back to pixel art, what they did with, they're doing with Hyper Light Drifter, coming out soon, hopefully.
They actually have true pixel perfect art that they present on a canvas, and that canvas is moved on the true screen pixels.
you would still have the pixel perfect big game pixels, but the scrolling is the only thing that breaks that pixel perfect behavior by applying the scrolling on, true scrolling on the canvas.
So framing, how do we make sure that the player sees everything they need to see?
So, auto-scrolling, as you can see, is not exactly part of this presentation because I feel like, well, if you don't have control of the scrolling, it's a different kind of question.
But what they did with Scramble, which is also considered one of the first scrollers, it gives you a good sense of what the player would do if they had true control, full control over where they want the player to be.
you have the entire screen, you have things coming at you, you wanna be as far away from the edge as possible, but still leave a little bit of room behind you to make sure that nothing creeps up.
And that's more or less what they did with Pac-Land.
Instead of locking it to the center like they did with other game like Kung Fu Master, they put the anchor point a little bit off center because that's the principal direction of the...
of the player.
You would still be able to go back, you don't do that a lot, but you still have a little bit of room.
The idea in general is that the player would want to go to the center, and you'll see that throughout the presentation in general.
You always want to aim towards the center.
Another way, going back to 1981, is what they did with Defender.
They had what I call the dual forward focus.
You had forward focus that's based on where you're heading, as it...
As soon as you switch, it will immediately start snapping toward the other anchor point.
This game is way ahead of its time.
It took a lot of years until they actually figured out how to do this properly.
This worked really well even back then.
Okay, one second.
Technical difficulties.
Sorry about that.
I'm running off Google Docs.
Nightmare?
Okay.
Alright, let's see if we can do this.
Bear with me.
Alright, so.
It's okay?
For now?
Trying to connect, okay, cool.
So, going forward a decade or so, Bonanza Brothers is another type of implementation of the same idea, but unlike what they did with Defender from 1981, they, instead of having the switch abrupt and immediate, they actually made the change based on your walking speed.
If you look at the character at the bottom, you would see that the switch between the anchors would be based on the speed of your character.
And you wouldn't even notice it when you play, unless you start placing some lines over there.
So, going back to Miyamoto, Again, I'm gonna talk a lot about this Super Mario World.
It had a lot of interesting ideas, but this is my favorite one.
It also had a dual threshold, but the true genius here is that it actually let the player backtrack a little bit before switching to the other anchor.
And this is perfect for this kind of game because this game actually allowed, kind of encouraged the player to do all sorts of back and forth motion.
So instead of every time that you switch back and forth, it would switch to the other, or start moving to the other anchor, in this case it actually let you walk a significant amount before hitting, switching to the other anchor.
A game that does this today, not exactly this, it's closer to what Bonanza Brother actually did, is Cave Story, well it's not exactly today.
You can see that this game requires a lot of forward view.
You have a lot of things coming at you, and you would really require a vast, clear view of what's coming ahead.
They did more or less the same idea.
They had two anchors, and as soon as you would switch, it will start slowly walk, go to the other anchor based on your walking speed.
Another thing that I noticed is what I call target focus.
And the reason why I call it target focus is because it actually maps to the actual target of the player.
How do we know what the target is, is where the player really wants to go.
What they did with Jazz Jackrabbit 2 from Epic, back in the day, they moved the camera based on what the player did.
So if the player pushed the stick left, they would move the camera left.
If they did it right, they would move slowly right until a certain distance.
This is pretty brilliant because it really maps perfectly to what the player wants to do, and I haven't seen this done a lot.
The good thing about this idea is that it actually works up and down as well, because in some cases you want to see what's going underneath you, you would do the same exact thing.
press the down cursor key, and it would react exactly in the same manner.
So, and we're talking about target focus, of course it doesn't, it's not limited to cursor keys or controllers.
Some games introduce mouse action, like a snapshot, which allowed you to capture elements from one side and move them to another side.
So if you already have the mouse, the mouse is a good representation of your actual view.
You know where you're looking at.
So why not put the camera in this sort of average between the character and the cursor.
That is very clear that that's where you want to go.
In the same way as they did with the swapper, an amazing game that has a bunch of great camera behaviors, So if you have a gun, or in this case, a cloning device that aims to some place, this is where the player is looking at.
This is where our attention is directed.
In fact, you would sometimes want to look to some direction and will go to the other one, and you would want the camera to follow the looking direction and not the walking direction.
So this is a perfect solution.
It also obviously requires either an additional, some sort of additional control, either a mouse or an additional stick.
projected focus, doesn't work necessarily very well for platformers, it could work for horizontally, but vertically you have differential that's very abrupt.
If you think about it, about jumping, jumping changes your vertical speed from zero to x in one frame.
that doesn't really work very well when you try to project the speed.
But in all sorts of flying elements, like they did with Secrets of Redikon from last year, this works really, really well.
You just aim for where the player's gonna be in a few milliseconds.
A great representation of a very intelligent system can be found in the Luftrausers.
I guess I spelled that wrong.
I'm sorry.
Kind of weird.
Um, uh, so, yeah, they have a really interesting combination of target focus and projected focus.
Projected focus, as we said, it looks to, looks at your actual velocity.
Target focus is, it looks at where you're actually aiming.
So they found this nice combination of those two, always giving you a good sense of where you're actually going.
Sometimes you're aiming to some direction, but you're thrusting.
to get to someplace else, so they found a good averaging of those behaviors.
On top of that, they have other elements that we'll talk about in a sec.
All right, so so far we've been talking about what the player needs to see, but what about what we want as the directors of our own games, we want the player to see.
We have some choice more in the narrative aspect.
One of my favorite games of the 80s, I'm not that old, just bear with me, is Wonder Boy.
That game actually introduced something that's, it was very modern at the time, and even technically it's not very easy if you think about how to do this.
It would move the camera along a path that was not parallel like other games of the time.
In fact, it would not only center it, it would sometimes just move the camera up, for example, and keeping the boy at the bottom, kind of foreshadowing something that's coming up ahead.
us as level designers, much more freedom, something that we can do a lot with.
Going forward at almost a decade, in the birth of the fifth generation of consoles, this is the PlayStation, the clone off from the PlayStation, they started having 2.5D or 3D in general, and 2.5D in particular.
So the camera path, as we've seen with Wonderball, could be much more versatile.
It doesn't have to be necessarily position.
It's position and zooming and tilting and whatnot.
You can use it in any way you want.
You could start moving towards certain elements that you want the player to notice, or zoom out to give some more interesting dramatic effect.
It works very well for that grain.
This is super important and not a lot of game did that at the time.
Donkey Kong Country has a bunch of standard elements like lerp smoothing, we talked about that.
Vertical position locking, dual forward view horizontally.
But the interesting thing that they did is that every level has multiple regions.
And those regions would each one of those regions would set different anchors.
Some regions would be more linear, go from left to right.
Other ones would be more exploratory, and those would actually place those anchors in the center, kind of giving you an idea where you need to go.
And that was very clever, and you could see when you play it you can see the camera would shift dramatically between different regions.
Another thing that you could do back at the time when the technology kind of started allowing that, is using zoom to fit.
You have a certain element that you want to include in the screen no matter what, like the boss, then you would zoom out to make sure that that element is always on the screen.
So if you're the player and you see that it starts zooming out, you immediately know what you need to do.
That was Yoshi's story, by the way.
Q-Focus, and I think this is one of the most important elements that we can learn from other games.
Other games have done this before, but Insanely Twisted Shadow Plant really made this into almost an art form.
And in fact, they had a blog post exactly about this technology, and that's where I got this footage from.
What they do is they have what they call attractors, that as you get in close enough to those attractors, it would start slowly.
shift the camera towards that attractor based on the distance from the center.
I call it double ring attractors because you have this outer ring.
Once you're inside that ring, it will start doing some weighted average between the character and that cue.
And the closer you get to the center of that cue, it would get closer to that cue.
You immediately know what you need to do because you see the camera will start shift.
As you get into the center ring, it will lock on that cue.
In this case, it's the checkpoint.
And the good thing about that, you can have a bunch of overlapping outer rings, so the camera would average between all the different elements.
This game has a bunch of other elements that are very interesting, such as...
using the gun that they have as a target focus, representation of where you're actually looking at.
You should check out that blog post.
Another way of doing Q-focus in a very innovative way is what Edwin McMillan and Tyler Gale did with ether.
They have, as soon as you get into the gravity zone of any planet.
they would start slowly shift or tilt the screen, so downward would lead to that gravity source, which is very predictable, very clean, and gives you a good sense of drama and narrative, and it's a perfect solution, and something that you don't see a lot.
and no presentation on camera work would be complete without talking about Limbo.
It's really a perfect combination of using very simple camera system, which is simple position locking if you think about it, but then the anchor changes dramatically between regions in the same level even.
Well, it's all the same level really.
And you have a bunch of cues.
And those cues are set on or off.
So all of a sudden, you have a boss coming into the screen.
And that would take the attention or is used as a tractor to get the camera closer.
Something else that I call region focus is, in this case, you can see that the camera is based on some sort of average between the center of the region.
There's only one region at Geometry Wars, really.
And the character.
So there are a bunch of different ways that Geometry Wars could have scrolled.
They chose this one.
They could have used camera window.
They could have used any type of target locking.
They used this one because it actually gives you a sense of where you need to go.
Where's the center?
You always know where you are in relation to the center, and that's really important.
And you're always on the move.
It's also kind of a dramatic effect.
The same kind of idea combined with other elements is what they did with Vessel from 2012.
This is a very heavy puzzle platform.
A lot of things happening at once in each puzzle.
You need to see a lot of different elements.
And each of those regions, it's like room puzzles that you would see in earlier games.
But instead of having that, they actually have anchors that focus.
and zoom into or out of certain elements to make sure that everything that's important for that specific puzzle would be shown to the player.
But on top of that, what they would do is they wouldn't just freeze the position of the camera on the center of that region.
If you notice.
the motion of the player actually takes the, moves the camera slightly.
So, there's like a small extra slack that they allow the camera to move around their region.
And this is pretty brilliant.
It gives you the sense of control.
You're actually moving the camera as well.
But also, as you hit the next region, or the edge of the region that you're in, the camera's already in motion.
So, there's never really unpredictable movement of the camera.
One other thing that was done in the first days of PlayStation, Tomba from 1997, used something I call gesture cues, which is elements that are based, camera movement that is based on what you actually do.
There are a bunch of things in that game that change the camera behavior.
One of them is when you start climbing, the camera would shift behind you, give you more sense of control and drama, you're just looking ahead, you can't see what's behind you.
Giving you a lot of control, a feeling of control.
They did this with Aztez in many, many different elements.
This is a great fighting game that's supposed to come out sometime.
And, um, and, no, I have the same problem.
And a lot of the different elements cause different camera effects.
And that gives a lot of sense of drama, control, and also kind of lack of control when some of these things happen.
You feel almost powerless sometimes when you see these things happening, especially in succession.
And I feel like this is one of those things that we're just scratching the surface with gesture cues, moving the camera based on what you actually do.
Now we already have a camera, why not use that camera to actually tell a story?
I call this cinematic path, paths.
So instead of having a cut scene telling something that happened someplace else, why not just use that camera?
It's also, I almost see this as a lazy solution, but it's exactly the one thing that you need to do.
They did sort of like, something like that in Streets of Rage from 91.
And the Behemoths did this with Alien Hominid and Castle Crashers, they do it all the time.
And it achieves a few goals, one of them is obviously tell a story, but also provide a direction of where the player needs to go.
So it's two in one.
And you feel like you're playing the whole time, there's no cut scene, the game is running the whole time.
All right, so what do we do when we have more than one thing to focus on?
I think we all played this game, Gauntlet from 1985.
It's a pretty amazing game.
The technology is pretty well ahead of its time.
The scrolling is wonderful.
So many things running at once.
There is a slight problem when you have more than one player and we all know this, what happens if one of the players just slacks off or just tries to go to the other direction.
Everybody's stuck.
I call this position averaging.
It's pretty clear.
We have a lot of things.
At the same time, you would try to average, to go to the average position.
But that's an obvious problem.
This problem could be seen also pretty clearly.
I mean, I really love this game.
It's a pretty crazy game, but what happens when you have all these players die and respawn or move from one side and then reappear on the other one?
All of a sudden, the average would just shift dramatically.
So it works really well for Samurai Gun as a player, but if you're not a player and you're trying to watch someone else play, it could be a little uneasy on the eyes.
One solution is what they did with Street Fighter 1, and then throughout the franchise, they created the camera window, the good old camera window.
If one player pushes the edge of the window, It would push the camera obviously, but also push the other player.
So the only way you could actually get stuck if both players forcefully try to push to different directions.
It works for some games, definitely works for one-on-one fighting games like this.
And obviously the best solution is what they did with Super Smash Brothers 1 and throughout the franchise.
You average the position, add some additional smoothing, and you zoom out to make sure that everything that's important is in the frame.
Yeah.
Rockets, Rockets, Rockets, which came out last year, is also a great representation of what they did with Super Smash Brothers, and here is kind of the designer choice as well.
It will always try to zoom out the minimal amount of zooming so the player would not really see what's behind, and also, if you get back far enough, it's actually uncomfortable, you don't really see very well.
So you have this.
implicit encouragement to always go back to make close encounters, which is exactly what the designers wanted.
Another solution is what they did with Spelunky, obviously.
The solution is not even get to the, not even address the problem of multiple characters.
You just give the camera to one.
If that person dies, the camera would move.
to another player, and that's super important for a game that, if you go out of the screen, you actually, well, it has some grave consequences.
And everything that pertains to multiplayer would fit multi-character, and you don't have to do a straight 50-50 average, you can do whatever.
40 and something else.
Manual control, when would you provide additional control to what is implicit by the camera movement?
So, I think this might be the last time I'm gonna talk about Super Mario World, and it's pretty interesting.
I feel like the fact that they introduced so many different systems in one game is some sort of overcompensation for a really bad system that they had in Super Mario Bros. 3 or something.
On top of everything they did.
they actually had an additional manual control, the shoulder buttons would move the camera as well.
I don't think anybody really used it a lot.
I don't think it's really needed.
And it's not implicit, it's not very clear.
The player wouldn't even know that this thing existed.
This is obviously not a real, I mean it's not your classic side-scroller.
But what they did with OSMOS is using a control that's very clear and implicit to produce exactly the results that you would expect.
In this case, the mouse wheel or in tablets that pinch to zoom would do exactly what you would expect.
That's what they did with Jazz Jackrabbit.
They used the left and right keys or a stick to move the camera.
but the same exact behavior would move the camera up and down, which is very useful in some cases.
They did the same thing with Spelunky.
You just expect that if you, and you would probably do it even if you didn't notice as you were climbing or crouching.
Quickly, I wanna talk about Camera Shake.
Camera Shake is kind of the opposite of, what we're talking about right now.
It's providing some sort of lack of control.
The player has no control, there's something happening on the screen that's bigger than the player could actually control.
So I try to look back, and with the help of friends, to figure out when was the first implementation of Camera Shake.
This is the farthest I got, and of course it's Miyamoto.
It's not exactly the camera shake that we know of today because it actually has some part in the game.
It's not just an effect.
But it's still a camera shake close to what we know today.
The funny thing is that you would only see this behavior on the arcade.
You wouldn't see it on the NES.
They probably tried and couldn't get scrolling to work.
And I have this theory that that's when Miyamoto decided that scrolling is something that he wants to pursue.
So I built an entire story in my head.
So, and we were talking about screen shakes and screen freezes, Vlambeer, they know best, they made it into an art form really, and they had some talks about that.
If you look up JW's work, it's a huge subject on its own.
Alright, so how do we put everything together and make our own custom made camera?
So, first of all we look at what we want to do, what are the characteristic and significant important features of our game.
Then we get inspired by other games as I try to do here as well.
And then we make it our own, change what we need, we take some tips, we combine and make our own camera solution.
This game from 1985, Legend of Cage, doesn't have anything amazing going for it, except for the fact that it's probably the last game going from right to left, for some reason.
Except for mine.
What they did is, they created a camera window that's exactly the width of a tree, because most fighting actually happened on trees.
So once you're on a tree, the camera would...
stay still.
And again, not a brilliant camera solution necessarily, but the implementation is ideal for that specific game.
As we've seen before with Shinobi, if you have high jumps, use a very high vertical window, but remember to snap it back to the center.
If you have a character that moves really, really fast in all directions, up and down, maybe use a camera window that's very narrow.
That would work really well, especially since most direction changes happen on the ground, so you wouldn't really see the bumps from one side to another, except when you're flying down into the bottom edge of the screen, which in this case, it's kind of abrupt.
And that's exactly what they did.
They solved this in, so that was Sonic 1.
In Sonic 2, they solved the same problem by using what Super Mario Brothers 1 used.
That's the speed up push zone.
Each one of the halves, horizontally and vertically, stops the motion of the camera and then starts easing it out back again.
So even when you go into a high speed loop, you wouldn't even notice that the fact that it actually reduced the speed.
in one side immediately increased it back and it feels very, very smooth.
And it's a major change, specifically on the camera system between the two games.
Long distance view, we talked about in Cave Story.
I think that's a perfect solution for games that require a lot of forward view.
I wanna talk a little bit about Fez.
Again, for games, for platformers, we don't really see camera windows too much these days because you miss out, we miss out a lot of information of what's coming ahead.
But that's not Fez.
Fez doesn't have a lot of things coming at you.
In fact, I think that most of the important elements, since most of the dimension shifts happen in corners of buildings.
So you could argue that most of everything that's important is actually behind you.
And that is maintained throughout the dimension shift.
So this solution, the camera window solution.
that works throughout dimension shift is the perfect solution for this kind of game.
If you have elaborate puzzle systems with a lot of things happening at the same time, make the regions as the jurisdiction of where the camera needs to be.
But you can easily do what Vessel did, still allow a little bit of motion, some control of the motion to the character.
giving them more sense of control.
And if you're telling a story, like we've seen with Alien Hominid, the swapper actually told the entire story based on in-game camera shifts and region changes and cinematic paths.
The entire story is told that way, zooming in, zooming out, changing, of course, and lighting and whatnot.
If you want to tell a story, We already in the game just use the camera to tell your story.
So what do I do in Mushroom 11?
So Mushroom 11 has multiple regions per each level.
You can see that each of those regions is a very basic rectangular area and could be angular as well.
And the camera can only move in that specific region.
Also, each one of those region has a zoom factor, a field of view factor that allows me, in some cases where there are a lot of things happening, I can zoom out and give more attention to things up ahead.
All these regions are numbered, so the first region.
the first mushroom piece to go through the next region would take the camera with it.
There are two main region archetypes.
One is the center oriented, which is basically the camera goes to the average position of all the different cells.
And the other archetype, is the progression-oriented regions, where those regions have a trajectory.
In this case, it's just going from right to left.
And I'm looking at all the different cells, different mushroom pieces, and the one that's most progressed on that line, on that trajectory, gets the camera.
And since I know that I'm only using this behavior, this region.
in cases where it's more linear motion, not really puzzle.
I know that I can apply an additional static forward focus.
I'm moving the camera even further based on that trajectory.
In some cases, there are additional cues, like the attractors that we've seen in other games, in which case I would average the position based on a certain weight that I decide on between certain elements.
in the game, in this case the tip of the boss, and the control mushroom.
And of course, on top of everything, there's an interesting behavior for smoothing.
I'm using projected focus.
Obviously, there's no control here.
The only thing I know of each mushroom piece is its velocity, really.
I can't make it jump or anything.
So I'm looking at its current trajectory.
and then apply further physics smoothing based on it.
The interesting thing that took me a long time to kind of figure out is the physics smoothing factor is based on the speed of that specific mushroom.
When I move really, really fast, either in tunnels or...
like we see in this case, we have a mushroom piece that moves really, really fast between regions, then the factor would be very, very low.
I would basically try to aim for 0.5 seconds of full smoothing.
But in case I'm just trimming and just exploring, it could easily go to two and a half, three seconds smoothing and that works very well for me.
And when we have a lot of different mushroom pieces, different velocities, and different regions, this is how it all comes together.
So that's Mushroom 11, and that's my talk.
Thank you very much.
