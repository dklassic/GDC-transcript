I guess we're starting.
Hi, thanks for everybody for coming to Rules of the Game for 2017 here.
I guess I wanted to say thanks to anybody who came from outside the US.
I know this is a time you might be worried about that sort of thing.
Most of my friends fortunately made it in OK.
I'm glad to see everyone here, and you're certainly welcome at my session to talk game design, regardless of your country of origin.
So in this session, if you're not familiar with the format, we take five illustrious speakers who you see listed here on the screen, and we give them each 10 minutes to talk about one of their personal rules about game design.
So we've done this a few times before.
We did this in 2015 when we got these five cool rules, and then we did it again last year with these five speakers.
If you want to check these talks out, they're both up on the vault, and the first one is free.
If you search for five rules on GDC Vault, these come right up.
So why are we talking about rules, you know why do we get game designers care about rules obviously as game designers our job is creating rules basically to make a game work, you know many of us like rules because you know we like games in the first place games are built out of rules they make a very noble world they make a world that's consistent that seems fair when you're playing bridge.
You know the order of how the players go, you know how you bid for a contract, you know you win a contract.
It's always clear cut who wins or loses a game because of the rules.
Even a more advanced game like, say, Diplomacy...
You know, the rules can be simply more complex and open to interpretation, but you might have some house rules or something like that, but you discuss this ahead of time, you agree on it.
And if anyone who's in the middle of playing a game with diplomas, he starts changing the rules, you might get upset about that.
And you know, so we as game designers like rules, and I think we appreciate them in other places too, like say, in forms of governments.
You know, we may appreciate systems that are put in place for good reason, that even when someone may go off the rails in one branch, you know, the system hopefully keeps them from destroying everything.
And we as designers recognize that these rules are important even when the guy we like is in charge.
Anyway, so moving back to game development, the sad reality is that in the creative endeavor of game development or anything, there are no hard and fast rules, right? It's much more open to interpretation and personal taste. Rules are a personal taste when it comes to creating games.
So these are some of the designers who have been, you know, who were highly inspirational to me growing up and over the years.
I think if you ask these people, like, what their rules about game design were, you would get some very different answers.
They would each have their own thing that they did.
So as you hear the rules from our illustrious speakers here today think about that these are their personal rules, you know they may or may not apply to you right now in this moment or not right now anyway.
We think about the cycle of game development as we're all familiar with it. You may be aware of the dark doldrums in the middle of a project when things are not going so well when you think maybe I should have been a mailman.
You know when you're stuck on that problem, you can look back to the session and look at these rules and say maybe one of these rules will help me now I didn't see the use of it there GDC, but now I can use this and this actually happened to be recently I'm working on my game the church in the darkness. I was building a level for a long time for a new demo for GDC and it was actually due to some life issues and other things became like a really dark place for me creatively and building this and a lot of it because the level looked like this for a long time it lacked any show we say pizzazz Later, as I was getting towards the end of making the demo, it started looking like this.
I started adding in all of these things, and this is taking a scene where I just stubbed in, here's some cages for this cult group, you know, and it doesn't really look very cool at all.
But now, you know, I've put in a guy and he's shooting a pig's head on the side, and you can interact with him, and different versions of this scene play out.
This is all very cool, and I did it in about an hour, right at the end, and suddenly the level was fun to play now, and I no longer dreaded working on this thing.
And I think, why didn't I do this earlier?
If only someone had told me I should think about Pizazz.
Well, last year at this very session, Lee Perry did a talk called Pizazz First, Polish Later, where he talked about that dark trough of game development where everything is bad.
And he talked about, particularly on solo projects, you can lose your momentum, lose your focus.
But if you add some Pizazz earlier, you get motivated again, you get feeling good.
So think about it that way.
I should be aware of this talk, because it was in this session that I ran last year too, but I'd forgotten about it.
So when you're in those moments of darkness and despair, look back to this session, see if one of these things can inspire you to keep going on your project, even in those dark days.
The other thing to think about with these rules as you hear them.
is the theme that emerged.
I don't usually give the speakers a theme for these.
I just let them come up with their own rules.
But some sort of theme emerged this year.
And that theme is everything you know is wrong, which seems kind of timely to 2017.
But our speakers today are going to challenge some common assumptions you may have about how to make games and how to design them.
And it kind of makes sense too that I think as game designers, we got into this medium, we got into doing this instead of going for some safe career, some more profitable career, right?
We decided, no, I want to do this thing I love.
Even if our family thought it was crazy, we decided, hey, we're going to go make video games.
And as you're in this industry for a long time, you'll hear a lot of you know, commonly held wisdom about what you should do and what you shouldn't do.
If you're here even longer, you'll see all those things disproven over time.
So for example, you may have heard the old chestnut, you should never make a game that requires a peripheral until someone makes one that breaks that rule.
You should certainly never make a Western game because those never sell until one does, and adventure games are dead.
Or it goes even farther into sort of game design rules like everyone online is an asshole.
That's why we should only make shooters until someone figures out you can subvert that.
Or that players only want to win.
They want everything explained to them.
They don't want to have to work hard to do anything.
Or the most dreaded of all, well that doesn't sound like very much fun.
So it's in breaking these rules that I think we can, you know, go off and make some of these new things.
So as you hear these things, realize again, they're not absolute, they apply in different times, but they can also help you.
And I think these are the type of rules in saying that everything you know is wrong, you know, go with that, that a good rule doesn't close down possibilities, it really opens them up and helps you think of things in a different framing.
So with that our theme everything you know is wrong. We're going to have 5 speakers get up here talk for 10 minutes each as I said. Coming up a little later we're going to have Damian Schubert is going to remind us who our true player base really is.
Christina Norman is going to show you how your assumptions about what you need out of a feature may be entirely wrong. Hal Barwood is going to suggest that maybe the way we do rules is wrong.
And finally Luke Muscat is going to question the very existence of well you'll just have to wait for his.
But first, Chelsea Howe is going to tell you maybe you've been doing things to the wrong sort of scale.
She is a designer who's worked on everything from Family Guy to Farmville to indie projects and is now the creative producteur and OWL overseer at Owlchemy Labs.
I give you Chelsea Howe.
All right, sweet.
So my rule is designed by Fractal.
Why Fractals?
Our human brains are hardwired to find patterns.
They help us cluster and predict the constant flow of information streaming into our brains, which lets us survive and act and optimize our performance in an otherwise overwhelming world.
Now, some patterns are really easy to see.
Songs have choruses versus bridges.
Novels have three-act structures, heroes journeys, politics ebb and flow, conservative to liberal, and back again.
But games aren't simple nor linear entities.
They're these really vast and complex systems, multifaceted and multilayered.
Even games with the simplest underpinnings can have these vast and unpredictable results.
And that's the beauty of fractals too.
Fractals are these patterns that exist across scale that describe infinite systems.
The defining property of a fractal is that it is self-similar which means you can see the same basic shapes and patterns no matter how far you zoom in and out, in or out, and often when you translate your view as well.
And all of that infinite complexity comes from one tiny little set of variables.
All fractals have at their heart some sort of equation or algorithm that defines that repeating pattern.
This one is for the Mandelbrot set.
That single algorithm feeds back in on itself, multiplying outward, downward, upward.
With just one underlying and foundational set of variables, an infinite and beautifully resonant pattern emerges.
And ultimately, that's exactly what we want with our games.
We want coherent design across massive interrelated systems.
This means that your vision as a designer needs to be like that algorithm.
We use a bunch of different words for this, whether it's your vision statement, x statement, one-liner, but at its heart, it's the aggregate of values from which the rest of your game can be derived.
Now as designers, we usually tend to go a little bit deeper.
We have these pillars, usually we call them, and those are the variables.
Now the clearer those pillars are, the better we empower our teams to bring the game to life at whatever scale they're working at.
If your team can really grok this basic algorithm, they can generate code, content, and be creative without designers always looping over them.
So that's the general gist, and I wanna show you a few examples of how I've put that into practice.
The first is in terms of thinking about teaching mechanics to players.
They really help when conveying information.
A dominant learning paradigm is called scaffolding, where you teach a small concept, practice it until mastery, and then build off of that at higher and higher levels.
These are essentially learning fractals.
We did this a lot in Family Guy, where we started by teaching about items.
Then we talked about characters who need multiple items.
Then we introduced them to districts which have multiple characters, and finally the overarching storyline, which contains several districts.
We started at that most basic level of our fractal and zoomed out over time.
Fractals are also really good at creating player emotion.
There's something really magical that happens when you feel that order of magnitude change.
Your possibility space suddenly opens up and cracks open.
It's this wonderful sublime feeling.
And we can use that scale shift to evoke more complex feelings in our players.
One game jam we made this incredibly simple game where you fly up into hovering water in the sky.
As you go up that water, the clouds kind of fade out, and you wind up on the very beach that you started on.
This was an incredibly simple game, and most of the Let's players weren't super intrigued initially.
When they got to this point, we saw this deep emotional response.
We realized that, or we saw them realize that this was a repeating pattern, that the whole world was this Mobius loop, this fractal.
And you can also do it to create stakeholder emotions.
When you're pitching something to someone, you want them to have those mind-blowing moments.
Again, here's a simplified version of a little prototype that we worked on.
This was called CityStream.
So essentially in CityStream, every person in a Twitch chat is represented on the world.
It's a city builder.
You're building up this one little tower.
and then you're building up the towers around it.
And then you learn that each of those towers is specialized.
And then you learn that all of those towers are at risk by these massive influxes of enemies.
And then you realize that your city is just one of many and every streamer on Twitch actually has access to their own little world, which again can battle and destroy other cities.
So we worked on this fractal of building and maintaining and we tried to see how far we could scale it up.
When you want pitch, you want to blow people's minds.
And designing with fractals means asking what your game would look like if you zoomed out even further, if you ramped it up another order of magnitude, or if you translated your design into some space where it hasn't been done before.
Fractals are also really useful for understanding player engagement.
I use fractals for virtually any element that can hold a player's attention, whether that's narrative, difficulty curve, level unlocks, marketing.
A narrative fractal might start with a single line of dialogue or flavor text, zoom out to conversations, quests, story arcs, and eventually that entire hero's journey.
So when you're working on a different area of your game and you want to test your concept for completeness, go ahead and look at those different scales.
Fractals are also really useful for communicating design.
And a lot of us are really familiar with this already.
You have the one-liner, the elevator pitch, the concept deck, all the way up to the systems doc or that often lamented design bible.
Thinking of them all as the same basic entity, just at different scales, helps me keep the ideas consistent throughout.
And realizing that different people on my team work at different scales, helps me give them the documentation that's going to be most beneficial.
A global exec team obviously doesn't need your design Bible.
A technical artist isn't going to do much use with a one-liner.
I've also noticed that when some people design, they tend to have a default scale.
I tend to revert to a concept doc, for instance.
I think it's important to figure out what that default scale you're comfortable at is and then practice scaling up or down.
Fractals are useful for understanding other IP as well, not just communicating your own.
If you're aware of patterns across scale, you can identify the keystones of other franchises.
I've designed for a bunch of different licensors and a bunch of different IPs, and unlike a lot of folks, I love that work.
There's something really special about seeing a pattern across a brand and being able to vocalize it with a clarity that most people can't.
Once you've seen the consistent themes in a celebrity's Twitter feed or Instagram, interviews, concerts, filmography, you start to understand how you could bring that over into a game, how to translate it.
And there's something really magical that happens when you go to a licensor and you're able to articulate their core values in a meaningful way.
Core values are what makes us human, they're what we're most passionate about.
That's why we get so enraged about things like politics.
When you can tell someone, when you can echo back their core values to them, it creates the trust and bonding and faith that's really useful for external partnerships.
Fractals are also really useful for understanding our future.
Once we can see the pattern, we can look back at where it's gone and start predicting where it's going.
When my UX designer and I were concepting one of our unannounced games, we found this really interesting trend.
We saw that despite mobile gamers always complaining about lack of real gameplay, they would almost always use an Automate button if it was offered to them.
We also saw the rise of idle games becoming increasingly popular.
And we kind of put these things together and realized that games for the most part are switching away from immediate moment to moment, at least in the free to play category that we cared about, to more of this metagame level of strategy.
We essentially looked over and saw the trend somewhere and put it into our different genre.
A bunch of other teams had also been working on getting their concepts greenlight, some for over a year.
Our design was greenlit in less than two months.
And finally, fractals help us understand the world.
A team is a small, small microcosm of society.
Every team has its own quirks and its own dynamics, but it will always in some way reflect bigger issues.
When small things happen in your team, don't let them slide.
Don't accept them as part of a bigger pattern.
Because change at any scale affects the others.
One simple correction can make all the difference.
When we think in fractals, we're no longer helpless individuals.
We're simply at a different scale and we can create vast change.
Thank you.
Thank you, Chelsea.
You know, a great, great way to start thinking of reframing your problems, which we will come back to a little bit later in the session.
But up next.
You may know Damian from his many years of working in the MMO space, culminating as being lead designer on Star Wars The Old Republic.
He now works on the mobile RPG Dungeon Boss.
And some years ago back, some years back Damian gave a somewhat famous design talk on how you were doing your design documents wrong.
And now he's going to tell you how you're thinking about your player base wrong.
Damian Schubert.
Free is the default.
I now make free-to-play games.
I've made free-to-play games that have made hundreds of millions of dollars.
I haven't actually gotten much for that.
But the thing that I have actually done that has been most important is to never lose sight of the fact that most of the players playing them aren't giving me any money.
This is really, really important.
Now when we talk about free plays, it's really natural to think about how to make money.
I mean, it's...
why our bosses give us paychecks and we would really like to pay the rent and we would really like to have a nice cars and things like that uh... and that's completely reasonable but there's a whole other track at this conference i believe on how to make money from games i want to talk about the other half of that which is the fact that we really need to spend more time thinking about the free players i look long and hard for publicly available data and uh... most commonly cited number is this number which is Back in the heyday of Zynga, they would say that a 2% conversion rate for any game that they made was a blockbuster success.
That means that of everybody who downloaded Mafia Wars or one of those games, if they got a 2% conversion rate, great success!
and that means that 98% of those players never spend a dime.
Now that number is slightly weighted.
Really the numbers look more like this when you look at the day-to-day-to-day, because if you spend, you're more likely to come back.
So any given day...
10%-ish of your population has spent money.
That still means that 90% of your players are freeloaders.
Right?
That's a big deal.
Most of your players are playing for free.
That is the normal gameplay mode of your game.
That is the default for your game.
For most people, free means exactly that.
They download your game, they play the game, and they do it all intending to never spend a dime.
For many of them, that's the point, even if they love the game.
Now, today's kids have so many options that they no longer have to worry about getting mom's credit card in order to play something.
There's so many free-to-play games as well as free music, free movies, any entertainment medium you can think of, they can get a whole bunch of it for free.
That's your competition.
And some people see playing for free as a badge of honor.
How many people in this room played Candy Crush as far as they could for free just to prove that they friggin' could?
So what does that mean for us designers?
What does it mean for those of us who are like me?
I make free-to-play games because I am a massive hippie and I like the idea of giving the gift of gameplay away to as many people as possible.
To me, that is exactly a beautiful notion, a big socialist notion, and yeah, if a handful of heavy spenders have to pay for that, I'll live with that.
But what does this mean for those of us who are battling evil project managers' intent on picking up our customers and shaking them for loose change?
Well, it really means keeping in mind that most of your players will never spin.
Remember that 2% number we talked about before?
Let's imagine you're an amazing monetization designer.
Let's imagine that you manage to double that.
That's what that looks like.
Right? Now 4% of your population is paying you money and 96% of your population is still playing for free.
That's normal.
Keep that in mind. Keep that in focus and really think about how that frames not only how you design your game, but how you develop your game and how you support that game in live.
So...
Free players are not just freeloading.
So they do all sorts of good things for the game in general and for the game that your spinners are playing.
For one thing, the free players are the source of the virality of the game.
Free players are going to be the reason you go to the top of the charts.
They're going to be the reason you become a cultural phenomenon.
Free players provide rivals.
They provide people for your spinners to beat up on as well as for each other to beat up on.
Free players can create content for other players to play.
Like in Second Life, you could actually create content and upload them for other people to play with.
They actually do your job for you.
In Star Wars, The Old Republic, the free players provided, we had a real problem before we went free to play.
When our game stalled, we didn't have enough people to run dungeons, to launch battlegrounds and fire raids.
Free players provided a population of people so that those things could actually happen.
Free players provide a whole lot of cannon fodder for your spinners to beat up on.
And lastly, free players are very often the bedrock of the community.
Like the, the, the, there's not necessarily a cross section between people who like to spin and people who like to run message rewards, manage your Reddit threads and do all of this other invaluable services that actually make your game an event, a thing, a place to be.
So takeaway three.
And if you're a fan of the channel, be sure to subscribe.
And I'll see you in the next video.
Take care.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Bye.
Please, for the love of God, if free-to-play is normal in your game, and it probably is if you're making a game that's called free-to-play, treat it like it's normal.
It's really easy and it's really seductive to give all of your employees free money.
And you might want to do that from time to time, but every now and then you have to force them to play like a free player.
You have to force them to actually play with the crappy heroes.
You have to force them to actually hit all the pop-ups that free players hit when they actually log into the game.
And you have to force them to wipe their accounts and do it again every now and then.
Because we have this tendency to layer on more stuff in our games and it always hits the free players the worst.
you guys need to really focus on being sure that your designers and your QA departments in general realize that free play is the default way to play this game.
And watch the paywalls.
A paywall is when designers put in a big cliff in the game design that's designed to make people either spend money or seek some kind of free alternative, usually wait a day or grind some levels or do something that in order to prompt some spending.
The most common problem I have seen in most of the mobile games that I have downloaded is that they put too harsh paywalls too early.
They go up before players have a chance to fall in love with the game.
When this happens, your brain actually extrapolates that pattern.
If you ask me for money at 5 minutes and 10 minutes, I'm going to assume it's going to do it at 15, 20, 25, 30, so on and so forth, and I'm going to realize that your game is not free at all.
By contrast, one of the design battles I won when we converted Star Wars The Old Republic to free-to-play was to not have any paywalls or pretty much any spend opportunities at all on the first planet of the game.
That's three to four hours of gameplay.
I had a really good reason for that.
When we were a premium game, we tested the bejesus out of that first planet to the degree that the people running the test said that our first planet was the single best testing MMO starting experience they had ever seen.
Why fuck that up?
Right?
Instead, let them fall in love with the game.
Give them a whole planet so that they want to spin, so that they want to help your developers out, so that they want to take the developer's side.
Remember how I said free-to-play players are good cannon fodder for big spinners?
You have to be real careful with that.
I mean it's not fun to get stomped.
Now I'm not saying that free players should always be paired with other free players.
But it's really important that if you have a PvP experience that you're giving them people that are just out of reach.
That you're giving them something where maybe if they spent a little or if they invested a little more time or got a little more free gems that they would be able to beat that stuff.
You don't want people to run into a wall and say that the only way it could possibly compete is to drop $1,000.
Or you will drive them out of those game systems if you don't drive them out of the game altogether.
In Dungeon Boss, the characters in our gem portal are much more powerful than the free players.
And people who have spent them at a much easier time actually winning in PvP.
This was a harsh lesson for us, that we really had to spend a lot of time massaging our matchmaking in order to bring that in line.
Yeah, David beat Goliath, but this is a great story, largely because of how improbable it actually was.
Most of the time, Goliath stomps David and David throws his iPad across the room.
And then the last point is this.
If you take all this together and you say, yeah, we really do need to get our free players to spend, be sure that they have a fun time, be sure that it's not too obnoxious, and then try to hint at them that spending just a little is going to have a big impact.
Don't try to make them whales from day one.
Try to get them to spend one dollar.
make that first dollar really really an amazing value for them.
Give them glimpses of what spending that first dollar is going to be like and then once you do, try to stair-step them up gradually.
Now it's always going to be the case inside of free-to-play that the heavy spenders are going to do the heavy lifting in terms of supporting the gameplay. That is either a fortunate or unfortunate way of life for the free-to-play market right now, depending on your point of view.
But at the same time, we have to keep in mind that most people aren't that.
Most of our player base are free players, and they still add enormous value to the game.
That's fine, and get used to it.
In conclusion, free players are the normal ones.
Design your game as such.
Thank you very much.
Thank you, Damien.
I think those of us not working on free-to-play games can think of this too as a way of addressing your player base.
You know, thinking, are we spending too much time on the people who've been playing for 30 hours and not enough on most of the players who aren't gonna get that far?
I think you can easily easily extrapolate this to other types of games.
Next up, we have Christina Norman.
She was a programmer and then a designer at Bioware on the Mass Effect series and now works on that little other free to play game League of Legends.
And she's here to say the problem you think you have, well, maybe it's not actually a problem at all.
I give you Christina Norman.
Hello, hello.
So today I want to convince you guys to willingly embrace radical constraints.
Now, designers generally hate constraints.
We look at constraints as restrictions on what we can do.
And who wants to be restricted?
We want to do whatever we want to do.
But constraints can also really help us focus our creativity.
I think we all have stories of situations where we've been working under the absolutely harshest restrictions, and we've done incredible things.
Constraints can really inspire us to solve hard problems and innovate as designers when we accept them.
So I'm gonna take you through three constraint scenarios and I'm gonna introduce a constraints framework to you and show you how I solve two impossible problems solving it.
Whoops.
And, ah, why is Shepard a panda?
Wait a second.
Okay, we got this.
There we go.
And I will be using industry standard three panda notation, which I believe originated at NYU, to indicate how the team felt through all of this, because changing constraints can be really stressful.
So throughout this, when you see a happy panda, that's a developer who is working contentedly within constraints.
When you see a sad panda, that's a developer who is feeling frustrated and restricted by constraints.
And when you see a sneaky panda, that's a developer who is ignoring constraints to solve problems.
And the size of the panda indicates the level of impact.
So let's start off by going through the story of Mass Effect 1.
Now, Mass Effect 1 started like all possible games with a blank slate.
It really could have been anything.
For example, we could have made it a pure dating sim.
And there's probably an alternate universe out there where we did that, and it's probably a pretty cool universe.
But we wanted to focus on other aspects as well.
So we wanted it to be a epic space opera RPG in which you could explore the galaxy, save the universe, command an elite squad of superheroes, you know, pretty basic stuff.
And...
We had a schedule and a budget, so as we went through that initial concepting phase, we realized we had to get specific.
So we fleshed out the plot, we figured out who the characters were going to be, we identified the RPG rules, we figured out key systems for conversations and gameplay that would make the game really great, and we made some tough calls.
Then we prototype key systems, verifying that they were both possible and valuable.
It was becoming more and more clear to us as a team what Mass Effect would be and what it wouldn't be.
Then E3 happened and we had to show Mass Effect to the world.
So we developed this vertical slice that would capture all the key experiences that players would have in Mass Effect, like explorations, cinematic conversations, and intense squad combat.
This was really hard, but the team gave it their all.
And overall, we were really happy with the results and players were excited.
But then as we set out to realize this vision across the entire game, we encountered huge problems executing at scale.
Like most developers, our E3 demo was visionary but it wasn't real.
And as we tried to create real experiences at a galactic scale...
we ran into horrendous technical problems with our engine, with our workflow.
They kept slowing us down.
And now for the first time as a team, we collectively felt we were being constrained in a way that was taking all of us away from the game we wanted it to be.
And then it got worse.
As we got closer and closer to our ship date, we realized that we were not trending well.
So we started cutting features.
We started cutting entire planets from the game.
We had to not just make new content, but we had to rebuild our existing content and systems to make them more efficient.
All of this was slowing us down, and we felt like Mass Effect was slipping away.
So we crunched, because that solves all problems, right guys?
Through force of will, talent, focus, and Red Bull, we dragged Mass Effect back closer to where we wanted it to be, but the cost on the team was really, really high.
But in the end, despite all this adversity, we shipped Mass Effect and it was awesome and players loved it.
It wasn't exactly what we'd wanted it to be.
It's getting outside of that original space we wanted it to be in, but it was definitely a great game.
And reflecting on that journey from Blank Slate to Mass Effect, I started to see how constraints were a roadmap for our progress.
And I started wondering if we could use them to help get the team pointed towards better games with fewer sad pandas.
And we all wanted Mass Effect 2 to be a better game.
We wanted to fix all the problems with the first one.
We wanted it to be refined.
We wanted it to be polished.
And we wanted the team to not be miserable, sad pandas.
So when we started with that blank slate of Mass Effect 2, we knew that the first thing we had to do was figure out how we were gonna address those problems from Mass Effect.
And inventory was one of those top of mind problems.
For those of you who didn't play, Mass Effect's inventory was slow, it was clunky, and you had to interact with it constantly.
It was universally disliked, so it was a clear must fix.
Thus, one of the constraints we established early on was that we were gonna have a good inventory system.
And we designed a great inventory system, but then what we found was, as we were rebuilding our UI pipeline and finding that we had some programmers who quit and we couldn't hire some other programmers, things were not trending well.
It became clear that the inventory we wanted to build for Mass Effect 2 was not possible.
So we designed a lower scope inventory, right?
But the problem was that wasn't possible either.
Our UI problems were that bad.
So we changed our approach.
We designed a possible inventory system, but the problem now was it wasn't really very good, and to make it possible, we knew we'd have to cut some big things from the game.
And those things we were gonna have to cut were pretty awesome.
This felt really bad, and no one was happy with the situation.
So then I had an idea.
Why don't we just cut the inventory itself?
It seemed like it was the source of all the problems.
And I proposed this idea to the team and they were confused.
Everyone knows Mass Effect was a Bioware RPG and Bioware RPGs have inventories and wasn't the whole point to make sure that we had a good inventory?
Wasn't that what we were setting out to do in the first place?
So I reframed the problem and I said, I don't think we really need a good inventory system.
The problem was we had a bad one.
So if we don't have a bad inventory, haven't we really solved that original problem?
I didn't convince the team at this point, but I opened their minds up a bit to see that maybe there'd be another way.
But people were skeptical.
What would Mass Effect even look like without an inventory?
Would it even be an RPG?
Would it be fun?
These were important questions to answer.
So the design team dug in really deep, deconstructing why we needed an inventory in the first place, and identifying the problems we'd have to solve if we removed it.
One by one, we proposed solutions to those problems and built confidence in the new direction until we had buy-in from the team.
And in the end, Mass Effect 2 didn't have an inventory, and it was a much better game.
By going out of our comfort zone, we'd solved an impossible problem and unlocked a new way of thinking about things that helped lead us to other changes that made Mass Effect more focused and polished.
And reflecting on that experience, I wanted to generalize this.
Like, was this just a fluke?
Had we got lucky with a random idea?
So I thought about the whole process and what had happened and tried to generalize it.
So first, the thing I saw is that we had to identify that we had an impossible problem.
Teams don't like to admit that things are impossible.
They don't like to acknowledge being blocked.
They wanna work harder and realize their original vision.
But when repeated attempts to solve problems creatively and analytically fail, it's important to acknowledge that you are not trending towards success.
This helps open up the team's mind so they're willing to look at a different approach.
Then you need to ideate.
Clearly, at this creative ideation stage, you must ignore constraints, and you must not allow analysis to shoot down ideas.
There are no buzzkill pandas at this zone.
Dangerous ideas must be allowed and even encouraged.
But then, as you go into the reframing stage, you find a way to reframe those original constraints in a way that allows your solution to be possible.
And you identify all the issues that are going to come about because there will be issues.
You probably had good reasons why those constraints were there in the first place.
Then you have to solve those issues.
One by one, you work through them.
You prioritize and you solve quickly.
Your goal at this point is to determine if this is a viable direction, to build buy-in from the team.
You are not building production code or content because you don't know if this is going to work out.
Then lastly, you reintegrate.
This process must end with a cohesive, whole vision for where the product is going, and clear constraints that the team can accept and work happily in.
That's how you end up with happy pandas working within new constraints.
So this looked great on paper, but to figure out if this actually worked, I needed to solve another impossible problem.
But luckily, Game Dev, those happen every week.
So when we moved into Mass Effect 3, we knew we wanted to do something big.
Mass Effect 2 had been a really big success, so we wanted to do something big to make it more than Mass Effect 2.
And multiplayer was big.
We'd actually always wanted to have multiplayer in Mass Effect, but we hadn't had the time or resources to do it.
It was pretty scary to add this on in the third game, and the team was nervous, but they were also excited by this ambitious goal.
So then we did some research, and that research proved very troubling.
All of our data and surveys said that multiplayer was a winner-take-all market that was dominated by big PvP games.
Even worse, when we surveyed Bioware players, we found out they had low engagement in multiplayer, and they really weren't that excited by the idea of a multiplayer Mass Effect.
Seriously, like, the most common response is, can you just make more single-player levels, please?
So to make successful high-quality multiplayer, we knew we had to build a different kind of multiplayer, Bioware multiplayer.
And that meant a co-op game that had everything that Bioware players love, like an exclusive multiplayer story, co-op level mechanics, and levels that you couldn't choose solo.
We needed new enemies, powers, and weapons, content you could only access in multiplayer.
Plus, we needed social network integration, so recruiting your friends to play would be really easy.
And this was basically the scope of an entirely new game, and it was a pretty cool concept for a game, but it wasn't feasible Mass Effect 3 multiplayer.
We were back with an impossible problem and a great chance to test the framework.
So, first of all, we just had to acknowledge that the plan we had for multiplayer was not going to work.
The scope was too high to ship, even though we had planned on dedicating a pretty sizable dedicated multiplayer team.
Then we ideated to find an alternate approach.
And what we kind of landed on was our base assumption that players would not want to play Mass Effect multiplayer.
What if co-op plus Mass Effect's gameplay was super fun?
How would that change the situation?
Then we reframed our original constraints.
we would make a game with co-op Mass Effect gameplay that was really fun, and then we'd identify the problems we'd still need to solve to make it a great multiplayer for BioWare players.
Then we solved those problems.
First, we validated our original assumption by doing a horde mode prototype of Mass Effect's multiplayer to verify it was fun.
We improved it by adding on objectives, limited powers, and a high difficulty.
Then we identified that we needed additional stickiness to keep players coming in and to entice them to come in in the first place.
So we fleshed out some pretty intense progression systems.
And in the end, with a strong co-op horde mode demo that was really fun, and that updated vision, we got buy-in from the team and moved forward with Mass Effect's multiplayer.
Now, about this time I actually left Bioware, but the multiplayer team took that prototype and they built it out to be Mass Effect 3's multiplayer and they did an amazing job.
That same team has now gone on to build Andromeda and I cannot wait to check it out.
And just to be clear, we did what we set out to do.
We made multiplayer that Bioware players wanted to play.
In fact, they wanted to play it so much, they spent more time in multiplayer than they did in single player.
For the third game in a primarily single player RPG franchise, that was success beyond what we'd ever imagined.
So to kind of sum up, I really want to encourage you guys, when your teams get blocked, take a step back, consider adjusting your approach and embrace radical constraints.
Thank you.
Thank you, Christina.
So moving on here to our next speaker.
Our next speaker is not Christina Norman.
is Hal Barwood.
He is somewhat special in that he's one of the main inspirations behind this session.
Years ago, he worked on probably the most beloved Indiana Jones games of all time, and also was an illustrious game design speaker at GDC for many years that inspired me in my first years coming here, and actually worked on a first framework of establishing rules for game design called the 400 Project.
And he's here today to talk a little bit about that.
and what went right and what went wrong with that, and also some other stuff.
I give you Hal Barwood.
Thanks.
Hi there.
Let's look at some history.
I delivered the first talk on game design rules at GDC 16 years ago in 2001.
It was called For the 400.
I had observed that most arts have a lot of rules, and the practitioners need them and use them in order to be able to cope with the difficulties of their work.
But I also noticed that game designers did not seem to participate.
And I wondered, why not?
Well, were games just too new back then to have developed any rules?
Are we guided by formal principles instead, as some have advocated?
Or is it just the libertarian streak in game designers that says, we don't need no stinking rules?
Well, I thought that rules must exist.
But I thought they were mostly unstated.
They were intuitive, implicit, foggy, vague, and therefore, very unreliable.
And I wanted to change that.
And when I look back, I think I was on the right track.
Because here we are, 16 years later, still identifying rules and advocating for their use.
Noah Falstein and I did a couple of follow-up talks at GDC, and we started the 400 Project, inviting developers to come to us with rules, which we would then publish up.
We compiled and collected more than a hundred of these before we moved on to other things.
Let's look at some representatives of these rules that are typical.
Let the player turn the game off.
Bad save game systems cause players to repeatedly trudge through vast tracts of a game they can't figure out.
They learn to hate the developer, and they quit.
A good save game system lets you stop and start wherever you want.
If you add a small amount of randomness to AI calcs, the stupid NPCs that are running around may give you the illusion of intelligence.
And things that look alike should behave alike.
The items that an avatar can pick up and use should have a graphic emphasis over and above mere decor. Well, these are good rules. These, the ones I've just discussed, are very much like the rest of them. But they're small rules. They're minor. It's hard to believe that game designers would be guided by rules like this in their thought processes. And I was wondering why in all the hundred rules we got, we didn't uncover anything more important or deeper.
And I think there are a couple of reasons.
Deep rules are very hard to articulate.
And I think that there's a faction of game designers that feel that resorting to rules is to make use of shallow tricks.
Well, I think that rules are the summation of prior experience and carry with them great wisdom.
And the important rules are big rules, rules that hold sway, rules that actually can become part of your guidebook for how you go about your work.
I want to discuss one such rule today.
It's one of mine.
It's personify your problems.
And what it means is to use characters to solve design difficulties.
When you have a problem in front of you that might be solved mechanically, instead, see if you can get an NPC to take on that job.
Well, this is fundamental to the sort of games that I like to play that involve lots of character interaction, a certain amount of righteous combat, and traversal and exploration.
Well, character interaction, combat, exploration, this is the domain of narrative games.
They don't cover the waterfront of game design, but they cut a broad swath through it.
And I confess, the rule originates with my career as a screenwriter.
Let's see how the rule applies to an old movie that I worked on, Close Encounters of the Third Kind.
Steve Spielberg wanted his ending to be an awesome spectacle.
The problem in a movie is that awesomeness only goes so far.
It's very dry.
Bearing that in mind, when Matthew Robbins and I revised Steve's script, we invented Little Barry.
We got him abducted by aliens in the first act, and we delivered him to his mother's arms in the finale in order to give that awesomeness some emotional heft.
When Matthew's in my movie, Dragonslayer, it's all about a romp and stomp and very scary dragon.
But the dragon is an animal, a force of nature, and not a dramatic villain.
So we invented creepy King Cassiodorus and his hateful sacrificial lottery that he uses to appease the dragon to give the movie dramatic structure.
So does that mean that what I'm talking about is just storytelling?
Not at all.
Show don't tell in movies, which is a perfectly fine principle, becomes play don't show when you come to games.
So when my rule moves to the world of games, it's all about design, how to weld the story and the game play together.
Let's look at some examples.
Here's one, how to keep danger alive before it arrives.
In my old adventure game, Fate of Atlantis, the player's gonna spend hours running around before you ever arrive at the mysterious lost city.
So we invented a companion for Indy, Sophia Hapgood.
And we outfitted her with a necklace that comes from that city that carries with it a supernatural, unhealthy aura.
Indy's a little doubtful that she's turned into a psychic, but we learn right away that her claims are not entirely imaginary.
and a series of spooky puzzles involving her stand in for the mystery of the city until we actually arrive there. Well, here's a different kind of problem. Star Wars items and the poverty thereof. A while ago, I made a little replayable action-adventure game called Yoda Stories.
There are 15 scenarios. There are hundreds of ways to put them together. You can go through it each time in less than an hour.
When we made it, we didn't know how to categorize this, but we now just call these things casual games.
And it's just a little applet on your desk.
But the problem is that progress through a game like this is gated by a series of puzzle chains.
And we scoured the Star Wars Bible, and we found very few useful keys and tools.
You're looking at a lot of them right here.
What would you do with a Lomite crystal?
Well, we invented a new puzzle type to go along with keys and tools.
and tools, we invented valuables, items that only have human meaning.
So if you're a super-deformed Boba Fett and you demand a Lomite crystal, you super-deformed Luke Skywalker better go and get one if you want to advance the action.
This idea allowed us to create dozens of transactional puzzles involving lots of dialogue and characters to warm this little game up.
Now a slightly larger question is how do you take a Jones story, which originated in film, and translate that into the world of games.
Jones stories always take place in an exaggerated version of the here and now.
And so does my game, Infernal Machine.
And these games always demand, and the stories, always demand adventure and the supernatural.
Of course, the supernatural could be accomplished with visual effects, but you can also do it with characters.
Here we are in Shambhala, in an abandoned monastery inhabited by a lonely old woman.
If you run around and find a plant bulb, nurse it into growth, and hand that thing to the old woman, when it blooms, she's magically transformed into a beautiful young princess.
Well, as beautiful as you can be with 100 polygons.
And anyway, she now requires the supernatural strength to crack open a gate and send you on to even stranger things.
The adventure side, you need a pal and a guide.
We brought back Sophia Hapgood, this time as an untrustworthy CIA agent.
But we didn't just want her to hang around.
So in the Palawan volcano level, she's kidnapped by Russian Spetsnaz soldiers.
Meanwhile, Indy discovers a gate that blocks his path.
And there's a switch.
When pressed, the gate goes up.
When released, it comes right back down, forcing him to rescue Sophia, who then becomes his assistant.
She stands by the switch as he readies himself to whip across a gap.
She presses the switch and holds it down long enough for the gate to rise, and Indy to whip his way across and sneak inside just in time.
It's a co-op puzzle that anchors Sophia into the gameplay, one of many.
The finale is a boss fight. We needed to pull the player through a long slog, and we needed to give everything a supernatural twist. So the winged god Marduk, imagining that Sophia might be a like-minded menace, captures her and melds with her. So when you fight and win, you don't just earn a victory badge. You resolve a relationship and rescue a friend.
Now...
Here's a completely different kind of problem where you have a very mechanical game and you need to introduce the NPCs and make them function.
So, not long ago I made a game involving Queen Titania and King Oberon late of Shakespeare's Midsummer Night's Dream.
They're quarreling again and you need to reunite them.
It's an adventure RPG, but it takes the form of slider puzzles.
The player maneuvers icons around the game board in order to reveal and assemble the game elements.
Well, some of those icons turn into characters and they speak, and that gives the game some human warmth.
And other characters need to be assembled in order to be able to deal with them at all.
You even have to assemble the final boss in order to do battle.
Well, if you think what I'm talking about is old-fashioned or adventurey and static, antique, not so. Here's a perfectly modern game, The Last of Us. Joel, the hero, has to deliver a serum across the country where it might become a cure for a fungus that's destroyed civilization.
And that serum might have been liquid in a little glass vial in his pocket.
But if that were the case, the entire experience would be as dismal as this scene.
So instead, the serum resides in the immune system of a young woman, Ellie, his protege.
And the Naughty Dog designers didn't just want her to hang around either, so there are lots of co-op puzzles.
boosting her over walls, letting her crawl through tiny ducts to reach the far side of a gate that Joel can't open from this side, and because she can't swim in at least three instances, Joel has to find a raft to convey her across a body of water where she can do her stuff.
She even has a level of her own.
Well, what's the takeaway from this sort of thing?
There are two.
One, humanize your design.
It's never a mistake to add characters, especially if you can do so in unusual and functional ways.
But more generally, try to state the rules that do actually guide you as explicitly as possible, because that gives them power.
And try to run through them like a checklist, deliberately, as you work.
You'll find that if you do.
your design vocabulary will be greatly enlarged.
This is my website, finitearts.com.
Here you can take a look at that rule collection, see my old rule talks, play Thorne or play Yoda.
Thank you.
So weird that I just introduced Hal after having seen him talk 15 years ago.
So, you know, the interesting thing about that rule set, I think, is, you know, his rule there is, you know, these are principles Hal's been using in games for ages.
Why can't everybody get on board with this at last?
Anyway, finally, we're coming up to Luke Muscat here, who...
You know, he's most known perhaps as the designer of games like Fruit Ninja, Jetpack Joyride.
He's now the creative director at Pretty Gate, where they worked on landsliders and other titles.
You know, and every year I do a talk like this, someone says, yeah, really like a rule? Like, why are we doing rules?
And this year that person is Luke.
Here he is.
Okay, hi. Yeah, my name is Luke Muscat. I've made some stuff.
We're going a bit over time, so I'm gonna go a little bit faster.
So I'm basically here to say, forget your rules.
Make goals your king. It's all about just having strong goals.
Or, if you want the shorter, snappier, more twitterable title for this talk, fuck rules.
Here's the problem I have with rules. Every time that I'm thinking about rules or, you know, trying to kind of process all of the knowledge and wisdom I've gotten from other designers and through making lots of games over the years, it lets me take something, a feature that I'm making, and go from like crap feature to something really good, and then all of a sudden I realize I've actually been making the wrong thing all along.
So this is why I love goals.
It's always for me about keeping goals just to make sure I'm making the right thing.
And I'm going to give you an example.
So let's say this could be like a design document or whatever, for this will be like a user story and a sprint backlog.
We're going to make a health bar.
And we have a list of tasks there to make that health bar, and then a kind of estimate of how long we think it might take to make it.
So here we go.
Here's our health bar.
And.
Like that health bar sucks, right?
That's one shitty health bar.
So what do I do?
Well, I think about the first thing that I learned as a designer, which is it's all about player feedback.
You've got to make it juicy and exciting, and then that's going to make this health bar really good.
So let's iterate this health bar real quick.
We can add a little bit of art, so at least it doesn't look so placeholder.
And then, whoops.
we can add a bit of animation there as well.
So now you can see really clearly exactly how much health you've lost.
And then we add particles.
Yeah, particles.
Everyone loves particles, right?
And then we can step it up and add some screen shake as well.
And now we have a health bar that's kind of cool.
And of course, we can just keep on going and going and going and make this better and better.
And what we've done is we've taken an idea and then we've implemented it and then we've iterated on that implementation to make it as good as possible and then we're done.
And even kind of like the dangerous part of this is I love that health bar, right?
Like I just sunk a whole bunch of time into that health bar.
But, I mean, why was I making a health bar again?
Like, clearly I thought it was a good idea at some point, but at this point I've completely forgotten what the purpose of this health bar was.
And even if I remember why it's on there, in the design document or whatever, you can bet my programmers and artists don't know.
So this is the thing, this is, you know, we always have like, you know, the vision, which is like our really big goal for the game, and then we have the design pillars, which are like the ones in the middle, and then like the user stories, or like, you know, the feature kind of goals, and then all of a sudden we're implementing it, and for me, like, I just completely forget all that other stuff.
And you know, implementation is hard.
And I think that's why it kind of goes over the top of all of that.
I mean, a lot of the talks at GDC are about the best way to implement something.
How do you make something more efficient?
How do you make it even better, have a better emotional response?
And so what I try and do is actually make it really explicit that I need to hit my goals. And you can do that with a few really simple little tweaks. So instead of a user story, I can set a goal here and go, okay, the player can take multiple hits and knows when they will die. I mean, that's basically like the goal of a health bar, right?
And now, instead of having a list of tasks, we have a list of possible solutions.
There is definitely more than one way to skin this cat.
Tricky part is, is now effort.
We don't know exactly what we're making, right?
So how do we calculate the effort?
Well, I think that's fine.
We could do even better.
Let's set a budget instead.
How important is it that we hit this goal and really nail it?
And let's scale the amount of work based on not how much there is to do, but how important it is.
And this way it really explicitly allows us to iterate on an idea first before we iterate on the implementation.
And really, I put this goal everywhere just so that I invoke my inner three-year-old, which is just to keep asking why.
Why? Why are we doing this? To make it more fun.
Yeah, but like, why? Does it need to be fun?
And just keep on drilling back further and further.
And you know, we can make this goal way better as well.
We can iterate on the goal and go, okay, let's try and create exciting moments where the player barely scrapes through an area.
That's really what this health bar was about in the first place, right?
And there's so many ways we could do that.
Health bar is totally one of those ways.
This isn't saying like, don't do health bars.
Maybe that is the best way, and maybe for, you know, the amount of budget we have, maybe that's what works.
So, when I was doing Jetpack Joyride, we had this exact problem, right?
This is basically what it looked like at one point. It's a cave flyer.
One touch, dodge stuff, if something hits you, you die.
And that's it.
And you know, it was already looking like this. It was quite polished and pretty fun, but we just...
I mean, I wasn't quite feeling it.
It just wasn't quite there yet, I didn't think.
It felt a little one-note and a little repetitive.
So I go, okay, my goal is obviously to add some variety.
How am I gonna add variety?
power-ups. Duh. Like that's obviously the way that I'll do it. And we spent ages working on power-ups and it just, I mean, it helped. There was more variety, there was more things to do, but it just wasn't quite there. And really the reason is, is this goal sucks. Make the game more interesting? Like what does that even mean? My possible solutions are power-ups and maybe something else.
We really gotta give that goal a bit of love and make that a better goal.
And so we realized after a while playing around with it, it wasn't just that it needed more variety, like the intensity really specifically needed more variety.
Because the game starts slow and then speeds up and you're always one hit away from death.
And so your intensity just starts low, ramps up and then you're just like maxed out the whole time.
And then that makes it feel really one note.
And I realize, like, you know, the variety problem isn't necessarily about power-ups or having different things to do.
It's actually a health problem, right?
If I add three hearts, for example, all of a sudden we get a dramatically different intensity curve.
You start off really low, you hit something, and all of a sudden you're like, ooh, okay, I've only got one more hit left and then I'm on my last hit.
Or we could do, like, a regenerating health thing, like in a Call of Duty or whatever.
And they all give really different intensities and feeling to the game.
It's really about health, not about adding power-ups.
And we kind of ended up with this system, which is the vehicle system, where every now and then you'll find a vehicle and it'll actually change the controls and everything.
And you know, it stops and slows down the whole game and it kind of starts you off again.
Really the vehicle is just the most elaborate health pack pickup you've ever seen.
Eventually I'll hit something and blow up and now you're back into the same cadence as before.
And this gives us this really interesting intensity curve.
It's just this kind of weird love child of a health system and a power-up system.
And it became a really iconic part of the game and a big factor of its success.
So some pros to kind of working this way, I mean, other than the ones I've kind of obviously already laid out, my favorite thing is that it really helps the team all pull in the same direction.
You know, like when a programmer comes to you and has some crazy feature that they just worked on on the side, they come up with some, you know, batshit crazy thing that they really like and sometimes, like fifty percent of the time it's super cool and ends up in the game and fifty percent of the time you're like, well that's cool but like, why did you do that?
If your goals are always really explicitly stated everywhere, it means there's a really good chance that they'll be pulling in the right direction and come up with something cool that you didn't even think of that helps you achieve that goal. Even better, it helps them kind of check me to make sure I'm trying to hit those goals because I might start implementing something and they're like, what are you sure that actually achieves what you were trying to do?
Some of the cons, well, you know, if you're in a company of 500 people and you're the UI designer, maybe you have to make a health bar.
Because maybe it's on a contract that you have with a giant publisher or whatever.
It's not necessarily completely possible to go, well, I don't know what I'm making, I just know what I want it to feel like.
But even still, I feel like as long as you're constantly going back, I'm making a health bar, like, why is the health bar important?
What are the important parts of this?
What do I want to convey?
You can still use goals to help make that even better.
Goals can be really weird.
One of the big goals we had when we made Fruit Ninja was we wanted players to be able to smell the fruit.
Like it was some weird kind of smell-o-vision thing.
So this is like obviously a completely outrageous goal, but what it helped do was make us really focus on the splatters and the feedback, and it guided us in other ways.
The fruit is always perfect and always cut perfectly in half, because we didn't want to do anything that would invoke the smell of rotten fruit, for example.
And then, even better, this is what I really, really like about goals, is goals can be selfish.
goals can be about you as a designer or your team, they don't need to be about the player at all.
You can do something just because you want to use a new bit of kit and try something out.
You can do things because you want to see what is possible, or maybe you know it's a business objective, you want to just see what you can do.
You can just come up with goals that are to push yourself and push your team and see what's possible.
And I mean that's what we're doing right now and I can tell you it is pushing us, oh my god.
And so, yeah, I just use goals for everything, including this talk, right?
So, I really hate PowerPoint and Keynote, because I think it is a really limiting way of...
There's just certain kinds of experiences that you can't create.
And so I had this, like, really ridiculous idea in my head that, you know, one thing that I couldn't do in Keynote is, like, step back and shoot my own presentation with a machine gun, which is, like, the dumbest kind of goal ever.
But, I mean, that's kind of the reason that I made my entire presentation in Unity.
uh...
when i showed this to Richard he was like hmm you don't have kids do you?
And this is the thing, right?
Like with goals and restrictions, even when they're, sorry, with rules and restrictions is sometimes they're gently nudging you to do a particular thing, right?
Like with GDC, there's no rule saying don't do this, but it's telling you download the PowerPoint, download the keynote template.
And those are all really reliable ways to make a really good that kind of presentation.
But the problem is, it's like rules rarely lead to something new.
It's only through kind of breaking rules.
that you can really try and do something new.
And don't get me wrong, doing something that's new just for the sake of, you know, something new isn't the be-all and end-all.
You can, but I think sometimes we, we lose sight of just how powerful kind of surprise and novelty can be.
So yeah, I'm like way over time, so I'm going to skip my very carefully constructed metaphor and just skip straight to the end, because really, my actual goal, all I was trying to achieve is to do whatever I could to make you guys remember to go for your goals.
Let's get out of this madness.
So thanks everyone for coming.
Remember that everything you know so far is wrong.
I hope these speakers help subvert your thoughts about game design.
Remember too that the corollary of everything you know is wrong is that no one knows anything, Kara of William Goldman.
So the rules you saw here today may not apply to you now, they may not apply to your project right now, they may never apply to you, but keep them for when you're in the darkness and you're wondering what to do.
figure out what your own rules are and make and make great games.
Thanks everyone for coming.
Thanks to Amy Henning and Soren Johnson for helping us a lot with this talk.
And we're not gonna do Q and A obviously, but we'll be up here for a while if you wanna come chat.
Thank you.
