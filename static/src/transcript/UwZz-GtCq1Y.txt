So first, I just want to throw up the obligatory resume slide just so you know where I'm coming from and what I'm talking about.
My career has largely been working on sort of narrative first-person games, in which I've been a level designer for about 10 years.
And that's mostly the sort of stuff that I was going to be focusing on.
I'm currently working on something that's not that at all.
And I'm not really going to be talking about that very much at all.
So first, I want to talk about what do I mean by expressive.
And I think there's a couple, there's two components that I wanted to talk about.
One is expressing something about the world or characters, and it's just the ways that you can use really simple level design tools to say something, essentially to act in the world on behalf of the characters that you are portraying through your scripting.
And then the other is creating opportunities for player expression, which I just want to look at a couple examples of.
ways that you can use, again, a very simple tool set to create opportunities where the player can say something about themselves in the world and the sort of player they want to be.
And I'm going to be looking at this through the frame of specifically scripting.
One thing, just a warning, it occurred to me while I was sitting up here that I'm going to be referring to the script, which is like the written document that defines what happens in the world and the dialogue and whatnot, and scripting, which is the actual logic that is driving the game.
So, let me apologize in advance for that, because I realize it might be confusing.
I'm also really mostly going to be looking at really simple tools like delays and triggers and counters, that sort of thing.
Like the really basic building blocks of scripting level.
So I also just wanted to talk a little bit about the level design job, because the stuff that I'm looking at really pertains to one particular type of level design.
As Joel indicated earlier, level design can mean a lot of different things, and my job as a level designer now is very, very different.
So this is really looking at the job of the level designer on narrative, authored, first-person type games, which is admittedly a very thin slice of what level design can be.
So in looking at what that job is, I was thinking about what I looked for when I was hiring people when I was working at Irrational. And there were really two main qualities that I was looking for.
One was the ability to flawlessly execute required content. And what that means is basically you're given a script by Creative Direction and it's your job to just make that happen in the world in a way that just feels great from the first time through it.
And also that you can build in a way that is really functional and robust and not, you know, terrible and won't fall apart the moment somebody sort of misbehaves in a way.
And then the other is the ability to sort of effectively fill in the gaps in that script with your own creative solutions that are sort of on tone and on theme with what's going on around it.
And really the flawless execution part is the part that I think is kind of most important for a level designer.
At least in my own experience, maybe 95 or more percent of my time was spent really just implementing stuff as written and just sort of making things work.
The remaining 5% is sort of the really creative, like, I'm inventing this scene and it's going to be awesome and I'm a great writer and so on and so forth.
But flawless execution is super important because it's mostly what you're doing.
So where I want to start is just looking at a first pass, sort of the gray box script in a way.
And I want to look at essentially like a really, really simple kind of sequence, which is you're given a script.
And in it, it's got just a moment and a thing is said, or something occurs.
Like the player enters this room, and then this VO line plays.
A typical sort of first pass is something like this.
I just sort of showed a version of it.
This is all done in Unreal 4, because that's what I'm working on right now.
It's basically the players touch a trigger, I check that it's a player, play a sound.
It's really simple.
It gets the point across, but there's not a lot of art there.
So I want to look at just a moment from Infinite.
Hold on.
Oh, all right, there it goes.
basically the script. The player sees this body and then they say something. This is supposed to be audio. Well, that's a bummer.
Alright, so basically he walked up to the body, looked for a moment and said, shit.
So that was the script. It's like a really, really simple moment.
Booker Lighthouse sees body says shit.
So essentially that was like the thing you just looked at.
Trigger is hit. Thing occurs.
But there's something else that's going on in there, and that's the delay, which I think is sort of one of the fundamental little building blocks of building interesting sort of scripts.
And the delay I depict here is like a 0.2 second delay, which is actually for narrative stuff kind of a really good place to start.
Like, it's really small, but it's a way to sort of approximate that moment when somebody is parsing or a character is taking a moment to gain understanding, because brains don't to work as fast as, you know, the tick rate of your game as you're playing it.
This is a really powerful tool that is kind of divisive.
In my experience, tech hates them.
Delays add a lot of noise to systems, in that when it's time to debug, a delay can create all sorts of weird problems because this stuff that's supposed to be executing in this really precise order that the programmers can anticipate now has a designer kind of screwing things up and arbitrarily just adding problems.
You can create race conditions.
They become really hard to debug.
Conversely, narrative is going to want you to always use delays because essentially you're trying generally to depict like sort of human interactions within essentially like a machine of just things that click on and off and Using little moments and pauses is sort of the tool that the level designer has where they can essentially act in the world You know where you can insert a pause which is you know a huge part of of Acting is just like the moments when you don't say something or editing as well You know it's the the moments when things are not occurring and that's what the delay is really good at doing So they can do all sorts of different things.
They can depict sort of a pause between thoughts or a moment to gain understanding.
They can also be used to sort of set up a joke or be the moment before a jump scare to build tension.
And I want to use an example of that, which actually I think no audio here is OK.
This is from Gone Home.
Oh, and then the delay went off at that moment.
The thing I like about that, I think that's a really artful use of a very, very simple tool, which is the tool is basically a timer goes off when the player reads the note.
And then that timer is tuned to be a point that nobody is reasonably going to be able to read that whole note.
And then it sort of forces that note down so the player can no longer read it.
And then after that, the player can no longer pick it up.
I really like that moment because I think it's a really artful use of a very, very simple tool, and it also is just an interesting moment because it's one of the only moments I could think of in Gone Home, and actually really anywhere, like this is not a common thing to do, where there's a really clear tension established between what the character in the world wants and what the player wants to do, and they actually fight with each other, and the character you're inhabiting sort of asserts themselves.
So it's a cool moment, and I think that's a great example of a good way to use this sort of tool.
Another tool I wanted to talk about briefly is the line of sight trigger, which I view as one of the most vital tools for doing first person narrative storytelling.
It's basically just a trigger that fires when the player has line of sight to something.
And the functionality for this sort of thing is pretty simple.
I'm just going to outline it.
If you don't have this in your engine and you're making a first person game, put in a request with tech to make sure that you get this thing because it is super useful.
And it's a very powerful tool.
So you're looking for a few features for it.
One is the active area, like the screen percent.
So basically, you've got this big screen, and you want to make sure that the player has the thing that you want to know they're looking at in the center of the screen.
Or maybe you want to make sure it's at the periphery, depending on what sort of event you're going to fire.
You've got a trigger distance.
which you want to make sure the trigger just doesn't work over infinite distances, because you're setting up something you want the player to respond to or acknowledge.
But if they see it through a weird gap in the geometry or something from a great distance away, you don't want to need to account for that.
And you don't want to need to build extra logic to turn it on and off.
You need the on begin overlap, like line of sight is gained.
On end overlap, it ends.
the ability to toggle it and then for bonus points you'd actually probably want to see if you could get built in like a time delay within it so that it will fire an output when you say like X number of seconds have passed so you know that the player has been continuously looking at something for some amount of time. And again I'm going to look at another example for this. And actually with no audio you're not going to be able to hear really what happens. Oh wait. Oh. Oh. Sorry.
Sorry.
All right.
Oh, I think I just broke it.
Man, I'm not good at computers, I guess.
Alright, let me see if I can... oh man. Alright. Well... anyway.
There we go.
The seed of the prophet.
So very much like the prior example, the script for that was very simple. The player sees this sign and then they say something about it. The thing with that sign is positionally it's like over the player's head. So use a line of sight trigger there to determine that they are now looking up and actually reading the thing. So then I can fire something appropriately off that. There's also another thing going on in here which is hysteresis. And I'm going to talk through what this is because it looks like a mess right now.
But basically hysteresis is like the dictionary definition is up there, the phenomenon which the value of a physical property lags behind changes in the effect causing it.
Really what this means is you just trigger events on thresholds as opposed to just sort of a binary on off switch.
So the script to basically use a line of sight trigger in a way that exhibits hysteresis is right here you've got on look.
I'm setting B is looking, a Boolean to true, waiting for a delay.
checking if that Boolean is still true, then this is just a gate that will only ever fire once.
And in this example, just because it's an example I set up, it's just printing a string.
But the important thing here is the untouch, like the line of sight lost event, which you then set this Boolean to false.
So what occurs there is, as the delay winds down, if the player has looked away, it won't fire as true.
And the reason this sort of thing is important, especially with line of sight triggers, is players are super erratic.
They're like swinging their crosshairs all around.
They may not actually be looking at a thing.
They could just be like swinging their crosshair around to shoot some fool.
So you wanna just make sure that there's, like they have lingered on something for a moment.
Another way to use hysteresis is actually in physical triggers.
This is just a sleep location from the current game I'm working on.
The way you do this is actually use two triggers for events.
One, a small trigger used for on touch, and then a larger trigger used for on untouch.
And there's a couple benefits to this, both technical and more softer experiential.
The kind of softer experiential benefit is in a level the player is moving through, they're basically just operating on and off switches on a bunch of logic.
And when you on off something on a single switch, it could feel very binary, because it is.
And it can have sort of githering problems where if somebody is going back and forth over a switch, it can become really obvious that, oh, this light is somehow tied to where I'm standing on the floor, and that's really weird.
So it's just like sort of a good general way to sort of make something turn off at one point and on at one point and off at another in a way that doesn't feel super mechanical.
But it's also really good just in terms of like a best practice technically.
Because a lot of times you might be doing something with a trigger that takes longer than a single frame or a tick to execute.
So an example might be, say you've got an AI encounter and you want to spawn a bunch of AIs in it.
The first thing you might do is just wrap the whole thing in a big trigger and on approach, you spawn all the AIs like on touch and on untouch you unspawn them.
The issues from that can come about because spawning an AI typically takes longer than it takes to just zip back and forth over a trigger. Then you can find yourself in a situation where basically you've untouched the trigger while the AIs are still spawning. Maybe that untouch is doing something like deactivating the logic that controls the AIs so now they're spawning but there's nothing to control them. Maybe at that point you find yourself with a bunch of rogue AIs with like nothing managing them.
And maybe at that point you find yourself in a situation where QA figures out a method whereby they can do that with every trigger in the game, and maybe at that point you cancel your vacation plans to rewrite all the triggers.
So you don't wanna do that.
You just build your triggers in this way.
You're saving yourself a lot of grief.
So, Hysteresis I think is a good overall tool, in that it allows you to do things like wait for a moment, confirm engagement, let the player think, let the character think.
and also avoid sort of mechanical issues like dithering and really obvious mechanical bugs and low repro bugs that are hard to track down.
I want to look at another example, which is where you start to sort of build these things together.
This is the honor store from the beginning of Bioshock Infinite.
And this is, again, just using some very simple tools, but it's trying to build an actual interactive sequence in which the player can express something about themselves.
Whoops.
but a bit weak in the key of the scroll.
Cloudy skies, warm temperatures, and light variable winds throughout the afternoon.
In short, a beautiful day for the festivities, Columbia.
And now, back to the music.
We've seen it coming down the street.
Now I ask you very confidently, take me, please.
Take me tonight.
Oh.
So what I like about that moment is really.
It's very early on in the game.
It's before all the sort of core verbs have opened up.
The player doesn't have a gun yet.
They're sort of in the walk around and experience the world.
It's like the introduction, but there's not a lot of sort of interactive options.
But what it creates is an opportunity for the player to interact with something in the world and do something that, in a non-consequential way, allows them to express something about themselves and what the sort of player they are and what they want to be.
And this is all optional, too.
There's no reason you need to go in there.
But if you do, you can decide, like, am I a crook, or am I an honest person?
And it's really simple.
Like, it's a fun thing to do that lets people just sort of touch and interact with the world a little bit.
And the construction of this is actually very simple.
Basically, there's a look trigger inside the door on approach, which causes the animation of the existing customer to play, where he flips the coin in.
And there's also just a touch trigger as a fallback.
If the player happens to back into the store, they're not going to see an idle, dumb AI not doing anything.
Then on trigger, play the item.
There's a variable in the store, and this is like the core unit of logic for this whole encounter, or this whole sequence, is itotal unpaid items, or something like that, which I just sort of count up as the player takes items, and I decrement to zero when they pay.
There's a usable actor that sits on the little money bin.
And then every time they collect something, I increment that itotal unpaid items by one.
and as they approach the payment box, I check it like, just generally I try and do this check at the last possible moment where something is set.
So when they get really close to the box, I check if they have more than zero unpaid items, at which point I activate the pay money entity.
And the other things, like the coins themselves, are just overridden by the pay money.
You can, if you actually do kind of aim in, I'm not super fond of this, you can like really zero in and get the coins so you can steal when you still have money to pay.
But it's really simple tools, like it's basically a look trigger, an integer counter, item used events, and a usable actor.
And I think one of the strengths of what the level designer can do is do a lot with like...
very little unique content.
Like this, the honor store went in very late, and it's sort of an example of, we called it like making soup, where basically you've got this whole cupboard full of things you can use, animations, art, and you just sort of can assemble them in different ways, and I think that that's like an opportunity for designers, particularly late in a project when there's not a lot of time, and there's certainly not a lot of engineering time to create interactive sequences.
So this sequence really needed a custom sign, so one art asset, some repurposed animation, I believe that actually started as a grenade toss when the guy flips the coin in, which worked okay, and actually wasn't a lot of work to repurpose it into a coin flip.
There was a couple of small pickup dialogue lines and a few text lines to localize, which is one of the cheapest changes you can make or ads you can do very late in a game's development process.
Another example I wanted to look at that was kind of an inspiration actually for the honor story is pick up the can which I find to be a really unique and memorable moment.
And I'm guessing maybe some of you know what I'm talking about without even mentioning the game.
Thank you for a ride.
Of course, your question touches on one of the basic biological impulses, with all its associated hopes and fears for the future of the species.
Of course, your question touches on one of the basic biological impulses, with all its associated hopes and fears for the future of the species.
I also detect some unspecified questions.
I love that moment just because, like, similar to the Honor System store, it's very early in the game.
It's before you've got a lot of core verbs available to you, but it gives the player a really fun opportunity to just kind of say something about who they are, decide how they want to inhabit the world.
Like, they have an option there to essentially...
kind of, you know, not make trouble, heads down, do what the bad guy says, or they also have the option to cause trouble, and the whole thing is really like zero consequence, there's nothing afterwards that really carries along from that scene, and the guy's not gonna kill you or anything, but I do find it's like a really, it's a cool opportunity and a cool way to sort of let the player express something outside the core verbs that says something about the sort of player they wanna be.
The setup for this, I just opened it up in Hammer and checked it out.
pretty, I mean it's not, I don't want to trivialize like, I'm sure there was a lot of work that went into this and there was definitely some long days of bug fixing associated with it because it's kind of complicated. But it really comes down to the use of a couple touch triggers. One on approach causes the guy to walk out, as you get closer it causes him to knock the can over.
There's delays that fire off once he does that, where he grows impatient with you and plays different animations and lines as he grows impatient.
Just a little physics impulse, which I love, like the can flies off the thing because there's a tiny invisible explosion that happens behind it.
And lastly, there's like a collision trigger inside the can that's just waiting to be touched by the other can, or inside the trash can.
So I encourage designers to do is find opportunities.
Like look for ways you can use the tools at your disposal to create these sorts of memorable experiences.
And focus on ones outside maybe the core verbs of the game itself.
Like building gameplay systems and level script is generally a bad idea, and you're going to create a world of pain for yourself.
But creating these little one-offs or low consequence kind of opportunities for the player is a pretty safe and interesting way that you can add flavor to your world.
The last thing, I think I'm really low on time so I'm going to rush through this, is missions and quests.
This is actually I think one of the most challenging things as a level designer is generally in shooters or action games, like every mission, every quest, everything you need to do comes down to some really simple kind of dumb things like push the button, get the thing to place, kill the guy or wait for the timer.
So a challenge is sort of how do you make these things interesting.
And I'm going to actually give this in the form of a homework assignment for you all, but it's to play a video game so it's cool.
And I would look at the Overseer Campbell mission from Dishonored.
It's like from the first main mission in the game, like sort of the first proper mission.
And the goals are two from the previous list.
One, you need to get the thing, which is get his journal.
And two, eliminate him, which is what I like there is it's not kill him, it's eliminate.
And the success conditions, if you play through the level, are really like those two things have occurred.
And I'm pretty sure the way that works is it's really just two booleans that get flipped.
One, when you grab the journal, which is a systemic thing you can do when you pickpocket it from him or take it from his body.
and two, has been eliminated, which I believe is probably fired by either one, any number of ways you can systemically kill him, two, a timer that goes off after he drinks the poison, however he drinks the poison. There's a lot of ways that that can happen. Or three, has been hooked up to a torture machine, which is like the, or a branding machine. I am at zero. Oh, man.
All right. Sorry. So the homework assignment is to just go through this and try all these different things and think about how it was actually implemented and how it was built.
And a lot of it's pretty simple little pieces that together form a really big whole.
So lastly, I would just call the level designers to use your tools, things like Hysteresis, to try and make interactions that feel human and don't feel like it's just a computer switching off and on.
And also to try and inhabit the characters you're portraying and the players you're creating for.
So think about like...
when somebody is, when you have a line to deliver, would there be a pause or something like that?
And, sorry, that's it.
If you have questions or want to chat, I'm showing off my game on the show floor at Epic's booth, and we'll be there all week.
So, thank you.
