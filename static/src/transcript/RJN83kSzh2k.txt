Hi, my name is Matt Lindsay. I'm an independent game developer, and I'd like to show you how Pico-8 is useful for rapid development of prototypes or other small projects.
So what is PICO-8?
PICO-8 describes itself as a fantasy console.
Essentially, it's an all-in-one game creation suite that gives you a variety of simple, rapid development tools, each of which has useful constraints to help you make games faster.
It also runs on basically everything.
You can see it has a Windows version, and a Raspberry Pi version, and a Linux version, and an OS X version, so chances are very good that you can probably work it into your workflow somehow.
So it gives you a very simple sprite editing tool, wherein you can see, right, you can very quickly mock up these little sprites.
This here is a ninja.
And it has 16 colors, with a fairly low resolution, which allows you to fairly quickly make easily differentiated sprites, but not get too caught up in the details.
It has a very rapid tile map editor, so you can go from having a blank screen to new platforms to jump around in and test on very quickly.
The map itself is large but not huge, so you have some constraints there too, enough to give you space to test things or make something small, but nothing too gigantic.
It has a very simple sound editing tool.
You can see here I select a sine wave and then increase pitch over time to make a sort of simple jumping bloop sound, right?
You can also select a variety of other different sound effects and a four tracker different music editing tool.
which allows you to import either of these instruments that you've created, or use some default ones, and very quickly make some music with different effects, but nothing too complicated.
It uses a subset of Lua as its scripting language.
So you get a rapid and human-readable codebase that also is kept fairly small.
It has a token limit on the bottom right side of the little PICO-8 screen there.
You can't have more than about 8,200 tokens, which keeps things from getting too bloated.
So Pico-8 gives you a variety of simple, low-level calls, right?
An init function, an update function, a draw function, things to draw sprites to the screen, or play sounds, or show you the map.
So let's build on top of this and make a little platformer.
Now you could, at this point, write a simple, bespoke engine for whatever kind of game that you're trying to make.
And depending on your level of experience, or the nature of your idea, or your time frame, this might be the right idea for you.
But you don't actually need to work from truly nothing if you want to really get up and going faster.
Any game...
that you load into a Pico-8 console also gives you access to the full assets and source code of that game.
If you run the install demos command, you get a variety of little sample games to learn from and build on.
Like this little platformer here called Jel-Pi. Or Jel-PL, I'm not exactly sure.
And if your goal is just to build on top of something there, like this demo platformer, this might be all you need to do.
You might just install the demos, load up the demo platformer, and start adding some new stuff.
And I do want to note here that just because something is open source, doesn't mean you have the right to modify it and publish it, especially if this is somebody else's game.
That being said, out of the way, right?
The original Celeste, which was a PICO-8 game, its movement code has been released under an MIT license.
So you are allowed to distribute it or publish it or even sell it, as long as you also do so with an MIT license.
Now Celeste and its sequel, Celeste II, another PICO-8 game, use a very simple and similar foundation of collision, input handling, drawing things to the screen, etc.
which works very well for a lot of different kinds of games.
Of the two, I think Celeste 2's codebase is a little bit clearer and easier to work in.
So, let's not go completely from scratch.
Let's modify some of the basic structures in the Celeste 2 codebase into our game to give us something to build on.
Now we're not going to be using the entire code base, we're just going to be picking out the most useful portions of it.
The basic low-level stuff that we don't want to have to worry about when our goal is to iterate on ideas and develop prototypes.
In a few places I'm going to be making some modifications for this purpose as well as for simplicity, and I'll point those out when we get to them.
Also, before we move on, I also want to note, Celeste 2 is not under an MIT license, it's under a Creative Commons license with all of these different attributes, and you can't sell it if you make a version of this game and then put it on the internet. Just a little note here.
Okay, so we need some assets just to mess around with, right?
So we can see here we've built up a few very simple assets.
We have a target, we have a shuriken, we have a little ninja, we have a platform.
And I want to take a brief moment to point you at flags.
So you'll see here next to the target, right, there's all those little dots.
And one of the dots is red.
That means that that flag is currently turned on.
There are seven of them, eight of them, right? Zero through seven.
And we're going to be using that later.
The flags on them by themselves don't do anything.
These are user defined.
This is just a way of us saying, okay, does this sprite have that flag?
Great. Do something about it.
We can set these and check them in code as well, but I'm setting one here for a purpose that we're going to get into later.
Just remember that the target and the ninja both have flag zero set.
So...
To start things off, right at the top of our code, we have a few different globals, right?
We have our table of objects and a table of types and a table that's called lookup.
The table is the most useful and flexible data structure in Lua.
You're going to be using it all the time.
Your tables are going to be your arrays.
They're going to be just all of your structs are going to be tables, right?
Everything's tables.
And the lookup table here, which is I think the most interesting of the three, is something that we're using as a Lua meta table to enable object-oriented style inheritance.
And if that sentence doesn't mean anything to you, that's okay, don't worry about it.
It's all pretty simple to use. You don't need to understand this to use it.
As well as that, we've strutted up a few basic references to the buttons here.
Right? So we don't want to have to remember which button is left and which button is X and which button is O.
We can just set a few consts here.
This is also adapted from the Celeste 1 codebase where this was present and is notably absent from the Celeste 2 codebase.
So.
Everything in our game is going to be an object, and if you are familiar with object-oriented game programming, this is going to look very familiar to you.
I also want to note, you don't have to make your game object-oriented, it's just very easy to work in and comfortable for many different game developers.
So, our objects have a series of shared attributes.
They have a speed in the x and y direction.
They have a position.
They have a unique identifier based on where on the map they spawned.
As well as a few other little notable things here.
They have some collisions, which we're going to get into exactly how the collision engine of Celeste 2 and similarly how Celeste works, and why that may or may not be useful for your game, but each object has access to those collision and movement functions.
They can see if they overlap or contain.
Another thing, they can see if they are solid, right?
There's a helpful function called cornerCorrect.
So if an object is moving and would just barely bump the edge of another tile, you can sort of nudge it upwards or downwards slightly to give it a more natural movement path.
I also want to note here...
that each object has a user-defined hitbox, which is an offset from that object's position and width and height. This allows you to have certain objects have a hitbox which is differently sized than their sprite might imply. So you can have a hazard be a little bit smaller than it looks on the screen. You can have a collectible pickup be a little bit bigger than it looks on the screen.
etc. Right here you can see I have drawn the hitboxes of Celeste 2. I booted up a level and I added a little bit of code to just draw all of the hitboxes and you can see some of them are larger than their sprites, some of them are smaller.
You can see that spikes have very little hitboxes, right, to feel more fair.
And the player's hitbox is just sort of this bottom rectangle.
Now, the way that the collision works in this little engine that we're working on here that we've adapted from Celeste 2 is pixel perfect.
So each object, as it's moving, moves one pixel at a time, first in the x direction, then the y direction.
and checks to see if it's hitting anything on the way.
This is going to give us extremely accurate pixel-perfect collision, and very, very robust collision at that.
It's unlikely that two objects are going to, out of happenstance, be overlapping when they shouldn't be with this engine.
However, I do want to stress here that this is great for precise platforming, and it's great for really precise collision detection, but it's very expensive.
By which I mean, it takes a lot of computation time.
So if your game doesn't rely on really precise collisions between objects, you may want to use a cheaper collision model.
The platformer that you get when you install the demos for Pico-8 has a much simpler version of this, where instead of moving one pixel at a time, it simply checks if your end position is somewhere you are allowed to be, and if it is it moves you there, and if it isn't it creates a bounce so that you would sort of bounce off of the edge of whatever you are trying to move into, and this is also, you know, robust enough.
This works fine for a lot of different kinds of games, and if your prototype needs lots and lots of different objects on screen at the same time, all moving around and detecting collisions, you may want to consider this alternate collision version instead of the more intensive but more accurate pixel perfect version.
Oh, also, one other note before we leave this slide.
There's a flag here called remainder.
This allows you to make sure, in this engine, you're moving only an integer number of collisions per frame.
So if you're moving at a speed of 2.5, first you move at a speed of 2, the next frame you move at a speed of 3.
It carries over a little bit of the non-integer portions of your movement speed to really make sure you have clean collisions, because you don't want the player moving half a pixel and messing up all of your math.
Inputs are handled fairly simply.
We have this large block here.
It looks kind of scary, but really it's just saying if you push left, you're moving left, and you push right, you're moving right, even if you were already pushing another direction.
This works very cleanly.
Also notably, we have a quick check for your jump.
We want to make sure that you're not jumping too frequently, because that might feel strange.
So you can only jump every four frames.
Basically, if you're not already jumping, you know, if you haven't just jumped and you push the button, great, jump. As to how and why you're allowed to jump, that's handled later in the player code.
Speaking of that, the player code has been greatly simplified from the Celeste 2 original version.
We've essentially stripped away everything from it except a basic jump and move around and collision and update.
I have chosen to keep the wall jump from Celeste 2 because I think it's just sort of a fun, flexible mechanic, excuse me, and it'll work well in the kind of games that we want to test out.
We may want a wall jump anyway, and if you wanted to remove it, it wouldn't be hard to remove.
The player notably has a state.
which is key to how its update function works.
So the player's default state is 0, which is our standard moving around and jumping state.
If you want a different set of updates to happen on a different state, let's say for example you wanted the player to be able to swim, That is going to change how they update their movement over time.
It's going to change what happens when you get a jump input, right?
These are things you can handle very easily and very quickly by adding a new state to the player that does what you want it to do and then adding a transition between the two states.
We're going to be getting into more of that later.
We also have a brief check here called hazard check.
So if any object in the world is flagged as a hazard, we can know in what direction it should be a hazard and enable ourselves to be correctly hurt by it when that happens.
Otherwise we have the same sort of moveX, moveY, and a simple flag called onGround which looks one pixel below the player's current hitbox to see if that is a solid object.
If it is, you are on the ground.
You are allowed to jump and do grounded things.
So at the very beginning of our game, we need to spawn in some objects.
This is a very simple little code that looks at every tile on the map.
We're going all 127 across and all 60, you know, 128 over 127 and all 64 down.
We're looking at every tile on the map and we're calling two different functions.
nget tells us what sprite is at the tile position x, y.
And fget tells us if a sprite has a particular flag.
So this looks at every different tile location on the map, and it sees if anything has flag zero.
If it does, that means that that should spawn an object of the relevant type, and shouldn't actually be a tile on the map.
So simply put, if we find something which is a target, and it has a little zero flag, Spawn a target in that location and then get rid of the background tile that looks like a target.
Very simple, very flexible. Again, most of the code and structure of this code is useful for lots of different kinds of games besides platformers. It's just generically, this is a, I think, a helpful structure for you to adapt in your prototypes. So putting it all together.
We've taken the Celeste II codebase and stripped out everything from it that we don't need and put it into a new project.
You can see we've shrunk the number of tokens in our code from almost 8,000 to about 1,700, give or take, and we have some basic movement, right?
We can run around, we correctly do not intersect with the wall tiles, we can wall jump.
This is all fairly stable, feels pretty good to move around in, and of course if we wanted to tweak the jump arcs or gravity or the movement speed or whatever, we could do that very easily.
So now...
Let's build on top of that, right?
We're here to make a platformer.
So let's make a platformer.
Let's iterate on this idea.
So let's add some shurikens, right?
Our ninja has no way of actually interacting with the targets right now.
So let's add a simple type, right?
We have a new type, it's called shuriken, and creating it is very easy.
You can see we just invoke the new type function.
And its initialization is very simple.
We just want it to get rid of itself if it hangs out in the world for too long, right?
After you throw a shuriken, one second later in a 30 frame per second game, which is the default update.
If 30 frames have passed and this shuriken is still around, it shouldn't be around anymore.
So all we have to do is move it in its directions in its little custom update and check to see if it overlaps a target, right? If it is overlapping with an object and that object's base is target, which is another defined type that you can see below the shuriken type, then destroy the target and destroy yourself, right?
Or more accurately, set the destroyed flag to be true of the target, and the destroyed flag to be true of yourself, to be later cleaned up in the update function.
Otherwise, we need to go update the player, right?
Similarly...
S- Similarly, to how we are updating jumping and detecting jumping input, we add another function here.
That takes a quick check to see if you're pushing another button.
We have the button which isn't jumping, which I called KOther in this case, which we're now going to use for a weapon.
So if you push the weapon button, and I want you to be able to throw shurikens more rapidly than jump, so you can do this every other frame.
You know, now you are considered to have your input weapon pressed.
And later, we have a...
In the update, we're going to see if you're pushing that button.
And if you are, we're going to throw a shuriken.
And throwing a shuriken is very simple.
If you are facing in the direction, it spawns the shuriken in front of you.
And then gives it a speed related to your speed.
So if you're running forward and throwing a shuriken, it behaves how you expect it to.
And so...
Right?
So...
Now we can throw shurikens, right?
There's a little ninja, and he's hopping around, and he's throwing shurikens.
Isn't that great?
And those shurikens interact with targets.
And if you wanted to, right, we could also add sound effects to this pretty easily.
We could add a sound effect for throwing a shuriken, and then sound effects for blowing up a target.
We could add a sound effect for jumping.
These would all be very fast to do, right?
This is a very, very rapid iteration at this point.
But throwing shurikens is great, but that's not movement.
Let's add some cool movement as well, right?
So let's add the ice skater.
Right? So, think like Frozone or Iceman, right?
They can hang out in the air and skate on a sheet of ice.
What does that actually look like?
Well, if they're moving downwards, right?
If you're falling, then you can convert that speed over 10 frames.
You can move your vertical speed into horizontal speed.
And that works pretty well, but it also doesn't really sell the illusion on itself.
So we're also adding one other set of small changes.
We're adding icicles.
Icicles are not objects in this case.
They are simply points that we keep track of with an H.
So every icicle just has a point on the map.
And then as it gets older, it gets longer.
And it has a bit of randomness in there too to make the icicle path look a bit more like natural instead of a big sheet.
Although, again, if you wanted to make it a big sheet, you can make it a big sheet.
The only other note that we should track here for the icicles is if you just put one at each position, if you're moving it faster than one pixel per frame, then you'd have holes in your ice path, so you need to make sure you iterate your ice path over the entirety of your movement.
Right? And there's a few other little changes to make, right? We have an ice skating state, which if you let go of the button, then you stop skating. If you hit the ground, you stop skating, right? All this stuff.
So now you can skate around, right?
Now you can hop off a wall and start skating, and you can still throw shurikens, right?
We've even moved the shuriken throwing code to outside of the zero update and into the generic player update, right?
You can even skate backwards if you want to.
And this is pretty cool. And now we can start iterating level designs off of this, right?
What happens now that you can skate on ice? Well, because you have this fairly controlled horizontal movement, you can have this ladder-like structure, right? You can very easily sort of climb up objects if you have access to it. Theoretically, you could do an infinite wall jump.
If you wanted to, you could actually set a limit to this.
You could not have an infinite amount of ice skating, but a limited amount of ice skating, or increase that if you pick up an object or whatever, right?
Iterate, just have fun with it.
Just mess around with the idea at this point, now that you have the basic structure.
I also want to take a note, though, right?
What we did is essentially go through the Celeste II codebase and take the portions of it that we think are most useful for our game.
and strip it away and port it into a new cart and make it from scratch.
You don't actually have to do that if you don't want to.
Because remember, if you load Celeste 2 into PICO-8, then you can just modify it.
So, what if you want to do that, right?
What if you want to just load Celeste 2 right into your PICO-8 console and start modifying it immediately?
There's a few small changes to make here.
You add a little flag at the top that says standalone equals one.
This is something that was already present in the code base and allows you to have better interactions with the map as opposed to the compressed tile data that it was originally ingesting.
So by doing this, you can just modify the map in sort of the upper left corner and start drawing things out.
We also need to create the player, because again, we're no longer loading our levels in the original kind of way, so in the init, just put the player somewhere. I put them at 30, 30.
Also, you can remove all the grappling hook stuff, because presumably, you're not here to test out the Celeste 2 grappling hook, you're here to test out your own new movement.
So you can just remove that stuff and the decompression.
I want to note here that the code you're seeing is not taken right from the Pico-8 console, it's actually taken from Visual Studio.
Or VSC, Visual Studio Code.
In the back end, a PICO-8 file is just a long text file.
So you can edit it with whatever tools you usually like to edit your code, and then simply reload the game in PICO-8, and it'll load in your changes.
Very simple to integrate into your workflow.
You don't actually have to use the text editor present in PICO-8 if you don't want to.
So you remove the grappling hook stuff, right?
You remove all this stuff that you don't need.
Now we can add some new stuff, right?
Let's modify it.
Let's change things up.
So let's add clinging to ceilings.
That's kind of a fun idea.
I don't think I've seen that in a lot of games.
Some games, yeah, sort of a ninja-like move where you cling to a ceiling, move around.
So what does that look like?
Well, if you're in the air and you're holding up, Then you should be clinging to a ceiling if you are next to a ceiling.
So we check two pixels above the player's hitbox, and then if that's solid and you're holding up, great, you're clinging to the ceiling.
We add a new state that says if you're still below a ceiling, right, if that ceiling hasn't stopped existing or if you haven't moved away from it, you're still clinging to the ceiling.
And you can also move around left and right if you're on the ceiling.
If you let go of the button, you shouldn't be clinging anymore, right?
This is all it is, a really small code change to make this new behavior.
And now we can just jump and cling to ceilings, right?
Pretty easy. Pretty clean, right?
Didn't take very long at all to go from Load Up Celeste 2 to add this new different movement option.
But why stop at one, right? Let's keep going. Let's add some more stuff.
Let's add hang gliding.
So what does that look like? Well, we have a hang gliding sprite, which you can see has a little hang glider and the poles and Lani's little hands holding on to the hang glider, which we're going to just draw right on top of Lani as long as he is hang glider.
So you can see that we just add a new state called, you know, we call it hang gliding, and it has a very simple movement code. It simply accelerates you in the x direction and ever so slightly dips you down over time, right? That's all it is. This is all of the code that you need to add this new movement option now that you have the engine, right?
And how does it look like? Well, it looks like this, right?
If you're in the air and you push the hang gliding button, now you're hang gliding, right?
And you can even use the two of them.
You can hang glide off of stuff and you can grab onto ceilings.
So what does it look like if you have both those things, right?
What kind of levels can you make with these two sets of mechanics?
Well, maybe you could do something like this, right?
Where you have a series of horizontally focused different areas for you to platform through, right?
You have some spikes around there and they're differently traversed with combinations of these two mechanics.
You can continue to modify this. Maybe you need one upgrade first and then you go get the other one.
You have enemies that you need to glide around, right?
You just set those as hazards in the code and give them some movement.
You can even have them have access to the player if you want to, to be able to track them, right?
Maybe you want moving platforms. That's pretty easy too.
You just make sure that your platforms that can move are listed as solid, and that's going to satisfy the constraints that we're using to check to see if you can grab onto a ceiling, right?
Very easy to iterate on from here.
So you've, at this point...
Let's say you've made your first pass of your prototype, right?
You have an idea and you've executed it in PICO-8 in some form, and you want to share it with either other team members, or you want to get player feedback to see how it feels, right?
How do you do that? How do you share your game?
It's quite easy.
So, you can run a command that says save the name of your game dot png.
This saves it in a cart, right?
A Pico-8 cart is just a very, very small png file that you can load into a Pico-8 console.
You can see here all of the modified Celeste 2 here that I didn't remove a lot of stuff from.
I removed the grappling hook from, and I removed the compression tools from, and I added some other stuff.
That's 36 kilobytes all together.
It's a very, very, very small file.
And this can be loaded into any Pico 8 console by using the load command, or just by clicking and dragging the file into the console.
And then hit Ctrl-R, that'll load it, and then you can just— you're off to the races. Now you can go.
Alright?
But if you want to share it with other people who are not internal, or who don't have Pico 8, or for whatever reason, if you don't want the code that you're sharing around to be viewable, right, if you don't want people to have access to the source, there are other ways of doing it too.
You can export it as a web page, right?
Export your thing.html.
It spits out an HTML file and a JavaScript file.
And now you can host this on itch.io for people to play.
You can hand this to anybody to open in a web browser.
If you have an internal company website, you can host it on your internal company website and tell your fellow employees to go check out your network website, and then they can just go play it and give you feedback, right?
And there's a full.
web integration player for Pico 8 files.
But if you also don't want to do that, right, if you just want to give them executable, you can just give them an executable. You just export something .bin and it generates an executable for any kind of platform you're likely to be running it on. It's got a Linux version, then an OS X version, then a Windows version. You just give them the zip file and in there is your executable and then they can just play, right? It's just compiled code. So, I do want to note here...
That there are some kinds of games which are not especially fast to prototype in PICO-8, right?
3D games, like this is a version of Doom called POOM that somebody made in PICO-8.
It's actually a small team of people over a long period of time, a lot of work to make this very, very cool thing.
And it works great, but this is not their rapid development.
This took a lot of work to make happen.
So these kinds of 3D games, you can see similarly, we have a port of Virtua Racing.
Also, perfectly possible, very doable in PICO-8.
Ignore my terrible play here for a moment.
You can see there are basic polygons, and there's a really cool dithering effect, and you have a little modeled car, and he moves around.
All very possible.
But a lot of work and probably not fast for your prototyping.
The other notable limitation is text-based games or text-heavy games.
This is a PICO-8 cart that has the first three chapters of A Tale of Two Cities, which works fine but requires a bit of finagling.
So if you're planning to just write your strings right in the code as raw data and you need a lot of them, like a lot, a lot of them, maybe consider additional or different tooling.
So, to wrap things up, I use PICO-8. PICO-8 gives you really useful constraints for making your prototypes, making them really, really quickly, and making them in a way that's very easy to share and export with other people.
Anybody can play your PICO-8 game once you've made it.
So thank you all so much for coming.
My name is Matt Lindsey.
You can find me on Twitter if you want to talk to me about PICO-8 or anything else.
I'm at Matt Lindsey.
This talk was largely developed from a development blog I'm writing for a little PICO-8 game I'm making called Ball Ninja.
And if you want to read about that or other PICO-8 development things as I work on them, you can find me on Twitter.
If you want to see this project as it goes on, you can just go to ball.ninja, which is also where I'm going to upload the carts I made specifically for this presentation, if you want to play with them yourselves.
Thank you all so much for coming.
I've been Matt Lindsay. I hope you all have a good GDC.
It's been an honor to be here.
Thank you all so much. Bye!
