With that out of the way though, I think we'll get started.
So my name is Rainer Bloch-Andersen.
I work at CCP Games right now, primarily on EVE Online.
I've been with CCP for about two and a half years now, since June of 2012.
And I'm currently titled as a technical designer, as that title tends to change from studio to studio.
For us, it means I do a bit of game design and a bit of programming, whatever is sort of needed to get the job done within the team I'm on.
Just briefly, I'm going to go over what EVE Online is, for those of you that may not be aware.
So EVE Online is a sci-fi, MMO sandbox.
The sandbox is a really key thing for us.
And by that, I mean we stay very hands-off of our game.
We provide our players with tools.
What they do with those tools is entirely up to them.
If you scam someone and you're using the tools provided in game, we will not intervene in that.
So you can be scammed and that kind of stuff.
Building on that, though, we are also a single sharded game.
We have one cluster in London, which is where all of our players connect and play.
And this tends to amplify the sandbox nature of our game.
If you pull off a great heist, everyone in our game tends to hear about it.
And it's this big thing because it happened on one server in one universe.
We're also coming up on our 12-year birthday.
We came out in 2003.
And relevant to this presentation, we have generally an above-average technical user base.
Our users tend to be more technically inclined than most.
And then, as this will come into play a little bit later, these are some numbers, averages from 2014 on the EVE sort of player base.
The key thing here that I'll come back to is the 420,000 unique users logged in per month.
Before we really dive into what I or we at CCP believe are the benefits and challenges of supporting third-party devs, I want to make sure we're all on the same page as to what we define third-party devs to be anyways.
So to us, a third-party developer is someone outside of CCP who creates external content for our game, generally in the form of a desktop, web, or mobile application.
It could also be spreadsheets or whatever.
These developers are not paid by CCP in any way.
and they don't receive any extra information that anyone else can't get.
All of the resources we provide our third-party developers, whether it be our APIs or downloadable resources, are available to anyone, whether they classify themselves as a third-party dev or not.
But what do we offer these third party devs in terms of resources to do cool things?
We offer them first our image export collection, which is we gather up all the static images for a game.
This is things like icons, renders that are not going to change, that are static renders between releases, UI elements as well, all get packaged up and released.
We also offer our static data export.
So this is a collection of static information for our games, such as item attributes, item names, the way the market's laid out, the universe data, all of that stuff that will not change between releases, packaged up and released to our third party devs.
We give them access to our OAuth2 login, so they can add a Login with Eve button to their application, web page, whatever.
We also give them access to our image server.
This is something we use ourselves as well.
And this is generally basically a CDN.
It hosts a lot of the same images that are in the image export, but also dynamically generated images.
So character portraits, that kind of stuff, corporation logos, whatever.
We then give them access to two web APIs.
The first is our XML API.
It's our older API.
It's been out, I think, since about 2004, 2005.
And our Crest API.
Crest stands for Carbon RESTful API.
Both these are HTTP APIs.
The Crest one is a JSON RESTful API.
The XML API, as I said, it's our older one.
It gets about 1,100 requests a second these days.
And Crest is approaching 500 or 600 requests a second, just to give you an idea of where our APIs sit.
The key difference between these two, aside from their age, the XML API sits outside of our game cluster.
It has no access to the logic of the game or the runtime state.
It only knows what's persisted to disk in the DB.
So it just has read access to the DB.
Crest, it runs on the cluster.
It's part of the game.
It was built for our second game, Dust 514, so that it can read and write to our cluster.
And we're working on opening that up to our third party devs now, so they can both read and write to our game.
And then briefly, what we feel internally are our guidelines to help us in developing resources for our third party devs.
First and foremost, our client is off limits.
There's no UI mods, no mods of any kind, anything like that will get you banned permanently from our game.
We do this because we firmly believe, as our game is a competitive game, when you get into a fight, it is up to your skill using our client.
We don't want you to have to go and download something just to be competitive, which is kind of our second point.
You should not have to download any application to be competitive at EVE.
You can have an application that helps you find a fight, that kind of thing, but once you're in a fight, it's your skill at our game that's going to sort of determine who wins.
So those two kind of play off each other, and the third one just builds on that, which is no information should be available to our third party devs that you cannot get in the client.
This is, again, just to help support the first two points there.
So the first benefit I really want to talk to you guys about is how third party developers can help you deal with the scope of features in your game.
For us, we generally start when we're designing a new feature, very blue sky, right?
We design the feature to cover as many use cases as possible.
We're brainstorming the biggest, greatest feature ever.
We scope this down and prioritize it and start work on it, right?
During development, sometimes things get cut.
This is either because we've run out of time, the thing was too difficult to do, whatever problem came up, or we just felt this thing we were going to do, part of this feature, wasn't going to fit our game, wasn't going to fit our client.
So we cut it.
For the most part, this is generally where things then get shipped.
For us, what we try and do, however, is during that development, expose it in one of our APIs, whether it's XML, API, or Crest, or add it to the static data export.
And we have a very easy framework for doing that these days.
So if a team would like to add something to the API, it doesn't take much effort, doesn't take much more than they've already put in to develop the feature to get it added and exposed to our third-party developers.
But I mean, OK, so that's what we do.
But why expose the data?
And how does it help us deal with the scope of a feature?
The best way to go about this, I think, is with an example.
This is a screenshot of the wallet in our game.
Shows you all of the money coming into your character and the money that your character is spending.
It works pretty well for small groups, right?
You can paginate forward and backwards.
You can put in a specific date and load the transactions from that date.
You can filter by transaction type if you only want transactions for market stuff or player trades.
And then you get a very quick rundown, sort of summary of the money coming in and out and your total balance.
So again, this works wonderful for small groups or an individual, right?
Small groups, 10, 20, even maybe 100.
But we tend to have groups in our game, as we're a single sharded game, that go up to 3,000, 10,000.
There's a coalition of 40,000 players in our game.
This wallet tends to fall apart at that scale.
So very early on, before we even really realized how important third-party developers were to us, one of the things we added to the XML API was the wallet.
And this is exactly the same information you see in this screenshot here.
It's who the transaction was between, the transaction type, the time, how much it was for, all that kind of stuff.
Just grabbed from our database, formatted for XML, and dumped out.
What I'm about to show you is a public financial release from one of our organizations.
They're a 3,000-member organization known as Pandemic Legion.
And it covers 18 months of their alliance.
So very simply, it shows the income and expenditure of their alliance over time.
Same sort of thing, just broken down by subgroup or corporation in the alliance, how much they were spending.
by corporation over time, pretty straightforward, right?
Then they start breaking it down by category, or I'm not sure how they define these, but they're a type of category, I guess.
This is the fuel usage over 18 months by the corporations in this alliance, and sort of who was spending the most fuel, and then broken down by fuel type.
So that was all really cool, right?
Really nice and pretty graphs.
It makes for great content, nice news articles written about this, financial report, and that kind of stuff.
But if it's so cool, why do we not offer that in the client?
Well, to be honest, we could add all those features in the client, and they'd be used by no one.
And the reason I say that is Pandemic Legion or any other organization of that scale.
they really only have one guy dealing with their finances, right?
And that one guy probably wants Excel.
But also, and this is sort of more important, Not sure if you can read it, but there's a section there called Espionage or Special Projects.
Then there's another one called FanFest.
FanFest is our player gathering in Iceland that happens once a year.
I have no idea how they're spending in-game money on that. I don't know.
Special Projects or Espionage. Again, I have absolutely no idea what they define as that.
Our game is a sandbox, we give them tools, what they do with those tools is up to them.
So a lot of this is emergent gameplay.
They're infiltrating a corporation and I guess probably spending some money to pay for that alt or whatever, but we have no way of tracking that in the game, right?
So we could spend a lot of time developing this feature, trying to build a replica of Excel in our client.
But then we're probably going to miss a lot of these special edge cases that our players want, because we don't know what they are.
This is a sandbox.
It's emergent gameplay.
And just serve as a few other examples of areas that our third-party developers have created tools or resources to help in areas that we didn't even know existed or needed features.
Character trading. We offer an authorized way of transferring a character between two accounts and players will bid ISK or our in-game currency to buy these other characters.
And they can take the word of someone that says, well, I'm selling this character and he has these stats and this much money.
But then you're relying on that character, or that person, to be telling you the truth about that character.
Via our API, there's a person that's set up a, he's a trusted person, a trusted player, and he's set up a website that'll pull all this information from the API and tell you it's API verified and what this guy is telling you is true, right?
So that helps with character trading, which is, I don't think, anything we originally thought would exist.
Planetary income monitoring.
You can own planets in our game.
And when players use those planets as the owner, you get a cut of that.
You get to tax it, right?
And that will show up in your wallet.
And again, it works great for small groups.
If you own a planet, half a dozen or a dozen planets, it works fine.
But when you own 500 planets, and you want to know which planets are generating the most income for you, and you own 500 planets, and 30 of them come under attack, which one do you defend?
You need to be able to track all this information.
You want to track things like.
which corporations are paying you the most, maybe you make them a deal, or trying to attract more people into using your planets, right?
All this sort of stuff, which applies to like three or four organizations in our game.
So we could again spend a bunch of time developing these features in our client, but the number of people they apply to is pretty limited.
Starbase fuel management, same kind of thing as the planetary income monitoring.
We show you in our calendar in the client when the starbase you own is going to run out of fuel and we send you a mail in the game when it's running low.
But if you own 3,000 or 2,000 starbases, trying to track that, trying to track where the fuel for specific ones are and who has access to all of this stuff is very tricky.
And again, only a couple of organizations in our game need that.
But then not just talking about these larger organizations, asset management, more specifically, cross-account asset management or cross-account anything.
We focus our client on, when you're logged in, the character you're logged in as.
I don't think that's going to change anytime soon, but a lot of our players have multiple accounts or multiple characters.
They have assets split across all of them.
They want to know how much total wealth they have.
They want to know where, I know I have this ship, but I can't remember what character had it or where it is.
Load up a third party tool, do a search for that ship, and it'll tell you where it is.
But we're not really going to offer that because we are focused on the character you're logged in as at that time.
This list goes on, though.
Shopping lists, timer boards, hundreds of other things.
Sorry.
So again, these are all things we could add in.
But it's a question of really, sort of, I'm not sure if any of you guys have seen this chart or something like it before, you generally get to pick two things, right?
It's going to take a lot of time, or you'll have a lot of time, and you'll get a great thing, but it's going to cost you a lot of money, right?
Or you get a great quality thing, and it's not going to cost much money, but it's going to take a lot of time.
So by exposing this data to third party developers, They're creating things first and foremost that we didn't even know existed.
Or things that we didn't have time to do, or that we didn't think fit our client.
We're pretty proud of the client we have and we're building it in a certain direction.
But sometimes players want it to go in a bit of a different direction.
We can't make this work for everybody.
So third-party tools can help with that a lot.
So my first recommendation to you, or the first benefit that we see in third-party developers, is letting them help us build a better game.
They're very passionate about our game, right?
These people put hundreds or thousands of hours into our game.
A lot of them are very technically inclined.
Some of them work for Google or Microsoft or whatever, right?
They come home and they want to do a side project or something.
Give them the chance to do it for your game and they'll do amazing stuff.
The next thing is, quite literally, sometimes they'll do things better than we do or than you can do.
So this is a kill mail in our game.
When two people meet in our game and they kill each other, the person who died and the person who laid the final blow will get, or used to get when Eve launched, a mail in the client.
It was literally a text mail that we sent you that contained this sort of information.
It would tell you who killed who, who died, and where you died, and how the ship you were flying at the time you died was fit, and the weapon that was used to kill you, and that kind of stuff.
It'll list everyone that was involved, but it will only be sent to the person who laid the final blow and the person who died.
At CCP, we viewed these as a form of an after action report.
So after you died or after you killed someone, you can see what they lost or what they died if you killed them.
Or if you died, who killed you and what ship they were using so you could look back at it and maybe learn from it.
So yeah, we called it Kill Mails because it was text and it was sent as a mail and it was about a kill.
Three or four years after the introduction of Killmills to our game, we went and updated it a little bit.
We made it so it was no longer a mail sent to you, but you could go to your character sheet, and you could look at all of your kills or all of your losses.
It was still, though, when you clicked it and you viewed the Killmill, just a bunch of text.
Not really that pretty, right?
Around the same time we did this renovation, though, we added this same information to our XML API.
And this is when it really took off for our third-party developers, and they really started doing some cool stuff with it.
And the key thing with what our third-party developers did is they viewed Killmails as something very different than we did.
Whereas we viewed them as an after-action report, they viewed them as something entirely different.
And I'm going to get into that in a second.
But first, the first big change they made was they made them look a lot prettier than we did.
Right?
They made it really nice and graphical, big image of the ship that died.
You can see the ships that killed you.
The portrait of your character was in there.
Looks really good.
And this website hasn't changed a lot since it was first released many, many years ago.
Because it looks pretty good as it is.
But as I said, the bigger change here was that these third-party developers viewed the killmails as something different.
We viewed them as an after-action report.
They viewed them more as an Intel tool, right?
Now that they were storing them all on a database on their server, they could let you click on a character and view all of that character's kills and losses, where those kills and losses happened, so you could start tracking where a character was in our game based on their kills and losses.
You can look at a specific system and see all the kills or losses in that system, right?
The front page of the website showed you the biggest losses in the last seven days.
And there's a leaderboard.
You got points for killing people and you lost points for dying.
All these kind of things built off of this idea that killmills were something more than just an after-action report, right?
On top of that, one of the cooler, or to me, one of the coolest things is they started building in these timelines.
You can get fights in our game that involve three or four parties, different parties, right?
They'll let you group the people into parties and then view a timeline.
So even if you're not in the game, you're at work or something, there's a big fight going on in our game, you can load a page like this up and just start hitting refresh and watch as like, oh no, my team's losing, losing.
Oh no, sad.
But you could participate in the game without actually being in the client.
Over time, these kill boards grew to be a very central part of our game's experience.
If you participate in PVP, there's a very, very good chance you care about kill boards, or you're viewing them, at least.
Maybe you don't care about your kill board stats, but you're using them as an Intel tool to find fights and that kind of stuff.
To give you a bit of an idea as to how central of an experience these kill boards are to our players.
There's two main killboards out there right now.
The first, actually I guess it's the second, the newer one, is known as Zed Killboard.
These stats are all taken from a one month period in 2014.
And as I said earlier, on average, we had 420,000 unique people logged into our game per month in 2014.
So these stats are again taken from one month in 2014.
Zed Killboard would get about 658,000 visits a month, which translated to 3.1 million page views, and about 200,000 unique viewers.
That's not bad on its own right there.
But then we look at Eve Kill, which is the older Killboard.
It's been around a bit longer, right?
In that same month, they got 1.6 million visits, at 8.6 million page views, and 401,000 unique viewers.
Of course some of these are the same people from work or home or their laptop or whatever, right?
But that is a substantial portion of our player base.
When we have 420,000 unique users logging in every month, and about 401,000 unique visitors on this website, it's a pretty good indication.
of how important these are.
But beyond just Intel or bragging rights or whatever, these killboards turned into something else.
I don't think we really realized it at the time.
So the important thing to keep in mind is, as I said, we're single shards.
This game takes place at all times of the day while we're asleep or awake.
And sometimes these big fights will happen while we are asleep in Iceland.
So we'll wake up and there'll be articles on Kotaku or Joystick or Massively, sometimes the BBC or Times about these massive fights that have happened in our game.
And we're waking up and being like, well that's cool, they have all these numbers and whatnot, and these numbers are incredibly accurate.
They're taking these numbers from killboards, about how big these fights were and how much was lost in these fights, and there's news articles being written about it, there's Wikipedia articles being written about it.
We wake up and all we do is say, yep, those numbers are accurate.
right? So these kill boards have turned into a bit of a marketing thing for us, not like us directly using them, but they can give us a bit of a marketing benefit. The other huge advantage and really cool thing about third party data is making a kill board was that when we decided we wanted to go back and revisit Killmails, we had something to sort of look at. We could look at what they've done as a prototype or as an experiment and sort of pick what we thought was the best from different things.
So a few years ago, we went back and we redid killmails in the client.
No longer is it this blob of text, but we're actually formatting it, displaying it nice and pretty.
We added the ability to look at specific wars, all the kills and losses in there.
Again, taking some hints from the kill boards and mixing it in with what we thought worked best in our client.
Sorry.
So again, the main point here I want to make is just that sometimes third party developers can do things better than we can.
And we should embrace this. We shouldn't be afraid of it. We shouldn't be worried about it.
We should embrace it and support it. It's awesome.
So, the third thing I want to talk to you about is mobile phones and what our third party developers have done for us in this sort of realm.
Eve Online, specifically, we have zero mobile resources.
Our web team makes their web pages to look great on mobile, yes, but we don't have a dedicated mobile app for Eve Online, not an official CCP one.
We're focused on Eve itself and that client.
There's an Android application called EveDroid.
There's other ones for Android, and there's some for iOS, but I just sort of want to quickly run you through what our third-party devs have done here.
So this is, as I said, EVE Droid.
First thing, to me, it looks fabulous.
It looks like a professionally done application.
It has a lot of great features.
You can look at all your different characters from multiple accounts.
You can look at a specific character's wallet transactions.
That's what's going on on the left there.
You can look at the entire item database of our game, and then based on what character you have selected at the time, know if he can use those items or how long until he can use them.
On the right there is a screenshot of the person playing around with a fitting for a ship and seeing how that all works.
So this is all really slick.
It looks great.
It's wonderful.
And just to give you an idea, this is the top user agents on our XML API.
The second, third, and fifth slot are all Android mobile applications.
As I said, we get about 1,100 to 1,200 requests a second on this API.
So a substantial portion of them are coming from mobile.
Now, all this information that's being used by this EVE Droid application was exposed either in the static data export or the XML API years before Android was ever publicly even known about.
But without any extra effort on our part, We were just maintaining a set of APIs that already existed.
We had a substantial mobile presence, something our players seemed to really care about and our third party developers were eager to do something with.
While I was writing this, what I realized, though, was that it's not really about mobile phones.
As I said, we didn't even know about mobile phones at the time, like Android.
It wasn't really a thing.
But we released this information.
We got that.
So yes, it's about mobile phones, but it's about smart watches and Google Glass and robots and whatever comes next.
I've seen a robot walking around that tells you when the server comes up or goes down and tells you when your character's done training things and that kind of stuff, right?
I've seen it on Google. I've seen notifications on Google Glass and all these other things that...
Again, we don't even have access to.
I don't have a robot to try and play around with.
I wish I did.
I also don't have Google Glass.
But I've seen Eve there, right?
I've seen us have a presence there, because our third party developers are doing awesome stuff for us.
So the real point I want to make here is that third party developers will help you take your game to places you don't even know exist.
And then I guess on top of that, even if we do go back and create a mobile application ourselves, just like the Killboards and the Killmills, we'll have great examples to look at and places to take pieces from.
So those are some of the benefits, and they were quite wonderful.
But let's talk about some of the challenges and the problems that we've encountered.
The first thing is the API key requirements.
So with Crest, the authentication on Crest is with the OAuth 2.0.
The XML API, though, you log into our website, you generate an API key, and that just gets passed in as a parameter in the URL.
And that will determine whether you have access to certain resources based on the character the API key belongs to.
And as I said, we have a bit of an above-average technical user base.
And we're very hands-off in our sandbox.
So if someone steals from you, that's your fault for letting it happen.
Because of that, though, we've run into a situation where corporations, guilds in our game, are very eager to protect themselves.
So if you want to join a group, they generally want your API key up front so they can do a background check.
If you think that's funny, so this is the I want to give you just sort of a an understanding It's the lengths our players will go to to protect themselves. This is a screenshot of the pandemic Legion forums Everything looks great, right? It looks pretty normal if you were to copy and paste that actually I think they've deactivated it now But it used to be if you copy and pasted that posted it on reddit, right?
You're a spy you have access to their forums your copy and paste this bit of information to leak it on reddit They've done Unicode watermarking on this, so they can copy and paste what you've just pasted into Reddit back into their tool, and they'll know what character was logged in at the time this was copy and pasted.
They took this further, though.
When people started finding out about that and just started taking screenshots like this, they started doing some screenshot watermarking so they could adjust the levels in Photoshop on the screenshot and still know who took this screenshot, right?
So this is the lengths our players will go to to protect themselves, this counterintelligence espionage game they're playing outside the client.
And again, that takes place outside the client, right?
So we don't really care.
Except we kind of do when it comes to the API key.
So this is a comment from Control-Alt-Delete.
He's a few years old now.
He starts with giving an example of joining a guild in most MMOs, right?
Hey, I like this game.
You like this game?
Fantastic.
Let's play together, right?
Then there's Eve.
To join a group in EVE, you need to go through this long interview process and give them your API key.
And it's that API key thing that we're worried about.
Because to get the API key, you need to leave our client, go to our web page, log in, generate an API key, and then go and give it to this corporation that you want to join, and then they'll do a background check based on that API key.
But if you check the wrong boxes when you generated the API key, you've got to go and generate it again.
It's a bit of a mess, right?
And most importantly.
excuse me, you're being forced to leave our client just to play our game with people.
That's not so great.
And on top of that, most people don't know what an API key is.
I don't know of many other games that have that, right?
So you come to Eve, and you're like, well, I don't really know what this is, but OK.
And now you've just given these people access to everything about your character.
You probably don't even know you can revoke that API key if you leave that organization and don't want them to have access anymore.
So this is an ongoing issue.
And sorry, kind of meant to advance to that.
Yeah, this problem of leaving the client just to play our game, it goes against one of our core guidelines for the API. We're not quite sure how to fix this ourselves, to tell you the truth.
We know it's an issue.
We're aware of it.
And we're trying to make sure it's not becoming more of an issue as we continue expanding the resources for third party developers.
But we're not quite sure how to fix that.
It's a bit of an issue specific to Eve, but it's a good example of where things can quickly spiral out of control.
What we try to do, though, to avoid more of this same problem coming up, is we talk internally about what we're going to expose, right?
We talk about how it can be used against players, how it can be used to do weird things.
But then, more importantly, we talk externally about what we want to do.
We talk to our third-party developers.
There's a Slack channel that I sit in with a bunch of third-party devs, an IRC channel.
I'm on Twitter.
Most of them know my email address.
I'm easy to get ahold of.
I tell them this is what we're thinking of doing.
And they're more than happy to give us feedback.
These are some really smart people.
And they're also very devious.
And they're more than willing, oftentimes, to tell you what bad things they'll do with your API if they got it.
And this again this seems a bit obvious put it on the test server right and yes, please do But tell your third-party devs about it. We try and make sure we tell them in advance This is what we're gonna put up. It's up. Please go try it right not just yeah It happened to be on the test server two weeks ago. Why didn't you try it right?
We encourage them to go and try it before we put it to production And then, most importantly, watch its usage and be prepared to take action.
If you leave an API up and bad things are happening with it, but you leave that up for five years, players tend to get to the point where they believe it's a right that they have it.
They deserve that.
It's part of their gameplay.
If you take it away a month or two after release, At that point, it's still kind of a privilege to have.
They're happy to have it.
It's kind of cool.
But it's not becoming ingrained in their daily life of the game.
So when you put an API out, watch it carefully.
Watch what your third party devs are doing with it.
Talk to them.
See what they're doing.
Ask them what they're doing with it.
And then if it's starting to go the wrong way, be prepared to take that action.
Maybe it's modifying the API resource or deleting it until you solve whatever problem there is.
But this kind of, that last point of taking action leads me into sort of my next thing I want to talk about, which is a bit more of a specific example, which is sort of what I guess I've called the forgotten data.
So this is the star map in EVE.
I guess it's a little hard to see there, but all the dots are solar systems in our game.
This map, when EVE launched, had about 5,200 star systems in it, all that you could visit.
The yellow and red that you're seeing is a filter you can apply to the map.
So you can see the number of NPCs killed in every system over the last hour.
When we added the XML API, this seemed like a great thing to add to it, so we did.
You can get publicly available every solar system in our game.
The number of player kills in it, the number of NPCs killed, that kind of thing.
It's exactly what you see in the client, so that's fine.
It's cached for the same amount of time.
It's one hour.
It only updates once an hour.
Importantly, though, when we did this, there was only 5,200 systems, and they were all visible on the map.
So we basically just did select all from map data, convert to XML, dump to the API.
Very simple.
And it worked fine.
In 2009, we added a new area of space to our game called wormholes.
These wormhole systems were very different than other solar systems in our game.
They were much harder to live in.
They did not show up in the client.
If you open the map in the client, you didn't see them.
And as I said, they're much harder to live in.
And this didn't happen right away.
Over time, as players started developing tools, I forgot to make that image bigger.
As our players started developing tools to help them better live in wormholes, one of the things that they started doing, and this is like three or four years after the release of wormholes, what they started doing was tracking all of the NPCs killed every hour for every system.
So when you went into a new wormhole system, because it didn't show up on the map and you couldn't get this information, suddenly you had it outside the client.
But more importantly, you knew sort of every time, if their NPCs were killed between five and seven every day, you knew the people who lived there probably logged on between five and seven.
So if you laid a trap, you had an advantage.
And this was information that you couldn't get in the client.
You could track this outside the client, use that information to lay a trap, and present yourself with an advantage.
When we learned about this, we knew we had to do something.
Because it was breaking a core rule of ours for the API, which is that information in the con.
Sorry, information outside.
You should not be able to get information outside the client.
You can't get in the client.
Wow.
So what were we going to do, though?
When we first talked about, well, since this is breaking the rule, we need to remove it, our players got very angry.
They got very upset that we were taking away something that they were using to get PVP.
They were using this tool to get content in our game, and we wanted to take it away.
and they'd gotten so used to it that there were organizations that built themselves around this.
There were organizations of several hundred people, their only purpose was to use this information to get their kills.
So OK, we said we want to remove it.
Our players got a bit upset.
We went back and we talked about it a bit more.
And we just simply looked at our guidelines, which were you should not be able to get information outside the client that you can't get in the client.
And so we thought, OK, should we add this to the client?
If it's giving our players content, should it be there?
When we talked about it and thought about it some more, we realized that it was not.
creating the style of game that we wanted in wormholes.
So we stuck with our decision.
We removed this information from the API.
So whoops, again, a little behind.
To avoid this kind of thing, though, in the future, something we've tried very hard to do at CCP is make sure that the feature teams that are developing features are also the ones that are dealing with the API.
When the API, the XML API was first released, there's one guy who sat over in a corner and did this, right, in his spare time, which is why when wormholes came out and one team was adding these wormholes and decided that they didn't want it on the in-game map, this other guy, he didn't really know that decision.
He didn't, so he didn't think about removing them from the API, right?
There was this lack of communication.
And so what we try and do now is make sure that feature teams are either doing the work in the API themselves, or they're at least well-informed of what the API is capable of.
And the people working on the API are there and ready to assist them, either by showing them or doing the work that's required to make the modifications to the API.
So yeah, the biggest thing there is just making sure that feature teams are aware of it, and preferably doing it themselves.
So.
That went a little bit quicker than usual, but that's fine.
Some conclusions.
Again, third-party developers can help you with use cases that you don't have time for or that you don't know exist, which to me is a really key thing.
We're building a game with emergent gameplay.
We don't know all the things our players want to do.
And our third-party developers are there, and they're more than happy to help us.
So, empower them to do so. If they're there, they're willing, they're smart people, right?
They can do some really cool stuff. Give them the chance to do it.
The number of times I've seen players go through and manually write down all the stats for items in a game because they can't scrape that information from the data files or it's not provided to them in an easy to access way.
So they're going through and they're just looking at the game and writing down all the stats just so they can build a mobile application that is an item database, right?
It's not that hard for us with the framework we have in place to release this information and you know I don't personally think it's I guess it depends on the use case But if you put the effort in and you make that information available you provide yourself with a framework to easily do that They'll do a lot of cool stuff And then sort of, I think this covers most of our, the issues I talked about.
The biggest thing is really just discussing what you want to do in your API, what your feature teams are doing, and preferably, as I said, bring that API development into the feature team.
So, as I said, my name's Reiner Block-Anderson.
That's my email address for my Twitter.
And if you guys have any questions, I'd be more than happy to answer them.
There's microphones.
Great talk. I love Eve. I don't play it enough. I guess two questions. First is, do you use this also in Dust 5.14? 5.14, I guess.
So with the XML API, no.
But with Crest, yes.
So Dust 514, for those that are unaware, is a PlayStation 3 first-person shooter.
It takes place, though, in the Eve universe on the same server as Eve Online.
So we use Crest for all the rewrite between the Dust client and the Eve server.
And then, so second question is, do you use the API internally?
So Cress's read-write, is it a benefit to your internal team to also utilize this to add features?
We have used it in several cases, and we are working more towards having it be something that we use more.
Great, thank you.
Awesome, thanks for the talk.
So you mentioned that as part of a feature development, teams have to add the API.
And you also mentioned that developers internally will add API requests when they see the fit, like when it would be good for the API.
How do you, from your community, how do you understand when you should remove, add, or prioritize different API features?
Do you have a request open?
Do you have a poll that GoonFleet can swarm?
How do you add these non-feature specific APIs into your system?
So, yeah, I guess the question is how do we add features to our API that are not requests from the feature team, but requests from the community?
And honestly, we just sit down and talk with them on the forums or whatever.
And if a player has a suggestion and someone in the company is really interested in exposing it, then it's just up to that person to go and expose it.
We're pretty open like that, right?
So, yeah, if someone wants to do it, they just do it.
Okay, thank you.
Yeah, not a problem.
Hi, great talk.
Thank you.
Sorry.
Oh, for Pete's sake.
Usually when a change comes out for a game that involves a new feature or maybe some rebalancing, the community's reaction to it is based on their exposure to those changes.
This API seems to provide a lot of transparency.
I was wondering if you get a more, let's say, profound reaction to designers balancing things in EVE Online as a result of that.
Sorry, I didn't quite understand.
I'm saying if a game needs to be rebalanced after it's released, right, as they tend to be, does your API expose those changes in a way that players can analyze those changes, see what you've done, react to that more strongly?
In many cases, yes. And we will often put out the static data export that I was talking about.
We'll put that out early. There's tools that are generally called fitting tools.
They let you practice fitting a ship without actually launching the client or owning the modules.
We'll put out the information that's needed to update those tools before the actual release so that we can get better feedback. We find that's actually a very valuable and beneficial thing.
Also, how do you decide whether a feature in the client will actually be exposed through the, like, is there a general guideline for whether or not to expose it?
So the question is, how do we decide which features will be exposed in the API and which ones won't?
Again, as I sort of suggested, we sit down and we talk about it, and we decide we want to expose everything possible.
At least I personally do, right?
So really it just comes down to discussing it and deciding if there is a reason not to expose it.
Thank you.
I was curious, do you guys have information in the game that's only available to the individual users?
And how do you feel about third-party developers aggregating data that's meant to be private for individual users?
We have a lot of them.
Sorry, the question was, do we have information in the API that is private?
And how do we feel about third-party devs correlating that information and stuff like that?
Very much.
A lot of our API is private information, especially the XML API.
There's everything about it is built around the idea of giving people the control over what they expose.
You can create an API key that only gives access to your wallet, or only gives access to the skills you have or the items you have, right?
And if a third-party developer gains the trust of the community, and the community gives them all the API keys required to gather that information, then that's kind of the choice of our community.
We do have a bit of a thing that I don't think we've decided how we feel about it yet, where part of that counterintelligence and that espionage thing is specifically going out and harvesting API keys.
And I'm not sure how we feel about that yet, to tell you the truth.
You have a lot of botting traffic against the APIs, and how do you evaluate and deal with that?
And then corollary to that is there, aside from API key, how have you addressed any security concerns in protecting the APIs and users in general?
So I missed the first part of your question.
Can you repeat that?
Botting traffic against the APIs.
So users writing bots to just constantly hit them.
Yeah. I mean, our API, so I guess the question was, you know, there's a lot of bots or programmatically, our API is accessed programmatically a lot. And we're totally fine with that. As I said, we try and offer the best and the best security to our players in generating their API keys.
They can revoke them. And we give them a log of the API key access.
So if they feel that their API key's being misused or abused or something, as an individual, you can revoke it.
Other than that, I'm happy to see the graph climb of the number of hits on our API.
So does that answer the first part of your question?
Yeah? And then I guess the second part was about the user security of it and how do we secure the API.
Sorry.
man 3 in audience I guess it's more platform security.
Once you open up this functionality...
There's potential abuse and potential, you know, if there is use of that.
I mean, our biggest concern is people DDoS-ing it kind of thing.
Outside that, it's secured with SSL3, and we highly encourage everyone to use that.
I'm very much of the opinion of revoking the non-HTTPS version of it.
So hope that...
And as I said, we do a lot for providing users information about how their API is being used.
Sorry, I had another question.
So one issue that I feel like we've run into is you talked about users being able to select what information they want visible.
So there's like an instance where there's like a history of some sort, like a battle history or like a match history of some sort.
And users may go in and select that. They don't mind if that's available through the API.
And then if they go back later and say that they want that private, then there's sites that have already scraped that information.
How do you feel about that sort of... is that something that you... well, excuse me...
that you would ask sites to remove, or is that something that's on the users...
So the question was sort of, once a user is granted access to their API and certain information, if that user revokes it, how do we feel about the information that's already been pulled from the API?
And it's up to our users as to what they expose.
If they choose to expose it and share that information, and once it's out there, that's sort of on them, is our general response.
Hi, another question.
At what point did your community grow large enough that, I mean, I'm not sure if maybe they were large enough when you released the API, but I'm wondering if there's a critical mass of, you know, of members of the player base that are necessary to utilize these APIs.
So the question was, sort of, at what point did we hit critical mass, where there was enough users to utilize these APIs that we provide?
And to tell you the truth, as I said at the beginning, we have an above-average technical user base, and the API was built in response to...
We used to offer a web page that would show you your character's skills.
That web page was being scraped.
So the API was originally built in response to the needs of our community, and it just sort of continued to grow from there.
This sounds like it might be against your guiding principles, but I was wondering if it seems currently like a very read-only API.
Is there any plan to expand to any actions or writes?
So the question is, are we ever going to open up write access to our API?
Very much so, hopefully this year.
And that will be via Crest, and yes, very much so.
Crest, as I said, was built for DOS 5.4, which does read and write access.
And yes, we are very much moving towards releasing that to our community.
In which capacities?
Which kind of access?
Good question.
So in what way are we going to release the write portions of the API?
Anything that doesn't modify your wealth directly.
So no selling of things.
We don't want people making market bots.
We're going to start with no transferring of risk.
Our gut feeling is we're going to start with things that don't modify your wealth.
So changing your queue for skills that you're training or modifying your contacts, sending mails in the client, that kind of stuff.
Hopefully chat at some point as well.
We want to open up to our third-party devs.
Those things that don't modify your wealth.
Thank you.
Not a problem.
Kind of as a follow-up to that, what kind of philosophy do you have about what experiences you want players to have to have in-game versus ones you want to allow outside of the game?
Because with some of these things you can get people mostly playing your game through the phone and not through your client.
So if I understand the question, how do we feel about and where do we draw the line?
Yeah, where do you draw the line as to like, you know, this is something we really want you to log into the client to do versus something we'll allow you to just do anytime, anywhere?
We're moving in the direction of we want you experiencing our game, whether it's through our client or not.
We're happy that you are experiencing our game and being involved in it.
So as it stands now, to do things you have to be in the client, as we open up Right Access, we're more than happy.
If you just experience chat through your phone, that's fine.
We're totally happy with that, as long as you're part of the universe.
Awesome. You mentioned that you currently have like the XML API and you're opening up the Crest API here soon.
Do you have a plan in mind of maybe migrating people from the XML one to the REST API?
And if so, what kind of strategies are you utilizing for that?
So the question was, are we gonna deprecate the XML API sort of thing, I guess, really.
And yes, very much so.
We're, uh, we've been focused on getting Crest to the point where we can release, read, and write access to our community.
And once we get that, one of our top priorities will be sort of migrating all the same information you can get in the XML API over to Crest.
And once we've done that, development of the XML API will stop.
There's a ton of applications already built around it.
So we're just going to leave it running for kind of however many years we feel is needed.
And throughout that time, we'll just be encouraging development to happen on Crest.
And then at some point, I assume we'll kill it.
Cool.
Thank you very much, guys.
Appreciate it for coming out.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
