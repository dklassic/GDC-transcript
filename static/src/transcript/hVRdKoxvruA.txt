So today I'm going to be talking about animating the main villain in Marvel's Spider-Man, or subtitled, What? I'm Rigging How Many Legs?
So, as you may have heard, my name is Sophie Brennan. I'm a character TD at Insomniac Games.
This is actually our 25th year in the games industry. 25 years as a company.
That's a pretty big milestone for a company in this industry, so go us.
Thank you.
A little bit about myself.
Character TD, Rigger, whatever you want to call me, I've got about seven years experience.
I worked on Marvel's Spider-Man, obviously.
That's what I'm going to talk about today.
Before that, I worked at Red 8 Dawn on Lone Echo for the Oculus, it was VR.
And then after that, or sorry, before that, worked on The Order 1886, as you might have gathered from the little factoid before this talk.
I just want to get this clarified.
There will be spoilers.
I'm going to be talking about the main villain of Spider-Man.
So if you don't wish to be spoiled, you're out of luck.
No, seriously, leave now.
If you don't want to be spoiled, you've got like 10 seconds.
The game's been out since September.
But let's be honest here.
Who plays video games these days anyways?
So now that you've been warned, let's introduce our main villain.
Um, there we go.
to to to to to to to to to So, as you may have gathered, here's our main villain, Dr. Octopus, or known as Doc Ock.
Who is Doc Ock?
He's actually Octavius, but I mean, most people familiar with Spider-Man might recognize him.
But let's talk about our Doc in Spider-Man for the PS4.
So he's peers friendly and father-like mentor at first.
He starts off in the journey with pure intentions to help the world with his advanced prosthetics research.
However, his work combined with his own developing neurological disorder slowly turns him into our main antagonist over the course of the game.
We have to show the evolution of our trusted friend and boss transform into our greatest foe.
So, and this would have to be one that was strong enough to challenge and match the strength of Spider-Man himself.
So a signature feature of Doc is his tentacles.
And we wanted to foreshadow these throughout the story.
Here you can see some earlier moments in the game before all turns that hint his fate.
And then when he does turn, you guys can see how it goes in this clip here.
Wait, where are the arms?
Oh wow.
So cool.
But how did you?
Intracranial neural network.
Neurotransmission speeds under one nanosecond.
Faster than signals travel inside the brain, never mind to an external prosthesis.
We did it, Peter.
No one can take this away from us.
Okay, so...
Now you know a little bit about the character, let's talk about how we went about creating him.
Let's take a step back and let's talk about the rig itself.
So Doc's rig is probably one of the most complicated rigs in our entire game.
Bar the Faces, which by the way, Noah Alzaer, our fellow Insomniac and Character TD, is doing a talk on later this week.
If you can go see it, it's called Superhumans of New York, Managing the Many Faces in Marvel's Spider-Man.
It's here Wednesday, 5 p.m.
Go see it.
But back to these, they were really complicated.
It was like having four extra characters attached to the back of Doc.
Doc was the tentacles and without them he wasn't the formidable foe that he becomes.
So they were important, and because of that, I'm going to be specifically talking about them in this talk.
So what were they going to do in general?
Well, we knew they were going to grab, they were going to reach, they were going to stretch, they were going to grow, swipe, attack, and even climb buildings.
And we had to do this all real time and all in engine.
And all we have in the engine at the end of the day is a bunch of joints.
So how do we make them?
So let's go over what we had at the end first, right?
So it was, I'm sorry, an animator's nightmare, okay?
We had four tentacles, obviously, 790 joints, 552 of them alone in the tentacles, over 800,000 vertices, and 700,000 of them were in the tentacles.
And of course, this was all with the biped rig that he was attached to.
So initially, I wanted to create one body and one tentacle, and then have the tentacle duplicated at runtime and attached to the body.
This way, I would only have to pay the cost for one tentacle on an engine, and then only have to maintain and update one tentacle, too.
However, this poses some problems, because engine side, we didn't have the ability to cheaply attach and detach the tentacles.
So and also, our anim set editor, which we animators use to view.
gameplay animations couldn't support multiple models at once.
So it meant that if they wanted to view the animations, they would have to view separate windows for the tentacles and for dock, which at the end of the day, wasn't very useful or efficient for them.
So because we had a tight schedule, I mean, the rig had to be done in a matter of weeks, I decided to take an upfront course and instead go for plan B, which was everything in the kitchen sink.
So just chuck it all in there, right?
Good things about it was we less.
less error prone, easier to debug, animators could view it in tools, and then also all of our mirroring, which in engine and in our tools came for free, right?
But the cons of this was it was one big mess, mega asset, and it would be way harder to maintain because every time I needed to make a change to one of the tentacles, I'd have to do it three times over.
So, our first challenge actually was also like, when we're building a rig, right, you need to know.
the specifications of it, like how long were the tentacles?
How could, you know, we didn't know that.
How could we solve that?
So my idea was to work in layers and to work iteratively.
So I gave the animators the means to stretch the reg to whatever length they needed to, with the promise that later down the line I'd bring on the text seamlessly that would make it look correct and game.
And this was all done via this layered system that I have here on the top layer.
We have our main shape controls, our secondary controls, and then we have a little rigging layer.
Don't worry about that one.
And then below that, we had animator tweak controls, which honestly, they never, if ever, really touched.
It was just for little tweaks to the shapes.
And then below that, everything below that was free for all.
That was free game for me.
I could play with that to my heart's content and not affect any of the animation, which means I could increase resolution, decrease resolution, move joints, and animators.
Animations would be unaffected.
So another thing is, how do we actually build it?
Like so I said, the tentacles were 20 meters long in the end, right?
So in our rigging tool set, we have the ability to specify both bind pose and rig pose.
And that allowed us to give the animators the pose on the left, which is obviously much more easy to work with.
But whenever I needed to go in and edit the rig itself, with one button click, I could snap it back to our bind pose and edit.
the tentacles at their full length.
And why did we need to do that?
Well, because I needed to build this, which was the ability to telescope the tentacles.
So the stretchy one is what the animators started to work with, and the telescoping one is the more realistic, correct version of the tentacle.
The animators also had the ability to slide the tentacles as well, so they would position the series of controls, and then with one attribute, they could dial up and down the slide and have the tentacle slide through all the controls back and forward.
And then how did the animators pose it out?
So the concept was pretty simple.
I started with big to small shapes.
So the big teardrop shapes are the main controls.
There's the end one and the middle one.
You position those first.
You'd move on to the bigger squares, which would kind of get you your middle shapes.
And then you would finalize your S-curves with the smaller shapes.
Due to the way I built the ribbon-slide method, which is what this rig uses, at one point we had to have a decision, which was, unfortunately, when the animators began to twist the tentacle...
the tentacle would flip out and go crazy at points.
And that was because of the way I'd set up the skinning on the spline itself.
So we decided to forego the nice S curves that we used to get on the top layers for free to get more stability.
So we sacrificed positioning more controls for the ability to make sure that the tentacle stayed stable when they were animating it, because this thing went all over the place.
Oh, I don't know why it keeps doing that.
And as a finishing touch, we added two types of sine waves on top of the tentacle.
So this was a set up we also used in our web regs in the game.
And animators were familiar with it, but they could just dial in their amplitude and wavelength, whatever, and then animate the offset.
And there you go.
You get some free wiggling there.
Last thing I had to do was support IK.
As I said, they were walked on, they held things.
We actually had IK and FK in the rig, but due to our time constraints, I couldn't build a tool that would blend between the two effectively in time.
So the solution to that was basically just hold the animators down and say, please make sure you're using the right mode before you start animating it.
And I think they got the point.
So let's actually break down how the tentacle rig works.
So here are all our attributes that the animators can animate on it.
We'll break it down from the top down.
So slide is how much the tentacle is sliding.
So 0 is no sliding.
And then minus 1 is retracted fully.
There's a visual example for you.
We also had thickness, start thickness.
And by the way, we used these very sparingly.
This was just to play it up to the camera if we needed to.
And also our stretch mode.
So that was what we talked about earlier, which was whether or not the animators enabled telescoping or not.
So here's the equivalent variables we're going to be using.
So this is, I've written this out in a bit of pseudocode for you.
We actually use Maya's node network, but the logic is still the same.
So we have our slide, our thickness scale, our start thickness, our end thickness, and our stretch mode, right?
And then we have some static parameters we've got to keep track of, which is our total number of joints.
So say we have 55 joints in a tentacle, which by the way is being a bit conservative here.
Our start length, which is the overall length of the ribbon before we start animating it.
And our joint number, which is the joint we're actually tracking.
So this code I'm about to show you is duplicated for every joint that's in the rig.
And so say we're targeting joint 18 right now.
And then we have a dynamic value, which is the current length.
So we need that current length to figure out the scalar value of the tentacle overall.
So then we use all that to get our joint's position.
So this is before scaling slides.
So we first, we work out our incremental value, which is one divided by number of joints plus one.
And to get a joint position in zero to one clamp space, we times that by a joint number, which by the way, I said was like 18.
To get a ribbon scaler value, we take our start length of a ribbon and divide it by a current length.
And that gives you this.
So there it is chilling out on the surface right there.
But if we want to add some extra logic to this, or stretchy chain logic, or telescoping logic, we have to first get the current position scale, which is our ribbon scalar value, and times by our joint position.
Then if we want to figure out slide, which was another attribute you could animate as you saw a couple of slides back, we need our reverse joint position, which is one negative current joint position scale.
And then finally we get our UV position by adding slide onto that, which gives you this.
Same thing for the grow chain logic, except miss the first line.
This is what it looks like in action.
So finally, we're actually running two concurrent logic for the tentacles under the hood.
We have our stretchy tentacle and our telescoping tentacle.
So we have to figure out which one we've got enabled.
So we have our blender value, which is we get that stretch node and we get one and we negative the stretch mode from that.
And that's essentially a reverse node in Maya.
and in that we feed a world space position.
I got these from Motion Paths, but you can get them however you want.
And then that will tell you, you know, where it is depending on which tentacle you've, or which setup you're using.
Same thing for thickness as well, because we need to find out the comparative thickness and it's different for whether it's stretchy or whether it's telescoping.
So we get that same value and then we do some extra maths here, we give it an arbitrary number of 0.05 just because Maya does not like to divide by zero, in fact really nothing does.
And then so finally we have our thickness stuff, our thickness values here, thickness, start thickness, end thickness.
We need to use all them to calculate the end thickness, which is we get our thickness difference, start thickness minus end thickness.
Then we get our position thickness difference by getting our joint position 0 to 1, which we got way back a few slides, times that by the thickness difference we just got.
Start thickness, difference position we get by adding the previous value onto our start thickness value. .
And then we get our joint scale thickness by getting the thickness scale And timesing that by our start thickness difference position that we just got Finally we get our scalar value by getting the output u of e Which was another couple of slides back as well by that joint scale thickness We just calculated and that is a lot to say by the way, that's really difficult to talk through The reason it's scale-y in this instance is actually because I used world space joints and world space numbers for this because it's much easier for all the nodes I was using.
So in the case of doc, negative z was down the axis and you don't want to scale down the axis.
So let's move on to usability.
So the first thing I discovered is that speed matters a lot.
Animators need to be able to block out the poses fast.
So as you may imagine, the rig was slow due to the number of joints and skin vertices.
But one of our animators, Chris Lally, made a proxy rig and figured out that if you use boxes instead, the rig ran faster.
And the less boxes he used, the less joints it was calculating.
So you can see here, we actually rolled that into the rig and gave them proxy tiers to work with.
So they could decide what level of visibility they needed to make the rig run faster when they needed to do that.
Oops, sorry.
Another usability issue was just the amount of noise on the screen.
So there was a lot of controls and obviously the tentacles.
So we added the ability to turn off the tentacles when they wanted to, which meant that an animator could focus on one tentacle and also it would give them a speed increase in the scene.
So what kind of constraints did we hit or hurdles?
Our first major one was vertex swimming.
So our engine tries to smartly calculate the bounding box of an object, but because doc went up to 20 meters, the engine kind of optimizes various positions to compensate for that, and it would cause this result of things swimming.
To fix that, it was only really apparent in a couple of shots.
So we decided to fix it just on the spot for each thing.
And the solution to that was this is our cinematic editor on the right and a shot of Doc on the left.
You can see Doc's multiple, yeah.
It has several tracks there, three times.
And I'll give you a close-up of that.
There's one for his body, which had all his body in it.
So we split it out and we turned off the tentacles on his body so that the boundary box it drew was smaller.
And that meant that the area around his face and his collar and stuff didn't suffer from the vertex swimming.
The tentacles we just left as is because they were fine.
And the head and goggles, we actually ended up putting the goggles on the head as well.
That helped with the vertex swimming issue and also Noah, who rigged the face, added special controls for the goggles to follow the face.
Another thing was it was really expensive.
We had several look states, which we used to determine whether damage states or whatever.
We had 42 individual vanity toggles.
You can see on the right-hand side there.
And these included our damage states, our VFX, and the extendable tentacles.
And on top of that, we had three LOD tiers.
So it was a really big asset.
And to drive that home, the Maya file itself was over 300 megabytes.
There was 14,000 plus nodes in the tentacles alone, which is, by the way, why I scripted them all.
And we had 520 animator controls.
But luckily, we made a nice picker UI for the animators so they didn't all go insane.
So with that all squared up, let's talk about our achievements.
First of all, we got a rig up and running very fast.
I had the rig in the animator's hands within a week.
And to start from nothing to giving them a full rig, that was pretty awesome.
And it was actually usable for them.
This is partially due to our incredible in-house rigging system, and also because I knew that I could add more systems online later.
And that leads into the second point, features planned ahead.
Planning ahead and knowing that I could iterate over the course of months instead of blocking out a huge block of time and potentially stopping animators working paid off in the end.
We had great animation, thanks to the animators, especially, I would like to call out Chris Lally, one of our animators.
There was a lot of back and forth, where I would hand him the technical rig and he'd hand it back and tell me how to change it.
And the first few weeks of doing that were key to making sure that the behaviors were what the animators needed.
And finally, we actually had a single asset for both gameplay and cinematics.
So no cheating, we didn't have any special shots with any special rigs.
The rig was built to cope and work in every scenario that we could think of.
So what can we do to improve it?
First thing I'd like to have is one time tentacle attaching tech, and also the ability to procedurally extend so that I wouldn't have to build 20 meters of tentacle into the rig and make animators cry whenever they load the scene.
Faster rig to animate is quicker.
So the fact that Chris had to find out how to speed up the rig, I wish I'd done that sooner.
I wish I'd realized that the time it was taken for him to animate this rig, and that it was super, super important to get something fast in his hands.
It would be nice to support IKFT matching.
And as I said earlier, we sacrificed the shaping of the tentacle so that we could get stability.
We already have tests and rigs in-house that can do that using variations of this tech, so I know that's possible.
So let's sum it all up.
We made a super versatile tentacle rig that we have rolled into our rigging toolbox internally, and it's pretty awesome.
It's pretty awesome to use that to inform future tech.
We also made one of the best gaming superhero villains ever.
I mean, I know that's a bit subjective, but people really digged it.
And I know I've probably spoiled a lot for you in this talk, but if I'm not going to spoil one thing, it's the actual ending of the game.
If you haven't played the game, please go play it.
People love the ending.
It's a fantastic performance.
And speaking of, the performance was actually so good that we were nominated for a VES award, specifically for Doc.
And it was really cool, because I actually was personally nominated as one of the nominees, and I got to attend the VES award, which was one of the highlights of my career.
I got to wear a kel and drink some free booze, all the good stuff.
With that, I'd like to say thank you to all of our Insomniacs.
Without you, the game would not be possible.
Obviously, all of our partners as well.
We try and stay humble at Insomniac and acknowledge each other as much as we can.
So with that, you know, I talk a lot about what I did, but it's really what we did.
It wouldn't have been possible without the entire team.
And thanks to you guys for coming and listening to this talk.
Speaking of great teams, we are hiring.
If you like what you see, we have positions.
You can come talk to me.
My Twitter is up there, Waffles.
My DMs are open.
I will try to answer them in a timely manner.
Questions?
Also, thank you guys for being really gentle.
This is my first GDC talk, so I'm nervous as all hell right now.
Woo!
Woo!
Woo!
Woo!
Woo!
Woo!
Woo!
Woo!
Woo!
Woo!
I've actually got another one tomorrow as well, because there's something wrong with me.
Ha!
Ha!
All right, got a question?
Yeah, just wait until you're ready.
So first of all, fantastic talk.
A couple of questions, if that's OK.
So when it comes to scene performance, were you generally getting 30 frames per second in your scenes?
So the question was, do we normally get 30 frames per second in our scenes?
First of all, excellent accent.
I really dig it.
Ditto.
A bit more authentic than mine by now, I'd imagine, but whatever.
I would say generally, that would be a question for the animators, but I would err on, with our proxy rigs, possibly, but, or maybe definitely in some of the lighter scenes, in some of the heavier scenes.
I mean, one scene in particular, we had a crowd below of like 20 people at least.
I don't even know how many more, actually, and Doc himself.
And I would say no in that instance.
But we did devise a lot of tools in-house to try and alleviate that.
We would have geocaching to cache out geometry and characters.
We had proxy rig stubbins for every single character of every different archetype.
So obviously, we said to the animators, please, please, please unreference things if you're not using them, because that really helps, too.
We also, the one problem we did have was like parallel mode.
We were using 2016 and parallel mode in 2016 tended to crash with a lot of our skinned regs.
So to avoid that, we just used regs with direct parenting and geo underneath them and that got people working in parallel, which honestly is one of the biggest speed increases you could get.
It's worthwhile noticing that the invisibility evaluator in Maya is known to cause crashes as well, just in case people are...
Oh, really?
Yeah, I think everything causes crashes in Maya, to be fair.
Just one other thing, did you reference the rigs as well?
Did we reference the rigs in the scenes?
Yeah.
Okay, cool, that's it.
Perfect, thanks.
Cheers.
After you, sir.
Thank you.
Excuse me, how do you manage when there's gameplay scenes and everything's kind of dynamic with the character's position and all the chaos breaking loose, how do you manage to rig on those situations?
The question was how do we manage the regs and chaotic gameplay scenes?
Well, I mean, that's more of an animator's question, really.
I mean, we have a bunch of things in the rig to support that.
We have like sync joints and motion joints that are joints with positions that animators can use to line up various actions in the game.
But in terms of rig stuff, apart from that and phase joints for, I think, footstepping and stuff like that, there isn't...
It's more up to the animators to make sure that they use all the tools available to them to make things sync up in game.
Thanks.
Cheers.
Oh, this is my last question.
Make a good one.
Pressure's on.
Well, first and foremost, amazing work, by the way.
Sorry for shouting into the mic.
So with a project like that, with a rig that, first off, amazing and complex, what was the first thing you were thinking about with regards to management and building it up with trying to keep as many?
parts going at the same time and progressing forward? What were you keeping in your mind when you were putting the initial stages together? So the question was, what did I keep in mind when I was initially setting up or planning out rigs like that? I mean, the first thing you really got to think about is as soon as you make something and release it into the wild, people are going to run with it. So you better make it like...
somewhat foolproof and know that people are going to use it to generate content and you want to try and keep that content and support that content.
So I would say, unless you're very secretly in cahoots with one other person and you're passing back and forth a file, I would make sure that whatever you release to the team can...
the work they do on it can be preserved for all the next upgrades that you do on it on the rig itself.
Fantastic, thank you. Cheers. Cool, I think that's us.
