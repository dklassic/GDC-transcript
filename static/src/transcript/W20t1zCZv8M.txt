So welcome everyone. Make sure to turn off your cell phones, put them on silent.
And if you have a PlayStation Vita or a 3DS with Retro City Rampage DX, get that ready, start up the game.
But again, turn off your volume.
So my talk is on using recorded button input and a deterministic engine to do automated testing, instant replays, and a million other things.
Well, a million's an exaggeration.
So, the recipe for this is simply two pieces.
So the recorded button input, so you record the input that the button presses and the keys that they press, and you have a deterministic engine, which means that if you record the buttons here, play them back tomorrow, they play back exactly the same.
So this is about half an hour of the game playing in 15 seconds.
And if I turned off Vsync, it would run in about five.
So, that's an example of me using it for automated QA.
Because theoretically, you could run it after every single compile, so any change you make to the code, you can double-check and make sure that everything is good and nothing's been broken.
It gives you access to QA 24-7, so I think we've all been in the case where we're pulling an all-nighter to submit a milestone or submit some sort of deadline, and it saves you from phoning the QA in the middle of the night.
And finally, it allows hands-on QA to be step two.
So you can kind of pre-filter things, run the automated tests.
If they pass, then you get the QA in there to double-check things.
And it's also incredibly multi-platform, so you can see that I ported to all these platforms, and all of these platforms work with it, including the previously unannounced MS-DOS port.
So it's running here on a Pentium 1, and it would run on a 386 if I still had one.
I also did another thing which I haven't talked about before.
So does anyone have a Vita or a 3DS right now?
Okay.
If you do, you can enter this code on the main menu.
So I started doing this around the time I finished the DX version, and I started including these automated tests within the game, so each platform can play through about...
four to eight hours of itself at super speed, and it just allowed me to, up to the point of submission to certification, I can test the build and make sure that it's good.
So use case three was indeed submitting to certification and all of that.
Last year, I submitted 15 SKUs, which included nine console cert submissions simultaneously, without bringing in external QA.
because it really slashes the redundant testing, because you will find in cases with consoles, depending on the regions, they require a separate ROM, a separate executable, completely separately compiled, but maybe the only difference is a product code or a network ID or something like that.
And so it really allows you to really, really fully test one and then just automate and test the other and then lightly test it.
And also with resubmissions, I don't know about you guys, but on two occasions, on two different console manufacturers, I've had to resubmit to certification to change two bytes of data.
So, uh, when you have your automated tests, it really is just, it's not that grueling, oh my god, I gotta test everything again.
It's just change those two bytes, run the automated tests, and, you know, as long as you realize it's an isolated change, you should be good.
Uh, another super valuable thing, a lot of multiplayer games I know do this, is catching gameplay bugs.
So every time the game is run, it automatically starts recording.
And then when you exit or when an assert is hit, it dumps that to a file.
And so if a bug occurred, you just stop the game, flip this switch with the "-autoplayback", command line argument, and it starts playing itself.
It also saves a file, so you can rename that file and say "-playback", and then a file name.
You can say "-skiptoframe", so it automatically throttles and goes right to the bug where it occurs.
By doing this, you can trace down the exact frame where it occurs, the entity in which it occurs, and from there, you can see in the example on the bottom there, I've narrowed it down further, so I'm adding some printfs there to investigate further.
For the user end, it also is pretty cool because it allows you to do user replays.
So in both cases, the user can either save replays themselves to watch later, or they can upload them to the leaderboards.
Now, the huge, huge piece of value here is because all you're doing is storing button input.
It takes up very, very little space.
We're talking 1 kilobyte, 2 kilobyte, 8 kilobytes.
And so you can save that on the leaderboards as attachment data.
That means you don't have to run your own servers or anything.
So you can just sit back, relax, be like a super one-man indie team and have this going where everyone, once a high score is achieved, it's uploaded to the leaderboards.
People will be like, how the heck did he accomplish that crazy score?
They can watch the replay and see for themselves.
I also used it to control NPCs during some cut scenes.
And so pathfinding is great from moving from one point to another, but if you want something way more dynamic, a cool car chase, you can just record the button input for that vehicle.
And in this case, three vehicles are running pre-recorded input for a sequence.
I also had the classic arcade attract mode.
So if you leave it on the main menu for five seconds, it'll automatically start playing itself through various missions.
This was super great for shows like PAX and E3, because the game is always just demoing itself even if someone's not playing it.
And in the DOS version, it was super valuable to trim memory.
So once the game is locked, it's not really changing.
You don't have a whole bunch of hands in there modifying things, the game is pretty stable.
You can really start to dig deep.
And so in this case, with the DOS version, I got it fitting in 3 and 1 1‚ÅÑ2 megs of RAM, which was pretty crazy and fun.
And that meant trimming everything, trying to remove extra code that the compiler didn't automatically remove to compress the executable down, and you name it.
And so one of the cool tricks here is, for example, I have an array of pathfinding nodes.
Well, how many nodes do I really need for the pathfinding?
Well, I can find that out.
So you just add a bunch of stuff to track that.
You run through, let's say, 12 hours of repeated playthroughs of the game in a fraction of the time, of course.
And then at the end you have this output of what was the maximum amount of pathfinding nodes that I used, and then you can just trim it down, and that was able to save a lot of memory.
So other examples of things that you could do with this would be speeding up trailer and video creation.
I actually use this a lot for trailers.
There are certain things where if you're playing the game, something cool happens.
You can play it back without the HUD or with different languages, and therefore you can save redundant recording.
You could also theoretically do asynchronous multiplayer.
I didn't do this, but things like Ghost Races where you just keep track of all the people's vehicles and play it back at any point.
You can improve remote QA and playtesting, which I used as well.
So even if someone's off-site, if they're playing your game, they can send you the replay, and it's like you're over their shoulder.
You can see exactly what happened and how.
And you can also generate things like analytics and heat maps.
You can record all the data from playtesters, or if the game is like three or four days at PAX and E3, you can record the hundreds or thousands of players.
The advantage here is that if you were to record just plain analytics from that, you would be stuck.
If after you analyze things you realize, oh, I didn't think of something in advance, I really wish I had analytics on this, you can do that because you just had it stored as button input.
So you can analyze it infinitely as much as you need.
So, good news, I whipped together this source file, and so basically changed one line of code, and you should be able to try this out for yourself.
It's well under 300 lines of code, well under 250 without comments, and you just have at it.
So, the recorded button input, there are a few core components for it.
So, for example, buttons or keys, whether it's pressed or not pressed.
Values, such as the analog stick direction.
Events, so you want to keep track of if a mouse is clicked, if you touch drag or whatnot.
And debug information, which is optional, but you definitely do want this during development.
And optionally, if your game isn't fixed frame, you're going to want to use time deltas in there as well.
RCR specifically, I have a header.
So I store things like the control options, the camera zoom, the player outfit.
This allows me to get even more versatile, because there are a whole bunch of different button configurations depending on the platform.
And so, in certain cases, some platforms have more buttons, others have less.
And so, in some cases, one button will do one of two actions on one system, but just one action on the other.
And in that case, I can just keep track of which button configuration was this recorded in, and play back with that.
And so, it further allows you to play back on other systems.
The button streams are just one bit per frame, whether it's pressed or released, as I mentioned.
The reason I store them separately is because if one button changes, you only have to update one button state.
You don't have to update the entire controller state.
Analog stick as well, the left and right sticks are separate.
And event streams, so that's basically saying, the event, what happened?
Was the mouse pressed?
Was the mouse released?
Did the mouse position move?
What frame did it occur on?
And from that point on, you just do what you need to do.
Debug information, the biggest thing that I stored was a checksum of the frame.
You can calculate that any way you want.
In my case, I did certain things like entity positions and directions that they're facing and so on.
And that could be stored in as little as a byte, because if the checksum changes, it's very unlikely that the byte is going to match, but the int would be different.
During development, I stored this per frame, so I can see instantly when it went off the rails, if it went off the rails.
And once I shipped, to keep the file size further down, I just store it once per second.
So in the rare case that it would go off the rails, if someone is watching the replay in the commercial release, it'll just say, I'm sorry, an error occurred, and stop playing.
I did some simple compression, which worked great.
The first was just RLE compress the button streams.
So that's just like, how long was it held down, and then how long was it released.
And then I just zedlibbed the entire file, and that was fantastic.
The other thing that you've got to keep in mind is you've got to pair everything for consistency.
So to keep things clean and simple as possible and consistent, any time that you're recording something or playing back something, those should be paired.
So if you're recording, do this, else do that.
The other thing is that you want to make it as low level as possible.
So you access the system API or whatever to figure out which buttons are actually pressed by the live user.
and then you're generally going to put that into an object and then the game is going to use that object.
Well, after you get it from the system and before that object is used by the game, you want to inject or record the button input.
The more complicated part is building a deterministic engine.
But it's not...
quite as daunting as it could be.
So the most important thing is making sure everything is properly initialized.
And this is great, because if you make sure everything's initialized, you're just gonna kill bugs before you found them.
And you're just gonna have a more stable game.
So an example here is a static Boolean.
If you were to do that, you gotta be really careful.
Random is another thing that can be very dangerous, but it's easy as heck to take care of.
I recommend that you roll your own random function.
And then the bigger recommendation is that you use separate instances.
And the reason I say that is because if you were to use a separate random instance for your core game loop, and a separate one for ambient audio effects, and a separate one for visual effects, if you were to add more explosions or change the ambient audio, generally speaking, your pre-recorded input for the gameplay should be fine.
And so if you recorded a game session a year ago...
Theoretically, it shouldn't break it.
The other big thing is to not use system events or callbacks.
And so if your driver or your API has some sort of event when a sound finishes playing, don't use that.
Because that's inconsistent.
When it occurs will vary.
So the trick is to use your own.
So figure out what the length of the song is, for example.
Calculate that in game ticks.
And then every time your frame runs, tick that.
once that tick reaches the end, then you kick off your own callback.
Middleware is something that's not the end of the world.
So many, many AAA games are deterministic and ship with middleware.
Many middleware is deterministic.
And even if it isn't deterministic, you can evaluate how determined, like, how much work would it be to make it deterministic?
So it's, again, something that you just have to keep an eye on, but don't fret about it.
Floating point is a bit of an issue, but it's more if you're trying to be cross-platform.
So if you're just recording a replay on one console and playing it back on that same type of console, even if it's your friends, you'll be fine in 99.9% of the cases.
And even we're really lucky because some consoles are similar enough that the replays recorded on PS3, PS4, or Vita play back on each other.
So those systems are luckily just close enough.
The bigger problem will be games on PC, because you do have more differences even between Intel and AMD and drivers and other configurations.
That specifically is beyond the scope of the talk, but if you simply google fixed point determinism, you'll get all the info you need about how to manually specify precision, save and restore states between drivers, and you can take care of it.
But don't focus on portability unless you really need it.
So unless you realize I'm going to ship this on PC to end users and it's clear that this is not deterministic between wildly different configurations, then you can look into it.
If it's simply for your internal testing, generally speaking, you don't even have to worry about it.
For visual reference, this isn't really a...
This specifically wouldn't apply as much to AAA games, but if you were doing a simpler game, something safer... It's all about precision and accumulation.
So, if you were to do just a simple low-precision lookup table for your sine and cosine, you're fine in most cases.
The less safe would be something like, if the player's collecting coins, and a coin is over here, the player's over here, once you're within the vicinity, the coin starts homing in on the player.
every single frame you're calculating, well, what's the distance?
How much should I move?
That will, guaranteed, generate precision errors.
And so it might hit the player on frame 300 on this system and 301 on the other system.
So that's something that you've got to take care of.
Another trick that I used was sandboxing.
So this means that the game is no longer 100% of the testing that you would like, but 99 is still good.
What I mean by that is that I stub leaderboards, I stub achievements, I stub system utilities, online state.
I fake them all.
And it allows you to just have a solid, consistent piece of code that runs.
you're not going to be testing actually connecting to PSN because that could be inconsistent.
And there would be ways to try and handle that, but that's just a lot more work.
So the simpler thing is to just leave that to hands-on testing and just leave your automated tests to sandbox mode.
The other thing that I do is I have save games, and I have the option to either save and load them from memory or save and load them from files.
The cool thing here is that if you have a retail game and your end user can play these replays, then it won't affect their save games.
They kick off the automated tests.
It does everything from memory.
They quit the game, restart it.
Everything's as normal with their original save data.
Now, even if you took care of all of that, you still will encounter some cases where...
your determinism is broken.
And sometimes the simplest solution is the best.
And for me, I did almost everything just by logging things.
So I log when I'm recording, and I log when I'm playing back.
And then you grab a diff tool, I like WinMerge, but anything will work.
WinMerge is free. That's why I like it.
And then you just compare the logs to figure out where things play back correctly or incorrectly.
And...
I think all of us have probably experienced at one point or another something where the debug works but the release doesn't, or vice versa.
There's some sort of specific bug, or different configurations, and so this again helps you do that.
This is an example of the log, and just showing you this is a very simple thing.
I just show a checksum of the frame, the frame number, and the exact function in line, which I kicked off this poke.
And then if that doesn't work, you can kick off a verbose mode.
And so in this case, I dump more specific things like the entity position and facing.
And here you can see, okay, so this one thing happened on one and didn't happen on the other, and then from there, things just went completely off the rails.
The other thing is just bulletproofing your code.
The cool thing is, is that the more deterministic you make your game, the less bugs you'll have, the more bugs you'll catch, and vice versa.
The more bugs you kill, the more deterministic your game will be.
One huge thing I can give you as a tip is to try and keep your game loop and your rendering independent.
Don't intertwine them.
And this can be hard for bigger pre-existing code bases, but it's something that you should strive for.
Because as you could see, half an hour ran in 15 seconds.
Could run in 15 seconds, as I said, if I turned off Vsync.
Now, of course, it's a simpler game.
But the short of it is, even if you've got a 3D AAA game, if you're not running rendering every frame, you're gonna be able to run it a lot faster.
The other thing is just...
Pull out all the stops. Run static analyzers, sanitizers.
And fiddle around. Now this can just, just for fun, you can create two different, wildly different game configurations just to see how robust it is. Does it work in a 64-bit thing with release optimized and different struct alignment, different floating point precision. I mean, that's really pushing it.
You don't have to nail that. But if you can, then that's pretty cool.
As you can see as well, I used it in so many different ways that the ways can build upon each other.
So the super simple thing would be in Windows, for example, I created a batch file.
And so you play the game, it records the input, dumps it to a file, I rename it to Part 1.
And then I load the game again, it loads my saved data.
play again, exit, save too.
And so then when you chain that, you can just play through the entire game, and you don't have to make sure that the initialization and de-initialization is perfect, because you're just killing the executable and reloading it.
If you want to do this on consoles, though, and you really want to make it robust, then you want to have self-contained automated playthroughs.
So again, this is the more advanced thing.
It's really not needed.
I didn't actually implement this until after the original version shipped in 2012.
So you don't necessarily need it, but it is really cool and it opens more doors.
So this, of course, you've just got to make sure that you properly init and dinit everything.
So once the game shuts down and goes back up to the top of the main loop, things are as if you just launched the executable.
And I recommend using the in-game save, otherwise you're going to have to delete the save data before you run this, depending on what your test is.
And as I kind of mentioned before, is I just iterate through replay one, two, three, four, five.
Once it reaches the end and it's like, oh, file not found, then you know you're done.
And it returns control to the user.
So then the user can play the game and see, did it end up where it should have?
And if you had a build system or something like that, you could actually spit out information or just analyze the screen or every which way to just completely, you don't even have to look at it yourself.
Level replays where.
the person's been playing the game for a while and then they start playing a level and then it starts recording from there, finishes recording, and then they can play that back.
It's all about state.
The simplest thing is to just completely reset the level state, whether you're playing or playing back or recording.
So it's just consistent. And then again, as I said, you pair things.
So all of your replay code should be the same as the recording code in the same spot.
Entities are the exact same.
So if you wanted to control an entity for a cutscene, or in some cases, people have actually used this for racing game AI, where you actually use button input to have the other AI players.
This, I know of a game on PS1 that did this, which is, it's funny.
It doesn't sound like it would work, but it can.
But again, reset the entity state and keep things consistent rather than trying to just make sure that things are good.
Backwards compatibility is another thing that I recommend.
And...
It's pretty cool that when the game shipped in 2012 and I recorded some replays then, that even after I've done the updated DX version and all of that stuff, those old replays still run.
And it's actually not as daunting as you might think.
It doesn't make your code quite as messy as you might think.
It's simply a matter of saying, well, what version does this header say it is?
And if it is, well, setRadiusBugEnabled, for example.
And so the big thing I can say here is that I recommend that you try this even if your game isn't fully deterministic.
Because if you're recording the input every time you play the game, and a bug occurs, and you kill it and then restart it with the replay, let's say 50% of the time it goes off the rails and the bug doesn't happen.
Well, 50% of the time it does repro the bug.
And working at other studios, I did have cases where there was some bug that happened on the PSP that happened...
about an hour into the game.
Okay, no, it was, it happened half an hour into the game, but it only, but we had to run it in debug mode, which ran at half the time.
So the play tester, or the QA guy, had to sit at my desk and play the game in slow-mo for an hour to try and repro the bug, because I sure as heck couldn't repro it myself.
And after an hour, he couldn't repro it.
It was just a nightmare.
And it was a crash bug, too.
So having something like this, it really kills like 99% of those things.
The other thing is, you just start simple.
Like I said, you just record it when the game starts, stop recording when it finishes.
And then from then, you can just build and build and build.
And so again, download the sample code and check it out.
And thank you.
I'm open for your questions.
So there's a mic over there and there and there.
So I have a question, you mentioned you used metrics.
What did you use to generate the heat maps?
Heat maps are something that I wish I did.
I really, really regret that.
A funny thing that I learned with my game was that we playtested it to death, and it was getting all these awards, and it was amazing.
And then in the final crunch, I was just like, oh no, there's some gaps between these missions, I need to add this, oh, it's too easy here, I need to add a mission here.
And those missions that I didn't playtest, that I added at the very end, were the ones that people griped on.
And so I recommend everyone do the heat maps, do the play testing, and at the very end if you've got the choice between adding features or just polishing up what's there, polish up what's there.
So how did you manage to get a determination between your debug and release versions of the game?
The big thing there was mainly initialization.
And so I found that almost every time when I found a case where something worked in release and didn't work in debug or vice versa, it was simply something wasn't initialized, which was just a bug.
But your floating point results would be different for your debug release.
Indeed. So in certain cases you can manually specify precision.
You can do that on PC for sure.
Sometimes the compiler options as well you could try and do that.
But yeah, floating point again could be trickier, but a lot of AAA games do ship deterministic.
So it is possible, but it's just something that you've got to pay attention to and just Google.
So setting the floating point precision at conservative levels, did it impact performance?
It all depends on your game, you know.
It's going to vary.
OK.
Thank you.
Hey, Brian.
Thanks for the talk.
Oh, thank you.
So Retro City Rampages runs on a fixed update loop.
Yes.
Do you have any recommendations if you're using just unfixed update loops?
Yeah, so I would just like we record button streams and analog stick streams and all of that.
I would recommend that you just also keep track of the delta time that was each frame and then play back with that delta time fed in.
Okay, thank you.
Yeah.
Any other questions?
What was your favorite mission in Retro City Rampage?
It's a funny question because I guess there are two things here.
Number one was, generally speaking, the cop-out answer was whatever the latest mission I had done was my favorite mission.
The other thing was, once I had been playing the game and developing it for years, my favorite missions were the last ones I added, which were, like, challenging to me and really awesome.
And then it turned out that they were too challenging to most people because they hadn't been playing the game for years.
But...
Yeah, I guess I really like the stomping missions, the jailbreak mission.
That one was pretty fun.
If you were to implement networking play, how would you, have you thought about how you would log and replay that?
Um, networking is, there are a lot of different ways to do that, um, but you know it's funny, it's a lot of multiplayer games use this automated testing because their game is deterministic because of multiplayer, um, but there are different ways, you aren't necessarily going to be doing doing your deterministic gameplay isn't necessarily the best way to do networking.
Sometimes you do want to do the correction and stuff like that, so it depends on the game, but it really is, like I said, low level. So you get the system input, and then before the game uses it, you inject in there to record and play back. And it would be a similar thing, like your packets, you just, like, grab them at the top and, like, record and play them back.
Do you have a solution for asynchronous file operations?
Right.
That is an issue.
In that case, I would probably just sandbox it, so that wouldn't be fully tested.
But then it would just do it synchronously when you're doing the auto playback and whatnot.
Any other questions?
Does anyone want to see the MS-DOS version?
Reading from the floppy takes a second.
How much time do we have? This might take a moment.
I can fast forward.
Okay, we're close.
Actually, it would be sweet if we did have sound, because then I could have the PC speaker audio.
So, let's see.
Come on.
Oh.
There we go.
It's funny, it seems like...
We all threw away our 286s, our 386s, and everything.
People have collected Amigas and collected Commodore 64s.
No one cared about their old PC.
They're all in a garbage dump somewhere.
So it's actually surprisingly hard to track those things down.
So it's pretty close.
The big thing was I removed...
the 3D minigames and things like that, but every single mission otherwise is in here. It's been super fun.
I was done with porting, and so I decided to take some time off, and then during that time off I ended up doing this, which isn't really time off, but my justification was, well, this can't really be monetized very well, so it's time off.
So I'll announce more about this at some point.
But yeah, it's pretty sweet.
It's wrapped up.
The only thing is that I've got a box of, oh, we're out?
OK.
Well, I'm going to add controller support, and then we're good.
All right, thanks everyone.
