Hello.
Hi everyone.
My name's Andy Nguyen, and this is gonna be a talk about building community within open development, but more specifically, how you can use community as an additional tool to help you with your development.
So, as a quick overview for the layout of the talk, I will talk about what I mean by community development as opposed to community management.
Community management, I believe, is something more about maintaining what you already have, and community development is more about integrating the community into your development process.
I'll talk about how it began, our most important tool that we're currently using for community development, which is Discord, and then how you can get started with it.
So who am I?
My name's Andy Nguyen.
I work at Pocket Watch Games as a producer and a designer.
And we're most known for having released Monaco back in 2013, for which I was the level designer.
And my most important role right now for our current project is that of a business and community developer.
So our current project is Tooth and Tail.
It's a real-time strategy game.
It's not out yet.
And the goal of this game is we wanted to make a real-time strategy game with simplified controls that was playable on a controller.
And the idea here is that real-time strategy games are sort of notorious for having overly complex controls or a high barrier to entry.
And we wanted to see if we could make a real-time strategy game that was just as engaging.
though without that aspect of having to learn to play well in order to enjoy the game.
So here's a quick picture of what it looks like.
It's, you know, player versus player.
You can play 1v1 or 2v2, etc.
But more importantly, it's story time.
So about six months ago, I was in Korea.
I flew out there for an event called BICFest, or Busan Indie Connect Festival, and it was in Busan, South Korea.
And I was having a great time, because it was one of the first times I've ever flown out of the country.
Though I was setting up shop by myself, and I found it really challenging to sort of communicate how to play the game with new players.
Even if we had sort of streamlined gameplay, it was not easy to talk to somebody who didn't know English and explain how to play the game, how to explain the controls, etc.
So I'm kind of freaking out, and I'm trying to come up with my own way of describing how to play the game.
And I know it's Korea, so the closest thing I ever got to communicating with them was I could point to the game and say StarCraft, and they're like, oh, StarCraft, StarCraft. I'm like, okay, great. I'm like, let's one step closer.
And I could point to a work, and I'm like, SEV, and they're like, yeah, SEV.
Wow, I know like Korean words now.
But that's the closest thing I ever got to actually teaching them how to play the game.
And so about 30 minutes in, and I had to do this for like the whole weekend, this individual comes up and he places his laptop in between the monitors.
and there's an image of the controller.
And then he starts telling people how to play the game.
He's really enthusiastic.
He's cheering on one side, he's cheering on the other side.
He's telling them what to do.
He's like, go attack him here, go do this here.
And then when he wins, he's like, GG.
And I was like, whoa, what is this?
He goes and takes a selfie with me.
He's extremely nervous and extremely shy.
And he pulls up his phone, and through Google Translate, he says, hi, I'm from the community, and I've traveled two hours here to help you.
This was one of the most amazing things I ever had happen to me as a developer, because it saved me in that moment.
But it wasn't the first time something like this happened.
Six months prior, back at PAX East, there was a Boston local named Chris, and he contacted us.
And he said, hey, I'm in Boston, and I was wondering if you wouldn't mind if I could help out at your booth.
So we let him, and it was a very simple volunteer job where he got us water, got us food, but he loved the game so much, and he was one of our best players at the time, that having that extra pair of hands at a trade show is incredibly valuable, and anyone here who's demoed at a trade show will know how exhausting it is.
So to have somebody just help meant so much.
And the thing that is still kind of unbelievable to us is next week is PAX East and we have 12 volunteers from our community coming to help us.
We actually expanded the size of our booth to accommodate them.
I honestly don't know what to do about that.
But it made me feel like there was something special.
And I feel like everyone here can achieve something special too.
So the community within Tooth and Tail is a closed alpha, meaning that we don't let everybody in.
And we've only been running it for about a year.
We've had 3,500 applications for this alpha.
And among those, there are 2,500 members who are part of the community, of which 500 are online daily.
So these are very small numbers when I think about.
You know, some developers have Twitter followers in the tens of thousands or Facebook likes in the hundreds of thousands.
But I think a lot can come out of these small numbers.
So here are a few community examples.
Clash of Comrades is an organization that is entirely community-driven.
In the beginning, we used to schedule our own tournaments, but now they schedule their own tournaments themselves.
I think there's actually one going on right now.
They used to run these monthly, but now they run these weekly.
They coordinate the applications, they schedule all the times, they stream it, they shoutcast it, they create VODs and highlights, they even produce their own prizes and mail them out to people.
They even informed us of other services so they helped us with discovery by showing us a service called Splice.gg which promotes eSports games.
We never intended for Tooth and Tail to be an eSports game because it's kind of silly to think that an indie game could be something as big as, you know, the MOBAs of today.
And I'm not saying that we are.
That was never our intention.
But the fact that the community wanted to take this into their own hands and make it something like that, I think, is quite amazing to us.
They take these matches that are played across multiple different patches and then they compile data and they send this data to us so then as the balance designer my life is made a lot easier because I have data to work off of in terms of what's being played and what's not being played or what's the success rate and what's not the success rate.
And I can just do my job and not have to worry about if I'm doing it right or not because I'm constantly getting this feedback.
They've even gone so far as to help us with the troubleshooting process, because obviously nobody likes bugs, but rather than getting mad because the game crashes, they supply the information necessary to solve the crash.
And then before the crash is resolved, they even go to inform other community members about what the symptoms and causes of the crash are, so that they can be avoided or resolved on their own.
This is a product of having a community dialogue.
And it also has the benefit of basically having community troubleshooting.
So we don't have an FAQ because our FAQ is organic.
When people have questions, they're answered by the community.
They even go ahead and make like strange memes of us and they like to spam it with the channel and stuff.
So what is community development?
And I think this is the key point here versus community management.
So for in our experience, what community development is, is it's business development.
For example, this competitive scene that was made organically, which goes on to produce content, marketing content, that we could spend time on our own as a small development team making, but we don't have to because they make it on their own.
It's game design because they're playtesting the game constantly and giving us this feedback.
And it's also a quality assurance because the moment something happens across different platforms, Mac, Linux, PC, or different types of hardware specs, they let us know immediately.
And not only do they let us know, they help us diagnose the problem because the worst thing is when someone tells you a bug, game crashed, and that's all you get.
You don't have any idea what to do about that.
So this is all supplied by the community and I like to think that...
as developers you can leverage the community as an additional tool to your development team.
So our goals when we started out making Tooth and Tail was we wanted to build a marketing machine.
Essentially we wanted to achieve the point of self-automation.
And more specifically, the goal here is to get to the point where we can just focus on game development because other aspects of development are handled by the community.
This was inspired by a talk that I attended back in Steam Dev Days in 2014, where Tom Bui at Valve says, the community will make games better because they can experiment and iterate at a much faster rate than you and I ever could.
For example, we're a small team of three core members at Pocketwatch.
We're literally capped in the sense that even if we work 24 hours a day, there's only so much we can output.
And we can think about how to output more than that.
However, if you consider that the community is an additional part of your team and that community will continue to grow, then that's exponential growth, as long as you encourage your community to develop alongside you.
You can see this through the blood of all of Valve's things.
They produce hats, the community produces hats, skins for League of Legends, skins for Counter-Strike guns, and the community even votes upon what kind of materials they want to have inside of the game itself.
So Valve doesn't have to produce that content.
They even go so far as to price use the laws of economics to price these materials for them So they don't have to have somebody whose job it is to assign arbitrary price values to these new assets that are coming in It's a machine that's automatically Sort of it's automated by the laws of economics and by the community based off supply and demand There was a time back in college when I used to love watching these tf2 skits But they would only come out once every six months or so and so valve with this philosophy said, well, it'd be a lot easier if we gave the tools to the community so that they can make the skits for us.
And now you have the Saxxy Awards and there's an infinite number of TF2 marketing cartoons rather than once every few years.
Other developers do this too.
So when World of Warcraft came out, you could mod the UI.
And I think at the time their intention was to allow players to customize the visuals of it.
But the most downloaded mod by magnitudes was something called Quest Helper.
And what Quest Helper allowed players to do, or what they enabled them to do, is sort of quest in a way where they could understand where to go and what the objectives of the quest.
And so that was an indication of the game design for WoW.
So in the Cataclysm expansion, they actually just implemented it into the game.
So the results of this sort of process is you now have fans developing content for you, you now have fans developing marketing for you, which makes a better game than you and I could ever make, and it builds a bigger team than you and I could ever be.
So why did we take this approach?
Well, Tooth & Tail is a multiplayer game, and for indies, multiplayer games are sort of infamous for having this...
chicken and egg problem where if nobody's playing your game, no one's going to buy your game because you can't play against anybody.
But if nobody buys your game, then no one's playing the game.
And so we knew we needed to see the community in the first place.
We knew we would require a constant iteration on the game because if AAA companies are even struggling with the balance of the game, how could a small indie team with limited resources consider balancing the game?
And we felt like this was going to be a challenging game design for us because we wanted to take all the core philosophies, concepts, and experiences of a real-time strategy game that you know and love, like Command and Conquer or StarCraft or Age of Empires, and then boil it down into something that was really accessible but felt the same.
And so as a result of this approach, what we did was we created a suite of automated tools for community development.
And this is how we began that process. So for comparison, Monaco took the avenue of traditional press.
We got some IGF awards. We did a bunch of interviews. We went through the traditional press outlets like IGN or blogs like Kotaku or Joystick at the time, etc.
So for comparison, what we did was before we made Tooth & Tail, one of the reasons we made Tooth & Tail was we wanted to make a game that was streamable, or in other words, as fun to watch as it is to play.
Because we knew that back in 2013, it was sort of the verge of Twitch becoming the phenomenon that it is today, and YouTubers were getting more...
talking directly to consumers better than the traditional blogs were.
So we wanted to make a game that encouraged this kind of content, and it, in essence, encouraged community development.
Another reason why we chose this method was back during Monaco days, we felt like something that was sort of essential to the sort of indie marketing that a lot of us indies do is Twitter.
And we were not very successful in achieving the amount of followers or the amount of virality or retweets that other developers were getting with their games.
And so we felt like maybe Twitter wasn't something that was in our company's blood.
We weren't good at tweeting.
But what we were good at is we were good at engaging the consumer directly.
And with Monaco, we did this to some success, but not to the scale that it is today.
With Monaco, we were good at getting fans to talk with us and love developing the game alongside us and essentially become evangelists for the game, ambassadors for the game that promote, go out there and they talk about the game for you.
And that goal is very small.
That goal is very achievable.
It's not hundreds of thousands of followers.
It's like 10.
And that's all you need, which is great.
So when we took this approach, we decided our marketing outlets would be Twitch and Discord, or at the time it was MIRC or IRC, which is basically developer chat.
So Twitch, the way it began was at the time in 2013, streaming development was sort of something that was becoming very popular and a lot of developers still do it today, we still do it, but it was very much a traditional dev stream.
Andy Schatz would be on a computer and you'd be coding, you're talking about the game, this is a very early, ugly prototype of the game.
But what happened organically, was as the game became more fun, we played the game on stream in a way that was very competitive.
And we were sort of role-playing this idea that even though the game was an ugly, ugly prototype, we were imagining the game as it was in its completed state.
And it set a culture of competitive play.
We were shoutcasting the game.
We were doing highlights.
We were talking high-level strategy.
We were getting excited over the back and forth of the competitive match, even though it was just a simple prototype.
And as people watched that, they participated with us.
And this is part of our open development style.
So it's like, you can talk to us as developers as we're sort of engaging in this back and forth.
And we acquired alpha members through that method.
So essentially what I'm talking about here is establishing a culture of the kind of community members that you want by acting as the community members you want.
than engaging with those community members directly.
And so when you acquire them into your community, they are now sort of replications of you.
Then the second avenue for which we have done community building is through the community chat itself, the direct line to the community members.
And we've made sure that all of our marketing avenues focused to this point.
So the Steam forums, the tweets that we do do, our Tumblr, etc., they all tell the consumer to go to the community chat.
It started with IRC, and IRC was fine.
But IRC is like 1,000 years old, and a lot of people don't really.
want to, it's not like a user-friendly interface.
But then Discord came out back in I think October of 2016.
And this thing, this application changed the face of how we approach community entirely.
So Discord, what it is, it's a free community chat tool.
Everyone can use it.
I'm sure you've all heard of Slack.
And I'm sure many of you have heard of Discord as it's rising in popularity.
It's essentially Slack.
for the consumer, it's a consumer facing product.
Trying to replace the days of like Ventrilo or TeamSpeak or all those things like when you used to get into your clan chat and talk with your clan or talk with your guild before you did a raid, et cetera.
So about three or four months ago, I was invited to be the first ever guest blog or non-Discord member to write articles on their official blog.
And the way this happened was I was talking to one of the developers for Discord about how we were using their platform to do development rather than actually just gaming community building.
and how we used the tools that they provided that were intended for community building and how we leveraged those tools to assist in the development of the game.
And he was fascinated by all the Cypress of doodads and whatnot that we had done, so I ended up writing a blog about it.
And I'll go over some of that with you today.
So here's how we enhanced our community chat.
First off, our permission tools.
So with the permission tools, what essentially it comes down to is you can assign roles or status or different privileges to different members in your community.
Now the typical interaction of this, or the typical way this surfaces in community is you have moderators.
So this is something that's very typical in forums.
You have moderators that delete bad, you know, troll comments on forums or whatnot.
But what we've done here...
that I think sets it apart is we've thought about expanding the scope of what permissions mean.
And so in Discord, we've separated them out by color and by priority, and we've identified the individuals who serve as ambassadors for the company and the individuals who are superfans, et cetera.
This is a 100% voluntary job.
And it's driven, it allows the community to basically help itself.
So we select these members out of the community who we believe represent us and represent the company in a positive way.
And we explain to them what they mean to the company.
Then we assign them this unique role.
Essentially, I think the reason why we chose to do this is because If you're very passionate about your community, having the responsibility to help grow your community is something that's very intrinsically rewarding.
So we've gone beyond just making moderators.
We have guides.
Guides, their role is to convert a new player into a non-new player by informing them of all of the thick questions they have about the game.
They're essentially living FAQs.
We even have superstars in which we recognize members who do positive things for the community.
We mark them as a superstar because they did fan art or they did a custom song for the game or something or whatnot.
You can make tools with Discord.
So one of the tools that we did is we have a completely hands off alpha onboarding process.
Traditionally what happened in the past was we would have like a form and individuals would sign up for the form and then we would basically email keys out.
But this took time off of our hands as developers and we don't want to distribute keys manually every morning.
So we decided to make the onboarding process for the alpha be something that was community driven.
So after having selected the select few of moderate, select handful of moderators who we felt represented the company in a positive way, we instructed them that they now had the power and the responsibility to key members of the community.
So as tons of community members come into the chat, the moderators now identify the ones who they think represent the culture that we want, the culture of positivity or of inclusivity.
And then they proceed to vote on that individual.
And if enough moderators vote on that individual, a bot automatically private messages them a key.
And this is how we make sure that we weed out individuals who may be toxic or too salty when they play, and encourage that there's a positive growth in our community.
This is done via a bot, but more importantly, it's done via the community.
The bot itself is actually programmed by the community as well.
So we also wanted to make sure that we created retention with this method.
So the tip, like I said before, the typical format was to have a sign up form and then to give out keys.
But I think in the past, we didn't have a lot of success with that because once we gave out the key, we had no means of making sure that they played the game or provided us with the feedback necessary.
So instead, our current format is that players now have to earn their keys by contributing to the community.
This means engaging in, watching the stream, engaging in conversation, asking questions, providing answers, becoming familiar with the game.
And by earning a key through proving that they're passionate about the community, it means that the community itself is ultimately full of just passionate people.
And less individuals who are just looking for a free key.
This really does promote retention.
We've also used the tools within Discord to help us make the game.
So, Tooth & Tail is an online game and it doesn't have matchmaking.
You can play online.
There's a lobby system and you can make a lobby and play against each other.
But there's no way to mark yourself as looking for a game.
However, because everyone is in the chat, using the bot that was programmed by the community, you can type ready.
And it'll now mark you green, so your name turns green.
It also marks you as a permission or a role as looking for a game.
So you can ping looking for a game.
And this is what it kind of looks like.
On the right hand side where there's user list, you can now look and say, hey, that's every single person looking to play the game.
They're green, when they chat their name's green and I can see them on the side so I can private message them and tell them if they wanna play the game.
This is great because now it just gets more people to play the game.
So, getting started, these are some simple stuff that you can do today.
Pick your hub.
You can, for us it's Discord and we're having a great time with it, but you can pick any hub if it's like a chat hub or a blog or what not.
Set up your roles or define your roles more specifically.
And this is something that I feel like has worked out really well for us.
We defined our role as a developer.
We've defined our superstars as moderators or guides or featured members.
Define what those roles, privileges, and entitlements mean because it establishes various levels of importance within your community.
Create a singular landing page so that people can go to this one spot and get all the information they need to know.
Because your community is not just a hub with a bunch of people in it.
It's now an ecosystem.
It's now, it's got its own rules and its own metrics and it lives and moves on its own.
They're gonna have questions.
They're gonna wanna participate in it as if it's a game in and of itself.
Announce your updates.
So.
It's important for you not to go dark because your community is eagerly waiting for the next bit of news.
So constantly talk about the little things that you're doing so that your community can have something to engage in.
You can do this either Discord or Twitter, whatever hub you have, and then invite them to engage.
So you take your invite or however you want to ask your community to join this one spot and funnel them all into one place.
In the beginning, we tried funneling them all into a newsletter, but ultimately, we worked into just funneling them all into this chatroom.
Whatever it is, just make sure that they know every single step of the way, whatever it is that you're talking through, where to go.
So whenever we tweet, we Facebook, whenever we make a blog on Tumblr or a Steam forum post, it all tells them to go to this one spot, that one landing page that I talked about earlier.
And hopefully, if you build your community up enough, then you can have people for some reason meme out about you.
That's not Photoshop, that's Andy Schatz's face at the Boston Major.
So this is some of our moderators.
I'd like to give a big shout out to them.
Here's some resources that I used for this talk.
And thank you.
And that's our Discord page and my Twitter and our, oops, that's, I should say Tumblr or blog or whatnot.
But yeah, I encourage you to check out our Discord because it's got a lot of really cool, fun things you can do in there.
So thanks so much.
Oh, okay. Questions, anyone?
Hi, so really great talk first of all.
Okay, thanks.
So I have a question.
Your game obviously is multiplayer, which is the kind of game that already sort of encourages people to seek out a community.
Yeah.
So they have someone to play with.
How viable would you say all of these things are sort of for a single player game that is generally more of a solitary experience?
Well, yeah, I've thought about this as well.
I think the key isn't necessarily single player versus multiplayer, but something that can be iterated on or have perpetual engagement.
So a game like Darkest Dungeon, which has added content constantly, or like Don't Starve or whatnot, can easily foster this sort of community.
A game that would probably not work well in this, like the most extreme case, would be something like a narrative game that's...
like a short narrative game that's prone to spoilers.
Because once the consumer finishes it, there's not much they can do beyond that.
But if you have something that's like a systemic game that is procedurally generated or continues to build upon itself, there's lots of reasons for the player to come back and give you feedback.
Thank you.
Thank you.
Hello.
Hi.
Hi.
I have a question.
So when you're on Twitch streaming the development, how do you decide when you're going to be streaming?
Oh, because if you don't want to give away a certain part of a game, you want that part secret.
Or what makes you decide, OK, we're going to stream this, but not this?
Right.
So the question is, how do you decide what to stream and what not to stream?
We also have portions of the game that we haven't streamed at all yet.
They're the ones, for us, it's what we've chosen to be the most prone to spoilers.
So we haven't streamed any of the single player or anything like that.
What we typically, the high level goal of streaming for us is to set a cultural example for the community.
So we stream in the way we hope other viewers stream themselves.
And it's worked out because by running tournaments for something as small and as simple as this alpha.
we've encouraged other people to do the exact same thing.
And it works.
So find whatever it is in your game that you think you can imagine other people doing for you, and then stream that way.
Because people, you know, you lead and they follow.
Okay, thanks.
Thank you.
So.
So I think two of the biggest concerns in generating an open development community is One the creation of clicks or kind of a sense of elitism or entitlement within privileged users And then also being held accountable for the actions of those Individuals and occasionally having to apologize on their behalf, right? How do you?
for one thing, incentivize a community, a type of community engagement that doesn't stratify your player base.
And also, how do you hold people accountable without letting it get so far that you're stuck making an apology that you never should have been forced to make in the first place.
So just to go over your question again, the first one is elitism, right?
Yes, I guess the first one is how to prevent clicks among privileged players.
And then the second one would be how to make those privileged players self-accountable so that you're not having to shepherd them around.
Right, so these situations have already come to us.
there have been complaints from other members who are not moderators, who felt like the moderators themselves were too click-like.
The question, sorry, the question is that how do you prevent clicks and how do you hold players accountable for if they're in a position of power and they abuse it or something along those lines, right?
So both have happened to us.
As far as clicks are concerned, I've never done anything to actively prevent them in the sense that, I don't say, the moderators themselves do have a private channel for which they talk about moderation.
And that in and of itself is a click.
And they talk about their own things in private.
I don't feel that this is destructive to the community.
And I think a big part of that is a lot of what has gone into selecting the moderators themselves is to make sure that even though they have their own subsection of which they're essentially the elites.
they're vetted so that they're not elitists.
They do talk directly to everyone else as individuals, and I've established a rule page for the moderators to know that they should not talk to individuals as if they are inferior to them.
Now, in the event that this does happen, and it has happened, we've...
The developers are the highest tier of elites, essentially, in development, and they have to step in, which takes time off on our hands.
It has happened a few times over the year, where we have to step in and talk to a moderator directly, and then guide them.
But this particular correction process allows it, sort of, serves as a way of showing the moderators how to behave.
It is sort of going to happen, I think.
Yeah, thanks.
Hi there, I'm Paulo from Brazil, thanks for the talk.
Your company has already made a name for itself with Monaco.
Yeah.
I'd like to ask if you have any tips or hints for companies that still haven't made a name for themselves to start up, to kickstart these communities.
Oh, sure.
Well, to be fair, while we do have a name or a reputation for having made Monaco, when we opened the alpha initially, it wasn't like a flood of people applied.
Because there are new and interesting games happening all the time.
And we felt like, while we had a small advantage, in the form of about four people off of our Monaco forums.
The first four people who ever joined the alpha were four off the Monaco forums.
That was kind of the initial bump.
And it took a while.
The first, like I mentioned in the talk, we were IRC before we went to Discord.
The first year was less than 30 individuals in our IRC.
So it took a while.
But those 30 individuals are also the same 30 that are on every day to this day.
And many of them are moderators now.
So the goal here is not to have a huge community.
The goal here is to find the few that really, really will stay with you the whole time, for years.
And I think that's a very achievable goal, even if you start from zero, as long as you tell people where to go to connect with you.
Because if they don't know where to go, then they're not going to be able to show you that they care about your work.
Thank you.
Thank you.
Okay, thanks.
There are some in the open room.
Okay, sure.
Thanks everyone.
