What really makes Fantastic Contraption work, the realization that if you can take an engine, you don't need to have a whole bunch of different tools like plungers and things that push back and forth.
Specifically, you can make your own plungers and complicated tools out of these very simple building blocks.
So this is the version that went out to friends and family.
It worked probably just barely well enough to sustain that role.
And if you look back, yeah, so it's got kind of all the major tools ended up in the final game.
And so we can actually bring up some of the contraptions that they made.
It's a... yeah.
So we can actually look at some of the original contraptions.
That this is... I think this is my brother's. This is the way he beat the level.
And this is one of my friends.
And this is my favorite. This is my dad's.
Which I think he called the praying mantis.
And so right away, even with very simple tools and really early on in the design process, this is validating a lot of assumptions and we're also learning a lot about design.
There are things about how rods collide in this that didn't make it into the final design.
There's a lot of things that changed from there to here, but overall you can see that the big stuff is working.
Another really important thing to learn, that you get to learn by watching your users play the game, is that, like I have these videos because they were really keen on sharing them.
And so if people are playing your game and are really keen on sharing your videos, then you should probably make that part of your game, build that in, and then try to take advantage of it if you can.
Alright, so this is the first version that has its art is a little bit better, but I think it's still my art.
And this is the first one with an actual win condition. It's the first one that says, oh my god, you won.
After watching those previous plays, it became clear how people wanted to play the game and what the win condition would actually be.
So beforehand, kind of the blurry eyed morning when I wrote that thing down, the initial thought was, alright, well you build a thing and that entire thing will go from A to B.
And so if I just sat down and cranked out the entire game and released it, that's probably what contraption would be like.
But that isn't nearly as compelling as just getting kind of like just a bit of your contraption at the end.
Other ideas bandied back and forth were just tagging it, like remember my dad's praying mantis just kind of tags the final goal.
But that makes some designs a little too easy.
So the final goal object piece worked really well and was a direct outcome of playtesting.
All right, so is this the Fusen?
All right, so if Andy moves on to the next one.
All right, so I want to show you something that, uh...
Man, we're having a lot of troubles today.
All right, well, I want to do, uh...
I wanted to show you something...
I'm going to show you, well, I wanted to tell you about something that we tried that didn't work out.
And so there's this idea that if you put rods into, so you build things with rods.
And so rods kind of hold wheels together, and they form structures.
And so if you Cross two rods.
So sometimes you want to be able to cross rods, and sometimes you don't.
You want to be able to build ramps that things can roll up on.
But you also want to be able to build ceilings over things that hold balls up so things can run underneath them.
So to do this, you have two kinds of rods, rods that pass through each other and rods that don't pass through each other.
So that's simple enough.
But problematically, if you put two rods down that can't pass through each other, what do you do?
So what error do you show the user, or what functionality do you have?
So I really didn't want to show the user just a big red X and tell them they couldn't draw anything.
So the original attempt was to actually fuse the rods together.
So this is really good. I think this is a really good design decision to fuse the rods together instead of making them, forcing them not to be able to do it.
Because it means you don't fail the user. You let the user just play the game like they want and something kind of natural occurs.
If you're constantly fiddling with the user and telling them that they're doing something wrong, then they're immediately going to become perturbed with you.
So, eventually...
So I did implement that and we tried it, but it just turns out to be way too good.
These building games, a lot of the challenge is in building actual structures and saying, well if I want to go from, if I want to have an arm that reaches from here to here, there's some challenge in actually building the simple kind of set of triangles that can do that.
And so if you fuse rods together, that becomes a trivial challenge.
So here is Here's another thing that drives me crazy.
So, oh, that's too, no, no, yeah.
Can you, wheels on rods?
Yeah, so, sorry.
This is something that is in the game as it is now, but this drives me totally crazy.
So Andy's gonna build a contraption for you, and you'll see that it works non-deterministically.
So when the user looks at this contraption, or if the user builds this contraption, then...
So, you have to build the, you have to put the water rods on the sides.
When the user builds this contraption, then they won't be able to predict what's going to happen.
And so, this is, this, this spent me, I lost a lot of sleepless nights over this problem.
So, when you look at this, there's a couple sensible things I think that could happen.
So, one of the sensible things is, they could both spin around in a circle, which would be great, or maybe neither of them spins around in a circle, but what actually happens is, if you hit play, an arbitrary one of them spins around in a circle.
So that's some horrible game design right there.
But this is actually the shipped game, this is as it's playing on the web and on the iPhone right now.
And I think the reason that this works, and I've never gotten a complaint over this, no one has ever mentioned this to me in our forums.
Nobody has ever brought this up.
And I think it's a really, it was a bit of an epiphany for me why this is fine.
And I think it's all about mental models, and that you don't, when you play a game.
And when you view the world, you don't view it perfectly, and you don't really think very hard about the physics that are going on.
So when people look at a wheel, they don't think of it as having kind of a, like a.
thing in the middle that produces torque around a beam, they think of it as something that spins. And so when people tend to not put beams in the middle of a wheel, because wheels spin, wheels don't spin beams. Like cars go around, like wheels go around inside cars, cars don't go around outside of wheels. And so you can design to mental models instead of to the real world. And I think this is really successful in a lot of games in general, in places you might not think about it. Like in platformers, double jumping kind of feels like you should be able to jump, double jump.
Like, I'm sure everyone when they were a kid, like, attempted to double jump, but it never really works.
And, like, wall running is the same thing.
I'm sure, like, everyone here tried to wall run, but I'm sure we never made it past about a meter.
And so mental models are powerful design tools because we can add great things to the world that make the game richer and simpler places, even if they don't exist in real life.
You can just use the last one.
All right.
So I did a ton of user testing, and I think user testing is incredibly important.
User testing early on helped build the game, and then later on at the end, there was a lot of work that went into the tutorial.
So this is the original tutorial for Fantastic Contraption.
The game is pretty much fleshed out.
You know, all the art assets are there.
Everything is working, it's fun, and all I have to do is teach people how to play.
It's a fairly complicated game, but all you really need to know how to play is to build a simple car.
And so this tutorial, with just several arrows and nothing is grayed out, and I don't take anything away from you, is fantastic for gamers.
Gamers totally love it, because gamers, they like to play, and they like to toy around, and they like to experiment, and they like to experiment playing games, and they like to experiment learning games as well.
Unfortunately, none get...
Sorry.
Unfortunately, non-gamers don't have that same safe feeling when they're using menu systems in learning games.
I found that you have to teach people every button, what every button does, or they'll be afraid of touching it.
And they won't fiddle with things. If something goes wrong, they're more likely to stop playing your game than to try to repair it themselves.
So, in this example, people would get here, and they would most likely...
do that because it does technically fulfill the requirements.
Or, and if you hit go, you'll see nothing happens because it needs to be connected to the middle of the wheel to fix it.
I mean, we could have added middle of the wheel to the help text, but that wouldn't have, I'm sure that would have helped very little.
People would do this, and even though there's like an example right above showing what people should do, they rarely, if ever, would.
So usually they get it wrong once, and then they would just stop playing the game.
And that's I think that's because people don't like to fail early, non-gamers like to be, have to be shown how to play your game really explicitly and they won't kind of discover how to play it on their own.
So the tutorial that ended up in the actual game, which we can bring up separately, right?
Anyway the tutorial that ended up in the actual game.
After playtesting, if that one failed, it's kind of your typical tutorial that most games see.
It's like a pop-up box that says, Okay, welcome to Fantastic Contraption.
Press this button up here to select wheels.
Oh, good job, you selected wheels in the menu.
Alright, press the mouse button down here to place a wheel.
Oh, good job, you just placed a wheel.
And then...
It's completely awful for people like you and me, because there's constant mouse clicking, and all I want to do is play the game, and yeah, okay, I get it, a menu, you click on things in a menu to select them, that's totally amazing, and then please just let me play, and if you fail here, which is where most people fail, it would just say, nope, wrong, try again, failed, you failed, you failed, until you get it right, in which case, hooray, you're rewarded with something actually working.
So.
That's, I mean, the importance of playtesting is that if I had launched with that original tutorial, I would have gotten nearly the audience that the game actually reached in the end. All right. So I want to talk a little about a development. So I developed it in Flash, obviously, but I didn't use any But I didn't use the Flash authoring tool or any weird, funky Adobe tools.
I just wrote it with a command line compiler and actually wrote contraption mostly in Notepad.
So don't be afraid of Flash.
You can ignore the funky, bizarre features of it and just develop games like you develop games.
Import assets just like you would normally import any assets.
All right, Andy squished a couple bugs.
Yeah, so I use Box2D to make Fantastic Interruption to handle all of the physics.
And I want to do a big shout out to Box2D and Aaron Kato, because that saved me a huge amount of time.
If you kind of saw previously the amount of time Andy was squishing bugs, Box2D was much faster.
And let me go from kind of one at a time squishing things to...
to really getting some work done.
So Box2D I think of as the fire flower.
of coding. Yeah, so finally we get to the release into the wild. And so, you know, I didn't know how well Fantastic Contraption would do. I made it mostly for me. And so when we finally released it, it was a soft launch so we could work out some of the bugs. It didn't go up on any portals, just on my site, and I think there was like two small blog posts.
And then my wife and I kind of went away for the weekend.
And when we got back, it turns out that StumbleUpon had found us and dropped a horrifying crush of people onto the server.
And so this is one of those good problems to have.
But here's a secret.
There are no good problems to have.
There are only problems.
And so this was hard for a lot of reasons.
Not least because our server crashed immediately.
And so the next several months and weeks were spent trying to keep the server up, which is hard.
I recommend you have an upgrade path ready to go if you launch a game with an important server component.
And the other problem was that the forums we launched with the games were exploded with lots of people.
And the forums were fantastic. They were really useful.
There was what was going right with the game was in the forums.
What was going wrong with the games was in the forums.
But wandering into the forums myself was kind of a horrifying ordeal.
Because people who love the game and there are people who hate the game.
And there are people who love you and hate you, even though they have never met you or know what you look like.
And so the only way I got out of it was by...
The only person Contraption ever actually hired was Andy Moore, his community manager, who...
Got me out of this horrible mess.
So, I mean, one of the reasons this went so well and there were so many people is because Fantastic Contraption really lives online.
So, yeah, Andy, if you want to, like, bring up the game and we can look at, like, a save link.
So, if you're playing Fantastic Contraption, you make a thing.
You're usually pretty chuffed about this thing you just built.
I mean, it probably took you a while, and it was probably fairly hard to do.
And so when you finally did it, when you finally think, oh my god, I just have to get across that gap, I can't believe how long it's taking me, and you succeed, and you are prompted to sign in.
I think we're having problems with the internet.
But whatever, after you log in, you save it, and that is saved on the server as your collection of contraptions.
And then after you save it, you're presented with a URL, kind of the atomic unit of the internet.
And if you sync this URL, it's very short, it just has contraption.com and a design ID.
And if you paste that into any browsers, you'll get back to your contraption.
So you can send that to your friends, or you can send that on a forum, and the game suggests you do that.
And when your friends click on that, they get to see your thing, which is great for you, because you get the pride of them seeing it, and it's great for me, because it means you're spreading the game around.
Fantastic Contraption does really, really well on forums.
My favorite thing is watching Contraption spread around on forums, because someone will find it, and they'll say, hey, I found this new game.
It's called Fantastic Contraption.
I've been playing it for a while.
I'm kind of stuck on level six, but oh my god, level five was great, and here's where I built to do it.
And someone will say, oh yeah, that is, that's a pretty neat thing.
Oh, I beat level six, and I beat it like this.
And so someone else will come around and say, oh, you know, I beat level 7 at like the same time, but I did it totally differently. I did it like this.
And so it starts this real conversation.
And it's the entire board ends up getting swept into it.
And just like Andy's getting swept up into his contraption now, people really enjoy it.
And it works.
It spreads, I'm not going to use the word virally, but it spreads in a communal kind of fun way with none of the cynicism of those designed in viral loops.
It's just really people playing the game together and really enjoying what they've created and what their peers are creating.
Yeah, so if we go back to the horrible Crusher people...
So here's my Google Analytics graph for if I can get past the crush. Here's my Google Analytics graph for the first week, which went really well. All of the old indie game makers will tell you that it's really important to market your game really hard and develop press contacts. And I think that is really important. But I did almost none of that. So all of this growth is Basically thanks to StumbleUpon and we got a Jays Games review early which did some fantastic things for us. But most of our traffic after the initial burst is, the vast majority of the traffic is all from those save links from outside on the greater internet. All right. So if we can continue on past the first week to the first month, things continue to go very well.
One of the things I really like about the internet and that Fantastic Contraption is a great example of is that there are no gatekeepers.
Contraption didn't go up on any portals and I didn't need Steam or Microsoft or anyone to tell me that I could do it.
Fantastic Contraption just went up on my own website and it did really well on its own.
There was no paid search, there was no publisher, no one told me I could do it. I just did it and it worked.
I really love that model and I think...
You know, people are chasing existing markets because I think that's an easier thing to do.
And it's a valid approach. Like, Steam is doing really good things for Indie right now.
But, you know, people sometimes, Steam says no to people, and sometimes all the gatekeepers say no to you.
And I just, you know, I want to point out, and I think it's really important to think, that you don't, like, you really don't need anyone's permission to make a really good game and be successful making your game.
So the first month, traffic continues to go up. Pretty cheery about that.
And at this point, money starts coming in, which is an incredibly emotional thing to happen.
It's like, logically, money is good.
But emotionally, it's much more powerful.
Actually, my favorite part of the entire release of Fantastic Contraption, the most kind of emotional joy that came to me, was when I was sitting at my really uninteresting job.
I used to do web dev and hack code for lawyer sites.
And so I'd be like hacking some horrible like CSS problem writing PHP.
And a little email alert would come up that would say, ba-bing from PayPal, somebody has given you $10.
Some total stranger who you have never met likes your creation enough to pony up $10 of his own money just to you to play it.
And it's an incredibly fantastic emotional rush to chase, especially when it's like entirely your creation.
that you have gifted into the world, brought into the world, and it's fantastic when it happens and is absolutely worth chasing.
Yeah, so I want to talk as well about, right, so here's the big three months, kind of where most of the traffic comes from.
That spike in the middle is a big Reddit hit.
We never got dug, but those traffic aggregators are...
Well, absolutely bread and butter for Fantastic Attraction, as well as, I'm sure, a lot of indie games.
That's just kind of the aggregators, the way people use to find things are really important when you're chasing down your own traffic.
And the internet, you can really do that because content discovery is kind of a solved problem, unlike even, you know, some, well, yeah, unlike the iPhone is pretty easy to enter, but its content discovery problems are pretty massive.
So...
The rest of this curve is pretty smooth.
It's nice and fat.
There's a fairly nice little tail to it.
A fairly nice tail to it.
And everything continues to go well.
So my conversion rate was about 0.5% of users.
So that sounds really small, but when you're getting 3 million users, then that's still real money.
So I'll do the simple math for you, because last time I did this, some people got the math wrong.
That's like $150,000.
But.
This doesn't represent the game.
Eventually, it did go up on a couple of portals.
One up on Addicting Games, which has a ton of traffic, and as well as Congregate.
And so that money isn't represented here.
So contraption, the first three months, I think, made something on the order of $200,000.
And then, obviously, the tail continues nicely as is.
So after this, and Andy, maybe you can just show us some contraptions.
So after this.
Remember this entire time I've got all these server woes and it's like an incredible pain in the ass to keep the server up.
So, when I really think about the launch of Fantastic Contraption, I think about making the game for four months, which was kind of arduous because it was kind of every waking moment because I was also working at a real job.
Or, yeah, real.
And then I launched the game and it immediately exploded.
So I had server problems.
And I got a little bit of money, which felt really nice, and some compliments, and some really good reviews, which felt really good.
And then I spent the next four months arguing with servers, providers, and ISPs, and trying to keep the game up.
So when I actually remember back to the contraption launch, it's not a very pleasant memory, because most of it is trying to keep it up.
So after I was successful.
talking to you. And money, somebody said that money is dumb and lonely and it just wants to be with other money. So after you start making a little bit of money, then all kinds of people with money will come to you. And most of them, I think Indies are incredibly wary of people that come to them with deals.
Mostly, I think, because when people come to Indies with Deals, Indies end up with a really short end of the stake off of it. But I have had a really excellent experience working with a company named InXile in Southern California.
They're writing Fantastic Contraption now, and so I made that decision because, for me, it was not very fun, much fun to run, so they run it. And I'm also not very interested in continuing to write contraption games. It was really fun to write the first time.
But after a certain amount of writing code, I mean, I think almost everybody loses interest in the game that they've been working on for a certain amount of time.
I mean, there's no Braid 2 or World of Goo 2 in the IGF this year.
And I think that's because we're creative people, and we're less interested in exploiting every cent out of something that succeeds as we are in expressing ourselves creatively.
So I'm a lot more interested in working on something else and I still want to get, you know, some cash out of Contraption 2 so I'm going to let someone else take care of that. I found them kind of by kismet. They weren't coming to me to talk about working on Contraption. I kind of ended up talking to them about it first. But I had some really bad experiences before that and if you end up in this situation, which I hope you do because it's, I mean...
It's a pain in the ass, but it means that things are going well. There are some things you should really do. You have to close this information gap. So we know, kind of as indies, know very little about the business side of things. We don't really know much about percentages and up front and royalties and what right of first refusal really means and how dangerous it might be.
And so you have to contact other indies, people like me and other people who are talking here today, and you have to close that gap.
You have to find out what all this stuff is, what the standards are.
People will come to you immediately, and I think the first offer I ever got, before Fantastic Contraption was ever launched, was somebody offered me $300 for the source code and all the rights.
And it only got slightly better after release.
And so...
Really do your homework. That is like obviously an atrocious deal.
One of the things that would have kept me out of trouble is if you end up talking to someone, if you have a lunch meeting with them, do like a quick Google search, find out how many times they've been sued in the state of California.
And if it's like more than two, then you might consider that heavily when you finally meet with them.
Yeah, so...
I think the slime, yeah, so I think the slime meter is a really important thing to take note of.
If you're talking to someone over the phone and slime oozes out of the receiver on your end, then it's probably easier just not to work with them than to try to pick apart whether their deal is good and bad.
If you don't trust someone, like, there are a million ways for them to screw you over and for them to beat you.
So try to work with people you like, especially that are passionate about your game.
People that actually play your game and converse about it can talk about your game like a peer and like a fellow player would.
Because if they don't understand your game, then they'll never be able to make a decent version of your game.
Also, obviously, look at things they've done before and how well that did go or how well that didn't go.
All right, I'd also like to mention I've been thinking a lot lately about.
Kind of my perception of how well Fantastic Interaction went and why that went kind of a year ago, because it was released in 2008, and how my perception has changed this year.
So a year ago, if you'd asked me, I would have said, oh yeah, Fantastic Interaction, write a game in Flash, make it better than your typical Flash game, release it, charge money for it, you win, stand up to applause, you're done.
Since then, I've started to discover it's a little trickier than that.
and that I think I've been thinking a lot about Machinarium, which is obviously a completely fantastic game. And I don't know, but Machinarium was obviously not released as like a flash game first. It was in Steam and for download for pay, and I think most people didn't know it was a flash game.
And I think that was a good strategic decision because there are these odd kind of fallacy or odd ideas about flash games and how they should be free and how maybe you shouldn't pay for them or they're not worth as much just because of what language they're written in which is obviously ridiculous.
And I kind of a year ago thought that, well, okay, people don't really think that way.
Contraption is an example of how that's garbage and you just need to write a decent game and people will buy it.
But I think...
Closer to why Contraption worked and perhaps other Flash games that are equally good or better than Fantastic Contraption haven't worked as well is because Contraption really tries to live online.
Those saving links and the community features are really, really powerful.
And if I was going to write a game today, I am writing a game today, and it's continuing to be in Flash, but it's not just a single player, like drop it in the water and watch it go experience.
It's heavily using the internet and community features and publishing back and forth and talking with your friends.
I think things like the rise of Twitter and Facebook, I think we should be looking really hard at ways of doing good things with those.
I was talking to a Facebook dev the other day and he was talking about how Facebook developers kind of look at the entirety of Facebook and think they have to conquer it.
And they have to draw in the wide swaths of Facebook and make it bow down to their will.
But Facebook is huge. I'm sure everyone in this room has a Facebook account.
And very few of us play Farmville.
And so I think it would be really nice to see some games for Facebook that we would play.
There are like really great opportunities out there to use the kind of emerging social networks to do sensible things instead of kind of really dumb games.
That's a cool contraption.
All right.
And so we'll wander back and oh no, escape Andy.
Thank you.
Alright, and we'll bump out into the credits.
And I want to briefly, when you clap for me, I'd like you to clap for everyone who helped with this.
Andy Moore is the puppeteer.
This entire thing was written in, all the parts that worked were written in.
The broken parts were me, but the parts that worked were written by Eric Smith of the Citrus Engine, which is a nice little flash platforming engine.
Daniel Ben-Murgy, I know I'm pronouncing your name wrong, did the character art for me and Andy the bad art.
I actually did.
But obviously the good art is really good. The animations, cheesy animations were me as well.
And of course I can't help thanking Aaron Cotto over and over.
Oh, one more last thing.
If you do end up making some money, kick back some of it to the tool users that you created.
I pushed back money for the first several months back to Aaron Cotto and the whole Box2D team, as well as money to the guys who ported it to AS2.
And that's the end of my post-mortem.
So I'm happy to field any questions.
There's a microphone right there if anybody has any questions for me.
I'll just do a filler question here.
Do you have any interesting insights into Flash as the platform other than the monetization question, technology otherwise?
Sorry, I had problems understanding it.
Flash as your development platform, good, bad?
Yeah, so I think Flash, I think every platform has its place. I think it depends a lot on what kind of game you want to write.
If you want to write a game that really takes advantage of the internet and people can like share with each other and you know.
I think in a lot of ways the way you actually win in game development is to go into the wilderness.
And so don't do what I'm telling you to do and don't do what anyone here is telling you to do because other people are already doing that and they're already trying that.
What you should really do is find something that you think is going to work, an idea that you have that other people maybe aren't having, and really try to own that and make that work.
It's hard for me to say Flash is good and download games are bad.
Download games convert really well, and people make a living off of download games.
And Flash games have the weakness that single-player experiences in Flash probably don't convert as well.
But you have big advantages if you're creative.
And I think that's the real win of Flash.
All right, more questions?
Can you say something about how you got people to pay money for the game that was initially free to play and how that design evolved and how that worked?
Right, so Fantastic Entraption, you can play the first 20 levels for free, and then a level editor costs $10.
And so at the time, I thought it was really important to release a game that was.
perceived as being free, even though it costs money.
And so contraption reviews like that.
If you look at reviews of Fantastic Entraption, you'll see that it's like a free-to-play game.
And maybe there's a little extra stuff if you pay for it, but I'm not totally sure what it is.
And so I think that's, obviously, that worked well for Fantastic Entraption.
It's impossible to know if my conversion rate would have been higher at the time, but I think now I'm thinking about moving paywalls up more aggressively.
There was about, I don't know, I say there was like 10 hours of free gameplay in Fantastic Contraption, but really I'm sure people played Contraption without paying any money for hundreds of hours.
And so, I mean, it's hard to know if that's a mistake or not.
Now it feels a little like a mistake, and I'm not going to be doing, I'm not going to be pushing that much free gameplay in the next versions.
Hi Colin, I'm Ryan from Untold Entertainment.
Hey Ryan.
Love your game.
I was wondering, when you went with PayPal as your payment option, were you worried that you were leaving a big pile of money on the table because PayPal doesn't cover everyone on the planet?
This is a nice non-language based game.
Yeah, I think...
So, part of being like a real indie developer and doing it all yourself is you're wearing a lot of hats.
And so...
With Fantastic Contraption, the developer hat is fun to wear and the designer hat is fun to wear and the artist hat is not so much fun to wear.
Oh yeah, all the art for Fantastic Contraption was done by my lovely wife, Sarah Northway.
I think a good solution that I can vouch for for getting art for your game is to marry an artist.
Kind of the server management hat and the monetization hat are not as interesting to wear.
And I think a lot of indies have problems with that, and they'll kind of not as much interest in the business side of things and the monetization side of things.
Certainly for me, PayPal was the easiest single thing to implement and then kind of forget about it.
You are absolutely on the nose in that I'm leaving a lot of money on the table.
Something like 1% of Taiwan has played Fantastic Contraption.
A huge number of people.
And PayPal works really poorly in Taiwan.
And so I didn't manage to monetize any of that traffic, which is just an absolute shame.
On the other hand, I know people in companies that my wife implements payment methods professionally.
Like, that's her job.
And I mean, that's like a never ending.
You could do that for your entire life. You could implement payment methods. So for me it was just take, you know, the biggest, easiest implement one and forget about it. I think there are like interesting things going on now with the kind of the flash portals implementing like payment methods and like aggregating them as well as like other payment aggregators. And I think they're really worth looking at. I don't think I I really haven't, I don't know how compelling it is.
So it's really easy math to do if you should use one of those or if you should just like be dumb and use PayPal, right?
So PayPal takes on a $10 purchase, they take like what, like 10% off the top, 10 or 15% depending on if it's like an American or foreign purchase.
Oh, well, I'm Canadian, so I shouldn't really use the word foreign if it's an American or non-American purchase.
And so payment gateways often take like 30%.
And so if you have to get 20% more traffic from them to make that worth it.
And so I haven't seen any of them make a really compelling argument that that's true.
If you ask them, they'll say, oh, yeah, absolutely.
There's like slam dunk, no problem.
But it's hard.
I mean, really, you need to have someone sell a game through PayPal and then say, oh, you know what?
I'm not going to do that.
I'm going to change to an aggregator and then see the numbers go up.
I would like to know if people shared more solutions or more levels?
Because they could share both levels they made themselves or solutions.
So, anybody, you don't have to pay any money to share solutions with each other. And if you buy the game, you get a level editor and you can build levels. And so, a shockingly few amount of people actually used the level editor. Andy, do you remember the... Right, so it was like under 5% of people who bought the game actually used and saved a significant, like more than one or two levels. And so, The level sharing was, uh, the level sharing didn't take, it wasn't nearly as valuable as the contraption sharing.
I mean, uh, there's a couple of reasons for that, I think.
Uh, one, the level creation is, uh, isn't as show-offy as building contraptions.
And people are, like, users are much more interested in showing off how smart they are than, um, how well they can design a level.
So if you look like, uh, yeah, if you look at this level, like, this is one of my levels, it's like, very simple.
It's just a bunch of stairs.
And as a level designer, the idea behind my level design and contraption was to get out of the way as much as I can so that the user can have all the fun.
Contraption is not about me being smart.
It's about you being smart.
And so when a good level is not about the designer looking smart, I mean, obviously, you have to be smart to make it look very simple and elegant.
But when it's not obvious that you're being smart, then people just don't really care.
And so.
The levels people actually make end up being oddly overcomplicated and doing funny things and are very little fun to play.
So I would say the level sharing was fairly uninteresting from a point both of levels that were created as well as traffic that it actually brought in.
And I think that using users to actually make...
We've experimented with having contests add levels to the games and trying to offload some of the level design jobs to users, which would be really nice to be able to do.
But it turns out you spend a lot more time kind of digging through levels and tweaking levels and kind of doing editor work on levels that people submit.
And in the end, it's probably better just writing your own content for yourself.
I was wondering, when you were showing those early prototypes to friends and family, if you were actively looking over their shoulder in the same room, or if it was just over the internet, and what advice you can give for management kind of thing.
Right.
So that's an absolutely fantastic question.
So that initial build you saw just went off to friends and family, and I didn't look over any shoulders.
There was kind of a block of text explanation that went along with it.
I think friends and family are really bad at playing your game.
Like, they'll say they love you at Christmas, but when it takes them playing your game for more than an hour, they won't do it unless it's actually a functioning, working game.
And so, yeah, to answer the question you didn't ask, if your friends and family actually play it and enjoy it, it's probably a good sign.
And it's probably like you can take that as meaningful.
They're not just like trying to make you feel good.
And in terms of user testing, I've done a ton of testing more recently for a game in the kind of contraption universe.
And it's kind of a lot more traditional puzzle game with kind of traditional answers and solutions.
And so especially when you're not working with something as open-ended as Fantastic Interaction, user testing is just unbelievably important.
I cannot stress enough how important user testing is.
A puzzle may seem really easy to you and they may be completely impossible to the user.
And you may be, okay, well, all I need to do is move the ball like four pixels to the right and everything will be obvious.
And that may be true, but by moving that thing four pixels to the right, you accomplish that goal and then lose them on something totally different.
So you can never really make changes and then consider a level solved.
You have to make changes, iterate, get somebody to test it, and then make changes and test, changes and test.
And so you just have to run through.
A lot of testers.
And of course that's hard because you run out of people, especially in your target demographic.
You get people who are too good at games or too bad at games.
But yeah, the only way to do it is to just say nothing.
They'll turn to you and ask for help all the time and you just have to ignore them and say no, I'm not going to help you.
Actually, one really good tactic that testers use is they'll start up a puzzle and they'll say they'll play at it for a while and then they'll go, oh man, all right, I give up.
How do you do it?
And then you say, oh, what?
I don't know.
Maybe.
I'm not going to tell you how to do it.
It's like, that would be cheating.
And then they immediately go back to trying to solve it.
Like it was their tactic to try to get through having to not solve it.
Thank you.
That kind of leads into my question here.
I was wondering if you could go into your level design process and if you have a difficulty ramp, or did you just create a batch of levels and then some worked and some didn't through the testing?
So definitely a combination of those.
So the idea, the initial set of levels in Contraption was pretty easy to build, right? There's like the one where you go from left to right, and there's the one where you have to go over a thing, and then there's the one where you have to go from up to down, and the one where you have to go from down to up, and the one where you have to drag something from over there. So they were all like very simple concepts that you just kind of like build through and then let play out. So I built up kind of the obvious set of levels to begin with, and that was I think the obvious set was around 16 levels.
And then when you start putting testers through it, it kind of becomes clear that there are concepts that are going untaught.
And so a lot of the times, those concepts that are going untaught also are really interesting early game levels.
And so it's really hard for you to think of one of the really early levels is you just have to start.
And can you go to the second level?
Like rolling away.
So rolling away is like the simplest level ever.
And it's just kind of, if you make a ball, you just have to basically make a wheel in the right place.
Like it is possible to fail, but it's not that easy.
And so it became obvious that the users just had to have one more make a wheel level, where they knew make it on the right is different from making it on the left.
And how long that rod is has some impact on how successful your contraption is going to be.
But.
It ends up being a really interesting level to that level of user, like in the end anyway, because they're still getting to grips with all of that.
So for Contraption, it was kind of obvious set of levels, play test it, discover things are going untaught, there are gaps in the learning curve, and then just patch those up with levels as needed.
Was there any particular reason why you chose not to use the Flash IDE and use the different set of development tools like the notepad and whatnot?
Yeah, so I'm just a programmer and I'm used to writing Java code and C++ code.
And so I was a lot less interested in learning to use a new tool than I was into actually making a game.
Actually, this is something that I think a lot of people who start out making games up, kind of getting bogged down in details and filling out tools for themselves and worrying about technologies when if they just kind of like sat down and started writing the game then they'd actually finish it. People who work with me kind of are driven crazy by the whole, like, I use Notepad and a command line compiler because...
It's like an inefficient way to do things.
And I finally started using FlashDevelop, which is much better than a command line and text files.
But I'm really uninterested in spending any amount of time on something that isn't actually actively writing a video game, which I think is a strength, but can also sometimes be a weakness.
Thank you.
All right, I think we have five minutes.
We have time enough for one more question.
No?
All right, should I just end it?
All right, thanks very much.
