everybody. We're going to get started here. The usual first few words, go ahead and move in towards the center if you haven't already. Turn off any noise making devices, cell phones, confetti cannons, just leave them under your seat. And remember to fill out the surveys at the end. That's a huge help to us, lets us know sort of how we did and it's the most honest and innocent feedback we can get. All right. So off to the races.
So as you can see, this talk is about the module level design of Fallout 4.
You're in the right place, hopefully.
And before we really get going, a word of caution.
This talk has a lot of ground to cover. We're going to go fast.
We are going to make slides available. You can find those online after the fact.
So don't worry too much about getting everything down on the screen.
Just try and keep up with us and we'll get through this together.
Okay.
So modular kits, modular level design.
When most people think of them, the first thing that comes to mind is a Lego brick.
And the comparison makes sense.
Legos are small objects that work together as part of a system to create something original, which maybe exceeds the bounds of the original imagination or intentions of the creator of the brick itself.
In a game like Fallout 4, we might think of a structure like this, something made from a series of interconnecting pieces working together as part of a system to make something original that the game developer or the player created outside of the original intent of the person who made the kit.
So what you might be expecting today is a module kits 101, sort of a primer.
And that is and isn't what we're doing here today.
This is actually the second time that Nate and I have talked to GDC about this specific topic.
We were originally here in 2013, as part of the level design in a day workshop.
And today we're gonna recap some of that talk, but we're also gonna focus primarily on new ideas and new concepts and lessons that we've learned since we were here last.
A couple of brief words about who we are.
My friend here is Nate Perkypile, and he's in Environment Arts with Bethesda Game Studios.
My name's Joel, I'm a level designer.
Nate and I have known each other for about 12 years, worked together on and off throughout that time.
And between the two of us, we've worked on several games.
And of the games that we've worked on together, all but one of them made extensive use of a modular system for its level design environment art.
which is just to say that we've been to this rodeo, we've had several projects in many years to try out different approaches, find things that work, screw other things up and just sort of learn. That's not to say that everything up here today comes from Nate and I ourselves. We owe something to our colleagues in the industry who have also shared their thoughts, whether it's Lee Perry, Darius Kazemi, Derek Yu, who are also interested in systemic level design, but also the entire team at Bethesda Game Studios.
And not just the other level designers and the other environment artists who use this process most directly, but the studio as a whole.
Because Bethesda Games Studios is a place that has created an environment to cultivate this kind of workflow and allow it to grow over the space of time that we've been working there and before.
And I think it's important to have this kind of context in mind in this and really any GDC talk.
Because while it's on its face about a specific process or specific technique that you can hopefully use and apply to your own work, it doesn't exist in a vacuum.
It comes from who we are as a studio, what our priorities are, our culture, as well as priorities and the goals of the games that we hope to create with it.
So today we're going to endeavor not to just give you the how of some specific techniques, but also as much as possible the why.
So you can understand our thinking and how we came to these processes and best understand how to apply them to your own situation.
So modular level design is something that's been around in games for a long time. At Bethesda all the way back at Daggerfall, modular kits were used to build procedurally generated levels. Marwan had the sort of standard kit approach where everything snaps together on a grid. Joel and I worked together on Blood Rain 2 and that was that same kind of kit approach. It was really obvious to the player that this is a kit. Everything was north, south, east, west.
Oblivion had the same kind of kits, but there was a lot more custom pieces for destruction and things like that, so it worked a bit better. But you could still tell it was a kit.
In Fallout 3 we had standard kits for most spaces, but here we started to try a lot of new things like directional kits that only snap together in a certain way, asymmetrical hallways. Skyrim had standard kits as well, but we tried even more new things like kits that only went in a single direction so you could have really specific architecture.
Or the cave kit where there was all these separate pillars and walls and things that could be mixed together by the level designer to really define the space and it wasn't just dictated by the artist.
But today we're going to cover Fallout 4 and how we allowed the level designers to have even more flexibility and a lot more visual variety.
As promised, this is sort of the 101 section of the talk.
We're going to go over some fundamentals, and again, going to go kind of quickly through them.
So when we start thinking about creating a kit, the first thing we want to decide and understand about the kit is its footprint.
Footprint is, in essence, the grid, the size of the pieces and the shape on which they're going to snap and tie with each other.
This is where the comparison to a LEGO brick probably makes the most sense.
The design of a LEGO brick is highly specific, and that specificity is what permits it to work together as part of a system.
It also has an effect on what you can build with a kit, and what the look and feel of the final construction is going to be like.
So a typical footprint might be an equilateral cube of volume.
And this is a nice footprint to have because it's going to tile with itself cleanly in all directions. And it's going to give you a certain type of aesthetic, a certain proportion of space, like this hotel hallway we see here. It's worth playing around with the different types of footprints you can have. For example, you can double the height of that same basic footprint and give yourself the same flexibility in tiling on an equilateral horizontal plane, but giving yourself a different ability to create a look and feel with additional headroom.
You can play around with other axes as well, such as making a wide kit, kind of like the one Nate was showing from Skyrim a minute ago. When you're getting into these situations, you want to be careful, though, about how a footprint can lock you in and do things like limit your ability to tile and snap back on itself. It's a point that we made in 2013. So with these, like, wide footprints, we often call those a one-directional flow kit because it flows in one direction and can't tile back on itself.
It's okay to make these kinds of decisions, but you should try and think about the ramifications that it's going to have and decide how you're going to cope with the limitations and what you can live with.
Something else really critical to understand, something I think a lot of people misunderstand when they start in this workflow, is you need to treat the footprint as a maximum extents of the piece, not sort of as a starting point.
So this is another example from our prior talk.
Now if you look, we have two pieces, identical pieces of a hallway kit, pushed right up next to each other.
Now if you focus on the floor, you'll see that the artist has built all the way out to the footprint on the tiling edge, which you have to do, that's how the pieces are going to meet and tile, make the kit work.
But the artist also built all the way out to the edge of the footprint on the floor on the other non-tiling edge, where the walls are.
What this means is that the walls of that kit are going to be coplanar. They're not going to occlude. They're going to have Z-flickering problems. You can't do that. Even worse, there's a little alcove detail built into the kit, even at this gray box level. And those alcoves are now going to intersect and protrude into the neighboring pieces. I mean, you can't use a kit in this very basic way. If instead we had used the footprint as a maximum extents and left a buffer, we could use it just like this, no problem at all.
Pivot points are also very important.
Pivot points judge how you're going to work with the kit, how it's going to snap mathematically, and they have to be really nailed down early on.
So we take example of a couple of kit pieces from Fallout 4.
Here we have two.
The one in the middle of the screen is a basic sort of floor ceiling piece and its pivot point is at the bottom center, which is the most common place to have a pivot point.
But the highlighted blue piece, that little clam shell on the side, it has a pivot point at the bottom edge.
Both cases are going to snap mathematically fine based on the grid, the footprint that these ones are using, but it does affect how you work with this piece.
As long as it's mathematically accurate, it is to a certain extent a matter of personal preference.
But once you've nailed down the pivot point that you have on a certain piece, you want to make sure that you don't change it.
Because the minute that you change a pivot point, you're going to undermine any work that level designers have already done with those pieces.
Something else that we haven't always been great about, but we try to improve in Fallout 4, was standardizing our transitions.
The best example of this would be a simple doorway.
Early on in the game we chose a single wide and a double wide door frame size. We made sure those dimensions were 1-0 to the team.
And we used those consistently throughout all the different kits, so every kit didn't have to solve doorways its own way.
This gave us the ability to use door art interchangeably, but also more critically, it allows us to mix and match as level designers between different kits.
So if we want to go from a basement to a brick to a hotel, we can do this fluidly without having to get custom art to handle every single case.
It's also useful for character artists and animators because it gives them a known quantity in terms of the smallest choke point that our characters have to be able to navigate.
Looking at some sort of alternative and sort of beyond the basics techniques, one thing that we've talked about before are layered inserts we use with a base kit. Best example of this remains from Skyrim. If we take a look at a very simple cave layout that's made with a traditional grid system, it doesn't look like a cave at all. We have this unnatural grid corner in the edge of it. So what we do is we bring in these layered insert pieces that go floor to ceiling, and what these do is allow us to shear off the unnatural corner.
By themselves these pieces have bad texture seams and gaps, but we can easily cover those up with boulders, pillars, free-floating pieces, and even after the most rudimentary lighting paths, we have something which begins to feel much more naturalistic.
We relied on this extensively in Skyrim, where we had to create so many caves and natural interiors, but we found ways to apply it forward into Fallout 4, because it was such a useful part of our workflow in Skyrim.
Being able to do things like create sweeping architectural curves and lines inside an environment, without having to make custom art to handle every time we were interested in trying something like this.
Something else we rely on extensively, which really boils down to an editor feature, is the ability to specify a local snap parent.
Some other editors have this feature and call it a custom grid.
So when we're creating a new space, we will tend to work off the origin, snapping along the world grid coordinates.
And that's all fine, and it snaps perfectly.
But sooner or later, we're going to want to rotate off at some arbitrary orientation and start tiling in a new direction.
What we can do in our editor is we can point to this new snap reference and essentially treat it as a new origin and then snap along with kit logic and mathematical precision on whatever arbitrary direction we want.
This allows us to create sort of meandering flowing layouts that are dictated by the needs and the whims of level design rather than always being locked into custom art to get us off the grid and back on again.
All we have to worry about is areas where we transition from one grid to the other.
One specific type of kit we use a little infrequently is called the pivot and flange. We use pivot and flange kits in Fallout 4. We also use them in Skyrim where this example is from. And this is what we call the ratway kit. It's under the city of Riften in Skyrim. And this is a one directional flow kit, basic hallway pieces which snap together. And the pivot point on these exists at the end and we're able to swing them around and within a certain threshold create these gaps and these overlaps.
We have an archway piece which seals that in and covers it visually and lights nicely.
And that's good for creating space which would feel like once upon a time long ago, they may have been built on a straightened level, but they over time have settled into a more interesting organic shape.
Now, this stuff we did cover more or less in 2013 and we went into a lot more detail with it. So if you're interested in more on this stuff, by all means, that talk is available online. It's free. It's in written form. It's been localized in different languages. Go check it out. But today we didn't want to just give that talk again with some updates because we're always kind of looking forward and thinking about where we can go next with our workflow. We never assume that we figured out the best way to make the game we were making. And even if we had, the needs of the next game are going to be different and need to affect the workflow, it goes hand in hand.
And I think it's important to have this willingness to experiment with your process, to always be striving to improve.
But you do want to be methodical about that, have calculated experiments in how you approach it.
If you have a consistent set of goals in mind that you're working incrementally towards, you will tend to achieve them over time.
There'll be some dead ends and missteps along the way, but you're going to improve if you choose a vector and work along it.
Sometimes we can get into workflow ideas and tool set changes which seem interesting but if they don't have the long-term goals in mind we can end up with something that's different but not necessarily better. And if you truly misunderstand what worked well about a workflow before you start making changes to it, you can end up with something worse off than how you began. So yeah, once upon a time we worked on a game called Skyrim and then we transitioned to Fallout 4.
So we think about the overall world direction, the world building, the sweeping fantasy landscapes and the setting of a game like Skyrim are inherently different in several ways than the dense compound mixed-use urban environment of Boston and the surrounding commonwealth.
So as we start thinking about the world and what needs to be in it, we think about where players are going to go, where are they going to meet people, adventure.
What sorts of environments do we need just to create the texture of the world and do a good representation of the location we have chosen?
And as this vision of the world begins to coalesce and take shape, we can take one of our first really concrete steps forward in production, which is defining the kits that we need to create in order to support building all of these locations.
So that's what we did.
We kind of went through all the locations and came up with the kits that we thought we'd have to build.
And we apply our conventional logic to this, which is to analyze which environments are going to be built with these kits, how robust, how important, how extensive are they going to be, how much time do we have in the schedule, and then we start building out, you know, when each kit's gonna be available to work with.
Now it's important to understand that every kit has a certain amount of overhead.
It has baggage, and it takes a lot of time.
Kits are a commitment.
You know, if we have 10 kits that are of a certain complexity and five kits that are twice as complex, it takes longer to create the 10 less complex kits because you have to figure out how is the kit going to work, what pieces do we need to establish, getting people up to speed on how the kit is going to function, reacting to requests, feedback, bugs, and the ongoing visual and cosmetic ownership and iteration of the kit itself.
And so, knowing this and looking at the long list of kits we need at the beginning of Fallout 4 is about when our allergies kick in.
we're really cognizant of time at Bethesda Game Studios.
Even under the best of circumstances, our games take years to make.
small inefficiencies, redundancies in our workflow.
These time sinks can really set us back.
And critically what they do is they prevent us from getting to a point where the game is playable.
The faster we can get to playable, the better, because we strongly believe that the first time a piece of content is playable is really the first time you can meaningfully critique it and decide how to iterate.
And having all these kits we had to build was going to delay us getting to that first playable point with all of the different environments that required them.
So it's through this lens that we returned to that list of kits and we looked at them differently.
And what we realized was for the most part this list was defined by the usage of the space before the apocalypse.
And several of these kits had something in common, which was that they followed similar construction techniques in terms of how they would have been built in the real world.
Foundations, supports, pillars, you know, plaster, brick, the finishes and the building materials might have changed, but the general function and the general proportion of the spaces more or less were the same.
We try to think of kits as solutions to specific problems and to make sure that every kit justifies its own existence.
Again, we're looking for redundancies and ways to iron these things out.
And what we realize is that all of these kits were solving a similar problem in terms of the type of construction method used to build them.
And we could consolidate them down into one larger, much more robust kit that we'd simply call the building kit.
And the building kit is gonna be the primary example we use to analyze today.
So like Joel said, the building kit was used to build a lot of spaces for fallout 4. But this had its roots all the way back in fallout 3 with the office kit by Robert Wozniewski. This was a sort of standard kit, everything snapped together on a grid. But it was called the office kit for a reason. If you wanted to build an attic or a basement, you either had to use a completely different kit or you just couldn't do it because it didn't exist.
So we wanted to take all those different construction types and unify it. So we could just start by building one, level designers can keep working, and then we can swap it out later as those come online. And this had a lot of our standard stuff that we have in all the kits. Small halls, medium halls, large halls, so on. But the way we built the piece this time was different.
Previously when we built a piece you would Frankenstein it together in max. But if you needed to update a door frame you would have to go through each one of those and update it.
So it was a ton of redundant work. So you would export out a piece and here's your piece. It's one big package deal. There it is.
but this time around we assemble the pieces in the editor and it ends up looking like this. So it's composed of all these component parts of the floor, the wall and the ceiling. So your actual kit ends up looking like this. Instead of just building all those possibilities, you're spending time on visual variants and the actual capabilities of the kit.
This lets us do a lot more things with destruction. We can just swap out parts of it for a different kit entirely. Layouts can do whatever. And if we want to build a new piece, we can just do that. In the old work flow, if I had a corner piece and I have a door on the left and a window on the right, that's a piece. What if it's a door on the left and a double door on the right, another piece? Every time you add functionality to the kit, you would have more and more pieces and you would easily have hundreds if not thousands of pieces. But now you can just swap it out.
And that's the main thing we've done, is we've taken the kit and broken it apart.
And that's given us a lot more flexibility.
I want to take a few minutes to talk about how this shift to a more granular style of kit affected workflow for level design.
Now the notion of going more granular isn't something that may seem really, you know, earth-shaking or, you know, inventive to an outside observer, but it had a lot of repercussions on how we built.
And it's something that we had experimented with at small scales before, but this time we kind of went all in.
You know, and the main benefit, the obvious benefit, is it gives us a lot more flexibility.
But there are reasons in terms of, you know, tech and logistics and workflow that we hadn't gone in this deep with it before.
and the one we'll focus on right now is the workflow, because working this way is inherently more time consuming.
So if you take a really basic blocked in space, like this simple room with a couple of hallway stems, using traditional sort of clamshell style of kit, we can create this space in 20 clicks, right?
20 objects dragged into the editor.
But if you take this very primitive layout and you explode it into the more granular sub-parts that Nate was talking about, now the object count balloons up to 123 objects from the original 20.
So this is one of the moments where we have to think about how our existing workflow has made us strong at what we do, but what we can do to make sure we expose ourselves to the power of the new workflow that we want to embrace.
Nate mentioned this in passing, but how we did this was with an editor tool called a pack-in, which is essentially a prefab.
So we could use the more granular pieces and collect them together on the editor side into a prefab.
And those prefabs were named with the naming conventions we were used to in the traditional style of kit, organized into different parts of the editor, and we could quickly rough out spaces in our existing workflow which we were comfortable with.
And then once we knew that the layout wasn't going to fundamentally change, and we had iterated and agreed on that, we could then, as needed, explode out the pieces into the subcomponent parts, and do visible variations and one-offs as needed.
This all kind of speaks to the priority that we put on things being ready and being ready at a certain time.
Kits are absolutely fundamental to the way level designers work at Bethesda.
We literally don't have primitive geometry tools in the editor. It's the only way we're able to work.
And because of this, we front load these into the art schedule.
We work with production and environment art to make sure that they're some of the first things made in the game.
Now, level design doesn't mind that they're of grey box quality early on, as long as we have the proportions and naming conventions that we need to work with.
They're going to visually get better and better throughout the game.
The main thing is that early on we know that those kit pieces are pretty solid, that they're trustworthy.
This gets a little bit into how we schedule and how we think about that.
Like anyone else who's thinking about schedules, we try and be aware of our dependencies, where and when and how we depend on other members of the studio to do work, but we also want to make sure that our creative process is built in a way that flows in the same direction.
So our production reality and our ideal creative process aren't working against each other, which can so often be the case.
This is actually something that I've talked about at GDC prior in 2014. Again, we'll make this talk available to everybody at the end. But all you really need to know about this for right now is that levels are built in a five pass system.
And each one of those passes is tailor-made based on our expectations of dependencies on where the game is at a certain point in the project, as well as how we think we can be most effective in iterating the level creatively.
And so in the context of this conversation, Pass 1 is where we're focused on layout, which means this is the first point at which our core kit elements need to be usable.
But probably the more important subtlety to this is in the subsequent passes, we also need to make sure that the layout we did in pass one is reliable. That we're not having to go back to the drawing board and redo the first pass every time we do a subsequent pass because we're just going to hemorrhage time and fall behind if we get into that trap over and over again.
And when you're in sync with the rest of your studio about your priorities in this kind of workflow, you're able to rough spaces out very, very early on.
This is a screenshot from Concord Museum of Freedom, Fallout 4.
And this comes, you know, this is in 2012, this is at a point where Nate and I have been working on the building kit, we're in agreement about the basic functionality, the pieces that we're going to represent, even though it's pretty rudimentary.
And if you compare this to the shipping version of the space, you can see the similarity immediately.
And that's because Nate and I were aligned in what mattered to us most.
And probably, you know, the nicest thing about it is we were out of each other's hair.
Like, once we knew how those pieces were going to work, I was able to do, you know, level design type of things and focus on all of those elements, and Nate could focus on the artistic side of things, and we didn't really have to conflict with each other in the later stages, and the years of time that passed between first and final.
And so I find myself talking about priority a lot, like when thinking about this workflow and preparing this talk for today.
And those priorities don't just apply to sort of the meta scale of workflow in our scheduling, but also to the individual elements of the kit. If we're very general about it, we can sort of lump all the elements of a kit into one of three categories. You have your low use count hero pieces, your set piece objects, which only happen once in a while.
you have utilitarian core pieces, your walls, floors, ceilings, stairwells, all the things you need to create a basic layout to establish flow and blocking. And then you have your variant pieces, cosmetic variants, alternates, pieces which are maybe part of the core kit but they're used less frequently or special requests to accommodate needs of layout.
And again, we're cognizant of time, so we want to be cognizant about when and how we build the kits and these different elements take priority.
Going back to the 2013 talk again briefly, one of the points we made then was that the hero piece is numerically the least important piece of art we're going to build. Now there's this thing about set piece art. If you're a producer, they're expensive to build. You kind of want to get them out of the way early. If you're an artist, they're better looking.
They're more interesting to work on. And if you're a level designer, they can sometimes feel like the thing which is going to make a moment work, which is going to make the level sing, which incidentally I think is kind of a yellow flag in the strength of the level.
The thing about this hero piece is that these all kind of combine and make them seductive.
They feel like the most important piece of art and sometimes get front loaded in the schedule.
And we argue that you should do the opposite, that they are the least important thing.
Your humble wall, your humble doorway, these things you're going to see dozens of times and they need to be rock solid and bulletproof and they need to be that early on.
You know, there's a stigma attached to words like generic, to words like repetitive.
And I get it.
But when we're talking about this kind of workflow, I think it's short-sighted to get hung up on this, to get fixated, because it blinds us to the potential. Our generic pieces are by their nature versatile. Set pieces aren't. They're by their nature built to solve a specific problem with very little hope of being reused ever again. So the flexible pieces you have in the hands of the right level designer become problem solvers. They become the tool that you can use in many situations. They are the unsung heroes of level design.
I've taken a scene like this.
This is from the Saugus Ironworks, and this is sort of the penultimate moment, the scene at the end of a quest and a dungeon space.
Now the level designer here, Drew, would have loved to have a bunch of custom art to sell this moment.
You know, he cares very much about how this shot is framed and how the player enters a space.
But this is actually, you know, a space where you're not seeing a bunch of custom art.
This is a whole lot of generic art working together in concert with good composition, lighting, and staging to create a moment which has all the trappings of a set piece without actually being a set piece.
And the important thing here isn't just that you can do this, but that it spares the time.
The time that we didn't have to spend building custom art for this is time we could use somewhere else on something else that could have been more broadly applicable to the game as a whole.
So I think you saw this coming, but I'm inverting the priority.
I think the utilitarian core needs to happen early and fast.
The variants are important, too.
And the hero kit is the least important thing.
And we actually push those way to the end of the schedule.
And this mentality is all about getting out of the way of progress, making sure that you're not blocking anybody else's ability to do meaningful work.
And I think if you're the artist, it behooves you to minimize the roadblocks, to not be that bottleneck.
For one, it's going to get you in a position of having real examples of how your art is being used as quickly as possible.
And you're not relying on your own guesses and assumptions in the test space about how it's going to be used.
It also allows you the most time to iterate on the visuals of the kit.
In this particular point, I think some will find counterintuitive because I think there's a tendency with some artists to want to figure everything out about how the art is going to look, how it's going to work, at every nut and bolt in place, before giving it away for somebody else to work with.
But the problem here is that then you become the bottleneck.
You're holding up work.
And that pressure to figure it out and get moving can force you into making decisions you might rather have more time to think about.
But if you just focus on the proportions and the functionality, which is all that level design really needs to move forward, you can then get out of the way, let them start working, and have basically the duration of the project to focus on the cosmetic aspects of the kit.
Now for level designers this can also be a shift in thinking because you're going to have to use place holders. You're not going to have your fancy hero piece early on. I actually don't think this is a big problem. It's actually useful exercise because level designers then are incumbent upon us to prove the actual need. Take for example the Boston public library. Like many of the spaces in downtown Boston, it's a beautiful building filled with beautiful things. You can spend an afternoon in this place filling a notebook with pieces of art that you believe you would need to make the space.
But knowing the way we work, the level designer here, Darl, he didn't have that luxury.
He needed to make progress.
He needed to get started on his iterative passes.
So he's using generic pieces.
He's recreating the key rooms, the areas that we feel are important to the space.
And while that's happening, a couple of other things are happening.
The game is progressing.
The kits are getting more robust, their functionality, their visuals.
Those placeholders are becoming a little bit more cemented into the layout.
And we're finding the places where the placeholders work and where they don't.
We're also finding more about the gameplay of the space as Darrell iterates.
We have guesses and assumptions, but until we can actually play, they're just guesses and assumptions.
And what we realized by the time we were ready to do any custom art was that this space, this reading room, was the most important room in the library.
What's more is we couldn't recreate this room with placeholders.
The barrel vault ceiling that you see at the top and those big reading pane windows, there's nothing in the kit that could handle that.
And those are the custom pieces that we made for the Boston Public Library.
The thing about this again is if Darrel had sat down and made a list of the custom set pieces he thought he wanted and prioritized them and we made them at the beginning, these might not have been at the top of that list. We would have possibly built art which wouldn't have been showcased well, may not have even been necessary, and what's worse is we might actually have gotten the time to build these pieces thinking they were less important than they really were.
So visual variety is one of the big goals of the building kit.
And one of the big ways we did that is all the architectural variants.
So with this setup, we could take any room in any dungeon and just swap it out.
Like I can start at wallpaper, become the deco kit.
It could be a concrete basement.
I can make it into an attic.
wood paneling, brick factory. This ends up being a ton of pieces. And just one of those architecture types is you can see it there. But because all the logic is the same across all these kits, I was able to bring new versions of this online in as little as two weeks. You spend most of the time doing just destruction and little cosmetic things. You don't really have to worry about the logic. It's there. So that really makes it a lot easier.
This lets us do a lot of things we could never do before like this where in the back there's brick walls, goes down to this concrete basement, there's these bare wood platforms suspended there and I can swap out any one of those elements because it's all broken apart. And we can do things like this because the walls, floors and ceilings are all separate. They can just open up into a larger space. That's not a custom transition. That's just what the level designer did for this particular area.
or things like this where it's stacking vertically. There's the deco kit on the bottom. It goes to the wood panel kit above that. Previously when we did vertically stacking kits, the logic just gets insane and it's all the naming conventions don't make any sense. People get confused and just don't do it.
But now you can just put stuff on top of each other and it's easy. But you can still do really boring stuff like this.
But even this one we couldn't do because it's actually wood panel walls in the back, but the floor is the deco kit. That would have been a whole new export before. Now I can just swap it out.
or you can just blow the whole floor out. The walls are just doing their own thing and these little damaged platforms can be moved around so every hole can look different. In this case it forms this ramp that you can walk up. The level designer is deciding what to do. That hole could even be 100 yards long. I didn't go on a max and make this 100 yard hole piece that would get used once. But the level designer did this and it works out really well.
and we can do things like this where the wall is angled at 45 degrees or can go on these gentle curves. When we did this in Skyrim, there was a normal kit behind those walls and it was all this wasted space you couldn't use. But now the walls can just do this. Material swaps are something else that we did.
And this isn't an architecture change. It's just the textures.
And these don't take very much time and it lets you get a lot of visual variety. So I can take that same wallpaper room instead of changing the architecture, I can make it crazy 50s style wallpaper and this boring blue one. Another interesting pattern, old people wallpaper, just change the green stripe to a red stripe, intricate green, deep red, whatever. Most of those are made in two days. We can now go and take every single room in a space and make it feel unique.
Because the walls, floors and ceilings are all separate, those can all be material swapped independently. Not every kit is the building kit, though.
And one of the first things we ask when we're building a kit is what new functionality does it provide? Is it doing something new? Sometimes the answer is, well, no, let's just make another building kit. But that wasn't always the case. And one of those is the industrial kit. And we wanted these big blocky concrete things with these pipes rising up and a lot of intricate detail work. It's definitely not the building kit.
And this ended up looking like this.
So the way this works is there's these big blocks that form the core and just like mass out the shape of the building. But then there's this intricate framework kit that has frames of every size and every one of those sizes has variants that have X cross frames, V cross frames, A cross frames. There's a silo set up where there's a bunch of different widths and these are vertically stackable so we can make it as tall as we want.
There's a bunch of different pipe kits. Some are big enough you can walk through. Others are just tiny details.
Then there's this free room kit that we can put on top of those concrete blocks and you can go inside of these, take cover, we can put machines in there. Ends up looking like this. Everything going on here is because the level designer wanted it to be that way. I'm not dictating this as the artist. That catwalk is there for a reason. It will look different every time. Here you can take cover behind those pipes, that room is tucked away in the back. This space has a totally different feel with this spindly little pipe moving through it and all the frames and materials swap to red.
Or we can just take parts of that kit and mix it with other kits. Here it's being used with a steam tunnel kit. There's a lot of versatility there. The utility kit is another kit that we built. And this was all about this intricate pipe work. And it snaps together in a certain way and there's a lot of baked in detail. And the hallway kit, the left side is different from the right side and these can move independently of one another. And we also have these long curving pieces to get away from that rigid nature of the kit. And that ends up feeling like this.
So using this kit, we can have a really simple hallway like this and we just throw a couple of trash piles on the ground and it's pretty much done. We don't need to do this big set dressing pass to make this look interesting. But that kit kind of wasn't worth the time. All we actually cared about was the pipes. Cosmetically and architecturally, everything going on with the walls was pretty much the building kit.
And in some cases, that's even what we did. Here it's utility kit on the right, building kit on the left and some of the pipes you see are a separate pipe kit.
but it was a really nice kit to have. It's what we call a glue kit because we're never going to build a space where it's all utility kit and just this giant building full of pipes. Instead we just use it to spice things up a little bit and it was really useful to have. The steam tunnel kit is another kit that we built. And this is a lot like the ratway kit from Skyrim where all these things are jammed together organically so we don't actually need that many pieces. But the main difference is that the floor is broken off and it's not baked in. So you can have a really narrow space like this or make it taller, make it taller.
So the level designers can really play with the verticality. You can have these raised up areas on the side and drop down in the middle. The walls in the back can be angled however we want. You can blow a hole through with the cinder blocks and then bring in the catwalks. Or I could just take those cinder blocks and put them up against the walls as a decorative element and bring in industrial framing on the walls and have a totally different feel. It's really flexible.
Another kit that was built by one of our artists, Claire Struthers, for downtown is the Deco Kit.
And this was built with a lot of the principles of the other kits, where there's all these different parts, little trim kits, the lobby kit, the foundation so it can mix with the street.
And one of the main things that this kit let us do is these interior-exterior areas, where you could just move right through it.
Previously, this kind of thing would have been a load.
You'd go up to a door, activate it, walk around for a little bit, activate it again, and load back out.
Now you can just move right through it.
And this kit was really flexible and let us build buildings of all sorts of shapes, which works really well with the organic nature of Boston streets.
Yeah, and I do want to talk about Boston for a little bit, because for one, there's a tendency talking about this kind of workflow in level design to focus on intimate spaces, interiors, combat arenas, these sorts of things.
But exteriors can be built modular as well.
And in fact, Boston downtown was the most ambitious thing we've ever attempted on the level design scale at Bethesda.
Huge and interlocking.
And in order to start talking about and understanding how we approach Boston, we have to go all the way back to Washington D.C. in Fallout 3.
Now, when it came to figuring out how to represent DC's downtown, for a number of reasons, we had decided to block it off.
So all the downtown neighborhoods were these little sort of cloistered areas, these walled gardens that you would load into, which were separate from the open world of the game.
They all kind of had this consistent look and feel, where you can see the buildings and the big marble piles on the edges.
They were walls.
They were literally walls.
And that the meaningful gameplay happens in the negative space in the interior, in the ground level layout.
Now this made getting around downtown really complicated.
This is a map that users made to help them understand how to get from place to place.
And I think the complexity of this map is indicative of some underlying issues with the implementation that we chose.
So going into Fallout 4 and figuring out how we wanted to represent Boston, it was important to us that it was part of the open world and felt like the beating heart of the Commonwealth.
We would have long sight lines and clear lines of view.
We'd have avenues and streets which were actually useful for navigating the city, as you would as a pedestrian.
We wanted neighborhoods which tapered off naturally into the wilderness.
And when we start thinking about how we're going to represent a space like this, we can get into conversations about how accurate must it be.
Are we going to try and recreate the city street for street, building for building, brick for brick?
It's sort of the can I visit my college dorm mentality of city design.
And we knew that was never our priority.
We were always more focused on authenticity.
Can we understand what makes Boston special and distill it down into a core form and represent the fallout version of the city in a way that would feel familiar and sincere to Bostoners, but also like a real, real location with a real internal consistency and a sense of place to those who have no familiarity with the city whatsoever.
So, with this mentality, we approach the actual process of building the city.
And where we begin is with the coastline.
One of the first things we create for any of our games is a rough pass of the world map.
Now, Boston is defined by water.
The Charles River, Boston Harbor, the Atlantic Ocean, these give us hard boundaries, hard edges to most of the areas of the city we're going to recreate.
We can take this and compare it against the scope and scale of the game map that we're going to build and now we know the square footage we're working with.
Now we know how much we have to condense downtown.
And then we can start focusing on the skyline.
The skyline of Boston is important.
It's not as iconic as the skyline of Shanghai or Paris or London, but it's a really useful skyline because it's asymmetrical and it provides an orienting element for players.
And in order to recreate that orienting element, we have to focus on the anchor buildings that define the skyline and get their relative positioning correct.
So this is another old screenshot of the game in the early stages.
Raf, one of our environment artists, he went through and used really temp buildings to rough out all of downtown.
And what we were focused on here is roof heights and density.
And specifically on those anchors. The cluster of skyscrapers in the financial district, which is on the east end of the city and cuts off into the harbor.
The sort of solitary, you know, nature of the Hancock Tower and Back Bay.
And then Diamond City or Fenway Park kind of abutting at the west end of the city.
And we did end up sticking to this original past pretty faithfully all the way into the finished game.
We were able to add a few more anchors, a few more landmarks for players to fixate on.
And this is something that players familiar with Boston were able to pick up on from even our earliest trailer.
People were able to take the background shot and make accurate guesses about some of the buildings we were representing and the position of the camera.
So with the skyline ready to go, we start thinking about the thoroughfares, the streets, what is the skeleton, what are the bones of the city. And when you're representing any city space, you don't have to recreate the city street for street in order to get the feeling of navigating the city correct. If we're focused on creating, say, Manhattan, you're going to be thinking about long blocks, streets, avenues. It's a city planner's city. This is not Boston. Boston was created by filling in marshland and paving cow paths.
a notoriously nasty city to drive in, but a really wonderful pedestrian city. So that's how we experienced Boston. We went to Boston. We spent time on the streets, just moving around the city and just kind of experiencing it and existing there and getting a sense for what are the streets we relied on for navigation?
What is our mental map of the city?
What intersections matter to us?
What points of interest?
Where are they in relative positioning to each other?
And then with this sort of sense of priority about what we're going to represent, we can then go back to our condensed version of Boston and the world map and lay these streets out.
And we actually did lay all of our major streets out.
We knew what they were going to be named and how they correlated.
And we stuck with these layouts with very little change all the way to ship.
Once you have streets, you can start thinking more specifically about neighborhoods.
Like any major urban center, Boston has distinct neighborhoods with their own culture, their own history, their own architectural quirks.
And when we're starting to think about the neighborhoods that we're gonna represent and try and focus on, we can start thinking about ownership.
As much as we can, we try to make sure we assign folks to areas that they're gonna own from concept to completion.
And so each neighborhood was split off as its own chunk of work that specific designer and artist would work together on, and they'd be responsible.
The onus was on them to understand that neighborhood and how to bring it to life and how to do it, how to do right by it.
So with all of this, we're ready to start creating, we're ready to start iterating.
So this is all kind of pre-production, this is all ideology and getting ready to attack the city.
Now I mentioned it before, but we have a process for this.
You know, I talked about it a previous year, and it's this iterative process that we go through when we build things out.
It's worked really well for level design, and it only made sense to apply this to downtown.
You know, we have the neighborhoods, we would treat these as super levels, and we would just give them more time and attention, but put them through the process that worked for us.
It didn't work.
It didn't take long to realize that building this view was gonna be really hard.
We knew it was gonna be hard.
We knew it wasn't something we had attempted before and there were gonna be wolves in the woods and unexpected problems.
There were a lot of unexpected problems.
It seemed at times like everything we knew about level design didn't apply.
Our best practices in pacing, in setting up encounters, how our AI detection worked, how we optimized, how well does the editor run, how do we organize, how do we work together, nothing was going as planned.
And all these hurdles were adding up and taking a lot of time from us.
There was more revision, rethinking, and reworking creating Boston than with anything else.
And it was taxing the schedule of metrics and best practices that we had in place.
But while all of this is going on and all of this is going wrong, there's something else true, which is that we're building the city modular in a way that we also have never done before.
Now, it's not like we've never built a city space modular before.
For example, in Skyrim, Whiterun is built with a kit.
But it's built with the Whiterun kit.
It's only used to build this city, and the only person using the kit is the same artist building the pieces and using them to create the city.
In Fallout 3, the level designers were using building kits to create those downtown neighborhoods, but those kits were pretty chunky.
And that's just kind of where we were in terms of the state of art for us as a studio at the time.
But that was OK, because even though we didn't have a lot of flexibility to create different shapes to accommodate our layout goals.
Remember how I mentioned before that they were walled gardens?
That made it really easy to adapt.
If we had a downtown space in DC, and we wanted to try something else with it, we could just make the change to the layout and just move the walls of the garden to accommodate.
It was really no big deal.
But in Fallout 4, everything is connected.
Everything's part of the open world.
We cannot make a change to one neighborhood without affecting the neighborhood next to it, and potentially the one next to that, and creating a ripple effect that undermined work throughout the city.
But like I mentioned, we were building the city far more modular than we ever had before.
We were taking our lessons from interior kits over the years, and applying them to how we built downtown.
The pieces were far more granular, which gave us a couple of freedoms.
One, when there was so much work to do, we had more people able to do the work.
Level designers and artists both had a tremendous amount of power to react to issues.
If we needed to change the shape of a building, we could do that.
We could help an artist, an artist could help us, and we could make changes without having to make big custom pieces and get turned around from the art schedule out of Max Lottie Dott.
And also it let us respect things like the quirky street layouts of Boston.
We didn't have to conform streets to the buildings.
We could conform the buildings to the streets.
And this meant that when we had a problem that required us to make a change, we had the ability to do that.
We weren't locked in to bad decisions we had inadvertently made early on with pieces that were far too static to be flexible to iterate with.
So while working module this way, you know, it had its own difficulties and problems, for the most part, it did decrease the pain and offset all the problems we were running with Boston and let us maintain a focus on the quality of the city without having to make a bunch of compromises in how we approached it because of all the hurdles we ran into. Kind of saved our bacon.
So now you're going to get the grab bag. This is the stuff that didn't quite fit into the other categories but that we wanted to cover.
One of those is the plug and socket system. This is how we transition between kits. Previously when we transitioned from industrial to utility, that was a piece we made, that was it. If we needed to go to a different kit, we would make a new piece. Not very flexible. So the way we solved it this time is on the top we have these sockets and that's just a hole of a set size and then the plugs are door frames and other things.
So as long as the holes match, we then put the plug in there and it works. I don't care what kit is on the other side. It's one of those things that was really, really obvious in retrospect, but we didn't actually do it that way before, so it worked out really well. And the way destruction works in kits is worth going into also. And there's a big problem with destruction in kits in that it's really repetitive. You just have this piece or handful of pieces that get used over and over and it looks the same every time.
So our solution was to have all these different little pieces that could get used together so then it can look different every time. So for the wall holes in the building kit, there's 11 versions of the hole. But that's only actually half the hole. The other side can be just a different variant or a different kit entirely. So if it looks too much like one next to it, I can just start swapping it, swapping it, swapping it, just swap the one on the other side. So I can have this line of holes, swap them all.
And again, the other one is being swapped independently, so there's a lot more potential versions there, and it's really flexible. This lets us do things like this, where I have this hallway, it's the concrete kit, material swapped to look like cinder blocks, and I can just Kool-Aid man through wherever I want. I can even go to a different kit. Here I'm going from building kit to utility kit, back to the building kit.
The way floors work is a little bit different, though.
and it's easier to just see it. And at the bottom you can have these square pieces and they'll sock it in with the normal kit logic. But then there's all these free floating platforms.
And these exist in all the versions of the building kit.
And this lets us do things like this. Where we have these really organic hole shapes. And that's not a particular hole piece. It's just whatever the level designer decided to do.
And there's this ramp you can walk down. Or they can blow that whole floor out. And then those platforms can be sagged independently so there's a more organic feel to it.
And we can do things like this where the whole floor is just caving in. And in this case we didn't build a church basement kit. It's just the building kit on the bottom. And then we spend time making unique architecture on the top and there's not a lot of wasted work. Dynamic destruction is a little bit different, though. And this is for per piece destruction where you can shoot out individual planks and it works with kits and they'll simulate. So you can have things like this where you have a shack and you start shooting out individual planks or you take a grenade.
chuck it in there. Then a whole bunch of planks go flying out.
And again, this works with kits. So we use this for railings and other things like that. Decals and greebles are another thing that are really obvious but extremely useful. So you can have a really boring wall like this and just throw a bunch of rust stains and cracks and greebles are like fans and vents and things like that. And this isn't baked into the kit. These are all just placed independently. So if I want to take that fan and its rust stain, move it over a couple of feet, you can just do that.
Now every wall can look different and there's a lot more opportunities for environmental storytelling.
Layers are another thing that are really obvious but save a ton of time. Because sometimes you load into a scene and it looks like this. I don't even know what's going on. But you set up layers and you start freezing things, hiding them, extremely useful. That's not even the worst example. If you go downtown, that list is just really long.
The mouse wheel swap is something else that we made.
And previously, if we wanted to swap out a piece, you would click on a piece, bring up a menu, and then pick which one you want, hit OK.
Maybe that's the piece you want.
Maybe it's not.
Really, really slow.
But this looks like this, because you can just click and scroll the mouse wheel.
It's great for finding variance.
And like that wall hole example I showed earlier, I can just do that in a matter of seconds.
You can go through a whole dungeon in just a couple minutes.
Big time saver.
And this also works with material swaps.
helper markers are something we talked about in 2013. But we were being kind of sneaky at the time because we had real kits that were using it but we couldn't show it so I had to make a fake kit to show. So this is how it looks in practice.
And there's all these editor only markers to show things like where the doors are, how the walls line up and it snaps together. Markers for the ceiling so I don't have to flip my camera upside down just to click on it. They're really useful.
but the modular workflow is useful for more than just architecture. You can also use it for props and things like that. And one of those things that we built is the machine kit. And there's this large library of parts, and fins and tanks and pipes. And an LD can just block out an area and say, I want a machine here. And then an artist can come and do that.
One of our concept artists, John Gravato, he was really heavily involved in doing this. And this was a great use of his time because it was really towards the end of the project. Don't exactly need a lot of concept art then.
And this ended up looking like this. There's all these component parts and those are the potential material swaps on the top. And we can build things like this. Which are composed of all these tiny little parts. So you can make all kinds of different things. Even vehicles and arcade cabinets. It's really versatile. And you can also use it with other existing art like this truck.
And in a normal workflow, each one of those things could have been a custom asset.
Someone goes into ZBrush for two weeks, you get a custom texture, looks great.
That's awesome.
But that takes a long time.
And using this setup, John was able to make 400 machines.
We wouldn't have been able to do that otherwise.
So think about how you can use the modular workflow for more than just kits.
OK, so I'm going to wind us around into the home stretch.
there's a lot of ground to cover in the talk today. And we kind of squeezed in everything that we thought we'd really have time for. But the talk has bounced around a lot just because we wanted to fit it all in. And honestly, Nate, myself, many of our colleagues at Bethesda, we could sit and talk to you for another hour or two or the rest of the day about the ups and the downs and nuances of this work flow.
And it is a workflow that has ups and downs.
It's not a shortcut.
It's not a solution for all scenarios.
And with this and any other method or approach, whether it's level design or production or best coding practices, it's more important that you understand the, more important than understanding the workflow, that you understand the priorities that you have as a team.
and the part is that your game has.
Because any method like this, you should understand before adopting because it's never one size fits all.
And I strongly believe that when it comes to process and technique, you know, it's the goals of the game, the ambitions that you have as a team that should define the process by which it is made, and never the other way around.
Thanks very much.
We must have been nervous because we have some time. If anybody has questions, we have microphones set up here. You can queue up and we'll take a few. You in the middle? I was wondering at what point in the design process do you factor in play tester feedback regarding design of levels or aesthetics?
So we have those various iterative stages, and all those stages can be independently verified.
So what we'll do is we have a few different processes.
We will do peer review.
So people will look at them together and offer feedback.
We will do it within the team.
We can do it with our QA department.
We'll occasionally do sort of big batches of review, like we call it Level Designer Summer Camp.
where we all get together and we all look at every space in the game and come up with a bunch of feedback and we structure the feedback based around each of the iterative passes so that we kind of know what we're looking for and how we can improve.
Cool, thanks.
Over here on the right.
Hello.
My question is, what was the thought process behind choosing which pieces to give to the player from the kit that you already had?
You mean in terms of the workshop system?
Yeah.
Workshop was kind of a different system, so it was just whatever we thought would be a useful piece for them to have without it being too overwhelming.
Like, we didn't want those kits to be like the building kit where there's 500 pieces.
So we tried to pare it down a bit more.
Yeah, the functionality of the Workshop kits is slightly different from the ones that we used.
But I think it's fair to say that over time, we started to, like, the differences between Workshop kits and our regular kits, it actually got more similar over time than they did get different.
Yeah.
Thanks.
Thanks.
Question over here.
Yes.
Now, you mentioned that your process changed between Skyrim and Fallout 4.
Now, given the increased granularity and difficulty regarding recreating Boston in Fallout 4, how has the collaboration between artists and level designers evolved if it did?
Well, one of the big things that we have is there's an art review process. Since the pieces are so granular, you can pretty much do whatever you want with them. So we make sure to check everything and give some notes, which they may or may not agree with, but it's a bit of a back and forth and it's gotten more official, I guess, as it's gone on.
Yeah, the main thing is that we have slightly different sensibilities in terms of what, you know, how important is it that something looks good and how important is it that something works good. And so by making sure that we're kind of both involved in creating the kit but then both involved in kind of vetting and signing off on the spaces that we create with them, we can kind of establish parity and sort of keep the peace between the departments.
All right. Thank you very much.
Thank you. In the middle again.
Hey guys. First thing, great talk.
And then secondly, my question has to do with performance and metrics.
How did that going more modular affect those aspects of the game?
It screwed it up.
Our rendering programmers were not happy with us when we made this decision.
Did they hard cap you?
No, one of the main ways we solved that is we ended up putting in an object combination system. So even though it was broken apart into all these different pieces, it would get chunked in and then visibility after the fact. So it didn't really matter in the end, just when we were building it and running it in the editor.
Yeah, but there was a lot of tech that had to be kind of reconsidered to make this workflow possible.
Yeah, I sort of have the same question, I guess a little more depth.
Okay.
Yeah, how do you, does basically just everything get sort of baked together at the final game?
there is a baking process. So static collections are one way that we can control essentially baking. We can select a group of objects and say, yep, this is a static collection now. And those get handled a little differently in terms of how they render and how they occlude. We also have a baking process which precalculates visibility from various directions in the kit and then we use that visibility to compute quicker on the fly at run time.
I guess also, do this do any instancing? How much can get baked? If you have a level, you know, the church scene, you have a lot of duplicated parts, but then the upper level seems to be pretty sculpted, I guess. We're not actually instancing. It's baked out as a large chunk. And the only things that are not baked out are dynamic objects like a tin can or something like that wouldn't get combined. Okay. Thank you.
So you mentioned you had a review process for how, when you have conflicts between, I know we do environment art modularly as well, and we had a lot of fights, like unit abuse, or like, are you using this correctly, you're not using the unit you're supposed to, do you solve that by like a creative director stepping in, saying what is more important, or how do you do that usually?
I mean, we kind of have ground rules. We generally, and some of this just comes with working together for over a decade.
Generally speaking, when we fight, we already know who's going to win. Based on the context. At the end of the day, one side does have to win. And it's kind of case by case. It's not too often. I guess it happens once in a while where a third party has to step in and decide. Not often though. I think the main thing is art has to be kind of okay that things will happen. I think that's the slowest part of adoption in the process.
level designers are going to be artists. With this you're going to make decisions. And the important thing is that there's a two-way street. One of our environment artists is a practicing architect and came back in the game development. And some of the stuff I do drives him up the wall.
he'll tell me why and at the end of the day, I hear what you're saying, but we can't accommodate or he'll end up inputting something better than the process. So I guess don't be jerks, right? Just talk. And realize you're going to win something, you're going to lose something. The game is what matters, not individual egos. Did those reviews help in mitigating bigger fights down the line? If you check in once in a while, does that help rather than?
that's something new. I think it helped a lot. One of the other things that came from the reviews is the level designer sort of got how things would work and it would get better and better over time. So then the notes would just get shorter and shorter.
Yeah, and for instance, like with the review process that Nate's mentioning, like really that was Nate, like for the most, maybe entirely, right?
Going through and looking at all the spaces, providing notes, but like the level designer and Nate, like both knew that the level designer had the prerogative to ignore everything, right?
Usually they didn't because there was good feedback, but...
Nate had a good barometer for what was misused that he didn't like versus what was a bug.
And a bug is as a bug.
This is going to cause a problem because you have used it incorrectly.
Versus, I don't like what you're doing, and here's a suggestion for how to do it better.
Thanks a lot.
Over here.
Yeah, great talk.
So usually when you're building a large game, You have to use kits from certain regions and areas so you don't mix and match tons of different texture maps and everything. You seem to be mixing a lot of them. Was everything baked in at the end? Or was that some of the optimization issues that you guys ran into?
Without extending the question too much, what do you mean by everything? Everything is baked in.
Say texture maps.
For instance, an example, in something like Lord of the Rings Online, you had an orc kit, and you could mix that with maybe another race, but you can't mix six kits together because you're going to pull in a whole bunch of different kind of texture pages.
So you're making more of a technical point than like a world-building and fiction point.
Yeah, yeah, yeah.
Technical point, yeah.
you're only pulling in the parts you're actually using since it's all broken apart. So like in that steam tunnel, I bring in the industrial catwalks and that's it. It's only that one texture. So that helped. But it's still a lot. But we have spaces that have like seven, eight kits in it. Was that a two more questions or no more? Two minutes. All right. Right here.
When building the game, so much of the game as a placeholder initially, do you run into difficulty with people understanding the final vision or people feeling that like working in a vacuum or does concept art and previs play a huge role in that or do you guys work so much in this system that it's not an issue?
Well, I think one of the main things is that we don't gray box gray box. We try to take those kits and put in the details that matter so you can really get a feel for what it's going to be even if it's kind of crappy and not done. And that's made a big difference. Because when we tried to just make a gray box kit that's just blank walls, ends up not actually solving problems and it ends up being a problem down the line.
Hey guys, once again thank you for the talk. I found it to be really informative.
And I just have a brief question about the modularity and prefab sort of system that you guys were using.
You mentioned it briefly but it's something I haven't experienced in my previous Bethesda editors that I've experimented with.
So you mentioned that you can tie all the pieces together and then arrange them in chunks.
I just wasn't sure how you would coordinate with all the LDs and artists, how to make sure every prefab meshes with every other one.
like I said, we have a convention that we're used to from prior games. When the fallout 4 creation kit drops out, you'll be able to load that up and you'll see, if you're familiar with our modding, recognizable naming conventions, recognizable piece shapes. And so we'll have those static collections bundled up in one part and in a separate folder usually and then subcomponent pieces. And it's just like we have this sort of institutional knowledge of the way we expect kits to be arranged and we just mimicked it.
questions, feel free to come up. We have to tear down here for the next. Thank you all.
