All right, hello.
My name is Jason Grimblatt.
I'm the co-founder of a small indie studio called Freehold Games.
And we make a game called Caves of Qud, which is a hybrid open world RPG science fantasy roguelike.
And we do a lot of experimentation with procedural generation.
So today I'm gonna tell you about a recent system we designed for procedurally generating history for our game world.
So if you could first imagine with me, if you will, that you're a lore seeker in a wild and fractured world, you've just come to a strange land called Kud where poison jungles strangle rusted archways and chrome steeples to the earth.
Your first stop is this oasis village called Jopa.
And as you arrive in Jopa, you notice that in the northeast corner, there's this vine swath stone shrine.
So you move up to approach it.
And as you examine it, you see that it's actually depicting a historical event from the region.
So it's a shrine to Umes II, Miraborn.
While leading a small army in the foreign province, Alep, Umes II assassinated the Sultan of Qud over an ordinance prohibiting the practice of staining glass.
She won and ascended to the crown.
She was six years old.
So this is an example of the procedural history that was generated for one game.
So I'm gonna tell you about how we got here and here's the path we're gonna take to do it.
I'm going to just talk about proceduralizing history in general and give you some examples.
I'll set the context by giving you a little more information about Caves of Qud and some of our constraints and aesthetics that we followed to arrive at the design we did.
I'll show you some more examples of our generated histories and talk about our model.
I'll give you a quick crash course on replacement grammars, and that'll segue into a discussion of how we do our text generation.
I'll talk about the causality and narrative coherence for our histories.
And then finally, I'll just give you some resources and takeaways for generating histories on your own systems.
Okay, so it's kind of corny to start with the dictionary definition in a talk, but when we're talking about something as abstract as history, I think it's useful to get on the same page.
So the definition that I best liked was from dictionary.com, a continuous systematic narrative of past events relating to a particular people, country, period, person, etc.
So when we started to think about how to proceduralize history, when we started to really like study history and think about it deeply, we came upon this model that I'm going to talk about now.
So this is a subfield of procedural generation that I think is in its infancy.
There's no real canonical formulation for a procedural history system.
So this is what we came up with.
And the patterns I've sort of seen repeated in some of the other games that are generating history, including the examples I'll talk about.
So these type of systems, they tend to model historical entities.
These are things like people, places, items sometimes, like artifacts.
They model historical events which change the property of these entities, these events that sort of act on these entities.
The events are related together via some sort of underlying logic, and then the events are exposed to players often via text generation.
So probably the like canonical example of procedural history generation is Tarrin and Zack Adams' dwarf settlement management game Dwarf Fortress.
So it's really like the most granular simulation.
It's simulation happening at the level of like individual dwarves and like deep physical simulations and they're sort of combining to give this emergent.
um, history. So there's Dwarf Fortune's Legends mode where you can just read like, you can generate a world and just read the, the annals of the world, just, just kind of record of the history. Their system is interesting because events are chosen from a, a larger pool of, Basically, the events are these newsworthy events that are chosen from a larger pool of events.
So, you know, a dwarf is going about his life, the simulation's running, and when the system flags something as newsworthy, it gets, like, logged in the History Chronicle, and that's what you end up seeing in the Dwarf Fortress Legends mode when you're reading through the annuls.
Interestingly, this is kind of how real life works, right?
Like we have some, you know, we're going about our everyday lives and someone is marking some subset of the events that happened to us as newsworthy and recording those, and that's what becomes history.
And the events are related via the underlying logic of the simulation.
So if a dwarf goes, like the first event in this list here is that this dwarf becomes queen of the unseen minds.
So if this dwarf becomes queen of the unseen minds and then attracts some other dwarfs to her location and one of them betrays her and goes and founds another city and that city attacks the unseen minds and that attack, that battle is flagged as a newsworthy event and gets logged into history.
The way that those two events are related, the founding of the Unseen Minds and then that battle, is through those interstitial events that are not recorded as history but are still part of the simulation.
So this is a very granular, low-level simulation.
So on the other end of the spectrum, I want to talk a little bit about Epitaph.
Epitaph is an idle game where you're sort of directing the course of history for a civilization.
It was developed by Max Kraminski, who's a game researcher at the Expressive Intelligence Studio at UC Santa Cruz.
Whereas Dwarf Fortress is this very granular, low-level simulation, Epitaph is a very coarse-grained simulation.
It's not simulating on the level of individual people, it's simulating civilizations.
And the historic events in Epitaph are civilization-wide events, like your civilization acquires a new technology or has a famine that kills a lot of people.
Epitaph is interesting because the player actually is in the driver's seat.
They're directing the course of history.
What you're doing is you're choosing basically like the tech tree of the civilization.
You're choosing to give the civilization a certain technology and that influences the course of history.
And the way that events are related in EPITAP is that they, when an event happens, it influences the likelihood of future events.
So there's sort of a weighted table of events that can happen that gets updated every time an event occurs.
Okay, so before I jump into Caves of Qud, I just wanna talk a little bit about the challenges of procedurally generating history that we came up with, you know, came upon as we started to do this.
So probably first and foremost is just history's immense complexity.
So history is this dense, tangled network of people, places, and things.
The relational mechanics are often quite obscure.
It's hard to draw clear causality between one event and another often.
And so that's something we needed to reckon with as we started to try to systemize history, systematize history.
There's also this idea that history has a rhetorical function.
So I think unfortunately in games we tend to treat history fairly reductively.
We think of it as this sort of objective monolith of, you know, this monolith of objective events that are just recorded and that we can rely on and are trustworthy.
When really all historical accounts are written by a person at a period in time that has some biased perspective, there's always a sort of filtering through a particular lens.
And so capturing that inherent bias to the enterprise of history at all is something that we wanted to think about.
And then there was this idea that we were integrating this procedural history system with a game that already had a lot of content in it, it was well-fleshed out.
So we needed to think about how we wanted to integrate it with our other systems and how it would contribute to the overall vision of the game.
Okay, so Caves of Qud.
So Caves of Qud is an open world science, fantasy, roguelike, and RPG.
It's heavily inspired by an old pen and paper RPG called Gamma World, which was a derivative of Dungeons and Dragons, where a nuclear apocalypse had sort of destroyed the world, and nuclear radiation had mutated and uplifted animals and plants to human-level sentience, human-level intelligence.
There's a handcrafted narrative like the type you might see in a Bethesda open world RPG, but we've weaved it around these simulative systems.
So there are physical systems, every wall has a melting point, you could dig a tunnel anywhere in the world.
There are social systems, there are these 60 factions that you can gain favor with and navigate their relationships.
And then most recently is this historical simulation.
And the tagline is chisel through a layer cake of thousand year old civilizations.
So I think it's not particularly meaningful to talk about our design without talking about the constraints and aesthetic principles that led us to where we ended up with the design, so I wanna do that a bit.
So on the left-hand side here, I just have some constraints or aesthetics, and then the right-hand side is the approach that we took as a result of the constraint.
So one, we were interested in this idea of history as an artifact, and what I mean by that is that we were interested in, The NPCs and players who are kind of working in the game world's present, we were interested in how they engaged with that game world's past.
So specifically through the lens of the present.
So how they encountered historical text, how they engaged with artifacts that were from a particular point in history, but were being engaged with in the present.
And so to that end, we decided that what we really wanted to do was simulate historical accounts, simulate these cultural artifacts that had some historical resonance or meaning to them, simulate historical texts.
And if that meant that we could cheat a little bit on the actual historical logic that got us there, that was okay as long as the historical accounts were authentic.
We were also constrained by resources and the game's voice.
So again, like I mentioned, Caves of Qud is a game that was already quite fleshed out when we decided to add procedural history.
Procedural history is really just kind of like a tertiary system for the game.
And so we knew we didn't have the resources to fully develop a generative history system that we might have if we were building a whole game around it.
There's also this idea that we've done a bunch of like hand-crafted world building for the game, and so we needed the procedural histories to jive with the game's voice that we had already established.
So to that end, what we decided to do is we decided to condense the huge enterprise of...
proceduralizing history and just center the history around the mythic lives of these five ancient rulers who are called sultans.
And in particular, the sultanate, the period where the sultans lived, would take place before a lot of the handwritten lore in the game was set.
Okay, so we really value novelty in our output.
This is like an aesthetic principle of ours.
We like to let our generators run wild and see what they tell us about our systems.
So to that end, we really wanted to avoid prescribing any sort of narrative arc for the sultan's lives.
So we didn't wanna say that the sultan has some formative experience in their early age and then some trial or tribulation in their 20s or something like that.
We wanted that life arc to sort of emerge organically from the system, so we didn't wanna prescribe it.
We also knew we could rely on rich narrative context and apophanea, I think I'm pronouncing that wrong, apophanea is how to pronounce it.
So that's this phenomenon where humans, as humans, were kind of primed to see patterns in things that are not necessarily there.
So we knew that these histories would be generated in a game world that has been very lovingly handcrafted, and there's a real rich narrative context there.
So whenever you engage with the history, when the player was gonna engage with the history, they would have that context, and we knew we could rely on that, we could lean on that.
And then finally, we really wanted the histories to have like these characteristic, we wanted the sultans in particular to have this characteristic personality and this mythic quality to them.
We wanted to blur the line between history and myth.
And so we decided to assign each sultan this archetypical unit of culture that we call a domain.
And a domain can be sort of like a thematic, resonant phenomenon, like fire or ice, or it could be something a little more abstract, like might or scholarship.
If you are familiar with epic poetry, the epithets in epic poetry, like Wiley Odysseus, they were sort of meant to communicate the same thing, like associate the sultan with a particular trait.
Okay, so here's how we actually generate history.
So every time you start a new game of Caves of Qud, we generate a new history.
The history is segmented into five distinct periods.
Each period is centered around one of these sultans.
The periods themselves are comprised of these historical events, and each historical event generates a descriptive text snippet that describes the event, and this is what the players actually engage with.
We call these gospels.
So gospels are the basic units of historical record in Qud.
So how do players engage with the gospels?
They're either shared by NPCs and dialogue, or they're in the descriptions of cultural artifacts, things like shrines, like we see the shrine here that I read the description from at the beginning of the talk.
Painted objects, engraved objects.
Here's another example, this is a painted picture.
So this item is painted with a scene from the life of the ancient sultan Artarum.
At twilight under a strange and onyx sky, the people of the Hermitage of the Unfamiliar saw an image on the horizon that looked like an atomic clock bathed in onyx.
It was Ottorum, and after he came and left the Hermitage of the Unfamiliar, the people built a monument to him, and thenceforth called him Clock in Onyx.
So as you encounter more and more NPCs, as you're reading more of the descriptions of these culture artifacts, these gospels get inscribed into a player journal in chronological order.
And as you encounter more objects, as you get more of these gospels inscribed, a narrative starts to cohere around the lives of the sultans.
The final thing we do is that we take any of the historic sites or relics that came out of history generation.
Again, this is all happening at the start of the game before you're actually placed in the world.
We take any of those interesting historic sites or relics, and we actually instantiate them in the world.
We make them real places that you can visit.
We populate them with cults that worship these ancient sultans.
So there's like a.
they're inhabited within the games present.
You can go interact with these cults and talk about the sultans.
So, like I said, the model we use, our history is really this interplay between historical entities and events.
Historical entities are, in our case, are places, items, and the sultans themselves, and they're represented as data structures.
They're essentially these buckets of properties.
And then the events, the historical events, actually modify the properties of those entities.
And some examples of historical events are sieges a city, builds an important building, gets captured by bandits.
So really, these are event templates that get their details populated when we're actually running the history.
So we wrote a bunch of event templates.
And you can see here we're going for like an ancient world aesthetic, right?
You can think of each of these as like, if you were reading the biography of an ancient king or queen, these might each correspond to a chapter in that biography.
But of course if you were writing a different type of history, if you were generating the history of a high school, your event templates would look much different, right?
You might have character fails a test or two characters going on a first date.
This special thing about the system is that the way the events actually resolve, when an event is deciding how to resolve, it does so partially through randomness, but also partially through looking at the state of the properties of the entities that it's modifying and choosing an outcome based on those.
So I'll explain how that works.
Let me walk you through the process of actually generating one of these sultans.
So the first thing we do is that we generate a Sultan, we initialize their property, so we give them a name, we give them a birth region, we assign one of these culturally resonant phenomenon, these domains to them.
And then we choose, from our bag of event templates that we have, things like sieges a city, or builds an important building, we choose one of those completely at random.
We then move on, we go on to resolve the details of that event.
And again, the resolution, the way that's done, it's based on looking at the state of the sultan, looking at the sultan's properties and deciding how to resolve.
And then we generate a gospel via grammar and we update the state.
So again, remember the point of these events is to actually change the state of the historical entities at play.
So we repeat the process about 12 times.
Each sultan has about 12 significant life events in their life, give or take a few.
And then finally, if the sultan's still alive, we have this generic death event where they die.
They may be dead already because sometime during the course of their 12 life events, sometimes they can die as the outcome of one of those events.
So you might.
have picked up on the fact that the interesting property of this system is that there's actually no logic behind the choice of the events.
So when we're choosing an event, like, say, a sultan just built an important building, if we choose the next event to be siege of the city, there is no reason why that was chosen.
It's completely random.
So cause and effect aren't intrinsic to the system, but the interesting thing is that these gospels, these text snippets that actually describe what's happening in the event, they profess causes.
If there's a siege of the city event, it will often say why the sultan has sieged the city.
So how does that happen?
Well, the causes are actually these rationalizations that are decided after the fact, and they're mediated by the sultan's state.
I'm going to give you some examples to talk about, you know, what that means, but first I'm going to give you a very quick crash course on grammars.
So, the simplest way to say it is just that grammars are a way of defining things in terms of smaller things.
And a replacement grammar, I'm going to talk about replacement grammar.
Specifically, a replacement grammar is just a string of symbols and rules for replacing those symbols, in our case with either text or with other symbols that themselves have rules that can be replaced with text.
So grammars are used to model language, so we can think about the English sentence structure.
A sentence is made up of a noun phrase and a verb phrase.
A noun phrase can be something as simple as just the proper noun, John.
And then a verb phrase is made up of a verb and a noun phrase, the object that the verb's acting on.
The verb could be the verb hit.
A noun phrase is made up of a determiner, in this case just the definite article the, and a noun, ball.
So we get a sentence like John hit the ball out of this, you know, sentence structure that was modeled via grammars.
So the way that works in our system, how text generation works in our system, we can look at a text template like this.
So this is one of the text templates for the Siege of the City event.
Acting against injustice, Sultan name led an army to the gates of location.
And so if we were to expand this, this is what actual text looks like that comes out of our system.
This is what an actual gospel looks like.
Acting against the persecution of frogs, Othra deities led an army to the gates of Upir.
So with that in mind, let's look at this same text snippet through the lens of how the causality is generated.
So again, we have acting against injustice, sultan name led an army to the gates of location.
So the injustice in this case is the cause, the reason why the sultan decided to siege the city.
So how do we actually choose a reason?
Well, again, we look at the properties that the Sultan has.
So here you see the Sultan has a couple properties.
They have a list of allied factions.
So these are just some factions that throughout the course of their life, the Sultan had gained an affinity for a particular faction.
In this case, it was frogs.
We also see here that the Sultan had a profession.
They were a geologist at some point in their life.
And so for this particular event, for the Siege of the City event, there happens to be a grammar rule that says, hey, if you have an allied faction, if you're friendly with one of these factions, replace injustice with the persecution of faction name.
And then in turn, faction name gets replaced with whatever faction the sultan is friendly with.
So in this case, we have the sultan is friendly with frogs, and so the injustice that the sultan is fighting against gets replaced with.
the persecution of frogs.
So I wanna talk a little bit about how narratives can cohere out of these disparate historical events, and to do that I'm gonna read this example.
These are two gospels from the same history, they appear right after each other.
So after treating with cats, Antixoper convinced them to help her found a dig site in the Philosopher's Quarter of Shane Rook for the purpose of excavating ancient blocks of ice.
They named it the Freezing Dig Site.
At the battle of Old Tagesh, Antixeker fought to liberate cats.
She wielded a frosty hammer with such prowess that it became forever known as Frosticus Cat's Friend.
So we can see here that a little narrative is kind of cohered, right?
And the reason we can interpret that narrative is because we're bringing some narrative context to reading these two gospels.
So we see that Aunt Sixapur had some sort of secret meeting with cats where she convinced them to help her found a dig site.
The very next event, she fights to liberate cats.
So because we know how tit-for-tat works, how deals work, kind of surmise that what might have happened is the sultan met with cats, said, hey, if you help me found this dig site, I'll fight for you, I'll try to liberate you. But really that's not what happened at all, right? Because we know when we pick the event, sieges a city that was done totally randomly and this cause was just sort of rationalized.
So how was it done? So again, here's the cause.
She fought to liberate cats and when we needed to decide to actually expand into that cause, how we generated this text, we looked at the Sultan's State.
So this previous event actually set the Sultan's State. So when an event When an event is resolving and it looks at a sultan state, if there isn't anything satisfactory to actually produce good text, it'll set the state itself.
So this event, this top event here, actually set Antiksapur's relationship with cats to friendly.
It said, hey, Antiksapur's now friendly with cats.
She treated with cats in this event.
And then when we got to the actual cause of the next event when she sieged the city.
The system looked and said, hey, the sultan has a relationship with cats.
Maybe they sieged the city in order to liberate cats.
We also, you see here that the name of the hammer she was wielding is Frosikith's Cat's Friend.
The reason we pick Cat's Friend as the suffix of that name is because, again, this is an event where cats were liberated.
I also want to point out, you might have noticed all this ice imagery, right?
She founds this dig site for the purpose of excavating ancient blocks of ice.
They name it the freezing dig site.
She's wielding a frosty hammer.
The hammer's called Frosticus, Kat's friend.
The reason there's all this ice imagery is that all of this text is generated as a result of this sultan having the domain of ice. So when this domain was initialized, or when the sultan was initialized, she was given a random domain, it happened to be ice, and so ice sort of permeates the events of her life. So these, the sultan's state...
like her affiliation with a faction, in this case, Cats, her domain, is acting as this sort of narrative glue that's holding these disparate events together.
And the fact that the events, the resolution, and the text generation is parameterized by the Sultan's state, it really promotes these player-interpreted causalities.
Right, so we're bringing a lot of narrative context to our reading of those Gospels, but it sort of makes sense, you know, if we get the idea that if this sultan made some sort of deal with cats, if they helped her found a dig site, it makes sense that she might have fought to liberate them.
And then domains in particular, they act as these sort of recurring narrative threads in a sultan life.
So they really, they kind of just tie the sultan's life together, give them this nice association with this kind of resonant phenomenon, in this case ice.
Okay, so some quick resources I want to tell you about for designing your own generative history system.
So if you're...
interested in the details of our system, we wrote a paper about it, it's on our website.
So this is, you know, and this slide deck's gonna be up on the vault or whatever, or um, you can take a picture of this and search for it. But, yeah, Generation of Mythic Biographies and Caves of Qud, it's a, it's like a very detailed paper about our system. Epitaph, the game I told you about by Max Kremitsky, the source code's available, I highly recommend it, it's really readable, it's really succinct, and you can just get your eyes on a system that just very, like in a very succinct way has this...
coded relationship between events and these entities, it's good.
Microscope is this tabletop role-playing game where you're creating epic histories.
It's a good tool to think about the proceduralization of history.
This Anchor Party game, Opera Omnia, which is so fantastic, which takes this idea of the subjectivity of history that I was talking about that's so often lacking in games and makes it the whole conceit of the game.
And it's a really great game.
If you were here last year, you may have heard Kate Compton's talk on practical procedural generation.
She also, it's an amazing talk, she also wrote a blog post where she goes through, she sort of enumerates a bunch of generative techniques and talks about them.
One of them is grammars, so I highly recommend that.
And then Bruno Diaz is a developer who made this game called Voyager, this sort of space travel game where he procedurally generates history and uses grammars to do it.
Does a lot of the same stuff we do.
And he wrote a design article in Game of Sutra about it.
So I recommend that as well.
So, four takeaways if you're going to generate your own histories.
I would recommend that you think carefully about your narrative context.
So really think about how you're going to be using your histories.
Who is telling the histories?
What are their biases?
How can you encode that into your system?
break your histories up into entities and events.
So you can like sit down with some index cards and think, what are the, you know, who are the actors that are acting in this system?
Who are the people that are, you know, the people or the places that are actually the elements of my history?
You can also think like, what are my event templates?
What type of history am I writing?
Your event templates are where a lot of like the essence of your history is encoded.
create a logic to relate your events.
So again, you could do something like what Epitaph does, which is to say, hey, if an event happens, we change the likelihood that future events happen.
You could also say that an event only happens if certain requirements are met.
So if certain preconditions about the state of the historical entities are met, then an event has a chance to happen.
Or you could do something like what we did, which is kind of cheat and say, we actually don't have a logic to our.
to our event selection, but we're going to rationalize it anyway.
and then use replacement grammars to generate text.
They're wonderful tools for generating text.
In particular, they're really good for taking some sort of state machine or like a simulation and describing it via text because you can use variables that get replaced with the actual text when you're resolving that generation where the details actually become alive and get encoded into your text.
And that's it, I'm Jason Grumblatt, this is, you can follow me on Twitter, and thank you for coming to the talk.
So we probably have time for one question, if someone has a question.
If not, I do.
All right, I'm doing it.
Uh, so how did you balance the amount of state that you gave to the sultans?
Cause if you had too much, you know, different factions that they could be friends with, then there wouldn't be that thread of, you know, they're, they're dealing with cats a lot.
But if you don't have enough, then it doesn't seem like there's variety.
Yeah.
So the way we did that was that state is only really set during historic events, aside from the initial state that we set when the sultan's initialized.
So when we initialize the sultan, we only set a few pieces of state.
We say, this is your name, this is where you were born, this is your domain.
We only give them one domain.
And then as the events unfold, that state can be set.
But because there's only 12 events, there's only so many meaningful things that happen in the Sultan's light.
So it's very rare that a Sultan becomes friendly with more than one or two factions.
When it does happen, when you get one of the outlier Sultan lives, and they're friends with six factions, and they have three husbands because they married robots and baboons, all this can happen, then it's a real interesting outlier, and it's kind of nice and delightful.
Alright, I think that wraps it up. So please make sure that you fill out your evaluation emails to let Jason know what you thought.
And let's give him one final round of applause.
