Thank you.
All right.
Let's do this.
All right.
Let's do this.
All right, so hello everyone.
Oh, my voice echoes.
So my name is Gillian Smith, as Dave said.
I am an assistant professor at Northeastern University, which is in Boston, Massachusetts.
I'm very grateful to be here, weather isn't snow.
And to give you a little bit of background in why it is and the kind of work I've been doing in content generation, I've been interested in procedural content generation as it intersects with game design to enable new playable experiences.
Mixed-initiative design tools, which we'll be talking about in this talk.
Recently, I've been doing a little bit of work looking into the history of content generation across games since about the mid-'60s or so.
And the kind of games that I've generated content for in the past in my research have been Super Mario World, Western role-playing game-style levels, and puzzle games.
Thanks.
And I'm Julian Togelius.
I'm currently at New York University.
I've been doing various kinds of things in procedural congeneration.
I started out with trying to figure out how to control, use evolutionary algorithms to control game characters.
And I was like, hey, why not turn it around?
Why not, you know, come up with the levels and stuff instead?
So, I've been using lots of different methods, typically from the biologically inspired, statistical and similar non-symbolic realms to do content generation in various games, including racing games, Super Mario Bros., StarCraft, etc.
So this is kind of the whirlwind tour of procedural content generation.
So we're going to be talking about four main things today.
The first is giving a very high-level overview of different technical approaches and algorithms that you can use for content generation, specifically looking at what we're calling gameplay-oriented PCG.
A lot of procedural content generation that you may have seen from, like, the computer graphics community would be for procedural textures or, like, height maps or procedural flame effects.
We're really more interested in the kind of procedural content generation that's for content that players will really deeply interact with and form part of the gameplay experience.
After giving this sort of very high-level overview of algorithms, we'll talk about sort of practical advice for if you want to put content generation into your game, what are some of the things you might want to think about, talk about using PCG to actually help designers, not just replace designers, and then end with sort of a very, again, high-level overview of different debugging and visualization strategies you might want to use.
I think the key theme across all of this presentation is that there's no magic bullet.
We all know this, right?
There's a lot of different algorithms you can use for this, and they've got trade-offs.
And so the goal that we have with this presentation is to try to make those trade-offs a little more clear.
We're not gonna be here and tell you like, grammars, those are the best way to generate content in the one true way, right?
They're good for some things and not as good for other things.
So with that, let's dive in a little bit to some of the, we've identified sort of four high level approaches that people can use for content generation.
Talk about what they are and what some of the trade-offs are in terms of what they're good at and bad at.
So the first method that, or set of methods that we can think about are what we're calling constructive methods.
So these are typically very ad hoc methods where you might piece together large building blocks of content.
Spelunky is a really good example of a system that uses a kind of constructive method.
There's pre-designed by humans, tiles.
that get placed next to each other, and then a second pass in the algorithm goes through and decorates all of those tiles with loot and enemies and so on.
And Darius Kazemi has a really great blog post online that should be pretty Googleable that talks about specifically how the Spelunky level generation algorithm works.
Really, constructive methods are about sort of directing randomness, right?
So you could just place a call to a random number generator and get a bunch of random stuff that shows up on your screen.
So we try a few different ways to try to influence that random number generator to give something that feels a bit more designally than just being like at the mercy of your random number generator.
So these can include things like paying careful attention to your knowledge representation and using very, carefully crafted blocks that fit together nicely, altering your random number distribution so you're not just pulling from a uniform distribution, and lookup tables.
And sort of my tagline for constructive methods is like, we want to hack something together that works, right?
And it'll probably only work for this game and nothing else, but like, let's just get something working.
What's really nice about a constructive approach is that it's typically very lightweight algorithmically.
Sort of like a few calls to a random number generator and you're done.
It puts more sort of burden onto designers and artists and level designers to be able to design your modular content that's going to go together though, right?
Which can be a lot if you need to suddenly think about like all possible pairs of all possible tile sets, like what's going to happen.
It's pretty customized to the designs, it's not very extensible.
And really the main peril, I think, of these systems is that you're constantly fighting against human pattern recognition skill.
We're really good at detecting patterns in content, and you'll see patterns in content very quickly.
And we kind of wanted to give like an extreme example of each possible approach.
So the extreme example I would say for a constructive method is the AD&D dungeon generation system, which is a paper-based system for procedurally generating an entire dungeon as you go.
It has four pages of lookup tables tied to each possible dice roll you can do for placing like all of this crazy stuff in.
And it's like, it's kind of awe-inspiring, really.
Yeah, sounds like a lot of fun.
Yeah.
I mean.
So the more sort of structured way, in a sense, of doing bottom-up content generation, if you compare to constructive methods, is grammars.
And this is grammars right off like Computer Science 101 or 102 fame or Chomsky fame or something.
They're used for linguistics.
So basically, you define an ontology of objects.
that can exist in the world, and then you design a set of production rules, and what object gives can be in each production step be transformed into what else.
Um, this has been probably most famously used for, um...
for generating vegetation, plants and trees, think speed tree for example, but it can be used for lots of other things as well.
So here in the background you see a part of Joris Dorman's grammatical system for generating dungeons and quests in Zelda-like games.
It's, uh, right.
Yeah, that one.
Yeah, that computer is good.
It has this very broad applicability.
You can do lots of other things, and it's easy to sort of combine different design elements.
You have a, um, it, you can get surprisingly complex results that still adhere to basic design principles out of very little you put in, in a sense.
So it's very useful in that sense.
The perils of overgenerating, or, like, the power of overgenerating is also a peril of overgenerating.
You can generate huge structures that often show a lot of regularity, perhaps more regularity than you would actually want to do.
So, um, but this can be solved by combining it with some sort of testing procedure where you sort of, if you generate something that doesn't actually look good or doesn't play well, according to some automatic measure, you can cut it down and regenerate.
Which brings us to...
Which brings us to...
So, constructive methods and grammars are really more bottom-up approaches.
Like, you define a set of rules and kind of see what bubbles up and, like, what interesting, surprising, emergent things happen.
The other two approaches that we want to talk about are really more top-down methods, where you as a designer and AI programmer, like, in combination, that's what's cool about PCG.
You're, like, doing AI and design together.
You can sort of specify high level goals that you have and let the system figure out what to create that meets those high level goals.
So there's a relatively new within the academic procedural content generation community approach of looking at constraint based systems to be able to do procedural content generation.
The idea behind these systems is that you specify what you want to be true about your final content using logical language.
So you could say, like, I want to have a cave system and it should be 30 by 30 tiles, and I want there to be at least five rooms, and I want those rooms to be connected by at least 10 corridors, and I want there to be...
lots of enemies in at least one of the rooms, and you're giving these very high-level design constraints, and then you kind of hit the generate button and let this off-the-shelf constraint solver figure out what all of the different variables are and what they need to be set to.
to create a system for you.
So an example of a like out in the wild right now game that uses constraint-based PCG is this educational puzzle game called Refraction, which is from University of Washington, where you're trying to control how lasers move around and bend so that you can power spaceships with fractional portions of lasers.
This is a really powerful way of doing content generation.
You need to be able to figure out how to express your entire domain in logic programming, though, which is a non-trivial task.
Though, we're working on making it a little easier.
So some of the really great things about constraint-based systems, you can make promises about design issues and guarantee that you will meet those promises, which is huge.
Coming from grammars where you've got this emergent stuff that bubbles up, you can't make any promises.
It's hard to even make promises about playability, like validity.
With constraint systems, you can guarantee validity.
It's a fairly flexible and general purpose language that you can use, so it's very extensible.
Anything that you can figure out how to express in it will work.
You don't need to like tack on a bunch of extra custom created AI modules.
Some of the cons are you need to define your domain very, very tightly, including what seems like common sense rules.
So this is an AI system called Tanagra that uses numerical constraint solving.
And it's like just even like specifying that platforms need to be attached to each other feels like a very common sense Constraint you need to explicitly make that clear to the AI system And it can have some scalability issues and those scalability issues are not super well understood right now As an extreme example, Variations Forever is a constraint-based PCG system to generate an entire space of potential arcade-style games.
And so you can specify the rules for the games using constraints as well and get really weird stuff that comes out of it.
Yeah. So another system which is more top down than bottom up or another sort of class of systems is optimization based systems, also called search based systems, depending on which, which country you're from, right, right, right.
We have not disagreed over this at all, ever.
So this is basically the idea of using an evolutionary algorithm or something similar, a stochastic optimization algorithm, to evolve your content.
So evolutionary algorithms is the easiest idea in the world.
You just take Darwinian evolution.
You have lots of content, different levels or whatever, randomly generated.
You keep the good ones, throw away the bad ones, and make mutated copies of the good ones.
Maybe you let them sort of cross over with each other.
And this works very well in theory.
It often works very well in practice.
Despite the extreme simplicity of the ID, it requires quite a lot of sophistication to use sometimes.
The fitness function you need here is one of the key parts.
You need a fitness function to sort of judge how good the content is.
This idea can be used in very different scales, from just trying to tune your game to creating a completely new game.
So what you see in the background here is Paul Tussaud's City Conquest, which used evolutionary algorithms to tune it quite successfully, as I understand.
The other example you see here in the background is Cameron Brown's Ludi system.
Well, it's not actually that.
It's actually the game Yabaloth, which is a simple board game you can buy in a box set, which is apparently out there making money, which was not designed by the...
game designer Cameron Brown, but designed by the system that Cameron Brown built, which uses evolutionary algorithms to explore the space of different board games.
He sort of made it easy for himself by constraining himself to a very sort of narrow set of board games.
But nevertheless, it works very well here.
So, the screen's too low for me.
The power of these systems is that they're extremely general.
You can basically put anything in there, and it will work.
And it requires relatively little domain knowledge to set an evolutionary system up to search for content.
The perils are, one, is that it can be very, very slow.
So if you need something that sort of is guaranteed to generate a new level or a new sort of enemy or whatever before the next frame, maybe you shouldn't trust evolutionary computation.
Maybe it might be far too slow.
But if you do it on design time, it's a different thing.
The other parallel is that you really need to come up with a fitness function that captures what you actually want to capture, which is trickier than what you will expect.
Right.
So to take an extreme example here, this is a very fascinating one.
This is Michael Cook's Angelina, which is a backer name for a novel game involving labyrinth I named Angelina.
So this system tries to come up with complete games, including mechanics, levels.
And it even chooses sort of themes for its games and graphics by, for example, reading the Guardian and then using that as input to an evolution or algorithm.
Therefore, you get these sort of rather odd themes here.
This is a very fascinating system that is really trying to push the boundaries and do something that has not been done before.
If it was successful, most of us would be unemployed.
Unfortunately, fortunately, it's not really working.
all the way.
So at the end of this sort of survey of these four main classes of content generation algorithms, there are several others which we did not really find the time to include here.
We just sort of point out that very often the greatest power can be had from combining them.
So you can combine basically examples we have, optimization and grammars, constraints and grammars, optimization and constraints, and you can have multiple layers of constructive algorithms on top of each other.
So what you see in background, that's a Super Mario Bros. level generated by an evolutionary grammatical system.
So basically, a system that evolves grammars that create Mario levels.
And with some pretty good effect, actually.
You can get a very large number of levels that look like this, and that look completely different, but according to the same pattern, very easily.
So, yeah, so, excuse me. So, in summary, the sort of four main classes of algorithms that we've talked about at a very high level.
At the end of this talk, we'll give you some resources to go find out a little bit more about them.
And each one sort of has these different trade-offs.
So constructive algorithms can be very, very simple to author, can be very highly customized to your particular game, but they can lead to this peril of having a lot of repetitiveness in your content that players will start to see very, very quickly.
And they're ad hoc, so they're not really extensible across games, or if you want to be able to modify, like if your game design changes, there might be a lot of backwards work that you need to do.
Constraint-based systems are really powerful for being able to give all of these design guarantees.
You're using a declarative language to be able to describe all of your content, which means that while the logic programming language is not super friendly to designers, unless they're, you know, really super into AI as well.
the general mode of thinking in our experience has been really more accessible to non-technical designers.
The peril being that you need to figure out how to translate all of that stuff to different constraints.
And also debugging constraint-based systems can be very challenging, because often, if you give a conflicting set of constraints to it, and tell it to find an answer, it'll just tell you that it can't.
It won't tell you why it can't do that.
Optimization-based approaches have really good generality and very interesting emergent behavior can come out of them.
But it can be very hard to define your fitness function and very tempting to try to define it as like, what's a fun level?
And then you end up with this like weird situation where you're trying to come up with a mathematical definition of fun which is on the ranking 0 to 1.
Which Julian thinks is possible and I think maybe not.
And they're also, they can be fairly slow.
Grammars, again, have a lot of emergent properties that come out of them, and they're relatively easy to offer, but you need to spend a lot of time thinking about how you're going to filter the content that comes out.
So with all of that, sort of very high-level overview, now you know sort of four main classes of algorithms for content generation.
How do you pick what you want to do, and what are some of the design considerations you might have when you're making a content generator?
And there's sort of four different classes of things that you might want to think about, and I'll delve into each one of these in just a minute.
You can think about what the building blocks are that you're constructing from, right?
Are you working with pre-authored chunks of content from someone in the level design team?
Or are you working with sub-components, kind of like a tile set, with no semantic knowledge attached to it?
Is that what you're trying to do with stages in between?
Do you need your content generator to run online in response to what players are doing?
Or do you need it, or is it okay if it runs offline?
And then I think the two that I'm maybe the most interested in recently is what kind of player interaction do you want to have with your content generator, if at all?
Do you want to just be generating content and then the player gets dumped into that content and it's as though a human had created it, right?
It's just the computer happened to do it?
Or do you want players to actually be able to manipulate that content generation system as part of play, which can lead to some interesting things?
And then also the extent to which you want to have control over the content that comes out.
Do you want to be able to directly influence aspects of the player experience?
So we can think about the building blocks aspect as sort of a question of data versus process.
So authored chunks, which I should maybe have a better term for, these are these pre-authored big set pieces that you can just glue together in different ways.
Or maybe you've got templates.
This is like the Mad Libs of procedural content generation.
A lot of stuff that's human authored, and then some rules to control what goes into the different slots.
and maybe those rules are really finely crafted to be able to make sort of always valid design, like design-controlled content, or maybe those rules are a little crazier, like Mad Libs, so that you get weird stuff coming out at the end.
But these are both very data-oriented ways of thinking about procedural content generation that maybe lend themselves to data-oriented algorithms that you would want to use, like a constructive algorithm, or maybe like a grammar.
Grammars are really good for template-based.
control. On the other end of the spectrum, and this is probably where a lot of academic research and procedural content generation has been focusing, is on process-oriented content generation. So what if the amount of content that your algorithm has to work with is like a single level component.
So maybe if it's Super Mario World, your level component might be a platform with an enemy on top of it.
Like this has some semantic information attached to it that you can kind of tell the AI system what that means.
But it's not really enough to be a meaningful piece of player experience on its own.
So you need to have this intelligent process that's running, that's trying to capture some amount of design knowledge for how to assemble content.
You're trying to take the designer's brains and squish it down into an algorithm without lobotomizing them.
So these are much more process-oriented ways.
And you may want to work with, at the component level, maybe you don't have a big design team that can put together huge amounts of content for you, so you're trapped.
This is like the reducing authoring burden argument for content generation, right?
If you don't want to have big set pieces, you want to have smaller pieces, then you're going to need a much more complicated algorithm to be able to fit those smaller pieces together, and there you're starting to look at something like evolutionary algorithms.
or constraint-based systems.
Algorithm speed is often a big question, right?
And this is kind of the no-brainer.
If you want your content generator to be able to run online and respond to players, you're going to need to pick something that's pretty fast, right?
Grammars are pretty fast.
You can customize your constructive whatever you've created to be pretty fast.
Constraint-based systems, it depends on the size of your domain and what you're working with.
You can have a constraint-based system that will generate...
So, like, Tanagra, which you'll see in a minute, generates levels using a constraint-based system, but its domain is so constrained that it can do that in real time.
If you want to have, like, a massive piece of content that you're generating, you're looking at, sort of, on the order of a few minutes, maybe in a few hours, to generate something that's not going to work online.
For evolutionary approaches, you can think of having a human in the loop, right?
So you could replace your fitness function with humans voting.
And the game Galactic Arms Race, which you should all go look up if you haven't heard of it before, uses this really effectively.
If you're running offline, then you can be a lot more flexible in the algorithm that you choose.
And then finally, we can think, like, what about the players, right?
Maybe we shouldn't think about them finally.
Maybe we should think about them first.
But the...
The type of control that you want to be able to have really dictates the kind of algorithm that you have.
So if you want sort of parameterized control, sort of civilization map generation style control where you can tweak in the beginning, like I want there to be lakes, and I want there to be no barbarians, and a few other things, these are parameters, right?
That tends to lend itself fairly well to weighting different rules in your grammar.
If you want indirect control over what's being created, like...
Like, say, in Galactic Arms Race, it's a space shooter game where the weapons are procedurally generated and the way that those weapons get generated is by evolving the next weapon based on the one that you've used the most frequently in the game.
So that's a really indirect kind of control.
You can also think of, like, the experience manager in Left 4 Dead as sort of an indirect kind of control that the player might have over what's going on in your system.
And then you can also think about what level of design control you want to have.
So do you want experiential control, where you're actually explicitly modeling some aspect of the player's experience, like the pacing of a platforming level?
Or are you good with compositional control, which is really more like saying, I want 50% of this world to be covered with ocean, and 20% of it should be built up cities.
And that can guide the kind of decision making you're making as well.
Yeah, so we talked a lot about individual methods and types of methods for generating content and when you should use one, when you should use the other, and so on, and by now it should be getting clear that there are lots of trade-offs and, I mean, confusing.
But then there's also the matter of...
Where in the chain are you going to use this?
How are you going to use this?
Are you going to use an algorithm as game runs or design time?
Or are you just going to let it produce some content for you and be happy with it?
Or can you somehow interact with it?
So.
Recently, there's been a couple of prototypes developed on how you can come up with authoring tools for different games that use the full power of these AI methods to create content, but together with you, and in a sort of dialogue with you, in a mixed initiative fashion, meaning that you can take initiatives, and the program can also take initiatives.
So we'll briefly show three examples that all come out of academia, actually out of our own labs.
but which showcases in various ways.
The first here is Tanagra.
Are you going to?
Yeah, yeah.
So I can talk very quickly about Tanagra.
I think Tanagra was shown at the AI Summit three or four years ago, I want to say.
So five or six.
Well, that makes me feel old, doesn't it?
Yeah.
So Tanagra is a system that uses a combination of constraints and reactive planning, which is really like it's actually a grammar going on, to have human-computer interaction for creating platformer levels.
This is a prototype tool.
It's obviously not ready to go out into the real world and be used by platformer level designers, but it's sort of playing with the idea of what this could look like.
So the idea is that the human and the computer can interact in real time to collaborate on what the design of the level should be.
The human is sort of, through interacting in the user interface, is continually editing constraints that are placed onto the level, and the machine is sort of brainstorming ideas for what levels can look like that meet the constraints that you're adding onto the system.
And it provides a level of experiential control, so you can actually, as a designer, directly manipulate the pacing of the level.
You can say, I want it to be fast-paced in the middle, slower-paced at the end.
and it will create geometry that meets those pacing constraints without you needing to say what geometry should go into place.
So I'm going to show, I'm going to kind of skip around in this video a little bit because it's, there we go, whoops, come on.
There we go.
There we go.
So this is, you can hit the generate button and it generates a bunch of different ideas for what levels could look like.
You could draw in platforms, and anything that's showing in in dark is a constrained system, and generate stuff that fits in between them.
You can play test in the editor, and this is what happens when you tell a computer scientist to make the art, the computer scientist is me, to make the art for your AI tool, because I know how to draw robots and birds and that's it.
This is the part where you can directly manipulate the pacing.
So there's this beat timeline down at the bottom where you can add in areas where the player needs to be taking more actions.
You can remove actions off from the end.
And you can see that the level geometry is continually updating to meet...
Sort of the pacing that you want and you can regenerate at any time You can also grab platforms drag them around and it will automatically keep up with what's going on So this is a direct interaction where the content generation system Yeah, so, and whereas Tanagra has these ideas about, like, co-authoring with a machine based on the constraint-based systems, the Sentient Sketchbook is another idea of using evolutionary system and other kind of search-based systems to assist the player.
So this is a system for general, sort of strategy game sketch generation.
Let me talk a little bit about this video.
How do you start it?
Just hit the thing.
The thing.
The thing, Julian, the thing.
The thing.
You show me.
Oh, there's a mouse pointer, right?
Oh, beautiful.
Okay, good.
Right, so this is the Sentient Sketchbook 2.
Is it playing? Yeah, right?
You create, it represents the strategy game maps as sort of high-level chunks.
which absolutely represents like impassable areas, which could be walls and so on in StarCraft, or bases, resources, and so on.
So as you go along and edit and draw things here, you see those little screens to the right.
These are suggestions that are based on what you're currently editing, which is generated using evolutionary search, and something called novelty search, which is a way of finding diverse, similar but diverse sort of content.
It also gives you these little sort of meters that gives you immediate feedback as you edit about like the balance.
Do you have like the same amount of bases next to you?
And you have space around the base, access to resources and so on.
You can get these various views that show you, based on gameplay features, various aspects of fairness and game balance.
And as you go along, you might choose to implement one or several of these suggestions and replace your map with it.
Every time you do it, the tool learns from you and tries to figure out what kind of aesthetic preferences you have.
This person is trying to generate very sparse maps.
So this person is trying to generate maps with lots of choke points and so on.
So it has various detectors for these sort of design features.
And as you go along with this, you can then come up with, you can export it to various kind of game modes.
We have an export for StarCraft and also for our own sort of simple map format here.
But it's trying to operate at a somewhat more abstract level.
It's not the level of a particular strategy game, but of some sort of abstraction of what goes into a strategy game.
We take an example of something which is a lot more tailored to a particular game.
We have what we call a rope bossom, or a ropossom, or something, which is a level generator for Cut the Rope, this mobile puzzle game which has been very, very successful.
Uses tree search and grammar-based genetic programming, so basically evolving grammars, so to both come up with levels.
and to help you solve levels in real time.
It's... what's it?
Clique?
Good.
Right.
No?
Yeah. Right.
So we have the same thing here.
We have an editor, which actually is, like, a clone of the Cutthroat game using the original assets, which they were happy to let us use.
Um, you can put things out there.
you can press a button to check for playability, and it gives you the complete sequence of actions you need to take to sort of, um, to play the game.
This uses a pretty interesting tree search algorithm, which I won't get into here, but it took us some thinking.
Um, and it can also sort of, you know, there's a separate way of visualizing what's gonna happen, which is an occlusion-based view, which, um, which shows you...
what kind of effects each component has as you put them in here, and what includes it, and what sort of paths you can actually need to take.
You can at any point sort of fix parts of the design and have it regenerate the rest of the design.
And, yeah.
So I guess we don't have time to go through this very much.
Alright, so I wanted to close with some thoughts on how to actually visualize and debug these systems.
So you've got, Adam Smith has this way of talking about generative systems where you're sculpting a design space, basically.
You need to shift your thinking from how to design a single piece of content to how to create an entire space of potential content.
And he has this very nice clay-based metaphor that I just, I really love, it feels very artsy.
But it's tempting when we build generative systems to just hit the generate button a few times, say yeah, this looks like it's making reasonable stuff.
So I guess my generator is done, right?
But it's difficult to actually sample reasonably from the space, and actually Nathan in his talk is gonna be talking a little bit about a solution he has for this.
You can think of it as like if you have a hundred coins and you flip them, you would expect that 50 times you would get heads and 50 times you would get tails.
But it's entirely possible that you'd get heads like 90 times and tails 10 times.
So it's hard to know that when you hit the generate button, you're really getting a representative sample from this massive space of content that you're making.
So one of the ways that we've talked about trying to resolve this problem is by trying to actually map out the expressive range of a generative system.
And roughly the way that we've been mapping this out is defining several numerical metrics or numerical scores for the content that your system can produce.
generating a huge amount of content from that system.
And with lightweight methods, that will go relatively quickly.
With heavier weight methods, you might need to run this system overnight or something.
And then score each piece of content that you create and map out with a 2D histogram that can be visualized as a heat map.
what kind of space of content you're getting.
So these are, each one of these graphs is a heat map for a different generator for a 2D platforming game, mapping sort of a rough approximation of difficulty on the Y axis against a rough approximation of linearity, so like how flat the levels are basically.
And you can see that each system is creating very different looking spaces of levels.
So the green points in these maps are sort of areas where the generator is biased towards creating a lot of levels in that space, and then it falls off.
So we even have some systems like in the top right, that system creates kinds of levels that the system in the middle top.
will never be able to create.
So it's kind of interesting to be able to look at the space of content that you can get.
For reference, some of the metrics that we're talking about here are leniency, which is like an objective approximation to difficulty.
By weighting each component that appears in a level by how much harm the player would come to were they to fail the interaction with it.
So like if you fail the interaction with a gap, you're dead.
If you fail the interaction with a Goomba, then you've just like lost your power up, right?
So it's not quite as harsh as a Gap is.
Also linearity, like density of challenges, and then pattern density and pattern variation are two metrics that are looking at how close to the original Mario levels, the generated levels appear.
The other cool thing that you can do when you've got this ability to visualize the generative space is that you can look at how your generative space is changing when you vary certain input parameters and uncover unintentional biases that you might have in your generative system.
So these are a bunch of heat maps for a single level generator, where each one is a different configuration of input parameters to it.
And for the sake of time, I won't say exactly what all of those parameters are, but suffice to say they're different.
And you can see that there are certain configurations of parameters that bias the generator towards creating particular kinds of content more than others.
And you can talk to us and ask us about exactly how this is working after the talk if you would like.
So we wanted to close with just some further resources and ideas.
So if you if your interest is piqued by this like very high level very whirlwind overview of like all of procedural content generation.
Yeah, man, like 40 minutes. That's hard to do.
These are some resources that you might find useful.
So there's the Procedural Content Generation Google Group.
This is a Google group and a mailing list that consists of indie game developers, I think some people from AAA industry, and academics who are all sort of talking about procedural content generation.
It varies in its amount of activity.
And please, if you join this, as many of you might be logging in and trying to do now, please write something in the reason for joining box so we know that you're not a bot.
Right.
And if you join, please contribute to the discussion.
There's a thread saying introducing ourselves.
Please add to that, introduce yourselves, and so on.
There's two game jams that are going on.
One happened last November called the Procedural Content Generation Jam.
It will be coming back again in 2015.
That's organized by Mike Cook.
There's also the AI-based game jam that's being organized by Alex Zook.
That's going to be taking place around the end of March.
Those are websites for those.
There's a wiki that has sort of information about different algorithms we've talked about.
And in progress textbook that's currently free online at pcgbook.com, co-edited by Julia.
Yes, it will continue to be free, but it will also come out as like a physical book.
PCGBook.com.
Have a look at it right now.
And then finally, these are some of the academic venues where PCG research gets published.
We know that the paywall is a thing.
We know that the paywall is a huge pain, and we hate it as much as you all do.
The first three of these are either open access or mostly open access, which means you don't need to pay to be able to find our work that we're doing.
And with that, I think we should transition to Nathan.
Thank you.
Thank you.
