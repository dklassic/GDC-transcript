All right. Let's get started. Thanks, guys, for all coming out. I hope this will be interesting for you all. Make sure to silence your cell phones and fill out your surveys.
So I'm Josh Menke. I'm going to kind of go through some of the things I've learned and some opinions I've created for myself and my own. You guys are free to adopt my own opinions or adapt them to your own or completely reject them.
And this is based on experience I've had working for Blizzard and on some of their games at 343 and Halo, and now working at Activision in general.
So that's kind of where I'm drawing my background from.
We all have different backgrounds that you can, big part of my talk is like, I'm gonna talk about some tools and then you guys would adapt them to your own games.
Here's the outline.
I'm gonna start with a little bit of design philosophy influenced by my background.
give some definitions, and then just cover in order skill, matchmaking, and ranking.
There's some design philosophy.
It kind of starts off with this idea of easy to learn, hard to master, which is a value probably a lot of you have heard before, which is very similar to this game design, at least for me, to a classic Stephen R. Covey, like his second habit, if you've read Seven Habits of Highly Effective People, which is begin with the end in mind.
So start designing, thinking about what are people going to do when they finish the main part of your game or the campaign or the progression system in your game.
How are you going to get them to keep playing, which is very similar to something Rob Pardo said at AGC 2006, which is the way Blizzard was designing their games was that they first try to add years of replayability.
That's the first thing they do.
And one way to add replayability, at least in my mind, is to add skill depth.
You make it so there's still things for players to continue to learn years and years into your game and to get better.
And.
that goes, kind of dovetails into skill and matchmaking because good skill-based matchmaking allows you to have skill depth in your game without making it so you're hurting players that have not yet gone into the depth of that and learned all the amazing things about how to play that game.
And ironically, less skill depth can actually make it harder to matchmake.
It makes your game less predictable.
It makes it harder to find who the good players are.
So they're still there.
They're still dominating.
But they're getting randomly beaten in cases that are unpredictable.
And so it's harder to find them.
Another kind of design value I've cultivated over the years is even if your core audience of your game is small, it's dangerous to ignore them because they have a loud voice, and the mass audience, even if they don't play the same way the core audience plays, tends to listen to the core audience and judge your game by their opinion rather than going to your website and reading what you try to convince them of.
So it's important to engage your community and your core audience in that.
Another value, again, talking about audience, and this is definitely an exaggeration, right? But it's the point that you should consider your audience. And it's like I'll present some tools and some ideas. And this is definitely wrong, right? It's just a joke. But to stick with you in your head, that this presentation contains some tools.
but you should really think about your own audience.
Like what I'm saying is based on my opinions and my experience, but you all have your own games and your audiences, and when I work with teams, I make sure to really try to understand and talk to your multiplayer designers and figure out what your audiences are like, because different gamers have different passions, and so some of my stuff will be completely wrong for you, but it's hopefully the way I'm thinking about it and presenting it will help you to adapt it to your own audiences.
All right, so here's some definitions.
And these are three overloaded terms probably, skill, matchmaking, and ranking.
So I wanted to kind of go through how I define them.
To me, a skill system is simply any way of figuring out how good your players are.
That's all it is.
That's the skill system.
Could be lots of different ways, and I'll talk about that.
Next is a matchmaking system.
That's just putting players into matches.
A lot of that is just really hard engineering with dealing with larger, small populations and getting them into the matches.
It may or may not use a skill system.
It may or may not need to know about your ranking system.
But definitely will influence your skill and ranking systems, and I'll go over that.
So it's important if you do want to have skill systems and ranking systems that you consider your designers and your engineers that are working on those systems should be communicating with each other.
And then a ranking system is okay, because I have a skill system and maybe now I know how good my players are, should I actually tell them how terrible they are or do I tell them something else?
And this might use a skill system and it might not use a skill system, but they are three separate systems and your audience is gonna tell you how to do that.
So now I'm going to go over each of these pieces from my point of view here.
So first, the skill system.
What is it?
Again, like I said, it's any method you want to use to measure player ability.
And ideally, it's predictive.
Ideally, this method you use to measure skill lets you, in the future, predict what's going to happen in your matches.
And why do you care about a skill system?
Maybe you're going to use it for matchmaking.
Maybe you're going to use it for ranking.
Or maybe you just want to understand your players and how skill is spreading out in your game.
And maybe you want to understand how deep your game is and how much skill depth it has.
And that's something that being able to measure skill in your game can help you with.
So let's talk about some skill systems.
So there's simple stats you can use for skill.
In like a shooter, there's kills per death, there's score, things like APM, to kind of measure, some are better than others depending on your game.
And they can actually help you figure out how good your players are.
Although, just as an aside, before I get into the matchmaking section, skill can have matchmaking interaction issues.
So if you find that, hey, kills per death is a great way to matchmake in my game, and also I really wanna rank on kills per death so players can see themselves.
Well, it turns out if you matchmake really well on kills per death, everyone ends up with the same kills per death in the end.
And so now you can't really rank on it, or very similar kills per death.
So if you really feel in your game that I want to show players their true kills per death, Instead, you need to match make on a representative cross-section of your population to make sure that there are true kills per death ratios coming out of that.
Another type of rating system you might have heard of are, or sorry, skill system or rating systems.
And this is where we put a magical number on the player.
And that's ideally predictive.
I can compare two players' magical numbers and come out with some guess about how they're gonna perform if they play against each other.
This is where you see values like 1500, or in other systems you may see values that are really simple like minus 2.5, 3.2, things like that.
So if you've heard of skill systems, you may have heard of ELO.
In fact, ELO is not a skill system, it's a rock band.
Sorry, this is a pet peeve of mine.
It's a common misnomer.
I have heard of a guy, though, named Arpot Elo, who was a physicist, a chess master, developed a great rating system kind of before 1960, good for its time.
I think the core model he used is still a pretty good core model, though it wasn't his.
Like, if you want to get really geeky, it's even older from some...
I'm going to get it wrong.
It's like cognitive psychologists back in the experimental psychologists back in like the 1920s.
I think it's inefficient by today's standards.
I don't think it addresses all today's needs.
I know a lot of people shoehorn it into their needs, and that usually makes it even more inefficient.
So what is a good skill system then?
I think it's one that finds players' skills super fast, especially if you need it for matchmaking.
If in your game it is important to have good matchmaking, then being able to separate the good players from the bad players fast is important, because the players aren't going to stay around too long if that's the case.
And I also think it should predict match outcomes correctly.
So if you give me two players, A and B.
hopefully your skill system will tell you how often player A will beat player B.
And hopefully not only will it tell you how often, hopefully it's right.
If your skill system is saying 75% of the time, and you have A play B 100 times, then A should win 75 of those times.
It should give the right probability.
Some people get excited that their skill system gives probabilities, but never go to look and see that they're actually giving wrong probabilities.
And this is important because you should know what your skill system is doing.
And this is what I mean by super, super fast.
So the state of the art that I built recently has this type of comparison.
This is from actual, like, real data simulations.
This is the difference.
So the dotted line is this player's actual skill.
And then what I have on the bottom there is how many games these players are playing.
So this is supposed to show you how fast it takes the different methods to find out your skill.
So if you just naively grab something like Elo, you're gonna have a gap of about this type of situation where it's been 100 games and Elo still doesn't know how good this guy is, whereas a state-of-the-art system should get it within a few games.
That's just to kind of show that contrast.
Not that I hate Elo.
And then, the other thing I mentioned is it's important to make sure it predicts correctly.
So how do you do this?
Well, you get a set of matches that were not match made, because that actually biases it.
And I won't go into all that math and reason, but I'm just telling you, get a set of matches that were not match made.
Run your rating system, whatever one you picked, after each match.
And then when you do that, that rating system should provide you with a probability that team A was gonna beat team B or whatever you have.
So you want to record that probability for each of your matches.
And then for every little probability, you bin them.
Let's say just, and that might sound complicated, but let's say you just pick every time I saw 75% chance of winning for the better team.
Plus or minus like some small amount, .1 or maybe 1% or something.
Every time I saw that, I'm gonna look at all the times I said 75%, and then count up how many times the better team actually won.
And that'll give you a percentage of, there, there you'll get, say there were a thousand times I saw.
I predicted 75%, and out of that, 749 times the better team won.
That means your system's kind of calibrated pretty well.
And so you do that for all percentages, and then you plot those, what you predicted against what you actually saw, and hopefully you get something like this, if it's a good rating system.
And I'll tell you that this is possible in almost every game, well, at this point, every game I've worked on, which is a pretty broad range of games and genres.
I want to know that my predictions are precise.
Maybe that's just me, but I want to know that if I'm saying 80%, it is 80%.
And why?
Well, let's look at an example of when you're wrong.
So in this case, this is called, to me, from my mind, overestimating how important the skill gap you had in your game was.
My system is saying, in this case, hey, there's an 80% chance that player A is going to win.
And so I'm not going to match make these two guys.
I'm going to make them wait and find somebody else.
But it turns out it was only a 65% chance.
So you're making them wait longer than they really need to for this match, at least if that's important in your game.
And you're going to lose players because you're making them wait too long.
That's the danger of overestimating.
And arguably even worse perhaps is underestimating.
In this case, I'm saying, oh, it's a 55% chance that A is gonna beat B, so it's not too uneven, let's go ahead and let them match.
But it turns out it's actually an 80% chance.
So now you're gonna lose players because you're throwing them into lots of games that they can't win.
You won't lose the other player because he's winning a lot, but the one that's getting beaten might not be too happy.
So that's why it's important to kind of get this right, to know how your system's calibrated.
Don't just use the rating system and actually understand what it's doing.
Now, another nice kind of aside about all this is it's kind of nice if you go ahead and make a histogram of all your player ratings, all these numbers you created, it's nice if it fits like a bell curve, which is also called a Gaussian or a normal distribution, because this tells you what skill looks like across all of your players. And if it's normal, you can take little cute shortcuts like I can tell a player's relative rank or what percentile they're in just by knowing their number. There's functions you can find in Excel for that. I won't go into all that, but it's pretty easy.
I can also do interesting things like make fake players.
So I know what my player distribution looks like.
So I can make a bunch of fake players by sampling from this kind of histogram.
And now that I have fake players, and I know that my skill system does a good job of predicting who would win matches, I can create fake matches.
And being able to create fake players and fake matches is extremely useful if you're wanting to test ranking systems, matchmaking systems, or just debug your rating system.
It's pretty helpful.
And this is an example of actually some real data of like almost 2 million players, 2 million matches around.
And the black line is what the players actually looked like.
And the red line is what a true perfect normal distribution would look like.
And it's pretty close.
Again, this is convenient.
It's not 100% necessary, but it is definitely convenient.
It lets you sample, lets you do lots of fun stuff.
And I'll say from experience again, I've worked on a lot of different games and I'm getting lazy these days because it always looks like this.
It's not exactly this.
Sometimes you have to do a little bit of shifting and scaling, but it's so pretty close to this.
And so when I look out in the audience now, I see a bunch of bell curves, I'm sorry.
And so now you're probably wondering, well, how do I do this and get this amazing, it's not that amazing, but how do I get these skills off players?
The method I use, well, usually is like Elo's method, it's just better.
So if you're used to what Elo did, then you have some familiarity with it.
Ratings go up when you win, they go down when you lose.
The amount that you go up and down depends on the strength of the opponent that he was playing against.
I think ELA is probably too slow.
Don't worry about the math on the side, it's just a picture.
But a good place to start reading is a paper called Online Bayesian Ranking.
They do kind of a survey on different rating methods and have some good proposals.
I wouldn't say read that paper and immediately implement it into your game.
I would say make sure you or your engineers understand how it works because there are subtleties and there are constants to tune that definitely affect that curve I was showing you on how precise your method is and how calibrated it is.
But it's a great place to start reading.
So now let's go on from skill to matchmaking.
And like I said, matchmaking, a lot of it actually really is just really good engineering.
There's a lot of really hard networking and plumbing problems that need to be solved, depending on the size of your audience.
And it could be big or small audiences, both bring their own unique problems.
And a lot of that's just putting these players together, getting them to play.
And so like, I sometimes offend our engineers when I'm like, this game doesn't have matchmaking, when they just spent like two months putting in like a really complicated system to handle millions of players or whatever.
And I'm just meaning skill or something like that.
So design is still important though in matchmaking because designers help decide how you prioritize putting these matches together.
Is skill the important thing for your game?
Or is it veterancy?
Like players don't like to play against players that have been playing for years.
Is it, are there social elements you'd rather matchmake on so that players create relationships and play your game longer because of those?
Or is latency the main thing?
That your game is so twitchy or so reliant on having low latency that that trumps everything else in your game.
It's just not a good experience regardless of skill.
Other things that design should be thinking about doing is, what do you communicate to your players while they're waiting for their match?
And this is actually, it turns out to be a pretty important thing because if you show them absolutely nothing and they're waiting around, they're more likely to think something's broken and quit out and actually it hurts your servers and hurts matchmaking overall usually when you do that.
That's more of an engineering thing.
Engineers could tell you better what the problem with that is but restarting searches over and over again.
And so, but if you can show them, hey, it's gonna take about this much longer, or this is how long you're waiting, or hey, we're searching for players within the skill gap, or we're searching for players, we found this many, we're sampling through them, all kinds of interesting things.
Players really like that.
It just shows them, you wanna show them something all the time so they feel like something's going on.
And the other thing designers can help decide is how long should players wait for a given drop in match quality?
I think that's kind of an important thing for me, actually, when designing matchmaking is, let's say, skills are the important thing. If you're going to give a player a bad skill-based match, then they should feel like they waited, and they should get used to it. And they waited a long, sort of a long time. And what that is for your game is different across every game. For a shooter, it might be like 30 to 40 seconds. For like a mobile, it might be six minutes or something like that, or a few minutes. But once you've players, whatever it is for your game, once they feel that, wow, I've waited, then it's probably okay to give them a match. Because they know why.
So ideal matchmaking. The designer ideal is probably to put players in games that are fun and maybe have some kind of like planned experience with varying intensity. It's kind of a classic design philosophy that don't just have all super tight matches and all really whatever. Have some hard, some easy and have it go up and down.
And you got this like business idea, right?
Like the holy grail would, hey, can I put a long-term monetary value on every possible match I'm going to make per player, and then matchmaking the matches that maximize that value over time.
And I don't think anyone knows how to do that yet, but that'd be amazing.
And also to keep the most amount of players in your game having fun.
Some realistic proxies we use are things like skill gap and churn analysis and stuff like that.
The idea being like we don't necessarily know what fun is or what it's going to be for this match, but we kind of know what it isn't.
Another important thing is.
One of the things that really hurts matchmaking in general is if you have too many buckets, too many game modes, too many ways to segment your population. So ideally you find ways to not have too many ways to segment and break up your population. It helps improve the matchmaking quality. And some suggestions for ways to do this are, for example, if you're the type of game that has a bunch of game modes players choose from, instead of having a list for every mode, have like a main list they pick from which has some of your main modes in it that are the most popular or the way you define the way to play your game. And then have maybe one or two of those. And then have a couple of rotational modes, lists that you change every day or every week. So players kind of know that that one mode they really love and they're really mad you took out is going to come back. And when it comes back, they jump in and play it. But not only them. The players who usually wouldn't play it, they'll play it because, hey, it's available today. I've never played that mode. So they kind of have some win-win there.
And then if you want to get crazy, you can go with things like let players just thumbs up and thumbs down, whatever they like, and let the matchmaker do the work, and try to optimize some difficult function over getting the player into sort of a match he kind of likes.
Just as an aside, when you're working with your engineers on this, I just give some advice that not to design a hard rule system where like it's only this type of game mode or this type of map all the time. It saves a little bit of heartache if you let it be more of a soft value. So you can say, hey, there's a 50% chance capture the flag comes up next. And then if the designers really want it to be 100% capture the flag, they just set that to 100. It's just one of these ideas of not having these hard rules and causing weird exceptions.
stuff like that. I get that from engineers, so that's what they tell me. So it must be right. Another interesting point here is.
So matchmaking has evolved over the years.
Like the old school matchmaking back when you used to play on your PC and you fire up some game like Return to Castle Wolfenstein or whatever.
And you would do the matchmaking.
You go to the server list, probably start by ping, pick the top one, or maybe look at some of the settings, what they call it, or whatever.
And so that evolved to kind of more modern online console gaming, where instead your game says, hey, matchmaking service, I need some games.
It sends like 50 of them, and it automatically sorts through that list and tries to find one.
And then there is the evolution to no, I just say, hey, matchmaking service, I need a match, and it sends me back one match.
And that's what I'm talking about here with global optimization.
Some games already use this, so some of you this is like no duh.
For some of you it's like, oh, we've never tried this before.
I've been on a few games where we've shifted from the old way to the new way, and it actually seemed to make a bigger difference than I expected.
Because it's easy to do a little bit of envelope math and figure out, OK, it's going to be a subtle improvement.
But actually, in practice, it was nicer.
I will make the comment, though, that it's kind of hard to directly compare those methods.
Because people don't usually build both of them for a game.
There's not enough time to have both the old way and the new way online in one game at the same time to compare, because they're both expensive to build.
So I think it's better, but I really don't have a whole ton of data to show it.
So I mentioned this a little bit before, but if you're doing, matchmakers are complicated systems, so it's pretty good to QA them, to test them, make sure they're working right.
And one way to do this is, again, I have a model that I already know is pretty good at predicting.
I already know what my player distribution looks like, I can predict outcomes, so make a bunch of fake matches again, and matchmake, so put these players in with their skills, matchmake them, and then run the model on them and see if, if your matchmaking system is working correctly.
And you can use that to test matchmaking, which is more of a debugging thing.
But you can also use it to test ranking, which means both testing the ranking model you picked or comparing ranking systems.
And we'll talk about that in a minute, but it's a good way to, you can do a lot of things this way.
You can do both design and testing.
And so this leads kind of into measuring.
So you've got that, a few different parts of measuring when you're doing matchmaking.
First, are you predicting right?
And I've discussed that already.
Make sure those probabilities make sense.
Because otherwise, who cares if we're using these values in our matchmaker if they're wrong.
So second, okay, I know these ratings are right, but are we actually using them the right way?
And this is mostly for debugging, so this is just an example of one way, a very simple way to say, hey, is my matchmaker doing what I told it to do?
So let's say you're matchmaking on skill in this case.
So what I'm graphing here is a histogram of the skill gap.
that of every match I'm seeing in my system and how many gains I've seen at that skill gap.
So if you're matchmaking correctly and tightly, this should be shifted, kind of like this is, up close to zero.
The closer to zero, the better in theory, if you think that super tight matchmaking is important.
I drew an arbitrary line here, and I called this the point of which matchmaking beyond this is a bad match.
And in this case, it's about 3% that are bad.
and this is to contrast with something like this, where in this case 16% of the matches are bad.
It looks still a little shifted over to the left, but that's because if players are normally distributed, most of them are near the middle, so just completely random matchmaking actually isn't terrible.
But that 16% of the players, if you have a type of game where skill matchmaking isn't important, they're gonna be pretty loud and pretty mad about it.
So it's not great.
You still don't wanna necessarily get away with this if you feel it's important for your game.
So there's an interesting thing I've noticed, like, working with a little bit alongside sandbox teams sometimes.
And by sandbox, like the guys that balance and design weapons and abilities and things like that.
I've seen sometimes where they will create a new sweet ability or some new weapon.
They'll go playtest it.
And then, like, the few of the awesome players that are in the playtest just dominate everybody else.
And because they're getting dominated, the design will step back and say, no, we can't have this ability because, like, good players are just going to destroy all the weak players.
Instead, you can actually keep those sweet abilities in there if you're matchmaking correctly.
Because then the players that master those abilities aren't going to get matchmade against players that don't know what to do against them.
So you can have the players that have mastered those abilities having a great time using them against each other, whereas those that haven't aren't going to get dominated until they get good enough to play against those players.
So that way you don't need to remove stuff that's going to add skill depth.
You can keep it in and embrace that instead for your game.
And.
Yeah, so that's again going to depend on you personally, the type of game that you're making. But this is just an aside that it enables this. All right. I'm going to move on a little bit now to talking about parties because this comes into playing a lot of games. Sorry. So usually we can't let you play with friends. This is like a common idea. Because, hey, if I let you play with your friends, you're just going to dominate the people that aren't playing with their friends. So you've got a party of four. You're just going to stomp over all the guys that aren't in parties of four.
So then we say, well, okay, the solution to this is fine.
Instead of, we just won't let you, when you play with your friends, play against people that are not playing with your friends.
But then you get something like this.
You end up with much longer wait times because there are less people playing in parties.
And if you're just getting together randomly with a few friends that happen to be online, you're gonna get destroyed by these players that are usually playing as parties and have a lot of experience doing it.
So that's not a great experience either.
So a common solution, not a common solution, one of the solutions I've worked with in the past on this is instead of tracking skill on each individual player, when you're in a party, I put a skill in the party.
So now I know exactly how that skill's gonna line up with a group of people who are not in a party.
And I've done this in games, and it actually works out really well.
And you end up with really even matchmaking between the two teams.
It doesn't solve the perception issue, so if people in your game really don't like the feeling of having to go up against a party, it's not going to fix that for you.
But in a lot of games, it will make the matchmaking even.
Okay, so, and that's important because it opens your matchmaking pool.
It means that, hey, when a really poor team comes in but it's a party of friends, I can matchmake them against a decent group of people who are not in a party.
And that way I have an even match, rather than having to try to make this party wait longer.
This party of friends, and playing with friends is almost always more fun than not, but I don't want to make these guys that are having a good time together wait longer for a worse match or things like that.
So you can, now you can play with your friends.
But now you can't play without your friends.
This is another problem you can run into without that same solution is, you play with your friends for a night, your skill kinda goes up because you've actually played, some people do, played better when they play with their friends.
And then when they go to play the next night, first it's not as fun because you're not with your friends anymore.
That's usually much less fun.
And then when they play alone, their skill's been inflated and we're giving them harder matches.
But they don't know this.
All they know is now they jump into matches that are harder and they're having less fun and they say, I'll come back when my friends are online.
And then you kinda lose people that way.
So again, the solution is to track the skill of your friends together, so whenever a party jumps in for matchmaking, you create a new skill just for the party.
Maybe you do something smart and kind of bootstrap that skill based on some history you have of those players and other parties when they play alone.
And you try to adapt quickly using your skill system.
And it fixes all of the balance, it usually fixes all the balance problems.
It doesn't, again, doesn't fix that perception.
All right, so now I'm gonna go, I went and talked about skill, matchmaking, now I'll segue into ranking systems.
So again, we know how good these players are, what should we tell them?
And this is going to depend on the game. Like, depending on the type of game you have, how competitive it is or what systems it does or doesn't already have. And I'm going to talk about three different types of ranking systems for now.
Progression systems, hybrid systems, and then straight up skill systems. I'll make an aside that you may have a game that you love the ranking system in and you just want to copy and paste it into your game. And I would say don't just do that.
Take inspiration from that other game. But think hard about how it should be adapted to your own game.
So let's start with progression systems.
So you've all seen probably a lot of progression systems.
I'm not an expert in progression systems.
There's a lot of awesome designers out there that are great at making leveling systems and unlock systems, usually based purely on time investment.
Better players go through a little faster, but mostly time investment systems.
And these are often for recreational play, definitely not a measure of skill, it's veterancy.
I will say that there's something interesting about these depending on how you design a loading screen. So loading a screen is a screen that comes up while you're waiting for your match to start and you see all the other players. If your game only has a progression system and it's not matchmaking on that progression system, some games you see this in that you'll have this very disparate ranks from this progression system in it. And players will look at those and wonder why am I being match made. I'm a rank 2 and there's all these rank 35s or rank 70s in this match. How is that an even match? You have to be careful about what you put on your loading screen.
And my philosophy as a kind of a purist, if you guys haven't gotten that view of me already, is don't put anything on there that doesn't actually go into the matchmaking.
At least don't call it out clearly.
Some games have such messy loading screens that it's probably OK.
But.
But some make it a little too obvious that you're not matchmaking on the thing that you're showing me.
So this is as an aside.
And yeah, so you guys have seen these systems in RPGs, in a lot of popular shooters.
But again, I'm not an expert on that.
But that's just one example of a ranking system.
Another is hybrid systems. This is where you're like, I want to get the feel, at least partly the feel of that progression system in my game where I'm kind of leveling up for a while, but I want to have a skill component.
And so these systems get pretty complicated because they're trying to kind of take two kind of different concepts and put them together.
They're usually pretty tunable. There's a range between ones that are kind of skill based and ones that are more skill based and more skill anchored.
Usually losses can move you down.
And by skill anchored, I mean there are some of these systems out here that you can start at one and you move up to 50 or whatever it is that will say, okay, but we won't let you get any past rank four unless you behind the scenes really are some skill. And so in my opinion, and some games don't do that. They just say, nope, you can go as far as you want as long as you can win matches, whatever. So in my opinion, again, this is gospel according to Josh, is that these are good for games that have no other progression system in them. So you know, we're going to combine both. Kind of a cost analysis type thing.
They're good for games where the competitiveness of your game maybe isn't known.
You kind of think it's going to be competitive, you want something in there though to get them some ranks, so you go with that.
And also maybe for games that are, everything else in the game is an RPG, so this should probably also be an RPG.
It should also feel like I'm leveling up.
That kind of makes sense.
I think it's questionable for a game that already has an amazing progression system on one side.
and then you put this other progression system on the other, because to me, those systems become a little too similar.
And again, as a purist, I'm like, if I'm gonna design a completely new system, I like it to feel unique and different than the already existing system.
Otherwise, I feel like it's just gonna become another grind, and players will kind of forget about it.
So other issues that you'll run into with hybrid systems is ranks end up being kind of meaningless, except when you get near the top, because everyone's starting at the bottom and moving up, and they're not really separating much until they get near the top.
And with this type of system, you end up with both pre-game kind of loading screen issues and or matchmaking issues.
And I say and or because sometimes you have to pick one or the other.
If you know a player's skill, for sure in the back end, you might be tempted to just match make on that skill, despite what your hybrid ranking system is currently showing.
It's showing him as a rank one, but I know he's actually more like a rank 20, so I'll match make him against rank 20s, because that's a fair match.
So that gives you good, better match making, but now you get that loading screen issue where I'm matching making a one against a 20, and that's kind of weird.
Or on the flip side, you can say, no, I'm going to only matchmake 20s against 20s, ones against ones, whatever.
But then in your early ranks, you end up with matchmaking issues.
Because now, in the early ranks, you have all kinds of players.
And if you're matchmaking all kinds of players together, you're going to have mushier matchmaking.
And also just the idea that if you start off in a progression system and at some point you hit a wall, that can be, in some opinions, a little bit confusing for the players.
So these are just some of the issues with hybrid systems.
So, right, some hybrid systems, like I said, will still have an actual skill on the back end.
And this slide's kind of about that loading screen issue, where hey, I'm showing why am I at 1500 against a 2200, that doesn't make sense.
But on the back end, we're both at 3.0 in skill, so it does.
And so the 1500 is wondering about why he made this match.
It's kind of an artifact.
And in past games I've worked on, this problem has been kind of solved by just showing the average.
back end skill rating of both teams.
So they see it is an even match, even though the rank isn't even.
And in some games it works fine.
It depends on how numbersy your game is and how much players like engaging with that kind of thing.
But it is still a little awkward.
Alright, so now moving from hybrids onto just pure skill systems.
So in this system, ranks are tied to skill.
If you want to get a rank, you need to actually have that skill.
There's no progression, moving up and down.
We focus more on your current ability and your placement rather than progression.
And this is good for clearly competitive games, e-sports focused games, or a part of your game that's more competitive or ranked.
I think they're good for games that already have a really rich progression system and can use something unique and competitive for the players that want to engage with that.
And the other thing I think that I like to do in a skill system is make them transparent because the audience that engages with this kind of system really likes transparency.
And the part of your audience that doesn't, doesn't care anyways.
So make it transparent and don't worry about the parts of the audience that don't.
And I'll say yes, ranking systems are always more stressful.
That doesn't go away.
But I don't know if I believe these days that being kind of care bearish with your ranking system is gonna save you anything.
Your game already is competitive and ranked at that point.
So, it'd be nice if we could actually look at what this looks like as a player experience, these kind of different systems, without having to actually ship a game with it first.
And we can because, like I said, okay, I can create fake players now.
I can match make them.
I can choose the outcomes of those matches correctly because I know, you know, 75% chance team A's gonna win.
Well, I'll flip an unfair coin and if it lands on 75 or whatever, then the better team wins.
And then I can update the visible ranking system because the team just won a match and some people just lost.
And I can gather those results and then I can graph it over time.
So I can see where does your rank go over time by simulating it.
So let's say we decide to use a raw skill system, like just some pretty raw numbers here.
You probably pretty this up as a designer, but this is what a simulation looks like in general if you had a raw skill system.
This is showing different kind of archetype players that I pulled out where I knew their skill because I created them as fake players and then I ran them through the system. Each of these lines does not represent a single player. It represents the median experience across hundreds of players that were at that skill over time.
And so you'll notice in a pure system like this, we immediately quickly tell the player how good they are, separates right away, and we know right where the good, average, and bad players are, and we can matchmake really effectively, because there's no overlap here.
And so that's why I say there's 98% good matchmaking.
I picked some arbitrary line for that 98%, but that's pretty nice.
Now let's contrast that with an inflationary hybrid system.
This is someone, everybody kind of goes up over time.
Some, there is a skill component.
And what you really want is the better players to move up faster.
So if you make a system like this, you get this kind of fun experience where like, hey, I'm progressing over time, I'm making up.
This is kind of fun.
but you'll notice that the matchmaking quality went down from like 90%-ish to like 69%.
And this is because of the effect I alluded to before.
So if you look at rank 10, look at the type of players that are sitting at rank 10.
You've got good players that have played maybe 25 games.
You've got average players that are sitting at around 50, and then you've got bad players that are pushing 100 games.
But they're all at rank 10.
So if you match make on rank, which, hey, if you're gonna make a complicated hybrid system, you might as well make it, because usually you do this for more kind of simplicity and making it more clear to the players what you're doing.
You're probably gonna wanna match make on that system.
So you match make on rank, and then now you've got bad players playing against good players, and of course the match making quality goes down.
So, and also you can see that also makes the ranks at earlier levels less meaningful because you've got everybody at those earlier levels.
So you might look at this and say, hey, there's enough information here though to tighten up this matchmaking because, well at the very least I can matchmake on the number of games played within a rank and then I get really good matchmaking.
or maybe I keep a raw skill in the back end, I know how good these players are, so let's match make on that raw skill instead.
So I said, sure, let's simulate that, let's see what happens if we just match make really well.
And the truth is, yes, you can get great match making.
But if you'll notice, what's happened now is all three types of players are winning just as often.
And because of that, good, bad, and average players are all moving through your system at the same speed, and you can't discern them apart anymore.
And this is kind of bad because now you've made this really complicated hybrid ranking system, but your matchmaking is completely undone it. This is also what happens, anecdotally, if your designers go off and make an amazing ranking system and your engineers go off and make an amazing matchmaking system and they never talk to each other. Because your engineers are going to make sure that you get tight matches, your designers are going to make a nice progression system and then this kind of thing can happen.
So I would say you kind of remove the point of your you don't have a skill based system anymore If you think this is right for your game, don't make a really hairy hybrid system make another Leveling system use your XP guy to help you out and progression guy and just tell the players. It's a ranking system Maybe I don't know that might be like tricking them too much. They might catch on that It's not really skill based, but this is definitely not skill based anymore Okay, so I've talked a bit about what a progression system is.
I'm not an expert there.
Some of you guys probably are, so I'm not gonna go much more into that.
A hybrid system is a mix of those.
So instead of going more in depth into those two, I'm gonna talk about what I think are good attributes of a skill system.
And I'll leave hybridizing as an exercise for you based on what you guys maybe know better than me about what a good progression system is and what I think, at least personally, is a better skill system.
So again, my personal philosophy, you guys know this really quick, I'm kind of a purist, for better or for worse.
Like when I work with game teams, I talk to them a lot about what their audience is, whether or not this is right for them, but my feeling is if you're going to go with skill, go all the way.
Because like the players who like skill-based systems, they're going to love it.
And the ones that don't, they're not going to engage with that anyways, they're going to ignore it.
So like you don't want to cater to them as much.
So go all the way.
It's nice if your skill system has a link to the pro players.
If I can look at the skill system and see at least the pro or kind of top amateur players near the top are the same as the pros that are playing in the real tournaments and things like that, live ones, then I'm going to know as a player what I need to do to get up there. I'll have a good feeling for that. Yeah, sure, it's kind of fictional. Most people are not, of course, not going to get there. But at least I can, you know, kids can tell their mom, hey, I can win a million dollars if I buy this game and play it enough.
It's also not about, it's about your current, so I like skill systems that are, players focus more on their current skill position, not their progression.
So I like things like placement matches.
So like instead of you starting at one and moving your way up, I say, you know what, play 10 matches, play five matches, and afterwards I'll tell you what your skill is.
And you've seen that in probably a few games I've worked on or games that have liked that concept.
The interesting thing about this as an aside, if you look, when we went back in these games that I played, looked at our data, players tend to play the placement matches.
Players that you wouldn't expect to be as engaged in PVP in your game will also play the placement matches, because it's like opening a prison.
I found out what my skill is.
And they will tell you that the game they played after they finished their placement matches was amazing.
It was way more tight than the one before.
Even though usually, if you did your skill system right, it's probably no different.
But that's a perception thing.
So like, some of these issues are definitely perception driven.
Okay, so.
Moving on from placement and position. I like games that have broad meaningful ranks for relatability.
So instead of lots and lots of numbers, I like when you have, so you guys have seen my systems, I like things like bronze, silver, gold, platinum, things like that.
And I like that because players can remember them better and also because, I'll show you in a second what the skill spread usually looks like.
It lets me spread out the skill of the players such that the difference in skill between one chunk and another chunk basically 3 to 1 odds if those guys play against each other.
So a silver player will beat a bronze player three out of four times. And this is cool, I think, because those players start to identify and feel what that means like, what that feels like. A silver player knows what it's like to play a bronze player and he knows how hard it is to play a gold player because you've designed the system with that in mind.
Because, again, going back to my skill slides, you know how to predict the outcome of these matches based on your skill system. So I like those kind of broad, chunky gaps. But on the schizophrenic side, I like high personal granularity for each player to see movement. So when you compare yourself between players, I like the chunky ones.
But I also like to give players enough granularity so they can see themselves moving. And that's going to depend on your game. Some games, your players want to see movement every single game. Others will be every few games or whatever it is.
So this is where you add things in like tiers within these chunky groups, numbers, some small sub-goals.
They don't really, they're kind of meaningless to compare players within those chunky groups, but it's nice for the players to see something.
Okay, another thing I like for Skill System is an endless ceiling for the pros.
So at some point...
You break out into raw numbers and they can go up forever.
They don't go up forever because in order to go up forever, you'd have to have someone who is infinitely good player.
You definitely get players that are better, but they're never infinitely better.
And what I mean by that is the very best player in your system is gonna beat the next best player some amount of time, three to one, four to one, whatever it is, that defines a skill gap and that player won't be able to push much past that skill gap if your system's calibrated right.
And again, I told you I like transparency.
Anyway, this is kind of how I design these school distributions to look.
Or this is one way I like to do it.
If your audience is a bell-shaped curve, you can slice it up, in this case I sliced it up by what's called a standard deviation.
So if anyone knows about normal distributions, they're often talked about in terms of the number of standard deviations moving out from the middle.
So the middle here is zero, and each line is one, plus or minus one standard deviation away from the middle.
And the nice thing about that is you can usually tune your system such that one standard deviation gives you that three in one odds that you want.
So this is something you'll commonly see in games that I've worked on.
and it gives you those broad, chunky ranks that players relate to and they know what they mean when they play against other players. And if you kind of get all these things right and you're really lucky, you end up with a system that feels really good because it has integrity. Players trust the ranks in your system. They see where the pros are. They see where they are.
And you get this kind of thing here.
where like because as I play this game, I'm getting genuine feedback about my improvement.
So the stickiness now is competitive stickiness, which is I play a game, I go off, I learn something new about strategies in this game, I apply it and I actually see my rank go up because of it.
And that makes me excited.
And usually you can go on YouTube and Google and search, like type in your favorite game, promotion reaction, and you'll see movies like this that are exciting and meaning that you kind of did the right thing.
So.
That actually is the end of my presentation.
So we probably have lots of time for questions.
I do.
A quick question about comparing client-based matchmaking versus service-based.
You mentioned one model where the server sends you a list of games, and you pick one, the best ones.
And the other model is a server.
You just ask for a game, and it just gives you the better one.
Can you compare the two?
You say you can do a direct comparison, because usually titles use one or the other.
But in your experiences, is it more?
Is it like, could you compare the two?
Yeah, so in my experience, the server-based approach ends up being better because it's able to see a lot more matches.
And it gets back to your bucketing situation, where giving a player only 50 matches to go through means you're kind of sharding your population already. Whereas the kind of global server that looks at all possible matches and makes its decisions has a lot more information to choose a better match for you. And that's why my experience has ended up in actually better matches than I would have expected. So, yeah, I personally like that approach. It has its pros and cons depending on what is the important thing in your game to matchmake on. So if latency is important for you to matchmake on, ping between two clients.
you need some pretty fancy ways for the server to be able to quickly estimate what the ping is going to be between all these players you have. But if it's skill oriented and not so much the other ones, then you can do some really good matchmaking.
The server-based.
The fact that players can leave if there's a lot of churn.
If there's a lot of churn.
The server-based one.
players can leave as you have the ranking so you really need to be fast with the scale.
At scale can be enough trouble.
Yeah.
So that's where the whole, a lot of matchmaking is a hard engineering problem.
I better move to Tony.
Josh. Great presentation. Congratulations. So since you've been doing this for so long and you've been solving these problems and probably talking to people who have maybe different goals, I'm curious as to if you've ever been privy to any goals or motivation to or particular models for not having a 50-50.
win, loss, goal. We kind of all just accept that. And I'm just curious if having been in it so long.
Yes, I've definitely seen.
both really good suggestions on how not to do it, how to not always be 50-50 and some very definitely biased reasons. So I've heard the like, but stomping noobs is fun approach to that. So let's not give 50-50 matchmaking all the time.
Which depending on your game, it may seem really weird, but there are some games where that is the right thing. Well, it seems to be.
I've also heard, though, the approach where it's still kind of 50-50, but you don't always give a 50-50 match. You give like a variety of matches. So you give sometimes, you have some smart way of saying, no, for this match, I'm going to give him actually a hard match. For this next match, I'm going to give him an even match. For this next match, I'm going to give him an easy match. And that was motivated somewhat by my past experience where I got, I used to run Wolfenstein enemy territory service back in the day in college or whatever.
and we got to the point where the matches were super even all the time and that actually after a while gets kind of tiring.
And so I kind of came up with the opinion that it's okay to allow a little bit of a balance here and there and have a mix of even, hard and easy matches.
So I don't know if that answers your question.
We can just keep talking for the next half hour.
Yeah, yeah, we can.
Hi, I have a question about using a, like so the matchmaking system you talked to, or I guess the skill system you were talking about.
but specifically just predicated on whether you win or lose.
Not quite, you know, but something similar to that.
So my question is, have you thought much about using a more sabermetric style approach to ranking the skill of players?
Because we have so much analytical data that we get back.
from the game and I wonder in particular for, like, because the win-loss approach works really well I think for 1v1 sort of games, but when you have like a MOBA where there's sort of different roles and different positions, like, I guess, just what are your thoughts on sort of going to, because like an example is you could have a baseball player on a really bad team, but you can still like sort of analytically say, okay, this is a really good baseball player, even though their team's terrible.
Yeah, and there definitely are models that we use that account for that, too. A lot of that stuff I can't talk about as much because some of it works really well. But, yes, you can take stats out of the game and if you're a data scientist or working with data scientists, you can come up with ways of either pushing that win-loss system along faster or measuring players in a different way. Yeah.
And so I work on a lot of smaller multiplayer online games.
And I'm wondering if you've had any experience with that.
When does skill-based multiplayer, or skill-based matching, what is the size of the population that you need to have that be effective?
It's going to actually depend somewhat on the game, which is why I talked a bit about simulations. So using this type, a good skill system, you can feed fake players into your matchmaking system of varying sizes and see if your skill system stays stable. One old rule of thumb I used to use is you want about like at a given time when you go to matchmake, this isn't actually just for the skill system. This is more for having pretty good matchmaking. And again, this is a rule of thumb I've used in the past. That may not even be true. But I did notice that when we had at least 40 players, 40 people per the number of players you needed in the match looking for a match at any given time, you could end up with pretty good matchmaking.
So if it's 1v1, that would be 80, because there's two players per match.
If it's 4v4, then that would be like 320 or whatever it is.
So yeah.
Thanks.
Yeah.
OK, so quick question about decay.
What are your thoughts about that, and have you any data?
So what I mean is you presented stuff that looks like new better systems, like TruSkill and that kind of stuff.
There's also this approach of skill decay with glyco, for instance.
And is that helpful?
So you're asking about like, do you apply those systems?
And what are your experiences?
Should one apply for it?
The idea is that the longer you don't play, the more skill you lose, right?
And it kind of makes intuitive sense, because there's a meta game in, for instance, MOBAs.
So the assumption is, if the guy doesn't play for a month, he's going to lose.
downgrading.
Yeah, so I have actually worked with Decay in the past.
He's asking about systems where if a player's not around for a while, you actually decay his rating or he makes an estimate that his skill has changed since he's been gone.
It's pretty tricky to move a rating around in most of these systems without really knowing what you're doing because the algorithms are fairly complex and moving a rating manually requires some pretty good understanding of how the algorithm works. So to go in a little extra math detail, most of these more state of the art algorithms keep track of not only a player's rating but what's called a variance or uncertainty about a player's rating. That uncertainty is like, okay, I know he's like somewhere between 1,500 and 2,000 but I'm not sure exactly what. And over time that goes down.
So if you move a rating, you also need to move that variance.
And in the past I've moved the rating without moving the variance and that was bad. I've decayed ratings. I've made some mistakes decaying ratings. I think in hindsight the decays often worked out pretty well. It just needed more polish. If I were to go back and do that again, I would be more confident given the math I know and understand a little better now.
moving the rating and correctly resetting the variance to the proper value. Or not even moving the rating but increasing the variance. Which means the player comes back and loses his first match but he's okay after that. So, yeah. I'll follow up on that. It seems like the variance is there for is to account for that. Why would you need to decay the rating? The math is supposed to handle that.
So if you've done some data analysis that tells you something exact and you know that when a player's been gone two weeks, I've observed when he comes back, he always drops by this much rating.
If you know that, then sure, go ahead and move the rating.
Because that's the correct thing to do.
Or should you adjust the variance, part of the algorithm to account for that?
Yeah, and you could do both.
You could drop his rating down and increase his variance.
But increasing variance is tricky.
I'm not going to go into how you do it right now.
don't just do it blindly. Super quick question. When you match make on the skill thing, you do it in the chunks, right? You don't do it on the granular. If you're going to match somebody in silver, you match them against anybody in silver or do you do 2200 versus 2300? That's up to the designer. You said you like the chunky stuff. I like chunky for ranking. When I've done skill based match making, I've usually done tightly. It could be more exciting for your game to leave a little bit more variance in there.
the real question was the hybrid system. We're going to go through this progression system and then transfer over. We're sure you're ready. We don't want you to drop or bounce. Can you talk more about that? You were saying go skill. You're worried about people bouncing.
I probably shouldn't talk about LOL because it's not a game I work on or anything like that.
But I'm perfectly happy with games that have amazing progression systems on the side.
And then also have a skill system over here.
And the game designers should know for their game.
So if you're sitting in LOL, it takes a while before they let you play in the ranked, right?
That means that the designers have made some smart decision that in our type of game, it's good to get them through some not as stressful stuff before we move them over here.
And that, I think, is totally cool and awesome.
Yeah.
Thanks.
Yeah.
Hi. I was curious, especially if you have critical mass issues in games, how you sort of weigh the tradeoffs between giving people matches that may not be that great for them but get them in quickly versus having them wait a little longer but get a better match later and how you balance those factors.
So again, my only rule of thumb I've used over the years for that is that the wait time should be like Players should wait until they feel it, whatever that is for your game.
You would understand that better than me.
As soon as they feel it, it's kind of okay to give them a worse match.
So with smaller population games, players are used to waiting longer, maybe like a bit longer amount of time.
And you design that by, usually, by having something in your matchmaking system that has a tolerance for a bad match that grows over time, that's kind of proportional to like the skill gap that you have.
allowable skill gap starts at some point maybe small, maybe big. If your game has a low population it has to start bigger. And then it grows over some amount of time. And then you have to have other interesting edge case things like now this guy's waited forever and what is forever and we need to match make him immediately. That's usually the type of thing to work on. A lot of that has to be decided per game. It's kind of tricky.
So for some games that have different roles, players might have different skill levels depending on what they end up doing. I was wondering if you had any thoughts on how you can match make and determine their skill based on what role they end up playing.
So you're asking about match making. Are you talking about situations where you clearly choose the role or where the role needs to be inferred?
Somewhat both. Like one thought would be like, well, like if you're a really good carry but then end up being support because you don't, how things work with your team. But also just like if there's like hey I'm good at capture the flag and like how much does a loss on. Yeah so there's a lot of ways to handle that. The very dead simplest way is you put a separate skill on each one. The problem with that is it's going to take longer to learn each skill. You're going to need more games on each of those roles or in each of those maps or in each of those modes to learn that.
other more complicated ways are you have something like a base skill and then you have another skill for each of those modes which sounds the same but having that base skill there makes it a lot faster to just learn the offset from that extra skill.
Other ways to do it that may be simpler than that is I have a skill for each of the modes, but when I go to play a new mode or a new role, I kind of look at all my other ones, sort of take an average, raise that variance up, and then bootstrap it in.
So that means I have at least a sane starting position.
Those are the types of things I've done over time that seem more or less effective depending on the game.
Yeah, hi.
I'm interested in the dynamics of skill over time.
So you start off with a population with a given skill distribution, but you had this graph where you had a highly skilled player whose skill was constant, but the bad player is creeping up over time.
So I'm wondering if you see the opposite effect where, so if everyone's normally distributed, then you know, if you're a more skilled person, you're more likely to face someone who's less skilled than you, and vice versa.
So do you see over time that the variance of skill sort of narrows, or do you feel like the variance of skill sort of stays constant over the lifetime of a game?
It's, if you're talking about like what the whole skill distribution looks like, it depends on the game and it depends on often the number of players that you have on the teams actually in my experience.
In a lot of situations, the variance actually goes up over time because the model's wrong.
So the 30 secret of statistics is all models are wrong.
So there are going to be extra sources of variance that you didn't account for that are going to creep in and often cause your variance to increase and sometimes cause your mean to move around. So most people that have dealt with these systems realize that they actually have to have some mechanism to shift and scale correctly over time. I have also noticed, though, in games where you have like a whole team and you're using the team average, whatever, or putting a skill on a team, you're not going to be able to do that.
Or if you're taking a larger team and taking team averages, those situations tend to actually have decreases in variance.
So that still depends on the game.
So the short answer is you need to analyze your own game and see what happens, and then decide how to deal with it.
So I'd like to ask your opinion on how you think rank resets affect.
Models like this in a hybrid system for example so like in League of Legends You were reset a rank once a year right and then all the good players are still getting like a better rank to start at For their you know their journey and then the bad players are given, or like the worst players are just given a lower rank. So they still have a discrepancy, there's a difference. But for instance, like in Hearthstone, they reset it every month. So it causes a lot of, if you're a player who's, you know, legend and you'll get ranked at like, I don't know, 15 stars or something, and a bad player never, it's like rank 10, they get reset at like rank 20, but you'll end up having a lot of players, good players that just don't play for a few days, bad players who do, and then they get caught up in the middle and it ends up with a lot of.
discomfort for bad players. That gets to knowing your game.
And those are problems that those are the type of problems we solve basically. We look at those effects and we try to make decisions and those type of things are going to depend on the ranking system you designed and how it works and type of players you have and how often those players play, how many of them play.
It's one of those problems you have to solve.
Like my opinion on that, I mean, you guys have probably noticed I'm kind of a purist.
I'm not going to go too much more into detail on that.
But yeah, those are tricky problems to solve.
I think they can be solved.
But yeah, with a hybrid system, those are the types of issues you run into in general.
But do you think that maybe you would have just a larger difference in reset?
Like, so if I was a Legend player in Hearthstone and I got reset to rank 15, maybe if I go lower and I set them to rank 12 or something, where they're unlikely to meet up with newer players or just bad players who never even get to rank 12 in the first place?
Do you think there's different ways like that to...
Yeah, so to make a decision like that, though, you'd want to closely analyze...
and just so you know exactly what's going to happen and simulate and try to make your best guess that hey, if we make this change, do we have that positive effect we wanted or does it actually in practice make things worse?
But yeah, I don't have a strong opinion right now not because I'm not on the Hearthstone team, right?
I can't be fair, I'm not going to be unfair to them.
I would talk gladly to Hearthstone, we're in the same company.
But again.
that's your job at your own company, then right, those are the type of decisions this type of talk is going to help you make. But I don't have a one size fits all, I guess is the answer. Yeah. How would you deal with players that might intentionally lose to kind of like, they call it smurfing where you try to play against worse players. There's a couple of ways to deal with them.
My favorite way, so I'll let you guys in on a secret.
Back in the day, I actually worked at a company called eBay doing fraud detection, catching people that were selling bad stuff or breaking into your account or whatever.
My favorite way is to get your data science team to build a sweet smurf detection algorithm and just ban those guys.
because you could try to, and a lot of times you can do it, depending on the game, but there's some games where it's as simple as, hey, the median length of, median game length for these players is only a minute, where the median game length of most legitimate games is 15 minutes.
So, other ways to try to deal with it if you can't do that are things like making sure the variance on the skill never gets too low, which makes the skill move around quite a bit, which is kind of annoying if you're trying to really hone in on skill, on what a player's skill is, but it makes it so if a player does smurf, when they start playing again, they get out of there faster. It's tricky to try to solve it systematically. It's better if you can just detect them.
I think I'm out of time. If anyone has more questions, I'll go hang out a little bit at the West Hall overlook 2022 or whatever. And if no one shows up, I'll take off. And yeah, thanks a lot for coming, guys.
