Again, I'm Graham Rhodes, and I'll be talking about implicit geometry.
I don't know how many of you are familiar with this idea.
There have been a couple of talks earlier today that have shown uses of implicit geometry.
They do show up in games in various places.
How many...
I just want to find out how many of you know or knew before you came here today what what is meant by implicit geometry?
I figured some of you that had seen this before.
So what I want to do, the first slide here, I'm just going to show a few examples.
Probably every one of you have seen metaballs.
This idea of having these kind of spheres in space that when they get close to each other, they morph together.
This is one example of an implicit geometry.
You don't just have an equation that tells you the shape of this thing.
It comes together because of the...
the way these things are defined in space.
Another example here that you do see in games is the use of implicit surfaces to generate the fluid geometry when you have like a water, splashing water in a game, things like that.
The fluid is solved in the background and then there's some technique for extracting a geometry to draw it.
Another example that you may have seen on some occasion is the use of potential flow fields to do crowd pathfinding to avoid obstacles and reach a target.
And this is done by again solving a fluid flow and then extracting the shape of the path from that fluid flow.
So, I want to give you this. The basic idea is that you have some kind of a field function that's defined everywhere in space.
And once you've evaluated the field based on this field function, you pick a threshold value that defines the geometry you want to extract from it.
And I've got the thing down there, using magic to extract the level set.
Well, you're not really going to use magic.
There are just different techniques that you would use to extract it.
You can, depending on the way the field is defined, you can easily ray trace these things or you can use geometric techniques to get real polygons out of the field or lines out of the field to make a shape.
So a couple of different examples there for pulling polygons out or marching cubes or marching tetrahedra, different variations of that.
Another technique is to use a sort of related, but to use an octree to figure out where you have function values and where it's inside and where it's outside of your threshold value.
So I'm interested in modeling with implicit surfaces, not so much drawing or ray tracing, but how do we get geometry out of these things and how can we use them?
So what kind of a function?
makes sense. So here's some examples. We already talked about the fluid flow simulation where you might be extracting a surface based on fluid density to represent the boundary between air and water. You could generate a noise function which would perhaps enable you to extract the shape of clouds that you could then send into your renderer to draw volumetric clouds.
You could use an implicit surface for carving geometry out of a block or adding material for voxel rendering and you'd use an implicit surface to kind of model the material density.
Jim already showed an example of using a sine distance field for rendering simple shapes.
And you could as well just have a texture that has things in it that you want to extract.
So if you're trying to do computer vision on a photograph to extract shapes out of it, you could do that as well.
But what I'm going to talk about here is how do we construct an implicit field using kernel functions.
And the kernel function is really a function that's continuous throughout space so that we can add, we can place them at different places in the field and they add together to give us a continuous field function.
And I'm going to go through and show you a few examples.
This one is a signed distance field.
for a circle or a sphere.
And you can see it's discontinuous in the center, and it's linear away from the center.
Now, one thing about this function is it's unbounded.
So it goes to infinity at an infinite distance away from the radius.
That can be advantageous, as we'll see in a minute.
But it being discontinuous at the center is not really desirable.
Another one is the bi-harmonic radial basis function.
Now this one too is unbounded.
It goes to infinity at an infinite distance from the center, but it's continuous.
So that's advantageous compared to the sine distance field for general smooth function building.
Now this one here is the Gaussian distribution.
Unlike the other two, this one is bounded, so it doesn't go to infinity at infinity or at the center.
And in a way, this is kind of an intuitive one, because if you were to add two of these together, if I were to put another example of this function off to the side...
then you can imagine what it would look like.
And it would look like this.
So if we have three of those kernels placed in space and we add them together, then you get something that looks like that.
And that's very much what the metaballs look like.
This isn't the function that's typically used for metaballs, but you do kind of get that shape.
Now the fact that this thing is bounded in its effect...
kind of makes it not as useful as you might think.
While it's pretty intuitive to model things with, you know, you kind of know what you're going to get intuitively here.
If you had a bunch of scattered points, you're just going to end up with something that looks like this.
It's not going to give you a function that's very interesting across the entire field.
It's not good for gap filling.
It's not good for...
fitting a function to scattered data, for example, whereas the functions that are unbounded, that have infinite support, those are better for filling gaps.
If I have scattered points, then I can fit a function that will interpolate all of the points, and it will give me a smooth function that doesn't have any holes in it.
This one, if we tried to, if we had scattered points on the boundary of a circle, for example, then not only would we not, we wouldn't fill the gaps in between the points.
We'd end up with this kind of oscillating thing that goes around and it really wouldn't look like a circle.
But with the ones that have that infinite support, they're going to fill in the gaps, so we get a much better surface that fits all these scattered points.
So looking back at the other two, the ones that were unbounded, or had infinite support, this is three...
instances of the signed distance field added together.
And you can see how they do kind of nicely interpolate across those three points.
And the same thing happens here with the with the bi-harmonic radial basis function.
It smoothly interpolates across those points.
It kind of fills the gaps nicely and gives us a smooth function.
Now, by the way, these are called radial basis functions because they're a function only on the distance from the field point that you're evaluating and the center of the particular kernel.
So, we can use these functions then to build things that are beyond Blobbys, that are beyond Metaballs.
We can take scattered point data, put these...
kernels at appropriate points in the field and then formulate a set of equations to figure out how strong they need to be and that will give us a smooth function that kind of nicely interpolates our scattered data.
Now, I want to talk about...
I'll give you some references at the end that go into more detail about that process, about the kind of historical approaches that have been used to go about doing that.
But I want to show you one example, and this example is an experiment that I've been doing.
with mixed success, but I'm going to show you a specific way to do this, to take some set of points to figure out what the kernel strengths are and then to evaluate it to look at that function that we get in the end.
And the particular thing that I'm interested in is using fluid modeling, modeling the flow relative to surfaces to...
to model this geometry.
My background, actually, I was trained as an aerospace engineer, so this is something that I've used a lot in the engineering world.
And I was interested in looking at how it might be applicable to just general surface modeling, or modeling of a field relative to some control surface.
So this example is specific to a different kernel function than the one that I've showed you earlier.
So the reason that implicit or potential flows is what I'm going to be talking about here.
Potential flows are interesting just because they're mathematically elegant.
The governing equation for a potential flow is Laplace's equation.
That's equivalent to the conservation of mass.
And it can be represented compactly in that form down below whereâ€¦ I don't know if you're seeing the cursor or not, but no, you're not seeing it.
But I'll show you what that del operator is in a minute, but the field function phi is a velocity potential.
It represents basically the potential.
The derivative of that represents the velocity at a point.
The integral velocity represents the change in velocity potential from one point to the other.
I'm not going to try to explain that too much.
But this happens to be a linear PDE, partial differential equation.
And so the principle of superposition applies.
If I add these, if I add velocity potential kernel functions in the field, then the summation of those will automatically satisfy that continuity equation.
So, any combination of those kernel functions that...
satisfies a particular set of boundary conditions that I add will be a potential flow that satisfies that physics equation.
So, we can actually design the field using these kernels.
Now, I want to show you two potential flow kernel functions.
One is a 3D point source, and this function here is the equation for the potential in the field.
You can see that it is discontinuous at the center of the kernel, and we're just not going to worry about that.
It's unbounded at the origin.
but it goes to zero at infinity.
So, kind of like the Gaussian function, the fact that it goes to zero infinity probably means this one isn't a very good one for modeling, for interpolating general surfaces, because we're not going to fill gaps between.
If we just have these scattered points, we're not going to fill any gaps, and we're going to have a bunch of holes in the surface.
But I wanted to show you that, because I can show you how that relates to a flow.
So the derivative â€“ the potential is a velocity potential.
The derivative of it, the gradient of it, is the direction of an imparted â€“ it's the direction of the flow velocity at that point.
So the potential source, basically, it's feeding â€“ it's as if it is feeding fluid or mass into the field radially away from the point.
And the strength of the element is basically the mass of volume that flows away from the point per unit time.
Now if we take the derivative of that particular function, then we get the velocity down that you see at the bottom there.
I will explain why I'm talking about velocity before I get to the end of the talk.
But since this thing is unbounded at infinity, it's not going to be very good for kind of filling in gaps and scattered in a scattered point field.
So I'm not really interested in using this one.
But if we look at this in 2D, that prior one was for a 3D source.
If we look at it in 2D, the potential is very different.
And I'm not going to go into.
Why here? If you want to know why it's different in 2D, ask me afterwards and I'll explain it to you.
It's actually pretty easy, but I'm trying to somewhat avoid the physics of it.
But in this case we've got a natural log, which is going to go to infinity at an infinite distance.
So this one is better for kind of modeling scattered points or a sparse collection of control geometry.
Now the potential, the first equation there is the potential for a single point.
But we can also consider this to be a constant strength across a line segment.
So we're actually emitting values away from the line segment instead of just from a single point.
And that's a little bit of a more complicated equation.
It's got a couple of logarithms in there and it's got an arc tangent.
So it's expensive.
We can deal with that later, but that's what the function looks like.
And when we take the derivative of that, we get velocity components that look like that second equation there.
And in this case, just to tell you what the geometry is, the source is this line segment that goes from point one to point two.
I'm evaluating it at that field point that's located at the other end of the R1 vector.
The R vectors are just the points from the ends of the source segment to that field point.
And the two unit directions are U, which is along the axis of the element, and N is normal to the element.
And while I'm presenting the 2D equations here, there is an equivalent closed source form for a 3D source that can be placed on a polygonal element.
So this extends naturally to 3D.
And when I began working on this talk, I kind of...
I really had this idea that I could do something very cool using the flow around meshes to generate a field function.
And that's what I did.
And the idea here is to use something like a handcrafted mesh as a support and then build a field away from that mesh.
So if we look at this here then, if we put a source on each element of, or each polygon of the mesh, and give each one a unique strength, then we can evaluate, initially holding the strength equal to unity, we can evaluate the influence of one triangle on any other point.
in the field. And if we choose those points to be basically the midpoint of the other cells, we can get the influence of each source on all of the other sources. And that will give us a set of equations. So looking at that phi 1 star, with phi 1 star being the total potential at the center of polygon 1.
then it's going to be equal to the strength of polygon 1 times the influence of the polygon on itself plus the strength of element 2 times the influence of polygon 2 on polygon 1, etc.
We build that equation for every polygon on the mesh, and we have a set of equations.
that we can solve to get the source strengths needed to create a realistic flow relative to that geometry.
One that will make that entire geometry be a source from which we can emit flow if we want to, or just evaluate the isosurface at some relative distance to get some geometry around it.
This is what that equation looks like when we put it into matrix form.
It's basically a linear system.
And what we're doing here is we're applying something called Dirichlet boundary conditions.
And this is the case where we're directly specifying the value of the field.
We really want the surface of the geometry to become an isosurface.
And then if we evaluate, if it works out perfectly, if we evaluate the surface at that same field value, then we'll get the geometry of the surface.
But if we evaluate it at a different field value, we'll get some offset.
So it's very nice for being able to find an offset surface away from some geometry that we specify.
Now, one thing you should notice here is that we can't set the right-hand side of this to zero because then we'll just get the trivial solution where all the strengths are zero.
There's no flow, there's no field, or it's a completely a zero field.
So what I've done here in my experiments is just to set the potential equal to one.
And then you solve for the source strengths.
And once you know the source strengths, now you can go back and evaluate the field anywhere in space.
Now, one reason for...
So, using this technique, using this kernel function, you can generate a field that will have a surface that represents the geometry that you used as a control geometry, as you would with any of the other...
basis functions.
And in this case, you also can take the derivative of the field to get the velocity of a particle at a point.
And then you can, since you can evaluate that at any point in the field, you can compute the velocity of a particle at a point, integrate it in time, compute the velocity at the next point in the field, and then trace the particle in time.
So basically you're able to do a little bit of physics based on this field.
And then once you're done with that, well, so now that you have this field, another thing that you can do is you can now superimpose other control kernels to modify the field in interesting ways.
For example, if you had some object in the field that was kind of a global obstacle, but then you had maybe a local obstacle that was moving around.
elsewhere, another entity or a bot or something, you can kind of interactively evaluate these other kernels to kind of locally modify the field to get different effects on the path.
So.
The functions that we were looking at back here are not simple.
So this is not something that is great for running in an engine, because you'd have to do a lot of work to get it to run it, you know.
a high frame rate.
But you can use this in a content creation tool to build geometry or to build fields that could then be evaluated, you know, at run time in the game.
There are some things that you can do to speed it up.
You can delegate some of this stuff to the GPU.
One thing about these potential fields is...
far away from the elements, they do behave like point elements.
So you can substitute the effect of a point element if you're far away from the control geometry.
You also could use approximate functions or table lookups, something that makes it less expensive.
Another thing that you can do is bake the kernel functions into a 2D or volumetric texture and then scale and transform those and look those up.
rather than evaluate it, that could be faster.
Now, I'm gonna show a few little demos, and then I'll come back to this slide.
These are all 2D demos.
I just didn't have time to do anything more sophisticated.
So what I've done here is I've used the geometry of a square.
So I've placed a single source, a constant source element on each edge of the square.
And I've set the boundary condition to set the potential to be 0 at the midpoint of each element.
And those little white dots that you're seeing.
are our isosurfaces.
So it happens that I did hit that boundary condition.
This is an isosurface with value of one.
So I did hit the boundary condition at the four midpoints, but that's it.
So I haven't really interpolated.
I haven't really gotten a surface that looks like the shape that I put in.
It's too coarse of a set of values.
But I can evaluate, I can do the same thing, this is exactly the same thing just with another isosurface added.
And I can't see what the value of the isosurface is, but if you just evaluate it slightly off, then you do get something that's closer to the shape you put into it.
So here's another shape.
And here again, if you look at the midpoint of each edge, I do have an isosurface that passes through that midpoint.
But it's not very close to the shape that I wanted.
But what happens if I move?
I'm going to go back and show you the other one.
There's another version of this one that I forgot to show you.
In this case, rather than set the boundary condition at the midpoint, I set the boundary condition to the corner itself, or just slightly off from the corner.
So in this case, with an isosurface of 1, does basically pass through the corners.
So some experimentation on the location of that, the point where you evaluate the boundary condition is useful.
So I'm told that I don't have any time left.
So I'll just go back to my one slide.
I'm not sure why it didn't go all the way.
OK.
So the real takeaways here are I wanted to give you an example of using.
radio basis functions to build implicit surfaces that interpolate kind of scattered fields in a way that can be useful.
And to show you that this has been used in games for various applications.
Now as for my experiment with the potential flow, I didn't really get very far along with it.
And I'm not really thrilled with it so far. It's expensive and...
I had higher hopes for it, but I may experiment with it more.
But I did want to go through and show you what I had done just so that you could kind of see the mechanics of how to solve the problem and what it might do for you.
So, that's it.
Here are some references.
These slides will be available later in case you don't have time to write those down now.
But those first two are...
I don't know, they're about a decade old or so, but they do talk about this technique in quite a bit of detail.
And for the flow-specific functions, that last reference is the book that I used.
Although there are many, many other references, but these are all good ones.
So, does anyone have any questions?
Okay, well, if you're interested in talking about it more, please stop by afterwards.
