Okay, I'm up next.
I'm going to be talking about some camera math a little bit.
So I'm titling this talk, Juicing Your Cameras with Math.
And I've got some demos, and I have a bajillion hotkeys here, so I need my cheat sheet here.
Okay, so...
We're going to be talking about a couple things today.
One of them is the ubiquitous camera shake.
We're going to talk about good ways of doing it, bad ways of doing it, things to never do, differences in 2D and 3D, and that sort of thing.
We're going to compare different kinds of shakes, translational versus rotational shake.
We'll talk about whether you're using randomness or some sort of coherent noise.
And we'll talk about what that means and the differences.
Like I said, some 2D, 3D distinctions.
We'll also talk a little bit about smooth camera motion.
Right, so here in this example, the camera is kind of lazily following the player.
We'll talk about some of the specific maths behind that and different ways to tweak it for circumstantial.
benefit. I'll mention parametric motion, but I'm going to refer you to a different talk since we have so little time. In general, with this talk, I'm going to be trying to go very quickly and give you like a shotgun smattering of little seeds with just enough math and intuition for you to go off and do it yourself. And I forgot to mention before, but there are some...
questions about with Kyle's slides.
We're going to post all the slides for all the talks today at essentialmath.com.
So I'll say that a couple times throughout the day.
But that's where all the slides are for this and the previous 16 years of the math and physics tutorials at GDC.
I'll talk about some different kinds of averaging in terms of this smooth motion, including asymmetric, asymptotic averaging.
just because that sounds fun.
We'll talk about framing things and points of interest and points of focus, and how do you manage different things like that, and how you sort of make everything feel soft and not too overt.
And then lastly, my favorite topic here is, we're going to talk about this, what I call Voronoi split-screen technique.
Has anyone seen or played Lego Star Wars multiplayer?
So it does this really cool thing with splitting the screen.
And we're going to look into how that works.
We're going to look at how to do it.
We're going to look at a couple different ways of doing it.
And then how to merge and feather those things, too.
And then we're going to sort of end with a tease and a challenge.
OK, so Juice is the New Black.
Has anyone ever seen the Art of Screen Shake or Juice It or Lose It talks on YouTube?
So that's your homework is go watch those talks.
They're super short.
They're awesome.
You can see just in this example alone on both of them, there's like all kinds of crazy ass screen shake going on.
And that's one of the things that's been really happening a lot, both in indie and AAA, is finding ways to add juiciness and crunchiness to our games so that things feel solid.
And there are a lot of different components that go into that, not the least of which is audio, et cetera.
But camera shake is one of those big things.
But as we start using these tools, it's very easy to misuse them and make bad things happen.
So camera shake is a lot like salt. With none of it, it's not very interesting.
If you land really hard on the ground, it doesn't feel hard if the camera doesn't do anything.
But if you do too much of it, then it's just nauseating.
So we want to have just the right amount.
My suggestion for handling camera shake in general in your games, if you're going to do this, is to have a separate variable internally, which I'll call trauma, right?
And any time something happens to you, you'll add some trauma.
Like, ow, that was a really hard hit, I'll add 0.5 trauma, so I'm at 50% trauma.
Or maybe some small stress would add 10 or 20%.
And then it's constantly going down over time at some linear fixed rate.
So every frame, trauma minus equals something that's time-based.
But the important part here is that, first of all, camera shake is not going to be linearly proportional to trauma.
It's going to be trauma squared or trauma cubed, which in the 0 to 1 range actually means it's going to be a curve that makes it go downward.
It's like the beginning of a parabola.
So I want to talk about why this feels right.
And so let me start by showing one of the demos here.
So these are a couple of quick little simple demos I hacked together just to demonstrate these sorts of things.
Okay, so if you look on the left of the screen, there's sort of a bar of trauma, and if I give a lot of trauma, that's the orange bar, right, the amber bar, and it just is constantly going down over time.
And if I give myself like a little trauma, three times, boom, boom, boom, it's additive.
And you'll notice that next to it, and I'll hold it steady here for a second, is the amount of camera shake, which is the blue bar.
And so that's not linear, right?
And so as this goes up...
we get an exponential amount of.
screen shake for trauma.
There are a couple reasons why this feels good.
First of all, it's actually somewhat realistic.
If we think of a camera that's jostled and has to sort of restabilize itself, it's much like a spring and damper system, where the shock's on your car.
So it's going to bobble back and forth and then kind of converge back to nothing.
So that feels correct.
It's also nice because I can really feel the difference between, if you can see the screen shake, this is a minor trauma and a moderate trauma.
and a major trauma.
And it also means that if I have several minor traumas in a row, boom, boom, boom, they have a more than linear effect on each other.
So it feels really significant of, well, wow, I'm really getting my ass kicked.
So it feels right because it's similar to real physics.
And it feels good because we can really perceive the difference between escalating perceptions.
If we instead had linear trauma.
like this, where I just have them match to each other, you can see that the heavy one shakes for a long time and then it seems to sort of stop very suddenly, right?
And also the difference between a moderate trauma and a heavy trauma doesn't feel that much different.
Whereas when it's non-linear, we can really feel a difference.
All right, so there's also different kinds of camera shape, right?
There's rotational and translational.
By that I mean, if I shake the screen here, this is merely translational.
See all I'm doing is jittering the camera around left and right, up and down.
Whereas this is merely rotational trauma, right?
Rotational shake.
Which doesn't feel as good, I would say, but it's kind of interesting.
Keeps the player in focus.
And I would say in this case, the translational, the moving side to side, feels better.
But the combination of them feels really good, especially if I've got a lot of them.
It feels pretty intense.
So the combination of both translational and rotational camera shake is generally desirable.
But what if we're doing something in 3D?
So let's look at a 3D comparison.
So, if I have a simple 3D game, and I can look around, and this is first person, and if I do the same thing here, I'm going to set a constant level of trauma.
This is translational only, meaning I'm just moving the camera back and forth.
You can see, and now it makes sense because of perspective, the islands in the distance don't seem to move very much, right?
And in fact, if I'm very close to the ground here, this is moving quite spastically.
So that actually doesn't feel nearly as good.
Whereas if I turn on only rotational, then it actually feels much better, even if it's subtle.
So it turns out, ironically, that in 3D, rotational feels much better than translational.
And in 2D, translational feels better.
There's another big problem, though.
And this is a reason why we actually want to avoid ever using translational camera shake in 3D, is because it can put the camera inside a wall.
You can see here, I don't know if it's coming through on the monitor, but half of the frames here, I'll make it extreme.
you know, half of the frames, the camera's actually getting displaced into the wall, right?
And then we have all kinds of problems that happen.
And if you've ever worked on a camera system in an engine, you know half of the time your work is spent trying to keep the damn thing out of the walls, right?
So, that's one of the things we don't want to do.
If we turn off the translational and we just do rotational, then our position is never changed, so we don't have to suffer from that.
So not only does that feel betterâ€” sorry if I make anyone puke in this talk.
Yeah.
So actually in 3D, ironically, the rules are somewhat different.
That we don't want to use translational because it feels weird and it could be very bad, right?
Whereas rotational actually feels even nicer.
Camera shake in VR.
So the rules of VR are try to avoid forced motion.
If you have to do forced motion, try to make it be slow.
If it has to be fast, try to make it be predictable.
Camera shake is none of those things.
So, don't do this.
Okay, so how does this look in code?
Well, it's pretty trivial.
We want to just get some random varying amount, say from negative 1 to 1.
And then we'll say that in 2D, if we're just messing with an angle like this, let's say we want to be willing to go up to 10 degrees.
And so we would say the amount of shake, which is from 0 to 1, times the 10 degrees.
So maybe moderate shake would only be up to 5 degrees, plus or minus.
So this random negative 1 to 1.
And we'll do that for an x and y offset as well.
So this is the translational part is the x and y, and then a rotational part on top of that.
That's it.
Pretty simple.
And then we take our camera, and we add.
both the shake angle and the shake offset to our camera.
And note that what we don't want to do is ruin our camera.
We don't actually want to move the camera.
We just want to sort of displace it from where it is.
So it tends to be better to have the base camera remain pure and have a shaky camera that we're like taking every frame clean from scratch, take the base camera plus noise on top of it, or plus shake.
In 3D this looks the same.
Obviously in 3D we have orientations that are more complex than these Euler angles or Tate-Brian angles of yaw, pitch, roll.
But actually that turns out feeling really good, maybe unsurprisingly, to do your shake in 3D, your rotational shake, in Euler angles.
Partly because we're used to in shooters having the mouse control directly relate to these.
If I move my mouse left and right, it's a yaw.
If I move it up and down, it's a pitch.
And so I can tweak these, how much yaw shake I want, and how much pitch shake, and how much roll shake I want, individually.
And that's actually the perfect way to tweak it.
And then we'll also do our translational the same way.
There is a better way to do this, and we'll show why.
If you've ever heard me talk before, I'm a big fan of Perlin noise.
So I'm going to suggest we use something like Perlin noise, or some smooth fractal noise instead of just this random.
Why do I think that?
So if I go back to this demo, let me give some examples of why Perlin noise is superior.
So again, here's my screen shake, right?
fairly severe trauma.
There are a couple things that are problematic.
First of all, let's say I'm, let me just get some things moving so you can see what's happening.
So if I'm moving around and I jump through the air and I'm falling in slow motion and I turn on the trauma, that's what I would expect to see in slow motion, right?
And then when I hit the ground, I re-traumatize.
So if I'm using just random, this is what I get.
I'm hopping around.
I'm in slow motion.
And I make noise.
And because it's random every frame, it's effectively an infinite frequency regardless of how slow the time is.
And so if I have something that's more of an equation, then I can execute that equation slower.
And now it really feels like the camera is jerking around in real time.
So that's one significant advantage that Perlin Noise has.
Excuse me.
So another thing is that it just feels better.
And I don't know if you can be convinced of that with just a simple test.
If I do Perlin noise, it feels like it's coherent, right?
That the camera's actually moving from left to right.
It's not just teleporting to a random place every frame.
And so it feels much like a camera would actually feel.
It's also frame rate independent.
It does time scaling and generally feels great.
It works automatically in slow motion if you're just passing down a current time or a delta time, it just works.
It also has an adjustable frequency which is really interesting.
If I, again, do my Perlin noise here.
If I slow it down...
There we go.
So I can actually...
have, and I'll just sustain the noise here.
This is with the noise slowed down considerably.
And if I do this slow enough, it can actually feel like, say, a handheld camera effect.
So there's a lot of other uses for this, other than just spasming the screen.
It's also more easily reproducible because it's just a function that you're plugging time into.
It's not something that's random.
And you'll notice if you're going to do this, you'll generally want to make sure you're not using the same Perlin noise for all of them.
Otherwise we're always going to go down when we go left.
And we're always going to pitch when we yaw.
So those need to be different.
I always just do this by staggering the seeds, the random seeds, into the noise function.
All right, so a couple takeaways from that section.
Camera shake is not proportional to trauma.
I would like to keep them separate, and I like to have camera shake be exponential.
In 2D, we like both translational and rotational.
In 3D, we want to avoid translational.
And tread very carefully in VR.
Also prefer some sort of noise formula to just random.
And by the way, you want Perlin noise in your engine and in your math toolkit, mentally anyway, because it's badass.
All right, so next I'm going to talk quickly about smooth motion.
And I'm going to start hurrying through some of this.
So in this case here, I just have the camera locked to the player's position.
So if I go down, the player just kind of goes wherever he wants, and the camera follows.
And if I teleport back up to the top, it just teleports.
But I might want motion that's following the player more lazily.
And player motion can often be erratic or jerky, especially if we have something like stairs.
where we're going to climb up and pop.
So the camera feels really bad when we do that.
So one of the things we can do is turn on asymptotic smoothing.
And I'll explain what that means in a second.
But basically, this is the slow version of that.
And this is where the camera just kind of lazily meanders its way eventually towards wherever the player is.
And so there's very little impact from any high frequency actions that the player takes.
So as I'm falling down steps or climbing up steps, you can see the camera's not jerking.
It's totally fine with that.
I can, of course, do that on a tighter basis so it converges more quickly, like this, or even quicker still.
And this is with it turned up.
If you turn it up so fast that it converges almost instantly, then it starts feeling like it's just snapping.
All right, so there's a really nice, some really nice ways of doing this using cubic splines and curves and that sort of thing.
There's a talk from this tutorial from 2012 about interpolations and splines that I highly recommend if you want to take that approach.
But if you just want something working, and actually this works out quite well, you can use this asymptotic averaging.
So from that talk, they threw this formula up on the screen, and I want to talk about that.
So...
the formula is x plus equals target minus x times 10%.
Or, I rewrote it a different way, this 90 times x plus 10% times target.
What does that mean?
Same thing, just written twice.
On the left, I would express it as each frame, we take a 90-10 blend of ourselves and of what we'd like to be.
Or, on the right, it's maybe more intuitive to say, each frame we get 10% closer to our target.
Okay, so let's say we have blue, and then I average in green.
And this is a 50% asymptotic average.
And then I take whatever that is, and I average in yellow.
So now as I average in another color, all the previous colors get diminished in their effect, right?
And so the latest thing has the most importance.
So each color sort of pushes the rest of them down.
And so it's asymptotic, in the sense that I'm never quite reaching my goal.
If I had, say, a position or something else that's following this, then it's going to feel asymptotic, right?
And if you think about it, if I move half the distance between here and the chair, and then I move half the distance between here and the chair, and half the distance, and half the distance, I'll never reach the chair, but I'll effectively reach it in kind of a nice smooth landing.
Infinitely smooth, actually.
So how fast it works on the weight? I recommend toying around with these types of weights.
For 1% new and 99% old is that really slow one I had.
10% is reasonably fast and 50% every frame where each frame I close half the distance is quite fast.
So it's called asymptotic because it never quite arrives.
But there's nothing that says, much like Kyle was saying, in terms of we want to start with something realistic but then tweak it for feel, that we have to treat horizontal and vertical motion the same.
So for example, we could say that there's a rule that it's going to follow me left and right, but it's only going to follow me vertically once I actually land on something.
So now the camera doesn't follow me when I jump.
It only follows me when I'm landing.
And so as I'm going across this, the camera doesn't perturb at all as I go across those jumps.
I can also make it more lazy going up than it is going down.
And I can make any sort of hybrid mix of those things as I want.
So I could say the camera is going to quickly converge on me when it's coming up to me.
Or, perhaps, the camera, it's most important for it to converge, follow me very quickly when I'm going down.
And it will do that immediately.
As soon as I'm falling downward, it has a tight asymptotic average.
So it will really try to hold on to me.
So we don't have to treat upward and downward movement the same.
We don't have to treat horizontal and vertical movement the same.
If we're using asymptotic averages or anything else, we can tweak each of those for those cases and that's where we start really getting the feel for this.
Plus those weights can be non-constant.
One last fix, this doesn't time scale well.
It's also frame rate dependent.
We can hack around it by multiplying by time scale.
So effectively, if we're going to be moving 0.1 every frame, this would be more like moving 0.1 of the way every second.
and we're just moving a fraction of that.
This is actually a linear approximation, which is much like, it's going to have a little bit of error to it, much like a numerical integration will have error to it when you're in a jumping curve, when you're sort of accumulating your movement from frame to frame, but it's quite good enough.
Okay, so we've got, now this other toolkit is just move yourself a little bit closer towards the thing you want every frame.
Okay, so in terms of framing and attention, I'm going to talk about this briefly. I'm not going to go into it too much in the demo because I want to get to the Voronoi region stuff.
So what's at the epicenter of our attention? Generally the player, right?
That may not always be what we're looking at on the screen, but it's always going to be present. It's important for us to know where the player is.
So it's at least worth saying that you never want to not be able to see the player, right? At least if you're controlling her.
So, there might be different things we want the camera to look at and highlight.
And I'll call points of focus those things that demand high attention.
So a primary point of focus like the player should never ever go out of view.
Unless perhaps during a cutscene or something like that, which is not what we're talking about.
A secondary but still important point of focus, like say the enemy that I'm locked onto.
shouldn't go out of the screen if possible.
If I can frame both me and my target, let's do that.
But given if push comes to shove, keep me on screen if you have to kick him off screen.
We might also have points of interest.
And this is where we start getting some really nice subtlety that we can put into the system.
And those are things where we'd like them to be in the screen if possible, but we don't want to upset anyone.
And so that can cause a little bias that we can put in to make the camera kind of focus slightly to the left so that we can bring something into view.
If we have some...
piece of treasure that's just off screen. If we could have the camera just kind of dip down a little bit to show you. Oh, by the way, there's some treasure here.
And we can pull your attention towards something that's on screen just by directing the camera towards it subtly, or just allow you to see something that you might not have seen if you just ran past it.
And that's really, really interesting from a game design standpoint, because without the player even knowing what you're doing, you can easily draw her attention to enemies on the screen or loot, right?
If you come in the room, the camera can sort of go to the right and they'll pick the right fork, right?
It's kind of like a magician's force.
You can also highlight buttons, levers, secret doors.
I mean, how cool is that?
That you're walking down the hall and the camera just kind of does something.
You're like, whoa, what was that?
I felt something.
There's something here.
So it can be quite subtle if you want it to be.
Traps, you can give just the subtlest hint of, oh wait, there's something here to look for.
Or even explicit markers left by a level designer.
They say there's a statue in the middle and I want the players to take notice of it.
Or even a procedural generation system could identify something as, this is an important bottleneck or this is an important piece of metadata like the center of the orc base and I wanna make sure that the player sort of catches it.
The important thing here is to feather these influences.
And so by feathering, I mean if I'm walking along, and I don't have a demo to show this, but if I'm walking along and then suddenly the camera goes down and then it comes back up, it feels very heavy handed and it feels jerky, right?
So, generally we want to say, well, for everything that we kind of would like to show, which are these points of interest, how close are they to us?
We have some threshold, right?
We say, hey, if it's more than ten tiles away, I'm not interested in it.
That's like too far off screen.
But we might have some inner threshold like 5 tiles away to say, well, hey, we're getting interested in there.
And so between 5 and 10 tiles away, we're going to sort of smoothly ramp up our level of interest in that thing.
So if something is, you know, say 9 tiles away, it might be only 20% interesting to us.
And if we have each point of interest has its own sense of importance, then we can just simply multiply its closeness by its importance to get a sense of weight.
And then we can add up all the points of interest and do a weighted average, divide by the total sum of the weights, to sort of see where we want to be polled in aggregate.
The big problem here is when we have multiple primary focus points, right?
And Gauntlet is a typical example of this, where we've got four players and we have to have them all on the screen.
And it's a co-op.
So how do we handle that?
There's some really bad ways.
One, we could say the screen can't advance.
So the player, the warrior who's off and getting a drink, is keeping everyone back.
The screen can't move.
We could say the players can move off screen.
That's a terrible idea, right?
Because then you don't know where you are.
We could say players could die if they're forced off screen.
That can be kind of dickish.
But in a competitive game, maybe that could be cool, a strategic thing.
We could teleport you back up to the group, which is probably what we'd do if we killed you also.
We could have you drag the screen so the player that's pushing on the edge of the screen would sort of drag the other player with him.
We could try to zoom out to encompass everyone.
But all of these things have flaws and they're all intrusive into our gameplay.
Lastly, we could split the screen, right?
Which is actually the only thing we can do, frankly, that isn't an intrusive method.
But split screen sucks because we're sharing the...
screen real estate, right?
And what's really sucky about that is in a co-op game, 95% of the time, all the players are together.
And now we're paying for 75% screen real estate waste.
So what can be done about that?
So we have this, lastly, this Voronoi split-screen cameras.
And I'm gonna go probably two minutes long, I apologize.
And the idea is like this Star Wars thing, we can split the screen, but only when necessary.
So the way that looks is, let's say I have a player here, and the player can move around this world.
And then I add another player into it, and the player can move around the world, right?
And that's no problem.
But if I actually look at.
The way this would look in dynamic split screen is that the players, when they're together, are going to share a screen like this.
And as I move apart from the player, it's going to split the screen dynamically.
And the orientation of the split is always oriented so that as I go towards the split, I know I'm going towards the other player.
All right, so how does that work?
So we effectively figure out a screen-sized rect of how big is the view area that we want at the zoom depth that our artists want, that they'll yell at us if we zoom out.
And we figure out if we can fit in it, great.
If we can't comfortably fit in it, no problem, we're going to split the screen.
And so we can figure out a halfway point along the line between us and make it perpendicular to that point.
So here's the line between us, and then we make it perpendicular to it.
And that's going to be the splitting edge.
And then we can effectively move the screens apart from each other.
And so now we have player A gets his own screen that's kind of more centered around him and player B gets his own screen and they're just shoved away from each other.
And then we composite those two screens using a stencil into one screen.
so we can sort of see each other across the split.
But you'll notice A and B are not centered in their regions, which is kind of annoying.
So we could then do something where we re-center the players in their regions.
And then your direction towards the edge is still the direction towards the other player.
And it's really important that we have feathering when we make these transitions between the split screen and the regular screen.
Because actually, this is what it looks like.
Here is me with the split screens.
And as soon as I come within range.
it's gonna make this awful snap, right?
Because it's going from a camera that's centered around the both of us to two cameras that are centered around each of us.
So if I instead, again, use feathering to sort of start easing so each view starts merging towards the combined view so that once they get close enough, then they're gonna be the same, they can line up.
This is actually quite easy to do.
And I recommend that you grab the slides later.
And I have some instructions in here on how to do them.
But effectively, you're going to break the world into these Voronoi regions.
And then you're going to constrain that to the local area around the player.
the players, which is this neighborhood down here in the left.
And then you're going to use that as sort of the relative division of the screen above.
So if we're really far apart in the world, then in the map above, we're going to be using that same shape that was cutting below.
And then lastly, you can...
do this and I'm not sure if other games other than Lego Star Wars have done this but so far I haven't seen any games do this where you have three or more players so it actually works quite brilliantly you can just move towards the screen and then these two players are sharing a screen and these two players can move towards each other and they're sharing a screen and if we do something like this The screens will kind of divide and balance however they need to.
And you'll notice as A runs across the world and he runs past B, he joins with B and separates from B. He joins with D and separates from D. He joins with C and separates from C.
All right.
So that's all the time I have.
The slides do have the full information about how to create, construct these regions.
And it's the same technique where you're just stitching together four different points of view based on your relationship to each other in the world.
And that becomes your screen relative to each other.
All right.
Thank you very much.
