Hello, everyone.
The world's a bit crazy out there today, but I'm happy to be bringing you this talk virtually.
So welcome to my virtual GDC 2020 talk, A Cost-Benefit Analysis, Is That New Tech Worth It?
My name is Ben Laidlaw.
I consider myself a technical director by trade.
I have multiple art degrees, including a Master in Fine Arts.
I worked at the gamut of 3D from commercials to features to AAA games to XR and virtual production, including now in software development.
on multiple continents and a wide variety of studios.
I'll start this talk off by asking what makes GDC great?
What are we missing out on at this great event?
To me personally, it's connecting with all the new friends, all my buddies from across the industry, from all the different studios I've worked at.
For a lot of people, it's trying to get that next leg up in your career.
What I'm willing to bet for most people, especially the people that describe themselves as the technical artists, that you go to GDC, discover and learn about what your competition is doing and how you can improve upon your own pipeline.
Some of the tech out there is really amazing.
And others, you know, you could just kind of shrug your shoulder at.
What we really need to be truth about is all technology is not created equal.
Back at your studio, you want to be able to implement that really good viable tech.
the quality tech.
Some of you may be lucky and you can just dive into coding and creating art to glory.
For the rest of us who have managers and investors, you need to sell it to them first.
So what will convince the investor to come running to you with their money?
Often it's the case they are not specialized in what you do, they work in a different business.
Their language is not, I trust you, go make art.
Their language is why.
Your answer should be a succinct three letter reply.
CBA. Your investor should hopefully come running to you at that point with their money, or they may actually rain on your parade and say, there's no money for that. Trust me, you'd rather have the smart investor, no matter how much it might suck if they say no.
So the CBA is short for cost-benefit analysis, wherein you can appropriately analyze the human factor of any investment.
which is another method of showing the return on investment, the ROI for the investor, of what you're about to do minus the intangibles.
The ROI is a common financial and business term, but it doesn't get complicated with this fangled-angled art technology that we're working on and this human life factor.
This is in the simplest terms, how much your investor is going to actually profit off the technology that you're about to implement.
What both of these equate to, is this tech actually worth it?
Is it worth the investment?
Is it worth the time?
Is it worth the human resources?
It doesn't matter if the whole industry is singing its praise, that you're going to save the hearts and souls of your company, that the artists will love you and dance in the aisle, while all very heartwarming, and maybe if you had a tad bit touch of the force, it could be enough, what the CBA allows you to do is put actual numbers behind that tech.
You might wonder why CBAs are effective in analyzing art.
From a historical point of view, and even to today, CBAs have been crafted and applied to large public work projects, with large societal costs and benefits that are more difficult to quantify than hard technology costs.
If we were still in San Francisco, and not virtually in San Francisco, you'd be able to walk around the parks around us.
And one of the cool things is, the San Francisco parks provide an economic benefit.
approaching $1 billion.
It's a very kind of cool insight of a CBA that was just applied that's really relevant to where we all might have been had this week happened, not virtually.
However, we're really not, so we're not putting an arbitrary value on art.
Art has a real cost.
For instance, worker time alone is a simple value.
We're not sticking a banana to a wall and duct taping it and calling that art.
So in the 30 minutes of this talk, we'll say 200 virtual people in attendance on an average of 100K annual cost is $50 an hour, which makes us a $5,000 worth of people sitting in our virtual audience.
Sometimes what we're hoping for is just to get rid of the more expensive cost of idle time.
So now that I have burned $4 of your time, let's go on to the guts and glories of the CBA.
So a quick primer, this is the outline of the talk as we dive in.
I'll refer back to this from segment to segment as we progress.
Quick thing to note is depending on the scope, a CBA may take a day or more of work to modify or create this document, especially if you're a small indie or small project, or you're just doing a small little like tech addition.
For extremely large initiatives with tens of millions of dollars on the line.
large groups of people, tasks, teams, IT and equipment.
This could take quite a while to implement, even a month or more to do the proper due diligence.
But that one month of time versus potentially the millions of dollars on the line, it's certainly worth doing that little bit of research.
Before you even put your finger to the keyboard to work on your CBA, you need to know a CBA is a comparison of alternatives.
This is where the CBA gets its greatest strength from, the same as any scientific comparison.
Finding relevant comparisons is really the key though.
Luckily, the first two are always the easiest.
I generally start with what I call the buzzworthy new tech.
This is a tech you see at GDC and catches the most buzz.
You'll see it on the latest feeds, Level80, all the forums, Slack posts, Discord channels.
Your buddies will be talking about it at work.
I classify this actually as my second alternatives.
The first alternatives might be the most scariest.
The first is what if you do nothing?
and keep the existing workflow that you have at your studio.
At any good scientific analysis, you need your baseline and the alternative method.
You cannot define value for one without the other.
More importantly for us, when pitching why you should implement the new tech, you need to define why the other is actually so bad.
To make a rock solid CBA, however, you should consider a few other alternatives.
This is what gives the CBA its strength and validity.
Whether it's two, three, or four alternatives, doesn't really matter.
but it only matters to the type of tech that you are comparing between.
If you're choosing, say, DCCs, it's more important to list all the relevant ones than just the top two.
This is considered doing your due diligence and research.
The best thing is to consider other realistic possibilities, or even something everyone talks about, but you personally may know is not related.
This should help smooth out some confusions to other stakeholders.
I do have to say a little secret, though.
The scariest thing of all these alternatives and that analysis is that they have the power to prove what is actually good or bad, whether you intend it to or not.
Sometimes there's a real reason why you're still working with that outdated engine and pipeline.
The bleeding edge does not have a solid foundation as something that is a few other studios have worked out for a few more years and a few more projects.
As you walk around virtually and you talk to other GDC talks, you see other talks across the globe, see if anyone else is talking about the same technology today.
Odds are if multiple studios are talking about it this year and not just one, this tech is maturing.
The studios cutting the edge may not really be telling you the whole story.
I've been on the bleeding edge and I have scars to prove it.
Now that you have your list of alternatives when you're filling out your CBA, I generally work on the buzzworthy options first.
I fill out my do nothing as I lament about the first.
Then I cross-check myself on my alternative options.
This keeps me excited and focused.
CBA can be a document, boring as most things, but important document nonetheless.
I often fill these alternatives out of order with a template laid out, because as you research, it's easier to look up the answer for A versus B than do each question in sequence.
In reality, the priority doesn't matter.
The biggest key is to treat all options as equal.
So now that we're ready to work on our CBA, For each alternative, you need to do a short introduction, and then you calculate the cost and benefits.
Finally, you compare your alternatives with your analysis, defining the best method.
So when talking to your investor, you need to prepare a series of elevator pitches to explain what each option is beyond just a buzzworthy title.
An elevator pitch is if you had one minute in an elevator with your investor, and you had to sell them on something.
Say it to me quick, say it to me fast, say it in the most viable method forward.
You don't have any more than one minute to talk about it.
So first describe how the method function works.
Trust me, no one will understand this more than you.
You're becoming the paid export, but keep it simple.
Layman's terms.
Remember your investors, your producers, your managers are not going to actually understand all these jargon, all the industry jargon.
Say what the goals are, the unique elements of this method.
What makes this alternative special from others?
How does it resolve the current problem?
What are you really trying to fix?
Make sure it's the cause, not the causality.
State the expected performance and outcomes.
Do durations and calculations.
Get hard real calculations, whether it's in microseconds or milliseconds.
What are you saving?
Are you saving minutes, hours, days?
Is it an aggregate or just a means?
Get reference or feedback.
Who else is using this method?
Did you contact them?
What were their comments or concerns?
Has anyone else used this in production or called bullshit on it?
Do not make this a 20-page product summary.
It is awesome to have references like that to this in other documents or web links, but remember, keep this CBA simple and reference other documents.
No one has ever read all of Game of Thrones for this main reason.
For those at indies or small studios, you might not have to worry about these later complex introduction parts as much, but for larger studios, you may want to take these more seriously.
They may be outside your domain, depending on your level, so make sure you talk with the correct stakeholders.
We never work in a vacuum. There are upstream and downstream dependencies.
So identify who cares about this work, and if you change stuff, who and how it will affect them.
Identify who will view the changes. Think of this as code flow or sign-off.
You don't check in your code on Friday on the way out the door.
This may already be a standard document at the studio. You can just link to it.
Acquisition strategy. Can you just buy the tech or the plug it right in?
What is the process to get this approved? Where's the money coming from?
This could be a standard studio process you can share a link with.
I'd just say Confluence is amazing for this.
Does it need a few tweaks to get it integrated?
Creating the engine, for instance, is an amazing product, but it costs a whole bunch more to put it into a custom engine than it does to use it in a public engine.
How will the project be managed?
Who is the leader or the project owner?
There could be multiple owners for different parts of this tech.
Set yourself some high level milestones.
You don't need to break out JIRA yet.
Is this a five year project or a five week project?
This may show that for instance, the lower cost trade-offs against a longer schedule.
Now we're ready to find the actual cost of this new tech by looking at several types of costs.
Direct costs are the easiest to calculate.
The amount of time you work on it is the gold standard.
Your physical hours are money towards the studio.
Photogrammetry, for instance, has a lot of hardware and software costs for setting up the rigs and processing the massive amount of data before you actually get anything worthwhile out of it.
Acquired assets can be TurboSquid models or API frameworks or patents you may need to license.
Indirect costs are not for the faint of heart. Often they are calculated and lump sum adjusted values by a studio.
The number of 100,000 costs annually I tossed out earlier is one of these.
It's different for each business. However, 100K was the assigned cost at the R&H bankruptcy for the average wage of an employee from intern to senior, plus the cost of their benefits, workstation, and the kitchen, such as soda machines and stuff like that.
I lived through that.
I went through the bankruptcy documents.
That was our value.
That was about seven, eight years ago now.
So cost has definitely gone up for the general part of the industry with inflation.
Microsoft and Google may actually calculate that your cost, $250K, so a quarter million dollars on average for sitting at your desk with a nice workstation with a lot of nice provided food or subsidized food for you and the nice benefit package that you have.
Another good way to practice this is to figure out, do you need a full-time or part-time producer?
Do you need studio-based IT for this project?
How many people do you pull into the big fancy meeting and burn their time?
How often do you go to the coffee machine and just drink all that free coffee?
Intangible costs cut at the heart of the matter.
Does your tech take three to five minutes to iterate on a 128 by 128 tile in a 10 kilometer world, causing your artist to press a button and watch YouTube and Netflix because it takes three to five minutes?
Does your tech stink so bad the artist hate working with it because they can draw in Photoshop in five minutes, yet it takes a day or two to do it in the engine?
Does the ability to make quality art stink so bad that you can only produce art like it's 2010, not 2020?
God forbid it's 1990 style tech.
Did you make such a bad decision as to why there are no female characters in the game because you made a male-specific character, causing your studio to receive blowback and needing to spend hundreds of thousands of dollars, even millions of dollars, on marketing and internal team meetings because of a male rig?
Perhaps your pipeline is so bad you need to work stupid crunch in order to ship, then the rest of the industry knows you're a crappy studio to work for, rising costs and hiring to replace all the people you just burned out.
Cost maintenance is the long-term outlook on this tech, especially the do-nothing approach.
What does it cost to add additional features?
Can third parties integrate into your API?
Do you even have an API?
Will your pipeline slowly rot?
Or do you need a babysitter to maintain the tech into infinity?
Is this one-year-old, five-year-old, decade-old tech?
Are you just patching an engine away past its prime?
Are you guarding the US military code base that is used on 50-year-old engine code?
60-year-old code and you're just having those nukes just sitting in a launch silo on outdated technology on five and a half inch floppy disk. Benefits is really the humanizing factor that separates a CBA from an ROI. Art and quality of life are very subjective and human factors.
We can't really define them directly, but you can appropriately define them by looking at these external factors.
A small studio, some tech changes can have huge increases.
The bigger the studio, a lot of people don't have the same oversized impact as a small indie.
Some of the direct benefits is, did you go procedural and were you able to create more content and sell that content?
Did you change how microtransactions work to get higher click-through?
Just changing a couple clicks or a couple of UI settings so that you click and it goes to the purchase and they don't have to pay.
five, six, seven clicks to actually purchase something.
Maybe your engine changed so you can hit more platforms, or you change your render to hit universal and HDR content.
Indirect benefits in tech art are sometimes the most measurable for us.
This is often tech that can create more content.
Did you increase worker productivity 10 times over so they can create more assets each week?
Did you decrease the amount of work so much you don't need that extra artist or the outsource company?
to produce the work.
Did you take that three minutes per tile cook down to seconds, eliminating hours of YouTube time, maybe even hundreds of thousands of hours each month or year for an artist?
Of all the intangible benefits that might exist, my most sincere one is the thank you.
To me, that is priceless.
This is when you actually do some type of code change.
You actually make something and somebody actually comes up to you and says, thank you.
You just solved a pain in my butt.
that has been slowing me down for a day.
And somebody actually comes up and just thanks you.
More, less ephemeral ones is, say you fix an annoying bug and your customers are more happy.
Improving your customer loyalty is a really intangible benefit, but it has buyback into your game for later and longer products.
Your tech changed, maybe say your tech changed the playing field and now you took over a larger market share.
Or you reduced crunch and now you can pop off games faster now and make everybody happy while doing it.
Analysis is the last part of the CBA.
This is where, through simple graphs due to all your background work, that you can compare apples to apples.
With all your questions answers, you can take those findings and add them into your spreadsheet.
This is the same task as producer scoping a sprint, but with the time being converted to money in the end.
Make sure you compare alternatives across a relevant time period.
Work done in the past does not count beyond the start.
This could be something as simple as making sure the cost of a plugin are all in the same common currency and not spread out.
through all the different languages and finances across the whole world.
Time and discounting are for longer term projects with significant costs.
This applies a rate to the cost to normalize them to our present value.
In short, it's a check on inflation.
Say you implement an HDR pipeline now as opposed to a URP pipeline, but the tech won't be used until the next console.
You may have increased the number of consoles you sell in the future, but you need to compare that cost to the number of consoles you sell now.
For instance, the cost of a gigabyte of RAM now is significantly less than 10 years ago.
So you're adjusting for that change over time.
Calculating risk is another big studio long-term project outline.
With all the big choices, there's always a level of uncertainty in the task.
Even with small studios and indies, this is, risk is there, it's very valid.
So say your lead programmer leaves and that worked, and he was working on that, they were working on that buzzworthy tech.
And it will take a few months to replace them, or you have a dark horse program in the wings and you don't skip a beat.
The lead programmer that just walked away, that could have cost you several thousands, tens, hundreds of thousands of lost work.
The longer and the bigger the problem, the higher this chance is.
Sometimes it's better to take a less risky option with lower return than a higher one.
Maybe don't rely on that one lead programmer.
Use two or three.
That might add to your costs, but you eliminate the risk because you deferred it over multiple people.
You can even go to the point wherein you can do a sensitivity analysis on this risk, adjusting multiple factors. My favorite personally is if you're going real deep into calculating risk, you can actually apply the Monte Carlo's method to get a great distribution of risk fall-off.
Getting a nice little mean curve to see how much it actually kind of calculates out. That's pretty much applying a render algorithm to risk analysis.
You do have to also in your CBA watch out for fake news.
Once a CBA becomes a series of numbers, it can be very easy to swing the values to a predetermined opinion.
I would encourage the stakeholders to define all the biases upfront and in writing in the CBA.
For instance, in one case, I was told on a project, our team lost a company seven and a half million over the course of a project, you can tell this number was BS because first they did not want to show you the analysis.
It was just glossed over that.
Oh yeah, we lost seven and a half million.
And if someone ever hides the analysis, you should be very cautious right away.
Also if we only cost the company a certain amount, then that means we had no benefit, so zero net benefit.
It's kind of an interesting argument that somehow we contributed nothing while doing maybe a couple of E3 presentations or defining a whole new branch of technology.
There are legitimate reasons to not show the CBA to just anyone, for instance.
If they actually report workers' wages.
But in most studio, this is an aggregate value, as I mentioned before.
For instance, one company, this company quoted $250K, a quarter million dollars per year for any staff because it included all employee benefits, cost of your desk, incidental costs like HR, and cafeteria subsidies.
So if you do a simple calculation of a team of, say, six people for five years working full-time, that number, $250K, adds up to $7.5 million.
Also, if you consider there was no benefit...
then it would be a total loss.
However, if you consider that maybe they never had six people working on it at one time, some people only worked on it for say, a year or a few months, then it's pretty easy to call bullshit on that figure.
Simplest way to evaluate the total benefit versus cost is a simple ratio.
I recommend using a percentage-based pie chart as a visual guide.
Benefits over costs, if the value is higher than one, it's good.
The highest value is often better when the comparisons are similar, but ...
if money or if money is no option to the investor.
So make sure to look at the total investment needed.
And my pseudo not so fake example, you can tell the green is good, blue is cost.
The higher the benefit, the better it is.
But alternative to the buzzworthy tech is a six to four, so it's 1.5.
But your investor needs to have $6 million to actually pay for that.
If they say they only have $4 million, then alternative three is actually a better option.
The benefit cost ratio has identified that the Buzzword tech has the best alternative.
However, cost of opportunity identifies what you're missing out on.
Since it's contextualizes what you're missing out on by choosing one option.
Perhaps you have another product down the road that this tech might not be good for.
Perhaps the staff is best used elsewhere.
on another project, on another tech plan per se.
Say you have two choices with a GPU purchase plan.
One buys them now at brand new costs while you develop the tech.
The other waits a year, so you develop the tech with cheaper, older models, and then wait for the price to drop on those things.
Was the work you could have done worth the price of that drop in the meantime, or could you have used those GPUs straight away on something else in the meantime?
You can look at this as a final self-check that you can roll back into your decision tree.
A comparison chart of alternatives is kind of the simplest analysis extract of the CBA.
This is a summary and review that is presented to start the discussion of any CBA ranking in visual form.
It is a one to four rank of one to x rank of each alternative and the reason for ranking.
This may not necessarily line up with the benefit cost ratio because we checked against opportunity costs and found that the outside the box tech in this case, it's not actually.
necessary for this brand of product.
So even though it actually has a higher ranking, it's actually less meaningful, but if we develop another product, it could go up.
So this means our actually our do nothing is still more advantage because we're not having to develop a whole new tech branch just to get this one implemented.
But say we wanted to go down that whole new tech branch on the next project, it might actually get bumped up quite a bit.
then based on your analysis, you now have to make the best choice.
You need all parties to agree in writing what that choice is.
If they don't agree on certain points, write it out.
Everything should be in writing.
A CBA can be very fragile also, so it's built on a lot of assumptions as you've not actually done the work yet.
So if info comes in that changes the factors, then update it.
Make it a living document.
Say a company buys a plugin that you were gonna use and gives it away for free.
This is a really good thing to do.
It might actually move certain techs up the thing.
Or said, they buy a plugin that you were going to use, and it costs 10 times more, and it's not really worth it anymore.
Or maybe they say they buy the plugin, and they shut it down, like Stinger or Fabric Engine, and you can no longer use this plugin.
So all that investment that you were leading for is now just thrown out the window.
In order to get the stakeholder buy-in, there are three main ways to do it.
to present it.
First is to get local buy-in from all the stakeholders.
Do the legwork, talk to each person in person or virtually beforehand.
Second is the CBA document that represents your data.
The third is a presentation of this data, because very few will actually read the real CBA.
So the CBA document itself is your research.
This is the actual proof to show.
Keep it simple.
It should be shown to as many people as it can be.
For some larger corporations, due to the dollar figures placed on people, this may be kept above a certain pay grade.
There's a lot to be said about truth and transparency, but there's also a lot of said about keeping the secret sauce in house, why one company is actually more profitable than the other.
However, the CBA document itself will honestly not be read by many.
How many people actually read the docs in the end?
The slide deck version is actually how you present this research to the most people at one time.
Do this after the legwork of each stakeholder.
Do not surprise them in a meeting.
When you actually present, present it in reverse of your researching it.
So present your discovery first.
In science this would be normally the hypothesis presented first, but we're going to throw out the hypothesis for the sake of presentation format.
People only care about the fact and why at the end of the day.
not how you got there.
Make sure, as always, keep it simple with lots of lovely graphics.
If you're working on visual technology, show it.
For anything important like product specs, include a reference and a PDF version.
Never show any lines of code.
That is the death of most presentations.
That's the end of my virtual GDC talk.
I'd like to thank you for watching.
If there are any questions, feel free to reach out to me with email or Slack.
There is no survey.
Um, but I would love to hear your comments.
Um, everything helps going into the future.
Um, thank you for your time and have a lovely year.
