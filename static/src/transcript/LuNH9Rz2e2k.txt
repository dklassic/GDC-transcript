All right, great.
Welcome to GTC.
And I have the unfortunate first session of today.
My name is Jerry.
I am principal game designer at King Berlin.
And today we'll be talking about level design saga, creating levels for casual games.
A little bit about me, principal game designer at King Berlin.
I'm working on a brand new saga game from King.
Originally, I was from Singapore.
But two years ago, I decided that I needed a little bit more gloom in my life.
So I moved to a pretty depressing but vibrant Berlin.
I'm a lifelong passionate gamer, been gaming since I was six, the first game that I played was Super Mario Brothers, and I never stopped playing since then.
I'm currently in my ninth year in the game industry, and I work in the different facets of this industry from startups to indie to academia, teaching game design to serious games to more traditional AAA companies like Konami.
Work on games across different platforms, console to mobile for different markets, international and Asian markets both.
What excites me is that currently I'm working on mobile games, and I think that mobile games is a space that it's a new frontier, and we're just barely scratching the surface of.
Reasons why I decided to do this talk, because if you look out there in the articles and the books, there's quite a lot of material on game design, of how to formalize, how to formally talk about game design, but there's a little bit lesser material on level design.
And even if you find such material, a lot of it is more about core games than casual games.
So I wanted to come in with a slant on how we design levels for casual games.
Today's talk will cover four different sections.
I named them the four Ts.
Theory, an overview of what level design is.
Thought, the different level design principles that we think about when we're designing levels.
Tools, how do we build levels in the saga.
And testing, how do we tweak and how do we tinker levels so that we optimize them to become perfect.
So without further ado, let's start on the first section, theory.
If you look at these games, it's a big spread of games, from the original Super Mario Brothers to GoldenEye to more modern hits like Halo or even Dark Souls.
There's level design in all these games.
These games all have levels and a lot of these are examples of what we term as good levels or good level design.
What is level design in general? Level design is a composite role.
It encompasses art, code, and design.
And think of it like a funnel.
You put them together in a funnel, and you create levels.
The difference between a game designer and a level designer is that the game designer is more...
it creates the rules and the systems for the game.
But the level designer actually implements them into gameplay experiences.
In our case, if everything goes right and all the stars align, good levels, fun levels lead to money in King.
And yeah, money yay.
A simple way to think of it is like building blocks.
The game designer creates the blocks like in Lego, the building blocks, and the level designers are the people who put them together to form different structures like castles or spaceships or pirate ships.
in a more formal approach in the MDA framework, where it's proposed that game designers are on one end creating mechanics, and the players are on the other end experiencing the aesthetic experience.
What this model proposes is that the game designers create the mechanics, and when the mechanics run during run time, they create dynamic situations, and this leads to an aesthetic experience for the players, or something that they feel, whether they feel fun, whether they feel exploration or something.
Where a level design sits, in my opinion, it sits somewhere here.
Where it's, again, coming back to the concept of a funnel, and it's funneling these dynamics into aesthetic experiences.
To speak a little bit about level design at King, the role of a level designer in King generally encompasses designing levels and progressions of course.
We create content at a regular pace, like that's probably once every one or two weeks we release new levels.
Level designers are involved in creating new content as well, new power-ups, new blockers, new game modes, and because of the sheer number of levels that we need, game designers do level design too.
One thing that I like about King a lot is that there's good knowledge sharing in King.
We have our own internal app store where you can go in and you can download any of the other teams' work-in-progress games.
You can play them, and it's easy, because of that, it's easy to start a discussion with any other designer during the regular meetups and the sharing sessions that we have.
So, delving a little bit deeper into what makes good levels, this is the section about level design principles.
One of the ways of how we approach building a saga, and this is only one of the many ways, is it starts a bit like this.
It starts, as with any other game idea, it starts with, hey, wouldn't it be cool if this or that?
So it starts from a cool idea, and it goes to this platform.
It's less famous than our saga games.
We have a website called royalgames.com, where it's a website where you can play browser-based games that last about three to five minutes, and mostly it's based on a set of simple mechanics.
We've picked, what happens normally is that, or what happens sometimes is that we pick good games from royalgames.com and we apply the saga envelope on it and we create a saga, like Candy Crush Saga.
Some examples of some saga games that started this way, Diamond Digger or Bubble Witch, they had original versions of royalgames.com and they were transformed into saga games eventually.
What does it mean to create a saga?
It means, in King, we call this the saga envelope.
Normally, a lot of you are probably familiar with this by now, but what it normally means, just for definition, some degree of linear progression.
It starts from 100 and it goes to over 1000 levels for some games.
Like if you look at the original Candy Crush or Farm Heroes, they have more than 1000 levels now.
There's new content every one or two weeks.
There's some light social elements, like being able to see your friends on the world map, being able to send your friend lives, and it's intended for a casual audience.
What is really effective about the Saga envelope is that it's a strong progression-based retention driver. Because there's new content released every one or two weeks, there are new levels for players to play, the players are always coming back to see something different, to see something new, whether it's new content or new levels. And because it's so effective, we apply this across the different King games, from Farm Hero Super Saga, to Blossom Blast, to Candy Crush Soda.
But what this means across King is that across all our games, we need a lot and a lot of levels.
So the level design process, the building process, is super intensive.
In King Berlin, one game that followed this model is this game from royalgames.com.
It's called Lucky Lantern.
It's a linker, and I'm going to show you a short video of the gameplay.
So, to better explain what was going on in the video, basically the game is a linker.
You link three or more lanterns to remove them.
One special feature about the game is creating dragons.
When you link six or more lanterns, you create a dragon.
And the dragon flies in the direction of your last link.
You can activate bombs and rockets by linking to them, which will fire after the refill for cascade effects.
And you can collect coins by bringing them to the bottom.
or hitting them with power-ups.
The objective of the game is to score a higher score than your opponent.
So bearing that in mind, the next question is that how do we start or where do we even start designing levels?
This is what the typical level design process in King looks like.
It starts from a level concept, of course.
It starts with a good idea.
How do you make an interesting level?
You go on to do a level layout, how to fit this idea into the board.
You create a level in the level editor.
Once you think it's ready, you test it a little bit and you balance it.
You think that, okay, it's ready, and then you send it out for real testing.
And because we're running live games, very often the loop of testing and balancing goes on forever.
A good place to start is breaking the game down into different kind of building blocks.
So, like in the case of Lucky Lantern, you can think of it as breaking it down into four different blocks.
Like game mechanics, the basic linking, activating power-ups, creating dragons, collecting coins.
Because it's a simple three to five minute browser game, there's only one game mode, which is getting a high score to beat your opponent.
The gameplay elements in the game, lanterns, rockets, bombs, coins, and the blockers, things that make, that add some challenge to block the players from achieving their goal, clouds, and arguably coins, because sometimes they get in the way as well.
If you use the same model to analyze one of our other games, this is from Candy Crush Soda.
So the game mechanics in Candy Crush Soda, like basic swapping, creating power-ups by creating matches of four or five, for example.
Power-up combos when you match two power-ups together.
Or if you're late enough in the game, there are helpers as well, like Sprinkle Shell.
I think past level 250.
The game modes, a lot of different game modes we have in Candy Crush Soda.
Pop the bottles, find the bears, clear the chocolate, clear the bubblegum, spread the jam.
The gameplay elements.
You have candies, you have the power-ups, you have the walls, you have the holes, things that you can use to build a board.
Like blockers, many many different blockers in the game, like ice or frosting, licorice logs, cupcakes, honey, licorice swirl, the list goes on.
And because Candy Crush Soda is such a big game, we also have what I like to term modifiers, things that we put on top of some levels to add a little bit of spice.
Things like the soda physics, for example, or the gravity, or the multiple gravity directions, or multiple screens, or scrolling screens as well.
So, once you know your game and once you've broken it down into the different elements, the next step is to build levels.
And when we're talking about levels, these are four concepts that I adapted from this book called Game Level Design by Ed Byrne.
The four different concepts, the first one is difficulty, how to keep players challenged in the level.
Rhythm.
how to vary the player experience across the game, flow, how to keep players moving towards the goal, and hooks, how to make one level different from the other.
But what you need to keep in mind for our case particularly is that we are creating mobile games.
One thing that we use quite often in King is that we are creating games that have this bite-sized brilliance.
This means that our players engage with our games in.
situations that are different from the normal call game.
Like it could be on the train, it could be when they're waiting for a plane on the airport, it could be a mother babysitting her child while playing Candy Crush with her other free hand, or it could be friends at the dining table playing this over lunch.
So, the idea is that we're going to look at these concepts and how we translate them to the mobile format.
A good place to start of what makes an interesting level would be starting with a hook.
A hook is defined as a unique element that makes a level different from other levels in the game.
And it could be anything.
It could be this twist.
It could be a special power, it could be a different gameplay style, it could be a different environment, a different art style.
Anything that makes the level unique.
If you look at some of these examples in traditional games, for example, in the first one here, in Cakewalk Flip in Super Mario 3D World.
The hook here is that every time that the player jumps, the panels switch from red to blue.
And this gives you different platforms to jump to.
Over here, Shadow of the Colossus. How many of you have played this game?
Yep, great game. One of my favourites.
The whole game, as you know, is about 16 different boss fights, by each boss having a different hook, where you need to use a different set of mechanics or tactics to actually beat the boss.
This level?
Everybody knows what this game is?
Yep, Half-Life 2, Ravenholm, one of my favourite levels in Half-Life 2, where the hook is, you start the level and you almost have no other gun, except the gravity gun and most of the level you have to go through only using the gravity gun to get to the level.
And this is from Bayonetta 2, where earlier in this year's GDC, in Abbasan when he was talking about creating levels for Bayonetta, one starting point of which they had was to start thinking about scenarios.
What kind of scenarios or what kind of action scenarios that is interesting for Bayonetta to be in, and then designing the levels and the spaces and the narrative around that.
So how does this translate to our games?
We start from level concept.
So if you look at, one way to think about it is how, one starting point is that how do we utilize a mechanic?
How do we utilize a mechanic in an interesting or a new way?
Any of you know or have played this game, Blossom Blast Saga?
Yeah, so for the people who haven't played this game, Blossom Blast Saga is a linker as well.
The main thing about the game is that the longer your link is, or if you make your link powerful enough, it triggers a blossom blast, which is a chain reaction that triggers everything else.
So in this level, particularly, we focus on that mechanic, and the idea is that you only have one objective, which is to clear this weed in the middle.
So the player needs to set the board up so that it comes to this situation, where they can trigger a blossom blast close enough to the weed, and then when they do it...
trigger the blossom blast and they clear the weed. So this is a level that's focused on utilizing that one mechanic in a different or very specialized way. That's one level concept.
Another way to think about it is another way to come up with interesting levels is what happens if you combine different elements in the game to form new gameplay dynamics.
This is a screenshot from Candy Crush Jelly. Candy Crush Jelly is our latest Candy Crush game that One of the new features is that it has a jelly queen.
A jelly queen is an AI-controlled character that every time after you make a turn, the jelly queen makes a turn and spreads the green jelly.
So the objective is to spread enough of the red jelly over the board.
So this is introduced early in the game.
But what happens later is that we introduce this same element and we combine it with another game mode that was introduced before this, the pufflers.
The pufflers are a game mode where they run around in the frosting below and you need to find them.
But the new gameplay dynamic here is that we took the AI of the jelly queen, and we put it with find a puffler.
So you're fighting this guy instead, called Cupcake Cow, one of the most hated characters in the whole Candy universe.
And you need to compete against him to find these guys.
So this is an example of how we combine different mechanics to form new situations or form new level dynamics.
Sometimes it starts with, sometimes the idea is to create an emotional wow moment.
Like in this case, again, in Candy Crush Jelly, you look at this board layout, what happens here is that there's only one move you can do in the first turn, which is to combine the chocolate bomb with the orange candy, and when you actually do that, it triggers a chain reaction of all the other striped orange candies at the bottom and blows up like vertical blasts to the rest of the board.
And it's this feeling of wow that starts the level, and the whole level carries on with just building on power-ups.
Or coming back to the idea of gameplay modifiers, this is a screenshot from Farm Heroes Super Saga.
One of the new modifiers that we had in the game is the wind direction.
The pieces fall according to the direction of a match, and that's the modifier of this.
This is the first level that's introduced.
When you match the banana to the right, the pieces will fly to the right instead.
So this is a situation where you think of a modifier and you apply it on a normal level.
So these are all good starting points of how to create an interesting level.
The next step is that once you have the concept, the next step is thinking about how do you put it onto the board.
What kind of board layout would be interesting for you or for this concept to be realised.
So this is an example of all my sketches.
For example, I do this on paper first.
My personal pro tip, super useful in meetings, when everybody else is talking and you don't want to pay attention, that's the best use of your time that you can have.
So you're ready.
So you think that, okay, I have a cool level concept, right?
And then I have a layout, I'm all ready to build a level, it's going to be fun.
So you go to the level editor, and the process looks a little bit, a simplified version of the process looks a little bit like this.
You translate the level layout from paper onto the board.
You place your objectives, for example, clear the ice or whatever.
You place your game objects, so you put like, okay, like all these objects, all these power-ups onto the board.
You place your blockers, clouds for example, or something to get in the way of the challenge, and then you run the level and you think that, okay, it's going to be awesome, it's going to be cool.
But most of the time it's not the case.
Everything falls apart at this point when you press run.
Why is this the case?
Why is it that everything that I thought in my mind up to this point, why does it break?
It's because finding the fun in the level is not that easy.
It's not just about one concept.
It's not just about one layout.
The moment you start combining things together, you're opening the gameplay possibility space.
And this is where we tread into the realm of experimental gameplay dynamics.
One term that is mentioned over and over again in level design is this term called moment-to-moment gameplay.
What happens from one moment to the other moment as the player is playing through the level?
In our case, because most of our games are turn-based, I like to term this as our turn-to-turn gameplay.
And this is where the concept of level flow comes in.
So flow.
The concept of level flow is the concept of how to keep players moving forward towards the goal.
In traditional games, you use concepts like signposting, like goals and sub-goals, or some sort of hint system.
What Edburns says in his book is that the level designer is the invisible hand that guides the players forward.
But the more aware that the players are of this hand, the less fun that it will be.
So this is a little bit of a paradox.
An example of level flow in one of our games, again coming back to Candy Crush Soda, if you look at this, this is how the board starts.
There's only one possible move, which is to create a match of six.
In Candy Crush Soda, if you're familiar with the mechanics, when you create a match of more than five or six, for example, you create this thing, the color converter.
So in turn two, you actually activate the color converter with the green one, and this colors all the candies of another color to become green.
In this case, what happens here is that all the orange candies become green, and a series of matches and cascades, and then this becomes the board state after that, which creates a new power-up for you, which is the chocolate bomb.
And then when the player, in the third turn, when the player activates the chocolate bomb...
it clears all the green again and it opens up new possibilities.
And you can see that what happens here in the fourth or the fifth turn is that...
The player can now move on, like many power-ups on the board, and the player can choose how he wants to engage the board at this point, whether he wants to go for the fish first, whether he wants to go for the striped candy, or whether he wants to match the chocolate bomb.
The idea is that it starts from a linear one possible move, and it opens up slowly, so the players are guided slowly along by this invisible hand that we're talking about.
The main idea is that you want to move the players forward.
You want to give them choice, or at least some illusion of choice, that they have something that they can do in the game.
But the main thing is that you're still trying to push them forward as much as you can.
How we do this in our game, one example, is coming back to this level.
So if you look at the level, this is the layout that you see.
The level is pretty straightforward.
If you link these three, you activate this line blast, which will hit this, and will trigger all these things, which triggers a cascade effect.
So this is the first turn, and the first turn we're building towards a wow moment, that feels cool, that's like, okay, it triggers all these things, it feels really great, right?
But how do we try to engineer some degree of level flow after that?
If you look at this, if you remove the clouds, and you look at what's happening behind, we have these pieces, which has these question marks.
These pieces are pieces which have a probability of, during spawning, of being a power-up.
I think in this case, we tried 30%.
So imagine all these pieces with question marks have a 30% chance of being a power-up.
What we're actually doing here is so that after the first turn, when you clear the clouds, some of these will be power-ups, will open up so that you can go ahead to work towards the next sub-goal.
This is one of the ways that we try to move the players forward.
But again, because we're creating a casual game and players engage our games in the most casual manner, sometimes all these subtle hints fail.
And when that happens, the next thing we can do, or the best thing we can do, is to introduce the hand of God.
In our case, that's the hint system.
Which is to, yeah, highlight super obvious moves like, hey, over here, move, so that the players keep moving forward.
All right, so after that point, we are creating, we're talking about creating interesting levels, about how to move the players forward.
But once you have a set of good levels, the next step is to put them together into a saga.
So this is an example of what an episode in Candy Crush Jelly looks like in our level editor.
You can see all the levels laid out.
Yeah, don't look at that, don't trust the numbers here.
All of them are not difficulty zero.
but it's just that way in the level editor, and it's in this layout so that we can move them around, we can shuffle them around to create a different one, to create different progressions.
One important thing to think about, about creating progressions, is that we want to create a rollercoaster experience.
It needs to have highs, it needs to have lows, it needs to have twists, it needs to have turns, even in one episode itself.
And this is where I want to introduce the concept of rhythm.
Rhythm is a way of expressing the pattern, the frequency, and the intensity of the sequences of events in the level.
And the main purpose is to create some degree of variety in the player so that you give them some emotional journey that keeps players engaged in the game.
Ideally, a progression curve should look a little bit like this, the x-axis showing time and the y-axis showing the intensity of the experience.
It shouldn't be a straight line.
You want to ramp up the intensity as the player goes along, but you want it to be like this, where there are highs and there are lows along the way.
Particularly in our case, we use different factors to do this.
Things like different game modes, things like hard versus easy levels, short or long levels, or even how often do we introduce new content to break the monotony.
One thing that's super useful for us is this, having level libraries and having beat charts.
So this is an example of one of our level libraries where you can see that it's an Excel sheet that has all the levels listed.
It shows you all the different game modes and this is the permutation of all the different blockers that we use for the level.
What is super convenient here is that because we have this in an overview, and we are creating a progression, for example, let's say it's about blocker X, it's about clouds, then we can think about, we can look for, okay, we need a level with clouds, we need a level with clouds in this game mode, or we need a level when clouds are combined with another blocker, for example.
This gives us an easy overview that we can just copy and paste into a beat chart, so that we can play this out, and easily create progressions in our minds, at least, or at least on paper, before we actually physically go and put it out in testing.
Another concept when talking about progression is this concept made famous by Nintendo, the four-panel Japanese comic concept called Kishoten Ketsu.
It's because it's Japanese, it's read this way, from the right to left.
Basically it means to introduce, to train, to twist, and to conclude, or to test.
Nintendo uses this in their games super often, and one of the best examples is this, one of the best games ever in Super Mario 3D World.
I'm going to show you a short video of this swell.
and here you'll have to deal with the flipping panels as you climb up the cliff face.
Then comes the twist.
Towards the end of each stage, the concept is turned on its head in some way to either challenge your mastery or to make you think about it from a fresh perspective.
In this case, we have to deal with the flip panels while also dodging the blast radius of this bumper enemy which we fought a little earlier in the stage.
And finally, we get the conclusion.
Each level gives you one last chance to show off your skills with a suitable flagpole sequence.
Yep, so that was a video taken from this website called, this YouTube channel called Game Maker's Toolkit that shows the application of that principle.
And now I want to talk about how we apply that principle in one of our games.
Coming back to Blossom Blast Saga, this is the first time this new game was introduced.
Unfortunately, named Bloom the Big Buds.
So, what you actually have to do here is that you need to link flowers of a certain colour into this big bud, and you need to link enough so that you bloom it.
It's first introduced in this, and then it's trained in a later level, where it's the same concept, but you need to work your way down to it so that you can do that.
And the twist happens when we combine this with one of the other blockers, the glass blocker.
The glass blocker behaves like a lock, where you cannot link into it from the start.
You cannot link from it from the start, but you have to link into it, and you can destroy it by blooming chain reactions or blossom blasts.
What happens here is that the big buds, when you bloom, they actually crack the glass.
So it's a new use for the big buds when you combine them with this new blocker.
So that's a twist.
And then in level 20, you see a level that looks a little bit like this, which is just half of the board are these buds, and you need to bloom all of them in...
How many turns was that?
39 turns.
Yeah, this was a pretty tough level.
Same thing for our game. Coming back to the example of Lucky Lantern, we create a dragon by, like in our case we reduced it to five. So these are the board layouts for how we introduce the dragon concept.
This is the first level where you introduce, where you see the dragon.
You create a link of five and then it clears the clouds.
And you realize that the level is super linear. You can only create links of five as you go along, and you will clear more and more stuff as you go along.
We train this in the next level, where you're creating, you start the level by creating a dragon, again, but what happens here is that you're creating it naturally as you play.
The objective is to clear the ice, and you create it naturally as you play, and you need to kind of hit these things in the middle, but you don't really, really, really need it as well, because you can luck out with, like, a match here, for example.
And then we twist it here, in this concept, where you need to use it to hit this particular block in the middle.
But at the same time, we are combining this with another gameplay element that we introduced earlier on, where creating a longer link creates some sort of super power-up, and you need to use that to clear the outer area.
And then in this level, we test all the concepts that you learned previously, where you need to use the dragon, you need to use the power-ups, and into a conclusion here.
So, that is what, now we are at the last section, which is about testing.
After creating a series of levels, putting them together in some sort of progression, putting them, laying them out, the next step to do is to test them and to tweak them.
And this is where the concept of difficulty comes in.
Difficulty is easy to explain, it's what keeps players challenged in the level.
It's a level design tool that encompasses both rhythm and flow.
by every game has a difficulty curve, because every level is a point in that curve, and your game becomes hard or easy depending on all your levels within.
When you talk about difficulty, you have to talk about balancing.
It means different things for different games. For our case, for example, in Candy Crush Soda, some of the obvious things that we use to balance a level to become easier or harder, things like number of objectives, so like how many you need to hit, how many bottles you need to pop, for example, the number of moves you have, or for the people who want to go for 3-star, what are the 3-star values.
But more subtly, some of the things that we do to make the gameplay easier or harder, things like number of blockers on the board, for example, the level and the number of blockers on the board, or something even more subtle, which is the number of colours available on the board, because more colours means that the chances of you cascading or forming power-ups is less.
So if you want to make the level easier mechanically, one of the things you can do is to actually reduce the number of colours available on the board.
Of course, when you talk about difficulty, one of the concepts that comes to mind is flow theory, made famous by Genova Chun in one of his earlier games, Flow, where he experimented with showing that in games.
The concept of flow theory is something that states that...
Optimally, you want your players to be here, within flow, where their abilities actually meet the challenge that they are presented.
What happens if their abilities are more than their current challenge is that they become bored, and if their current abilities are not enough for the challenge that they are presented, they go into the zone of anxiety.
It's important to keep players here, but bear in mind that, again, even though we want to do that, we want to keep players within the realm of flow, we also want to give them a rollercoaster experience.
So sometimes, in my personal opinion, it's important to break the flow a little bit.
So you can see that, if you're coming back to this curve of intensity, you can see that it follows the flow curve roughly in this zone, but sometimes we want to deliberately break the flow here.
so that we have levels that are a little bit more difficult, a little bit easier, like in this case.
Like you can see that here, you want a level that is super easy so that it feels good, and then you ramp it up so that it becomes a difficult level again, so that they get some sort of emotional experience.
But what makes an easy level, or what makes a hard level, is something that is super hard to define.
It varies from designer to designer, even within the same team.
Like for me, what happened recently, in one example, was that...
I created a level and I have this exercise of stating the average number of attempts I expect the player to fail in that level.
I created a level, I'm like, yeah, okay, this level is hard, but it's moderately hard.
Maybe it's like eight attempts, that was my guess.
We sent it out for testing, we got the data back, and the actual number that came back was that the average number of attempts was 24, which shows that I probably designed levels a little bit too...
My idea of hard is probably a little bit too skewed.
So it's super important that we have different modes of testing.
So the general testing cycle in King looks a little bit like this when you create levels.
You start the level, and you create it, and first you self-test it, I would say an average of 15 to 20 times, where the designer plays it to make sure that everything is okay.
And then there's some degree of internal testing, where you test with other designers in the team, you test with other people in the team to play the levels to see if what everybody feels about it.
Is it fun?
Is it easy?
Is it hard?
And then once that's ready, you send it out for qualitative user tests.
We use different channels to see this, we send it out to actual users, and they play the levels, they play the game, and they give their feedback as they're talking through as they're playing the game.
And if this is okay, if we get good enough feedback, then we send it out for playtest releases, which is often releasing the game in a country with a sample size of a few thousand people, so that we get some quantitative data that we can work with.
In King, one of the sayings is that it's where the magician meets the mathematician.
So as a level designer, you need to have a little bit of both.
You need to have the magical gut of the magician to know what makes something fun, and you need to be able to look at data and analyze it like a mathematician.
If you're looking at free-to-play games, of course we're talking about the normal KPIs and measurements, from retention to progression to difficulty, and finally monetization.
This on its own could be... it's its own can of worms and it's a talk in itself.
I don't have the time to go through all of them today, but the general concept is that we start from retention, because good retention is the starting point, and that will gradually and hopefully lead to good monetization later on.
So if you look at retention, the things that come into mind are these two concepts.
How difficult is the game?
How difficult are the levels?
And what's the player progression?
Some of our charts look a little bit like this.
This is the example of a player progression chart.
What starts here is 100%.
So 100% of your players are at level 1.
And you see the drop-offs across all the levels until level 100 or level 120.
So you can see the percentage of players that drop.
To pick up difficult levels is that when the drop is steep, like for example in this case, it's probably a series of easy levels and then a harder level here, or this case as well.
And when you plot that across different progressions when you're doing A-B tests, it looks a little bit like this.
Each of the colored bars here represent one curve, and this is the curve of the different progressions.
The green one is the easiest one because it has the shallowest drop, and these are steeper drops being harder progressions.
To reinforce this, we also use this other curve to measure difficulty.
This curve shows the cumulative number of attempts.
So as the player progresses across the game, how many attempts do they take to go to level, for example, if this is level 60, this is the different curves, and how many lives do the players spend to get here?
Of course, this is normally an upward trend.
We reinforce this again by analyzing the level in this.
With this graph, the average number of attempts to pass a level.
So each of these points are a different level, and this shows you the average number of attempts.
So for example, if this is an easy level, maybe it's just two attempts.
And this is probably a hard level, which is average of nine or 10 attempts, probably.
And when you look at data, it's one of those things that because we're running a live game, it just goes, it's something that we have to, coming back to the concept of balancing and testing, it just goes on and on and on and we're constantly tweaking it over and over and over again as we're running the game, so that we optimize it and do suit it for the new players as well.
How many of you have played the original Candy Crush?
How many of you know or have passed level 65?
How many of you think that level 65 is the worst level ever?
That's right.
So, it started that way.
The history of Level 65 is that it started as, in the original Saga version of Candy Crush, in the very, very first version, it was the hardest level.
And it was the last level.
And that was before my time.
And what happened was that, my guess is that the designers were thinking, okay, since it's the last level, let's throw everything into this level.
Let's make it insanely hard so the players have a real challenge.
When it became a proper Saga game with over 100 levels...
It kind of remained that way, and players were stuck there for a super long time.
If you look at some of the comments, this is taken from some of the websites, 18% of people think that level 65 was the most difficult level ever.
I love this comment a lot, about some feedback about it.
This level just sucks. There isn't any way to describe it.
Really, it's not you, this level just sucks.
So, what happened later was that, because of the feedback and because we created more levels for the players to progress, the level was tweaked over and over and over again.
With the data that we got, with the matrix that we have, we tweaked it using different things like removing the chocolate in the corner, reducing the level of the frosting, for example.
Some of the different things that we did.
And then we finally got to this result, which is...
Yeah, one of these players was saying that this used to be one of the most difficult levels until it was modified and now it is one of the fun levels.
So this is an example, an infamous example of how we managed to use data to tweak a level that was notoriously difficult to become a fun level.
And with that, I think we've covered the four T's.
So just to recap what we're talking about today, the section of theory, where we give an overview of level design, thought, where we talk about the four level design principles, the tools, I show you how we use the tools to build a saga, and testing, how we test to tweak the levels.
Again, a recap of the level design process.
It looks a little bit like this.
It starts from a level concept.
You create a level layout, and then you create a level in the level editor.
You balance the level, you test it, and it goes on forever.
And finally, the four concepts again.
Difficulty, how to make fun levels.
So difficulty, how to keep players challenged in the levels.
Rhythm, how to vary the experience so that it's an emotional journey.
Flow, how to keep players moving towards the goal.
And hooks, how to make one level different from another.
And we are done.
Yep, questions?
Is there a mic?
Yeah please stay, let me just give you a mic.
So it would be great if you could introduce yourself and where you're from before you ask the question.
Hey, my name is Varun.
I'm from Bigpoint in Hamburg.
Yep.
That's a really good talk, by the way.
Thank you so much for sharing.
Thank you.
So is each and every, so basically from your presentation, each and every level on the Saga games are like handcrafted, right?
Which is really, really cool.
But is there some sort of an algorithm or some sort of machine learning that goes into place in terms of, hey, player X has failed at level 71 X number of times.
So it's going to automatically tune the number of turns he has.
to give him a few additional turns, maybe?
Yep.
So it's a good question.
It's an interesting question.
So I think if I got it right, the question is that is there any kind of machine learning for to know if the levels are easy or difficult, right?
So to be a little bit of a self-company pimping.
There's a talk later today, I think, where he's talking about how AI is used in Candy Crush, and that's exactly what we do. We actually have bots in the different teams where they play the levels to, where the bot plays the levels to see the average number of attempts of passing or failing, and we use AI for this. Having said that, what I know, and I'm not an expert in this, but what I hear from the other teams is that The bots are normally super inaccurate.
They are good for predicting some degree of difficulty on a curve, but there's always some degree of offset as well because a lot of it still comes, the bulk of it still comes from actual data when we send the levels out live, and we tweak it from there.
Hi, my name is Sophie and I come from Buga, Belgium as well.
Thanks for the talk.
I had a question about more when you have the levels live.
So you said the importance about testing, balancing, and so on, even after they were shipped.
I remember I saw in some levels of Candy Crush where people can rate the levels.
So how do you use that data as well in the process of rebalancing the levels?
Sorry, where people can rate the levels?
Yeah, so you finish the level and you are asked as a player, so how did you enjoy the level, and you put a star rating.
And I don't know if that's part of your process.
All right.
So this is an interesting question, and I cannot really directly answer it because I'm not.
I didn't work on Candy Crush Soda.
But I think it's probably as king because we're running live games and we're testing things all the time.
Most probably that was probably when you saw it, it was probably either an A-B test or something that was just running for a period of time.
But from my best knowledge, I think that the main data that we still use are some of the stuff that we...
that I mentioned in the talk. Things like the normal drop-offs or things like the average number of attempts.
So maybe it's factoring, like how fun it is, but fun is always like a super subjective thing and it's really hard, a lot harder to use that kind of data to tweak your levels compared to more like more hardcore numerical data.
Yep, was there another question? Yep, here.
Just a straightforward question, how do you self-launch levels?
Like, do you, for end players, do you just like release them first in some other countries?
Or is there a smarter way to do that?
So I think different teams do it differently, but one of the more effective ways is really A-B testing.
So when we're launching a new episode, we often just A-B test it if we have to, or A-B testing it in a smaller country, in a smaller group, and then see what the data is.
So again, coming back to it, but of course, these kind of processes are more qualitative than quantitative.
So even though we try to do that, but a lot of it still, I would say, turns out quite differently when we actually release the levels live to a larger volume.
So it's a super tricky process, which is why there's this process of going on about tweaking it almost like forever.
So for every chapter you release, you A, B test it, and then you keep the best levels?
Not every chapter, but sometimes it especially depends on what the purpose is.
If there's a new blocker, sometimes it's important to do that.
But most of the time, if it's just one progression, we also try to do some sort of preliminary testing, like sending out to a smaller sample group.
Even if it's one progression, just to see some initial feedback.
OK.
Thank you.
Hello, I'm Mark from Bohemia Interactive. My question is how you control the random aspect of the levels? Like, especially considering the casual audience?
If, like, there are no dangers of some dead stops or something like that?
All right. So this one is super tricky and depends from game to game, right?
If you talk about a game...
depending on the core of the game. If you talk about a game like Blossom Blast, which is very focused around chain reactions, the degree of randomness from the core itself is a lot higher, that something can happen from one turn to the other turn, right?
In Candy Crush, similarly as well, because after you make a match, even if it's a small match, the chances of things cascading into something more, or like creating a power-up through cascades, that's pretty high.
So most of our games are built where there's some degree of luck in the core mechanics, and to do it, like coming back to one of the previous examples that I was showing, the slide where it has this power-ups that have the chance of some objects being power-ups, there we try to do this semi-deterministic approach to some extent, where some of these things have the chance of spawning. That is in our game because we don't create power-ups on the fly.
So there are different factors to try to do it, and it really depends from game to game.
And isn't there a danger that the level performs different as a level designer intended?
Yes, there is. So, again, different games have different methods of doing it.
Like, I think in Candy Crush they use a seeding system to determine certain seeds, and they actually use that to filter out what's a good seed versus a bad seed.
But yeah, there's so many different ways to do it.
Like, it's one of those things that, because of the sheer chance of it, and...
Yeah, because of the sheer chance of it, it's just so hard to always be able to predict what's going to happen.
So, it's not something that it's...
Some degree of... We have some degree of control to it, but very often it's also at a point where you start the board and you look at it and you're like, oh, crap, there's no way I'm going to win this level in... You know that in five turns.
So that's when you have a bad seed, for example.
And promise the last one.
Is there something which you design into the level as a point of no return for the player?
has a sorry a point of no return I mean like a sequence of moves you have to do to actually finish the level or you just can't yeah so We try to avoid that, but if you see that, if you play enough, like, especially like some of the Candy Crush games, like Soda, like there are some levels where they have blockers on top.
If you do enough wrong moves at the start of the level, you can come to a situation where there's no move and normally that becomes like a heart fail scenario.
We try to avoid that as much as we can, but it still happens.
So there are scenarios like this.
And the opposite of that is the positive side.
What happens when you create so many power-ups that it cascades forever?
If you notice this, and this is pretty subtle in Candy Crush Soda again, if after a certain number of rounds of cascade, but what happens if you cascade too much is that they throw a six candy, the indigo candy, into the mix so that the cascades just stop.
So yeah, there are fail-safes on both sides to prevent things from, yeah, whether it's too good or whether it's too bad.
Thank you.
Yeah.
Any other questions?
I have a question.
Why linear progression?
What?
In all your games, there is a linear progression.
Why not some tree or?
So, as a company, we are trying to experiment with this, especially, right?
And when we started, linear progression is one of those things that is new.
It was new and it was easy for casual players to understand.
And it's age-old, right?
If you look at traditional, even from the old Mario, it's about linear progression and it's about moving, seeing new levels to the other, right?
So this is a super strong driver for casual players to always see new levels to play, to move forward.
Having said that, Candy Crush is like, I don't know, four or five years old by now, and we are experimenting with different things to make, like, non-linear progressions as well.
But, I think there's a lot of unannounced projects, and we are experimenting a lot of these internally, but we haven't found, or we're still trying to find the best way to present this.
The biggest problem here is that, how do you get players from...
being so used to linear progression of just moving forward to see the next level, how do you get them into, for example, what happens if we do branching paths or alternate paths, or where they can choose, what if it becomes open world?
I think it's more like a UX problem of trying to figure out how to push players into this.
There is definitely a strong motivation and a strong driver for non-linear approaches, but we're still experimenting with the best ways to actually do it for our audience.
How do you keep inspiration flowing in when you've produced hundreds of levels with the same elements?
From the designer point?
Yeah.
Hmm.
The heart...
The heart ultimate, ultimate, ultimate, ultimate, ultimate solution is transferring to another team so that you start something new.
But yeah, it's difficult because it depends.
Different designers want different things.
Some people are really okay with just building new content and they want to specialize in that.
I mean, and some people are just like, they kind of just want to do new stuff all the time.
So...
The good thing about King is that the company is big enough so that we have a lot of movement of internal manpower swaps, whether it's the comments, or whether it's transfers, or even within the studio moving to another project, so that everybody is equally motivated.
Having said that, there is still definitely some degree of...
monotony, maybe, to this whole thing, but I would love to say that...
Yeah, I would love to say that...
Knowing that our players are enjoying our games makes me happy, but I'll be lying.
So, it's... it's there.
It's something. It's there, you have to do it.
And you try to find the fun in it.
Like, game design is not always fun.
There are the good parts and there are the bad parts, right?
So, you find something that clicks.
Any other questions?
Yup.
Do level designers, like for Candy Crush and stuff, do they have to keep monetization in mind as well? Or is that a completely different...
It's...
This is where it becomes a little bit tricky to speak about because I'm not sure at which point would my legal come and stop me and like...
So, it focuses on retention first for sure, right?
Monetization becomes its own problem later.
But quite often we have cases where we start a game thinking about building fun levels, and that's always where it starts, right?
And you build fun levels, it's fun, players love it, but sometimes maybe it's too easy, maybe it's too boring, maybe it's the same thing over and over again, and it doesn't monetize, right?
So normally the process is that we look at different matrices at different points of where we are in playtest.
So we always start from looking at short-term retention, long-term retention, or mid-term retention, and then we look at monetization.
And there are some things which I probably cannot really super share about what are some of the things that we do, or what are some of the things that King knows, or King tries to maximize monetization.
But there's definitely different stages and there are different things that we apply.
Thank you.
How many level designers do we have per team, normally?
If I can ask that.
Hmm.
This is different from, depends on how big the game is and depends on where it is.
I think if I'm not wrong, Candy Crush at one point had four level designers per team, and this is just level designers, I think, not even considering the game designers. Like on our team currently, because our game is still going, potentially going to soft launch, we have three designers, but two of them, but we all do level design. Thank you.
When it comes to rhythm, what do you think, like, how many things can you introduce in the early pack of the game?
Because you have so many different level types that has spawned across the game, but what should be the, is there a standard that you did use in the first pack of the game?
Well, it depends on whether the game...
Again, it depends on whether it's a new game with a new mechanic or whether it's one of the sequels, right?
If you look at some of the current examples that we have, Farm Heroes, Super Saga, or like Candy Crush Soda, what these...
The sequels, the approach is normally to introduce your new features as early as possible because it's the five-minute experience.
You want players, returning players, to come in and see something new so that they get hooked, right?
If it's a new game like Blossom Blast, for example, I think, if I'm not wrong, remembering the beat chart is...
Throughout the whole game, there's only three game modes for the first 100 levels.
I think it's score, the bloom, the big buds, and remove the weeds for the first 100 levels.
But every 20 levels, they have a blocker or something.
So, again, it depends on the game and depends on the content.
But when it comes to rhythm, I think some of the things that we try to do is to not use the same game mode for more than five levels in a row, or three levels in a row, so that it's not the same game mode over and over again.
And again, alternating between hard and easy levels, so that it's not two hard levels or three hard levels in a row that frustrate the players and make them churn.
So we try to monitor these things a little bit more closely.
All right, we have time for one more question if there's any final questions.
While having like hundreds of levels, is there someone who guides the overall progression, like the overall curve of the whole sum of the levels?
Or is it like you have individual level designers and everybody is doing his own thing?
Or is there someone who says like, listen, we would need like, I don't know, ten harder levels with this kind of like concepts in them?
Or is it just individual?
So I think it depends, the question depends on individual teams again.
In my current project, we have three designers and because we are still at the early stages, I try to oversee the whole progression to know each level.
My designers are always saying that I'm just a freak because I can memorise all the levels because I just know which level is where, like mysteriously.
But I think at some point it cracks.
I don't think I can keep this on.
Maybe this works for the first 50 or the first 100 levels maybe, but when you go to a thousand levels it's hard to memorise all of them, right?
So I think different designers work on different things.
As you get later and later in the game, the most important is the first few levels, the first 50 levels for example, because this is where a lot of players decide whether they want to play the game or they want to drop out of the game, right?
So I think, for me I'm very particular about these, personally I'm super particular about the progression in these levels, and I think in the later levels, once you get past a certain point, the players are used to the difficulty, and then it becomes more...
it becomes more self-contained.
Every episode has its own highs and lows.
They're getting more difficult gradually, towards the episode, but sometimes it's just, for example, the number of difficult levels in the episode versus the previous episode.
And not so much about absolute levels being absolutely harder than they were previously.
So you have something like a, let's call it, difficulty budget for every episode.
How you can assure that, how you can assure the curve you have shown?
Because like, if everyone is doing, I'm doing my level and it's more difficult.
So normally, I think one of the processes is that the team actually sits down and when you play it, you try to play a progression through.
You know roughly which are the easy levels or which are the hard levels.
And you bring this up for an internal review.
But at that point, before it's sent out for any kind of data, it's really basically just a designer's magical magician's gut guess of like, OK, I think this is fun.
I think this is easy enough or this is hard enough.
And very often, we need to use the data that comes in later to tweak them, which is why the tweaking goes on for a super long time.
Thank you.
All right.
I think we're out of time, but one favor that I have is that can I take a selfie with everybody so that I can show my mom?
Alright! Thank you!
