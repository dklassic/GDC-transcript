Hi, I'm Derek Yu, and thanks for watching my talk, One More Run, The Making of Spelunky 2.
Here's a brief outline of the talk.
We're gonna talk about roguelikes, why I wanted to make a sequel to Spelunky, the challenges of making it, the spiky design of Spelunky, what I was trying to accomplish, the release, my takeaways, and then at the end, I'll briefly talk about whether I can imagine more Spelunky in the future, or if this is it.
All right, to start, let me show you a quick timeline of the Spelunky series, which started as a freeware game I made in Game Maker in 2009.
In red are the first releases of each game, plus the book I wrote about Spelunky's development.
I wanted to make a game that had the complexity and player agency of a roguelike, but could be accessed as simply as a platformer.
And I was lucky, the concept took off.
Spelunky inspired some awesome games like The Binding of Isaac and FTL, and the rest is history.
Even in 2021, the genre has showed no signs of slowing down since there was a release of Returnal earlier this year, as well as a big expansion to Binding of Isaac.
So why did Roguelikes take off, and why are they still so popular?
I think the most obvious reason is that they offer a lot of replayability due to the random level generation.
They're fun to play, and they're fun to make.
The results of random level generation can be as surprising for the developer as they are for players.
And they offer great streaming and YouTube content.
So that seems simple enough, right?
But I think another reason why roguelikes are still going is that they embody a lot of the exciting potential of the future of video games.
It's not just replayability.
Replayability is really just a side effect of a bigger concept, which is the exploration of large, detailed, and highly interactive worlds.
Video games are an interactive medium.
That's what separates them from other art forms.
So randomness offers replayability, sure.
That's the basic idea behind slot machines, for example.
But in roguelikes, I think it adds much more.
It's a way to make an infinitely large world within the context of traditional run-based gameplay.
Even if an individual run plays more like a retro title, across many, many runs, the structure starts to feel more like an open world game. That's why the traditional turn-based roguelikes have remained such a strong niche, despite the ASCII graphics and obtuse interfaces. And that's why modern roguelikes exploded once those graphical and UI barriers were removed.
Finally, I think roguelikes are so popular because it's a flexible framework that happened to be tied to a very specific type of game in the past.
The Berlin interpretation created for classic roguelikes is just that.
It's an interpretation.
There are high-value factors and low-value factors, but it's not super strict.
It's not even canon.
Classic roguelike devs have been arguing about this stuff long before the modern roguelike came along.
These factors are, in effect, ingredients that you can sprinkle onto your game to make it more or less roguelike.
What Spelunky did was simply show clearly that a lot of what was interesting about roguelikes were not actually tied to the turn-based dungeon crawl.
It definitely wasn't the first action roguelike, but it made it clear how flexible these roguelike qualities really were.
And I've said this before, but I think roguelike is similar to RPG in that sense.
Any game can have RPG elements and any game can have some roguelike elements.
And that flexibility is a big reason why it's really just a powerful collection of ideas.
So that's why roguelikes are still so popular.
Why make a sequel to Spelunky, though?
Well, I had a few reasons, as you can see here.
The first reason I wanted to make another Spelunky game was, I felt like it still had more potential.
When I made Spelunky Classic, it took most of my focus just to bring these two ideas together, roguelikes and platformers.
There wasn't a blueprint for that type of game yet.
when I started working on it.
And I was also learning GameMaker and doing my own programming for the first time in years.
So there was just a lot to learn.
But once Spelunky Classic was done, it became the blueprint for Spelunky 1.
And with the help of Andy Hull, Eric Serka, and Microsoft, we were able to do a lot more to get closer to the edges of the possibility space of this world and these systems.
It also felt like we were getting closer to the soul of Spelunky, with Spelunky 1, and I wanted to take another step in that direction.
If you think about how, you know, Mario started with Donkey Kong and how each new game in the series moved it closer to where it is now with new characters, new mechanics, more polish, that's kind of what I wanted to do with Spelunky.
So if Spelunky Classic was Donkey Kong and Spelunky 1 was like Super Mario Bros., then, you know, essentially I wanted to make the equivalent of a Super Mario World.
Reason number two as to why I want to make a sequel. As I said before, roguelike is a flexible framework and after Spelunky, new roguelike games moved in different directions really quickly.
Which is, you know, I think is awesome. It just makes the genre just feel very diverse and interesting.
For example, The Binding of Isaac is a top-down shooter.
FTL is a real-time tactics game set in space.
Eventually, Slay the Spire would incorporate roguelike elements into a deck-building game, creating another new subgenre.
So it was a really wild, like, explosion in every direction after Spelunky.
And years after Spelunky was released, roguelikes are still, I think, really popular.
But I still felt like Spelunky was a relatively unique game.
compared to all the other roguelikes.
And I think the main thing that makes Spelunky unique to me is the way that it combines the simplicity of playing an action arcade game with what I like to call high interactivity.
So what is high interactivity?
I think it's a combination of low-level similarities.
In the Berlin interpretation, they call this monsters are similar to players, and they call it a low value factor, but for me, it's one of the highest value factors that was really ahead of its time.
And then there's destructible terrain.
It's rare to play games that have fully destructible terrain, but it's one of my favorite elements in any game that has it.
I think there's a ton of potential in destructible terrain for the future because it's realistic and because it also leads to creative solutions, which to me are always more compelling than singular designer-invented solutions.
And then finally, surprising combinations.
like the Rube Goldberg-esque deaths in Spelunky that always feel kind of comically tragic.
So high interactivity was one of those ideas from Roguelikes that I was personally most excited to bring over to platformers. To be able to access even a fraction of, say, NetHack's interactive complexity through the simple controls and fast-paced action of a platformer, to me that was so exciting.
I didn't feel like a lot of roguelikes really leaned into it in exactly the same way that Spelunky did, which I think is fine.
They explored other cool ideas.
But if other developers had made games that did what Spelunky did but better, I'd say, all right, great work.
I'm going to move on to something else.
So in the end, for me, it came down to potential, the potential of roguelikes as a framework and the potential of Spelunky as another kind of framework.
But the question was, how do we realize that potential?
To make Spelunky 1, Andy, Eric, and I pretty much maxed out what we could do in a few years, even with Microsoft support.
And besides, Andy was busy with his new project, Dunklord, so he wouldn't be around to work on the sequel.
Which brings us to reason number three, why I wanted to make Spelunky 2, which is the right team.
I just wanted, just wanting to make something rather, isn't enough to make it worth making, in my opinion, from like a practical point of view, in terms of commercial game development, especially if it's a project as big and personal as Spelunky 2.
And a lot of the new features that I wanted to add were technically challenging, like online multiplayer and fluid dynamics.
Thankfully, Bluetworks really seemed like the perfect studio to partner with.
We were introduced to them by Sony in 2013 to help us port Spelunky 1 to PlayStation.
It was a great experience.
They definitely had the engineering experience, and just as importantly, it was clear that we worked together well.
They were also one of the few groups of people that By the time I wanted to make Spelunky 2, they understood how Spelunky worked and how it was put together as well as me and Andy.
On the audio side, I asked Eric if he'd be interested in working on Spelunky 2, and he was, so we ended up with a great team to make Spelunky 2.
And of course, we all missed Andy and would have loved to work with him again, but he was working on something cool too at the time. And we definitely kept in touch during development.
Actually, it was Andy who suggested adding the back layer to Spelunky 2, which really gave the level design an extra dimension. But we'll get to that later in the talk.
And finally, reason number four why I wanted to make Spelunky 2.
It may seem strange now, but back then there weren't a lot of indie sequels being made.
It felt like every time an indie game developer had a hit on their hands, they were just totally burnt out on the idea afterwards and wanted to try something completely different.
So part of me wanted to make a sequel just to, you know, be a little different and also to challenge myself and see what it was like.
which as an artist is always a fair enough reason to do something, I think.
So here's the core development team with the two Derricks, me and Derrick Liu, our trailer maker in the U.S., Justin Chan, our illustrator in Canada, Blit, and our testing team at Lollipop Robot in Spain, and Eric in Norway. Once the team was assembled, the project moved very quickly.
Since Blitworks had the code for the original game, they started by essentially rebuilding a skeletal version of Spelunky with new code that would enable online multiplayer and other features we might need, including debugging tools that the original game never had.
With Spelunky 1, Andy was always lamenting our lack of tools, partly because tools are fun to make, and I think he really wanted to make them.
But I got pretty comfortable with our janky process.
of making Spelunky 1, and I was also worried about going down a rabbit hole of tool building that would delay the game even further.
Because not only do the tools take time to write, but a lot of times the scope of the game increases to match them, erasing any games that you might have, that you might get from having the tools.
And we were already a bit in over our heads learning how to make our first Xbox game.
So I felt like we should just push forward.
For Spocky 2, though, we had a bigger team and bigger plans.
And I think we were a bit better prepared.
So good tools made more sense to me.
And the communication was also going to be more asynchronous and more complex, given the time zone differences and the complexity of the game.
So.
Blit ended up building, among other things, ways to set all the different variables in the game.
You know, you could create whatever you wanted at whatever time to test different scenarios.
You could record replays, slow the game down, zoom in and out, pan the camera, etc.
Aside from allowing us to test all the different scenarios that might come up, these tools also made it much easier to grab screenshots and take footage for marketing, which definitely can't be discounted and takes a lot of time.
For level design, we didn't actually have an in-game editor.
But Blit did externalize the levels so that I could edit them in a text editor and use all kinds of flags to make my life easier.
And at this point, I'm not actually sure if a real editor would even be faster for me because I'm so used to doing things that way.
From there, we more or less executed on the design that I had in mind from the beginning.
I used Google Docs to write a design document for the game, and that expanded to be a kind of roadmap for the development as time went on.
We primarily use Slack and the comment feature in Docs to communicate with occasional video chats to talk through particularly difficult problems.
In any game project, there's going to be some amount of exploration of ideas, but.
And, you know, Spelunky 2 is no different in that regard, but I'd say that this was mostly a project of execution compared to Spelunky Classic or even Spelunky 1.
Which isn't to say that we didn't have anything to figure out.
There was plenty of that.
So much that it'd be impossible for me to cover it all in this talk.
But the unknowns were relegated more to the details, I would say, than the core ideas.
We had the previous Spelunky games to look at, and the places where we wanted to make improvements were relatively obvious compared to the previous two games.
The biggest challenges I'd say that we faced during development were these.
All of these were things that we worked on throughout the entire development and only came together toward the very end.
So first of all, the art style.
I had a pretty good general idea of what direction I wanted to go with the art style.
Spelunky had a look that was both cartoony and detailed.
which match the arcade meets roguelike mechanics really well.
But the detail, you know, I added the detail without a real plan.
And I also had to repurpose a lot of the environmental art because of lack of time.
So as a result, every area has this kind of rocky, crunchy granola look to it, you know, which I think is pretty cool actually. But for two, I wanted the detail to pop more in some parts and recede in other parts.
I wanted there to be, I wanted it to be more of a conscious decision.
And I also wanted each area of the game to have its own visual personality with distinct color schemes and patterns.
I wanted each area to really stand out on its own.
And I was inspired a lot by retro platformers that have the like wallpapered floor, you know, as far as, as far as that design went.
But it was a lot of extra work, and it took time to find a good balance between easy to read and interesting to look at. I started with something more on the cartoony side of the spectrum, but over time I pulled it back to something that was closer to Spelunky 1.
And quite a few players felt like the graphics in our early game trailers looked flat, and compared to the final game, it definitely was.
But compression of video, especially if you're viewing it in a small window or something like that, also destroyed a lot of the detail. With trailers, although you always want to give off your best impression, it's also just a really useful time to get feedback because It can be some of the only honest feedback you get from a wider, more general audience until release, of course.
Design-wise, I probably had the hardest time with quests.
I was really excited by the prospect of quests because it was an opportunity to add interesting new characters to the game and weave some static stories into the emerging ones.
The tricky part though was coming up with enough variety in the quests in a fast-paced arcade game that doesn't have a lot of text.
In RPG, you can kind of get away with like a dozen similar fetch quests or kill the monster quests because you can add interest through descriptions and dialogue and things like that.
which we didn't have access to in a game like Spelunky.
Ultimately, I tried to tie each quest to a different system in the game, like mounts or shops or gambling, getting in trouble, things like that.
But it took quite a bit of work to figure out exactly how each quest would play out and in what levels.
Also, given Spelunky's design, it wouldn't have felt right if the quests were just shoved in your face.
They had to be optional and feel well integrated into each level.
And that also took time as well.
And actually, it's funny, I was taking a screenshot, this screenshot for this slide.
I wanted to get a screenshot of Yang just giving me the quest of finding turkeys, but I ended up accidentally knocking a caveman onto Yang and making him angry at me.
And I decided to just roll with it, because that's like.
totally such a Spelunky thing to happen.
Regarding liquids, I really wanted to make them more dynamic in Spelunky 2.
In Spelunky 1, liquid could move around but in a very stilted way that still relied on the grid.
In general, the grid, the tile grid, is an important part of Spelunky's movement and level design that makes it possible, both for me as a designer and for the player who's playing, to know exactly where you can get to just by counting tiles.
Grids are a very video gamey convention, which actually I like.
But when there's a nice opportunity to break it up, I like to take it.
Spelunky for me is a game that is always sort of straddling two different concepts like that at once.
Arcade and roguelike, cartoony and realistic, grid-based and dynamic.
From both an artistic and technical perspective, liquids were really tricky to get right. For one thing, they're hard on the CPU.
Early on, we decided to limit them to the front layer of the game for that reason.
You can't have liquids in the back layer.
And throughout development, we played around with the size and shape of each liquid blob to find a balance between realism and performance.
And we especially had to think about online multiplayer in that regard.
So it took some experimentation to...
get the right balance there and also to make make sure that the look match the rest of the game.
And it also took time to just figure out like what we could do with liquids with with this this type of liquid physics and in Spelunky and in the end I think we came up with some cool ideas like fountains and and the lava mandor who can spray lava on you. But you know there's probably even more potential there.
Then there's online multiplayer, which is always hard, especially for a small team.
I know Guillermo from Blitworks is giving a talk about the netcode specifically as part of GDC.
So if you're curious about the details of that, please watch his talk.
From my understanding, they evaluated the game and felt like a rollback method would best serve our needs, given the size of our team and the game's precise platforming nature, among other things.
But to make a long story short, Blit had to balance implementing my request for more complexity in the levels and also implementing the game, or I'm sorry, also optimizing the game to make sure that online multiplayer would work in the end.
Although it may not seem like it, Spelunky 2 is a really intensive game, much more so than a lot of online games.
Like at its very worst, there can be four players running around and lots of objects moving and colliding in the entire level across two layers with liquid physics.
And yeah, the a big problem is is also just that.
Right, like all these things happen, have to be able to happen at once and be updated every frame across the entire level.
So we can't just ignore what's off screen for performance reasons.
Unfortunately, even with all this planning and hard work, the online was pretty rough on release.
So it really goes to show you how tough a problem it is.
And, you know, I'll talk more about release when I get there.
The final developmental challenge was really just the sheer amount of content there is in the game, much more than Spelunky 1.
I mean, just the player characters alone, each one has over a hundred frames of animation, including extra animations for things like swimming and holding items that didn't exist in Spelunky 1.
So about a year before release, I hired Justin Chan to help with illustrations, which was definitely a big step for me because I was used to doing that artwork myself in all of my previous games.
But he did an awesome job.
And I'm honestly not sure how the game would have gone done otherwise.
So, you know, a lot of credit to him and also credit to to my wife, Frances, for for pushing me to get help with art in the first place.
Okay, so this talk is about Spelunky 2, but I need to briefly mention UFO 50, because for the first part of Spelunky 2's development, I was working on UFO 50 at the same time, which now sounds kind of crazy even to me. But it ended up working out pretty well, I think, because the two projects complemented each other really nicely and scratched different creative itches.
And that picture of Anna right there on the left is by Justin.
So here's a comparison of Spelunky 2 and UFO 50.
Spelunky 2 was a sequel.
It was an existing idea we were expanding on.
The artwork was hand-drawn and very intensive.
On the other hand, UFO 50 is 50 completely new retro games with pixel graphics that I find very breezy and fun to work on compared to Spelunky 2's hand-drawn art.
Of course, the time spent on one project definitely limited how much time I could spend on the other.
But the benefit, which was huge, was that I always felt very refreshed on both projects.
When I was working.
I was much more focused than I usually was working on just one big project at a time.
From my experience, it can just be really easy to get lost in a single project if that's all you're thinking about all the time.
So even if you're not working on two projects at once, which I don't necessarily recommend, at the very least it's important to take breaks and reset your brain once in a while.
For the most part, I treated UFO 50 like a serious hobbyist project, whereas Spelunky 2 is more like my day job.
And at one point, I literally worked on Spelunky 2 during the day and UFO 50 at night, and even used different computers to work on them to help keep them kind of separated in my mind.
But there were months where I had to focus on one project over the other because of a deadline or a particularly challenging problem.
Eric was also working on both projects, and I'm guessing he had a similar experience as me.
Other than me and Eric, UFO 50 had a different team than Spelunky 2, but we had a really fun time at PAX one year when both games were being shown and both teams got to hang out together.
In terms of design, As I mentioned before, I wanted to preserve the unique qualities of Spelunky 1 compared to other roguelikes, which are also qualities that I just personally enjoy in games, period.
To sum up, it's a feeling of entering a world that feels like it's not built for you, but offers you a lot of agency as the player to explore it.
It's happy for you when you make progress, but progress isn't the main reason for it existing.
There are consequences to your actions in these worlds, and that makes you really care about what you're doing. I think that's really important. And, you know, those are the types of games where I feel the most immersed, irrespective of how good the graphics are or, you know, what the style is.
And I've been thinking about an easy way to talk about this style of game.
and I, that I really like, and I came up with this word spiky, like the spiky sea urchin, that I think works really well for me.
So I think spiky games are often thought of as punishing, but to me the difficulty, while it's an important part of the design ethos, is...
in service of the goal rather than the goal itself.
The real goal, I think, is to put the player in a state of focus about the game and to really care about what they're doing at any given moment.
It's to make them feel like the world existed before they arrived and that it will exist after they leave, to make it feel real.
Winning or finishing the game, in my opinion, is not the main goal of a spiky game.
even if that's ultimately what you're working toward, the opposite of spiky design could be called soft design.
And just to be clear, I think that every game has some soft elements to it and some spiky elements to it.
And there are definitely times where I enjoy spiky design and I feel like playing a... I'm sorry, I enjoy softer design and I'm looking forward to playing a soft game. For Spelunky 2, I actually wanted to increase the softness compared to Spelunky 1. I just wanted to make sure that I did it in a way that it didn't make the game less spiky.
So for example, we expanded the base camp and made that a place where you could relax, practice your moves, and feel a sense of progress as you unlock more of it.
At this point, you might be reading these descriptions and thinking, well, aren't you just talking about casual and hardcore games?
Well, Even if there's a significant overlap between soft, spiky and casual hardcore, I feel like the latter terms are just too loaded and they're too focused on difficulty and certain genres now.
Difficulty is maybe the easiest way that we have right now to achieve the feeling I'm talking about, but I wouldn't say it's totally necessary to spiky design.
And actually, you know, I get a lot of spiky feelings from playing Animal Crossing New Horizons where I feel like some of the user interface designs are purposefully a little clunky just to try and force the player to or you know encourage the player let's say to take it slow and treat the island like a place to live rather than a place to min max and optimize and you know get the biggest house as fast as you can so like you know one example is the fact that you can't eat a hundred pairs at once right I feel like they may put that in there just so you can more easily enjoy that island life and relax.
Unsurprisingly, not everybody likes spiky games.
It's like bitter or spicy food.
It's an acquired taste that you have to build up.
People who enjoy spicy food really love it, though.
Food that's not spicy can even taste a little bland to them.
It can be hard for people who don't like spicy food to understand why spicy food fans love it so much.
If you're just starting out on your spicy food journey, you can't taste the flavor, just the heat and the pain.
Similarly, spiky games generate a lot of enthusiasm from their fans, but for people who aren't there yet, they can just seem hard.
And it doesn't help that...
Just like with spicy food, there are people who are just there for the challenge and bragging rights.
And there are peppers, hot peppers, and games that are made to cater to those types of people.
Not that there's anything wrong with wanting challenge for the sake of challenge either, but it does make things that much more confusing when people are trying to evaluate spiky games.
Again, for me, the difficulty is only one part of the equation.
It's the heat part of spicy food.
I don't eat spicy food to feel pain, but the pain wakes me up, and it's the gateway to interesting flavors that you can't find anywhere else.
The flavor is what makes spicy food good, and it gets easier and easier to withstand the heat the more you experience it.
And the great thing is that there isn't just one spicy dish that you can eat to improve your spice eating ability.
There are lots of delicious options.
Eat one, and you'll make it that much easier to appreciate another.
Same with spiky games.
Learning to enjoy them will open up an entire smorgasbord of great games to enjoy.
And if you like these kinds of games and want to make one, it's important to think, sorry, it's important to understand their flavor and think about what kind of unique flavor that you want to bring to the world.
And here's an image showing Spiky and Spicy together.
which is making me really hungry and also want to play some games.
So, all right, back to Spelunky 2 specifically.
We've got all these things we've built up across the previous two games.
For me, what I wanted to do with the sequel was just to take that and make it even bigger and feel even more alive.
What are things that we introduced in Spelunky 1 that are cool and can be taken even further in Spelunky 2? So one thing you can do, for example, is just make things bigger. In Mario, they started with Bullet Bill and later added Bonsai Bill. In Doom 2, they added the Super Shotgun, which has two barrels.
Well, we can do a similar thing with Spelunky by taking the small crush trap and making a bigger version of that.
And since we had a chain in Spelunky 1 where you collect special items to get to hell, let's make that secret route even longer and crazier and weave it into a branching path system.
Some of the joy of sequels for me is just seeing things taken to their logically extreme conclusion.
We have that freedom to do that because no matter what the original game is, we'll always exist unchanged.
And that gives us the opportunity to just explore the possibility space however we want.
There are a lot of other little things that I could talk about, like having the cavemen pick up items and talk to each other, for example, was added pretty late in development.
And I think that for how much work that it involved, it added so much personality to the game and does so much to make the world feel alive and interactive.
But it's the kind of thing that's hard to think about until you have enough of the game's foundation built.
I will talk a little bit about the level generation, though, since.
we did make some interesting changes to the basic algorithm to accommodate new features like the back layer and also to make levels feel a little more natural.
The way Spelunky 1's level generation worked is that we take a typical level of 4 by 4 rooms and we generate a path from the top to the bottom, marking each room as a certain type, like entrance.
exit, normal, drop, side room, et cetera.
Then we generate all the rooms based on what they got marked as.
Of course, it's more complicated than that, especially since there are special rooms like shops and altars.
But that's the gist of it.
The biggest change to the level generation was the addition of the back layer in Spelunky 2.
This happens after the front layer path is generated.
and the rooms are turned into strings, but before they're actually turned into tiles.
And the reason we need to do it after we generate the path and the strings is that we need to know the exact structure of the front layer so that we can connect it to the back layer through doors.
Then after generating all of the back layer rooms, we connect them.
with special passageway rooms and shops and treasure caches can also be generated there as well.
There are also backlit rooms that always appear in specific levels and specific configurations, like Madame Tusk's Palace of Pleasure.
And so we added special dual rooms where I could define the front of the room and the back of the room together.
And this is just a drawing that I made to send a bullet to show them what Madame Tusk's Palace of Pleasure is supposed to look like.
The other major addition to the level generation are machines, which are inspired by the machines from the classic roguelike Brogue.
So they're called machines, but they're not like actual machines, like robots that you encounter in the game.
In Brogue, machines are just a special generation.
a special part of the generation that is used to add interest to dungeons after the basic room generation, and they might include special treasure rooms or swamps or chasms with bridges across them, stuff like that.
Some of them are just for flavor. In Spelunky, I realized that once we had the path set, we could create rooms that were extra wide or extra tall.
And these machines were used in conjunction with the back layer to really open up what was possible with Spelunky's level generation.
So they weren't used in exactly the same way as Brogue, but it was the fact that Brogue added this kind of extra step in its level generation did inspire me.
And Brogue, by the way, is a very fun game.
And I think it has a great balance of simplicity of playing and complexity of learning.
And I still think that there's a lot that we can learn from traditional roguelikes.
All right, so now it's time to release the game.
Toward the end of 2019, I spoke with Eric, and it felt like we need to make a decision to focus on either Spelunky 2 or UFO 50 and finish one of them.
Partly for our own mental health, as the fun of working on two projects at the same time was starting to wear off, and the pressure to release was really starting to build.
Delays are common, of course, but having two delays going on at once wasn't feeling so great.
And so we had to make a decision, and ultimately Spelunky 2 seemed like the game that was...
most likely to be finished in 2020. The roadmap for finishing it seemed clearer and it felt like if we buckled up and focused on it for a year we could get it out. It also had the most people waiting for it being a sequel and a known property and all that. So that was that. The rest of the UFO 50 continued to work on UFO 50 while Eric and I moved over to Spelunky 2 full-time to finish it.
Since we were already working remotely, it didn't feel like the pandemic had a huge effect on our work in the last stretch of development.
In fact, 2020 ended up being a very packed year for games, with lots of big games, indie and AAA coming out last year.
The PS5 and the Xbox Series X also dropped in 2020.
So for teams that could work well remotely, it may have seemed like a good time to release since so many people were stuck at home looking for something to play.
You know, and we were stuck at home looking for work to do also.
So, uh But for us, you know, I think it was mostly a coincidence that we released in 2020.
We had wanted to release Spelunky 2 in 2019, and when that deadline passed, we were just determined to get the game out the year after.
But aside from being just a big year for games in general, it was also a big year for roguelikes, right?
Aside from Spelunky 2, there was Hades, Risk of Rain 2, Rogue Legacy 2, Noida, Atomicrops, and probably more.
And they all, a lot of the big ones at least, ended up coming out pretty close to each other.
in the summer and fall.
So, you know, was I worried about that?
Honestly, yeah, it did make me a bit nervous.
I was also concerned about Cyberpunk, which was originally slated for a September release.
But I think all releases are like that.
You can spend years working on a game, and then when it's time for the game to come out, there's only so much you can do to control what's going on around it.
And ultimately for us, I don't think it would have made sense for us to delay the release into 2021 just to avoid other roguelikes.
And there's never any guarantee that waiting going to make it any less packed.
I do get asked about early access every now and then because it does seem like a popular and successful way to make big roguelike games.
But I don't know.
For me, it just didn't feel right to release Spelunky that way.
I think there is a difference between updating a game in early access and updating it after release.
And Spelunky.
As this spiky arcade roguelike where I had a really strong idea for what I wanted it to be, it felt like it needed to come out and be fully released before we got serious feedback from the public.
I wouldn't be averse to trying early access for games in the future, but it would probably be a very different type of game, something much more open-ended, like a...
like a simulation or something like that.
So, you know, ultimately it felt like we had to put our faith in both the game in Spelunky 2 and in the roguelike genre as being something big enough to have all these games come out at the same time and do well.
So we set our release dates and went for it.
You know, by the time September rolled around, we ended up having a staggered release on PS4 and then a couple weeks later on Steam. We focused on those two platforms because, you know, we had good relationships there and the majority of our audience of Spelunky fans were playing the game there.
You know, the prevailing theory, of course, is that you release simultaneously on every platform at once and, you know, I'm sure that's great, but given the size of our team, it just wasn't possible, especially since Spelunky 2 had online multiplayer.
For me personally, this was my first game released in seven years, so a lot had changed.
I'm like an old man dad now.
You know, the scene has changed a lot too.
People love roguelikes now and they know what Spelunky is.
Press actively sought us out for interviews and reviews, which is cool.
Social media is much bigger now.
So, you know, it gives developers and players and then media just a much more direct connection.
Indie games are more serious now too, with serious studios and publishers in the indie sphere doing some big things.
So in short, we were where we wanted to be, and I think we felt very fortunate.
But also at the same time, the expectations were really high.
And I think it was overwhelming how many people we were potentially connected to now.
You know, for me, I realized that this was another leveling up moment, starting from when I was just working on click and play games as a kid.
And we had to step up to make sure we were taking advantage of these opportunities that we had, that we were lucky enough to have.
So there were definitely some hiccups with the release, as you can see here.
Aside from the usual chaos, bugs, and stuff like that, the online multiplayer launch on PS4 was much more rough than we expected. When it worked for people, it worked quite well, but for many people it was pretty much unplayable, or after playing for a few levels it would become unplayable.
So this forced us to delay the online multiplayer release on PC while Blit worked on fixes and added more servers. So again Guillermo goes into this in detail in his talk and it's really actually quite interesting. So again check that out if you want to hear more about it. Suffice to say though video games are very complex and adding online multiplayer to a game is just another layer of complexity. And we tried to be very clear that we were doing our best to fix it and just be very direct and upfront. And thankfully, most players were understanding.
Once the game released on Steam, it was easier to to get feedback for Blit and narrow down the various problems and, you know, quickly test possible solutions.
So big thanks to all the Spelunky players who helped out during this time.
With their help, Blit was able to make the necessary improvements to online and yeah, thankfully it started to work well on PS4 and we were also able to launch it on Steam by Christmastime.
And all in all, I'm happy with how things went.
In hindsight, you always realize just how ambitious you were trying to make a game.
And we really tried to do a lot with Spelunky 2.
And in the end, I don't feel like we had to give up on any of our major plans.
The game came out how we wanted it to.
And you know.
more or less how I envisioned it, a dense, spiky, roguelike platformer.
And the response from players has been great.
And I'm very happy about that.
I think with any sequel, there are going to be players that are going to be disappointed.
But for the most part, it seemed like the game was being enjoyed by veterans of the series and new players alike.
compared to Spelunky 1.
Spelunky 2's lifetime revenue so far is actually getting close to overtaking Spelunky 1 after just less than a year, which is pretty incredible.
And not only that, but the release of Spelunky 2 actually, I think, created buzz for Spelunky 1 and got more people excited about Spelunky 1 also.
So, you know, that's...
It's not bad at all for a game that I honestly think is weird in some ways.
It straddles a lot of different concepts that I think can feel kind of opposed at times, as you can see here.
And you know, it was a really big year for roguelikes, and people naturally wanted to compare them.
You know, if you're in the same conversation as a game like Hades, I think you're already doing something right.
It's a cool game.
But Spelunky, in my mind, it's a very different game from Hades, which is a very different game from Noita, which is such a different game from Risk of Rain, et cetera.
So by any other metric, it really seems to me like...
all of the major roguelikes that came out in 2020 were quite different from one another.
And they all found sizable audiences that really show how much room there is in this genre.
Some genres, I think, really lack the flexibility that roguelikes have, and they become saturated very quickly. But that's obviously not the case here, in my opinion.
So yeah, I think that given our experience and what I've seen from other games, indie game sequels make a lot of sense if the original game was successful and you're not burnt out on the concept.
In the past, indie sequels weren't really a thing, partly because every indie game developer back then was just, we were figuring things out as we went along.
There weren't many established indie studios.
I don't think anyone was really thinking like super long-term about their career.
We were just, you know, trying to get the game that was in front of us done.
By the end of a big project, it was pretty likely you'd be burnt out on the idea and want to shift gears completely once you're finished.
You know, and I think indie developers in particular value novelty, but players for the most part are pretty excited to get more of what they already love.
I definitely had that itch to work on new ideas while I was working on Spelunky 2.
Having UFO 50 to work on obviously helped a ton, but the crazy thing is that It didn't make that feeling go away completely.
So it really goes to show you how strong that feeling of wanting to make something new is, no matter what you're doing.
So, you know, what I do is, if I have a new idea that doesn't fit what I'm already working on, I write it down, no matter how silly the idea is.
And sometimes that's really all you need to get it out of your system.
And, you know, personally, I really enjoyed being able to connect all three Spelunky games together and make a series.
At times it felt like taking an old childhood drawing and getting to redo it as an adult, which was pretty cool.
And, you know, looking back at it now, like, yeah, Spelunky just feels really big to me.
So while sequels make a lot of sense from a commercial perspective, I think they can be really fun from a creative perspective as well.
So, you know, do I necessarily recommend doing all the things I described in this talk, like making a sequel or not changing the basic, you know, formula of the sequel too much, working on another game or a collection of games at the same time? Well, you know, it worked out for us, but Spelunky 2 was a unique project. UFO 50 is a unique project.
All games are unique, I think.
They require unique circumstances to succeed, basically.
And I think it would be hard to replicate what we did exactly.
Every game developer and game project is just a little different.
However, I do think that there are some things that may be helpful to other developers, just some general things that I thought about and learned as I was working.
on Spelunky 2.
The first is that making commercial art, it's like a dance between you and the audience where you're trying to find where your interests overlap with theirs, and you're also developing your skills at the same time.
So we're talking about an activity that's incredibly complex and long term.
So I think it's important to realize that Spelunky has now spanned three games across a decade of work.
When I was working on Spelunky Classic, I had no idea if anyone would like it as much as I did.
And I'm glad at that point that I only spent, you know, six months to a year working on it before releasing it as freeware.
So if people hadn't liked it, it would have been back to the drawing board.
And the longer I spent on it, the more opportunities I would have lost.
With Spelunky 2, I feel like I was able to realize the potential of the concept more fully, but in a much safer environment where I knew people liked the concept.
So you can take multiple games to experiment and refine your craft.
I think that's something to remember.
Two, it's kind of related, but these days I focus as much on the process.
of making games is the games themselves, because I have the experience now to know how hard game making is at any level.
I don't just make a game because I want to make the game, I make it because it's also the right time to make it and the right people are around it to help me make it.
And I never assume that a game is just going to get made out of sheer will.
A lot of the decisions that you make...
in the conceptual phase will either help you or haunt you once the development starts.
So I think it's important to think about the process.
Three, there's not one way to do this.
Like I said, I feel like.
I was in a unique position.
I am in a unique position where I've been at this so long and I have the opportunity to work with so many cool collaborators, but I still feel like very indie in my development.
I'm still setting up my own websites and store pages and doing art and design and even some programming.
Whereas a lot of indies are much more specialized and working in studios where they work alongside the same people for many, many projects.
And then there are game developers who are just totally solo.
Indie game development to me is as much a lifestyle as a job.
So find a way of doing it that works for you.
And also realize that figuring out how to do it is a journey in and of itself.
And then finally, yeah, I mean, roguelikes, I really believe will continue to be a strong genre for a long time.
If that wasn't obvious before, then I think 2020's.
indie roguelike bumper crop should definitely make that clear. If you want to make one, you should make one. But, you know, that doesn't necessarily mean it's going to be a success.
It just means that there is room. There is room for more.
And then finally, you know, I did promise I would talk about the possibility.
uh of uh more spelunkies since you know we're talking about sequels and all that and honestly you're probably expecting this but yeah i don't have any idea right now right now i've got my hands full with more spelunky 2 work and also finishing ufo 50.
after that i think i'm going to want to go back to solo development for a while and experiment again with new ideas and uh you know maybe new new game engines things like that.
So definitely no Spelunky 3 anytime soon, but never say never.
And thank you so much for listening.
And I hope you found this talk to be interesting and helpful.
You can always reach me in these places.
And yeah, have a great rest of your day.
Thanks.
