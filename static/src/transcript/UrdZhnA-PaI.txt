Hello and welcome to my talk. Great level design is a studio-wide effort. My name is Dana Nightingale. I was born in the US, in the United States, and very shortly after that began gaming on an Atari 800.
In the 90s, I absolutely fell in love with games like System Shock and Thief, which awakened my passion for game design. I contributed to immersive sim fan sites for years. Excuse me, I've been practicing so many times today, my whole mouth is messed up. I earned a master's degree in architecture in 2008. Two years later, I joined Arkane as a level designer in Austin.
I moved to France five months later, where I remain to this day.
Finally, I became the campaign designer of Deathloop in 2020.
But what's my game dev experience?
As a modder, I worked on a bunch of missions for Thief 2, The Metal Age, and a few quest and location mods for Skyrim.
As a level designer, I worked on Dishonored's flooded district, The Loyalists, and Eminent Domain.
I worked on the Clockwork Mansion of Dishonored 2 and Death of the Outsiders Pink Job.
I did some map layouts for Wolfenstein Youngblood, and finally, I worked on a part of Deathloop's prototype, Alexis Dorsey's Mansion, which is featured in the trailers.
As a campaign designer, I am currently working on Deathloop's infamous murder puzzle.
That said, I've had a very focused career, working almost exclusively in level design.
I've only worked at one studio. Two if you count Arcane Austin, which you should, so two studios. This presents a challenge. I do not have the broadest experience.
So I've researched. I've interviewed people from other disciplines with more diverse backgrounds.
Before I get started, I'd like to explain who this talk is for and the presentation's goals.
It's for people who love great level design, even if they're not level designers.
And it's for teams making games which have levels in them.
It's also for my friends.
I'm going to discuss the role many disciplines have in making great levels.
I'll explain how Arcane Lyon does it, or the lofty goals we try to reach and ways we could be doing it better.
but I also want to put a spotlight on everyone who's helped me make levels, places that players enjoy and talk about.
All of that while trying to go as in-depth as I can in 60 minutes.
I should define what I mean when I say a level, what a level designer at Arcane Lyon does and what I feel makes a level great. Yes.
When I say a level, I mean one of many segments that the game is divided into, or a location in the game world, or a moment in the player's journey.
At Arcane Léon, a level designer is defining the layout and flow of the map, crafting encounters and vignettes with all of the scripted logic that powers them, but most importantly, are part of the creative process.
Level designers have authorship of their maps.
From my perspective, a great level brings the most out of the game's narrative and systems.
It captures the imaginations and desire to engage with the content.
It feels like a place or a moment that matters either to the game itself or to the player.
And in those truly great cases, it's something that stays with them after they finish the game.
They remember and talk about it.
Arcane, as a whole, has a bit of a reputation for our level design, which a few people think is pretty good.
I happen to be a big fan, too.
I'm extremely proud to be a part of this team and admire their work to bits.
So what's the plan?
Okay, it's not this.
The talk is divided into two parts, your team and processes.
In each part, we'll look at four challenges you're going to face and look at solutions to each one.
Part one is your team.
The first challenge is an evolving level design team.
Undishonored, we begin with four level designers who had been working with us since Dark Messiah and also Unravenholm, LMNO and The Crossing.
with eight new level designers, mostly joining from Arcane Austin.
This is where I started.
I was here.
In Dishonored, we brought in six new level designers to Arcane Léon because Arcane Austin's LD team began to work on Prey.
Death of the Outsider saw three new level designers join, and Deathloop added five more.
Over this decade, many team members became leads or specialists.
Some changed to other disciplines while others moved to other studios.
We had an influx constantly of new talent.
But how do you keep your work consistent if your team keeps changing?
It comes down to a clearly defined studio culture, and that's not something that you can just conjure up.
The ideal is to build a level design team with a foundation and certain design values.
Above all, we are a studio that makes a certain type of game, and we recruit along those values.
Level designers come here to work on that type of game.
Good level design can't just be a value for the LD team. It must extend to the entire studio.
And almost everything in our games is expressed through the level design.
The whole studio considers level design as one of the most powerful tools to deliver the experience that we are all after.
At Arkane, we never shut up about our design values.
We talk about them constantly.
We have posters about them.
I'm sure people are sick of having one brought up as an argument in meetings, but everyone knows them and no one forgets them.
I could talk for an hour about Arkane's design values, and many people have, but that's not the point of this presentation.
The point is that your studio has its own values, and you are the ones defining them.
Our second challenge is leadership bottlenecks. What do I mean by bottleneck? In this case, it's when an idea doesn't move forward until it works its way up the bottle. A level designer creates an idea which is reviewed by their lead, who will give feedback, help them iterate, and ultimately validate it or not.
If validated, the producer will evaluate the impact on other teams.
Even validated at this stage, which, again, isn't a given when the creative director gets involved, who may be reviewing it without the LD present, they may not feel it fits with the vision of the game and kill it.
Not only does this weed out a diversity of ideas, but it could also take weeks.
So what's our solution?
Eliminate the validation process.
No, it's probably not a good idea. Instead, we have a team of leadership.
Our level design team does not have a flat hierarchy, but we have several leaders who work together. In addition to the lead, there's the campaign designer. Hi, that's me.
And the lead technical level designer.
Together, we sit down with the level designer and review their ideas.
with the campaign producer and the creative director. If one of us can't be present, the process happens anyway. We keep things moving. We involve the LD so they can defend their ideas, which then don't have to be validated over and over. Sometimes we disagree, and that's the point.
We have different tastes and areas of expertise. We talk it out. We try to find a consensus or a compromise. And sometimes we just trust the person who's the most qualified to make that call.
This means a bigger variety of ideas can make it into the game.
OK, so what's each of our areas of expertise?
Who is the most qualified for what?
The lead level designer defines the level design objectives and guidelines.
They work closely with system design and level art.
The campaign designer crafts the backbone of the player's experience.
They work closely with narrative and UI and user experience.
The lead technical level designer is all about the team's tools and processes.
They work closely with tools development and tech art.
As you can see, we have a pretty balanced load in terms of what other disciplines we work with, leading each of us focus on our particular area and trusting each other to have our backs for the rest.
In a nutshell, discuss ideas together as a group, not as rungs in a ladder where each rung could break.
We have a variety of leaders with different areas of expertise and different tastes.
Include the level designer in the validation process.
Let them defend their ideas.
Some people can present their ideas better on paper and some can do it better in a discussion.
Give them a chance and keep the process moving.
Deference and trust are required.
Challenge three is masters of none.
There is a huge variety of thing a level designer has to be good at.
You know, jack of all trades.
A level designer creates the maps layout, the challenges, the logic of events, and so much more.
Every choice a level designer makes can impact or define the narrative.
Every vignette involves a UI or user experience element, whether it's an interaction prompt or an objective notification.
Many game systems happen inside the level design.
How does the map's design get the most out of those systems?
Does the gray box layout match the architectural intentions with the right proportions, scales, and rhythms of spaces?
Is the map following all metrics and constraints and optimization guidelines?
Is the level designer an expert on every tool, including scripting logic and various forms of markup?
This is a lot and no one person can be an expert at all of it. I know I am not.
So what can we do to mitigate it?
The diversification of level design specializations. This is dividing level designers into two types map owners and specialists.
Specialists ease the burdens on map owners. A narrative scripter.
is part of the narrative team, but with a level designer's skills, this allows them to autonomously carry out narrative setup in the maps.
The campaign designer makes sure the UI is in sync with what the level designers are doing and guides the LDs on how to best take advantage of it.
A level systems designer can be one or the other, but has the skills in both.
They provide an LD's insight into the development of some systems and assist LDs in getting the most out of those systems.
Level artists work directly with level designers on the geometry.
So LDs don't also have to be masters of the fundamentals of architecture, needing to create gray boxes that transition beautifully into realistic buildings.
That's not the point of our gray boxes.
Tech LDs assist in tools development, but also work with level designers on highly technical tasks.
This has helped Arkane so much.
It is not necessary for map owners to be experts at everything.
There are people on other teams who have level design skills.
Let them contribute.
But most importantly, be sensitive to what each member of your team needs.
They don't all have to be map owners.
Let one focus on technical tasks and another work on narrative.
Let them focus on their strengths.
Challenge four is overwhelming dependencies.
No discipline works in isolation, and game development has many moving parts.
The whole design must work with nearly all of them.
But what does that look like?
What are a level designer's key partnerships?
First, what is the work that happens before level designers begin?
What allows them to do their work?
In defining the shape and scope, many questions have to be asked.
The broadest one is, what does a level even mean in our game?
Are the levels connected by ellipses, or are they contiguous?
How big are the maps?
How dense are they?
Do several maps make a level, like we had in Dishonored?
Or is it something else entirely, like we're currently doing in Deathloop?
It's critical that the technical director and level designers are in sync with creative direction and art direction.
If they're not, be careful.
What feels like the final decision can change, and it will be painful if it does.
Engine and tools developers have a hand in laying the foundation for the ways LDs and level artists do their work, or what work is even possible at all.
To ensure that these tools fit the needs and processes of both teams, tech LDs and tech artists are involved early.
Tools are created.
Workflows are mapped out.
Best practices are defined.
Now LDs and level artists have exactly what they need, tools that are concretely designed for the exact work they're doing.
Now and then we try to do something wacky, like this honor to time travel mission, crack in the slab or the clockwork mansion.
Our engine and tools teams have the flexibility to make our dreams come true.
But we don't just use tools to build maps.
We also need to implement game systems.
Technical LDs will work alongside the systems designers in a mix of engine developers and gameplay programmers.
The work done by these teams is critical to making immersive Sims.
Void Studio is built from the ground up for exactly this type of game.
We've created a visual scripting language called Kiskul, tailored exactly to our needs and the needs of the games we're making.
We have a modular component system that ensures behaviors are consistent game-wide, which is a key to systemic game design.
We have external tools like a content integration system or performance monitors, but we sometimes like to give them funny names like Octung that delivers warnings or Tintin, our bug reporter.
but narrative and gameplay are one. What the story is and what the player can or must do are intertwined. This forms the campaign. The campaign designer will collaborate closely with narrative team, lead level design, and creative direction to form the high-level outline of the player's goals.
They then collaborate with the LDs to turn this outline into detailed scenarios, challenges, and vignettes.
The game world is fleshed out from a collaboration between level design, narrative, and art direction.
A level design problem can lead to a solution that makes the game's world richer.
Once narrative and art get a hold of it, what was a problem now fleshes out the world.
In Dishonored, we wanted urban maps, which implies streets, but we also didn't want to put up invisible walls.
So art and narrative invented massive street blockers, which fictionally controlled the spread of the plague, but also enclosed the gameplay space.
A narrative designer may propose something surprising.
A concept artist runs with it, exciting everyone, leading to a level designer creating a vignette, or maybe an entire level around it.
But this can only happen if each team member is attentive to one another and feels free to collaborate.
Now we're in the thick of it.
What keep partnership come into play while the level geometry is being made?
The crafters of the maps may be our most important partnership.
The level designer and level artist will begin work at the same time.
The LD creates the layout and flow of the maps in Graybox, which establishes the size, scope, paths, basically what the level is.
The level artist creates the visual DNA of the map.
This proof of concept establishes the scale and proportions, the style and the mood.
forces. The level artists are not doing an art pass on the maps. They're creating a new map from scratch based on the LD's layout but with the visual DNA of their proof of concept.
Pairs of level designers and level artists will work together until the end of the project, collaborating to bring their combined vision to reality.
Level artists work closely with environment artists to establish a modular system called a breakout kit that can be snapped together.
These are intended to be replaced with authored assets late in production during the polish stage.
Level designers also work with environment artists to create unique props.
This can be a complicated process involving concept art and level art as well, and can require a lot of iteration since this piece may be part of a puzzle that players need to understand just by looking at it.
The moving bank vault in Death of the Outsider was constructed by someone who could do both concept art and environment art.
Concept artists will absolutely become involved to visualize the spaces, doing paint-overs of the gray box or the level artist's rough blockout.
Sometimes this can bring out new ideas, with the concept artist providing a vision neither map owner had anticipated.
Practically speaking, it is useful to define the details that the environment and lighting artists will use. Other times it's just exciting.
You get to see what the map could look like in the finished game, possibly years before the art and rendering are ready to make it possible.
It can be an inspiring moment that invigorates the passions of everyone involved.
But we require illumination.
Our level design and level art wouldn't mean much without lighting.
How would the players see?
Once a map's layout is stable, a lighting artist steps in and the three will work together.
A map's lighting could be subtle and functional, there but never thought about.
or it can be emotional, heavily pushing the desired mood, or it can be directional, giving the player critical information, guiding them forward.
Delighting artists will use all of these methods to make the map shine.
Pun intended.
Environmental storytelling is the multitude of stories that exist in all spaces in the game.
expressed either explicitly or left to inference. It has two forms. High level is, why does this space exist? Why is this place like this? It is often conceived by the narrative team, creative direction, and level art leadership. This forms the core concept of a location. Low level is, what happened here? What do these objects communicate to the player?
Low level comes from all directions, often proposed by the narrative team, but just as often from the level designers or the level artists.
Constructing the level geometry is now well in progress, but we're making games.
What about the gameplay?
What about taking a drink?
Because my throat is getting worn out.
Just as we have emergent gameplay, we have emergent level design.
R-level designers have a lot of freedom to invent wild bullshit.
The work done by the systems designer and gameplay programmers allows LDs to invent novel, weird, or just plain game-breaking stuff that they create new uses for everything.
It's not uncommon.
for an LD to push the envelope with our tools and create a spaghetti pile of logic just to get it working.
Yes, I am very guilty of this.
I think it's great, but we still must be careful.
This is when tech LDs and gameplay programmers and systems designers get involved.
It could be coded into a fully supported new feature.
This is a best case scenario for everyone, and it happens very often.
It could be cleaned up and optimized by the tech LDs.
Even without code support, a specialist can do a lot with our tools in either outcome.
It can become a nightmare for QA.
This is especially true if they come across what looks like a new feature, but there's no documentation and no metrics.
And the only person who even knows it exists is the level designer who cobbled it together.
Player affordance is near and dear to our hearts at Arkane, expressed simply, if it looks doable, let the player do it.
But also, if we can't let the player do it, don't let it look doable.
This is expressed through a union of environment art, level art, and systems design.
Level designers will define rules about what looks interactive or what looks traversable.
Can I fit into that tunnel?
Can I open this door?
It looks like I can.
Systems design will set the player's expectations for combat tactics.
Like how big of a gap can an enemy see through, or what counts as cover and what doesn't?
Environment artists interpret these guidelines, but they're often the start of the conversation.
They may want to make a certain type of asset, like a box of fireworks.
Well, if the player shoots it, he'll expect it to explode.
We achieve a narrative rooted in gameplay through level design, systems design, and narrative design, bouncing ideas off each other, letting them evolve.
Here's one example.
Narrative decides that the protagonist should have a personalized weapon that expresses their themes.
And Death of the Outsider, Billie Lurk, had a voltaic gun that represented her unconventional methods and pragmatic ingenuity.
Systems design devises a unique ammo type, pencils and pens.
Level design could then have you visiting locations where pens and pencils are laying around.
Say, why not a bank?
It can move in the other direction.
Level design creates a puzzle.
There's a button that you have to shoot.
Systems design invents a rubber bullet that can impact silently and then be recovered.
Narrative design, oops, narrative design brings a tool into the games world.
I think it was part of a fish.
but players can't read our minds.
The game has to communicate possibilities in play, what is allowed and what is needed to progress.
The campaign designer will work with level designers to transmute their designs into communication via the user interface.
This can take a lot of forms like objective texts or markers on the HUD, a quest journal or failure states.
The narrative team is involved from the start, weaving story through objectives and doing the final writing pass.
So now the map exists. What happens next? A static map is not an immersive map. What brings the maps to life?
Sound designers, VFX artists, and animators work directly in our maps to create vibrant, reactive, living places using the same tools as the LDs.
These team members are artists and designers and may see a way.
to do something a bit differently than what the LD asked for, who doesn't have the same eye for this kind of work.
In the Clockwork Mansion, the electro-shock sequence was pitched as being quite subtle.
These three teams punched up the intensity over and over, both trying to reward the player with a dramatic outcome and drive home the horror of what you were doing.
This couldn't happen if these teams just had a list of assets with no context and no say in how they're used.
There's a deep symbiosis between systems design and animators.
Together they bring the NPCs to life.
But shit gets real when L-level designers are involved.
The level design could be causing trouble for NPCs.
The player could often be crouched inside a low tunnel, leaving enemies baffled, even though they're within reach.
Animators could step in and create a new set of animations to solve this.
Level designers could need to convey something about the area.
Maybe a dust storm has started, which is hazardous to the player.
The animators have the NPCs bracing themselves and shielding their eyes, making it clear without exposition.
Animators can push hard on certain behaviors, taking it beyond what was proposed.
Our games have a feature we call distractions, where NPCs move off their patrols to do a trivial action.
A handful of them would do, but our animators create dozens and dozens.
In a vivid and tactile world, so much is communicated through sound.
A button is modeled and animated.
The sound is what makes it feel like you pressed it.
There's that click.
and then the machine roars to life, or maybe it gives a dull, empty sound and a crackle.
Maybe there's something about the sound that tells you the machine needs power or is broken, or if it does turn on, it will only stay on for a short time.
Sound can communicate in intuitive ways, instinctive ways that are faster and more intuitive than a UI prompt or the player character explaining things.
So much of what you see can also be heard.
Atmosphere is equally visual as auditory.
Tech artists and rendering engineers create visceral experiences with the sound designers.
The gentle hum in the background perfectly matching the haze surrounding you, the crunching under your feet letting you feel the shaders on the ground.
The player will feel like they're there.
The map is now a place.
Details tell a story.
A light touch of VFX can deepen the player's involvement in what the LDs and level artists have built.
You could add flies over a trash can next to a door to tip the player off that that house isn't abandoned and something fishy is going on in there.
Beams of light through cracks in the ceiling signal that your long journey back to the surface has come to an end.
Maybe this is an exciting moment of relief or a weary, somber moment.
The way the beams of light move can push either feeling.
A cloud of dust could appear when moving an object, deepening the feeling of intruding upon a forgotten place.
Details like these aren't just immersive, they carry information.
The player can learn or understand without realizing that they have.
And finally...
How does all of this work?
How do you get this work into the player's hands?
How do we get there?
Someone has to keep the ship afloat, and eventually you need to ship.
Our testing teams are divided between quality assurance and dev testing.
Typically, QA testers will be assigned maps or parts of the campaign, and switch every few months to keep ideas fresh.
A dev tester will attend each weekly level design meeting, so their dev team always has the latest info on what the LDs are up to.
big complex features that are tied deeply to level design make a special focus from a dev tester who attend the kickoff meeting and provide feedback. Players usually like all of the frames per second.
Optimization is both the first and last thing our technical teams work on in a production.
Our game systems are CPU heavy, so from day one everything is designed with optimization in mind.
This impacts the scope and density of our maps. If you run afoul of this, you may need to split your map in two or three or four. And that's harder than it sounds. It will define how many active AI can be at a location at once.
We have to do all sorts of tricks to limit this invisibly without making the maps feel empty.
Sidelines are one of the fundamental tools of level design and rendering metrics determine everything that we can do. Our systemic world and complex AI don't leave much CPU power left for our scripted logic. We can only use two percent of the CPU's power per frame.
As production draws to a close, level designers and artists often must hand their maps over to the optimization gods and pray.
To recap, a clearly defined studio culture can give level designers a consistent quality and style, in style, no matter how your team evolves. A team of leadership with unique roles can open wide the creative potential of the level designers to keep their ideas flowing.
The diversification of LD specializations means not every map owner has to be great at everything.
Specialists can strengthen the entire team by being very good at one thing.
Key partnerships are essential to this deeply collaborative process.
Every team has a part to play in making the mobile design great.
And the more everyone understands everyone else's part, the clearer these interactions become.
Okay, we're exactly at the halfway point.
We're at 30 minutes, 31 minutes.
At this moment, I have to stop recording the video and start the next section.
So I'll see you on the other side of that.
Okay, we're back for part two, processes.
Challenge five is determinism in design.
This challenge is about metrics.
When I say metric, I am talking about the dozens of design constraints that allow every part of the game to work with every other part.
Game development is often the march of metrics from their inception to the implementation with strict adherence to the inevitability of rigid, clear-cut gameplay experiences.
There's a determinist quality to it.
Why can metrics lead to this kind of design determinism?
First, sorry, I get my hair in my mouth.
It happens.
There it is again.
What does the life cycle of a metric look like?
Gameplay metrics are born from the work between systems designers and gameplay programmers.
These are things like how fast can the NPC move?
Or how far can they see?
What's their attack range?
The gameplay metrics mature into character metrics as they're handed over to the animation team, character artists, and riggers.
What is the size of an NPC?
How wide is their collision?
How far off the ground is their vision cone?
Next, bringing the metrics into adulthood, level artists work with the environment artists to give the world a scale that was defined by the character metrics. This asks and answers questions like, how wide is the doorway? How tall is a handrail? What's the floor-to-floor height of a building?
What's the smallest room? What's the smallest room can be so that X number of NPCs can still move around? Now it's ready for the metrics, which are all grown up to arrive in the hands of level designers.
They follow the metrics to the letter and job's done, right?
Job's done, right?
I'm not going to do their voices.
You could wind up with a team of level designers whose job is heavily restricted by the metrics.
And they wind up just robotically constructing maps that are defined by the metrics alone.
We don't want that and we don't do that.
We can't work that way with the type of games we make.
We make messy games with systems that are crashing into each other and a passionate dedication to immersion and world building.
There's a balance that has to be reached between what feels best for the player and strict adherence to the metrics that are still needed to make any of our game systems even work.
We need flexible metrics.
you can't know how any of the metrics will work in gameplay until the level designers are using them and testing their limits. The metrics for enemy vision range may not work with the sight lines the level designers need. The level geometry may require many iterations with gameplay programmers to find the correct metrics for enemy pathfinding. Your tools could be displaying warnings when the metrics are broken, which is good, but this can also stifle experimentation.
Designers like to go off the rails when trying a new idea.
The engine will often put strict limits on how many NPCs can be near the player, but level and narrative design have the player crashing a party.
Oh no, the engine says you can only have five NPCs at the party.
The interaction range on pickups.
may be too large for the object density of the maps, making it difficult for the player to target one item over another.
Metrics on audio propagation say that sound can't travel more than 20 meters.
But level and audio designers are placing diegetic music in the maps, which now cuts off awkwardly.
Everything the level artists and environment artists planned could fly to bits when it crashes into what the LDs have done.
These metrics are a starting point.
But for the collaboration to work, both teams need to be flexible.
The complexity of the objectives may be too great for the space on the UI.
Three words to explain the next goal may work in 90% of the cases, but sometimes you need more room.
To be clear.
be as flexible as possible.
But something simply can't change.
Character limits on UI elements have to take into account localization.
Some languages will need twice as much space.
If level designers experiment forever, expecting systems and gameplay programmers to keep up, they won't be able to stabilize the game into a shippable state.
As annoying as many of the warnings a level designer will butt up against are, they exist for a reason and build management.
will pay the price in hours and sanity for every warning a level designer ignores.
A level designer may want to go wild with massive VFX and sounds that propagate across the entire map, but eventually they'll hit a limit on what the engine can do if the level designer requests something as innocent as changing the height of a table. This can cause a domino effect.
with hours of rework for animation and character art.
These changes must be requested with extreme caution.
You probably won't get a second chance if you're wrong.
It's a difficult process, but there's some things the team can do to make it go more smoothly.
Environment artists can get a hold of the metrics created by systems design and animation early.
and make a modular grey box kit that will match the breakout kit they'll later make for the level artists.
If the metrics change, this kit can easily be tweaked, updating the entire game.
Tools can be created to help level designers visualize the more abstract metrics like audio propagation limits.
You can try to find a balance between the performance cost of some of the rendering engine's fancier features with what the level designers are doing.
If there's a poison gas feature and the LDs use it everywhere, it could tank your framerate.
Since you can't see the future.
Give LDs a cheap temp version so they can place it in their maps, and then you can see how much that temp version costs, and now you have a target to aim for.
Oh, and now it should go without saying, level designers, yes, please do follow the metrics.
But when they aren't working, say something.
This may sound all over the place.
So what point am I trying to make?
If your level design and level art teams are forced to strictly follow the metrics and have no say in what those metrics are, you'll wind up with rote, predictable, samey maps.
Metrics must be iterated on like anything else.
And you need wiggle room.
If cover has to be exactly one meter high, your map will lose believability.
Give them range.
It's a balanced give and take.
Sometimes a metric must be strictly followed, know when to give and know when to hold firm.
If you set up processes around the idea that metrics will be flexible, everything will be easier and ready to change.
But most of all, if the metrics aren't working or too restrictive, you have to speak up.
And when LDs speak up, please listen.
Challenge six, pivots happen.
Things change during development for whatever reason, and the reason is user research.
I'll get to that later.
And you may need to react quickly.
The problem is every team works at a different pace.
Some may be finished and are polishing while others are just getting started.
When your project must pivot, how do you minimize wasted time and work?
So level design and level art teams work together until they stabilize their work and hit a milestone.
At this point.
After you get user research, the level design team gets some feedback, digests it, pivots, and resumes work.
On the level art team, however, they didn't get the feedback.
It was about the level design, after all.
They polish up their work, stabilize it, and call it finished.
But inevitably, the changes made to the level design are going to need changes to the level art, too.
But it was communicated too late.
The level art team has polished up their work.
And it's They change things now.
Not only is it going to waste the polish time, but polished work is much harder to change.
So level design changes are now blocked, and the game may ship without.
Some teams can't begin their work until another team's work has stabilized.
And every time the first team pivots, this gets pushed farther and farther ahead.
There's no way for sound in VFX to realistically work on a map while it's still deep in production.
The layout and contents need to be stable.
Every time the level design pivots, this pushes that moment further down the timeline.
When the LD work is finally stable enough, these teams have barely enough time to do the work and almost no time for their own polish and stabilization.
The structure of some teams work can be radically different, making syncing up iteration impossible.
Features are often developed one at a time and can be delivered to level designers very late.
Game systems can be the biggest impacted by pivots from user research, which means new and revised features can come long after the level design work has shifted to stabilization.
It can be a complicated and risky process to integrate them this late, throwing the stability of the maps into question.
and features may not be implemented correctly in the end.
To be clear, many of these features are requested by level designers themselves, but the problem is they can impact the entire game, and not every map may be in a good state to receive them.
These issues have to be solved on a case-by-case basis.
And I don't have the solution to everything.
But there's two guiding principles behind reducing the negative impacts.
And that's to de-silo and empower.
The type of siloing I'm talking about is when one team has information but doesn't share it with other teams.
Give the level artists the same feedback the level designers were given.
Let the two teams iterate as one.
Level artists can be empowered to react to the feedback as well, rather than being given tasks weeks later.
After the level design is already well in motion, it is not easy.
It takes tremendous amount of coordination to keep teams this size and sync.
Ask any producer. Miscommunication and wasted work will still happen, but iterating together is always worth the effort.
The level design team can be empowered to populate their maps with sound and VFX early.
through a library of placeholder assets.
This can help level designers get their ideas validated by presenting them more concretely.
If needed, more temp assets can be created as the LD team reacts to feedback.
But of course, remember, a placeholder must be unshippable or it may ship.
When the time comes for VFX and sound designers to work directly in the maps, the maps are already populated by temp assets, which dramatically decreases the workloads on all of these teams and gives them a much clearer idea of the scope and variety of work ahead.
Kickoff meetings at the start of a features development keep everyone in the loop.
Tech LDs and stakeholders on the LD team can be involved early, desiloing this information.
They can start working with the map owners to prepare for each feature's arrival.
The level design team is then empowered to have their maps ready as soon as the feature arrives. Ideally, of course, you can't anticipate everything and many features come very late.
You do what you can. On top of all of that, a powerful tool to help the whole team, my slice foils, pivot, desilo and empower our strike teams.
The critical disciplines are all present.
In my example, I use a recent onboarding strike team.
You have to keep it light and agile for it to work.
If the entire studio is on the strike team, it's not a strike team.
The team members have autonomy.
Leads and directors are in the loop, but team members have the authority to make decisions.
If every plan must be validated, then you need eight team leaders to validate everything, and it cripples the team's authority.
agility, sorry, and it must involve a producer. Empowerment of autonomy means increased accountability and everything you decide will impact other teams.
There's no single solution, it's just communication.
No team's partnerships are identical.
The challenges to each will be unique.
You need custom solutions.
If you de-silo your work, you can empower other teams to be ready to receive it as soon as it's available, to get their work in a much better state to begin your pass on it.
And of course, trust in the power of strike teams.
But remember, it has to be lean and autonomous.
Challenge seven, markup and sunk cost.
Features that require markup.
That is, to be implemented by hand, in every instance, are very common.
And it's common across the industry.
It's something many development teams will face.
Arcane works very hard to require as little markup as possible, but it's extremely complicated to achieve.
That is because in some cases, markup is design work.
Like if you're defining a zone, a certain enemy cannot exit, so they won't chase the player across the entire map.
But in others, it is simply telling the game what exists so it can interpret the data in a certain way, like marking spaces as under a table so that enemies can shout, she's hiding under the table.
What does markup or lack of markup do to level design?
In Dishonored 1, sorry I'm getting tired. In Dishonored 1, we had a blink power, a short-range teleport. It required basically no markup. We occasionally needed to tweak the collisions a bit by hand to get it to work perfectly on a critical path, but for the most part it just worked.
By blink requiring no markup, that's time the level designers can design.
Death of the Outsider had the displaceability, which allowed our protagonist to place potential versions of herself representing alternate realities and then switch between them at will.
Yeah, it was complicated. Because an NPC was involved, we had to put navmesh everywhere the player could potentially go. This represented a small markup cost, but it wasn't design work.
It was just dropping data in where it fit.
Well, it's something that requires a massive amount of markup, but straddles the line between interpreting existing data and design work.
Enemies don't take cover during combat unless there's data telling them where they can go and what they can do when they're there.
You can build tools to have the LD hand place each cover point, which gives them absolute control over every combat encounter.
But this is incredibly time consuming and it makes it very difficult to change the map's layout later.
systemic cover that operates either by AI rules or procedurally generated cover points has pros and cons. The cons are a much higher reliance on strict metrics, but if we consider this adherence to extra metrics as markup time, it's still way less than if it all had to be done by hand.
That's the pro. Iteration is feasible again.
Here's a perfect example, a personal example.
In Dishonored 2, I was level designer of the clockwork mansion, which was this house that could transform in all sorts of ways if the player pulled levers.
This is how I spent my time working on it.
Okay, not really, but I imagine this is how it might look from the outside.
This, what I'm about to show you, is closer to reality.
The clockwork mechanism is...
Excuse me.
The clockwork mechanisms and basic level design took maybe half of the development time of about three years total.
Jindosh, the antagonist, had voiceovers, which reacted to your behavior.
Setting up the unique logic for each line was time consuming.
The navmesh deformations for all the transforming rooms was a monumental task, even though the static navmesh was procedurally generated.
Making the audio propagation work at all.
took maybe as much time as setting up the transformations themselves.
It was 100% markup, and the tools I needed to use were tricky to handle.
Could it have gone differently?
Sure, but at that moment, this is what I had to work with, so I worked with it.
I'd like to clarify what I mean by sunk cost.
Usually it means time or money that you can't get back.
If the team must pivot, all the time spent doing the markup may be lost.
Alright, thank you for listening.
We'll see you in the next video.
And do me a favor and go watch your favourite show on Netflix.
Bye!
Or go watch this one.
See you soon!
Bye!
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
Peace.
And it can be really lost because it's possible that nothing at all was gained by having done it.
It's not like cutting features or throwing away design ideas.
Those can always come back later and you could have learned something, but the time you lost on the markup is gone.
But in more human terms.
Markup can go on for months and months.
It's thankless, tedious work.
If you combine it with long hours, this can have a serious consequence for the mental health and morale of your team.
I have experienced this myself at different times in my life, and it can take years to recover from.
If the tools a level designer is using to do the markup are particularly unergonomic.
it can cause repetitive strain injury like tendonitis.
I have tendonitis in my left hand as a result of work similar to what I've described.
It is kind of a pain.
This is really important to consider because RSI can have long-term effects and honestly, so can wearing down the mental health and morale of your team.
For this, I have two solutions and a process for choosing which one to use.
The first is to prioritize tool ergonomy. By prioritize, I mean they are designed that way from the conception of the feature, not at some time later. The second is procedural features, that is, features that require little to no markup at all. Here's the process.
First, you have to start with the question, does the feature potentially require LD work?
We're gonna go with yes, because that's the whole point of this topic.
Is it conceptually possible to design the feature so no markup is needed?
Let's play it safe right now and say no, it's not.
This feature requires a designed implementation.
Is there an existing and ergonomic tool to implement the feature?
Best case scenario, yes, you already have one.
Use the tool and prove it if you can.
But what if you don't?
You should develop the tool in parallel with the feature with input from the level designers.
But what if markup isn't needed?
There's two things you have to determine.
Would the time it takes to code and maintain the feature be less than the level design cost?
I feel that in most cases, it is.
Here's the tricky one.
Do you have someone on your team who is capable of writing this code?
This can be a much more complicated task than creating a tool to do the markup.
You could pour weeks into the work and still fail.
It's a risk.
If not, we're back at the tools question.
But if yes, create a system to procedurally implement the feature across the game and you're done, sort of.
You must still keep the LDs in the loop from early on because now there's going to be metrics involved.
No matter the outcome, the goal is to get the feature into the game as designed or give the level designers a way to do it.
You must do it in a way that allows for iteration and flexibility.
You need to avoid wearing down your level design team on repetitive tasks that take months to complete and blocks their ability to pivot.
And you need ergonomic tools that protect the mental health and the tendons of your level designers.
Last challenge, number eight.
and my clock has stopped so I have no idea how much time I have left. Oh well, let's keep going.
Game development is too much information.
The solution is documentation. Too bad the solution is also a challenge. We can do better than that, but some details first. A lot of information flows through level design.
From the start, you have the game's concept coming from creative direction, narrative, or both.
The lead level designer and campaign designer will serve up a list of the draft of the campaign overview, which they've worked out with level art leadership and the narrative team.
Tech LDs working with tools developers will be drafting up tools and process specs.
The systems designers will begin to produce vast quantities of writing about features, details, and metrics. The level and environment art teams will also begin to lever metrics about the sizes and shapes of everything they're going to be using. From there, level designers must document their brainstorms and prototypes, and then as the LDs build their maps, they need to begin to write down all of the map details. And then, They should also write up the question vignette details, but there's more.
Different stages of a project's life require different types of documentation.
During the brainstorming phase, docs can and should be loose and messy.
It's the designer's notebook.
It's also an archive.
Nothing here should be thrown away.
Browsing through your old ideas is a great way to get new ones or find one to resurrect.
Documentation for production.
is a massive library of detailed specs for every topic in the game.
I've heard it described as the single source of truth.
It has to be rigorously guarded against redundancy and obsolete information. Cut content must be clearly labeled or deleted.
Out-of-date specs must be updated or deleted.
Documentation suitable for shipping is an entirely different beast and often not written by the designers but requires their help to do so. It must be lean and holistic with information pertinent to QA, to producers, to external organizations. So in addition to all of the work discussed in the last seven sections, level designers also need to take time out of their week on a regular basis to create and maintain their docs.
So what do we do?
We're going to treat documentation as game development.
Writing and maintaining docs is a task like any other task in the Teams to-do list.
I am talking about the entire development team, not just the level designers.
Level designers need up-to-date documentation on metrics.
Getting out-of-date information is a hazard.
Working on docs should not be treated as an additional thing to maybe get to if you have time.
It's a task with a workflow and reviews like everything else.
If you include update the docs as a footnote in a bigger task, it can be tempting to mark the task as complete, trusting yourself that you'll get to the docs later. On the other hand, if you complete the work but haven't yet updated the docs. The task can still be marked in progress, and this can give leads and producers an inaccurate view of the team's progress towards the milestone.
If documentation is its own task, we ease these problems. Time is allotted to it. People can see more clearly what is and isn't done. A team member who is blocked until your work in the game's data is finished will be happy to see that that task is now complete and your lead producer in QA will be happy to see when the docs task is complete.
A few miscellaneous points are rather my personal advice as someone who spends a lot of time of her day writing docs. You can tell I'm very passionate about this topic. Docs should always know who the owner of what is. No doc can cover everything. People with questions need to know who to ask.
Even if someone is maintaining the docs, you need tasks to review them and point out errors.
I do a lot of doc work for the campaign.
I have a pretty clear overview, but it's extremely helpful to have level designers come in, look at the details, and know where I've made a mistake.
Yes.
Redundancy is a surefire way to get misleading docs.
You need things like data boxes that exist on multiple pages and only need to be updated once.
Old stuff is often good to keep, but it should be moved to an archive.
It is a pain when you search and half the results are from cut features.
Know when to collate certain types of information into a single doc.
It's mind-numbing.
to have to search through 50 features pages to find the metrics you need.
And the most critical point, do you want good bugs? Bugs that are accurate, relevant, and thorough? Testing teams cannot do this without good documentation. Okay, we're almost done.
Flexible metrics can save you from determinism in game design.
freeing outcomes through an attentive give and take between teams.
Key partnerships must be empowering one another to pivot, rather than siloing work and racing to the finish line.
Tools creation can focus on procedural solutions when possible and develop ergonomic tools alongside the feature when not.
Documentation should be treated as a game development task, not something that's tacked on to existing tasks. It needs as much production guidance as anything that will go into the game itself. So that's the plan. Nine solutions to eight challenges. As I think you've noticed, it's a lot of hard work and involves nearly everyone on the team.
And I couldn't even get into topics like recruitment, the impact of marketing, user research, all the ways that we depend on producers and build management.
And I barely scratched the surface concerning QA.
But I think this is a good start and can lead to discussions your team can have on how your entire studio can work together to create great level design.
But GDC Talks are a studio and friendships wide effort.
So thank all of you for taking the time to help me with this, especially while we're trying to get Deathloop out the door.
I couldn't have done it without you.
It's over! Thank you.
