Fasten your seatbelts and prepare to come along with me on a journey into this scrappy, unprofessional, chaotic and sometimes quite desperate adventure of solo indie game development.
Where there are no producers, no meetings, no one to delegate to, there is just you, your computer, and your determination to see it through to the end.
So what is this talk going to be about?
So it's going to be a, it's not just a level design talk.
There's going to be a lot of explanation about how I built my first game, Hangline.
So it's kind of like a post-mortem, but there is going to be a lot of level design information.
So the reason I'm going to be talking about how I built my game and more about the game design and the creation and the structure of the game is because I think this is really fundamental into understanding the level design.
As a solo indie game developer, You need to be able to not just be a level designer, you obviously need to be a programmer, you need to be a game designer, you need to be a producer, you need to be an artist, you basically need to be everything.
So I think it's really important in explaining how I built the levels for the game to also explain a lot about the game design itself and the game creation.
I'm going to be talking a lot about how to build a process for creating levels as quickly as possible, because that's something that was really important in making the game.
And I'm also going to be talking about how to feed your levels to get them to stand out from each other and to be memorable in the player's mind.
I'm going to be talking about how to teach game mechanics in an organic way, not just through forced tutorials.
I'm also going to be talking about how to layer the systems of your game together so that you can get maximum variety out of very few game mechanics.
Before I begin, I'm just going to show you a quick video of my game Hangline so you can understand a little bit about what it's about.
All right, we're back.
Excellent.
Sorry about the technical difficulties there.
Rule number one of giving a talk at GDC is don't use Google Slides.
So I'm going to talk a little bit about myself now.
So I spent a large amount of time in my career as a designer or lead designer on various AAA games, mostly games where you shoot people or blow things up.
But at some point after being through quite a lot of different layoffs at different studios, and also the only projects being available were kind of, um...
like a lot of sort of sequels, prequels, continuation of franchises, I started to think maybe I should try something different. And I started to think maybe I could go indie and try and build something by myself. But this is quite a scary thing.
So the thing is making a game by yourself It's a very personal journey, and the way you navigate through that journey is very dependent on who you are as a person and your own shortcomings.
So not just your actual skills, but your personality as well.
So I'm someone that worries a lot, and I'll think of like a thousand reasons why something isn't going to work.
So even the idea of me making a game by myself was a terrifying thought, and obviously I thought of a lot of reasons why that is not going to work.
And I needed a lot of pushing to even decide to do that.
And for me, the push to do that, to become a solo indie developer, actually came from reading an article written by a fake robot dinosaur.
So the article is called Win Like Stupid.
And it's all about basically being a bit more stupid and being a bit more kind of not overthinking something and kind of moving ahead even though something may not seem like the greatest idea.
So I can kind of show a little diagram from this article.
And the important thing about this diagram is that the kind of intersection there between geniuses, so basically smart people, and like people that are winning in life and are successful, it's extremely small. And the kind of point of the article is all about being a little bit less judgmental of your own ideas.
So the whole article is actually written in capitals because the sort of voice is meant to be like Grimlock's voice.
So I'm gonna read you a few quotes from this article and in order to do it justice, I'm also gonna read them in the way that I expect they should be read, so.
Smart people hate dumb ideas.
Only think of ways idea can't win.
Be too stupid for fear, too stupid to stop, too stupid to fail.
And hopefully I haven't destroyed my voice for the rest of this talk now.
So I think you get the point anyway.
So this article was super useful in helping me actually start this journey.
But there were significant hurdles to overcome upon doing this.
So basically, when I started this path of solo indie game I had no team, and despite how much I kept going on about wise robot dinosaurs, no one really wanted to work with me.
I had no funding, no money for contractors, no art skills, I'd not even built a 3D model in my life, and I had limited programming ability.
The last time I programmed was at university.
So, yeah, it doesn't seem like a great start, right?
But...
Gotta remember the words of the article.
Be too stupid for fear, too stupid to stop, too stupid to fail.
So, I went off and I started building this game.
So that leads us to part one, which is building the concept itself.
So, I left my job in San Francisco and I moved to Spain because I was kind of scared of the rent prices here and thought this would be a lot safer.
And I constructed a plan.
And that plan was to make a game in about three to six months, just do something super fast, super basic, get it done, fail miserably, and then do another one and make it much better.
So yeah, what could possibly go wrong?
The answer is many things.
So I started to figure out some or put some goals down of what I wanted to try and achieve with this.
So I thought, let's keep things very small, and I'll make a mobile game.
Didn't want to get anything that was too crazy with scope.
I thought, let's keep it really simple and small.
I also thought I'd make a free-to-play game, because I had a little bit of experience at this, working at a small indie studio at one point.
I also wanted to do something that was very, had a very relatable theme.
So I didn't want anything fantasy or sci-fi.
I wanted something very grounded, just to appeal to a wide audience.
And I wanted very simple and easy to pick up controls.
This was something that was really important to me.
So I started writing ideas down, and the one that I was most excited about was a climbing game.
So I thought to myself that the mobile controls, the touch screen, would be really effective for making a climbing game, because I thought you could kind of move the character's fingers with your thumbs, and sorry, move the character's arms with your thumbs, and kind of move around, and I was like, yeah, that'll work really well for a climbing game.
But I thought, okay, let's do a little bit of research before I get going.
And as it turns out, there was a lot of climbing games.
Not only were there a lot of climbing games on mobile, there was even climbing games that used the exact same control system that I was excited about.
So it was like, oh, okay, that's not a great start.
But then I thought, what if you could just kind of give the guy a grappling hook?
a lot more interesting.
Most grappling hook games that were out at that time, they worked in a similar way, where you'd fire the grappling hook out, it would hit a solid barrier, you would swing, and then that barrier would also form like the kind of the shape of the level, right?
So everything's kind of very, kind of rigid 2D physics, let's say.
And the idea I had, or the twist on it, let's say, is that I thought it would be really cool is if you could just literally click anywhere on the screen and send the grappling hook out to that point.
So you don't have to connect it to a specific bit of collision.
And that way, you know, you would swing out and it would give a lot more sort of finesse to the controls.
And this seems like a simple idea, but basically the entire game is built around this.
So I set off and I thought, okay, first thing we need to do is prototype it.
Obviously, you know, the first time you do everything, it's probably going to be a failure, so you may as well test it out first. This is me testing out this exact GDC talk.
So I'm a pretty lazy programmer, basically.
I don't really want to program anything unless I absolutely have to.
So the very first thing I did was I looked on the Unity Asset Store, just in case there was something which I could use for swinging you up a mountain.
Lo and behold, I found Easy 2D Grappling Hook for a mere $10.
And it turned out this was the best $10 I've ever spent.
So I got this going and before only a few days, I managed to get a kind of Unity cube swinging about.
And this was already starting to look like, you know, this could work.
So.
I started to think, okay, what is the actual point of the levels?
Like, how are things gonna work here?
What's the structure?
So I just kept with something very simple.
You start at the bottom of the mountain.
You have to navigate your way through, and there'll be some pickups on the way, stars, and then you have to get to the top and hit the flag, and that's the end of the level.
So this was my plan.
Now, there were some first steps I needed to take here.
So obviously, I needed some barriers in the environment to slow you down and to form the shape of the level.
And I need some hazards to avoid to make it a bit more of a challenge.
But the other thing was I needed to make the grapple a little bit more elastic and springy to fit the kind of feel that I was looking for.
So next prototype.
So here you can see these Unity cubes scaled up and down.
That's the gray boxes there.
The grapple is a little bit more elastic.
And then as you're swinging around, you've got some of these red blocks that basically kill you instantly.
So this provided a few initial discoveries.
Swinging around was really good fun.
But it was very hard to be precise with the physics.
So the thing about physics is that it gives a lot of free gameplay, like it has this unpredictability, which creates a lot of emerging gameplay.
But the problem is that unpredictability can also lead to frustration if you punish the player really severely.
So basically anything that instantly killed you was not such a good idea.
The other thing that this prototype taught me was that level design is basically everything in this game.
It's super duper important and the game is basically going to live or die based on the level design.
So the next thing I did was whack in a character into the game.
This was just some guy I'd made in a Blender tutorial.
He wasn't massively happy about being in the game, but he didn't really have a choice.
And so I thought, let's make some hazards that don't insta-kill the player.
So the first of those was this kind of a falling snow panel.
Obviously here, it's just, again, a Unity cube.
But this kind of pulled you out your way, and then it didn't kill you instantly, but it put you into danger, and you had to quickly react to get out of there.
So another sort of non-instakill hazard was this falling block.
Similar kind of idea except this was a solid block that could actually crush you if it landed on top of you either too fast or if it crushed you against a sort of solid ground piece.
I also whacked in an avalanche because obviously this is a game about climbing mountains and that seemed pretty appropriate.
So there's a bunch of things that I put in there that sort of knock you off the line, but they didn't kill you.
So you still had some moments to react and continue playing.
Now, around this point, I started to think about marketing and sort of getting the word of the game out there.
And I met a chap who worked for a Spanish magazine at a game conference, and then I was talking about my game, and then he was like, oh yeah, let me know when it's something to look at.
And then at one point I sent him an email.
And I've got the email right here.
So this was the first point where I was trying to describe, like, what is the game in one sentence, you know?
So I came up with this super quick tagline of, you're a dude with a grappling hook, and you have to swing your way up to the top of the mountain, dodging falling rocks, avalanches, and angry mountain goats.
Thought, yeah, that sounds pretty cool.
Then he emails me back saying, that line, angry mountain goats, really got me.
Smiley face.
I was like, oh, yeah, I don't actually have goats in the game and I have no idea how they're gonna work.
But I guess I've got to put them in now.
So I built a goat using Unity cubes, obviously.
You know, as you can see, artistic skills at this point were not great.
And I was like, well, what's a goat going to do?
I mean, probably he's going to kick you, right?
So, okay, let's put a trigger on it, and we'll get him to fire an impulse as soon as you go near.
So I slapped it in there, and once he actually gets to the mountain...
Boom, get smacked by the goat.
And miraculously, everyone that played the game absolutely loved the goats.
And even all the way to the end of the game, this was the thing that everyone seemed to comment on.
So if you don't take away anything else from this talk, just basically put goats in your game.
So next thing I decided to do was test on the target platform.
So I built a mobile build as quickly as possible.
This came with a few discoveries.
It's very hard to see what's ahead because you've got this kind of narrow field of view.
So basically, it was very easy to kind of smash into stuff if you were moving left to right, because you couldn't see too far ahead.
So basically, yeah, moving very fast, left or right directly, was not good in the levels.
So basically, the levels needed more diagonal motion.
So to kind of explain this a little bit better, I've got this crude diagram here.
So imagine you're sending out your grappling hook to the red dot there.
What this is gonna do is kind of swing you in an arc, right?
So then we fire out our next grappling hook.
And then we're going to kind of swing back around.
So imagine we're kind of trying to move up the screen here.
And we fire another one out.
And then we're swinging in the other direction.
So essentially, you're kind of making curves as you move.
And basically, I realized this is kind of like a driving game.
So in a driving game, the cars are are physics-based, right?
And you're controlling them, but they're also moving a lot by the physics of the world.
And your racetracks are very smooth and curvy because of that, right?
They're not just flat, straight lines.
So basically, this made me realize that for an ideal-shaped level, I'm going to need some sweeping curves.
I'm going to need more organic shapes, right?
How the heck am I going to do this if everything is made from Unity cubes?
So, like, this was what the levels were at that point.
It's all, you know, really straight lines, right?
So, this moves us neatly on to part two, which is pre-production, basically how to actually build these levels.
So, at this point, I was thinking, I need to get into Blender and start, you know, actually building a level properly.
But what I decided to do is find a way to take my crappy Unity cube levels and put them into Blender.
So I looked on the internet and I found this tool that was an OBJ exporter for Unity.
So this allowed me to take my basic, basic cube levels, take them out of Unity, put them into Blender.
play around with them, make them look a bit better, and then pull them back into Unity and they'd have all the same collision.
So that's what I did.
And this was kind of what I ended up with there, which was, it was okay.
Starting to look a little bit better.
It looks a little bit more like a mountain now.
But I discovered...
The building level art is really slow.
So just to kind of get an idea of what I mean by slow, so my goal for playing a level was that it should take about three minutes.
This was like a rough approximation when you're actually playing it.
So I was trying to make about like five hours of gameplay for the first release of this game, just so people would have enough to play and they'd watch some ads and I would hopefully make some money.
So if we times five hours by 60 minutes per hour, we get some other number, and then we divide that by three minutes, and we get 100 levels.
That is what I would need for five hours of gameplay.
But really, probably more like 50 levels, right?
Because the player is going to die occasionally, and we don't need them to, you know, well, they're not going to just play through every level one after the other.
But this was like, literally it was taking me five days to build a level because of my crappy 3D art skills and because this was just a really slow process.
So obviously five days to build a level, you've got like 250 working days to finish this game, like just the levels.
So this was not feasible.
And I started to think like, what other solutions are there for solving this?
And then I thought.
Maybe I could generate the art automatically.
Automatic mesh generation.
So I started mentioning this to friends and they were like, are you mad?
What the hell?
That's for serious programmers, not noobs.
This idea is dumb.
And I was thinking, yeah, this idea is really dumb.
But then I remembered the words of that wise robot dinosaur, smart people hate dumb ideas.
Only think of ways idea can't win.
And I thought, okay, let's try this.
So again, I went on the internet and searched for something that might help.
And I found this tool called PolyMesh.
So this is a tool that allows you to basically, in the Unity editor, set up points for creating simple 2D collision.
So I thought the plan was I could use this to kind of build the shape of the level directly in the editor and get a more organic shape.
So it also allowed you to kind of like, as you plotted the points out, it would make the collision and it would also kind of bevel or sort of extrude the edges to make a shape.
So I started working on this, got it integrated, got it together, and this was a massive step forwards.
I could then build levels that were a lot more interestingly shaped.
So here you can see I've also got kind of a separation between the back wall, which is like this snowy area, which you can grapple and connect to.
And then there's also the solid gray rocks, and sort of like a solid kind of front wall of rock that you couldn't get past.
So this was a huge help, but it's still not looking that amazing yet, right?
It's quite basic.
So the next part of this step was figuring out, like, can I actually deform those meshes to make them look a bit more interesting?
And again, I went on the Internet and started looking to see if there was some code I could use.
And I found this package called Coherent Noise Generation.
And this had lots of different noise curves that you could apply to meshes.
So I started fiddling around with it, and I managed to start manipulating some meshes to make some interesting shapes.
And to cut a long story short, I came up with a process to build more interesting looking rocks and level shapes.
So this is kind of a top level summary of it.
Basically, I used the PolyMesh tool to shape the rocks.
Then I used another tool to triangulate them.
So this is about basically making the mesh into lots of reasonably evenly shaped triangles, because that's really important when you want to try and deform them.
Then I would add depth to that shape and pull it out.
Then I would apply the coherent noise algorithm to deform it with a Voronoi curve.
So this kind of makes cells, and that's why you get these sort of little rock shapes.
Then I would make the vertices all the same for each triangle to make flat shading, because I wanted the low poly look.
Then I would simplify that using a decimator tool.
Again, some code that I found on the internet.
It was all free and all legitimate, I promise.
And then for the last part, I would basically check if the triangle is facing upwards, or roughly upwards, and then color it white.
I don't know why I've written snow shader there.
That was probably to sound more intelligent, because at this point I had no idea what a shader was.
Okay, so this is basically what this looks like.
We've got our 2D simple shape for the collision of the level, and it would deform it into this more interesting-looking rock.
And there is a GIF right here which shows it working.
So that's me kind of sculpting, pulling out the points to make this more organically shaped rock collision.
And then after a few seconds of my computer wearing its fans and doing all these calculations, it would eventually create a more interesting looking rock.
Yeah.
So.
This was a massive improvement, and with a bit of lighting and some post-processing, the levels now, to me, looked good enough for production.
So this changed everything, basically.
It allowed me to rapidly experiment and try lots of ideas out.
It created much more organic-feeling levels, or it allowed me to create more organic-feeling levels.
And it also allowed me to create more variety in the obstacles, because I had a lot of falling rocks and things like that, which I could now custom build the shapes for, which was a huge, huge improvement.
And basically, with this tool, I could build a level from, whoa, this is scary, what the heck?
Okay, I guess we'll just keep going.
I could build a level from zero to done in four hours, which was a massive improvement from what we had before.
So yeah, basically, if we recalculate how long it would take to build 50 levels, it's more like about 25 days.
So this was massive.
So the next thing I want to talk about, because it really relates to the level design, is the layering of game mechanics.
So at this point, I had kind of like made the mechanics sort of in isolation, right?
So yeah, if you can kind of, you know, playing the game and you encounter one mechanic on its own, that's cool.
But if we have several mechanics that interplay together and connect together, that's gonna be a lot more interesting.
So we're going to get slightly programmer-y for a second here, but I assure you it's quite basic.
So this is the object hierarchy diagram for the game.
And I really feel like the whole electricity is going to go off soon.
I need to finish this talk before disaster happens.
So here, as an example, I wanted the goats to do more than just kick the player.
I wanted them to kick other things too.
So I made this behavior of kicking happen on a destructible object, which is at the top of the hierarchy there.
And so everything under destructible objects also can do whatever a destructible object does.
So because the goat could then kick a destructible object, it meant that it could also kick dynamite, it could kick mountain cats, it could kick the player, and a goat could even kick other goats.
And this created a lot more interesting possibilities with combining the mechanics.
So as you can see here, the cat jumps on the player, the cat gets kicked by the goat, the goat falls on...
Yeah, okay, anyway, you can see basically lots of cool stuff happens that's quite interesting and unpredictable.
So that was a massive help in allowing me to layer the mechanics together in the levels.
All right, so I knew how to make the levels and what the process was gonna be.
So the next thing I needed to do was figure out how to make them actually play well.
So I was, yeah, the next part was, yeah, basically what makes a good level?
So there's kind of three basic things I'm going to talk about here.
So the one is, first one is tutorials.
So that's explaining these game mechanics to the player.
And I didn't want to do a scripted kind of stop the player and make them read a tutorial message at all.
I wanted to make it much more organic and in the level.
And I'm going to talk about that in a sec.
Also, I found that variety was a really important thing in making the levels interesting.
And there's a lot of different aspects to that, which I'll talk about in a moment.
And also theming was really important.
So that's making the levels stand out from each other and being each one of them being memorable in the player's mind.
So let's get into detail on these.
So the tutorials, as I said, I wanted to not do guided tutorials.
I wanted the player to learn organically by doing the thing that kind of shows the mechanic, kind of a bit more Nintendo design philosophy, I guess.
So I had a dedicated level that would show you how to, or kind of force you to experience the mechanic.
And then what I would do is reinforce that mechanic in the next few levels.
And then I will show the breadth of that mechanic afterwards.
So that means layering it with other mechanics to show how it also fits into everything else.
So let's dive into a simple example.
So here we've got the goats.
This is the first level where you encounter a goat.
And the player starts at the bottom left of the level.
And they have really no choice but to go through this quite tight gap here.
And on going through that tight gap, they see this cute little goat.
They don't really think much of it.
They will naturally accidentally swing into the goat, and the goat will kick them in the face.
And they will be quite angry, but they will also understand exactly what a goat does.
Then, if we look at the rest of the level, zoomed out, just in case the player misses that first goat somehow, there is basically a goat on every single tight gap in the entire level.
So by the end of it, they're basically swearing because they got kicked by a goat so many times, but they understand how they work.
Then, a few levels later, we start to add other mechanics in with the goats that we've already kind of introduced before.
So here we've got those falling panels, which I've highlighted in orange, and we've also got some falling rocks above.
So the falling panels, if the player connects to those, then they might fall into the goat.
And also if they pull down one of those gray rocks at the top, that might actually crush the goat.
So we start to teach the player that these are these other mechanics that layer onto the goats.
Super quick example here.
Player pulls down the rock.
The rock shakes the dynamite.
The dynamite explodes and sends the goat flying.
So.
The next thing that I did relating to mechanics was I made this diagram, which is basically every level of the game.
And then it shows what mechanic features in that level.
So that's the colors you can see to the right-hand side.
So the point of this really is to just kind of sanity check, like, am I using those mechanics to their fullest?
You know, if there's huge gaps.
in this sheet, that means I'm kind of forgetting about a mechanic for a while, right?
So it's about, it's kind of like a reminder just to make sure that you've got an even dispersal of these mechanics, so you're keeping things fresh and you're not kind of relying on one for too long.
Also, you'll notice this is kind of a curve that is coming in from the top there, and that's basically the curve of kind of mechanic introduction.
So the reason that is a curve and not a line is because you want to introduce mechanics much faster at the start of the game, because that is going to provide maximum interest to the player, so that they're more likely to keep playing because they're basically seeing a lot of new stuff at the beginning of the game.
This is super important for mobile games where people have really short attention spans, especially if the game is free.
So if it's a free game, they've had no commitment, right?
So next thing to talk about is variety and pacing.
So this was another really important aspect that I found when making the levels.
So my kind of aim with the levels was to make sure that there's no single part of the level that would repeat in the same way later in the level.
So whenever I had some section of gameplay, I'd make sure that if it was repeated, it would repeat in a different way.
So also I was trying to vary the spaces of the level.
So we'd have larger spaces where you could fully swing and move quite fast, and then also have tighter spaces where it was harder to get through and you had to slow down.
And the idea I had was to try and vary between these two styles all the time.
Another thing that I was trying to vary was the difficulty of each level, so that this would bounce up and down as you played through, i.e. some bits were easier and some bits were harder, and this would constantly change as you go through. I'll just show a quick example of that. This is another level of the game quite early on. So this blue line here, this is kind of the main route through the level.
So yeah, player starts at the bottom, has to climb all the way to the top.
This is one of the more linear levels, I'd say.
And I've kind of labeled here the areas which are slow to navigate through, where there is, say, like an obstacle, or there's just a narrow gap.
And then there's also some areas that are faster to navigate through, where there's more clear space and more things to grab onto.
And as you can see, this is varying all the way to the top of the level.
Then I've also labeled up kind of the areas that are harder and easier in the level.
So, you know, the harder bits are the ones where there's maybe a dangerous obstacle.
The easy ones are where there's more things to grapple on to.
And as you can see, again, I'm trying to vary this throughout the level. So you're constantly kind of getting an easy bit and then a harder bit and then an easier bit.
Another thing I was doing with variety was trying to make sure there was a variety of routes.
So I wanted to make sure there was more than one way for each obstacle.
So this basically meant having a main path through the level, but then lots of optional side paths.
So this is basically, again, thinking about like mobile, where you've got a very wide audience and you don't really want someone to get stuck on the game.
So my idea was to kind of make the main map relatively easy, but then have optional challenge by the pickups, like the pickups being in harder to reach places.
So yeah, as we were saying, mobile is a very wide audience, so you don't want someone to get stuck.
So, quick example of that.
This is the first level where you encounter falling rocks.
So, it's quite a simple level.
You kind of go straight all the way up, really.
The main path I've labeled in blue.
And you can see there's these side paths in green to the edge there.
So, the player has optional routes they can go.
And those optional routes contain those pickups.
So, they're a little harder to get to.
You'll also notice that there's a few points here, especially right at the bottom, where there's almost no way through without encountering a falling rock, right?
So again, because this was a tutorial level for the falling rocks, I was basically forcing the player to experience them.
And if they didn't experience the first one, they sure as hell would experience one somewhere else in this level because it's loaded with falling rocks.
So next thing to talk about is theming.
So one thing that I realized was really important in making the levels was to try and find at least one unique and memorable element in every level.
So this could be something where there's a very unique use of a mechanic, or it could even be something that the shape of the level is very different.
So the point is, you're basically trying to make something where you're answering the question, why does this level exist in the game, right?
Is there another level that's almost the same?
Then it probably shouldn't exist, right?
Does it add anything new to the current set of levels that I have?
So another way to think about it is imagine two people that have played the game talking to each other.
Like, can they describe the level to their friend without telling them the name of the level or the number of it, you know?
They'd be like, this is the level with the giant octopus or whatever.
So this was kind of what I was trying to go for and something that I found really important.
So let's show a few examples of that.
So this level is actually called Leap of Faith, and you'll notice there's this bit in the middle there where the only way to get from this lower part of the mountain where you start onto that larger upper part is by grappling a stalactite that can fall.
And it's literally the only thing you can grapple.
And then after you grapple that, you really need to quickly grapple the other ones.
So it's kind of like, yeah, it's basically a leap of faith, and it's quite a memorable moment in this level.
So another thing that makes this level quite memorable is that it also kind of looks like Dr. Zoidberg.
So I'm just going to show you quickly now that level that you saw earlier in the game.
So this was another level where I wanted to make this feel very unique.
So I kind of, yeah, basically stole this idea from Indiana Jones, right?
Where you've got this giant falling boulder.
And this is like the kind of the largest rock the player has seen at that point.
And there's like no way to avoid it.
So this made this made the level very memorable.
So...
Just to kind of explain how I managed to kind of keep this idea of theming in my mind when I'm designing levels is what you see here are two diagrams that I've drawn on paper.
And they're just A4 sheets, right?
So this is quite a, each one of those is a relatively small piece of paper.
And you can see I've crammed in like about, you know, six diagrams of an entire level into each kind of corner.
And the reason for that was to force myself to not get too detailed with each level and instead draw out like, what is the unique thing about this level?
Like, how is it different to the other levels?
And by drawing super small, I couldn't get focused on any details.
I had to literally think, okay, how to set this level apart, both in terms of its shape or through creating, you know, a unique element in there.
Um, so another super important thing, um, that I'm going to mention just briefly is playtesting.
Um, so I literally gave this game to everyone to play, like my nephews, my friends, my mom, my dad.
You can see my mom there actually in the bottom left corner.
She was a particularly useful play tester because you can see the kind of claw grip she had on the mouse was quite unique and meant that she had almost no control over the player characters.
So if my mom could beat a level, then that proved that it was safe for human consumption.
So, yeah, getting your game in front of people is mega important, not just because it's going to help you see a load of bugs that you wouldn't notice, but it's also...
It's going to help you just feel better about the game and realize there's people enjoying it.
So super-duper important.
And also, if you've got your game on mobile, this is a mega big advantage because you can just literally whip it out your pocket.
You've got it on you all the time.
So anyone you meet, you can just say, hey, I'm making a game.
Want to play it?
So that's really useful.
All right.
So at this point, I was six months in.
I had all the game mechanics.
I'd figured out how to make good levels.
I'd close to final the environment art.
I was almost done, right?
So I want to ask you guys if anyone can guess how long it took me at this point to launch the game.
Just shout out anything you can think of.
Most of you are actually right.
I thought you were going to guess less, but yes, it was one whole year.
So original idea of three to six months, yeah, that was completely not happening at this point.
So yeah, like the reason it took so long was I still had UI to build, a whole progression system and economy.
All this ads and monetization stuff, marketing, like, yeah, this was a huge challenge.
And also because these tests are like super boring.
Seriously, if you ever have to deal with, like, ad mediation networks and monetization stuff, it is, yeah.
This is not the indie dream, let's say.
So anyway, at this point in the project, I was getting really anxious.
I had a lot of friends asking me throughout the project, like, oh, you're working on that game, yeah.
How long is it gonna take you to finish that?
And I was always like, yeah, about three months maybe.
And then it asked me three months later, like, yes, so have you finished yet?
Oh, no, it took about like maybe three more months.
And this would happen every time and became like this running joke.
And I was getting really worried, to be honest.
Like I was thinking, am I actually going to be able to balance the progression of this game?
All this economy stuff, it was super difficult.
Am I going to finish before I like I run out of money?
And is this even going to be successful?
Am I wasting my time?
These are the kind of thoughts that you have when you are literally the only team member and you're building this thing by yourself.
I asked a lot of people for advice, like kind of professionals in the industry, and to be honest, most people said, just get the game out as soon as you can.
It's probably going to fail anyway.
And this was not terribly helpful.
It's very sound advice, but it is not that helpful.
So basically, I was kind of gambling.
I was putting more chips on the table.
But the longer I spent on the game and the more things I was adding to it to try and make it better, it's basically like gambling.
It's putting bigger and bigger bets in the hope of success and return.
And to be honest, even at this point, even Grimlock's wise words were not helping, because I was just feeling like, this is really scary.
Like, I'm really running out of money, and it's just taking too long.
And it was actually a friend of mine, actually the guy that I'd previously emailed, and he'd told me he really loved goats, wanted goats in the game.
It was him that kind of, Yeah, gave me some advice.
Basically, he was telling me like he'd worked as a writer for a very long time, where he was kind of working at home and working by himself, whereas previously he'd worked with other people.
And yeah, I'm kind of butchering the quote.
I mean, it's Spanish anyway, and I think he told me in Spanish, but basically he was saying that like, When you're working by yourself, you're not doing meetings, you're not talking to other people, you're not got distractions, you are solidly working and you are solidly improving your skills.
So basically you're getting a lot better at what you're doing.
And so this was really helpful to me because I thought to myself, well, even if I completely screw this up, at least I'm gonna be better at making games.
And this was kind of what I needed to keep going and to actually get to the end.
So this leads us to part four, the launch of the game, but not the actual launch.
This was the soft launch.
This was one and a half years in.
I finally got to actually soft launch.
But of course, you know, the reason I chose to soft launch is because there was still a few more things to do in the game.
And also, I was terrified of doing a full launch in case it was a complete failure.
So I used to compete to get a few installs for free.
I soft launched the game in India, basically because it was super cheap user acquisition.
And this is the stats here.
You can see the number of users on the Y axis, and then there's time on the X axis.
This was something like, I don't know, five days after soft launch.
And you can see there's about 300 users there.
So, okay, this is useful when you get some data from that, right?
And then...
Next day, suddenly, there was a huge bump in users.
But when I was looking at the stats, I was reading still 300 users in the Unity telemetry, and yet there was 3,000 users in the Google telemetry.
Like, what's going on here?
And I was like, okay, let's just have a look.
Where are these users coming from, right?
It should be India, right?
Nope, it was Russia.
I was like, why, how?
The game isn't released in Russia.
What?
Oh, that's what's happened.
So yeah, basically the game got pirated.
And then if we return to the graph, a few days later, so I've scaled the graph down here so that you can see it's 3,000 users at the top of that little red curve there.
And I think you can guess what's gonna happen next.
Boom, within a few more days, suddenly there were 300,000 users.
And this time it was not Russia, it was China.
So basically after two weeks, I got 500,000 illegal downloads.
And then...
Suddenly I get this email from this company called Yodo One, and they're like, hey, we've been playing your game and we really like it.
Do you want to have a conversation?
I'm like, well, that's interesting you're playing my game because it's not actually released in China.
They're like, yeah, we found it on this site.
And yeah, anyway, we want to talk to you about a possible publishing deal.
My, okay, sure, I'll have a chat.
Now, I actually knew about Yoda One because they'd worked on Crossy Road, which was huge.
I think they'd done the Android version.
They'd also worked on a game called Rodeo Stampede, and they were the publisher worldwide.
And they were telling me about this, you know, when I chatted to them.
And they were like, yeah, I think your game can be as big as Rodeo Stampede.
You know, we only take on a couple of games per year.
And, yeah, we think your game could be as successful as that game.
So, okay, let's have a little look how this game is doing.
And like, Rodeo Stampede at that point had 120 million downloads.
And using my very basic maths of divide by a million downloads to get the amount of money the gamers made, which I'm sure is massively accurate, you get $12 million.
$12 million.
So yeah, anyway, basically I was like, okay, let's try and do some kind of deal.
And I managed to negotiate something where I got quite a large upfront sum for kind of licensing the game to them, i.e. allowing them to be my publisher and then for us to work on the game and make some improvements.
And this basically took a lot of pressure off me because it kind of meant that even if the game kind of didn't do that well, I'd still have some security there.
So, they invited me to China to work on the game with them.
They wanted to make some improvements to the progression system.
This was amazing because I really liked dumplings and I got to eat as many as I wanted.
And then, yeah, we worked on the game for a while.
And yeah, so now I'm going to ask you guys one more time.
So at this point, after getting a publisher, bear in mind, they put a team of 10 people on the game to work with me, right?
That's 10 times the original team size.
How long do you guys think it took to finish from this point to the end?
Wow, you guys are super pessimistic.
Okay, it took a whole year, which is a pretty long time, right?
Anyway, so two and a half years later, finally, the game was released.
This is a few little gifs here from the final game.
So, yeah, so how did it do?
Well, it got a feature with Apple and Google, so that was really cool.
It did not set the world on fire.
I did not become a millionaire, I am sorry to say.
But it got over 2 million downloads on the Apple Store, over 2 million on Google Play.
It recuperated all the opportunity costs and more for me, and it still has players.
So basically, for a solo indie developer, it was a success.
So let's sum up now.
So when I was working on the game, I used a tool called Toggle, which tracks how much time you spend on a task.
So basically, when you start a task, you start this timer.
When you work for it for a few hours, then you finish the task, you stop the timer, and you write, this is what I worked on.
It's in this category.
Then at the end of the project, you can get a nice little graph like this, and it tells you how long you spent on everything.
So even though this game took a very long time to make, you can see level design is only 9% of that time.
And if you think about it, this is like literally level design, level building, level testing, and all that business.
Like, I think 9% is actually quite small.
And so, and I think a huge part of this was because I have this process of, you know, using this editor, this custom bit editor, to allow me to rapidly build levels.
So, here's some key takeaways.
So, yeah, I highly recommend if you're working as an indie dev to make a level design process or a level building process that allows you to rapidly iterate, because this is going to help you to not only build levels quickly initially, but also change them later if you need to, to either fix bugs or make them work better.
I highly recommend theming your levels around at least one memorable aspect so that the levels, you know, players can remember them after they played them and they feel more unique.
I'd also recommend layering your game systems so that they interplay with each other to create maximum variety out of, you know, as few mechanics as possible.
I'd also recommend using other people's code wherever possible and adding goats.
But yeah, basically, you want to try to follow your own unique path to success as an indie developer.
Because, yeah, it's a very personal journey.
You're going to have your own advantages that you can bring to that, but also you're going to have your own disadvantages, and your personality is a massive part of making a game by yourself.
And as I was saying, my personality was basically worrying about things and worrying, like, is this going to work?
And so I needed to overcome that by basically being a bit more stupid and not judging myself too much.
So, yeah, just quickly, you might wonder, like, what am I working on next?
Makes sense to do a sequel, right?
Or possibly another climbing game, another mobile game.
Actually, no, I'm working on an action horror roguelike about a rapidly expanding, procedurally growing tentacle monster.
And this game is way more ambitious than Hang Life.
I'm still doing it mostly by myself.
So yeah, why am I working on such a huge project?
I'm being stupid.
Too stupid to fail.
So yeah, that's the end of my talk.
If you want to keep in touch, yeah, there's actually a lot more details on how I built the game.
If you go to this link on Game Developer, there's free articles or more explaining much more detail on the process.
If you want to follow me, you can do it at edform on Twitter.
You can also get in touch via my website, Dynaboss.
And please fill in your speaker surveys if you enjoyed the talk.
And that's it. Thank you.
And due to that technical hiccup with the video, I actually have no idea how long I've spent on this, because the timer stopped.
So do we have time for questions here?
We have five minutes right now.
Awesome.
So if anyone has any questions, please step up to the microphone.
Only easy questions, though, if possible.
That would be great.
Hi, thank you for what you talked about, it was great.
And I have a question.
You showed a pic of the mountain, which showed the easy parts and the hard parts of the level.
My question is, why did you decide to start with the hard part?
Isn't it frustrating for the player to start a level with a hard part instead of an easy one?
Yeah, so I think the question is, why did I start that particular level with a hard section?
Because this could be frustrating to the player.
That is a great question, and you're basically right.
You shouldn't really start with a hard part.
It was really just for the example of what I was trying to show.
So, yeah, the diagram probably not terribly accurate.
OK, thank you.
No worries.
Hi, thank you, that was a great talk.
My question is about how you laid out your levels, especially after your tutorialization.
So there's probably a good chunk of levels where you already have all your mechanics talked to the player, and there's a particular challenge of sorting those in a nice, satisfying order, maybe increasing difficulty.
I'm curious if you had anything to speak on as far as how you organized that.
So I think the question is like, how did I organize the levels in terms of like, I built a bunch of them, like how to assemble them like in the correct order and flesh out the kind of gaps and stuff.
Is that what you mean, roughly?
More so after your tutorialization curve, where I mean, it's easy to order things after, well, relatively easy to order things after how you're teaching things.
Yeah.
After everything's taught, you have a bunch of level content that you need to organize and how do you do that?
Yeah, yeah, no, it's a good question.
So to be honest, I kind of still kept introducing new things because the way the game was structured, it was split into several mountains that had between five and ten levels in each one.
And every mountain would introduce something new.
This was partly to just try to keep the game interesting as you went along.
But definitely the more levels you build for the game, for sure you're going to kind of start to, you know, run out of, let's say, new mechanics to build.
And to be honest, to me, it was about trying to then use the actual design of the level to create variety.
So like, you know, making just more interesting shapes that the player hadn't seen before, instead of it just being one mountain, you know, have three peaks or have like a, you know, mountain that's bending rapidly on its side and things like that.
And yeah, just basically trying to play with what you have to stretch out that content as much as you can.
Yeah, I mean, there's lots of other aspects to it, I guess, but yeah, it's kind of hard to sum up in one line, but yeah.
Thank you.
No worries.
So I was just curious, so the first six months, was that just to get the vertical slice done?
Or were you more focused on just completing the game in general, you didn't really focus on a more traditional development cycle?
Yeah, so the question is, what was I basically doing in that first six months?
Was that for a vertical slice?
Yeah, the answer is that was the first six months basically was a vertical slice.
Yeah, it was about figuring out like how am I going to build this game?
What is this game going to be?
And like, what are the main parts of it?
And making sure that I had all the tools to build it, basically.
So it's kind of like, yeah, how am I making this game, basically?
But all the kind of longer progression of the game, let's say, and all the stuff like UI, economy, and all that, that was later.
Okay, thank you.
Yeah, no worries. Do we have one more question I think we have?
Yeah.
Yeah, you had mentioned that you were going to spend three to six months on this project, and then potentially on another. What was your runway like?
What was the amount of time you were planning on spending?
Yeah, basically, yes, good question.
I think my runway was basically what I used.
So yeah, about a year and a half, like, because I was planning to try to make a few small games, but yeah, it ended up being one game and then it ended up taking longer than that.
But fortunately, signing the publishing deal that, you know, allowed me to keep going.
Cool, thank you.
Yeah, so I think the idea is definitely plan for maximum runway.
If you're anything like me, you're gonna end up spending way longer than you think.
All right, thanks guys.
I think that's all the time for questions.
