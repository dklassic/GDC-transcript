Hello! Happy day four of GDC Showcase! I'm Gamma Sutra News Editor and Associate Publisher, Lizza Macklin, and I'll be moderating today's AMA and fielding all your wonderful questions with Yacht Club Games' David D'Angelo. We'll be taking your questions on game development throughout the chat, so be sure to use the questions tab in your chat box on the right side of your screen to submit those, and thumbs up other questions from other folks in chat that you'd like to see answered.
With that, that's as much as I hope to talk here. We're just going to get some questions, get some expert answers. So let's hand things over to today's AMA guest, David D'Angelo.
Hello, David, can you introduce yourself and tell everybody what you do?
Hey, I'm David. I'm a programmer at Yacht Club Games.
I've been here since the beginning, and I've worked on games like Shovel Knight and everything in the series.
Before that, I worked on other games, but that's the cool Yacht Club stuff.
So, Shovel Knight, Specter of Torment, King of Cards, Clique of Shadows, Showdown, and more to come.
And we just published Cyber Shadow. That's the latest.
Awesome, awesome. I'm going to kick off with one small question of myself here, and then I will start reading and chat while you're answering that, and we'll get some chat questions going here. Can you talk a little bit about just how Yacht Club makes these very distinctly retro-inspired games, and even Cyber Shadow, which you published, has that same kind of vibe to it. What, as a developer, and I guess now a publishing company, attracts you guys to that genre?
I mean, I think what, you know, one of our goals as a company was sort of make games that make people love games. And when we were, like, I guess what we were interested in these old games is essentially like there's a lot of, there's a lot of cool ideas and gameplay, like design and just.
The way the games were made back then, that's like interesting and we thought they should still like they shouldn't go by the wayside by any means.
There's like lots of things to love there and we wanted to show people why you should love them. So, you know, with Shovel Knight, we were the We were trying to sort of say like here's like these are like really cool things that people aren't doing anymore that like we want you to love and we want you know hopefully by the end of the time well when you finish Shovel Knight you like go back in your NES collection or you're like you say to your 9 year old you've got to play this old Mario game or you like you can sort of see you can like break into those games easier than you could now because they're sort of hard to right um then Cyber Shadow is like very much the same thing it's like just a different style of a kind of old game that we there's ideas in there that we liked and that we thought we could like bring out and sort of show like why this you know why this thing's still valuable and why you should love it and why you should love these kind of games.
So part of that, and segueing here to a question from Dan in chat, is this really tight kind of like platforming that's very indicative of the games of that period, and then you have great platforming and tough platforming in Shovel Knight too.
Dan wants to know, creating good movement in a platformer is essential to creating a nice player experience.
How did you guys approach perfecting this?
For us, it's a lot more about...
Like the structure of making something like that. I guess that's how we think about designing things in general. We don't like go into something and say like find the fun or like you know willy nilly around with the joystick until it feels just right. I guess a game feels just right to us if it's built to feel just right. Like a building feels just right to be in because they thought Well, a person is, you know, on average, no taller than like nine feet, right?
You know, that's like what you'll feel comfortable going in the door doing.
So like, that's how we generally design our player movement to feel like we had, you know, we had the basic idea that we wanted this like one-two punch with Shovel Knight.
That's like, you flip something over and then you down throw since underside.
And then we said, Okay, we're going to make an NES game of this resolution. So that structure means you're going to have like this many tiles on the screen and if you can down thrust, you can jump like we want you to be able to jump five tiles because that would like you know that gives you this amount of space you can cover and then if you can down thrust something you can cover this much much more tiles.
And that total will be like nine tiles, and you'll feel like you got to like 80% of the top of the screen and that'll feel really satisfying. And like, and because we've like done this all built it all out with metrics, you know when you jump you cover like one third of the screen or something.
And then we sort of we like we put all these numbers in stone, and then we know what the level we're building is going to be like dependent on those numbers, and it will feel fun.
Because we built everything, you know, so your head doesn't hit the door when you're walking through.
Yeah, the math of fun. Yeah.
Yeah, that's, I mean, that's like, we really, we really like put an emphasis here on like, like, almost like it's like a math problem. Or, you know, we have like the high idea, but like that when you drill down to actually putting it in the game, that's like what it comes down to.
And there's like, I mean, there's obviously like variations in that like Shovel Knight has a very high gravity like fall to him because we said, Oh, he's a character that's like made out of armor.
So like, that's a reason why he should have, you know, he should fall a little heavier than other characters because it would feel like a little unnatural if he didn't.
There's like, there's little stuff like that, but it's mostly like we're, you know, we're trying to build it around those metrics because at the end of the day, we think like.
The level design in a game like Shovel Knight is what's going to sell it as being fun.
So it being built around how do we... we know we can make a fun level if he's designed this way.
And taking that same kind of formula, formulatic kind of approach to it, does that... the same kind of steps and considerations apply when you come back and make your DLC for Plague Knight that plays different and the levels are different, but the same kind of considerations and steps in making that?
Definitely, definitely. There's usually like a high level idea like Specter Knight, we wanted it to feel like it was easy to feel cool.
And we're like what what feels cool like like being a ninja like walking on walls feels cool and you know something we were thinking a lot about at the time was is like a context sensitive like button is like, oh, is a weird.
complicated thing in most games. Like you know you walk up to the thing and you're like waiting for the prompt to show up to be it's okay you can press the button now to pick up the item or whatever.
So like we we thought about like well we want to like try to make something with that problem and that's like where we came up with the dash slash and then like once we had those like concepts it's like well the wall climb should be like this high and the and the dash slash will like bring you this far and it should only do like two angles because if it did more angles it would be like too hard to design a lot of.
It's like a lot of the same like breaking it down like that.
Oh I just had one. You just kind of answered the question I was going to throw at you from Thomas in chat. He wants to know how is the process for you and the team creating such interesting signature moves for each character? But you kind of just talked about that there so that almost works. Yeah I mean it's really often like a lot of those things. It's like we look at the character we say like.
Yeah, or we design a character.
It's either you have the idea first, or you have a character, and you're making the idea out of the character.
But often, it's like we have a character, and there's something we want to tackle with it, like I said with Spectre.
We have a cool character, so it should feel really easy to be cool.
Let's see.
Scott here in chat would like to know, what role do design patterns play in your work?
Do you have any particular favorites?
I'm not sure exactly what is meant by design patterns.
Move on from that one then. I guess you wear many hats, but it's the programmer hat that fits the most comfortably, I suppose. Yeah.
How about a tools question then? What kind of software development processes do you use at Yacht Club? Agile with sprints, extreme programming, your own kind of thing? It seems like you have the whole team's input on many aspects of the game.
So they were curious, and that is from Joseph.
We use sprints, we do, we typically, I mean it can change over the course of the project but we do like an agile thing with two weeks sprints.
And it's, I mean it's very very loosely agile, I would say, but we are pretty like.
We're pretty adamant about like everyone if you're working on something you made a task and you like put in the bug base and you assigned a number of points to it and like I guess everyone feels I think everyone at the end of the day feels better if they know like this is the thing that's going to ship out of date and I know how long my tasks are taking and we can all sort of like track each other and know when there's like holes in the you know group dynamic or like you know someone doesn't have enough work or has too much work and that kind of stuff so.
How big is your team?
Right now we're, I think we're 24 people.
Okay.
The original Shovel Knight was 5.
Okay, geez, so quite a ways up there now.
With kind of that, and you had mentioned prior when I was interrogating you before we went live that you're kind of a studio that doesn't like titles so much, or a lot of you wear a lot of different hats.
How, with that kind of process you just described, how do you as a team make sure everyone knows what they should be doing, or?
has a clear understanding of where they are, where they need to be.
Well, we do a lot. We have a lot of meetings.
Yeah, like every, you know, every week or two weeks we'll have a big meeting where we go through like everything on the agile board and we say, you know, this is what progress of everything that's there here's oh here's what we need to do.
Oh, you don't have enough things right now.
You know, maybe, maybe the next sprint, we should like queue up this thing.
You know, But in general, we have a lot of like structure built in by the design, so it's like we know we're making, we're going to work on pride more keep the stage right we know we're going to make five enemies five objects because that's like what goes into a stage.
And like there's sort of like a pipeline and a turn around that.
Another question I was going to grab for Joseph is from Joseph, excuse me, as well.
Does Yacht Club Games use any third-party tools for debugging, organizing, tiling, etc.?
Or are they all developed in-house? Could you elaborate on the ones you use, if so?
Pretty much most stuff is in-house. We use Tiled for our level editor.
And we use Google Sheets for putting text in the game.
I'm trying to think if there's anything else.
Our collision system was Box2D, although that's not great.
And I would not recommend that to anyone.
And we've mostly stripped it out.
But I mean, I wouldn't recommend it for our kind of game.
Maybe for your kind of game, it's perfect.
Yeah, it was just kind of like quizzing you on all like, five years ago, what did you think about this?
It's an AMA. Let's see, Luke here wants to know if you have any advice for new developers who are jumping into a large code base for the first time or how to get caught up to speed with a project.
My advice for that kind of thing is always to start doing something. I would, I like, for me it's best, or at least personally I find it's easiest when you like pick something and you say I'm going to do this, and then like the path of Like that leading to you having to get that thing done probably involves you touching a bunch of stuff or like learning it all, as opposed to like I don't know if you just like scan all the files and read them it's like you probably get bored and confused and don't know what's going on.
Like setting a lot of breakpoints and just like stepping through the loop of like how things are getting run is an easy, obvious thing to do.
Yeah, sometimes like finding us if you like look play like say you had a game and you played it and you find a small bug and thinking like I'm going to fix that bug. Right. And just like trying to do that can just like go a long way.
I'm kind of in a similar vein here. Christopher says that their programming teacher once said that being a programmer isn't about knowing how to code something but more knowing how to find out how to make your code work.
What are some resources you use when you need to do some research on how to make your code work.
Uh, well, that's an interesting question. I don't really use many resources to get it to work.
Um, I guess I like really depend on like debuggers and uh like tools and like printing things and making debug tools and uh that kind of stuff. I like uh I you know I uh I like may I have no the ins and outs of all that kind of stuff. And that's not like how I if I can't figure out why something's break broken or whatever I'm like really reliant on that kind of stuff.
But if I'm like tackling if I was tackling a new problem that I didn't know how to do I would, I would just be.
So, you know, some kind of math problem or whatever I'd be like looking at old papers or like going through, you know, presentations or projects that people did in the past and just trying to gather as much information as I could, even if I like, I'm not going to do those things at all. Sometimes it's good to just have those things in your brain as like these are techniques people did in the past.
Next one here. Sorry, there's a lot of them coming in, and I can only read so fast.
When your company was first formed, how did you find key people, artists, programmers, and etc. to work on Shovel Knight? How were you able to fund them when you weren't making money before your Kickstarter took off?
Shovel Knight, the team basically came from another studio.
So it was the five of us, we all worked together.
And that's sort of why we left, because we wanted to keep working together and they wouldn't let us.
So we said we're going to start our own company instead and make a game.
And so, I mean, we started that in January and in March we launched the Kickstarter.
So people basically, it was like a few months of running off their own savings.
It's the kind of startup, the indie startup dream there is just kind of like we had savings and we didn't eat expensively for a couple of months before we took off.
The whole Shuffle Knight development, no one was eating.
Um, let's see here. What's your favorite Famicom slash NES game from Peter?
Uh, my favorite NES game is Mario 3, I think.
It's like, I don't know, it's like one of the best games ever made in my opinion.
It's just like a blast to jump in and do a little bit or it's a blast to spend eight hours trying to go through every level. There's just like a lot of brilliant ideas in there and it's, you know.
Is there anything you remember from there that kind of is kind of this inspiration core behind what you do now?
Um, you know, what I, what I think about that game the most is just like how much, how many ideas are crammed into every inch of the game. And I, uh, When I think about the biggest difference between games now and then, it's like now it's like an overworld. It's like a huge massive open world, right? And there's like a million miles of space, but there's nothing to do in that space. Or at least you have to walk a mile to get to anything.
I just like the How much like every single screen has like 30 things that are like exciting and new and different and you haven't seen them yet and it just it just is always blowing my mind when I play that game.
Um, oh gosh, no I checked on it I scrolled, uh, as a programmer from Misha here. What is your favorite and or least favorite part to code physics for example versus shooting mechanics or anything else kind of applicable for you.
Um, let's see. I guess my my least favorite thing is, uh, I don't know, like plumbing stuff? I don't know how to describe it.
I guess some stuff feels like grunt work in a way that's like, well, we like, I don't know, it's like, well, we got to like port this function over to like 50 things or we got to like, I'm going to go ahead and get this.
I like the more foundational work that you have to do before you can do the fun stuff.
It's like I got to write a vector class or whatever.
That kind of, it's like the stuff that's like, or stuff that people have done like a million times and now I'm doing it.
And it's like, well, I don't really have anything to add or there's no nothing exciting or fun about this.
Um, oh my gosh. Sorry, I'm so sorry. So many questions. Answered that one here. Ah, let's see.
Do you see design-wise as an advantage to 8-bit constraints that can't just be inherently produced on contemporary platforms?
You kind of talked about this earlier with how, like why you were drawn to the kind of like 8-bit, 16-bit area.
But I guess how do those constraints that come with that era of game, how do those inform your guys' development process?
And that is from Peter in chat.
Yeah, I mean I think there's like a few things that constraints are really good for.
One is like a big thing about those games was like they couldn't do that much so they had to rely on your imagination a lot and that's like one of the core things we took. It's like Shovel Knight can be a cool guy or a cute guy or a girl or you know whatever you want.
Um, and but we're gonna like put like because of those restrictions like the Shovel Knight is like sort of forced into something where we have to rely on people's imagination to make it more exciting and because of that that sort of like inspires our ideas in general to be like it leaning in that direction like.
Well, how about we like don't answer all the questions you might have in the story or how about we, you know, we leave those open so you can like fill in the blanks for like what is meaningful in your life and that, you know, shoveling and shield might have relationship.
We don't say what that relationship is but like you could think as if you're an eight year old you like don't obviously have girlfriends or whatever you might be like that your sister, or that's your friend.
And that's like what is meaningful to you when.
You're reunited with shield at the end of the game. So there's like those kind of restrictions, then I think there's, there's other stuff that just like it helps us.
make a game faster and uh you know be there's like less options and we've like restricted our like the set like if you're building with legos you like have to build a certain way and you have to do certain things and you can get a lot of creativity out of legos you can make almost anything right um but like because of that uh i think it helps like you you just don't have like the sprawling of it could be anything in the world what do we do That applies behind the scenes too, like mechanically, and with the code base that you work with as well, the same kind of constraints come into play in a way.
Might have frozen here.
We'll be right back in one second. I think we have a frozen webcam issue.
So I guess this is a great time if you have any other questions to take your time typing them out.
Oh, are we back?
I'm back.
Cool.
All right.
I talked my way through it.
We're live.
Yeah, I heard that the it like it applies.
It doesn't we don't like our code base is very modern.
I guess that doesn't apply in that respect.
But you know the way we're the anything we're thinking about putting in the game is like we think with those intentions in mind like we can't.
We don't have blood in our game, but imagine we did, and a guy died and you couldn't spew blood, right?
Because it's like, we can't just splay 50 particles, that would be weird all of a sudden. So there's like that kind of thing.
I think there's like the game Noida, I think it's called, where they have like, it's yeah, every pixel simulated.
It's insane.
It's wild.
So I guess kind of building off of that, was that a deliberate choice when you guys went into Shovel Knight?
Because you hear there's a very great Gamma Future blog, I can't remember the name of now, but someone talked about how in 2020, they went and they made a game, an NES game that could run on an NES.
They used all the kind of restrictions that you would expect in that era.
Did you guys ever think about doing something like that when you made this?
Or did you always kind of want to have, here's what this kind of game could be in a modern development setting?
We always wanted it to be what the modern thing would be. We wanted it to be like, I guess, an old NES game is hard to get into. Like, it doesn't even fill the whole screen on your TV anymore, right?
So we thought, like, our intention was like, we want it to be like the bridge between those games. We want you to be like, you feel very comfortable with this game because it feels modern in every respect.
But it has, you know. But you can also see why it is a retro thing and why you would, once you play that, maybe you are more comfortable trying that kind of food kind of thing.
A good starter platformer.
Yeah, yeah.
Uh let's see uh oh here's one uh from Catherine uh who's been a frequent question asker throughout GDC showcase so far so thank you Catherine.
Um what is it like to see your characters show up in a massive property like Smash?
Did you have any creative involvement in Shovel Knight's representation there?
I mean, it's like, it's unbelievable.
It's very, it's, I mean, I played millions of hours of Smash in my life, and to see Shovel Knight appear in that is like, it's just so humbling and also extremely bizarre.
It's just lovely.
And yeah, we...
We were, I mean, we were involved in, like, making sure the character was, like, correct, right?
And that kind of thing. But beyond that, it was, I mean, it's all Nintendo being brilliant.
Let's see, Kickstarter, I think I asked that one already.
Reading out loud is very exciting content for me.
Let's see, oh here's one from Stephen in chat wants to know what is the most challenging chapter of Shovel Knight's development for you. Is there anything that stands out that you can remember and kind of share with the audience today.
You know, I think the hardest part was like.
actually after we released and it was like oh now we like we like intended this was a real company but now we like have to actually be one.
uh and like we're we gotta like finish this kickstarter stuff and we have to like sustain our lives forever and figure out you know we have to like learn how to hire people and just the just the like learning like i don't know we we had all gotten into video games to make games not to like run a company or uh or none of us had any knowledge about like what You know, oh, we have to like file taxes now for the company?
Jesus, like, this is so stupid.
Yeah, that kind of stuff.
And just like how overwhelming it was to be like.
I, we have, we've like made a thing that like, it's not just ours anymore.
Right.
Um, and I, we, we came from, uh, working on making games on contract essentially where, you know, a publisher would hire the studio to make.
A game.
And once we released, once we finished the development on the game, it might not even come out for a year.
And when it came out, it would be like, we had nothing to do with it, you know, and so we like being involved in a game like forever is such a weird, weird thing for us to wrap our heads around as a collective.
In that kind of like difficult transition from just a bunch of people making games to a company, do you think you're through that yet?
Do you still kind of feel at times like, oh my gosh, what are we doing?
I mean, I always feel like what are we doing?
I mean, I think everyone feels like that.
That's like part of life.
But yeah, I mean, I think there's like some, you know, obviously we figured out more things than we'd had figured out previously.
But I mean, even like I mean, earlier this year, we hired.
You know, we were like 16 people or something and we hired up to 24 and we're like, okay, let's write like what the pillars of the company are, because we like didn't have those before.
Because we hired so slowly over time, we like didn't need to do that.
And now we hired like eight people at once and they're like, what is this company?
Right?
And we're like, oh, well, we probably should like tell people what it is.
I guess kind of just talking about like the hiring process, because there are a bunch of, we've had a lot of questions from students in past chats and just people who are kind of new into the industry.
When you're hiring someone, bringing someone on the team, what do you look for and what do you kind of recommend people looking to get their foot in the door should do to get their foot in the door?
Um well if you've like never done anything before ever it's like it's hard to want to hire you I mean it's like a classic problem I know I mean I know I felt this when I was in school it's like how do you get a job when you've like never had a job because they're like looking for job experience so I would say like the things you should do are make it look like you've done something uh and are interested in what you're doing so it's like I don't know if you're going to get a job at to be a level designer you should show like a thousand Mario Maker levels you've made Or if you're going to get a job as a programmer, you should have code you're proud of to show.
Or you should be like, here's a little tiny game I made, even if it's embarrassing.
It's like, I recreated Snake in Flash or whatever, and I coded it all myself.
That shows that you could start and finish something.
And it's like, maybe you could add your own creative idea to like one dumb thing to it. And it's like, then it's yours and someone can point and say, well, they like, you know, they like this kind of thing and they're like, interested and invested in doing it.
So I think that's like important and I would say like, it should be clear that you like.
are interested in the place you're applying to. So like do your research when you go in and like show you know like look up the people that work there or like You know, like play some of their games or like really get into it because like that's that's what they're going to care about.
It's not like you, you will be part of the team and you'll fit in and you'll have ideas that like makes sense, and you'll be able to contribute in like a meaningful way even if you like suck right now.
Is that an adventure time quote or is like sucking in something the first step to being great at it?
Yeah, that's right.
All about the journey.
Let's see, I think I can get one more question in here. I'm just scrolling through.
A bunch of people are curious about developing for the Wii U. Do you have any meaningful tidbits on that?
Don't do it. There's no reason to right now.
I don't know. It was, I mean, it's like one of the...
It's a weird, it was a weird platform to develop for.
Very quirky, right? Like did you guys have touch screen integration in what you were doing?
Yeah, yeah.
How was that?
Between the screens, yeah. I think it was, you just pick the, you could like pick your gear, like what relic you had equipped and stuff quickly from that.
And yeah, it's, and we had Miiverse support too, which is a whole fun.
Alright Team Miiverse, we miss you.
Yeah.
Let's see, let's close off here with one from Kwan in chat who wants to know, how is creating a game that has influenced modern 2D platformers make you or kind of change your approach to new projects?
Oh wow, well that's great to think that we could have affected anyone.
I don't believe it, I'm not on board.
I guess it really, it really I don't feel like it has affected how we're what we're developing next.
We sort of, you know, I think we said, you know, we said we wanted to make games that like make you love games and that's still are still what we're doing I guess the idea that it like it worked was like okay we'll keep doing it.
So that's sort of like where we're going it's like we want to do the same thing.
But we're going to do it a different way we're going to like pull from different things that.
You know, we think are being lost or forgotten, or people say are bad and we think they're like there could be a good version of it.
Like that's still what we're trying to do.
Sounds like a freeing way to move forward is just to kind of be like now we're gonna do it and got us here in the first place and just go with our gut.
Yeah, yeah.
It's going to come out it's going to be fairly different I think, but you'll like.
Yeah, I think it'll be easy to see like, oh, this is like, obviously this makes sense for them.
Awesome. Well, looking forward to hearing that with some proper nouns in the future.
With that, we are completely out of time, but a few seconds over here. David, thank you so much for joining us for this chat. Chat, thank you so much for your questions. David, if they wanted to bother you about anything else, curiosities, where should they reach out to you at?
I've got a Twitter at dandyycg, you can ping me there.
Or you can email Jakob Games anytime.
Awesome.
Thank you so much for joining us and everyone else have a wonderful rest of your GDC showcase.
Bye.
All right.
