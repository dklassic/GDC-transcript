We're going to be talking about exploring the tech and design of Noita, and because the game is not out yet, I'm just going to show you a trailer, and hopefully it'll explain a little bit about the game.
We had some trouble getting the audio working, so it's not...
again.
This is a curse of mine.
No, we have audio! Oh my god!
So, thank you.
This is essentially us.
There's three of us and then this is our audio department here.
So the talk is going to be divided into two parts.
And the first part we're going to talk about the tech stuff and then it's going to be the design stuff.
And I'm just going to say right now that the design part is there's not probably going to be enough time to go into too much detail about it.
So it's going to be a bit more rambly.
All right.
For the tech, so we have a custom engine that's called Falling Everything, and you can kind of see from the trailer, we can do sand, and we can do liquids of all kinds, and then we can do gases as well.
And for the blasting, we also have rigid bodies in there.
And essentially I'm going to talk to you how we've sort of done all of that and how that is sort of being accomplished.
And we're going to start at the basics by traveling back into a much better time period into the 90s when you could type into a text editor and characters would appear immediately.
So back in the 90s I got started in Quick Basic and I discovered in Quick Basic that you can do this thing where you can put a pixel onto the screen.
by Pset, and you can ask for a color of a pixel by point.
So you point at something, and you ask what the color of that is.
And with this amazing technology, I was able to essentially write a sand simulation.
So what's happening here is it's testing that if there is a sand pixel here, it's looking at the line below it.
If that's empty, then move down.
And then if that's occupied, it looks to the left and to the right, to the down left and to the right, and it moves in that direction.
And with that, you essentially get this, which is a rudimentary sand simulation.
And this is like 95% of our tech is this.
Then I really quickly discovered that you can also do water, and it's essentially the same algorithm, but at the very end of that, you also check to the left and to the right, and if they're empty, you move in that direction.
So with that, all of it sort of settles down, and now you've got water and sand, and then the gases are just like inverse of this.
So it's not that complicated.
Now you all know if you've been wondering.
But we're travel forward in time, about 12 years, and I'm using Visual C++ 6.0, and I do not know how good my life is.
And I ended up making this game called Bloody Zombies, and this was made in 2008.
And it was made for Gamma 256, and it was a competition where you had to make a game that used the resolution 256 times 256 or lower.
So...
While I was working on this, this is essentially using the same algorithm as in the Quick Basic one.
But what I discovered is you can also, like, make it a bit more liquid-like.
I'll show you more GIFs.
So you can make it more liquid-like by adding another sort of simulation, which is like this particle simulation.
And so the thing that's happening in this, like when the player jumps into the blood and it splatters all around, what's happening is it's taking one of those pixels out of that falling sand simulation.
And it's putting it into a separate particle simulation, and it's tracking its velocity and gravity in there.
And it's traveling in that until it hits another pixel in the world, and then it gets put back into the falling sand simulation.
So with this, you can make things a lot more liquid-like and not just like this blobby thing that's falling down.
And we're using this technique still to this day in Noita.
So after I was done with Bloody Zombies, which was kind of like a quick game, I made Crayon Physics and then after that I was interested in like, can I add rigid bodies to this simulation?
And I was using Visual Studio C++ 2008.
And it turns out you can add rigid bodies to this.
But it's a bit more complicated.
And essentially the way this works is I'm using Box2D for the Rigidbody stuff.
And it's sort of like integrated with this falling sand simulation.
So the way it works is you have all the pixels that belong to a Rigidbody.
They know their material and they know they want to be one sort of rigid body.
And what you do with all those pixels is you apply a marching square algorithm to it.
And that marching square algorithm essentially produces this outline of where all the pixels are.
And that's a lot of vertices.
So what you do then is you give it a douglas-pecker algorithm.
And that's essentially to smooth that out.
So you get a lot less vertices.
And once you have the smoothed out mesh, you give it into a triangulation algorithm, and you get a bunch of triangles.
And at this point, you're at a stage where you can just give those triangles into Box2D, and Box2D can sort of simulate those bodies.
And the sort of final step to this is that every pixel that's here, it knows its UV coordinates inside of that triangle, and it knows which body it belongs to.
So that's the way it can kind of like figure out its new position.
And the way you put these two simulations together, so you have two different simulations at this stage.
So the way you put them together is, at the very beginning of the frame, you take your rigid body pixels out of the world.
Then you run your falling sand simulation one step and you run your box 2D one step and then you put your rigid body pixels back into the world and they get their updated positions from box 2D.
And there might be this case where there is a pixel now in the way of a rigid body.
And what you do in that case, you just take that pixel out and you put it into that bloody zombie's particle system and you throw it into the air.
So what ends up happening with that is you get these splashes.
Like, oh, that's not a good example.
Let me give you a better example here.
So when this body hits the water, all those water pixels get thrown into the world.
So that's pretty much it.
We had to do a bit more to it.
One thing is if one of these pixels gets destroyed, you have to recalculate all of the marching squares and the box 2D body stuff and whatnot.
For the rest of the world, wherever there's static, I'm using static in air quotes because there's nothing really static in our game.
Static stuff, you just do the first two steps of that algorithm.
So you do marching squares and Douglas Pecker and then you just make these hollow bodies of the world.
And you only have to do that in places where there are rigid bodies or places where there are going to be rigid bodies.
And that saves you a lot of...
So that's pretty much the tech.
There is one more step to it.
And this is...
Well, there's two more steps to it.
So we're getting to Visual Studio 2013.
And I have here a video of it taking eight minutes to boot up.
And I'm making all of you suffer through this.
Because I've had to suffer through it.
So sort of the last step of this process of making The Tech of Noita was that...
I had it running in this 256 times 256 area.
But it was really hard to make good gameplay in 256 times 256.
So the last step was figuring out how to make a really big world.
Where you can have everything simulated.
And the problem was that it was taking so much CPU time to test all the pixels that it was getting really complicated to do that.
The solution to this was to figure out how to multi-thread the sort of falling sand simulation.
And essentially, the way it's done is the sort of world is divided into these 64 times 64 chunks.
And each of those chunks keeps a dirty rack of things that it needs to update.
So you can see here the dirty rex that are getting updated.
And what this alone, like even if you don't multithread this, what this alone does is it removes so many of the pixels that you have to test.
Because very often, the world ends up in some sort of semi-stable state.
So then you don't have to update that much stuff.
But you can also multithread this pretty easily.
And the problem with multi-threading a simulation like this is because it's using the same buffer, so there's not like two buffers.
You have to make sure that another thread is not updating the same pixel as you're updating.
If there's like two threads trying to update the same pixel, all hell breaks loose and everything is destroyed.
So, the way to do this is you, or the way we did it is we update the world in this sort of a checker pattern fashion.
So, at the, we do four update rounds of the world.
So, at the very beginning you gather all the things that have to be updated and then you pick, like in this case we're picking these white ones here.
What it allows things to do is this guarantees that any pixel that's getting updated in this can go 32 pixels in any direction and it's guaranteed that another thread won't update it.
So like you can see here this green area are all the pixels where it can kind of like travel to.
And so the multi-threading is essentially like you take sort of every four.
chunk and you throw them into a thread pool, then you wait for all of those to be calculated, then you do the next set of four, 64, 64 areas, you throw those into a thread pool, you wait until they're done, you do it once more, and then you do it once more.
And then you've essentially managed to multitread the simulation and get a lot more out of your CPUs.
The real final bit, because we have sort of a continuous big world, is probably the most standard technique of this, which is essentially just streaming.
So in this, this yellow rectangle bit here represents the screen, and all of these other It's 512, 512 areas of the world.
So as you sort of travel around in the world, the procedural generation system is generating new worlds as you're going.
And we try to keep 12 of these in there at the same time.
And then we just like take the furthest one and we write it to the disk.
And then you read it back if you ever go there.
And all of this sort of creates this very nice feeling that the whole world is being simulated all the time, even though we're kind of cleverly figuring out what needs to be updated.
So, that was the tech.
And now we're off into the design.
I just want to say that the tech part is, for us, or for me, it's been the sort of easier thing to work on.
And it's the game design that has been the more complicated and difficult.
And the reason for that is that for the tech stuff, you can ask these falsifiable questions.
Like you can ask, does this look like water?
Is it running at 60 frames a second?
Yes, it's kind of done.
But when you come to game design, you have all these questions like, is this game fun?
And it's like, well, depends who's asking the question, who's answering.
I enjoy kicking ragdolls around for eight hours a day.
But I don't know if anyone else is going to enjoy that.
So for us, the real question is, hopefully, the tech was kind of cool and impressive.
But does it produce interesting gameplay?
And the answer to that is, I mean, the game's not out so we don't quite know, but the answer to this is very complicated.
So the naive answer to this question, does it produce interesting gameplay, and this is the position I had when I sort of started this, is that, of course, this is going to produce all this interesting gameplay.
It's going to work as like this perpetual motion machine of emerging gameplay.
And I was kind of right.
This physics engine works in that way, that there's a lot of emergent stuff that happens.
But what I did not realize is that emergent gameplay comes in two colors.
You've got the cool and interesting thing that everyone is always hyped about and you think when you hear the words emergent gameplay.
But it also comes in this game-breaking fashion.
That can just completely devastate your game.
So this is an early prototype I did, and the idea is that you have this 2D building.
And what I didn't realize is if you simulate all of that, it's going to end up as this pile of rubble at the bottom of the screen.
And this is kind of cool in a way, but how are you going to build a game out of this when all your level design is going to end up as rubble?
And you can imagine building a game on top of a system like this.
It's going to be a nightmare.
So really, the process of making Noita has really been a process of trial and error, and a process of trying to tame this emergent chaos beast that is our physics engine, and to find a game that's sort of like...
Maximises the good emergent stuff while sort of minimising the bad ones.
And the way we've approached this is testing a lot of things.
So we've tested a bunch of different games, we've tested a lot of different things.
And it's because it's so hard to know, like, if you put something in there, is it the coolest thing or the thing that's going to break the game.
So besides testing a bunch of different games, what's ended up happening often is we've made changes.
And then we've sort of ended at a sort of local maxima.
So a local maxima is sort of a place where the game was kind of fun.
But we felt that there could be something much better out there.
And we didn't know what we should be doing to get there.
So as an example of that sort of a thing, This is an earlier version of the game.
The player had this tool where they could like dick through everything.
This drill.
And it was kind of fun.
You would get this at the very beginning of the game.
And it was kind of fun and interesting to go around the world using this tool.
But the problem with it...
was that it essentially broke all the combat gameplay.
Because what you would do is you'd drill this hole into a wall and you'd shoot all the enemies through that tiny hole.
And then it was kind of fun but it was also kind of like breaking the whole combat gameplay.
So what we ended up doing at some point was just like taking the drill out completely.
And what ended up happening there for a while was that the game got a lot worse.
Because like the whole procedural generation system was built with that in mind that you would go through everything.
And it was kind of worse for a while until we actually fixed everything and then we were actually at a better position than we started.
And sort of besides being stuck at these sort of local maximas, which happens very often, we few times sort of managed to push the game forward in a big splash into something better.
And one of those things was when we decided to sort of make it roguelite, which means it's a permadeath game with procedural generation.
What really happened when we sort of made it Roguelite was that we managed to sort of shift this sort of, like we have this emergent chaos beast that is our physics engine.
We're sort of shifting, dealing with it first A, to the player, and then B, to the sort of random nature of the game.
So like because the world's out there to kill you, you as a player have to pay attention to it, and sort of B, because of the random nature of the game.
We got to put back some stuff.
So for example, the drill that I mentioned earlier that broke our previous game that wasn't Rougelike, it has made its comeback in Noita.
And because the game is random, you as a player, you can't build all your strategies around just finding this one tool and beating the game with it, because it's not that good.
It can sort of go back into the game and be there.
And it's actually kind of fun as a player, like now, as a player, like finding this drill and then figuring out how to use it, and then figuring out that you can kind of break a bit of the combat if you use that.
That's like an exciting thing.
Like, you think you're really clever and you found something that the designers don't know, and it's kind of like an exciting moment.
But we've gotten away with a lot of that stuff because of the random nature.
Another thing making it permadeath really fixed for us is you essentially get a new world every time you play.
So previously it used to be...
It used to be sort of a similar game, but it would be like in Terraria, that when you died, your stuff would remain in the world and you could go pick that up.
But the problem with that was because we have such a highly dynamic world, you as a player, you could like, let's say you have to get into this portal and you fill out this place with lava and it's a persistent world, then you sort of essentially screw to yourself.
You can't ever make it there anymore.
But because we have a permadeath game, we don't really care about that that much.
So if you as a player are dumb enough to block your progress in the game, that's on you.
Get a new chance when you die, and hopefully you'll die very quickly.
Or very likely you're going to.
So I'm going to talk about a few more things, hopefully.
We have time.
So this is probably the thing that's most obvious to people, is when we made it a roguelite, we managed to make it a challenging game.
And the benefit of that for us is, in a moment, the benefit of that for us is you as a player, you really have to pay attention to the world and to the physics and how it works.
physics are there to kill you.
And a related note to this was one of the prototypes we did, you played as sort of a God-like entity and you could like spam lightning everywhere and kill everyone.
And it was really fun for about 20 minutes, like being this super powerful entity.
But the problem with this was that you wouldn't essentially pay that much attention to the physics of the world.
Like the physics simulation turned into sort of a visual effect for you instead of being a thing that you had to pay attention to.
But now making this a rogue-lite has sort of allowed us to have our cake and eat it too.
So at the very beginning of the game, you sort of, as a player, have to pay a lot of attention to the world, but if you make it far enough there, you can become, like, super powerful and you can just, like, destroy everything in this one.
And the reason we did not, like, figure out that we should make this rogue-lite impermanent game at the very beginning...
I think we had a very good reason for that.
And the idea behind that was that it's going to be super annoying playing this game and you're going to get killed because of a physics glitch or some sort of physics thing that's going to kill you and you don't understand what's happening.
And sort of our fix to that has been to try and fix as many of the glitches as possible.
or make it so that if there's a glitch that we haven't figured out how to fix, that it's not going to kill you.
So, like, right now the rigid bodies don't damage the player, but they damage the enemies in there.
And the reason for that is we haven't, like, figured out that maybe sometimes the rigid bodies can get...
It's kind of like wobbly in a place and there's going to be huge forces that would kill the player immediately.
So we're just like, let's just disable that.
That seems to work decently.
It'll probably make its comeback later on.
But the other part of that, which I have realized during this process, is that it's really about communication to the player.
So if the player dies because of something, like there's lava that drops out of nowhere, they're going to be super, they might be super pissed at the game if they think that's like a glitch or some random thing.
But if the player notices that there's like a wooden plank here and there's lava on top of that and they walk underneath there and then the wooden plank sets on fire and the lava drops on them.
Then if the player sees that, they're going to blame themselves for it.
They're going to be like, oh, I wasn't careful enough.
And really the difference between someone hating your permadeath game and sort of blaming themselves for it really is almost I think communication of these emerging systems.
And if you look at some classic games, like if you look at NetHack.
NetHack is actually really good at communicating what's happening in there.
Like it stops, the game stops and there's a line on top of the screen that says, that actually says what's happening in the world.
And there's a funny thing like when you add this sort of communication thing there that happens is you as a player sort of attribute more to the emergent system than actually might even be in there.
So.
We had a sort of a thing where you would get stained by the liquids that you walk through.
So, for example, if you got covered in blood, you'd be red and whatnot.
And it was purely visual at some point.
And then we added, like, let's make it so that if you're covered in oil, you're more likely to ignite.
And that was kind of confusing to people.
Like, they didn't realize, okay, they're going to get...
So the last thing we just did was we added these UI icons on top of you as a player that indicate which liquid you're covered in.
So the blue one here indicates you're wet.
And as soon as that went in, it went from being like this obscure thing that no one got into a thing where people started attributing things to this.
So like they said, oh, I'm wet now, so I would probably take more damage from being electrocuted.
And that wasn't implemented in there, but everyone sort of assumed that that's the case.
And to demonstrate, like, as an anecdote, how powerful this thing was, we had, like, when you're wet, now I think you take more damage from being electrocuted, but when you're wet you're not as easily, you don't ignite as easily, and that was actually implemented in there.
And then we broke it at some point, and for like two months it was not working, but we all sort of assumed that it's working there and we're just like avoiding it because it's like it's communicating this thing.
And I think some games like Dwarf Fortress and The Sims, for example, managed to rise above to a certain level where players actually attribute more to the emergent systems that actually are in there.
Okay, that's about all the things that I have.
I think we have a few minutes for questions.
We have one question or two?
Two minutes. Okay, thank you.
Hello.
Hey.
I'm curious, you mentioned that the simulation was single buffered, everything happened in the same buffer.
Yes.
Is there a reason or did you try double buffering?
Well, originally it was just that's the way it got going.
But later on I realized like you can't, like if you do a double buffer then you have to actually update everything.
Right, unless you sort of double buffer every chunk separately, but then you have to sort of maintain two different buffers.
And I don't think there's different kinds of simulations that you can do if you do double buffer.
Falling sand stuff is much more harder, I think, because then you have to figure out where does this pixel have to go, because right now pixels can only occupy one place.
Cool, thanks.
Thank you.
Great talk, thank you.
I wanted to ask about the procedural level generation, like how did you get that part going for you?
Okay.
As with...
So...
I forgot to mention that we've been working on this game for like seven, six years now.
So we've tried a lot of things.
And for procedural generation, we've tried a few different things.
And there are a few different things in the game right now, but the main part of it is using Sean Barrett's Herringbone Wang tileset.
So essentially...
What it is, if everyone here knows how Spelunky does procedural generation.
Spelunky does four times four squares and those squares can be connected with certain rules.
The herringbone wang tileset is essentially...
Do we have anything?
I'll demonstrate it with these things.
So it's like...
This is the problem, you don't see the seam as easily.
There's not a seam that goes throughout the whole world where you see like, oh, this is the part where we are on this grid and this is the part where we are on this grid.
Do we have, are we done?
Okay, if there are more questions, I think there's some sort of a place out there and I can, and hopefully answer those.
Thank you so much for everyone.
