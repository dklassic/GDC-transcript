Hello. How's everyone doing? It's Friday. Last day of GDC. I know. I should say goodbye to everyone today. Say goodbye to your friends. We'll see each other again next year. Thanks for coming to this super nerdy talk about mobile control schemes. You're all super nerds for being here, and I love you all, so thank you for coming. I'm Kayla. I'm a game director at Roadhouse Interactive. We are a studio up in Vancouver, Canada. We make mobile games.
We were founded in 2009, and we have just over 100 really fancy, talented individuals working on a whole bunch of games.
One of those games, and the one we're going to talk about today, is called Warhammer 40K Carnage.
It is an action RPG side-scrolling platformer. I'll try to say that ten times fast.
And it was released on mobile and tablet devices around May last year.
We worked with our good friends at Games Workshop on this game, and it was pretty cool.
Like the title must...
I've said it's a platforming game, and so this talk is about the controls for that.
Really, back in the day, it used to be so easy.
We had these controllers that we could develop for, and they were a known good.
As developers, all we could really do was figure out what buttons would do when you pressed them in the game.
We focused on the gameplay actions, and just mapped them to different buttons on the controller.
We didn't have to think about what that controller layout was like, or anything like that.
We had to work within that constraint.
And thankfully the developers were thinking about us, and with different console generations, had more and more innovation, more buttons, more innovation.
I actually took this screenshot of the Jaguar that's downstairs in the North Hall.
It's really fantastic.
So you know, luck was good.
More buttons, we just kind of mapped stuff to that.
And then this happened.
We had a wonderful Apple demonstration showing the new future of devices with no buttons whatsoever.
So now we're in a world where the most popular gaming devices have no buttons.
There's no pre-made controller hardware, and we now have to worry about things like grip, input schemes, and how all this impacts the visual representation of the game that we're making.
So, I'm gonna try to tell a story in this talk.
Our controller scheme really came out of the evolution of the game.
So we'll kind of break this into three parts.
Kind of a pre-pro stage.
The different stuff we did in the game to iterate on what the game was and how that affected the controls.
Then we're gonna focus on the game during the standard development cycle and all the different iterations we did during that period.
And then our kind of finaling mode on the game where...
You know, theoretically we would have just been, uh, uh, you know, polishing everything, but like all games, we had some fun new changes that happened at that point in time.
So let's have this great story.
So let's start at the beginning.
Back in 2012, autorunners were all the rage.
And so Temple Run was garnering some really incredible download numbers, and our pitch was, hey, let's take what these autorunners are doing, and let's put a 40k paint job on them.
We were super inspired by games like Shellraiser and The Girl on Fire, and we were really taking a look at what the autorunner scene was doing, and thinking, let's add some controls, let's put a 40k franchise on there, and...
should be great.
So it was gonna be a auto-running lane-based side-scroller with elements of ranged and melee combat.
And so the controller scheme that we really thought about for that was this.
We would hold the device with both hands, a thumb down on the left would do a melee attack, and a thumb down on the right would do a ranged attack, and you could swipe up with either thumb to do a lane change between different platforming segments.
So yeah, it was an auto-runner, so we didn't have to worry about controls for starting and stopping running.
All the weapons would auto-target enemies, so we didn't have to worry about any of that.
So yeah, this was good. It was a nice, simple control scheme.
We built a prototype and iterated on it for a few months, and all was great.
But really, we weren't feeling it.
So, we took some time away from the project, and when we returned, we really looked critically at what we had.
We realized we didn't really like it.
We didn't like the movement, we didn't like the combat.
It just wasn't feeling fun for us.
So we looked into our hearts and we said, you know what, we don't really want to make an autorunner.
We want to make some classic platformer game.
And so we went through a massive reboot process.
And these are some of the games that we were inspired by at that time.
So our next big iteration of our control scheme was what I consider our gesture controls.
And so at this point, our control scheme was being driven by a massive increase in what kind of new features we're going to need to have a platformer control.
So we now have a discrete run button, so the player can actually hold down their left thumb in order to run forward or release it to stop.
There is no left-right movement at all, it's just run or not run.
We have swipe up to jump.
We have swipe down to aerial attack if you're in the middle of the air.
You have swipe back to parrying attack.
Swipe forward to melee attack.
And you can touch with your right thumb to range attack or hold and release to do a special attack, like a Mega Man's kind of a supercharged thing.
This was what we thought would be an awesome control scheme for this game.
And I actually still believe that we could have gotten some pretty good mileage off of this control scheme.
It was pretty complicated and pretty convoluted.
But I think there might be some merit here of what could be an interesting control scheme for platforms.
But really, we still weren't feeling it.
And although I would have loved to have iterated on this control for several more weeks, or months, or what have you, we had a public demo in about two weeks.
And so we just couldn't afford to spend any more time on a control scheme that had too much risk.
So we decided to just scrap it all and scramble for something that would be super easy, super low risk, and something we could just kind of deliver for that public demo in two weeks.
So we went to this. Super simple here. We removed a lot of the different moves and we just focused on four simple moves.
And that was hold down for run, press to jump, press to range attack, press to melee attack.
We did have the modal support for both the ranged and melee attacks right there, so that you could hold and release for super attacks.
Though I don't believe we actually had those moves for the prototype. It was planned at least at that point.
And so it was a really simple control scheme.
Although our assumption was that players would initially gravitate towards gesture controls as kind of a default when they picked up the game, what they would try to do, we felt that the controls for these buttons were pretty straightforward and it wouldn't take them very long to figure it out.
And that proved true.
So when we showed this control scheme at the public demo at Games Day, players would pick up the iPad...
and try to do some gesture controls to move the character around and the second that they found that that didn't work, they would immediately find the buttons and it was very quick for them to figure that out.
It was super effective, they loved the game, it had really good response from the players there and it was great. So, basically the positive feedback on this control scheme cemented this direction for us going forward and really killed any lingering priority for the gesture controls that we had previously.
Alright, so that's kind of our pre-pro area.
We're now in proper development right now.
We have a proven prototype. People like it.
We know what we're building.
Let's get into active development and let's kind of refine those controls a bit.
So one of the first things we really started thinking about was thumb sizes.
And we were super scientific about this.
I took an iPad around and I put the paper app on it, and I told people, draw me circles with your thumbs by holding the edges.
And through that exercise, I was able to get a whole bunch of...
markings on the iPad that showed a huge variety in sizes of thumbs.
It's actually quite amazing. These are all adult thumb sizes.
But you can see there's actually quite a huge difference in reach between a small thumb and a large thumb.
And so, when you're targeting on iPad, the actual reachable area that you have for controls on the edges is a lot smaller than what you might think it is.
Yeah, and so basically if you want to create a button control scheme on the edges right there, you have a very limited amount of space in order to allow people with small thumbs to not go through a lot of strain to get to those.
So we also used this thumb placement to figure out, you know, where would our camera be in the game?
And this was an interesting fight between input space, so basically having a good amount of space dedicated for input, but also having a good amount of screen composition for the game.
This was a constant battle.
It would have been nice to have the action a little bit higher on the screen, but that just kind of leads to a really bad visual composition.
And so we kind of set up with this kind of a structure right here, where this line denotes.
Below that would be where buttons are, and above that would be where the main action exists.
button placements again would be below that line and we would kind of hold in that lower position right there.
The other thing with this is that the jump button is the highest button on the right because generally if you are in an action segment your thumb is going to be lower which will allow for more visibility of enemies coming on screen.
And so that allows you to do melee and ranged combat against enemies.
when you see them right there, and if you're jumping, it's less likely to be with an enemy coming off of the edge of the screen.
The other thing about buttons on iPad layouts is you can't just put buttons wherever feels most comfortable for the player.
You actually also have to figure out, how do I put the buttons on a screen so that they actually are appealing in a visually good way?
Because, again, these are gonna be viewable things on your screen, you have to take into consideration the visual composition of the button layout when you're putting them down.
Alright, so we have buttons in the game, but buttons are a problem.
Buttons are a big, big problem.
And those big problems are what I like to call misclicks and thumb drift.
And so if you ever play a game on mobile and you're getting really into the game, at some point, and you're trying to press buttons, your thumb's just gonna miss a button.
And that happens because you're getting into the zone, you don't really know where that button is because you're totally entering a flow state, and one of two things is gonna happen.
Either you are going to attempt to press a button and something else will fire, so you think you're hitting shoot, but you jump.
or you think you're jumping over that pit, but you shoot by mistake and you die in the pit.
Or you're just gonna try to press a button, and you realize that your thumb isn't actually on any active hit area at that point.
This is hugely problematic, because the second that this happens, the player is immediately brought out of their flow state, and is now fighting with the controls of the game.
This is awful. It sucks.
We found that when people were playing our initial game, they would be hitting the run button, and very slowly, their thumbs would drag into wherever was most comfortable it was for them.
If you remember, I don't know if anybody grew up playing regular Nintendo, but when I first played it, I would always be jumping with Mario like that, and the thumb drift on iPads is like the moving the controller around kind of thing for me growing up with NES controllers.
So anyway, these are two big problems, and we need to kind of figure out how to fix that.
Again, real controllers don't have this problem.
They have these tactile buttons.
Your thumb is touching these buttons at all given times, and it's giving your brain all this back-end bandwidth of all this information that you need to know in order to ensure that you are always hitting the button correctly.
So if your thumb does drift off of a button, there's feedback there to tell your thumb to get back into place and reorient itself.
And all this happens without you having to consciously focus on it.
So really, if you just take this control scheme and put it on mobile, it's not going to work.
Because this control scheme, the sizes of these buttons, the layout of these buttons, are entirely dependent on having that tactile feedback and allowing for your thumb to know where they are at any given time.
So how do we solve for the lack of tactile feedback on a mobile control scheme?
And so the hypothesis that we came up with was maybe we can use muscle feedback from vastly different thumb positions to maybe offset the loss of tactile feedback.
So I want everybody to put their hands out, pretend that you're holding an iPad.
Everybody, come on, it's Friday morning.
and I want you to put into three different thumb positions.
Vertically extended, horizontally extended, and tucked.
And if you switch between those three, the thumb positions that you have right there and the kind of feedback you get from your thumb are very, very different.
And so you always know where your thumb is if you think that you have buttons down in those positions.
And so what we did was we created a control scheme that kind of utilized that.
And so on the right hand thumb, you can see jump is on your vertical extended, melee is on your horizontal extended, and your ranged attack is on your tucked position.
And what we did was we changed the angles of all those different controls on there to account for if your angle is a little bit off on each of those controls, it's going to account for that and it'll be good.
Jump has the largest hit area on the right hand side, because on a platformer game, if you miss jump, it is going to knock you out of the flow state a lot faster than if you just maybe miss one shot.
We also found that the vertical extended position is the most relaxed position for players, and so it's much easier for them to kind of get into that position, as opposed to the horizontal extended, which takes a little bit more muscle control to get down to.
Tucked is the most uncomfortable of positions, and so we try to use that when more sparingly.
So, on the left-hand side, we maintained run as just one big hit area.
So essentially, this has a very simplistic control scheme, so that as a player, you really only need to have thumb dexterity on one hand, and on your other hand, you can just focus on either my thumb is on the screen or it's not on the screen, and I'm either going to be moving forward or not moving forward.
The hit areas here extend out further than what the largest thumb area that we measured was, so that there's no chance of you putting your thumb down on the screen without it doing something, so you will never get into a situation where your thumb's on the screen and nothing is happening.
There will always be something happening.
And we have the buttons down on the screen.
The buttons don't really act like buttons, they act more like...
focus positions that tell your brain where to try to put your thumbs.
It's kind of an orientation thing so when you look at the screen you know what you're trying to hit but once you're actually in that flow state they don't really matter as much anymore and in fact we fade them down in alpha as the player is playing so they kind of get out of your way.
But they're mostly used to kind of reference where your thumbs are supposed to go.
When you're actually hitting the screen you're probably not hitting anywhere near those buttons.
You're hitting all around them and these large hit pads really account for that.
This became super effective.
What we ended up having was, if we had a bug in the game where these hitpads were disabled and only the buttons were working, people would be freaking out and coming to my desk being like, oh my god, our game is completely broken, I don't know why, it just doesn't feel good anymore.
But then the second that we re-enabled these hitpads, it worked really, really well.
And we found that when players were playing this, they were always able to hit the buttons that they felt like they were hitting, and they just felt super effective at all times.
So this was great.
But of course we aren't just shipping on iPad, we also have to ship on smaller devices.
And so what we ended up doing was splitting our devices into two categories.
Devices that are less than seven inches in size and devices that are larger.
And so the devices that are seven inches and larger would be our previous control scheme and these smaller devices using this smaller control scheme.
And essentially the way that I thought about this was...
if I can have both of my thumbs touch each other on a device, I'm going to have to use a different control scheme than if they can't touch each other.
And so we had to make some adjustments here because if we accounted for the same hit area, the actual thumb and buttons would be all over the screen and you wouldn't be able to see anything.
And so we had a kind of more squished layout that we came up for the iPhone.
Again, Melee is on the horizontally extended button.
Ranged is still mostly tucked.
And Jump...
It has a little bit more of an angled, vertically extended type thing.
It was still super effective.
It wasn't as effective as an iPad control.
There was still a little bit more chance of you misclicking between jump and melee.
But it was pretty good.
And it actually feels pretty solid on an iPhone.
So, we also can see the kind of line where we try to maintain buttons below it and action above it.
And this is what it looks like in gameplay, obviously, with the buttons super bright right there for this demo.
The buttons, again, fade out, so when you're actually in gameplay, you don't really notice them as much.
We keep gameplay above those buttons.
So that was pretty cool. That was working well.
Then we were getting into our finaling.
So we had a solid control scheme in place, and now we're ready for a nice, calm finaling period.
We're good, we're comfortable, we're happy.
It's gonna go fantastic.
Except it never does that in games.
So we were at alpha, and people were like, you know what, our gameplay just isn't robust enough.
We're just, we're gonna need more controls.
We're feeling like the game is just mindless hack and slash.
It's lacking in depth.
It doesn't have what we need in order to really have player engagement over a long period of time.
And really this complexity of controls was a really hotly debated topic throughout the entire project.
If you remember at the very beginning, we were really targeting this auto-runner, casual audience with this game.
And as we were moving through development, we were getting more and more complicated control schemes by adding buttons, and more moves, and all this kind of crazy stuff.
And so really we were trying to figure out, you know, who is our target audience?
What are we trying to get to? What kind of a game are we making?
And the controls were feedbacking into what that target audience would be.
So, in the end we added two new gameplay elements, and that was a defensive capability, basically a block, as well as adding full left-right controls.
The actual left-right controls were added in the last month of development.
They were added this time last year during GDC.
And it completely changed the feel of the game.
Instead of actually requiring dexterity in only one thumb, we were now moving to a situation where we required dexterity in two thumbs.
It was a much more complicated control scheme that players needed to work with.
So this changed our target market.
It moved us from a casual player to a more experienced gamer.
But we felt that it was worth that compromise.
So our final control scheme looked like this.
Again, all we did to accommodate the new block moves and the left moves was replicate what we felt was working really well on the right-hand side over to the left-hand side of the screen.
Right movement is, again, quite large.
Block is very large, so it's very easy to get up there.
Like I said before, the tucked command is the more difficult one.
Thankfully, our game is designed such that there's a lot less left movement than there is right movement, and so we were able to design around that.
And this was good.
The full left-right movement allowed for a lot of new gameplay elements.
We have arena combat, we have enemies that can roll, dodge, attack from behind.
We were able to create some better, interesting platforming segments with this new control scheme.
So that was good.
The last tweak we did before we actually shipped the game was to allow for sliding between hitpads.
So originally what we had was you had to release your thumb and then touch another pad in order to activate it.
One of the last things we did was allow the player to slide between them.
This was completely necessary for left-right movement, so the player can just kind of move their thumb between those two positions.
And it also worked really well for doing things like jump and shoot, allowing the player to shoot while in the middle of a jump command.
And that felt really good, so you can kind of slide your thumb between those three hitpads.
So, some closing thoughts here.
So this control scheme, it's been really successful.
It's allowed us to have six hitpads with full modal capability.
This allows us to do things like charge shots for all the different weapons.
It allows us to do Mario-style jumping, to allow different height variants with that.
It's very easy to learn.
Nobody that picks up the game has a hard time understanding the control scheme.
It's right there in front of them.
And it's really responsive and predictable.
Nobody ever says things like, when I'm hitting a button, I'm hitting the wrong button.
It always seems to work really well.
But we are continuing to refine and iterate on the control scheme.
I don't think this will ever be a done thing, but we're working on it.
And there's areas that we can improve on.
I'm still not happy with some thumb sizes have a hard time reaching some areas, and so we're looking at ways to customize the control scheme and customize the scale right there to allow people to fine-tune it a little bit more.
And we're also looking at ways to have better graphical feedback that better conveys the different hit areas as opposed to just using the buttons to convey that information.
Really this stuff is super hard.
You know, controls for mobile games, you don't have this predefined user experience to kind of work with.
You have to build all this yourself.
There is no physical input.
And when you're making a mobile game, you have to fight with grip, device size, screen real estate, all this crazy hard stuff.
What, you know, what we were doing here is we didn't try to apply this tactile overlay.
virtual d-pad type thing to the game, we knew this just wasn't going to work, but I feel like we've only really scratched the surface of what we can do with this.
You know, there's a lot of problems in our industry, and there's one big problem, and that is our huge reliance on past control schemes.
If you hand a controller to someone who's never played a game before, the learning curve on that is just super high.
And I think there's a lot of opportunities for us here, especially in the mobile space, to create game experiences that allow us to change the way that people play our game, change the way that they interact with our game.
You know, with this platform, for the first time, we as game developers can actually take back the control of controls.
Yeah.
And so here's my last inspiring end slide.
Let's, you know, let's try to move beyond this tap, tap, tap and virtual D-pad stuff that we're doing on mobile.
Let's try to innovate and create new ways for our gamers to play our mobile games.
And that's that.
audience applause Got lots of time for questions now.
Hey there. Did you guys try any A, B testing, like with alternate control schemes?
So the question was, did we try any A, B testing with alternate control schemes?
We didn't really have a lot of time to do a lot of user testing, so we had some small internal groups of varying people with varying skill sets.
And what we'd actually do at points where we had about three or four control schemes in the game that you could switch between in the options menu and have people play through all the different ones and give us feedback on that.
and that'll allow us to kind of fine-tune stuff near the end.
When we were doing that left-right control stuff, we had about four control schemes in the game at that point in time that we're toggling between and kind of getting some internal feedback at that point.
man 2 in audience Okay, thanks.
man 1 in audience Cool.
man 2 in audience So were you satisfied with the auto, making your game auto-run?
Or did you, how far did you get with the left-right stuff?
And have you, like, had more thoughts on how you would move forward if you tried to do another one?
Um, so we shipped with the left-right, so we, uh, we, so the question was, did we, uh, were we happy with the autorun stuff?
Uh, we shipped with the left-right controls.
Um, I was pretty happy with it.
Um, I was super against left-right controls.
I was fighting tooth and nail to keep it, uh, just moving right.
Um, I didn't like the additional complexity of the control scheme right there.
Um...
But once we actually got it in there and we started looking at the different gameplay elements that it opened up, it was super awesome.
One thing that I'm still not happy about is, with the super extended thumb positions, while you get that confidence that you're hitting the right thing, it's a lot slower than having smaller button controls.
And so you lose a lot of fidelity in moving left to right, and so those really tricky platform elements are still quite hard to put into the game because the controls aren't really precise enough.
So one thing I'd like to, to work on is, uh, what that right balance is between game design and level design for those platforming elements and, uh, where we can kind of take the controls to be even more responsive, uh, while still maintaining the, um, predictability of it.
Cool?
Hi.
woman 3 in audience Hi. I wonder if you discussed making, um, the user able to adjust the position of the buttons as per their own thumb size.
Yeah, so the question was if we've, uh, figured, if we've considered allowing the player to adjust the positions of the buttons.
Um, one thing that's brought up quite a bit is moving buttons between those different places quite a bit.
Um, I'm not against that, we just haven't really done it yet.
Uh, I think one thing that's more interesting is probably scaling the size of those hitpad areas more than anything.
I think that's one area where I think players can get into something that's more fine-tuned for their thumbs.
Um...
I'm not sure if it'll be as effective for players to change the angles between those two different, between all the different hit areas.
Um, and there's also gonna be some, some problems if the players are trying to, uh, move buttons to different areas.
Like, so one, one comment that people brought up was that they want to jump on the left-hand side.
But the problem with that is then they can't move and jump at the same time, and it creates kind of weird edge case type stuff.
So we're looking into it right now, and just trying to figure out what, what we can do that makes the most sense.
Hello.
Hi. You alluded to precision as being still kind of one of the problems you have with the control scheme.
Is there anything else besides that that you're still kind of see as a hurdle or something you want to get past?
So the question was, uh...
other areas that we feel like is a hurdle to get past.
So I don't think precision is a problem.
I think the quickness of the responsiveness is a problem.
I think it is very precise.
If you're gonna hit something, you are gonna hit it.
It's gonna be good.
The one area that I wanna get beyond is some people still find it uncomfortable.
And trying to find a way to get that grip comfortable for more people is, I think, a big area that I wanna work on next.
Kinda see what I can do.
Um, you mentioned about having sort of Mario-style jumping, where, which to me sounds like you can control the height of the jump.
Yep.
Is that correct?
Correct.
Did you have any challenges, like, keeping that sliding sort of input and still having players be able to kind of control that height accurately, since their thumb would still be sort of resting on the button when they were trying to slide?
Yeah, so what we ended up doing was, while there is a Mario style jumping in the game, it's a lot more subtle than a lot of other platformers.
We didn't, we don't have it so that it's super required.
It's more of like a subtle feel thing in our game than anything like that.
And so there's no gameplay that requires you to do a really precise Mario-style jump.
It's more of, it's there.
You can kind of feel it if you release the button early.
You'll see that your jump height isn't as high.
It's just one of the small little polish things that we did as opposed to a big gameplay-type thing.
Anything else?
Cool. Thank you so much, everyone, and have a great Friday.
