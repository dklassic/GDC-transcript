I'm Heather Robertson, and I'm gonna be talking not just about procedural generation, but about procedural regeneration, which is the act of changing level design in response to player action.
So hi, I'm Heather.
I'm a cool person, I like to think, but one time last year I was at this big shot industry party, and this guy that I know walked by with a couple of CEO types, and he just kind of turned to them and said, hey, that's Heather, she ate paper once, and I haven't really lived that moment down.
quick content warnings for this talk. There's one slide with minor zombie body horror in it. I'll let you know when it's going to happen. I make games. I make a lot of games. These are some of the games that I made since the start of 2017. I made 30 games last year.
Most of the ones that aren't up there are board games. I like procedural generation.
I think it's a really cool topic.
I don't know, it's very near and dear to my heart.
So just a quick introduction to that, because I want everybody to be on the same page for when this talk goes off the rails.
Procedural generation is the act of using systems of rules to create large amounts of content.
Now, a lot of people, when they think of procedural generation, they think of games like Minecraft and Spelunky, where the thing that is procedurally generated is the level design itself, the world of it, if you will.
Minecraft, by the way, uses a Perlin noise generation system, while Spelunky uses a series of rooms with mildly randomized elements within those rooms.
But procedural generation can be used for a large number of different things.
So on the center right there, we have Vilmonic, which is a game where you raise, procedurally generated creatures with their own DNA, and that DNA decides their habits, and what they like and dislike, and also just the shape of their bodies.
And on the far right there, we have Epitaph by the inimitable Max Kerminsky, who I think is in the audience.
Hi, Max.
Which is a game about watching hundreds of civilizations die and you can't do anything to help them.
which is kind of a bummer, but also it does a lot of really interesting things with world generation and history generation, which is a cool thing.
So I really like procedural generation.
It has a lot of really cool things going for it.
And while it may not always make a lot of sense from a level design perspective, there is a definitive level design aspect in procedural generation, and just it's important for everybody to have the same tools in their toolkit.
So it allows you to make large amounts of content in a fairly short amount of time.
It allows you to use systems-based design, which is my personal favorite kind of design.
I just think it's really fun.
There's a great community involved with it.
On Twitter, the ProcJunk community is super helpful and super kind.
just very willing to let you submit to their zines.
It's a lot of fun to work with once it's up and running.
That is one of the main problems with procedural generation is that until you have everything, you have nothing.
And that's a very difficult concept to wrap your head around at first.
So it is just a little bit scary, but also it's a lot of fun and it's cool.
So, what if we took that concept of procedural generation and looped it back in on itself?
This is the part of the talk where we go straight into mad science territory, by the way.
This is something that I have been calling procedural regeneration, which is the act of changing level design dynamically in response to player action.
There are a lot of really interesting things going on here, so I'm just going to take a second to pick apart that definition.
This is essentially saying, you make a level, and then you have an AI in control of that level decide what the player can handle, and from there decide which paths the player should take down that level.
This is a concept that I've been calling the gentle guiding hand, which allows you to use these less obvious systems to keep players on the right path.
in general, just auto-balance the game for them so that high-level players encounter more difficult areas of the game, etc.
So we're going to be going through a couple case studies real fast.
We're going to be going for Left 4 Dead first, followed by Secret Spaces, followed by Eternity.
Left 4 Dead is the next one.
Next slide is the one with the zombie body horror.
If that's not your thing, look away in 3, 2, 1.
Okay.
So this is Left 4 Dead.
It is a ‑‑ all right, we're off that slide now.
A four‑player cooperative zombie shooter where you try to survive through hordes of zombies and make your way through the post‑apocalypse in all these different areas like a carnival and a mill and a hospital and all of these different places.
As you go through, there are a lot of interesting things about this game.
It is a very well-designed zombie shooter.
But the thing that is interesting to me and relevant to this talk is that the AI in this game is all directed by something called the director, which...
depending on how well you're doing can throw all of these different obstacles at you from spawning hordes of zombies to special zombies to deciding whether you deserve a health pack and to changing physical level design making players go down one path or the other or moving the choke points or just making it rain so that you can't shoot as well and It does all of this stuff to try and give everybody a tense experience regardless of skill level which is interesting from an accessibility point as well.
The director does this through a combination of dynamic and static procedural regeneration elements.
The dynamic ones are things like placing zombies in the environment because that can happen in a spectrum of different locations and the director decides exactly for that situation where that zombie should go.
Meanwhile, static or scripted elements of procedural regeneration are the...
AI choosing between one of, say, two or three different scripts, like if the player is above 75% health, they go down this hallway, and if they're below 75% health, they go down this hallway.
As a general rule, dynamic is more difficult to implement for a lot of systems, but also potentially more rewarding.
Especially since there's this concept of a level that you can sort of know, but you can never truly know, no matter how many times you go down it.
That's a really powerful experience.
So let's just go down a quick example of procedural regeneration in a generic shooter game in action, so that y'all can see.
an example of what this is all about.
So the player starts out in that room down there with the star.
And they go north into this room, which has three guards, and the player viciously kills those guards, but takes a lot of damage in the process.
And so from here, the game can decide whether to put the player into the easy path or the hard path.
Since the player took a lot of damage, they go through the easy path and go to this room on the right with two other guards in it.
But if the player had done well in that previous room, then they might go through this hallway in the north, which is close corridors.
There are four enemies up there, and then they have to still face through those two enemies on the room on the right.
Then, both players, regardless of how well they did, go through this hallway on the right.
The player who needs a health pack at this point, and this could be either the player who did well at first or the player who did poorly at first, gets that health pack on the room on the left.
then both players would go up to that room on top, then follow that left into the boss fight.
But if the player is doing well, then that boss fight might have more enemies in it.
Now I want to emphasize, this is not two separate players.
This is the same player going through the same map with different realities.
These are different branching paths that the level could decide to put them on.
Of course, there are other examples for procedural regeneration as well, which I'm about to get to now.
With the second case study, this is a game called Secret Spaces.
I made it. It's really good. I hope you all like it.
In it, you grow plants to explore this gigantic living building, searching for your girlfriend who fell down a hole because she's bad at not dying.
It's about a lot of things, but for the purposes of our talk, it's about forging a positive relationship with your environment.
And the way that it does this is through an AI that I've been calling the Tower AI.
As you move through the building, the building forms an opinion on you.
It is an active participant in the story and also decides what level of difficulty you go against.
It rewards and punishes you based on your actions, but this is less of a, are you doing well at the game, are you doing poorly at the game, and more of a, are you acting in accordance to the building's own morality system, which is about forming a relationship with the environment, which moves plants around in the level, which are the primary interaction points of the game.
uh... so if there are fewer plants in the level then you can't move as well you can't see as well you can't heal at all uh... and yeah So it makes this decision both on the micro and the macro scale.
On the micro scale there's just constant day-to-day decisions like how many plants does the player have in their inventory.
But there are also larger scale events like how far has the player progressed in the story and how have they reacted to specific rare events.
There's a lot of events in this game that only happen one every thousand playthroughs, which I think is a really fun design space to work with.
So this originally started out as a deterrent for mechanic abuse.
I'm not quite sure if you can see it, but on the screenshot there on the right, if you check the player's inventory in the bottom center, you can see that they have 100 of the rarest fruits in the game in their inventory.
which I figured should not be how any of this works.
That was sent to me early on in development.
This game was in early access for a while.
I got that screenshot from somebody, and I said, nope, no, okay, this isn't happening, and added this AI into the game to try and stop that from happening.
So right now...
If you have more than five plants in your inventory at any given time, there isn't a hard inventory cap, but the game starts to heavily punish you by removing plants from the environment.
In order to get things from the environment, you have to give back to it, in a sense.
This ended up, in addition to being a good way to balance the game, also added to the tension.
It made the game more fun because you had to make all these hard decisions.
And in addition, it helped with the story and message in the long term.
So let's move on to our third case study now, which is a game called Eternity.
This one is still in progress. It is a game that I am currently making right now, as we speak, in that laptop over there.
It is a game that I am currently making right now.
a very special laptop.
It is a stealth horror game about a monster who can change the past.
You play as a person who has entered this house in search of a cure for death.
And in that house, what they find instead is the same reality rearranged over and over again.
They are a person shoved between hundreds and thousands of different timelines, each of which is the same house rearranged.
This is the extreme case in procedural regeneration.
It's based on player action and movement like the others are, but the world itself shuffles every couple seconds, which turns what should just be a simple house into a labyrinth.
Is this feasible? Is this reasonable?
Well, we're just gonna have to find out.
The game's still in development.
I don't have all the answers.
Come to my talk next year, I hope.
So there's only one monster in this game, but because of the warp nature of space, this monster confronts you at almost every turn.
Like you can evade the monster once by hiding under a table and the monster will pass you by.
And then you go into the next room where the monster logically shouldn't be, and yet there they are again, because that next room swapped itself with the previous room.
So there is a quick distinction that I want to make between two main categories of procedural regeneration.
There is outward procedural regeneration, which is the kind of procedural regeneration used in Left 4 Dead and Secret Spaces, in which the procedural regeneration moves outward.
It sees where the player is and decides where they deserve to go from there.
The other example is inward procedural regeneration, which is buck wild and deeply experimental even more so than outward The primary example of it there is eternity now in order to display a Like make and throw into sharp relief the difference between these two kinds of procedural regeneration on the left we had that example of outward procedural regeneration from before from before with the shooter And on the right, we have inward procedural regeneration with a level in eternity.
That's a part of the floor plan of the house.
Now it has a lot of the same.
major components going on, like the player is still in there and there's still an enemy in there and the different doors in the environment can change position based on whether the player is doing well or poorly. In this case it's based less off of health and a number of guards killed, it's more based off of how many times the player has been spotted by the monster to try and achieve that sort of happy medium.
Of course, there is one major difference in that the level changes shape every 20 seconds.
That's the main difference between outward and inward procedural regeneration.
Outward sees where you are and decides where you're going.
Inward sees where you are and changes where you are.
So, just real quick, the way that I'm implementing this inward procedural regeneration for eternity is using a double buffer system, which is something that is used often in graphics programming.
Essentially, the player interacts with the world as it is, and a copy of that same world underneath it is constantly trying new forms, new arrangements, so that there isn't a huge lag spike every time the world tries to rearrange itself.
Because it's happening over time, that allows.
for smoother gameplay even though it does mean a larger CPU load on the second-to-second basis.
It's not too big of a difficulty, it's just something that I figured I should discuss how I implemented because this game is deeply weird.
So an important thing to grasp in procedural regeneration is that there is no difference between a hard path and an easy path.
The hard path and the easy path are things in the environment, but it's not a difficulty setting.
The player doesn't decide this. I mean, they could. I'll get into that in a second.
But the level itself sees the player and decides what they're going to be comfortable dealing with.
Now, part of the reason this is interesting is because players are kind of stubborn.
They're not always the most willing to admit when they're not having a good time, especially when something is too hard for them.
So having a system that can just straight up decide, okay, this is something that you would have fun with is something that could be deeply powerful as a design mechanic.
Of course, design and easy path could be a difficulty setting in procedural regeneration in addition to other ways of doing hardness and easiness by, say, making enemies harder to kill, etc.
You could also just have the AI decide to be meaner to the player.
Just have the player say, okay, I want you to give me your worst and see how that goes from there.
Um, so let's go over the pros and cons of procedural regeneration real fast, because no level design paradigm is perfect, unfortunately.
Though actually, quick plug for my talk.
Two years from now where I give the perfect level design paradigm, it's gonna rule.
So the pros of procedural regeneration are that it is extremely cutting edge.
You can do some really cool stuff with it and you will be innovating almost all the time while doing this.
It's really good for game balancing on the fly.
Like we talked earlier about the gentle guiding hand and about...
there not being any true difference between the hard path and the easy path.
The player can switch between them at any time depending on their performance.
In addition, disorienting spaces are super spooky.
Imagine a moment in a game where you walk through a door into a room, you turn around, and that door just isn't there anymore.
That's lightning in a bottle.
You can capture that with procedural regeneration and do other fun stuff with it in that same sense.
It has a lot of fun horror elements going for it because the game is always one step ahead of the player.
the game literally knows what the player has done and can form itself around that fact.
For example, if a player lingers too long in one room, that same room might show up again in a different context.
And in addition, it works well with different play styles, not just in the sense of some players will be better at the game and the game will adjust to that, but also in the sense of...
Say you are developing a shooter game where there are three regular weapons, let's say a gun, a shotgun and I don't know, a sword. And one super powerful mini gun. Now, you could, now the mini gun is a lot of fun to play with because it just shreds through enemies and you really don't want to nerf it but also the player can access that thing at any time. How do you deal with that difference in weapon strength.
Well, a normal game would say that you need to just nerf the minigun.
But you don't have to with procedural regeneration because you can just, because the AI will detect that the player is just tearing through hordes of enemies and will just throw more and more enemies until it's reached the same level of difficulty.
Which is something really interesting because it means that the player is still having a good time and fulfilling a completely different kind of power fantasy than they would have otherwise.
Of course, there are some cons of procedural regeneration.
Right now it is a very specific design space.
Right now it's mainly used for balancing and horror purposes.
I do want to see this changed over time.
I'll talk about that more in a little bit.
In addition, it is a relatively unexplored field.
There are very few games that have done things like this.
If you have any more examples after the talk, I would love to hear them, to be honest.
In addition, disorienting spaces are super cool, but they're also super confusing, especially if you don't wanna give your player a map.
That's something that I have experienced with playtests of Eternity, is that the player gets turned around so easily, it's very difficult for them to know where they are, where they're going, or even what the point of the game is.
And in addition, procedural regeneration is difficult to program.
I use the catchphrase, better out than in here.
That's a reference to...
the difference between outward versus inward procedural regeneration.
Outward procedural regeneration is easier to program, it makes more sense from a level design perspective, it also makes more sense for a player perspective, and while inward procedural regeneration is super cool, it is also super unexplored.
In addition, procedural regeneration can be risky in AAA development.
That's something that's true of all procedural generation paradigms is that there is that same concept of you don't have anything until you have everything.
You can't really start playtesting until you have the world, and you can't have the world until you've done hours and hours of coding.
So that is a minor problem with procedural regeneration.
In addition, Kate Compton has this concept of procedural oatmeal in procedural generation, which is that you can make a bowl full of oats and each oat has its own geometry and its own history and all of these cool things and you could spend years working on this bowl of oats.
What are the players going to see is a bowl of oatmeal?
They're going to eat in three seconds, then it's done.
So you need to make sure that you have enough variation in your...
procedural regeneration formula so that players will have, that players will actually be affected by the differences that you're making in the game's code.
For example, if you have the player, if you have the AI choose for the player to either go down a hallway with four enemies or a hallway with four enemies, that's not going to affect the player.
You need to actually make there be a palatable difference in order for that system to properly work.
So, is procedural regeneration right for you?
I will admit it is a relatively unexplored design space, as I have said, but it's worth checking out.
This is another tool that you could put into your toolkit, and in a game maybe five or 10 years down the line, you might find a really cool use for this.
No level design paradigm is a panacea, which is what makes level design so wonderful.
If we all just did the same thing every time, it would just be boring.
I do want to imagine a future with you for a second real fast, where every game ten years down the line uses these wildly different forms of procedural regeneration, where all levels are in some way interacting with their players, where every level is its own Galatea.
We are not bound by the shackles of reality.
And we, as level designers, can do some really fascinating things with this concept.
And I am deeply excited to see where y'all take it.
So thank you.
My name is Heather Robertson.
There's my website, and my email, and my Twitter.
We have a couple minutes for questions if people want to step up to the mics.
Oh yeah, the microphones are there and there.
If anybody has any questions.
Neat.
Hey Heather, why's your talk so good?
I don't know, just kinda did it.
Looks like we got one.
Hi.
Hi.
So how would you prevent players from, for example, in this case of procedural regeneration, how would you prevent players from, for example, abusing the system in terms of going on the hard path, maybe taking damage on purpose and then just going the easy way, and then taking damage again, going the easy way?
That definitely is a thing to consider.
I could see this really becoming a problem because you can no longer easily define how a speed run works because, I mean, like, you would have to figure out exactly what is the correct path to follow and how to take damage during certain parts, which then again is it's interesting design problem in and of itself.
But anyways, to answer your question.
I feel like players don't want to intentionally take damage.
They will just keep doing their best until their best isn't good enough and they'll be put onto the easy path.
And it doesn't just have to be hard and easy.
There could be any number of paths going as a spectrum between doing really good and doing really bad.
And if they decide to go down the path of having an easy time for a little bit, I feel like that's their decision to make.
All right, thank you.
Thank you.
Looks like we have another couple of folks.
Um, so I've never played Left 4 Dead, so this might be something that a bunch of people in the audience already know the answer to, but, um...
you know, I think as any game developer knows, players are often very quick to encounter something they didn't expect and just decide it's a bug.
And so I'm wondering with procedural regeneration, when you are, you know, on this play through, they're doing really well, so you send them down the hard path, and on this play through, they're not doing so well, so you send them down the easy path.
Do you have any tips for how to sort of indicate to the player that there's a reason why this door worked last time and it doesn't this time?
That is an interesting conundrum. I feel like a good way to potentially do that is to hide the existence of both doors until It's decided to go down one path or another you could do this fairly easily Let me go back to This example here on the left where instead of having the two doors in the same room, you could have them be down a hallway and be obscured by line of sight that way.
And I feel like that would obscure the problem for the player.
Another way of potentially doing it would just to be frank with the player and say this is a thing that we're doing, the game will auto balance itself to you.
And I feel like some players would really be into that.
Fair enough.
Thank you.
Hi, thanks for the talk, I really enjoyed it.
Regarding playtesting, how difficult was it when you were doing a lot of this procedural regeneration and kind of locking a scenario through a playtest?
Because it seems like every time you would start to playtest over, the data would be different.
And so, explain maybe some of the challenges you went through with playtesting.
Thank you for the question.
I am still very early on in development for Eternity, so I can't super answer questions for playtesting that really well, but I can talk about secret spaces really fast, which uses that outward procedural regeneration element.
And in that game, the playtesting was less about the large-scale game.
It was always about the moment-to-moment.
And that moment-to-moment is the same regardless of the overall structure of the level.
You can see... Oh, just one minute left.
Do you want to ask your question real fast?
And that'll probably be the last one unless I'm really fast.
I feel special now.
So in the case of Eternity, you said that the player was going in search for the cure for death.
Yes.
Are we assuming that the cure for death is in one of these procedurally regenerated rooms then?
Okay, so this is going to get a little bit spoilery, but I feel comfortable doing this in this room.
In Eternity, the player is searching for a way to stop time, and the monster in the house controls time.
So it's not a MacGuffin then?
basically, so it's not just an object.
It's not an object, it is a creature.
I was gonna ask if they were capable of just finding it, walking through the front door and saying, oh, it's there on the nightstand, all right, cool.
That would be cool.
That's sort of like the concept in Fallout 2, I believe, where you can just kind of go to the final boss immediately if you just head west.
Yeah.
All right, do we have time for one more question?
No, we do not, okay, cool.
Thank you all for coming.
