Hello, everybody.
Our talk is Lessons Learned from Job to Vacation, Advanced Interactions for Room-Scale VR.
I'm Devin Reimer, CEO at Alchemy Labs.
And I'm Andrew Reich, CTO and Cable Wrangler at Alchemy Labs.
And we are Alchemy Labs.
We make absurd and highly polished VR games.
We're an Austin, Texas-based developer.
And a few of our games, you may know, are Job Simulator.
Rake and Morty Virtual Ricality, and the upcoming Vacation Simulator.
And here's a one minute clip from our trailer to help kind of give you some context for the rest of this talk.
Our carefully crafted, very identical, vacation destinations are the ultimate human leisure experience.
Come on, let's start relaxing.
Fan castles, sports, seashells!
Wondrous Vacation Beach has it all!
Snaps and shots of your evolutionary ancestors and cool that overclocked neural processor.
Dry off and spin those seashells by the seashore!
Marvel at the rustic grandeur and unforgettable Vacation Forest.
Become ones and zeros with simulated nature as you get back to your digital roots.
Missing that spark in your surge protector?
There's plenty of fish in our stream!
Scale your way up Vacation Mountain for a transformative winter experience.
Rotating office temperature, chilling your thermal sensors.
Let it go and enjoy all this winter wonderland has to offer.
Don't hold yourself back anymore.
You'll enjoy all of these beautiful...
So, when it comes to interactions in VR...
Job simulator was kind of the thing that kicked things off for us.
We had done some VR before that, but this was kind of the first point that we ended up building VR that you interacted with the world with your hands.
So we started work on this with a very early prototype of what would end up being the Vive.
And one of the first things that we did was we built this demo where there was four boxes, and we put them on the floor, on your virtual floor, and I found myself just sitting there, just stacking blocks.
And at that point, realized that this was a very interesting and fundamentally fun.
way to interact with this world.
So that was kind of the kickoff point for what we wanted to build.
So we kind of used this direct interaction into the virtual world as our guide.
So we knew we wanted these deep world interactions, we wanted to make games that were approachable by everybody, and then the other thing was to make no one sick.
So in Job Simulator, we kind of established a few early ideas and kind of basic design principles that we use to this day.
So for example, taking advantage of your physical space to physically move around, our physics-based approach to interacting with objects, tomato presence, which you see in this video right now, solid object believability, floors, which are very important but were controversial at the time, and many, many more.
We've also done a number of talks about a lot of these basic concepts and you can see that go to our speaking page and see many of those talks but today we're going to get a little bit more in depth.
So what we're going to do is we want to dig into 4 specific case studies on things we didn't vacation simulator and more specifically each one of these case studies is going to cover a different set of topics that we've been heavily iterating on since the development of job simulator.
The first one we're going to talk about today is locomotion.
So in Job Simulator, how we locomoted around the world was our own body moving in the physical real world space.
Every single job was designed to be exactly one play area size.
And we moved between different jobs or different spaces by eating this exit burrito fading to black and loading in an entire new scene.
We would use room resizing to properly size the world to your play space.
And so we would remake the layout of each play space for various room sizes.
And that included redoing the models, writing custom code for it.
And it would also include per platform.
So PlayStation VR had its own play space.
And it worked great.
What we really wanted to accomplish there was that our game was the same experience no matter what you played it on.
So that brings us to the world of Vacation Simulator.
Vacations kind of have this expectation that they're about exploring and doing a variety of different activities.
So for example, having an entire beach and you could only exist in one small zone would feel very, very problematic.
So we knew we wanted to build a much bigger world for our next game.
And so unlike Job Simulator, this one destination per zone concept just wouldn't work.
We needed more space.
So we knew that we were going to have to move around.
So when it comes to VR locomotion, we've been pretty outspoken on this topic.
And the main reason is VR motion sickness.
So regardless of what you read on the internet, significant portion of the population will never overcome simulator sickness when it comes to vection from artificial locomotion.
Nausea not only reduces the audience of your game.
but can turn people completely off from VR.
There's still so many people that have limited or no new experience into VR yet.
And so we want to make sure the first kind of taste into that world, they understand that VR is for them.
So our number one rule at Alchemy is don't make people sick.
So what kind of options does that leave us?
And so the first one is teleportation.
And in our opinion, teleportation has got a bit of a bad rap in VR.
We think the main reason for this is that.
Up till now, for the most part, simple teleportation methods have been used and also they've been slapped very commonly into existing content that wasn't designed for it in the first place.
And then to compound this, there's so many lessons we haven't yet learned in how to do good teleportation.
Right now it feels very much like the early days of third-person cameras in games and also early development of FPSs on consoles, things that we take for granted today.
But at the time when they were starting to roll out, some of them were kind of controversial and we weren't quite sure how they'd be solved.
So this was one of these challenges that we wanted to take on at Alchemy.
So when you start talking about teleportation, one of the first things you're gonna look at is granular teleportation.
And it's teleport anywhere.
You point a specific spot that you're going to teleport to in a very precise location, appears, and you release, and you go there.
It's very easy to drop in, and many VR frameworks include this by default.
And it works with existing content.
But there's a lot of challenges with it.
Specifically, it's very difficult for new users to select the correct spot.
And it's difficult to understand where your play space bounds actually are in comparison to where you are moving in the world.
So in this image here, you can see that the player is, that mug is beyond the edge of their play space bounds.
But because of the way they've teleported, they can't actually reach that without taking a step back and teleporting again.
And that's very unintuitive to do that.
Super unintuitive.
Try to explain to a person the object you want to grab, you actually have to walk in the opposite direction of it to then get towards it.
And granular teleportation discourages physical movement.
Once you get the ability to teleport wherever you want, you stop walking around your play space.
And then standing still is also more physically exhausting than moving around in your space.
And then lastly, we have this concept called teleportation fatigue.
And that is when you can see a spot you wanna go to, but you have to do a number of kind of small jumps.
It gets very fatiguing to do that, and granular teleportation in particular suffers from this.
So we're looking for a new way to move across larger distances.
And our games are about physical-based interaction, which makes granular teleportation not a great fit.
So we started looking to see if there was a way where we can merge the benefits of teleportation with kind of our play area style design.
And we landed on zone-based teleportation.
So you look at a zone and hit a button.
And it's really intuitive for our players, because.
They're now not thinking about exactly where they need to go, but more kind of what zone do they need to go to.
It also encourages active movement within the zones.
Once you're, since you're only moving between spaces, you're still walking around and engaging with those spaces.
And it allows us as developers to design discrete zones instead of trying to design an entire world, which is great.
So this means Vacation Sim is.
Much larger than Job Simulator.
Much larger.
So this is just a small chunk of the beach.
And you can see a bunch of different zones.
So each one of those red boxes is kind of a zone that we have that the players can teleport to, as compared to the jobs, which were one single zone.
So in Job Simulator, we had five total zones.
And in this only the certain part of the beach here that we're showing, there's seven.
So when it comes to zone-based teleportation, there's a lot of wins versus granular teleportation.
So as Andrew mentioned, we find it a lot easier to get people to understand and to use.
There's less teleportation fatigue of spending a lot of time trying to get to the exact point you're trying to go.
As developers, we also know that that area is clear of obstruction in the physical world because we know the bounds of where you are.
And so we know that if you're inside that area, that every object and every device and every interaction, the player can actually perform that.
And then also this concept of, if you can see an object, you can reach and grab that object.
Because we have defined bounds of your world, we can make sure those objects are always within reach.
That said, zone-based teleportation has a lot of challenges that comes along with it.
A really big one is that you need to design your game with zone-based teleportation in mind.
This is not something you go back and retrofit something with.
You have to think about it right from the start.
So to kind of go through a few of those challenges, a big one is 180 tracking.
And so there is a lot of VR setups that have a limitation of 180-degree tracking when it comes to your controllers.
Most have 360 head tracking, but when it comes to hands, you're kind of limited into this space.
So you have to think about how that's going to impact things.
Traditionally, with something like granular-based teleportation, the method that's used to solve this is manual rotations or snap turns.
The problem with this is that there constantly needs to be a thread running in the back of your mind as a player of where is my real world forward because that's the point, right?
I need to make sure that I'm continuously orienting myself versus where I am in the virtual world versus where I am in the real world and when you have to do that, you're automatically breaking presence One of the first things we started thinking about was, OK, let's say there's a zone to your left that you want to go to, but some of the primary interactions are to the back left, for example.
So one thing we thought about was, how about what we do is, when you teleport, we go and rotate the world for you?
So it's like a snap turn, but we're in control of that.
And we thought this would be a great idea.
It was going to solve so many of our problems.
And we tried so, so hard to make this work.
It turned out, in every one of our tests and every which way we tried this.
at the end of the day it was disorienting to the player because they weren't 100% sure what direction they were going to be facing at the end of the teleport.
We also discovered that it's very important to be looking in the direction you're going to teleport to try to complete that feeling of understanding where you're going to end up.
If you're looking directly where you're going and then you end up just forward, that is very, very understandable in the human brain.
So when it comes to interactions, this means that they need to be in that forward direction.
So we end up laying out our environment such that the front of those play spaces are where you're going to have your primary methods of interaction.
So like forward and to the left a bit and to the right a bit.
And so all those interactions need to be within that tracking volume.
That said, let's say something like a 360 setup that supports 360 controller tracking, there's still benefits with this design, because most of those are still tethered.
And one issue when you're doing a lot of teleportation is getting twisted up in the cable and having to do cable management.
But because of this approach, you end up not rotating all the way around very often at all, and so it actually has some benefits there.
And so as I kind of mentioned in us designing the world, it is very, very difficult to design layouts for this, but at the end of the day, the player doesn't have to think anything about it.
And one thing we talk about at Alchemy all the time is like the best work we can do is the work that a player never notices.
Another challenge is...
where to teleport in terms of directions.
We found that moving in the cardinal directions is best.
So that's forward, back, left, and right.
We've also found that certain other angles feel better.
So the 45 degrees, your diagonals do.
But it's important to test your content.
It's going to feel different depending on the way that your content is laid out.
And it's really important to have a clear path that you're virtually walking that's straight towards the destination.
Otherwise, the players get disoriented.
You're trying to make them feel as if they moved between two spots, and taking a curved path makes that disorienting.
Another challenge we face is, where is the edge of my current zone, right?
How do we logically break up these zones?
And in Job Simulator, we had these desks and big physical objects that players naturally wouldn't cross.
But in Vacation Simulator, we need to teleport, and teleporting through a physical object feels bad.
So we need to kind of have a clearer, more open area.
And the goal is the player should never question why they can't just take a few steps to get to the next zone.
So it's like, I can see it.
I should be able to walk there.
You need to provide some context for why the teleport is needed.
We do this by communicating the play area.
We use lots of techniques to show this.
So a good example is like visual design in the beach.
We use towels on the ground, and we use different terrains.
So you might have like.
a rocky area that is the play zone with grass on the edges.
We use doors and gates to help show that you couldn't just naturally walk there, but when you hit the button to teleport, the door opens and gets out of your way, so that's the action that's being taken.
We use elevation changes, too, because you can't really walk elevation changes in VR because most of us play in flat rooms.
So we use those elevation changes to help kind of exemplify like why this teleport is necessary.
And then when all else fails we put it in a full screen fade and it dims the screen when you get to the edge which is.
Really discouraging to players to be if they suddenly decide to walk between zones, if suddenly it fades out, it's like, okay, I know I've hit the edge.
And to kind of add on to that, one thing that we noticed is that systems that do have some sort of chaperone or guardian, over time people start ignoring it, but a full screen fade, at least even a little bit, is a very clear indicator, regardless of what you're looking at, that, oh, I've kind of left my available play area.
So another challenge is communicating the movement itself.
And so during the teleport, we fade in and we fade out.
But we want to communicate even more that you're moving during that process.
And one thing that we do to do that is sound effects during the teleport.
And so very specific sounds that end up grounding the player in that world.
And so let's say, for example, you're teleporting to a little bit of a rocky area.
We might play a rocky footstep sound when that player gets to that destination.
Or play a wooden sound when I teleport out onto the dock.
A very important thing that was very difficult at the beginning is we started going down the path of footsteps, because footsteps seem to be a very clear indicator that I'm moving.
And it worked, but the problem is that footsteps take a long time to play out, and your teleport lengths you want relatively short.
And so we ended up having a scenario one time where we had like three footsteps.
But what happened is the teleport fade would come back in.
You'd be standing still.
And then you'd hear, dunk, dunk, of two footsteps.
And you're like, I didn't do that.
I'm standing still.
So we ended up having to play a lot of things that sometimes sound a little bit like footsteps, but sometimes aren't.
For example, on the dock, it might be a creak of the wood on the dock when you come to the destination.
You've got to think really hard about the sound length of those effects.
Another thing that we learned is that we can play around with the length of that teleport, so how long you sit on black and how many sound effects you play to try to convey the distance of a teleport, that something is a little bit longer for you to get to.
So here's a quick video kind of explaining how all this stuff kind of plays together.
So you can see here, as you start teleporting, the doors move out of the way.
teleport in the water, there's a splash sound.
And all these things kind of play together to make you understand how you're moving around in this world.
So the next case study we want to dive into is character interaction.
So when it comes to characters and alchemy, we always want to create memorable characters.
So right back when we started working in mobile and the PC days, we started building all these interesting characters to populate our game.
We realized we really wanted this in VR, but this was going to be pretty challenging.
And some of the big issues with that is in traditional flat screen gaming, that's a character in a world.
In VR, that's a character in your world.
So you need to make sure that you end up doing all the right things there.
And the presence and believability of those characters is very dependent on how those characters react, their dialogue, their demeanor, so on and so forth.
So when it came to deciding what we wanted to do with Job Simulator, we knew that there were some things that were just outside of our reach, right?
We could not build a full humanoid character, right?
Because then we have problems like, okay, we have limbs, and how are they going to reach and grab things?
How are they going to move around?
How are we going to do facial animations?
And all this stuff.
Because we didn't want to fall into the uncanny valley.
So we started talking about robots.
And so one thing that we ended up coming up with was this box-style bot that we called them.
And they have animated faces where we can use really interesting expressions.
But at the end of the day, what ended up working with them is people started identifying them as characters.
But we kind of solved all the problems with that.
So vacation simulator is more complicated, as we've been telling you many times.
And there's tons of teleport zones, meaning there's lots of different locations that the player could be in throughout the course of playing the game.
And so a bunch of new issues cropped up with characters because of this.
The world needs to feel alive, and so how do we place these characters around the world to make it feel complete while not getting in the way of the players?
And we also wanted to expand further on player interaction with these characters.
So let's talk about personal space.
To feel a connection with a character, they're going to be near the player, right?
They're gonna be in the personal space, but they can't be too close.
In fact, the ideal is kind of the yellow zone on this graph, which is between, let's see, a foot and a half and four feet, or 45 centimeters and 1.2 meters.
And players need the ability to move around their space as characters interact with them, because in VR, player agency is really important, so having characters kind of up close that are following the players around not so great, and violating that intimate space, that red zone, feels very uncomfortable and aggressive if it's not something the player is invited.
So, for character position, we found it's best to keep the NPCs outside the immediate play space, the area that the players can play in.
It's even better if you could put them at the very edge of the play space, because that's an opt-in zone where players can choose the distance at which they feel comfortable engaging with these characters.
We also added an avoidance system too, on the chance that a player needs to lean over or go towards a bot, or for some reason they get in close proximity, where the bot tries to get out of the way of the player and tries not to make contact, because that just feels so bad in VR.
Yeah, it's one thing, it's like these bots, they look on the screen like, oh, okay, they're lovable, but if you have this giant mini-fridge-style thing flying at you, that feels very scary and very bad, and so we have to make sure that we never end up breaking that.
So now that we have these characters in place, players are going to want to interact with them.
And in Job Simulator, this interaction was really simplistic.
You could pass characters items at specified times and specified items.
Characters were very heavily scripted, so there was no real agency to initiate a conversation.
The characters just kind of came in, talked at the player, said what they were going to say, and then left.
So when it came to character interaction and vacation simulator, we knew we wanted the ability to make it user-driven to determine when I wanted the conversation.
So instead of the bots talking at you, that you were saying, hey, I want to have a conversation.
In traditional games, the answer would be, let's just map it to a button.
And something that we talk about all the time is like, in VR, is resist the urge.
No, really, resist the urge to map things to buttons.
There's almost always a better way in VR.
We've never had an input scheme that allows for so much creativity.
Don't just fall back on old paradigms like mapping to buttons.
So our solution was waving.
Waving feels very natural, particularly in VR.
And it feels like the thing you should do to get the attention of an NPC.
So in vacation simulator, you look at a bot, you wave at them, and that initializes the conversation.
And so it gives a player any time to say, hey, I want to have a conversation.
And on top of that, waving feels very fun and very friendly.
So much so that I've played enough vacation simulator that sometimes when I pop into other VR games and I see an NPC, I'm like, oh, hello.
And then like, oh, that doesn't work.
That's not like a universal thing.
I hope it becomes a universal thing because it feels so good.
So on the note of having characters kind of placed in the environment in these zones, we ended up encountering an interesting problem.
So in vacation simulator, when a bot was there, generally they just kind of looked at you.
And it was great.
There's like one bot looking at you.
That feels great.
But we kind of set things up for the beach.
It has all those zones.
And every zone has a bot.
And then you teleport for the first time into the beach.
And then all the bots just like looked at you.
And you're like, yeah.
Oh no, what's going on?
This isn't very, very, very creepy.
And so we knew that we needed to do something.
And the answer was not do anything.
So first thing we did was like, let's turn that off.
And then you had the bots just all staring out into nothing.
Because it's very clear, even though these are just bots, you know exactly where they're looking.
And you kind of guess that they should be doing something.
And so one thing that we ended up doing was creating these idle animations for the bots themselves.
So here in this video, this bot is bouncing around this coconut.
At a distance, this also helps us give character to those bots before you even get close to them.
So you're like, oh, this is probably the bot that likes sports and likes to kind of play around, which you totally get.
And then when you teleport into the zone, then they kind of stop that animation and pay attention to you just like you'd expect.
And so at the end of the day, what it does is it made our game feel way more alive and our world way less static than it did before.
So the next thing we're gonna talk about is systems and some systems we've built in our game.
And specifically we wanna look at temperature because we think it's a good example of kind of our systemic thinking.
So temperature as a concept is a common human experience.
Many of us are probably either too hot or too cold in this room or somewhere in between.
And players have an expectation that things react in a specific way when they encounter hot or cold.
In Job Simulator, we had items that required, and spaces that required interaction with hot or cold, like cooking in the kitchen, hot dogs in the convenience store, and players expected to be able to heat or cool those certain items.
And we had certain devices that could provide heat, like cups, the grill, toaster, microwave, pot, hot dog roller, et cetera.
But again, it only worked on very specific items, so it was fluids and some food.
So when it came to Vacation Simulator, we wanted to rethink the way that we handled this system.
So we came up with this much more broad concept of temperature zones.
And so to break that down, one example is each one of these destinations has its own kind of climate, its own temperature.
So for example, the beach is hot, and it actually has a temperature associated with it.
The forest is more moderate.
The mountain is cold.
But the mountain is only cold when you're outside.
When you're inside the lodge, then it's room temperature.
And that's at a higher level.
And then we kind of drill down after that.
And so, for example, when we ended up building the mountain, we ended up putting snowballs in.
That's great, but then players would take the snowballs to the beach and expect them to react.
And so they needed to react.
And so here in the video, someone took a snowball to the beach and it melted in their hands.
And so that kind of all has to play together.
But there's more.
So now when you start thinking about melting and what kind of that yields, here's an example of someone taking a snowball into the lodge and melting it above a cup.
You expect that snowball to turn to water, and then you expect water that's falling to be able to land inside something like a cup.
But then if you set that cup on top of the fireplace, well, then you kind of expect that water to heat.
But then when you've heated that water, then you kind of expect it to boil.
And when it boils, then you kind of expect it to evaporate.
And so we kind of went through all these things, and as you kind of like grab a new one, then you're like, well, that sets an expectation for the next thing.
And you kind of like walk through all these things.
And so in our game, temperature is used for all the things like cooking and boiling and freezing and all that stuff.
The interesting thing is once you kind of set these systems up, then you can use them for more and more interesting things.
So let's talk about cooking.
And we have a number of areas in Vacation Simulator that can be used for cooking, like the grill and the beach like you see here.
And it works by using the temperature zones we talked about to systemically interact with the objects.
So in our cooking system, unlike job simulator, where it was rudimentary, where there was just kind of temperature as a concept, this is actually, we actually started programming a system that uses heat transfer.
So when an object is closer to the surface of the grill or on the surface of the grill, it actually heats up faster than if it were above the grill.
And this is great for believability of our game.
And to go kind of deeper into that concept, once we have cooking, we extend it further.
So any food item in the game should obviously be cookable, because we cook food, and it should have a corresponding state change.
And then we even let the object be burnable.
And all of that happens, not because the object's interactive with the grill, but it happened because the internal temperature of the object provided by heat transfer changed in a way that changed its state to one of the other states.
And we made all of that work, and it's great.
Yeah, and so, like, to kind of add on to that, in Job Simulator, we cared a lot about surface temperature, but that's not really what you expect in cooking.
What you expect is, like, the internals of this thing heats up, and so it actually does absorption of heat.
And then on the opposite side, when you're, like, freezing, it does the opposite.
And so a lot of those things play together.
And then to, like, add on to this, we're talking about food here.
But every object in the game also has a temperature in itself so you can do things as silly as like Oh, I'm gonna go put say a container of milk on the ground on a barbecue And it'll heat up and then I'll pour it in a cup and then the couple we boiling milk And there's even we can go even further So we have the freezing items in multiple places where they can heat things up.
And as an example, we love pushing our systems to their far limits.
So one of our developers was like, I'm going to make matches.
And so you can, in fact, cook a hot dog in Vacation Simulator with a match.
It will cook very slowly because there's not a lot of heat transfer, but you can hold the match up to the hot dog and it cooks.
And so an important thing is like this is one of the systems that we kind of dove deep into.
There's many more. This is kind of an interesting one to kind of see as you like step through the process and you're like, okay, I added this, then what does the user expect you do next?
And kind of finding the bottom of that, the logical bottom of that is very important.
And so a great example kind of going further is sandwiches.
We're gonna talk about sandwiches now.
And, you know, what is a sandwich?
That's a huge debate if you've been on the internet.
So ignore that.
We're not gonna think about that right now.
What we're gonna think about instead is, to job is to sandwich, right?
This was great.
So we, in Job Simulator, we split it into four jobs.
Each job lived in its own separate world.
And sandwiches were a big part of the gourmet chef job at the time, which made sense.
But that didn't cross into any other worlds.
It just lived in gourmet chef.
And making a sandwich seems simple on the surface because in your real life, it's simple to make a sandwich.
It doesn't take a lot of skill.
Sorry, sandwich artists.
And in VR, there's a significant technical challenge to overcome to make this sandwich happen.
So when we started Job Simulator and started making the kitchen, we realized we wanted to make sandwiches.
But sandwiches are very, very difficult to try to convey and to do in VR.
And so our solution at the time was something we called the Sandwich Maker.
So the way that it worked is there's this platform with a skewer, and you put food items on top of it.
The skewer gets taller, and you keep stacking.
And then at the end, to determine that your sandwich is complete, there was a little olive you put on top.
And then it became a unit of sandwich.
And then you could pick it up and you could place it on the plate and kind of send it away.
For Job Simulator, this was kind of a close enough approximation to Sandwich to make it work, but it left a lot to be desired.
But the trade-off at the time was that it was technically possible for us to build because we were a very small team and did not have a lot of time to focus just on Sandwiches.
And so to kind of explain a little bit further, this is a video of how that works.
Toss all your things on.
That little skewer gets a little bit higher every time.
Sandwich.
Sandwich.
Sandwich, it happened.
Unit of sandwich.
A big problem is that with this method, you couldn't eat the sandwich, which is like, pretty fundamental, but it was one of the things that we decided we just needed to do.
A very early prototype was like, well, just make it a single bite.
But then someone would pick up giant sandwich and be like, I'm placing it on the thing, and then all of a sudden it would vanish, and they're like, oh, I ate it.
I have to start again.
And so that ended up becoming very awkward.
And so it was like, okay, this is just not something we can solve.
We'll put it aside.
And then to kind of stack on top of this, we started learning all the affordances that come with sandwiches.
Luckily for us in Job Simulator, we only had to contend with the affordances in the kitchen and not the entire game.
On this note, affordances.
It's one of the most talked about topics in our office.
We talk about affordances all the time.
And a big reason for that, as this image describes, is we like to put a lot of interactions into our games.
But every interaction you put into the game impacts its affordance and the affordance of everything else.
So in VR, we like to think about affordance in kind of like three major parts.
So the first part is the player's real world experience.
So.
If this object does X in the real world, it should do X in VR.
And this is something that is quite a bit different than traditional games because of the limitations of what you're doing.
But in VR, because you're interacting with the world in a very similar way, you bring a lot of those experiences along for the ride.
The next thing is input.
And so the tracked input of your hands makes people think about how they would interact with the world with their hands.
And so.
everything ends up needing to be grabbable and touchable and kind of solving all those problems in the affordance camp.
And so lastly here, it's the expectations of the game itself.
And so if I did X within the game already with one input, that similar input should do X in other places in the game.
So the entire game actually plays together.
And it's very challenging to think about how you could change one thing in one part of your game, and it won't technically break your game, but it might break people's thoughts of what should happen in other parts of your game.
So let's do a one-sentence explanation of this, and that is, the world should work in a way that makes sense to the player given their prior experience.
The input.
and the inferred rules of the virtual world.
And so some examples of that are, if you see a ball, you can pick it up and throw it.
If there's a bottle of water, you can open the lid, pour the water out, or drink it.
And if there's a drawer, you can open it.
So that's kind of giving you an example of what affordances are.
So how do we afford a sandwich?
We want sandwich making to be intuitive and an understandable task, and players expect that the world reacts in similar ways.
So you can see this coffee is like, the player expects that they hit the button, it pours into the cup, they can bring it up to their face and drink the coffee.
And they want these objects in the virtual world to match that expectation.
So constructing a sandwich in vacation simulator, the world affords making sandwiches anywhere unlike the machine that existed in a specific spot in a specific job in job simulator.
The player should be able to create something that also looks and feels like a sandwich.
And those two points alone create a ton of affordances.
A sandwich or sandwich-like object requires items that are stacked into a single unit.
And we need an in-universe, understandable and intuitive way to assemble that sandwich because as we were saying before, we don't want to end up putting these sandwich makers all over the world.
And that's just not the way it works in real life.
You should just be able to construct a sandwich.
So we said we weren't going to talk about this, but here we are.
Let's talk about what a sandwich is.
First, we place some starting item.
Samban, bread, etc.
Then, we place contents, contents of what you want in your sandwich, on top of that.
And then we place the last item on top.
It doesn't have to be bread, but you're going to have some item that you consider the last item.
So, was that so hard?
Look, sandwich is defined.
Delivered on that promise.
And one other important note, hot dogs are not sandwiches, and we have the code to prove it.
We will be taking no questions on those two slides.
So now we're setting off to do this very simple task of making a sandwich.
So the very first thing we've got to think about is attaching.
Because essentially what we're doing is we are trying to attach more than one thing to something else that could be more than one thing.
Attaching by itself is actually a very complicated task.
And the tech necessary is absurdly complicated.
And now we needed to do the most absurdly complicated thing of the most absurdly complicated thing.
So let's talk about how our attached system worked in Job Simulator.
So here you can see, you bring the cartridge near the slot.
Yellow highlight appears.
You release.
It snaps in.
And it snaps in with a defined location and orientation based on what has been set up.
This allows for very simplistic interactions.
We did a few of these inside Job Simulator.
It was like a cork in a bottle, for example.
And this one, there's a few places that we used it.
It was not so great, but it kind of proved out that this was an interesting method of interacting with the world.
So we realized we needed to kind of extend detachables out.
There was a lot of use cases for this.
So even before we started leaning into the sandwich problem by itself.
we started working on more complicated ways of attaching things.
So here, for example, we're building a sandcastle.
This is complicated, but it's a little bit better because essentially this is a fixed plane that we're dealing with.
And we can kind of do the math on top of this.
But the one thing that we realized is that every system that we build for attach needed to support the concept of also holding the thing in your hand when you're also trying to attach things.
And in VR this is quite complicated because you have very limited interaction.
You don't have fingers to go and manipulate things.
You're essentially doing a grab and a release.
So kind of, what do you mean?
So let's talk about stacks of attach.
So attachable items can be marked as this stackable state.
And so one of the concessions we made was let's think about some things that we called sandwich starters, some things that you would kind of expect to build on top of.
And so for example, here, there's a bottom bun.
It's like, OK, that's a thing you want to stack.
So when you end up bringing something that can be attached to a stack of sandwiches near it, it'll see a highlight in the final destination, and then when you release it'll attach.
And then that item then parents itself underneath the now new sandwich object that you can then manipulate.
And so here we're stacking through it, it's like, okay, now here's some cheese, and then here's a splat that we'll talk about in a second.
And so this also, in this example, is happening on the counter.
But we need to deal with the fact that you could have this in your hand and you're like tossing things in it and then trading hands between that and kind of what your intentions actually are.
So now that we have stacking, we kind of have this concept of sandwiches.
Now we can actually assemble a sandwich itself.
So designing the stacking like this ended up being pretty intuitive for the players.
They just wanted to put ingredients on the stack.
That said, there were some problems with that.
So, in Job Simulator, every edible item in the kitchen could be in a sandwich.
And the world afforded that kind of like incredibly goofy and awkward level of interaction, as you can see by this like raw steak, egg, and whole slice of cheese sandwich.
And so the interaction paradigm was very, very basic there.
But in real life, sandwiches aren't created by just taking a giant hunk of cheese and slapping it on some bread.
You create it from slices of food.
So we created this slice-o-matic machine to address that affordance.
And it should take in edible items and output a slice of it.
And not just a slice of it, but a nice-looking usable slice.
So in this case, you see the avocado going in, and instead of just taking out a chunk of avocado, it's actually taking out this nice three-piece.
three slices of avocado.
And once again, back to affordances, once the player understands how the slice-o-matic works, they assume every item in the game should be sliceable.
And this is the hell prison we built ourselves in, that the artists every day come to us and they go, oh no, another item?
Can it not be food?
And we're like, no, you have to make more slices.
And so you can see here we created slices for every edible item and you can see like the cucumber getting cut and kind of all these different items tomato and a bunch of other ones and the nice bespoke art we created for each and every one of them. Thank you, John.
Some items don't afford slicing, like ketchup, that would be super weird.
Who slices ketchup?
So players expect they react in a different way.
So for those edge cases, we had to address them individually because once you have the system, again, it affords a certain thing and players expect that.
So we created the concept of this splat.
When you pour a liquid on top of a stack, a splat appears.
If you try to grab that splat off, it turns back into fluid.
An earlier version allowed you to pick that up.
That felt very bad.
It felt very weird to just have a handful of ketchup.
So you pick it up, it vanishes.
So we also addressed the educational marshmallows, where you could see there, in a s'more, a marshmallow would flatten out.
So we kind of deformed the mesh to make it afford what the player expected out of it.
And to add on to that, when we ended up building the splat thing, it worked great.
And we're like, we solved it.
And one of the first things a player did was, Instead of just building their burger and then pouring the ketchup on top or the barbecue sauce, they would put the burger on the grill and then pour it directly onto the hamburger.
And we're like, well, that's obvious, but that's not a sandwich, that's a burger.
And so we ended up having to do things like going through the game, like which objects afford splats when they're not sandwiches?
And so going to try to like deal with that, and then also deal with the case of like put splats on that, and now I want to put that on a sandwich and have that transfer correctly.
And take the splat off.
Yeah.
So, we have stacking, we have slices, we can build a sandwich, but we still haven't solved the problem of eating it.
So let's talk about that.
Alright, yes, let's talk about eating.
So obviously sandwiches afford eating.
It's the most common use case for sandwiches.
Before in job simulators I mentioned, you couldn't eat them.
So we needed to address this kind of in general.
So eating should be as simple as bringing something to your mouth.
Food should react to this scenario.
And that's what we did in Job Simulator.
There also should be some feedback for that.
So for example, you bring this close particle effects shoot off.
And you can do multiple bites as you're going through food.
So let's talk about how to eat.
And so in Java Simulator, we ended up playing around with byte states.
Not everything had byte states.
Some things did not.
What we discovered, though, in practice was that an object should have at least, that's edible, should have at least one byte state.
So they should take two bytes to complete.
And part of this was because you need to understand what's going on.
If I put something close my mouth and it disappears and there's just a particle effect, it isn't always clear.
It's also much cooler to do things in two bytes.
So that meant that we had to go through the world and make sure every food item also had a bite state.
And so you can kind of see here, this is some food and this is what it looks like when you bite it.
And those particles that end up coming off your mouth location, we also need to make sure we're coloring them related to the color of the item of the food that you ate.
So we play the sound effect, this kind of crunch, and then it kind of plays all together.
And this is for every food item in Odo, we have a lot of them.
Uh, so here's a video of kind of our basic eating mechanism in the game.
You see the color particles coming out the red and the brownish.
Yeah, and coloring them sounds trivial, but then you start thinking about different ways you can recolor things in the world and it becomes pretty tricky.
So edible items can come in many states.
Cooked, sliced, stacked, fluid splat, burned, all sorts of things.
And sandwiches can have all of these various states on them.
So all the systems are going to have to work together to be believable.
And so if you thought stacks and bite states were bad, check this out.
We have a whole tomato, a bitten tomato, a sliced tomato, and then a sliced bite of that tomato, all of which have custom art.
So sorry again, artists.
We did it.
Oh, and by the way, they all have special textures for their burned and cooked states.
And now, but doing this was a huge win, because every item can now be bitten, every item can be cooked, and the world affords it, and it all works because we created this generic system to deal with these things.
So putting our whole sandwich together, we can leverage all these systems to make sandwiches work because we've built them all as these kind of generic systems.
And now, our eating a sandwich becomes an order of operations problem.
So the player brings the sandwich to their face, as you're supposed to do when you're eating.
It iterates through the stack of all items and bites them.
We then ensure the stack is still intact, has proper dimensions, is properly rotated.
Everything is done correct.
and we spawned by particles and play a sound effect and if you look there you can see all these items on this picture are bitten as some of them are sliced items some of them are not sliced items and you know it just.
works to kind of like expand on some of this here.
We also do things like oh, there's like maybe a mushroom in there that in the game is poisonous is going to make you vomit. So when you're iterating through there, you're like, oh, yeah, that's one that's going to make you vomit when you eat this and other things like you can see in the stack.
There's a watermelon slice. We actually had a conversation is a watermelon slice a slice.
Yeah, can you slice it?
Can you slice it?
And then would that be a watermelon slice slice?
The end of the day was it's better for a watermelon slice to be a slice, which means that it should have two bite states to work, which means that the final bite state is just eating the entire thing, which actually is kind of awesome.
So let's take a look at kind of the whole sandwich system coming together.
And here you can see us cooking a bunch of food items, including slices, pouring a splat.
stacking it all together, our lovely avocado toast, and then crunching.
So everything in the world needs to play together.
We keep talking about the affordance of the world, but when you end up building all these systems, there's an interplay to them.
And so here in this image, you can kind of see all those things that we talked about are kind of being spun together.
So we'll leave you on this.
To make engaging VR, you must first build the universe, or at least part of it.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
So we left some time for questions, if people want to come up to the microphones.
Hello.
Hi.
Great talk.
Wonderful information to share.
Uh, I have one question about your zone system.
So in the Rick and Morty game, you guys had this really clever mechanic of having Mr.
Meeseeks come into play and allowing you to grab hard to read op.
hard to reach objects that were right out of your play field.
Clearly, that thematically doesn't work with vacation simulator.
Do you have another way to resolve that sort of issue?
Another set of systems that, yes.
Yeah, so yeah, that's a very good observation.
So yeah, Rick and Morty, we did kind of the very early stuff of doing some zone-based teleportation.
But in the garage, there was only three zones, so we didn't have to deal with a fraction amount of problems with vacation simulator.
And the UCC and TOS, you know, like kind of grab things outside, that was kind of one our work arounds to kind of deal with that.
But yeah, it was very like themed to that.
When we kind of set out to make Vacation Sim, we're like, that's clearly not tenable, and that's clearly not a system that's going to work well and be like super intuitive, particularly over lots of spaces.
So what we ended up doing is we keep track of all the volumes in the game.
So let's say I have a beach ball.
and I have a beach ball in this zone.
It knows it's safely within that zone and is grabbable by you.
So now let's say I go and toss that beach ball and it rolls outside your zone.
We are like, OK, it's now in a state that is outside of your available grabbing space.
So we don't want somebody trying to lunge for it and run into a real world wall.
So then what we do is we determine, once it comes to rest, or close to rest, or times out, what's the closest zone for it to go to.
So sometimes it'll like pop back, and we have all these little markers of where good safe spots are for them to be.
But then that still means I can toss stuff into other zones, and even if it just like trips out of the edge of that zone, it's like, no, you actually meant to be in that zone.
We'll put that in there.
But to compound this problem is sometimes people are like, I don't want this object.
Go away.
And the last thing you want is that object to be like, come right back to you.
So we also have this concept of lost, where it's like, OK, clearly you intentionally got rid of this.
And we're like, just let it be.
Except for the fact of what if you were like, oh I want to build a ketchup sandwich and I took my ketchup and I threw it out in the ocean.
It's like, okay, there's certain things that we want to recall in those states.
And that's just kind of the surface of that problem.
It has been a very challenging problem.
We worked through the entire project on it.
I'm pretty happy with where we ended up.
And there's object homes is another good example.
Like if you're, you know the ketchup bottle, you expect it not to spawn in the safe spot, but to spawn back where it came from.
Yeah.
Yes.
Very complicated.
On the subject of ketchup, can you stack splats?
Yes.
Can you stack splats at the same time?
So the question is, can you stack splats?
Yeah, can you stack splats?
You cannot stack splats of the same topping, but you can grab two toppings and alternate stacking splats.
We tried stacking splats of the same topping, but it's weird to understand in a stream of particles, which is kind of how our fluid system works.
which one, like, that's not a very precise thing.
So yeah, you can kind of like take ketchup and mustard and be like, ketchup, mustard, ketchup, mustard, ketchup, mustard, and make like a really huge, disgusting sandwich filled with ketchup and mustard splats.
And then you crunch.
We found that from a foreign standpoint.
Generally people are like, I want to put lots of different things, and so that's super intuitive and just works.
That's awesome, thanks.
Did you guys do any experimenting with more complex interactions like Enforcing two-handed interactions with heavier objects or things like that?
Yeah, so the question is did we experiment with any two-handed style more complicated interactions the answer is yes The answer is yes, and on April 9th, you should purchase Vacation Simulator.
But no, yeah, we do actually have a few two-handed interactions.
We also are trying to make sure we're accessible, so we're kind of like trying to think around those things.
But yeah, we have done some experimentation.
with that stuff.
I don't think we're ready to, yeah.
There's one really good example that very recently rolled out of the project was the ability to open books.
So back to the topic of affordance.
In Job Simulator, all of our books were just a box, right?
You couldn't open them at all.
And so we followed the same thing through in vacation simulator.
It was like, OK, this is that.
But we discovered that as our world got more rich and more interactive, that more people were like, why?
What am I doing wrong that I can't open this?
And I was like, OK, now that the world affords this, we kind of got to readdress this.
And we've been on and off working on books for three plus years.
But we kind of think we finally cracked the riddle of how to open a book and it is a two-handed interaction I grab a book and open it up and stuff like that And when we discovered it, we're like yay And then we talked to the artist is like wow I got twice the content to build now and it's like great But that's just one of those that's one of kind of many of the experimentations. We're doing in two-handed interactions books Don't sound complicated, but they're absurdly complicated. Yes In that same vein I'm curious how you guys decide where to draw the line like I usually don't grab stuff off a barbecue with my bare hand.
So I noticed you guys didn't have spatulas.
I'm kind of curious how do you decide internally?
So the question is where do we decide to draw the line internally?
And there's a multi-part answer to that.
So one big thing is we can rely on humor a lot, but we can rely on the weird awkwardness of the world, which is why you can just grab things off the grill.
our world doesn't require a spatula for its affordance because it's like, oh, this is this rough approximation.
But the other thing too is we draw the line a lot of times at the holy shit, we aren't going to be able to code this in this time or make this work.
So let's just do a joke.
And like in Rick and Morty, there's a great example where like there's a door, right?
And it's got a doorknob.
we couldn't get rid of that in that game.
That's an iconic part of the world.
As weird as that sounds, like this door is iconic.
But it is, it's in this garage.
And so we're like, okay, how do we deal with the doorknob?
And there's another part of the world, there's another part of that universe that has this concept of real fake doors.
So you go and you reach and you grab the doorknob.
And the doorknob comes off and it says real fake doors and players laugh because you acknowledge that they did something.
So sometimes just the mere act of saying we see you as developers is enough for the players to go like Oh, that's great.
It's doing nothing that's bad.
And then other times we don't know where to draw the line, and then we tumble down a rabbit hole.
And we make water boil from a snowball.
So yeah.
Any other questions?
Hi, you spent a lot of time talking about sandwiches, and I was just curious if you think a hot dog is a sandwich.
We did say, we have the code.
We have the code. It is definitely definitely not a sandwich.
It's not a sandwich. There's no there's no starting stacked item.
Yeah, it's different.
Yeah, fundamentally at a core level.
Don't don't at us.
All right with that.
Thank you very much.
