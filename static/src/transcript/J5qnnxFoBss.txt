This is a session is dark secrets of the RNG as you can see on the screen.
Squirrel introduced you to some concepts with random number generation earlier.
I'm going to expand on some of those.
His was more theoretical and mine's going to be a little more based on application and focus not just on some of the non-obvious problems you'll run across with random number generation and game development, but with some of the non-obvious tools you have to solve those problems when you come across them.
The title Dark Secrets may be a bit of a misnomer.
I feel like Squirrel got into the dark complex math of it quite low level, but we're going to focus on how you use that math.
So who am I and why should you listen to me?
Here's some games I worked on.
There's a lot of them at big studios.
Yeah, I worked on Hearthstone on the prototype.
That was the best known game I've worked on.
I was only there for a year, but of course on digital CCGs, quite a bit of random number generation.
I've worked on a variety of games through my career.
Done some indie stuff, Overland in the bottom right there I'm no longer working on, but was a roguelike that definitely randomly generated levels as a consideration there.
And yeah, still working on digital CCGs at Direwolf Digital in Denver, Colorado these days.
Maybe you've heard of them, maybe not.
But let's get into using RNG.
And let's start with something pretty basic about the types of problems and decisions you'll be, you know, you typically have to solve as a gameplay programmer in this area.
So, I made this game, Kinectro, a puzzle game.
My wife was a big fan of it and playing the prototype of it back in 2011 when I was working on it.
And she came to me with a big complaint that she had, it's kind of a Tetris style game, it spawns a random piece each turn, you have to place it on the board.
And I heard her yelling one night she had gotten the same piece nine times in a row and I realized I needed to fix that bug, which I did the same way that Tetris fixes it, which is to use what's sometimes called bagging.
So this is a pretty basic approach or consideration of randomness in your game.
If you're doing a simple dice roll every turn, like I was, to decide...
which of the six random pieces to spawn every turn, you're gonna get streaks.
You're going to get a very random distribution.
And sometimes you don't want your randomness to be that random.
So a simple thing, it's kind of a design decision really, in a way, or a decision a board game designer would make is to say, well, that shouldn't be a die roll, that should be a deck of cards.
Or in math, the distinction would be to roll a die is to sample from a random set with replacement.
It doesn't change the set to sample one from it.
Whereas a deck of cards, you take one out of it, it doesn't go back, and you're then guaranteeing in your distribution that that won't show up again as a repeat immediately, as a streak, or for a while.
Most games that use bagging would say, have a bag of your random set.
Think of it as a deck of cards, shuffle it.
You could take three decks of cards.
Actually, Vegas does this these days to break up people trying to cheat at blackjack and such.
It's to take three decks of cards or more and shuffle them together and you can no longer, it changes the distribution of the randomness, right?
Specifically, so yeah.
You will see fewer streaks of the same thing showing up over and over, if that's an important consideration, as it was in that case for me.
And you will even out the distribution.
But of course there's an edge case.
How, so if you shuffle three decks of cards together and reshuffle it when empty, off the top of your head, you might think that that means the maximum streak of the same thing you could ever get is three.
You pull three aces of spades out of a deck of cards like that in a row.
But actually, given that you then reshuffle a new deck and put it in there, the truth is there's an edge case, literal edge case at the edge of, or the end of one bag.
you could get 3 aces of spades.
And then at the start of the next bag, you have 3 more.
So that edge case is worth considering, especially in the case of randomness.
Because here's my first dark secret of RNG.
Yeah, every random edge case that can happen eventually will happen, and to a live player in a ship game potentially, if you haven't planned for it and made it impossible.
uh... and yeah you as a game play programmer of the last line of defense for uh...
for that you have to sometimes think like a designer and think about these considerations that would normally i'm currently working with these uh... ccg designers at direwolf and they're extremely mathy but i've also worked with designers who uh... aren't terribly aware of the mathematical implications of this kind of thing, especially, and so sometimes as a programmer, it's your job to step up and say, have you considered this and this, even though it might normally fall to design.
So, yeah.
That leads us to, yeah, I'm referencing here at the top.
There's a play called Rosencrantz and Guildenstern are Dead where the character flips the coin over and over and over and throughout the play, it always comes up heads, I believe.
And that's extremely unlikely, but again, it will happen in a live game that you get like a hundred bad rolls in a row for some player.
If it is mathematically possible, it'll happen eventually.
Oops, you have to consider it.
And that...
The solution to that, this is a blue post from a Blizzard developer, not one I know or anything, but this is how they solved it on Diablo III, a very loot-driven game.
In a game like that, this kind of consideration is a big deal.
So they added what I call a pity timer that they're describing here.
Basically, if there's a low chance of rolling random loot at every chance you have to get loot, And for some players, that just never rolls that way for them for hours at a time, right?
So they put in a fallback, essentially, to say, you know, make sure that that does eventually drop for the player.
Make it work the way you would expect it to work, that the player will eventually get the legendary drop, no matter how bad their luck is.
I want to go over, yeah.
The biggest dark secret of RNG that you'll kind of keep running into, I was gonna expand more on this, but kind of scale back this part of the talk, is just human brains aren't great at dealing with probability in general, in many cases.
They misunderstand it easily, and some of our things, like the pity timer, are there to make.
a player might know, oh, there's a 1% chance for this random thing to drop and still go out and kill it 200 times, and logically they could tell you they know it's possible for it to not drop in all those times, but they'll still complain very loudly about it.
They don't expect it to work that way usually, unless they sit down and think through the math.
And a lot of our tricks of RNG are there to emulate what the players expect and make randomness work in the way that, yeah, we expect, they expect it to work.
Even though it's not mathematically true.
So the pity timer is definitely an example of that.
Of course, players will still always complain that the RNG is unfair and hates them and that they're...
cursed in some way or something.
Actually, I have an interesting story here that I ran across, which was a game called Urban Dead, which I used to play a lot.
It was a web-based MMO.
And it had random rolls when you hit the attack button.
It rolls a dice and decides if you land the hit.
And a player posited this theory that he could get into a groove if he hit the attack button.
and hit, that if he waited eight seconds and hit it again at that time, that groove, stayed in that groove of hitting it every eight seconds, that he would always hit, it would always come up in his favor.
And this is from the talk page then on the wiki of the developer saying, that's not possible, I'm using a random number generator.
If you were in Squirrel's talk earlier...
Maybe this isn't such a surprise, but it turned out the player was right that every eight seconds, he was simply taking the current time in seconds and putting that into rand, I think in PHP, but that probably calls C++ rand function.
And I actually scrolled the, you had a note that like the lowest two bits of that were unreliable.
So every eight seconds, maybe something odd was going on and coming up.
I thought that was pretty hilarious, especially that the developer ended up catching it after first denying it.
But yeah, you can't cede trivially.
And there are cases where we get it wrong.
So it's worth thinking through thoroughly so you don't have a bug like this in your live game.
And players are superstitious enough, basically, without bugs like this sneaking in and the RNG actually being broken.
But they'll always be convinced it is, whether or not it is.
All right, here's a dark secret of gameplay programming.
I'm about to tie all these concepts together.
The designer will always change their minds about everything possible.
This, yeah, is relevant because, specifically to loot drops.
So my point here is that if you're designing a game where loot, for instance, is a major consideration, designers are going to want to tweak that, because that is a big difference on the player experience and on some other things that you may not expect that I'm about to get into.
Yeah, the player experience of Legendaries is obviously a big deal.
They want to be sure that Pity Timer is there and that they will eventually get their Legendary after they kill the boss enough times.
A tool, I think I put this not in the order I expected, but the tool I'm trying to relate here is a tool that will let you control a loot drop, specifically a lookup table.
Yes, a lookup table can describe a die roll, it can describe a deck of cards, or anything else.
A weighted lookup table could be created with a weight, say 52 elements, each are a card, and each card starts with a weight of one.
If the weights can be modified, that turns out to be a powerful tool, you could reduce the weight to zero once the card is drawn, and then reset them later.
But you could represent a lot of other things too.
Of course, here I'm representing dropping a loot drop for a boss.
Common loot has a weight of one.
Uncommon loot has a weight of 0.5.
So half as likely to drop.
And then here what I'm trying to do is implement a pity timer.
The legendary lookup is its own, so first of all, this is nesting lookup tables in lookup tables, which is very useful and gives you to the point of being able to respond to the design asks, gives you a lot of flexibility to refactor or rework one element of the loot drop and add detail to it, as we've done with the pity timer here for the legendary case.
I'll get into an even more complex case on the next slide.
Yes, the dynamic weighting is the other powerful tool of a weighted lookup table, because in this case I'm changing the weight in order to implement the pity timer and make it so that eventually the legendary will drop.
Here I'm passing in, you can see my cursor right, I'm passing in basically callback functions and this second one is saying each time the legendary is not picked, its weight actually increases.
This, by the way, still kind of violates my rule that you should always...
account for every edge case, like, mathematically, you couldn't be 100% sure that the legendary would eventually drop, unless you're also decreasing the weights for the other elements, which would be another way to implement this.
But in this case, I'm just increasing the weight for the legendary each time it is missed, and then when it is finally hit, I reset the weight to the beginning.
It's a simple but nice way, elegant way, and kind of maintainable, which is always a consideration with code.
to implement something like this.
So to continue tying this all together, one of the games I showed back there was, excuse me, an indie game I developed, Angry Henry and the Escape from the Helicopter Lords, part 17, the re-reckoning is the full title, which I'll try not to say again, I don't think we have time to say it too often.
So in this example, I'm imagining that Walrus Copter, the boss from that game, let's, I'm making an Angry Henry.
and the helicopter lord's MMO in this example.
Walruscopter is my boss.
He drops, sorry, he drops loot, either common, uncommon, or legendary.
So this is the naive initial implementation.
And now I've added, you saw the previous example of adding the idea of a pity timer to the legendary case and making it.
Dynamic here. I'm also adding another consideration that I've heard of real MMOs running into with loot drops, which is Hey, that loot drop is an important input to the economy of a game if the distribution So in this example the first naive approach we basically run this for a while on our MMO and then design comes to us with a problem and says we have a problem because the the loot, legendary loot for the knight class is worth a lot more on the auction house than the legendary loot for the ninja class.
And we need to change that.
So suddenly, how do you respond to that ask?
I would suggest you use the weighted lookup table and make a new, sorry, the nested nature of lookup tables and make a new sub lookup table for the legendary case that also says not only do we have this pity timer element, but we have a way to weight the loot for the different classes based on the player distribution, the popularity of those classes.
Because of course, supply and demand, you're controlling the supply of loot to an economy and the demand goes up.
That's a real case I've run into and there can be, you can respond to unexpected cases with cleanly and elegantly and with maintainable code.
by using something like a weighted lookup table.
So I recommend them as a tool.
And here I kind of run through an example of, okay, we're hitting, we're hitting, and you're seeing the weight go up on the legendary case until eventually it finally hits the legendary case.
Who knows how long it would take, but the chances get higher and higher the longer they keep missing it.
And then it would step through to the next level of lookup and say, roll another random number.
Each of these diamonds basically represents a random number roll.
So finally it resolves, and once it does, the weighted, sorry, the weight of the legendary lookup resets.
So weighted lookup tables can be a really powerful tool.
They can really represent any other type of randomness you'd want to do, including the simpler cases.
So they can be fit into this nested tree-like structure very cleanly, and again, in a maintainable way.
All right, so I wanted to expand on something that Squirrel touched on, which is he was giving some examples of using his Squirrel noise library to do different random hashing and specifically had some impressive examples of randomly generating a world.
Yeah, and I wanted to, we decided that I could get into how hashing could be a solution to solve a specific problem in RNG, or an RNG-related problem, which is the possibility of having deep echoes in that kind of world, and I should, I'll explain what that means.
So here's another live case of something strange in a live game.
Some players commenting on the fact that they're wandering through the different random worlds and they came across a city that looked familiar that they had come across in some other random world.
This is possible because usually in these games you roll a seed and give that to the city, and the city generates its content from its random seed, puts that into a random number generator.
and generates all of its content.
In this case, we have a universe.
So I have an example.
I called it the zombie universe, where I said at the top level, we'll have a seed on the universe.
Of course, that's just 42 as a nerdy reference.
It uses that to generate a series of children, the next layer down, which are galaxies.
which then generate solar systems, which each generate planets within the solar system, and then cities, and there's another layer not shown here in my example of villagers.
So, what I'm highlighting in red here is the odd case you could run across if you're doing this.
First of all, to make it clear, the seed on the top level, on each level, is used in the generation of the seeds for the members of the next level, the random galaxy.
Each random galaxy has a seed and that comes out of the RNG of the level above it.
So the problem that happens there is that eventually there's a chance of the random seed being used twice in two different cases.
And if everything beneath it is also generated as a product of that seed, you're going to start to see that everything is the same.
So in this case, everything in these two different solar systems is identical.
On all the planets in that solar system.
all the cities in them, all the cities have the villagers of the same name and occupation.
However we would be randomly, whatever we would be randomly generating, we now have an echo in a game that's supposed to be noisy and random and unpredictable.
Suddenly we have the exact opposite.
So...
We spent, I was working on this even last night, that we finally got to what I consider, to a solution, a resolution.
There are still some caveats with it, but I wanna share some of what we discovered trying to dig in and solve that problem, specifically using random hashing as a tool, which did end up being the best solution for our purposes.
So, essentially, let me show you real fast.
I have stepped out into Unity and I have an example of project running with this problem.
I hope everyone can see this okay.
It takes a second to generate.
Most of that time is going to the checks I'm doing for random echoes.
So yeah, nested structure, solar systems contain planets, planets contain cities, cities contain villagers.
It's a zombie universe, so they're all named Rargba, Agba, Abga, Urga.
I can just keep reading these if it makes you laugh that much.
Burr, that must be a cold, must be on the North Pole.
So yes, we spent a lot of time trying to get around this problem.
And you'll see that there are still cases of cities that have the same seed.
I think cities that have the same name or seed.
In this case, here's a check I was doing that they might have the same seed.
I won't try to get it working again right now.
The point was that we ended up following a different algorithm.
to generate the layer below it, which is not based solely on the seed or any other data given to it by the layer above, which presents, prevents the echo from carrying down.
So we go ahead and use, say I'm generating a planet, I go ahead and generate the content of that planet.
In this example, that's just the name based on the seed.
To generate the child elements, I want to use some other seed that, or some, a seed that is a product of something actually unique to that planet or other element.
So in this example, you can also see there's these seed values.
but there's also an index value.
Very simple, I have three children, they have indexes of zero, one, and two, but then I can use that to uniquely identify, say, this planet.
In fact, yeah, here's two planets that came out with the same name.
Oh, but not the same seed.
Okay, I won't worry about looking for one, but the point is that you can use the index of your layer recursively up the chain up to the top layer to say, well, this uniquely identifies me.
Now, at first, my solution to this that I had 24 hours ago, but that we weren't quite happy with was to say, let's pre-generate all the seeds everywhere up front and guarantee uniqueness with a brute force approach.
That wasn't something I wanted to resort to, for one thing.
We also put a restriction on how many children each layer could have, a max index.
And then we could unique, as long as we didn't achieve an overflow, we could take the unique indices and essentially add them together, multiplying, basically treat it as a base, instead of a base 2 number, a base 10 number, a base max index number, and build a unique integer.
that represented the unique address, the recursive index of that element.
And then once we had that, we could look up.
use that as a lookup to a bunch of, again, unique random numbers.
That was clumsy because it put some restrictions in place.
What we found was better was to take a random hash and to go ahead and take this n-dimensional address, I should call it, based on the things index, and go ahead and put that into a hash function, one specifically, one of the ones that Squirrel showed you earlier.
Yeah, here I'm...
Yeah, this code may not be obvious or self-explanatory if you don't know, like, link in C-sharp, but this is taking all the layers, putting them together into an array, and passing that into a hash function that can take an arbitrary number of ints and a seed and give you an output that is...
Similar to a big random lookup of unique numbers, a big unique, yeah, a big lookup of unique random numbers, but uniqueness is not guaranteed in this case.
So there is still a possibility of collision.
But by making it so that I, as a planet, generate my content.
but based on the seed I was given by my parent.
But when I generate the next layer down, I'm not using something that came down the chain.
I'm using something unique to me.
When I generate the next layer, that breaks the deep echoes from propagating down the hierarchy.
And here's the initializeChildren method that actually goes and gets that seed.
Actually, here I'm using the seed from the top level of the universe.
Whenever I generate the seed for a particular thing, say a planet, this type could be planet or villager or whatever.
Villager wouldn't call this function because it doesn't have any children.
But in actuality, when I was using it, I found, well, I needed to change these seeds per, have a unique seed per layer that I did pre-generate for each type of thing.
So basically my.
planets would end up with the same name if they had the same, if they were the very first planet or had the zero index.
Okay. So here's an example of, yeah, of what you get now, which is, Hey, there can be two solar systems that have the same random seed on them, but they don't have the same content under them.
The echo does not persist.
And I should explain why that's significant because now, of course you don't want the same thing appearing in different parts of your universe.
Now you can have the same thing.
Collisions are going to occur.
Unless you have a perfect hashing function, which doesn't really exist, you're going to end up with the same seed existing on the same object somewhere in the world.
What you want is for it to not persist, and especially, it's all about player perception in the end, right?
If they don't perceive it as random or...
uh... samey than it's not specifically so i could generate a city maybe has the same layout of roads but if it its contents are completely different the player might not even notice that this one superficial thing that makes the city unique is the same as this other city because everything outside of it is different on a higher level everything inside of it is different because we've now broken up the deep echo so uh...
That's important and it is a problem.
I don't think there's a...
So I forgot to explain an important part of this example I'm showing you.
You may have noticed all the seeds are very low.
I'm of course trying to force this problem to happen by limiting all the seeds to be between 0 and 64 or 0 and 63, I should say.
So that exacerbates the problem and really makes it clear that essentially...
Well, first of all I should let you know the caveat of this solution of using random hashes.
Once we moved away from a true, unique lookup table, we had a new problem.
which is that essentially when I generate that lower layer, yes, I'm generating a seed from it, I'm getting it as a hash, or I'm getting it from a hash function, but again, there can be collisions in that hash function.
So we now do have a possibility that two solar systems can contain a set of planets that are basically the same.
They have the same name in my example, or they would have the same position in some other example.
Again, hopefully, Yeah, this seems pretty bad.
Like for a planet to have the same set of cities with the same names is pretty obviously samey to me.
So it seems like, yeah.
For the broad echoes problem, as I call this, I'm leaving the solution as an exercise for the viewer, which means we ran out of time.
I literally got to this point last night in digging through the problem.
I don't think, there is not a perfect solution.
for the problem because of essentially the mathematical nature of if you have a function with a larger number of potential inputs than the potential outputs, you're always going to have the pigeonholing problem.
If you have.
more pigeons than you have holes, eventually two pigeons are gonna go in the same hole.
So one way or another, you're going to run into this.
Pre-generating, either at startup or at compile time, a list of a bunch of seeds that you can be certain are unique works, although again, if you have a need for more output numbers, given the limits of like a 32-bit int, if that's beyond your limitations, you're still going to run into collisions.
But I think we've shown here.
how you can keep a technique for using the uniqueness of a thing itself to keep the hierarchy from persisting down.
It looks like I'm about out of time, but I do wanna recommend two other articles I ran across that were very useful in pointing out these.
tools and recommend They recommend some other ways to use these Dan cook of on his lost garden blog had a really good Post about loot drop tables and how they can be nested and he did them more justice than I go there for more details on That technique there was also a great blog on Unity's blog about using repeatable random numbers and noise and Hashing which it really opened my eyes to how powerful that tool was And you can go there to find out more about those.
Yeah.
And I will put, I'll go ahead and share this example on, what's the name of the website?
Math4GameProgrammers.com.
Yeah.
Thanks a lot.
