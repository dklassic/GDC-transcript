Thank you, Ryan. Thank you for coming to this talk. I like to go kind of quick because I like to pack in as much information as possible so this talk will be uploaded to the vault and I've also uploaded the slides in PDF form so just feel free to let it kind of wash over you.
Also make sure to fill out the survey that I think is emailed to you within 15 minutes, especially if you enjoyed it.
Check your spam folders.
If you didn't enjoy it, it's just spam.
Don't worry about it.
Let's get started.
So this is 1,000 Tiny Tales, Emergent Storytelling, and Slime Rancher.
And who I am is the co-founder and CEO of Monami Park.
I designed Slime Rancher.
I also designed Spiral Knights back when I was at Three Rings and Sega.
And there's me on Twitter, but don't follow me yet. Let me earn it Let me also tell you why I'm giving this talk. I think emergent storytelling is super valuable for indies It is something that effectively generates content And I don't think enough games are doing it.
So as an indie, you can stand out by implementing this in your game.
And it's also what makes games surprising.
And I think that's one of the most important things a video game can be, is surprising.
Is everyone familiar with Slime Rancher?
Show of hands maybe who's played it.
Oh wow, awesome.
Thank you so much.
I still need to introduce it because some people aren't familiar with it.
So it's a first person farming, ranching game with slimes.
The name of the game is.
very apt There's a very heavy physics simulation. It's super chaotic and the world emphasizes exploration. It has a Sort of a original Zelda like quality to it where you kind of just go off wherever you want and you are slowly unlocking portions of the world and so let's see a trailer of slime rancher That's Slime Ranger.
And now next is my favorite slide here.
It was a big hit for us.
This was Monami Park's first game, and it did very well.
And the reason I'm showing you this is, one, I think it sort of validates my talk a little bit, but two, because I think a...
not insignificant portion of our success is because Slime Rancher has emergent storytelling qualities to it.
If you watch YouTube videos of it in action, that becomes very apparent.
I think that's sort of why people enjoy this.
So about emergent storytelling, full disclosure, I am not an expert on emergent storytelling, nor does Slime Rancher execute on it particularly well.
And that is the entire point of my talk.
We did not set out to make a game that is all about this subject.
but it does it a little bit, and it does it pretty well, and we think that that really contributed to its success.
So that's why I want to talk about my experience with it and my opinions on this sort of thing, because I don't think you need to be an expert in this subject in order to implement it well into your game.
But first we need to know what the heck emergent storytelling is.
My definition is when game systems tell a story, often through gameplay that wasn't scripted.
It's often called emergence, behaviors, gameplay, storytelling.
To me, it's all the same thing.
It's all stories.
At least that's how players are going to perceive them.
In reality, it's you cook emergent behaviors into the actors in your game, which generates emergent gameplay, which is then viewed as emergent storytelling.
but the terms are used fairly interchangeably, so keep that in mind.
Regarding these stories too, they can be really short.
We're not talking about Dwarf Fortress levels of long form narrative that are generated here.
it can be a tiny little moment, and oftentimes those moments are the most memorable thing.
They're basically just a sequence of and-thens.
The most common form of emergent storytelling in a game is just sort of a chain reaction of events that ultimately terminates and the player goes, whoa, that was crazy.
So let's look at some games that incorporate this.
These are obviously sort of the heavy hitters here, the creation or base building games.
These games tend to be all about emergent storytelling.
because the player is able to modify the game space.
And when they do that, they're disrupting the space in such a way that emergent behaviors can thrive.
So these are sort of some very classic examples.
Next we have multiplayer focused games.
And the reason why these generate emergent stories is because you have other people in them.
And anytime you have other people in a shared space, that's going to create emergent stories.
Eve, for example, all the best moments ever in Eve that make the news are all these sort of emergent.
gameplay situations that play out in this sort of space opera fashion.
Battlefield, for example, anytime you've...
you know, the designers probably didn't anticipate people sitting on wings of planes and shooting other people. It just happened, and they embraced it.
And then you have this sort of what I like to think of as like the triple-a version of emergent storytelling games these big sandboxes where actors are bumping into the protagonist and The protagonist is causing these chain reactions to occur You know leopards eating soldiers you were about to shoot in Far Cry for example is sort of an example of an emergent behavior And Slime Rancher fits into this, but only a little bit.
And again, that's the point.
But how emergent storytelling fits into a game is the capacity for emergent storytelling in a game is often linked to how much control the designer is willing to give up.
And like I said, a little goes a long way.
So incorporating emergent behavior at all means kind of letting go a little bit.
And here is a great example of two blockbuster games that are very similar, genre definers for their time.
One incorporates, in my opinion, emergent behaviors more than the other, and is way more memorable.
So Call of Duty, great game.
The original Modern Warfare, loved it.
But when you're taking cover and because a jeep just exploded and you got a sniper on you and that every time you play that It's gonna play out pretty much the same. Halo has lots of moments like that There's also a moment multiple times in the game where they say get an award hog and get to point B and you could do that and then it Plays like Call of Duty or you can jump it off a ramp with grenades fused to the back of it to get some extra push and land on the next encounter, just ending it before the designer ever sort of intended.
And that is a great example of people kind of creating their own fun using the toys that the developer left for them.
And for that reason, Halo for me is way more memorable.
So now, how is emergent storytelling used in Slime Rancher, kind of the focus of this talk.
But before we begin, the golden rule is emergent storytelling is a collision of wants and needs.
Wants should always inform needs, positively or negatively.
That is how I think of emergent storytelling in Slime Rancher and all other games.
Your actors have wants and they have needs.
And when those collide, really interesting things happen, really memorable things happen.
So let's cover slime needs.
There's only three, and one of them you're probably not familiar with.
Slimes need to eat, they need to not die, and they sometimes need to go somewhere for no reason, which is a hidden need.
and we threw that in there just to add variance.
So sometimes a slime without you knowing it decides over there is my life now and will do whatever they need to do to get over there similar to getting over there to eat, which has equal drive for them.
So about needs, the more needs you introduce, the harder your system becomes for you and the player to manage.
This is super, super important.
Slime Rancher sort of succeeds because you need to make sure slimes don't die, you need to make sure they eat.
That's pretty much it.
Every other weird thing that the game throws at you is then sort of dealt with while dealing with these two sort of principal needs that the slimes have.
So if you're making a game, or if, for example, we made Slime Rancher where they also had temperature needs, or some were scared of the dark, et cetera, et cetera, you're just turning it into a big list of things to manage that all sort of act independently from one another, because that's what needs are.
Needs are binary.
They either are fed or they're not fed.
Wants are way more interesting.
Wants are, in Slime Rancher, there's a giant list of them.
You can see none of them are essential for their survival.
There's even more than this, but there's not a lot more.
Because this intersection of wants and needs creates other sort of verbs, if you will, that the player is going to perceive as being scripted, and they're not.
That's the whole beauty of emergent behaviors and emergent storytelling.
So, About wants, wants can be hidden or inconsistently executed, but the player should be able to learn them in time, and as I've said, wants make dealing with needs more interesting.
And I'll show you an example of what I mean by this, where these sort of things collide, before we get into the kind of slime wants discussion.
So this is one of my favorite moments from Slime Rancher that was...
caught on film on YouTube and this is a demonstration of people sort of learning the wants and needs in Slime Rancher through discovery. So these guys are eating, the plorts are being collected. I want to maybe start squirting some hens in here and... Pogo fruit? Oh sorry guys.
I have those ethem as well.
No, no, no, why'd you get sucked out?
How'd you get out?
No, they made like a little thing, like they're smart brains.
They use their brains to get out.
Get back in there.
All right, our hens are in here.
I don't know if having these guys in a corral is gonna be good or not.
Wait, they jumped over.
They totally escaped.
They are, it's like they're smart.
Oh, are they trying to get?
That's so cool, man.
These guys are smart and they like, Oh, sorry. Yeah, you guys can hang out in there.
It's like they're trying to get over to the chickens.
So you can't hold the food source too close or they'll escape. This game is so interesting!
So the great thing about that moment is that you can even watch that, play the game for yourself, and because of these emergent behaviors that we have, you're going to get your own version of that at some point in the experience.
You might even have that in mind, and it takes you off guard because...
You didn't quite understand just the limits of their stacking behavior and everything But all most of that is wants the only need that they had in that shot was they wanted that chicken Contrary to at least his belief slimes aren't smart and not by a long shot But they knew they wanted that chicken and they incorporated their wants, many of them, in order to achieve that.
And so the first one is stacking.
And you may think if you've played the game that they do this willingly.
They don't.
When slimes are close together, they may attempt to stack.
They can spawn pre-stacked, and that's sort of our nod to Dragon Quest.
But in the wild, players just sort of look at this behavior as playing, because almost never in the wild are slimes seemingly stacking with a purpose.
But on the ranch, it's escaping.
Yes, it is, because they're just in a confined space.
And so naturally, if they're near each other, they stack.
and then they drift towards a corner because they're a bunch of sphere colliders, and then when they see a chicken, they start trying to get to the chicken by stacking because they automatically are doing that.
They're like Lego blocks, and then they come over the top.
So this behavior was really just a happy accident.
The original design for Slime Rancher had them just jumping higher and higher and higher until they would get out.
and that kind of felt cheap.
They still do that.
The slimes get bouncier the hungrier they are, but the stacking is what really sold it.
And it was because the player can then look at that and say they're cooperating.
but they're not.
They're not at all cooperating, but the player writes that story for themselves.
And that is our little emergent story every time slimes are hungry and they wanna get out.
There's also flying, which is perceived as rescuing a lot of the time.
Foster slimes can fly, simple as that.
But if they're stacked at the time, they will carry whatever is underneath them away.
And there's really no limit to that.
And this was once again a happy accident.
We knew they could fly and then later we added the stacking and then we just saw one of them carrying his buddy away one day.
We're like this is amazing.
But it used to be that they could just fly infinitely and every once in a while they still get away with that and we're kind of okay with it because it just sort of reads as like they really wanted to get away.
Like those two are buddies, they're a bonded pair.
they're going to start a life together and that's okay.
So we love this and half of it, like I said, was accidents and that is sort of half of the player experience as well.
It's going to seem like accidents, these collisions of things.
And we have some that seem kind of, they're more subtle, like stealing.
A tabby slime, if anybody owns a cat, they'll know every once in a while you find this treasure trove of bottle caps and other garbage that they really love.
Tabby slimes do a similar thing.
If they find food that they can't eat, one of their wants that we coded for them is find food I can't eat.
take it to another location where food is.
That is really what makes tabby slimes kind of difficult.
And this plays out in so many different ways and that's the best part of it.
We didn't make the behavior super obvious.
We didn't add any other layers to it.
By keeping it simple, it's like open connection points.
It allows it to receive the connections from all these other wants and needs out there.
The more specific you make something, the more limited it's going to be.
So if like tabby slimes only stole carrots.
at night And blah blah blah like you're the players just going to miss it so you make it as open as possible in the case of stealing he's taking food from one food pile basically to another that he's creating.
If the player observes that alone, they say, oh look, it's just like a normal cat.
It's hoarding treasure. If other slimes are eating at the food pile at point B, the player says, oh look, the tabby slimes, they bring food to other slimes. They're so charitable.
If other slimes are eating over here, they say tabby slimes steal food from other slimes.
They're so sly like that.
And that's the beauty of the system.
They're not interacting with one another.
Slimes just have a want, or a need to eat, so they're gonna be there anyway.
And sometimes they bring that carrot over, and that carrot shouldn't be there because the other food pile was all fruit, and the largos that ate over there then caused a tar outbreak because we've just introduced foreign matter over there.
and so it's, you know, this chain reaction.
Next is explosions, which these probably come the closest to this like highly specific behavior that doesn't have as many connection points, but it's really a player hazard.
These slimes are, boom slimes, are designed to be more difficult.
Their plorts are more valuable.
So it's really kind of a balanced thing.
However, its entire purpose is to just impulse things away.
So it's like the tabby behavior, but it's whatever happens to be around it in all directions.
And that includes actors, that includes resources, it includes all the pieces.
that drive our emergent behaviors.
Everything in Slime Rancher is just driven by slimes wanting to, or slimes intersecting with resources primarily.
And so by adding a slime that booms everything away from it, just view that as chaos, but it has a very, very specific purpose.
And especially in the wild, it causes things to go where they shouldn't.
So in every, out in the wild, in Slime Rancher, we like to think of each sort of room that makes up the world as a cell.
And within a cell, our designers will very specifically put hubs of activity in certain spaces.
And the idea is that...
in the beginning, slimes who want to eat this food and that food and this food kind of stay in that area, but if you sit in the areas long enough or you happen to be close to them and they're live long enough that they're working while you're not viewing it, cross-pollination occurs.
And so when cross-pollination occurs, you get the largos and then eventually you get the tar.
So anytime you enter a cell in Slime Rancher and the tar are already overtaking it, it's because that was sort of cooking in the background long enough for that to happen.
It is never going to just happen.
We don't do it that way.
So stuff like boom slimes that are impulsing things in all directions are causing that cross-pollination to happen much, much faster.
And then the final cherry on top for the design is the backpack itself.
The primary player action in Slime Rancher causes slimes, food, et cetera, to come together and interact further, encouraging emergent behaviors.
So if all other systems that I just described completely fall on their ass, we have.
the VACPAC as the great equalizer, because at the very least, everything that the player does in order to drive the action in the game to accomplish their objectives is bringing slimes and resources together.
And so in doing so...
they're literally just firing off emergent behaviors if they were to interrupt that process at any point, which they do when they see something they want, when they see a gold slime, when a tar attacks them, when they fall off a cliff, when a tabby slime boops their nose.
Any of those things are designed to sort of interrupt that action.
We always sort of saw Slime Rancher as like sort of chaos management, and this is the reason why the vac tanks are so limited.
is that I want the player to say, oh I want some of this, oh I'm all full, oh those guys are about to mix with this, I don't want that to happen, so I'll vac them up and just fire them over my shoulder to get rid of them so I can then get at whatever's happening here.
Well in doing so, you're causing more chain reactions to occur behind you.
So the vac pack really does a great job of accomplishing this.
So finally, I have a couple of thoughts on emergent storytelling.
before I wrap up here.
The first one is that only half the story matters.
So not only can these stories be really, really short, but only half of it actually matters.
Players don't need to observe this chain reaction or this sequence in its entirety to appreciate it.
In the example of the tabby slime, just seeing a tabby slime arrive with a carrot in its mouth to other slimes and drop it there, they just say, well, a tabby slime came out of nowhere and started feeding this guy.
Had they observed the first part of that, they would say, oh wait, no, a tabby slime stole a carrot from another slime and is giving it to another, so maybe it likes these slimes, I'm not sure.
And if they only saw the beginning, they might view it as the tabby slime stole the carrot and probably is going to keep it for himself and went off into some place that I didn't see.
So there's A, B, C there and it doesn't matter which parts you see, it's a story to you.
They'll figure it out later too when they finally observe that tabby slime take care of it from point A to point B, they can then start using that information so now when they are corralling tabby slimes, they have that and they feel rewarded for learning this behavior.
It will still take them by surprise though because the neat thing about wants is they're kind of unreliable.
A tabby slime is not going to always steal a carrot, but a tabby slime when it's hungry will always want to eat.
And that kind of takes me back to our needs need to be limited and they need to be manageable.
Because if they all of a sudden said, well every time I work with tabby slimes now I gotta work on this stealing thing and that it just becomes too much and you're just managing lists at that point.
Finally, players are in on the joke when it comes to emergent storytelling.
Emergent behaviors can disrupt the experience, like truly disrupt the experience.
It can cause the player to die unexpectedly when they were in the middle of trying to accomplish an objective, and that sucks.
But it rarely breaks immersion.
In fact, it is often the most memorable part of the experience.
So an example of that would be if, you were playing a first-person shooter and an enemy soldier that you had in your sights was just walking, running in place, screaming that he was going to kill you, but into a wall, walking in place.
That in a way is a sort of emergent behavior because it wasn't intended, but it is flat-out a bug.
It is not contributing to this sort of surprising event.
So when a player encounters a bug like that, it pulls them immediately out of the experience.
They immediately say, oh, this game was coded so poorly.
This sucks, the AI in this game is bad.
But if instead, let's take a similar sort of broken action where an enemy soldier's screaming at you, he's about to kill you, and he goes to throw that grenade, and another enemy soldier who was trying to come at you gets in front of it and it bops off of his head and it lands at the feet of the guy who immediately threw it, who's still looking seriously at you and then just explodes.
that's totally kind of a bug, or at least not at all intended, and the player will love that.
They will say, they'll either think they were responsible for it, they'll think it's hilarious, but the important thing is it had a beginning and a middle and an end.
When the soldier is just running into the wall, it doesn't have an end, and it just sits there, it doesn't do anything.
So in Skyrim, for example, it's like the, you know, if you can...
use these things that seem like bugs as emergent behaviors.
For example, collecting a bunch of townspeople somehow to fight a dragon.
That was never probably intended, and it looks ridiculous when the barmaid is swinging a rag trying to kill a dragon.
But again, players love that.
That is like a notch in their belt.
That is part of their heroic journey and it's equal to when they were like climbing up a mountain and taking on a dragon solo.
They will remember that the most.
So my final takeaway is that your game will be more memorable, more interesting, and have more variety if you add even a little capacity for emergent storytelling.
It is one of the few ways games can still truly surprise.
So thank you very much.
I think now we're going to take some questions.
Yeah, just make sure you come up to the mics in the aisles if you have a question.
Yep.
And while you're asking your question, ignore the giant chicken.
There is no giant chicken, just ignore the giant chicken.
I'm the first.
All right.
All right.
Please say your name and where you're from.
My name's Stephen Lumpkin, I'm from Montreal.
Nice to meet you.
You as well, thank you very much.
From a production perspective, what do you do when you're talking about how to structure and build?
Man, this echo is like crazy.
So you're trying to plan out what emergent behaviors you want to have happen.
How do you develop that idea and how do you move it into a completed sequence of events the player can discover?
So how do you plan for emergent behaviors in a scene?
How do you build that?
You start with, in the case of Slime Rancher, we start with a single need.
Slime's only needed to eat in the beginning, and then you introduce a few wants, and you see how that plays, and you just grow it.
As soon as you have all your needs accounted for, you're good.
and then you basically introduce these wants and see if it breaks the game.
It's really fun to push it with wants.
The problem with wants though is, per your question, they're actually pretty difficult to test and you have to just kind of live in it.
In Slime Rancher we...
have different ranches set up with different mixtures of slimes and we're basically just waiting for chaos to occur.
But my recommendation is get those needs sorted immediately and it's easy because you'll have the fewest of them and then have a whole lot of fun introducing wants on top of that and waiting for them to completely break your game.
And then you just, you dial it just back from that and you should have a good time with it.
So you start from like, you implement the new behavior and then you see what happens.
Yeah, the first step is trying to force it to happen.
And then we often say, Monami Park, we're going to live with this for a while.
And you just have to kind of keep it in your head, like, oh, now tabbies can build robots when no one's looking and cause robotic cats to attack people or something like that.
I better remember that.
But the really neat thing is you do forget.
And then you're really surprised when it happens in front of you.
Usually when someone shouts in the office, then we know it worked.
But yeah, get it as close to broken as you can.
Dial it back a little bit.
Thank you.
Thanks.
Hi, I'm Colin McComb, creative lead for Torment, Ties of Numenera.
My kids wanted me to come and talk to you about this.
You mentioned earlier about multiplayer being a good emergent experience.
Are you planning on adding multiplayer to Slime Rancher at any point in the near future?
I think we would love the idea, but as we've said, Slime Rancher is sort of deceptively resource intensive.
It is up there in, I would wager, the top five most physics intensive games ever made.
Like it's up there with Kerbal, for sure.
And so because of that, it's really hard to say, and now we're gonna double that.
So you have to have both clients paying attention to this.
So we're kicking around some ideas.
We haven't announced anything yet.
I think, given especially our pedigree, we would love to do it, but we are very, very cautious about promising anything because we literally might reach a point in looking into it where we go, this is physically impossible unless you have a Scorpio or something like that.
And that would be a bummer to say, multiplayer is now available.
10% of Slime Rancher players can actually experience it, have fun.
So, yeah.
All right, awesome, thank you.
No problem.
My kids totally love the game.
Yes?
Mustafa Haque from Bangladesh.
When you observe unexpected behaviors happening via interactions with the system, how do you determine whether or not it's something you wish to keep or patch out?
So how do we determine if the emergent behavior is a keeper?
Going back to at least my my belief game should be surprising if it will generate a surprise and it will Generate a surprise maybe in a different way later on it's worth keeping If it really feels like it's breaking the game or every time this thing crops up it kills the players Progress in some way like it makes it not fun then then we're in trouble, but I firmly believe in that there's an old roguelike term, yet another stupid death, and that is totally applicable to emergent behavior where if you can make it fun enough to fail, you can keep that in there.
But as soon as it just feels cheap, we nix it.
But so far, we really haven't killed too much stuff.
It's just dial it back away from broken, and it's usually worth keeping.
But also.
connection points, having that interact with as many other things as possible.
We probably wouldn't design a slime like the rad slime anymore, which affects the player, and that was it, pretty much.
You know, the new objective is like, it should interact with as many things as we possibly can.
Yeah.
Thank you.
Okay, yep, so we have to wrap it up, but I'll be hanging around, so if anyone has any other questions, I'll be available.
Thank you very much.
