Hi everyone, and thanks for coming to No Mavericks, No Martyrs, Sustainable Collaborative Productions.
If you haven't already, please do silence your cell phone and I'll get started.
So my name is Kari Patel.
I'm a game director and narrative designer at Obsidian Entertainment, and I've been with the studio for eight and a half years.
I've worked on the Pillars of Eternity series on the outer worlds and I'm currently directing Avowed.
Now, in my time in game development, I've noticed a number of trends on teams, as you probably have as well.
So today I want to talk about how we make games and how we can improve the process of making them.
But first, as with any good talk, I want to start with a provocative question.
Is Crunch good, actually?
So I did a little bit of research and it turns out the answer is no, of course it isn't.
But we already know this.
We know it's bad for teams and it's bad for games.
But the real question is, if we know this, why do we end up crunching anyway even when we're trying to avoid it?
So I'm not going to discuss crunch culture broadly because that's an enormous topic.
Instead, I want to focus on two often self-imposed team roles that can inadvertently lead a team into crunch.
and a host of other problems, including misdeliverables, broken content, and fractured relationships.
And these roles are mavericks and martyrs.
It's important to talk about mavericks and martyrs because they can lead to a lot of dysfunction and overwork on teams, even on ostensibly healthy teams that, again, are trying to avoid crunch.
They're also incredibly common.
You've probably worked with several over the course of your career, and you might have been one yourself.
I know I have.
They're common because there are pervasive myths in our industry that disguise their vices as virtues, and all of those myths center around one word.
Passion.
So, I want to be clear, I'm not against passion.
It's important to care about the work we do and the teams we collaborate with.
Many of us are very passionate.
That's what drew us into the industry and that's what's kept us here.
But passion does a lot of heavy lifting when we talk about the way devs work and it leads us to glorify and perpetuate the roles of mavericks and martyrs in some really destructive ways.
So, let me start by diving into these roles and the dissonance between their myths and the reality of what they mean for teams.
So let's start with Mavericks.
Dev A is an outside-the-box thinker.
They don't let things like pipelines and best practices get in their way.
When they have a feature or content goal in mind, they'll find a way to make it work, even if their implementation is held together with silly putty and crazy glue.
This is a Maverick.
This is someone who will find a way to make something work despite tools and processes.
And Mavericks are often seen as being inventive, self-sufficient problem solvers.
But the reality is that the short-term fixes, hacks, and workarounds they create lead to more problems than they solve.
So to illustrate this, I'm going to tell a hypothetical story, and I randomly picked from some of the most common names in our industry.
So we're going to talk about Dan the Maverick Scripter.
So we have our level planned around a handful of quests, and we've scheduled the team's time around working on those quests.
But Dan the Maverick Scripter has one extra quest that he's really excited about, and he wants to get it into the game.
So what happens? Dan sets up and scripts the quest, and because he knows the rest of the team is strapped for time, he takes an initial shot at getting the other work in.
He writes the initial quest giver dialogue.
He's not a narrative designer, but how hard can it be?
He tries propping out the encounter space.
Now, Art doesn't have the assets he really needs, but he's able to resize some and kitbash a few others, and it looks pretty good.
He pulls in some enemies from another level.
He adjusts their stats, and he creates a custom encounter setup to do what he wants.
And so at this point, Dan's taken a few shortcuts, and the work is a little bit unpolished, but it's mostly there.
And this was pretty easy for Dan to do.
So how can it really be that much more work for the rest of the team to just go in and finish what he's already started?
So I want to look at how this becomes a problem.
So the first problem relates to bugs and performance debt.
So for a very silly example, let's say that we're building this scene of some sheep and one white sheepdog, right?
So most teams have recognizable pipelines for turning ideas into placeholders into shippable work.
Now a maverick is often subverting these pipelines, either for the sake of expediency or because they're not familiar with them.
A maverick is also much likelier to see something as close to shippable than it really is, especially if that work falls outside their personal area of expertise or their department.
All of these shortcuts and the placeholder work and the kitbashing that looked good enough to Dan is not necessarily good enough for shipping.
Your maverick could have done any number of things.
They might be using a consumable as a static prop because it looks good, even though now you're violating your game's internal consistency rules and you're going to confuse players.
They might have placed some lights that are now leaking through the level in places.
They might have hacked together an encounter or a cutscene or a scripted moment just well enough that it works 75% of the time.
They might have applied an unfinished texture to a creature variant.
Any number of things.
But in all of these cases, doing the work the right way might actually be akin to starting over.
In which case, the initial placeholder work that the maverick has put in hasn't actually saved time, it's just masked problems.
And that's the other issue with hacked implementations.
Real placeholder work, whether we're talking about VFX or temp textures or temp lighting or stub writing, whatever it might be, is usually designed to be very obvious so that it gets replaced or removed before you ship your game.
But a Maverick's honest attempt at getting something in and getting it representative may be just subtle enough that you're still discovering bugs months after you thought the content was done.
And of course, it's just as easy for the opposite to happen.
If the initial method for getting this content in was rushed, siloed work, then chances are that the intent and the goals of that work were never clearly communicated, and it's easy to overcorrect.
And it's worth calling out that all of this hacked work can lead to a lot of memory and performance issues, and those can be very challenging to track down, especially because the burden of doing so will often fall on your tools and tech teams who may be unaware of any shortcuts happening on the content or gameplay sides.
So the point is, if we're taking all these shortcuts just to get something into the build, the team is going to have to reckon with that debt eventually and Maverick processes all but guarantee that that debt will come as costly surprise as later in development.
And all of these bugs are going to get assigned to other devs on the team to fix and do the real work, which leads to bigger problems.
So getting temp work to shippable means unscheduled work for the rest of the team.
So at this point, we've added one extra piece of content that we didn't plan for.
And it took additional work, not only from the individual driving the effort, but also from other members of the team.
Hypothetically, one extra quest can cost design time to set up and script the quest events, narrative time to write any characters associated with it, combat and systems time to set up encounters, loot, rewards, experience scaling.
Environment art time to set up or reconfigure any play spaces.
Cinematics time to set up those cinematic conversations for those new NPCs you've added.
Lighting time to highlight those NPCs in any new play spaces and account for the environment changes.
And of course, audio and VFX support.
And we're talking about a quest right now, but you can find the same pattern of scope increase in any kind of content or any type of feature.
So the point is, this isn't a free extra quest that one person has squeezed into the schedule.
This is something that has now become a commitment across multiple departments.
And accounting for all of that extra work means that we've put our planned deliverables at risk.
We pulled in additional devs to finish the work and took time and focus off of the work that we were planning.
This problem is easy to lose sight of because it ends up being about all the things we didn't do.
But if you've ever cut one thing because something else got too big, if you've ever shipped content with less polish or iteration than you intended.
If you've ever seen your production slip into alpha, you've probably experienced this.
And the biggest problem of all is the false narrative of success that develops around this.
It's a narrative that says that we succeeded because of, rather than in spite of, Maverick development processes.
Looking back, we end up talking about them as if they're the thing that made the game work and not the thing that almost sank us.
So I want to change gears briefly and talk about martyrs.
So Dev B is a hard worker.
They're not afraid to put in that 110% even if that extra 10 or so percent comes in during early mornings, late nights and weekends at the office.
They give their work their all and they expect the same of their colleagues.
This is a martyr.
This is someone who will get the work done no matter what it costs.
Now a martyr can also be a maverick and vice versa.
Often these habits do go hand in hand.
And these devs sound like they're high performers and critical team members and they may very well be.
But their work habits are likely doing damage over time to themselves, their teams, and their projects.
But I know what you're probably thinking.
These are resourceful, hard workers.
So what's the problem?
So let's tell another story.
So Matt the Martyr wants his level to be the biggest and coolest in the game.
So he spends a lot of extra time on it.
He adds some extra spaces where the rest of the team can place some loot, some additional encounters, some found storytelling.
Maybe even room for an extra dungeon that the dungeon team can put in when they get to their BNC content.
And he spends some extra time, some late nights, some weekends at the office, but he gets all the work done.
And now the team has a level that is bigger than what they planned on, and it needs to be filled with content.
Quests, enemies, loot, everything.
And finished by art.
And yeah, this is maybe a little over time for some of the other departments, but Matt put that work in, right?
So now the team faces a hard decision.
Do we tell Matt to cut that extra content back, assuming that's even feasible at this point?
Do we ship with a sparse level?
Or do we put in the extra work needed to get it done?
And that's the immediate problem.
But there's some bigger long-term problems that are very subtle here.
The first is that you get bad data.
So raise your hand if you've ever looked at your schedule, thought back to a previous project and said, we did twice as much with a smaller team back then, how did we pull it off?
It was probably people putting in unscheduled overtime.
So part of the problem with this is you lose track of how long it takes to really finish something.
And that means that if your five-day task got finished with late nights and weekends, that's extra time baked in that is then going to bake in when you're planning those tasks in the future.
You risk planning and scoping around assuming that you're going to get that time.
And perhaps even more dangerously, the team loses sight of what it looks and feels like to finish content without pulling that over time.
This becomes a kind of muscle memory.
We also enter into an overtime arms race.
This resets the team-wide expectation around work-life balance.
People end up putting up with or even accepting practices that are bad for their personal well-being, their productivity, and their teams.
They do this because they don't want to look bad to their bosses and their colleagues.
They don't want to let their teams down.
And this is especially harmful for juniors and newer team members who may be more susceptible to accepting bad habits as normal if they see them treated as such.
We also enter into a culture of resentment and mistrust.
So the work habits of martyrs and mavericks cast their teammates as obstacles to their goals and ambitions.
They say, I'm putting in the time and effort to get some more cool stuff into the game, so why can't you?
I don't want to share this cool thing I'm working on on the side, because then you're just going to tell me why I shouldn't do it.
By the same token, teammates end up seeing martyrs and mavericks as unpredictable, demanding, and untrustworthy.
They say, well, now I'm working late or cutting something I cared about because you made extra work for me.
Or I'm getting feedback about the quality of my work based on something you hacked in.
And this is obviously toxic.
Over time, this will further reduce open communication and transparency that you need to create a healthy environment and effective problem solving on your teams.
The summary here is that martyrs can be mavericks and vice versa.
These habits really do go hand in hand.
And they can occur on any discipline, on any type of content or feature.
Because the point is that nobody in development does their work in a vacuum.
Anything that one dev does means work for somebody else.
And again, the biggest problem here is the false narrative of success.
In reality, we pulled this off in spite of and not because of our bad habits and careless scoping along the way.
And there's another less obvious problem with all of this, and that's who gets the leeway to be a martyr or maverick?
So one conversation we're having a lot right now is about the need for more diverse seniors and leadership on our game teams.
So we have to be honest about whose ambition is allowed to thrive unfettered and whose is reined in from the start.
When is an overachiever seen as a bold thinker or a star performer, and when are they seen as naive and reckless?
Who shines because they get to pull in an entire team to finish and fix their work?
and whose scope is constrained from the start, and who do we see rise as a result?
The fact is, a superstar's work, especially when we're looking at something on the scale of a full deliverable, not a JIRA task, is really the result of a lot of people coming together.
On a larger team, any area or quest or creature you can think of is not going to be the result of just one person.
You have environment artists, level designers, narrative designers, animators, programmers, audio designers, VFX artists.
All coming together and putting their work together to get that content done.
So when we say that a maverick or a martyr's extra work really paid off, we have to be honest about who else chipped in.
And this isn't about hobbling strong performers.
This is about being intentional about how we spend the time and effort of our people and making sure that good team members get a chance to shine, that all of our team members get a chance to shine.
It's also about making room for good team members rather than merely loud advocates.
Really we want to elevate the best performers on our teams.
And these are the people who are going to be force multipliers for the rest of the team and strong mentors for more junior devs, not the ones who pull recklessly ahead and drag the rest of the team with them.
So I want to propose an alternative, and that's that great teams make great games, not rock stars or ninjas or solo contributors.
I could be the best writer or artist or designer on my team, but it doesn't mean anything if my work can't be used and built on by my colleagues.
Again, nothing any individual contributor does.
goes into a game without the collaboration of their peers.
Great teams are happy, healthy, and engaged.
There is no virtue in late nights, weekends at the office, or destroyed relationships.
There is no virtue in burnout.
Great teams focus on the project as a whole, not on discipline-siloed fiefdoms, not on personal work and vision at the expense of the rest of the project and the team.
So as directors, leads, and producers, how do we make room for great teams to grow and thrive?
We must bust the myths that equate passion with overwork and aggressive ownership, and we must normalize collaborative sustainable habits.
Happier more stable teams can stick together and make better games when we break the cycles that lead to mavericks and martyrs.
So how do we promote healthy sustainable practices that will serve our teams for the long haul?
How do we empower the entire team?
And how do we avoid enabling So, again, I want to be clear.
I'm not bagging on passion or personal investment or creative problem solving.
These are all critical for a team, but they need to exist in a healthy, sustainable manner.
And they need to be deployed for the support of the team and the project, not the advancement of an individual's personal goals.
So how do we get there?
First, we have to be able to explain the problem to our teams and leadership.
And that's why I've spent so much time up to this point defining martyrs and mavericks.
People have to understand the problem before they can solve it.
And the fact is, most people, even martyrs and mavericks, don't actually want to work in a state of constant crunch, conflict, and role uncertainty.
It's really stressful.
But the dynamics that get people there are often easy to miss.
So as leaders and people managers, it falls on us to help people recognize and break out of these cycles.
So how do we explain the problem?
Well, first, again, we recognize that this practice persists because of a false narrative of success.
So we have to be ready to change that narrative.
And that means looking back at past examples and having clear data.
Yes, we love the way this area or this quest turned out in this game, but here's how long it took to do that, and here's what we lost as a result.
It means getting into the details.
If we're adding this additional quest or enlarging the map here, here's what it's going to take, here's where it fits into the schedule, and here's what we bump or deprioritize as a result.
It also means getting to the root of the behavior.
A lot of times maverick and martyr behaviors are driven by deeper-rooted fears, needs, or goals, and we need to understand what those are.
It might be a desire for more autonomy or ownership.
It might be out of fear for the outcome of the project.
Or it might even be misalignment on what done looks like.
But once we understand what's driving those behaviors, we can take steps to target them in a more targeted, manageable way.
We also need to define our MVP.
That's our minimum viable product, and we need to work towards it at every stage of production.
Our minimum viable product is going to be the least amount of work that we need at any stage to evaluate whether we're on track or to unblock other downstream work.
And an MVP-focused approach is likely going to mean a more iterative process that's defined by shorter steps, frequent review, and simple placeholders.
And there are several advantages to this kind of approach.
The first is that we can catch a lot of scope and direction problems really early when we still have time to pivot or scope back.
It also reduces the tendency for people to overinvest in the details, which makes it both practically and psychologically easier to make hard decisions and cuts when we have to.
And it also opens the door for more cross-department collaboration.
And this is really where the magic of game development comes from.
It's not one person putting their heads down and coming up with a perfect, flawless content plan over two weeks all by themselves.
It's people working together across disciplines and adding great ideas to good ideas to lead to stellar content.
That brings me to the next point.
I highly recommend that you establish cross-disciplinary strike teams rather than disciplined siloed departments.
This allows for a better sense of shared ownership for the feature or unit of content that your team is working on.
And it leads your team to look at their process and say, we're all building something together, rather than I do my part and then I kick it over the fence to you and I hope you know what to do with it.
This also makes it a lot easier to catch potential problems.
Artists can look at a blockout or a layout and catch any tile set issues that might crop up.
If you have an animator on your character team, they can identify whether we already have existing rigs or animations that we can share with something new that's being proposed or make small tweaks in order to get us there so that we're saving time and dev resources.
And this also fosters a much better sense of fellowship on the team.
You're much less likely to just dump a bunch of work on somebody who you work with and interact with every day and who you really do see as part of your team than someone, again, who's over the fence.
And finally, this encourages devs to be more mindful of scope and of the implications of their work.
Which brings me to the next point.
We need to frame scope as a shared team responsibility, not as an imposition from producers and leads.
Scope is not a producer or a lead taking your fun away.
It's how we ensure that we have a completed game at the end of production and a team that's ready to work on the sequel or the DLC.
Production processes are not there to stifle creativity, they're how we turn ideas into content and how we ensure that our team's time is well spent.
So we want to give devs the responsibility for sticking to their scope, for keeping their work on track, and making decisions about their work that respect the time and schedule of their peers.
Above all, we want to avoid the learned helplessness that comes when someone says, well you gave me a week and that wasn't enough.
So how do we do this?
At Obsidian we have a philosophy, or a process we call Draw Spider-Man, and I want to give credit to Justin Britsch, our Director of Development, for coining this explanation.
So Draw Spider-Man is how we describe the push and pull between visions and constraints.
So if I tell an artist to draw Spider-Man, that could mean a lot of things.
It could mean a really simple sketch or a very detailed portrait.
And it can be very hard to sync on the exact level of detail we want in something.
with the individual implementer, especially if they're from a discipline or a background that is very different from our own.
So when we task out work, our intended level of detail and complexity may be very different from, again, what the individual implementer is assuming.
So how do we get to the bottom of that?
If we know the time box, we can figure out what is possible with the time we have.
So if I say...
Draw me the best Spider-Man you can draw in a day.
Or show me a blockout that you can do in three days.
Then we see what's achievable, and then we can make other scoping decisions accordingly.
And this avoids both the scope bloat that can come from an individual contributor, assuming that they have to do more or create a higher level of detail or complexity.
And it also prevents us from accidentally pushing someone into a martyr role by demanding too much in too little time.
We also want to keep the team's focus on the big picture.
Scope is not just about what we're saying no to, it's also about what we allow ourselves the time to do in the future.
So we say we can't double scope on this one level because then we won't have any time left for the next one, which we're also excited about.
And finally, we want to lay strong foundations by building time and flex into our schedule and communicating honestly with our teams.
If we want our teams to trust that they won't have to become mavericks and martyrs in order to get a good game done, then we need to show them that we know where we're going and how we're going to get there.
And we will probably have to message this multiple times over the course of development.
At a tactical level, this means reality proofing our schedule, building in sick time, vacation time, meeting time.
We can't assume 100% efficiency from everyone every day.
At a higher level, it also means syncing regularly with the team about the goals and visions for the project and what that means for the work we're doing in the day-to-day.
It also means being ready to have real conversations about hard cuts.
Even if people don't agree with cut or pivot decisions, it's much easier to accept them when they understand the reasons why and when they feel they've been treated with respect.
And ultimately, we want to model the behavior we want to see from our teams.
That means going home on time, setting strong boundaries, communicating well.
and encouraging our teams to do the same.
Ultimately, healthy, well-functioning teams are built on honesty, communication, and respect.
And that's something that we have to build and reinforce with our teams every day.
Thank you very much.
And thanks.
Thanks.
Special thanks to my colleagues at Obsidian and to the Avowed team especially, and to Britt Clifford, Matt Hanson, Tony Hsu, and Justin Britsch for their feedback on this presentation.
And please remember to fill out your evaluations.
And I can take any questions.
Hi, so thank you for the presentations, very insightful.
I had like two questions.
First of all, do you see this behavior only in larger teams or smaller teams?
And if the team is smaller, do you see maybe less of that behavior because of the communication?
That is happening, I guess, faster or more regularly.
And the second question, do you feel like the scaled Agile frameworks help solve some of those problems?
With people, kind of cross-functional teams spending more time together and figuring out that, you know, you adding a quest kind of takes time from all the other stuff that we have to do.
So for the first question, Most of the teams I've worked with have been medium to larger.
So it's hard for me to say how this works out on smaller teams, but I think you can see this happen on a team of any size.
Everybody's scope aspirations are always a little bit bigger than what we have time for, and I think that's true for small projects as well as large ones.
Could you repeat your second question?
About the scaled agile methodology and cross-functional teams?
I'm not an expert on the different production methodologies.
What I think the biggest thing that helps is just making sure that teams are closely collaborating.
Again, if you have these cross-department collaborations where people have more visibility into the effects that their work has on other people working with them.
I think that helps a lot because I think there's a lot of black box mentality that can go in when you're like, well, this is the part I do, this is the only part I see, and then someone else does the rest.
That also helps get around the stuff that, you know, you don't know what you don't know.
And the more you're interacting a little bit with colleagues who can point out like, hey, we built this tool this way, you're not supposed to be using it that way, that's going to create these bugs.
Again, getting that exposure to...
to teams in other disciplines is going to help you just naturally catch that stuff a little more quickly.
All right, thank you so much.
Hi.
Can you hear me?
Yeah.
That was a really great talk.
Thank you so much for giving it, and props for the meme usage.
That's very good.
Let me throw a hypothetical at you, because I like the way that you were talking at the end of the talk about, like, okay, cuts, how do we make hard cuts, how do we communicate hard cuts, how do we, like, kind of engender trust in our teams.
I was wondering, let's say that you have somebody who is new to the team and they don't have that learned trust yet, so you come to a decision point, something that they were championing needs to be cut.
It's just generally the right call.
Not an easy call, but the right call.
Seems like everybody's on the same page about it.
But this new person is new to the team, they don't have the trust.
How do you...
You will build trust with this person over time, of course, but how do you bridge that trust gap in the moment?
I think the best thing you can do is just be very clear and honest with them about the reasons for the cut and how we got here and what you're going to do instead of finishing that content.
You know, so it could be, well, there were some very complex and risky things we wanted to try with this content and we tried them early on and we realize now that what it's going to cost to get this finished and shippable is actually much more than we have time for.
So we took a big swing, we took a big risk.
This one didn't pay off, so we have to cut our losses now.
It could be that you realize that, yeah, I mean, it really does depend on the reason, but I think being very clear about that, I think that helps.
But yeah, I mean, it's always going to be a process, especially if somebody's first experience is, you know, sort of seeing that cut.
Right? What happens though if you say that, but they don't have the same perspective that you do, so they're a little bit disagreeing with your interpretation of what is true.
You're like, in the scenario that you were talking about, we wanted to see if this was viable. We knew it was risky. We've decided it's not viable.
Here are our reasons why. And they go, I don't understand. I feel like that's not true.
Like, how do you work through that with somebody?
I feel like the best thing you can probably do is just get into the details.
So when we say, OK, well, again, we look at the schedule and we say, we needed to be locked on this content by this date.
We're one week away from that date and we still have a lot of bugs and a lot of open questions about this content.
I think you have to kind of bring it down to the math.
There isn't a world in which we get that amount done in this week.
And so rather than continuing to hammer at something that's just not going to get done.
We need to redirect our efforts and our resources.
And you can get into the specifics.
I mean, again, this is a hypothetical, so it's a little hard to, but yeah, you can look and say, like, here are the big things we need to finish.
This might look easy to you from your perspective, but this new gameplay element that we've been trying to implement, this is going to require tools and tech time that we don't have.
Here's what the tech schedule looks like.
They're working on performance and optimization, or, you know.
Again, something else that we can't sacrifice.
And just breaking that down so they understand where those costs and risks are coming from, you know, and why you were at the point of making this decision, especially if you're trying to make it early so that you're not sinking a lot of time into something you know you're not going to be able to finish to satisfaction.
Thank you so much.
Hi.
First of all, thank you for the great talk.
And another question.
So the Mavericks, they're usually highly creative people.
So do you have any means to help them vent out from time to time so they're not feeling squashed with their creativity?
Sorry, could you repeat the question one more time?
So the Mavericks, they're highly creative and when you tell them not to do stuff, do you have any other means during the work hours to help them be creative?
I think I try to, it helps to try to redirect, so you obviously don't always want to be in the position of just telling people here are all the things you can't do.
At some point you want to tell the people here's what you can do.
And so that might mean looking at other examples of really strong content that either the team's already made, that maybe they've made, or that you've made on previous comparable games.
It might mean looking at your gameplay toolbox and understanding all the things that your game and your tools do really well.
And saying, here are the things we can build that are awesome that we know work really well.
Let's not focus on all the things that we can't do.
Let's focus on the things that we can do.
And I think just trying to channel that energy into something more productive rather than defeatism and sort of, you know, looking and saying, well, why can't we do this world of other things instead of here are all the cool things we can do.
Okay.
Thank you.
I think we are at time, but I can step out to the back and continue to answer questions for anyone else who has them.
So thank you all very much for coming.
