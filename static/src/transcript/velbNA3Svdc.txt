Hello. Hello. Hi. All right. Good? Good, good. Okay. Hi, guys.
I am speaking first. I'm Christine Forbus. I'm the ‑‑ oh, all right. Early claps. Go ahead. Bring it on. Yeah.
I deserve it. Keep it going. That's all right. I am the CEO and co-owner of the SuperDuper Game Company.
My husband Garrett and I work on a game called Black Ice. And I wasn't too comfortable using post-mortem because we're still on early access, so I made up mid-mortem. It's not a real word, I'm sorry, but it will have to do. So I want to talk a little bit about our game, how development has gone so far.
what I can pass on to you from what I've learned. So before I get into all of that, I want to get into what Black Ice is. This is Black Ice. It's a cyber punk hacking game. You're a hacker in cyberspace checking down servers of large corporations. So pretty cool. We kind of say it's like borderlands meets Tron as far as visuals and game style goes. So we started development in 2013.
Got green lit in 2014 and moved back from the Bay Area to Austin, Texas where we are now in 2015.
And now it's 2016 and I'm speaking at GDC.
What can I teach you?
Before I was in the game industry, I was a high school teacher, so I kind of instinctively frame everything I do as a teacher.
And I didn't want to come up here and say, this is what I did and it sucked, this is what I did and it was great, and then not put that in anything constructive for you if you want to get into the indie industry.
What can I teach you? First thing, go to conventions. You have to go to conventions.
Because people need to see your game.
Twitter is not enough.
Telling your friends isn't enough.
Your mom telling her friends isn't enough.
You have to get out there.
You have to say, hey, this is my game.
So you need to get eyes on your game.
And don't get stuck into thinking that that means PAX only or GDC only.
Don't shy away from local conventions, conventions that are geared towards things that are outside of video games.
We are games really like kind of cyber punky, kind of retro that you saw, so we looked at classic game conventions.
It's about cyberpunk stuff so we looked at hacking conventions or places that communicate with hackers. Look at the style of your game, the video, the visual styles, the play styles, find those really niche conventions and reach out to them. Even board game conventions I've heard you can do really cool things with. So...
Find the people who are looking for a game like yours.
I don't care how weird your game is.
I don't care how niche you think it is.
There is a human being out there who wants it and wants to play it.
But you cannot trust your audience to find you.
You have to find them.
So get out there and say, oh, you like video games about rabbits picking up carrots?
Guess what?
I make that. And you're going to make somebody's day and that person is going to go and say, I have been looking for a game with rabbits and carrots for months. Somebody made it. Hooray.
Be that person. Be that game developer that can give somebody what they want.
But find them. Because they're not, they don't know. They don't know to look for you.
So do that.
But with that comes this exception.
Limit your storefront presence.
This is something that we did wrong when we first started.
And it sounds counterintuitive.
You think, well, the more places I sell my game, the more money I'm going to make and then I'm going to be a millionaire.
No, you're not. You're really, really not. It doesn't work that way. And so when I say we had too many storefronts, I mean we had too many storefronts. These are all the places that you could get black ice when we first started, not including our own website. And just to kind of break that down, before we got on Steam, this is how our sales looked. And you notice that's only four out of the many that I showed you. There's a reason.
People didn't buy them on that storefront. They're not going to go to all these different storefronts to buy our game. And what's more is once you make it onto steam, that's what it looks like now when we sell black eyes. We replaced the humble widget with the humble store. The only reason that 8% is a big number like 8 is because we were on their front page for a while. So once you're on steam, step back a little bit.
Reasons to limit your store front presence is it's less work for you.
When we first started out, we thought that the coolest thing we could do was push out a patch a week.
So it wasn't just one patch a week, it was one patch a week to eight different store fronts.
And oh my God, did they make sure that was the hardest thing to do.
Because every store front works differently, everyone gets patch notes differently, and so you're pushing a patch to one place, pushing a patch to another place.
Don't do that.
Don't do it.
It's not worth the trouble.
Have one really good build on a couple sites instead of one kind of okay build on like 10 sites.
And also, it's important to build and focus your brand.
Think about...
What you want your game to be and who you want to play it.
And that goes back to conventions.
If your game is educational, then don't worry about all these other sites that focus on FPS's and war games.
Find some cool education sites that focus on maybe selling to teachers or selling to classrooms.
If your game is—if you don't even want to sell it. If you just want to give it away, try looking at charities, non-profits, things like that.
Learn more at www.cdc.gov Make your game tailored to the people you want to give it to.
And doing your homework with storefronts is the best way to do that.
Because there are a lot out there, and they're all going to come out of the woodwork once they see you're selling to one place.
We got emails on emails, Hey, I have this storefront.
Would you like to give me 50% of your earnings and I'll put it on my store?
No.
No, I wouldn't.
And it's tempting.
It's tempting when you're not making any money from your game.
50% of the cut is going to sound really good.
But don't do it.
And I'm going to get to value later, because value is super important.
And that goes in with price perception control.
Out of all the storefronts we had, one of them, they decided when and for how much our game would go on sale.
And that was really tricky.
And we got lucky that we could opt out.
But we had to tell them, excuse me, I don't think I want my $5 game 75% off today.
And then they would, okay, fine.
And so you want to make sure that your game is selling for what it's worth. And again, going back to you're going to get stuck in this mindset of screw it, I need $10 now. Fine, it's a $30 game, whatever, I'll take it. Don't take it. And controlling that price perception, there's a really nifty plug-in that I'm sure all of you know that will tell you where a game is being sold the cheapest.
So it doesn't matter if your game is being sold for $10 on 100 websites. If one site is selling it for $5, everybody is going to go there and buy it for $5. So you need to be in control of how much your game costs. And that goes into something else you should do, which is take yourself seriously.
With the indie scene, nobody wants to be the boss guy. Nobody wants to be the suit or the you need to do this and you need to do that and I'm a professional. It's like, nah, man, I'm just an indie dev. I'm chill. I'm cool.
But people don't want to take you seriously if you're chill and cool.
And then nobody's going to buy your game.
Nobody's going to want to feature your game.
Because then you look like somebody who doesn't know what you're doing.
And so you need to set professional standards.
One of the worst things we did when we were starting out is because we were new.
We weren't comfortable telling contractors that they had a due date.
So we ended up with assets.
We've been developing this game for three years.
Their assets I still haven't received from artists.
I'm just never going to get them. There's a cool poster. Not going to have that. An animation. Nope.
All kinds of things. You need to do that even if it feels uncomfortable. You need to do that. You need to say, no, I'm sorry, I need this by this time. And then once you get that, you'll get comfortable with it. And then it will make everything so much easier for you. Because you need to treat your game like it has value. Because it does. I don't care how terrible your game is.
It could have the worst graphics and it could lag every half second.
But you're putting your time into this game. You're putting your everything into this game.
And if you don't treat it like it's worth something, nobody else is going to treat it like it's worth something either. So you need to step back, look at what you're working on, and say, hell yeah. Like, this is worth it. And I'm going to let other people know that they need to treat it that way, too. So get feedback.
Don't shy away from that. Don't baby your game and coddle it and say, no, it's not ready and go away and you can't look at it.
Like, don't do that. Get it out there. Put it out there early, often, and everywhere.
And when I say everywhere, these are some amazing places to get feedback for your game.
Reddit was one of the best places that we got awesome feedback from our game.
Not just like...
Indie dev or game dev subreddits. We were on the cyberpunk subreddit. Just posting early screenshots of our demo of our earliest build and saying, hey, guys, we make a cyberpunk game. Is this cool? They were like, yeah, this is cool. Find, again, I know I keep going back to it, those really niche communities. Find a small community that fits with the themes of your game and ask them what they think.
Also listen to what people have to say.
It's really easy to give people an opportunity to talk, but it's impossible sometimes to listen to what they have to say.
I had maybe 50 people tell me in a row at a convention that the crosshair in our game is hard to see.
And I was like, no it's not.
It's right there.
I know, but I just, and I'm watching these people who, I'm wrong. They're taking time out of their day to play my game, and they're trying to tell me this part of your game doesn't really work, and I'm like, no, I can see the crosshair.
So 50 people the whole day. And then the second day of the convention, uh, just, has anyone ever told you, like, your crosshair's kind of hard to see, and they're squinting at my computer, and I'm back there like, no, nobody's ever said that to me.
And I went home and we fixed the cross hair. And people loved it. Not a single complaint since. So it's going to bruise your ego. It is. You're going to want to think that you're the best game developer in the world. You're going to want to think that you know exactly what you're doing because it's your baby. But You got to listen. People are going to sit down and the first thing out of their mouth, you need to remember what it is. The first thing they say, good or bad, that's their instant immediate impression, you need to write it down if you're not going to remember. If it's, I can't see your cross hair, the colors don't make sense. I don't get it.
Take the time to talk to them.
What don't you get?
Ask that question.
It's simple.
People love to talk.
People love to tell you what they don't like about stuff.
So take that opportunity.
Be like, good, tell me what you don't like about it.
Make it better.
All of this goes into the most important thing.
Keep your day job.
And I'm not going to be the first indie developer to tell you that, and I pray to God I'm not the last indie developer to tell you that, but you need to keep your day job.
No matter how much fun it is to work on your game, no matter how much time you think you can spend on it, and kind of, like, maybe I don't really need that game job.
And I'm going to give you some real logistical adult reasons why, which is the first one is you subsidize your game costs.
Your game is not going to make money right away. If it makes money at all. Let's be real. So you need to pay for things out of your own pocket. Our first couple conventions, that was all us.
Paying our contractors, paying our artists, that came from us.
You have to have that available.
And if you don't, if you think, I'm just going to quit my job and I'm going to become an indie game developer, it's not free making a game.
It's work and it's money.
And quitting your day job eliminates any chance you have of subsidizing game costs.
Also, you need a safety net.
Your game might fail and it hurts to think about that and it hurts to admit it to yourself and to keep that in your back pocket while you're developing a game.
It could fail.
And if it does, you need to have something that's going to prop you up.
It cannot be your game.
I hate to tell you that and it sounds so negative, I guess, but you need to have something there because that's your livelihood.
You can't play with that just because you want to make a cool...
Platformer. Like, that's not worth it. You get to define success and failure when you keep your day job. If your game fails and you don't get to eat dinner that week, you have failed. You don't get to deny that. You don't get to say that that's not a failure. Because it is a failure.
If you have income already, if you have something to carry you, you get to define what success and failure is.
For us, success was having the game pay for itself.
That's all we wanted.
All we wanted was a game that could eventually sustain itself.
And we got there.
And we got there because we kept our day jobs.
And we got there because we were...
fortunate enough to have that foresight and put ourselves in a position where we could define what success is to us. And I want that for you. I want you to be able to pay your rent. I want you to be able to get your kids a new backpack for school. Don't tie those things to the success and failure of your game because it's not worth it. But it will be worth it when it succeeds.
If you don't have all that stress. So I wanted to end with that because I've heard so many horror stories from other devs losing houses, not struggling to get by, and that does not need to be you. I'm here telling you the industry does not need to be that difficult. If you have a day job, keep it. If you don't have a day job, find one, keep it, and then work on your game. So...
That's all I have to say. That's our game. That's me. That's Garrett. I would absolutely love for you guys to come and find me after this, ask me questions, talk. You can talk to Garrett. He's lead developer so he will be able to answer more technical questions. But you guys can do this. You can do this. If I can frickin' do this and I was a high school teacher, you can do this. Like, come on. Just do everything I said and you'll be totally fine. So, yeah, awesome. Thanks, guys.
applause applause applause applause applause sigh hello This is my, the longest talk in English ever.
Yeah, my name is Sun Park, and I'm a creative director at Turtle Cream.
Turtle Cream is an independent game studio based in South Korea.
And in 2009, I founded our studio as a school assignment project. And since 2011, we've turned our studio into a professional game studio. We made three free-roll games and two commercial games so far. Today we will talk about our latest project, 6180 The Moment.
So in our team, we are just two man team. So our programmer, Youngmin, do code and I do everything but code. Except music. Including us, a total of five people worked on our game 6180 the moon. A different programmer made the original version of game maker and two different music composers created the music.
The game is available on Steam, Xbox One and Wii U so far and will launch on iOS soon.
Android? We don't have Android phone. Sorry. I actually didn't work on, yeah. That's good.
Yeah. So maybe you don't know well about our game. So this is trailer.
As you see, this is a really minimalistic game.
We've connected the top and bottom of the screen so players can jump extremely high through the screen.
Yeah.
I like that sound.
Okay, skip it.
The first prototype was made in a game jam. One day my previous freelance programmer Jerome and I visited my friend's game studio. And then they were doing their internal game jam at that time.
When we arrived there, there was only one hour and 43 minutes left until the end of the jam.
Jerome and I decided to join in that jam. We had less than two hours.
Jerome said, hey, I prepared things to make a platformer game so you should make an awesome idea for it. Within three minutes. Okay. I agreed and started to work on my, our game's main concept. So I'm always interested in making weird fun games. So this time I wanted to make a weird platformer game.
So how can we make a weird platformer game? I have only three minutes. At first I thought that the most essential thing in a platformer game is jump. So I tried to make an idea for kind of weird jumping. Suddenly I realized that all platformer games have a limit on the jump height. It's screen size as you see.
So I wanted to make a jumping mechanic that exceeds that jump limit. Finally we did it by connecting top and bottom of the screen. This is it. The first version is this video. And yeah, it has just four tiny levels. We really love this prototype. So we decided to make a full version.
In this version, this white circle, yeah, it was just circle in the first version, have a skill which make it stop in the mid-air. Yeah, maybe you will see that soon. Yeah.
As you see, it could stop infinitely, but...
In the full version, we changed it as one time for one jump if the player had the item.
So we had a play test with our close friends.
They also like our games.
Of course, there were both good and bad feedback.
But we decided to concentrate only on good feedback.
Why?
Why good feedback only?
First, we are not veteran developers. Though we've made games for several years, I think we are still newbie developers.
If we couldn't make a perfect game, then we wanted to make a game which have its own color.
So I also think maximizing good points goes toward minimizing bad points as well. So to keep improving our game's unique color, I made a game design checklist based in only good feedback. The most important purpose of this list is making every build fun.
This is a part of the list. They are mostly for supporting our main mechanics. Extremely long jump through the screen. Let's take a look at guidelines. We thought our jump mechanic is super unique. But whenever I added new elements in our game, I felt like the game was becoming too normal.
So I boldly quit expanding contents. It was just try to make a tiny sexy game. I wanted to end the game before people felt like our game mechanics wasn't fresh anymore. Actually the average clear time is just around 60, 180 seconds. Like our game title. We didn't intend to make it though. Yeah.
Lots of people said our game is too short, but I think this is totally enough game play length. If we make our game longer with same puzzle elements, it must be a loose a bit. I think Our main mechanics super long jump in connected space would be a little complicated to some players. Actually in the game the player should think before almost every jump.
So the core mechanic is already complicated in our case. To reduce the difficulty and make the game more simple, we used only common puzzle objects like breaking thing, blinking thing, and keep falling thing. They are really common things in platformer genre, so they could support our jump mechanic without elevating the difficulty of our game.
The most important thing while game designing is checking whether game object block both of the top and bottom of the screen. As I've said again and again, long jump in open space is main feature of our game. But if we block the space, it would become a normal platformer. So I always try to keep both top and bottom of the screen open and there is only one exception to this. It was breaking blocks. Because the space would be open after breaking. I really like these breaking ones. In the early stage of development, we said it's sound effect like glass crashing.
But I wanted to make it a kind of music thing after we made background music.
So we made five musical sounds which fit with each BGM and play them randomly when they are broken.
Yeah, like making music through the game play.
So yeah.
Pretty.
We also tried to make all sound effects in-game as a music thing, but as a result we just made only this breaking sound as musical sound.
It was my opinion. I thought that would be more charming if we make only several musical experiences in the whole game.
We didn't want to make a hard game. Basically I hope more people could see our game's ending. That allows us to show the whole thing we made to players. So I designed all levels as fun experience, not as a kind of challenging thing.
For this, placing save points in each level is really important.
Basically I placed save points right before hard challenge, but I tried not to make it too often.
It was just for reducing kind of useless action before retry.
For the same reason, I tried a lot to place spikes in proper location. While making games, if I tried to make the player die, they always die. So I tried to make them to threaten players, not to kill players. In addition to making our games long jump more attractive, I placed the spikes slightly down position on the normal jump path.
It could give a feeling like kind of slightly good jump to players. That makes the player excited without dying.
We had such an interesting experience while we made the second phase of the game. I made about 200 levels and selected 50 levels for the game. At first we set five words which have ten levels and tried to make a different gravity space in each word. Like braid did it well with variety mechanics with time. But everything wasn't good.
As you know, there are tons of gravity puzzles in the world, so it was really hard to make a kind of unique gravity-based puzzle.
One day I just reversed gravity in some levels, and the magic has started.
Frankly, reversed gravity is one of the most popular gravity puzzles, so I didn't expect anything.
But it changed all levels totally different.
It's because of our game's jump height.
In other platformer games, the player's character cannot touch the bottom side of the platform. On the other hand, in our game, the moon can touch that bottom side after jumping through the screen. So in normal levels, some spikes aren't really threatening, but in the reverse gravity, they become critical obstacles in some cases.
So this is normal level.
It's a really tiny level.
And when we reversed gravity, it's a bit different, but yeah.
It have a bit different mechanics in the same space.
So as a result, we've got 53 levels for the second page. We should have to edit a bit several levels, though. As I mentioned when I talked about puzzle objects, if the game mechanic is unique enough, the freshness remains when it mixed with familiar things.
Let's talk about audio. Our game's graphic style is very minimal, so we wanted to fill the lack of visual with audio. Actually, we didn't have an artist when we made this game, so I did the art as well, even though I don't have any professional art skill. That's why our game has only circles, rectangles, and triangles in the game.
When we made the first prototype, yeah, this is one of our games, BGM. When we made the first prototype, we used music from my favorite Japanese artist, Ray Harakami. He died two years ago. RIP.
The music has a kind of space feeling and it was a great mix with our long jump mechanics.
So I requested that kind of space feeling music to our composer, actually my wife.
This game has a bit slower pace because the player should think before jumping.
So I think our slow background music makes the player calm down properly.
And it also makes a great atmosphere when mixed with musical SFX. Yeah. This is good. So now I'll talk about our porting process to different platforms for the last. Basically the Xbox One and iOS version are almost exactly the same as our original PC version. But the Wii U version is a special case.
After launching the original game maker version, we showed our game at E3's Indicate Showcase 2013. We met Nintendo representative there and decided to make a console version. At first, Nintendo proposed that we make a 3DS version, but we heard that making a game for 3DS is too hard.
So we thought that if we port our game to Unity 3D then we could support Wii U and also support many other platforms easier. So we decided to port the game to Unity 3D first. The Wii U gamepad was really interesting.
It was too big, though. We talked a lot about how to use the gamepad screen in our game. Basically, we are always interested in making something new and weird thing, so we didn't want to use it as a typical second screen. We didn't want to make it mini-map viewer or inventory like other games.
Our game featured connected space as the main mechanic so we tried to connect both of screens. So the player can jump from Wii U game pad to TV and vice versa. Yes, super complicated. Of course, that means that all our existing levels didn't work in two screen space so we had to make entirely new levels for the Wii U version.
Frankly speaking, this is not a popular use of the Wii U game pad. We already knew that Wii U players like its TV off feature but we didn't want to quit our experiment as a developer even though we would fail to succeed with this.
We wanted to finish this experiment well. Like the original PC version, connected TV and game pad would be frustrating to some people. So I tried to reduce that confusion. So what? Why? Why don't move?
Oh, sorry. The timing. Let's get back. Okay. So this is gameplay footage of Wii U version. Complicated? Yeah. For example, I tried not to make levels that make player move super fast between TV and game pad. So, yeah. This is gameplay.
We released Wii version several weeks ago in U.S. and Europe. Many reviewers said that this is the best version of 6180 the moon. I think we did well. As a result we made a game which has both likes and dislikes.
Some people said our minimal graphic is really beautiful.
But others said it's like an Atari game.
Also some people said our game is really experimental and unique.
And others said it's another copycat of wee wee wee wee wee or geometry dash.
Anyway.
Yeah. If one of you thought about it, try our game. It's totally different. Anyway, we really loved our game. Why should I care about the taste of other people? I'm Indy. I played hundreds of times while testing our game, but I think this is really great fun game if I play this game again now.
Yes, so we are indie and I love it. That's enough. So the most important lesson we learned is love our own game. This is the most important thing while making games. Every time we decided something we did, something we did what we liked, not what people liked. And we are satisfied with it. And think, I'm not a special person. You too. We are not special. So if we love our own game, others would love your game.
Right? So love your own game. Thanks for listening.
So I'm going to show you how to do this. There we go. What's happening? Can we just do regular? Can you see it? Yeah.
Yeah. Awesome. Hi. My name is A.V.B. and I wrote a game called we know the devil. And I Now you're going to know a whole lot more about the devil.
So let's see.
I've been a games critic for an awful long time, about eight years, which is horrifying.
And I've been freelancing for a lot of different places.
I'm currently running my own alt website called Zeal.
And last summer from June 2nd to September 12th, we conceived of and completed a short visual novel called We Know the Devil.
It's a visual novel about choosing which of the three teens trapped in a weird and unsettling Christian summer camp will hang out and maybe kiss and which one they'll leave out and then what happens when the devil shows up for them all in the end.
You know, normal stuff.
It's heavily steeped in the aesthetic of unbearable midwestern summers, 80 whores moving and growing up gay in repressive religious communities.
It has a unique mechanic to it actually and I'm going to spend a lot of this talk talking about how the mechanic of the visual novel, because visual novels do have game mechanics. Screw you.
They are games. And how that created a structure when it came to outlining and designing this process. Because we made this game in 100 days actually. Which is an awfully short time. Like we didn't have, I pitched the idea on June 2nd. We had an outline a week from then.
And then it was like a whirlwind process.
So I'm going to mostly focus on what I did, because I'm the writer and designer.
I wasn't the programmer or the artist.
There are super wonderful, talented people who can be here today.
And they have their own perspectives.
But I thought that it would be most useful to frame this as a writer.
How did I design this as a writer?
How do you marry writing and game design together?
And I hope that it will become clear that there's a lot of the larger structural ways in which you frame long pieces of narrative writing that are not linear are actually very similar to game design. If you want to write something longer than an essay, at least for me, I have to break it into smaller chunks.
And the structure and the mechanics of We Know the Devil helped us do that. So I'll go into those in a little bit.
So this is my talk, how to finish a visual novel in less than a year if you also know how to do a bunch of other stuff and here's that other stuff. I won't spend too long on this but I want you to know this was my first commercial game and it was also the artist and co-creative director Mia Schwartz's first video game. But neither of us had shipped anything before that. Is it auto advancing? Okay. Cool. I'm watching you.
Um...
But part of the reason why we were able to do that is because we were both experienced story tellers in our own mediums. We had this structure that allowed us to start applying it to games. And we also knew an amazing team, the date Naito who makes visual novels in HTML 5 and they had a programmer, a project manager and gave us a whole bunch of start up capital.
So part of a subtext to this is make sure that you know people.
Make friends. Create like make cool stuff on your own and you might be able to find some really great collaborative partners later on if you prove yourself in your own field even if it has nothing to do with games, they'll be impressed enough by your your gumption and All right so All right, so this is we know the devil or at least this is what we know the devil looks like to me Until a few weeks before we shipped. I wrote this whole thing in scrivener which is a wonderful program that I'll talk more, I'll talk your face off about this. It's really useful because it is a non-linear writing program. It lets you subdivide things. If you look at the left-hand side of the screen and I'm going to zoom in on it, I promise.
You can see how every branch of the game is subdivided into different little folders. So whenever there was a choice, then I could have, I could nestle those choices together.
And it helped for me visually and it also helped for the overall structure. So what I'm going to do is step by step.
Go from the initial concept to the day when I figured out how many words long this visual novel was going to be.
Because all of that stuff, about seven days into development, I was like, this is going to be 15,000 words long.
And I knew that because of the groundwork that I did in the first seven days.
So let's go.
through it. Here's the plan. First there's the premise and the mechanics. Like what defines this game. Second, because this is a character driven game and there are three characters in it, we needed to have a firm idea of who they were, what they looked like, what their personalities were. Because the entire mechanic of the game is putting these characters in a room with each other and seeing You actually have their three main characters and at every choice point you decide which two of them hang out and which one gets left out. And the ending is different depending on which two were together the most and which person was left out the most. So two people will find some sort of happiness with each other and then the one who is left off will have an awesome time with the devil at the end.
So that's it. And then so from the beginning premise and mechanics, the character profiles, and then the chapter branch and editing structure was basically what was the nitty gritty of this bee. And from that we got to go to the word count. So let's start. With the premise.
Because we both wanted to actually complete this game in a month, because we originally did this for the I Love You Game Jam, which is a visual novel dating sim game jam that takes place every month, Mia, my artist, was like, I want something that feels complete. I don't want like a proof of concept or a vertical slice or something like that. Let's make a short story in visual novel form.
And I thought that was a really good idea because I didn't want it to feel unsatisfying. I wanted to take this concept and explore it as much as I could. So that meant like the smallest possible implementation of the single mechanic. There was originally four characters in we know the devil and that's exponentially more interactions between those characters. So we cut it down to three just as a sort of like.
Yeah, three people. That's all you need to have three different combinations. Three different people, three endings, a very easy to see branching structure.
And from that we started coming up with premise and aesthetics that would emphasize the mechanics but also be within our budget. So 80s horror movies. We decided to use realistic photograph backgrounds. We actually took them with a disposable camera in the woods. It was really, really scary. I was sure I was going to get ax murdered. But because of that, we were able to have something that was really thematically resonant but also very easy to do because we didn't have the money for a background artist and we didn't I want to go through all of that effort.
And it's also representative of other indie visual novels, like Tsukihime and Umineko, which are Japanese visual novels, actually do kind of like cheaply filtered backgrounds.
We thought if we unfiltered them, they would stand out more and seem like a really cool artistic choice, instead of like we were just lazy and didn't have a lot of money.
The small cast was also really important because we ran into memory constraints later on. So let's talk about character development. So Mila and I had a really good working relationship where I would basically pitch, I would write up this profile of the character, she would draw that character. And then the two of us would just kind of like spit ball and come up with scenarios for that.
For those characters interacting with each other.
Because Mia's not just like a character designer and a visual artist, she's a cartoonist.
And she does storytelling and comics.
I think comics are such an untapped medium for video games.
It's like we want somebody, we want to like hire the art person.
It's like just draw this thing and I'm going to put it in my game.
My relationship with Mia though was more like we designed the characters together.
We co-created each and every one of them.
Which is why I'm the co-creative lead on this title.
And even though I wrote every single word in this, the characters, the ideas for the characters, their personalities and stuff were shaped very much by Mia emailing or sending me a message in Slack at like 2 in the morning saying like, this vine is totally like Venus!
And those sorts of, like, us kind of like finding the characters and their preferences and their likes and dislikes in the world helped us come up with scenarios for them.
Because the whole game was going to be like, okay, we're going to put these, you can choose between these two characters drinking underage together or these two characters drinking underage together.
What would it be like if they were in that situation?
Part of the reason why that's so, so important...
So this was the first thing that I sent Mia of the scrivener file and the final chapter list is on the other side. We came up with this when Mia was like, I need some sort of structure.
We were going for a horror movie thing. Mia said let's just do it over the course of a single day. And I cut it to 12 hours because it seemed like, oh, an evening.
You know, from afternoon to early morning feels like an appropriate length of time.
And this is a totally arbitrary mechanism.
But it allowed us essentially what is like no different than like a world level structure like you would see in Mario or like virtually any other like platform or something like that.
It's just it's.
Based off of this idea, but it ensures that we have 12 slots.
We have to fill each of those 12 slots with something.
What will go into them?
And how will the dramatic structure kind of like go from there?
I decided that it would be, let's see, character work, throw them together and what happens.
After a while of just bowling together, we decided that like, there's going to be seven different events, because that's going to create an uneven number of choices. And I decided to only have two possible pairings, even though there's three possible pairings for each interaction, I decided to narrow it down to two, because it would force characters to pick pairings that they didn't necessarily want, because they wouldn't always have their favorite pairing available to them, and also because it would be less work.
And that was the really important thing.
Again, it's the smallest implementation of a really potentially huge idea.
And in order for us to explore and see that it worked, we really didn't need to go any more ambitious.
And the less ambitious we were, the more able we were to actually do this.
Like I said, this is about making a plan to write something in one month so that you can actually write it in three and a half months. If we had the more that we over scoped the more we would have over shot this completely.
All right. So word count goals. So I decided on this. We had the setting. We had the chapter structure. We knew that there would be seven different choices. There would be an intro chapter. There would be an extended ending sequence. So I knew exactly how many of those little slots that I made in the scrivener file would exist.
Practically within a few days of coming up with this concept.
Then I decided, okay, what can I actually do as a writer?
I can write about a thousand words a day.
And potentially I can write more than that.
But if you've ever had the experience, I know anyone who's ever written has had the experience of looking at a blank sheet of paper and having no idea what to put there for hours and hours.
No matter how good of a writer you are, if you don't know what you're writing about, You can't do it. Which is a very logical thing. So by coming up with this plan though, I knew what I had to write. I had a series of writing assignments for myself. Every one of those little empty files in the scrivener thing represented a thing that I knew that I needed to write. I needed to write these two characters.
playing truth or dare under this circumstance. I need to write these other two characters playing truth or dare under this circumstance. I need to write them with this scene. There's this ending.
This person freaks out in this ending.
What would this other character freaking out in this ending look like?
Because of all of this visual novels, because of their choice structure, it gives you all of this beautiful parallel structure that's really easy to kind of like see the connections between but also continuously.
inform each other so that you're not reinventing the wheel every time that you open up a file. Otherwise I would have been staring at blank pages every single day trying to decide what happened. Instead I had basically assigned myself homework. I'm really glad that I did this even though you'd think, oh, she can probably write 30,000 words in a month then. But that's what if you miss a day. What if you go on vacation. What if something comes up. I have a full-time job. So there were a lot of reasons why I couldn't meet this goal. As we'll see. So we had that plan.
And it didn't quite work out.
But it didn't quite work out enough that we had a structure for the rest of this to follow.
I didn't hit all of my word counts. I had a lot of metaphors that I hadn't decided what they meant yet.
My approach to world building is that you write the characters interactions and you decide why all that happened later.
Because you don't need like a big wiki before hand.
You get to invent the back story so you invent the back story that makes most sense for the premise.
So let's go into these.
thing by thing. So it's impossible to not overreach is the first lesson. There's no idea that it's not more work than you think it's going to be. Like when I nearly died in the woods for those visible photographs. So the thing about film is that it needs a lot of light to work. And this wasn't a thing that I was thinking about too hard. So I took 20 photographs, there were four usable ones. I had to send the camera to New York because they live in this tiny town in Washington to get the film developed and we had to do a whole bunch of last minute scrambling to get the rest of our art assets. You think something is going to be easy and low cost and it turns out to be very different. However, because we had scoped at this particularly low level, filling in those gaps was much, much easier.
Character breakdown. So a lot of stuff didn't end up the same.
The characters, if you read the character descriptions now, they don't feel very much like the actual characters that are in the final game. But that was fine. It was useful for two reasons. One, so that we had a starting place. And secondly, so that when the characters started moving away from the things that made them interesting, we had this ability to go back to basics.
I'm going way over time. Is that okay? Somebody give me a sign. I'm going to assume it is because you all are still here.
All right. Thank you. Okay. So one of the things that I was Structure. So I'm talking about this as a writer. So what do you do after you hit the word count goal? Well, one of the things you can do is you can write more words. And I did in fact write ‑‑ I found that the goals that I set myself made the visual novel too short. The final product was 25,000 words instead of 15,000. It's like around that. So we added about 10,000 words which was a pretty big addition. But more so than that, I spent ‑‑ So we tried to write it this month. We pitched it to date NIDO. We got all of their start up capital. We got zero minutes.
Are you kicking me off now? Okay. All right. Well, bye.
See you next year.
I would say control what you can control and give yourself enough room to fuck up.
