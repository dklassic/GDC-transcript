All right, here we go.
Good morning, everyone.
Thank you for being here today this early and for your interest in UX and the brain.
My name is Celia.
I have a PhD in psychology and the director of user experience at Epic Games.
And I have previously worked at LucasArts and Ubisoft.
This session is meant as a follow up to my last year at GTC, plus you talk about how neuroscience and UX can impact design.
Since it seemed to generate some interest, I wanted to do a deeper dive on one of the critical aspects of a game's user experience, the UX of onboarding and player engagement.
Lots of stuff to do, so I'm going to speed up a little bit.
As in an introduction, I will quickly reintroduce some neuroscience notion as well as UX notions that I tackled last year, just to make sure everyone is on the same page.
So I apologize for the repetition here.
But the user experience entails how a person perceives and interacts with a product, and the satisfaction and emotions elicited by this interaction.
It takes its roots in cognitive science, human factors, and human-computer interaction.
UX also designates an umbrella discipline whose objective is to evaluate and improve the experience of the targeted users of a product in development.
It includes UX design, interaction design, user research, UX strategy, etc.
Although UX should not be the concern, should be the concern of everyone on the team, not just a UX team.
Quick reminder about how the brain learns.
Discovering and mastering a video game is a learning experience for the user.
It requires mental efforts.
This is why it's important to understand how the brain learns to craft a compelling onboarding experience, one worth putting effort into, one that will matter to the audience.
Anything the brain processes and learns originates from a perceived input and changes the memory of the subject.
The quality of the processing, therefore the quality of the retention, depends highly on the attentional resources applied, which are also dependent on the emotions and motivation felt by the players.
In sum, to improve the experience of the players, video game developers must take into account the perception, memory, and attention limitations of the brain, as well as the emotions and motivation felt by the player.
Disclaimer, this is highly simplified.
The brain doesn't work in that sort of buckets.
The brain is even more complex than game development.
So imagine.
So, regarding perception, I'm going to quickly remind a little bit of each.
Perception involves all the mental processes that allow us to sense our environment and construct our own mental representations of it.
Perception is not a passive window to the world.
It is a construct of the mind into meaningful patterns.
Perception is highly influenced by previous knowledge, expectations, or, like in this example, context.
The input at the center can be perceived as a B or as a 13 depending on the context you read it.
Another example illustrating that perception is subjective.
Contrary to older people like me, the save icon doesn't mean anything to the youngsters, as they do not have a mental representation based of previous experience with this object from the past until they learn what it symbolizes when using a computer.
So designers have to keep in mind that what they perceive might not be what their audience will perceive exactly.
About memory, memory allows us to encode, store, and retrieve information.
There are three components of memory.
You have the sensory memory, it's part of perception.
It retains sensory information for a very short period of time, such as a fraction of a second, without it being consciously processed.
For example, the persistence of vision is due to sensory memory, and it allows us to perceive a 24 image per second display as an uninterrupted animation.
It requires attention for the information to go to working memory, which is a short-term component that allows for temporary storage and manipulation of a very limited amount of new or already stored information.
The system maintains active mental representation necessary to perform a task.
The working memory requires heavy attentional resources and therefore is very limited.
It is also easily disturbed, so please put your phones in silent mode.
Long-term memory is a multiple system component that allows us to store knowledge of events and facts, as well as skills, the know-how, and conditioned responses.
The long-term memory has no known limits in space, and it can potentially store information for a lifetime.
However, memory lapses are fairly common.
Talking about memory lapse, here's the forgetting curve, illustrating how memory retention declines exponentially with time.
Retention of information, especially if not engaging emotionally or meaningfully, can be very fragile.
Some variables have an impact on the strength and quality of the encoding and storage of information, such as the level of processing and the amount of repetition over time.
Not only the brain is prone to memory lapses, but it can also distort memories. Because of these limitations, developers cannot really rely on players' memory. They shouldn't.
About attention, our senses are continuously bombarded by multiple inputs from our environment.
Attention entails allocating more cognitive resources to process selected inputs while the others will be ignored.
That's selective attention.
The brain's attentional resources being very limited, we do not methodically process all the available information from the environment.
We don't scan the environment.
Instead, attention works like a spotlight, focusing resources to process and retain particular elements and neglecting the other inputs, such as when you're at a party.
It's called the cocktail effect.
Cocktail party effect, in a loud party you can focus to just listen one conversation and ignoring all the rest.
Unless there's a fire alarm that rings and it's going to draw your attention away from it.
So when elements are unattended, they're unlikely not perceived at all in a phenomenon called inattentional blindness.
This phenomenon was best illustrated in the well-known gorilla experiment, in which you have to count basketball passes of the white team, leading you to not see the gorilla passing by.
I usually show that video, but now everybody knows it, so it's not fun anymore.
But even though a lot of people now understand that multitasking is a myth, there are still a lot of games that fire multiple inputs at the same time during the onboarding.
Like games where an NPC is talking to you while you learn how to drive a car, for example.
When multitasking or cognitive overload occurs, it affects engagement, focus, and therefore hinders the quality of learning, which can affect your player's engagement.
So I did my session last year showing some UX heuristics or guidelines for usability and for what I like to call the game flow.
I can help you remember what elements are important to avoid confusing your players and to increase the fun potential of your game.
Today we're going to look more deeply into the onboarding, the first time user experience.
So, there you go.
Why is onboarding important?
Here's a chart showing the cumulative playtime in Warframe.
Note that the data is compressed on the x-axis, so the hours are not linear.
It shows that 80% of all players ever kept playing after one hour, which means that in a free-to-play game, you will lose about 20% of your audience during the first-time user experience, the onboarding.
And this is a pretty good example.
Warframe is successful at 2P game.
So imagine how this curve looks like for a less successful game.
I didn't want to poo-poo on anyone, so just to show a dramatic chart, but I do encourage you to go to Steam Spy to figure it out by yourself if you haven't done so already.
Engaging your audience within the first minutes of play is a delicate endeavor and has become a critical aspect of development in the area of free-to-play games.
If your game fails to captivate your audience's attention quickly, there won't be any retention challenges to even care about.
Don't get me wrong.
Great onboarding is not a guarantee for success.
After the short-term engagement, mid- and long-term engagement will be tremendously important, too.
But we'll focus more on the first hour of play here.
So during the onboarding part of your game, you need to get your message right when the players are discovering the game and remove barriers.
Then you have to make sure players can quickly learn the main mechanics of your game and engage them through clear goals and progression path they need to take.
Too often, the transition from the tutorial part to the real game is not engaging because it lacks meaning.
So these elements are not really separated and they're not even linear.
The player can discover, learn, and get immersed at any time, even long after the onboarding part of course.
So it doesn't mean that you should not be preoccupied with motivation mechanisms during discovery part, the very first steps, or that players cannot be immersed within the first minutes of play.
Also, learning is a central part of the onboarding here, but it happens in all the steps, all the time.
Because playing a game is a learning experience.
That's why learning principles are going to be at the core of this presentation.
Bless you.
Developing effective materials that facilitate learning requires an understanding of the principles underlying how people learn which are The first one is the behavioral psychology principle. It's basically conditioning which affects Implicit memory so Pavlov, Skinner, Thorndike, you've heard these names They only looked at stimuli and rest senses, the input and the output Without really bothering with what happens in the mind, the black box Dominance of behaviorism began to wane in the 70s and cognitive psychology took over.
They wanted to look into the black box with an information processing approach.
Perception, attention, memory, all the stuff we just talked about.
They also introduced the notion of an executive control.
Lastly, according to the constructivist viewpoint, learning is a process of people actively constructing knowledge.
So that's people like Jean Piaget, if you've heard of him, or Seymour Papers, research with logo.
You remember the logo programming language with the turtle?
Yeah, I'm not that old.
I guess you are old, like me.
So that's active learning.
Sorry for the lame picture here, but just try to Google search active learning.
There's pretty lame pictures in there.
Anyway, so these different learning principles will be used as perspective throughout this presentation.
So the first part of the talk will emphasize on one of the most important aspects of the brain with respect to onboarding.
Managing the player's attention. Learning to play a new game necessitates a different cognitive effort than mastering a game.
A new player is not necessarily deeply motivated to play and has many new things to understand.
So the game must engage its audience quickly and efficiently.
Every point of fiction can turn the player away at that stage, especially, again, with free-to-play games, since they don't require previous commitment.
You don't buy the game.
So, to remove barriers, you need to manage the player's attention.
To do that, you need to understand how working memory works, the component that stores and manipulates information.
It is composed of two slave systems.
One system is responsible for processing visual, spatial, and motor tasks.
Another is responsible for processing phonological tasks.
So it's nearly impossible to do two tasks from the same slave system.
And usually to show that, I bring people, someone on stage, ask this person to sing a song while trying to spot verbs in a text.
Can't do that at GDC here, but my colleagues at Ubisoft have been...
experiencing that painfully.
And this is where you can actually see that it's very difficult to do two tasks from the same bucket, in that case, phonological task.
You can do one of each.
So I also ask the person to sing a song with lyrics, but instead of spotting verbs, I ask the person to draw a picture.
In that case, it's much easier, but still less efficient as just doing one task.
It can be trained, but only to a certain limit.
When attention is divided, for example, when driving while having a conversation over the phone, it requires more cognitive load to process the different information, therefore leading to more fatigue and mistakes.
The more demanding a specific task is in terms of cognitive load, for example, mental calculation, the less people can allocate mental effort to accomplish another task, even though simple, such as pressing a button when a red light goes off.
By the way, this is a real experiment from Kahneman in 1973.
Subsequently, the more attention is allocated to a task or information, the better it will be retained.
So if you want to teach the player something, you really want to avoid divided attention.
All right, so here's an example of divided attention, or when we try to require divided attention on a player from Fortnite.
Fortnite is an action building game with RPG elements.
It's currently in live alpha stage.
Disclaimer, the footage shown in this video is from UX testing, so it's super compressed because we don't need to have high resolution images.
And of course, it's very early in development.
And in all the videos I will show you, you will see a red circle overlay.
This is eye tracking.
So it's showing where the players are looking at, which is super important for attentional resources.
So in this video I'm going to show you the player chose to play as a constructor so his role is to stay close to the fortifications to repair them and reinforce them.
However, he's running around because, well, smashing zombies is pretty fun.
So you'll see an important message popping at the top telling the player that the fort is being attacked and that he should go back to repair it.
But the player does not even look at this information which is an important mechanic to be successful in the game.
he's not dividing his attention, because dealing with enemies is taking all his attentional resources, just like in the gorilla experiment.
Therefore, it is critical during the discovery part of the game to draw the player's attention to the elements that they need to learn to enjoy their first steps.
Given that all of our mental processes are using the same limited attentional resources, the developers must mind the cognitive load the game demands from the player, especially, again, during the onboarding part when the players have a lot of new information to process.
So according to the cognitive load theory, learning can be hindered if it requires cognitive resources exceeding the working memory limits.
A working memory span is three, more or less, items on average.
An item can be an action or a thought process that requires effort.
It's very vague.
I'm sorry I cannot be more specific than that.
But three items processed at the same time is really the maximum when in learning mode, so discovering everything.
Because new tasks have a much higher cognitive load than familiar or automated ones.
Think about the efforts it took you to learn how to drive the first time.
You really had to mentally process everything to build up attentional resources.
But once trained, like later, when you really have that going, you can just sing along while you drive, it's automated, so you don't have to really allocate too much resources in there.
So the same thing with the player.
The first time he learns about a mechanic, it's going to require a lot of cognitive load.
Later down the line, when the player really had that going, it's trained to doing it, it's more automated, it does not require as much cognitive load.
So three items could be one, using an ability to react to an enemy attack, like analyzing enemy movement pattern, while three, dodging enemy projectile.
That's already three.
So if the controls of your game are peculiar, that would count as another item.
So check this UX test video from Paragon.
So Paragon is our MOBA.
Again, very early, it's UX test footage.
Check out that.
So this is the very first game that the player is playing.
And so it starts.
It's entering the arena right away.
Even though we have that big, flashing red thing telling the player, hey, you can actually have an ability right now.
You can upgrade one here.
But the player doesn't even look at it.
He just jumps right into the arena.
It's flashing, we're really trying to draw attention to that.
And he's trying a few things.
Oh, there's an enemy there.
He's running towards the enemy, trying to figure that out.
Aiming, dodging the enemy's attacks.
Some minions.
Sometimes he's going to pop down, looking at the thing that is going, but he's not even going to process this information at that time.
So during onboarding, minding the cognitive load is critical.
Because the challenge will not be seen as mastery by the player, it's going to be seen as annoyance.
Or worse, the player will be put in a failure comp.
This is likely going to create stress that now we can capture with biometrics tools.
So we can actually see that stress.
And that can lead the player to simply stop playing.
And he's going to blame it on the game.
So F2P game must mine the cognitive load in working memory.
There are many ways to reduce the cognitive load here, such as distribute learning over time, which we're gonna see later.
You can also use affordances to limit the cognitive load.
What is intuitive does not need to be learned, therefore requires less attentional resources to process.
In design, an affordance gives or provides something that helps a user to do something.
Now, four kinds of affordances in UX design.
I'll give an example of each right after.
You have physical affordance.
That's a feature that helps users in doing a physical action in the interface.
For example, a button that is large enough so that users can click on it accurately.
You have cognitive affordance.
It enables thinking, learning, understanding, knowing about something.
For example, a button label that helps user know what will happen if they click on it.
Form follows function is a cognitive affordance.
You have sensory affordance.
It's a design feature that helps users sense something.
For example, a label, font size, large enough to be discerned.
And you have functional affordance.
It's a design feature that helps users accomplish a task.
For example, a sort functionality in an inventory.
There's a subtlety.
The perceivable part of an affordance is a signifier.
So as a designer, you care about placing signifiers to enable the players to perceive the affordances.
So physical affordance facilitates physically doing something, such as a handle on a door physically helps you operating the door.
So you want a button to be large enough to tap on it, to click on it, or you want two buttons to not be too close to each other to avoid misclicks.
See the Fitts' Law for these things.
Or on mobile, interactive areas to be comfortable to reach.
A cognitive affordance, like we saw facilitates or enables thinking about something, they help users to know what to do.
So the pull handle offers both cognitive and physical affordance because it provides a physical means for pulling as well as a visual indication that pulling is the required action.
In Fortnite, you have three different symbols representing three types of materials. Remember you can build and craft.
and how many of each the player has.
So that helps players understand what they can do with it.
Cognitive affordance can go wrong.
This is called false affordance.
It is when the perceived affordance is not the one intended, given the functionality.
Here's the example of the axe in Fortnite.
So you have a lot of weapons and tools.
You actually have one tool that is really effective for harvesting, just one.
It's the pickaxe.
But you have all the other items you can have are melee weapons.
So the axe is a melee weapon.
Of course, originally it was not the design intention to put an axe in the player's hand and say, no, you cannot actually chop off trees with that.
Initially they wanted to have one specific tool for each specific thing you can harvest, like the axe for the tree, the sledgehammer for a wall, and stuff like that.
But it was too demanding, players didn't like that, it was not really fun, so they removed that functionality.
And there you end up with a false affordance because of that, because now players can have an axe, but it has to be used for meleeing and not for chopping trees.
So false cognitive affordance misinform and mislead the players, and then it makes it much harder to teach them the right thing.
And it's frustrating for the players on top of it.
So you really have to pay attention to that.
That's really the sort of things that happen just.
It happens because the design changed, so you have to stay focused on that.
Sensory affordance, easy one, helps players sense in something, seeing, hearing, feeling.
This is what we call the perceptibility of sounds and feedback.
It includes noticeability, discernibility, legibility in case of text, and audibility in case of sound.
So in that case, of course that's a bug, it's not by design.
When you die, you can click to respawn, but the text is hidden behind a health bar, and so the player cannot perceive it.
Also, there's a more subtle one.
In Fortnite, you have a home base and you have buildings.
And these buildings increase your stats, and you can even more increase your stats by slotting workers in there.
So when you click on the plus button there to slot a worker, it was showing the workers you could slot, including the ones already slotted elsewhere.
Suddenly indicated by that red corner mark.
I'm sure you saw it, right?
Of course players didn't see it.
And on this video you're going to see, you'll see the player going back and forth in the two buildings trying to slot a worker, not realizing he's slotting, un-slotting the same one over and over.
my home and work for you elders gone from the hospital uh...
so we have to pay attention to that Functional affordance, this is one that ties usage to usefulness.
This is when you add a functionality, such as sorting and categories to help the player find something.
Filtering, in that example you see, well, there's filtering, but there's also a pinning mechanism, so it can help player craft something faster.
You want something, you can pin it on the HUD so you don't have to do that again and again.
So designers have to make sure, this is really useful, but you have to make sure that the functional affordance you're designing is really gonna be useful to the player, and not just add noise or complexity.
Refer you to the Pareto principle, it's like the 80-20 principle.
80% of the time, people use only 20% of the functionalities.
So be careful not to add too much stuff that peers are not gonna use.
Some interfaces feel easy to use while others drive us nuts and requires manuals or sticky notes, in that example.
It will greatly help remove barriers for your players' first steps in your game if you have good affordances, or should I say, good signifiers.
Because if it doesn't, you'll need tutorial texts, or players will have to make an extra effort, which they often don't, won't do it, to figure out on forums how to use a certain functionality.
So the key takeaway here for discovery is you have to mind the attention limitations and the cognitive load for the player.
Your main objective is to make sure that your game's gonna be easy to make sense of and to remove barriers.
And this is by design, but if it's not by design, remove all the barriers at that moment.
Use, and this is an example, the usability principles.
So we saw a lot of UX design principles, actually the affordances, for example.
All right, so learning.
Although learning by doing is recognized as being one of the most efficient ways of learning, especially when it comes to an interactive experience, tutorial texts are still frequently used to teach the main components of a game.
That's easier.
Research suggests that we learn best when we are cognitively engaged and active, when learning experiences are meaningful and socially interactive, and when learning is guided by a specific goal.
So let's take a look at active tutorials.
So we saw that last time, that it's really, really important.
So I'll put that here again, but I'm using a new example.
The deeper you're going to process an information, focus your attention, the better you're going to learn and retain.
So that means you need to give context to the player.
It means the player should be able to learn by doing.
And you need meaning.
It has to be worthwhile now for the player, for his life, for his mission, for his goal.
All right, so here's an example where you don't have any context.
You cannot do the things you're taught at that moment, and there's no meaning.
So this is again from Perrigan Alpha.
This is the loading screen.
So look at the eye tracking.
So the player is waiting for the game to load.
It's not really reading all the things, and it's especially not reading the match basics.
It is really the most important information for him.
It's the first time he's gonna play the game, so he needs to understand the subtlety of Paragon.
It's just like going back in forest, not really reading, he's just gonna look at a few controls and that's it.
Here's another example when you have context.
So it means that you can do it while you're taught.
But there's no meaning.
So in Fortnite, you can build.
And what we saw is that players were building walls all around them.
And then we're like, oh shit, I can't get out.
You can edit doors in Fortnite, but they didn't know how to do it.
So they were just sliding down a door.
And so we really needed to teach them how to edit doors, because it's really important to enjoy the game.
And so this is what the team did at the beginning.
So you have context and no meaning.
Listen to what the narrator says in that example.
So players found the gate.
You found the gate.
Let's close it.
Press E to deploy your Atlas storm suppression device.
Just a heads up, the husks aren't going to like it when you start closing that gate.
You might want to build up some strong defenses around it to slow the enemy down.
Just this one time, I'm going to project an area you should build in to protect your Atlas.
A good wall is a thing of beauty, but don't forget about doors.
Yes, doors. When there's a wall in the way, choose doors.
Brought to you by the Building Submenu Awareness Society and the letter G.
He heard us?
Of course he didn't do it.
He built that box around the thing he had to protect, and then when the enemies are coming, he's actually like, oh shit, I cannot really see what's going.
So what he did is he placed a stairwell so he could climb up the enemies.
A lot of players were doing that, so we're like, shit, it's not working.
Still, you have context here, but it's not really meaningful.
And there's a lot of information going on here.
So what the team did afterwards, they tried to bring more meaning.
And this is how it looks like now.
It's just beyond this wall.
Let's use edit mode to add a door.
Hit G, click on the center panel and the panel below it.
JL.
Success.
So now we know that the player.
do it. And so it really processed information. It was actively doing it. So this is when you actually have meaning. So you want to avoid that as much as possible. Of course, you cannot avoid that all the time. And you want to try to have more learning by doing. And if you can add meaning, it's even better.
But sometimes it means that you have to put an obstacle in front of the player and he has to overcome it.
And usually players, they hate tutorials and they're like, this is bullshit, I hate it.
But the problem is if they don't have these tutorials, they are more likely to leave the game.
So even if they don't like it, you might have to not make them happy, but at least they're going to learn the mechanics of the game and keep playing.
Another thing to remember here, please, please avoid punishing states during onboarding.
During onboarding only.
And I'm talking to you, Bloodborne and Dark Souls lovers out here.
If it's not clearly the main pillar of the game, punishments, you should never punish while they are learning about something.
You can punish later, it's totally fine, but not while they're learning it.
Why?
Because players who die or are having difficulties during the onboarding are less likely to retain.
This is actually what we found out looking into analytics data from Fortnite's alpha.
without hardcore gamers out there.
So if they were having too much difficulty or dying too often, they were actually more likely to leave the game.
Again, your hardcore players might whine if they find the game too easy in the beginning.
Still, they will more likely keep playing.
So don't get crazy with your difficulty curve.
Learning about the game is already challenging enough for the brain.
But sometimes you just cannot provide context.
For example, in loading screens.
If you use loading screens to teach, which you should, because loading screens are boring, there are ways to make it easy on the cognitive load.
This is a screen, again, very, very early.
PVP prototype. It was the first time the team was actually trying to do a UX test with it.
So they put a loading screen there to teach about how you have to do in that mode.
But the first loading screen, there was way too much information to read.
And it was going too much into details that didn't make sense really to the players or didn't know anything about this mode.
It was too much about the what, not enough about the why or how.
Players were actually looking more at the cool art.
then I'll add the text.
So you want to have like, so again, they just like hack that in last minute to make it, to remove some text and trying to make it easier to understand.
Because of the curse of knowledge, we have a tendency to explain by getting too much into details.
Probably doing that myself today, apologies for that.
So explaining more about how to do all the things instead of mining the cognitive load, explain more about how to do the things.
because you have to mind the cognitive load of the player.
They are discovering all these things, so they care more about the why they're doing it, not about the details.
So if you are using the loading screens, do not explain more than three things, remember the working memory, and try to focus on the why rather than the how, what.
Using looting screens to occupy players is a good thing though, because waiting is painful.
And it is also a matter of perception.
For example, waiting times will seem shorter if there is a progression bar that has animation on it.
If this progress bar accelerates rather than decelerates or stops us, that's dreadful.
So if players have something to do while waiting, it's better instead of looking at an empty screen.
Do use the loading screen to convey information to players, but they won't read it if there's too much.
Or if they do read it, they're not gonna remember it.
So remember the working memory limitations.
Try to stick to three elements to process and focus on the why.
The why, why do you want to do that, the purpose of these things.
It's really meaningful to us as humans.
So think you're onboarding a tutorial through a player's lens.
It's more important to tease to the player the why, the purpose, rather than get into the details.
If you motivate players enough, then they will pay attention on how to accomplish a certain goal.
then they're going to look more into the details and look at the interactive elements they need to play with to get to that goal.
And so when you test your game, also try to see if the players get to the Y.
So show what I do, for example, if they play the onboarding.
And in the survey at the end of their experience, I show a screenshot of the game with an interactive element.
So for example, something the players need to activate to do something in the game.
So I show an image of it.
And I ask them, so what is this?
How did you use it?
Why was it important?
for your mission.
So I also asked the players what was the objectives of the mission.
Did they get why they were doing all this?
Don't just ask them, did you find the objectives clear?
Because they're usually going to say yes.
But if you ask them, OK, so what were the objectives?
They usually don't get it all right.
So always ask them about the purpose of completing a mission to verify that they actually got it.
Always make sure that the players get to the why.
That's really the most important thing.
So, remember for all that you will teach, the deeper the process, the better the retention.
Numerous studies in psychology show that learning is not simply a passive registration of information.
Learning that sticks requires active, mind-zone learning.
Simply put, the more the brain puts efforts into something, the more it remembers and understands it.
So it's nearly scientific, but overall, the more you process information, so if you really practice by doing, or teach others about something you learned, it's gonna be way more easy for you to remember, to retain that information that you just read about it.
So, even with all that science, the players are gonna be forgetting about stuff.
So we need to understand better how memory lapse works.
So if you remember, memory allows us to encode, store, and retrieve or recall information.
Therefore, three factors can lead to oblivion.
It can be an encoding deficit.
This is when the information was superficially encoded because of a lack of attention or because of a failed elaboration process.
So workaround for that is draw attention, make the player process information, do it, like be emotional.
It could be a storage deficit.
The information was correctly encoded, but it weakens with time.
So you need to give, to repeat all the mechanics and try to make them repeat in different contexts, it's even richer.
And lastly, you can have a recall deficit.
This is when the information is available in memory, but it's momentarily inaccessible.
You have a broken link.
So to avoid that, you can give reminders to have the player remember about something.
So here is an example for each deficit.
So for the encoding deficit, here's an example in from Fortnite.
In Fortnite, by design, you cannot repair weapons.
And so we're live right now in early alpha.
And many players in the alpha population are asking how to repair weapons.
They're posting down the forums all the time, like how the hell do you repair weapons?
You can't.
So the team decided to put the player in a situation where the weapon breaks right at the beginning of the game so we can tell them, hey, you cannot repair weapons.
So this is what you need to craft.
So that's the video of it.
Your gun's broken. Your drone can't repair crafted items. So we'll need to craft a new gun.
Let's search the cave for the resources we'll need to craft a new weapon.
All right, so the player experienced that, the weapon is breaking, you hear it, you see it, you can't repair it.
Here's what the player was saying after that experience on the surveys, they're like, I'm confused about how to repair objects in Fortnite, there was no easy way to find how to repair weapons, and you're like, ah, shit, it didn't work.
And this is because of an encoding deficit.
Again, it was not asking the player to put too much, not enough cognitive load into that, and so they didn't really encode it.
That was a beautiful sound it just made.
The storage deficits.
A pinning functionality, for example, allows the player to not store the information about what he needs to craft, but instead always have it on the head, so you avoid the storage deficit.
That's a functional affordance.
and removes memory load.
When it's missing, you don't have that pinning functionality, players actually have difficulty storing the ingredients, even if it's just that one ingredient is just a few numbers to remember.
It's just hard to just remember one number, it's not just one.
So, of course it's not bad design.
Again, it's something that the dev team is hacking through so we can test it.
But here's what happened.
So that's a very new feature.
It's ugly.
It's going to be way better.
But right now it's the only prototype.
So it's the Outpost.
It allows you to upgrade your pickaxe, which is the harvesting tool.
So it's super important in Fortnite.
And so to do that, you need to have ingredients.
And we don't have the pinning right now for that.
So the player has to, it's actually hidden.
There's a lot of problems here.
Oh, we know about this.
And you need to look at the bill.
So he's looking at how many the item he needs.
So he gets it and he goes back.
It's already the third time he's looking at that thing, even though it's not that much in front.
It's just one, he just needs one ingredient.
Goes back, get it, and lastly, he got it.
So you can see that even if it's just one information to retain, it's not too heavy.
I know how to use that.
It's still very difficult to retain that information because you're running around, you're doing a lot of different stuff.
So this is really showing how impactful it can be to have these sort of reminders on the head to have the player not store information.
About recall.
So in Fortnite, in the first level, we teach players how to craft in a deep way.
They have to do it.
So it's learning by doing.
So here's a video of it.
Let's craft a better gun for Ramirez, Commander.
Open your inventory and select the gun sub menu.
Like, active learning.
Good.
Formation is encoded.
I had some great crafting.
Reward.
And then this is what happened about 20 minutes later.
The player is thrown into his outpost.
He loses all his ingredients because he swaps heroes.
But anyway, so this is how it happens.
He doesn't have anything.
And so we drop ingredients.
Be careful.
While it's in flux, your outpost is vulnerable to attack.
So be ready to defend it.
You have to defend it.
I only have a stick, but we're giving him ingredients!
With this you can craft a lot of cool shit.
The player's just taking the ingredients, not crafting anything.
He still has a stick.
And so, a little bit later, he's combating.
He's still just having a stick.
And so this is what the player said at the end.
The student said, I could not remember how to get to the crash screen.
He knew he could do it, he just did not recall how to do it.
So we should have given a reminder after dropping all the ingredients, we should have told the player, hey, remember, press I to get to your inventory and craft a new weapon.
So we saw that repetition is important to remember something.
Remember the forgetting curve.
So this is projected forgetting curve.
So when you teach a feature, you actually don't need to give repetition at the same space.
You can actually space it out.
Teach the feature A, you can give a reminder a bit later.
Because each time you reteach about something, the forgetting curve is getting smoother.
And so of course, in between these lapses, you can teach another feature.
This looks super ugly, but you get the point.
So reminders are more efficient when spaced out, but also when the context does not stay the same.
For example, to teach your players how to use a new weapon, first teach how to shoot still targets, then move in targets, then partly occluded targets, then move in targets while dodging, et cetera.
You need multi-contextual repetition, and you combine with more mechanics to learn.
Alright, I need to speed up.
We talked a lot about cognitive psychology and active learning principles, so let's briefly tackle behavioral psychology here.
to give you an idea of how you can use it.
We're talking about classical conditioning.
It's when two events happen close to each other repeatedly over time.
So you hear the bell, and there's the food going on, and you repeat, repeat, repeat, so then you salivate only when you hear the bell, so that's good.
So you're learning you've been conditioned.
So you can please learn to link these.
How about this sound?
You feel conditioned.
So there's a lot of examples of classical conditioning in game, usually with the music of sound design.
For example, the music stops in some games when there are no more enemies left to kill.
Conditioning can be very powerful to teach some mechanics.
It can work very well, like really to a deep level, especially by associating sound with another event.
So be nice to your sound designers because you need them.
All right, so mind the memory load, mind the memory lapse.
My main objective is to make it easy to learn, to do that deep context and meaning, and use learning principle.
All right, last part.
To truly immerse your audience beyond removing the barriers, you need to mind the game flow, never too easy nor too hard.
Mind the emotions, including the game feel, and motivation.
Today I only talk about motivation, since game studios are increasingly interested in motivation mechanisms.
So motivation is not only cool because you're engaged and you want to do something, it also helps attention.
This is, I'm from cognitive development psychology, and Jean Piaget is a development psychologist who is trying to understand how children learn and how some cognitive mechanisms come to children.
One of these examples is how number comes to children.
So it was using a bunch of tasks to test the kids.
One of these tasks were to put two lines of tokens.
One line with more tokens, but it's more compressed, and another line with less tokens, but more spaced out.
And he was asking kids, so which raw has more tokens?
Until six to seven years old, children are actually choosing the bottom line because they say it's longer.
So they think they have more numbers in there.
So Jean-Pierre Giraud was like, OK, kids are a bit stupid.
I consider them 67 years old.
They don't really have a concept of number.
Until another psychologist called Mellor changed a little bit the task.
Instead of tokens, he used candies.
Exact same thing.
He said to the kids, hey, there are two lines of candies.
Which line has the more candies?
And guess what?
You're going to take that line for yourself.
Surprise!
It succeeded at two years old.
So we learn better when we are motivated, because we pay attention more.
So that's one of the main reasons why it's super important to get your players motivated into learning one of your mechanics of your game.
So, how does motivation work?
It's complex, of course, like anything.
But you have explicit motivation and implicit motivation.
Explicit motivation is you have extrinsic motivation, the rewards, we know about that, you do something, get something.
But you have intrinsic motivation as well.
So.
Players' engagement is typically driven by extrinsic motivation, but players, because players want to achieve external rewards and avoid the opposite, typically the absence of reward.
However, intrinsic motivation is even more powerful for long-term engagement.
Research seemed to indicate that games that satisfy basic psychological needs for competence, autonomy, and lateness, this is a self-determination theory, will more likely be engaging.
So people and players are driven by an increase of their competence, a sense of progression, autonomy, meaningful choices and self-expression, and relatedness to social aspects.
Intrinsically motivating experience are known to be deeply engaging for children and adults alike, as in the experience of flow in which a person loses his or her sense of time while engaged in activity. Rings and meals? But there's also implicit motivation, how dirty little secrets such as life and death drives and power seeking. You surely also have heard of the brain pleasure centered, triggered by learning and novelty among other things, and the brain reward circuitry, well-known by casinos.
So you need to mind all these things.
And again, we're just scratching the surface of them.
But here's an example of how you can do that.
Nintendo is super good in that you can tease the players, because it's more motivating to get a meaningful reward than just a pat on the back, or to unlock an out-of-context achievement.
Tutorial completed.
Congrats.
So an example of Zelda.
This is from Phantom Hourglass on DS.
Before even learning about the existence of a grappling hook, the player starts encountering these poles everywhere.
Sometimes you even see a pole next to a chest you cannot reach.
And then you get the grappling hook and then you have that eureka feeling.
Yeah, this is what the poles were for.
Now I can use that new tool to reach the chest I remember from, you know, 10 minutes ago.
So that's really important in design.
and this is the locks and keys.
Show the locks before giving the keys.
The locks will tease and motivate players to figure it out, give them agency, and once they get the key, it will feel way more rewarding because it's a more meaningful and intrinsic impact.
Here's another way you can simply tease your players.
Let's take a look at Fortnite's HUD here.
So that's the new HUD.
The previous heads from a year ago, you could actually do anything on the head.
You can place your weapons and abilities and gadgets anywhere you wanted.
But we saw that players they were gaining a new ability or a new gadget and they were not even using it So like what the fuck so what the designers did they read it the HUD and they compartmented The different elements you have so you usually don't see the the names It's just when you open the inventory but you see you have one slot for harvesting tool because there's just one harvesting tool and And you have a slot for your weapons, and a slot for gadgets, and slots for abilities.
And this is where you can actually see that, hey, there's another slot that's empty.
It means that I can get something soon.
And once you see that the slot is now full, you are more motivated to actually try this new gadget.
So that's an easy way to get the players motivated, because you can see that it's empty, and then you see that it's full, and so you try it.
So, to get engagement and long-term motivation, you also need depth.
So this is an example of short-term, mid-term, and long-term motivation with Pokemon.
So you see that at the beginning, just to win the match, that's your short-term goal, catch more Pokemon.
Then mid-term goal is gonna be to beat the next trainer and to evolve your Pokemon.
And you always have that long-term goal, you know, get to catch them all and be the elite four.
So that's really important to have these, to convey all this depth.
But the risk is you don't want it to be too complex and overwhelming for the player.
So that's a bit complicated, but you do want to show the depth and the long-term goals.
Lastly, I'd like to do a quick declaration on social impact on learning.
Humans are highly social creatures.
This is how we got to survive.
Overwhelmingly, research and education has found that cooperative and collaborative learning environments are optimal.
So games in general, and multiplayer games in particular, can really benefit from social learning.
But simply having a social partner is not enough though.
The social interaction has to be of a high enough quality that it does not detract from the learning situation.
So a good way to do it is mentorship in games, such as EVE and Team Fortress 2.
So think about how you can meaningfully enable social learning in your game, or even outside of the game.
After all, social learning with Minecraft happens mainly outside of the game, on YouTube or Twitch.
So.
To get to immersion, mind the emotional response, the complexity versus depth.
The main objective there is to tease the player, to show the progression path, and you can use motivation principles.
Again, sorry, I'm just going through all that very quickly, but just to give you an overall understanding of this.
So let's wrap this up.
Research in science of learning suggests that there are three kinds of engagement.
Behavioral engagement, it's like following the rules and instructions.
So in our case, it's very close from removing the barriers to making sure the game is usable.
Cognitive engagement, investment in learning.
active learning, and emotional engagement, affective reaction, which is at the core of motivation.
So each type of engagement is critical for learning because they all foster staying on task, staying engaged.
That's why you need to keep in mind these elements.
As always, keep in mind also the limitations of the brain and you can use UX guidelines as a checklist.
But this is just a checklist.
These are just ingredients.
It's not the recipe.
I'm sorry.
Sadly, all this knowledge can only get you that far.
What we saw are ingredients again.
It's not the recipe.
The recipe, this is what you're going to have to figure out by tweaking the ingredients.
Supercell recently said in an interview that it killed 14 games before it was able to successfully launch its fourth game, Clash Royale.
Fourteen.
This is another example. This is showing League of Legends beta versus now.
You can see they had a very huge and awesome UX team there, and you can see all the iteration that went through to get there.
at least with these ingredients, it's gonna save you time and have the right mindset to progress faster through iterations.
So, good luck.
That's it. I hope this talk was useful to you.
I'll post these slides on my blog, Ace AP, and you will find the references to all the research I was talking about as well.
I'd like to warmly thank the Fortnite and the Paragon teams for letting me show their rough design and artwork.
A special thanks to Pete Ellis, our art director on Fortnite, who I know is dying a little bit inside each time I'm showing early artwork.
Yes, he lets me do it.
A big thank you for you all for waking up early and to share some UX love with me.
So thank you, thank you very much.
