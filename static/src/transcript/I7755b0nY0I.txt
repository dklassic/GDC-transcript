Hello and welcome to this sort of virtual GDC presentation beyond games as a service with LiveOps.
We're going to get started right away.
One of the benefits of doing this virtually.
So we'll start. I'm going to introduce myself.
My name is Kristen Cox.
I've been making games for a little over 17 years.
I've mostly worked as a game designer and a game director.
And I've spent pretty much my entire career making large scale MMOs.
So I worked at Walt Disney Internet Group, on the Pirates of the Caribbean Online.
I then worked at Nexon America, where I operated the global version of MapleStory.
And then I worked at ArenaNet.
And I came on to ArenaNet to help develop, launch, and launch Guild Wars 2.
and then I stayed with Guild Wars 2 through to large scale expansions and then also the launch of Guild Wars 2 in China.
A little over a year ago, I left ArenaNet and I came to join Microsoft at Xbox.
Currently the director of live operations for Xbox Game Studios Publishing.
And one of the biggest reasons I stepped away from development and more into publishing was that I care really deeply about live games.
and the way that the industry is moving forward with live games, especially in the AAA market, and I wanted to take on a role where I would have a larger purview and touch more games.
So at XGS Publishing, I actually work with a lot of different game teams on helping them understand how to do great live games and how to make their games successful after they're live.
So...
Today I'm going to talk largely about LiveOps, like what it is, how you do it, and also some of my own personal experience designing games around it.
But mostly this talk is about why LiveOps matters and what it can teach us about designing games for modern audiences and how I think it can help us break through the limitations of games as a service.
And I'll talk a little bit about what I see as the limitations of the games as a service ideology for design.
But before I dive...
into all of that.
I'm gonna start with some context.
So we're all on the same page.
So this is some fancy numbers about the games industry.
Basically, the games industry today is really, really big.
Last year generated about $140 billion in revenue.
That makes it really one of the biggest entertainment industries in the world, far outpacing things like film and television and most other traditional media.
There's two billion gamers in the world.
What that means is two billion people touch games on a regular basis in the world.
So that also, of course, expands to being global.
Games are everywhere.
Pretty much everywhere you go in the world, you're going to find games and even more specifically, video games of some kind.
Now, you're all in the video games industry, so you probably know this already.
This may seem like, yes, of course, games are a big deal. Of course, they are.
This, if you've been in the industry for a while, you know that this has not been true up until pretty recently actually, and games have changed a lot in the last 30 years. So this is just a graph looking at the size of the industry. We're just sort of using revenue as one thing to look at the size of the industry, but it's, I think, tells a pretty compelling story. The industry has seen exponential growth in the last 20 years.
So, you know, there's a little up and down starting in the 70s and 80s, but really it starts to explode right around the turn of the century.
And that growth in gaming is intrinsically linked to the growth of connectivity in the internet.
And that sort of led to this big boom in gaming, which also subsequently led to this big explosion in mobile games, which is sort of see that part of the industry get bigger and bigger and bigger as mobile games and internet, you know, internet connectivity, even in our pocket, goes up and up and up.
So this reality that games industry growth is intrinsically connected to the growth of the internet has led to this narrative about the games industry that's really deeply impacted the way that we approach game design, especially in the last 10 years.
And that narrative is that this growth was unlocked when we shifted our design focus from games as a product, right, these are discrete packaged goods that are designed to be consumed, And instead we started thinking of them as services.
So evolving applications that are designed to be engaged with over and over and over again.
So this narrative is pretty compelling, right?
When we look at the industry today, we do see that this shift has happened.
And when we look at the most successful games today, they're very rarely product style games.
And so that also makes sense with this narrative.
If we look at the top grossing games worldwide from 2017 to 2018, we see a list full of games that have service components.
And I think what really drives this point home is when we look at the fact that these games are actually very similar in 2018 as they were in 2019.
And we're still kind of sorting out the details of 2019, but I think it's...
Fair to say that almost certainly 2019 will share many of the same games as well.
And this really speaks to the idea that these games are not consumed media.
They are really meant to be played over and over and over again.
And in fact, every single game on this list has a service component.
And many of them are also mobile, which sort of speaks to the state of the industry today and the way that the industry is composed today.
So that all seems to make a lot of sense, right?
So this growth really does come from this shift in design focus, from product to service.
My problem with this narrative is that it isn't really about design.
Even though a lot of times design gets cited in this narrative, in our shifting focus, it isn't a design narrative.
This is actually a business narrative.
This is a story of how our business focus changed over the last 20 years.
And you can see that when we look at these two approaches, right?
And we look at what it really means to be games as a product, and then what it means to be games as a service.
These philosophies really speak to how games are delivered, not how they are designed.
The two approaches definitely suggest things about design, and I think we can all imagine games that really only work in one category or another.
But they're more...
about the way the game is sort of delivered to players and the kind of business you're going to do with the game and a lot less about really what the game is.
Even so, more and more game teams are being asked every day to make games as a service games. Even design teams are told design a game that's going to be a games as a service, design a game that's going to last forever. Things like that are being asked of these teams.
because there's this idea that games as a service tells us all kinds of things about design, but there's a huge limitation to trying to apply a business strategy to game design.
And I think we're starting to see that, a little bit of friction happen there between sort of player expectations, disconnects between what the game delivers and what sort of players expect.
And a lot of that I think can be traced back to attempting to sort of.
force design through this business lens.
When we look at games as a service, they tell us, it tells us a lot, games as a service has a lot to say, but it's primarily focused on good service quality and optimizing experiences through iteration.
What it doesn't really have is a lot to say about what those experiences should be.
We don't really get a lot of clues about how to design the game by looking at games as a service.
Right, games as a service says.
Be reliable, deliver valuable services.
Awesome, that's a really great message.
But what services should be delivered?
We don't really know.
Then it says polish and iterate those experiences.
Again, a fantastic thing to try to do.
It's a good process.
But what experiences are we polishing and what are we iterating towards?
And then it says, you know, drive towards KPIs or key performance indicators, right?
Pick targets of things you want to drive towards.
Great, we should all do that.
But which ones and why?
You know, design has to ask these questions.
These are fundamentally the questions of design.
What services, what experiences, why are we doing this?
What are we driving towards?
And games as a service just doesn't really have the answers.
It has processes, but it doesn't really tell us what we're trying to do.
Besides, really successful game designs are not centered around services.
I think we all know that.
They're supported by services, and they're supported by this kind of thinking and this kind of process.
but they're not built around those services.
If design puts service first, it can result in really polished, but often soulless games, or even worse, coldly efficient engagement extraction machines that don't really connect with players on any kind of deep emotional or motivational level.
Games as a service just doesn't provide designers with what they need to understand how to make great live games.
It's just missing a lot in that area.
If we look back at this list, it is true that all of these games use a games as a service business model, and that's great, but what's more important for designers looking at this game is not their business model.
What's more important is that all of these games are designed around intrinsic motivations, rich experiences that evolve and change over time, and long-term engagement that can become a part of a player's life.
That's what we should really be taking from these games' success.
the ability to become more than just consumed media.
That's what keeps these games at the top of this list from the player's perspective, year over year.
And some of these games like League of Legends or Dungeon and Fighter Online, they've been at the top of this list long before we started talking about games as a service at GDC.
They've been doing this with a sort of different approach before we started categorizing things as games as a service.
This might seem like a fine line that I'm drawing here, this difference between this business approach and this design approach, this difference between focusing on optimizing service and focusing on long-term player experiences.
That might seem like a really fine line, but in my experience, it can be incredibly striking.
So as an example, I just wanna talk a little bit about some of the things that we saw in Guild Wars 2.
So these are really scrubbed numbers from Guild Wars 2.
They're just- relational and what we're looking at is average revenue per user and retention numbers and on the left we just have all players. So everyone playing Guild Wars 2 this is this is the average or mean of the ARPU and retention for these players and it's fine but on the right we have cohort number one and so cohort is just a group of players that share some characteristics.
So it's a subset of all the players and they share some characteristic together.
And this card has significantly better ARPU, average revenue per player, and retention than just the general average.
So these are better players in this measurement anyway.
So who are these people, right?
What is this attribute they share that makes them so much better than the average player?
Well, in this case, this is players who spend time in town.
So town in Guild Wars 2 are no combat social hubs in the game.
Now, it's not as if you really need to spend time in town in Guild Wars 2.
In fact, there's exceedingly little that actually requires you to return to town.
The spending money on microtransactions, player to player, marketplace, guilds, chatting, party systems.
These are all accessible anywhere in the game.
You do not need to go to town to do these things.
There's very little in the game, in the game loop that drives players to town.
And yet, spending time in town is clearly super important.
And if we dig into this, it's not an outlier group, right?
If we just narrow down all the players that are engaged in the game, so players are actually actively playing the game, excuse me, we see that actually a majority of them are townies.
a lot of them spend time in town.
And if we dig deeper in this curve on the right, you can see the likelihood of being a townie grows over the player's first 100 days playing the game.
Even though the amount of things to do in town does not increase as you progress in the game, and certainly not to this level.
And this increasing tendency to spend time in town corresponds with this increasing likelihood to become a spender.
So really for us, just being a great highly engaged player seems to be strongly correlated with spending this time in town.
I don't really find this particularly surprising, mostly because we saw a really similar effect in MapleStory when I was working on that.
So this wasn't a huge shock to me because spending time in towns and non-combat social zones usually means focusing on social interactions like chatting and voting or simply being seen by other players.
And it also means downtime, which can be really important for players that are trying to spend a lot of time in your game to not always be actively engaged, but to have some downtime where they can relax and plan and just sort of talk.
Design, the point I'm making in bringing this up, right, is the design has to be thinking about the player's experience and what's engaging to them in the game, and what kind of experiences and engagement the game is giving to them, not just how to engage them more.
If we focus too much on just delivering services, we might just get bogged down in just increasing engagement.
You know, both Guild Wars 2 and MapleStory have lots of progression systems and rewards and gameplay loops and combat and all of these things that we associate with active engagement.
And we can spend a lot of time trying to increase players' engagement with those systems.
But what we actually saw was that as players invested more time in the game, they were more motivated by relatedness.
to other players and the joy of wasting time just chatting in town.
Now, I'm not saying that every game should add social spaces to increase revenue or that there's some magic connection between spending downtime in town and spending in every game, but I just want to emphasize that engagement is more likely to come from the actions that feed whatever the game's intrinsic motivator is, not necessarily the actions that feed really easy-to-measure and optimized loops.
For MapleStory and Guild Wars 2, The motivators in the game, and we already knew this, are largely social, they're largely relatedness.
For other games, it's going to be other things, but the point is, design has to think about those things from that direction, from the direction of what are the player experience going to be and what's going to motivate them, not just from the direction of how is my service optimized?
So, Games as a Service, it's been really great for business, it's been great for strategy.
I think it does actually have a lot to offer to game development.
as far as processes and just a way of thinking about delivering to players, but it's mostly confusing and frustrating for design because it just doesn't fit into the things that we're trying to do.
And yet more and more teams will continue to be asked to make engagement-focused live games, right?
We want to make engagement-focused live games, but Games as a Service isn't really gonna help design because it doesn't really show us any design direction.
Luckily, there is an approach to game development that's been around.
For a long time, it's been employed by those working in live games for quite a long time, and it is a lot more useful for game design, and I think it has a lot more to say about the direction of design.
And that is, of course, LiveOps. Surprise.
So LiveOps is a way of thinking about game design and game service that's been around since...
MUDs, which are multi-user dungeons.
These are sort of the precursors to MMOs.
They were text-based multiplayer adventures that were around in the 80s, largely in 90s.
And that's sort of where LiveOps grew up, was in managing these online communities of people playing MUDs together.
And it's great, LiveOps, is it's supporting games that are focused on long-term engagement.
Because it's sort of what it grew out of.
At the heart of LiveOps, it's really about taking care of a game and taking care of the game's players over an extended period of time.
So you can see that in the word itself.
It's live, it's connected experience, it's persistent, and there's an operation component where you evolve and change and take care of it with continual investment.
I have spent pretty much the entirety of my 17 years in the industry working in LiveOps frameworks.
So a lot of experience with LiveOps.
And I've seen the approach in my time go from mostly servicing relatively small niche communities in virtual worlds online, to being a big driving force behind the free to play explosion, and now having deep influence on some of the most successful games today, and also the AAA space.
So LiveOps has grown in its importance to the game industry in general.
And I will say, as I work with teams who are transitioning to thinking about making live games and service-based games, Teams that have some tradition of LiveOps or some understanding of live operations tend to be a little bit better prepared for what's coming when they make this transition.
So that's LiveOps, but of course, we wanna know how do you do LiveOps?
It would not be super fair for me to come and say, hey, LiveOps is great, it's so much better than all these other things you're doing, and then not actually explain how to do it.
Well, like most things in game development, it's a journey.
Not a destination, just like prelaunch development, right?
LiveOps is a set of steps, so just prelaunch development, and this is a very simplified version of that journey, pre-production, production, launch.
Great, we've all been through it.
Unlike this part of development, LiveOps tends to be additive instead of sequential.
So you never actually stop doing the basics.
You just keep adding more and more on, right?
So we start by doing basics, then we add optimizations, then we add mastery.
You just sort of keep layering it on.
Of course, LiveOps actually does begin well before the game is launched.
I know this sort of looks, this chart sort of makes it seem like you make the game and then you LiveOps it.
And there's a lot of that, but in order to do really great LiveOps, you actually want to start really early.
You know, all the way back in pre-production, you should be thinking about your progression design, your retention design, your monetization strategy.
Then during production, you've got to be thinking about what kind of goals you're going to be setting, what kind of data you're going to be pulling in, how you're going to do live content, how you're going to do community feedback.
All of these things need to be part of the process of building your game.
Then once you launch, then we start getting into the specifics of these basics.
Live incidents process, feedback management, game iteration.
and then adding in player behavior analytics, strategy adjustments, segmentation and targeting, breaking your game apart, and really looking at how different players experience it, all the way into community shaping, brand retention.
And I'm gonna go really deep on all of these things in just a minute.
I'm actually gonna, even though I do wanna impress upon you that it is super important to start working on the live ops for your game all the way back in pre-production, we're gonna spend most of this talk.
Talking about what happens after launch and focused on those areas where live apps is really the primary thing that you're doing with your game and also going to be some of the things that are most different from what traditional game developers might be used to who mostly make games as a product. So we're going to focus mostly on that, but I did want to make the point that doing these things well before you get to launch is going to set you up for success in live ops. There's probably a whole So I said we're going to focus mostly on this part of the journey.
The process that starts with basics and then adds in some optimization and adds in some mastery.
I'm going to go into detail about what I mean by those basics and what I mean by optimizing and what I mean by the more advanced LiveOps mastery techniques as we walk through this.
But one more point I want to make before we dive in is that this really is a process that everyone has to go through.
Live Ops can be very overwhelming if you think of all the things that you could do with a live game and try to execute on them at once.
And so in my experience, every game team, every game has to walk this path and they have to walk it iteratively.
They have to add these things in slowly over time.
Even if I'm working with a team that shipped a dozen live games before, we still want to start with basics.
And then when we're good at that, add the optimizing.
And then when we've got that under control, add the mastery so that we don't get totally overwhelmed.
So that's something that I do want to say that even if this is the very first time you're using LiveOps or you've never done a live game before, you're really not starting in any of a different position than anybody that's doing it and has done it many times before.
They might have some past learnings and experience to avoid some mistakes, but you're all going to have to crawl before you walk with every single game.
And that crawling starts with the basics.
So once your game is live, the first thing you're gonna wanna focus on is the basics, which is really encapsulated with the idea of iterating on your game.
This is the first and most fundamental LiveOps skill is making quick iterative updates to your game to improve it.
And when I say iterate, I do not mean releasing planned DLC content.
That's not really iterative, that's just a slow.
continual form of pre-launch production.
I mean actually making small, frequent changes to your game in response to player feedback and behavioral data to slowly improve the game over time.
This might seem obvious, like yes, that's what iterating a game is, but many AAA games still spend millions of dollars avoiding this step.
They really try to make the game as perfect as possible before shipping.
And sometimes, inadvertently, that actually hinders their ability to iterate the game later because they don't really design the game to be iterated.
That might seem tautological, but if you want to iterate on your game, you need to design it to be iterated on.
And that actually speaks to the architecture of your game content and the way that you're organizing all of what your game is.
As an example, I want to talk a little bit about Guild Wars 2.
And this is just sort of a story about...
not only iteration, but managing player feedback.
So this is a map for Guild Wars 2, which is sort of the UI version of a map.
Maps are sort of the fundamental building block of the game world in Guild Wars 2.
They are these massively large player spaces, right?
And they're filled with dynamic events that kick off based on player activity in the map, and also some real-world timers.
So when players are playing Guild Wars 2 and they're out questing, They don't go get quests from NPCs.
They actually just engage with whatever event is active in the area they're in at the time.
And some of their actions might trigger an event to happen, or they might walk into an area where an event is already underway, or events might be designed to trigger automatically every X number of minutes.
But the world is sort of this dynamic place where players are walking around and engaging with it.
So the Guild Wars 2 content designers crafted the maps to be these branching chains of events.
that are punctuated by fights with elite enemies called champions.
The design was that players would play through a sort of emerging story of events that culminates in a boss fight, right?
It was pretty traditional, it's just more dynamic.
And that players would just sort of experience this inside of the map, probably in small groups or maybe even solo.
So when the game launched, we had made all of our maps match sort of this philosophy, and then...
nothing about our plan actually ended up working that way because players did not do what we expected them to do, shockingly.
Instead, players coordinated over chat to form these large groups of 50 to 100 players that would roam the map as a devastating zerg in this efficient loop, defeating all the champions in succession.
And they called this the champ train.
And it didn't take long.
for players to get these champ trains organized.
The champ train ignored the intended story-driven loops of events and it removed a lot of the challenge that would come from battling bosses because the zerg of 100 players can simply steamroll basically everything in the map.
And so this was really nothing like what the content designers had intended at all.
And at first we tried to come up with ways to discourage this behavior and sort of force players.
back into the intended track, move things around, separate it, disincentivize it.
But the truth was, as we were playing the game too and listening to feedback, the chat train was really fun.
And players actually really enjoyed it.
It was a good time.
It's fun to join a big zerg of players and just sort of steamroll over things and have all this sort of efficient move around the map.
You can just sort of join up and follow along.
And what we saw was actually players that participated had better engagement and the maps with good champ train sought more playtime.
So players were really liking this.
So we basically pretty quickly said, OK, we give in.
This emergent behavior is actually a good thing.
And we switched our approach.
Instead of trying to stop the champ train, we asked, how do we make them as fun as possible for everyone?
Ultimately what that meant was we relocated many of the champ trains away from starter zones.
We sort of moved them around the map to keep them away from people who were just starting out in the game because that wasn't a fantastic experience for them.
We added boss timers to the worlds for better coordination in the game.
We adjusted many of the event loops to remove the incentive to fail events because previously some of those bosses that the champ train wanted to get could only happen if they failed an event, which was not great and would disrupt the story for people who were trying to consume the story.
And we made a lot of adjustments to loot and loops and all of that great stuff.
One thing this didn't solve was Champ Train still made boss battles pretty trivial, but we actually learned from this as well eventually.
And we eventually actually used this to design really cool, challenging open world bosses that were meant to be played by like a group of 100 players at once.
This is Dequadal, which is one of those first really large scale.
bosses be added after the game was already live.
It's meant to be played by a group, I think the optimal group is like 80, coordinating together to take them down.
And so this was actually a big achievement for us in listening to player feedback and not reacting and trying to force them into the mold we thought they should be in, but actually going along with their emergent behavior and what they really enjoyed doing.
But what's really important is that none of this would be possible if it hadn't been easy.
for us to move things around, mess with boss timing, change balance rewards without breaking the structure of everything in the map.
Because we knew before we launched the game that we would probably want to make changes to it after a lot of players were playing it, it was possible for us to make these changes.
I'm not going to say it was trivial, but it was definitely doable, and we didn't have to worry about breaking the whole game because we were going to move around some quests.
So the point of that just is that content is the first thing you want to think about.
And while that does require some planning before you do the live game, in order to make it possible for you to iterate, you want to be focused in this point in your live ops journey on that iteration.
Improve the game's performance, extend its life, respond to feedback.
That is going to require that you also build some feedback management processes and also some live incident processes.
So you're going to want to figure out how you want to take in that feedback.
You can start by just reading forums or Reddit.
That's probably going to give you a bit of a skewed perspective on things.
So you might want to think a little more deeply about how you're going to process feedback as it comes in.
Are you going to set up other channels for players to deliver that feedback to you?
How are you going to handle the feedback coming from inside the team as well?
And then, of course, live incident processes when inevitably something's going to go wrong.
As you're iterating the game, you're going to make mistakes.
Games are incredibly complicated and messy.
and it's pretty much impossible to avoid.
So what are you going to do when that happens?
Hopefully not panic and hopefully respond in a way that's going to be healthy for your community.
And finally, rounding this out is business intelligence tracking.
I put this on here, even though it might not seem like a design area of focus, because in my experience, teams that are really good at this phase of live ops do have design take a larger role in that area.
With all the iteration and feedback response going on, design really does need to be on top of how those changes are affecting the community and the business.
to avoid conflicts where design wants to do one thing and business doesn't want to do that.
So you really need to keep those guys close and working in concert in order to make this a more successful iterative process for your game.
So awesome, live ops basics, you're iterating your game.
If you can get good at this, if you can in fact iterate on your game without having to destroy the whole thing and you're making incremental improvements.
And you get to this point where you start saying things like, man, I wish that we had a little bit more insight into which changes we want to make.
Also, maybe some of the changes we want to make are good for some group of players, but not another.
You're ready to move on to the second phase of LiveOps maturity, which is LiveOps optimizing with a focus on personalizing your player's experience.
This is all about serving content and experiences to players based on who they are and how they behave, instead of just making blunt overall changes to the game.
This is what most people are thinking of when they talk about gathering up tons of player behavior data.
Right, they think like, yeah, we're gonna like do a bunch of segmentation and like analyze it, and then it's gonna tell us all kinds of cool stuff that we should do to the game to make it better.
I do think a lot of teams try to do this step first, but I would suggest that it is very difficult to make this step work for you if you don't have the basics down, because data is only valuable if you can actually do something with it.
So even if you collect lots of fantastic data, it can be really, really hard to action on it if you don't actually have the means to make those iterative changes into the game.
OK, so we're optimizing.
What does this really mean to a development team functionally?
A lot of it is about segmentation.
Segmentation, whether we're talking about segmenting by acquisition timing, like these players all joined the game in the same month, or these players all joined the game from the same marketing campaign.
Or in-game behavior, right?
These players only ever do PVP, and these players only ever do story content.
Or player motivation, right?
These players really will do anything that gets their progression to increase.
Or these players will only do things that are socially motivated.
All of these are segmentations that you can make to your players and look at them differently.
And it can be an incredibly powerful tool in driving more targeted changes into your game.
Excuse me.
In phase one, teams tend to rely pretty much solely on just the design team's expertise, the things that you already know that you should do, and direct player feedback to drive iteration.
But where that can start to fall down is when you have changes that you want to make that are really only for one group of players, and that group of players may actually be quite different than you expected or different than the group of players that's spending a lot of time giving you feedback.
Tutorials and first time user experiences are notoriously difficult to optimize without using a data approach because designers and engaged players don't usually give great feedback on being a new player because they don't really remember what it was like to be a new player and it's difficult to give that mindset.
You know, just to drive this home, this is some retention data from a game that I worked on and you can see.
that it gets better over time.
But what's really important is what we did to make this improvement happen.
We started by just making basic updates to the game.
We asked the design team, hey, could you improve the first time user experience?
And they went in and they looked at it and they're like, well, these things are not that great and these things are not that great, we'll change them.
And they did have an improvement.
Like when we made those updates, it did actually help.
But it didn't help that much.
And we were sort of running into this problem over and over again where design was like, well, I don't really know what's gonna make a difference.
And so then we added A-B testing.
And A-B testing is just making a small change and having one group of players, that would be the A group, experience that change, and another group of players, the B group, not experience that change, or experience something different, and then see which one is better.
And then whichever one performs better make that the final change.
And so you can do this iteratively over time with very small things, and that can start to add up to big changes, as you can see in this graph.
We really started to unlock.
And this wasn't just doing exactly what the A B testing said.
It was actually a combination of A B testing and design.
Because as the A B test results came back, that helped the designers go, oh, this is really what's making a big difference.
I'm going to focus on making great designs around that instead.
So the next thing we can talk about in this optimizing phase is The idea of sort of machine learning.
This is very popular right now, and a lot of times I talk to teams and they're like, yeah, I want to do a lot of multivariate testing.
I really want to build a bunch of machine learning that's going to make those changes for me, and that is really cool.
And if you work for a really big team with a lot of fantastic analytics available to you, you can do that.
But I do want to say that you don't need that.
You can actually get a lot done with pretty basic information.
As an example, there's this example from MapleStory.
So MapleStory, and this was quite a long time ago before we really had a lot of fancy machine learning at all.
So this is actually one of my favorite examples.
It's a system we introduced in MapleStory where when we saw players exhibit behaviors that correlated with churn, and this was pretty basic stuff, like logging in less frequently, leveling up less frequently, not talking to their friends as much.
We would look at that behavior and we say, oh, if you're doing these things, you get a little flag on you.
And then there's a chance that when you log out, you'll get this special message, which is basically, hey, if you log back in tomorrow or in the next three days, you're gonna get a free gift.
And we didn't really worry about making churn prediction model perfectly accurate.
We were really just trying to see if this would work with basic information about churn, just really obvious stuff.
In fact, we actually eventually expanded this to allow the gift to trigger on accounts that didn't meet the term prediction criteria because the effect it was having was so positive.
It was a really, really successful campaign.
Players were actually really into this idea.
They didn't really know why they would get the gift and there was a lot of conspiracy theories about what would get you the gift.
And it just sort of generally increased retention across the board.
And even though that's not what we think of super tight focused machine learning.
algorithms that optimize everything.
This was still a big benefit to the game and still really worthwhile to do.
So I would say even if you don't have access to that kind of sophisticated machine learning, you can still try some things that can have a really positive effect.
It's just important if you don't have that kind of sophisticated analytics to make sure that you do look and make sure it did have a positive effect and not a negative effect and then react to those changes accordingly.
Okay, so we have the basics.
And then we've added in this optimization where we've really focused on personalizing the experience and targeting offers and content to our players to like reduce risk and optimize individual player experience.
So if you're doing both of these things and you're really having a lot of success already in getting these things done, we can move on to this final step where we add in the most sophisticated.
LiveOps tactics, which is sort of called LiveOps mastery.
And specifically, when I think about this step, the really the most advanced tactics for LiveOps, I think about expanding your game's engagement beyond the time players spend playing.
At this phase, you should be thinking of your game as more than a collection of systems and content, right?
Discussing the game, making fan art, reading tie-in comic books, meeting guild mates in real life.
All of these are actually a part of your game, and they should be something that you care about designing.
And that experience becomes vitally important as you move through this LiveOps journey.
Because if you want to get to the place where you're strengthening your brand and your loyalty, and you actually start seeing organic growth and sustainment, i.e. not always having to pay for all your acquisition, you're going to have to focus on more than just what's happening inside of the game.
While a lot of this work, happens quite literally outside of the game.
Supportive integration with game systems is really what separates the best from the rest in this area.
And it really behooves designers to think a lot about what these experiences are for their players, even outside of time spent in the game.
Many of the examples for this phase, when we actually talk about systems in the game and not just outside community events and things like that, many of these examples are things that lots of games actually do, but very few do really well.
An example I like to use is matchmaking.
It's something that we've gotten really good at as an industry.
If we define it as predicting who will win competitive matches, but we've struggled to really create matchmaking that predicts who will have fun together and so we actually ended up using matchmaking for something a lot more social in Guild Wars 2.
I think is a really interesting example of this kind of.
Thinking of engagement beyond just game systems.
So I'm going to talk about Mega Servers, which is a whole program that we developed in Guild Wars 2 after the game had launched.
But when the game launched, the way that Guild Wars 2 worked was players would log in and then they would tell us what map they wanted to go to.
Right? In this case, Silverwaste, which is a map in Guild Wars 2.
And then we would go, okay, you want to go to Silverwaste?
Well, let's see if there's already a Silverwaste server up and running.
Oh, there is, here it is.
And there's an empty slot in it.
So awesome.
you will be moved into this server.
And that was sort of the way it was supposed to work, right?
Players would be sorted into the server until it was full.
And then when it was full and another player showed up, they'd come along and say, hey, I want to go to Silverwaste.
And we'd say, well, there's no room in Silverwaste, so we'll make a new version of Silverwaste for you.
And you can go there.
And then, you know, that one will eventually fill up too.
And this all sounds pretty good on paper, but...
In reality, when the game was live, what happened was we had a bunch of servers for maps, and then naturally players would empty out of those servers in a very organic, unorganized way.
And eventually we would end up with sad, lonely players on an empty server with really no way to get more players in because they aren't the most recent server.
And so when someone new comes to join, they would actually go to this server.
that was most recently spun up instead of to the empty, lonely person above.
Worse, we didn't really do anything to ensure that when a player joined your server, you were happy about it.
And so in fact, sometimes players would not be happy about it, they wouldn't like the person that they were randomly paired with in their server and their, you know, enjoyment of the game would go down.
So this led to a lot of inefficiencies, where you can see that this is also from a, services component incredibly inefficient.
And so we decided we wanted to take a totally different approach to this.
A lot of it was spurred by this idea of can we make this more efficient, but it quickly expanded to asking, can we make the game more enjoyable?
So we changed everything about how we did this.
Now when you log in, we would say, where do you want to go?
But before we put you there, we'd ask you a whole lot of things about yourself.
Are you in a guild?
Have you played in a party recently?
What kind of content do you like to play?
What kind of play time do you usually have?
What's your level?
What's your class?
What's the last map that you were in?
And we've learned all these things about you and we had different weightings and we'd say, okay, now we know a little bit more about you.
You're not just a random person, you're a specific person.
And you want to go to Silverwaste, which is great.
We actually have multiple Silverwaste servers open.
Which one are you going to be the happiest on?
Well, This is the one that we think you're going to fit the best with because of your play style, so you should go there. And this was took some learning, right? Like, you know, the waiting, we didn't, we had to make some guesses at first, and then we had to optimize that over time.
We also made some fairly large mistakes early on. For instance, the first version of this sorting algorithm just straight up didn't ask what language you spoke.
And it turns out that sorting people into servers with a bunch of people who don't speak their language makes them pretty unhappy.
That was fairly easy to fix, right? We started, we added the language option in pretty quickly, and that was very heavily weighted because even if you would get along really well with a server full of people, if none of them speak Spanish, you're probably actually not going to have that great of a time.
So we might actually find out that maybe you do match.
The first server here a little better, but we're going to put you up here because that's where people are going to be speaking your language, and that makes a big difference.
This effort, which was driven by engineering and design, ultimately just really improved the social experience in the game in general and we had we had general uplift in player engagement and retention and and you know I don't know.
It might be overstating a little bit, but as our game matured, I think this system really helped.
the game grow and thrive after it got over that initial excitement of launch and really became more about a continual community.
Such as one example of using in-game systems to drive the kind of social behavior we want that can extend outside of the game itself.
Another one is to think about community events.
When we think about community, a lot of times designers think about you know, forum moderation and fan meetups, but communities really form and thrive because they have something to talk about.
And that usually actually comes from the game itself.
And so sometimes we actually want to create content that's about making a community moment and not just about driving playtime or increasing revenue, but it's really just about getting players something cool and exciting to do.
So one of my favorite events we ever ran in MapleStory was the Random Beauty Coupon Drop event.
So we have these random beauty coupons you can buy in MapleStory.
And they were this consumable item.
And when you use them, they would change your appearance totally randomly.
You get a random face, random hair, random skin tone, random eyes.
All these would be random.
This was not a very popular item because it was truly random.
And there was hundreds of appearance options.
So you can end up with something pretty funky as a pretty significant roll of the dice.
So they weren't that popular.
We didn't sell that many of them.
But we decided it would be fun to run this event where we dropped them commonly off of all the monsters in the game.
So now when the players were playing, they would defeat an enemy and they would get sometimes multiple random beauty coupons in their inventory.
And so they had access to all these random beauty coupons.
They had tons of them.
And they started consuming them all the time.
And we started seeing these crazy combos we'd never seen in their appearance.
And people were posting screenshots on the forums.
Look at this weird.
you know, green skin, red hair thing that I got, and it really drove a ton of fun engagement.
It was just light and fun, and players were really enjoying it.
It actually ultimately did end up having a positive effect on our revenue because it actually exposed people to cosmetic options they didn't know about before, and they actually went and bought those permanently.
But mostly it was done to drive this kind of interest and get people excited about logging in.
And it was a pretty generous event, right?
We were giving away something that technically You know we sold and had monetary value, but it really was incredibly worth it.
And a lot of fun. OK, so this is the journey I wanted to talk about today, right?
Starting with these basics, moving into optimization and then mastery.
Every game that sees a lot seeks to do live ops has to tackle these cool areas.
Core areas, right?
We have to think about content.
We have to think about players very.
We have to think about community engagement.
All of these things are really core to LiveOps.
Some teams are going to focus on different portions for different amounts of time.
Some are actually going to, you know, move pieces of this at different lines in the journey.
But what's really important, I think, for me to drive home to you, is it really is a process where you want to add things on slowly.
Don't try to take it on all at once.
My advice is start with content, then move to players.
then move to community.
That's the method that has really been successful for me and my teams and my career.
There's some play to move some stuff around and you'll get examples from teams, you know, that really focused on a lot of the stuff that I have in mastery early on and that may have been really good for them.
But especially if you're starting out from scratch, never having done it before, this could be a good roadmap to help you get your feet wet and really get in there and start working.
And I would also say, resist the urge to move on and add more complicated techniques until you really.
Get the basic ones down.
Really get to the place where you can iterate before you start trying to do fancy things with segmentation.
Really get to the place where you feel like you can personalize and focus before you start trying to, you know, drive a lot of viral excitement about your game.
And then I think you're gonna have a much easier time getting success and help keep your players happier with a more predictable game that's really focused on giving them what they need.
Yeah, what's this all about?
So this is.
A lot of this talk just came from me feeling like design, games in general, but design really needs more than just services.
It's great that we have a service mentality now.
It's great that we have access to these new ways of thinking about business strategy and new ways of thinking about games, but design does need more than that.
And I think it's important for designers to push for our view of live games to be equally as important as businesses view.
To a designer, games are culture, right?
That's what we make.
We create these communities of people that play together and have a shared interest.
It's more than consumed media.
It's about deep, intrinsic motivations, continual engagement.
It's really about thinking about our games through this lens.
You know, sometimes at Xbox, we talk about games as community.
The game itself is a community, and that really is the core of it.
We also talk about games as culture and the effect that games have outside of just the client and the thing that players play with.
And I think that that is getting a little closer to the heart of how design sees live games.
Okay, so I'll leave you here with this journey.
In that declaration, the design needs more than just games as a service thinking.
It's important to us and I would like to encourage you all to keep pushing to make designs.
voice heard and use these live ops techniques to make your live games better.
Now in this virtual version of GDC, I can't take questions right now, which is unfortunate, but my email address is right here.
If you have questions or you just want to talk about live ops, please don't hesitate to drop me a line and let me know what you think.
Thank you so much.
