Welcome to Bringing Players Together, Building Cross-Play in Destiny 2.
Today, we're here to talk about what it took the Destiny 2 team to realize the cross-platform experience for players, the lessons we took away from the development process, and how they can be applicable to you if you're looking to bring cross-platform play to your game.
So let's dive in.
A little bit about me.
I'm John Chu, a senior technical program manager at Bungie in the Central Technology Organization.
As a technical program manager, we function as the producers for engineering-focused teams helping to find roadmaps and product vision while driving the execution of our various projects.
I've been at Bungie for three years now, having worked on various teams and building and improving our tools around the engine, such as improving workflows for UI designers, updating the Destiny 2 engine for activities, and speeding release build times.
And currently my focus is on leading initiatives that span across multiple teams around the studio, like most recently, delivering crossplay for Destiny 2.
So that brings us to what we're here to talk about today.
We'll be doing a deep dive on the production of crossplay and the challenges and lessons we took away from building and releasing this feature to players.
I'll be focusing more on the production process, team organization, and some design considerations that come with building for cross-platform.
And while I'll touch on some of the technical challenges that we faced, it will be more of an overview.
An explanation of the deep technical specifics is worthy of a whole other session.
We'll have time at the end for questions and the slides with speaker notes will be uploaded to the vault.
So, first off, anyone here, have you played Destiny 2?
Anyone?
Nice, most people here.
So, for anyone that hasn't played, Destiny 2 is an action MMO first person shooter in which you play as a guardian imbued with the power of light, protecting humanity.
You take on challenges and activities all while shooting and looting your way to getting better gear and personalizing your character to be the ultimate monster killing machine.
In terms of how we build, maintain, and release Destiny 2, we utilize a games-as-service model to constantly deliver updates and new content to players.
Our main content deliverables are yearly expansions and four seasonal releases during that year.
Initially released in 2017, Destiny 2 is now in its fifth year and 16th season of being a live game.
Most recently, last month in February, we released The Witch Queen and Season of the Risen.
And when it comes to platforms, Destiny 2 is currently available on seven different platforms.
PlayStation 4 and PlayStation 5, Xbox One, Xbox Series One X and S, Stadia, Steam, and Microsoft PC Store.
And lastly, Destiny 2 is built in our proprietary Tiger engine.
It's a large legacy codebase built for the original Destiny, with some parts of the engine reaching back to the Halo days of Bungie.
There's a great 2015 GDC talk given by Chris Butcher that goes into in-depth about the history and development of the Tiger engine if you're interested in learning more.
But needless to say, there's a lot of systems in code within our own engine that are foundational and hard to change.
And we'll discuss some of the interesting challenges that this presented when building Crossplay later in this talk.
So now that you have a little bit of a background of Destiny 2, let's talk about the Crossplay project and how we went about building this experience.
The biggest reason we wanted to build Crossplay was to deliver on creating a truly unified Destiny universe.
By releasing across many platforms, players can play Destiny 2 from wherever they wanted, even other devices supported by Stadia.
We further built towards this with the release of our cross-progression system, Cross Save, in 2020.
This allowed players to bring their guardians and all the loot and gear that they had spent so much time amassing on one platform to any platform that they wanted.
While with cross-save, you could now hop between your PC and console and continue the story of your guardian wherever you wanted, the one thing that was missing was that when players crossed platform boundaries, that meant leaving behind the friends that they had on one platform.
People have different preferences for the platform that they like to play Destiny 2 with.
Just to demonstrate, of all the people that raised their hands, how many of you prefer playing on PC?
PlayStation?
Xbox?
Stadia?
I, for one, like playing on Xbox, and for the longest time I didn't have access to a gaming PC to be able to play with my friends who preferred playing on Steam.
So that's where Crossplay comes in.
Crossplay is the culmination of all these earlier efforts and now allowing you to play together with your friends from whatever platform you want.
Now, all players can exist in a single Destiny universe, rather than segmented ones by platform.
And while this effort wasn't creating new content like a raid or a secret exotic mission for players, we knew that doing this was the right thing to do and would be a delighter for them.
So for this reason, we committed to making Crossplay happen.
So when we first started the pre-production of Crossplay, guided by our overarching vision of creating a single Destiny universe, we outlined some high-level goals for the project.
While Destiny is being released on multiple platforms, we wanted to use Crossplay as a chance to center Destiny as a platform for all your social interactions with players that you meet while in-game.
Regardless of where you're playing from, you should not be limited in your Destiny experience.
And everyone on any other platform should be accessible to you, to be friends with, to communicate with, and more.
And while we defined goals for this experience, we also made sure to articulate constraints that we could use as raisers to help make decisions along the way.
First was that we were date-driven.
We wanted to release Crossplay as soon as possible for the best player experience.
So we targeted a release of September, 2021.
The pre-production planning for this project started in the summer of 2020, and this gave us a little over a year to plan, execute, and release Crossplay.
So we had a scope accordingly to meet this deadline.
Next, the experience needed to be seamless, especially to new players.
We didn't want to overcomplicate the experience of getting a new player from character creation through to having their boots on the ground in the first mission.
And lastly, we knew we would have to collaborate a lot with our first party platforms, like Sony, Valve, Google, and Microsoft.
And we knew it was important to respect our partner relationships with each of these companies.
Each platform has their own unique certification requirements.
And while building Crossplay, we should be doing our best to adhere to the spirit of these requirements.
So let's talk about the actual team that built Crossplay.
This effort was a cross-team initiative that spanned across the studio with four core teams working together on the experience.
The teams that were involved were first, the engine client team, working on the lower level engine code, making changes to things like matchmaking and networking.
The UI UX team, working on the UI players would be interacting with to manage all their new cross-platform friends and invites.
The services team, tasked with standing up all the new game services.
And the Bungie.net team, working on the web and mobile experiences for Bungie.net and Destiny 2 companion app.
In total, there were about 50 people working on this, on crossplay.
This includes all sorts of disciplines like engineers, testers, designers, producers, and all that.
We also had our technical account management deeply integrated on the team to handle our first party partner relationships.
So, in addition to that, there were a lot of people around the studio that were involved in this effort.
Our publishing and marketing and analytics teams helping let us engage players and how they were playing cross-play, the player support and community teams giving us their player feedback, and also the site reliability and network operations teams making sure the services we were standing up were healthy when they were live.
And lastly, this was all done while we were working remote.
So in terms of the development timeline of Crossplay, as mentioned before, we started pre-production planning during the summer of 2020.
From then, it was about a year of development to fully release Crossplay with the season of The Lost in August of 2021.
Along the way, there were a couple milestones and events that helped us.
We spent the first couple of months working on major tech pieces of the experience, while meeting with first-party partners to get approvals for our designs.
This all led us to having our first proof of concept by the start of 2021, in which we had two platforms joining together for the first time.
We also utilized live updates to the game to get early versions of Crossplay out to players.
In the season before we launched, we released an alpha of crossplay for Bungie employees to have some crossplay features enabled for them.
And later, a beta in which we enabled crossplay in a strike playlist for all players to try out.
These early releases helped get crossplay out there and incrementally build on the experience.
And we'll talk a little bit more about that later in the talk.
And even after the full release, we've been continuing to add more features to crossplay, like with extended text chat on consoles.
It was definitely a journey to get crossplay in the hands of players.
So from that timeline, you can see we used a lot of different milestones and releases to release cross-play. And one of my favorite quotes about the process that we used comes from within the studio. We can't control our outcomes, but we can control our executions.
We tried our very best to execute in the best way possible, to make the right decisions for the team, the experience, and the player.
And that's the main focus of what we wanted to share in this talk.
Because in the end, that's really all you can control.
Because once it's in the hands of players, you don't really have much control over that.
But luckily for us, Crossplay was released to a lot of positive attention from our players, uniting them all together, and letting them play and engage with each other in a new way.
So now that we've talked about the motivations and circumstances surrounding the making of crossplay, we'll move on to the actual lessons we learned.
At Bungie, we really like the number seven.
If you were at Alan Blaine's talk yesterday, he used seven axes, I have seven lessons.
So this section comes in that many parts.
Here's the seven lessons we learned in building crossplay.
First up, building crossplay in our own engine meant creating a lot of new systems from scratch.
Cross-platform play is a pretty easily understood concept.
It's allowing everyone on your various platforms to play together.
And so the conclusion is that's just networking around bits to different platforms, right?
And I mean, sure, and I see Steve with his head down.
I mean, sure, that's definitely part of it, but to create a truly great cross-play experience, there's so much more to it.
And there's a couple other reasons that cause us to need to build so many new systems.
First was that we built Destiny in our own proprietary engine.
All the new cross-platform tech functionality for the engine needed to be created from scratch.
Next, many systems that we were using were based on platform-level APIs.
And all these needed to be recreated in-engine to support cross-platform.
Unlike a game that uses a third-party engine like Unity or Unreal, which has a lot of cross-plat built in, we had to build a lot of platform-equivalent systems and services.
Also, many surrounding systems are needed to enhance cross-play, like how does your player identify themselves across various platforms?
So let's do a run-through of all the various systems.
Starting with networking.
Just to get all these guardians in the tower together, core networking tech had to be changed in order to enable sending of content across various platforms.
The networking changes that we made were some of the biggest and scariest of bone breaking changes, since it's one of the most fundamental and underlying systems in the Destiny 2 engine.
Since we had shipped separately for various platforms, we had made optimizations for each of them, and this didn't all play well together when we combined them for crossplay.
For example, our package layout is not always the same across various platforms.
So we can't just network memory handles from one platform to another.
We ended up creating a mapping layer to communicate over the network with consistent handles that could be mapped to appropriate handles on a given platform.
Also, the way we handle online sessions for fireteams had to be changed since we could no longer rely on a single session hosted by a single player.
We now had to maintain separate online sessions for each platform.
If you're interested in learning more about the Destiny 2 networking, there's a 2015 talk given by Justin Truman for you to watch.
So and there's a lot more of the technical specifics that I glossed over that we did with not networking but needless to say these were big changes and we needed to get them right to get platforms able to talk to each other and be able to be enrolled together and these were some of the earliest pieces that we took on.
So let's talk about player identity in a cross-play world.
Players spend many hours in Destiny 2 going through raids and dungeons, facing off in competitive matches, all trying to get that god roll of their favorite shotgun or trying to get the right mods for their armor.
The guardian that you play as is an extension of yourself.
And while the weapons you equip and getting your armor to look just right is important, equally as important is your name and how you identify yourself to other players.
Usually, you use platform names like your gamer tag or your Steam name, among other names for that equivalent, to identify yourself, and by extension, your character in online games.
However, with cross play, that's no longer sufficient.
Say on PlayStation, you go buy Oryx, and all your friends there know you buy Oryx.
But one day, with cross play, you hop onto your PC and you start playing on Steam.
But there, your profile name is Savathun.
And you try to fire team up with your friends, but none of them recognize you by that name.
So, using platform names in this case was no longer sufficient.
With cross-play, it was important that we deliver a consistent experience where someone is easily identifiable no matter what platform they were playing from.
We needed to create a consistent name that identifies a player that is unique so that players could find them.
To that end, we created the concept of a bungee name.
This consists of a player name and a four-digit unique identifier.
For example, Oryx1234.
This allows multiple players to have the same name, in this case, Oryx, but allows people to search for a specific person with the four digits.
and guided by our earlier stated goal of the project of not narrowing the new player funnel, for new players logging on once crossplay was enabled, we needed the experience of setting a bungee name to not be complicated or add extra time and effort.
We created a seamless experience that seeds the player name of a bungee name from the platform that the player first logs on with.
So to demonstrate, this is the screen that players I met with for the first time once they logged in once cross-play was enabled.
It tells the player that their Bungie name is being set from their platform name.
In this case, you can see on the left that they were signing on for the first time with Steam and their profile name was Cosmos BNG.
This seeds into their bungee name and their unique, the unique identifier of 0748 is added to the end, as you can see on the right side.
Now, that player is now known as CosmosBNG and it's what is displayed above their head in game and in the roster, wherever they play.
It's their consistent identity.
So next is friends and presents.
The concept of friends and who the people you can play with was completely changed.
Now your roster could have people from any and all platforms that Destiny is available on.
And that brought with it many new challenges.
Destiny 2 is an MMO with many communities of players that is fostered by deep social mechanics.
Most activities are meant to be played with others.
Even if you play solo, we match you up with other players, like with strikes or when you free roam.
Destiny 2 is meant to be played with others.
Now that players could interact with anyone, that meant we could no longer use platform friend lists.
Without changes, you would not have access to friends that you were making on other platforms.
Since you could make and have friends anywhere now, we were exposing players to a whole new social network of Destiny players.
We created the Bungie Friend Service to handle this new social graph for players to engage with and enable them to become friends with anyone.
When a player friends someone in game, whatever platform they log in with, they will appear on the Bungie friends list.
Additionally, platform level presence was no longer enough to keep track of when someone was playing Destiny.
So we stood up a presence service to track players online and offline statuses when they were playing.
With this concept of a new Bungie social network, we needed to make sure that all interactions people have come to expect with social networks was also present.
First off, was being able to find people.
And to that end, we had to build searching.
We kept it to finding others by the bungee name.
So as you see in the top left corner, there's a search bar.
This is where the four digit unique identifier comes into play.
And it's important, and it just helps make sure that people are explicitly searching for the right person.
Upon finding that person, they're able to inspect them, and then send them a friend request.
On the receiving side, you need to be able to view incoming friend requests or see pending ones.
And so, and finally being able to action on them by being able to accept or reject requests that come your way.
Also, other common social controls like blocking and displaying your presence as offline or online had to be respected as well with this new friend system.
The changes in identity and this new concept of Bungie Friends resulted in a major overhaul of our roster system.
As the major UI screen that players utilized to interact with others, a lot needed to be done to account for cross-platform.
More information needed to be given for players, um, for what platform a friend or a nearby person was playing on. Now we show a little icon next to each person. As you see in each of these roster entries, there's a little icon that indicates what platform they're on.
Additionally, to help other players with identifying you, player detail screens were updated to show all your linked screen names from other platforms.
In this case, this player is playing from Steam with the profile name Tiny Tim Go, as you can see towards the bottom. But their Bungie name is different, Caster Rhetoric.
This makes it easier for people to recognize you when they're inspecting you.
So, let's move on to the changes that we made to session or fireteam invites. In Destiny 2, fireteams are the group of two to six players that you play through various activities with.
It's your squad.
Fireteams are a core social and gameplay component to the game.
It's how many players engage with Destiny 2 content.
They hop online, they join their friends in a fireteam, and they take on a raid or a trials match.
And much like friends lists, we were relying on platforms for session invites.
Before, you could go into your roster and you would see your platform friend, platform friends list and send people invites to join your fire team. But that was all using platform APIs. To send, and they would send the receiving player a notification. So if you were on Xbox, if you were sent an invite, you would see on your, in your Xbox UI that you were invited. And they'd get a toast notification and you'd be able to accept that. It would open up Destiny and join your character into the fire team.
But now, we needed a way to bring off-platform players into your Fireteam.
There wasn't an easy way to call into other platforms invite APIs from different platforms.
So we had to stand up another service from scratch to manage invites for Fireteams.
We created the invite service to allow players to create and join Fireteams with whoever they wanted.
We leveraged our own notification system to show players that they had been invited to a Fireteam.
You can see this on the bottom right in that gray bar with that notification.
Additionally, new UI had to be shown to view and manage pending invites. We created a new view which friend requests also go through to do this. From here, you can see your stored invites, which do expire after some time, and action on them like accepting or rejecting. Accepting the invite pulls you into the fire team. And while fire teams act as the group of players you play through various activities of Destiny 2, to really engage with each other, you need to be able to communicate.
In Destiny 2, players are able to voice chat and also text chat.
Like many other systems, our voice engine was previously using platform voice implementations.
Sony APIs for PlayStation players to talk to each other, Microsoft ones for Xbox ones, and so on.
But now, with fire teams that had players across all platforms, if we kept it the same way, you wouldn't be able to talk with each other.
What emerged was the need to create, to have a solution that would encode and decode audio that was portable across all platforms.
So we turned to using a third-party voice service to handle cross-platform voice.
On the tech side, previously, only PC players were the ones that were able to chat with each other.
And the only PC platform that we shipped on was Steam.
So it made sense to use Steam APIs in this case.
However, timed with the launch of Crossplay was also the release of Destiny 2 on the Microsoft PC store.
Now, with another PC platform, our existing solution was not viable if we wanted PC players to be able to communicate.
Additionally, guided by our goal of not letting platform limit who you could communicate with, we wanted to expand text capabilities to console players as well.
To that end, we built our own text chat service to send messages to players.
We'll talk a little bit more about the decisions that we made to build our own text chat and integrate a third-party voice solution a little bit later.
So all that we covered was just the systems that we did for the in-game client, but there's even more to the cross-play experience.
When building cross-play, we knew that parts of the experience would need to be accessible from the web and mobile sites.
In our case, we have Bungie.net and the Destiny 2 companion app.
Having out-of-game extensions of cross-play offered deeper ways to manage and engage with the experience.
Like it was only through Bungie.net that players were able to pull all their linked platform friends lists and batch send requests to see their Bungie friends lists.
Additionally, iteration on web and mobile is much faster compared to shipping new updates for your game client.
Offering these power user features for cross-play in a way that allowed us to iterate and polish these features more quickly was really helpful.
Also, as a peek behind the curtains, one of the, the web, having a web experience that really helped with workarounds when we had bugs in our, in the game.
So when we first launched, player searching in game was not, was not, actually didn't work.
And we, people weren't able to add their friends.
So we were able to route players to the web and mobile sites to search for who they wanted and find who they needed, and, and we, until we were able to get a fix out the next day.
All up, with this and everything else, a lot of work went into making this experience.
So in summary, here's the things that we learned in having to build the many new systems for and surrounding cross-play.
First, when you're dealing with your own engine, many core and fundamental parts of the engine will need to be changed.
From things like changes in underlying networking or revamping UI, all this means is that when you build your own cross-platform tech, scope and extra time need to be accounted for.
Second, when building for cross-platform, many of your game's pre-existing systems probably rely on platform APIs and features.
Your friends lists, session invites, voice chat, all that.
Most of these features will need to be recreated from scratch.
And in this case, your mileage may vary because third-party engines like Unreal or Unity, a lot of cross-platform portability of services and systems is already built in.
But it's important to take stock of what systems you rely on platform tech and will need to be moved to cross-plat.
And third, extending your cross-platform experience outside your game client to wherever players engage your game can be very valuable.
This makes it easier to give players more fine-grained control over the many new systems that you're introducing.
Having web and mobile accounted for from the beginning made for a truly cohesive experience.
So, next lesson is about handling interdependencies.
Now that you have an idea of the systems that were involved in making Crossplay, you have a better sense of the scale of this large cross-team initiative.
And with projects of this kind of scope comes many complicated dependencies between all the teams that are working on it.
And these all need to be wrangled.
Having four different teams focused on separate parts of the experience meant that there were many intertwined dependencies.
To make things more complicated, we were executing under a tight timeline to deliver by September of 2021.
This made it all the more important to ensure all teams were not blocked and could make progress.
Also, with everyone being remote, come complications of being in sync.
No longer were we able to have ad hoc hallway or desk conversations. You couldn't just scroll up to someone's desk and ask them a question, which usually helps smooth out questions and issues. Those didn't happen as organically when you're working from home, since you'd have to message someone. So how did we approach this issue?
We were very fortunate enough to have so many people working on this feature.
But with more people comes the challenge of making sure everyone is building towards the same goal.
We emphasized team alignment and providing as many avenues as possible to identify blockers and open issues that anyone on the team was facing.
We set out to create as many opportunities as possible to ensure we were all building towards the same thing.
And it's a bit cliche for me as a producer to bias this way, but especially in a remote work-from-home world, the solution came in the form of syncs and meetings.
What we found was that having recurring syncs that pared down attendees by feature area, like everyone who was working on communication or chat, as well as ones by discipline, like everyone, all testers, or all engineers, allowed us to focus conversations on specific topics, like open issues and questions, or upcoming integrations of certain features.
One example of how this benefited us was by having a weekly sync to discuss specifically friends and presents.
By focusing in on how the Bungie Friends service would interact with the UI and everything else in the client, people were able to bring up their questions.
We realized we needed to figure out how blocking would work in a cross-play world, and this ambiguity was being felt by most people working on this feature.
We were able to quickly address this by having engineers and designers in the same room to discuss what needed to be done to the experience.
This was followed up in our weekly engineering syncs for the team to discuss the feasibility of certain technical solutions, like how would we be able to ferry the data to the right places.
Also, we used recurring rituals like meetings where everyone on the core team was invited.
This ensured everyone was present to be able to see how everyone was building together and how we were progressing holistically.
Also, we had core team-wide weekly play tests.
This allowed the whole team to see how the experience was coming together, and it was definitely a morale boost to see how the features that they were working on were just getting added more and more each week, and it got more polished.
From all these points above, it's pretty clear that the approach that we took was giving team members lots of exposure to each other to build cohesion and empower them to identify and mitigate issues.
So to sum it up, creating dedicated sync points ensures blockers are escalated at a cross-team level and handled quickly.
Having syncs that slice your team in multiple different ways, like by working group or feature area or discipline, allows for different opportunities to discuss issues at different scales and depths.
Next, when dealing with a large team that might also be remote, it's important to make sure everyone is aligned.
Offering as many opportunities for the team to see each other helped make it easier for people across the team to proactively approach anyone else on the team with issues that they might be facing.
And it gives people a sense of how their work fits into the bigger picture.
And lastly, if you heard all this talk about syncs and meetings and working groups and everything and thought, that's a lot of meetings, I'd agree.
Syncs to build consensus across the team come at the cost of IC time, or actually time to do things.
And that's overhead on your team.
So it's all the more important to find a balance.
Admittedly, for us, we initially over-indexed on syncs.
Too much time spent in meetings meant not enough time to do actual work.
But we quickly were able to iterate on our processes and able to find a better cadence by limiting total meeting time for the team.
So now that we talked about the what was involved with Crossplay and how we went about building it, let's move on to some of the design considerations.
And in this lesson, it's about matchmaking.
Players come to Destiny 2 with many different styles of play.
From a preference for what kind of class, anyone here Warlock main?
To liking, there we go, to liking certain types of damage, like solar or stasis or arc.
The differences in play styles don't just stop there.
It extends to the platform you play on.
For example, keyboard and mouse players tend to have quicker reaction times compared to console players.
The perception of this is especially important when you're in competitive modes.
When you throw them all together in cross-play, you need to consider the types of players that are coming in and what they're coming with.
For Destiny 2 specifically, there's some interesting challenges in this space.
For example, the game has both competitive and cooperative modes, and players have different expectations in how they engage in each activity.
Like with the reaction time difference.
Maybe when you're in a cooperative mode, like a strike, and you don't, it doesn't really matter.
But when you're in a competitive crucible match, as a console player, if you're matched against PC players, and you might perceive reaction time as a difference, and it might feel unfair.
Also, PC and console players' platforms have very different security landscapes.
Players using hacks and exploits are something we're constantly fighting against and can make for a lesser experience if you're exposing a console player who might not be used to this.
So how do you make it fair for players on different platforms to play together while embracing full cross-platform?
Figuring out how to match players on different platforms in the best way was an important decision that we had to make.
we landed on making different matchmaking pools based on type of activity.
This ensured fairness and balance while allowing players to play together.
Not all modes of the game needed to create different matchmaking pools.
There are strong player feelings about fairness, whether it be making controllers as competitive as possible with mouse and keyboard, or the different security landscapes with console and PC.
We opted to keep PC players separate from console players for certain modes.
We felt protecting players and ensuring fairness was the most important to ensure the best experience for the greatest number of players.
We arrived at this decision from conversations that we had with our player support and community teams who stressed the importance of protecting players' experiences.
Additionally, we chose to split pools, we chose not to split pools by other factors, like input modality, like having a mouse and keyboard pool versus a controller pool, because making that distinction has interesting complications.
So, for example, if you are a PC player and you plug in your controller, you enter into the, and you kick off a competitive match.
You hop into your controller pool, but you unplug your controller right when the match starts and you start using your mouse and keyboard.
In this case, that distinction of making those pools doesn't really matter anymore.
So guided by that principle of fairness and protecting players as the most important, it made our matchmaking decisions more clear.
Starting with cooperative modes.
In this case, we didn't use separate pools.
Everyone plays together.
There was no need to create separate pools of players since there was no edge one platform would have over the other.
And experience for players in modes like strikes was not drastically altered.
So when you land in a destination and you hop on your sparrow and you start roaming around the moon, you're automatically match made in world with players from any other platform.
Moving to competitive is where we started using different pools.
We created two different matchmaking pools.
The first was the console pool in which we have Stadia, Xbox consoles, and PlayStation consoles.
And in this case, while Stadia is technically a PC, or you're at least streaming from one, that PC is hosted within a data center, and it's unlikely to have exploits installed or tampering done to the client.
So for this case, we included it in the console pool.
Then we have the PC pool, in which we have Steam and Microsoft PC Store players.
So now, when you launch a competitive activity where you're playing against other players, depending on what platform you're playing from, you'll be match made with other players in the corresponding pool you belong to.
That's not to say we can't create fire teams of mixed platform players from different pools.
We account for this by making it so that PC players cannot cross over and enter the console pool.
Only platforms in the console pool can cross over and play in the PC pool.
So for example, if you're a PlayStation player and you fire team up with your friends who are on Steam and load in a gambit, even though you're on Stadia, you'll be playing against PC players in the match.
This keeps the boundaries that we set for PC and console pools.
So bringing it all together for cross-platform gameplay.
First, understanding the areas for concern for gameplay implications with cross-platform will help guide your discussions and decisions.
Understanding where your players' concerns and reservations lie will help identify these areas.
For us, that came from talking to our player support and community teams, which gave us direction so we could proactively problem solve.
Next, if you're creating different pools for matchmaking, being deliberate for what reasons you're doing so is a useful razor for design.
For us, it was the guiding principles of protecting player experiences and fairness that made it much easier to have discussions about matchmaking pools and how we should split up players.
So the next lesson.
In addition to the implications cross-platform has on gameplay, there's also new social behaviors from players that need to be handled.
Each platform possesses their own standards of acceptable social behavior when online.
When you combine these players from all platforms, these differences in how players are used to interacting with each other can give rise to new forms of toxicity and harassment.
Take, for example, the kinds of usernames that are allowed on each platform.
Some platforms have strict filters against profanity and derogatory language, but on others, you can name yourself anything that you want.
So a player coming from a platform with filtered names could suddenly be exposed to all sorts of profanity, which could range from lewd to derogatory and bullying.
Also, platforms offer social controls like blocking and settings to prevent external contact.
But with cross-play, new vectors for attack open up.
If you platform block an aggressor on your account, what's to prevent them from hopping over to another platform to continue harassing you?
So part of the work for cross-play became addressing these social behaviors.
There's many forms of online harassment in games out there.
And when you expose players to bigger populations, as is the case when you bring platforms together, that's a risk that you take on.
It's especially important to recognize that these forms of antagonistic behavior tend to be directed at minorities and more vulnerable groups of player populations.
So much like how our matchmaking pools decision was guided by wanting to protect players, we did the same with social controls and systems.
We dedicated a lot of time and effort to this space to try to prevent abuse and harassment.
To accomplish this, we focused on a couple areas. First, we addressed user-generated content that was associated with crossplay. In this case, most important was the bungee name. It became clear from our early discussions that we needed to filter for profanity since some platforms have various levels of screening for usernames.
If there was, if we didn't, if there was no platform level filtering, there was a risk that inappropriate names and words would be used in platform names and that in turn would be passed in and see the bungee name. To prevent this, we adopted a third party solution that is versatile and context aware. We'll discuss this a little bit later in the talk. Another area that we worked on was to create adequate blocking systems to manage who you could interact with. We needed our new bungee social network to account for bad actors.
So in our new bungee, so our bungee block system, we aim for parity with platform blocks, but extended it to cross-platform.
We made sure that bungee block expands all platforms.
If you block a player, all accounts that are associated with them are blocked.
This ensures that if you block a harasser, they can't hop around to other platforms and continue that abuse.
By building these systems, we better protect the player and give them more control over their social interactions.
So here's a quick run-through of the Bungie block system.
Upon inspecting an offending player that you intend to block, you're given that option.
Doing that, to make it clear what this action does, a prompt is shown.
Bungie block prevents all forms of communication, whether it be chat, fireteam invites, friend requests, and more.
And once that's done, there's a very clear indication in the player details that they're blocked.
And this spans across all platforms that are linked to them.
So when it comes to social systems being mixed with cross-play, a lot of considerations need to be made.
Building cross-platform potentially exposes players to new toxic players.
More players and platforms means many new avenues for toxicity and harassment.
Being conscious of existing social interactions existing in your game and new ones coming with cross-platform will help you figure out areas where new forms of harassment and abuse could come from.
And additionally, when these areas are identified, prioritizing the work to protect players is very important for ensuring the best experience for all players.
For us, it was a requirement to land blocking to be able to ship.
Only then can you ensure that you're properly protecting your players.
So next lesson.
Let's move on to some of the more external factors that we faced when building Crossplay.
So while you can design and build the perfect cross-platform system, to be able to release, you need to meet the requirements of first-party platforms.
Destiny 2 ships on a lot of platforms.
And having previously shipped on all these platforms, we're pretty familiar with the certification requirements that are needed to be met.
So going into Crossplay project, we did our due diligence.
Many first parties have whole sections in their certification requirements dedicated to cross platform play and their requirements to allow for that. However, from our initial designs, there were differences in what we wanted in the experience versus what first parties would require. Some examples, some platforms require players on their platforms to be primarily identified by their platform names.
or in terms of other requirements, some platforms don't allow for the showing of logos or icons of other platforms while you're playing on that platform. These are just a few of the cert requirements that needed to be worked through in order to ship. So we had to work very closely with first parties to align our requirements with, their requirements with our aspirations. One of the constated constraints at the beginning of the project was that we respect first party partner relationships and work to obey the spirit of requirements.
It was a very long process that involved a lot of meetings and engagements with first parties, but we feel like all parties came out happy.
It's important to call out here for that first party partner relationships vary drastically from studio to studio.
At Bungie, we're very fortunate to have very close relationships with our first parties, and we were able to meet with them frequently to reach a mutual understanding.
So what steps did we take to accomplish that?
First, during pre-production, we made sure to go through the requirements for each platform and flag areas that differed from our designs.
This helped us identify areas that we needed to focus in on and figure out.
Being able to meet with first-party partners helped us understand the spirit of requirements and how we could make that work with our intended experience.
It was a long approval process, but starting the thinking and engagements early made sure we were set up for success.
So, some key things for you to take away from our experience.
You need to be very aware of first party requirements with cross-platform play from the very beginning of your production.
And account for them in your designs.
It's very vital to figuring out a path forward to ship.
Also, executing towards your vision while trying your best to respect their requirements allows you to deliver the experiences that work for everyone.
We wanted to ship something great with cross-play.
And on the platform partner side, they wanted to uphold their brand integrity.
There was room between the needs of both sides to be successful, and from that, cross-play was made a reality.
So in terms of other external factors to consider when building cross-play is with third-party solutions and figuring out how and when to use them to aid your development.
Like mentioned before, standing up cross-platform play means building a lot of systems that were previously reliant on platform-level APIs and services.
When building these features, a couple specific use cases emerged that complicated these systems, but were still necessary. For example, needing to ensure appropriate names were used for bungee names, or using a voice library that was portable across all platforms. Handling these cases, like building a new language filter, would have added scope to our project.
And being on such a tight timeline, tough calls had to be made.
Certain functionalities required a lot of effort and would not fit within our timeline.
For example, building a good language filter for bungee names and user-generated content would be a massive undertaking.
Destiny 2 supports 12 languages.
Screening and filtering in all these languages requires a lot of expertise and time.
So for the specific areas of voice chat, text chat, and text content filtering and moderation, we conducted make or buy analyses on what we needed to make ourselves and what alternate solutions existed that were worth it for us to buy.
There's a lot of existing third party options that are immersed in these spaces and they build products that are better than anything that we could manage.
So in the case for these options, trying to investigate a third party option offered a chance to save time and enable us to ship a better experience.
So let's first start looking at text and voice chat.
There's a lot of different options in this space, like PlayFab, BuyBox, Epic Games.
There's a lot of great players out there.
So some considerations that we made in our decision was first, whether a third-party solution had the libraries that supported all the platforms that we ship on.
Also, another consideration was that the cost of relaying the data ourselves compared to using third party was technically cheaper for handling that volume of data. But what came, what that, the cost also added up in terms of long term upkeep and maintenance. And lastly, how easy was it to be able to integrate this third party solution? What kind of documentation and support was available for us to be able to integrate?
On the text filtering side, there's a lot of different options that offer things, that different technologies like regexes or flat lists.
Some vendors even offer machine learning that are contextually aware.
Being able to distinguish the difference between someone saying you are an effing idiot as bullying versus someone saying this game is effing awesome as positive sentiment.
Building that ourselves would have been very difficult to train up that model and would require a lot of language expertise in terms of staffing.
Other things to include in this space are also making sure that any filtering solution supported all the languages that we needed, and also figuring out what moderation tools were available with each of these solutions for repeated offenders, and how it compares to the tools that we currently have, and how we could use them to better support our player support teams.
All these considerations were made to combat toxic social behavior.
Being highly aware of the needs of your game and making sure a solution fully addresses those is key to making these decisions.
If something fits right, it's a great candidate to use to save time from having to build from scratch.
So what did we end up doing?
For us, we ended up integrating a third-party voice chat solution to save on the maintenance overhead if we had built it ourselves.
We found an external solution to handle voice.
This allowed us to direct our attention to landing other parts of the cross-play experience.
For text filtering and moderation, the massive amount of work it would have taken to build and support the system for so many languages also led us to integrate a third party.
It's important to call out in this case that in our experience, it did take a significant amount of time to integrate both these solutions.
Choosing to buy a solution that requires engineering work and to get it working within your game, and the benefits are not instant.
Additionally, when you go with a third party, you're effectively tying your game to another product.
The releases and updates to that are dependent on someone else, and you don't necessarily have the most control over that.
And in terms of the last MakerBuy analysis, for text chat, while there were a lot of solutions out there that accomplished what we needed, we felt that being able to control our own text chat platform from which we could build deeper integrations offered a lot of potential.
So for that case, we ended up building our own text chat.
What we ended up building ourselves versus buying was unique to our game and needs.
When faced with decisions like this, it's important to consider what features are fundamental to the experience that you're building.
Identifying what was within scope to land made it clear where we should be exploring third-party partnerships.
Whether your team actually needs to be building certain features.
With so many pre-existing solutions out there, knowing what needs to be built in-house is important for determining scope.
Figuring out if you're building a certain system for things like maintaining a competitive advantage will help adjust your priorities.
And lastly, one important note is that integrating a third-party solution is not a silver bullet.
Adding any kind of new tech always takes time and can't be done instantly.
That needs to be considered with your planning and timelines.
In our case, when it came to integrating third parties, we did end up being overscoped, and landing these integrations wouldn't fit within our timeline.
So we ended up pushing these integrations into, slipping them into a later release.
But from a longer-term outlook, one of the things that we did save on was the maintenance and upkeep if we had built these systems ourselves.
It's the classic iron triangle problem of production, scope versus time versus cost.
Looking into a third-party option may help you find solutions when faced with trying to find a balance.
And now, the last lesson that we learned from building Crossplay.
And in this case, it comes from how we went about releasing it, taking advantage of Destiny 2 as a live service game.
Crossplay was built for an existing game, so this release needed to not disrupt our existing players.
But there's a lot of moving parts that were coming with this project, and it was a massive thing to bring to this game.
We had created the most amount of new services since the original Destiny 2, and we had broken a lot of bones, like the things with networking, to make it possible for platforms to play with each other.
This was all under a tight timeline to deliver such a huge experience.
There were big concerns about how it would all come together if we were using a single release, and that posed a huge risk.
If we chose to release in a single season, we'd only have one try to get it right.
So what did we do?
We ended up spreading out the release of Crossplay and its many systems over multiple releases and seasons, incrementally adding more functionality as we went along.
Since there were many big changes coming in, we wanted to give more time to get them in and let them bake and stabilize.
After which, they could be tested at scale with a live population.
We embraced this method of incrementally building and releasing cross-play.
We scaled from a small 10-person internal playtest for making sure things weren't crashing to later a studio-wide playtest of about 500 people.
Doing this at an increased scale allowed us to test all our tech changes across all the various platforms and all content.
When it came to releasing in the live game, we used earlier seasons to introduce big tech pieces.
We front-loaded the work to get big bone-breaking changes like the new networking changes in early.
This allowed us to get these features checked into builds very early in the development cycle, so we had plenty of time to test and stabilize.
Having these big changes out of the way early and stabilized helped us give us more confidence to tackle the other systems for cross-play.
We also used an earlier season to introduce new UI and some of the systems being built for cross-play to start getting feedback and live testing.
In the season ahead of our launch, we created an internal alpha for Bungie employees to start using cross-play.
In the live retail game, employees were given access to additional features like the new roster UI, the Bungie friends list, and more.
Employees were actually able to cross-play with the public for months ahead of the actual release.
This helped us get out some initial experience bugs and fix them before we had players trying out crossplay.
And it also gave the team a better sense of how crossplay would feel.
Also, to really stress test our new networking and matchmaking tech, we conducted a limited live beta.
We enabled it in a strike playlist and all players in the game were able to participate this and try out crossplay.
The high amount of participation in this beta helped us test out and exercise these new code paths that we were creating.
Between the internal alpha and public beta, we were able to gain more confidence in what we were building.
Committing to earlier releases and landing the components necessary affirmed our timelines and helped us finish building Crossplay strong.
Also, as an added plus, this helped build some buzz and excitement around Crossplay.
And while we saw the internal alpha and public beta as net positives, it wasn't without some bloopers.
It turns out having parts of cross-play available in your game earlier than the release made for some funny occasions where some players stumbled into cross-play earlier than intended.
And so, but like, the thing to realize is that when you're adding such large features to your live game, it's sometimes unexpected things happen.
Overall, we saw these as funny occurrences that exposed some bugs, and these were just accidents that continued to get cross-play on the minds of players and build excitement.
Using the live game to ship parts across play early really helped us ensure a smooth launch.
By front-loading the big bone-breaking changes during your development, you can introduce high-risk changes to your game earlier and give them time to stabilize.
Having a scaled-down version available in earlier releases helps you build confidence in what you are building and offers an avenue for early feedback and improve the full release version.
And lastly, giving internal employees early access to cross-play with real players is a useful mechanism.
It enables you to test out these new systems in the live game that might not be publicly ready, without the risk of exposing your players to a lower quality experience.
And with that, those were the seven lessons that we learned from building cross-play.
That was a lot that we covered because it was a very long journey for the team.
So if you're looking to build your own cross-platform experience for your game, here's the key takeaways that I think are most valuable to you and your team.
First, making cross-play can mean building many new systems and services, especially if you're relying on platform APIs or using your own engine that might not support cross-platform.
Next, while many of these functionalities were hand-rolled internally, finding opportunities to use third-party solutions helps you scope down while executing on a tight timeline.
Next, first party requirements affect the design of the experience, and from the very start of your planning, you should be taking these into account.
Cross-platform play in a game with established behaviors has very deep implications on how players interact both gameplay-wise and socially.
And sometimes, that means exposing players to potentially new toxic players and behaviors.
That is a risk that you take on, and you need to ensure that you are properly protecting your players.
It's good to front load big bone breaking changes to deep engine code, so that you have plenty of time to bake and stabilize risky features.
And if possible, using multiple release vehicles to gradually add more functionality to Crossplay allows you to scale out testing with a live population and in general, helps build confidence in your project coming together.
And that's what we learned from building crossplay.
Thank you for listening.
Hopefully you were able to take some of these lessons and apply them to your game.
As a note of thanks, this talk was only made possible because so many people worked so hard to make crossplay happen.
Special thanks goes out to all the bungos out there who worked on crossplay and made such an amazing experience for players.
Also I'd like to thank Veronica Pesturianu for being an amazing advisor for guiding me through the talk process.
And also thanks to Caitlin Yu who helped shape a lot of the format and content of this talk.
And lastly, thank you to the CAs and event support staff for making sure GDC runs smoothly.
There's a couple more talks given by some other Bungie folks if you're interested in attending.
They're happening tomorrow.
And also we're hiring.
If you're interested in working at Bungie, we have many openings across disciplines.
Check out our careers page and follow us on Twitter at Bungie Careers.
There's a QR code.
And thank you again, I've been John Chu, and now for some Q&A.
Hi John. Hi.
Uh, first of all, uh, great, great panel. Absolutely loved it. Thank you.
And, uh, wanted to congratulate you all. Uh, my wife and I are returning players.
The, uh, launch of Crossplay, I mean, incredibly successful.
It's wonderful.
Glad to hear that.
Yeah, totally. I had a question for you. So, and also thank you, our logo Samurai was up there.
Definitely appreciate that. So I can understand that neurosymbolic AI to intervene and redirect users and situations of toxicity was likely out of scope in this situation. And you all were moving very quickly on this project. Yeah. What did you all end up going with in terms of a third party solution to combat toxicity?
Um, so what we ended up going with was unique to our game in our case and um, and so it's unique because based on business discussions and also some of the design considerations. In terms of filtering, as I mentioned before we went with also a machine learning one but was a little bit more directly applicable to the user generated content. We can talk a little bit later in terms of like the actual vendor that we used and because like part of it was like, I wasn't part of those business discussions but also we can, we can just talk about that.
Yeah, no, all good. Big fan, Ike. Thank you.
Thank you.
Hi, sorry.
Yeah, one second here.
Question from online chat.
Was there any automated testing to validate cross-play features?
If so, what did that look like?
Um, so, yeah, we, so part of it was, there was some automated testing in terms of some of the tools that we were using to help create like, connection, oh, so actually the question was, was there any automated testing? Sorry, I forgot to repeat the question. Um, so the answer is, there was some automated testing that we did in this case, um, there was some tools that were created to help.
create cross platform, cross platform friends and see your friends list and also make sure you test, test that out. Also things like with cross platform clans and also automating the changing of bungee names. A lot of that was automated to help test out a lot of those systems. So that's most of what we did for automation there.
Hi there. Hi John. Thanks for the talk. It was really awesome. I was curious because I know it's a problem that I kind of ran into previously, but with the naming convention in regards to how you had to make the Bungie username so that people were identified across platforms.
Did you ever run into complications when someone decided to change their username, especially the initial one that was kind of taken into the Bungie name?
Yeah, that's a great question. So the question was, did we run into any complications of changing names? And the answer is, the short answer is yes. There, there was a lot of interesting complications with that. And that's where it, where it, it became especially important to use that third party content filtering solution to be able to ensure that we were properly filtering for the right names. And in the case that we ended up having to release the feature for bungee name changes a little bit later from our release, so we had a couple months in between and we actually just recently enabled that.
um, because we wanted to get the system right so that when players were changing their names, we were allowing for the right way to do that. So like, we were properly filtering for them that we had the right mechanisms to do that, to be able to track whether or not they, they could and how, how we went about doing that. So there were complications and yes, we relied on that.
Hi John, great talk. I had a question about your two player pools you built for your PC and your console players.
Did you ever consider making those a little bit more dynamic for players that you identified as trustworthy or that offset bad actors?
Yeah, so the question is, did we make any considerations about making the pools a little bit more dynamic to account for bad actors?
Or good actors.
Or good actors, yeah.
So, the way we built the matchmaking pool system was actually, we built it in a way that was robust enough to allow for arbitrary pool creation, so we can make those changes in the future.
And while we limited it to...
but based on platform that the, the player was on.
We allow it so that any activity going forward, you can customize how those pools were made.
So in those cases, like, if in the future you have some activity in which it might give just PlayStation players an advantage somehow, or Xbox players an advantage in some way, we would be able to control for that in terms of how we split up the pools for that specific activity.
We're taking it at, so we wanted to, we built it in a way to allow, keep the door open for the future to be able to do that as well.
Cool. Thank you.
Cool, so thank you very much for the talk, John.
Quick question, was it worth it?
Because it took about a year of effort, 50 engineers and assorted people, huge amount of third party effort.
Yeah, I'd have to say I think it's worth it, especially, oh sorry, the question was whether building this was worth it.
So I would say yes, I think this was something that our players have been wanting for a very long time and we see a lot of positive sentiment to it.
I think there's, from a business perspective, you're not seeing direct.
compensation in terms of how much this adds to that, but like this is just, this just adds to the experience because it, like I just was recently talking to someone who said it felt like the game had tripled in population once this was enabled and that is something really magical to be able to do with this in this experience and especially within the industry you're seeing a lot of like games and like a lot of platforms being able to have like those lines blurring, I think it's very important to be able to embrace that and allow for anyone to be able to play with each other.
Cool, thank you.
Firstly, firstly, great talk.
Secondly, can you scroll back to the previous slide just.
There we go, you scrubbed past that too fast.
And now my question.
So like, I'm sorry.
I mean, technical decisions influence design decisions and so on and so forth.
So my question is, like, has there been any instance in which now, like cross-play going forward has influenced, like, say, design of levels or gameplay systems?
Like, has it?
changed anything in a way, at least from a design and implementation standpoint.
So I can't speak directly to that because I'm not specifically a designer.
The question is how has the release of Crossplay and how we went about it changed the way we designed it.
But one of the things that I know that we're doing is that we're trying to embrace the incremental building of certain features a lot more.
Crossplay was probably one of the biggest things outside of Cross Save that we betaed in a live game at Bungie.
And so for that, yes, it's kind of changed the way that we're releasing it.
I'm not part of conversations in terms of how.
directly it applies to design, but that's part of it as well.
Thank you.
Thank you so much.
I think we're out of time.
If there's anymore questions, I can hang out.
Thank you.
Thank you.
