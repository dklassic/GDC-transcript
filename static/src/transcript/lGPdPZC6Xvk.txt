Hello, my name is Kate Johnson. I'm a senior designer at Hangar 13 and this is Sergio Oteog.
He is our AI lead at Hangar 13 and we'd like to welcome you to our talk, Triage on the Frontline, Improving Mafia 3 in AI and a Live Product.
So over the next 30 minutes, we're gonna start talking about our approach to the post-launch improvement of Mafia III's AI, specifically a patch.
We are going to start by sort of going over what the AI was in Mafia III, sort of talk about our gameplay.
We're gonna talk a little bit about why we decided to patch and what our goals were for this patch.
We're gonna go into the patch process and we're gonna specifically focus on triage and how we identified problems to solve.
And then we're gonna sort of wrap everything up with a few examples to hopefully get you guys seeing how our process sort of worked and there will also be some cautionary tales in there for sure.
So Mafia III released in October of 2016, and it is an open world crime drama set in the city of New Bordeaux in the turbulent 1960s.
The gameplay in Mafia III consisted of a combination of stealth, we had driving, and then we had a whole bunch of combat.
And to support this gameplay and also to sort of realize the world of Mafia III, we populated the city with a mix of enemies, allies, police, and civilian NPCs.
And all of these NPCs have a bunch of different ways that the player can interact with them.
The way that they were implemented was through both systemic and scripted encounters.
The scripted stuff was focused more on the pre-combat.
We wanted to set up all these really cool narrative vignettes so that the player would really feel this living world that we were building in New Bordeaux.
And then as far as systemic behaviors, most of our search, combat, and wander AI was all fully systemic.
So as an AI team on this project, we really had this goal of supporting the best possible quality in both of those areas.
And by the time we shipped, we felt like we had actually achieved a lot of this stuff.
We had gone a long way towards achieving our list of goals.
However, between the upcoming DLC needs, the sort of wish list that we had, just of things that we had wanted to improve over the course of the project, but couldn't for one reason or another.
And then finally, player feedback.
We paid a lot of attention to forum comments and things like that, and sort of were seeing how players were receiving the game.
We still had a lot of work to do.
So the first thing that we decided after we shipped was that we were gonna sit down and figure out how to make a patch, and I'm gonna hand off to Sergio.
Yeah, so we are all game developers, right?
And we spend big parts of our lives working on these things.
Like we spend weeks, we spend months, years working on this thing.
And we are very passionate about what we do.
And we always want to do things as best as we can.
And we are always trying to improve.
And we are never happy with what we do, right?
So that's where we were at the end of Mafia.
happy but not happy at the same time, right?
We wanted to do things better.
And at the same time, well, around that time is when I joined the studio.
I joined the studio two months before Shipping Mafia.
And when I joined, we were also looking at the future.
What's the future going to be for the studio in terms of AI?
So we decided to put both things together and start applying some of the new ideas and new things to Mafia, because we had a good testbed in there for us.
So the first thing that we did was just assemble a strike team.
And the strike team was a group of people from different departments.
We had engineers, an animator, a designer.
We had QA, and we were fully dedicated to this process.
During two, three months, we were just every day just looking at the game and thinking, you know what, can we do better for the game to make it look even better?
So with this in mind, we set our goals.
And basically, we had two.
The first one was to make it better, obviously.
That was the main thing, right?
We wanted to go and fix all those things that we were not super happy about, all the things that players were not having so much fun with, and we wanted to try and do it for as many people as possible because we wanted this thing to really change the perception of the AI in the game, right?
But the second objective we had was equally important to the first one.
It's do no harm.
So we had so many systems in the game, and they were interconnected everywhere, and we wanted to make sure that whatever we changed, we never broke anything.
So that was key for us.
Like, do things better, but don't do things worse.
Always go forward, never regress.
And now Kate is going to talk a little bit about the process.
So...
Once we had formed the Strike team and identified that we wanted to start building this patch, we sort of came up with a daily process that we went through.
And this was, we would get together, well actually first we would all play the game at our desk and we'd play the latest build.
We would look at whatever had gone in the previous day and we all had sort of an idea of what the changes were that we had implemented before.
we would be evaluating each individually to make sure that the changes we had implemented were in and doing what they were supposed to do.
And we were also looking to make sure that we didn't introduce any new issues.
Once we had done this and sort of gotten an idea of the overall health of the game, we would all get together and sit down and we'd go over this master task list that we had of all of the things that we wanted to fix and improve in Mafia III.
And I don't know...
if you guys can imagine, but this was a massive list for us, just of all the things that we had wanted to do or thought would be cool or cool ways to improve the game, in addition to that player feedback and feedback from the directors that we had compiled.
One of the first things that we had to do once we all sat down and looked at this list every day was sort of figure out how to prioritize everything.
And when I'm talking about prioritization, the way we measured it was to look at impact, complexity, and cost.
And when I talk about impact, it's pretty straightforward.
It's how big of an improvement, what's the delta from the starting point to what we expect the change to be like once we've finished implementing.
Is this going to go from being something that's okay to something that's great, or is it just gonna be a little bit of a change?
And then the other side of this is how many people is this going to affect?
So, We didn't have a lot of time to work on this patch.
It was a patch cycle, so we had about three months.
And while an issue that affected a small percentage of the playing population wouldn't necessarily fall off our radar with this prioritization process, we definitely put emphasis on looking at issues that were gonna affect the most players and that most people were gonna get a benefit from.
So the next thing I'm gonna talk about a little bit is complexity.
So if you take a system like our police dispatch system, which was sort of one of our global systems that the player interacted with in the game world, this is something where a change could be a really high impact change because it would affect a lot of players.
But if you look at...
all of the things that changing this police dispatch system could potentially affect, you could end up seeing a lot of potential for unintended consequences and knock-on effects.
So when we looked at complexity, we were talking about what is the potential for this having unintended consequences, and we wanted to try and avoid that as much as possible.
And then the third item that we talked about was cost, and cost is, again, straightforward.
It's time and resources.
We had about three months to put this patch together, so we didn't have a lot of time, which meant that we couldn't look at fixes or improvements that were going to take weeks and weeks of effort.
We needed to be able to get as much into this patch as possible.
And as far as resources, there's the human element.
So the studio was super supportive of us, and they offered us all the help that we needed, but at the same time...
we needed to be respectful of the fact that they were working on DLC.
So we needed to try and avoid pulling in, you know, animators or artists off of what they were doing. So things that included like new barks or new animations or new art assets were generally off the table for us.
So to sort of bring it all in to focus on a specific item, I'm going to talk about one of the things that sort of came up for us right after we shipped, essentially, one of the first things that we tried to tackle.
And basically we discovered that we had an issue with the way that enemies were reacting to gunshot events, so the player firing a weapon.
So the way our enemies worked is that they had an event-based reaction system.
We would trigger events based on player actions.
They would either be local to the player position or based on wherever a thing was happening in the world, for example, a bullet impact, and then we would use those events to trigger a reaction, which would then trigger a state change or a behavior change in our AI.
And the gunshot was tuned to be about 40 meters.
And that's pretty short.
And like if you think of 40 meters for how far away somebody can hear a gunshot in a big game like ours, it's not a lot of distance.
And we did this for a reason.
We did this because we wanted to make sure that the player wasn't aggroing enemies that were outside of their area of focus.
And we had a really densely packed encounter layout in our open world, and there were enemies around every corner, and we didn't want the player to get suddenly surprised by a group of guys running around because they had started a war with another group in a backyard.
This all worked fairly well.
We also had an event, by the way, that was happening outside of this 40 meter distance for bullet impact, like I said before, and also for enemies dying.
But this would not trigger combat, it would trigger search behavior.
So overall, you can kind of see how this might play out, and I'm gonna show an example of actually where it broke down.
So this is our Get Enzo mission.
And right now, we have the player with the sniper rifle.
And he's outside of that 40 meter range.
So the enemies are doing exactly what we designed them to do.
They are going to search based on their buddies dying.
And while this is hilarious and I kind of love it for what it is, it's not how we wanted this encounter to play out.
This was supposed to be a combat encounter and it wasn't really working.
And the way that it was set up, it was on the golden path.
It was one of the main missions that the player had to play through and we put that sniper rifle like right there, so we were kind of asking for it.
So it was high impact for us, and we really wanted to fix this, but we also needed to make sure that we were keeping this fix relatively low cost.
So the first thing that we did was we tried to sort of figure out what the problem was that we were trying to solve, and the first thing that, or the initial problem that was presented to us was that enemies feel stupid because they don't seem to care that the player's killing them.
Which is true, they really didn't look like they cared very much or they subdued, like a subdued caring.
So we're going to talk about some potential fixes for this particular issue.
So we had an infinite time and resources version where they were going to have this really awesome behavior where they dove into cover and then like peeked out and then sent a buddy up and were like watching.
We really wanted to do this, but it required a lot of signs and feedback that we weren't able to provide as far as animations and barks and other things.
So this was pretty much off the table right away.
Another option that we discussed that was a really inexpensive option for us would have been to actually fix it in this mission directly and just say any time the player fires a weapon in the Get Enzo mission, everybody just goes into combat.
And it would have solved this specific problem, but there are two reasons why we didn't end up going for that.
One is that it wouldn't have solved it anywhere else.
This is actually a systemic problem with the way enemies react to gunshots outside of 40 meters, and it could be reproduced anywhere in the world.
And then the second side of it is that.
It was really important to us not to take these sort of tools away from the player, and the player had silenced weapons, and had the ability to play through this mission in stealth, and we didn't want to remove that.
So that was, again, not something that we felt comfortable doing.
The third option for us was to extend that 40 meter distance to 60 meters.
And that would have sort of taken care of what we saw right there, and it would have worked, and it would have worked all over the game.
But if you remember when I talked about the sort of density of encounters that we had packed into the open world, it could have, it had the potential to break a lot of other things.
And also, there's no reason that the player couldn't move to like 61 meters and cause the same issue.
So, we sort of looked at this original problem and tried to rework it into something that was a little bit more specific and solvable for us.
And what we came up with was that the enemies feel stupid because they react calmly to the loud shooting death of an ally in close proximity.
Rephrasing the problem this way and looking at the specific actions and the specific thing that the enemies were doing that made them feel broken Sort of helped us figure out what the fix could be and we had this reaction system that I described before Really all we really needed to do was add a new reaction to a new event that was an event based on loud shooting, that would escalate them to combat instead of search.
And so it was a super easy fix for us.
We went ahead and tried it out, and this was the result.
So this is much closer to sort of how we wanted the enemies to behave.
And we had solved this issue pretty well, we felt.
And we patted ourselves on the back and we were quite pleased.
Which brings me to my next slide.
So while we were all congratulating ourselves and breaking open the champagne for job well done, QA was finding an issue.
And basically what we had done was we had forgotten that the pedestrians in our game used a completely separate reaction table from the enemies, and we had sort of forgotten to incorporate this event into their reaction table, so when we removed it for loud weapons, all of a sudden you had a bunch of enemies that were standing around looking like goons whenever the player opened fire.
It was not great.
We were able to fix it pretty quickly, and the fix still ultimately worked.
But this is sort of an example of where testing really becomes important.
So my first line in there is that you are the best person to test your work, and the reason I have that is because it's something I always really believe in for myself.
that as the person who is implementing content, I have a responsibility to understand all of the things that that change is going to impact, all of the different systems and everything else that it could potentially touch, which means that I should know all of the potential weak points and pay close attention to that.
However, I am fallible.
So I'm going to change it a little bit.
You are one of the best people to test your work.
A lot of us here are fortunate to work.
with a very talented team of QA.
QA folks, and we definitely were.
We had a great team at Hangar 13.
And one of the ways that we really tried to empower them was by being vocal about our changes and making sure that anything that we introduced, they understood the ramifications of, and they understood how it worked, what the changes was, what all the systems were.
and what the potential weak points were for it.
And that allowed them to test more effectively, which made this turnaround a lot faster.
So trust your QA team.
They're probably not out to get you.
And with that, I'm gonna pass you off to Sergio.
All right, so now I'm going to show you a couple of exact examples.
We want to illustrate the process a little bit better.
So we want you to really understand what it was like for us during that period of time, right?
So as Kate said before, the first thing that we did every day was basically play the game.
And play the game looking at trying to find things that were broken in there or that didn't feel that good, right?
So this is what we're going to do now, like all together.
Let's look at a video from Mafia 3 and try to see what doesn't feel right to you.
So in here, basically, the player is whistling at that group of people.
And one of them is going to come over.
And the player just takes him down.
OK.
Yeah, we didn't have audio in there.
So.
What did not feel right to you?
So to me, it was this part, right?
You were taking down a guy that just came from that group of people.
Those guys were still looking at him, and we had that big window in there, and they were not reacting to it.
They were just completely ignoring the fact that his friend was being killed, right?
So, you know, finding the problem in this situation is pretty simple, right?
The problem is that enemies feel unresponsive because they don't react to a visible take-down.
And the solution for this is also...
Fairly straightforward, right?
You have to make it visible for them.
You have to be careful and have some radius so that they don't see it in a super long distance.
But that's kind of like the normal vision anyway, right?
So that is what we did.
So I'm just going to show you.
Huh?
God damn it to hell!
So now you can see that the other two guys reacted, freaked out, and went into combat the way they were supposed to do at the beginning, right?
So let's take a look at the video again, but I'm going to play it for a little bit longer now.
So again, this is a video from before the patch, so it's exactly the same thing.
Those guys are not going to react to the thing now.
So, what did not feel right in here?
So you know, when we were looking at the prong, we thought that the The problem was that whistle was OP.
The problem is that you have this tool that is so powerful that people can exploit it so easily.
So when someone tells you this thing is super overpowered, what you do is try to make it less powerful.
And that's what we tried to do.
So the first thing that we tried to do was, OK, so what if guys after the subsequent whistles don't come to investigate?
They just ignore the fact.
But that felt pretty broken, right?
Because it was only one guy coming, and then the rest were like, you know, completely unresponsive to that thing.
So we didn't like that solution.
Second solution was to, you know, having, rather than having one guy come to investigate, why don't we send two guys?
Because that way, you know, if you kill one, the other will alert the rest of the scenario, right?
But that thing was breaking stealth for us.
Because this was actually a design decision.
We wanted the player to be able to play with these tools and to feel powerful and to be able to thin the hurt and to be able to do all these things.
So that solution didn't work for us either.
And the third solution that we tried was to basically escalate response based on number of whistles.
So the first one would be an investigation.
But if you whistle again, maybe they go into search.
If you whistle again, they go into combat.
But it felt pretty weird that if you whistle at someone from 20 meters, they immediately know that you're there.
And they just want to kill you because someone whistled from there.
So we didn't like it either.
Although this last solution, I have to say that we kept it for the game for some things.
Like if you whistled at a guy that was right next to you while he was searching that position because you had already whistled at him, then he would have gone into combat because he was pissed off at that point, right?
But, you know, I think that the actual problem was more this.
Like, you know, whistle was OP, right?
But, you know, and this comic is awesome.
We found it when we were working on the talk and it reflects the thing perfectly.
But the actual problem is this.
The actual problem is that we still feel soapy because the enemies keep coming to investigate the same location over and over.
So, you know, how do we solve that then?
So we knew that we wanted to keep the same sort of behavior because that was the way stealth was supposed to work in our game.
But we needed to find a way to improve the behavior of the guys so it didn't feel as stupid as it felt right now.
And you know, this is something that happens in many games, but we wanted to be better than that, right?
So what we decided to do.
It's basically to have people that receive a whistle, like all those people that were with him in the video.
We want them to remember that they had already received a whistle, and that there was a guy from the group that went and investigated that thing.
And then when they receive another whistle from the same location, they say, like, OK, so I know that somebody went there.
I know that that guy is dead.
So there's something going on here.
So we wanted them to call out the fact.
We wanted them to tell you, you know, we know this is wrong.
So now we're going to escalate the behavior.
So that's what we did.
And this video is a bit weird because I have to move around because it's after the fight so they will see me taking him down.
So I don't want him to see me do that.
I have to wait for him outside of the room so they can block him.
This is what happens when you whistle at the second guy.
Where'd you go, Frey?
I'll bring his dumb ass back.
And you can see that the rest of the scene is also escalating into something else, right?
So, you know, there are a few hints to more of the plot of the movie.
Christ is God.
I don't let you go!
In general, the behavior of the AI was much more appropriate for the situation, right?
So now that I've shown the examples, I just want to talk about a couple of things that you should watch out for if you are working on this sort of problem.
So the first thing is for sure that you have to identify the right problem.
We've been talking about this twice already in this talk, right, like we had an issue with the sniper rifle problem that we didn't know exactly what the problem was at the beginning, so we were not fixing the right thing.
And we had the same thing during Wizzle.
So identifying exactly what you're trying to solve, that's the key.
Second thing is being overcautious.
We had this problem in a couple of situations that we haven't talked about in this presentation.
But if you know that basically we knew that we needed to fix something going the right way, and the right way was scary for us.
So we decided to try and do little steps just to see if that was enough.
But in the end, that was not enough, and we had to end up doing the scary thing anyway.
So identifying that thing from the beginning is better.
And the last thing is knowing when to stop.
We also had situations like this, where we were trying to improve something that was not really broken, but we just wanted to polish things a little bit more.
But in particular, we wanted to improve the surprise reaction, like what happened when someone saw you.
Someone was completely unaware of you, and you just jumped in front of him.
Because that, right now, it was going through normal systems, normal perception, so it was all good.
But the reaction was that they went into combat right away.
And we wanted some sort of behavior first, like some sort of reaction.
couldn't make that thing work because of the amount of animations that we needed for it.
We needed animations from different directions, for different weapons, like a lot of things.
So just to recap, the process is basically that you have to identify a problem, you have to find all the potential improvements, implement the best one based on impact and cost, then test it, and, you know, keep iterating and keep doing this thing until you run out of time, basically.
So that was the end of the talk.
So thank you very much for coming.
Yes.
