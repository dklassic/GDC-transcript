Hello, hello. I think we're going to get started here. Thanks everybody for coming. I'm supposed to remind you to turn off your noise-making devices before we go. So where do you get your ideas? Isn't this the question that every writer dreads, as if there's some magical place where these ideas come from? Anyone who's been working in a creative field for long enough knows that, like writing or like games, knows that ideas are a dime or a dozen.
implementation is hard. Don't get me wrong, good ideas do help, but the devil is in the details of implementation.
Writers get asked this so often that they come up with pithy answers, like Harlan Ellison would say, Schenectady, there's a nice shop there where you can order ideas and they come in a tidy box and then you use them. Neil Gaiman had a pithy answer to this as well until he shifted to just saying, honestly, I make them up out of my head.
So anyone who's been doing game design well enough has probably heard our version of this, where do you get your game ideas? Or maybe the slightly better but still not great question, how do you make your games fun?
Pro tip for anyone who is just getting into game design professionally, we don't like the word fun very much because it's too amorphous, too broad, too hard to define what exactly you mean. Of course we want people to have fun, but it's not a very useful descriptor. But this is a better question. Or maybe how do you make your games work? That's the question I like to ask veteran game designers to try to figure out what their process is, how they go from those interesting ideas to a game that's good and that players enjoy.
because it's going from the idea to the working game that's the hard part. How do you get your prototypes to work? How do you make them quickly enough that they solve those big risky questions early before production starts? How do you get your systems to work so that people are hooked, so that people keep playing, so that they understand what's going on?
How do you make your enemies work so that they're challenging enough? How do you make your teams work so that everyone's turning, going in the same direction?
So this is the rules of the game session.
My name's Richard Rouse.
I will be your host today.
I'm a director, designer, writer at Paranoid Productions, where we're working on an action infiltration game with a shifting narrative called The Church in the Darkness.
Our format today is simple.
Five designers get 10 minutes each to talk about a game design rule that is personal to them.
We did this session first last year with five other game designers.
and this turned out pretty well and you can go watch it on the vault, it's up there for free, if you go to GDC vault and search for five rules, this will come up at the top. And that session went pretty well and was really interesting. So we thought, hey, let's do it again and get a new set of designers.
So as I said last year, game design rules are personal, not universal.
That means a lot of the rules you'll hear today are things that these specific designers really enjoy using that help them make their games, whatever genre, whatever team situation they may be in. Just because you hear a rule here today doesn't mean it's necessarily the final word on this subject. But I don't know about you, but I find it interesting to hear from people who have worked on great games like some of the ones behind me now what rules they used when making them.
not so I can copy them, so I can try to understand what my own versions of those rules might be. You can think of your game design rules as like a deck of cards that we as game designers can choose to play and deploy when the time is right. I've been working as a game designer for a while.
So naturally I have my own deck of these rules. Sometimes those rules are specific to a project. So for example on the suffering game, these might be some of the rules that I used. I wanted a consistent rules-based world. I wanted a narrative that changed the future and the past.
I said to everyone all the time, the game is always too hard.
And sometimes these rules will change project to project for a few different reasons.
For example, on the church in the darkness, the game I'm working on now, a lot of the rules stay the same, but obviously not every game has horrific creatures in it.
So we took that out.
some of the rules change because I realize the old version wasn't wrong. It wasn't your game is too hard. Your game should be hard enough. And sometimes new rules come up. So these can shift project to project, studio to studio. So bear that in mind. In the throws of development, nothing is absolute. It's an act of constant compromise with the team and the schedule and the budget and the technology and so many factors.
But I still find it useful that when you're floating out to sea wondering what the heck is going on in your project, you can look to some of those sign post rules to help pull you back to calm waters. So today we're going to have a series of speakers get up here. A little later on, Emily Short is going to tell us how she tests her game before it's maybe even ready for testing.
George Fan is going to tell us how your enemies are not as different as you think they are. Liz England is going to tell us who you should make your game design documents for, and Michael DePlater is going to tell us how systems can bring about some human stories.
But up first, we have Lee Perry.
He is an experienced game designer, having worked on everything from the Gears of War franchise to the mobile title Lily, to now, of course, working on a VR title, Moonstrike, like so many are working on VR titles.
And he's gonna tell us how everything you know is wrong when it comes to when to add pizzazz to your game.
For you, Lee Perry.
Thank you.
Hey everybody.
So this is my talk.
Call it Pizazz First, Polish Later.
So when I first started making games, like a lot of people, I used to think that games were about these high concepts and big ideas about the settings and character bios and all the kind of classic things that kind of get people into games early on.
But as you start getting more experience, you start to realize that so many games have something kind of special about them that make them endearing beyond just their concepts.
And it kind of becomes less about this.
and more about what this means and this means and how just interacting with the controller and having things coming at you that you're instigating and getting this really good feedback is super rewarding.
And it's this huge part of your game in addition to the concepts.
So generally, when I'm talking about feedback, most of us know what we're talking about, but for the most part, I'm talking about things like how satisfying it is in a Mario game where you jump and there's a little screen shake and his little particle cloud on his feet.
Or how like the guys who make Peggle kind of blaze the trail on neat little sounds escalating as things happen, doo-doo-doo-doo-doo, or exploding particles everywhere, or slow motion.
And, you know, they're kind of the godfathers of really good player feedback.
If you want more specific details on that, there's a couple of great talks online.
The grapefruit guy called Juice It or Lose It.
There's a really good flambier talk called The Art of Screen Shake.
Really good feedback techniques.
So, it's very easy, and for a long time I kind of associated these feedback techniques with kind of polish on a game.
And part of the problem is that you save a lot of polish until the end of your game, which as we all know from kind of practically speaking, it's really easy to cut a lot of things at the end of the game when time starts getting squished in there.
Sometimes you might have a game where you've got a big deadline in the middle of it like a big press show or you know Demos etc. And so you have this kind of spike in the amount of polish that you have earlier in the game And when we were working on Gears of War we ended up with this kind of level of polish it kind of looked like this through production and it was because we would have these debates about all these features.
Like early on, we could talk about things like a cover system, but people weren't really sold on it until somebody would go in and add a bunch of feedback to it, like little particles and screen shakes, and Mark is going, ugh, and all kinds of crazy stuff.
And so then people would be like, oh, yeah, this is a cool feature, and I get it.
And so the feedback became an instrumental tool in selling features to the team.
And so consequently, we constantly had this ratcheting up.
version of feedback and polish in the game.
And so that was pretty cool.
It turned out that the feedback wasn't just a tool for the players, it was a tool for the developers as well, for kind of internal salesmanship.
And that was pretty cool.
So a couple years ago, I started doing kind of solo games and kind of this quest for self-sufficiency.
And being kind of a strong advocate of this, I didn't really know what that meant for me as a single person for adding feedback in my game.
And so...
I started working with this and realizing that adding feedback in your game, even if it's just for you, is another great tool.
It's not just for the players, it's not just for a team, but it's also for you, because as many of you may know, if you're working a small game, it's easy to be plagued by this like crippling self-doubt about what you're working on at every turn.
So adding feedback early on is a way to give yourself kind of an additional kind of clarity about what you're working on.
So in like some crazy ideal world, it would be awesome if we could all take our games and just drive the polish through the roof early on.
But obviously, that's freaking insane. You can't just take the first things you start adding in your game and polishing them.
I think they would call that polishing a turd, perhaps.
But what we had to do is kind of detach the concept of good player feedback from the entire concept of polish.
So it's not, feedback is not polish, it's pizzazz, is what I call it, and you can throw jazz hands when you say that to somebody.
When I'm talking about pizzazz, I'm talking about things that are...
Really help how visceral your game is but it's not necessarily like this is the final Particle effect we're going to use or whatever what matters is that it's really super catchy and it makes your game just feel better But it's stuff you can totally throw away at some point But what matters is you put something in and when you're doing these kind of core loop elements of your game early on And so it's really critical, as early as possible in your game, to get this feeling like you're the kid going, wow, or taking cars and smashing them together, and whatever.
Anything that gives you this kind of joy when you're playing your game.
So it's not enough to have these elements.
There's benefits from when you do this.
I don't know if a lot of you work with concept artists, but I keep finding good concept artists often make stupid noises when they're drawing.
That's awesome.
Anyway, so there's a lot of easy things you can do for this.
They don't have to be final elements.
You can have particle libraries from God knows where, super punchy over-the-top sounds, screen shakes, all of these things, good placeholder music, post-processing.
These are all elements of good feedback, but again, these don't have to be final things.
Just put them in early, and they will help the project as you go.
Because that timing is going to allow you to develop your core loop better and to kind of like figure out what the soul of your game is.
And you're going to find all these kind of emergent like things like, oh man, I didn't realize this was going to be so fun, but it is.
We need to expand on that.
It also encourages you to show your game, which is critical.
critical thing when you're working on your game.
Not just a press, but it's also about your internal confidence of what you're working on, which helps team morale, et cetera.
When people feel good about your game, it's huge.
Obviously now we're working with a lot of VR stuff.
And there's a couple of things with that, like VR is all about being intuitive and what can you generally teach the player without needing a tutorial. And good player feedback early on is critical for making that happen and developing your game.
And all of these like known techniques like flashy stuff and particles and sounds and stuff all work in VR for the most part. Stay away from screen shakes.
Also, early on in this VR thing, as you can tell from the show around us, there's a ton of elevator pitches and concepts going around. But it's really easy to elevate your pitch and elevate your game right now by having some of these elements, because not a lot of people are going that extra mile.
My current game, Moonstrike, prepare yourself for virtual, virtual reality.
So this is one example like early on I kind of had these really basic selection tools in my game where I'd kind of paint these selections and it kind of worked and spawned these little fleets and it's kind of Galcom-like.
But it was cool, it was really simple, it wasn't super compelling.
And so I'd go in and make kind of little models, like little selection dotted lines and you know, just kind of placeholder assets to make this kind of sequence feel a lot better.
Then I'd add sounds, all a peggle.
which you can never have enough of.
And again, it started to escalate how fun it was just to do this basic thing.
Then I added support for both controllers, even though it's totally redundant, because it's just freaking fun, like a kid when you're sitting there waving your hands around, and you're like, yeah, and I'm gonna select this thing, and I'm gonna select this kind of thing.
And just adding these kind of basic elements to it drove the project really far early on.
I got a lot of really good early results for it.
In addition to all the normal kind of confidence issues with it, I got support from Valve and Super Early Hardware because they were like, oh man, this could be a thing, that's cool.
I became an official Oculus partner in one of the launch games for the touch controllers and crazy limited hardware.
It was awesome.
I attracted a really great development partner, Tiffany Smith, who's helping me on the program because she saw what I was doing, and some really great articles.
But none of this would have happened if I would have still stuck with cubes and spheres and stuff.
So, my point, you're going to add feedback to your game anyway, right?
because you should. So just front load some, even if you're going to throw it away. Don't wait until the end. It's not polished. It doesn't have to be perfect. You can totally throw it away, but it's going to help you while you work on your game. So it's not polished, it's pizzazz, and do some jazz hands when you show it to people. Yeah. Thanks.
APPLAUSE Thank you, Lee.
I think he's just reminded us, when talking about working with big teams, just how political the act of game design can sometimes be when you're not only convincing the publishers, but also the team itself.
So next up, we have Emily Short.
She is a veteran of the world of interactive fiction, having worked on everything from the classic Galatea, to doing some writing in Sunless Sea, to working on the innovative interactive fiction system Versu.
And she's going to tell us how she tests her game before she even has testers.
Emily Short.
Hello.
I'm Emily Short.
And that was a really good point to segue from into my talk.
Because I'm going to tell you something else that you should be doing right at the beginning of your project.
Since I'm a freelance consultant in interactive narrative, I spend a lot of time with different tool sets for writing and for managing content and dialogue.
Sometimes I'm building my own tools.
Sometimes I'm working with other people's freeware tools.
And sometimes I'm working with.
proprietary tools that my client has come up with.
And I'm here to argue for a pretty simple principle, visualize early.
So when you're designing a new system, you need to think about how you're going to visualize its behavior.
If you're working on something with dialogue or narrative structure, that might mean visualizing how pieces of the story or the conversation are gonna feed into one another.
If you're working on a dynamic system, that might mean heat maps, it might mean taking traces of many consecutive runs through the system and laying them on top of each other.
It might mean a dynamic visualization tool that projects movement in response to variables that you're changing.
If you're building a procedural narrative system that uses a lot of content data, or perhaps not narrative system, a procedural system that uses a lot of other kinds of content data, that might mean coming up with ways to picture how much data you have, what categories it breaks into, and how you will know when you have enough.
And this is not a game example, but it's a piece of really beautiful visualization that shows an analysis of the words in English translations of major religious texts and how often those particular terms appear that allows you to really quickly kind of grasp where those texts are showing up and what the relative significance of them can be.
So that kind of thinking about your procedural data can be very useful in sort of refining your system.
So I'd like to take us through how I've used early visualization in several of my own projects, and then expand a little bit to talk about how that same approach might apply to other kinds of work besides narrative-focused projects.
So here's an in progress visualization of a chapter in Platinum Package, which is a story I'm writing for Choice of Games line of branching novels.
And it might look like a design document of some kind, but this is actually the result of running a Python script that I wrote against the code for this story and automatically generating a dot format file that can be read into GraphViz.
The visualization shows us the structure, and it's a little bit simplified for this talk, but the structure of one chapter.
And in that picture, I don't just have sort of here are the nodes and where they're going, but also a distinction between which of these pieces are player choices, which are represented by solid lines, and which are automatic transitions, which are represented by the dotted lines.
I can immediately see by looking at my chart that I have a mix of player choice and consequence, and the consequences are clustered towards the end of the chapter, which is what I want.
Meanwhile, the colors of the lines are showing me what kinds of stat changes are happening when the player makes those decisions.
Each color corresponds to a different stat that could be going up and down.
The transitions that are in red are ones that have no stat effects, and that's important to call out because part of the spec, the brand commission for this game is that there have to be stat changes for every single choice the player is making.
So I need to be able to instantly see that that is the case, that I've left something out that I need to correct.
So the chart keeps up with the changes that I've made in the story. So unlike a hand generated design document, it's not going out of date. That's important because I'm responding to feedback from my editor as the story progresses and over those iterations the game is diverging from the original document. So I could do meticulous upkeep on a design document or I could just have a way of seeing directly into the code and that's much better.
Now here's a case where the visualization I'm doing is farther from being a spec document and closer to being a play test report.
Versu is a project that I worked on for several years that involved characters with an AI driven approach to social interaction.
And that meant that at the high level, there was an authored structure of a number of different scenes, but within each scene, what happened was very, very dynamic depending on the moods and relationships of the characters and what dialogue the player chose to drill into and what they ignored.
From a QA perspective, that meant we needed to go far beyond just having play testers play the game a number of times in order to verify the quality of what we were building, we needed to run through thousands of trial play throughs with an additional AI agent making the players choices randomly.
And we needed not just to have that information, but be able to look at that information and instantly see what was broken or what was working.
So this chart shows the way that we visualized the resulting information.
And this is just the beginning of the story.
It actually continues for many, many more scenes with much broader branching.
But even if it's tough to read on this slide, so let's zoom in here.
So here we're seeing just the first few scenes of the game.
The first scene can end one of a couple of ways.
The percentages on this diagram indicate how many times the randomized player has reached each of these optional scenes.
Scenes that the AI reaches frequently are light gray.
scenes that they are reaching more seldom are dark gray. If there are any scenes, and there are no examples of this on this slide, but if there are any scenes that the AI never reaches, that's almost certainly a bad sign. A sign of some sort of implementation problem. So those would be called out by, again, by coloring them in red.
And in fact, in this case, I had some help from the tool designer, so we were able to build a visualization tool that was itself dynamic.
So if I looked in at one of these story nodes and wanted more information about what was happening, how has the player reached this point, how are the randomized traces leaving this point, I could click through and open it up and get a description of here are all the different...
roots into this, here are the roots out, and I can quickly see if something is getting 0%, that means that root through the story isn't being used, even if the node is being hit, there's something probably wrong with the logic that I've set up for this.
So I can see all the possible transition states.
And finally, I think it's important to make the point that your visualization does not have to be even a little bit attractive.
So I started this slideshow with a bunch of pictures from processing.org by people who are very skilled and artistic and much better at visualization than I am, but it doesn't have to be like that to be functional.
And if this picture is unsexy, that's actually part of my point.
This is a simplified version of how I looked into an experimental procedural narrative system that used a lot of event data. So we had written a number of events that could be selected to occur next depending on whether the protagonist had certain status features. And of course the event could also change the protagonist status. So running a simple script to count.
checking and setting of these statuses for each quality and then charting the result in Excel helped us get a visual sense of what was happening.
So for instance, in this representation, the wealth equals rich attribute is being checked very frequently, but set very infrequently.
which is a warning that the system contains a lot of data that might rarely have a chance to fire.
And I have been in many, many situations working on procedural systems where we spent a lot of time trying to figure out what was wrong with the code when the problem was really that we had the wrong distribution of data.
So being able to see that quickly is very, very important.
Even conditional self-formatted counts.
Another question I had about this data set was how specialized the events were.
So an event might be checking multiple prerequisite qualities at a time.
And in order to get a sense of whether I was getting good coverage for all the values of different qualities, I just threw some count data into a conditionally formatted Excel sheet.
And that didn't look particularly good, but I could instantly see where the dead zones were.
There are zero of this, zero of that, they're colored red, I know I need to build more of that kind of thing.
So it might seem like this is a really, really open-ended piece of advice that might work out wildly differently for different kinds of projects.
And it might also seem to people who are mostly designers that I'm asking you to gain new expertise that isn't necessarily in your wheelhouse.
But personally I find that even asking myself the question, what would a picture of this system look like?
gives me a really useful new angle on thinking about the quality of the design.
Because a visualization puts its emphasis, like color, size, priority on the page, all of those kinds of things, it puts its emphasis on what's wrong or what's important about your design.
So asking those questions about whatever system you're building, what is here is important and what can go wrong is really useful.
If you have a system with a large amount of data, thinking about visualizing that data means that you're gonna have to think about things like data types, what might characterize good or bad data, how much data you're going to need, and whether you have adequate coverage for different aspects of your game world.
And if you're not a programmer, but you have one handy, you might wanna talk to them at this stage about how they would approach this.
Second, the sooner you have these ideas, the sooner you can build them into your tools or specify them so that your tool programmer can start building them in for you.
So it is very, very much harder, and again, this gets back into team dynamics.
If you're at the point where you're sort of working 80 hour weeks to get enough content into your system, it's way harder at that point to say, it would really help me if I had an extra tool to see what's going on here.
Even if that would actually speed up your experience, convincing anybody on your team to actually take a break and do that for you.
impossible. So you're not going to necessarily anticipate everything that could possibly happen as the system evolves.
But one of the useful things about a visualization is that it helps you instantly recognize issues in whatever it is that you've just built. So anything you can do that highlights content problems while they're being generated will save you huge amounts of time later catching and debugging them.
And conversely, anything that makes content creators feel confident about what they've built while they're building it, leads to faster and better content.
So this is how to make future you really, really hate current you.
Well, just rely on the content creators to make sure this data is formatted correctly.
Your content team may be geniuses, but they will make mistakes. And you want as many ways as you can to find their mistakes anyway. We all know why spell checkers are useful.
Putting in more visualization options gives you more corrective tools.
So I'm not by any means the first person to stand up at GDC and talk about how to visualize particular aspects of what you might be building as a designer.
So here's Noah Falstein talking at a narrative summit a couple of years ago about puzzle dependency graphs.
This is a great talk from Alex Schambendart at the 2012 AI Summit, which includes some discussion of how to visualize behavior of squad AI.
And there's a whole panel from the AI Summit in 2011.
AI tends to do a lot of this.
Rez Graham, Michael Daw, and Brian Schwab talking about visualizing expected AI behavior and how to see when something is going wrong.
So if you want sort of more deep dives in how people do this, these are great places to look.
And then outside the world of GDC Talks, you might also get some visualization ideas from Edward Tufte's books or from Brett Victor's websites.
But whatever you're trying to do, thinking about the visualization from the beginning does some really useful things for your design process.
Visualization forces you to think about categories, what are the components of your system and how do they relate?
It forces you to consider what the failure conditions are so that you can draw visual attention to them.
and forces you to think about what success would look like.
What is a finished system?
How do you know when you've got enough content and in the right places?
And if you visualize early, you can either build or better yet make someone else build a better tool that will help you find your bugs faster and streamline your workflow.
Thank you, Emily. I think all of us as designers have been known to say, but it's not ready yet for testing. And I think Emily has just provided us one more thing we should be doing that maybe we aren't.
So next up we have George Phan who's been developing games for many years. He actually started with one of his earlier games was the San Aquarium, which was a winner in the early days of the IGF. But you probably know him for a little game he made called Plants vs. Zombies. George will be telling us how your enemies aren't as different as you think they are. And a fun fact about George, when you want to find a picture of him on the Internet, because you haven't met him before, you're very likely to come up with a bunch of pictures like this.
him to know that George, you're the only George that I'm a fan of. George fan. All right. Time to talk about my rule which is make your enemies actually different. First let's zoom into this word actually. What do I mean by that?
In this case, I mean making it so each new enemy is tackled in a different way. Think of some of the games you played where the enemy design was exceptional. I bet in each case there was a high density of enemies that you had to use different methods to defeat. The reason I have Super Mario in this slide here is because it does such a great job of meeting this criteria.
Take note of the feeling you have right now when looking at this set of bad guys. Remembering all the different ways you used to defeat them. If you are ever unsure about enemy design, I recommend analyzing the first Super Mario and see how it did things as a clean example of enemy design done right. Sometimes we set out to make a game with a lot of enemy variety. On the surface they look different enough. And they seem to do different things.
but to the player fighting enemies becomes monotonous and each new encounter doesn't bring enough uniqueness to the table.
And we're left with a game that feels like you just fought a bunch of the same thing. Today I want to teach you how to avoid that. To help us along I'm going to introduce a tool called player brain-o-vision. It's a way for us to remember to get into the player's brain as this is the most important perspective. So let's meet our player. Naturally our player has a brain.
Let's try using player brain o vision and imagine what this guy is thinking. Let's try to see what his brain sees. Based on this guy's expression, I'm going to say he's playing Bill and Ted's excellent video game adventure. All right. So let's get into this. I'm going to start with some don't dos. Here are things you don't want to do when your goal is to make enemies actually different.
First pitfall happens when we have two enemies that are identical and think, oh, we'll just change the look of one of them. That will be enough. Do this over and over again and you'll have the most boring game of all time. The problem here is that the two enemies are doing the same thing. The player doesn't handle the skeleton any differently than the mummy. So they'll store both of these in their brain occupying the same space and our brains tend to clump things together in order to keep up with all the information we need to process.
Now the player's goal is to beat the game. To that extent, the player doesn't care that the mummy looks different from the skeleton. In its efficiency, the brain will squeeze these two together into just one enemy. And that's what we want to avoid as we're not adding any true enemy variety here.
Even lazier than changing just the look is changing one color to another. I certainly didn't think of this gray fish from super Mario as a brand new enemy type. I'll cut them some slack because they were up against some extreme memory limitations at the time. But nowadays color shifts, they just don't pass for brand new enemies anymore. An abundance of them can often make your game feel cheap and most of the time you're better off with just one solid enemy instead of two pallet swapped enemies.
One more thing is to not think of small changes in HP, damage and speed as brand new enemies. A little bit is okay, but if every bad guy in your game can be defined as just some degree of these three variables, you're doing something wrong. The difference between 500 and 510 is small enough that once again, the player's brain will meld these two together into just one bad guy with about 500 HP. All right. Now that we've covered some don't dos, It's time to take a look at some doodoos. I've got a big doodoo for you to take a look at. And I'm going to call it attributes of differentiation. Basically these are qualities enemies might have that would make them play differently from one another. You might think of them as sort of avenues to explore while you're trying to make your enemies actually different. In this section of the talk I'll provide you with some examples of attributes I find myself using again and again. The first one of these is movement.
We can often make the player handle the enemy differently by simply introducing new movement patterns. In Super Mario, these enemies all have distinct styles of movement and the player needs to account for each one differently. But be careful you don't spend time making things have special movement when in the end it gets handled by the player just the same as something else. In this hypothetical game, we've designed two enemies, a bird that moves in a zigzag and a bat that moves in a sine wave.
There might be cases where this difference is significant, but for the most part I see players handling these two movement patterns in the exact same way. Again, not good if our goal is to make enemies actually different. Stuff like this can be found out through play testing, but using player brain-o-vision we can often catch it earlier. Another attribute I like to consider is priority. Meaning when seeing lots of enemies on screen, which order to defeat them in.
How urgently do I need to defeat this enemy relative to others?
An example of a high priority enemy is the generator from gauntlet. It doesn't matter how many ghosts you kill, if you don't kill the bone piles first, they'll keep spawning more ghosts. The UFO from space invaders is an interesting case.
You prioritize it not because it's threatening, but because it's worth a bunch of points and only on screen for a limited time. Let's think about priority some more. Suppose we have a group of basic grunts.
Now let's add a healer to the group.
If we try killing the grunts first, it'll take a long time, because the healer will keep them healed.
So the correct play is to focus on killing the healer first, then take care of the grunts after the healer's been dealt with.
But what about this?
Let's instead add a high damage dealing archer to the group.
In this case, the archer becomes our number one priority, because it's the more threatening unit.
Again, it makes sense to prioritize killing the archer over the grunts.
Now, as long as in this weird hypothetical game we're only presented with units in these two formations of healers and grunts and archers and grunts, the healer and the archer would seem as the exact same unit in terms of priority. Even though they perform vastly different roles. Just something to keep in mind.
Fact is a lot of enemies we design tend to fall into this high priority deal with me first category. That's why it's good to explore the other end of the spectrum and design enemies that are best dealt with last. Both these guys get mad and become more deadly after you damage them. So it's best to ignore them as long as you have other enemies to deal with.
Enemies that have lots of HP and do low amounts of damage also fit into this deal with me last category.
Another attribute we can consider is timing. It often involves having an enemy that's more dangerous during certain times or likewise more vulnerable during certain times.
A prime example of this is the piranha plant from Super Mario.
It's safe to pass while it's retracted into the pipe but dangerous otherwise. The lava bubble is another bad guy from Super Mario that hops in and out of the lava and requires timing to avoid.
If we're observant and we use player brain vision, we might discover some similarities between these two units. I initially didn't think of these as being very similar, but in researching this talk, I realized they're both timing based enemies with up and down movement. The only differences are the lava bubble is immune to Mario's fireball and only found in lava. Now this is our own game. It would then be up to us to decide if these small differences were enough.
All right. On to the next attribute. When most games in your game do close range attacks, you should shake things up by offering some enemies that are long ranged. The catapult zombie and hammer brothers are examples of long range enemies in games where most enemies are close ranged. Likewise, if most of the enemies in your game are long range, consider throwing in a close range enemy to liven things up. A lot of these attributes come down to being observant of what happens often in your game and designing things to disrupt that.
Which brings us to our next attribute.
A good way of coming up with new enemies is to think about what actions the player does most often in your game, then come up with an enemy that counters that action to shake things up.
In Super Mario, the most common action to defeat enemies is to stomp on them. So halfway through the game, the spiny enemy is introduced, which you obviously can't stomp on. Along the same lines, the buzzy beetle is immune to fireballs, another common action of Mario's. Both enemies do their job of keeping Mario on his toes and not letting him perform the same actions over and over.
In plants versus zombies I had the early issue of walnuts being really good and noticed players falling into a rut of using walnuts to solve everything. So I designed these pole vaulting zombies that would leap over the first plant they ran into thus making walnuts a little less universally good and mixing things up for the player. A good exercise is to think about what your players do often then come up with ways for your enemies to disrupt that. For example, if you notice in your game your players are just constantly spamming AOE.
You could design a unit that counters AOE. These eggs when damaged release extremely powerful demons punishing the player who just goes around AOE attacking everything willy nilly. Unleashing all the demons at once is a bad move and the demons become too overwhelming for the player to deal with.
Instead the correct play is to break the eggs one at a time dealing with each demon individually before breaking the next egg. With this one enemy type we've added a nice beat to our game where players play carefully for a bit and then they go back to constantly spamming AOE.
In PVZ I knew players had gotten used to zombies coming in from the right side of the screen. So I threw them a curve ball and introduced the digger zombie which surprise attacks your plants from the left. On the flip side we can design enemies by giving them a weakness offering a power to the player that exploits that weakness. It often feels satisfying to face down an enemy that's tough to deal with initially but then you're given a power that helps you defeat it with ease.
Finally we have the attribute of player attention which mostly comes in the form of telegraphed attacks. This involves designing enemies who deal a ton of damage not avoided but give you ample warning so you have the opportunity to avoid them.
they function in groups of enemies is to demand your attention for some amount of time. An example of this is from super Mario 3 where this sledge brother will jump up into the air forecasting a ground slam. If you're still on the ground when they slam into it you'll get stunned for some time. This forces you to pay attention and react by jumping.
All right. To sum things up, here's an effective way to make your enemies actually different. First, try to design each new enemy with an attribute of differentiation in mind. I've given you some examples of attributes you can explore. Once you've done that, pass the enemy through player brain vision to see if it actually makes the player do something different.
Do this and your enemies will be awesome. I'm looking forward to playing your upcoming games with truly diverse sets of enemies.
If you want to talk more about this, my info is right here. I will be coming out with a game later this year that has its own share of enemies that are actually different. So follow me on Twitter for updates on that. All right. Thanks.
Thank you, George, and I feel right now everyone in the room has opened their laptop and is ripping out their palette-swapping code.
I hope you are, anyway.
So next up we have Liz England. She's a game design veteran, having worked on everything from Scribblenauts to Resistance to Sunset Overdrive, a game we both worked on, but due to the modern nature of large game development, we didn't meet until this week.
Now, for another modern reality, if you've been doing game design for a while, you may know that no one is reading your precious game design documents, and, well, good news, Liz has a solution for that. Liz England.
Thank you. Can everyone hear me? Yes. Excellent. Yes, so I am talking about probably the most riveting topic that you could possibly discuss in game design, which is about documentation.
Now, this talk is a little bit advanced, maybe sort of. And it kind of assumes you already know a lot of the trials and tribulations of dealing with game design documentation, especially on a big team.
There are several talks prior to this that I recommend that you can find on the GDC vault or you can find on YouTube because I'm going to spend my ten minutes talking about a very specific kind of subtopic and my personal take on this, which is my thesis, which is make actionable documentation. Actionable here is a very specific term, and I'm going to break it down for you, which is to make documentation for people that people can act on. And...
For me, that's what actionable means.
It means people can act on it.
And I'm gonna separate this down and we're gonna talk about people first.
So, why do we care about people?
So, well, yes, I heard.
A lot of times when we make documentation, we make it to be comprehensive and exhaustive about a game.
We're documenting a game and we're trying to plan out all the details.
And then you look at the documentation and it was never meant for a human to read it.
So my first step is to say when you make documentation, you don't document a feature.
You don't document a game because the game is not reading your documentation.
It doesn't care if you document it.
It's the people that care if you document it.
And when I talk about people, let me, blah, blah, blah.
So instead of asking what feature are you documenting, ask who is this document for, and then try to answer that who question, right?
And when I talk about people, I'm obviously talking about the members of your team, and sometimes that means your whole team.
A lot of documents are written for the whole team.
A lot of times you write a document for one department or multiple departments.
But I would say, get a lot more specific than that.
Because when you write for an entire department, for example, you end up having a lot of extra information that's not very relevant.
And nobody wants to go through a document that's 90% irrelevant just to find the 10% that they care about.
They're just gonna bother you at your desk instead.
And maybe you prefer that.
So instead I would say, you know, instead of just writing for the team or maybe the department, maybe you go to the one person who's going to do something with this document and you say, hey, Adam, that guy in AI, you know, what does he need in order to?
you know, read this document. So you sit down with him and you get his buy in the first place. I like to think of a document as this like special handcrafted bespoke artisanal gift that I'm giving to another developer. And it's like made perfectly for them. And maybe in this case Adam, right, likes use cases.
So, yeah, he loves use cases and we use a ton of use cases.
and somebody else would prefer just a one page, high level document and go over the details in person.
And when you write documents this way, you're getting a lot of buy-in from other people on your team and you're making sure that the information that they're getting is actually relevant to them instead of handing them a document that they've never seen before and then they're just, their eyes glaze over, which many of us would be familiar with.
So the next question is, what do I want them to do with it?
Well what do you do with design documents, right?
What do you want people to do?
You want them to read them, right?
wrong, wrong.
That makes me so mad.
So it's like giving someone a game and saying, well, what do I do with this?
Will you play it?
I'm like, well, what am I doing with the game?
You know, am I, how am I interacting with it?
So when I say act, I'm saying, reading is a very passive way of dealing with documentation.
You don't write documentation for the purpose to be read.
Documentation doesn't exist for the purpose to exist, right?
It should have an explicit purpose, right?
If I write a documentation for someone, a doc for someone, you want them to do something with it.
And that's where I get into a little bit of game design.
We all should be familiar with use our verbs, right?
Like run, jump, shoot.
We should use those kinds of verbs with our documentation as well.
So read is a bad verb.
You don't use that verb.
But use verbs like maybe you need to inform the team, right, on a very basic level.
Maybe you need to write a document that needs to get approved by the leads, right, and that's going to have a very different format than a doc that you write for QA so that they can debug your feature or for a program in order to implement it and so on and so forth.
The important lesson here is that your documents are going to have a very different form depending on what the purpose of that document is, and also depending on who you're writing it for.
So there's a lot of different variables that go into your document.
There's no one set kind of perfect design document to follow.
So that's sort of like my summary of make actionable documentation.
And again, actionable here is the important word.
It means people can act on it.
So I'm going to go over a bunch of practical considerations.
And there's a lot of them, right?
Because when you actually try to put this into action, there's pros and there's cons, right?
So the first one is different styles for different needs.
You know, some people work best with visual documentation.
Some people work best with like flow charts or just a Word document.
And as designers, we should be familiar with being able to make all different kinds of these documents for them.
Also, this means, you know, you have smaller documents, more concise documents, because you stripped out all this extra information that you don't need to give somebody. But that does mean you have one feature, but you might have to make several documentation, several docs for that feature. So I'll give you a couple of examples. So this is a map from most of my examples are from sunset overdrive. This is a map from sunset overdrive.
And it was great because it might make zero or almost zero sense to you guys, but it was built with the people who needed to use it together in the same room. And this was basically leads from all the department got together and we built this map. And so it worked great for the team to track it. Maybe not so much like QA couldn't use this map to do anything and like if you were new to the team, maybe you can't use this map.
it was updated and it was used a lot because it was created with a bunch of people invested in the first place. And I want to compare that to a different map. This is a map that was sitting on my desk for about a year. And it just has a bunch of Post-it notes. And this was our way of organizing side content in the game.
because instead of trying to deal with an unwieldy Photoshop map and we're just a bunch of designers, we work really well with paper, so we use Post-it notes and we moved information around.
And so Quest designers could use this to help plan out all that side content in the game.
But I couldn't hand this to QA and be like, yeah, do something with this, right?
So I had to make another document, right?
And that was just a flowchart.
Now keep in mind, So this flowchart worked really well for various people on the team, especially for QA so that they could debug when do the side content roll out. But when you look at it, you realize none of the location information is here. There's no map, right? So we stripped out the information that we didn't need because it would just essentially clutter the rest of the ‑‑ clutter the document for other people on other teams.
And then I'm going to go real quick because I'm taking too much time.
So this is another document I wrote.
It's a big flow chart, lots of detail.
It worked extremely well for programmers in order to implement stuff off of this.
This is our mission flow, what happens when you fail a mission, what happens when you abandon a mission.
But I handed it to the designers and their eyes just glazed over and they just looked at me with...
what was going on. And so I basically reskinned it, took away a lot of quantitative information and replaced it with some qualitative information, you know, with the context that designers understood, which was I understand what a mission is, so how does it fit into these different slots. And that ended up working well for them. So I could not find a single document that was one size fits all. I had to make several that were, that suited each person's needs.
So some other practical considerations. It's okay not to update docs if they've served their purpose. Go ahead and retire them, you know. No one likes updating documents that have been old from six months old. Just make a new one.
Sometimes the game is its own best documentation. So here's a good example of that. In Sunset Overdrive we made a bunch of changes to our traversal system.
And then we had to communicate that to the whole team.
So we got this awesome visual design document.
And everyone kind of understood, oh, so this is the direction traversal is going.
And that was great.
So they started implementing it.
And then a few months later, it's like, OK, so what's going on with traversal?
Well, go play the game.
Because at that point, the game was the best documentation you could have for this system.
And when it changed, there was no reason to change documentation and inform the whole team.
You just go and you play the game.
some other considerations to deal with. Write docs when needed, not before. Don't write for an audience that doesn't exist yet. So some people might not like this one. What it means is let's say you're designing a boss and you have your high level approval. Well, you can go in and you can write all the details for it, but it might not get implemented for six months. And everyone knows that in those six months, a ton of things are going to change. So I would argue that you wait until the last possible practical.
minute before you write that documentation. So you know who is actually implementing it so you can write for that person.
Obviously the flip side of this is that suddenly you get documentation. And that means you have to have a really fast turnaround and be able to do documentation and be really flexible with it. So that's one of the downsides. And this also runs counter to a plan it out first mentality or it appears to on the surface at least. Because there's the idea that we want to plan everything and then.
We're working on this stuff through the software team.
Plan it out first as much as possible before you start investing the money to implement it.
But I would argue that you are your own reader, so you should be able to and you can write documentation as yourself as the reader and the purpose is to plan, right?
So it doesn't entirely strip out the idea of plan it out first.
So it's not an excuse to avoid documentation.
Even if you're waiting up to the last practical minute, you're still writing more documents, not fewer.
It doesn't replace every document that you make.
There's still going to be times where you need to make that, you know.
20 page document that some people may or may not read. And it's sad when they don't read it. But I would argue that we should try and make it as actionable as possible. So this is an example of a document for scribble knots that I made. And I had to be 25 pages. So I just said, okay, every page needs to have sort of an actionable thing that you can do with it. And split it up.
And then just to wrap up, I just want to acknowledge that this talk may not work so well if you're an indie or you work alone, because you are making all the documentation for yourself and not a big team.
And then the last thing is that sometimes it's difficult to onboard new people if you don't have any documentation for features that exist, but we already have the problem where our documentation that exists is either out of date or it doesn't exist.
So it's sort of like which is your least worst case scenario.
So that's it. That's my argument for make actionable documentation. Thank you.
It's all good.
So thank you, Liz.
We are running a little low on time.
So I'm going to move right along here to our final speaker, is Michael DePlatter, talking about a subject dear to my heart.
Often we think about game systems as intuitive or sticky or challenging or good for flow.
But what if they are good for producing humanity?
Michael has been working in games for some time, worked on everything from sports games to Total War franchise to 2014's Game of the Year, Shadow of Mordor.
Michael DePlatter.
Hello, is that coming through?
Yeah, I just love GDC so much.
All these talks are so inspiring, and I guess really that's probably the number one takeaway from this talk is how much other games and multiple genres can inform every game you're working on.
So this is really, as Richard was saying before, a personal story in the sense of a specific case study of how did sports games and war games and real world references inform the Nemesis system.
And it's sort of a two-way street.
So the Nemesis system was something where we wanted players, sorry, I should just explain, it was the key feature of Shadow of Mordor, the open world action adventure game we did last year where players have their own unique and personal enemies.
We wanted to make it a villain simulator and we wanted to make these really diverse and meaningful enemies.
And what we wanted to do was to make them operate according to the most real world intuitive rule set that we could, so to find out about how do these kind of stories get created in the real world and how could we actually apply that to the creation of our game.
And as we're looking at that, we really went back and looked not just at action adventure games, not just at games within our genres, but also sports games, war games, all sorts of different things.
And in particular, what we sort of looked at was the way that sports is a real world system that is actively designed.
You know, game designers work in sports.
You know, they design seasons, they design formats, they design rules.
And the things that those seasons and rules do is they generate stories.
The ways in which they generate stories are through a lot of the same mechanics that we see in books and movies and other media.
So they create and set up conflicts.
One of the things that was very important for us is you don't have save game mechanics in sports.
The failure and the way in which time moves forward is actually a key component of creating the drama and creating the story.
So for example, if you lose the third match of the season, you don't roll it back and play it again, you have to overcome that loss.
And those sort of real world passage of time is great for drama, it creates rivalries, it creates comebacks, it creates underdogs, it creates all of these.
personal dramas for players to overcome.
And that was something that we focused on a lot with our system as well, and finding ways to make that treatment of time tie together with our fiction, which in this case was Lord of the Rings, and a system of death and resurrection.
So time would move forward, and we would be creating these personal stories with enemies.
And another thing, oh, excuse me, sorry, end of the week, I'm finally hitting puberty.
And another thing that's very common and we can see in sports, but also very much in drama, whether it's Jane Austen or whether it's Patton or whether it's Star Wars, is social structures and social hierarchies underlie a lot of the most emotionally affecting stories.
People that start on top and they have a fall and move down in society.
People start at the bottom as a poor, innocent farm boy and make their way up.
And so that was again something that was really interesting for us to be able to simulate.
And by simulating these social structures, time, these relationships, conflict, to try and make something that's not a structured narrative but creates the same sort of emotion and the same connection.
And then as a specific example, going back to sports, sports seasons are basically a three-act narrative structure.
You have Act One, where we see who the various teams are, who are the favorites, what's going on, and we have Act Two with this.
the sort of constant buildup of the action, the highs and lows, and then act three, they generally have a structure of the finals and the final climax and the grand final.
So even though the plot is basically the same every year, the stories and the dramas of it are incredibly dynamic.
And that was a model which we wanted to take and apply into our genre, which was action adventure.
And the other one.
which was very important for us and often isn't the case in games.
In games, there's the tendency when you fail to say, okay, go back and do that again.
We're going to wave our hands and say it didn't happen.
But, as I say, in sports, whether it's an injury or a loss, that failure is actually embraced and used to create more drama, and that was absolutely core to us.
We wanted, when you died, not to say, okay, that's a failure, you should go back and do that again, but you've actually created the seed of an exciting and personal story and this vendetta and this personal relationship against the guy that defeated you.
And of course, the other place that that happens constantly and time moves forward, we create these personal rivalries is multiplayer games, so, you know, Call of Duty.
and so on, which was another, we were sort of trying to create the types of relatedness and grudges you get against other human beings onto our NPCs.
We wanted to make them as human as possible with the goal of maximizing players' emotion.
And all of these sort of systems for creating stories and drama aren't within the framework of Even non-linear narratives or branching narratives are the sorts of things that we can see in RPGs.
It's generally trying to actually make a system that generates drama and relationships.
And something else we looked at from sports and took is that it does, it creates stories at two scales.
You have this overarching narrative of the conflict between the teams, who's going to win, who's going to lose.
But then within that, you also have the creation of very personal narratives.
So you have heroes and villains emerging, you have revenge stories emerging, you have underdogs that come up.
You have grudges, but all of these individual personal stories are taking place within this framework of a larger conflict.
And again, although we see it in the real world, in sports, it's something that mapped very nicely to Mordor and Orc society for us.
And then.
Another thing that's really interesting is there's whole sections of journalism basically that are dedicated to creating and narrativizing and weaving written stories out of what is basically statistical analysis.
People take stats of the results of different players, different teams, and they'll turn those into written narratives that people find really emotionally engaging and will follow.
Everything that we did, even though the underlying complexity of the whole system and the Nemesis system under the hood is obviously enormously complex, the way we always wanted to surface that to people is in a naturalistic story.
One of the ways we sort of test that ourselves is, and we did this on Total War as well, and you also see this on sports games, is if people are writing stories about our game, is the language they're using to express their story sound like they're really...
invested in that world.
And then, we have to speed up a bit, but war shares a lot of the same structures, and again, war, like sports, not only creates these stories, but is very often a reference point for for entire genres of fiction.
So we have entire genres of movies around sports, we obviously have a lot of genres, and a lot of films around war, because they share those dramatic traits of conflict, of escalation towards a epic finale, a personal story.
So, you know, Band of Brothers, Platoon, within the context of this larger epic conflict.
So games like Civilization are obviously very good at simulating these large-scale conflicts, but we wanted to see, where else can we put...
personal stories and nest them within that, and an emphasis on human hierarchies and social structures, whether that's generals and troops in the military hierarchies or sports teams.
And then just quickly, a couple of specific examples of how we use real world references to create stories, even going back to Total War, which was where I was working before Shadow of Mordor.
People are also very, very keen to project agency and project character onto NPCs.
So by applying traits, personality traits, onto our generals and our characters, it just changed them from being collections of stats.
into being characters people could relate to.
And Darkest Dungeons, obviously another game that does that extremely well.
And we tried to do that with our Orcs, in particular their hates and fears, which was simultaneously trying to make them do something that George spoke to before of differentiating them as enemies by making them block your different abilities.
Our equivalent, we had players spreading fires everywhere, so we gave guys that hated fire, so now they could block and come back at you as a result and punish you for doing that.
Another example we had of using sort of a drama mechanic in concert with the balancing mechanics was in Rome, very often the Roman Empire from the start of the game would cross the world, start dominating the world, and then you'd get to this point in the game, we found, where the final stages of a strategy game could be relatively boring, mopping up.
So we injected this drama of the civil war.
At that point, Rome would turn on itself, it would split, you'd have all these family dramas and rivalries.
Of course, the big difference with Shadow of Mordor from big strategy games like Rome is that we wanted to make it personal.
And as I say, we built it around those principles that we see in these real world story creating systems of sports and warfare, which is basing it around conflict, making the time always move forward so we can build these personal relationships, embracing failure as a chance to create stories.
and also focusing on social structures and human hierarchies.
And again, we can see that in Jane Austen, we can see it in Mexican prisons, we can see it in sports teams.
But then the other thing we had to do is figure how do we surface that to the player?
How do we narrativize that in a way that feels really powerfully like a story?
And that was where we put an enormous amount of emphasis in basically the clashes and the showdowns and having these guys actually remember you.
Players are always creating stories in their own heads and are really willing to have you reinforce the meaning of those stories by speaking to them.
If you say, you did this to me, players are absolutely like, oh my god, I did.
I am the center of the universe.
Human beings are amazingly egocentric and it's great.
And so, then this was just other examples.
You know, we were obviously focused on a single player action adventure game, but there's so many other games now where you see this possibility of people creating narratives about what they've done within these worlds.
And what's exciting about something like DayZ is when people write their narratives of their game experience, it reads exactly like a post-apocalyptic zombie horror.
So the same psychological forces, the same stories are getting triggered by the same events.
And that's...
That takes me to the last slide, which is that Monolith, the way we work and our framework, is very much represented, you can, in this book, glue to games, but there's a theory, player engagement through need satisfaction, which is a theory of player engagement based on the psychological self-determination theory.
And basically what it boils down to, is that the things that motivate people to keep playing your game are the same things that motivate people to do things in the rest of their life, which is autonomy, people want their decisions to have the ability to make meaningful decisions, competence, people want to learn and sometimes they want to feel like they're kicking ass, and relatedness, people want to connect with other living things.
that emotion actually doesn't really differentiate very much whether it's an NPC or a human.
You're actually filling the same psychological needs.
So what we were really doing is looking at the real world to inform what we did in the game.
So strongly recommend glued to games.
And then see how you can use real world systems like that to maybe inform getting players to get invested in the stories within your game.
Thank you.
Thank you.
Thank you.
Thank you.
And we're hiring.
Thank you.
All right.
So that's Michael DePlater, our final speaker.
Thank you.
I know as you're thinking about your own deck of rules that you may be building, it's kind of like building your own magic deck.
The cards you choose will affect how you develop games, and different decks will work differently, better or worse, in different situations.
But more important is that the deck you have feels good.
That's one you enjoy developing with.
So these have been our sessions. There were a lot of references in this talk. If you want to download the slides, they're up at that URL right now. So you can go grab them or go grab them later. If you go to the writing section on my website, you can download these, get all those cool references to go do some more research. We're not going to do Q&A, but we'll be around for a bit either here or outside in the hallway probably because we're a little over time. If you want to come talk to one of us, we would love that. That would be fantastic.
And please remember to fill out your surveys. Thank you for coming.
