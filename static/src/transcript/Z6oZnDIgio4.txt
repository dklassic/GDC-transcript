All right, welcome everyone.
So my name is Daniel Brewer, and this is my co-presenter, Rez Graham.
Here at the Summit over the years, we've spent a lot of time discussing how agents make decisions, all of sexy different algorithms.
But one thing that we don't spend enough time on is the data that is used to make these decisions by these algorithms.
And the quality of these decisions is far more dependent on this data than it is on whatever algorithm you're using.
So today we're gonna talk about knowledge representation.
And I can see some of you nodding off already at the back there.
But stay with us.
So we're gonna provide an overview of some common techniques used to provide data to agents and show how richer behaviors can be crafted by paying attention to this data.
So if the slides will work, there we go.
When the players are playing your game, this is what they see.
And the human brain is amazing at taking this input, identifying the important bits, and then deciding what to do.
But this is what our agents see when they're playing your game.
Or maybe it's a little bit more like this.
Our game worlds are made up of structs and pointers and polygons and textures.
And we need our agents to interpret all of this to identify the important bits.
to see the patterns in the matrix, right?
Blonde, brunette, redhead.
And so we need to provide our agents with the information they need to allow them to make better decisions and exhibit the behavior that the designer wants.
And it's helpful to think about this behavior falling into three broad categories.
Static environment data, dynamic spatial data, and then entity information.
So static environment data, as the name suggests, is kind of representing the physical world to your agents.
This data typically does not change a hell of a lot at runtime, and your agents use this really predominantly to find their way around or search for positions.
Navigation and pathfinding are some of AI's eternal problem spaces.
As environments grow more complex and the movement requirements get more crazy, the representation of the navigable space needs to get more complex too.
It's this bit of an arms race between graphics programmers and AI programmers.
So agents are no longer just merely required to wander around the level in open boxes.
If we take this kind of simple environment here, it's an open square, but our designers will usually throw a challenge at us.
So we need to have a way for our agents to know that they can stay on the pathways, but they shouldn't go in the grass.
However, if a student is late for class and there's no professors around, or maybe the school is under attack by space aliens, then they're gonna run across that grass anyway, because who gives a damn?
So if using a grid for your navigation representation, it's relatively simple, right?
You can mark up each cell in your grid with the terrain type.
And then you can construct a cost function that will guide your agent along the pathways.
When you're using a nav mesh, however, things are a little bit different.
A typical nav mesh might look like this, but this isn't good enough because we don't know where anything is here.
So we need to provide some tools to our designers to allow them to mark up this environment so that they can tell the agents where the grass is and where the walkways are.
and then we're good to go from there, right?
This is adding more complexity to our navigation graph, but as we've seen from the Horizon talk earlier and Nathan's talk, adding this extra weight and markup does help with the behaviors.
We use this technique in the darkness too.
Back in the day, we actually created cutting volumes from the light cones and cut our NavMesh with those volumes, and then we measured the illumination and marked that up, and that allowed our darkling character to remain in the shadows and avoid the lights.
And then once you have this information in your representation, it's relatively easy then to construct a different, choose a different cost function depending on what behavior you want to run.
If you use an ID to represent your terrain, then you're kind of restricted to only using a single type of consideration at a time.
Whereas if you use a bit mask to represent your terrain types, you can then start combining these different weighting factions together.
Now, moving along, smart objects are one of the unsung heroes of a game AI knowledge representation.
The Sims is really the poster child here for how smart objects can be used to extend the capabilities of agents and make them seem much more aware of their environment.
But we can use them all over the place in other games too.
F.E.A.R. used this to great effect.
At the essence, a smart object is an abstraction and it encapsulates some arbitrarily complex logic behind a simple interface.
And it ties that to a particular location or entity in the world.
And now your agents don't need to know any of that complex information.
They just need to know, they just need to select which smart object to use.
And all the data, all that logic is embedded in that smart object.
So all you need to do to make your games have raving AI reviews is just add smart objects to your game.
Now, a lot of decisions in action and strategy games revolve around.
where should the agent move and how we should get there.
So it's beneficial to have an understanding of the overall flow and structure of the level.
What are the main regions of the map?
How are these regions connected?
Where are the choke points?
So your navigation representation can certainly help here, but it's often too detailed.
It's like trying to find the forest amidst all the trees.
So it's useful to have a higher level representation.
In Warframe, we use a rough corridor map as our structure to represent this information.
We call it our tactical map.
And it represents the flow of the level at runtime.
We add a whole lot of extra markup into this graph.
We know where all the doors are and what state they're in.
We add our cover points and spawn points in there.
A whole lot of different systems use it.
Our AI director uses it.
The NPCs use this to find cover and to patrol.
The designers can write scripts that'll search through this graph to find objective locations.
It's a very useful abstract representation for the level.
Now dynamic spatial data is used for representing spatial relationships that are affected by the environment and change over time.
So even though the physical structure of your level may be static, The positioning of units can change at runtime, and this will create a lot of dynamic situations.
And it's useful to be able to predict and react to these situations.
So this is where it's useful to have some map of values tied to specific areas in the map that represent information and allow that to flow through your map, through the environment, and respond to it.
Influence maps are really the go-to algorithm here, and Dave is going to give a huge talk tomorrow about it.
It's an hour and three minutes, I think.
So I'm not going to go into detail on them, but I'm just going to cover a couple of uses that we found useful in Warframe.
Firstly, instead of just spreading out influence from your characters, you can insert influence where characters take damage or where they die, and now you've got a danger map.
And you can use this to draw enemies into the conflict zone as reinforcements, or you can push enemies away, characters away from that conflict zone.
You can also simulate environmental hazards like a hull breach in a spaceship.
Right, when you get a window blown out, you can source some influence from that window and spread that out through your influence map.
We run our influence maps on our tactical map so we know where the doors are, we know what state the doors are in, and then we can modify our spread of this influence so that the doors will contain that vacuum in those areas.
And you can use this for fire or floods or any other environmental feature that can spread through the map.
An objective distance map is useful for knowing where the objectives are.
You can see all the objectives in the level with a distance of zero and then use Dijkstra to flood fill out the distance from any point in the map to that objective.
Now you've got a table lookup.
and you know how far away you are, an approximation for how far away you are from the closest objective.
You know which direction to go to get to that objective.
You can make your NPCs take cover between the players and the objective.
We use this a huge number of different ways.
And now you can also pay attention to the changes in influence and start to make predictions.
So if influence is spreading out from your characters, as your characters move, the influence is going to be rising up in the areas ahead of where they're moving, and it'll be dropping down behind them.
So by looking for areas that have a positive change in influence, you can predict where the player is headed.
And that is also quite useful.
Entity data is data that's used to make decisions about the other active entities in your game.
And this is the broadest and most varied type of knowledge that you have to deal with, and it's also highly dependent on the type of game you're making.
In an action game, this is usually information about the possible targets.
In a racing game, it's gonna be information about the other race cars.
In a high strategy game, this could be information about the other civilizations, what technologies they've developed, what resources they have to trade.
From my background, I've been focusing more on action games, so that's what I'm gonna talk about here.
And here you'll want to track information about possible targets.
And usually you'll have some perception system that feeds you information about which targets your agent is aware of and what he knows about them.
And you can maintain this information in a target list.
And this is basically just an array of structs with the information that you know about those targets.
Now there's two important reasons why you'd want to separate your knowledge like this.
And firstly, caching this information from the world allows you to separate your AI systems from your world and it allows you to run things asynchronously more easily because then you don't have that dependency of your AI system pulling stuff directly from the world.
And secondly, if your agent only has access to the information he has perceived...
It allows your players to play tricks on your agents.
He can manipulate them.
And that's starting to get where the fun in game design is.
So what information should you store?
Well, at the very least, you need to know that your target is visible or not, what his last known position is.
Splinter Cell does a great job of that.
It can be useful to have the time since seen as well, because that allows you to have a little bit of extra robustness against a temporary obstruction.
Additionally, it's useful to keep track of the type of information perceived.
If an agent hears a noise, you don't want it to go straight into combat or run for the alarm.
You want them to first turn around and react to see the source of that noise first.
And we saw an example of that in the previous talk.
If you're sharing information amongst agents, it's useful to know whether the information you have is first-hand or second-hand.
because a hidden agent that the player can't see, if he ran for the alarm based on the second-hand information, it wouldn't feel fair to the player.
The player has no idea that that other agent was there.
So it would be better for the first agent, who does see the player first-hand, to run for the alarm.
This is more believable to the player, and it also allows your player the opportunity to stop that guy from triggering the alarm, which is a slightly better gameplay, arguably.
It's useful to have an is-reachable flag as well, so that you know whether the target that you're trying to reach has, you can actually reach him, your pathfinding has succeeded.
If your pathfind fails, you can mark him as unreachable, store his position, and then you don't need to pathfind to him again until the situation has changed significantly.
Then once things have changed, you can then clear your flag and try again.
You can also build in fallback behaviors.
A melee-focused enemy might choose a different target, or he might switch weapons, and attack from a distance.
Some other information that's useful is the target's aim and what weapon he's wielding, right?
You don't need to dodge someone who's aiming at you with a sword, but a ranged weapon would be appropriate.
And we can take this further if we're making a swashbuckling game and the target has a flintlock single-shot pistol.
The one agent who's been targeted by the player might want to kind of hang back and be cautious while his teammate could flank around.
And once the player has fired his shot and switched to his sword, then everyone can just rush in.
And finally, since I'm on Warframe and we work with our directors a lot, I'd like to touch on a subject here that has to do with pacing and intensity measurement.
So over the years, we've been looking at Warframe and the intensity of measurement of the game because we want to manage the pacing dynamically at runtime.
And I've been thinking more and more about this intensity measurement and coming up with a different metric.
So firstly, as the players progress through the level, there'll be a varying amount of threat.
And this is the potential for harm to be done to the player.
So more enemies means more threat.
The tougher the enemies are, the more threat.
And the closer the enemies are, the more threat.
Now, players have a certain amount of resources that they use to handle threat.
You've got defensive resources, and these are health and shields.
And then you've also got offensive resources, which is your ammo, your magic power level.
And so resources can be spent to overcome threat.
So losing health when the player gets shot is effectively spending defensive resources.
Spending ammo to shoot back is effectively spending offensive resources.
And now we have a measure of intensity.
So if the player is reducing threat by only a small loss of resources, then the encounter is a little bit too easy.
It's not challenging enough.
However, if lots of resources are being spent to overcome that threat, then that means that that encounter is quite hard and challenging and more intense encounter.
Now an interesting situation happens if the player is sneaking around or hiding, right?
Then you have a high threat level, but no resources are being spent.
But here, the potential for the intensity is growing over time, right?
The potential for conflict is there.
And this is a situation of rising tension.
And so, intensity is directly related to spending resources to overcome threat.
However, while the threat is high, it represents the potential for conflict, and hence, a situation of rising tension.
And so this is the model that we're currently using on Warframe and we're tweaking it still.
But it gives the AI director richer information about what is going on around the players at runtime and that's what this talk is about, right?
Providing richer information to your AI system so that they can make better decisions.
And now I'll hand you off to Rez.
Okay, so I'm gonna slow it down a little bit and talk about representing long-term knowledge.
So everything we just heard was about representing some of the more short-term knowledge for combat encounters and that kind of stuff.
So I'm gonna focus more on long-term stuff, stuff that might be more appropriate for simulation, RPG, strategy games, that kind of stuff.
It can be used for anything for long-term, you know.
relationships and things like that.
The two major things I'm going to talk about are stats and tags.
So those are the, I think we get a lot of mileage out of those two things.
And everything that Dan said applies to these types of games as well.
So, you know, go nuts.
Okay, so number one, stats.
Stats are, they're really just fuzzy values.
They're values that represent some kind of fuzzy state.
You know, how hungry am I?
How much fun am I having?
How much social have I gotten?
That kind of stuff.
Or, I like you by this amount.
Or really, any of these things.
My skill is this high.
My relationship, my diplomatic relationships are at this point.
You know, my people have these types of needs.
So, Stats are almost always either normalized or clamped in some way, so there's some normalized value and that could be literally normalized 0 to 1.
On the Sims they were typically negative 100 to positive 100.
And this gives you a range of comparisons so you can easily compare and contrast them and have them mean various different things.
They can be ticked, so that's another thing that you can do.
And what I mean by that is they can decay.
So on the Sims, often your emotes would decay.
They can be timeouts, cooldowns, simple things like that.
Which also means, of course, that they can be as simple as literally float and then some value or some identifier, or they can be larger complex for like big objects, which is what they were on the Sims and many of these other types of games.
They can also be calculated values, and what I mean by that is truly derived from a variety of other things.
And I'll get into that more when I talk about things like tags and how you can derive this kind of stuff.
And this is one of our major things used in decision making.
If you're using utility or whatever method that you happen to be using under the covers, we spend a lot of time using that to integrate that into whatever our decision making system is.
So.
As I said, they're numbers that represent fuzzy values.
Oh, and I said all this stuff.
Sometimes clamps are just...
Right, so I missed this.
The last two points on this little slide are they want to provide, they're good for providing very subtle behavior.
So, and like micro changes, and I'll give you an example.
If you look at something like The Sims or other such games, a lot of the core interactions on The Sims are these small micro interactions.
Socials, for example.
I'm gonna go up and I'm going to say hello to this particular Sim.
I'm going to give this Sim a hug, that kind of stuff.
And so that can be very, very, those are like, that's the inner loop.
You're doing these small interactions which slowly increment this value over time.
That along with many values go into larger calculations.
And so you get, in my opinion, you get much more emergent type behavior.
I'll give you a direct example from a game that I'm sure 100% of you have heard of.
Barbie Diaries High School Mystery.
Let the jealousy wash over you, it's fine.
Back in 2005, many, many moons ago, I worked on this game.
And believe it or not, there's a little simulation that happens under the covers.
There's a little utility-based AI thing happening.
And the reason that I created this is because it's a high school simulation, or a high school adventure game, really.
So we formed little cliques.
And the way we did that was, it was just basically a hash table of entity ID to floats that determined how much I wanted to talk to particular people of particular types.
So you had the jocks and the goths and the popular girls and the nerds, and they rarely interacted with others of their opposite kinds.
And it was a trivial thing.
I mean, I did this in like two hours or something.
But it created enough behavior that other people were like, hey, what happened to the AI?
Something happened.
Some subtle thing happened that made it significantly better.
So through small things like this, you can get significant behavior.
On a game like The Sims, you can, is a good example of taking this even further.
So we did have a relationship score from negative 100 to positive 100, but we actually had several of them.
So if you look down there at Courtney, we have two different tracks.
So one is a green meter and one is a pink meter.
That's friendship and romance, which are two totally different axes.
And mixing and matching these axes becomes very interesting because the common path is friendship and romance march forward together, mostly.
But you can get some really interesting behaviors when you do interactions that sort of lower one and then do interactions that raise the other.
And so you can get like, what does it look like when you have something like high friendship, low romance or low friendship, high romance?
So high friendship, low romance, maybe you're friends, really good friends, and you tried something, but it didn't quite work out.
Whereas low friendship, high romance, there's some, is there some kind of like codependency happening, or are you actual bitter enemies that sleep together?
So you can get some really interesting subtle behavior, and you can add, you can sort of multiply this behavior considerably and get all sorts of crazy stuff.
The other thing that I want to talk about, the other kind of big thing, are tags.
And I'm going to use this.
So tags are chunks of information that you hang on entities, sort of like ornaments on a Christmas tree.
You know, X is this type of thing, that sort of stuff.
And so they let you say like, oh, it's this race.
These are Ls, and this is what Ls mean.
So it's kind of like a runtime type information.
Or I belong to this faction.
And tags are really cool and they're very contextual, so it's hard to give very, I'll give some examples, because you can do things like history, right?
Because of this history, I very much am trying to find the six-fingered man who killed my father, right?
And so you can use tags to like, this is his drive.
This is his entire purpose.
And fascinating at the end of the movie when he says, you know, I've been in the revenge business for so long that now that I'm out, I don't know what to do with the rest of my life.
So what happens when those tags are removed?
It can define your whole life.
You can be the chosen one.
And then what happens?
or curse or states or anything, right?
These tags can be used for just about anything.
They can even drive short-term behavior.
Maybe you're looking for the antidote to the poison that you just drank.
So tags are ways of just identifying pieces of information and pieces of things that we want to keep track of.
I'll give several examples, but first, similar to stats, it can just be an enum somewhere, or it can be full-fledged, full-on classes, which they are in games like The Sims.
I want to talk and also bring back the deriving stats from tags thing with a game called Crusader Kings 2 because I think they do this masterfully.
I think this is they because they also solve another interesting AI problem.
So first this is Earl Lawrence.
This is one of my vassals in this particular game and he's being kind of a dick.
at negative 18.
So why?
Why is he being a dick?
Well, they solve the first rule of AI pretty trivially, right, the first rule of AI is show the player what you're doing.
So there's a lot of stuff here.
You know, we generally, if you look at the last three, for example, we generally believe the same things.
And so we're generally nice guys, but oh, look at this.
I hold a lot of duchies, and he super wants one of them.
So, you know, I can manipulate him by doing that, but that's gonna drive a lot of his interactions, a lot of his desires, and I can see it right here, and it all boils down to one number, which I can look at, derived from these different tags that come into play.
So they do it really well, I think.
We do something similar on The Sims.
So there are these things called emotions.
So The Sims is very sad.
And there's two little things down there that tell you why.
And I'll show a different example because I found a screenshot for it.
This sim is playful.
And why is this sim playful?
Well, I can hover over these little things and they'll tell me.
This thing says plus three because there's playful decor.
So because this sim happens to be in a room that has playful decor, we can detect that, oh, okay, there's playful decor, we're gonna give this buff or tag, we call them buffs.
And all we do is we sum up all of the different emotional weights on each of the different tags that they have and the one that has the highest value wins.
That's the emotion the sim is in. If the sim were to leave this room, one of those others might take place.
There's a couple of sort of more happy slash playful emotions on the right.
This then unlocks other interactions that you can do, which can even further drive more playful buffs and tags and stuff like that.
So you can sort of go down this rabbit hole.
And we've all experienced that, right?
How many times have we been sad or depressed and like we're our own worst enemy when we get into that state?
Or happy, and you go around other people who are happy, and now you're even more happy, and then you drink, and you're even more happy.
Or sometimes not.
You can...
You can also kind of go the other way around, or like really combine them in more ways.
So I'm gonna kind of blast through this little part.
These two guys are lovers and they're best friends and all of these came from the stats.
So they did a bunch of interactions with each other, and that raised their stat to a certain point.
So they went from acquaintances to friends to best friends and so on.
But also, down there at the bottom, you'll see promised.
So that's basically like, we're going steady, or we're going to get engaged.
And marriage has nothing to do with how high or low your romance is.
Like, you don't reach a certain part in the romance track and instantly become married.
So we had both.
We called them relationship bits, but they were just tags.
Okay, now against all wonderful medical advice, I'm going to do a little demo.
I wanna show you something.
It's really nice.
And we're gonna see if this actually works.
Oh cool, it doesn't.
There we go.
Let's see.
Great.
Now it's showing everything on this monitor and nothing anywhere else.
That's fine.
I'll make this work.
So this is a little town, and while this is happening, I'm gonna try and see if I can get back to, where's duplicate?
Which one is it?
That it?
Okay.
Yay, okay, I totally practiced this in the speaker lounge too, and it worked.
Okay, so we have this nice little spot here, and none of my input is working, which is also cool.
So if I just look at some of these guys, oh, it crashed, I think that's what happened.
Sweet.
Okay, great, we're back.
So I have these, you know, this is a little simulated town.
These little green things are little houses where people live and these are where people work.
And this is the inn.
And there's like a little blacksmith shop.
So I can like click on these and I can see blacksmith's forge.
And so they kind of all have their own little schedule.
They'll go back and forth for a while doing their thing.
And if I click on one, oh no, you left, come back.
And I click on one of these people and there's like tons of information here.
So I have like stats and things like that that mostly I just made up.
But in terms of actually driving behavior, I have things like, I'll pause this and kind of draw on my little thing here.
I have things like object ownership.
So they will choose specifically this desk, this bed, this table to do their work in.
Their schedule and all that stuff is relying on that.
These are their various different.
There are various different relationships and stuff like that.
And so as they kind of go about their day, you can kind of see that all of this stuff can really drive behavior in some fairly significant ways.
This guy's moving.
I don't know what this guy's doing.
Sneak out.
Sneak out at intable.
Oh, this person has a trader trait.
which I just injected.
Oh shit, this guy is, this girl, Jasmine, is our trader.
So if we look at data and see what's going on, we can see that because of this demo, I hacked in this little trader trait, and if we look at what the trader trait does, and notice I'm showing no code, this is all data.
I have this little trader trait, and all it does is it says, hey, your decision, do this thing on top of this as well.
And if I go here, I can say, oh look, and I'll zoom this way in.
I can say, oh, look, here we go.
From 1 a.m. to 2 a.m., do this action.
I have it set at high priority because I'm doing a demo at GDC and maybe you wanna see that actually happen, but you could have this at any priority that you want so that it doesn't happen every night.
It happens some nights, and trivially, with three small data entries that you could have easily added in whatever significant XML tool that you've added, you now have this fancy behavior, and this person's back.
So.
That is basically it.
Where is my slide thing?
We're gonna pretend it's this.
Oh no, I've lost it.
Great.
This will work.
There we go.
Years.
So in conclusion, fuzzy values provide subtle and emergent behavior.
They're really good for things like microchanges and tags are really good for chunks of information like event-based things that happen.
I've gone to war with you and all that kind of stuff.
So they can be used together for great effect.
That's it. That's us. Thank you so much.
