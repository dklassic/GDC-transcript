Hi, my name is Brett Norton and welcome to Force Multipliers, long term design careers for non-leads.
I'm the director of design development and cryptic studios in sunny San Jose, California in the United States.
I've been working design for just under 20 years or so and I've met a lot of people and I've seen a lot of careers develop and it's led me to want to do this session focusing on careers for designers, especially those that don't want to be your traditional leader.
So let's get into that and let's talk about what we're all gonna do.
So, quick up. First, this is gonna be broken down into three acts. The first act is gonna be on designer criteria. And this is where we're gonna quantify some of the basic design skills. It will help us understand sort of the difference between someone who's a sort of senior-esque designer and a non-senior designer.
Step two is going to be the gap.
And this is where we get into sort of seniors versus non-seniors and leads versus non-leads.
This will help us separate about what force multipliers kind of are and sort of where leads start to become sort of the traditional career trajectory for a lot of designers.
But what we can do elsewise and how we can separate the valuable skills that seniors provide us, even when they're not leads.
And then act three is going to be focusing on growing force multipliers.
That's going to kind of focus on ways to grow and develop people into being force multipliers who aren't leads.
Jumping straight into it, target audience for this session is, of course, anybody who's a leader, manager, stakeholder, anybody who really supervises a designer is sort of a key portion of this audience. And these will give you some strategies for how to work with the seniors in your team.
But we also want this to be targeted towards designers, which is, you know, people who are trying to figure out how to grow their careers. Maybe they don't want to be a traditional design lead, but they still want to have a positive impact on their company and their projects and really kind of be that force multiplier. This will give you some ideas on how to talk with your supervisors about what you can do.
Jumping straight into Act 1 now, let's go into that designer criteria and talk about some of the skill sets and how we kind of separate some of the basic skills of designers from some of the more advanced skills we'll talk about later.
So, three kind of key sets that we kind of classify designer criteria, and we've got your sort of professional skills, project and development skills, and general design skills.
But, don't worry about this, we'll go into a little bit more on each of these here in a second.
Starting out with professional skills, these are sort of just skills that are used at any job.
They're not really specific to design or even necessarily the gaming industry as a whole, but they're still important job skills for things like communication and attendance, fairness, and generally these are kind of graded on a binary pass fail, and these generally make you a more pleasant person to work with.
It's important to note we don't necessarily consider these a lot in sort of gaming industry careers, but for people who have never had a career outside of the gaming industry, they may not have all these skills and developing them as they start out their jobs at the early ranks of being a designer is still important and you still kind of want to grade that in some cases.
Next up, we've got project and development skills, which are things that are more specific to like a project, technology or company.
There might be things like IP knowledge, like what do you know about D&D if you're working on a Dungeons and Dragons games or maybe Star Trek if you're working on a Star Trek game?
Genre knowledge.
What do you know about shooters if you're working on a shooter?
You know, how much do you know about RPGs if you're working on one of those?
Things like development environment, though, too.
Like, do you know how your asset manager works?
You know how to get things in and out of builds and troubleshooting.
Do you know what to who to talk to or what to do when a problem occurs?
These are the type of skills that make you more efficient and effective and generally quick to work with in your team's sort of specific development environment.
And sometimes they're very specific to an actual project or, you know, maybe just a specific line of tech.
Then we have design skills, and these are sort of specific to your design subdiscipline. These are like systems designer skills, level designer skills, content designer skills, writer skills, etc. These might be those specific to a bit of a genre and engine because sometimes there's some very specific skills, like shooters have some specific skills to their genre that don't necessarily map over to say puzzle games, and that's just the way things go. These are the skills that allow you to really build features and content and get them into the game in a fun, interesting way.
So let's quantify a few of these designer skills because you have some general skills, and I'm not going to try to list all of them. I could do a whole presentation just on design skills. But you do have general ones with things like math, and yes, systems designers are going to have a lot more math skills generally. But we also have things like general ones like usability and player communication. These are important facets for designers to understand and grow into, and they're good things for all designers to have.
So then moving beyond that, we have specific implementation skills, which are going to be things like items, or perhaps say item assignments.
And with items, it might be something like, okay, we're going to implement a bunch of swords into our games, and that'll be a reward that we use.
But item assignments are something that we use for say a professions or a crafting system.
That's how we kind of group things, like how you make a sword, what are the different sword recipes, et cetera.
Both those are done through different tools in our tool set in Engine.
And so we actually quantify those as completely different skills and associate grading with each of those.
And there's also some things we have which we call like FSM scripting, which is more like AI scripting. You may have different tools or names for it, but it's basically how well do you script AI and what do you do with those sorts of things.
So skill progression, let's talk a little bit how we quantify some of those skills.
So some skills are just binary or very simply graded, which is like pass fail.
And again, things like attendance, you know, it's either good enough or it's not.
And you're generally not going to try to like give them a score or anything.
But another way of doing something that's not just sort of like a one through 10 or one through five scores, you can do what we call literacy, competency and mastery.
And that breaks down as kind of these three categories, which are kind of listed right there.
But what it really comes down to is that if someone progresses, you know, they go from sort of being able to just copy and paste things within it, to being competent and understanding it, to really having a true mastery of it and being able to actually improve on it and do new things with it.
And all those are important.
And if someone grows, that might be their target.
It's like, hey, develop literacy in items.
And then later on, literacy in item assignments and then competency in items.
competency in item seven, mastery, et cetera.
And it creates sort of a progression path, a targeted easy way for designers as they work their way up to sort of junior and staff levels to grow in these individual contribution skills.
A quick apt one recap, we've talked about professional skills, which is for any job, project and development skills, which are sometimes project tech or tools or dev team specific, and these design skills, which sometimes translate, you know, between teams and projects.
Sometimes they're specific, but overall, these are the crux of really key design skills we've got.
Now let's talk about Act 2, and this is the gap.
And this is where we get into some interesting difference between what a force multiplier is and what is and what isn't.
So first up, it's non-seniors versus seniors.
So with staff rankings, this will help break down kind of like when people are often called seniors within the industry.
But I'll separately talk about when I think that they really are.
So juniors, these are people usually that have been around for say zero to three years.
They're mostly focusing on how quickly they can learn.
They have a lot of literacy, a little competency, probably no mastery.
And maybe there's a little bit more again, if you have a great educational background, you went to a great design school, you came in, you might have higher competency and mastery than someone else who's a junior.
And so you'll see some variance within that one.
Then after a couple of years, you generally get to like a staff, maybe it's a little bit sooner, maybe it's a little bit later. And this is where you have a high degree of competency and you're contributing to content and features. You're building a lot of shippable, reliable stuff, and you can really do a lot of the bulk work for a game now at that point. Again, maybe you've got a few things that you're a master at now. You can really do some things pretty well, especially if you've been sort of like practicing and learning ahead.
But then we get into seniors and seniors have an ambiguous start range.
Maybe it's five years, maybe it's six years, but it's not just based on experience, because when you get to be a senior, you know, we start to care about how well you can own content and features.
It's it's more about being a driving force.
That's kind of like what a lot of being a force multiplier is.
It's really being able to drive a force.
It's not just being really good at making items.
It's like, you know, can you help define new item systems or new reward avenues, those sorts of things?
And seniors generally have a high degree of competency and a lot of mastery and a lot of related areas, which allows them to really be those effective feature or content owners.
Now, there are rankings beyond seniors, such as there are things like principals, which may be sometimes a kick in at 10 plus years.
And that's now starting to determine how well you can drive like whole projects or.
perhaps large teams or even abstract goals.
And this requires obviously a lot of experience and a lot of exposure.
And you're expected to be highly masterful in a lot of areas, as well as maybe still having company in some areas, et cetera.
But when you get to the principal level, you have a ton of experience.
You've probably shipped more than a couple of games.
You've you know, you've been through the rigmarole a few times and you have a lot of lessons learned on how to do things well and what pitfalls to avoid.
But there's an extra secret ranking based on careful discussions and interviews and investigations into some of the people that I talked with before this presentation.
There's also additional groups which you call either experts, sometimes they're called architects, and sometimes they're called senior experts. But these are sort of like principles but with incredible experience and expertise.
And they have invented things like genres or entire IPs or new modes of gameplay.
They've done something fairly standout, something that probably required a lot of risk and a lot of expertise.
And they pulled it off and were very successful then.
That doesn't mean necessarily monetarily successful.
Sometimes it just means they were very innovative and did something very interesting.
They've proven themselves to set themselves apart.
These are sort of like the doctorates, if you will, of the design world where they've kind of had a thesis that's been vetted either by the community or other designers.
We don't have a formal process for this within the gaming industry or generally companies as a whole, but experts are pretty rare.
In talking with some designers, they were companies that had 150 plus employees and they may only have two or three experts, sorry, 150 plus designers and only two or three of those may be experts.
So it's a very coveted role and it doesn't happen a lot.
As you can see, because it requires 15, maybe 20 years experience, there aren't even a lot of designers that actually have that level of experience, much less those could quantify as experts as having done something so outstanding as to sort of be their doctoral thesis.
Moving on, let's talk about the inflection point. This is when a designer suddenly has competency in pretty much all their key areas. A system designer with a lot of competency, they've got mastery in some, they're getting good, you know, and they're getting efficient, and they can improve things, and they start to start to understand. But these skills alone aren't enough to be a force multiplier, because you're probably still like very heavily buried in a lot of sort of icy skills, again, like items and items, assignments, or maybe scripting, that sort of thing.
What you really need to get good at is the skills, let it be an owner, because that's what's going to let you really be a force multiplier. So Senior Plus is going to require a new type of skills. You get to start over with skills like ownership, which is related to process, mentorship, which is related to management, vision, which is related to architecture, technical design, which is a lot related to infrastructure. I'll get more to that. It's kind of a loaded term because it sometimes uses a job too. And then multiclassing, which is a form of versatility, which is important.
And don't worry, these things are going to come up a lot.
Don't feel like you have to write them down now.
I'm going to go through them multiple times.
So let's talk about each of these individual skills and why they are these new skills that you don't develop early on, but suddenly start becoming more important and meaningful and define senior pluses.
So ownership is sort of a mastery of process and pipelines at many various stages, and not just like.
the design stages, the art stages, the QA stages, the audio stages. They really understand how things like a map goes through so many different stages, through concept and whiteboxing, all that, and they understand what things can be done better. You know, maybe they're a level designer and they're a principal level designer, but they understand, aha, good concepts will let me do my job better. So three months before I start a whitebox, I need to make sure that we've got good concepts and they get that.
They have very quality inter-department communication.
Say they're a system designer, they're good with talking with content designers and level designers and writers.
It's not the people that they work most closely with, but if they need to get something implemented into a map, they know they can go to the level or content designers and work with them to get a quality implementation of the map on their feature.
And they also have quality interdepartment.
They can talk with artists and programmers.
They know the people they commonly work with and who they need to support to make the feature or content good.
That's that ownership thing.
It's about caring more than just about the design component of it.
It's also interesting that you need good art and good programming.
Everyone has to succeed for a feature to be good or a piece of content to be good.
So on the mentorship side, this is where your senior, your seniors make experts out of non-experts.
This is the teaching mastery to others. And so I look at it like, you know, a senior designer or a principal and expert designer is not a samurai wandering alone in the wasteland slaying monsters by himself.
He's a guy that goes to a dojo and helps train other students to become masters themselves.
He doesn't have to be the master of the dojo.
I mean, he doesn't want that task of, you know, running a bunch of senseis and a whole ton of students, but he can at least train other people and make them more skilled as well.
He can create disciples.
And not only can he do this with designers, but he can do it with non-designers too.
He can train artists a little bit, he can train programmers a little bit, he can make them care about the things that they should care about to make for a better total end quality thing.
You know, designers sit in a spot where they see a lot of the connection points and that's the real strength that they can offer, even if they're not a people lead, is that sort of connectivity that they offer between the teams and disciplines and understanding the vision of things.
Speaking of vision, that's the next skill we'll talk about.
So I'll talk about non-senior designers first. They're often reactive designers in the sense that they will respond to direction and they can fix all kinds of problems. They can implement things and you know if bugs come along they'll be able to address them. They can make reasonable deductions about how to address problems and you know they'll get things and they'll solve problems for you. And so you can think of them as like curators. You throw them at bugs that you have to make them go away, cure them, improve things and move on. Once the issue is kind of known they can deal with it.
But your senior designers, no, they're proactive designers.
They're the ones that are going to set directions, they're going to set standards, they're going to prevent bugs from ever happening.
They're going to save you work in the long run.
And they're going to be able to solve risky or more complex or more volatile problems because of their experience and because of their ability to set direction and things early on.
They've seen these things.
And I think of them as vaccines.
They prevent issues from ever happening.
If you find, if you supposedly have senior designers and you find yourself constantly mired in issues, maybe they're not senior just because they've spent six years in the industry doesn't necessarily make them a senior.
Maybe they haven't shipped enough games.
They haven't seen the life cycle of specific content or features enough to know what problems happen early.
That can be that, you know, what problems will happen late that are caused by decisions made early.
And it's important for them to have that experience in those types of areas.
So just because you have six years of experience doesn't just make you a senior because maybe you haven't gotten the right type of experiences yet.
So on the technical design end, it's something that's a very valuable subset of design, but it's an ugly, ambiguous term. In the course of interviews for this session, I got terms such as like, they're just programmers who can design, they're programmers who can script, or maybe they write tools, or they do something in Lua. Talking with multiple different designers at different companies, I got very, very different definitions of what a technical designer job is, and it was not consistent at all. So let's throw out what the job itself means. Let's focus on sort of like the specific skills that I want to say that I think technical designers are designers that focus on improving how design builds and delivers and features and content.
And I kind of view that as infrastructure design.
I don't think anyone wants to have a title as infrastructure designer.
If you do, that's awesome.
And I like you a lot, but most people probably don't want to be called infrastructure designers, unfortunately.
But that's kind of the crux of really where they add value and add sort of force multiplication to a project.
So infrastructure design would focus on things like tools, standards, and process.
There's a little bit of overlap there with the process skill.
And let's talk about a little thing I call the cake analogy.
And I stole this, I can't take credit for it, but it's a good one.
So if designers are sort of like cooks in a kitchen and they are making cakes, then their job is to deliver cakes to customers.
They're still programmers and artists, and they're doing things like making ingredients, you know, putting the frosting on the cake, so they're very involved in the process too.
But designers are kind of the cook that do a lot of the baking and trying to get the ingredient mixes right and cook it for just so long to make it the tastiest possible cake.
In that role, technical designers make cake mixes.
They're more like prep chefs.
They're the ones who are gonna pre-make a lot of things.
So if you know you're gonna make a bunch of cakes and people really like chocolate cakes, you might wanna have a chocolate cake mix ready to go so you can just churn out those cakes really fast.
And that's what technical designers will do.
They will build you those cake mixes so you can churn out even more cakes or higher quality and more consistent cakes.
And that's how they add efficiency.
They're making everyone else's work easier.
They're adding that valuable, valuable infrastructure.
Last up in terms of multiplayers, let's talk about multi-classing, that versatility aspect of valuable seniors. So these are designers that can fulfill multiple roles. They add flexibility to the team, not directly throughput, but because they kind of make up for like inefficiencies or sometimes can speed things along, they kind of fight that whole corruption or waste or inefficiency of that occurs in any kind of team, especially ones with, you know, like that, that when you have to deal with a production issues and sometimes even very large teams.
So small teams and medium teams generally value this a little bit pretty highly because they may not be able to staff every little subdiscipline. You know if you're a level designer and a systems designer and you know every now and then you can jump between those two and do that work very effectively that can be valuable because there are times when they may need a lot of level design and times when they may need a lot of systems design.
And then on very large teams, as I talked about, because there are oftentimes sort of waste issues, it kind of comes back full circle.
Well, now having multiclass and versatile people, they can plug them into strike teams or pods or agile teams, et cetera, in ways to fill things out that make that large, huge management version a little bit.
So it's kind of that middle tier where you have enough people to be specialized and you don't necessarily need multiclassers, but in the small end, they're valuable and very large and they can start being valuable again.
But it's very picky based on your company and team structure.
So for multi-class designers, tips to you, don't sell yourself as multi-class because you're probably not thinking about in the right ways.
It takes years of training to be a multi-class efficient.
You want to think yourself as basically being an effective staff level or near senior, or maybe, you know, you know, just the cusp of senior in both disciplines.
If you want to be say a level designer environment artist, which is sometimes a common overlap, it means you kind of want to be capable of being a staff environment artist and a staff level designer, or maybe a.
early senior level designer and a middle staff environment artist. That is tough.
That can take a career change or years of training in both or a lot of individual practice within that one.
leaders, if someone is billing themselves as multi-class, be suspicious of those who bill themselves as multi-class because a lot of times it means that they're underestimating.
They're basically saying, hey, I am a junior in two disciplines. I can do both junior quality senior systems design work and junior quality level design work. But that's often not what you need. You don't need two junior quality disciplines. You need them to be higher.
So if they truly are multi-class, they've often done.
both those jobs at some point in their career before they've had years of doing it.
And you can have that be part of the interview. You can say, cool, you think you're a level designer environment artist. You will conduct part of the interview with the lead level designer and part of the interview with the lead environment artist. They will review your portfolios in both areas and grade you and you need to pass both to be quantified as a sort of senior multi-class person.
That's how strict you can get with that if you really want to grade that and allow it.
Some people will make it and they're fantastic, but a lot of people will start to realize how serious you are about it when you say that they have to have portfolios in both, and both will be graded by their respective disciplines.
So, GAP part one summary. Let's talk about the little bit on the mastery of design skills and tool sets does not a senior make up just because you are really good with say items doesn't mean that you're a senior yet. You have to demonstrate all those additional skills we've talked about and again they'll come back up a lot. Senior designers also must routinely demonstrate skills in these things which is ownership, mentorship, again the vision, technical design, and multi-classing, all those things, and it gets routine.
It's about a good batting average.
It's not just about doing it once.
It's about consistently doing it and really being able to showcase that, that you can do it over and over again.
It's not a binary pass-fail thing.
So let's get into GAP part two, which we're going to talk about leads versus non-leads.
We've laid out some skills that are important for seniors, and leads often have a lot of these twos. Obviously, things like mentorship and management seems right up a lead alley. So how are all these force multiplier skills I talked about not just the aspects of being a lead?
Well, let's get into that. First off, leads, also a dirty and weird and ambiguous term that lacks a lot of consistency within different companies and within the industry as a whole.
If you're a lead multiplayer designer, are you leading multiplayer?
If you're the lead online designer, you're leading online.
Are you leading people or are you leading features?
It's a weird term there because we kind of use the two somewhat interchangeably.
I've seen teams where they had a lead, you know, lead person over a subset and they had no one reporting underneath them.
So they were very much a feature lead and not a people lead.
So let's focus our discussion now on people leaders because these are the people that we often see as the ones who get promoted, things like.
lead designer or design director.
And that's more traditionally seen as sort of the the end game for design careers right now, where people are just like, well, if you want to get to the tippy top of the design ladder, you need to become a lead designer or you need to become a design director or something along those lines.
But that's let's start carving out spaces for people who don't want to go down the people that are bad, because.
People leaders are really supervisors or managers.
They lead people. It's not projects or features really.
What they're really focusing on is people and they're trying to grow people and improve on people because people are your really speaking your your one of your best assets as developer.
They're one of your most important and growing your designers is great and it's very valuable.
It's sort of the force multiplier aspect of it's fairly obvious because they're making your people more effective and that's such a huge part of your team structure.
So People leaders now, they focus on a few of these sort of senior plus skills, which is obviously the mentorship, one management ownership, and they have a expect to have vision.
But I'll note that, you know, you can't have good people leaders that don't always have the greatest vision components if they're supported by other seniors on the team that do have good vision components.
That's where you can get into some great dynamics where you can have a people leader that is focusing more on the mentorship and owner side, and then non people leaders that are focusing a little bit more on the vision and other areas, and you get that good combination.
The key thing there is when building a team is to have.
you know, combinatorial skill sets that really work together and make the whole team better as a whole.
So.
This is a really more of a professional development skill focus.
The key thing to note is that a lot of people who have people who have skills have a tendency to get out of design at some point in their career because they start to realize that, oh, I'm really good at leading groups, not just designers, but I can lead whole teams.
And they often get out and go into things like production or business or they find companies or sometimes they leave the gaming industry, unfortunately, and just go on to to run groups at other industries where they get on and sometimes paid more or just like the work better, et cetera.
So these translate well into other fields.
That's just kind of the natural hands.
That's why it's sometimes really hard to keep people leaders around.
And they're kind of like the design parents. Yeah, they're raising design children. They have to be good cop and bad cop. They need to celebrate successes, but they also need to hold people accountable. They got to be the disciplinarian sometimes too, which is not everyone's great at.
And I'll talk about some of these red flags now. You know, if you have leaders at your company, or you're trying to think about growing people into a leadership role, there's some red flags.
If they don't find much joy in the success of others.
it's going to be tough to be a people.
You know, you kind of want people that like to sort of like play the minion class in RPGs because they find joy in seeing other things succeed, you know, because they're not going to get as much time to be an individual contributor themselves.
So they have to really find some level of joy in what other people do and when they succeed and growing them to be more successful.
They also can't be the type that are easily flustered by juniors or non-experts because they're gonna have to deal with juniors, especially quite a lot, so they gotta, you know, enjoy training those juniors up to become even just staff level people. It's gonna be a large portion of their career.
And if they focus either too much on celebration or discipline, it can lead to some problems.
Everyone kind of generally starts on those. Some people are like, yeah, you're awesome.
We're really good. But could you please not do that? Or they're like, no, everything you do is not good enough. Do things better. Here's 10 things you're doing wrong. Improve on those. And you need to find people that have a good balance and that can do both of those.
I think people generally start from either celebrant or disciplinarian side, and they need to grow towards the other. And good people leaders recognize which side they start on, and they work really hard to grow towards the other.
And lastly, be careful people who are reluctant to make the hard staffing decisions.
And that doesn't mean just like firing people that sometimes is part of being a people leader job.
It sometimes can also mean hiring when you have two very valuable candidates and they have to choose between. There can be a lot of heartache there. You know, it's not difficult to say you get the job, you go thrown out in the cold. And that can cause a lot of emotional stress.
So if they're really reluctant and it really wears them down, you know, it's going to grate on them too much and it's going to make their jobs unenjoyable in the long run.
On the ownership side, there's some red flags here where if you're not good at breaking work into discrete steps, or your people, you currently have a people lead that are doing that.
Odds are maybe they're not the greatest person to be your people leads.
Or if they're uncomfortable around non-designers or uninformed audiences, that's also a problem because people leaders have a tendency to have to explain gameplay things to artists, programmers, QA, producers, even producers outside or within your own company, sometimes business partners.
And that's kind of their job.
They constantly have to deal with uninformed audiences.
And that can be exasperating and tiring for some people when they are just constantly explaining the basics over and over again.
So you need people that are resilient to that.
And you also need to kind of deal with anyone that struggles to identify efficiency problems again because those process skills are so important in getting a team to be efficient.
and working really quick.
You need people that can understand how to work a little bit with tools, understand working with process, understand how to work with other departments to expedite things.
Like, hey, going back, like we're gonna build this level, but we need concepts, meaning those concepts need to be done three months from now.
So get us those concepts early.
They need to be able to identify those efficiency improvements in your process and help drive them forward.
So.
Last thing talking about leadership, then we'll jettison the leadership conversation and get back to focusing more on non leads but Staff ranks have different costs on sort of on the leadership burden and so if you're a juniors like 20% staff Maybe 15% senior 10% the numbers a little fuzzy and it kind of depends some juniors cost more some seniors cost less etc But point being is that if you have a team and say they have four juniors on it and they have a senior on It that is a 90% cost on that lead they are not going to get much individual contribution to work on and they're going to spend a bunch of their time, not micromanaging, but managing, supervising, reviewing, and planning for the work of those people. And that's largely their job. And so if you have someone that's great with 90% leader versions, cool, throw them on that team.
But say we have Team Omega, which is zero juniors, a couple of staff and a couple of seniors, that's maybe only really about a 65 percent cost in the lead.
And they're going to get to do some small amount of individual contribution work.
So this might be a better team for someone who's not as experienced a people leader and, you know, isn't quite ready to just give up entirely on being a strong individual contributor.
And when you're growing people leaders, it's pretty basic.
Calculate that rough percent cost of your people leader, start them at a small percent, and work them up to 100%.
Eventually, they'll get to the point to where they don't get to do any individual contribution work, and they spend all day planning and reviewing.
And that's what happens to a lot of people leaders within the design industry.
That's sort of the grim reality of the whole thing.
But in any case.
The reality is that you've got to remember, please, that managing juniors is not the same as managing seniors.
That's an easy mistake that a lot of people make, and it's very important for leadership as you are appointing people to people leadership positions.
I understand that managing juniors is a lot harder.
You may manage a team of five and be extremely high burden, or you may be managing a team of five seniors and have extremely low burden.
But where does this lead the non people leaders?
And so let's talk about the super secret staffing note.
It's not that secret, but it's important to call attention to is that most designers and I believe, honestly, most developers genuinely don't want to be people leaders as much as we tell the being design lead or being the design director as the ultimate career path for a designer.
That's not actually what a lot of designers do.
Instead, what they really want is the agency and the power that comes with a lead title or role, but they don't want the burdens of being a real supervisor or manager all the time.
That causes other problems.
So that leads to some issues because few designers really want to give up on being individual entirely give up on being individual contributors to focus purely on management.
They can do other things besides individual contribution work, but but managing people maybe isn't their strength, but they still want to be a force multiplier.
So Transcribed by https://otter.ai Non-people leaders not want to be supervisors or managers.
How can we grow them to be effective force multipliers?
Well, there's a few things.
Non-people leaders need to become effective force multipliers by improving everyone's efficiency, quality, and ability to take risks, not just their own, everyone's.
That's where these values come in.
Again, we're talking about force multipliers here.
They still expand outside of their individual contribution work and make the team, project, tools, et cetera, better.
So.
Let's hang on, sorry, repeat here.
And this is how they're going to do it.
They're going to do it through these types of skills here.
These people leaders generally focus on process, which is a little bit of overlap with your people leaders.
They're going to do it through visions for that architecture component, which is again, also sometimes share with leaders, but they have often opportunities to be stronger at it.
And they can also do it through things like technical design, which is that infrastructure.
And then if they can, maybe they can be a multi-class where they can really fit in.
So now we'll get into sort of the bulk of this we're going to talk about, which is Act 3, growing force multipliers. How do we grow some force multipliers? Well, let's go back to that skill list once again. I promised I'd bring it up a lot, so let's do it one more time. We've got ownership, we've got mentorship, we've got vision, we've got technical design, and we've got multi-class. We're going to talk a little bit about each of these categories and how we can grow each of them to make for better designers. So starting off with ownership, let's talk about non-people leader ownership.
So non-people leaders still contribute to ownership.
You can't whiz your way out of it that easy, senior designers.
You still have to help define, maintain all the various process and pipelines that the studio company project is going to use.
The reality is then in growing leadership, to do that, you need your non-people leaders to participate in some key pipeline stages.
such as kickoffs or pitches, various entrance and executory definitions for intermediary pipeline stages, and also sort of the follow-ups, things like postmortems, retrospectives, other things that you may do at the end to quantify how well you did.
And the more they're involved in all of those, the better.
I'll talk about a couple of them, but for something like postmortems, retrospectives, there are literally whole GDC sessions on just on how to do good postmortems and retrospectives, a lot of learning materials on those.
I recommend looking at those if you want to know more.
So kickoffs and pitches.
Key things here is to define the boundaries, the features and content amongst the team stakeholders while before you sort of turn something over to a senior.
You know, give them some deadlines, give them resources.
You know, if it really takes progress on us, give them to them and then set a target audience, whether it's a subset of people within your game or an audience that you'd like to hit.
It's important to establish those boundaries with them and then sort of see how the seniors go from there when they do these kicks off and pitches after that.
Getting seniors involved or prospective seniors involved in kickoffs and pitches helps them develop that sense of agency.
Even if they're not the people leader or the design lead, if they can be involved in kickoff and pitches, that's what's helping to grow that sense of agency and make them feel like they're doing something.
And they'll start to care, as well as when they're involved in these early stages of features.
It starts to let them understand what things go well during a kickoff or pitch that leads to better results in the end.
This is all part of that whole becoming a vaccine instead of just a cure.
You gotta be involved early if you wanna become a vaccine eventually.
So pipeline stages now require non-leads to help define pipeline stages, resist the temptation to just always make the lead be the guy that has to do it. You know, if you have questions like, what does a level designer need to start building a white box? Your senior level designers should be able to answer that question. Same thing a little bit is like, what does environment art need once the level designer is done to keep things going?
Yeah, your senior level designers should be able to help answer that too.
And if they haven't, they need to start exploring conversations with environmentists and develop that interdepartment communication skills.
Those are key things to becoming a force multiplier.
They take some of the burden off of your people leaders in these areas by being able to do these sorts of things.
And on the mentorship end, let's talk about growing mentorship now on non-people leaders.
So growing mentorship, teaching seniors to be teachers.
It's important and you can do this through a couple simple things such as the buddy system, peer reviews, and presentations.
All right, let's move on now to the buddy system.
So the buddy system, this is where we pair prospective seniors with juniors.
And this is going to be useful because you can train them on things like standards and organization, process and pipelines, and as well as just team dynamics. Who do you go to to answer x question?
Who's the most important artist to know when these issues raise up? And there's a lot of value to this because a lot of times this falls on leads and doesn't have to. Juniors are often seen as burdens, unfortunately, where it's like, well, there's this new guy coming in, he's an entry level and so and so, and no one wants to deal with them. But That's the wrong attitude.
These are great training opportunities for seniors.
This is a chance for them to get real mentorship experience.
So resist the temptation to make the leads always do it.
Utilize your seniors or prospective seniors to handle this and make sure you grade the results.
When you get done with like buddy systems and you're training people up in this method, talk to the buddies, both the senior and whoever they were being a buddy with and evaluate how well they did.
Get feedback and then work with the senior to improve on it.
Let them know, it's like, hey, this guy thought you did good this or thought you did well on that.
And that's the real crux of it.
You really want people to understand how they can do these things better.
So moving on next to peer reviews. So recurring peer reviews are a great thing. Do them say like you know every other Friday or every Friday etc. Have people go in and look at work. It's just a great way to you know get your team to see each other's works and builds cooperation and sort of like good practices between shared between everyone. But also remember to like landmark peer reviews and important risks even if it's a senior or non-senior and your seniors can participate it's like hey we've got this staff guy he's doing this thing it's a little risky.
halfway through, you know, please jump in there and take a look at how he's doing it to make sure that things are staying on track. But I'm gonna have a rant on coming here and this is the only rant I've really got but I'm gonna do a rant on peer reviews here real quick.
So number one, peer reviews are not only supposed to be done at the end. Like I said, with risky things you need to do them earlier on. Don't wait till the end to only do your peer reviews.
Number two is up there.
Peer reviews are not just playtests.
If you were only looking at things from a playability standpoint, you are not doing a correct peer review.
You need to go in and look at how things are built.
You need to critique standards, comments, usage, reliability.
The how is what is critically important as part of the peer review.
It's so great, yes, you still want to critique the what.
You don't ignore that, but you can't have an effective peer review that doesn't look at how things were built.
Especially with more junior or younger people, you have to critique everything from standards, commentary, again, all that kind of stuff.
get in there, look at the how and make sure you're doing a job with that.
Okay, rant on peer reviews over. Move on to the next section which can help training grow your leadership, which will be on presentations. There's lots of presentations that people can give. I know sometimes they don't like to, but this is part about getting those communication skills up and educating people. And some of this is for things like tools demonstrations.
Have them go in and just demonstrate how perhaps tools are used, and that may not be well known, maybe they're more edge casey, but you know, get that familiarity built with the rest of the team.
Competitive analysis. You want to add a battle pass to your game.
Have them do competitive analysis and have them present it.
Not just write a document that they throw over the fence.
Actually get up and talk to designers and non-designers about it.
Gameplay concepts, you want to pitch new modes, risky new things. Again, do some exploration early on and have them do presentations about it to educate the team. And then training videos, update your training videos. Have your seniors or prospective seniors like, hey, we know you're really good with X and you're wanting to grow up to be a senior, so let's have you train other people by making a new set of training videos with it and see how good you really are.
And to note, once again, target presentations at other disciplines too.
You know, do some of these things like competitive analysis or training videos that will benefit non-designers, artists, programmers, QA, etc. Make them broaden their horizon and ensure that they can communicate well with other departments. That doesn't mean changing their lingo. It means not trying to be an expert and talk only in expertise. It's about building bridges, you need to take your expertise up here and all the other people in your company that are way down here and build that bridge.
You know, we don't need a whole bunch of people to sit up high and, you know, lower their expertise over what we don't need a tyranny of subject matter experts.
We need designers that help build other subject matter experts.
Let's go into vision here. This is a tough one because vision relates to architecture, relates to foundational building a lot of key elements and for the hardest and riskiest skills to build, but also one of the most vital for all people to be forced multipliers to other one.
And there are entire GDCI sessions that talk on ways of sort of growing this and what you can do.
That relates to things like prototyping, it relates to things like finding the fun, iteration and affordances, all those types of things.
you can find tons and tons of educational materials that'll show you like, this is how you do effective and time box prototyping, or this is how you can work on affordances.
I'll go into a few of these to talk a little bit about it, but there's a lot of educational material related just on growing vision and things you can do within your teams on those.
Gameplay insight. For example, taking gameplay from average to good is often the key goal of what a designer has if they actually have sort of this good vision or good architecture skills.
That does not mean that you need to take everything from average to good. There's this misconception that seniors or principals or experts are so good that they'll take all of your gameplay features from nearly average to good. In reality, they're going to take the key elements of your game from average to good. If you're an action game, that's probably going to be something like combat mechanics, gunplay, swordplay, whatever the case may be.
If you're doing a puzzle game, it's probably something like puzzles.
That's a key aspect of your game and it needs to be good, if not great or excellent.
And designers that have that sort of vision or share will understand to put their emphasis on those key areas and they will propel them upwards. And there's ways that they do it again.
cover a little bit of those, but let's talk a little bit about affordances.
And affordances are a lot of type of small gameplay improvements that allow you to do things better.
The classic examples in a lot of platformers, after your character steps off of a platform, they have a small window, say a 10th of a second, in which the player can still press the jump button and the character will just jump in the air.
That's an affordance.
It makes the game feel more usable, even though you're cheating the physics and cheating the simulation to make the game more playable and do what the player wants.
And that is a key part of iterating all gameplay.
And everybody that has good vision understands the search for those.
So designers won't know everything in advance, though, about what affordances they need to find.
However, they should know some of the affordances.
If they literally know none of the affordances, then they're probably not the person that has vision that area, you know, especially if you switch genres, if you switch from working on strategy games to shooters, you're not going to know the affordances and shooters.
And you've got to do some research and some education to find the basic ones quick.
You know that there's gonna be more of them.
Good seniors understand like, oh God, we've got to find more of these as quickly and as efficiently as possible.
That's what all those GDC presentations are about is using that iteration and prototyping time to find those affordances fast and efficient.
So you're gonna need to set aside time to help find these affordances and you're gonna need people to train on that, but that's how you kind of grow that skillset is literally through practice and experience.
Audience wise, key thing for designers to understand is that non-senior designers often badly assume, unfortunately, that they are the audience.
They or someone like them is the audience. And that's kind of, again, not really how all games are targeted. The reality is that a lot of our games don't.
have a single audience and number two, sometimes the designers aren't even the core audience there and senior plus designers generally focus on like audience questions they want to know what games is our audience play what are their play sessions like do they play for 15 minutes do they play for 45 minutes that's that kind of information is really going to help you target do you make a 30 minute dungeon or a 60 minute dungeon if your sessions on average are only 15 minutes long.
Don't be making 60 minute dungeons.
So, and then they also ask things like how many different audiences plays our game?
Cryptic works on a lot of MMOs and we've discussed a lot like Bartles Taxonomy and the different types of players that affect it.
You know, people who like mastery, people who like social elements.
You're not gonna have just one audience in any given game, especially big games.
The bigger the game, the more types of audiences you have.
And it's important to understand that your game will appeal to different audiences and that different features will target them.
Seniors get that and they will ask questions to discern that.
Now for growing vision, once again, it can be trained slowly, it can be trained through education, again, GDC, YouTube, educational videos, I'll call out to extra credits in the Game Makers Toolkit. They have a lot of starting, great starting points there. It can be done through practical experience, build those prototypes, carve out time just to build prototypes. Even if they don't succeed, you'll gain experience doing that.
Focus tests, though, are excellent for, you know, growing your designer's appreciation of an audience.
There's nothing like seeing a designer watch someone struggle to play their level that grows their appreciation of who their audience really is.
So leverage those.
Sometimes that's just there for the experience.
Even if it doesn't necessarily make the game a ton better, it will help your designer understand their audiences better.
And last thing, workshops.
And this isn't necessarily just like GDC workshops.
This is like you can run workshops within your company, get all your level designers together, give them two days, have them pick up subject material, do sort of like a prototype or a game jam on it, and then sit them and have them do review results and see if the visions that they chose and then attempted to execute on that window worked out.
And if not, why not?
And what they learned from it.
And that's the way you can kind of like iterate in small microcosms and lower risk ways on growing that vision.
So growing through failure, good news, bad news is that failure is often a great way to learn vision and it's also kind of costly on projects and teams. So projects need opportunities for designers to risk failure to grow. And the thing though is you can't kill the project because they took risk. So you need to fall and skin your knees but not break the project's legs in the process.
So there's not every feature you can afford necessarily to take big risks on.
So don't be upset if your team doesn't want you to take big risks on like a very important core combat.
The number of big risks you take is often limited by the number of very vision heavy and trustworthy seniors that you have that can absorb that.
If you've got one guy in your team that's got really good vision, that really limits the number of risks you can take.
If you've got four guys that are really good vision and understand that, you're gonna be able to take a lot more effective risks.
Let's go into technical design or as I wish I could sometimes call it infrastructure design here.
So let's harken back to the cake mix example.
We talked about how dev teams are delivering cakes and designers are the cooks trying to make those cakes.
And technical designers are the sort of the prep cooks.
They're trying to make consistency and efficiency of cake production better.
And this is how they become a force multipliers that they're just making everybody's work again, efficient or better quality.
So.
With that in mind, how do you grow this sort of infrastructural design or technical design? It's fairly easy. Again, it's largely practice. But what are some of the things that you're going to want to practice? Well, let's talk about standards. This is a bit of overlap with process here.
Incorporate them in things like file and folder naming standards and make them handle enforcement of it. Make them actually say, OK, we are going to put files like this. Our folds will be used like this. As we put new things in the game, they need to adhere to these standards.
and they will monitor other designers, content designers, systems designers, whatever the case you may have, they're gonna monitor that and enforce it, report errors, perhaps work with a tech on tools to validate naming automatically.
They'll do things like data organization, Hark again, they'll have that level of vision where they're thinking, hey, we're like, okay, we have 10 of these things and maybe our naming structure works for 10 of them, but when we have a thousand of them, will this still hold up or not?
not. And they'll be able to guide you to data structures that will service the long game. You know, just because a naming structure or data hierarchy is good and fast and simple to use when there's ten things, doesn't mean it's gonna stay that way for long. And you don't want to commit to a naming structure that buckles at the end of the project because you wanted one that was really efficient early on for prototyping.
So, growing technical design also in the tools end.
They can obviously, you know, help with things like data entry automation.
They can point out if they know how to actually build scripts, they can just build possibly some scripts to do that.
That's more on the coding side, but it's not a requirement.
They can, however, oppositely just sort of be a tech liaison where they can work with people who do make some of those tools and they can quantify the value.
And this is a big difference.
being a tech liaison in this sense is not just about saying like, we could use a tool that does x and then you write up a JIRA or something and send it over and forget about it. It's more about like, okay, hey, this is what we need. This is how we do. This is our workflow. This is how we could save time. If we could automate these first 10 steps of this data entry, we'll save say 5, 15 or 20 minutes per designer per instance. And we're probably going to do this like.
600 or 700 times over the course of the project.
So we can save a bunch of time if we do this in the first few months, they'll target need, value, best time to do it on.
They'll even be able to tell you like, oh, we can't get to this tool for seven months.
Well, that's too late. We'll have all the data entered by that point.
There's no point in making the tool for this project.
Maybe a future project would value for that, but they'll know.
That's what a good tech liaison does, and that's where this infrastructure design can focus on.
They're good at being that tech liaison.
And there are also tools users documentation and make them do practical examples.
For example, you're making a game where you have spells that blast things.
For example, have them do tools users documentation or videos that shows like this is how you would build a simple fireball.
This is how you would build a lightning bolt that flies down from the sky and hits targets.
There's a lot of different things that you could do with this, but have them do practical.
It's not just, here's how you open the editor.
here's how you open the data editor.
No, no, no, no.
Actually make, you know, have them do practical demonstrations of how to build things that would seemingly have value in the game.
Last year here with growing technical design, let's talk a little bit on the gameplay side.
There's a couple of things here that they can do on the infrastructure level.
There are developer maps and developer maps are a type of map that the players do not see, but you maintain throughout all of development.
They do not go out in external facing builds, but they are always maintained.
They are free from errors and you use them to sort of test features, content, new developments, etc.
However, there's a very bad term called test maps and some people say oh, this is my test map because I put this together I kit bashed a bunch of art into it It's spewing out errors and I'm gonna have to delete it in two weeks when they change a bunch of the art That's not a developer map. You're not gonna maintain that map. That is a temporary map that will be deleted shortly because it's not worth trying to maintain.
It's too expensive.
Developer maps are maintained maps that are not, again, not shown to an external audience, but you'll have them forever and they'll survive the launch of the game.
And if you go into future games, you may even use them on future projects.
That's a great thing for technical designers to build and own.
Last thing is also archetypes, prefabs, or any kind of like pre-made construction, library piece, blueprint, whatever the case may be. If you, for example, want to have like random encounters in your game, you could have every designer in every unique case script a choice between one to four monsters.
Or if your project supports things like archetypes and prefabs, you can have a technical designer build you a sort of prefab that randomly picks between a set of monsters.
And so the designers are placing that prefab everywhere and the technical designer owns that prefab, updates it as new monster types comes out, maybe removes ones that aren't working and iterates a little bit on that prefab.
He's not iterating on the level, but he is iterating on a piece that's reused in the level.
That's a great little infrastructural saving and quality improvement that a technical design can add.
Now again, infrastructure design.
So let's move on here now.
So we got to the last section where we're going to go into multiclass, one of the hardest, most challenging aspects of sort of being a senior plus to quantify because it breaks a lot of hearts again.
So the grim reality is that there are few opportunities to grow multiclass designers.
They are usually the sort of result of a need within a project or a team.
Small developers often have it because they realize, ah, we need a little bit more systems manpower.
Let's have this content designer level designer do some systems real quick.
Yeah, that sounds like a good idea.
He'll do that for six months.
Or it can become out of very large developers, again, where there's a lot of process.
And it's like, you know, having some versatile people that can do stuff, save us from having to like transfer people between strike pods or teams, where if we just can have like a guy that can do a bit of systems and a bit of level design on all of our sort of design ones, it really saves us a lot of headache on a very large management end.
So, you know, there's different opportunities to get there, but it's hard to necessarily get those.
Sometimes, as noted earlier, it requires a career change to really grow as a multiclass and to build that versatility.
It might require you to do a career change for a while, which might mean that you have to do a completely different job for a bit.
There's also battlefield promotions, which I'll talk about in its own little separate section here.
But let's talk about changing careers for just a second, because career changes can be good.
They can improve happiness of what a developer, even if that means that they're leaving design.
You know, if a designer, a level designer says, I'd really rather be an environment.
OK, cool. Let's see what we can make happen, you know, long term wise.
that's what's going to make you into effective seniors.
That the fact that you will do more environment art and maybe you can assist on the level design side, you'll have a great unique perspective as an environment artist once you become a good environment artist because you'll understand level design, you'll understand more things about collision and readability and that'll make you an awesome environment artist.
You'll be super effective as an environment artist because of that.
But...
The reality is sometimes if you have to change a career, you might have to accept a pay cut and start over at the bottom.
Just because if your company is to say like a one to ten ranking of designers and you are a rank five designer and you decide to go become an environmentist, you might have to start over at a rank one or two environment artist.
And that might mean you have to take a pay cut because it might take you years to get back up to the equivalent of a rank five environmentist to where you finally have that parity, where you're sort of an effective staff level at both environment and at level design.
even if it's within design, you know, if you want to go from being a systems designer to a level designer, that same thing could happen. There might be more translation. Maybe you go from a, you know, a rank five systems designer to a rank two level designer because you still have some good design skills that translate over. But pay cuts might happen and you might have to be willing to accept that if you really want to change careers and start at the bottom. A lot of people, once they kind of realize that, that's where the dreams of being a multi-class die because they're just like...
Nope. I want to be multi-class, but at the same time, I don't want to start over at the bottom or I don't want to take the pay cut. But some are. Some really find out because they got a chance to maybe to test it or do a little bit on their own. They explore it somewhere. They're like, oh, this is so much fun and I really want to do it. Generally speaking, I think a lot of people actually move into design because they stumbled into it. They did something else. They moved on to it. They discovered it that way.
And sometimes you have designers that move between, they started out as systems and they moved to other things.
But I once had a level designer that moved into programming and now they're a programmer.
They just moved out of design because they really like programming more and that's the way it happens.
So moving on now, let's talk about what I promised was the battlefield promotion.
So what's the battlefield promotion?
Well, that's when disaster strikes and you've lost someone on your team that was important.
You need to be prepared for that potentially to happen and what to do when you react.
Say you have two systems designers and you have a lot of systems and work and then one of them leaves your company right before a key milestone.
And you need somebody to be able to do some systems design work. Well, it's time for the battlefield promotion.
You're going to take one of your level designers or content designers and move them over because they showed an interest in it.
Or maybe you're going to take one of your QA guys that has some really good system chops because that's never happened in the gaming industry.
Yeah, where, you know, QA has had to backfill a design position for some reason.
But.
When that happens, if you do go into that, have an exit strategy planned.
Make sure that you're thinking about, okay, we need a systems designer forever for maybe only six months.
What is it?
Time box, it sets something up that says like, okay, for this milestone or for this, we need a system, someone to come in, do this sort of like data entry in the system side for six months.
At the end of that, we plan to move that person back to their original career.
We're not gonna affect their pay.
It's basically a free chance for them to learn some system ropes, but then they go back to being a contents designer or, you know.
and whatnot. And so you need to be honest about careers prospects, because if you're doing this with someone that really wants it, like they really want to be a systems that are they really want to be a level designer, you're giving them a shot at it, they're going to want to stay at it afterwards. So be realistic, it's like, hey, you know, we lost our rank six systems designer, he's gone, we're going to bring someone in to do some of the data work. But the reality is, we're going to continue to try to hire someone to backfill that who is at least a rank five, rank five, six or seven is what we're going to be shooting for, we think it'll take six to nine months.
we're happy to give you the opportunity to work as a systems designer for say six months, maybe up to nine months if things go well. But the reality is we are going to look to backfill this position as quickly as possible and bring someone in to do that work. At the end of that, we want to ensure that you'll still have your job in your original field. So be honest with that, career leaders.
And people who are trying to go in that who might get a battlefield promotion, if they didn't talk to you about a next strategy, you know, talk to them about it.
Is it really a permanent change or is it a temporary change?
Because they're really going to look back.
That's not wrong.
You know, just bring it out in the open, shed light on that and and get all that stuff out at the beginning.
So that way, you know, is that cool?
I'm getting a chance to work as a system designer for six months or a level designer for two months, whatever the case may be.
That's great. I'll take that opportunity.
So let's summarize a little bit and go through some of these and discuss some takeaways as we wrap this thing up. So act one, we talked about designer criteria and to just kind of go back to these are some of the individual skills and every studio I recommend if you don't have a quantification of your designer criteria and you're not quantifying skills like items, item assignments and the various progression, you don't have to use the literacy competency mastery system that was described. You could just do a you know a one through five or whatever the case may be.
But try to give your designers, you know, individual skills and I see those, I see contribution skills and progress up through it and give them clear targets as they move up the bands within your company. And then once they've gotten to a point where they get to the gap, where, you know, they're starting to get to want to be seniors, they want to be able to own features and content, they want to be a force multiplier. This is where you have to start separating out sort of like the seniors from the non-seniors. Remember that seniors have to develop those, those five new key skills.
They have to be able to contribute those because those are new skills that are very important.
And then you have to separate out, is this person going to be a lead?
Or are they not really a people leader?
And maybe they want to be a feature lead or a subdivision lead because they want that agency.
But let's make sure we don't put that burden too high.
Harken back to the burden examples.
My kind of rough rule is that if someone's not a great people leader, try to keep the majority of their work still focused on their area.
So don't put a burden on them greater than like 40% or so.
Try to keep it a little bit less than that.
And they'll probably still be happy if they're spending most of their time doing the thing that they still love.
And then, act three, growing force multipliers.
We've talked about those five different things and kind of why they are valuable to the team and a couple of different ways of doing it.
Some of it will require a little bit more research, but a lot of them are specific to your project.
And a lot of it comes down to finding opportunities for your designers to take risks and grow from mistakes and not blow up the project or doom it to financial failure in the process.
So takeaways here, let's talk about for senior skills, let's one more time and then we'll talk about what we hope leads are taking away from this, and then hopefully what designers are taking away from this session.
So we've got ownership and process, mentorship and management, vision and architecture.
We've got technical design, infrastructure, and we've got multi-class, that versatility skills.
So now let's go in and let's talk about the leaders here.
leaders. Now, let's discuss ways that you can test skills with your designers. And the best way of doing that is to sit down and talk with your designers about the aforementioned skills.
However, those are expressed within your structure. You may have slightly different names for them for those roles. You know, there's some overlap in those. You can pick them out, but talk about it with them.
and find opportunities for your prospective seniors or even sometimes your current seniors to test those out. You need to create opportunities wherever you can and there are ways of doing that so make sure again you look for ones that won't kill the project they feel, don't put big risks on people that you know haven't don't have proven batting average yet and you know allow for an exit strategy if you're gonna be like cool we will spend a week trying this thing and if that doesn't work out we have a backup plan b that we know is or are highly confident will work.
And then support with resources, resist the temptation to try to, you know, say, hey, you know, we don't have any programmers right now. And I know you really wanted a programmer to do this, but we don't have it. So maybe you can just do it on your own without a programmer.
Don't, you're putting them in a weird spot.
You're setting them up to fail.
Don't set people up to fail.
If something really needs a resource, give them that resource.
So, and then quantify what you want for results.
Like say like, hey, we think this will be successful if we accomplish this.
If you can't do it non-binary, don't do pass fail, be against like, okay, you know, this is like, this is an average result.
This is a good result.
And this is the ideal result.
Let's try to at least get a good result and see what we can do and try not to just fail out right and get nothing out of it.
So.
And here are some quick ideas for things that you might have within your game that you may not even realize are things that you could be using as training examples. Small features, any kind of little optional content. If you're working on a game that has 20 hours of content, odds are there's some optional content in there that you can use to help grow your people and use as a chance.
If you're working on DLC, that's an opportunity there too to take a few little risks.
And if you're working on things like in live games, events.
Events and live games are fantastic ways to give people chances to grow these skills.
Take a chance, allow them to develop that vision.
Once again, those skills that really only grow through practice, vision being one of them, that's a great opportunity to grow that vision skill when you have those kinds of events.
And maybe it'll turn into something even greater.
Maybe it'll turn into a mode that people in your game want to play all the time.
So look out for those opportunities. Don't let them go to waste. And again, resist the temptation to make your people leaders be the ones that always do that kind of stuff.
Give chances to seniors and prospective seniors.
So If your designers fail, if they fail, because it will happen, do not punish the failure unless it is due to gross negligence on the part of the designer. There's rare cases, but for the most part, don't punish them. They're probably feeling bad already. What's important now is to focus on what you learned. What is the retrospective or post-mortem? And you may want to do this even if they succeed because it's important to understand why they succeed. If they're just like, I succeeded because I was very cool.
That's a problem there because they don't really understand why they succeeded.
They probably won't be able to repeat that success.
So do prospectus and postmortems probably even if they succeed and if you get the impression that maybe they didn't quite grasp why they succeeded there.
So Transcribed by https://otter.ai Let the whole team learn from it.
You know, target those prospects and post-pros on either larger subsets of designers, perhaps everybody, you know, artist programs, the people who are related to it when it goes down.
And again, it's not to punish.
You're not trying to humiliate designer, be like, this is how he feels.
Like, hey, this is the stuff we tried and this is what didn't work out, but this is what we learned, aha.
And expect and actually do better next time.
you know, the point of doing these sorts of prototypes, if you give someone a chance and it doesn't result in something valuable for the project, they were supposed to have gained experience from it. And that experience is supposed to make them better and being able to do it better next time and not repeating mistakes. Don't, if they repeat mistakes, then you're having problems. And that's what we'll go into when we'll talk. This is the takeaways focused on designers here listening to this session. If you're a designer trying to make a career out of not being a people leader, Find outlets to practice and demonstrate the senior plus skills, the ones that let you become a force multiplier, the vision, the ownership, the infrastructure, everything we've talked about here.
You need to find outlets and you need to work on those with your leads, but don't expect an instant promotion if you pull off one of those.
It's just like, cool, guess what?
This feature that we did a thing for, I was trying to demonstrate a vision, I demonstrated vision, now promote me to senior.
No, no, no, no.
It's about the batting average.
It's about that consistent routine.
You're gonna need a couple of examples and you're gonna wanna talk about how you did to those examples and what you learned.
And you might actually have three examples where you all failed, but you learned a ton of stuff.
And maybe the team actually got better.
And maybe the next project is going to be even smoother to do because you're like, hey, we failed on this, but we learned these things.
We know not to do these things now.
We know not to do that.
So you could, again, that's why it's better to quantify things not as a binary pass fail, but as a what did you learn and did you have good results out of it?
So, moving on then, remember that these are new skills too.
As you get to that, as you get to the gap and the inflection point, you are going to go from being a master at certain things that you are getting good at.
Again, using the items example, you're really good at making awesome swords and the players love your swords, but you're hitting that diminishing returns curve.
You know, making better swords really isn't helping the team or the project or the company grow that much more.
You gotta start developing new skills that focus more on being a force multiplier.
Multiply the team, multiply the project, multiply the company, do what you can.
That's why those ownership and vision, all those other skills are focused on exactly that.
You're going to have to learn them.
You're not going to be good at them.
You've just become a master at something.
Now you got to go back to being a noob again.
It's frustrating.
Don't get burned out by it and keep practicing at it.
Learn from failure. Keep trying. Don't repeat mistakes. That is the number one thing that'll get you shut down and you'll lose the trust and agency that you're hoping to earn is if you repeat mistakes. If you're constantly making new mistakes, that can be good, but try to make big books and mistakes. Make mistakes related together, get them all out of the way and then move on to the next one. And eventually you'll stop making mistakes and be super awesome.
We'll talk a little bit here quickly about one-on-ones.
And one-on-ones, if you're not familiar with the term, is usually a conversation that's had between a subordinate and their supervisor.
So like a systems designer has a one-on-one with the lead systems designer, or a contestant might have a one-on-one with the design lead of the project, or maybe, and also the lead contestant.
But during these, use them as an opportunity to discuss your skills, both your designer sort of individual skills, like again, if you're a guy who makes items rewards, talk about how good you are at making items a little bit, and if there's ways you can still improve. But then as you get close to later levels, you're going to want to talk about those senior skills. Let's talk a little bit if you're under four years, though, you're mostly going to want to focus on ISC skills.
You got to get good. You're still learning to become that master. You got to develop those things. So focus on that. Talk about them.
You know, talk about the things that you're that you need to learn. You want to do to get better at that to become a really good staff person.
And then as you kind of get those experience, you know, you might get a few things thrown your way where you get to work on process.
You know, you get to do some stuff with vision. You get to maybe do a little bit of infrastructure.
Maybe you can get exposed to some multiclassing. And great. Take that. It's like, you know, cheating and reading ahead in your your school textbooks or reading ahead in the chapter a little bit.
But, you know, don't worry about it too much. Focus on the current chapter.
right now. Then when you start getting like the four to six year range, that's when you're going to focus on those senior plus skills. That's when you're going to start developing and needing to ask for opportunities. And you're probably going to ask for opportunities for the rest of your career. This is why it's sort of a long-term. This is how you grow from being a senior into a principal and at some point maybe an expert. Again, experts didn't get to be experts because they played it safe, but they also didn't get to be experts because they probably blindly, luckily stumbled into it. They developed a series of progressive prototypes, they enhance their vision, they've probably failed at a lot of things, you know, but they were efficient, they managed their time well, and they managed to grow into great design as a result. So, wrapping things up here, we're just about out of time now. I want to go in, I want to do a few special thanks here.
I interviewed a lot of people and talked to a lot of people about the companies and it's not just Cryptic Studios that I have to thank for helping me do this presentation, but a lot of other designers at other companies.
And so I'll saw Rye Floss and the key people.
We've got Al, we've got Thomas, we've got Randy, we've got Mark, we've got Drew, we've got Steve, Adam and Steven.
And all the designers I've worked with over the past 20 years years, in particular, those people, because they sat down and willing to spend dedicated time interviewing me and talking about their careers and the careers of people around them. But all the designers I've worked with over the past 20 years, it's been great. I appreciate all of you.
I hope you forgive me for the mistakes that I made, especially since I kind of skewed towards that people leader track.
And I always have been a great manager supervisor, but it's been a blast.
And I hope that you all are having awesome careers and hope that you all stick around and develop those long-term design careers, even if you're not going to wind up being a lead.
And lastly, but not least, I want to say special thanks to you for sitting through this presentation.
It's been fun to do.
I've always wanted to do a GDC.
This is actually a presentation.
This is actually my first session.
So if you liked it, please like and subscribe to my GDC channel, I guess.
So that's it. This is the end of force multipliers, long-term design careers for non-leads.
I'm Brett Norton. If you want to contact me, my work and personal emails are there.
Feel free to ask questions. I'm more than willing to engage.
If you think Cryptic Studios is awesome because I get this, great.
Come talk to me and I can give you some more info.
But again, if you have any follow-ups you want to do, let me know.
Otherwise, thank you once again for coming.
I appreciate it and have a good GDC.
I hope to see you in person next year.
You