Okay, I think it's four o'clock, so it's about time to start.
First, I wanna say thank you so much for coming today.
It's great to see you all.
Before we begin, I've been asked to remind you all to please mute your phones if you'd be so kind, and also to fill out the surveys, which I believe they're gonna email to you at the end of this talk.
So I'm guessing that most people sitting here in the audience are either producers or project managers or that way inclined in some way.
So who better than a room full of production people to appreciate the goodness of a post-mortem, right?
So any feedback you have for me, good or bad, I would really appreciate it.
And that goes for all the speakers here at GDC, so thank you in advance for that.
So with all that business out of the way, I just want to say welcome to Upshield Creek.
Pro tips for managing the unmanageable project.
I gotta give a little shout out to the GDC advisory board for letting me use that title because I was not entirely sure they would find it quite as amusing as I did, but I gotta keep it real because this is GDC and it's production.
So before we begin, I wanna take a moment to frame the discussion a little bit around what I mean when I'm talking about the unmanageable project.
Just a small aside, I think Melissa McCarthy is spicy is gonna keep me alive for the next four years.
That's how I'm gonna survive.
So I wanna frame the conversation a little bit around what I mean when I'm talking about the unmanageable project.
Because it could be an entire game project, or it could be a piece of a project.
It could be a critical feature that needs to go out really quickly.
It could be a piece of the content pipeline that's really screwed up and is potentially dragging down the schedule of the entire project.
Or it could be a demo, like a demo for GDC, for example.
I'm sure a lot of you have had demo deadlines that you've been dealing with, or E3, or PACS.
So it could be any one of a number of things.
But in the context of the unmanageable project, it usually tends to meet three additional criteria.
So one is that these projects tend to be high risk and therefore present a clear opportunity for failure.
I know a lot of you probably think, well, all projects present a clear opportunity for failure, but that's not necessarily true.
I've been on a lot of projects where it's not the end of the world if you're a little bit late or if you're a little bit over budget, but in some cases, it is the end of the world.
So another hallmark is that they're often heavily resource constrained.
And in the context of this particular conversation, the resource I'm talking about specifically is time.
Because you can always add people, you can always add budget.
But when you can't add time, sometimes that presents a particular set of challenges.
And there are also clear consequences for failure.
So this could be anything from you don't launch the project on time, you might not get a promotion.
or maybe your team won't get their bonus, or maybe your team will be fired, or maybe the project will be defunded.
So there's usually pretty clear consequences to a project going sideways of this type.
So if you haven't already been handed one of these, I just have to say brace yourself because if you spend any amount of time in the games industry, you will be put in charge of one of these projects, a chaotic project with a crazy deadline, and it's gonna be your job to get it back on track.
So that's the bad news.
The good news is I've spent many years of my career running these kinds of projects, and I have to say, in my experience, there's always a way to figure out how to get a project back on track, as long as you're willing to adopt a particular mindset to make that happen.
And that mindset, I also want to add, does not always necessarily involve crunch.
So we'll talk about that a little bit later.
So this is probably a good point to introduce myself.
My name is Amy Dallas.
I'm one of the co-founders of Clutch Play Games out of Portland, Oregon.
I'm also on the board of directors of OGO, which is the Oregon Games Organization.
And this year, I'm also excited to say I'm on the advisory committee for the Austin Games Conference.
So if anybody has any interesting production talks you wanna present there, come and see me.
That's in late September, and I hope to see a lot of you there because it's gonna be a really cool show.
So.
little bit about Clutchblade. So we're an indie dev studio. As I mentioned, we're up in Portland. We're all a bunch of AAA vets who used to live down in the Bay Area. We came from studios like EA Sports, EA Games, Maxis, 2K, Stormfront, NG MoCo, DNA. So we all have a lot of big game experience.
And we moved to Portland in search of affordable housing, reasonable commutes, really good beer, wine, and coffee.
So what more do you want in life but those things?
But there isn't a lot of games industry up there.
So we mainly work with companies down here.
And we're kind of known as like a SEAL team of development.
We get brought into projects that have a particular set of needs that are really challenging.
And we basically like, dive off the ship with a knife in the mouth, then we go take care of business, and then we get out and go on to another project.
So because all of us have a lot of games industry experience and AAA experience, we're pretty unfazed by difficult projects, and we all like them, but I'd say of everyone on my team, I like these projects the most.
And this is actually something that I never really thought I was going to like doing, because, you know, who wakes up as a kid and goes, you know what I want to do?
I want to run a bunch of really shitty, hard projects for my entire career.
Nobody actually says that when they start out in games.
But for me, my love of really crazy projects began on The Sims 2 quite a long time ago.
So when I came onto that project, I was put in charge of the animation pipeline.
And I did not know this, but several producers had run screaming from that particular pipeline before me because it was pretty messed up.
It was functionally months behind all the rest of the other discipline groups, and every day they got more behind, and so it was my job to fix it.
And at points that seemed really, really impossible.
And so I had to come up with some creative ways on how to do that.
I'll talk about at least one of those a little later on.
That could be a whole talk in and of itself.
But at the end, kind of amazingly, we went from being the team that was most behind to the team that actually, we were the only ones who finished a week early.
So that was kind of an amazing accomplishment, and it really showed me, wow, even though something seems impossible, there is a way around it.
You can actually fix it.
But for me personally, I was like, fuck it.
This is terrible.
This is an absolutely, like the most painful project I've ever been on.
I'm gonna leave games, I'm gonna move to Portland, and that's gonna be the end of my life in games.
And something really interesting happens.
I bet a lot of you will know this if you've ever tried to leave games.
It's like the mafia.
You never really are able to leave.
It sucks you back in.
And I think one of the reasons for that is when you work in the games industry for any length of time, it kind of perverts your brain in a very specific way, such that when you try to live like a normal person, that just feels really weird and boring.
So when I moved to Portland and there were no game jobs, I went up there and I started working for web dev and software dev and app dev companies, and I thought, oh, this will be great.
And I really had a hard time with it because it was so incredibly boring.
I've come to think of this as like the Hurt Locker effect.
So I don't know if you guys remember that scene from the Hurt Locker if you've watched that movie, but he's a bomb defusing specialist and he's used to things blowing up all the time and everything's crazy and then he comes home and has this existential crisis in the middle of the grocery store because the hardest decision he has is I have to pick out cereal and there's too much cereal and that felt really weird to him and that's how I felt.
And so to combat that, I became the person who specialized in taking on the scariest, most painful, high-stakes projects. And the job I had right before I came back to games was literally a job where people would bring their projects to us and say, if you can't fix this, I'll be fired.
So super fun, super fun client interactions there.
But because I took on a lot of these projects, I've spent many years teaching people how to run these kinds of projects.
So in doing so, I've noticed that in order to be successful, in my experience, It does, as I mentioned, involve adopting a certain mindset.
So I want to talk about three elements of that mindset and the skills around that.
And those are fear management, expectation management, and chaos management.
Let's talk about fear first.
So I think fear management is a really interesting part of the project management and production process.
Because in order to believe, in order to take on a project that's in really bad shape or is particularly challenging in some way, you have to believe first that it's possible.
You have to really internalize that there is a way to solve that problem and that you are gonna be the person who figures out how to do that.
So that takes a huge amount of confidence, and I gotta say, it's really hard to maintain that level of confidence when you're staring down the barrel of potential failure, and these projects always have an element of potential failure about them.
And so I think it's kind of interesting that we as an industry don't really talk about fear that much.
And that's that seems weird to me because fear is is legit.
It's up there with death and spiders apparently.
I think it's actually just as a side note really funny that public speaking is higher than death in the list of human fears.
So maybe factor that into your surveys when you're thinking about I am facing a fear greater than death as we speak.
But the thing about fear of failure is it can be really paralyzing.
I don't know if you guys have ever been in that situation, but I certainly have been in points where I think, oh my gosh, this really might not work.
I'm shutting down because I just don't even know what to do next.
We've probably all been in that situation.
So I think it's really funny that we don't talk about it more.
We're willing to talk about stress, but where does stress come from?
Well, often it comes from fear.
It comes from fear that you're going to fail, that you're going to lose your job, that you're not good enough, that you don't have the skills, that people aren't going to support you, all these different things.
So why is it that we don't talk about fear in the world of production?
Well I think often we don't talk about it because quite frankly this is a really competitive industry and it's definitely got a survival of the fittest vibe and so admitting anything other than pure perfect confidence is often, we fear it's gonna be perceived as weakness.
So also, we can be kind of concerned that admitting any kind of weakness or fear in a project will create a perception that we're somehow unworthy of the job.
It's a disqualifying thing.
And last but not least, I found this with mentoring a lot of producers, a lot of people, when they're freaked out about a project, they don't want to admit it because they think there's something wrong with them, that they're so nervous, because they look at other people who look so calm, and they think, oh God, they're so calm, and I'm a wreck inside, so something must be wrong with me.
And there's a good reason for that.
Often, as producers, we kind of have to front a lot.
We're always under a lot of pressure to play it cool and calm, especially in the face of chaos, and this is never more true than when you're running a really high-risk, high-stakes project.
It's not unlike the role that a flight attendant plays on a really turbulent flight.
In fact, on my way down here from Portland, as we were coming into San Francisco, we had like 20 minutes of really terrifying turbulence, and the first thing I did was look at the flight attendant.
I'm like, okay, she's calm.
It's cool, because I'm a nervous flyer.
But if she looked in any way scared, I'd be reaching under my seat to get the flotation device.
You do need to have that sort of center point of calm.
And that's often the role that we're in, whether we feel it or not.
So feeling fear and looking at other people who don't seem to feel fear, that is not necessarily indicative of the fact that they're not feeling it also.
But there's actually another reason why someone might not appear to feel fear.
And that could be that they might be suffering from a cognitive bias known as Dunning-Kruger effect.
And I don't know how many of you have ever heard of Dunning-Kruger effect.
If you've not heard of it, go look that shit up tonight.
You will not regret it.
It is really, really interesting.
When I first heard of it, I'm like, wow, there's an actual name for that?
That is really cool.
So Dunning-Kruger effect is actually the result of a study from David Dunning and Justin Kruger in the Department of Psychology at Cornell University.
And according to their study, they found that low ability individuals can often overestimate their skills and abilities, whereas paradoxically, they also found that high ability individuals often underestimate their skills and abilities.
That's often where imposter syndrome comes from, is people underestimating what they're actually capable of doing.
So the fact that you might be dealing with some fear on your project or self-doubt isn't necessarily the sign that something's wrong with you.
It often is a sign that you're actually pretty smart, that you know what you're doing.
In fact, not too long ago, my team and I were actually in what you would arguably say was the pitch meeting of a lifetime with a pretty major company on a project that we really wanted to land.
And they have a very ambitious timeline and scope.
And so after laying all that out for us, the VP in the room turned to me and said, well, Amy, as the producer, are you scared by anything you heard?
And my two business partners were sitting across the table from me, like beaming thoughts into my head going, don't screw this up, don't screw this up.
Cuz they were really worried I was gonna say the wrong thing.
And I said the only thing that I could say, which was.
little worried, a little scared.
Sure, there's a lot of things that are scary about this.
And instantly, I got a lot of head nods of approval.
Like, yes, that is fair enough.
And so we ended up talking about some of the things that I found scary about what they were trying to do and how we would work around those and how we would mitigate those risks.
And we did go on to end up getting that project.
And afterwards someone came up to me and said, I'm really glad you were willing to admit that you found that scary, because if you hadn't, we probably would have just ended the conversation, because it really would have indicated that you didn't know enough, or you were too cocky to admit that there are some scary elements to this project.
So it's not necessarily a terrible thing to embrace the fear.
In fact, fear actually, there's a lot of upsides to it.
It does serve a purpose.
So the reason why fear exists is to keep us out of harm's way.
So if you look at it from a historical perspective, the reason why we're here today is that our caveman ancestors, if they saw a bear, they ran in the opposite direction.
Instead of going, hey, you look fuzzy, give me a hug.
That would have resulted in death.
So fear does serve a purpose.
It's there to actually clarify when there's a potential problem.
And it also can be really instructive.
I find on a lot of the projects that I run that are really tight turn, scary projects, the thing that actually scares me the most is almost always the thing that ends up going sideways and that needs the most attention.
So whatever is keeping me up at night is the thing that I know is going to turn into the problem.
So it's actually really useful because usually, By the time that thing becomes a problem, I've spent so much time thinking about it and worrying about it and planning for it to go wrong that I actually am able to really decisively address it.
And last but not least, fear can be a really potent driver of success.
I find this particularly when we've done some of our own projects at Clutch Play.
There are times when I find the team is stagnating, they're stuck, they're stuck in a perfectionism loop.
So anybody who battles with perfectionism knows exactly what I'm talking about.
And so one of the things I found that has actually really helped my team is to get over this is to inject the possibility of a failure point. So basically if I find that something is stagnating, I'll sign us up for a conference in three weeks to demo the game. And I'm like, well, we have to make this work because we've got three weeks. And I find that that actually really helps to clarify the mind around What is the best thing that we can make in the time we have versus what is the most perfect thing that I can make?
So that's another upside of fear.
Because you gotta have crazy cats in your slides.
So one final thought on fear is that, I've talked a lot about how producer, like production fear.
how we often feel when we're dealing with a difficult project.
But fear has a tendency to boil over and on a really critical, fast turn, high risk project, fear is felt all throughout the entire team.
So that can boil over both on your team and levels above you, like your boss or your boss's boss or your client.
And when that happens, people often turn on each other.
It happens a lot, especially when you're the producer, you are often in the crosshairs of people freaking out.
So it's really critical to remember that often, if you're in a really stressful project situation, as stressed out as you can feel, others on your team may actually be feeling it far more acutely than you are.
So it's really important to keep that in mind and not take it personally.
So I find if a member of my team is freaking out, more often than not, the most successful way to diffuse their fear or anger or stress is to just listen to them.
Ideally recognize that they're about to boil over before they do.
But generally speaking, more often than not, if I actually sit down and talk to a team member who's, who's, really freaking out because they're stressed out and worried, just actually talking things through will help to diffuse the situation quite a bit.
And also, I often learn something really important that I didn't know.
So sometimes people on the team, when it's really stressful, they hold things in and they don't share until they freak out.
So the other thing, the other kind of stress that can be really painful when people sort of act out is when That stress is actually being displayed by someone who is in a position of power above you.
Your boss, your boss's boss, your client.
And that can happen a lot.
That certainly happened to me quite a bit when I was dealing with clients who were facing losing their jobs if I couldn't get their project out of the door.
And it's really tricky when that happens because that often comes in the form of harsh criticism, micromanagement, and questioning your abilities as a producer or project manager.
And that is really, really rough.
So the one piece of advice I can give is that if this happens to you, the best thing you can do if you are on a really high-stress, tight-turn project is just deal with it head-on and talk it out.
And I've had the same conversation over and over again because I have been dealing with a lot of stressed-out people.
And often what I've found is effective is having the conversation that, I understand you're really stressed.
We're all super stressed.
But.
We're all on the same team, and in order for me to actually do my job and manage this project, you need me to be as confident as I can possibly be.
So nitpicking and micromanaging is not a way to accomplish that. So we need to partner up.
And 100% of the time, that has actually gone down really effectively, because it is a good reminder to them that they need you to be confident, and they need to have some faith in your abilities. So again, little reminder, courage is resistance to fear.
It's not the absence of fear.
So fear's gonna happen.
It's not the end of the world.
Embrace it and go make great stuff.
So next thing I wanna talk about is expectation management.
When it comes to managing the unmanageable project, you know, again, in my experience, there's always a way to do it, but a lot of this involves really extremely careful planning and expectation management, and that's often easier said than done.
So I wanna talk about three components of expectation management, and those are planning, scope and schedule control, and communication.
So let's start off by talking about planning first because that's one of the more critical elements of expectation management, I think.
And I have no doubt whatsoever that everybody in this room has a pretty good grasp of the basics of running a project.
In fact, probably a lot of you could teach me a thing or two.
But as someone who spent large chunks of my career taking over this specific type of project and getting them back on track, I wanna talk about some things that I've observed in the planning phase that can really cause problems down the line.
So when you're running a high-risk, fast-earned project, it is incredibly important that everyone on your team is bought in to the goals of the project, that they understand what their personal responsibilities are on that project, that they understand the risk, and they've really internalized the consequences for failure.
And I know this seems like a big, fat duh.
Well, everybody knows that we need to make these things clear.
But.
A lot of the projects I've taken over that have gotten into a freefall state often actually were the result of people not being clear on all of these things.
So important to make sure everybody is really aware of the parameters up front.
So this is a big one for the games industry, I have to say in particular.
Succumbing to the urge to act first and plan later.
I'm a big fan of the phrase measure twice and cut once, especially when you're planning a project that is very time constrained.
But I'll also fully admit that as time bears down on you, as producers, we often feel really intense pressure to just throw open the doors and get everybody to run as fast as they can on the team towards the goal of getting the project done.
But the problem with that is, if you don't have a solid plan in place, getting everybody to just run as fast as they can, means that it's very likely that you're going to take a wrong turn along the way that's going to take some time to get you back on track.
And that might be time that you don't actually have.
Another challenge of succumbing to acting first and planning later is that it often leaves you open to some pretty intense scope creep.
So if you don't have a really clear list of objectives and tasks that everybody's aware of, then it really does leave you vulnerable to people saying, well, I thought that was in there and it doesn't say it's not, so you're going to have to figure out a way to put this in.
So over committing is another big mistake.
This is otherwise known as failing to use the word no when necessary.
And this can be a really tough one, especially for those of us who suffer with wanting to be a pleaser.
I definitely feel when I was younger, I went through that a lot.
It was really hard for me to say no to people.
But running these kinds of projects just knocks that right out of you immediately because you really have to be comfortable saying no, especially when it comes to expectation settings.
Because your number one job as a producer on these kinds of projects is to set your team up to be successful by under-promising and over-delivering.
I cannot say that enough.
So that means your plan has to be extremely focused on what's practical and not what is ideal.
Too much process.
Now I imagine some of you are seeing that and you're scrimming in your seats going, process, don't take away my process.
What the hell are you talking about?
Because as producers, we love us some process, right?
This is our like safe haven in a world gone mad.
This is what keeps us sane.
But sometimes we have to recognize when process is actually just there to make us feel better as producers versus being a useful tool for the team.
In the context of a burner project, it's really important not to bog the team down with too much project management overhead.
I don't know about you, but my team hates it when I slam them with a lot of project management overhead.
It drives them crazy.
Because in my experience, on any project that I've ever had to step into that has a lot of heavy project management process, That's the first thing that goes when things go sideways.
And so what ends up happening is people spend a lot of time, often you or your team, trying to get all these micro-processes set up.
And when those go away, that's time wasted, and more than likely, you've really irritated your team in the process.
So right-sizing process is really critical on a fast-turn project that's in a death spiral.
And basically my rule of thumb there is I try to start out a project with the least amount of process that will be useful as possible, and if I need to add it later, that's a little easier on my team than cutting process that's not working.
So failing to stay focused is another one.
In almost every project like this, I feel like you're battling this constant fight between the big picture and the small picture.
So what might be great for the picture, the big picture, is almost always disastrous for the immediate term.
So this can present a really, it's not necessarily the end of the world, because it can present a really great opportunity to do some expectation setting.
And if looking at the big picture does jeopardize your immediate short-term goals, then it gives everyone a chance to re-evaluate the priorities of the project.
And last but not least, assuming that additional resources will solve your problems.
And there's an old production saying, it's one of my two favorite sayings next to, it is what it is.
It is, you can't put nine women in a room and have a baby in a month, have you guys heard that?
That's like one of my favorites.
And when you're under the gun, it's really, really tempting to throw resources at the problem.
And that's one thing I'll say in the games industry, we often do have the opportunity to do that.
But oftentimes, that's not necessarily always the answer to all of your problems.
In fact, one of our first jobs that we did at Clutch Play, it was a consulting gig.
We worked for a company down here in San Francisco.
And it was a really crazy project.
We had to do a minimum viable product, MVP, and we had 12 weeks to do it.
And it was really tight and very ambitious.
And so.
We actually had a very small team.
It was my team plus some members of the client's team who hired us.
And we actually were able, we had a very, very tight scope.
And we were actually able to finish the project a day early.
And the clients were beside themselves.
They were like, my God, we didn't even think this was possible at all, and you finished a day early.
This is amazing.
And so they were so happy that when we went to phase two of the project, they said, you know, if you could go this fast with...
this small number of people, imagine how fast you can go with twice that number of people.
And I completely understand that instinct, but not surprisingly, everything got quite a bit slower.
Because you had a bunch of people of differing skill levels, they were ramping on the project, it was harder to enforce code standards, and we still had these same tight deadlines.
So it was not quite as smooth as everybody had hoped.
And so in my experience, when you're actually really under the gun to get something done in a really tight time frame, often the best way to do that is to have a really small focused team of experts who can really come in, take care of business, work really cleanly, and get the job done.
So...
Let's talk about scope and schedule control a little bit, which does go hand in hand with communication.
So in my experience, the best way to manage scope control is to establish a framework that holds everybody accountable on the team.
So everybody needs to be accountable for their actions and decisions all across the board, no matter what role you're in or what level of the company you're in.
So that's you, your team, your clients, your managers, the whole ball of wax.
So in a rushed, really difficult project environment, for that to work effectively, everyone needs to hold themselves to really high standards.
And so to do that, that involves a lot of transparency.
Transparency and accountability really go hand in hand.
So it's really important that everybody is aware at all times of what's going well and what's not going well.
So the way we often handle that is of course daily standups.
I'm sure most of you do that.
I'm a big fan of doing those as long as you can keep them very nice and tight and short so people can go back and do their work.
But also I'm a really big fan of status reports and that's something I feel like no matter what I can never skip.
And I'm very much a big fan of nothing should ever be a surprise.
So when I mentioned status reports, I sent my slides off to my GDC advisor and she asked a really good question.
She was like, well, if you're doing status reports, how do you get people to read them?
And I'm currently on a project where I do a daily status report and I know almost nobody reads them except the one person I need to read them.
So that's a different story.
But I find in weekly status reports, one of the things that's been really effective for me in the past when I worked at EA, I was a community manager at one point and so it was my job to feed whatever was wrong.
in the live environment to production.
And this was on The Sims Online, and there was a lot of things wrong all the time on that project, in some really kind of spectacularly strange ways.
And so the way I found that I got a really wide readership on that status report is I just filled it with as much gallows, dark humor as I possibly could.
And that's how I would know that everybody was reading it, is I'd hear like these groans and laughs coming all as soon as I would hit send.
And a lot of people would come up to me on a weekly basis and say, you know, you are always delivering such shitty news in those status reports.
But at least having a laugh over it makes the bitter pill go down.
So that's one way to do it.
Another way I've seen people do it is I have a friend who would often put things in her status report like, the first three people who come up to my desk, you'll get chocolate.
And so she would know exactly who read her status report by who asked for chocolate.
And so that's another way you can do it.
So another thing that's really important to keep track of and highly visible is what is not accounted for in planning.
So you can be the greatest planner in the world, but there are going to be things you're going to forget.
It just happens all the time.
And there's no shame in that.
It's generally recognized that you can't know every single need of the project right from the very beginning.
So it's really important to call those out and keep track of those in case any trade-offs need to be made, which of course brings us to trade-off tracking.
On projects with a really, really tight scope, it is incredibly important that you keep track of what's getting rolled off and what's getting rolled on.
So at the end of the project, you don't have any unhappy surprise with a client or a boss saying, well, I thought this feature was gonna be part of this release.
And you have to have some kind of, historical log that says, well, actually, if you remember, we took it out.
Because again, games are chaos.
These kinds of projects are really chaotic.
Oops.
So it's really important to keep track of that, because people will not remember decisions that are made in the moment.
Another thing that's actually really important to do, I think, is especially with weekly status reports, keeping a running list of action items across all levels of the company.
I find that keeps me really accountable.
Often if I'm doing a weekly status report, and I suddenly will see, oh crap, I committed to do this last week and I didn't do it.
So it gives me the opportunity to run around and make sure that all of my commitments are solid.
But it's also really good in terms of managing up, because I often find that Sometimes what stalls the project is when somebody in leadership is just super busy and they don't have time to get you what you need, which could be a decision, it could be a design document.
And so I find that basically that's a really good way of, in a non-confrontational way, saying...
Okay, we have had this thing.
It's been out there for a couple weeks now.
I know you're really busy, but if I can't get this from you in the next day or so, we're not gonna meet our project deadlines.
And often I've actually found that this is really helpful when you're having these difficult conversations because often leadership is a little more forgiving on.
the consequences of stuff like that if they're the ones who are actually causing the bottleneck.
So out of scope requests happens on every single project.
Never had a project where there wasn't out of scope requests.
And again, I'm a really big fan of under-promise and over-deliver, so on a tight turn, when out-of-scope requests come up without an obvious trade-off on the table, I will always try to accommodate it if I can.
I always keep a running list, and when there's time, I will throw things in when at all humanly possible.
That's part of the over-deliver part of it.
But it's also really important to track those and keep a big, long running list.
And one of my projects, it was a non-game project.
It was kind of one of the best client interactions I had.
I had a woman who I really liked.
I had given her a lot of extras on her project and I kept this big, long running list of here's all the extra things I've given you.
And then at the end of the project, she came to me and said, okay, I need these five other things.
And these were things, I just, I couldn't do it.
I could not make that concession to her.
And so as I was sitting there, you know, trying to think, how am I gonna?
How am I gonna very politely tell her no?
I let out this unconscious sigh, and she immediately said, oh, okay, no, I hear you.
I know you've given me a lot of extra stuff.
There's this huge long list of things you've given me, so I'm gonna give you a change order.
You'll have $10,000 more tomorrow.
And I'm like, wow, that was the easiest conversation I ever had.
And it's actually the list that had the conversation for me, so it was really good.
So, a couple of thoughts on crunch.
So, too often in this industry, crunch is actually used as a crutch, a never-ending crutch, a painful, painful crutch.
And that's a shame, because I do think, you know, crunching has a very bad reputation.
And I actually think that crunching can be really useful if it's used in the right way, in a surgical way, as it were.
So going back to, as I mentioned, I talked about my experience on the Sims.
And one of the ways we were able to go from being the piece of the pipeline that was most behind to the piece that actually got ahead was we did something kind of interesting with crunch.
So at that time, this was back in the EA spouse days, as many of you might remember that, where there was a lot of mandatory weekend work.
And so it was very common to say everybody has to come in and work at least one day on the weekend, maybe even two days if people are really behind.
So my animation director and I actually went to senior management before any of that began and we said, look, we're really far behind and we need to catch up.
So here's our proposal.
We're gonna give the team some notice and in a month, we're gonna crunch for a month.
And during that time, I'm gonna schedule them for six days worth of work.
And if they can get that done in five, which is possible, just work a little bit longer every day.
they will never have to come in on the weekend.
And so what I asked of them is, okay, if they catch up, then I want you to agree to not make them come in and do mandatory weekends.
They're like, well, that'll never happen, so okay, we'll agree to that.
And as it turned out, there were some really interesting results in bringing the team into Crunch in that way.
For one thing, everybody really appreciated that they got a month's notice.
So it gave them time to finish up their projects, it gave them time to arrange for childcare if they needed to do that.
They got to get their yah-yahs out and have fun.
It was the beginning of summer, so people got to go and do what they needed to do, and they knew that the Crunch was coming.
So another interesting thing that happened, so people were actually, they were pretty okay with it.
They weren't as angry as you often find when you announce that there's gonna be crunch.
Another thing that it accomplished was that it made everybody rabidly efficient because nobody wanted to come in on a weekend ever.
And so by actually telling people, if you can get ahead, if you can just be really efficient with your time during the week.
then you don't have to come in on the weekend.
That made everybody insanely efficient because people realized if they could get their work done for the week at about three o'clock on Friday, they could actually start the next week's work.
And that meant that they were almost certainly guaranteed to not have to work the following weekend.
So people got really competitive with each other, like, ha, I've not worked at all, and I'm this far ahead.
So people were actually getting quite far ahead of even where we expected them to be.
The other thing that this actually did, too, was it enabled me to see who was not using their time well.
Because there were definitely some people, the same people were there every weekend.
The ones who did work were the same people.
And those are the people that I would actually see horsing around a lot during the day.
So that was also really useful information.
So my team and I, we do a lot of these kinds of projects, and honestly, we don't crunch that much.
And again, the reason for that is really careful planning, but when we do crunch, we try to front load it as much as we can to use it as a way to get some velocity and get ahead versus it being a stop gap because everything is going sideways really hard.
So for whatever that's worth, I wanted to throw that out there because I think crunch...
is very useful if used correctly.
So some final thoughts on expectation setting, just to summarize a few things.
Never assume everyone is on the same page or knows what to do next.
I gotta say, in my team, I would much rather that they roll their eyes at me and be super irritated by me repeating exactly what I expect them to do rather than assuming that they know what to do and being horribly disappointed.
Another thing is, again, over-promising.
I'm sorry, under-promise and over-deliver.
First thing I said would be bad.
I can't say that enough.
Always, always, always set your team up to over-deliver when possible.
Again, nothing should ever be a surprise.
Big, big fan of that.
And escalate issues early and often.
Sometimes when you're on a crazy project and things go a little sideways, it's tempting to wanna say, this might not turn into something, so I'm just gonna sit on this.
But it's always much easier to just take responsibility.
If something is a little bit off, raise the flag and say, it's a little bit off, and we need to keep an eye on it.
This might turn into something bad.
So, last but not least, let's talk a little bit about chaos.
I'm running low on time here, but.
The thing about chaos is, no matter how great a producer you are or how carefully you've planned, chances are something is just gonna go sideways.
It is just gonna happen.
So it's really important to figure out how to cope when things go sideways.
And the first thing to do is recognize that you don't have to be perfect.
The only person who thinks you have to be perfect often is you.
All you have to do is be effective.
So adopting a policy of constant evaluation and adjustment is also really important.
And I think one of the best ways to do that is have very, very regular personal conversations with your team, one-on-one, something beyond the daily stand-ups, where you really get a sense of how they're feeling about things, what is working for them and what's not working for them.
If you are a producer, I personally feel like if you run these kinds of projects, the most important job that you have is to make problems go away.
That is 95% of what I do all day long.
So if something is frustrating your team or slowing them down or generally causing annoyance, make whatever adjustments you need to make those problems go away.
And that's actually often what keeps the team really happy and productive.
So this is the answer to the riddle of how do you eat the elephant?
One bite at a time, of course.
So I found when you're managing an unmanageable project, one of the things that often happens is that it's not ever one thing that goes wrong, it's the one thing that causes a chain reaction of many, many things to go wrong.
So it's rarely like one big problem you're dealing with at a time, it's often many.
So when things go sideways, they go sideways pretty hard.
So it's really important when that happens to make sure that you're not trying to run in 20 different directions at once to fix it all at once, and sometimes it's really tempting.
So one of the best things that I've found is to just make sure that you're always prioritizing what the problems are and just taking them down really methodically, and doing it in an orderly and methodical way.
So another one, this is actually a big thing to just keep your sanity when things are in a chaos mode, is stay clear about what is and what is not within your control, fix the things you can control, delegate some of the things that are outside of your control but still controllable, and breathe heavily when there are things that are just utterly outside of your control.
There are some problems you can solve and some you can't.
So do what you can with what's solvable.
So again, escalating, very, very important.
And last but not least, leaning on your team is really important in times of chaos.
It's really tempting sometimes to feel like when you're on a project that is in a free fall mode that you're carrying the weight of the world on your shoulder and you're doing that by yourself.
But you don't actually have to do that nor should you because.
That is actually a big part of being part of a really highly functional team.
That's what your teams are for.
So it's really important to make sure that you're prioritizing, developing strong relationships with your teams that you're working with.
You can be the greatest producer in the world.
You can know how to code.
You can know how to do art.
You can know how to animate.
But unless you can clone yourself eight million times, you're not going to be able to launch a project by yourself.
So you are only as good as the team that you have around you.
And this is never more true when things are going sideways.
So running these kinds of projects, above all, involves a really high degree of trust and respect with your team.
So you should never underestimate the power of loyalty and sheer force of will in making something happen.
And I've had that many times when I've been in a really difficult situation with a team I've worked with a lot.
They will often say, all right, you know, I'm really burnt out and I'm really over it, but I'm gonna do it for you because I know that you have my back all the time.
So never underestimate that.
Also, don't ask people to do more than you're willing to do.
That is a really big deal to a lot of teams, especially when they're in a crazy project or maybe they're crunching.
And this goes for working late or weekend work.
If you're asking people to work late, you kind of have to work late with them.
If you're asking them to work on the weekend, you got to be there with them.
And there's nothing I have to say that destroys morale faster than asking people to do stuff that you weren't willing to do.
In fact, a lot of the projects I've inherited that have actually been in a free fall have been the result of people doing that to their team one too many times.
And the team will say, you know what?
I'm going to let you fail.
Happens a lot.
So don't do that.
And find opportunities to lift up your team.
I got to say, early on in my career, when I was an associate, I worked with a really amazing executive producer.
And he really set a great example of what it is to run a team that inspires a lot of loyalty.
Everyone wanted to work with him because, quite frankly, he If you were on his team, you got promoted.
If you did something wrong, he took the hit for you.
If you did something right, he shined the spotlight on you.
It was a pretty amazing experience.
And because of that, we were all rabidly loyal to him.
To this day, if that man called me up and said, I need you, I'd get in my car and I'd drive nine hours to go to his house because he was pretty amazing.
So it's really important to look for opportunities to reward a team that's been working really hard for you.
If there's a kind of project they wanna work on, then look for that kind of project.
If they want to have a particular role in the company, look for opportunities to give them experience so they can actually get into that position.
If they know that you have their back, they will have your back.
And last but not least, I think I'm gonna just let this one sit here because I don't even know if it requires any explanation, but be a champion and not an asshole.
On really crazy projects, being an asshole buys you exactly nothing.
So that is pretty much the end of my talk here.
I am open to some questions.
Thank you.
Hi.
Hey.
So you talked about succumbing the urge of doing now and planning later.
So one of the tools that have been very useful, especially like pre-production, early phase, is a prototype.
Like building prototypes to prove things are working, to prove this is what we want to do.
The problem I've been facing several times is that when a prototype works.
It's like, hey, it's working great, and we ship it.
Like there's not really a transition between we finished a prototype, now let's plan for this and build this right.
So kind of wondering if you have any advice.
How do you identify that prototype is done, and you're actually working on the real thing, and you need to stop and plan?
That's a good question.
So the question was, how do you know when a prototype is done?
So basically, you have something, and it's.
you don't know when to stop.
Is that your question basically?
Yeah, we kind of like say, oh, the prototype works great.
We just keep building on the prototype and ship that.
And, but then the infrastructure is prototype.
It's nothing that was before.
Yeah, well that's again, that kind of goes back to that big picture versus small picture.
And a lot of products do actually start like that.
It's like, here's a crappy prototype, you know, code base.
And suddenly this has to exist as a functioning product.
And I think it really depends on what your ultimate goals are.
If scalability is really, really challenging on a code base that was not designed to be scalable.
So if you're asking, how do you push back on that?
So at some point, the prototype is done.
You say, OK, it works.
We want to build it.
You need to stop building the prototype and then plan for the actual thing.
But I notice that doesn't always happen.
You just keep on working with the prototype, even though it's shitty.
Yeah so that is a very good question.
On some projects that we've worked on we have certainly been in that situation and often what we will try to do in that case is to try and figure out what is salvageable versus what is unscalable and start to actually build a project plan around what needs to be retrofitted to make the project more scalable.
That is an open ended question so I'd be happy to talk to you about that afterward.
Hey.
Hi.
Great talk.
I enjoyed a lot.
So one of the things that.
we have problems with is that I'm part of the development team, but I'm also the manager because we have a very small team.
It's a studio based in Costa Rica, so I don't really have access to other producers and stuff.
So prioritizing becomes a huge issue for me, because since I'm already part of the team, everything seems important.
So what would be your advice in order to try to prioritize better?
So you are in a position, the question is, what is the advice to help prioritize a team that does not have a producer?
So you do not have the ability to also have a producer at any point.
We tried using a remote producer, but it just doesn't do it.
Right, I got it.
So this comes up a lot, particularly in the indie community, because a lot of indie teams don't have producers.
In fact, last year I was part of the indie soapbox rants and my talk title was make a fucking budget for fuck's sake because most indies don't actually have them because they don't have producers and they get into a lot of hot water.
And so often this is a big challenge and I think the best way to do that is there's usually someone on the team who has a vague interest in being a producer.
Is that normally you?
It's always me.
Oh, it is always you.
And do you want to be a producer?
Well, I like it, but I would prefer to be on the sign coding, which is my actual background.
Right.
Well, often I've found when indies say they can't afford a producer.
I'm a living example that that is not necessarily true.
I'm probably the highest billing person on my company when we run multiple projects.
I actually bill on all those projects.
I sell in a lot of the work.
So you might actually find that there is a way that you could afford to have a producer on your team to help you with some of that.
But failing that...
I understand that that's a really challenging question because you also have your own set of work that you have to do.
So, you've stumped me slightly.
Yeah.
I think the best thing is to carve out a fair, you have to carve out time to be a producer.
I guess that's the best answer I can have is that.
A production job is not really, it's not an afterthought.
It's something that you actually have to devote time to.
You have to devote thinking time to.
You have to devote planning time to.
So I think if you are actually functioning as a producer on your team and you don't have one, then you need to actually have specific hours carved out of your week where that is all you focus on.
That's really the best advice I can really give you.
Thank you. Sure.
Great talk, especially the title, loved it.
Thank you.
So you had a picture of a fire and someone was looking at it and saying everything's going to be OK.
People like yourself, other people too, it comes naturally to have that kind of leadership skills to look at a shitty situation and say, hey, be that conduit, we're going to be OK, we're going to be OK.
Is there a way to, do you have any tips in terms of training people to head toward that path in terms of that skill to be able to look at a crazy situation and move forward?
I know experience is the best teacher and just going through the paces helps, but any training tips, anything you've seen that helps you grow that skill within people?
Yeah, that's a great question.
So the question was, how do you get people to want to take on these kinds of projects?
So I think the people who tend to gravitate towards these kind of projects are people with a lot of really good soft skills because there is a huge amount of people management involved in that.
So the people who tend to do really well at these kinds of things are people who can soothe a lot of emotional upheaval.
So those are the kinds of people who often.
are kind of predisposed to it.
I think the way that you actually help a producer, in my experience when I've been mentoring people, is putting them in a position where they are set up to be successful.
So, kind of like I was talking about with my old boss, he would actually take the hit if things went bad and he would actually point out when things went well.
Again, part of this is getting over that fear.
So.
A lot of people don't want to take on these projects because they're really scary.
There's an opportunity for failure.
So if you want people to take on these kinds of projects, give them a support network so they have someone standing behind them who can actually help them get the project off the ground.
And then actually reward them when they do well.
It's really important to reward successes of people who take on projects like this.
Yeah.
Thank you.
Hey.
Hello, great talk.
In the middle of the crisis, how do you evaluate if the problem is with the process or is with the people?
That is a good question.
So the question was, how do you evaluate, ooh, gosh, when the problem is with the process versus the people?
So the question was, how do you evaluate, ooh, gosh, when the problem is with the process versus the people?
It's kind of a power to weight ratio thing.
If something is taking an enormous amount of time and overhead of my time and my team's time, then there has to be a really demonstrable value in doing that.
So I was on a project not too long ago where there was an enormous amount of overhead.
There was a lot of project tasks that were broken down in a very micro fashion.
And that took a huge amount of work.
And sometimes it caused more confusion than it helped.
I understood the reason why that was what was being asked.
But at the same time, it took a lot of time and it actually sort of confused everybody about what was done versus what was not done because it's really hard to close out a task when it's related to a larger system that's not done.
So that was a good example of something that quickly went out the window.
And that was a good example of something where it took everybody a lot of time to enter all those tasks, to break them down in that micro way, and it ended up not being worthwhile.
So it really, there's a couple things.
I think part of it is, does the amount of time that I'm actually spending on this project this particular task, does it actually bear out good results?
So that's one way.
Another way is to just talk to the team.
My team is very much a, they don't like a lot of heavy process overhead.
And so they will be very quick to tell me, like, I don't know why you're making me do this.
What is the value?
You explain to me what the value is of this.
And if I can't explain the value to them, then I'm like, well, that's fair.
We're gonna drop it.
So just being in dialogue with your team is really helpful, I would say.
Thank you.
Thank you.
Hi.
Hello.
Hi.
So one of my questions, or I guess this is the most important one, but.
When I come to start a new project, there seems to be this really kind of a production crunch where we're trying to like waterfall out the whole design and then we take an agile approach when we're moving through our sprints.
But at every project, there seems to be like this nebulous in the first few weeks where everyone's like, I don't really know what I'm doing.
Not everything's planned.
And we're like wasting time at the start.
So we get off to a bad start.
And then we kind of have to now catch up.
So what should I do to try and mitigate that on these projects that I have?
Well I guess, so the question is, at the beginning of the project there's often a nebulous phase where productivity kind of goes into a black hole while the product is, while the schedule is being solidified?
If it's an any dev project, we need to design a lot of the features of the game, do a lot of breaking the tasks down and what they're going to do, and that takes a week, two weeks, all the leads need to get together and consistently talk.
revamp what we're doing, but in that time, no one's really doing constructive work towards the goals, just kind of like, oh, well, I guess I can work on this, or I can try and prototype that, but it ends up being stuff that either never gets used, or just was a waste of time to do, and I want to try and better use that time at the beginning of a project, rather than let it slow us down and have a bad start.
Yeah.
Well, usually, when we're actually in our planning phase, I have every member of my team involved in the planning phase because there's always some element of the project that they need to be involved in.
So if I'm actually working on like, design task breakdowns, then my engineers are working on engineering task breakdowns.
There's always something that they can, you know, I guess I understand your point.
If you're working on design, then there's not a lot that the engineering team can do without design.
But there is often stuff they can do for core tech.
So that is often what I have the team do if we're at the beginning of the project and there's dead time.
I have them focusing their energies as engineers on, OK, what is the core tech that we know we're going to need?
OK, start thinking about that and breaking down that task time.
I do find that generally in the beginning of the project, there is a little bit of R&D that goes on at the beginning of the project.
So sometimes there is stuff that just has to be thrown out.
We're working on a project right now where there's...
There is some R&D.
Some of it will be thrown out.
It's a really fast-turning project, so we're going to throw it out really fast if we have to.
But I think some of that is a little bit unavoidable.
The planning phase can be a little bit of a dead time.
That's not necessarily the end of the world, but if you can get people working on core stuff, then that is always a good way to do it.
Or getting them talking to QA, or getting them thinking about other things that are going to be coming down the line that you have to be factoring in later.
Does that make sense?
Thank you.
Yeah.
Okay.
Well, thanks, guys.
