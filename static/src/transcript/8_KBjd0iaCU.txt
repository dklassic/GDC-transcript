Hey everybody, so in case you're not familiar with our work.
My name is Aaron Boutier, I'm from Clay Entertainment.
I worked on the Shank series and Mark of the Ninja.
And I'm Jeff Agala, I'm the creative director at Clay Entertainment.
Clay is a small game studio up in Vancouver.
We've worked on the critically acclaimed game Mark of the Ninja, the whole Shank series, and more recently Don't Starve, and our new game, Invisible Ink.
So I just want to get a feel for the room.
How many of you are artists or animators?
Nice.
Designers or producers?
I know you guys.
And how about engineers?
Woo.
All right.
OK, so today we're obviously going to talk a lot about art, but we're also going to talk about how it benefits our production.
So there's going to be a little bit for everybody.
So at Klay, we wanted to bring the appeal of classical hand-drawn animation to games.
We're both traditionally trained animators, and we wanted to kind of base our whole style for the studio around those ideas.
But high-quality 2D animation has a lot of issues, like obviously memory, texture, budgets, and runtime issues.
So we wanted to create a process that supported game development and the fast iteration cycle that we have at Clay.
So over the years, we built a hybrid of a traditional animation system and a flash system, which we're going to go through with you right now.
Yeah, so just using this shank knife attack as an example, I'm going to run you through kind of our rough animation process through to final symbol cleanup.
So as many, I'm sure many of you know, we work on Cintiqs digitally.
This makes our process more efficient, not having to jump around scanning images, this and that.
Okay, yeah, so when I start roughing out a new character, I start by learning the model, learning how to draw the character.
I break it down into its basic forms and shapes so I can easily draw it from any angle.
Any of you animators out there, you know how this works, obviously.
At the start of the production, especially for platformers, I like to rough out a lot of the states as quickly as possible.
We know we're going to need runs, jumps, attacks, wall climbs, whatever we think we initially need for the game.
So at this point, we can get those done really quickly, pass those off to the designers for iteration and game, while we work on cleaning up and finishing the rest of the animation.
At this point...
We're also kind of working out the design. I mean, we have our initial character design, but after you've roughed out a character for like 300 plus drawings, you get a really good feel for what's actually working and what's not working about the character.
So we're still adjusting, working on the design.
And, yeah, I'm going to move on from there.
I'm going to move on to tightening up our poses for builds.
We're going to get into our build process a little bit later, but first, I'd like to touch on how we clean up our drawings.
So we used to actually create pose sheets and expression sheets in Sketchbook or Photoshop and bring those into Flash.
But like I said, I found that working in Flash from start to finish is our most efficient pipeline.
these are the storytelling poses that the player is really going to see and feel throughout the entire game.
So I want to make sure that I'm focusing on keeping the character on model, I'm tracking details at this point for the build process, looking at volumes, overall appeal.
At this point it's really about getting great drawings that read, so we'll be tracking, while I'm working I'm zooming in and out a lot just to make sure that expressions, hands, just the overall pose is actually reading.
So basically everything to this stage is traditional animation.
We just do it digitally in Cintiq.
So that is the core element that we build all our animation from.
At the build stage is where we start taking advantage of all the benefits that Flash gives us.
So in normal traditional animation, as most of you know...
You have to clean up every single frame, and then do clean up every in-between and color those.
Instead of doing that, in Flash, we clean up all the drawings with vector line, and then separate each joint as a separate piece as its own symbol.
A symbol in Flash is a reference object that has an array of images on a timeline.
So at the end of this process, we end up with a character that's split up into an array of body pieces.
So we have a large library.
Overall, in the process, this saves us a lot of time from cleaning up and coloring new animation as we clean up and color it before we actually get into animation.
That's not to say we don't do a lot of building.
If you look at this image right here, this is not a sprite sheet.
This is all the storytelling poses that Aaron was talking about that we built.
So for Mark of the Ninja, This is probably like a fifth of his set.
So these are all separated into individual joints, individual pieces, so we get a wide variety of hands, legs, body poses, facial expressions that our animators could use to get that fluid, dynamic animation that we have in our games.
So I just took one of those poses that you just saw and separated it into the pieces, so it's very clear how many points of articulation we have in our games.
So each one of these is a symbol that has multiple views inside of it.
But as you can see, every part of the ninja is its own separate object.
We take this approach because there's two major issues with doing HD sprites for animation.
For us, it was obviously a runtime issue of trying to get full HD sprites running at 60 frames per second in the game engine.
We actually did a test for Mark of the Ninja.
We wanted to do fully traditional.
So we did a basic set of his animation, his runs, his jumps, his attacks, his kills.
We put it in game and it ended up being 40 megs.
And that didn't work out with our 256 memory limit for just the one main character.
And this wasn't even his full set of animation.
This was a small subset of his animation.
So that was scrapped instantly.
But after converting to builds, his memory footprint for the entire game, I think, ended up at 12 megabytes.
So now I'm just going to talk a little bit about our symbol animation process, just basically polishing the animation after we've got our builds in.
So I take the character pose, which is symbolized and segmented, and distribute that character symbols to layers, put those in a folder, and then I have a marker layer on my timeline that allows me to basically just set a key in my folder, and it'll set a key, it'll set keys across the board for that particular pose.
As you can see, we're using labels on our timeline.
Those labels are actually called by our state graph by the designers.
In this case, it's a knife attack, so it has a knife pre, a knife attack, and a knife post.
And by segmenting it that way, it allows us to know where we're going to break into the animation, and we can essentially branch out of those states at any point we want based on player input.
Like Jeff was saying, the game runs at 60 frames a second.
So the nice thing, we're animating at 30 frames in Flash.
And using the tweens, it actually allows us to interpolate that anim data at runtime for a much smoother animation than we could get if we weren't interpolating.
Essentially, to me, it's kind of the difference between ones and twos, traditionally.
In this case, we can only animate on ones, but we're actually getting that interpolation.
And just to address texture budget again, while animating, You know, at this stage, we can still be building new assets.
In this case, if I want to create new breakdown keys to round up my animation, if I need an expression or a new hand or a new asset of any kind, I can create that.
But at this stage, we really are trying to put a cap on how much building we're doing.
So here's an example of the head comp.
The head comp is much like any other regular symbol, it's just that for the heads we like to put the facial features, we embed those small facial symbols into the head so that when we're animating on the normal timeline we can actually rotate and skew that head as a whole rather than having all those smaller symbols kind of flying all over the place and tweening and being like where the heck did the eye go.
It allows us to have a nice kind of expression library as well, and it does kind of lend nicely to skinning later on, which we'll talk about here.
Jeffrey?
I just wanted to clarify, too, that we use Flash as a production tool only and not as a runtime tool.
So we don't have any action script.
We don't have any...
Flash player elements in any of our games.
It's all, we just use this as a production art tool.
It's great for that because we could create custom tools for ourselves and we obviously created a custom exporter, actually written by Kevin who's sitting over there.
And our custom exporter exports into two files.
It exports a texture atlas that's a raster image and a animation file that is just animation data.
We love Flash because it's a vector format and we could export at different sizes.
There was a point in Shank 2 where we were running into texture memory limitations.
HD multi-planing backgrounds with a whole bunch of explosions and a whole bunch of goons attacking Shank, and we're like, we wanted to see how we could evaluate this and make this run better, so we got up the engine to spit out a list of heavy assets.
And it was just a matter of getting our exporter to export those at lower resolutions, since it's a vector format, exporting to raster, and that quickly solved that problem for that section of the game.
Like I said, there's two files.
We have an animation file and a texture atlas.
So that allows us to do skinning much like any 3D project.
So now we're kind of going to that realm of reuse animation, complete skinning.
The skinning is just as easy.
You could take our texture atlas that we have for our character, our builds, our libraries, whatever you want to call it.
and take that into Photoshop and do new art on it.
For these characters for Shank, we just took them in Flash and just redid some of the art.
So as you can see here, these were the unlockable player skins for Shank 1, which as you play the rest of the game, you got more.
it just leads to additional content to be created without all the hard work of redoing the animation.
If this was a full 2D traditional process, we would have to hand draw each frame of animation over again, clean it up, and color it just to add a new outfit.
Here we just do it once for all the elements of that character, and it allows us to have this much diversity in our game.
And the one big exciting part that this brought, forward to is for one of our new games, Don't Starve, it allowed us to open it up to the community for mods and user generated content, which obviously leads to better engagement with your players and all that. So we just, for Don't Starve, we just put out our texture atlas. We just put out like this image that you see here of a whole bunch of different views of the character. It's for the community to create their own characters and if you go on Steam, there's a whole bunch of different mods you can play as a whole bunch of different characters and it's awesome.
So to conclude, our system is a hybrid system.
It's completely based off traditional animation, but we use Flash to get to the efficiencies and have that run in game.
And it's awesome that we use one program for the whole thing because it makes life a lot simpler for the artist.
We've shown you our character process, but we create most of our art in Flash for all our games.
So we don't only do the characters, we do.
like a lot of the effects animation, a lot of the prop animation.
We even do our UIs and all the cinematics that you see from our games in Flash.
So we use this one process, this one system to create all our assets, except for the backgrounds pretty much.
It allows us to be a very positive part of our production and not a production bottleneck.
It allows us to work fast, work efficiently, and be, you know, great artists for the games industry as opposed to just trying to do good art.
I just remembered that during the animation portion of my talk I forgot to talk about handling breakdowns.
Because I feel like that's a big part of the process when you have flash keys.
It's like, how do you, you know, you want to flesh out that animation.
And so I'm just going to jump back and kind of talk about that briefly.
Yeah, so for me personally, I find that I just think of basically favoring the key as I work into my next key.
So once I have my main keys laid out, I basically just work straight ahead.
and I'm constantly flipping back and forth watching my arcs, you know, even like, it's so simple, but like foot slip and stuff like that.
In this case, you know, Shank is lunging, so it's okay to slide his foot forward and have him put his weight on it.
But I'm not just like shifting Shank all over the place on his stage for kicks.
I mean, we'll do that in engine at runtime.
So basically to make a breakdown, I just, again, like I said, I just copy the pose over, just duplicate it and make adjustments from there if I need to swap out new arms, if I need new expressions.
One of the things I know that I do often, is, you know, basically take two keys that I know are going to tween nicely, because they share many common layers within the folder, and I'll just set a tween, key that tween. It'll break, some of it will break for sure, but it's at this point that I can then just fix what's breaking, watch my arcs, and flesh out my animation.
Yeah, like I said, I like to work straight ahead here because you get to kind of maintain the flow and the life of the animation.
Thanks.
And the...
People have asked us why we use Flash and if there's other programs we would use.
Like, there's a lot of great programs out there.
There's like Toon Boom.
I know it's a great program to do traditional and 2D animation.
So that's a viable product.
And recently we incorporated Spriter into our process.
So for Spriter, it allows us to do the symbol animation side of this talk instead of like the traditional animation side.
So if I was going to use Spriter for our whole...
pipeline, I would almost do all the traditional stuff still in Flash, and if you want to use simple animation in Spryder, you could totally do that. We've actually allowed Spryder to work in Don't Starve, so if you're a modder, Spryder animation actually works in Don't Starve. And that's it. That's how we do Flash animation and traditional animation at Clay Entertainment.
Any questions at this point?
Hi guys, Ryan from Untold Entertainment.
We use a similar process, but I have trouble with joint breakages.
Do you have any tips on, you know, when you're bending those knees, you got sharp angles, you see all sorts of corners on elbows and stuff.
Like, what are some of the ways you overcome that?
I guess I'll take this one.
Like I said, I find that a lot of it is in the character design for me.
Because we know we're going to segment the character.
It's like how do you design that character so that your break is just minimized in a lot of ways?
Yes, how?
I could use Ninja as an example. If you're familiar with the Ninja design, he actually, he has these like two flaps that come down below his belt.
And those are great for secondary action, really have like nice flow when we're animating.
But those cover those hip joints. Like that's what those are functionally doing for me.
It's a part of the design, but it's also like, hey, I know those hips are going to break a lot.
So I'm covering them with these additional patches that I can move around.
Knees? Oh, knees, yeah. Ninja, if you'll notice, I take the knee, the leg, from here to the knee, and this part of the leg, I just keep it below that all the time. He's got a baggy pant, so I can move this shape, I can change this shape all over the place, but I just about always keep that lower leg below there. And I can, you know, I can even just like put it behind. If his leg bends a lot, you'll just see like no leg and a bit of a bit of foot. And yeah, I just, I'm just hiding stuff. Hide the joints. Yeah.
I have more of a process question.
So once you're done with an animation and export it, do you guys have a tool for previewing animations and testing them, or do you just sort of hand the file off to an engineer and say, get it in there?
I guess, how much does an artist do versus a tech art or an engineer or something like that?
It really depends on which game we're working on.
Sometimes it's really easy to hook up something in game by just spawning that object that can get created.
And if you're doing iterations on an object, it's probably already hooked up in game.
So there is definitely a little bit of hook up by the game designers for sure to see it running in the in-game engine but our animation is like pretty much like very truthful to the flash animation we do so the main issues like when we're testing builds like that we didn't do as part of the animation process we're just like doing the skinning we would always try to just replace the main character and it's as easy as replacing that file.
So it's pretty quick.
Just to speak to that again too, like I said, I can give them the rough animation stuff really quickly, so I'll just give them a run as fast as possible and they'll hook it up and I can review it before I even do any final symbol animation.
So it's already there.
Once I replace it with the symbol animation, it just goes.
Hi. I'm actually the product manager at Toon Boom.
And my name is Lily. Hi.
I love Don't Starve. So I think you guys have done a superb job on that.
We have recently released a new gaming version that has an export that goes directly from the animation that you do in Toon Boom to Unity and exports out.
Very similar to how you guys do it with a sprite sheet and then you have the animation data separate.
Some of our customers who have been doing that already have moved away from Flash because of the fact that Flash doesn't have a hierarchy system.
So I'm wondering how you guys got around that.
We found our hierarchy system not necessary.
Like, as artists, it was basically, as you probably could see, though we're limited in time, as you probably could see, we do very high energy, like, super fast animation.
And as artists, we don't want to be limited by rigs or hierarchies or anything like that.
So the biggest hierarchy we have in our system is...
how Eric explained how we have a head comp where it's like all the symbols are not a head.
That's the only time we have a hierarchy in our system.
So we basically could move any object wherever we want for like stretch, for like the smear poses to get like dynamic drawings.
And it actually allows us to do a lot more freedom.
than the Knot.
So a program like Spriter also allows for hierarchies as well.
And when I use that program, I don't even use the bone system.
I just go straight flat on the stage and I can still get the same quality of animation.
Thanks.
Yeah.
Yeah, another key aspect of Klay's visual aesthetic is like lighting and shading.
I was wondering if there are any considerations that you take into effect when designing characters based on what effects might be applied to it later on?
For most of our games, I think that kind of came into a lot with Mark of the Ninja, because we had two states of being in shadow and out of shadow.
So those are completely two different builds.
So with that, that was like, OK, we're going to have two different styles for the game.
The character is going to be a traditional line drawn character for when they're out of shadow.
And then when they're in shadow, they're going to be pretty much all dark with a white line.
So yeah, we take that into consideration, but most of our stuff is like colored character with black lines So it makes it a lot easier. We actually bake our shadows in too. So if you look at this stuff closely It's like sometimes shadows will just flip and it's like yeah that happens One quick question I'm getting into flash animation myself, but I think I'm thinking too much like a 2D animator, and that I'm finding it difficult to find ways to save time by reusing shapes.
Like, at what point do you make a judgment call to completely just redraw the arm or redraw the head?
For me, it's just appeal. If you're trying to do something and reuse a symbol, and it's not an appealing drawing, just taking it at that base level and being like, I need to create a new asset because this arm is not doing what I need it to do. So I'll just create stuff anytime I need it.
Yeah, so when you're like fighting with the pieces, just create a new one.
It's a lot easier.
If anybody who stayed between the two sessions, if you haven't got your pass scan, please scan it by the door when you guys exit, so we could get re-evaluated or something.
Yeah, and we'll be in a wrap-up room if anybody wants to talk more about Flash Animation or anything like that.
Yay, 2D.
