Alright, let's go ahead and get started. Um, just warning you, there probably will not be time left over for questions, so if you have them, I mean, feel free to keep them in case I end a little bit early, I do tend to talk very quickly when I'm nervous, um, but in the worst case scenario, keep your questions and you can email me or tweet at me, um, with your questions and I'd be happy to discuss them with you. Um, but let's go ahead and get started on writing modular characters for system driven games.
You might know me as the captain of Kit Fox games, which I started five years ago.
Our biggest releases were Moon Hunters a couple of years ago.
Last year we released The Shrouded Isle.
Both of those featured what we would call lightly, at least procedural characters.
And we are soon releasing Boyfriend Dungeon.
Very exciting.
Not system-driven characters, by the way.
Extremely hand-authored.
So please don't interpret this talk as saying you must create system-driven characters or all games should have system-driven characters.
That's ridiculous.
because boyfriends sometimes need authoring.
But last year I also helped Tarn Adams of Door Fortress co-edit Procedural Generation in Game Design, and if that's a textbook that sounds interesting to you, please know I didn't write any of it, but I did co-edit a lovely 25 different authors on lots of different subjects.
I am extremely proud of it, and I actually have a discount voucher for 20% off up here on the stage, so if that's interesting to you, grab it just in case.
And next year we're actually going to be working together again, this time writing chapters, both of us, and also editing other people's procedural storytelling and game design.
So I've been thinking a lot about the kinds of things that make interesting generators, the kinds of things that make terrible generators.
I've made some of some things that are terrible and some that aren't.
And for this particular talk, I wanted to say a huge thank you to Emily Short and Jason Grinblatt, whose work I am building on extremely transparently in this talk, so you're going to hear their names a lot.
And if you're interested in this topic, you absolutely must follow both of their work, ideally on Twitter, but if not, I guess...
in real life-ish. But let's get started. So I'm going to assume that the goal of creating a system-driven game is to create something emergent and uniquely interesting. Something that's more than the sum of its parts. If all you really wanted was A and then B and then C, obviously you would author it yourself. But writers are often frustrated by systems-based writing because we want to write towards an experience, and instead it often feels like we're asked to create a system-driven game.
create a pile of unrelated words, phrases, and scenes, and after a while of creating these word piles, it's easy to feel like our efforts are actually less than the sum of our parts.
And it's especially easy to combine these and make it feel predictable or repetitive, which Kate Compton has coined the oatmeal problem in her blog post, So You Want to Make a Generator.
I can generate 10,000 bowls of oatmeal, each oat in a different position and orientation.
And mathematically speaking, they will be completely unique.
But the user will just see a lot of oatmeal.
So she points out that what we're really looking for is perceptual uniqueness, not true uniqueness, just perceptual.
And throughout this talk, I'm going to refer to that as meaning, which is kind of a fluffy, hippie word, but if you're more math-oriented, it makes you feel better.
Feel free to think of it as perceptual uniqueness, because that is kind of what I mean.
I'm just a little bit lazy and colloquial, I guess.
And at this point, you might be wondering, why even talk about characters at all?
Why not places or objects or worlds?
There is a whole universe of stuff out there to generate.
A civilization, for example, can be every bit as complex as a person.
But after contributing to a civilization Twitter bot, GP Lackey's Unknown Peoples is a delight, I realized the same principles can be applied fundamentally across types of generators, whether you're generating civilizations or furniture or people.
If you're curious about text generation in particular, I do recommend checking out Tracery or Cheap Bots Done Quick, which is what made this lovely Twitter bot.
But for this talk, I will generally be assuming that you're generating actual characters, full characters as game objects, not just text generation.
So that any time I refer to generating text, I'm probably using it as a symbol for a greater data space, if that makes sense.
But I'm focusing on characters in this talk because they are a common fantasy for procedural designers and a common nightmare for writers.
And they're a fantasy slash nightmare for the exact same reasons, which is that humans are excellent pattern finders and patterns in generated people feel more artificial and alienating than patterns that we see in generated places or objects.
There is no such thing as an uncanny valley for furniture, right?
So if we can generate people, we can generate anything.
So ideally we want characters' diverse information bits to funnel down into a singular, perfect moment of understanding.
And so we need to change the way that we write and the way that our writing is used so that a bunch of words can become meaningful, memorable moments for our players.
So, I'm gonna break this down into four things.
Overall, the base fundamentals are building orthogonally, and then we're gonna talk a little bit about creating higher order meaning, and then we're going to talk about surfacing that meaning to the player, and then why iteration with your co-authors is actually extra important in this particular field.
So, orthogonality I'm gonna use a lot.
I didn't have a lazy colloquialism for this one.
And I'm gonna use it because...
Well, to clarify what I mean by system-driven, I don't mean linear and I also don't mean branching.
That's kind of barely a system.
What I'm talking about is system-driven games that provide a possibility space for the player to explore.
So rather than telling a particular story or a particular set of stories, we're instead only saying these are the kinds of things...
the kinds of stories that might be told in my game.
And those boundaries are here marked on this helpful diagram as X1, X2, and X3.
And that was coined as a story volume at Project Horseshoe a couple years ago.
And in Jason Grinblatt's words, a story volume quote, encloses a family of emergent stories created by a set of carefully curated system parameters.
And these parameters are often fluffy, things like themes and your setting and so on.
Maybe your story volume includes societal collapse or love ballads or moon festivals.
It's kind of up to you what your story volume is about, but you are defining what is allowed and what isn't rather than what should be.
And the key for me was to wrap my head around the orthogonality that in order for this beautiful space to exist, x1 must be a completely different axis than x2 or x3.
A value on x1 needs to be easily separated from a value on x2 so that they can be combined to create meaningfully different results.
We're used to thinking of this physically.
We're used to seeing different character traits physically, such as height or weight, be combined freely.
To use an example from Emily Short's chapter 21 in my book, height and weight can be considered orthogonal, and usually are.
You can combine them freely.
You could have tall and thin, or tall and wide, whatever.
And you know usually we don't get the impulse to correlate these with each other. We don't suddenly think oh hair length should probably predict a skin color But we do tend to do that with personalities, and it becomes very fuzzy very quickly So this might seem up front like an example of four orthogonal personality traits Combining these let's say you could have you know low or high of any of these four traits Oh, wow, I can create 60 different personality types.
Incredible.
Unfortunately, as Emily Short points out, this difference might not be observable or meaningful to the player.
These traits, flirtiness and extroversion in particular, do overlap in the kinds of behaviors they can create, because both traits govern whether or not a character might want to talk to you, and if so, how often, how intimately.
So, players won't always see the difference between a very flirty character versus a very extroverted character.
This is also a problem in real life, but that's a different question.
So she recommends, for example, thinking of what if romantic interest replaced flirtiness.
And that's interesting because it is observed under different circumstances.
A shy person can still express high or low romantic interest in the player, and a highly extroverted can express both of these feelings.
And so they are much more modular.
And after you've picked your orthogonal traits, this is where it starts getting very tempting to correlate them, especially in a straightforward, logical-seeming way.
And you should resist this temptation.
I mean, you might be tempted to make someone imaginative, much more likely to fall in love with the player, because that makes sense, right?
Or maybe it's more interesting, or it's more realistic, or you're afraid of your characters being too random.
But it's bad, and you should think about orthogonality very deeply, because...
Even if you're talking about orcs, you want orthogonal traits not only for story volume reasons, but also it allows for the possibility of interesting transformations.
Part of the success of the Nemesis system is that depending on the input, different traits can be applied and combined at will.
Zun here could be burned or scarred or strengthened in any number of system driven ways depending on what happens.
He could change completely depending on the player and roll of the dice.
If archers or marksmen here were more likely to get, I don't know, a hand injury, I mean it would make more sense, but it would also be much less interesting and rich for the player to explore.
Orthogonal traits also allow you to hide some of those traits and reveal them over time, letting the player get to know the character in an interesting way.
If being an ascetic, like Zayna there, number four, if being an ascetic implied something about what kind of vice she had, it wouldn't be interesting to learn what it actually was because you'd have a feeling of what it was already.
Getting to know her would feel less like meeting someone and more like just filling out the rest of the cookie cutter.
In Moon Hunters, we made the player myth a bit orthogonal, such that different components, such as events that you encountered, or cause of death, or your constellation, could be combined at will, which did reduce redundancy, but the individual pieces remained maybe too orthogonal, I would say.
I mean, system designers and writers should absolutely work together to keep your story volume free of arbitrary or logical limitations.
Lateral, meaningful connections between systems can make your story volume absolutely richer, which we'll talk about in just a moment.
But direct constraints within a single system, such as your character traits, usually make your story volume poorer.
So let's think with our writer brain.
So how many people here identify primarily as writers?
Writers.
Oh, interesting, interesting.
How many people identify primarily as system designers?
And what about narrative designers?
Okay, okay, interesting, interesting.
Well, I think it is important for system designers to put on their writer brains also, but let's all do that, and think beyond piles of words and descriptors to figure out what our meaning actually is.
I mean, without a writer, a person is a meaningful, meaningless jumble of descriptors and making them feel powerful and coherent is more than just pruning their vocabulary.
If you do carefully make a pool of possible words, you do get occasionally interesting outputs.
If you only generate words and actions related to spaceships and aliens, it will feel sci-fi.
And it'll occasionally be kind of sensible and interesting.
But it'll also start feeling like oatmeal eventually, no matter how well you tune it, because there will be occasional blips of meaning, and the rest won't really fit together.
They'll just be bits.
And it's because you've used the same structure for all of them.
You've only generated the bottom most layer of meaning, the corpus of information.
So even if you have an enormous variety of options in that bottom layer, players will still be able to sense deeply that they're all just buckets filled with different flavors of water.
Artists and writers often create coherence in our creations kind of subconsciously.
We attach meaning and texture to the things we create.
And in this slide, you can kind of see one character that feels aloof, and one that feels a bit rebellious, and one that might be a bit wistful.
This is conveyed consistently in the design of their posture, their costume, and body.
And yet, they are not cookie cutters.
So you have to help your algorithm do the same thing, help it make connections between seemingly unconnected systems and content.
I'm going to talk about how to do that in a moment.
But if you can figure out a way to create higher order patterns of meaning, even a little bit, you'll have more satisfying results because you're varying the shape of the bucket, not just the water inside.
So what are the themes of your world?
What does your story volume reveal about humanity and the universe?
Is it a utopian world of curiosity and hope?
Is it a pulp adventure of good battling and overcoming evil?
Is it a female power struggle in isolation?
Whatever your themes are, these archetypes can become the highest layer of your systems, shaping your bucket that your systems fill in with content.
So when you start thinking about what your highest level of meaning are, this should be reflected in the very essence of your systems, ideally not only in characters, but also in places and objects and so on.
One of the best examples of this so far are Emily Short's Annals of the Parikhs, which is a generated novel.
It's a guide to fictional places in an England-ish setting.
She defined these five suits in her corpus, salt, beeswax, venom, mushroom, and egg.
Yes, she's wonderful.
And what she did was she went through her corpus of information and tagged them all according to which suits.
suit or suits they could identify with.
So for example, something that was tagged venom could be something colorful or something deceitful, something serpentine, something ornate, brightly colored, yeah, beautiful.
And these are things that normally a machine wouldn't think to associate.
Normally it would just think to associate.
bright colored things with, I don't know, like even if you had a machine learning thing going on, it would say, oh, it's childlike or something.
But in the meaning of her universe, venom became this underlying current where you could kind of sense, oh, a venom place feels different from an egg place.
So if this is at all interesting to you, I do highly recommend her talk going much more deeply into this, from Proc Jam 2016, entitled Five Strategies for Collaborating with a Machine.
But there's lots of different classification systems close at hand.
You can probably think of suits off the top of your head really quickly if you don't want to create your own.
I mean, tarot offers something.
I mean, cards.
I mean, at the very basic level, you can think of elements even.
So that's what I'm gonna use for my example now since we're all probably familiar with it.
Card suits are so familiar.
What is a character or even a storyline, a plot arc that feels more water-like or feels more fire-like?
Even these very basic concepts that are familiar to us draw connections between things that seem on the surface Unconnected such as excitability and the color red. It's a very basic thing in us, but it is not a basic thing for a machine So it's also important to remember orthogonality.
It's tempting to script, let's pretend we're procedurally generating Mass Effect.
I'm not working for BioWare.
I have nothing to announce for you, unfortunately.
But I think it's a good example of something that might be tempting if we were to make that game, to script certain races or factions or massive locations to be purely of one theme or another.
But that undermines the ability of the population to be varied and writerly.
Instead, think of a character's archetype or bucket shape as just another axis of modularity.
Allow it to combine with your character's other aspects.
And I recognize to some extent that orthogonality and higher order meaning are somewhat at odds with each other.
It is a fine line to walk like everything else in art and writing.
But, for example, if the Asari were allowed to have water-type and fire-type and air-type individuals, it would make that race feel more believable and feel more meaningful to your players.
I would hope that every race would have this flexibility.
Moon hunters did use an extremely basic, rigid form of this higher order meaning concept, somewhat by accident.
And it would have been much more effective if we had been able to apply the generation of different suits to the world and its encounters in a more coherent way, for sure.
So now we've generated maybe too much information about a character.
Not only does it have all of its word piles, but also it's in this suit, right?
So there's a whole universe of potential background which could show the player.
And we need to figure out a coherent way of figuring out what to emphasize.
Assuming it can't all be given at the same instant, we have to help the player understand it all as quickly and easily as possible.
Perceptual uniqueness, though, can come in multiple forms.
I wanted to take a second to highlight Caves of Qud as having an interesting approach to meaning.
Caves of Qud blurs the line between mechanical meaning and intrinsic writerly meaning here.
You can see Mehmet is an individual that I'm talking with here.
And somewhat down the page, you'll see disliked by urchins for ruining the festival of Utz Yara Ux.
Now that first part, disliked by urchins, has mechanical meaning.
If the urchins are a faction, and if I'm nice to Mehmed, if I share water with him, for example, the urchins might not like that because he's their enemy.
It's kind of standard faction mechanics.
However, ruining the festival of Ut Yara Ux is more uncertain.
It's possible that...
that Jason and Brian could patch in something about festivals of gods that is relevant here that can be ruined somehow. Or it's possible that Ut Yara Ux is a random text generated and festival is just a cool word and he ruining is also kind of cool.
So that's what he claims happened, and it never actually happened, and there is no way to ever ruin a festival.
It doesn't matter. For the player, they have the mechanical meaning, and they also have this broadening of their horizon through fluffy writerly meaning.
And either way, this character is perceptually unique.
So, regardless of what kind of meaning you're going for, you have to surface it to the player.
Because the faster a player can internalize multiple important aspects of the character, or at least be clued into what those might be, the faster a player can also synthesize those into a single unique identity, and remember them as a person, rather than a file entry.
But each character of course is going to have so much data points that they can be conveying at once that choosing between them can be difficult and create waste.
A common way to write lines for a dynamic character in a system driven game is to try and apply all the variables into one channel of expression such as the way they greet you.
You might have the character check all kinds of variables about themselves and then choose what to say to the player.
This is very common and not recommended.
It's intuitive and potentially meaningful, or you could end up writing a thousand of these, the player sees one, and it happened to be the same one as the last NPC that talked to them, right?
So stacking too much, this is what I learned from this, is that stacking too much information and systems into one channel of the character's expression.
is setting up for redundancy.
It's even worse, actually, when you're reacting to something about the player's context, which is also tempting, because the player is the number one constant that all NPCs have in common.
So another approach might be that we look at our set of system parameters, you know, we write a bunch of things and we shuffle them together and we think, well, maybe we should surface the ones that are best written.
Let's surface the interesting ones.
Let's make those more common.
The problem there is that of course, I mean, yes, things are generally interesting looking at first, but D and E now just feel more repetitive and more common, and instead A, B, C, and F, which were your less interesting lines, are more rare and more remarkable for the player.
Which is a little bit of a shame.
So one possible solution is to have your character express themselves in as many ways as possible, orthogonally broadcasting their information simultaneously.
The Civilization series does a little bit of this in that the leader characters simultaneously convey something through their posture about how they feel about you, and then what they actually say reflects the most important current issues.
Now, of course, beyond that, they do kind of just throw all the information up there and you could theoretically see each of these fields as a different channel.
At least you don't have to ask Cleopatra ten different questions, I guess.
But it is a lot to take in at once.
The Middle Earth series does more carefully separate out the procedural information here.
It's not like Zog is trying to express his class, his race, his level, and his history with you all in one line.
You can get what you need from the UI and then the writerly bit from what he says.
But the problem is there's so much information and so much of it is abstract or needs to be observed over time that the gold standard has become to just throw it all on the screen at once.
And you can't physically show the player everything.
I know that you think it happens in Dwarf Fortress, but it doesn't.
Tarn and Zach actually put in a ton of effort to figure out what information to actually include and highlight.
For example, you'll notice in Dwarf Fortress, it doesn't actually try to simulate dialogue between characters because it would seem too repetitive.
So instead...
Even Dwarf Fortress has to think about what is the meaning of this conversation?
What are they trying to say and why?
So here is a strategy for deciding what is appropriate to highlight about your characters.
Okay, actually I have one more false start here.
Don't take a naturalist approach quite either, because if you try to mimic the real world, we often see someone's physical attributes first.
Let's pretend this guy, Choi Youngjae, is a generated character.
We can see his physical attributes, maybe he introduces himself, we see his name, and then we get to know him, and over the years of getting to know him, we find out his childhood and secrets.
The problem is that in those first minutes, he's just a name and a face.
and who here is terrible at remembering names?
Yeah, so it's like basically you have no information about this character, it's just a model.
But so you might as well not have generated anything else, right?
So thinking again about perceptual uniqueness, we shouldn't hide any of that perceptual uniqueness that we might have access to.
One of the best solutions I've seen to this is actually to have a human parse it for you.
Bad News is a wonderful piece of procedural performance art.
Ben Samuel is a co-creator there on the right.
It's his job to pick out from a procedural character sheet which parts of his character are interesting to act in dialogue with players in real time.
And he's amazing at it, it's incredible, but I assume you don't have the budget to send an actor home with your characters to interpret.
their data for your players.
So, okay, we have a crowd of characters.
What does the player need to know?
There is a pattern that I've seen across a few different games and that we've started to employ.
The first most important thing is if this character has been encountered before, within the first second of seeing them, They should know what has changed.
Because if the player has already created a mental bookmark for this character, this is Tom or Choi or whatever, YoungJai, then I should know what has changed.
Now he's social media famous. Wow, that's interesting.
He has changed over time like people do.
The second most important thing is to remember what, get a reminder of what their unique trait is.
Maybe this guy's a bodyguard, he has really high discipline, and maybe nobody else has those in at least the nearby vicinity.
So in this area of the game, these are the things we need to know.
He's a bodyguard with high discipline, and also now he's social media famous.
But we still don't remember his name.
That's fine, we don't need his name.
Most of our bookmarks of other people don't actually have names attached.
That's why we forget them.
What we remember is what is important and meaningful and perceptually unique about them.
And if the player sticks around to actually observe what's going on, maybe now we see his name and we're reminded and we get to see his current status.
We spend a little bit of time with him to see what's going on.
This is information that might change at any moment.
So, I mean, the player just kind of naturally will assume that it's not worth paying too much attention to, but it might be relevant depending on your gameplay situation.
And finally, if the player opts in, then they can interact with the character for more detail, which are the finer details that make him feel like a real character that the player can choose to interact with or not.
Now this does handily indicate the amount of words we can generally afford to spend per message, going from fewest on the left to most on the right.
It also lets us prioritize where to spend most of our time writing variety, since obviously the information on the left side will be seen more frequently.
It does make sense to budget extra variety there.
For example, if you were to write a bunch of greetings for a character, maybe make it mostly about the changes in notifications.
Maybe that's what greetings should be about.
So now you have an idea of what meaning to give to your player as quickly as possible.
And I know iteration is probably an overused word in our industry, it can make a lot of us shudder, but I think it's worth calling out here specifically because we're not used to iterating systems in the same way that we iterate our content.
We usually think that writing procedural content goes like this, you dream of an infinite possibilities.
You sit down and you think of some actual possible outcomes for your system.
You tell the computer what to do with it and then, yay, we have something beautiful and unique.
Unfortunately, programmers generally will want to call this moment alpha.
It is not.
Because you really do have to do a few more iterations.
I would call both of these your co-authors.
Your corpus of data and the systems that combine them.
You're both working with them, and they both have their own flavors and textures they're going to give you.
So now that we know it's not alpha.
You really should take a moment to examine your co-authors and iterate as much as possible because it's not just your algorithm that adds flavor, it's also what information you're putting in.
And this might mean your co-members of your writing team or it might mean external public domain co-authors.
Emily Short recommends the characters of Theophrastus.
an ancient Greek philosopher who specialized in writing about personality types and example activities that different personalities do.
And feeding that in as a co-author will obviously have different effects than feeding in medieval descriptions of popes.
Look, there's a new character being generated right now.
So you can try different co-authors as part of the iteration process and see how it adds unexpected flavor and texture to your world.
And you'll go around this loop a few times, but you'll find better results the more that you are able to measure them, not just as a writer for what jumps out at you as well written and what seems poorly constructed, but also at a very basic level, what does common actually mean?
What does too surprising mean in your system?
Is it too weird, not weird enough?
If you actually went through and helped your system identify words that were supposed to be more common and words that were supposed to be more rare or strange.
then it's pretty easy to also have analytics that tell you how often surprising outcomes happen and whether that's what you actually want.
Finally, across all procedural authors I've talked to that have created anything interesting, they all talked about the importance of creating room for exceptions and handwritten flourishes that break all of your rules.
You should absolutely allow occasional authored surprising lines, which totally.
buck all of the rules.
For example, if your system always generates a character's childhood in detail, maybe it usually generates traumas and parents and siblings and hometowns, you should allow occasional flourishes like they have no memory of their childhood or something equally unexpected.
And that does take up some time in your planning, so plan accordingly, but it is an important part of every successful generator that I've seen.
So hopefully your universe of characters now feels less like a bowl of oatmeal and more like a field of stars.
The more interesting ones are surfaced and made to shine brighter to the character.
And we can draw meaning between them for the player as much as possible.
And finally, as we iterate, we'll build with the player an understanding of our world and its rules that exposes the underlying meaning we want to tell with our story volumes that they can explore with their own agency, which provides an experience that no strictly authored or branching narrative ever could.
And thank you.
Yeah, we have a question, not a comment.
That's what I heard.
Yeah, it's not a comment.
It's really simple.
Amazing.
I'm a little bit confused.
So you were talking about building orthogonality in your traits and you then commented on how.
correlations between traits is not a good thing and I'm a little bit confused on why. So for example if you look at your example of Shadow of Mordor the more melee based orcs tend to have a slightly larger scale than the range based orcs and that kind of made sense and felt good with the gameplay and it seems a little bit odd to say that correlations such as that would not necessarily be good in random generation I mean, it's possible that I'm overreacting to the instinct of a writer to strongly correlate things all over the place.
And so I err on the other side of never.
Obviously, there should be some in there.
And that's part of what higher order meaning is anyway.
I thought that's exactly what higher order meaning was the how things are interconnected and build a something that's more than just a random blandness.
Yeah, and iteration will help you sort through that.
It is definitely a blurry, weird space to be in, but I think that the more you iterate, the more it'll become clear, oh, this is an interesting connection, and this is a connection that actually weakens the overall volume.
But it's up to you and your game, sorry.
All right, no, thank you, I'm just curious.
All right, thank you.
