Hello everyone.
Allow me.
Hi.
Hi.
This is where you can tell I'm a teacher.
I keep expecting sort of callback response.
So I've been in the ed tech industry for over 10 years and I got into ed tech because of game development and because of working in 3D animation.
So this is really exciting for me.
So throughout the years, I've been responsible for bringing a variety of different game engines to the classroom.
I'm usually the girl you call when there's no documentation.
So I don't get to do fun things like Unreal or Unity.
I like going where no one really has gone before.
And in those 10 years that I've been in ed tech, I've also had the great pleasure of leading education teams that are responsible for subject matters.
like cryptography, machine vision, everything down to scratch, and practically every single programming language under the sun.
I've probably had to produce a course on it.
But I'm here today as part of Roblox Education.
Over this past year, I've had the great pleasure of getting to officially launch Roblox Education.
We have a website now. You should check it out.
Today's talk is on the Roblox Creator Challenge.
So the Roblox Creator Challenge is a self-paced tutorial that's designed to attract new people to game development and coding, assuming they've had absolutely no experience with it before.
So the topics I'm going to go over today, first of all, what is the Creator Challenge?
So you have some idea of what I'm talking about.
Why do we do this?
Why is this important to us?
Why is this important to our industry?
What are some of the challenges and strategies for working with a group that is new to these subjects?
And then finally, what did we learn from our first Roblox Creator Challenge, and how are we using that as we move forward in our newer iterations?
Okay, so the Roblox Creator Challenge, as I mentioned, is a self-paced template-based tutorial designed specifically for people with no experience of game designer coding.
Each creator challenge has three parts.
We have a template that has some pre-built assets to it.
This works within Roblox Studio, which is the development tool that's used to create all of Roblox's games.
We have the step-by-step tutorial section, so you can actually figure out how to do the things.
And then finally, we have a quiz game.
This is our checks for understanding.
It's also how we deliver prizes such as badges and free avatar items.
Our first creator challenge was in partnership with Jurassic World.
It attracted over 6 million people.
And in three months, we had over 270,000 games published.
So I'm going to show you a video.
It was made actually during last summer.
So some of the numbers on it are older.
But you get to see the template that we use.
And you also get to see a lot of the student embellishments to it.
So in addition to dinosaurs and falling rocks, you're probably going to see maybe some falling eyeballs if you're paying close attention, beach balls, some really colorful climbing walls.
So you can tell there's some student work in here.
So that's the Roblox Creator Challenge.
I'm very proud of it.
Roblox it.
Yay.
Thank you.
I appreciate that.
So that's what the Creator Challenge is.
So now, why do we do this?
Roblox isn't an education company.
We do all of this for free.
So particularly, teachers like to ask me what's in it for us.
And why we do it is really born of the question, how can I do it?
UGC platform actively drive diversity in our player base?
To me, I think the answer is fairly obvious by driving a more diverse developer community.
And that's how Roblox felt.
So that's why they hired me.
We started creating content, giving it away to teachers.
So we released lesson plans, tutorials.
We worked with some really fantastic education leaders in the industry.
But it wasn't quite enough.
We were finding that these programs that we were working with.
It was more affluent students who were attending.
And it also was people who already knew they wanted to make video games, which is great.
We want them to make video games.
But we also want the people who it hadn't ever occurred to them to make a video game to come and try to make games.
We also want perhaps the people who didn't have the opportunity, who couldn't afford to go to these like really awesome tech camps in the summer.
So we decided we were gonna make our own tutorial and release it completely free.
All right, so how many educators do I have in the room?
Okay, a few.
How many of you guys are game developers?
Awesome, wow, thank you very much for coming.
So of you guys who are educators, let's see, any of you guys teach college level?
No, middle school?
All right, high school?
Okay.
Anyone teaching like elementary school?
Elementary school?
Okay, so a lot of the things I'm talking today aren't really age-specific strategies.
There are a lot of challenges with working with certain age groups, but the subjects I'm going over today are much more about how do you attract people to come and be game developers in the first place?
Assuming that they've got no experience, how do you keep them?
All right, so that's what I would say.
So the first challenge you have is getting them to try out your content in the first place and getting them to not leave is the next challenge.
A good place to getting them to come in and try it is by leveraging their interests and of course giving them rewards.
In our case, we're leveraging the fact that we have a really popular platform.
If you work with a younger age group or if you know any kids that are 10 and up, They tend to love us.
The other thing that we have in our favor is we're working with the Jurassic World Fallen Kingdom.
It's really hard to go wrong with dinosaurs and lava and volcanoes.
However, if you're not working with those sets of IPs, there are options.
If you're working with younger students, you can bring in evergreen themes, anything like narwhals, cats, dogs, ninjas, stuff that isn't necessarily IP related will make your content instantly more relatable.
And if you're working with older students, you can still look at what they're interested in.
They have hobbies, they love pop culture.
You can show how you can connect game development to any subject matter they love.
It doesn't matter if it's sports.
And you can also show them how game development can be a vehicle for taking the social issues that are important to them and creating a narrative around it.
And speaking of narrative, when you're working with these themes, you don't just want to throw those interests into images and to reward items.
You also want to make sure that you're creating a narrative around them in your content.
One of my favorite books ever is Made to Stick by Chip and Dan Heath.
It talks about how as human beings we really just crave stories.
So in our tutorial we relied heavily on the narrative of having to get blue.
the velociraptor off of the island before the volcano erupted.
And this is particularly important because I'm working with a game engine.
This isn't a pre-built game where I can put them on rails and I can keep them from doing things. This is a template where they can go and do anything they want. If a student wants to, they could just create a block at the top of the volcano, make it go all the way down past the lava, and then race to the finish.
But we found as soon as we put in blue the velociraptor and we created the story that you had to get to her and then you had to build bridges and then you had to code the next item to get her across, we found that our testers, including our adult testers, they stopped cheating their way down nearly so often.
And they really, really became willing to place themselves in that narrative and follow along.
So.
A nice byproduct of having blue as a part of our narrative was that we got to use her as a really student-friendly surrogate for the end user.
We wanted students to not only think about making games, but to think about the person on the other side of the games.
Because I believe that's probably one of the most important skills anybody can have.
It doesn't even matter if you're going into game development, if you're going to be in film, if you're going to be an engineer, trying to think about how somebody else is going to experience your product, that's something that's going to serve you well no matter what career you choose.
But trying to actually think of this imaginary user and what they want to do, adults struggle with that.
So by putting in blue, we could say like, hey, not only do you have to be able to play your game, but blue has to actually get off the island with you.
So that's what they had to do whenever they played the HIST of the game, and it worked really, really well.
If you don't have something like blue, usually what I suggest is that you just have them do play tests with each other.
So you have to be like, all right, two other people have to be able to beat your level, that sort of thing.
Another problem you have a lot of times when you're working with content, particularly game engines and coding, is they tend to be extremely technical.
Meaning, the more leeway you put in for them to express themselves, a lot of times also the more opportunity for troubleshooting you're putting in as well.
But if you don't allow them to explore, they're not really gonna understand the concepts you're trying to give them.
And they're not really gonna feel a lot of agency over it.
And that's actually one thing you have to be aware of if you're working with a template.
The pro is that you're gonna have something that looks beautiful, it's gonna look a little less like student art, but the con is they're not gonna feel as much ownership of it.
So wherever you can, try to give them that ownership.
If there's a color that doesn't matter, let them pick that color.
Let them choose the names of their variables, and if you've got fireballs raining from the sky, show them how to use other objects to rain from the sky instead of your fireball.
And that resulted in beach balls and eyeballs and flower pots falling out of the sky, which honestly doesn't fit our theme of dinosaurs and volcanoes and lava.
But students, when they get to do that kind of thing, they have a much better understanding of what tables and arrays actually do and how you can actually put other objects inside of them.
And they're also just much more proud of something that feels like it's their own.
All right.
So you've got them in your content.
So far they're enjoying it.
They're expressing themselves a little bit.
So how do you manage burnout versus boredom?
It's really, really similar to the same things you have to worry about in video game design and even in film.
So if things are too easy, they get bored.
If nothing's happening, people get bored.
If there's no challenge, people get bored.
If you keep ramping up the difficulty and you just constantly have them learning mechanic after mechanic after mechanic or concept after concept after concept, they're gonna burn out.
Our brains don't like working at top speed, at top capacity for very, very long.
So ideally, you have a nice progression curve.
And my background being a hybrid between game development and education, the fact that I see this curve show up in both places I think is one of the most fascinating things about living between both worlds.
So how I take advantage of creating a decent progression curve is I think about the topics that I have, sort of place them like what's more pleasing, what tends to be easier, and I intersperse them.
When you're working with game engines, a lot of game engines will have built-in tiles or built-in terrain.
Honestly, that tends to be more intuitive in most engines.
People tend to like it, feel pretty good about it.
So rather than putting that just at the beginning, I usually will put it somewhere in the middle since it's really satisfying, and use it as one of the dips in between the coding sections.
So I kind of went coding, building, coding, building, coding, building.
Or the other way around, building, coding, building, coding.
That way, they had some lulls in between.
Their brains got to take a break.
And they got to sit in the topics a little bit longer.
All right.
So now I have them.
And I want them to go try my more advanced content.
So as I was saying earlier, these creator challenges, they're designed for people who are new.
They're kind of like, I don't know, maybe I'd like coding.
Maybe I'd like game development.
But we hopefully are thinking that maybe they'll go take a class or they'll go and take a look at our more in-depth content.
So the Creator Challenge is like a taster and then we have curriculum that will actually take you all the way from Hello World to this is how you do everything step by step by step.
So how do I live in wanting more?
And that's where, for me, that's where I think about using peak end theory.
Does anyone know what peak end theory is?
I have a bad prize for you if you do.
Or take a guess?
All right.
Peak-end theory.
So peak-end theory is not really a concept that shows up in education a lot.
And what it comes down to is leave them wanting more and end up a bang.
So Stanford a long time ago, and I think some other institutes, they did these experiments that showed that how you evaluate an experience, if someone says, was that movie good?
Was that doctor experience good or bad?
You don't just average it out.
You don't weigh it all out.
What you do is you remember the extreme.
whether you loved it or hated it the most, and then you remember how you felt at the end, and you average out that extreme with how you felt at the end.
That's peak end theory.
So you can use that to your advantage if you know that's how human brains work, particularly if you're working with something shorter, or if you want people to just have good memories of your film or game or whatever it is.
In my case, I'm pretty much, Any game engine I've ever worked with, not just with Roblox, once again, terrain's always a big hit.
Making things explode is a big hit.
If you're working with Minecraft, you put in all the dynamite.
If you have something that's just satisfying and blows up, that works for every age range.
I'm talking everyone down from my six-year-olds up to the advanced academies.
So, I put in The terrain section more in the middle has a reward.
After I did some coding, so they got to sort of take a step back, and at the end, that's when I really let them rain fireballs from the sky, and it was really satisfying to watch.
So when they play the game and they see all these things and objects that they chose falling out of the sky and blowing things up and hurting people, or causing damage, I should say, that went really, really well.
Okay.
So Jurassic World Creator Challenge was our first creator challenge and of course anytime you do something there's something you could have done better and we knew we wanted this to be an ongoing series. So at the end of the summer we had to post-mortem to figure out where we needed to iterate and how we would do that in our second creator challenge.
So we went through the different components that we talked about earlier, the template, the tutorial, as well as how was our actual in-house pipeline.
And right away, when we're taking a look, we start seeing these themes that come up.
So in terms of the tutorial content, this is the most important theme.
There's just too much content.
So our first time, we created over 79 Google Doc pages worth of content.
That was a little gung-ho on our part for people who are new to development.
Remember, these are people who just wanted to try it out.
They weren't necessarily sold on it yet.
Which leads me, this is probably my biggest takeaway from that, when you're creating content, ask who you're writing for, what your desired goal for is for the learner, and then how long do you actually want them to take on it?
So for our first creator challenge, we were crystal clear about who our intended audience was and what our goal was.
We wanted to attract people who had never tried game development before.
We wanted them to try it out and hopefully become game developers someday.
But we hadn't thought about how long did we want to spend on it.
And people would ask.
We're like, I don't know, a whole weekend.
It'd be great, as long as they want.
But we were delivering a full course meal when what we should have been doing was handing out a Costco sampler.
And then you know how you ever try a Costco sampler and you're like, sure, whatever, vegan lasagna, and you're not vegan, but then suddenly you're going home with a vegetarian lasagna?
That's kind of what we were hoping would happen, but we were just like being like, lasagna, go!
And they're like, ah.
Thanks for laughing, I appreciate it.
So for our second creator challenge, our story game creator challenge, we were much more clear about what our goal was.
Once again, our audience was ages 10 and up, people who were new to game development.
We want them to consider it as a career and get excited about it.
And this time, we chose a specific time range that we want them to be able to learn all the concepts in.
We chose 40 minutes, and the reason for that is because a standard classroom is 50 minutes, and there's also hour of code that happens every year.
So we wanted to create an activity that if a teacher wanted to, they could adapt into a classroom.
And within 50 minutes, the students first write a story by hand, so they're getting a little pre-production there, and then they use code for the very first time, they type it out in Lua, to ask players questions and get their input and store it in variables.
They then take the player's input and they put gaps into their story and they concatenate together.
Does this sound familiar to anybody?
What is it?
It's extremely popular.
So we created this lost word style game that has a more well-known title.
And it went over pretty well with both our younger testers and our older testers.
And it was great because a teacher could control how much time a student went through it, but at the end, anyone who wanted to keep writing more, they could just keep going with the concept they knew already to internalize it.
And the great thing about focusing on the content that we were creating was that our completion rates went way up.
So on our first much longer creator challenge, we had really strong portions, but no matter what we did, if it's gonna be that long, you're gonna get a really drastic fall off.
But when we made it shorter.
basically all of our content was being used more.
And what was more interesting, even for the equivalent amount of content, we're actually still getting better completion rates because they felt like it wasn't just going on forever, they could see where things ended a little bit better.
So it was just much more manageable for people.
All right, so the second area of our content.
we found out we were having issues.
It wasn't so much like our steps, people weren't reporting a lot of issues there.
But because it was so long, and because this is self-paced, what we were realizing was we didn't really allow for stopping and starting, or for starting over.
So, one of my recommendations is if you happen to be doing online content, I'm actually not a big fan of locking things sequentially, but also make sure you're allowing people to know what comes next and get back to it later.
So all we did was we added in a TOC.
We added it in after we launched.
And as soon as we did that, one of the benefits was if someone took a break, they can get back to where they left off.
They also had a clue as to how much was left in the lesson.
Because if you don't know how much longer you're doing anything, you feel really lost.
If you ever get in a car and someone's just like, turn left, turn right, turn left, but they don't tell you you go into the grocery store, you don't like that.
So you want to have an idea of how long you're going to be spending on content and how much you have left.
You get a sense of progression.
So the next area we took a look at was the template itself.
So the template was huge.
So we actually spent a lot of time on wayfinding, and we kept having to create these maps to show you where to put different sections.
If you see way on the left side or your right side, that's where you start it, up at the top of volcano.
Then you had to get blue, then you had to get through the volcano, then you had to get across these rocks.
And at the same time, you're placing objects, you're coding, you're doing all these things.
It just was too much.
And that's what we just kept hearing.
It was too much, it took too much time to actually navigate in 3D space.
If you're new to 3D game design, it's not as intuitive as if, you know, most of us have been doing it for years.
So physically just having to zoom around was distracting to the lessons we were trying to teach.
As well as, we kept having to put in more wayfinding into the template itself, because people were getting lost, didn't know where to complete which sections of the tutorials.
So for our second Creator Challenge, I gave a directive that I wanted to be able to cross the entire tutorial within five seconds.
So on the left side, I have the Jurassic World Creator Challenge template, which is huge and I couldn't even get into a single screenshot, it still cut off a little bit.
And on the right side, that is the entirety of the template.
So you drop into this library and I hope you know where you're supposed to be going.
This great big crystal clear, here's the lighting, X marks the spot.
So you go there, you click on the book, and a GUI element pops up, and this is where you actually place your word game story.
So, and the result of having a much tighter environment like that was, one, we got to spend a lot more time on the individual elements crafting it, but two, it was just a lot less distracting from the concepts we were trying to teach.
So in the post-mortem, like I said, we also talked a lot about the pipeline process.
So a few things that I have that we went through.
It's hard to get meaningful tracking metrics.
This is one thing that we struggle with.
What is success?
So if you do something like this, if you want to create a tutorial, try to think about is success if they get through the entirety of the content?
If you've got a lot of content, is success if they make it through the first lesson?
Is it if they publish the game?
Because one thing we found, as we kind of changed the metrics of what we thought success was, at one point we're like, oh my gosh, published games. That means we have done it. New games published based off the template. But with the second creator challenge, even though we had exponentially higher completion rates and people seemed to like it much better, we had much lower publishing rates.
And our theory for that is for the first Creator Challenge, Jurassic World, it got to the end and it was like, you win.
So they were like, okay, we're done, we publish now.
For our second Creator Challenge, we intentionally built it so they could learn concepts within a short amount of time, but then they're going to have to expand upon it and they weren't publishing it because they just had to keep working.
There's also things within it, like if you're working with an IP partner, make sure you're building in time to work with that IP partner, like sending approvals back and forth takes time, as well as we got requests for localized content.
One more thing, we got a lot of feedback that we just couldn't do anything about.
One thing that was really interesting is we kept getting complaints that six-year-olds couldn't reach all the keys, which I thought was super cute.
It was like, your six-year-olds are coding in Lua?
What?
There's nothing we can do to fix that.
Six-year-olds were not our intended audience, but I think it was really awesome that they were trying.
I did feel really bad when their parents were like, what can you do, what can we do?
It's like, wait a couple years.
We do actually have some great partners though that do some visual scripting.
So if you've got four takeaways from this.
Like, please remember, more content is not always better.
Really think about who your audience is, what they're gonna get out of it, and how long do you want them to spend on it.
Motivate your learners with theming and narrative and rewards, but don't just throw that at images.
Actually work that narrative and theming into the project as much as possible.
Allow for self-expression so that they can actually internalize the concepts and get some agency over it.
It'll be much more satisfying to them if they do.
And don't just keep ramping up the difficulty.
Really think about how you're placing those concepts, both for the terms of difficulty and for actual enjoyment level.
So that's my talk.
I think we have three minutes left, something like that.
So if anyone has any questions, I can take maybe one or two questions.
OK.
Does anyone have a question?
Hey, look up back there.
When you mentioned publishing the game, is that something they can share with friends like in the actual Roblox game?
Yeah, yeah.
So when we say publishing, you could publish privately or you can publish publicly to the entirety world and to Xbox, all of it, PS Max, PC Max, and all that.
OK.
So on the topic of self-expression, so I work with 8 to 12 year olds, I teach game design through Roblox and something that they love playing around with is the toolbox but the problem is that it does so much and it's so easy to just drag and drop in that like when I'm trying to teach them to build something, they just end up getting distracted and start throwing Lamborghinis into their world So what are your thoughts on that? Should we like maybe only allow toolbox at the end or like, yeah So there's a few things you can do.
You can X the toolbox out if you have an image that you're using, or before they start, make them exit out of it.
They are going to find it, however.
So depending on your classroom, you could just say that we're not using it, we're going to be using it later, or you have to complete X amount of stuff, and then you can add in what you'd like.
I also found having how to use the toolbox safely and wisely, like turning it into a lesson.
Like, OK, don't just throw in helicopters for the fun of it if you've got like a magical fairy land.
So teaching them how to effectively use the toolbox can help channel that.
Awesome.
And I have a second question if you don't mind.
So some of the things in Roblox, like for example, being a checkpoint is not entirely intuitive with the teams and the colors and whatnot.
So have you found any good ways of reinforcing concepts?
So like they do the tutorial, they see it was, but like kids, they forget quickly, so.
You have to just let them do it again and again.
So both kids and adults, we don't remember things the first time we do it.
And that's part of why you have to think of those progression curves.
Think about how can I do an object, or do something and then do it again and do it again.
Or maybe honestly, creating checkpoints isn't so much important as whatever the mechanic is behind it.
So you just have to decide, is that something like you want them to actually internalize it, or is it fine that they just did it and forgot?
Anyone else?
OK.
So thank you guys very, very much.
I appreciate it.
