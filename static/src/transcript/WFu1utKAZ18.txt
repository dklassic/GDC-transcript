I'm supposed to tell you to turn off your cell phones and things like that, so please do that.
And I'm supposed to also tell you to sort of like scoot in and make room for more people, but I see that's not really necessary, so good job.
Okay, I really appreciate you guys all being here.
This is actually my first time talking at GDC, so the fact that any of you are here at all really means something to me. Thanks.
I'm guessing there are a lot of artists and designers in the room.
That's kind of what I put on the schedule.
So I hope you are.
And if you're anything like the people I've worked with, or me for example, there are times when you're working on a project and it becomes difficult to sort of mesh a clear artistic vision with sort of a gameplay direction and combine them into something that works for everybody and makes sort of a harmonious whole for the game.
And there can be a little bit of a clash between artists and designers.
And one thing that we've done with our workflow to create the game Rayman Legends is build a tool and sort of a pipeline and a way of working that tries to sort of mitigate this issue a little bit and make the process smoother for everybody, but also make it really fast, intuitive, and flexible so that we can produce a lot and produce quality a lot faster than normal.
So, who am I? Why am I here talking to you? Why do you care?
I'm a game and level designer at Ubisoft Montpellier in southern France.
I've had the pleasure of working with them for about three years now.
I've been working exclusively on Rayman titles in the Ubiart framework, which is our tool that we use to build them.
So I've got quite a bit of experience using this tool pretty much exclusively for my career.
So I have a lot of experience that I'd like to share with you guys, and hopefully you'll take something interesting away from it.
What's the plan?
I'm going to start by just giving you a little bit of a rundown of our design process in a nutshell.
So you can sort of see why it's an interesting process, or maybe why it's a little bit different from the ones that you're familiar with.
Then of course, what's the tech?
Why do we use this tool? What have we built to use?
And how does it help us follow this process that we set for ourselves?
And then of course I'm going to talk about Rayman.
It's my only frame of reference.
So I'm going to talk about some useful systems and tools that we have, case studies from the actual production of the game, and a little bit of a post-mortem to give you some insight into things that we know went right and things that we know could have gone a little bit better.
And I'm going to end the presentation by giving you a little bit of information about a couple other games that are being made in the framework that aren't exactly Rayman.
So I'm going to let you guys in on a little secret, okay?
The secret to designing Rayman is actually quite similar to the secret of playing Rayman, which is rapid, iterative failure.
So basically what I mean by that is with our tool, with our process, we can design so quickly, we can try a bunch of different things so fast, that we can fail so much more often.
Sounds awesome, right?
You fail about 40 times a day, but then you get one win before you go home for the night.
And that's enough.
Because tomorrow you have something to work from.
And it's really great to be able to put all these ideas in front of somebody and prove concepts and disprove concepts really fast and know that you're moving in the right direction.
So, one of these core philosophies we have to work from is no idea is sacred.
I've seen a lot of people, I still see a lot of people do this, and I still do this myself sometimes that people hold on to an idea.
It's like, no, no, no, but trust me, this is the best thing.
We need this. It's gonna make or break the game.
And they just put like little bandages.
You know, it's like your arm just got cut off, but you're putting a band-aid on it.
It's not really gonna change much.
It's already messed up. It's not gonna happen.
So why are you trying to fix it?
And so sometimes it's just about learning when to let go of an idea and move on to something more promising.
And that's usually what happens for us, is we're able to create so many different little ideas and different executions of the same idea that we learn to let go a lot quicker and move on in the right direction without too much fuss.
I don't want to waste anybody's time, except for my own, because, I mean, I know why I'm wasting it.
I have an idea, I want to see if it works, so I'm okay spending a bit of extra time to prove or disprove it.
But I don't like the idea of briefing two programmers and an artist on an idea of mine, and then telling them, hey, invest two weeks of your time to make a prototype to prove or disprove whether or not this is a great idea.
Because then after two weeks it sucks, and it's all my fault, and I wasted their time when they could have been doing something more important.
So, I'm perfectly happy to spend a little bit of extra time doing a bit of art, doing a bit of scripting, and some sort of messy combination in our engine, to make something that works, or doesn't work, rather than actually having to go to someone that doesn't need to be involved yet.
that allows the programmers and the artists to actually be investigating things that we know are going to be in the game later.
Larger systems, things that are really important to investigate in the long term.
And only when I've proven my concept to a creative director or somebody else that's important, do we actually invest the time to make it.
We also tend to work together, but separately at the same time.
What we basically do is, because you know when you're making a level, right?
You build the level design layer, and then it's time for the artist to start doing his art pass.
And it's like, okay, give me the level, it's my turn to work on it.
Okay, fine.
But then you're kind of got some downtime, and every time you want to work on it, you have to sort of like pass it back and forth, unless you're working in a more structured way.
I mean, at least that's how I've done it in the past, which is a shame.
So what we do is we basically say, this is the level design layer, right?
This is where I'm building my level, all the gameplay elements in the game plane.
no bullshit, just the stuff that I need, right?
Then there's the art layer.
It's in the exact same level, but it's only the art elements that complement the visual aspect of what I've created.
And that's inside of the root file, of course.
So you have one scene, which is the entire level.
And then you have sub-scenes that are manipulable individually by different people.
And when they send their updates, and I can get the new data and open it, When I open the whole file, their part is updated, and I'm still working on my thing.
So nobody is slowed down in the process.
And that's extremely important.
Because that means that once I stumble upon that little gem, where it's like, ah, this is the idea that's working, let's move on from there, and everybody approves it, the artist can start working on that already, while I'm continuing to flesh it out and work on new things.
And also we need to remain flexible, because later when you're debugging, or when you're sort of re-evaluating work you've already done a while ago, You want to reserve the right to be able to adjust things without having to adjust all the artwork too.
On Rayman, it's especially important for us to design with the artist in mind.
We can't just make something that we think plays cool, oh, it looks a lot of fun, whatever.
No, but trust me, the inputs are great, and I'm teaching the player exactly what I need to, so it's going to be great.
And then the artist has to go in there and say, oh, but how am I supposed to decorate this?
It just doesn't work, it looks like crap, what are you doing?
It's like, yeah, but trust me, it's important for the game.
It's like they're not your mom, they don't just come in and clean up your mess because you're the designer and you're all powerful and you say what you want and it has to go.
And so we try to design with the artist in mind.
What they do is they create art kits.
I mean, when you've got art this beautiful, do you really want to mess it up?
Or do you want to complement it and make the whole game feel better?
So they give us an art kit, something like this for example.
This is a concept, but they can actually extract the artwork from it and make a kit out of it.
So in this case, it's a nice, you know, flat ground, some little hills with flowers on it, and you say, oh, I want to make a right angle, because I want to have a wall jump.
It just doesn't work. It looks ugly. It doesn't make any sense.
And so what we have to do is think, do we need this wall jump?
Or can I think of an interesting alternative, or a totally different idea altogether that complements the kit that I've been given?
And that's one of the cores of the production on the design side of Rayman Legends and Rayman Origins is that we're constantly thinking about the rules and the constraints that the artists have given us with the artwork they've created, and trying to use it to our advantage rather than seeing it as something that's holding us back.
This is an example of when I was doing pre-production for one of the worlds in the game.
It was supposed to be an underwater base.
And I didn't really know what the topology should be like.
And there wasn't any concept, which was rare for us.
Normally the artists do concepts and we build on top of those.
But here we didn't have the time.
And I had to investigate before they could actually draw something.
So I was thinking about what could I do to make interesting topology that would fit with the setting that I already knew.
But it had to be solid and artistic and so you can see that for example the larger pipes are sort of the borders and The smaller pipes are connected things don't feel unbalanced it all sort of it's a solid and on top of that I had an interesting gameplay layer. You know it's actually a fun level to play So then I passed that to the concept artist and he paints over it And then of course, it looks good.
I mean, it's a rough concept, but it says, hey, that layout actually works. Not bad.
So then we go through the process of approving things, and one thing leads to another.
The artists make the final assets.
We integrate it into the level.
The level design didn't change.
I defined the topology.
And at the same time, the artist had what they needed to be able to make something beautiful.
But it's because I designed with the artist in mind from the beginning.
So how is this magical process done?
It's not necessarily the easiest thing in the world to say we make five million prototypes every week, throw away four million of them, we have one little gem and everyone's happy.
Not everybody has that luxury.
Of course we have a very talented team.
That's important. We work well together.
But also we have an interesting piece of technology that we developed for Rayman Origins and have been constantly updating alongside the development of future titles.
So the magic tech is the Ubiart framework.
I'm going to show you a little video just to get you into the mood, and then we'll continue from there, and I'll give you some more details on why it's an interesting tool for me as a designer.
kind of pretty right? Not bad. So as it said, the tool was designed for artists.
So it's, it's a, it was a 2D game engine. It always was. It's what it was designed for.
It has full HD, 60 frames per second, all that technical nonsense. But it's impressive.
I mean, our games are very fast and fluid. We can have a lot of detailed textures in there. We have a lot of layers. And it still runs very, very smoothly. And that was one of the key selling points for us when building this tech. It needed to run well.
but it's artist-friendly at its core.
I mean, what an artist has to do to get an asset from concept into the engine in the playable game, all he has to do is paint a concept.
cut a piece out, like a tree or a rock or something that he likes in the scenery, save it out with an alpha channel, drag and drop and it's in the engine.
And they can just scale, move it around, whatever, change the colors, change the distance in the Z, everything like that.
But it's that easy.
There are other, more complicated methods of bringing art into the engine that I'm going to show you, that help me as a designer.
But it doesn't change the fact that it's extremely easy for artists and designers to create content in this engine because it was built with the artist in mind.
And it's fast, intuitive, and flexible in everything that it does.
So, just a little bit of information on the Rayman series, because that's where all the examples are going to be coming from.
Like I said, I got the chance to work on Origins and Legends.
And back in 2011, when we released Origins, we had four-player co-op, a large number of levels, HD 2D graphics, 60 frames per second, all that stuff I said, right?
And of course when you're making a sequel, you don't want to just make a direct sequel.
You want to actually make it meaningful, make it something that people want to buy.
So we wanted to add new features, make the engine more robust.
This is just a small list. We have a lot of new additions that we made during the course of transitioning from Origins to Legends.
But some big changes we made were online functionality that we didn't have before.
a lighting system, touchscreen gameplay, 3D bosses.
We didn't have support for any 3D objects in the environment before, and then we added it for Rayman Legends, and the game still runs the same.
So we wanted to make sure that we're constantly updating our technology to give us the capability to do more than we ever thought that we could with the tool.
And it also gives us a larger range of things that we can actually do to surprise the player.
So this is sort of like the most impressive part of the talk.
I'm going to be showing quite a few videos of the tools that we use and explaining sort of why they're interesting from the perspective of a designer.
I think they're kind of going to speak for themselves, but I'll talk anyway because I like to do it.
So here's the biggest one.
It's our gameplay geometry.
And for some reason it's called freezes.
I think it's a French thing, but I don't really know.
And basically, you just double-click and you start dragging vertices around.
It's like manipulating something in a 3D modeling package on a plane, but what's impressive is that it's graphically complete.
All the textures are already there.
As you move the vertices around, the textures update depending on the angle that the vertex is at, for example.
So when you have a vertical face, it changes to a cliffside.
If it's horizontal, then you're going to get the grass.
And of course I can check and see where Rayman's been for the past few steps, which allows me to quickly add new elements and improve my level or continue designing the level I'm working on.
So that thing was a little bit too high, now I brought it down and it feels better.
And I can move on to the next step, so I can bring a platform in.
And just this ease of use is really the key to making so many prototypes all day, every day, and being okay with throwing them away.
Because if it takes you five minutes to make an entire screen sequence, who cares if you have to throw it away?
That's business as usual.
But if you had to draw it out on paper, and then convince somebody to help you build something so you can do your sequence, and then it takes you three weeks, and then, oh, it doesn't work?
you're not going to be happy throwing that away exactly.
I can actually pause while I'm playing too.
And I can place things where they need to be.
So I can sort of have real great precision on where my enemies are going to be placed, where my platforms are.
And then I just press P and I'm back to the game.
So the most important thing about all of this is that the game is live while you're manipulating anything in the environment.
It's really, really important for the speed of iteration, for testing your sequences, for knowing that what you're doing is actually working or not.
and everything that we have in this tool just helps to push that feeling of flexibility, creativity, and allowing someone to express themselves with minimal hassle.
And also what's interesting about this visually complete geometry is that just in the level design layer, you already have a visually representative prototype of what the final thing might look like.
You know that it's cliffs and grass, and you know when something doesn't look right.
It's easy for us to fall into the trap of just saying, I'm going to use white box, make something that I think could look like a space station, and then the artist looks at it and says, how am I supposed to make a space station out of this?
This doesn't make any sense.
It's too organic, it's too this, it's too that.
And what this does is they say, these are the things that you can use, this is how they work, work within those constraints.
And it changes the way that we have to think about our levels, for the better.
So, we have other types of freezes though.
We have pipe freezes, which are simpler to manipulate because you only need about two or three vertices and everything is already built around it.
The collision, the shape, the way that everything looks.
So it's extremely fast to just build a pipe network, connect things to one another.
What you're seeing here actually, since we don't have perspective in the game, we obviously have to fake it somehow to make the game look nice.
So we have the ability to add two extremity textures on the same area, basically, of the freeze, and we can switch between the two at any time.
So we just say, OK, Rayman needs to stand on top of this, and perspective-wise, this looks wrong.
So you just right-click, switch texture, and then it looks the way it's supposed to.
It's super fast.
We also have this thing called Metaphreezes.
This is something that we actually designed during the production of Rayman Legends, so it was an addition later, because we realized, yeah, everything's live, even the enemy's dying.
we realized that we were sort of working backwards sometimes.
We were actually having three or four freezes we had to manipulate at the same time every time.
And that's not really something you want to do.
So what we did is we combined multiple freezes, the background, the playground, the foreground of this platform, into one manipulable object.
What that does is it preserves the flexibility of the tiling of each of the individual freezes without causing unnecessary stretching or compromising the visual quality, and at the same time, preserving the flexibility of manipulation, which is extremely important for us.
These ones are really cool.
They look a bit like pipe freezes, but they're nothing like pipe freezes.
They're Bezier, so they're spline controlled.
And the collision is dynamically generated based on the spline that you have.
It's updated in real time, obviously, and manipulation is extremely easy.
You can see it's also visually complete, like all the other freezes.
It tiles properly, stretches, updates.
You're playing it, it's live, just like everything else.
And there are a lot of extra parameters on top of these things that make them even more interesting for prototyping.
One thing you can also see here is that we use the same system of manipulation for our collectibles now.
In Rayman Origins, we actually placed every single loom, the little collectible guys, we used to place every single one by hand.
And now all we have to do is put a spline to say they start here, they end there, you trigger it, and they just sort of fly to the end position.
So it just makes the whole level design process that little bit less tedious and that makes it fine if I throw it away.
It didn't take me 10 minutes just to place 500 stupid looms.
It took me two seconds, so I can delete them.
Who cares?
We also have things like the ability to make them grow and retract, just with a simple trigger.
And now, of course, if you're a designer, you can imagine all kinds of interesting things you can do with this.
And that's not all.
But it's just one of the many little features that were added that just brings so much more to the table as a designer to make creative levels.
And when it's integrated into a visually complete package, there's no reason not to use it.
So here's just a little example of a combination of some traditional freezes, some Bezier freezes, some animation.
and a coin.
And that's about it.
It's just a combination of a couple simple systems.
To build this, it wouldn't take more than five minutes for us.
It's really, really fast.
And I'm talking about visually speaking, too.
The background, foreground, who cares?
But the stuff that you're playing on, it looks like that when you build it.
There's no extra work necessary.
Of course, every level designer needs white box because there are some prototypes that you just need the freedom to do what you want exactly the way that you want.
It's cool to have these visually complete freezes, but sometimes we don't know where we're going with the world or where the specific sequence fits into the grand scheme of the game.
As you can see, it's still flexible, like everything else.
It's very fast to work with this kind of stuff.
But what's really powerful for me personally about these white box freezes is what I can do with them when it comes to prototyping.
Because I can combine them with other elements and I can make my own gameplay.
Basically, it's just a mixture of a couple different freezes, a couple movement tweens, and a trigger.
And what I've basically simulated is a button that gets pressed and it triggers a door to open.
And that's just the speed at which I can make a gameplay element that would normally take an artist and some programmers some time to develop before it can prove that it works.
I've proven that it worked in about half a day of work.
And I can easily manipulate it too, if the scale is wrong, if the shape is a bit wrong, or the color.
One thing I like to do too, is white box sketching.
I'm sorry.
I don't know what happened.
I'm going to continue while this boots up.
I'm really, really sorry.
I don't know why.
One thing I like to do is I really take this sort of white box geometry and I sketch what it is that I want it to look like.
Because what I need to do is I have to convince the artist and everybody of what my vision is, basically.
What I could do is I could simply make this object a red circle and say it's a dangerous object.
Go.
And the artist, okay, well, what do you want for this red circle and all that kind of stuff?
And they have to figure it out.
But for me, I think it's important that it has spikes.
It needs to be clear why it's dangerous for the player.
Because science and feedback are important, right?
And so the ability for me to actually sketch that out makes it a lot more powerful for me to be able to pitch that idea to somebody.
And what's interesting is when you look at the final art asset, basically, it looks relatively similar to what I was able to actually produce with the white box.
So it makes sense.
And actually this is one of the things that I do on a daily basis.
It's one of the things that is the strongest thing for me as a level designer in this engine is to be able to sketch things out like this so rapidly.
What you could say is, you can just draw it out in Photoshop and drag and drop it into the engine.
Okay, why not? That's fine.
That's what it's built for, right?
But for someone like me, I'm 100% used to actually working in the engine.
These freezes, they're like, it's my Maya.
You know, I don't need to leave the engine to do things.
And the fact that I can actually do it so fast like this, it just makes my life that much easier.
And it makes it more flexible for me too.
I don't actually have to open another package to make a small change, resave, reload.
No.
I just grab a vertex, drag it up.
Does it work?
Cool.
Does it not work?
Okay.
Move it around again.
I'm very sorry about this.
I can juggle.
But basically, I mean, that's what it comes down to, right?
Is everything about this tool is about empowering us, as designers and artists, to do our job that much faster than we normally could.
And that's why all the systems are built that way.
And honestly, working in it is a dream.
I worked in other editors before, in school, for fun, whatever.
But, to be fair, it just doesn't compare at all to the power that we have with UBART framework.
I'm very sorry.
I hope so.
On my first time too, what are the chances?
I think we're back for now.
Cross your fingers.
If not, I'll just juggle.
So what I was talking about, and then it turns into something like that when the artist gets their hands on it.
It's great.
It's awesome.
And it's cool that I was able to sort of inspire them in a certain direction, even though I'm not an artist myself.
We have Lua scripting as well.
So there's a way that we can actually add a little bit more functionality to our visual prototypes.
It's not just all artsy-fartsy.
But it's simple scripting.
It's nothing too complicated.
I picked this up very quickly, and I'm not really a programmer.
So what we have is we have simple chunks of behavior, like a shake, a movement, ease in, ease out, things like that.
And you can just sort of stick one in front of the other, it's a series of events.
And that's how we can do simple things like moving an object down the screen, making a crusher that shakes and comes back.
We can pretty much prototype everything we need to using these tweens, these movement tweens in Lua scripting, plus all the tools that I've shown you already in the editor.
One thing we also like to do on this side of things is separate templates and instances.
So basically, for all of our gameplay elements, we have templates which have a set series of behavior that is sort of like non-negotiable.
It has to be that way.
But there's always a couple of parameters that you can mess with a bit to do something different with it.
And those are in the instance file.
So that enables the designer to actually manipulate certain things in a way that fits his current situation without the game designer pulling his hair out that you're changing everything about the enemy, basically.
We have a sequence editor too.
This is sort of our cut scene tool in the UBR framework.
Well, what's really interesting is sometimes when you go exploring in areas of an engine that you're not supposed to touch, you find out that it actually has something to bring to your job, too.
And during Rayman Origins, I was in charge of building a boss inside of the stomach of a dragon.
Lucky for me, there were no big animated characters that needed to be integrated with complex behavioral patterns and things like that.
So I could use what I had at my disposal as a level designer to build an interesting boss sequence.
So I took the sequence editor, I took things like these fire patches and other interesting gameplay elements, and I made a series of events.
So, trigger flame, trigger flame, trigger the weak point, hit the weak point, if you don't, restart, if you do, go to the next sequence.
And I was able to prototype 10, 20 different versions of this boss by myself, without a programmer, and in the end, it's a 100% level design boss.
Which is something interesting. I wouldn't imagine I'd be able to do that, but this tool that wasn't meant for it was powerful enough and integrated well into the engine and the other systems that allowed me to do it.
We also have a very interesting tool that I will not be able to explain to you.
It's our animation tool in the engine.
It's really, really cool.
It allows us to hybridize hand-animated keyframes with bone animation.
And actually, there was a talk last year by two of my colleagues where they explain everything there is to know about GenAnim.
So since you all have access to the vault, I suggest you watch it when you get back to your studios.
It's a very interesting talk, and it's definitely a cool tool worth checking out, especially if you're on the more artsy side of things.
But I'm going to push through in the spirit of level design with some case studies in the production of Rayman Legends that greatly benefited from the workflow that I'm talking about, basically, because of the tools we have in the engine.
So one of the things that I personally was tasked to do during the production was investigate stealth in Rayman.
Rayman's a happy, flowy, platformy game.
It's not usually something you want to slow down in.
But we wanted you to feel a bit like a spy and avoid detection.
but we had to preserve the flow.
Because flow for us in Rayman is paramount.
It's something that we need to have all the time.
So how do you impose that on people?
We played around with systems, we tested a lot, we threw a lot away, and we finally got to the thing that felt best.
What I'm gonna show you now is a couple little prototype videos of the early shadow system and some interesting directions I took with developing new features.
So, basically, when I was first working with these shadows, I realized that when there's something that's collidable, like ground, it would cast a shadow.
And when there was no ground, it wouldn't cast a shadow.
That meant that all of my situations had sort of like an empty void that you could fall into.
And that doesn't really challenge the shadow or light mechanic.
That just challenges avoiding falling through a pit.
So how am I going to use that in an interesting way to reinforce the mechanic?
And so I just took a template freeze, I made it semi-transparent in blue, and I didn't apply the shadow collision to it.
And that's it.
And all of a sudden now, I invented a new type of freeze that we had to add to the kit that was integral to making this shadow gameplay work in the final world.
But before I could convince them, I had to convince them.
So I had to make more prototypes that sort of stress tested or proved that it's really an interesting addition to the art kit and the tool set as a level designer.
So I had to make a number of different prototypes that showed the use of the glass in different ways.
And eventually it got approved.
So then, there are many different uses in the final game.
This is just one of them.
It's an interesting combination of the basic sentry plus the glass.
Another interesting example is these underwater snakes.
They are not normally meant to be used this way.
They didn't have the shadow functionality to begin with.
They were meant for something else.
But we thought, well if they're already there, why don't we just give them the shadow collision property, and that's it.
So I just opened the script, I changed the material definition, and suddenly it was casting shadows, and it was a really interesting thing to use for the shadow gameplay.
Easy peasy.
And here it's just a simple matter of putting a trigger that pauses and unpauses the light.
And that was it.
And it worked. It really worked. It was very fast and it made it into the final game.
One thing that was interesting for me though, is I made sure to make the flicker when I was doing this.
Because you need to have clear signs and feedback to tell the player, okay, the light's going to turn on, the light's going to turn off.
And it was important even in the prototype to prove that.
So here, we actually had to work on a little thing called the Wii U for a while.
And we had to make some prototypes for it.
So, we had these elements you could pick up using the Wii U tablet.
You could drag them around.
And we had this shadow casting thing.
So I thought, why not parent one to the other and see what happens.
And this happened.
And it worked.
So we ended up making a different version of the light casting thing.
We integrated the components of being able to carry it on the screen.
And we had a new gameplay element to use in different situations.
And it was sort of just like a happy experiment.
A happy accident, actually.
I just, I thought, why can't I combine these two things?
So I tried, and they worked.
And that's really the biggest thing in this engine for me, I think.
Is it's just like, taking two things that don't really belong together, and sort of thinking like, well why not?
They could, right?
And this is another example of that.
We have this thing in the game, digging, where basically on the touch screen, you can touch these cakes and dig tunnels for your friends.
We wanted to reuse this mechanic for the rest of the world to make it consistent.
But not every level needed to have the touch screen gameplay.
We didn't want to force that on the player for every level.
So what we tried to do was separate the functionality and combine it with other things to give the same feeling, but in a different way.
So I used the parenting system, of course, that we have.
We had a separate actor for the digging, and allowed us to have flexibility in prototyping, because we just said.
I think that this thing should be able to dig through cakes.
So you parent the object to it and you see what happens.
Okay, that doesn't work.
You try something else, you move on.
If something starts to work, okay, cool.
You move on from there and do a number of different prototypes.
And eventually, you integrate the component into the gameplay element.
So, every snake now has this digging component, and when you put it in these sort of digging cakes, they start to dig tunnels.
So here, for example, you've got this lovely dancing skeleton.
And this is how the digging works, basically, with the touchscreen.
But what I'm going to grab over here is the actor that's separate.
And you can see it has the exact same functionality, but it's not attached to the touchscreen gameplay.
So what I'm going to do is use our parenting system and you can actually see all the bones in the character and you can parent anything to any of the bones.
So I could parent something to the hand of the guy and it'll be attached to his hand and when he moves it up and down, it'll move with him.
It's really, really strangely powerful.
And now you can see that as he walks around, he's destroying the cake.
And that's what I did with the snakes.
The snakes were more interesting than this guy, so I stuck with the snakes.
But there are some other interesting cases too.
For example, there's this really big luchador.
And one thing that's interesting about this case is the original version of this there was this flat ground, he jumped, he landed and he sat there and you had to kill him.
But because of his animation and the way that he was it just felt a bit weird.
So what they did was the level designer just dropped some digging at the bottom and put the digging component into the guy.
All of a sudden he jumps off, falls into the abyss, it solves one problem and it creates an extra danger behind the player which pushes him forward.
Problem solved.
And it's just a matter of replacing one little functionality for another and seeing what happens.
And here's the snakes I was talking about.
It's really interesting because you can make all kinds of interesting tunnels, configurations, with different snakes digging through.
And visually it's really interesting too. It's very different from something that you would normally get with a player controlling it.
Usually they'll just wipe the screen clean and done.
But here you've actually got a nice, tailored level design that's created and generated by these enemies in the game.
This is an example that I'm particularly proud of, because I did it.
It was basically just, we were between projects, after Rayman Origins was finished, and we were playing around with some adversarial gameplay.
You know, it's a co-op game, but we like to smack each other.
Can we make that a thing?
We wanted slight randomness, because otherwise one guy dominates and everybody feels bad, and we don't want that.
We're a family game.
Everyone should feel good.
And it needed to be a convincing prototype.
Because if it's not a convincing prototype, you're not convincing anyone, are you?
So, ultimately, this is what it is.
It's just a soccer ball, and you can kick it around.
It's fun in four players.
People can smack each other.
It's two versus two, three versus one, all that kind of good stuff.
And what it basically started was, was I just tossed a projectile from an enemy in Rayman Origins.
He threw boulders, and they bounced once or twice.
The ironic thing is that.
after they bounced once or twice, they died.
It exploded.
So I had one shot to get it into a goal, and otherwise I had to restart the map.
So it wasn't really easy to prototype that one, but it proved a point.
It felt good to try to kick a ball into a goal.
So then I made a trigger that detected the ball exclusively, and when I triggered something, for example, I had numbers.
And I would just say, when the ball enters, shift the numbers up.
So it says 1, now it's 2, now it's 3.
It was like a really rudimentary, messy prototype.
But on the outside when you're playing it, you don't feel it.
You don't know that it's a messy prototype.
It feels like what it's supposed to be.
So then we developed it.
That was the final version.
This is the first version.
This is actually something internal. We did this for our Rayman Origins release party, actually.
In the final version, you've got some nice little enemies dancing in the foreground when you kick the ball in.
For this version, we have our lovely creative director's face on it.
but it was good fun. And actually, what's interesting to note here, we had moving goals, multiball at the top, bouncing surfaces for the floor, and we removed all of them for the final version. It was fun, we could have done more, but we felt that the simple version was clear enough and we had more things to focus on. But it was a lot of fun. And the reason that we kept it was because we made the prototype, we brought it to our Rayman Origins release party.
and everybody started playing it.
And they couldn't stop for the entire evening.
Can you imagine, in the evening you're supposed to be drinking and celebrating that you're done with that freaking game?
You don't have to look at it anymore.
Yeah, party hardy.
And everyone wants to play the prototype?
It just doesn't make any sense.
But it told us something.
It knew that it was actually quite special.
So we pushed it forward, and it made it into the final game.
So, through all of this, I mean, what went right?
Obviously a lot went right, right?
Otherwise I wouldn't be here talking about it like this.
Or I'm just hopelessly optimistic.
Well, there's the rapid iterative failure thing.
We did fail a lot.
We failed hard sometimes, less hard other times.
But we failed consistently, and that was by design.
We knew that the better off we were, we were better off by building a lot of things, throwing them away, building more, throwing them away, and then putting all of our eggs into one basket and realizing when it was too late that it wasn't working.
our actors, our templates, the freeze system, which I'm sure impressed a number of you.
All of these different systems, they're obviously going right, because they allow us to do our job so fast, it's unimaginable, until you try it.
And we're a small team, for ease of communication.
Because with a tool like this as well, you don't need so many people.
You know, you build systems.
It's like, it's procedural, which is what everyone's doing these days.
It's kind of a hot topic.
It is relatively procedural, the way that it's set up.
These freezes and everything.
It saves a lot of people a lot of time.
And also having a small team is great, because you can actually go up to somebody who's right next to your programmer and smack him for something or tell him this or that.
There's not this sort of like hierarchy or you have to report to his lead and this and that.
We're a small team, we work together in little strike teams sometimes, other times we're in our big level design group, programming group, but we're all in the same little villa in France.
It doesn't really make a difference when I have to go upstairs to the water cooler and talk to somebody or just down the hall.
And of course there's the simplicity of workflow and the flexible systems, which I've hopefully demonstrated to you guys already, but they're there and they work very, very well.
Of course, everyone makes mistakes.
When you say that failure is sort of by design in your workflow, you're going to fail a lot, but we didn't really do design documentation.
You can imagine that when you're working extremely quickly, when do you find the time to write things down?
And when you do write things down, aren't they obsolete?
that's pretty much the way that it went for us.
But the bad part about this is the fact that when someone new joins a team, they don't really have a resource to go to.
They can't just say, like, oh, read the Bible.
And then there you go, you go through it, and you figure out everything, and then you start working.
We have a help menu in the editor, which is good.
It's a good base.
But for example, the design of the game.
No, no, we're not ready yet.
We're still experimenting.
We have two months left.
Well, we're still experimenting.
We'll see.
Sometimes we had a lack of tools for specific tasks.
I mean, we have some great systems in there, but there are some other processes that are a little bit more tedious, less flexible, basically.
And sometimes we could have communicated better on what we needed, so that way we could actually work more efficiently.
And there was a lack of communication of engine workflow issues.
Because the thing is, when you're used to working so fast, and trying to pump things out very quickly, when you realize that you have to do a very tedious workaround for something, just to get it to work, you take the extra 10 seconds to do the workaround, rather than telling somebody, the parenting system isn't working, you have to parent three times instead of one.
But it's like, oh, whatever, I'm sure they know, and I work with it, and then like six months later, I hope someone knows.
but you keep working with it instead of just going.
And if I just went to the guy and told him it's not working, it would be fixed in the next build.
But it's just this mentality that we get into of, just deal with it.
Just push forward.
You're going to fail anyway, so you might as well just keep going.
And when you hit something that's good, then you improve it.
But the engine is a different story.
And sometimes we have to realize that.
And there, of course, was sometimes a lack of communication of new features and additions.
Because we worked so informally sometimes, going straight to a programmer and asking for a new feature, that meant that there were times that a new feature was created, and one level designer knew about it, and he didn't tell the rest of us.
And we lost a lot of time.
And then some guy comes up to me a year and a half later, and says that we had the thing all that time, and I've been doing it the wrong way.
People get annoyed.
And it's definitely something we need to work on.
But it's cool when you get new features.
Just tell people when they come out at the beginning.
So it's not just Rayman in the UBR framework.
It started with Rayman, but it's sort of evolved since then.
We actually do mobile games in UBR as well.
Rayman Fiesta Run, Rayman Jungle Run.
Actually, can I have a show of hands who's played one of the new Rayman games, from Origins to Legends to Mobile?
Not bad.
Good job, guys.
Thanks for helping me survive and eat every day.
So we do mobile, but we're also exper- well, not me personally, but Ubisoft is experimenting with other genres in UbiArt, of course.
So in Montreal, they're working on a Japanese RPG, Child of Light, using the same framework.
It's still a 2D game, it's still using a lot of the similar systems, but they're adding some really cool features that we didn't necessarily add for our projects, but it's cool for us to see how other teams adapt and impact the development of the engine.
And of course, we also have another one, Valiant Hearts, which is a World War I adventure game that's being developed actually by the guys who did Rayman Legends.
I'm not on the team personally, I have other things to do, but a lot of my friends are working on it.
You should buy it, it's going to be great.
And it's a really cool game, it's different to have something that's a bit slower paced, less action-y, more emotional and everything, and having an adventure game in an engine that was built originally for a platformer.
But it's working, it's an interesting take on the genre, and we're trying to push forward and see what we can do with the engine from there.
I actually write sometimes for the Ubisoft Ubi blog.
I've written a couple columns about working in the engine, working on the games, and working with the artists, and trying not to fight with them, and all that kind of stuff.
And they could be quite interesting for you to check in, especially if you found this presentation interesting, despite the blackout.
You might want to check this out and have some further reading.
Just to give me some hits anyway, you know?
So...
If I'm going to give you a couple things to take away, apart from the fact that have a good engine that empowers your artists and designers, which is a given, fail often.
Don't be scared of it.
You know, plan for it.
Or don't plan.
Why do we need to plan failure?
Let's just build stuff and see what happens.
Try to make the most efficient, fast process that you can for getting to that sort of proof of concept stage.
Get there, see if it's working, or move on.
But that's it.
Just push to fail often and you'll eventually stumble on the right thing.
embrace artistic constraints.
A lot of people think, oh, constraints, oh, they're so constraining.
But they're not.
They really push you to be more creative and work outside of your comfort zone.
There have been so many times that I'm given a new art kit in a new world and I'm like, what am I supposed to do with this?
Come on, guys.
And then I think, oh no, but actually I can do something I've never done before.
And that's the point.
If they just gave us the same kit, re-skinned every time, we'd be making the same levels every time, we wouldn't move anywhere.
And now we have worlds that are very unique, different gameplay elements, different direction.
And it's because of these artistic constraints that we sort of have to live with and embrace.
And my personal motto is, waste your own time, not someone else's.
I'm very happy to spend a lot of time making my prototypes, trying to prove people that it's going to work.
And I don't mind if I have to throw it away, because I know I'm not impacting the rest of the production.
I can make up for my own lost time, but I don't want to feel guilty for somebody else's.
And so you have to find a way to really clearly express yourself and your ideas so that everybody understands and knows where you want to go with it, and we can make it together.
So that's it. Check us out at the UB Lounge upstairs. We're doing demos of the engine.
And I hope you appreciated it, and thanks for being here.
As far as I know, I think there's some time for questions if anyone has it.
You have to step up to the mic, and otherwise I'll be in the wrap-up room after the question time.
Can you talk about the process for choosing the concepts and art kits for the levels, and who's involved in those discussions?
Yeah, so the people that choose the art kits that we use, basically the artists do the concepts, of course, and there's always a higher level artist or creative person that oversees it and stuff like that.
And they just sort of decide, okay, this one's interesting, not clean enough. They have to be able to visualize the gameplay as well. If they can't really see how this concept is going to translate to the level or be clear enough, then they go back to the drawing board and...
you know, revamp it a little bit or throw it away and try something new.
There are worlds we didn't include in the game because they didn't work as well as others and we didn't have the time to make them work.
But so basically it just comes down to people working hard and somebody above them telling them it's good enough or it's not.
Business as usual, you know.
Sure.
Hey.
So you talked a lot about the art impacting the design and I was wondering if there are any instances where the art impacted things on the programming side.
Uh, yeah, I mean...
I'm guessing there's a lot of times when, especially in a game like this that's cartoony, that the animations sort of guide the way that you program certain functionality, right?
For example, the character controls of Rayman and the other main characters of the game, they're very, very based on the animations.
The cartoony, sort of ease in, ease out, floppy animations.
That's why it feels that way.
But it works because it's sort of linked to the animation that was originally given to the programmer to work with.
So yes, of course, in cases like that, it comes down to...
Taking the artwork understanding the intention of it and programming the functionality to make sure it feels the way it's supposed to Of course, so anything like new features that were added Well, of course, I mean, the artists, they did tests for the lighting system, the new 2D lighting system, basically.
They did them in things like 3ds Max and Maya, just to sort of get a feel for what kind of system they wanted.
And then they told the programmers, this is what we want, this is how we want it, it needs to work this way.
And they said, okay, boss, and they did it.
And it turned out cool in the end.
But it's because they had a clear direction, they knew what they wanted, and they had to convey it to the programmers.
Okay, thanks.
Yep.
Hi, I was really curious, how did you get your job at Ubisoft?
Uh... magic.
You know a guy who does that?
No, I was a student three years ago, and I made a portfolio for level design because I wanted to.
One of my teachers used to work at Ubisoft, and he was like, hey, it looks pretty good.
And so he sort of like sent it under the table.
I was actually busy an entire weekend putting together stacks of applications for other companies, like, I'm gonna do this.
And then on Monday it's like, ready to send.
want to work at Ubisoft?
Well, whatever.
So I went and worked at Ubisoft.
And then I stuck around, and I have a contract now.
So I've been there for three years.
But it was really that.
But I guess they like my portfolio or something.
Great work.
Great work.
I think it's you now.
Hi.
My question concerns, I know you talked a lot about just creating levels just by doing and prototyping and testing and failing.
Whenever you got those gem moments and you had success.
Because the iteration process is so fast and easy and awesome, how did you know when to just stop?
Did you ever get sucked into just being in that level and enjoying it?
And how would you move past that to the next one?
How did you know to move on?
Well, a game is never done.
Everyone knows that.
so it can be hard sometimes to say done and move on. There have been times that I actually cut out an entire portion of my level after it's been approved, after it's in beta, rebuild it, sort of like a ninja thing.
And, um, somebody notices and they ask, what the hell, dude?
And I'm like, no, trust me, it's better.
And I'll make sure it's clean, don't worry, and it usually is, but, um...
Honestly, it's just a matter of saying, like, did I fulfill what I needed to?
They want a boss level with three arenas and creative ideas.
I built all three of them.
I could iterate on top of it more and all this kind of stuff, but it's like, scope-wise, it's there.
Functionality-wise, it's there.
It's cool.
People appreciate it.
It works in the playtest.
Let's leave it.
Unless I get tired and I fix it later.
Hello.
This might be a big question for here, but if there's some information on the blog or could be, I'd be very interested.
So basically, you talk about these freezes for creating, for example, ground or pipes or similar.
And I assume creating a completely new type of freeze requires some programming.
But I'm curious about the process.
If you have a freeze already, and you want to adapt it to a new environment with completely new art, what are the tools for doing that?
It's a good question. As far as I know, what it comes down to is, it's like an atlas, and you can see all of the pieces, like the top, the side, and all that stuff.
Things that tile. And it's a matter of making a new atlas, and then using a tool to sort of specify, this is the top, this is the side, this is the fill, and things like that.
the technical, actually at the UbiLounge there's a technical artist who uses UbiArt at the moment and he can actually open everything and show you all those tools and how it works so you can get some real details. Because I'm just a level designer. But it's more or less like that.
You I think? Yeah I had a question about Rayman Legends, about the musical levels.
So you mentioned working with the artists to create a look and feel.
Can you tell me, was there a different process making musical levels considering their very sync to the beats?
That's an interesting one. Actually it was just sort of like a happy accident that we started making musical levels.
We were just making some challenges and we made a video of it to show internally and put some really cool rock music synchronized with the action in the video.
And after they showed that it was kind of like...
Can we play with the music?
I mean, is this real or is this just a video?
And it's like, well, no, but maybe we can make it.
And so then they started building a system for synchronizing the gameplay to the music.
The composer, Christophe Héral, he made the original version of the song, and then the level designer built a level based on it, and then it was a process of back and forth between the two of them to make the final product.
And then, of course, the animators came in and did all the fun animations, background art, things like that.
You.
How much do you think the editor evolved during this frame?
I mean, it sounds like you create the levels, the graphics guy creates the graphics, but the editor just was there somehow.
How many new features came up, or had to be done by the programmers?
Lots changed. I mean, if you look at the, for example, just the touchscreen functionality alone, or the three-dimensional entities in the game, they just weren't there. And those are a big chunk of what makes Rayman Legends different from Rayman Origins, right?
We also had a lighting system that wasn't there at all. It changes everything about the way the artists decorate their levels.
If you actually press a button to turn off the lights, the levels look really bad.
like in more Rayman Origins we worked with it and we made the levels look like they were maybe lit, but it was a different style. But here, you turn it off, and so it's important that it was developed properly. And so there are big, big features like that that really impacted the way that we started to produce things. And there were just so many countless little features, I can't even remember, because I'm just used to the current version. But it was a very different tool when we did Rayman Origins, and it's improved a lot since.
You mentioned working on a small team. How small was your team?
I think at its peak, it was about maybe a little bit over 100 people. I'm not sure.
But usually we were about 60, 70.
Then we ramp up a little bit more near the end to get things done.
Not that small.
Yep. Anyone else?
How do the decisions get made about what levels are selected and what aren't?
Lead level designer, creative director.
Okay.
I mean, pretty much.
I mean, are there any things that you thought were particularly a good level that...
they weren't into and you had to make your case for more or?
Of course.
Yeah.
But I mean that's what it comes down to, right?
It's about convincing people.
That's what I've been talking about with the prototyping process and everything.
It needs to be clear to convince somebody that this is a good idea.
And I've seen a lot of people that go in with a half-baked proposal.
They say, oh look, it's a red square on the floor.
It's a button.
It's like, oh, okay.
I guess, I trust you." And they jump and it doesn't do anything except open a door and stuff and it doesn't make sense.
But when you make it look like what it's supposed to be, feel like what it's supposed to be, and then you show it in a multitude of different situations, then it's very clear for them whether or not they just hate the idea or they can't deny that it's actually quite cool.
So when it comes to reviewing levels and things like that, it's just that the level design lead comes, sits down with you, and says, this is good, this is not, try to go more in this direction.
And if you really disagree, you can take one more chance to try to prove it to him.
But honestly, that's the whole part about failing and moving on.
Nothing is sacred. Just trash it and move on.
You can make something better in five minutes anyway.
Thank you.
I'm a little curious about the development of the engine itself, or the framework.
what led up to it, and how long was it in development before it was used?
And when you add key features and stuff, how long does that typically take?
Well, the engine was originally created by the creative director, Michel Ancel, and a small team of, I believe, five senior programmers.
The initial version, of course.
I mean, then we ramped up to a few more engineers as the process went on.
We were building the game itself.
But it was a small team developing the tools for that.
And then the team started to ramp up maybe a year later, I believe.
And we started to actually go into production on Rayman Origins.
And it's just been in constant update status ever since.
But when it came to something like the lighting engine, the new update for the lighting system, it took quite a while.
Like, I believe, if I remember correctly, maybe a month or two to wait to get that thing actually working.
But it's a heavier system, so it takes more time.
But some engine improvements, they don't take any time at all.
They take like maybe one, two, three days tops, depending on what it is.
Thank you.
Yep.
I think I can't take any more because they held up a yellow sign or something.
So thanks for being here.
I really appreciate it, guys.
