So guys, thanks for coming out. I want to thank Tim and Mike for putting this together.
This is a lot of people. This is really great. So I know this was asked earlier, you know, how many animators we have. How many game developer animators do we have in the room today? And then students. And then, like, non-animators. Just, you hear, okay, great.
This is a great turnout. So I'm Jay Hossfelt. I'm the lead animator at Epic Games.
I want to talk about animation prototyping. So they, they say that you teach best what you need to learn the most. And I've been at Epic Games for ten years, and we never had a formal prototype process. When I first started there, the first game I worked on was Unreal Championship 2, and that game was heavily based on prior versions of Unreal.
And a lot of gameplay systems were kind of set in stone. There wasn't a big global game to prototype. And as I was working on UC2, down the hall, they were starting Gears of War. And Gears of War...
if you don't know, started off as actually an Unreal kind of gameplay mode.
And that evolved over time as well.
So even Gears of War never started out with this, like, official prototype phase of a game.
And then, of course, Gears of War 1 was successful.
We moved on to 2 and 3.
And sequels don't really have a time for a prototype phase as well.
And recently, we sold the Gears of War IP to Microsoft Studios.
And Black Tusk is working on it.
And suddenly, we're going to work on a new game that's not based on a prior game.
And we had to approach this from a total blank slate and to prototype a game.
And this is something I had never done before in such a capacity.
And before me working at Epic, I worked in games for 10 years.
And none of those games had a really formal prototype process.
And that's what I want to cover today.
It's kind of like my journey from discovering all that.
So.
So, to kind of give the essence of prototyping, we played this game at Epic.
And we kind of had this company meeting, where we all came down to play this game.
And it's called the Marshmallow Challenge.
I don't know if you guys have heard of it.
But we had to break up in groups of four.
And the challenge was to build the tallest tower to keep the marshmallow on the top.
And we had 20 pieces of spaghetti, some string, some tape.
Not much more. And we had eighteen minutes to do it.
So Celia, who was hosting this meeting, said go.
And so my group, I think it was a programmer, a marketing guy, an animator, and someone else.
And, of course, we all turned to the programmer, because those are the smart ones, right?
And he had a pretty good idea, and we started getting ready to go. But the guy next to me kind of called out a flaw he thought he saw in that idea. So he proposed his idea.
And that looked good. Until the guy over here kind of called out a flaw. And we listened to his idea.
Got to me, same thing. I'm an animator. I've worked on complex rigs. I can design a marshmallow tower. So I gave, I gave my example.
Well, then we heard Sylvia say, all right, you got five minutes left.
We had been talking for 13 of those 18 minutes.
So it was like musical chairs.
We were on my idea, so we went with it.
We all just kind of divided labor.
I was going to make the middle part, and this guy over here was going to make the supporting legs, and this guy was cutting the tape.
And we heard Sylvia then say, 10 seconds left.
And we're just speeding along, and we're looking around to see the other towers.
and she counts down. Three, two, and we stick that marshmallow on top, and we look around, we had the tallest tower. It was great. So as she's walking over, our tower just goes, boom, and it falls.
This is us working on it.
So we lost, and these guys won. And I don't know if you can tell from the picture, but their tower is about as tall as one strand of spaghetti. I mean, they spent eighteen minutes.
They could have easily just stuck three strands in a marshmallow.
We sat down and, with Celia with these meetings, things are never quite what they seem. So she showed us this TED talk, and it turns out this Marshmallow Challenge has been done all through the country.
Different schools and companies. And, so it turns out there's one group of people, other than architects, there's one group of people that consistently build taller towers than all the rest of us.
And does anyone want to guess what that group is? If you know, don't tell me. But does anyone want to guess?
It is. It's kindergartners.
So why is that? We're sitting there, we're adults, we've all been trained in various, you know, technical things, but how come we can't beat kindergartners in this?
So it turns out, kindergartners don't do that whole posturing around a table for 15 minutes, trying to see who's going to get the idea.
They go straight to building, and their tower falls.
And they build again, and it falls.
We only allowed ourselves one ta-da moment at the very end of the 18 minutes, and kindergartners on average allowed five.
And I'm sure we've all, people who've worked on games have been on that game, but the game's kind of not there.
And there's about a month till ship.
And you have that last ta-da moment, and hopefully you can get it playable.
So, this is the essence of prototyping. And so to give the formal definition of prototyping, you know, it's an early sample. It's built to test a concept or a process. And it's actually something to be learned from. Prototyping is not for the consumer down the road. It's for the team. Steve Jobs and crew would never think to sell this prototype to the public.
To make it polished and clean is something for later. But you need that prototype process.
And I think somehow we, as adults, and we as game developers, got off track. You know, the kids naturally iterated. No one ever had to tell them there's value to it.
And, in my experience, many of the game developers, we, we didn't. And so how did we get off track?
So I look back. I've been working on games, like I said, for twenty years. One of the first games I worked on was a game called Genome. If you're one of the ten people that bought it, raise your hand.
But back then.
Game developers were more generalist, and the specs were really low.
Like maybe 250 polygon characters, maybe a 256 by 256 texture map.
So we got assets done really quickly.
So we kind of got the rapid part of rapid prototyping down, but we were, we were not mature developers back then.
The minute we got the first thing in the game and it worked, we're good.
We moved on to the next.
So fast forward to Gears of War 3.
We're now mature developers.
AAA, you know, next-gen content takes so long to create.
And so, from that moment someone wanted to design something and then see it implemented in game, for instance, something like a boss battle, it was now 12 weeks versus what would have been two weeks long ago.
On Gears of War, we were mature enough, if we got something in, say a boss battle, and it wasn't working, we were mature enough to tear down some stuff and rebuild it.
But at most, we got two ta-da moments.
It was a very expensive process.
Gears of War was not known for its great boss battles, and that could have benefited from a more formal prototype process.
We just didn't have it.
So as game developers, you know, what is our marshmallow challenge?
Like, we're not just building this simple...
kind of objective goal thing like the tower.
Games are really complex things, and they have a lot of complex systems that work together.
You know, you're going to get a much larger team than four guys around a table, and they're made for an audience. The audience is ultimately what judges your success. And then games require a creative process.
So how do you quantify a creative process?
So I just want to let you guys know, to talk about prototyping, I kind of want to give the whole context of what prototyping happens in.
So I'm going to zoom really far out and talk about some things that we probably just all take for granted.
And that is, what is a creative process?
Can we parse that down to something describable?
What is a game?
We all work on games, but what makes a game different than something else like cooking dinner or riding a bike?
And then what is our role as animators?
in this whole thing.
So the creative process, I don't know if you guys have read this book by Scott McCloud, but he had this one chapter on the creative process that I thought was really fitting for this.
And it goes something like this.
The idea of purpose, and that kind of comes from just that initial inspiration.
It comes, actually, it comes from part of the brain that doesn't even process language.
It's that initial inspiration impulse.
But you do want to get that out to the world in a form of something.
So as a creative, you're going to figure out the form.
Then the idiom, that's kind of like a more narrowly defined version of that form.
That's kind of like the genre.
You know, so if you're making a movie, it's going to be a horror movie.
It's kind of like a...
the genre. And then past that you have the structure, and that's all the components and how they work together to achieve the form that you're creating. And then you have the craft. And that's why a lot of us are here today as animators, is to learn how to better our craft. And this is where we put a lot of the blood, sweat, and tears into what we do. And then you have the surface, and this is what the audience sees. You know, they don't see all the stuff that happened prior to the surface, they just see that on the shelf. And this is like a good way to kind of parse the creative process.
And oddly enough, all of us in here, we kind of, we master this creative process backwards.
We all started out on the other side of surface. We started out as a consumer, seeing the surface of someone else's creative process, but something in us made us want to peek behind a curtain.
Maybe it was like a making of, or an article you read, but somehow you got to the side of craft.
And that's what brought us here today.
So I'll put this in context of making a game.
So I'm going to use Cliff Bleszinski, the maker of Gears of War, and run through this, like how it may, maybe it went like this.
I don't know for sure.
But let's say Cliff and his brother, they're sitting there, they're talking about when they were kids, and they'd go out to, you know, out to play and explore.
And Cliff wanted to make a game that kind of encompassed that, that initial motivation, the, the inspiration to make something.
and they're remembering that, and he's going to put it into a form.
And of course that's going to be the video game.
He's not going to make a board game, he's not going to make a movie, he's going to make a video game.
And then to create this, the EDM, it's going to be a 360 game, it's third person.
He wants multiplayer and co-op, so he and his brother can play.
And then you get to the actual game itself.
And a game is its structure.
That's all the components within it.
And so for Gears, some of the systems were like running, shooting mechanics, cover, all just the little systems you need for your game to actually be the game.
And then of course it's a craft.
This is the very slow part of any creative process because this takes like the heavy lifting work right here.
And then of course the surface.
So Gears of War is released.
It's the final product.
It's on the store shelves.
Everyone's seeing it.
So did Cliff's initial inspiration survive all the way through to what the audience got?
It's kind of like the skin of an apple.
You know, the shininess is there, but the consumer's gonna take it and they're gonna bite into that apple.
And are they gonna be pleased with it?
And a lot of games have that beautiful, shiny marketing touch. They have beautiful craftspeople. The craft in the game is really good. Great renderer. Great models. But then, you play the game for a couple hours, and you're just not into it. And there's a bargain bin full of these.
And so, how do we.
how do we avoid that? Like, how do we get, you know, we, we put so much effort into the craft. How, how can we make sure the games we're working on aren't gonna get to that bargain bin?
So let's go back to structure. This is where, this is where you could ultimately fix it. Because I think this is where it breaks, breaks down.
And so, we do take this for granted, working on games.
But what is a game?
What is, what is like a core structure of a game that sets it apart from any other kind of activity we do?
And it goes something like, like this.
I got this from Stone Labrandi, a guy who works on, a designer at EA.
So all games start with a starting point.
And they have a goal.
And then there's opposition to that goal.
but you allow the player decisions and tools to get around that goal.
And all of this is encompassed within the boundary of rules, and then how the player interacts with the whole thing.
And each of these components is something to be dialed with, depending on what kind of game you want.
You're gonna tweak the decisions, the opposition, and all that.
So just show some other examples.
We all know this one.
Starting point, goal.
opposition, tools and decisions, and the rules of the game. And it's not just video games. You got your kickoff, your goal, your opposition, your decisions, and your rules. So once you kind of, like, have the game down, down to that, you, you kind of know where, what you're looking for when discussing the vernacular of a game.
So where do animators come into this scenario?
So I'm zooming back in now to animation.
And like film animators, film animators serve the purpose of telling the director's story, to help communicate the story.
That's what you guys are for video games.
You're communicating the game.
You're communicating, I hit a button.
Did the character react?
You're communicating if that was successful.
You're communicating if you broke the rules somehow, or if you were successful with the decision.
And it's what we do. And we share this task with audio effects, UI.
There's many ways we communicate to the player about the state of the game.
And the game designers kind of orchestrate this like an orchestra.
Like sometimes animators have their solo as the key communicator of the game.
Sometimes we all share in it.
And this point was brought clear to me.
So we're starting prototyping on a game, and the designers told me, like, don't worry, we don't need animation, we don't need anything.
We're just gonna use rectangular cubes, you know, in place of characters.
And so they had these cubes running around, changing speeds and direction, and hitting backwards if you hit them.
But it didn't communicate.
They finally came and said, look, we need something more than this.
This is just too raw, too, like, we cannot tell.
And we put in bipeds, and suddenly the communication of the state of the game was instantaneous.
And this kind of really solidified that role for us animators, what we do.
And of course, this is where we...
So this, when I'm talking about prototyping for games, I'm not talking about craft.
You know, sometimes in craft we do a bunch of stub animations to kind of get the designers off our backs so we can spend more time polishing the animation.
All that is a part of prototyping.
This is kind of the, think of the structure side versus the craft side of prototyping.
So if you're on a project like mine where it's day one, it's not a sequel.
You don't have a ton of resources to draw from.
What does day one look like?
And this is, you know, you've got your designers with their gameplay pillars.
You probably have some tech in place already, and they're doing gray box levels.
And the team's just ramping up.
The art team has nothing.
There's no models yet.
At best, they're scribbling some concept.
But we don't have much.
So as animators, how could we help designers instantly?
And so that was our challenge.
So we wanted to make a pipeline.
for prototyping that was still useful once we got to production, but it allowed us with, it allowed us some tools. And so our goals were to make fast prototype assets, like make it fast but not ugly. I mean, if people are going to be looking at a prototype game for a while, you don't want any distractions and ugly temp art really just grinds on you day after day.
And in a prototype phase, since you are working on the game with those components, communication is all you're dealing with.
You're not dealing with showing how great of an animator you are at this point.
You want to just communicate the actual ideas being done.
You're not going to noodle on just fine polished animation.
And then there's no rules.
There's no shame in reusing and retargeting run cycles over and over and over.
So these were our goals here, a little bit of our goals.
And.
So we made this content creation tool for Maya.
It's called the AutoRigger.
And what it does is it creates a fast prototype of the character.
Let me get this playing here.
So what this does is it allows us to create a biped really quickly.
We can scale various portions, and it's done quite quickly.
Then we can just snap it to an autorig that gives us all the controls, with IK, FK switching, spline IK.
We could load animations onto it, load mocap, export, whatever we need to do.
But the key is to do it fast.
This character here, I think in the end, took about 45 minutes before we could have it imported into the editor.
And in addition to that...
We also have this real simple texture for it, where we can go into Photoshop and just paint bucket in the various points.
Because in the game, sometimes you want to communicate who the enemies are, who the team members are, maybe what buffs would look like, or anything else.
And so we have just a quick color scheme.
And then, so, we have this guy, and what we do is we sit in a room with the designer, and we're asking him, like, what's your idea for this game?
And as he's talking, he's describing the verbs.
And so as an animator, you're going to sit there and you're just pulling out the verbs from his game design, what he's talking about.
The idols, let's say the guy's going to punch, and he jumps, and when you shoot him, he falls backwards.
All these things are verbs to be communicated.
But it's not just communicating verbs.
that you gotta think about who you're communicating to.
So sometimes some of the animations on your player is for the player himself, the guy with the controller.
But sometimes the verbs are for the opponent.
So you gotta keep in mind who these verbs are meant for.
With Gears of War, we noticed that a lot of times, we were spending a lot of time polishing animations, but no one was watching Marcus.
They were watching the reticle on the screen.
So then we put more effort into the animations that we knew people were looking at.
And that was oftentimes the, times the opponents.
And it is said that with video games, you have to make the animations look good from all angles.
And that's very true.
When we get down to it, there are a couple of primary angles you're going to see of the character in the game.
And just knowing who you're communicating to in the game, whether it's the opponent or player, that gives you a sense of, does that pose need to look good from the front, the back?
You know, what's the camera angle in the game?
And then we have, we're developing Unreal Engine 4 right now, and we have a really strong focus on animation tools that are animator-friendly. We kind of got tired of, in the past, creating just this big list of animations to kind of throw over a fence to programmers to get in.
And so we have these, these tools called blueprints that, basically we could take the variables that the game has, like say speed, height, you know, running.
And animators can go in and plug anything they want into these variables.
So let's say the pawn is what we call it.
The pawn is running forward at 200 units.
We know we can trigger the run cycle.
And so we have things like the state machines.
But the emphasis here is that it allows animators just to drag and drop the stuff they need, and we work with the rule set at first.
And of course that's with the input of the designer.
But that allows us to mock everything up.
So within two days, easily, we've created a character that's pretty much decoupled from the art department.
We've created a character, rigged it, put in rough poses, animations, brought it into the editor, and we've given it its basic.
run cycles, basic behavior, and we pass that off to the designer so he can start prototyping and iterating.
And it ended up being like super lightning fast.
So sadly, I can't show you guys the game I'm working on right now.
We're in the prototype phase.
But just to kind of give another example, this is that same prototype character I did earlier.
And another one of our tools is just the simple aim offset that's added of layering.
And we made it very simple for animators to just go in and drag and drop this stuff in.
And so we have things like blend spaces.
So depending on the angle and running, we can then trigger other animations.
And all these tools have really.
put a lot of power, I guess, into the animators' hands, but it's also made us, like, it's definitely made us put a foot into the design aspect of developing a game.
And so as we do this, we, you know, like I said, within, let's just call it a week, within a few days, we now have this thing in, we're ready to play test, you know, what the designers want to prototype.
And we found that when we first were testing, you know, these, these mini-games we were prototyping, we found that if something wasn't fun, we would go back to our desk. We had a list of, you know, sometimes a dozen things. And we'd all just go back and tweak things. And then the next day, the game might be fun, but we didn't know what the magic thing was that we changed to do it. So we kind of had to limit ourselves to only picking one to two variables between playtests.
Otherwise, we're just kind of spinning our wheels in place.
And then as animators, everything we had in there, we had to ask ourselves, is it communicating?
You know, do people feel like, if they're getting shot, do they feel like they're getting hit reactions?
Or if they're getting punched, do they see the anticipation?
So a lot of the times, animators sitting there, just making sure, like, we are communicating.
And sometimes, depending on the game, like how far the camera is from something, sometimes the animator, no matter how strong he makes his pose, he's going to need help from an effects guy, you know, to kind of put some kind of maybe effects emphasis on something.
So this is where we play each day and we kind of just get to the point of where we're communicating the game to the best of our abilities.
So we know that if the game feels fun or not fun, it's the game itself and not because we're lacking in communication.
And of course we test for responsiveness.
And of course when playtesting, nothing is sacred.
You've got to be in the mindset that everything and anything can be thrown away at any time for something better.
So we're prototyping this stuff.
for weeks on end, and then suddenly we start hearing from the art department.
They actually are making great things.
Well, from my earlier slide, the art department, it's very slow to create next-gen art assets.
So we had to ask ourselves, like, how do we roll this in to this prototype phase?
You know, if we now have to wait four or five weeks, maybe six weeks to get a model in, do we hold off on prototyping certain aspects?
And so that was one of the first questions we asked.
And the other one was, how do we just roll some of the artists into that mindset of prototyping.
And so we sat down with the art team, and we kind of showed them our prototypes, and we said, look, here's what we're thinking.
And some magic happened, like, the first day.
The concept guy played the prototype, and suddenly he got the essence of what he was going to be designing.
you know, we're testing the pure function of the game, not the form at all.
Just the function. But by him knowing the function, it definitely informed him of the form.
But like any artist, they're not going to just coldly, cold-calculated stick to just the form.
They're going to add in...
you know, what they're paid to do, these concept guys.
And so what we also found was we would get that concept back, and then suddenly the designers are seeing things in the concept work that they never even thought of.
So we kind of got this cool feedback loop between concept art and game designers, where they were kind of bettering each other by going back and forth.
So we got the concept art down. It's feeling really good putting that into our prototype process.
But models still take forever.
The guys, they model it out, they ZBrush it, they make all the normal maps.
And so we asked them, like, is there a point, guys, where we can get something quicker from you so we can try it out?
Because we've all had that...
At least in my experience, we've gotten models before that totally broke the gameplay mechanic.
Where the model itself...
did not lend itself to the gameplay it needed to be.
So if we could find out how, if we could solve that problem earlier, it'd be fantastic.
So the modelers said, yeah, sure, we can mock up the broad stroke shapes of our models early and hand them to you, and we'd put those on our autorigger that we used for the earlier mission demands.
Same tool.
we would get that model in game. And the questions we ask are, you know, does the silhouette of this new model lend itself to the communication it needs to do? All the, if the guy has to run and jump and stretch and grab, reach over his head, can the model support that? And so we were able to get this, like, feedback back to the modeler so they can make changes very, very quickly. And when we rigged this, we...
We weren't caring about skin weighting. We weren't even caring about textures at this point.
Just the broad stroke stuff.
But we had that model, and the animators were kind of panicked for a little bit.
We were like, do we make a whole new round of stub animations?
Because we just made some for this Michelin man.
But not everything is going to totally apply to the new model.
And so we said, no, there's no way. We can just do two rounds of just redoing all these animations.
So...
We have a pretty easy retargeting tool in UE4.
We would just click, and within minutes, all the animations would come over.
And so that kept the play test going.
They didn't have to wait for a new model update.
But we knew that model was going to totally break.
And we're not going to look at the silhouettes of those animations and make sure they work.
So what we'd do is all those verbs we had and the key poses, we would just make a character sheet with this new model and make sure that his silhouette reads from those key things you're communicating, those key moves.
like his runs, or if he's jumping up in the air, his anticipation poses.
And then what was great with this is all the departments, we were all kind of in sync with what all these assets are created for. In the past, with Even Gears, it was just this concept would kind of go over a fence to modeling, that would be passed over a fence to animation.
And you could honestly never say we were all in sync with each other.
But now we all know, like, the why and the purpose of the game.
And so, like, I briefly ran through, like, the prototyping of design and the prototyping of art, the rapid prototyping. But that's really half of it. Half of, the other half of animation is just the technical aspects of it. And you do not want to, like, halfway through production find out that something you're relying on is broken. So if art.
designed everything to have cloth, and you find out halfway through production that cloth will not work, you can't have it, that's just a huge pain. So what we do is, we're also prototyping this along with everything else.
And right here I showed our character with a trench coat on. But actually what we did, we didn't even have a trench coat model. We just threw on a cape, threw on some Apex cloth, just to make sure it worked.
And we tested other things, too, like how many characters can you have on screen, your bone counts.
And we did all this kind of still decoupled from production art.
And it doesn't predict everything, but it lets you get a better idea early on.
But there is a harsh reality to this.
So Epic, we're self-funded, so we don't have to worry about the nervous publisher saying, show me something pretty or we're not going to green light your game.
And that's a true reality.
I know we've all done stub animations, and to us it's clear they're temp animations.
But someone inevitably comes up and says, hey man, are you going to redo that animation at some point?
And so there's always this communication of prototyping.
And so, you don't want to give up prototyping to, you know, please those that don't have the imagination to see what game you're making. So don't skip prototyping.
But, since you do have the art direct, the art team, make it, make that a part of prototyping. Make them make all the visual assets to kind of fill in the blanks for people. I don't have, like I said, I'm in a situation where we're not dealing with publishers. I don't have the end-all, be-all answer to that.
I think if you make a visual prototype on the art side, that's going to help.
That way you can have kind of your gray box prototype level going, and so the developers can still learn and fail quickly what they need to.
And I've said this earlier, is you want to make the temp art appealing, and you just don't want to grab a bunch of just assets from here and there where nothing feels like it's part of the same thing.
because you're going to be looking, in prototyping, you don't want any distractions. You just want to get to the core of, of the game.
And so when it comes down to communication of prototyping, you know, the film industry, they got this figured out. You can show a storyboard to someone, and they know what you're getting at. They know that.
that you're prototyping the structure of your piece through the storyboard.
And so we had to make this little demo for GDC last year.
And we had a very short amount of time to do it.
And we had to kind of limit our risk.
So yeah, we just kind of scratched on Post-it notes to kind of find where our problem areas are.
So this was totally acceptable, and people didn't panic on this.
But I feel like with games, we haven't quite got to that point where.
people are fine with seeing a prototype type thing. So I think part of it is the more we do this as an industry, the more it'll be an acceptable form of prototyping.
Like, case in point, no one's going to walk up to you and say, hey man, is this final guy going to have a scribble on his face? But we do get those kinds of questions with game prototyping.
realities to the team dynamics of our prototyping team is we've all spent so much time honing our craft that it's hard to jump on a project where you're asked to make stuff very quickly and throw it away.
And it takes a certain type of tinkerer.
You do not want to keep, you don't want the team's large.
You kind of want to keep it small, so it kind of keeps the communication loop tight.
But you also don't have too many cooks in the kitchen.
And since it's rapid prototyping, it actually doesn't take a large team to create a ton of assets for it.
And like I said earlier, use generalists who are excited by tinkering and who do a little bit more beyond their specialty.
With us, there's definitely a personality type for it. We had some people on the prototype team that just begged to get off of it later, because they just wanted to get back to the craft part.
But there's other people that just love that tinkering and trial and error.
So I think when building a prototype team, it's important to find the right people for it.
And then what's to be gained?
We were able to fail fast, fail often.
But there's other things to be gained for the project going forward.
And that is, you have all your systems, at least a good idea of your systems in place.
You know that you're not going to get some kind of feature creep later on in the game.
And so you kind of have some of your production costs and needs.
You kind of know what your animation budget's going to be in the future without ever having to jump into it head first.
And then, of course, during prototype, we don't have everything we need.
And the prototype period's relatively short, so we don't have...
time to build new engine features. So the things we do need, we can inform the engine team of what they need to add going forward when we go into production.
And if you don't have an engine team, there's some, there's middleware, other software to help you out. And then also, back to that communication thing, we found that kind of based on how you're communicating the game.
kind of is going to define your style. So with animation, if the game's depending more on animation to communicate, you're going to need a style that is going to allow you to show more stronger poses. Like a subtle mocap style might not be able to communicate everything. You just need to kind of choose your style guide, maybe inform the style guide a little bit more based on what needs to be communicated.
Do you have enough information to jump into production?
And you're never going to know everything before going into production.
There's always a plethora of unknowns, but if you can just cut down a lot of it during prototype it helps out a lot.
And then, so with Gears 1 we had, say, a ton of stretch goals.
A prototype team's going to have a lot of stretch goals.
And if you get them in great. If you don't, then if you do work on a sequel, it's going to be easy.
You're going to have so many, like, you're already going to have these systems you are totally motivated to go after.
And so Gears of War 2, that was nothing but Gears of War stretch goals that we weren't able to get to with Gears of War 1.
And then as an animation director, being on the MoCap floor...
and directing the actors, I kind of knew what the communication was for.
So rather than just being on the floor and watching their movement from all angles, I know the gist of what they have to communicate strongly.
And just knowing the structure of that, what they have to communicate, just allows me to give much more focused feedback to the actor.
And then even to the guys on my team, when I first became an animation lead, I tended to direct them on the craft.
The twelve principles of animation and the craft and that stuff.
But when you're solidly aware of the structure of the game and what you need to communicate, you're going to give more applicable feedback to them.
And so they can make decisions that are...
that are not just aesthetic, but more functional for the game.
And then, so, asset creation was less like the telephone game, and so it's more like we're in a room together between all disciplines. So, the modeler leads, the modeling leads, the texture leads, the effects leads, we all just kind of were on the same page, versus using that old, old system of throwing assets over a fence.
And so...
Like I said earlier with this, with the creation, or with the creative process, we all started off, and for some reason many of us here decided to peek between the curtain, between surface and craft, and we stayed in craft for a long time.
And I was thinking about films, and I know several animators who went on from the craft of animating to become a cinematic director.
We got film directors like Disney, Tim Burton, Lasseter, and Brad Bird, who they all started off as animators, but they ended up as directors.
But I thought about with games, I don't know of very many examples of the animator kind of going to the path of a designer.
And the reason is, I think old tool sets and old team structures didn't allow for the animators really to peek into the structure of the game as much.
We kind of were just making animation lists and passing it on for someone else to plug in.
And so with this prototype process, even on our team, I noticed that animators were suddenly being more aware.
They're more aware of the...
what they need to communicate in the game.
And case in point, one of our animators just graduated on to the design team.
Because of this, he found that he liked the structure part, the designing part, but he got to transition there via animation, which was a first for me to see in the industry, or any companies I've worked at.
And someone like me, I like craft. I want to stay, I want to be that animator.
But I know having one foot, knowing the structure of the game I'm working on, just allows me to ultimately be a better craftsperson at animation.
And so we're back to our roots. You know, back several years ago, it took two weeks.
With this prototype process, we're back down to one week.
And, and, but we had the maturity we had.
You know, we know when we need to go back and keep improving something.
And then, so, let's get back to Surface.
It's the final ta-da.
Your game's out.
There's no guarantee that your game's gonna completely succeed, but you have allowed your team many more times to fail and try again.
And with a good prototype system in place, you've allowed that, and you've allowed yourself to kind of get back to that thing we kind of always knew as kids. And it kind of ultimately allows you to be far more creative, because you get to do it at a faster pace.
So that kind of summarizes the prototype, prototyping for games.
So if you guys have questions, feel free. And thank you.
And I want to thank these guys for the reference.
Yes?
So you were talking about having an auto-register and having a bunch of middleware tools to kind of get you started.
Mm-hmm.
Yeah, so the question was, are there tools out there for a smaller team?
to use if they don't have their own tools, programmers, or a TD to set up the system.
I believe there are. I mean, I know Mixamo offers anim sets for people to jump off with.
I know our tool we use for Maya, we based a lot of those features off the, is it biped for Macs? You know, a lot of that. So a lot of it's there. If you don't mind it being very gray box looking, I'm sure there are a lot of options out there.
Yeah, so, in this prototype process, actually being in Maya was the fastest part, because really we're just getting the assets out as quickly as possible, so we found ourselves in the editor more, just kind of setting up the rule set and the flow of, kind of like the logic between all the animations and how they...
blend into one another.
Yes?
You mentioned before that you needed people on the prototyping team that were good with trial and error and everything.
When you started working, doing that type of thing and going back to the design and finding that it was the same way, and sometimes the design mindset is that I need to create this.
And going back and working with the design of the content, is that an issue?
Because it's the right type of person to work with?
Yes.
I mean, that's one thing I probably left off is you, well, first of all, you have to have just good communicators on your team.
One thing we did to make sure that happened is we would sit in close proximity with the designers.
And we kind of had an animator and designer kind of pair up.
And after like.
the first couple iterations, they kind of learned how to communicate with each other and work together.
So did that answer your question?
Yeah.
Did it take time in order for that to happen?
Because of...
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
It depends the personality type. There's some guys who, and we found this, I mean it's actually really hard for someone to do a bunch of content and throw it out to be critiqued, even when everyone's aware of a prototype phase. And so some designers kind of like to keep their whole vision like this, and others were more than willing to throw theirs out for the play test that day.
So it just takes time. It took, I think it took us maybe...
four, five, six weeks to kind of get that process flowing.
Yeah.
Real quick, guys.
There's three bikes in each pile.
If you could each use those, that would be a good question.
Thank you.
Yes, sorry.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Yeah.
Hey, so you were talking about how you're communicating the idea to the user.
As a designer, what sort of ways could I be able to communicate the idea to the animator to kind of increase the productivity on that end?
That's a good question.
I mean, I'm taking a lot of stuff for granted here because our designers and animators have worked together so long.
It's a really good question.
I think...
I think it's just sharing knowledge between the two.
I think if designers kind of speak about the core, that's why I kind of brought up like what is the game and the components.
I think the more animators can kind of get that language down, the more likely they can kind of have that common vernacular between the two.
Hi, so when you were talking about the visual bar in a sense or the quality of the prototype in regards then showing it to other people, I know you were saying that because you're working internally mostly and not having to show to publishers or other people it's not quite so stressful, but I was interested if you could elaborate more on where...
where that bar ended up being for you.
You know what I mean?
Like, was there a certain level of lighting or a certain model quality or a certain animation quality that you ended up finding was the right level that people didn't mind looking at the prototype and could get past the visuals and see the practice, what was going on behind it?
Yeah, so the prototyping was just for us, right?
It's just for our team only, not to be seen by outside people, really.
And we could probably communicate it with a lot of...
wording to them. But I think it, for us it kind of naturally happened. Like, we wanted the aesthetics to kind of be soft on the eyes and kind of have everything united. So the shading on the characters needed to be the same as the shading in the environments. So at the bare essentials, it still had to have a little bit of aestheticness to it, but we also wanted to decouple it from art as much as we could.
But really our goals weren't to communicate outside to people as much as just give us something where we could instantly know if something's working or not and get rid of all the other distractions.
So you had like animation binking and this sort of, you know, much more simple animations or did you do another pass to sort of...
Some animations.
So...
We generally would do blocking, like first pass blocking animations to get it in and get the timing.
It depends what kind of system you're working on.
So let's say if it's something like a melee system, we found those needed far more kind of advanced animations to kind of get just the prototype working.
And then other things like idle poses, you don't need all the little subtle, you know, rub your nose stuff.
So those were just usually like one frame to kind of just embody who the character was.
So it kind of is basically what got it enough to be prototypable, you know, is basically the role set for that.
It was really hard for us to not go beyond it.
I found myself just noodling on animations when I didn't need to.
Thank you.
Yeah.
I'll go to this side.
So I get to do a ton of prototyping actually at my job.
And that tool looks awesome.
And most of the time when a prototype requires a bunch of animation, it's usually an immediate turn off.
Just even because that's usually considered a huge time sink for a prototype, right?
So I was curious, the tool looks so awesome.
Did you actually have the reverse of designers?
It was so intuitive that designers were able to jump in, tweak animations, and?
And like, did you guys build off any ideas just strictly from the tool of like making a prototype more animation centric and like manipulating the character?
Yeah, I mean, I don't think we had the problem of, say, designers kind of coming into our animation tool in Maya and doing anything. But when it got to UE4, honestly, right now, we're trying to figure out where the line is between animator and designer because the tools are kind of simple enough to where each one can kind of just go either way. The animator can take design really far, or the designer can go and tweak animation stuff. And right now we're kind of keeping that open because we're trying to figure out which way is going to break and which way works most effectively. So I don't have an answer for it. We're actually kind of, that's another thing we're prototyping is the, where does it end and where does one begin. We've definitely found a lot of kind of...
But that's why it's important for the designer and animator to just kind of team up and work together.
So that way one doesn't know what the other one tweaked.
Are you seeing more of a trend where like some of those tasks are becoming like kind of a one man thing?
You know what I mean? Like you kind of have like a designer that's focused strictly on the animation portion?
Actually in the past we needed that. We needed designers to...
We had to find a designer that had a good eye for animation.
I think with our new tools, our focus is to allow the animator to go in and there's some core things you can't change, like sometimes like some of the timing of the actual events.
But a lot of the stuff like blends and transitions and stuff are kind of becoming more open to the animator end.
And like that one animator I talked about who is now over in the design team.
He kind of was an animator that kept pushing into design and he actually was coming up with stuff that the designers liked and they begged for him to be on their team.
So this process kind of blurs some of the lines.
We say it a lot that we're kind of stopping, referring to ourselves as the animator, the modeler.
We're all just kind of back to the game developer.
The game developer who animates, the game developer who can model.
And really, it's just been the tools.
We're kind of cutting down some of the barriers between departments.
Cool, thanks.
Hey, I just wanted to make a quick comment.
You mentioned animators who became designers and such that you didn't know of any.
I do know of one who is Fumito Ueda, the lead of Ico and Shadow of the Colossus.
So there's the one guy.
Oh, yeah, yeah.
And they make, apparently, good games.
Yeah.
Except that Stargaming was canceled.
So they did make good games.
Over here.
Do you think a team of prototyping group for a company can benefit from generalists that can do multiple things at once?
I'm sorry, I can't hear you.
Do you think a team in a company that's specially designed for prototyping can benefit from members that are generalists that can also do modeling and texturing and animating at the same time?
Yeah, absolutely.
We definitely have benefited from the guys who are more willing to be generalist and go out and if they don't know something, the guys that go out and kind of teach it to themselves rather than just wait for the other guy with the specialty to come in.
So it's definitely geared towards generalist.
And that way you're not, you can keep your like beautiful, the animator who can just create the best quality animation, you're not making him do this, you can still keep him on the production team.
So do you think in the future maybe when companies implement like prototyping teams for games, do you think this will create like opportunities for journalists?
Or do you think it will always be specialized and remain...
I don't know.
It depends where the game industry is going.
There's so many types of games that I think there will always be a game company who would benefit from a generalist more than a specialist.
But there's other games that need the specialist.
I don't know of any trend, the game industry is in such a change right now that I don't know where the trend is heading.
I know for, personally at Epic, we used to really want the specialist animators.
Now we're certainly looking at the generalists who, and when I say generalists, I just mean people who don't say, hey that's beyond, that's beyond my role.
You know, it's out of my, I don't, I don't want to look at it.
We want the people who are willing to dig into a game engine and figure stuff out.
Thank you.
Yeah.
So that was, yeah, that was a great talk.
I work at Criterion and it's really interesting because we've been going through a really parallel process to what you guys have been doing and come to a lot of the same sorts of conclusions.
But I was just wondering, was this one prototyping team that was really focused on the animation side of things or was it across the whole game experience?
that was being prototyped?
This prototype team was for the whole game.
And with two animators thrown into it, we learned a lot.
So my talk was kind of on both, straddling both ends of it.
But yeah, and it's new for us.
We took a bunch of guys who were used to, I mean, these are guys that worked on Gears of War, were used to the production, the craft section of making a game.
we always blasted through prototyping stuff.
I think in the past, prototyping was always done maybe on a per person level, or maybe a couple people would prototype something over here, but not a effort by the whole team.
Yeah, that's sort of been exactly the same for us over the last few projects.
So, but how far are you guys taking the prototype?
I'm just really curious to know.
To what extent are you sort of fleshing out a whole game experience as like a?
It's a good question. So the fell fast, fell often philosophy is good, but only if you have really well grounded goals.
So I think whatever your goals are that you need to prototype, I think it just needs to be worked out.
We have a little bit of extra time to prototype. Not every company is going to have as much time.
You might only have a couple weeks. So you're just going to write down, you know, you've just got to figure out what are the risky things that you want to try out and prototype.
So for us, it's certainly...
I would say it's more the structure of the full gaming experience.
We're trying to find like, what...
what...
what, like, gameplay loops, what kind of, you know, structural elements will help make this game.
So I've got time for one more question.
My question is regarding IK.
Is it something that you consider when prototyping?
And if it's not through during prototyping, is it a programmer task or an animator concern or responsibility?
And finally, do you aim for the IK system in Unreal Engine 4 to replace human IK at one point?
So yeah, we don't have human IK integrated.
Or at least at Epic, we don't.
But I didn't even mention on my slide I was showing IK, that in the prototype phase, the animators are setting that up.
Because we're ultimately the ones that kind of need to define when and where it's used, and what it's going to be best used for.
So we're kind of handling, I guess, the first implementation of IK.
But if we get to a section where we need predictive IK, we're just going to have to pull in a coder to help us with that system.
Alright, great questions guys. Thank you so much.
