Good morning, everyone.
So I hope you slept well.
I know I didn't.
So today I'm here to talk to you about Emergence and how we applied it to our AI in Watch Dogs 2.
So who the hell am I?
Background check.
I am a AI designer at Ubisoft.
I've been working there for about two years.
We just shipped Watch Dogs 2.
and before that I was in other studios working on these cute brands.
So let's start by giving you some context on why emergence is important for Watch Dogs 2 and the intention of our team with this.
So why emergence and why is it relevant for AI?
Like as many of you might know, emergence is something, when something new is created from the interaction of many entities or systems, and we think it helps make your agent look more intelligent, and it helps them to be more interesting for the player to watch and interact with them.
It's also something we think leverage any kind of sandbox gameplay.
So.
I'll start by giving you some under the hood knowledge about how we did it.
Then I'll talk about the experience and what we got from it and what we learned.
And after that, I'll go with what we want to do next with this and some words on the results we got.
So for those of you that played Watch Dogs 1, the game is set in Chicago.
Our protagonist is Aiden Pierce.
He's a vigilante set on a vendetta.
So it's a really dark game.
It has a really serious tone.
And the relationship between Aiden and the civilians was mostly one of fear and collateral damage.
For Watch Dogs 2, we wanted to give more meaningful interaction with the civilians, and we had the perfect city to do it.
It's set in San Francisco, and as you might know, San Francisco is full of colorful and interesting people.
So we wanted also to give the player the impression that the world was living by itself, and not necessarily just by his interaction or his input.
So we created what we call an anecdote factory.
The idea behind this is to create a small narrative story that are emergent and that can surprise the player as he's playing the game and can maybe stop and watch the civilians and be interested in what they are doing.
As one of our creative directors once said, We should know how it starts, but never how it ends.
And this became really our motto for the rest of the project.
So for those of you that didn't play the game yet, or that don't remember, I'll show you a bit how it looks in the game.
Just a note, this video was discovered, well, this situation, this specific scenario, was discovered by a YouTuber.
We recreated with cheats.
But normally for a player, it won't be easy to have exactly the same situation.
But for copyright's reason, we couldn't show the YouTube video.
Oh my God, really?
You really wanna get married?
However, you really want to?
Don't push me!
Hey, I told you to shut up!
Piss off!
You two are our favorite folks in the world.
Man, that's gross.
Get a hold of yourself.
No one cares about anybody but themselves.
So fuck you!
You stupid!
I said, excuse me, but you think your shit don't stink?
Are you gonna walk away and pretend you didn't do a damn thing?
You insulted me!
And so what? I'm supposed to let everyone walk all over me?
I'm supposed to take it?
I'm not the one who's on balance. You are!
Do you hear me?
Alright.
So as you could see, there was a wedding proposal and a marriage proposal and the player decided to take a picture of it and one of the two guys decided to photobomb him.
And the other were really insulted by this.
Okay, so I'm certain you want to know more about how we did it and what's under the hood.
So there's three main systems that are really important for our civilians.
We have attractor system, dynamic attractors, and the reaction system.
I'll mainly focus on the reaction system because this is the main vector of emergence in Watch Dogs 2, but I'll talk a bit about the particularities of each one.
So attractors are small activities that happen all around the city.
They are scripted, and they are mainly game object we put in the game manually.
and that can attract either pedestrian or spawn with their own actors.
This is really common in open world games.
Most of them have them.
So I won't spend a lot of time on this.
We do have dynamic attractors as well.
This is pretty much the same principle, but it can spawn emergently through an event manager.
It will pick either a two pedestrian or a pedestrian and a dynamic object such as a car.
And it allows us to create situations such as two people greeting each other or little crime scenes where a thief might pick your wallet and run and stuff like that.
And then we have the reaction system.
This is a stimuli-based system.
The idea behind this is to be not too costly because.
We don't want our civilians to cost too much.
It allows us to create emergent chain reaction, which is how we create the emergence scenario.
And it's completely systemic.
We don't script any of this.
We just have stimuli and behavior and reaction.
So the general flow of this system, NPC will receive a stimulus.
It will take a decision based on many criteria.
and it will take a behavior from a list or choose to ignore the stimulus entirely.
So our stim propagate this way.
Let's say someone is playing a guitar, it will send a stim around him, telling the other agents that he's playing guitar.
Someone might decide to mock him and say he's bad at playing guitar, and we send another stim to other civilians around so they might know.
And two other agents might decide to accompany it and maybe observe the scene because they are amused by it or take a picture, for instance.
And they will send stems and it goes on like that.
For the decision making, we use logic rules based on fuzzy logic.
So pretty much, we create really generic rules that will fit most of the situation, but we can specify.
the role as much as we want to go with really contextual situations.
So for instance, if I'm walking and I see someone insulting someone else, I might decide to just ignore it entirely because it doesn't concern me.
I might decide to observe the scene and I might decide to flee because I'm uncomfortable with this.
But if the target of the insult is one of my friends, then I might stop and observe. I will probably not ignore it.
I might fight for my friend or I might decide to flee anyway because I know this friend is up to no good.
But then if the aggressor of my friend is someone, one of my personal enemy, then I'll probably stand up and fight for my friend no matter what because this asshole won't get away with it.
So the most precise is the role.
This is just an example, but the more precise is the role, the more it has chance to be picked.
if all the criteria are true.
So how our behavior are structured after the decision making.
First we always start with a reaction.
Reaction is really to get an acknowledgement of, oh, I saw something, or oh, I heard something.
Then we have a phase where the agent will orient and move to a proper distance to display their behavior.
and then they will display their core behavior.
We always have an exit to return to whatever they were doing before.
And the way we break down our behavior structure, it was really intentional to make it really clear for the player, it could read what the agents were doing.
Otherwise it was really unclear.
So let...
break this down.
So the reaction is really just a short animation.
It's usually a stance transition between sitting down or turning around.
And it will have a little generic bark, so uh, or what?
And stuff like that.
We also have pure reactions.
Some of our, of our rules call for pure reactions.
So basically, any time we don't need to move or we don't need to do something really complex, we just use a smart animation to react.
And then they return back immediately to what they were doing.
Then we have the movement and our attention phase.
So to make sure that they will get to the proper distance, each behavior has comfort zones.
that we define.
So for instance, if I see a steam pipe exploding, I might stay really far from it.
And if I want to take a picture of something, I might get a bit closer, but not too close, right?
So the agent will move to the proper distance in the closest path he can.
We also have the possibility to create angle restriction.
So for some behavior that we want to make sure that the agent goes in front of the stimulus.
emitter, we can specify it.
So for taking a picture, for instance, it makes no sense, you will take a picture from the back.
So the core behavior is mainly a loop of barks and animations.
And there's a follow logic.
So we can specify that don't follow the target or don't follow it if it goes into the street.
and little criteria like that, but they will follow the target normally, like most of the behavior.
And after a certain number of seconds that we can specify through data, or if the target is gone or dead or too far, they will stop doing their behavior and will go to their exit.
The exit was really important to showcase that the agent is abandoning the behavior and transitioning to their previous state.
It's also useful to give an emotional cool down to the agent, so if they are super angry and they want to go back to washing windows, it makes no sense that they will stay angry.
So it will clash if you don't make them cool down their emotion.
And then as much as possible, if they were in an attractor before and got interrupted, we try to bring them back to the attractor if it's not too far.
and they can continue walking if they were walking before.
So this is an example of this structure.
Just pay attention to the guy on the right that is observing the situation and break this down.
Oops.
I don't see my pointer, sorry.
Huh?
This is what you get!
Are you watching, honey?
What?
Okay, what's going on?
So I consider it's a bit so it's not too long, but you can see the point.
All right, what we learned from this.
So I have seven main key learning I want to share with you.
We'll go through them one by one.
So the first thing we saw really early was that it was really hard to read all the behaviors and what the agents were doing.
So coherence seems to be a big problem.
So we decided to redefine our definition of emergent behavior.
So emergent behavior is actually a behavior which happened that was not predicted, but is predictable.
So let that sink in.
It means that even if it's something unexpected that happens it still needs to be plausible, it still needs to be something you would understand in the context where it comes from.
So it's really important to keep that in mind.
And since behaviors are something that, the behavior and the interpretation is something that is really subjective, we decided to go through an extensive review process to make sure it worked well and it was readable for everyone.
So one other technique we use is what we call iPad sessions.
We will film each other doing improvisation over the behavior we tried to create.
And with this, we will take the best take and we'll break it down by the code system, the animation, the barks, and it will create really, really cheap prototypes for every of our behavior, and we could test them.
right away and know that it works.
So I'll give you a short example here.
We tried in this video to create a reaction to when someone is knocked down.
So it's accelerated, of course, It gives you an idea of, it's really cheap, right?
And we are in no vectors.
But it allows us to really be on the same page, like the programmers, the designers, the voice designers, and the animators, and just say, okay, that's our target, and that's what our goal is to create.
Another tool, actually, we use to be sure we review the process all along the way is a tool we call Flare.
It's a tool we developed at Ubisoft that allows us to share videos with other developers.
And it's pretty much a YouTube for developers.
So you put a video of whatever you worked on, and you send it to your peers and they can comment, and it allows us to iterate really quickly.
So another issue we saw, it was really hard to have control on the outcomes.
So I will...
come from reviews and directors will be like, I want more violence, I want more people cheering, I want more this and that.
And it was really hard to control.
And the reason for this is that we use random distribution.
It didn't work, it didn't give us the result we were looking for.
So we decided to go to a pseudo-random, then go with a more homogeneous distribution that allows us to have really the...
the percentage we wanted for each behavior choice.
So it helped us a lot.
Another thing we saw rapidly was that all our NPC was bipolars.
They will switch from one emotion to another without any logic under it.
So we created the mood system.
The mood system is just a way to categorize every behavior by mood.
So we have four of them.
The relaxed mood is the default one and the others are more extreme.
That allows us to really create a logic of transition between behavior.
So normally someone that is super angry won't go to cheer immediately, it doesn't make sense.
So it will cool down to a relaxed state before being allowed to cheer.
It became a criteria in our decision system and tells us to add a lot more logic between behavior transition.
And while we were at it, why not showcase it to the player?
So we have this little face on the profiler card that gives some feedback on what is on the NPC's mind, what is his mood state.
So, and players like, they buy it really fast.
They are like, oh, I made this guy angry, I'm happy because, anyways, he's an asshole or whatever.
One of the things we wanted to do with our NPCs is to give him a lot of flavor.
We didn't want them to look, to react all the same to the same events.
So we created personalities.
What personalities are is really just a tag we put on them when they spawn, and we use that as a criteria as the rest to decide what you will do.
So if you're a violent person, you might react in one way.
If you're an optimistic person, you might react another way.
So as an example of this, I have a debug in this video open that showcase the personality through a colored disk over the NPCs ahead.
So people in this video that have a green circle are optimistic.
And people with the purple circle, they are pessimistic.
So you'll see how they react differently to my attempt to impress them.
You're telling me.
Dude, look at.
Aw, poor little sad doll.
Hates it when no one's paying attention.
Ha ha ha ha!
God, this city is full of twigs.
Ha ha ha ha!
Oh my god.
Oh.
Oh.
Oh, man.
Oh, no, don't tell me.
All right, so you could see that the green people were really happy.
and found my dance funny and the others were like, you're stupid.
And what's really good with this kind of system is that we could give all of our visual stereotype different personality recipes.
So for instance, if I am a rich person from Marin County, maybe I'll be more pessimistic and neutral.
Maybe I'm more blase, right?
Same thing if I'm a sport fan, maybe I will be.
really optimistic, but also a little bit more violent because I might be drunk and stuff like that.
So it allowed us to give a really different flavor per district.
We wanted to keep this pretty organic, so everyone can have every personality, but with the recipes, it gives a little flavor to every district.
All right, so.
With our non-player-centric approach, we tried first to have the NPC react exactly the same to the player as they were doing to other NPCs.
And it didn't work.
They were either too reactive or not enough reactive to the player.
And the reason for this is, of course, the player is not acting like an NPC at all.
It will try to mess around with your AI, will try to push them.
So it still has to be player-proof.
So beware of the dogma.
The way we decided to push the non-player-centric approach is to create provocative agents.
So we have some of the AI that sends them to their activities, and that creates life in the city without any input from the player.
So as an example, you can see the guy playing the guitar will send stims around, and we have others in the city.
And while we are there, why not give the player the possibility to interact with the NPC the same way they are interacting with each other.
So we created emotes.
with that in mind.
We wanted the player to be able to interact with other players in multiplayer, of course, but also with NPCs.
So they will react using their normal behavior that they will use on each other, but they will react to the player instead with those emotes.
All right, and like any systemic mechanics, it can degenerate quickly.
This is really important to have self-stabilizing mechanics.
So we have the emotional cool down, as you saw, and we made sure that every NPC would be fed up with the situation quite fast, because the player attention span is not that long.
So whether the situation will be solved by someone leaving and saying, all right, I'm out of there.
someone being KO in a violent situation, for instance, or there will always be a soul, the situation will always resolve on itself quite quickly.
So we were really, really proud about our civilian system.
We were like, yeah, it's the most cool system around and we have such smart civilians and everything.
And we noticed our mission designer decided not to use them in their layout at all.
So we sat down with them and we're like, okay, we need civilians in our layouts.
Like some of them are, I don't know if you played the game, but some of them are like Noodle's office, or which is our version of Google.
And there should be civilians around, otherwise it will look empty and weird.
So we sat down with the mission designer, like what do you need for making civilians, putting civilians in your layouts?
So with their feedback, we created what we call affiliated civilians.
So they are civilians that are really visually, they look like they are part of the layout.
So for instance, if you're on a construction site, they will have construction garb.
We showcase this on the profiler card as well.
So you're a worker there.
So it gives some feedback to the player that they belong.
They have player detection on the opposite of other civilians.
So.
they can know if the player is not supposed to be there and interact with him if they see him.
They have the possibility to warn the player or either alert the guards, but not every of them will do it.
And the reason for this is we saw that otherwise the player will antagonize them and try to kill them as any combat AI, and it wasn't the objective.
So some of them might be angry that the player is there, but some of them might be just curious.
and ask questions and be like, oh, what are you doing here?
So they are not like all assholes, but anything they will do will create some noise that might attract a guard if they are nearby.
They also have special reactions to combat AI because that they are affiliated with.
Because if, for instance, a guard gets an alert and take his gun out, we don't want the layout to empty.
they know they are belonging there and the combat AI are just doing their job.
So they won't be too scared.
They might observe, but they won't leave.
And of course, we add some requirements for most of the layouts being interiors.
So make sure that they can leave without being in the way of the player, the combat AI, or take cover and not block anyone.
All right, I want to share with you some of our team structure because I don't know if any project has this, but it might be useful.
So we had a small, dedicated team that had one game designer, me, two to three programmers, depending on the phase of production.
We had one voice designer, one writer, about four.
animators and tech animators and two dev testers that were really dedicated to create this.
As I said earlier, we really valued iteration and weekly reviews.
Everyone will play the game and try to mess with the civilians and review the behaviors that were ongoing.
So we made sure that it was right at all time.
And our dev tester were really trained into using.
this system and to understanding this system so they could give us great feedback.
And it's all that we, I'll go on this, but I'll talk about the debugging tool.
It's helped that we had really good debugging tools to give them some leverage.
For production, the tool we use is actually a spreadsheet in Excel, but, we create a tool out of it, it's not just a pure Excel sheet.
And we have about 700 logic rules, so it's just the gameplay of what behavior we will choose.
We also manage the reaction, animation and barks in the reaction tools so the animators and audio designer can have context on the events the agent received and plug your reaction accordingly.
But if you count the combination power, we have billions of rows actually.
So that's how the tool look.
All right, so all the columns in green are criteria.
So incidents or what's my personality, et cetera.
All the columns in blue are outputs, so any behavior they can go in.
So the way we did it is simply using filter to see what type of incident I'm looking at.
And the reason we did it in Excel is because there's a lot of built-in functions, so it was easier.
But it's not necessarily the perfect tool for doing it, the perfect platform.
So you could add a rule and just specify any criteria really easily through lists.
So for instance, I have a civilian that is on foot and is violent.
And is getting ready to float on.
So we also, with this list, we could use the checkbox to create our statements.
So it allowed us to combine a lot of rules into one rule and make it more manageable.
So for instance, if I am violent or pessimistic, I might decide to use this output.
So it helps us to create a manageable amount of rules.
So if I don't have the...
the right output, like if I don't put 100%, the tool will tell me.
So let's say I put 50% keep state, 50% cheer, and now it's a valid output.
And I would just zoom out so you can see a bit, how many rows there is.
But it's.
It looks intimidating, it's not so bad because we use filters, so it's manageable.
All right, so we needed a really strong debugging tool to make sure we could understand whatever what's going on with our AI.
We have a tool that was created specifically for Watch Dogs 2 that's called Dissect.
It allows us to record everything happening.
So let's see all the animations, all the barks, all the rules that are chosen.
And after that, you can stop and rewind.
And that's really useful because you can see exactly at every moment what happened.
And our dev testers could use this to export files and send it to us.
Hey, I've seen this bug.
here what happens and it was really easy to debug this way.
And you have like the rule ID and everything so you can see exactly the path the AI took to take his decision.
All right, so what's next, what we want to, where we want to go from there.
So we had trouble with behavior that requires a dialogue.
And the reason for this is because it's really hard to synchronize dialogue in an emergent way.
So for any violent behavior, it was really easy because people don't tend to listen to each other when they are arguing, so it doesn't matter if they speak over each other.
But anything that is more like flirting, for instance, you need to understand what the person is saying to you and understand.
answer accordingly.
And that was something we could do, but it was too costly with the system we had.
So it's something we really want to develop in the future and build on it.
We also had some issues with rule competition.
So we had so many criteria, at some point it could happen that two rules were both true and had the same number of criteria.
So...
And since it's all contextual, it's really like, I need to go by N, and I get an assert whenever it happens, and I need to go by N and check the rules and say, okay, in this situation, I want to pick this one and not this one.
That was not ideal, and we want to improve on this to make sure it's more automated next time.
And also, we applied this emergent system on our combat AI, but.
It's only when they are not alert, so as soon as they enter a gameplay mindset, they just ignore everything, then they get really straightforward.
Annoying because they don't look smart when they are in gameplay.
They will just ignore everything around them and be like super straight-minded.
It's okay, but we want to make sure next time we add more emergence to them.
So let's talk a bit about the results.
We noticed that with Watch Dogs 2 compared to Watch Dogs 1, a player will spend about 30% more time in open world doing nothing of the track activities.
So we think that the reaction system helped a lot to inspire the player to mess around with civilians and just have fun, running around San Francisco.
We had a lot of creative videos from YouTube and Twitch, which were really interesting.
And most of the time it looks like bugs, but we are like, oh, but they have fun with this.
So that's fine.
And we got really positive reviews that are really specific on this system.
So we think it's really positive.
So thank you.
I hope you enjoy it.
And I'm here to answer questions.
Yeah, I went too fast.
Folks, we have plenty of time for questions.
There are microphones in the aisles.
This is going to be a good rule of thumb for not only the two days of the AI Summit, but all week.
If you have questions for Roxanne, please step up to the microphone so that it ends up sticking to the tape.
So go ahead.
Hello.
I know.
Almost in time.
I know.
Almost in time.
Thanks for opening the conference.
I wanted to ask about your reaction tools.
You talked about how you did that in Excel, and you kind of had to gloss over, well, it's pretty good because it does all the stuff, but there's always some things you don't like about it.
Could you elaborate a little bit on what worked and didn't work using Excel for it, and what's your ideal tool?
Maybe, you know, you probably need an hour for that, but what the ideal tool for authoring all this would be?
Yeah, what's your name?
Matthias.
Okay.
Actually, I think the worst about this tool is that I needed three screens to have everything.
The visibility is really hard because it's a spreadsheet.
I mean, we can filter, but still the information is more horizontal.
That was one of the main problems with it.
But it allowed us to iterate really quickly.
So if I needed something new to be added to the tool, it's.
like I has the tool programmer and boom it was there.
So it depends.
It was a quick solution.
Ideally we would have our own tool with nice interface.
But yeah, I guess the biggest issue was the interface.
I know there's a bunch of people asking, just one quick follow-up.
What did it actually export to?
What was the actual path into the game and how quick was the situation?
Sorry, I didn't hear.
What was the actual iteration when you're done in Excel?
What does it export to?
How does it get imported into the game?
Is there hot linking?
Oh, yeah.
The links are really easy, actually.
The sheet is turned into an XML, and then it's read by the engine.
So I just need to save, and boom, it's already, even if the game is running.
Yeah.
Hi, I'm Isaac.
I was wondering if you had a system to allow a character to break one behavior and jump into another one based on the priority of the behavior.
So if you have a car coming at you and you can see it, you probably won't keep arguing with someone, you'll jump out of the way.
So a priority system.
What's your name?
Isaac.
Okay.
Actually, no, because our criteria allowed us to make enough context to be able to filter out what we don't want.
So.
Because I'm using, in each rule I'm using in what state I am.
So if I'm, I don't know, I'm running away, I might ignore a lot of things.
But if I'm just walking around, I might be aware of more things.
So we didn't really need to create a full priority system because we want to keep it contextual.
No problem.
Hi, I'm Chris. I worked on the dialogue management tools for Hitman and I'm curious how you connect all the dialogue required for the AI to your setup in Excel. Do you manage that in Excel and how did it work out? Because clearly for a game of that scale you need lots and lots of barks and dialogues and reactions.
Yes, so...
For the reaction part of the behavior, it's all in the Excel tool.
So it allows the voice designer to decide like with any criteria they need to make really specific bark or really generic bark depending on the situation.
For everything that is behavior inside the behavior loop, it's just plug in the behavior.
It's like they have variety, but it's not as contextual as the reaction itself.
And there's no separate tool for managing this?
This is all in your...
No, it's just plugged in the Excel sheet.
We have a tool that's called Oasis to manage all the bugs.
But yeah, it's just communicate together.
Okay, thank you.
No problem.
Hi, Roxanne.
Hi.
I really like the visuals you showed off in this with both basically the colors, but also just the...
the timestamp of what's going on.
So, a question I had was, a lot of the actions seem like there are agents responding to the player character, but then you had a situation where you had two characters doing like the marriage proposal.
So, like dialogue is this kind of joint action where the NPCs need to coordinate.
Was there other coordination between other NPCs that you achieved, given that a lot of this looks like kind of autonomous agents and cooperation might be challenging?
Yeah, most of the synchronized dialogue in the game.
they are done through this attractor system, so it's sort of scripted.
So, it's, they just, like, they know they are in a dialogue situation, so they will spawn one of the dialogues that we prepared.
When they interrupt, they get interrupted by the reaction system, and they go back.
They might continue the conversation where they left it.
So, but into the reaction system itself, there's no dialogue coordination.
Hi Roxanne, I was curious to know if you came across behaviors where two AIs spoke with each other in a way and if you saw something interesting in terms of that aspect.
Like for an example, if you had two AIs following you in an alley, did you have like a messaging system that like one of the AI goes in?
in front of you to fight you and the other is like trying to see if you're trying to run away and then tackle you or something like that.
So I'm not sure I understood your question.
You mean that if we had some situation where AI had an interesting emergent conversation or?
No, what I meant was internally, like let's say there are two people, imagine that they're following you.
One guy is trying to fight you from front, but what if you try to run away?
Then there's another guy at the back who's trying to stop you from running away.
So it's some kind of communication between both the AIs that, you know.
Yeah, everyone that is targeting someone will have information about this target.
So if I'm fighting someone and he runs away, I know the distance and I can make a decision.
toward the distance when I try to follow them.
And if they jump a wall and I see I cannot pathfind, well, I might abandon.
So that's, yeah.
Do the AIs plan out the logic?
No, there's no communication except I know information on my target and I know information about the events around.
So for the combat AI, we do have squad tactics, we have communication between them, but it was, it's, what we call advanced mindset that we don't want to have on any civilians because it's too costly.
But we could potentially, with this system actually, it spurts it that we could upgrade the civilians to an advanced mindset and then you will be able to communicate with others.
But we don't use that really often in the context of the game.
Thank you. No problem.
Hi Roxanne, thanks for this talk, it was quite fascinating to me.
I worked on the crowd systems for Horizon Zero Dawn.
I was wondering how you handled the spawning of NPCs for Watch Dogs 2.
So are they very tight to the location where you spawn them, or do they move between areas of the city?
Like how does that factor into this reaction system?
Yes, so we have an occlusion spawning system.
They are quite tied to the location because we wanted a specific visual stereotype to stay in their own district.
We didn't want them to change too much, so that's why we did it this way.
But yeah, they spawn in a bubble around the player and we have this LOD thing going on.
I don't, it didn't work specifically on the spawning system, so that's about what I know on it.
Okay, thanks a lot.
No problem.
Hi.
Hi.
My name is Bilgam.
My question is about the stimuli and reaction that happen between, say, person A and person B.
I can understand how person A does something and it creates a stimuli, and person B sees it and reacts to it, but sometimes it seems like the cases would become interesting stimuli out of this combined.
A doing something and B reacting to it becomes a stimuli.
But then how do you control that to still stay a finite number of things?
Yeah, it was a problem for sure at the beginning.
So we created limiters for any really, I would say, loud behaviors.
So, for instance, if you have two people that want to punch the same target, we have a limiter system saying like this target is already reserved I cannot punch it so I will decide to fall back to observe instead and we use that for many situations where it was potentially a problem. Hello Roxanne. Hi. So you mentioned that your NPCs became bipolar at some point I was wondering how did you deal with those oscillation concerns?
I mentioned, sorry, can you repeat, please?
You mentioned that your NPCs became bipolar because they would switch around too many things.
I was wondering how did you deal with those kinds of oscillation concerns?
So I mentioned we dealt with AI switching between emotions, that's it?
Yeah, I mean, those kinds of problems are common in open world games.
Another question I want to ask, which is related, is so there's a marriage proposal going on.
and a bomb explodes across the street.
Now you don't want those people, when they bail out of that behavior, to go back into the managed proposal.
Yeah, but that's why we use cool down.
So basically, if I want to go back to an action that is in the relaxed mood, which is most of the action of the game, like walking or washing a window or having a conversation, I will always have a cool down.
So if I'm happy, I'll be like, ah.
And then I go back to, so it helped us giving a logical transition for an emotional state to the relaxed mood.
Okay, so that was the mood system would take care of it.
Yeah, exactly.
That's why we introduced it because otherwise it was unreadable.
Thank you.
No problem.
Hi.
Hi.
I don't have a question actually.
I'm Mathieu, technical director on Watch Dogs 2.
So I just want to take a moment to say, even if I had a wider impact on this system, it mostly took all my attention, because of how passion it can be on this subject.
So we'll be together at the booth, at the launch.
So I'll be happy to share the same passion as her.
If you have more questions, we'll be on Wednesday at the Ubisoft Lounge.
So me and Mathieu can share more about the animation system if you're interested into that.
And we can answer more questions if you want.
All right, thank you.
Don't go far.
Stay here a sec.
All right, we've got 15 minutes left, or 11 minutes, excuse me.
wrong glasses right now. So I'm going to put Roxanne on the spot a little bit and but don't answer if it's gonna get you fired or something. I don't want that on my conscience. In the spirit of kind of a post-mortem-y thing, what went wrong? What was something that you just said, oh wow, if we had only known or we went down a rabbit hole too far and by that time it was too late?
What's something that you think, looking back, it would have been better to approach something in a different way or that you've neglected to do?
I would say our biggest challenge was the audio pipeline.
It was our biggest blocker because if you use an audio pipeline that is traditional for systemic dialogue like this, it's really hard because you decide to create it, and we were into an iterative process, right?
So we decided to create this behavior, and then the other guys will know, and they have to write the lines, go through recording, and bring that, and then we see it in the game.
And sometime it didn't fit with the intention of the behavior, so it was really hard to manage.
And so I guess that the audio pipeline for this kind of system is something you really want to work on and make sure.
that it fits systemic actually.
So we are working on solutions for this, but I cannot reveal any of our strategies, sorry.
Let's encourage, no that's not, that'll get it.
Was there anything else that you thought was something that was, go ahead, stay in the center.
Well actually, down the process, having the personality and the emotion system, We really did it during production.
It's something I want to make sure we do it in advance next time and that fits more in the system.
We also have this, I mentioned it earlier, but the combat AI is not emergent and they look dumb.
When our civilians are trying to interact with combat AI, for instance, they look more intelligent because they react to everything, but our combat AI don't, so they are just.
continuing, continuously trying to warn them to get out of the layout or stuff like that, and they are like, but I don't want to, and they continue their own stuff.
So we have some conflicts like that because the combat AI is really straightforward.
Okay, well, that's cool.
Give me one, what is your favorite thing that you ever saw happen in the game that nobody planned?
that just emerged from the emergent AI.
Give us one little anecdote of this made it for me completely, this made everything worthwhile.
There's a lot, so it's such a question.
Because we saw a lot of really cool videos that YouTubers and people on Twitch did and it was like wow, that was not supposed to happen, but it's awesome.
One of them is, At some point, there was a player that tried to, he had a fight with a lady, and he punched her down and she dropped on the ground.
Oh, sure, that's hilarious.
No, no, that's not the hilarious part.
Oh, there's more, okay.
So cops arrive, and they go to the lady and they wake her up, which is like, oh, great, they saved her life.
But the player is beside and they don't arrest him.
And I'm like, why are they not arresting Marcus when he just punched the lady down?
And he wake up the lady and decide to arrest her instead.
And the reason for this is because she's the first one that threw a punch to the player because the player just tried to insult her.
And she got angry and she punched him.
And he punched her back.
But the police decided it was a.
Her fault. Anyways, it was really funny. I liked it.
It reminds me of my entire junior high era.
No, he did it first. Oh, man.
Exactly.
Anyway, I'm obviously, for those of you who know me, I'm a big fan of emerging AI, and so this kind of stuff is, I love it.
So, thank you again, folks.
Let's thank Roxanne. Fantastic material.
Thank you.
