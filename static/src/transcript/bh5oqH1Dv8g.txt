on Wednesday to our session, Rules of the Game, five further techniques from rather clever designers.
I want to remind everyone to turn off your cell phones or other noise-making devices.
Remember to fill out your evaluations after.
We really do appreciate the feedback in those.
And this is a session where we get five illustrious designers to get up and talk for 10 minutes each about a rule they use in game design.
We've done this session for a number of years now.
You can go check out some of the previous editions on The Vault.
Some of them are up on YouTube as well if you want to see them there.
But what do we mean by game design rules?
You know, I found that some designers are actually sort of resistant to this term, that there being any sort of rules to game design.
My friend Daniel Cook, when we were talking about it, he said, you know, rules are highly context-sensitive, rarely make interesting predictions for the project at hand, and have very little analytical power.
I think he actually wrote that in an email.
He didn't say that in person.
But he didn't think rules were maybe the way to be going.
And Eric Zimmerman, who authored the book Rules of Play with Katie Salen, doesn't like rules either.
He said, because game designers tend to be structural analytical thinkers, coming up with grand sets of rules for good design is very seductive, including for me.
Over the years, I have tried to cultivate skepticism towards these kinds of systems.
So why do some people think of these rules as maybe being too constraining on design?
Well, if we think of the digital games that a lot of us make, the rules in them tend to be very fixed, very hard, very fast.
There's only one way you can play the game, and the computer doesn't really take into account your feelings when it decides on these rules and decides on implementing these rules.
And you can't put the Tetris piece anywhere but where Tetris will let you put it.
Things change a little bit in the board game space.
We've all heard about house rules with Monopoly, right?
Maybe you go over to a friend's house and they play where you get all the cash for landing on free parking.
Many other variants that allow the people who are playing it to have a good time.
You might think chess has a more fixed rule set, but if you might not have talked to my children about that.
When I was playing with them, I realized they had worked out a very specific way to handle when you get your pawn to the other side and you get back another piece.
And I said, well, that's not really how this rule works.
And they didn't care.
And if anyone has been engaged in intense scrabble games at friends' houses, often those have very personal rules to keep them peaceable so they don't turn into something like this.
You know, I find that, you know, some people get really into their Scrabble and really into their weird set of rules for it.
I just love that this is the picture you get for Googling Scrabble fight.
But I think even more so when you move into the world of RPGs, rules become even more malleable.
Like the goal of a DM is to sort of take the players on a journey, like challenge them enough, but not too much, not make their death arbitrary and seem just a result of a bad die roll at the wrong time.
But to give them a chance, to change the rules a little bit to help them move along in the campaign.
If we think about, too, if we move into a world of sort of art games and things like that, this can be even more important, like in a game like Brenda Romero's Train, where, you know, as you realize what the game is doing, you realize that the deliberately limited rule set allows you to sort of subvert those rules and try to stop what you realize you're doing.
Now, last year, Luke Muscat did a talk as a member of this very session, which I encourage you to go check out.
And he talked about, his whole point was forget rules.
Rules don't matter.
Make goals your game.
That's what you should be giving your team, not rules, but goals.
And he used slightly more colorful language when he talked about it in the session.
So I gave my own version of this talk a few years ago at another conference.
And this was where the talk was called, What My Parents Taught Me About Game Design.
Now, my parents are not game designers.
They haven't really played a lot of games, to be honest, though my mom is a lifelong, to this day, baseball enthusiast.
But I use this talk as sort of looking at how they have raised me as parents and how that informed how I thought about players and how you treat players in your game.
And this talk is up on YouTube if you want to go check it out.
But I'll just give you a spoiler.
These were sort of the three principles that I found.
I extracted from how they treated me and thought of how that's how I end up treating my players in my games.
And I have a little bit of an addendum to this.
This is a picture that I like because it shows my dad, but also my long flowing locks from long ago.
And in the last year, my dad actually passed away.
And as I was going through the process of working on the eulogy and going through memorial service, I ended up talking to a number of his students.
He was a lifelong psychology professor.
And they said that one thing he always said to them was, are you asking the right questions?
So let me give you an example of what he meant by that and how he interacted with me one time.
So he was a lifelong lover of books.
These are several of his favorite books that I now have.
And he talked about this one specific book that he gave me was Powers of 10.
So somewhere around when I was 8 or 10, I had asked about the relative size of planets or something like that.
I don't really remember what the question was.
And he didn't have the answer.
And a couple of days later, he came back with this book and said, here you go.
And I said, what is this book?
And he's like, well, you're asking about planets.
It's all in there.
So this is a book that's, I don't know, some of you may be familiar with it.
It's sort of a look at scale in the universe at large, right?
And it goes from a sort of an intergalactic scale and zooms down more and more at orders of 10 as it gets closer and closer, till it finally zooms through some guy's hand in a park in Chicago, and then goes down to the subatomic level.
And again, this wasn't a book really suited to my age at the time, but it had great pictures.
I found those cool.
And I've kept reading it over the years.
And it sort of just reframed the question.
Again, it was like, well, you're asking about size of planets, but here I can answer that.
But here's this much more interesting set of questions.
This will expand how you're thinking about the subjects you're interested in.
So I appreciated that.
I appreciated that he challenged me that way.
And I encourage you, as you're looking at the talks we're going to have here today, to look at these not necessarily as a rule you must follow, a rule that is exactly the answer to your problems, but as something that just helps you reframe a problem you may be having in game design.
It helps you do the game design work that we all do in different ways.
Now.
I must confess my inspiration for this intro partly came from seeing Powers of X as a reference in Sorin's talk coming up.
Aaron will also be asking you if you are asking the right questions of your players.
Later on, Stone will show you how he made a board game for a movie he was too young to actually see, while Josh will tell you why he likes to write only half a story.
But first, we have Raph Koster.
Raph Koster is widely known for his work in online games, going back to MUDs.
Since then, he went on to work on some of the first commercial MMOs in Ultima Online, later Star Wars Galaxy.
He now works as an independent designer in a wide range of games, both digital and analog, and a variety of game-related projects.
I give you Raph Koster.
Hi.
So this is like my little rule.
It doesn't really necessarily mean what it says.
This is an idea I've had more than once, right?
Like literally, I've now made four or five games about trying to capture the feeling of playing a kaleidoscope.
The thing about an idea like that is that it can really kind of go either way.
It can be about the math of kaleidoscopes, like how they tumble, or it can be about the sensation of a kaleidoscope, like the human experience of tumbling or being lost in a landscape.
I'd like to say you can start from either end, right?
I mean, have a strong idea for a game system, a set of mathematical relationships, a set of dynamics, or maybe you have a really strong narrative or experiential idea, and that's fine.
Different designers often have really different tendencies, right?
They'll start from one end or the other.
And that's perfectly fine.
Like, often board game designers start maybe with a bias towards the systems end.
And certainly AAA games often start with a bias towards the experience end, art games, many indie games.
And we'd never say...
hey, you can reskin this Telltale game any way you want and think that we still end up with anything that we'd call the same game.
The experience wouldn't be intact.
But we'd also, we wouldn't say, hey, let's swap out the conflict resolution mechanic in poker either and think that poker remains intact.
I mean, it changes it substantially.
Starting with either end, then, they're both super valid, since by the time you're done, you really kind of need to have both ideas in place.
You really need to have your experience and your system idea in place.
Because after all, almost no games are purely experiences or purely abstract.
It's just rarely a thing.
But starting from one end to the other does have a whole bunch of implications.
And certainly in my experience, I've found it's really important to move towards the middle pretty quickly.
Like let's say you start from the system, which I often do, especially because I'm doing a lot of tabletop work these days.
If you don't move to the middle, you can pretty quickly get stuck with an abstract game, which FYI, abstract tabletop games are really hard to market.
You might end up with like really simplistic narrative.
This is how you end up with, okay, so we'll provide the experience by wedging cut scenes in between levels of something, you know, that kind of really simple way of providing something.
Finding an experience or a metaphor that fits the system quickly is a better path, even though a strong system idea can usually be skinned in a lot of ways, right?
Like, think of chess sets, for example, from Lord of the Rings to, you know, I think in Theory of Fun I said chess boards designed around different types of snot, right?
You can play chess with all of those.
It's all good.
Well, maybe not the snot, but you know.
So if you start, though, from the narrative or experiential end of things, there are pitfalls starting there, too, right?
If you don't ever get around to developing a systemic core.
One of the biggest is your game's consumable, and these days it might get consumed on Twitch long before it gets played at all, right?
So that's a real risk these days.
you often have to spend disproportionately on content.
You might end up making tons of small mini games.
And of course, each of those is still a game that you have to balance.
So it multiplies your testing time.
It multiplies all of the work, the system design work.
All of these issues have to do with the fact that you can always layer missions and narrative and static data on top of a sim, right?
It's really hard to go in the other direction.
Trying to add rich emergence to a game built out of data is usually somewhere between hard and impossible.
We'll get into these development projects and think that a bunch of disparate pieces of content will add up to a system and that just almost never happens.
It's just really unusual.
So this matters because game longevity, which matters to me because I want my art to live for centuries, but also because it includes a bunch of stuff that drives revenue, if you like eating, right?
It's driven by how much space the game can have, right?
And despite what we might want as creators, a lot of the power in a game experience actually comes from a loss of control, right?
It comes from letting players have the actual authority over the experience.
And so.
What gives that?
What is it that gives that core sim?
The three critical ingredients I end up looking for.
First is a space that is an interesting mathematical or structural landscape.
And by this, I mean a physics system meets that.
Interesting relationships between objects, like the relationships between suits and numbers and colors and a deck of cards is an interesting landscape of relationships.
I look for it to be simple with only a few rules, even though it might have room for tons of data.
And what usually works is a way to have lots of kinds of data that work on top of the same underlying sim.
And then you can stack as many separate rule systems on the sim as you like.
So poker leverages the set of playing cards, but so does blackjack, and so does go fish.
Pokemon leverages Pokemon types and attack types, rich systems.
And then lastly, I look for that set of relationships, that sim, to not actually have implicit goals.
I want it to be a toy, right?
I want it to allow players to create their own goals on top of the system.
It doesn't mean then that you can't layer goals on top of that, right?
You can have AI with goals.
It doesn't mean the game can't provide as many goals as you want.
It means the system itself doesn't imply them.
We choose them then based on the narrative or experience that we want to provide.
Because there's a difference between a system that all you can do is get to the other side and a system that says, here's cool movement physics, let's build portal, right?
So.
Just some examples of how I've tried to leverage these.
Star Wars Galaxies, right, sadly departed, was built entirely around real-time procedural terrain that was generated around you as you walk.
And that sounds like it was a content tool.
But it actually opened up all this emergent and narrative gameplay because of the tools that it provided us.
And that was actually why I wanted it, was for the game systems I can build on top of it.
Because we couldn't have had players having massive rebel versus imperial wars with destructible bases that could be built anywhere on the map unless we had an underlying sim that provided you fungible terrain.
There's this little game, happily not departed, 20 consecutive years as of September.
In this game we started out with a resource system that was intended to drive all the AI.
Every object was made of abstract resource types, and all the AI in the game was designed around Maslow's hierarchy of needs.
And this was a really cool, ambitious, crazy system that we weren't even able to ship with.
Because it broke.
But it didn't matter, because we'd set up that underlying resource model, and it was so powerful that even though the AI never made it out there, it unlocked everything about things like the crafting system, which unlocked emergent things like color-coded guild uniforms, player shops, player-driven economy, player-run cities and governments, and all this crazy stuff.
Right?
And, of course, similar ideas are actually, you know, Minecraft uses an underlying resource model and simple rules and look at all the amazing stuff that comes out of there, right?
And even in, also dearly departed, even in really small, simple games like My Vineyard, which is a game I did on Facebook, you can see this idea working.
We knew what the experience we wanted was.
You run a vineyard, right?
I mean, pretty straightforward.
You might remember that in Facebook games back then, the map would get bigger just by kind of growing around the edge, right?
They'd just expand on all sides, and objects were all one to a tile, right?
But we use this idea that, well, but the vineyard's yours, so you would want to shape it.
So we allowed you to carve away the forest.
step by step. Island Life, which was the game that immediately preceded this, we think, we don't know, was the first Facebook game that we know of that did this, and it allowed you to make discovery the central idea of the game, which meant not just discovering things that were hidden on the map, we did that, but also discovering new kinds of grapes, new wine varietals, new ways to do layout.
It made us think about placing objects at pixel granularity rather than tile granularity, which hugely opened up the amount of play and led to crazy maps like this that just couldn't be done in something like a farm build, right?
Huge explosions of creativity, which then led us into new features like maybe we could have vineyard tours across all of the Napa-themed vineyards in the entire Facebook ecosystem.
And so...
It led then to having one of the highest ROIs at Playdom, one of the highest retention figures at Playdom, even though it didn't have anywhere near the same size user base or daily revenue numbers, right, as many of the other games.
But on a pound for pound in terms of how much we spent on it, it actually was richer.
So, Even if you begin with the idea of a particular experience you want to give players, my rule now, my thought, my rule of thumb is the first thing you should do after that is start with a sim.
I've just consistently found it to be super helpful for the eventual depth of the game.
So that's my rule.
If I have an experience I want to get across, the first thing I ask myself is how do I model this experience as math?
And it ends up opening doors that I never expect.
That's my rule.
you Raph. Our next speaker is known for her work on a wide range of smart fun games as a teaching professor at Carnegie Mellon's Silicon Valley campus. Previously she led design at Glass Lab and she's also the author of the Chaos Knight trilogy fantasy series.
I give you Erin Huffman-John.
OK.
So my name is Erin Hoffman.
John, I am obsessed with precision.
It makes me feel safe.
So I have a question for you.
How many of you come to GDC to learn?
Yeah, most of you, right?
That's why we're here, right?
I've got a question for you.
What's learning?
Yeah.
So you can answer this in a couple of seconds, right?
I would say that if you don't have a clean, fast answer to this question, it is impossible for you to know whether your mission to learn at GDC is successful or not.
So this is going to be my story of how I learned that the way that I playtest and the way I think I playtest are actually two different things.
And it also leads to my rule which is ask players the right questions.
So in 2011, I joined the Glass Lab.
It was a massive collaborative effort between a lot of acronyms.
So ETS, SRI, EA, Electronic Arts, IOP, the Institute of Play, all coming together to try to bring AAA game development practices to education to create transformative database about...
educational experiences.
And through the process of working in this collaboration, I encounter people who are really masters in the art of asking the right questions.
So one of our partners was ETS.
They make the SAT, more in acronyms.
And what the SAT is, is a incredibly carefully constructed series of the right questions.
And we could argue about whether the SAT is good or not, but at the end of the day, it is actually intended, and you can Google this, to be a social leveling tool.
It means that wherever you come from, you can be measured against the same razor as everyone else.
So it's intended to raise people up.
It might not be a great razor, because all of our razors are flawed, but that's its purpose.
It's to achieve self-actualization, and that is the purpose of education, is to take people and give them the power to be able to become whoever they want to become.
And so in the process of creating those questions, we have these incredibly thoughtful scientific people telling us whenever we said, this is what we thought we were doing, they would say, well, but have you thought about this?
Because that's what science does.
It constantly questions.
And at Glass Lab, we were trying to hit this incredibly precise marker, which was to achieve a measurable educational outcome using a video game.
And through the process of discovering how hard that was with these people who were specialists in asking the right questions, I realized how coarse our objectives usually are in video games is to create fun.
And it might be like shooty fun, or puzzle fun, or fast fun, but at the end of the day, it's fun.
If you want to go on a side mission, you can Google people having fun.
And you get lots of stock images like this, which is really funny to me.
Because it's like, is this what we really think having fun is?
And what's going on in the minds of each of these people?
Is it really fun?
And that guy at the top, what's going on?
Like, and the relationship between them.
I could stare at this image for hours, but I'm not going to do that, thankfully.
So we were actually given SimCity 5.
It was this beautiful game and allowed to take it into schools.
We had to make changes to it.
And we actually started with a bunch of the wrong questions, because we had a lot of assumptions.
We thought that the question we were asking is, here's all the stuff that SimCity can teach, we just gotta pick a thing, and we're gonna take it in schools, it's gonna be awesome and easy, right?
Because SimCity is an educational game, and teachers already use it.
But as we just started to move through each of these ideas, we realized, oh no, that system doesn't work, this one's full of misconceptions, this one's not right.
Finance, civil engagement, all of these things that we think SimCity does, because it feels like they do, were not actually real when you try to look into the.
actual teaching science of how those things are taught inside of classrooms.
Which isn't to say that SimCity is bad.
I actually think that the people that make SimCity, hi Stone, are wizards.
What they do is magical.
It's a game that makes you feel smart even if you're not smart.
You don't have to be smart in order to be good at SimCity and yet it makes you feel powerfully intelligent and that is a magical transformative thing.
But when you dig into each of these things, we tend to think of SimCity as like creating a whole generation of civic planners.
But if you ask civic planners what SimCity does, they say, oh no, actually it's full of all these misconceptions that might actually be harmful to our profession.
And by the way, the way that it portrays electricity is not at all right either, which of course it's not right.
It's meant to feel right, not to be right.
And so eventually...
We landed on isolating one of the systems inside of SimCity, the pollution system, that actually did both align with middle school science standards and was right.
And we made a game out of that.
The way that we got to that was by stepping back and trying to find the right question to ask.
We asked the question, how does SimCity make you feel?
And how does that feeling attach to something that kids need to learn?
How can we transform them through the experience of that feeling?
And once we started asking that question, everything started getting easier.
And then we ultimately did make a game that teachers loved.
Partly they already loved it, it's a great game.
But also it gave them a way to bring it into classrooms in a way that they hadn't been able to do before and it became quite popular.
And then we actually were trying to do data analysis to try to actually turn SimCity into a test of sorts.
It was kind of a terrible idea.
But when you look at the data that was coming out of SimCity, it was just this torrent of stuff that our assessment experts could make no sense of because it's so massive.
And so with our next game, we decided to start with the question at the core.
First we started with what should we teach?
We did this big meta-analysis, our learning designers attacked this, and they eventually came up with argumentation.
Because it's under-taught, it's a leverage point, it's new, teachers don't really know how to teach it.
And from there, we asked the question, what is the single most important thing we could teach a sixth grader about argumentation?
And that question is at the heart of this game.
The mechanics are built from it.
Everything that we ask the player to do is intended to perform the question of whether or not they understand that, which means the game from its core is built that way.
And then we used a pre and post test.
There's this idea, of course, from science, from education, but it's something that you can do with a game, where you test where the player is when they start, you get them to play the game, you test to the other side.
And then you can iterate and discover whether you're actually achieving your goals.
The end result was a statistically significant improvement in the kids' understanding of argumentation.
And this was also validated against an external measure.
So we had a separate test that we knew was already a valid measurement of argumentation, stood our game up next to it, and found a statistical increase.
I want to linger on that for a second, because this is the young lady's illustrated primer, if you're familiar with Neil Stephenson.
This is the interactive object, which is infinitely replicable, which can lift people up.
through education.
And I think that's a really powerful idea.
I hope that we make a lot more games this way.
So back to playtesting.
If you Google what you should ask when you playtest, you get this kind of series of horrifying questions from the internet.
At the end of the day, it's like, was it fun?
There's lots of variations on, was it fun?
And I have a lot of problems with that question.
Some better questions are things more like, how should the player feel?
And these are questions that you have to ask yourself, because in the process of discovering the right questions that you need to ask players, you have to ask yourself the right questions about what you're even making.
Because most of the time when we start, we don't ask that question of ourselves as precisely as we should.
So the usual play testing questions we tend to ask are categorized as stupid questions and usability questions.
The usability questions are actually really useful.
The game needs to be usable, software has to be usable.
But we ask these dumb questions about what part the player likes best.
The real problem with a question like this is that what you say is, was it fun?
And what they hear is, please validate my existence, I might kill myself if you don't.
They know what you're asking, and they see right through you.
So they're going to start gaming that question.
Binary questions are usually a bad idea with play testers because they're going to try to find what you think the right answer is.
And I would say about usability, though, you do have to fix the usability.
The game has to be accessible.
It has to be accessible to a specific audience that you're intending to strike.
And in SimCity EDU, we actually had that problem in particular because students of middle school age were not necessarily the intended audience of SimCity.
So there were a lot of adaptations we had to make for that.
At the end of the day, what we were trying to do with SimCity EDU was actually, and Mars Generation 1, a lot easier than what we have to do with commercial games because our objective was so precise and we could just measure it and iterate against it.
What we're trying to do with video games is a lot more abstract than expressive.
That's a hard thing to get a question around.
But I think that if you break down the idea of what fun is, you can look at it through the lens of what specific emotions are being created.
What are the experiences that we want to evoke in a player?
And if you throw this sort of palette at them, Then it gives you a razor against which to measure your intent versus what the player is actually experiencing.
So it gives you something testable.
We did this in Mars Generation 1 a little bit.
We mapped where the player would start emotionally and then where we wanted them to end up emotionally and then we attached that to the idea of the competency itself.
So there's a transformation that we wanted to bring about that was purely emotional because we knew that that's what games do.
They actually evoke feelings, all media do.
So I would say that what you do is identify the emotional transformation that you want to bring about in the player.
And that starts with asking yourself the right questions.
The questions of what is my real intent?
What is the outcome that I want?
Is the intent that I have actually precise?
If I create these emotions, is that unlike anything I've ever seen or does it remind me of something else?
There's a lot of questions in that process.
Then you can actually create a pre and post test or at least a series of survey questions if you don't want to think about it that scientifically about what you're gonna ask players in order to reveal how will I know that they're feeling what I want them to feel?
Because emotions are really hard to pin down.
And I would just linger on that for a moment too, to say you can use pre and post tests in video game development. This is something that I don't think I've ever heard talked about, but it's something that we can do, measuring both where they start as well as where they end up, as opposed to just asking them at the end whether they liked it or not.
So again, good questions.
What is the core emotion and the core emotional blend?
Is that blend unique?
And do my mechanics perform the feeling of that by themselves?
If they don't, they're probably the wrong mechanics.
And then for players, what were you feeling?
What does this remind you of?
It's a whole little bit sideways.
It's not direct.
Because you ask a direct question, they're going to game the question, which people who design the SAT certainly know as well.
I would say as a warning that this can be a habit forming process.
I hope that it is.
Because once you start to look at your game this way, with this level of precision efficacy, it can become a transformative process for your own development process.
And I would also say that it's okay to iterate the pre and post test.
Something that I think we didn't realize was that if you start out with the wrong questions, we thought, oh, we're screwed.
That's terrible.
It's not.
Part of the process of the process of using these questions is to sharpen your idea of your intent.
So you can change the questions and then keep working against them.
And that's it.
Thank you very much.
Next up, we have someone who is most known for perhaps for his involvements with Civilizations 3 and 4.
He now runs indie studio Mohawk Games, who shipped not that long ago Economic RTS Off-World Trading Company and recently announced their next game is 10 Crowns.
He's also on the advisory board for this very conference, so you can direct your complaints to him.
I give you Soren Johnson.
Thank you.
Hey, everybody.
All right, so three strikes and you're out.
This phrase is so common, it's basically an idiom.
Indeed, while some of our non-American friends here might be baffled by baseball in general, they probably still know this rule.
However.
It's not actually true.
The batter is not out after the third strike.
It's only when the catcher catches the ball that the batter is out.
If the catcher drops or misses the pitch, then the batter is not out and has a chance to advance to first.
This almost always results in an out as the catcher simply picks up the ball and makes the easy throw.
But occasionally, this little-known rule can become a big deal, as it did in last year's final game in the playoff series between the Chicago Cubs and the Washington Nationals.
Max Scherzer threw a third strike past a swinging Javier Baez, but watch what happens.
The Nationals catcher Matt Wieters missed the ball between his legs, allowing Baez to safely make it to first base. This would have been the third out of the inning. Instead, the Cubs scored two more runs and later won the game by only one run in advance to the next round. Thus, an obscure rule knocked the Nationals out of the playoffs. Where exactly did this rule come from?
It actually reaches back to the very first time the rules of baseball were put down in print by the German Johann Christoph Friedrich Gutsmuth.
He outlined something called English baseball, which was a game of innings with a batter, fielders, safe bases, and scoring at home plate.
However, there were no strikes or balls yet.
The pitcher stood close to the batter and more or less delivered the ball as a soft lob to be hit.
The pitcher wasn't trying to challenge the batter.
The game was about fielding the ball after it had been hit.
However, what happens when there is a terrible batter who can't hit anything?
In Gutsmith's game, he has special rule for this situation. On the third swing, the ball is automatically in play, whether it's hit or not.
So the batter will run to first either after hitting the ball or missing for the third time.
Indeed, there is no catcher to receive the ball, so the pitcher would need to run to home plate to pick it up and throw to first.
In 1845, the American Knickerbocker Baseball Club writes down their rules for the game, and some things have changed.
The pitcher is now much farther from the batter and throws the ball horizontally, which requires the new position of catcher.
However, they preserve the logic of the old gutsmith's rule, that the ball's in play after the third miss swing, like old legacy code lying around.
The strikeout is actually emergent gameplay because after the third miss, the ball is now technically in play, and the catcher turns it into an out by simply catching the pitch.
Thus, there is no actual difference between the catcher making it out from catching a pop-up and the catcher making it out from catching the pitch after a third missed swing.
In each case, the ball is now live, and the catcher makes it out by catching the ball before it hits the ground.
However, they had to patch the game later on because of an unintended consequence of not taking the time to make the strikeout an official rule.
Because the ball would be considered live after a third strike, the possibility for a cheesy double or triple play existed.
For example, if the bases are loaded, then the catcher can intentionally drop the ball, pick it up again, step on home plate for an easy out, and then throw to third, and then onto second for two more.
Therefore, in 1887, they added a new rule so that the batter would automatically be out if a runner was on first base and there were less than two outs.
Thus, three strikes and you're out, the way everyone assumes baseball is played, is true, but only under a very specific set of circumstances.
They opted for an ugly patch instead of just rewriting the rules to match how the game was actually being played.
Indeed, think about the situation with Javier Baez.
There was a runner on first base.
So even though the catcher dropped the ball, it should have been a strikeout, except there were two outs.
So now we're back to the original drop third strike rule again.
Think about it.
They could have just rewritten the rule so that three strikes and you're out applies at all times.
Wouldn't that be simpler, more intuitive?
Why go to the trouble of fixing the one glaring issue with catchers intentionally dropping the ball and not just get rid of the old vestigial rule?
The reason is that we inherit our game design from everything that comes before us.
Sometimes this inheritance is obvious.
Civ 6 inherited from Civ 5, which inherited from Civ 4, and so on.
Sometimes a designer inherits from the games he or she played as a kid.
Mario led to Braid, Myst led to The Witness.
Sometimes games inherit from themselves.
This is a timeline of the development of our economic RTS, Off-Road Trading Company, and you might make certain development shortcuts or hacks early on, just so that you can get your prototype playable.
But then these assumptions are now baked into your design, whether you want them there or not.
You have to remember that it was an accidental or arbitrary choice.
The most common thing to inherit, however, is game mechanics, usually from the games in the same genre.
For example, although Offroad Trading Company is an RTS, it's notable for being one without units.
However, we didn't start there, as we inherited from all the other RTSs before us, StarCraft, Age of Empires, and so on.
Thus, we had scouts, builders, transports, pirate ships, police ships, and so on.
Over time, we discovered that this inheritance was weighing the game down, forcing the player to spend time wrangling units that would have been better spent playing the market.
Slowly, we took these units out one by one.
First the transports, then the combat units, then the builders, and finally the scouts.
The game looks like a radical break with the past, but it took us a long time to get there.
The problem is that iterative design can be a trap, that you can no longer see those parts of your game that are holding you back from a much better design.
It's easier to make small changes that fix glaring issues, rather than to re-evaluate your entire design.
Sometimes, a problem with a game's inheritance can be at the conceptual level.
Consider Spore.
which was conceived of as a powers of 10 game that went from cellular scale all the way up to galactic scale.
That was the hook, the point of making the game.
This part of the game was widely seen as a disappointment, that the five disparate levels felt like five different games duct taped together.
However, something interesting happened with the failure of Spore, which is that it wasn't actually a failure after all.
This is how many people are playing Spore right now, which is not bad for a 10 year old game.
In fact, check out this chart which compares Spore to the two most successful PC games released that same year, 2008.
Spore currently outpaces them both, and keep in mind that Spore didn't even launch on Steam.
What happened was that the most interesting part of the game did not come from the Power X concept, but from the editors inside the game, especially the creature creator, which dynamically animated the player's creations.
However, these editors were developed midway through the project.
Maxis started making a game about one thing and accidentally ended up making a game about something else.
One of the big unanswered questions about Spore is what could we have done if we had been able to ditch the powers of ten concept and refocus the game on the editors?
So here's a classic case study in inheriting bad design.
Creep denial is a mechanic in the original Dota where you kill your own units to keep your opponent from getting gold and experience from them.
Indeed, creep denial is one of the focal points of high level play in Dota to maximize your experience point gain relative to your opponents to out-level them.
However, it's an open question whether this is actually good design.
At the very least, creep design is accidental design, because Dota inherited it from Warcraft III.
This was simply how that game handled killing your own units.
Indeed, the fact that Warcraft III even allowed killing your own units was likely an afterthought by the designers.
So, Dota inherited this rule because the game was literally built inside of Warcraft 3 as a mod. Thus, MOBAs inherited a ton of design and mechanics from Warcraft 3. The original Dota designers may have wanted many things to work differently, but they really didn't have much of a choice given the limitations and assumptions of the Warcraft 3 editor.
Dota 2 and League of Legends, of course, inherit their design from the original Dota mod, but they made different choices about their inheritance of creep denial.
Basically, League dropped it while Dota 2 kept it.
This is a Reddit thread on why Creep Denial is not in League.
Don't worry about reading this, I just want to point out how a random Dota guy is trying to explain why Creep Denial is bad for the design using the game mechanics themselves.
This is pretty typical reasoning for something that has become part of a game design's inheritance.
The burden of proof is always on why it should be removed from the game, not on how it got added in the first place.
However, I have a simpler explanation for why Creep Denial is a bad design.
I mean, come on, you want your players to be spending their time killing their own units?
Is that really a core part of what makes MOBAs work?
The game would fall apart if you couldn't kill your own guys?
Aden perhaps sums it up better than I ever could.
So at some point, you have to step back as a designer and reevaluate your inheritance.
Does the core gameplay survive without the feature?
Is the feature unintuitive, making the game harder to understand or to pick up?
Is there a better way for players to be spending their time than on this feature?
In the case of Creep Denial, the answer to all those questions suggests that the game would be better off without it.
There is only one magical core feature to MOBAs, the one feature that cannot be dropped, and that is taking the scope and complexity of an RTS, but focusing the player's controls onto just one unit, which makes the game accessible to a much larger audience by an order of magnitude.
Everything else, everything else is just accidental inheritance resulting from the game's origin as a Warcraft 3 mod.
In fact, although League doesn't have creep denial now, they actually started with it.
These are League of Legends' very first patch notes, published in July 2009.
They inherited creep denial, but as you can see, you know, highlighted here, they killed it very early. So although they got it from the original mod, they were willing to critically examine their game's past.
In contrast, here's the history of creep denial from Dota 1 to Dota 2.
You can see an awareness that creep denial might not be the best thing for the game.
So look at, like, for instance, 6.82.
Denied creeps now give less experience.
A clear sign that they want to weaken this feature by rewarding players less for focusing on creep denial.
However, instead of ripping it out, they're making small changes around the edges.
Basically, they're doing what baseball did when they patched the drop third strike rule by making it not apply in certain circumstances instead of just getting rid of the rule itself.
Remember my questions on the value of creep denial? Does the core gameplay survive without the feature? Is the feature unintuitive, making the game harder to understand or to pick up? Is there a better way for the players to be spending their time than on this feature? Running this exercise with the drop third strike rule gets us to the same place. That is bad accidental design that is ultimately hurting baseball.
Now here's a comparison of the two games and some other MOBAs.
There are many reasons why League outpaces Dota by an order of magnitude.
An almost three-year head start is a pretty big one, but I also believe that Riot's philosophy of re-examining their inheritance from the original Dota mod, which extends well beyond just removing creep denial, is a very important piece.
Now, I also have thoughts about last hitting, but fortunately, I don't have time for that.
I say fortunately, because Heroes of the Storm, which is the only one of these three to drop last hitting, is less successful than Dota 2, let alone League.
Thus, I can't really make an argument that the market has proven that last hitting is bad design.
Further, I don't think it would be reasonable to expect Riot to experiment with dropping last hitting at this point.
It's just too late.
League is one of the world's most popular games.
Indeed, they are lucky that they dropped Creep Denial so early in their development before doing so might have split community opinion.
We don't always have the luxury of looking at the game to prove our decisions, which is why re-examining the game's inheritance is such a difficult and important issue.
Choosing to erase your inheritance takes real bravery.
Sometimes you have to trust your own rational design process if you see a problem.
Sometimes you have to go with your gut.
Ultimately, you must be willing to see your history, know how it led you to where you are today, and then have the courage to drop the past.
Thank you.
Next up, our next speaker has been making RPGs for quite some time, going all the way back to his work at the illustrious Black Isle Studios on Icewind Dale.
After a stint working near me on a gauntlet game that we don't need to speak about, Josh moved on to Obsidian, working on titles like Fallout, New Vegas, and the Pillars of Eternity series with Pillars of Eternity 2, Deadfire, Shipping Soon.
I give you Josh Sawyer.
Hello.
By the way, if you want to deal with a nightmare of legacy design, make a party-based fantasy role-playing game.
For real.
All right, my talk is about how I always try to give 50%, or how I learned when to stop telling a story and let the player tell theirs.
If any of you have played in a D&D game, or run a D&D game, or any sort of tabletop role-playing game, you have probably had an experience where your players take the story off of the rails.
A lot of computer role-playing games try to emulate the tabletop role-playing game environment.
We do this in a lot of different ways.
We can try to emulate the rules themselves.
We can try to emulate the aesthetics.
whether that's in the lore or the visuals of the game.
But in a lot of cases, especially at Obsidian, what we're trying to emulate is player choice, player choice and player consequence within the context of a story.
Being able to make your own character, express that character, and have it have an impact in the world.
In my experience, playing tabletop games and running tabletop games, the best dungeon masters and game masters are the ones who improvise.
They construct some idea of a grand story, or maybe they just have parts of a neat story in their mind, and when the players screw it up, they don't fight against it.
They let the players go, and they let the story run away, and everyone has a great time. Because it's a little bit of what the dungeon master prepared, and it's a lot of what the players brought to it as well.
in a CRPG outside of the mechanical systems, which is, I think, an interesting contrast.
Because if you look, for example, at a game like Divinity Original Sin 2, which is much more oriented around the play of the game and experimentation with things.
versus something like Pillars of Eternity, which is more traditional and sort of tabletop based, we're not there to improvise with the gameplay content.
So what we have to do when we're constructing the story is effectively try to think about a wide range of players sitting across from us and imagine the types of things that they wanna throw back at us.
Ideas about what types of characters they wanna play, anything from the sort of equipment that they brought, their background, what spells they have, what skills they have, if they wanna be an asshole, if they wanna be a smart ass, all of this sort of stuff.
By the way, it's not exactly 50%.
That's just an idea.
So I'd like to talk about some of the ways at Obsidian that we try to step away from really being strict about how we author the story and let the player bring their own sort of ideas into it.
One of this is trying to eliminate as many critical characters as we can from our stories, letting the player kill virtually everyone.
Here are a few examples of this in play.
The first is Yes Man, Eternal Yes Man from Fall at New Vegas.
In Fall at New Vegas, you could kill every single character in the world except for children.
And there was one character who was a fall-through character.
His name was Yes Man.
He was a robot who would do literally whatever you asked him to do.
And he was the fall-through, so he would help you with the independent path.
And even if you pissed off every single other faction head, you could still go back to Yes Man to progress the plot.
So we wrestled with the idea of, well, if he's your fall through and he allows you to get through the plot, how are we going to stick to our guns and say, um, let the player kill them? Well, the lucky thing is that he's a robot and he's an AI that gets downloaded into other robots. So we actually allowed the player to just blast Yes Man right in the face and he would die and then a minute later another Securitron robot with his face would roll on up and he would say, I'm sorry, I must have made you really angry. I'll try not to do that again in the future. Now how can I help you?
So technically we adhere to this while still allowing the player the agency to pull out whatever weapon they wanted and blowing them away And by the way, a lot of players did do this every time they'd go back to talk to yes, man They get a new mission objective and they'd say hey, thank you. Thanks, man Blam and they'd walk out the door and then they'd come back get a new mission objective. Thanks again. Yes, man You're the best Blam Another example of this in play is the blood pool from pillars of eternity We put a lot of effort into our companions Arguably too much.
We write a lot of companion dialogue.
We spend a lot of resources on unique character art, but we don't require the player to take these characters along with them.
We don't require them individually.
We don't require them as a group.
You can play through these games completely by yourself if you want to.
Sometimes you might even really despise a companion.
So we added the blood pool in Pillars of Eternity.
It is a pool full of blood.
dedicated to a crazy god.
And at the blood pool, you can sacrifice a companion that you really just don't like, and you can get a stat boost out of it, and every one of your other companions is extremely horrified by what you've just done, and you can do it.
By the way, if you bring your save game into Pillars of Eternity 2 Deadfire, we remember that you did that.
So get ready.
Some other stuff that we try to do is account for the weird and the funny.
By the way, this is a place where really we're starting to get away from the idea of system-driven design.
This is more about, again, these like sort of weird edge cases that you come up with where, you know, how many times have you been in a tabletop game?
I'm just assuming everyone plays a ton of tabletop games.
And a player tries to do something really weird.
They have some desperate, like, they have some item they try to use in some last ditch effort, and they manage to save the day, and it's really great.
So we try to figure out ways to account for these really weird situations.
It's a niche of a niche, but when players find it, and we hope that a player will find one of these things in every playthrough, they feel really rewarded for just carrying some stupid crap around with them or picking one special background that comes up in a really cool circumstance.
One example is the corpse checker from Icewind Dale 2.
One of our designers at the time, Damian Filetto, he realized that there were three quests in the game that required you to carry around a dead body.
And we never got rid of those dead bodies.
So you could be carrying around a dead man, a dead woman, and a dead cat.
They weighed a ton.
There was no reason to carry these things around, but some players kept carrying these things around.
So at the end of the game, there was a character who would start talking to you in the middle of his dialogue.
He would go, are you carrying around three dead bodies?
Are you a crazy person?
And he would start going off, and he's like, wait a minute.
I think maybe I've underestimated you.
I don't think I really want to mess with you.
You know what?
You can just go off on your own.
It'll be totally fine.
And it was just, again, this weird little niche thing for people who decided to carry three corpses around with a son.
The Psycho Squad in Fallout New Vegas, there is a quest called Flags of Our Foul Ups written by Travis Stout.
And there is a group of soldiers called Misfits.
They were horribly incompetent NCR soldiers.
And they were trying to get into shape.
And you could train them.
You could go the normal way.
You could teach them to throw a grenade, teach them to shoot a gun, teach them all these things that you need to know so that they weren't huge screw-ups.
Or if you were carrying around an enormous amount of psycho which is a combat drug that makes you go crazy.
You could say, you don't need to be good soldiers.
Just take a bunch of this drug.
And that would actually resolve the quest for you.
And they'd be like, wow, awesome.
All we got to do is take this drug?
That's really great.
So you would resolve the quest and go on your merry way.
And then at the end of the game, they actually performed really well in combat.
And then they went on a murderous spree.
And they wound up being hung for war crimes.
So this is a.
We always try to have these long-term payoffs for these little things that the player can do, in this case, carrying around, I think it was like 25 doses of Psycho, which is really sort of excessive.
And then finally, Eric Fenstermaker's know-it-all nihilist from Pillars of Eternity.
Eric Fenstermaker was really a champion of letting the player establish their background and then develop it early on in the game so they could really get a sense of who they are.
This ties into another point that I'm going to go into in a second.
So if you took the philosopher background, you could talk to this character Kalisha in the early game, and you could say, yeah, I'm a philosopher, and I believe this, or I believe that.
And one of the things you could say is, like, I don't really believe in anything.
I believe this is all an illusion.
This is a bunch of fakery.
And that sort of marks your character as a nihilist.
And it came up maybe a couple more times throughout the game.
There's a Pillars of Eternity spoiler here.
Sorry.
So at the end of the game, when it's revealed that the gods are not real, if you picked the nihilist background, you get a special line that says, I knew it.
Again, this is these accounting for the weird and the funny things that the players pick.
So sometimes it's important to just ask the player why they're doing what they're doing.
I mean, ask it narratively within the context of the game, not as the designer themselves.
So why ask the player why?
Because it makes them ask themselves why.
Why am I doing the things that I'm doing?
One of the first examples is the Animancy Trial in Pillars of Eternity.
So you are given exposure to animancy, which is the science of reading souls within the Pillars of Eternity universe.
It's used for some good things.
Very often it's used for some really bad things.
A lot of characters in the world have different opinions on it, and by the time you get to this point in the game, you've really seen a lot of these examples, and you're asked, because of your experiences, to testify to the Duke.
about what you think about animancy.
And this is a way to really get the player to think about, well, you know, I've been kind of playing through the game and I've seen all of these things, but what do I really think about it?
And obviously you can only account for so many opinions, but it is a nice way to make the player go like, okay, well, I'm playing this character and I've seen this, so well, I think this.
And it just helps really sort of ground the character and their understanding of who they are in this world and being able to express it instead of just having it inside their head.
Another example is Arcade in Fallout New Vegas.
I apologize that I don't have any credit for this art.
I found it on Tumblr.
And as you know, if you try to find the original source of something on Tumblr, you will never find it.
So Arcade in Fallout New Vegas is a character who is pretty moral.
He's with the followers of the apocalypse.
And if you go to Caesar's Legion, to Caesar's camp, Caesar is a crazy dictator.
And Arcade stops you, and he's like.
What in the world are we doing?
We're accepting an invitation from a dictator to go over and talk to him.
He enslaves people.
He's torturing and crucifying all these people.
What could you possibly hope to get out of talking with this guy?
And this conversation is partially a way for you to try to either mollify, arcade, or to maybe just think about it yourself.
Like, well, what am I trying to get out of this?
You know, you got an invitation and so you're doing a quest, but are you doing it because you really want to hear him out?
Are you doing it because you want to get some sort of advantage with him in the future?
Do you want to get close to him?
This is a way again of getting the player to really think about the motivations for why they're doing what they're doing.
By the way, there are sacrifices to doing all this crazy stuff.
It is a lot of work.
We write a lot of dialogue, and a lot of that dialogue comes down to making choices available to the player.
Also, when you allow people to just kill everyone, you do have to handle that.
It's a lot easier to just say, no, this character is invulnerable.
You don't have to deal with them.
In Pillars of Maturity 2, we actually have faction heads.
So we have four factions, and we have multiple faction heads for each faction, and we keep them separated in different scenes to prevent the killer from taking or the player, sorry, the player who is a, the player.
who is a murderer, from wiping them both out in one fell swoop.
So you do have to do a lot of work thinking about all the contingencies for this stuff, because it's not systemically driven.
It's all custom content.
If you want to make a hero's journey, goodbye.
It's not really great if you're trying to make this big emergent thing.
It does not survive the process, because players love screwing with hero's journeys.
The scale and the scope of the impact of the choices that you make, especially if you litter the game with it, has to be, by its very nature, relatively small.
If you want it to be all over the place, it can't be earth-shattering.
So you have to try to take solace in the fact that you have a very rich game with lots of little outcomes.
If you try to make massive changes at every fork in the road, it's going to take you forever.
Also, you need to think about the scope of player voice, motive, and identity.
When you allow people to play a wide range of characters from beatific saints to psychotic murderers, your player voice is going to have to cover a range.
And you have to decide as an author how wide you wanna make that range be.
Because you can't account for everything.
You can't account for every single thing the player can do.
You shouldn't try to do that.
What you should try to do is think about it from the player's perspective.
Think about the person sitting across the table playing D&D.
and what they might want to bring into the story that you've created a framework for.
That's it, thank you very much.
our fifth and final speaker behind his professional work going back to Maxis on things like Spore and SimCity as we heard earlier.
He also teaches classes at Carnegie Mellon and now is a lead designer at Riot Games.
And earlier today he told me that his name is pronounced to sound like Brandy, which some of us are thinking about right now.
Is it being the end of the day?
I give you Stone LaBrandy.
All right, thank you.
So ever since I was a kid I've been making paper games.
This is something I've just always done.
I went and saw Star Wars when I was young, super impressed by that movie, and immediately had to make my own board game based on Star Wars, where the Rebels are trying to blow up the Death Star before it rotates into position and kills the Rebel base.
This is a game that I made based on Rollerball, which I was too young to actually see, but it looked like the most awesome movie ever when I was a kid.
And I was just like, I've got to play that game.
It's a futuristic death sport. How does that work?
So, like, just looking at advertisements and reading reviews and things, I've kind of pieced together my own rollerball game so that I could play it and see what that was like.
And for me, building these paper games, it's really just a way, like, making the rules, making the pieces.
It's just a great way to understand the systems, the relationships between all of those systems, and it's something that I still do today.
So it's not really probably too much of a surprise that my rule here for the day is to play it on paper.
So even though I work with digital games all the time, I still try to do as much on paper as possible.
So when I gave my first GDC talk in 2009, it was about paper prototypes on Spore.
I'm actually curious if anybody here was at that talk.
Anybody?
Oh, actually a couple hands, surprise.
OK.
So yeah, nine years ago.
And that middle bullet point there was I didn't have time to actually talk about how to make paper prototypes.
I was just talking about the ones that we made during that project.
So I'm actually nine years later going to patch that little hole in that talk and fix that.
So by the way, this isn't up on Vault for some reason.
I think it's too old to be on the Vault.
But it's up on my website at stonetronics.com if you're interested in checking that out later.
All right, so first of all, this is what not to do.
So I thought I'd get that out of the way.
Sometimes when people think, like, I'm gonna make a paper prototype of my computer game, so let's make every unit, the entire campaign, and add in an expansion pack while we're at it, and let's just try to make this the most complete thing we can possibly get.
But actually, the truth is you need to do the opposite of that.
You need to make it as small as possible and then make it smaller after you've figured out what that small is.
So let me talk about four different ways that I kind of think about the problem.
So first of all is state your intention.
Why are you even making this prototype in the first place?
What is the key question that you're trying to answer by building this?
And there could be a lot of reasons for this.
It might just be something that people on the team are asking, that they're confused about.
Might be a question that you have yourself, but the game's just not far enough along in development for you to be able to answer that with the game.
And so this might be a way of jump starting or bootstrapping the process really quickly.
And the second thing is, what's the scope that you're going to be trying to tackle?
Like, how much of the game are you going to try to do?
And like I said, it's like the smaller is probably the better.
So just one simple idea, like maybe you want to know how much potions should cost or how often the potion should restock in the store.
So very specific, very key question, part of the game, just to see how that might work out.
Maybe you want to expand a little bit more and go for a session.
session might be let's say you're doing a farming game and the the fall season's coming up and you want to know how people are going to allocate resources So you can make a little game that kind of tests out what kind of resources you would need and how many there might be Now you can go out and do the full game and unlike the StarCraft example that I just gave When I said the full game, it's gonna be a very narrow slice of the full game So in this example here, it's like maybe I'm just curious about how players will allocate skill points as they go from the beginning of the game to level 50.
And so we're going to go through the entire game, but we're only just going to be looking at a very simple system, which is how skill points are allocated.
And finally, maybe you're going beyond that.
You were just wondering about the metagame.
You don't really even care about the actual game.
You want to know about the reward systems that happen between each game and how the player may, say if it's a deck building game, how they may modify their deck as new cards come into the environment, their choices change, and their options change.
The third thing is really to specify the purpose.
Why are you making this thing?
What are you really trying to get out of it?
So one thing that's kind of common is like I just want to do this mechanical simulation.
I can't play it yet, so I'm just going to pretend to play it.
And I kind of caution against this because computers are really good at doing this and paper's terrible at doing it.
But it can still come into play at times.
It still can kind of work.
If you're really concerned about distances, cause and effects relationships, things like that, you can kind of mock these things up.
The opposite of that would be something very abstract, where this is something a player will never see.
It doesn't actually occur anywhere in the game, but it's a way for you to get information about the game and how the players are going to perceive the different systems from a very high level.
So the player may be down in the game, but you want to know everything.
In this case, maybe it's the relationship between monsters and weapons.
And maybe you're just concerned about the emotional engagement.
You want to know how players are going to feel, how they're going to respond to certain events.
So say we're making a skateboarding game and there's a combo system.
Are players going to laugh when they fail the combo?
Are they going to get frustrated?
What kind of surprises are going to occur?
Are they really cheering together at the same time?
And so you can kind of gauge the reactions in that way from the players.
And then the fourth thing is the time scale.
How relative to what the actual game will be running, what is your paper prototype?
How's that going to be working?
And so it's a pretty common case that it's going to be much slower than the game that you're working on, the intended time scale.
And this might be a case of, let's say you're working on a shooter game, and you want to understand player decisions and reactions, and how they respond to different events.
So you make this little card game.
Maybe each card takes a minute to play while people think about it, but in the actual game, it's a second while they pull the trigger or push the button.
You can go real time as well.
Again, this is a little dangerous.
Computers are great at this.
So maybe it's just better to do this in the computer.
But I have seen some examples where you just want to test reaction time.
You want to see if a player is under pressure, how does that change their decision making process?
Are they able to still make great decisions or really crippled decisions based on the time constraints that you're putting on them?
And then it's also kind of common to do the faster, where your game is going to play out much, much faster than the actual game, the video game.
So let's say I'm making a campaign-style game where these tribes are attacking each other, and the main part of the game might be the battles.
But I'm going to just simulate those with a simple die roll, because I really want to see how the continent is used, how the land is used, as the tribes start to spread out across the world.
All right, so those are kind of like the four things.
Like, why am I even making this paper prototype?
Where is it happening in the game?
What's the purpose that I'm trying to get out of this?
And then the when, like what part of the time is that really happening?
So those are all kind of little toy examples that I gave.
So let me give some real examples here.
I'll kind of end up with five of these.
And this one is from when I worked at Blizzard North.
We were on the Diablo team, but we were asked by Blizzard South and Irvine if we could come up with a card game that would appear in World of Warcraft.
And the idea would be that you would kill a monster in World of Warcraft, and it might drop a trading card.
And if you collect enough of these cards, you could build a deck, and then you would go into a tavern, and you would play this tavern game inside of World of Warcraft.
Never got.
Picked up they ran out of time to do it But that didn't stop us from making hundreds of these cards and playing this game at lunch pretty much every day for a couple a couple months So for this one the intention is just mentioned. It's like what would that card game be?
How could you play it in a tavern inside of WoW?
Our scope was session based that we were trying to figure out like what a session of this game would play like But we're also really interested in the metagame like again how the cards would change over time as we introduced new factions and things into the sets a very mechanical simulation.
It played out a little bit slower than what we'd expect.
It's a card game in WoW and a card game in real life.
So they're fairly close.
But when the computer shuffles for you and keeps track of status effects and the like, the game actually would play a lot faster on the computer.
This is another one, Never Saw the Light of Day.
This is from Blizzard North where we were looking for something to do besides Diablo.
So we decided to make, pitch an idea that would be Diablo but set in the StarCraft universe.
So science fiction Diablo if you would.
We call it Starblow.
Not the best name.
So one part of that was figuring out, what are all the weapons?
You know, Diablo's a lot about collecting all these items.
So what would these weapon sets be?
How would they all work?
And so I made these little trading cards and they were outside my office.
And originally they were all blank, like the two that you see in the middle.
But I told the artists that if you give me art, I'll put it on the card and I'll put your name on it as the illustrator of the card.
And that started this little kind of competition among the artists, like grab the cool weapons and do the art for them first and get them to me so they could be on these trading cards.
And there's something about like, oh, you know, this could have been just a spreadsheet and it didn't need to be these actual trading cards.
But making them tangible, making these things, things that actually got passed around, really added a lot and got the whole team kind of involved in the idea of what these weapons could be.
So the intention to get the feel for...
The weapon sets, just a single idea, very abstract, it would never really appear anywhere in the actual game.
And I said timescale none, but kind of thinking about it also is kind of, it covered the whole game because we knew where every weapon was, what act they would appear, how they would be unlocked over time.
This is from working at EA on the Simpsons game.
And my job on that project was the lead designer of what we called Living Springfield, which was the place we could run around with Homer and Marge and everybody.
And so we just kind of set this up in the middle of the design pit and just kind of grew this map over time.
to really try to figure out where all the different key locations would be within Springfield.
So we started out with the first one was just all cardboard boxes that we cut up in yellow sticky notes, and then it got cooler and cooler as we iterated throughout the course of the project.
Trying to figure out where the Moe's Tavern is compared to Duff Brewery, compared to Homer's Home.
So very mechanical in that way that we really wanted it to be very precise to how the map would end up being in the final game.
And then we didn't really play like a game, but it was very fast in the sense that we could see the entire scope all at once.
This was from the expansion pack from Spore.
This is called Galactic Adventures, and by this point we knew Asorin had mentioned that it's all about the editors.
And so this expansion pack lets you make your own stories and games in Spore.
And so we knew that the editor was going to be key to this process.
So to mock it up really quickly, we just got, as you can see, just a bunch of paper, cut it up, and then we had people come in and pretend to play the game.
And they would say, like, hey, make a story for me.
And it's like, hey, Joe, and he's got a key.
And his friend Amy comes in.
And we would just make these cards really quick and cut them out and put them on and simulate that whole process.
So, it was mostly a kind of a UX study to validate interactions, the session scope.
And originally, I think the intention was more of a mechanical purpose, but we got really into the emotional engagement became more important as we saw people actually, oh, look, they really care about these stories.
How can we kind of really let people express themselves through this product?
And fairly real-time in the beginning, it was kind of slow because we were cutting out the cards, but we actually got pretty fast as more and more people came through because we already had a lot of the elements that we needed to play with.
And this last one is from Riot.
When I very first started working at Riot, I had the opportunity to pitch five different little games.
This one, just as a disclaimer, is not being worked on at Riot.
So the idea though, was that it would be a turn-based fighting game with the champions.
And it looks kind of like a card game, but actually each card is an action that you could take.
So it's more like each card is kind of a button that you could push as you worked your way.
And I guess technically this isn't a paper prototype because I laser cut it out of acrylic because I was really into the laser cutter at the time.
So, this one, the intention was a pitch document, which is why that I was justified, probably poorly, that I could spend all this time on this and make it look really cool, but I really wanted to get people excited about it.
I really was like, hey, this could be like, right, it's the next game, so I wanna do like the best forward facing pitch on that, that I possibly could.
Covered the full game, very mechanical, like one-to-one simulation of how the game might actually play out.
Turned out to be like super slow timescale.
It would take like 30 minutes to play the game, and when we finally did the first kind of Unity prototype, I think we could play a game in like three minutes, because there was so much stuff that the computer was doing for us that you would have to do manually in the board game.
Alright, so that's it. Some quick final thoughts here. One is always write down your goals before starting on a paper prototype.
Like as your first piece of paper and pencil, like write down why you're doing these things.
And just get that out of the way and make a statement because it's so easy to just kind of sprawl and go off in all different directions on these and lose your focus because you eventually kind of really get into it as a separate project instead of just answering that one question.
One size doesn't fit all and that basically any one of you who is going to try to do this or maybe already does this Already knows they're all unique. They're all different So I gave you several different examples that kind of cover everything Guaranteed your things will be different than what I showed here It doesn't need to be fun. People get caught up on this all the time where like, you know, the paper prototype is not very fun So therefore the game we're working is gonna suck But the purpose of the paper prototype is not to be fun.
Maybe it would be, and that's great.
If you can achieve that, then more power to you.
But you wouldn't go into it saying that we're trying to prove the fun, because ultimately, the paper and the digital version are just not the same thing.
And then kind of getting to this last point, it really doesn't even need to be a game.
You're not trying to make something where there's a winner and a loser, and it's got the whole flow that a normal board game would have.
You're really just trying to experiment and answer questions as quickly as possible.
So that's it. Thank you very much.
