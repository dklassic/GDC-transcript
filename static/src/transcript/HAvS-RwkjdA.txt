Hi everyone.
This is, welcome to System Centric Puzzle Design in Patrick's Parabox.
Hi, I'm Patrick.
I mainly do programming and design.
I've been making games since around 2011, mostly freeware games as a hobbyist.
And in March of 2022, I released my first commercial game, which is called Patrick's Parabox.
This is a, oh, thanks.
This is a block-pushing puzzle game with a recursive twist.
It had about a four-year development time.
And halfway through development, it won the IGF Excellence in Design Award.
Could I get a quick show of hands of who here has played the game?
A lot of people.
That's very cool to see.
Thanks.
So I'll still explain the core mechanics.
So here's a gif of the gameplay.
You can see you push boxes around, but there's also this blue box, which is a container for other boxes.
And if you squish it against a wall, you can enter it and push other boxes into it, and you can push them out.
This is a really cool system I discovered while I'm prototyping, and it ends up giving rise to lots of compelling mechanics and puzzles.
Here's another GIF showing a situation where this blue box actually contains itself.
So if you exit from the blue box, you will end up back in the blue box.
This gives rise to even more puzzles with recursion.
So, these two GIFs show the core of this system that I discovered.
But there's also more recursive mechanics that you end up, it gives rise to as well, such as what if a box contains multiple copies of itself?
Or what happens if you push a box outside of itself causing a paradox?
Or what happens if the player character is itself a box that can contain other boxes?
It's like wild stuff can happen.
So what I mean by system-centric in this talk's title is that this system that I have happened upon, discovered, is something I find legitimately super interesting and compelling and I want to tell all my friends about it.
So my goal in making this game is to showcase this recursive box system.
On the flip side of the coin, players' motivation when playing the game is that they want to see more of this system.
It's exciting to see what new mechanic is around the next corner.
And this great system that I luckily discovered happens to be very generous in that there's a lot of things it has to show.
So, I'll give a selection of, sorry, a design sort of post-mortem, a bunch of snippets that apply to this game, but maybe you can apply it to your game, whether or not it's a puzzle game.
So, one thing I did, thinking about showcasing the system, was I tried to keep an approachable level of difficulty.
So, relatively easy compared to other games in the hardcore puzzle genre.
because my goal was to showcase and communicate things about this cool system, not necessarily to challenge players or to stump them or other goals that I might have.
I did this because it's my personal preference, but also this really unexpectedly broadened the audience of the game.
More people could get into it who weren't otherwise really good puzzle players, but they could get into it and maybe even make it a lot of the way through.
To show some examples of making an approachable difficulty, here is a puzzle on the left where this is a puzzle about, you start in this little left pocket where you put yourself and the blue box into the green clone box with the entering on the correct side, such that when you exit on the right side of the level out of the green clone box, things are positioned correctly and you can solve the little maze.
On the right, here's a simpler, easier version of this puzzle.
It's about the same basic idea, but now the constraint on the right is simplified and easier.
Once you get the cool recursive idea, you can then move on without any unnecessary roadblocks.
The right puzzle is the one I use in the game.
Here's the puzzle on the left where there's four blue boxes and your goal is to separate them so that there's one space in between each.
And you have to utilize the two green recursive boxes on the right and do a cool recursive trick in order to separate them.
On the right, here's a version of this puzzle with only three boxes and more empty space, which gives you more leeway.
So now all you have to do is recognize this recursive trick, and there's no tight box finagling or finessing that the left puzzle has.
So there's less friction.
I ended up using this puzzle on the right, but I did still like the cool complications that the left one has, so I left it in as an optional puzzle.
On the left, here's a puzzle where your goal is to enter into this green box.
But you can't do so directly because there's walls on all four sides of it.
You have to utilize the other three boxes in the level to do so.
On the right, here's a version of this puzzle where this green box is constrained in this little cranny inside the wall.
So you can't move it.
So this constrains the number of possibilities in this level.
So there's less things to do that aren't the solution or related to the solution.
So you can get there quicker.
So to codify some of these things I did, I tried to simplify puzzles as much as possible.
I tried to make puzzles as easy as possible while still showing their core idea, while still communicating what they're about.
I removed some solution steps that were unnecessary or too hard.
When appropriate, I trimmed the possibility space, so less things to do that weren't the solution or weren't related or I didn't want to be possible.
And in general, try to keep the puzzles bite-sized, because they're more like, hey, did you know you can do this cool thing?
Isn't that cool?
And oh, here's another one.
I'd rather keep people keep showing you things.
So there came a point, there's a question, though, of like, well, how easy is too easy?
Because for some of these easy puzzles, players would stumble into the solution without understanding what happened, or they would not understand mechanics at a very deep level.
which is not great, but I decided, well, I'm okay with this happening sometimes, as long as I'm making this trade-off in favor of, or in service of, making the game more approachable and streamlined.
And this is sort of maybe a controversial thing, or there's some subtlety involved here about sometimes it is bad, but just sharing my perspective that it worked well in this context.
Okay, so puzzles don't exist in a vacuum.
They're surrounded by puzzles before them, after them, and on all sides of them.
Here's a sequence of three puzzles where A introduces a new mechanic, and B and C expand on it in more complex and difficult scenarios.
A play tester was having trouble with C, and I realized, oh yeah, that's kind of an unfair leap from B to C. So, I added this puzzle N, which bridges the gap.
And this was an improvement.
N was a nice puzzle.
But another player was still having trouble on C. And I thought, well, I like C, but I'd rather not have people get stuck on it rather than move on.
So I did just that and made C an optional puzzle.
So now after you solve N, you can just proceed onwards.
This is the kind of thing I did a lot in the game with puzzle ordering.
Here's another example.
So here's seven puzzles, the first of which introduces a brand new mechanic.
It's the infinite exit mechanic.
And then there's six other puzzles that gradually give you more practice in more complex scenarios.
When I play tested this, it just didn't work that well.
The introduction was just confusing, and the constraints were clear.
They were just weird abstract puzzles that you couldn't quite grasp.
So I cut the, ended up cutting these five puzzles.
And the two I didn't cut, they were actually okay, and I kept them with some changes.
And here's what I ended up with next.
I added a better introduction to this mechanic that's more clear, and I added two better reinforcement puzzles to reinforce your knowledge, and not doing what I knew didn't work in the first time.
And I added two optional puzzles, which are the ones in the lower right there, that were also good.
So this was an improvement.
But then another play tester had trouble with this mechanic at the very first puzzle, which was they thought, well, they thought this mechanic put them into a loose state, but it actually doesn't.
So I was, I thought well let's just add a level that shows you that.
And actually I was able to add four levels that clarified this doesn't put you in a loose state.
And this constrained environment actually ended up being kind of having nice puzzles.
So now I have an even smoother introduction to this mechanic.
Which was great.
I tried to apply this kind of iteration across every single puzzle sequence in the game.
So each of these boxes is an area in the game, and if you squint or look closely, each of those tiny little boxes in there is like a sequence of puzzles.
Just showing this to show the scope of the work, I tried to be diligent and do this for every sequence.
So to codify some of these things, the general verbs I did was inserting a puzzle, modifying a puzzle, deleting a puzzle, reordering a puzzle, or optionalizing a puzzle.
And I did these in order to patch up conceptual leaps, improve tutorialization or clarify misunderstandings, insert puzzles to reinforce knowledge, or give someone a second chance to learn something if, for example, they stumbled into the solution in the first instance.
And also to manage play time, because I want people to be moving through the game and not get hung up on a puzzle.
Even if it's good, I have so many other things to show.
I learned to treat this kind of puzzle management or puzzle ordering as its own distinct skill when making this game.
And I found this skill to be just as important as the skill of making puzzles in the first place.
Here's a GIF showing the tools I used to, for example, insert a new puzzle into this sequence of three, so now it's a sequence of four.
All I do is drag the puzzle into the ordering, and then I can recompile the game, and all the connections work.
No additional configuration is required on my end.
Having this tool be quick and joyful was very nice, because I was making so many of these changes, and I would rather encourage myself to do lots of these things, as opposed to if the tools were slow or miserable to use.
related, I also did not have puzzles in the hub area, even though that would be cool, it's like a recursive game, so why not have puzzles and puzzles?
But I was iterating on this order so much that I would have been breaking them all the time, so I made a trade-off there.
And it was good, iterating on the puzzle order a lot helped.
related to this, unlocking leniency in puzzle games.
So on the left, here's an older version of the game where you can see this player has gotten stuck in the third puzzle in this area.
And in this version, if you get stuck on a puzzle in the main line, there's no other option.
You are stuck.
You've got to solve it in order to move on.
which is bad.
On the right, I made this change in the latent development where it looks more like on the right where you can see this player has now made it through a lot of puzzles because at any given point I made it so that you have access to multiple possible puzzles to make progress on.
This is very common knowledge in puzzle games to always have multiple paths available but I'm just mentioning it here to stress that this is very important in making the game more approachable.
And I want to be generous in showing people cool stuff about the system, not putting roadblocks in front of people.
So, I've talked about puzzles and puzzle ordering, and I got information on how I want to change those things based on playtesting.
And I want to endorse a specific format of playtesting, which is video recordings with the playtester narrating their thoughts out loud.
This is more work for the play tester, because they have to set up a recording software, and also it takes effort to narrate your thoughts all the time, but I found it worth it.
With the video, you can see all the little things and attempts players do in puzzles.
With the voice narration all the time, you can hear their theories of what they're trying and thinking about the system, and what their emotions are at different times.
You can measure time taken on different parts, so if a part of a puzzle takes 10 seconds versus 20 seconds versus 60 seconds.
videos are rewatchable at later dates so I can see what a playtester six months ago thought about this puzzle and what was the state of the puzzle at that time.
And to get, so that's the video format, and here's the, to get more specific about opinions, here's past Patrick's, Patrick's Parabox playtesting preferences.
So, I'll list off a bunch here.
I tried to get fresh playtesters, I'm tripping over my, I'm trying to get fresh playtesters every time because you can only experience a new mechanic for the first time once, and these mechanic introductions are exactly what I want to get smooth.
Non-expert players were very helpful, because players who had lesser skill would encounter more stumbling blocks, and a lot of those stumbling blocks are the kinds of things I want to fix to get people streamlined through the game.
I tried to pay very close attention to players' mental models, so I knew where to, for example, clarify misunderstandings.
I try to treat small bumps that players encountered as potentially very important because that could be a big hurdle for another player.
Again, thinking of streamlining the game.
I like to do batches of one or two playtesters at a time in order to give each playtest video due attention and respect that playtester's time, because I would watch this video in detail and take copious notes.
I tried to get playtesters who would play the entire game, so as to not, of course, neglect the whole second half of the game.
Personal learning, for me, was to watch the whole video and take notes before making changes, as opposed to pausing the video every time I wanted to make a change, because that would give me more context by the end of the video, and it would just help me work more efficiently.
And I did these play tests every so often, whenever I felt like the game was ready for another batch of feedback.
So it was nice to have a more or less constant in the background thinking about iterating on this puzzle ordering, as opposed to like backloading it or something.
Side note, it was difficult to find players who I knew who were non-experts, were willing to record themselves and narrate their thoughts, and were willing to play the full game.
But those players are also by far the most helpful play testers.
I did about 15 of these full-game video playtests throughout development, not counting other formats of playtesting, but here's 15 videos.
By the end of development, I thought, oh, I'm reaching diminishing returns with doing these playtests.
But actually, after releasing the game and watching people play, I realized, no, actually, I didn't reach diminishing returns.
All those little changes and puzzles I was editing and inserting at the very end were actually doing great work, and I'm glad I did them.
And I could have done more.
So that's a learning for me, is I'm gonna keep doing lots of playtesting.
Okay, now I wanna switch gears a little bit and talk about making puzzles.
To me, the purpose of this recursive box system, I thought of it as, it's not like that the purpose of the system is that it can make cool puzzles.
I like to think of it as, the purpose of the puzzles is to showcase things about this cool system.
Okay, now here's a list of a bunch of techniques I've accumulated from other people and from my travels about brainstorming techniques for making puzzles.
By far the most common technique I used was finding an interaction in this system and then making a puzzle that forces you to do this interaction as the key move in the solution of that puzzle.
So for example, on the left, here's a situation where you can enter a box by pressing it against a stack of boxes against a wall, which is kind of cool.
And on the right, here's a puzzle that forces you to do that, to construct that stack and then press against it in order to free the box from the wall.
So one thing is like, well, how do we find these interactions that we can then force you to do in a puzzle?
Well, in general, just playing around with the system and exploring the mechanics and you know, normal stuff, just playing around.
But to get to more specific, some things that might be helpful are making a big playground level with lots and lots of objects so you can experiment, and making test levels that test edge cases or extreme cases.
And one technique, which I found helpful to eke out a few more puzzles, which I've learned from Brett Taylor, is to enumerate, list out all the mechanics in the game, and then list out all possible pairs of mechanics, and then for each pair, consider what might a puzzle with that pair of mechanics be like.
So for example, the clone mechanic plus the empty mechanic, or the clone mechanic plus the eat mechanic, or what about clone and transfer?
What about clone and possess?
Clone and infinite exit, and so on.
Another technique was to try interesting or extreme geometry.
So I'll list these out from top left.
A level with no easily accessible upwards facing walls.
Interesting geometry.
Or what about a level with no walls at all?
And it turns out this is actually a cool puzzle.
What about a box that's entirely filled with other boxes?
Or what about a three by three very small recursive area that's fun to navigate in?
Or what about a box that contains eight copies of itself, which creates a really trippy and interesting interaction?
These are what I like to call things almost happen moments.
I really like these.
So when watching a playtesters, sometimes they would try things that wouldn't work out for whatever reason.
They weren't the solution.
But what if those things they tried actually were the solution?
And make a puzzle about that.
So here on the left, here's an example of a playtester who would want to free this blue box from the left wall.
And they try to push this green clone box into it, but it doesn't end up working.
But on the right here, then I made this puzzle where you actually do use these clone boxes to free boxes from the wall.
So I like to think of this as sort of like crowdsourcing puzzle ideas to play testers, which is pretty cool.
Highly recommend this technique.
And it's also another reason why I like to pay very, very close attention to each and every play tester and every minute of their actions to really get into their mental models and make a lot of observations.
These are what I like to call show levels.
So on the left, here's a level very early in the game, which just shows you you can enter and exit boxes.
And there's actually no way to fail this level.
On the middle, here's a level where all you do is enter four levels deep into boxes, and then just go out four levels.
It's just to show you you can go lots of levels deep.
And on the right, here's a level where there's a blue box that contains an orange box, and all you have to do is flip them so that the orange box contains the blue box.
All three of these are absolutely trivial levels to solve.
You might not even call them puzzles, but they still showcase cool things, and players find these levels delightful.
So you don't always need a challenge.
When making puzzles, I tried to be diligent about investigating variations.
So, for example, here I made this puzzle, which I liked.
And then I thought, oh, what would an easier version look like?
And, oh, actually, that ended up being pretty good.
And what would a harder version look like?
Oh, actually, that one's good enough to keep, too.
And what kind of additional constraints could I put on?
Oh, here's another additional constraint, like a weird line constraint.
And so now I have four good puzzles.
So I tried to investigate all these possible variations with every puzzle I made.
I got used to doing lots of digging when making puzzles.
So this game has 364 puzzles that it shipped with, but also over 600 unused draft levels.
And these were levels that were ideas that didn't quite materialize into a real puzzle, or there were older versions of puzzles that did ship, or there were puzzles that just weren't that great.
So at the beginning of development, I got kind of discouraged by this, but by the end I learned not to get discouraged by this, and that it's just part of the process, and there's a lot of trial and error involved.
Related to this, I found that one kind of simple heuristic of what makes a good puzzle system is simply, well, what's the number of, how many puzzles can you make in it?
When making Parabox, early on, it just ended up being that, oh, I can make a lot of puzzles in it, and that encouraged me to continue on with this prototype.
Nowadays, as I make more prototypes, I find it helpful to keep this heuristic in mind when thinking about which prototypes I want to pursue more.
It's sort of just an obvious heuristic of, well, the proof is in the pudding.
How many puzzles can you actually make in it?
Now I want to switch gears again, and lastly I'll talk about a few mechanics a little bit.
So, early on in the game, I faced this, one of many dilemmas I faced about the mechanics was, what if you try to enter a box, but there's like multiple openings on that side of the box?
Which opening do you enter?
I was concerned about this.
And you can see in this image right now the player enters no opening because the player only checks the center spot on that side.
And here you can see it's filled by a wall so you can't enter it.
I then tried this system where you can actually enter any spot and it just prioritizes ones that are closer to the center.
So now it's like a, so you can see with these numbers, number one is in the center and then it sort of spirals outward which ones it tries.
I like this because it was more flexible.
I can make more levels and it, you know.
But I ended up then realizing, no, actually, I don't like this, and I think this is bad, because it's kind of a complex system that I'm introducing, and it felt kind of arbitrary, and like, how do you break ties and stuff?
And also, we're gonna be, this is something that the player has to keep in their mind the entire time they're playing at every level, in addition to all this recursive stuff mechanics are gonna be piling on top of it.
So I reverted to the center-only behavior on the left, and that ended up being a good call.
Here's another example.
I knew I wanted to try this mechanic of, well, I wanted to be able to transfer consciousness of your player into another box so that you can control, like, multiple boxes with different shapes.
My first attempt was to add this little arrow object where you just push a box onto it and then you control that box.
Very straightforward, obvious thing to try.
And this worked.
You know, I can make some puzzles with it, but it kind of felt weird or wrong or arbitrary.
It's kind of a touchy-feely thing, but I didn't quite like it.
I next tried this, which was you transfer consciousness or possess a box when you squish it against a wall, and if you hit a solid wall, then you transfer consciousness.
Otherwise, if it's an opening on that side, you just enter it.
I like this a lot better because this synergizes with other mechanics, because different sides can have different geometries, so you can synergize with other mechanics.
It just felt better.
So I went with this version on the right, and I'm glad I did not go with the first one.
I'm glad I did investigate another variation.
Here's a few mechanics I tried very early on in development.
So I had this, like, a weight object where you could, like, push a weight inside of a box, and then now that box becomes weighted, which means you cannot push it.
It's, like, heavy.
And then I also had an object where you could push the shield inside of a box, and now that box is shielded, which means you cannot enter or exit it.
There's, like, a shield that you bump into around the box, which is, yeah, it's okay.
and then I had sticky boxes which stick to each other when you push them and you can unstick the boxes by putting them on a block edge and using the recursion to unstick them.
These all felt kind of cool and I was like, oh yeah, I kind of like them, but I didn't like them that as much and I want to contrast these with other mechanics that did make it in the game.
which are, for example, a box containing multiple copies of itself, or a box containing a horizontally flipped copy of itself, or, of course, the player itself being a box that can contain other boxes.
These are sort of more natural extensions of the system that sort of almost don't quite feel like mechanics.
I mean, I don't know what terms we're using here, but these felt a lot better to me.
They gave rise to lots of puzzles, and they were just organic.
So I didn't use any of the ones on the left.
So my two learnings from this are always to investigate more mechanics, don't just go with the first things that come to my mind, and try to always think of what's natural, what natural extensions can I do.
Here are three mechanics that did feel natural, but didn't make it into the main game.
So on the left, here's what happens if you, if entering a box takes priority over pushing a box, whereas in the main game it's actually the other way around, the priority.
In the middle, what happens if you exit a box against a wall, if you could squish out and free that box from the wall?
That kind of makes sense.
On the right is what happens if you could push a box around from inside of it, kind of like piloting a submarine or something.
These are all cool, but they just didn't work out for the main game.
They didn't play well with other mechanics, or they didn't feel right, or they didn't make a lot of puzzles combining with other mechanics.
They just didn't work out.
But I still, these were still in my mind and I liked them and I thought they were worth showcasing when I'm thinking about showcasing things about the system.
So I came up with this idea of let's actually include these three areas in the post-game which do have these mechanics but they're confined to that post-game so they don't contaminate the rest of the game and the other mechanics.
So I was happy with the solution.
These are cool puzzles and mechanics.
I'm glad I found a way to showcase more things about this system that otherwise I wouldn't have been able to showcase without this format.
So you might be interested in using some kind of appendix format in your game, or maybe you can think of another creative format thing to showcase more things you otherwise wouldn't have been able to.
All right, so to recap everything.
So my goal in making this game was to showcase this recursive box system that I had luckily discovered and that I found really cool.
To that end, I made the puzzles an approachable difficulty and style because my goal was to showcase, and also this ended up really broadening the game's audience.
I put a lot of iteration into smoothing the learning curve, which I talked about inserting, modifying, deleting puzzles.
I really endorsed this playtesting with video and narration format.
I talked about a few techniques for finding puzzle ideas, like finding cool things that are worth showcasing.
And a few instances where I iterated on the core mechanics of the game.
Here are five online puzzle design resources which I highly recommend.
These have been very influential to me.
Would recommend checking them out.
And here's my contact information.
Thank you.
