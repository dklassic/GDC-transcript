Okay. All right, so we're going to get started. As a reminder, please mute your cell phones.
And I think that's it. Fill out the evaluations. Fill out the evaluations at the end, please.
Thank you. So, yeah, this talks about Pro Guitar featuring Rock Band 3. My name is Jason Booth. I'm the Senior Technical Designer at Harmonix, and I was responsible for design and prototyping the feature.
I'm Sylvain Dubrowski, senior designer at Harmonix.
On Rock Band 3, I was in charge of gameplay systems.
One of the things I did was work on Pro Guitar and Strike Team Lead for most of the project.
OK, for those of you who don't know what Pro Guitar is, first let's check out this video.
All right, so thanks to Fender for that video.
This talk is about Pro Guitar and Rock Band 3 and our experiences making it.
It was a big, ambitious feature, and we learned a lot of things in its production.
So first I want to talk about why we made this feature.
As a little bit of context, in 2008, music game sales were around 16% of North American video game sales.
We knew we had to innovate for our hardcore players looking for a new challenge.
And we knew that...
being able to play real guitar in Rock Band 3 is a good extension of Harmonics' mission, which is to teach non-musicians the joy of, um, making and performing music.
So you might have heard a bit about this in previous Harmonics talks, so I'll go quick.
Um, this is the one question. The one question is a question you can ask about any of your features in your game to see if they make sense.
You can use it to align your team. Guitar Hero's one question is, is it rock?
So you can see likeâ€¦.
Iconic characters with their own over-the-top special moves is a good answer to that question.
When it came time to work on Rock Band, Harmonix added features like Character Creator with user expression, being able to have more realistic graphics, putting tattoos on your guys. Those are all good answers to the question of Rock Band, which is, is it an authentic band experience?
When it came time to work on Rock Band 3, you can see features like Real Instruments.
We added Pro Keys and cymbals to the drums, Pro Guitar, and Harmonies are all good answers to the question, is it an authentic band experience?
So the first pair we're going to talk about is the first three months.
This is where we had a group of senior developers and management to talk about the feature.
Yeah, so I started thinking about this problem space, right?
Of, well, what is it we're really trying to do?
Are we trying to, you know, teach somebody how to play a guitar who's never played one before?
Or is it just really about playing Rock Band with a guitar?
And when I started thinking about this, I realized that they don't actually intersect that much.
And to compound things...
The sort of feedback that we're going to need to give, the information we're going to need to display, actually radically changes as somebody becomes more comfortable with a guitar.
So right off the bat, we established our target audience as being sort of the hard-to-expert rock band players, the people who have been, you know, playing a lot of our game, but they didn't necessarily have guitar experience, but were interested in learning.
And we set a sort of modest goal of like, hey, you know, If these guys are able to sort of play a campfire version of songs at the end of this, then we've kind of won, right?
If we can get them to play, you know, a couple song version of, you know, a couple chord version of some song, then they're going to feel really good, and maybe they'll go on and learn more about guitar and music.
And sort of our approach was to use this sort of ramp we have in our games, where you start out on easy and you're playing a very simplified version, and you work your way up to a much more complex version over time.
Another sort of initial decision was we have this great illusion in our games.
The first time you play, you know, the first time you play Guitar Hero or Rock Band, you hit some silly little gem, you know, representation on this guitar, and then this huge sound comes out of the speaker.
And that's really rewarding to players.
So rather than, you know, the traditional instrument learning experience where the first sound you make actually sounds really horrible, we were going to use that illusion, so the first time you get something right, you got that big sort of feedback.
Okay, so...
There's a lot of ideas and there's a large possibility space at this time.
But the problem is, you know, Harmonics is a big company and we have a lot of projects, and at this point we didn't actually have coding resources to get things in the game.
So what we did was we explored the space as much as we could, you know, with designers and artists, design docs, pictures, and video. I'm going to show you some of that stuff right now. So as a quick primer, for those of you who don't play guitar, if you're looking at a guitar neck, it has these raised metal objects called frets.
You push the string down behind the fret, and then you pluck the string with your other hand, and that actually will make sounds. And as you move your finger along different frets, you'll actually make different types of sounds.
On a rock band guitar, this is actually replicated by the five buttons. They represent five different frets. So when you're holding the second red button, you can see that that is replicating holding down behind the second fret and picking a string.
So we call this fret relative. As you move from left to right, You're actually moving up from the first to the fifth fret.
And these things coming down the track, which we call gems, are colored to represent that.
When you have to hit that, as it crosses the bar at the bottom, you're hitting a fret.
So this red one coming down, that's the second fret you'd have to hit.
And time is the next axis.
One of the things we wanted to experiment with first is the idea of fret relative, because millions of our players have been playing this game.
We kind of baked this knowledge into them.
We thought this might be the first thing we should try.
So here's an example from an early design document.
You can see on the top, if the player was to be playing a real guitar, in this example, the third position represents the third fret.
So the player would be holding the third fret with his left hand.
And each of these gems have a color on it.
And the color represents which string you'd have to hit.
So in this example.
I'm holding the third fret, and on the green one, I'd have to hit the lowest string.
On the red one, I'd have to hit the next string up from that.
Here's another example of that, where color and position represent which fret you'd have to hit. The string position, you can see on the gems, is represented by stars in this example. Or, actually, there's numbers that are not represented there that we could have tried. So we quickly moved into videos.
Here's a 3D Studio Max mockup that our artist made.
It's always good to do a max mockup with real data.
In our case, this is songs.
Let me turn up a tiny bit.
Can you guys hear that?
So this max mockup, you can see, kind of was hard to understand and kind of hard to read, right?
It's a pretty standard song.
And there's a lot of stuff going on.
And this convinced a lot of us that maybe fret relative was not the best approach.
Then we started thinking about the idea of string relative.
If you turn the guitar neck 90 degrees, instead of looking at the frets, you're now looking down the fretboard.
You'd have your lowest strings on one side and your highest strings on the other side.
Gems coming down, instead of telling you, coming down what fret they would on, they would come down and tell you which string you have to play on.
And something about the gem would have to represent what fret to play instead of what string.
So, let's look at one example here.
This is an early art mock-up.
It is actually pretty confusing.
So.
Let's talk through it a little bit. On the right-hand side, you can see each of these gems are coming down on a unique string, meaning you'd have to strum that string when it reaches the bar at the bottom. And then there's a light on it that tells you relative position of actually which fret you'd have to hit. Kind of confusing. On the left-hand side, there's the idea of what a chord could look like in this. We still haven't quite nailed that. Then we put this into video. This is an actual song in motion. There's no sound on this one.
You can see that there's a lot to process here in real time.
And this is kind of scary for us.
We were happy to try string relative, but that wasn't maybe super successful.
But then we got to this one right here.
This came towards the end of our period here.
And you can see, like, with that same real data we had before, this is looking a lot more promising.
This is actually closer to what we end up with.
Chords aren't quite figured out, but notes and their relative positions are a little bit easier to understand in this way.
This video gave us a little bit more confidence coming towards the next period.
In fact, with this, we were able to work with management and senior developers in the company to come up with our minimum goals and constraints for the system.
Pro Guitar had to display notes and chords on the track.
It had to be pitch accurate, means you never play the wrong note.
We want to teach people the right thing.
It had to target non-musician rock band players, as Jason said before, people that were looking for a new challenge.
It didn't necessarily have to work with bass.
It didn't necessarily have to work with all the Rock Band 3 songs.
We were targeting maybe, say, 20 of the 80.
And it didn't have to work in all game modes.
It could be its own menu option off the main screen, if we needed it to be.
So, our takeaway here is, when we had low resources, we used whatever we could to actually learn about the problem space.
You know, getting things in the game is always best.
But if we can't, we like video.
And pictures and text are also useful to find more information.
So the next period we're going to talk about is the prototyping period.
This lasted for about seven months of the almost two-year period.
So the problem space here is we need to iterate really fast.
We want to get things in the game to try it.
And we had a large group, and when you have a large group, there's a lot of disagreements about what you want to try and get in the game first.
So one of the first things Dan did as strike leader at this point in time was reduce this group to a smaller size.
We added Jason Booth and Mike Monselvatch, as Jason was our coder on the team.
Jason is a multi-talented coder that can do anything we needed him to do.
Jason can do graphics, gameplay, menu work, and Mike is similar as an artist.
He can do 2D, 3D. These guys can do tons of iteration really fast.
So, I went into this a little bit already.
The best part of SmallStrike Team is the implementers are the people doing the work.
Jason and Mike are able to do all that.
I was able to contribute wherever I can, whether it's meeting notes or lesson designs or song ideas or art mock-ups.
Another thing is we were able to have more focused meetings.
We'd get things in the game, meet about it right away, and decide a course of action after that.
You know, if we didn't decide on a course of action, a lot of times our philosophy is, like, just try the fastest solution, and we'll learn something about it.
We also were able to sit closer to each other with a smaller Strike team.
Jason sat really close to Mike, like three desks away.
And later in production, I moved into the room with the coders on the team.
One thing I forgot to mention is, in case you're not familiar with the term Strike Team, it's kind of like Scrum, although our version was a little bit less strict than Scrum.
But you can imagine it's a group of people focused on a feature like Music Library, or in our case, Pro Guitar, Pro Keys, stuff like that.
All right, so now I'm going to talk a bit about how we actually went about prototyping this and coming up with the various design solutions we did.
So the first thing that we noticed, you know, we rolled onto the project and there were all these mockups and stuff, but we didn't really have any hardware.
And I kind of looked out into the landscape of, you know, possible solutions for getting data out of a guitar and getting that as MIDI or something like that.
And all of these solutions have various problems.
For one, they're all pretty expensive.
They have latency, they have accuracy problems.
There's all these different types of issues.
And rather than try to tackle any of these things right away, we basically just decided, you know what, we're going to use whatever works best, not worry about it right now, and we'll use the information we gather to inform our hardware department of what we need out of a guitar.
Now, I have to point out that building hardware is not exactly an easy process.
It's very complex, very risky.
So, you know, if we could have done this by just plugging in a guitar, it would have been our priority.
But for now, what we did was use some off-the-shelf stuff to figure out what we really needed.
And so the first question that I set out to answer is, okay, how are we going to communicate what to play to the player?
You know, they may not know anything about music notation, and that's really kind of the crux of...
You know, the first half of the game is communicating to the player.
So for this, we decided to take sort of a Montessori approach, which is, you know, in Montessori, you know, kids are basically playing with models and various things, and they're learning a lot from this, and they're learning actual, you know, sort of factual things, but not in a very direct way.
And so our thinking here was like, if we can get your hands into the right position, if we can get you to play a G chord, then it doesn't really matter whether you understand, you know, that that's a G chord or know any music theory about it.
It's just about getting your hands to do the right thing.
And so that was really our focus, is like, let's get their muscle memory built up, let's get them doing the right thing and not worry about anything else.
Now we wouldn't present anything wrong, but you know, we would just focus on that.
So I started thinking about this idea of like, okay, we're going to need to notate this to the player, and I started looking at traditional notation.
And traditional notation is kind of interesting because it was designed for conductors who had to fit an entire orchestra onto a page.
And to do this, they came up with various forms of compression to fit everything onto a page.
And one of these is the idea of key signature, which is that the player has some knowledge of which notes are going to be played within a possibility space.
And then you don't have to notate that stuff.
And I was like, oh, that's kind of interesting.
Kind of what we're facing is a compression problem, right?
Like, how do we take all this information and get somebody to recognize it right away?
Now, most guitar players don't actually even read traditional notation.
or at least not very well, they tend to read tablature a lot.
The reason is, is tablature is physically centric.
It tells you exactly where to put your hands.
On a guitar, you can actually play the same note in multiple places.
So tablature is a way to say, look, put your hand exactly on the twelfth fret.
But it has other problems.
It doesn't work with chords very well.
It's kind of hard to read.
When you get a lot of stuff, it doesn't represent rhythm well.
And so there's actually a third type of notation that guitar players use, which is chord charts.
These are great because they show you kind of a layout of what your hand's supposed to do, but they only really work for chords.
So, often you find guitar notation is written in these three different forms, sometimes all at once.
And there's no way we can really ask people to learn all these three notation systems, or, you know, understand them in real time.
And so we knew right off the bat we were going to have to invent some new form of music notation.
And what we wanted was something which was physically centric, like a tablature is.
But it would need to have some form of compression for dealing with chords and sort of complex musical passages.
And we knew from our experience with Rock Band and Guitar Hero that we had a very good concept of time to give the users.
So I started thinking a lot about the chord problem and sort of what I was doing when I was playing a chord.
And I started thinking about a D chord. And I'm like, wait a minute, a D chord kind of makes this shape, right?
With my hands, I'm making this shape. So maybe if we took that and we actually...
You know, map shapes into gems that would come down the track, then the player who had already seen these shapes would be able to recognize them.
And so when you see different chords mapped out like this, Mike would sort of, you know, sketch these things out, and it was like, oh, okay, I can see a unique signature for each one of these.
I can see how all these chords look different.
Additionally, when we started messing around with, like, variations, like, these are all different variations of major, minor, A chords, they actually all produce unique shape signatures.
So when we started messing with this, we thought, you know, this might be kind of the key for compressing all this information down for the user.
So we also started thinking, OK, well, I can play the same chord in multiple places when you think about it as a shape.
And so we're going to have to number that somehow to let the player know where to anchor that chord.
And, you know, we were also looking at music in general.
There's all these other opportunities for compression, right?
Music tends to repeat a lot, so you're going to have that sort of compression of repeating riffs.
There's various playing styles of, you know, strumming the guitar loosely like Bob Dylan.
You know, you don't necessarily need to notate every note in that.
You just need to notate, okay, he's playing this chord and here's the rhythm he's playing.
And then there are things like arpeggios.
And all an arpeggio is, is it's a chord that's played one note at a time instead of all together.
So we're looking at these things and, you know, my basic thought was there's a lot of opportunities for sort of compression within our notation here.
And Mike would sketch some of these out.
Like here's an example of, you know, how we might represent arpeggios, which is pretty close to what we finally shipped.
And so here we have essentially a D chord, and then we're just sort of lightly notating which strings to pluck when.
We even played with things like changing the plane that these exist on to sort of create mode switches in the player's head.
So, you know, while we were thinking about all this stuff, we still had some sort of lingering questions that have been coming up.
One of the things for me was, you know, we dismissed string, sorry, fret relative and sort of decided that, you know, we had this chord language and this string relative system to work with, but we still had this question of, like, horizontal versus our perspective track like we have in our games.
And my initial thinking on this was, hey, you know, all music notation is horizontal.
You read horizontal.
There's got to be something about that that's actually better for people.
And when I made the first version of the prototype...
I made it visually agnostic so we could sort of plug in new models and then just see how they worked.
And this is an example of the horizontal one.
And it broke down right away for a couple major reasons.
One is that when things are scrolling horizontally or on any flat plane, they're going to move many more pixels per frame than when they're coming at you.
They tend to move in very small deltas when you consider the pixel motion.
So it's actually easier to read details on them when they're coming at you.
And additionally, this idea of this chord shape language just broke down in a horizontal mode.
You can see Mike was working various sketches trying to figure this out.
But there just wasn't really a great way to do it.
So, as we got the prototype up, I needed some songs.
And, you know, when people talk about prototyping a lot of times...
You'll hear them say you have to tackle all your hard problems first, because otherwise you'll never get to them or whatever.
And I think that there's some truth in it, but I think you have to make sure you don't just do those things.
I think sometimes you need a prototype to build momentum for your project, right?
You need to build some success to get other people bought in, to get them psyched up about what you're doing.
So when it came to song selection, which is really a core component of what we do, I chose songs that were definitely going to work.
They were going to be easy enough to play for a new player.
They would be simple enough that when you were playing a simplified version of them, you still felt like you were playing the full version.
So things like I Love Rock and Roll and Twist of Cain.
Twist of Cain doesn't have any solos in it.
It's a really powerful sounding song, but it's actually very, very easy to play.
So rather than jumping right into Crazy Train or something, I sort of focused on these.
Additionally, Mike and I just came up with a system.
Rather than coming, sort of a convention, to solve the chord gem problem, rather than actually building a system which would graphically build these elements, he would just model the ones that we needed for a song.
So, you know, I Love Rock and Roll has three chords in it, so he would go model those chords, and that saved us from having to solve any of these problems right away.
So, at this point, we had a pretty good prototype built.
And, you know, had some, some, most of our answers kind of answered here.
But we still had a bunch more after this stage, which is things like, you know, okay, great, we have this chord shape language and, you know, I can recognize that that's a D chord, but if I've never seen it before, I have no idea what it is.
So we're going to need to teach that to players.
And to translate that shape into something they do with their hand, there's going to be some information we need to give them to walk them through that process so they can really understand what they're supposed to do with their hand.
from this notation.
And then there's going to be a bunch of other things that you need to really learn a song, right?
It's not just about learning a single chord.
It's about learning a song in the end.
That's what people want to do.
They want to be able to play a song.
So at first, you know, our attitude was, wow, we don't want to make a big training, edutainment program, right?
Like, we want to make something that's fun and exciting.
Maybe we can sneak this education in along with our game somehow and inline the training right into the songs.
But this proved really jarring for people.
We tried things like stopping, you know, and sort of bringing up menu displays and stuff.
So we switched this model of upfront learning, which is, okay, so I Love Rock and Roll's got three chords in it, so let's make them actually learn those chords one step at a time and then they'll proceed and actually try to play the song using what they've learned.
And as we were mocking this up and implementing it, you know, we kept thinking that we needed this virtual hand, right, that would show the players what their left hand was supposed to be doing.
But what we found out through playtesting was that nobody actually looked at the hand.
What they really needed to know was just, what is my, you know, what is each finger supposed to do in simple text, and then some feedback about what their hand was doing.
So in this video, you can see me sliding around my hand and sort of lighting up when I hit the right notes, you know, and telling me whether I'm right or wrong and showing me where my fingers were.
And this sort of proved to be the most valuable part for players actually learning this for the first time.
So we also started prototyping a trainer.
And now, when I think back to learning music, you know, it's not like I...
The first song I learned, I learned it in real time, playing along to the record, right?
I sat and I, like, you know, learned how to play that one chord, and then I figured out what the next three notes were, and kind of, kind of went in whatever time it took for me to figure that out.
And so we tried to imitate this by having what we called wait mode, which is where the game would just sort of wait for you to, you know, get the right answer, and then it would proceed on, and it would bring up...
And this is a video of the prototype running.
So you can see me going through the chord book, playing the various chords from the song.
And one of the problems that becomes apparent is if you have a lot of chords in the song, it gets really tedious.
And then here's a little clip of the prototype.
And there it's waiting for me because I missed that note.
So yeah, that was kind of where we got to on the prototype.
And we would internally playtest this with various people in the company who had little to no experience.
And we would always ask them, you know, okay, so, you know, at the end of this, we'd be like, well, how fun is this?
And they'd sort of look at us weird and be like, I don't know if that's really the right question.
It's super compelling or encouraging or something like that.
They were really excited about the feature.
But at first, they weren't even sure whether fun was really a word that could be applied.
But we sort of believe that, you know, the secret to our success of actually teaching people to play guitar was rooted in that idea that, you know, this could be a fun experience instead of a grueling experience.
And so we kept working on little details.
So like one of these details, we kept having this problem of people not knowing what their left hand was doing.
When they were, you know, when they had the help up and the guitar was there and it was showing them exactly what they were doing, the feedback was really good.
But we didn't want that up all the time because it was too much information and too distracting.
So we kept trying different things, you know, to sort of show them what their left hand was doing in other ways, and sort of failing.
And then one day, I was watching crazy Japanese game shows, and it was the human Tetris wall, right?
And the wall's coming towards somebody, has a hole cut in him, and the person has to get into the shape of the hole and get through.
And I was like, you know, that's kind of what we're doing in Inverse, right?
We have a shape coming towards you, and we're asking you to get your hand into that position.
So maybe what we can do is sort of generate a wall.
uh, based on what your hand is doing, and then the shape can slot through that, right?
And it'll give you some feedback.
And that's where this idea of the position wave, uh, sort of started.
So, when the prototyping was coming to a close, um, it was pretty obvious there were some inherent limitations to what we were doing.
Um, you know, our notation system had a lot of up-front learning.
Uh, this chord-shape solution was certainly interesting.
But it didn't...
It didn't work well when you had, you know, songs with lots and lots of complex jazz chords and things like that. It just sort of became hard to read.
We had tons of screen space issues. You could never make the numbers large enough and things like that.
And as a result of all this, some songs would work really well and some songs wouldn't.
And there were still a bunch of problems, both from the guitar technique standpoint and just sort of general problems that we wanted to solve.
And we sort of realized that, you know, a lot of these problems aren't solvable, right?
They're not totally solvable.
What we can do is chip away at them.
We can make them better.
We can try to make the learning curve smoother, but we can't necessarily solve them.
So meanwhile, from all this, we had a pretty good idea of what we needed out of hardware.
And it was pretty apparent at this point that This idea of knowing what the left hand was doing was really going to be key and we were going to have to manufacture some type of hardware.
And so really what we wanted was we wanted to know exactly what the left hand was doing.
We needed that to be low latency.
We needed it to be very high in accuracy so that players wouldn't get frustrated when they hit a note and it said they didn't or things like that.
And finally it needed to be low cost, right?
And it's a really hard challenge.
So what our hardware team decided to do is sort of go on two directions, right?
So that the- . . . . . . . . . . . . . . . . . . . . . . . . . . . .
The real thing we wanted to do was have a real guitar, right?
Like a real Fender guitar you could play, and you plug it into an amp and it could be real.
But we also realized that there are problems with this.
You have additional problems that come into play, like tuning and string breaking and your hand's hurting.
You know, there's a lot of extra complexity there.
And so for some players, you know, some sort of plastic controller would actually be a lot better, as long as it was still representational of a real guitar.
And on top of that, you know, there was no real known technology to do this with a real guitar, and we had no idea what it was going to cost if we did figure it out.
Whereas, you know, sort of our button approach, we had a pretty good idea of how that would be built and what it would cost.
So, you know, we decided to pursue both of these directions, and started working with Fender, and eventually went down there and built a first prototype of this string controller with them.
And it was really exciting because even though the thing only worked up to the fifth fret, to actually like play the game we were building with a real guitar was like a real amazing moment for all of us.
And so we settled on this two-pronged approach. We were going to have this 22-fret real guitar, which actually shipped this week. And, you know, you can plug this thing to an amp and play it. It's 100 percent a real guitar, but you can also play the game with it. And it doubles as a really amazing MIDI guitar.
And then we would have a lower-cost approach, which was this sort of button guitar.
Which we would probably be able to manufacture by the time we ship the game.
And it was a much safer and more cost-effective route for many people.
So from this I just wanted to bring up a few sort of prototyping suggestions.
Like Sylvan said, I think really reducing the team size down is crucial.
The less people, the less arguments and random discussions you need to have to keep everyone in sync.
So it allows you to move really fast if you can get a very small number of people to prototype a feature.
And really the cycle that I like to think about is, you know, you get together, you come up with these core goals.
Like, what is it you're trying to build and, you know, what is really the, the target audience?
Things like that.
And you sort of establish these constraints.
And then you just go, you know, hack it in any way you can.
Try all the different variations of things that might work.
And then when you sort of think you have your answer, you put that in front of actual users and you see.
You know, I would have users come in and they would play and they would learn this thing.
And then I would give them a real guitar.
And I'd be like, can you play that chord on a real guitar?
And they would sort of sheepishly take it, and then when they hit that chord, they had this amazing expression on their face because they'd just learned how to play something on a guitar, something that seemed impossible to them, you know, from playing this game.
So that was really exciting.
And the other thing is, like, you know, you're going to have these constant arguments about various features or different ways you can go with people.
And if they keep coming up, it's a sign that you need to address them.
You need to try something.
So we kept having these discussions of fret relative versus string relative and horizontal versus perspective.
And until we actually, like, put those into videos or, you know, actually put them in the game in some case, we couldn't really solve those arguments.
But as soon as you do, all of those discussions go away.
So if it keeps coming up, don't even bother having a discussion.
Just go start implementing it and figure out what's going on.
And then finally, when you're prototyping, you know, a lot of times people are so focused on the problem that they're trying to solve, that they forget all the little things that make a prototype or a game polished and make it feel good.
And often what happens is when you present this to somebody, all they notice is those things you didn't bother to do, right?
Those little things that you're like, oh, that's easy, we'll get to that later.
Sometimes it's worth spending the time to actually do those things early, because it lets people really get to the meat of your solution and really see what's going on.
All right.
So let's talk about the last period.
This is the 13 months of production.
At this point, the prototype branch was pretty hacky.
We couldn't keep adding features to it, and we had to bring it over into the real Rock Band 3 branch.
But at some point during the prototype, we got really confident.
You saw the playtest results.
We were really excited about this feature.
And we decided to aim higher than our original goals.
We decided we'd make the system work for guitar and bass for every song on all four difficulty levels.
Um, easy difficulty level would be playable without training.
It would just be notes.
And expert difficulty would be every chord and note in the song.
As crazy as that sounds, even if that's really, really hard for people, even if the jump from hard to expert is a little bit higher than it is normally, we thought that was a good goal.
Um, this would work in all modes in the game.
So you can jump right into quick play next to two other tracks or three other tracks for seven players.
Um, this feature is the same as every other instrument in the game.
We would do trainers for every song on guitar and bass for four different difficulty levels.
And we'd also do general guitar lessons, which would teach people actually theory and things that they would have to learn to play the game at all four difficulty levels.
Which means that although we solved a lot of issues in prototyping, that we still had a ton of stuff to figure out.
Um, some of the stuff we had to figure out was just rock band standard stuff.
We had to figure out how to make work in this world, like solos and peak states and, um...
A We had a 22-fret guitar and a 17-fret guitar.
How are we going to author differently for those, and what kind of chord names are we going to put on it?
So, as some of you may know, developing software for emerging hardware can be complicated.
This is our case as well.
On the PC, we were using standard mini drivers.
On the consoles, something like that doesn't exist.
It's not that flexible.
So here's our timeline for production.
So, we had an ambitious plan for our hardware team to go off and make these two hardware versions, which are really exciting to us, but it would take a while and we needed something to develop with so we can answer these questions.
On the left hand side, you can see we had seven of these things we call the bridge modules. These were made by our hardware team. They take MIDI and convert it to a signal that the console can understand.
We had seven of these for 180 people. It was just enough for our team to develop with, but it wasn't a lot.
And they were a little idiosyncratic.
Sometimes you'd walk across the floor and static electricity would make you have to reset your console.
But it was just enough for us to get done what we needed.
A few months before we were done finishing the game, we started getting our Mustangs.
You can see we had seven of those on the right.
But the Squire came in even hotter.
In fact, four days before E3, we got our first version of the working Squire guitar.
We had an emergency code in there to cheat success if we needed to use it.
I'm happy to say we didn't need to use it.
So you guys saw real playing on stage, and people were kind of blown away that it actually worked.
So were we.
Um, second problem, uh, is, uh, just a simple fact of life when you work on these types of games.
Uh, our content, uh, is songs, and our songs are our levels.
Um, and we get those late sometimes, a lot of them.
Uh, we had to learn about this problem space before we got our final songs.
This is like working on a shooter, and...
Not having your levels and your final controller to play them on into the last three months.
You want to learn things before that.
So our solution was our audio designers would make test versions of songs or snippets.
They would record them or cut up other songs so that we could learn about as much as we needed to learn about before these final songs came in.
So for our production team, we had a lot of people that actually had played guitar for a long time.
And our two audio guys who were making these sample songs...
Actually taught guitar for many years.
They would crank out the type of content we needed to answer questions.
The first thing they would give us is famous guitar songs, songs that everyone wants to learn, like Smoke on the Water.
Coincidentally, some of those songs that everybody learns, they only learn the easy part.
They learn da, da, da.
They learn that, but they don't learn the arpeggiated verse that we'd have to figure out or the crazy solo that goes on forever.
We also got, like Jason mentioned, songs that should work well in our system, like I Love Rock and Roll, which we had in the prototype and we had in the final game.
Finally, the thing we worked on the most was stuff like songs that would stress the system that normal guitar players would need for all our DLC.
Stuff like arpeggios and alternate tunings, really weird chords, tons of that stuff.
We would have these guys go in and make it, you know.
Early on, we were thinking, well, core language works pretty well as long as we don't get crazy trained.
Then we got crazy trained.
So, a quick tangent.
It's a video I found on YouTube of someone like, nailing, you can turn it up a little more, nailing the tapping solo.
I'm sure it got better later. So...
We have to kind of say that, you know, often what we find on YouTube is that people are absolutely insane.
Yeah. A lot better than we thought. It's amazing.
So, having them work ahead allowed us to solidify our authoring this time.
We figured out what we were going to do for Easy, Medium, Hard, and Expert on both the instruments, bass and guitar.
We were always going to keep the same hand position for all difficulties.
So if you're playing on the third fret on easy, you're playing on the third fret on expert.
Medium would have a simple variety of chords that we picked out that we thought people could learn.
And hard we'd try to make just parsable in real time so you didn't necessarily have to go to our trainers.
We also figured out in this period how we're going to author for the 17 versus 22 fret guitar.
We also brought in Rick Peckham as a weekly consultant.
Rick is chair of guitar at Berklee School of Music in Boston.
He brought us a unique perspective and helped keep us honest during this period.
Among other things, Rick came in weekly and helped us with something like chord names.
On the side of the track, we wanted to display the chord name for people who could use that.
And we don't have a lot of space, so we kind of had to come up with our own new terminology there.
We wanted to make sure it made the most sense.
And it's also done in code, so our audio guys don't have to author that for every single chord.
He also helped us with trainer lessons.
I mentioned this before.
We didn't have our songs yet, but we made educated guesses about what people would have to learn on Easy, Medium, Hard, and Expert and started authoring those.
And this was great for a couple reasons.
One is our audio guys spent all their day analyzing other people's music.
And this was their chance to make music that actually people would play as lessons and made sense in this context.
And it's also great because people would learn a little bit of theory, and they could actually take this to their own guitar lessons later.
So the last problem I'm going to talk about is our problem of Going from prototype to production took us a lot longer than we expected.
It was estimated that it would take a couple months to get all the features from the prototype in the game.
And over five months later, we didn't even have all that stuff into Parody.
So here's a video.
If you could turn up the audio, please.
This is the first version working in the game in Quick Play.
You can see a lot of prototype graphics in the back.
You can see that.
The notes look OK.
They're not quite great.
There's no chord to exist there.
The strings don't have any feedback.
There's no position wave.
This doesn't even match the prototype at this stage.
So for prototyping, we had this core group that were evaluated by a larger group.
When it came time to production, our Strike Team membership grew.
Jason rolled off from coding duties, and we added a project lead, QA guy, two audio guys, a producer, and three coders to do the work that Jason was doing.
This definitely changed the dynamic of the team.
So these new team members weren't around to see the prototype grow and learn the lessons for themselves.
You know, a lot of misunderstandings happen when three coders are trying to get previously one coder's work in the game.
We also had more reliance on external resources even though we had more people.
So if we wanted to get a new menu screen in the game, that might get tasked if it was really big and, you know, held off for a couple weeks.
So this exposed some process problems, this new big group.
So we need to get back on track.
So one of the first things we did to get back on track was Daniel Sussman reiterated to me our core focus, which was non-guitar players and their ability to enjoy and play and learn how to play guitar in this game.
There he is over there if you want to kick him in the nuts.
He was so vehement about this that he was willing to even cut hard an expert.
And to us, this was a wake-up call because we really wanted this to work on all songs.
All the way up and be able to teach you everything that the guitar player did.
So it's helped get us back on track.
It helped us prioritize our tasks.
You know, if we had to do work for the trainer, check, we'll do that right away.
But arpeggio work and stuff like that, that can wait until after we solve the core problems.
We put all these tasks in the schedule, prioritize them, and then our guys would get excited because we would see all these stuff we wanted to get to.
We knew we had to blow away the other stuff first, so that helped speed us up.
We also switched to more short-term deadlines.
We had an alpha date that was many months away.
Instead of just relying on that, we actually set ourselves a new short-term date that would get all the features in in a month and a half.
And then we pushed up our external playtest so we could actually find out this information sooner.
The result of these changes was the next four months were the most productive for our period in production.
We were now actually back on track and ready to playtest.
We wanted to know, did we nail this stuff?
We're lucky enough at Harmonics to have a really great playtest department.
It could be a subject for a whole talk about how to run a good one of these, and we don't have time for that.
But we think it's important enough that if you don't have a playtesting department, at least find someone that you can to own the process.
It's a really big part of what we do.
Our playtest questions at this point are, are trainers as effective as they need to be?
What info do we need in our video tutorials, if any?
Previous Rockman games had relied a lot on videos.
What happens when players don't use the tutorials and trainers and jump right into Quick Play and just start playing?
You know, this is a bad case scenario for us, but we wanted to test it because we knew we'd learn a lot of things.
And, you know, I suggest doing that for your games, you know, have people skip cut scenes and skip all the trainers and just see what happens.
Finally, can players learn how to play guitar through Rock Band 3?
So, here we are, a few months before.
We can turn this up a little bit more.
You can see the track here is actually somewhat close to what we shipped.
The numbers on the single note gems are smaller than ideal, and we pumped that up after this.
The position may have changed a little, but that was pretty close.
And here you can see the chord book that Jason was talking about actually in action in the real game.
We beefed it up a little bit so players would have to play chords three times because they weren't getting good feedback without that.
But what we found out is with real lessons and real songs, when we divided up the songs...
but players would take a long time to learn these chords.
And by the time they actually learned them all and got into the trainers, they had forgotten what they'd done.
That was the first major problem.
The other issues were smaller but consistent.
On the right-hand side, you see this thing we call the jam highway, which is a preview of all the stuff you have to play.
Players would just stare at that.
They had no idea what it did, and it just distracted them.
Additionally, we made a classic mistake of separating our elements for how you switch lessons in the upper right-hand side.
And in the...
lower middle side, how you speed up and down the track.
Finally, as you saw there, our success feedback was pretty underwhelming.
So we got a lot of little issues that we needed to solve out of this.
And our trainer needed to be rethought.
Teaching the chords beforehand wasn't working as well as we wanted it to.
But people were really learning how to play guitar.
Within an hour, we had people that had no guitar experience, and they were moving power chords around and playing really well.
And this was great.
Like, all of our people on our strike team went to the playtest and got to see this.
And we got really pumped up to actually finish off the game really well by seeing how well we were doing.
And we knew we just had to nail those last issues with those core audience people before we can get to our wish list items.
So some of that response was, first thing we did, maybe a day or two after the first external playtest was add a number to the position wave.
This tells you what your left hand is doing at any time.
I had a sneaky suspicion we should try this for a while.
But it wasn't until we saw.
Like newbie players actually wanting more information about where their hand was that we actually added this to the game.
Finally we eliminated the chord book and actually brought it directly in to the training.
So players could at their own volition decide when they wanted to turn it on and learn the chord right then at any time as opposed to doing it all front loaded.
If you go to see the Dance Central talk, which I highly recommend later, you'll see that they kind of wind up with similar spot in their actual production of their game.
Also, we did a better layout here.
You can see on the left-hand side, all the elements for speeding up and slowing down and changing which lesson you're on and the progress are all in the same spot.
So after solving those issues by iterating and re-verifying via further external play tests, we were able to get to a ton of polish and wish list items.
This is just some of them.
I'm going to talk about a little bit here.
This first slide shows you some stuff.
What I want to really mention here is...
When I first came to Harmonics, I was really surprised by how much polish went into the tiny elements of the game.
I'm just going to talk about one tiny little example here.
So, for a series of repeated chords, you can see it from the old prototype video, we would have names for every single chord, and it would be kind of intimidating and hard to tell when your chord changed.
So, one of the first things we did is do a little bright highlight on the first chord in a series of chords.
So, every time the chord changed, you would see a little bit of a pop.
And we eliminated the chord name next to the chord of anything but the very first chord.
Doing that, of course, meant that after the very first chord, it would scroll off screen.
So what we did was we locked it into place until that series of chords is gone.
So if you do use the chord name, then it doesn't go away and you know a series of 50 chords is still this chord.
At this time, we were also able to get in a ton of our wishlist items.
Here's just a small sample.
We finally nailed the arpeggio look and got it working in the game.
We got guitar techniques such as slides up and down the neck and muted notes, which are just playing without actually fretting.
And hammer-ons and pull-offs and tons more.
One last example was this idea of being able to turn on the chord numbering option in the modifiers.
We'd wanted to do this for months, and we had it kind of working, but there was actually a rendering bug that didn't let us get to this until the very last day.
And with a lot of begging on my part for the producers, we actually got this in.
So.
Our summary here is, when we go from prototype to production, it always takes us a lot longer.
We haven't quite nailed it, but for this project, we did a couple techniques.
For one, we used placeholder content for being able to rapidly develop.
We learned a lot from these MP3s, and we learned a lot about the space, just like we did earlier on with the pictures and the video.
We revisited our target audience, and that helped our team.
realign on the core goals that we should really be working on before we think of the bigger issues, or the smaller issues.
And finally, short term deadlines helped us get our work done faster as people wanted to see the results of that work, especially stuff like external play tests.
So, we're really happy with the response from Pro Guitar and Rock Band 3.
We see a lot of people enjoying it and learning how to play guitar and going out and taking lessons.
I'd like to thank everybody at Harmonix for...
This feature, there's a lot of people that worked on this really hard.
And I want to thank all of you for coming to our talk.
And please fill out your forms and we'll take questions now.
Thanks.
Do you want to roll the video?
Yeah.
So, while we take questions, we're going to run this video.
This is like from prototype to the end, you know, I love rock and roll in this series of time-lapse photography here.
Howdy.
Hey.
Hey.
Were you working with the Pro Drums and Pro Keys teams at all?
And was there any temptation to try and create a unified visual style for the three of them?
Yeah, I worked on the Pro Drums and Pro Keys team.
The Pro Drums is probably the easiest problem.
We kind of actually nailed that right away.
We wanted kind of the circle symbol gems.
And we just got a look for that, and it kind of just worked right off the bat.
Pro Keys is a.
Very different problem, and it required very different solutions for a ton of reasons.
There was no real desire to try to solve that problem at the same time or in the same way, just because we knew that they were just going to come up with different issues.
So I was on both teams, but most of the teams were separated.
And we developed it separately.
Yeah, I picked up real drumming after playing a whole bunch of rock band and did my first show in December.
So that's pretty awesome.
Cool. Thanks a lot, man.
Howdy.
Hi.
I'm just curious about the decision to ship the games on a separate date from the Squire guitar which just came out this week and how that impacts, how you see it impacting your sales and reach of this great platform.
Could you repeat the question on the ladder please?
Sorry.
I was curious to understand the rationale and decision making behind the fact that the game launched several months ago and the Squire guitar controller just launched this week and...
How that distance in time kind of affects the sales and reach of this great platform.
How it affected what?
How it affects the reach and kind of just the fact that, you know, are people still going to pick it up now that it's an older game versus, you know, something that came out today.
I can't hear you at all.
Sorry.
I'm sorry.
I think you're asking about how, since the Squire came out later, how did that affect the reach of the game?
Yes.
I think there's a lot of people actually excited about the Squire Guitar.
A lot of people, I think, were surprised by how.
Good. The button guitar actually felt like I was.
I was a big proponent of, I didn't even really care so much about that one.
But then, now that I got it at home, it has a lot of advantages.
It's really easy to just take apart and throw away and bring it to your friend's house.
It's a lot cheaper.
So, I think, I don't know, for us, I think we would ideally like to have the string guitar sooner.
But, I think it's worked out well. I think people are going to enjoy both of them actually.
Thank you.
So, I haven't played the pro guitar, but one thing I noticed...
That was disconcerting about the Pro Keys was the lack of auditory feedback about my mistakes.
And I see here, you know, there's a lot of visual feedback about what you're doing, but did you have the same issue about audible feedback for mistakes?
Yeah, we actually had a lot of discussions about that earlier on, and we sort of made a decision.
The first thing you want to do is to get the output from the keyboard to go somewhere and have it amplified.
You can do the same thing with the Fender guitar, so you can actually have both.
The fear going into it was that, you know, the first time somebody actually plays something on an instrument, it sounds really bad, right?
And that that is so detrimental to so many people that that's why they never play an instrument.
They just instantly assume they suck.
So we wanted to create that illusion to get them over that hump.
And later on, as they start to play on a real instrument and stuff, they'll figure those things out.
Yeah, I definitely wouldn't want it as the default.
Yeah, I mean, some of our guys have actually like, gone through things to hook it up so they can hear themselves as well, and you know, it's certainly fun that way too.
Yeah, my first six months of playing guitar, I sounded really, really bad.
You didn't want to be there. You didn't want to hear that.
Hi. During the prototype phase, you mentioned that you didn't have any hardware until relatively late.
So during that prototype phase, what did you kind of use to...
Try and develop solutions to the problems that you encounter.
We basically would just buy anything we could that would work in the context of the problem we were trying to solve.
So did you have actual input into the game with that?
Yeah, we had actual input, but we had all kinds of things.
I even plugged a keyboard in just to check the beat match at one point.
It's one of those things, right?
You don't have the final hardware, but you find things and you figure out how to figure out these problems ahead of time.
Just use whatever we could.
And then, so for the Squire guitar, does it actually listen to the pitch of the note, or is there something else going on?
No, it senses what your hands do. It does not, it does, you'll notice in those videos that, um, or if you, it's like the button guitar is, right?
If you push a fret down, it knows you pushed that fret down before you pluck any string or anything like that.
Um, you know, there's a lot of attempts at audio analysis and all kinds of interesting things. Um, that's...
It's you get a lot of latency from that and you get a lot of a lot of other issues of accuracy and things so We had we couldn't get any of those solutions to really work for us. So is there any um Does it deal with tuning I guess at all in the game?
Does it is tuning agnostic you could have a thing tuned to the most horrible sounding thing and it would still register correctly That's why you got to use a string mute if you're really badly out of tune Are there so are there songs in the game that use like outside of standard tuning that was addressed ever or no?
Did you just you asked about alternate tuning? No, no. Yeah. Yeah Yeah, I kind of breezed through that in my slides, but that's one of the problems we had to solve later on, was alternate tuning.
And we decided to pretend that you're in the same tuning that the guitar player played.
Our general philosophy on all these systems was, if you're looking down at your hand, you're playing it like you're that guy.
So if you're in drop D tuning, using one finger, for those of you who know what that is, you're going to play it like that guy played it.
And it's your decision if you want to tune your guitar to that.
It works no matter what.
So does it tell you that, though, or is it just like play?
Does it what?
Does it tell you what tuning you're in?
No, it doesn't tell you what tuning in the game.
You can look that up, though.
OK, thanks.
Thanks.
So the decision to allow the player to plug into an app and play as a real guitar, was that decided early on in the process, or was that a feature you implemented later?
Is your question the decision to use a real guitar?
Was that early on?
I think the capability to plug into an amp and play as a real guitar.
I mean, that's what we wanted to...
We wanted people to play on a real guitar.
They don't have fantasies about playing on a more elaborate plastic guitar.
They have fantasies about playing on a real guitar.
So, you know, having a guitar that could then plug into an amp was kind of the ideal solution for us.
Now, we didn't know that we'd be able to get that to ever happen.
So we pursued both avenues, and they both ended up with certain advantages.
When you were working out the notation and how to show these to the player and doing your external play test to see what was more intuitive, at what point did you start seeing people transition from, hey, I need to learn this song beforehand and now I can play, to start seeing people go, oh, I can actually sight-read these entire chord charts and songs and things like that?
Yeah, I think for, it really depended on their comfort level and, like, people that, Played a little guitar, were able to pick it up fairly quickly.
If you gave them a song that was just CG and D-chords, they wouldn't have any problem sight-reading that.
Single-note runs, things like that, solos, all way harder.
But so it sort of depends on the song selection and what their experience was.
Now, for a player who'd never played anything before, it would take a little while.
But, you know, we would do user testing sessions that would last about an hour.
And in almost every case, you know, you could take the person who'd never played a guitar and give them a guitar and get them to play you something.
Poorly, but, you know, they'd do it.
I'll say in those short sessions, someone's not going to go from being able to be super proficient.
But at the company, it took us, once we had a pretty good system...
We could sight read pretty much all the good guitar players could sight read on hard within like, you know, a couple weeks.
You mentioned it might work, the actual guitar would work well as a good synthesizer.
Could you speak up a little bit louder please?
You mentioned that the guitar would work out of context as a MIDI guitar of sorts, plugged into your regular rig or synthesizer.
Have you tested this, worked with it?
It must have, I like the idea of low latency over other synth guitars.
I fully expect that there's going to be a lot of musicians picking up the Squier because it has really incredibly low latency and high accuracy MIDI output.
Yeah.
That's a good value.
I mean, that could be this other thing that takes off with this for musicians.
You know, it seems like it could become...
I can't quite hear you.
I'm sorry.
It sounds like it could become popular with guitarists.
Hopefully.
I mean, you know.
That's great if it does, right?
A lot of people have spent years trying to come up with good MIDI solutions.
So if this is another one, and it turns out to be popular, that's great.
Yeah, I should take the time to plug, both the guitars are MIDI output, the plastic one and the string one, as is our keyboard.
So we made actual real instruments this time.
I'm going to try it.
Thanks.
One of your earlier slides had a fun score as part of the user research.
I was just wondering, is that something you developed internally?
Like, the concept of a fun score and...
We actually...
Yeah, what's that meant to test for you?
Oh, we would actually just ask the people, if you had to rate it on the scale of 0 to 5, how fun it was, and then aggregated that onto that chart.
Okay, and so it's just a general sanity check?
Yeah, I mean, you know, fun is, I mean, if you've ever seen any design talk where people start talking about fun, it's kind of hard to quantify it.
So, but, you know, people, when they find something fun, they have some idea of how fun it is.
So we just ask them and use that sort of information to figure out whether we're on the right path or not.
And then try to drill down into what's tripping them up, what's causing little issues.
I think early on, I think we've done maybe zero to five the whole time.
So you can compare it against past games fun level at that certain level of the project.
So whatever standard, I guess, just keep it the same so you can compare it in future games.
Neat.
Thanks.
No problem.
Hi.
I have been playing this with quite a lot of people.
And since you've done a lot of play testing, I would like to hear if you have any.
Could you speak up a little bit?
Oh, sorry.
If you have done a lot of play testing, I've noticed some difference in people who are unexperienced or never played this.
and the way they are picking things up, whether they have been playing music or not, and also difference between whether they've been playing music using musical notes or just by, like rock music is usually you don't know the notes and then classical musicians are very trained in using musical notes.
Do you have any experience from your playtesting, like around that issue?
Yeah, well, we actually, internally, we keep a database of all our employees, what their musical experience is, you know, how experienced they are with our games, what difficulties they play on, so that when we're testing these things, we actually can pull that type of information out.
Like, certainly, somebody who plays guitar or even plays music has a little bit of a leg up.
And we did find that there was one guy who went into the test, didn't go through any of the tutorials, went straight in, and saw the chord language, and just, he got it right away.
Now, other people would be like, I don't know what this is, but some people just got it right away.
And, you know, certainly the ones who play more music are going to do that.
I should point out that there were some musicians, it actually had a little bit more of an actual learning curve for the first five, ten minutes because they're used to a different way of thinking of a tab and all that.
So.
Some people that are non-musicians actually had a leg up in our final system.
It depended on the person and kind of how they thought.
But generally, there was about anywhere from a 5- to 40-minute learning curve of just being able to translate the dimensions of moving up, moving left on the screen and that kind of axis rotation.
And did you see any link between knowing to play with musical notes or not in your...
this data of what experience they had before and how long it took for them to pick things up.
Between them being able to read traditional music?
This is not really a correlation there, because we don't display anything in traditional notation.
I think the more important skill for actually parsing it was being familiar with beat match to some degree.
And if they had read tablature, that was also useful.
You know, a lot of players, a lot of what we were trying to eliminate was players stopping and looking at their hands, because we want them looking at the screen.
So we were trying to keep feedback and things like that up there, so you could know what your hand was doing without having to look at it.
Right?
And, yeah.
That's it. One hour. We're out. Thank you.
