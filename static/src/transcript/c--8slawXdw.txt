Hi everybody, I'm Dan John Cox.
This is Bringing a New Dimension to Below, Personal Discovery and Adaptation.
I'm a 3D artist at Capybara Games, and specifically today we're talking about Below.
Below's a game I've been working on for about two years, not the entirety of the production, but specifically what we're talking about is...
First off, how Below kind of got its visual style, what is involved in that in a somewhat technical manner.
As well, sort of my personal journey, starting with the team and integrating more 3D into Below.
The difficulties and tricky elements that come from switching from Ubisoft style production into something much smaller, much leaner, and a little bit crazier.
But first off, what is Below? Below is a procedurally generated roguelike game with an extreme difficulty level where if you are hit by a single enemy, you can start bleeding.
If you can't stop that bleeding, then you die and you'll have to start the whole area over again.
The world, however, stays persistent and will continue through every different life that you have. When you die and you start over, you start over as a new wanderer, a brand new person in this dark and foreboding world.
The trailer is always nice.
You So that's below, there we go.
First off, if you are looking forward to Below in some way, don't worry, this talk has no spoilers in it.
There's a lot of secret stuff that we're hiding and you won't get spoiled on any of that.
So first off, let's cover Below's visuals or what happened before I arrived.
So none of what you're about to see is pretty much anything that I was particularly involved with, but it does set the stage for how things work in the first place.
So, first off, to understand Below's style and visual aesthetic, you've got to understand Cappy's history.
So, they worked on Sword & Sorcery, Critter Crunch, Clash of Heroes, and Super Time Force.
All of these are very 2D and animation-based games with beautiful animation and 2D art.
Uh, no, 3D.
So when you look at Below's style in the first place, in some cases you'll see lighting and things like that in some 3D objects, but it's not quite so simple.
In fact, pretty much all of Below is two-dimensional when you see it in reality.
Some objects are 3D.
The character itself is 3D as well for a variety of resource-intensive reasons.
But that's basically the setup that you begin to work with in Below, is that you've got a three-dimensional character on totally flat backgrounds.
Bye.
It ends up looking clean and interesting and has a beautiful style in and of itself.
But every background that you're seeing basically is 2D.
And that works really well except when you want lighting, which began to become a more interesting element to put into the game.
So how do you get lighting onto a hand-painted background?
Well, you hand-paint normals, which is a super time-consuming and intensive process, something that you'd often think you should not do because it just is laborious.
But that's what Cappy went for.
They wanted lighting so they'd paint into the backgrounds.
Basically, each artist would just lasso over certain sections of the element that they were dealing with, and just from this sphere here, pick a value that's appropriate and fake all of that lighting.
We also use flat cards.
So when you have to walk behind objects, some would be 3D in this case, and some would be flat little shapes.
3D there, and these other pieces being totally flat.
Now, for shadow casting reasons, that becomes really, really hard to work with.
Some objects would be floating above, like this, and particles as well would often be flat as well.
The effect in the end looks very convincing, but ends up being something that's still pretty difficult to deal with from a production standpoint.
On top of that, we've got this Zelda-style skew.
Zelda is a huge inspiration for Cappy and for specifically Below.
But when you look at the structure of a level and the world, you can see that the world itself is kind of top-down, almost like a fisheye lens.
But the characters are almost perpendicular to the camera.
They are actually just pointing in almost the same direction.
You're not really seeing just their head as you'd be seeing in that actual reality.
For example, even in the new games where they are still skewing the character a bit towards the camera, you still see a lot more of Link's head than you do his sides, which is very different from what the original games looked like, which was the aesthetic that we were going for early on.
So you can see here, you see most of Link himself.
And same for our wanderers, you see them basically pointing towards the camera, which means, in reality, our character is kind of tilted weirdly.
towards the camera.
Now, there's a lot more math going on.
Colin Wike, who's here as well, did a talk on the actual rendering of how this process works.
And it's incredibly complicated, also difficult to deal with.
But it basically means that the character is pointing towards the camera.
Objects can also be pointing towards the camera at different angles.
Avoiding your head clipping into certain objects is incredibly difficult.
Zelda does the same thing, but their characters and objects are all at a basically similar kind of skew so that nothing starts clipping with other elements.
Makes it more manageable.
But basically, in the end, the Zelda skew means that we've got a level that has a different kind of perspective to it than the characters, which is highly interesting to look at.
Very unique, very different from what you normally see.
But in the end, where do I come in?
Why would I need to be there?
First off, Below started off mostly as a non-lit game, with maybe a little bit of a fake light source around the character and still really dark, but lighting didn't play a significant component until they started to add in more light and see what that does for gameplay.
For example, in this case, if we look at this scene without any lighting, The gameplay is very, very different than what you'd have, and the tone of the game is very different from what you'd have once we add lighting back in.
This seems obvious, but it's more than just a shift of aesthetics, it's a shift of gameplay and tone.
And that started to become more important, but becomes really tricky to do when you've got just two-dimensional assets.
when you've got cards that are supposed to fake cast shadows in situations like this real cast shadows really changes the feel of what you're walking up to and sort of the believability and reality of that situation So that's where I come in.
They needed 3D to work with, so they needed to bring on somebody with experience doing that.
I worked in a variety of different studios, medium size to super small to medium again.
I've taught for about eight years in college, teaching kids 3D art.
And I worked at Ubisoft for about three years.
So I feel like I had a pretty good sense of what a proper workflow was.
I've had to train people in doing that and had to make sure that I had a good understanding of what good proper workflow was.
And we've already got 3D in the game, basically, is what I was told, so more should be easy, which seems reasonable.
So, chapter two, what's hard is easy, and what's easy is hard, or...
Basically, our workflow was a bit crazy.
When I got there, there is no editor in the game whatsoever.
The game itself is all you have to work with.
So, when you wanna move an asset, you can't.
You need to do it through scripting and editing and nothing that's dynamic and immediate.
It's also a procedurally generated game.
No editor.
It's pretty hard to deal with when I've gotten really used to one.
So our basic process, at least for me, was I would have to model something in Maya, fine.
Then I would have to compile it with a batch file.
That would take about 30 to several minutes.
Then I would have to code or script it through text, which is, my brain doesn't do that.
And then I would finally be able to test it in-game.
But of course, I would have to assume that the object spawned in the game, because I have to load it literally into the game, hope that doesn't crash the game, and that's kind of tricky to deal with.
So it starts getting a little bit harder to work with.
Now, this was the first asset that I got into the game.
My computer's kind of slow, so the GIFs are running not as fast as I would like, but it gives you an idea of what I was working with.
Now, for this object, for example, this is the Lua code that went into it, which is lots and lots of lines of code, which, again, my artist brain, not super used to dealing with.
And I still really like technical stuff.
The other problem was Maya is king when it comes to our workflow.
So everything that goes into Maya is going to go directly out into the game engine and I don't get to do anything in between.
The problem was also Maya doesn't match what I was seeing in game when I started.
Which meant, for example, in this case, on one side, on the left, I can see what I would be seeing in game at our little skew.
And to the other side, I'm seeing what I would actually be editing inside Maya.
Now, I could see them simultaneously, but if I tried to edit anything, I would immediately get an overlay of whatever I was trying to work with.
So I can't see the silhouettes so easily because objects are covering each other.
That would mean I would have to start shading something inside of Maya so that I could understand what the shapes and planes were, so that I could hope that it would look the same in-game because I'm just faking some lighting as well.
But if I was trying to edit it in Maya as well, I'd be getting stuff like this, which becomes really confusing to deal with.
And on top of that, there was about 20 steps that needed to be done inside Maya, or stuff would really break down and not work.
And you'd see nothing.
So you'd export, you'd do a whole bunch of work, you'd compile, you'd script, you'd look at it in game, nothing would show up.
And I would get pretty frustrated and confused and sad.
But there were valid reasons for this process.
First off, Cappy had been working with the engine that we were working with for a pretty long time, was pretty comfortable with it.
The artists themselves are very flexible and willing to deal with a lot of difficult stuff to get an interesting result.
This was not something that I was used to.
On top of that, As you try to build up an interesting idea of what you're working with, you'll change that workflow and sometimes you don't want to necessarily retool everything that you're doing before you get to the actual result that you wanted.
So there were lots of good reasons to have what I felt like was a crazy workflow, but it was still hard for me to deal with.
On top of that, certain things look simple to model.
You see a mountain here, and when I would try to jump into modeling something like this, I'd start to zoom in and see, is the shape I'm dealing with a curve or is it a bend?
Some of the shading that's implied suggests like a single plane to a surface.
And I'd think, well, OK, this seems a bit more complicated.
I'd have to flatten things out and do a lot more work than I was expecting.
It's fine.
But let's look at the normals of this, see if we get a better idea of what the actual structure of this should be with shading.
That's the normals.
I can't make one big flat plane for a huge section of a wall.
That becomes really, really difficult to deal with.
and seemingly impossible.
So I would start to try to translate these things like this.
And this was the first version that I was dealing with.
Now, some surfaces get a little bit more jagged and don't work so well.
I'd always have to flatten these big flat surfaces so that they look like the original.
I don't want to be the guy that comes onto a beautiful project, integrating 3D into it, and start making the game look significantly worse by just having a lot of angular faces and things like that that don't feel as fresh and vibrant as the 2D illustrations that existed in the first place.
And the geometry itself is fine, but nothing terribly complex.
And flattening out all of those surfaces starts to become a big pain, because it's hard to get those angles right.
And a lot of lattices or FFDs were used to try to get that stuff to stay flat.
But minor edits become difficult to deal with.
On top of that, Below's a small game.
And I'm used to working with broad, stylized work, but...
Below is really small, and a lot of the things that go into it take up only a few pixels on screen, such as this was the first character that I was dealing with.
This was just sort of a work in progress piece to try to get a sense of what the design of this character would be.
And I thought, OK, well, it's got some detail.
It's got some shape.
It's simple, good.
Fits the style, but on screen, it's pretty small.
And if you're dealing with that, if you shrink this TV down, that is the in-game resolution of it.
It gets real small.
And what happens is small little details on the character, like the strings and straps and stuff like that, start to flicker.
Because if you've got anti-aliasing turned off, which I'm switching here, things start to flicker too much, and they don't look like consistent shapes.
They just look like little details that are flashing on screen.
So that doesn't work so well.
Up close, it starts to look good, but then my art's not really working in-game the way that I would hope.
So we redesigned the character to these big, broad shapes, something that seems a lot more manageable.
Now, even when anti-aliased, or rather just aliased, it starts to look the same, looks fine.
Up close, it's a relatively simple design, but it's got some nice impact.
Not designed by me, but it looks good.
So that's satisfying.
The actual modeling itself, less so.
It's a really simple model, which is fine.
That's what the game needs.
But I came into the production with a certain set of strengths and a certain hope that I could give the project something useful.
And when I was working on a model like this, it kind of felt like, well, with the design already supplied, almost anybody here could do this, even with a little bit of skill in modeling or very little experience.
So it started to feel kind of frustrating, like I wasn't actually helping out the team all that much.
On top of that, a lot of my job became just trying to translate the concept art into 3D, very literally.
Because the concepts were beautiful and they worked and if I'm re-changing them too much, that seems unnecessary.
All that work's already been done, I might as well just use it.
So for example here, that's the actual texture sheet for this piece.
It's literally just taking the concept and sticking it in and I'm just kind of putting geometry on top of it.
But again, that kind of feels like almost anybody could do that, and I'm not sure that I'm giving this project much worth, which starts to become kind of frustrating and a little bit sad.
For me, it was all really, really different from what I've been used to, and really hard to adjust to.
Honestly, occasionally I felt like a failure, like I wasn't really supplying anything of great benefit to the project.
But Cappy is incredibly optimistic, almost deliriously so.
Certain things like painting in normals and these crazy skews that we were working with would be things that I would just simply say not to do.
But they are what make the project interesting and they are what make the visual style really incredible.
Their optimism is really infectious and something that when I kind of let it come in, it became a lot more manageable to work with.
because really games are not really only made in one way.
Everybody here has dealt with different ways of making games and dealt with what seem like stupid decisions, but sometimes those are not that bad.
And sometimes they add charm.
So overcoming, we're getting into it.
Basically I started to try to embrace the strange, embrace some of these seemingly stupid decisions because they're not stupid with context, but they can make things difficult.
Now sometimes smoothing that process out helps, but embracing it first also really alleviated some of my frustration and sadness in a way.
So, first off, the workflow.
Some of it just didn't work and just got in the way and just made things unnecessarily hard.
So things like, we got an in-game editor, we got some Maya working faster, we got a prop scripting tool, useful environment shaders to speed up the process, and I got practice.
By just being able to do this process more and more, I started to understand where we could cut corners and start to break things up, which you get in any situation, but it's hard to guess at before you get there.
So first off, we got our Imigui editor, which was basically just some minor tools we could use while the game is running, so that we could move things around, which we couldn't do without scripting and then reloading the level.
So that, hugely useful, big time saver and helps us understand what we're dealing with.
On top of that, we could see what animation states were running, we could open up the script itself by just clicking it in the game, and that just kind of smoothed out some of the process and made things a little bit more pleasing to work with.
On top of that, we got a light editor.
Normally, lights would have to be scripted outside of it through a text editor, so you'd have to type in the location of where a light is gonna point or where it's gonna appear in the scene.
That's really hard to do.
But because lighting became more important with more 3D, we got it in-game, and that just helps a ton.
Super simple, like in hindsight, but super effective and helpful for us.
as well as post-process editing in-game.
All those kind of things just smooth out the process.
They don't change things fundamentally.
We still have other hard problems, but makes a few things a little bit more enjoyable.
On top of that, changes to Maya, where we started to get a lot of scripting.
A lot of these tools, actually all of these tools were done by Nicholas Steven, our animator, who learned Python and 3D while working on Below.
He's a crazy guy.
But basically, some of his workflow stuff that I was able to request and get help with was basically being able to edit in the game view very quickly.
So he made a little window that I could see where I'm actually seeing at the game scale how many pixels something is going to take up.
And being able to edit that without having stuff blocking my vision so that I could move things around, change them, and work with them.
Stuff that seems relatively simple, but just makes for that little bit of improvement in quality of life.
On top of that, we got things that helped some of the other artists who were being integrated into 3D, such as a UV projector, where it would take our game view and basically project the UVs so that an artist would be able to send that out to Photoshop and just paint a background.
Now changes to those backgrounds would then become a problem later on, but that's where useful shader changes can happen.
So for a scene like this.
These scenes are usually loaded into streaming memory.
So they're a lot more manageable and faster to load in than we would normally be working with.
So 3D assets, for what I was trying to work with, load in slower and load in a little bit heavier because they can't stream.
Which meant a room like this, I would want to go as low as possible on my texture memory.
But I would also want to have all of the color changes.
There's light shading that's been put into this in the concept itself.
And I would want to maintain some of that.
Again, I don't want to reduce the quality of these scenes.
But that's a lot of texture work to do.
And any kind of changes, if I just hand paint this, become awkward.
So if I wanted to make a room like this with new texture settings, one of the things that we got was I can model out a scene now where normally, to get texture on it, I would have to create a big, complicated atlas.
of just various color values with texture incorporated into them so that I could block out big broad colors and so that they would have texture in them.
But planning these is a lot of work and you can see here in this one for example, there's a big empty space that's really not being used and there's even a bit of concept art in it because it just wasn't being used.
That's a huge waste.
So, the thing that we ended up doing was getting a much smaller kind of texture that we can put in of just color values and gradients.
I can apply that to the background, just UVing it in, and then we'd get some basic shape form, which works.
Then when lighting's put in...
It starts to look a little bit more like what the original concept would be and the kind of style that was being used.
Then I can use vertex colors multiplied on top to basically add in just a little bit of the painterly effects that would be used by the artists where they could darken out certain edges or brighten up certain ones, have soft transitions.
And then finally UV project on some actual texture into it if you can see it there.
Basically, just a little bit of texture work that can be applied in, in the exact same kind of style that was originally being used for the concepts.
And then we end up with something that's much closer, but also, any edits that I make to this are super easy to do.
We also got things like a prop scripter, which meant complicated assets, I could press a bunch of buttons and a script would come out the other end.
That doesn't mean that I don't have to script anymore because it doesn't hit all our edge cases and we have a lot of edge cases, but it means that the workflow becomes a little bit more manageable and I feel like I can do a bit more with the art and we can integrate more artists into the process a little bit easier.
As well, NGONs.
Now.
Because I've been teaching people art for about eight years, I have a specific mentality about how things should be done.
And things like n-gons you generally want to avoid.
You don't want to have too many because that can change what your shading is going to be in game when you send it out.
The triangulation can get all screwed up and not quite be the way you want.
So...
When I wanted shading like this, it'd be really, really hard to get, because I'd have to flatten out all my surfaces.
But what I realized at one point was I could remove edges and just have big, horrible, hideous n-gons of varying shapes and dimensions.
And it would render like a flat surface, because.
For whatever reason, in Maya and in game, that would just render like a flat surface, and none of the in-between triangles would get rendered or calculated in the normals.
So big, flat surfaces could be rendered with crazy actual geometry if you look at it from the side, but for me, in the end result, it would look the same as if I'd done a lot more work than I actually had to.
Plus, any edits to this become a lot more manageable, and things don't have to stay flat and be difficult.
On top of that, I started to discover something that was really fun and interesting that I didn't expect, which was basically 3D pixel art.
The art that I'm making doesn't get actually converted into pixels, and I don't get to paint over any pixels, but the 3D art basically will only take up about...
36 pixels on screen in some cases.
These are small little cabbages and turnips and flowers that'll exist in the game.
And I had to make them to fit really small on screen.
So they had to be really broad and big and bold.
And being able to have some of the tools to be able to see that makes my job a lot easier.
In reality, the models are awful.
They do not look good up close.
They're janky and they've got like holes between them.
But because they don't rotate, I can get away with a lot.
And I don't need to necessarily get super precious about the kind of art that I'm making.
But I can start to find the fact that they only take up a small number of pixels on screen really interesting in a strange way that I would not have expected or thought that I would enjoy.
in game you can barely see them.
They're tiny little objects right here in the center where they don't take up a lot of space, but their shapes have to be big and bold, bolder than I'd ever dealt with before and way simpler than I'd ever have to dealt with, ever have to have dealt with.
On top of that, finding new challenges and stepping out of what I thought was my intended role.
For me coming onto the project, it felt like, okay, Dan, you're the guy that's supposed to add 3D to the game and you're an experienced 3D guy, so you better be good at it.
But at certain points, we'd start to hit some roadblocks, things that needed some extra thought or care or just specific extra help, such as this area.
I'm not showing anything else around it, but you saw it in the trailer.
This was an area that I worked on that I had a lot of design input on, where we were trying to figure out what the setup and mechanics would be for this area.
And we weren't quite sure where to go with it.
So I basically just requested to take it on and handle it.
So the enemies, their design, and most of the things that involved in whatever's around here, is a lot of my work in a way that I would not have expected.
And was extremely satisfying to do, to just kind of step out of what I thought was my role.
Even to the point of, in many cases, creating Excel sheets, which I don't like.
But I start to learn some really interesting things from doing them, in a totally different way that may be completely inappropriate for my career, maybe, but is fun and interesting and satisfying to learn when you kind of embrace jumping into something else.
On top of that, our procedural generation works for certain areas but doesn't in others.
So for caves and areas like that where it's organic, some of the way our objects get placed works.
But for places like this where we need structure, totally random generation doesn't necessarily give us the results we want.
This area looks a little bit too barren.
So my first thought was, OK, well, make more stuff, walls and things like that.
When it generates in-game, though, it ends up being kind of like a cluttered room, as opposed to something that looked like it once had structure.
And so in that case, I end up trying to go, OK, well, without just coming up with new generation rules, because that's really going to set us back in other areas, what can I do?
And in this case, just taking large sections of generated areas and just hand modeling out large chunks of them so that we get that structure, so that things look like something makes sense.
takes quite a bit more work, something that I would normally say, no, like, we should do it smarter.
But sometimes smart's not interesting.
And sometimes smart isn't always smart.
It's just fast.
On top of that, training the team, an extremely satisfying thing that I was able to do.
This is a checklist of the things that we have to do when putting something into the game through Maya.
It's about 10 steps, it used to be 20.
But each one of them, at least we can check off to help make sure that the team, when they're trying to learn a new piece of software and learn how to get stuff in, they don't forget one of the integral steps, because if you miss one, it won't show up.
And those kind of things were helpful.
They helped me better understand what our problem points were, and they helped the team better be able to integrate into a new process.
As well, something I started getting really used to was creating videos.
Where basically I could just record an entire video of what the process was, narrate and just talk through it, so that when our guys were jumping into 3D for the first time, that they could understand what the steps were, and how to best understand how to get stuff into the game and have it look appropriate for style.
The thing I started to really discover was to embrace some of that unpleasant discomfort, those moments of failure and those things where you feel like you're not doing what you should be doing or even doing anything worthwhile.
One thing that I found actually while I was doing this talk was this TED Talk on how frustration can make us more creative.
And Ted Harford covers some really interesting scientific studies on people dealing with frustration and how that can lead to better results.
For example, a study was done where a group of friends would have to solve some puzzles, multiple choice in this case, and they could work on it together. And they did pretty good.
And then another group would have to deal with a few friends, but also some strangers in that group.
And what ended up happening was they did much better, much better, than the group of just friends. The problem was the group of friends felt like they did a really good job. They were amped up about it. They thought they did great. They didn't.
The other group thought that they did poorly, but actually did great.
Which was something that I was feeling through the entire process on below, which was not feeling like I'm actually doing something beneficial or useful, but that might not always be the case.
The thing I started to find was to avoid my own box.
The box I create around my processes, the things that I think are the right way to do stuff.
And sometimes just stepping out of that into something bigger allows you to make something interesting.
Even if it feels like you're doing something that you thought was stupid or thought makes no sense because it's just going to lead to problems later.
means that you're making something maybe interesting.
Sometimes you've got to find that optimism, that little bit that's going to give you a reason to keep doing it and just rush into a naive idea.
Because Below and many of the games that Cabbie makes are beautiful, and they have a beautiful innocence to them where they don't care that maybe something might be crazy, because sometimes that craziness makes things much more interesting.
Thank you.
I'm at 29 minutes, so I don't think there's time for questions.
If there's a question.
Up there, okay, yeah, so we're done.
But if you want, I can go to the wrap up room, or we can chat here before the next talk starts.
Yeah, thank you guys very much.
