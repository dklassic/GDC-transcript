I'm Mark Flurry, and today I'll be talking about the game I made, Thumper.
Is there anything else?
Yes, please put your cell phones on silent or vibrate, and I'll remind you again about the evaluation forms at the end of the talk.
So thanks for coming, and I am part of a two-person team called Drool, it's myself and Brian Gibson.
You might know Brian, he's the bassist for the band Lightning Bolt.
He lives in Providence, Rhode Island.
Woo!
All right, and he's an artist and musician.
And he did all of the art and music for Thumper.
I'm a programmer.
I've been living in Korea for the past five years, but I grew up in the United States.
And I did all the programming for Thumper.
And the game design of Thumper was a collaboration between the two of us.
So if you've never heard of the Thumper, it's a simple action game.
You are a space beetle cruising through a dark, psychedelic world at high speed.
It's a rhythm game, but our goal was always to make it feel like a unique and intense experience and different than other rhythm action games.
We like to call Thumper a rhythm violence game.
So if you've never seen it, for the benefit of those who are not familiar with Thumper at all, I'll just play the trailer that we released when the game came out.
It's about a minute long, I just have to figure out how to get it on that screen.
Let's kind of do a drag.
That's good enough.
Thank you, thank you.
So hopefully that gives you an idea of what the game is like.
So you're controlling that little space beetle character.
You play the whole game with one analog stick and one button.
So a lot of it involves just beat matching with that one button.
As you can see the little rhythmic cues coming at you.
There's also times where you have to turn, jump, and fly, avoid obstacles, and defeat some bosses.
Thumper was released last October on PS4 and PlayStation VR and Steam at the same time.
And then a couple months later, I added support, we added support for Steam VR and Oculus.
So you can play the whole game either with a VR headset or without.
To give you an idea of our background, this is before we started working on Thumper.
We started back in 2009.
And at that time, Brian already had years of experience working at a game company as an effects artist.
But he had never done all the art for a game before.
He'd never art directed a game before.
And he ended up doing everything for Thumper.
Brian's a very talented musician, but he had never composed electronic music before, never done game audio, never made sound effects for games before.
And he did all the audio for Thumper.
So for myself, I had about six years of professional C++ game programming experience.
So I kind of knew what I was doing, but most of my experience was limited to things like menus and user interfaces.
Actually, very little gameplay programming, very little serious graphics programming.
Like a lot of people, I was kind of pigeonholed at my job, and I did a lot of the same thing.
I also had pretty limited understanding of 3D math or graphics.
I'd never written a line of shader code before starting Thumper.
I didn't really even know what a shader was.
So in that sense, I was kind of starting from scratch.
And also importantly, like, neither Brian and I had never really designed a game before Thumper.
We'd worked on games and kind of contributed to design discussions, but we were never actually, like, responsible for designing the whole thing.
So back in 2009, we set a set of initial goals for ourself.
Number one was make an engine.
And I think this was largely just a personal goal of mine.
I'd come to GDC, I'd been to the Experimental Gameplay Workshop, I'd seen what designer programmer hybrid types could do, and I was really impressed by that.
And part of me just felt like I'd never be a real game developer unless I made my own engine.
I don't think that's true, but this is just how I was thinking about it personally.
The other goal was, you know, let's make our own game.
I think this is what motivates probably just about everybody who's here at the Independent Games Summit.
I know we felt that, like, working at a sort of a corporate game development company, we would never really be able to do what we wanted and realize our artistic goals.
And then our goal was, you know, we kept saying like, oh yeah, we'll release it within a year or two.
You know, we said that for the first few years of the project, and this was the last generation of consoles so we actually imagined Thumper as an Xbox 360 game.
And of course, back in 2009, high quality, like VR was just a fantasy, and we never even dreamed that Thumper would be a VR game.
So I entitled this talk Seven Years in Alpha because we started seven years ago and we set our goals so far beyond our abilities at the time that we just got kind of lost along the way many times and it felt like a real adventure.
If we really wanted to hit these goals, we should have made a 2D game, something much, much simpler and easier to make than Thumper.
So it was like climbing a personal Mount Everest for us.
You know, it was definitely an adventure.
And before I get into the meat of the talk, I'll just show you what it actually took to make Thumper, which was over seven years of development.
We built the custom engine.
This is over a hundred thousand lines of code.
We added support for VR.
We released simultaneously on Steam and PS4.
And we did all that with no external QA.
It was just kind of Brian and us, and then with some help from friends at the end.
So this talk will mostly be a chronological review of Thumper, the development.
I'll talk about key moments where I made some breakthroughs and art design and technology behind the game.
I'll talk about how our understanding of Thumper evolved as we made the game.
And I'll also talk about how we changed and how we look at games changed, because if you work so long on one project, you're gonna be a different person at the end of it.
Finally, I'll say that this is my story of Thumper.
Brian might tell it a little bit differently.
So the beginning involves concept art, and Brian actually started thinking about making a game and coming up with concept art before we even started working together.
And with his friend Matt Brinkman, they came up with a lot of concepts about how the game should look.
And strong art direction was always a real strength of the project.
And you can see from these early sketches, the kind of dark mood and vibe was already set.
And these are all pencil sketches that Matt Brinkman made.
And you can see that he was creating this world out of like these little cubes.
Because the idea was that it would always be a rhythm game, so it seemed natural to sort of divide the world into these spatialized chunks where each cube represents like one beat or one measure or something like that.
And another thing that we determined quite early on was that the main character should be a beetle.
And this was an idea Matt had.
In a rhythm game, you want something, we wanted the character to be kind of circular so it's easy to tell where the center point is.
It needs to be low to the ground so you can see over it.
And we didn't want some generic thing like a spaceship or a car.
And I think with those constraints, Matt just immediately said, oh, it should be a beetle.
And that was one of the first decisions we made in the project.
And in all of these sketches, there's so many ideas.
And he came up with these really psychedelic monster ideas, these things that we never used, but are really cool.
And what I like looking about these now is I think you could make a completely different game with these concepts.
And Thumper turned out quite a bit different, but it was still really important in establishing the mood and the overall art direction of the game.
Another big contribution Matt made was the design of the main antagonist of the game.
So at the end of every level, there's this giant evil head and the track that you're moving on comes out of his mouth.
And that was an idea we had a long time ago.
We call him Crackhead.
And every level he becomes kind of more demented and more disfigured looking.
And this is just early sketches Matt made.
And the central one actually looks a lot like how he looks in the actual game.
So I'll move on to some early prototypes that we made.
I joined the project in 2009 and.
Brian hadn't established that much of a game design direction.
He had little images like this, which were, you know, he kind of imagined Thumper as something where it was like a single track, instead of a bunch of different notes coming at you, there would just be one stream of notes, but you would be on a grid, and you could turn, and that would be kind of the interesting innovation of the game.
So you can see here, like, there's kind of a layout where like you're following a path, and you have to make these right angle turns.
He also made this rendering.
Let's see if I can play it.
It's really short, but I'll play it one more time.
So that already kind of established some of the mechanics and kind of some of the look of the game.
And that's what I kind of used as my target when I wanted to start making, actually programming.
So, like I say, I didn't really know how to do 3D graphics, and the first thing I figured out how to do was draw lines.
So all the early Coder art prototypes had this kind of vector style.
And even though this is Coder art, I think.
I looked back and I dug up these old prototypes and I also looked back at the emails we were sending each other at this time just to see what we thought about these.
Because I look at them now and they look quite bad.
But what was cool is that we were really enthusiastic.
And so I sent this first prototype to Brian and his reaction was, perfect, great job.
And a month later I figured out how to actually draw quads.
And to Brian that was like 10 Christmases in a row.
And then I figured out how to do texturing, and these don't even have filtering or mipmaps, but Brian was just excited about the fact that there's textures.
And then I figured out how to do a skybox and load a model, and Brian stayed enthusiastic.
So, and I think what's really important about that is if you actually want to make your own engine, you're gonna, most of the steps will not even be that fun, right?
You'll do a lot of stuff where there's no visual outward.
outwardly visible result of the work you're doing.
So you better find some way to stay motivated and stay enthusiastic during the whole process.
So we didn't have much tech experience, programming experience, and we also didn't have much experience as game designers.
So we started to ask ourselves some questions, especially as we got years into this project, which was, is what we're doing actually interesting?
And will it be interesting for hours, right?
And this is kind of the questions I think everyone asks themselves when they're embarking on a big project.
And we didn't really know, but we just started experimenting.
So I have a few clips of some early prototypes.
Just bear with me.
Okay.
So you can see that it was the beat matching mechanic, moving on a grid, and you can see like I was doing these weird like double like 90 degree turns just to like kind of show that you could move on a grid, but we didn't really understand like what was cool about moving on a grid or why it was important, but we still thought that that was gonna be what kind of differentiated Thumper from other rhythm games.
So we actually took it in some really weird directions.
Here's another movie.
So here you have a health.
And you have to hit these beats to keep your health from falling to zero.
You have to do these really awkward and difficult loops really fast.
Yeah, as you can see, it was really easy to mess up.
And it wasn't really clear how.
It wasn't really clear what was going to be interesting about a grid-based rhythm game, but we stuck with it for a long time and then finally we decided, well, it feels the most fun just to go really fast.
And then we just started to abandon this whole idea of a grid.
And here's a later prototype.
So that one had kind of the fun rhythm game thing where it's really dense and you're getting really in the zone, you can lock in.
But it didn't really have the feeling we wanted.
It started to just feel like every other rhythm game where it just kind of looks like a UI coming at you, not like you're going through a world, right?
It was so dense, the notes are so dense.
The turns didn't have any weight or impact to them.
And then we made another prototype here.
It's kind of the same thing, but now we're actually like bending the track and deforming it as you're moving on it.
So you'll see some of the turns kind of like appear and then go away.
So in that one, we tried to make it more interesting by bending the track and making you react to that as you're playing just simple beat matching gameplay.
That also turned out to be a dead end and we abandoned it.
And we didn't really figure out where we were going until a lot of basic polish work happened.
And at this point in the project, we knew that the game wasn't that great.
And we were showing it to a lot of different designers and friends we had that we really respected who had made great games.
And a lot of their advice really didn't match up with what we were trying to do.
Like we had already gone down this path for years and when Brian and I would talk about the game we were making we both kind of convinced ourselves that we knew what we were doing.
The game itself didn't communicate these ideas to anyone else.
And we had a better understanding of where we wanted to go, but no clear path to get there.
And this is kind of this experience of being in the wilderness.
That's why I feel like we were in this state for a really long time during the project.
It's a state that can breed a lot of anxiety.
And you can feel overwhelmed, but it can also be very exhilarating.
As long as you can kind of keep moving forward without needing external validation and trust yourself then it can be a really cool place to be.
So around this point in the project in 2011, I moved to Korea, and I think that was, you know, kind of a challenging time because we'd already spent a couple years on this thing. It wasn't very fun yet. And we, you know, now that there would be a 14-hour time difference between us, there was, you know, a real risk of kind of losing momentum.
So to switch gears for a second and talk about something a little more technical, like the way we tried to address this was by adding a little feature to our editor in our engine.
So this is a screenshot of the Thumper editor.
There's a bunch of like little editor windows for different types of objects and the one in the upper left is like a browser of all the objects.
And this is like the first level in the game and there's like hundreds or thousands of objects in this file.
So if I'm working on something and Brian's asleep and I'm like, oh, you didn't set the settings on this material correctly.
It would be kind of annoying to have to tell him the name of the material and then he'd have to open this file and find it and see what I was talking about.
So we added a system where any object in the editor, you can kind of highlight it or click it, select it, and copy a URL, which represents a unique address of that object.
And here, you can see what the URL looks like.
The first part, the DRL, is like a custom protocol that you can register with Windows.
The second part is the path to that file, and then the last part is the actual name of the object.
And how to implement this is detailed on my development blog with the link down there, or you can just ask me for it after the talk.
But this ended up being super useful, and it was like one of the.
times when having a custom engine that we could really optimize to our own workflow paid off.
And we extended it a lot too, where late in the game, we made it so that you could actually copy URLs at a specific point in a level.
And that made it very easy to say, oh, there's a bug in level 2-5 on beat 16, and I could just email Brian a link and open up the game.
He just clicks it in the email, it opens up the editor, and then he's right there looking at it.
So to get back to the design problems that we were working on, we didn't really figure out what the game was until we kind of figured out how the turns work.
So this is a screenshot of one of the last kind of grid-based prototypes we made, where we found that when you're going super fast, it just seems physically awkward and weird to hit a 90 degree turn.
So we kind of made the turns less than 90 degrees.
And then here we made it a little more polished, but it just looks weird, right?
There's this weird discontinuity between the rectangular sections.
So we were still thinking of everything as these discrete kind of blocks of rhythmic time.
And for a long time, Brian kept complaining about how this looked, and he didn't like the way these looked.
And as the programmer, I was kind of like, oh, you're just being an artist, you're just worried about polish.
Like, let's figure out the real meat of the game.
Let's figure out the design problem.
And I don't really think that way about game development anymore.
And this is what it looks like in the finished game, where the turn is this smooth surface.
And I'll explain how we got there, it's really important.
And also I'll go step by step.
And I remember this very well, because I did most of this work when I was on a workcation in Hanoi.
If you're a programmer and you ever travel, I recommend you bring an external keyboard and mouse and elevate your laptop to an ergonomic position.
It's very important.
So here if you look at this track, so if you think of this as the path that the beetle moves down, every little square is one beat.
And then basically I figured out how we could deform the meshes so that they seamlessly matched up.
It seems pretty simple when I do this, but for me it was a couple weeks of work figuring out how to do that.
In a vertex shader, I calculate a rotation matrix for every single vertex and rotate it around one axis.
And then I make sure that it's seamless and it matches the next mesh perfectly.
We also added this ability to make it so we could dynamically scale the meshes before deforming them.
So here you can see I've...
made the path thinner, and then I can also extend the path.
So if each block is still the same amount of musical time, we can scale the paths and make the beetle go faster and slower really easily.
And everything's still seamless.
We also made it so that you could pitch the path up, and you could also add a twist.
So it's all three axes of rotation that you can apply.
Another really important thing is figuring out how to properly deform the normal vectors on these meshes so that the lighting looks good.
So you can see that the lighting's all smooth.
There's no weird discontinuities.
This is extra important because a big part of Thumper's visual look are reflection maps.
And these are just simple cube maps calculated from the eye position and a normal vector.
But with the normal vector properly deformed, then the reflections look really nice.
And in order for this to work, we had to really highly tessellate the meshes so that they look pretty smoothly.
So like Thumper spends a lot of time every frame just deforming vertices in a pixel shader in a way that's probably not, I mean in a vertex shader, in a way that's probably not very efficient, but a lot of, I think games end up spending a lot of time doing other things like they have real lighting or more complicated rendering or they just draw a lot of stuff.
Thumper doesn't draw a lot of stuff and we just spend the time on this.
So, you know, once this kind of came together, and here's the final image again, you can see that it's like a seamless, smooth curve.
There's a reflection map on it that has kind of a really nice iconic look.
And it seems like something that you could like hit really fast and then kind of continue going.
And, you know, beat matching was kind of.
the first kind of core mechanic we settled on, but I think turns and the feeling of the turns in Thumper what really make it feel good and what make the game actually fun to play.
And I think like most action games, there's always kind of one fundamental interaction that you play the game hours and hours for.
Like in a hockey game, it might be like checking the dude or I don't know, shooting someone in the head, stuff like that.
And you can also see that the track is sloped up.
And this was another advantage of this kind of dynamic system where Basically the whole time you're playing thumper you're moving up until where you're actually doing like a giant circle through space But that helps you see all the obstacles a lot clearer, and it's not something that most people notice, but it's actually really important So we use the same technology in so many ways.
And it's a real credit to Brian's kind of artistic vision that something that was designed just to fix this one little visual discontinuity became like the fundamental visual tool that he used to make the whole game.
So this is what the checkpoint looks like.
And I just want to show an animated version of this.
Right, so you can see.
These are the checkpoints you go through in the game, and it's using the same vertex shader, except we're applying a scale over the length of it, so it gets down to a little fine point at the bottom.
And then Brian also realized that, rather than just deforming these simple little squares, we could make more interesting meshes.
So this is a segment of something we called the zillipede.
And this thing was something we spent like way too much time on.
for its actual impact on the game, but basically here we're now like, you know, modulating colors and scale and width of a whole sequence of instance meshes.
And it creates this kind of like evil looking worm, and it's all, and the path that the worm is following is actually another sequence, and he's just kind of being phased along it to animate him.
And you can see here in this video that.
It's actually just like an animation in the editor. You can like scrub the whole thing back and forth and Like yeah, we probably spent like a couple weeks. Just making that possible and then Ultimately it showed up In the game it just kind of as a background element in one of the boss battles but You know, we also did a bunch of other experiments with this vertex shader.
We created a lot of different creatures and I really wish we would have found a way to put this guy in the game, but he got cut.
And so here, like, these are just some screenshots from the game where the decorative tentacles you see on the side are that same vertex shader being animated.
This boss and the obstacles you have to jump over, the same stuff.
It was also really important for making the tunnels that you go through, because the tunnels are all seamless and they're reflective, and it's the same thing, where now the mesh that we're deforming is just like a cylinder that you're going in the middle of, and we just sequence it.
And then Brian just did all kinds of stuff with it, like this, here's a boss character, this kind of spiral graph starfish, where it's the same thing, but now he's kind of using it as a weird particle system with this radial symmetry.
So Thumper is a music game.
I should say something about the audio, although I think it's unique in that it was a music game that found itself through visual experimentation.
And Brian did all of the audio himself, and he changed what the game sounded like so many different times.
There were a lot of different musical influences, and the way we approached it was always by making the gameplay first and the visuals and kind of just adapting the audio to fit that, kind of the reverse of how I think a lot of other music games are made.
I also want to mention that I used FMOD as the only middleware in the whole engine and it was great.
It's very indie-friendly pricing and they have awesome support, so I just want to say that I recommend FMOD.
And this is, this is, let's see if I can get this pointer up here.
So this is how we actually author gameplay.
And it looks a lot like a step sequencer, where up top here, he's placing things like the beats you have to hit, the turns in the track.
He's making an upward slope along the whole thing.
And then down here, he's triggering little samples that go along with the audio.
And I think that this tool is really fundamental.
We call it the sequence editor.
And it was really fundamental in how we made the game.
You know, when I first started working on building the engine and tools, I kind of was, you know, the only thing I knew was the engine I used at my old job, or Unity, and I was kind of trying to recreate those tools and make really general purpose stuff.
And I found that it was always got the best results when I made something really specific for our game, something that really, like a tool that could do one thing really, really well.
And that was a lesson I learned along the way.
So in 2004, I've been working on the game for a long time.
And I think because we had the turns working and the game felt really well, we felt confident enough now to submit it to things like the IGF.
And it got a nomination for excellence in audio.
And I went back and listened to that build that we submitted and it sounds terrible, like really bad, like the mastering is off, there's a lot of distortion.
And I really think that it was the visual elements and the funness of the game that convinced people to nominate it for audio.
Just the fact that it's a music game kind of makes you eligible for that category.
So I think that's why we got that.
And that was really cool.
This was us two years ago in the IGF.
And I think the best thing we got out of that was just meeting other game developers who were interested in our game.
And that was super motivating to continue and finish the game.
So I'm going to go and talk about one more really important visual element of the game, which are the post-processing effects we use.
And again, this was something that I just considered polished, and Brian kept bothering me about wanting to use post-processing effects, and our engine didn't support it, and I thought it was something we didn't have to worry about right away.
But to say something really obvious, like everything in your game needs to be interesting, or your game needs to be interesting, and how you achieve that doesn't really matter.
I think certain games like Tetris would be interesting if you, you know, with no visual polish, but Thumber's a game that is all about visual polish.
And yeah, all that matters is the final result.
And so.
Another thing Brian said was that, you know, like when you think about visual effects, post-processing effects are something that affect every single pixel on the screen.
So in that sense, they might be the most important effect you have.
So here's an image of Thumper fully post-processed.
This is from the final game.
And this is it without any of the post-processing effects.
I mean, maybe it looks kind of cool, but for me it lacks like, you know, all the dynamic elements, all the mood, all the tone that this image has.
So I just wanna go step by step and show what we did.
And all of these are really.
easy to implement, they just took a long time to kind of tune.
So first we apply a bloom, a very standard effect, and then we desaturate the scene, leaving the bloom fully saturated.
Then we apply a cubic distortion filter over the whole scene, which really distorts quite a bit.
And it's really important for selling the sense of speed in the game.
And you can see that it really distorts the player character a lot.
He gets way longer.
And nobody really knows that he's being distorted because he never really moves from that position on the screen.
And we kind of like the way he looks longer like that, so it didn't bother us.
And then we apply a levels over the whole scene.
And this is just basically modeled on the Photoshop RGB output, black-white output value filter.
This was something that Brian just wanted, and this is the one that changes the most when you play the game, and it really helps make different parts of the game have a different mood or feel.
And we apply a radial blur over the whole screen.
This also helps with the sense of speed.
And then we apply a vignette, which is a generic effect, but this kind of makes the, keeps the stuff in the periphery, it makes it less distracting, and it also brightens the center of it.
We use the overlay blend mode to bright the center of the, center point of the screen.
Like, there's no real lighting in Thumper, so this kind of is like a fake HDR or something.
And then last but not least, we apply another vignette, which we call the noise vignette.
And this, you can see it here, it only affects the skybox.
And it brightens the skybox, darkens the edges of the skybox.
And then it applies this high frequency noise.
And you have to kind of see it animated and look really closely, but there's a noise texture being played on the background.
This helps the foreground elements pop more.
Also, like, I don't understand color space theory yet.
That's something I'm gonna work on for the next game.
So there's, some pretty bad banding artifacts in Thumper because we're doing everything in linear color space and this noise kind of helps mask some of that.
So it's important.
So to summarize the essential visual effects of Thumper, we use this vertex bend shader to create the smooth surfaces.
We use tons of reflection maps on everything and we use really highly tuned post-processing effects.
What we don't have are any complex lighting.
Like we support diffuse and specular, but really don't use it almost anywhere.
No normal maps, no real particle systems.
Anything that looks like a particle was just some big hack that Brian did.
And the nice thing about that is, you know, I didn't have to program all of this stuff.
And this was like a real benefit of having this kind of minimal aesthetic and working with a really talented artist like Brian.
So I think at this point, once we really had the visual look at the game, that really built our confidence.
And now when we show the game, like people would play 10 minutes of it and they would get excited.
Well, most people would.
And I think, you know, for me, confidence as a game designer means just like being able to stick to your guns, right?
Like you have a bunch of stuff that you don't understand yet or you don't know what you're gonna do and just feel like eventually you'll figure it out.
And I think that's what having the post-boxing effects and all the visual elements gave us with Thumper.
So I'm going to make a little segue and then like I also gained some confidence as a programmer and what's really interesting is that I'm a much different programmer and the way I approach programming is different.
Specifically, one big thing is I don't use object-orientated programming anymore.
And when I was starting Thumper, it was really the default way I thought about stuff.
My brain, the gears wouldn't start turning unless I started typing out a class definition.
Or started thinking about object interaction diagrams.
And it was how everyone programmed at my old job, and that's what I thought real programmers did.
And I don't want to get into an argument about this or something, but it's just interesting to me that I change that much.
And when you work on something for a long time, you do change.
And if you're interested in this, this is a talk by Brian Will on YouTube that I recommend you check out.
And now what I think good code is, is much different.
So I have a file called avatar.cpp, it's about 5,000 lines of code, and almost 90% of the gameplay and input handling, a lot of the complicated stuff that makes Stumper fun to play is in this one file.
It's all done in a procedural programming style.
And this is also the fact that when you're on an indie game, when you're making an indie game, or when you're working by yourself, you should probably not program the same way as you do on a big team, if you wanna be more efficient.
Another example is all the rendering code is in one giant file.
Supports all these different rendering backends and probably some new ones soon.
And that's 90% of the graphics code is in this one file.
So now I'm gonna talk a little bit about how we brought Thumper to VR.
So like I said, we never imagined that Thumper would be a VR game.
And my first experiences with VR were very negative.
I think I used an Oculus DK1 and I did like a roller coaster and skydiving demo and just made me sick.
And you know, most people who saw Thumper just thought it would make them very sick if they tried to play it in VR.
But we were very aware of all the hype and the marketing opportunities around VR.
I ended up going to GDC China and I attended this talk.
I think he also gave it at GDC Europe if you want to check it out.
I thought it was very interesting.
He talked about a lot of the physiological causes of motion sickness and in particular with...
VR experiences, what makes a lot of people sick are changes in acceleration, right?
Like when you're moving or speeding up or slowing down, and your body doesn't have that same feedback, and it creates vexation and leads to motion sickness.
So I realize that in Thumper, you're going super fast all the time, but you're going at a constant speed most of the time, especially because it's a rhythm game.
And when you're going through the turns, they're so fast that they just kind of feel like teleportations, you don't really feel like you're actually turning for any extended period of time.
So we got Sony to send us a PSVR kit, and we just decided to try to bring Thumper to VR.
And this is my home office in Seoul, and this is one of the few times in the past five years where Brian and I actually got to work in the same physical space.
He came to Korea for three days, and we basically didn't leave this room for those three days, and we figured out almost all of the fundamental issues bringing Thumper to VR during that time.
So one of the first challenges was how does Thumper work with a different field of view.
Because when you have a 2D game, of course, you can set the camera field of view to whatever you want.
And in 2D, we have a super wide field of view, and that really helps things feel deeper, and it's essential to the sense of speed in the game.
In VR, the field of view is constrained by the lens in the VR headset.
If you don't know how it works, basically you have to use the same FOV as the lens, otherwise things are gonna look wrong or broken.
So here in VR, it's about 100 degrees in PSVR and everything looks way closer to you.
And when we played the game like this, it just felt kind of slow and not exciting.
And so this seemed like a really hard problem to solve, but Brian instantly knew what to do, and that was just to basically scale the path by two times, and just scale everything further away from you.
So in VR, you're actually going twice as fast as you are in non-VR, and it seems like that would be insane, but it feels like you're going basically the same speed.
So to compensate for the FOV, we just push everything further out.
And this is something that works for Thumper, but might not work for a lot of games.
Another big question was, you know, how big are you in the world of Thumper when you put on the headset?
Like, if you look at this image, like there's a space beetle and all this abstract stuff, there's no real world analog to these things.
So, originally we had it where the beetle was this big thing and you were this little tiny guy, like he's like this big spaceship or something.
And in this sense, you felt really detached and distant.
So of course we did the opposite where we made it so the beetle's about the size of your head.
And this felt like you were just like flying headfirst down this like hell ride.
And it was really intense, like too intense. It felt like you're getting smacked in the face.
And it was almost a little nauseating. And we found that the sweet spot was to be about where the beetle's shoulder width about 40 centimeters. And this felt like you were sliding down the track, kind of like a slip and slide or like a playground. And this was really the sweet spot of intensity and comfort.
And so I saw that, you know, the famous game designer Jeff Minter, who I've never met, but I saw that he was developing a PSVR game, so I sent him a build of Thumper.
And then the next day he tweeted this.
And so I think this means that we got the scale correct, because he really feels like he was, you know, immersed in there.
I guess he never mentions Thumper in this tweet, so maybe this is just the way he lives his life.
Like I say, I don't know him.
But...
Anyway, and then another cool thing we could do in VR was adjust the scale of the bosses.
So this is Crackhead in level one.
And you see that's about as big as he can be before he starts going off the screen.
But in VR, we just make him four times bigger.
And that means that you have to kind of look up to see him and he's looming and more ominous.
So that was a nice thing about the VR experience we could do.
So the stuff with all the VR, like the fact that it worked out was kind of this like incredibly fortunate And lucky thing like we kind of chased the technology, right? We're like, oh, we've got a game. It's almost done Here's this big marketing opportunity. Let's bring it to VR and it worked out but I don't know that that would work out most of the time and You know, like I say, most of what we did was really specific to Thumper.
And I don't know that it's applicable to other VR games.
I think that the big kind of takeaway here might be that, you know, when there's a new technology, no one really knows what will make it interesting or successful, like the engineers or the business people behind it have some ideas for sure, but it's always kind of up to artists to like use it in new and unexpected ways.
So in the last part of the talk, I want to kind of just talk about what it took to get Thumper over the finish line.
So the last six months of the project, you know, we decided we're going to be a PSVR launch title.
And that was the first time in the whole project we had a hard deadline.
And it was a really brutal experience.
But the first thing we had to get through was optimization, right?
So the game was running on PS4.
It was our main target platform at.
about 60 frames per second, kind of bouncing off 60 frames per second, right?
And then with PSVR, like now we're rendering the scene twice, we're doing super sampling to make it look better, and we're rendering at 90 frames per second.
So that's almost three times as many pixels per second.
And if you tried to do this, I think like raise the bar like this at the triple-a scale like you just couldn't do it Right because I mean you probably have experienced engineers who made a bunch of decisions About how art assets should be built and you had tons of content all built to those specifications And if you did this with a commercial engine like Unity, I think it's really easy to paint yourself into a corner where you've made it the whole game with one level of performance and you don't have any ability to get really deep and tinker or you don't have full control over the way your data is used and ultimately displayed on the screen.
So I think our advantage was that we had a custom engine and that I'm not an experienced graphics programmer.
So I was kind of banking that I'd done a bunch of stupid stuff that we could find and improve upon.
And we had a lot of help too.
I mean, Sony was very useful.
Like, I met with Sony engineers and they helped me better understand the PS4.
So actually getting the, getting GPU performance to spec was not that hard.
We did the thing where you draw.
both eyes at the same time, like if there's a cube in both eyes, you draw that cube for the left eye and then immediately for the right eye.
It's kind of called multi-slice rendering.
All the major VR headsets recommend you kind of render this way.
Also, because of this vertex shader, I was already using tons of hardware instancing where like, you know, we're drawing one mesh many, many times, so you only send that mesh to the GPU once and then you apply different parameters to it.
using a shader, and that was a big win for Thumper.
And then we did a few specific things for the PS4, but not that much.
Kind of the biggest thing I had to tackle was CPU optimization.
I mean, Thumper all runs on one thread on the PS4, so I didn't have time to build a multi-threaded engine, so it was really just about getting that one thread to be fast enough.
where basically everything happens.
And most of that, as is often the case, had to do with memory access and allocation.
So I just want to explain what I did there with Thumper, and it's a pretty simple thing that worked.
And it was heavily inspired by this blog post by Nicholas Gray.
And this whole blog that he has, it used to be called the BitSquid Engine, but now it's called the Autodesk Engine.
And if you're interested in building your own engine, I think this is a great resource to start.
So the main thing I do is I use custom allocators everywhere.
And so that means I override operator new like this.
So you can't use operator new.
It forces a higher level of discipline over all the code, where all the code uses a custom allocator.
And then that forces you to think about, how is the memory being used?
And is it being used efficiently?
I also require that all memory I allocate is deallocated, so in the destructor of the allocators, including when the program shuts down, they will assert.
And this is a really good way to just find memory leaks right away.
And I didn't have to build any sophisticated memory tracking tools or debugging tools.
This was sufficient.
And the reason is is because Slumper's allocation pattern's quite simple.
When the game starts up, I just malloc.
Massive chunk of memory I take advantage of the fact that like, you know The ps4 has about like eight gigabytes of memory and that's not close to how much thumper needs to run Or probably most indie games need to run And then so to start divvying up this big chunk of memory, I use a stack allocator.
So when you see like the Druill logo, like I'm basically loading over half the game during those like 10 seconds.
And it's a stack allocator, which is super easy to implement.
And then I allocate a bunch of little utility allocators for certain things that are necessary while the game's running like effects and animations.
Those are almost all pool allocators and there's a couple other ones.
And then when I load a level, I allocate from the other side of the stack.
So it's a double-ended stack allocator, still really easy to implement.
And then when the level's unloaded, it goes away and I can load a new level.
So I can do everything with this one big chunk of memory and it avoids fragmentation problems.
And I just have this, these are, I only use four types of allocators, the big stack one, the pool, scratch, and frame.
And these are all really easy to implement.
I won't go into them.
And I think the thing I just wanna.
mentioned is that I think there's a kind of a, when I was learning programming, there was this kind of attitude that, you know, memory management is super hard, and it's really dangerous.
Like, you're gonna be spending all your time chasing down memory leaks and stuff, and that's not the case, I don't think.
And it's sad that it's not taught in a way like this.
Like, once I read this, that blog post by Nicholas, I just like, a light went on, and I was like, oh yeah, that's how you should use C++, and that's how you should manage your memory.
And, And, you know, if you think that using like a garbage collected language or using something like Unity is saving you a lot of time, like, it might not actually be true.
And another big advantage of optimization, or of art direction with regards to optimization is that Brian was like totally into this minimal aesthetic.
And if you look at the game, almost all the scenes in the game are, there's one or two key visual elements.
Like there's like the boss or the tentacles or tunnel.
We never do all of them at once.
And that kind of, you know, lowered the bar for what I had to deliver as the programmer.
And Brian was really good about defending what was really critical about the look, but also he was really good about cutting the fat too.
So we didn't really have to sacrifice much visual quality to get the game running in VR.
And a nice side effect was that with PS4 Pro, we can render in native 4K, because we had done so much optimization.
So if you look at, it's easier to see on this chart, like that's, you know, native 4K at 60 frames per second is about 500 million pixels per second, which is more, but the PS4 Pro has a GPU that's about twice as powerful, so it was well within what we could do.
And then we also were able to enhance the quality on PSVR if you're running on PS4 Pro.
So during this whole optimization and bug fixing period, we were still play testing the game.
And we were still really just, everything was coming in super hot.
And I know that we had this 10 minute demo that we showed many times that people really liked, but there was the whole rest of the game.
It's a 10 hour game and how, whether or not that whole thing's gonna hold up and be fun.
and be understandable for everyone is something, a question that we didn't answer until really late.
And I think it was because of these people, especially, that we were able to do it.
These are all people that I sent builds and donated their time, just because they were excited about the game.
And it was everything from just people telling me that the game didn't run on their machine, to people who played the game for hours and hours and became experts and helped us add new expert mechanics.
So we're really grateful for that.
And like I mentioned earlier how, you know, there's this feeling that like no one could help us, right, like when we're in the wilderness.
But at the end of the project, these people saved us.
And like having like a community of other indie developers, I think is one of the most valuable things you can have.
So like I said, we had no external QA.
And I think the way that we got away with that was that, well, it's a pretty simple game, but we also did tons and tons of game shows.
It stopped being fun after a while, but we did so many of these that, like, the build was constantly being tested.
We were constantly finding usability and technical issues.
It was running on all this different hardware.
We also took advantage of the Sony kiosk demo program where I made three different kiosk demos over the last year of the project, and those all require a certification pass.
So I got some experience doing that.
We were also on the PSVR demo disk, which was another certification pass.
And it was a lot of extra work, but it ended up being worth it.
And then Sony also offered VR consultations, where we would send them builds, and they would just point out issues with the way we were doing VR.
So that was really useful.
I also want to just mention a couple partners that helped us get over the finish line.
We did everything from the business side and the marketing side ourselves.
And it was really hard for us to trust anyone.
I mean, I'm the kind of person that made my own engine, so maybe that explains it.
But.
You know, like to release on PS4 in Japan, which we did at the same time as everything else, Zach from Kakahashi Games was really helpful.
And he, his business model I think is what a lot of indie developers are looking for.
And I would recommend working for him if you want to bring a console game to Japan.
And also Chris Dwyer is a indie marketing specialist.
He's kind of like a one-man company, and he actually reached out to us and helped us with marketing and press outreach during the last month of the project when I was the most stressed out.
And he was really a lifesaver.
I think the nicest thing I can say about Chris is that during that month he really felt like part of the team, and I really trusted him.
So I think he doesn't have that much free time because he's just a one-man company, but I also highly recommend Chris.
So the game came out and, you know, it was a very weird experience, like this, you know, thing that you've worked on for so long and suddenly it's out, it's done.
I'm still kind of processing how I feel about it, but more than any review score or anything this user from NeoGAF posted this image and I think this alone made it all worthwhile.
So I mean, I think this kind of summarized a lot of our goals with Thumper.
And it's cool to see stuff like this.
But of course, we weren't actually finished.
There's an immense pressure to sustain and maximize after so much work.
We immediately started working on Vi and Oculus support.
We added a new gameplay mode called Play Plus Mode.
We did support, bugs, customer service, stuff everyone has to do, and I'm still working on stuff.
So it's really been, even though it came back out in October, it's really been a full-time job since then.
And so yeah, if you wanna go on your own and make your own engine, that's kind of what you're getting yourself into.
So yeah, I have just maybe one more unrehearsed comment about the whole project.
And I think what I will remember most fondly about the whole project is not the kind of external validation or the review scores or sales or anything like that.
It was that feeling of being in the wilderness with Brian and having that freedom and that privilege to be able to like, you know, just get totally lost and like not be conscious of, you know, what other people are going to think about the, about the game or feel about my position in the industry or anything like that.
And, um, That's a privilege that not enough people get, and I think it's something that has to come from an industry or society that makes that an important thing.
It's kind of like going to university or education, or getting an education.
You can't do that on your own.
It takes a community of people.
So, yeah, I'd like to thank everyone who helped us along the way.
Thank my wife, who I couldn't have done it without.
So that's the end of the talk.
And we have some time for Q&A.
And this is my email address if you want to message me.
If there's any questions, there's some aisle microphones.
I recommend you use those.
So I have two related questions.
It's basically how were you full-time all seven years and how did you fund the project?
Contract work or funding or?
Okay, yeah, I was full-time the last, out of the seven years, the first two years I had a day job working at a game developer and I made it work on Thumper only, like nights and weekends.
The next five years I was full-time.
So that included programming, marketing, biz dev, all that stuff.
And funding was mostly savings from my job that I worked for six years and the support of my wife, whose job in Korea came with a housing stipend and helped me have a low cost of living.
So that's how I did it.
So both the look and also some of your implementation notes about Thumper kind of remind me of the early 90s demo scene of massively optimizing graphics and tiny little packages.
Was that an influence on y'all at all?
I don't think it was a direct influence.
Although we like that stuff, I mean I think a lot of it's interesting.
I think like...
Some of the things we talked about were like, we wanted it to be really psychedelic, but we didn't want it to be like light feeling or kind of wishy-washy.
We wanted like hard psych, you know, like we wanted, and kind of like 2001, right, like the monolith, like that image is like so simple and stripped down, but it's like terrifying.
So I think, yeah, there were so many influences, more than I can mention, but that was a big one.
All right, did you satisfy your curiosity at building your own engine?
And second question would be, would you use a commercial engine knowing all the job that you need to do to actually have an engine?
Yeah, I mean, it satisfied a lot of my curiosity.
And I did have to always remind myself that I don't wanna make engines for my life.
I don't want that to be my goal.
My goal is to make games.
So sometimes I felt like I went down this weird rabbit hole that wasn't necessary, but ultimately, yeah, it was worth it.
And I don't think I could ever stand using a commercial engine now, because even if it does 99% of what I want to do, the last 1% is really important to me.
Does this one work?
Yep.
I was wondering, I saw how you created the tracks with pieces being put together, but in the game, does your character, does the beetle move in world space, or does the track move around your center point when you're moving?
The camera and the beetle are actually moving through space.
So there's actually a track out there that's being built and it's moving along.
Yeah, yeah, it's being built out like 50 beats ahead of you, and...
I mean, at one point we had it so that we could animate everything, every frame, but we kind of dialed some of that back just for performance reasons.
But yeah.
Cool.
Looks great.
Also, I made an observation that back when you had the 90 degree turns, and it's kind of like on a grid, and you're picking up balls, it reminded me of the bonus stages in Sonic the Hedgehog 3.
Oh, yeah?
OK, cool.
If you want to see a shipped version of that, check that out.
OK, cool.
Thanks.
So I fully intend to watch the YouTube video you referred to, but can you summarize in a nutshell what's wrong with object-oriented programming?
Yeah, um...
I'm not disagreeing, I'm curious.
No, sure.
I mean, well, this is just me, and I don't want to go too long on this, but yeah, I think that...
Like that video says, like object-oriented programming has this goal of encapsulating things as a way to make problems easier to solve. And I think that it forces you to do encapsulation like all the time, including really early on.
And the reality of how at least I program is that, you know, first I just kind of want to get see something working and I want to then like, you know, maybe then make it more beautiful or make it more performant or something.
And I just found that object-orientated programming just creates this meta-problem that I'm spending all my time solving and not actually solving the actual problem I want to solve.
I also find it much easier to think of things often as data and...
functions and data as separate things, especially when your goal as a game programmer is to transform tons of data at once, and trying to fit something into an object-oriented programming model is not, for me, a very useful tool.
That's basically it, yeah.
Hey, so when you were making music for Fumper, was the music more informing level design or was it the other way around?
Like, did you start first with the track that you wanted to make and then build the level around it?
Or was it more like you started with what you want to do with the level and then sort of added the music to that?
Well, yeah, Brian made all the music, but basically, I mean, it was so iterative that like, you know, we're constantly changing the levels, constantly trying new music.
So there's so much experimentation and back and forth, but.
broadly the overall goal was to like kind of make a fun action game and then add music that accompanied that so We never like I mean, there's a soundtrack for thumper and some people enjoy it and that's cool But like the goal is never to make like songs that would be catchy or memorable It was more about to make like a game experience that that use sound Thanks for the talk did you ever come close to quitting?
No, I don't think so.
I mean, and like I said, that's like a very privileged thing to say.
You know, it's kind of like, you know, I do what I want whenever I want.
You know, like, I didn't really give up because it was always something that was interesting.
And certainly, like, during the seven years.
that we were working on it, you get burned out, and you do have to start thinking about your own psychological well-being.
And like I say, there were parts where the uncertainty, anxiety were kind of paralyzing.
And certainly towards the end of the project, when I think about how hard it was, and how dehumanizing and brutal the act of commercializing the game was.
There's certainly things that I hope I never do again.
Or I got making a game all by myself out of my system, and I don't know that I want to do it the same way again.
I just wanted to ask, how did you do difficulty tuning?
Because I'm terrible at the game. I love it.
How did we do difficulty tuning?
I guess it was mostly just observing people.
You know, over, like, we kept making the game easier, basically, because obviously we were, like, total experts and we had no concept of how hard the game was by the end of it.
And so, you know, we did all these game shows where we would watch people and then we just, you know, tried to make sure that, like, 95% of people at least could.
beat the first level or get through most of the first level.
And I think there's also, like, Thumper's not that hard a game.
Well, maybe I'm biased, but it's not that punishing, right?
Like, you'll die and then you just go back to the previous checkpoint and you get to practice the same thing you just did.
And I think there's just something about rhythm games that are particularly frustrating.
You know, you know what you have to do, but you just can't do it.
And so that's why I think a lot of people, they think it's a hard game.
Hey, thanks.
I was wondering how you dealt with cross-platform problems.
since you just used FMOD as your only middleware?
Oh yeah, so right, FMOD's awesome because it worked out of the box and that was something that just worked across everything.
But for cross-platform stuff, right, so at first I wrote this really bad renderer in DX9 and that's what I was using for a long time.
And then once I had to port to PS4, that port took a long time mostly because I had to kind of...
make the engine cross-platform.
I had to build that level of indirection or abstraction into the engine.
And I think that was another instance where like, like naively I was like kind of anticipating this from an object-orientated perspective where I was like, oh, I'll make like a mesh and then I'll have like a DX subclass of that mesh or do the same thing materials.
And that's just through all that garbage out and started just basically doing procedural programming and slowly refactoring things out.
I don't know, nothing's that special.
I think every time I've added a new rendering back end, the code's gotten better because I just kind of understand things better.
Can I follow up?
Did you have a lot of support problems with different graphics cards on PC and stuff?
Yeah, I mean, still dealing with them.
And it's always hard to know.
I don't know, do Unity games have all these problems?
I don't know, maybe it's just my game because it's a custom engine.
But yeah, we kind of worked through them.
And like I say, customer service is actually a really important skill if you're gonna make a custom engine, because you've got to convince people to trust that you're actually gonna fix it and send you a system report.
And especially with the VR stuff, it's still kind of like the Wild West and there's so many different configurations.
And I think for 99% of people it works, so that's pretty acceptable.
Thank you.
Thanks.
If there are no more questions, then that might be the end of the talk.
Okay, thanks.
