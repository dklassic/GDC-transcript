Hi there, my name is Mark Burrows.
And I'm Grant Haxt.
We're designers at Naughty Dog.
This is Swiping on the Six Strings, Crafting an Interactive Guitar in The Last of Us Part Two.
So before we begin, we wanna issue a spoiler alert for The Last of Us Part Two.
We imagine you're here because you've either played the game or you don't mind being spoiled, but fair warning.
So from the very beginning of development, we knew that the guitar was going to be a key part of the game's narrative.
Joel's love for the guitar was introduced in the first Last of Us, including a promise to teach Ellie how to play.
Even in the very first story pitch for part two, this game was bookended with the instrument, beginning with Joel playing the guitar for Ellie, and ending, and gifting her with her guitar, and ending with Ellie struggling to play on her own journey, her missing fingers embodying the cost.
The guitar symbolized the bond between Joel and Ellie.
It's a symbol of life, tranquility, and hope.
And in that same vein, it was important to our creative director, Neil, from the very beginning to use Future Days by Pearl Jam as our musical throughline.
Alongside that, one of the very first cinematics we shot for the game was one of Ashley Johnson, who plays Ellie, singing a contemplative cover of Aja's Take on Me.
Beyond that, the acoustic guitar is important tonally to the world of The Last of Us, from Gustavo's evocative guitar-infused score to Joel's Texan country singer roots.
The guitar then was a narrative and tonal linchpin from the beginning.
So the question was, can we put this on the stick?
It's sort of a mantra that we use at Naughty Dog, especially one by one of our game directors, Kurt Margenau.
We could have simply left every instance of the guitar in non-interactable cinematics.
This would let us control the emotional impact, pacing and focus of these moments, since the player cannot interrupt them with incongruous behavior.
After all, if the player can't smash random chords at a frenzied pace, they can't ruin a beautiful moment of Joel playing a deeply personal rendition of Future Days to Ellie.
But then again, guitar is fun.
We knew from video games like Guitar Hero that playing a guitar in a video game can be a really engaging experience.
We could make a mini game that was at least enjoyable to play.
So the question we had to ask ourselves was, could we make an interactive guitar in our game that fit our needs for this story?
Well, we do have an intriguing narrative arc that we could play along with.
Joel plays a song at the start of the game to introduce Ellie to the guitar, and then Ellie slowly masters the guitar over the course of the game.
But then her missing fingers at the end of the game undercut that ability and sever this connection with Joel.
This teach, master, subvert structure reminded us of the parallel design formula in games like Super Mario 3D World, where it's used for level-specific mechanics.
If we set up our system to align with this progression, there'd be a direct link between that concept and the narrative journey of Ellie in the game.
Furthermore, putting the player in control of the music, just as Ellie is in control in game, would immerse the player more deeply than just watching and listening.
And when Ellie is playing, she's recalling one of her fondest memories of Joel.
If done right, an interactive guitar could be used to bring the emotional experience of Ellie and the player in line by having the player try to remember the song that they originally played as Joel.
So how does the tone of Last of Us affect this minigame?
Well, our world is realistic and grounded, so our guitar minigame probably can't have fireworks and smoke machines.
These are also going to be some of the most important and character-driven moments in the game.
We need the player to feel nostalgic and wistful.
So this can't be sex, drugs, and rock and roll.
We also need the player to feel like they're practicing.
We're not providing the fantasy of having the mastery of a rock god.
So we can't just plop in guitar hero as is.
All right, at this point, we think it's worth trying, but before we start prototyping, we need to define some of our constraints.
The first and most obvious thing to point out is that we will not be shipping this game with a peripheral controller.
Much of the fun of Guitar Hero was holding something that felt like a guitar and having the feeling of playing one in a rock band.
A lot of that enjoyment disappears when you put that functionality onto the buttons and analog sticks of a controller.
It's much harder to rock out in the squirrel stance.
So we know that we won't be simulating the feeling of holding a real guitar.
So what do we have to work with?
Well, a PlayStation controller has four face buttons, four shoulder buttons, a D pad, two analog sticks, and three buttons we can't touch because they're used for metagame functions like pausing, sharing, and leaving the game.
None of these necessarily have a great correspondence or affordance to playing a guitar.
But there is a touch pad.
This is where I kind of need to step in and say that I've had a personal obsession with trying to make something of the touch pad in one of our games I've done prototypes of painting scrolling around UI maps choosing dialogue options.
None of these have seen the light of day, but They have been attempts to utilize the most malign input on the PS4 controller.
Now, as anyone that is listening is no doubt familiar with in their use of smartphones, the touchpad has universal affordance with swiping.
We can use that swiping action to correlate to the strumming of a guitar, right?
It feels like there's an immediate affordance there.
So let's explore that.
Now, before we start going crazy trying out strumming options in our prototype, we should determine some pitfalls and mechanics we want to avoid.
We should steer clear of anything that goes against our narrative and tonal needs.
We might not be able to avoid all these things in the end, but we need to understand which mechanics might conflict with our game.
This will help us focus our prototyping and not waste time exploring dead ends.
First of all, let's say no quick time events. For designers, QTEs are great because they provide a cool unique result with a simple player interaction. Press square and see your character skewer the eyes out of a big baddie. However, for a player, they can tell that their participation is not commensurate with the result. It can feel like you're unpausing a pre-canned animation rather than performing the action yourself as the player.
This can result in the reduction of immersion. As they watch their character perform some interesting maneuver they feel they have no control over. Instead of bringing the player into the action, they're further removed and made aware of the gap between the characters and their own actions. So we should strive for a one-to-one correspondence between the player's input and the output of the guitar. No QTEs, no playing complicated series of notes from one strum.
The other issue with QTEs is that they're usually testing the player's reaction time.
And timing in this case is not actually that important for Ellie and her guitar playing.
So we probably want to avoid making any kind of rhythm game.
Ellie is just learning how to play the guitar.
These are introspective moments.
Both Ellie and the player should be able to play at their own pace.
Additionally, the final moments of the game are about Ellie's inability to play the notes due to her missing fingers.
Not that she can't keep in rhythm.
If we want that moment to land, we need the player to feel like they can't meet the same metric they've repeatedly met throughout the game.
And so that game-wide metric should be about notes, not about rhythm.
What else should we try to avoid?
Well, the guitar is meant to be a personal connection between Ellie and Joel, who is dead once Ellie has the guitar.
So we should not be playing along with something else.
That means no Dina on the drums.
But neither should that mean having a metronome the player hears or even Ellie humming.
Maybe at most we can have Ellie's head bop up and down to the beat, but there should be nothing audible that the player might feel forced to play in time with. This goes back to our avoidance of time pressure and sense of practicing, but it also limits our options on how to tell the player what they should be doing since there's nothing to play to.
Also, if possible, we should let the player noodle around if they can.
If a player is meant to play a B major and then switch to a G sharp minor, we shouldn't fail them because they're strumming on the B chord for a little bit longer.
After all, again, this should feel like you're practicing. You're allowed to make mistakes.
So in that vein, let's not have any incredibly strict fail states. Yeah.
So we know the boundaries of the space we're working in, in terms of controller, mechanical, narrative, and tonal restrictions.
We know vaguely what we want the emotional experience to be, since we know the beats were meant to convey in the cinematics we've already recorded that feature the guitar, and we have some goals we've set out.
One, try using the touch pad for strumming.
Two, make it feel like practicing a song.
And three, try to make an interesting experience that doesn't rely on rhythm or time pressure.
So.
What are some unknowns that we should look to solve in our first prototype?
Well, currently we don't have a way to play different notes and chords.
We still have all of those buttons and analog sticks available.
We should try to find something that is comfortable and easy to use alongside the touchpad.
We want to make we want to tell the player when transitioning between two chords is right or wrong.
So we need to explore how to convey what chord they should play next and how to tell them when they mess up.
This should feel similar to playing a real guitar for someone experienced with a guitar, but it should also be easy enough for anyone to play.
So we have our constraints, our goal for the mini game, and some unknowns we want to explore to help us get to our goals.
Let's start prototyping.
All right.
First thing let's get something, anything into the game.
Let's start with just the one song that we have.
We have Ashley playing take on me from a recorded cinematic.
So we have something that will show up in the final game that we can use as a target.
Let's grab some temp notes.
I think Grant recorded some MIDI notes from his phone for this step.
We'll place those notes and divide the touch pad into six string regions.
The player can strum through those to play a chord or touch one region at a time in order to play one note.
At this point, just playing the desired note when a region is pressed will be enough.
We can worry about how it sounds later on.
Now in Take On Me, there are five chords that are played in the verse and chorus.
For now, we just have to have the player choose a chord to play from a list of five.
If we put them in a list connected to face buttons, however, players will have to either check or remember how the buttons are paired to the courts.
There's a mental leap players have to overcome.
Even when the player, when the buttons are placed on screen with their corresponding chords for people unfamiliar with the layout, they have to check where a button is creating diversion of that player's attention.
So the simplest affordance is probably going to be a wheel menu on the analog stick.
The player can deflect in a corresponding direction without having to look down.
And in fact, the only way to properly confirm an input is on the screen, meaning their attention remains in one place.
They can also highlight a selection without committing to it like a button press would.
Let's start there.
Now, when you're learning a song on the guitar, you first learn the chord progression, and then you speed up faster and faster until you can play in tempo.
Let's focus on that first half where the chord progression is key.
For now, I will place a yellow square near the edge of the next chord to tell the player what to play next.
When the player strums with a chord selected, it will either flash green for correct or red for wrong.
This feedback is going to be important for letting the player know when they are making progress.
So here's one of our first prototypes.
The UI was made with debug lines and it's pretty messy, but it was easy to make changes quickly.
So it allowed me to make things like the divisions of the wheel.
Uh, what text was in each wedge, the colors of the wedges.
It kind of worked.
Let's take a look.
All right.
I think this is working.
You can see there's a lot there that stayed in the final version as a player.
I feel like I'm consciously choosing the chord, even though I don't necessarily know what the connections are between the chords, I can follow the yellow square.
If I want to make progress and red tells me if I'm making an error, but even when I make an error, I can hear the chord that I chose and even kind of dance around and play chords in any order.
They like, it actually sounds pretty good.
No matter what I do.
All right, well, let's take a look at our main song in the game, Future Days.
This one's going to be a little different as Future Days is in a different key and has different needs.
We're probably going to focus on playing six notes in the melody.
In the key of C, maybe we can show the player the notes instead of the chords this time for this song.
Okay.
Well, that's a very different wheel for Future Days with very different needs.
We can still make it work with six slices, but we're going to have to think differently about how we use them.
All right, hold on.
Let's back up a little bit more.
How many wheels are we going to need for the entire game?
What other songs do we expect to play in this game?
Mind you, at this point in the project, we're pretty early going.
So the answer is still up in the air.
We ended up needing one more song for the narrative, but at the time, it could have possibly been a lot more songs on the guitar.
Maybe in our next prototype, we should wonder if we can future-proof this system, try to handle any song that could possibly end up in the ship game.
But as we started discussing this next prototype, we quickly realized we weren't talking, what we were talking about wasn't the inclusion of any song, but rather for the ability for the player to play anything.
Now that's pretty exciting.
To make it work though, we needed some music theory.
Before we could answer how many wheels we'd need to let a player play anything, we needed to think through the basic structure of a wheel itself.
As we said, through iteration on future days and take on me, we settled on a wheel with six slices that felt good for our interface.
If we wanted to translate that to a free play or practice mode, though, that would beg the question, which chords should make up a wheel?
Well, chatting with Mark about it, got my gears turning about a different wheel concept from Western music theory, the circle of fifths.
This might look familiar to you if you've got a music background, but if not, no worries at all.
We'll go through it a little. In short, the circle of fifths is a musical organization tool that places closely related musical keys near to one another. Major keys are around the outer ring and minor keys are around the inner, and the more notes the keys have in common, the closer they are on the wheel. Adjacent slices have only a single note different in their major scales, and each major key is directly outside of its relative minor key, which has the same key signature.
Now I know that was kind of technical, but one thing that's basically boils down to is that chords close together on this wheel sound good together, generally a little more easily consonant and used together in more songs than chords that are further away. That means when we're picking our six chords, we could take say three adjacent major chords and their three relative minor chords. And we'd get a wheel that generally sounds great with itself.
and would allow the player to play a lot of songs just based off the chord relations of one wheel.
If we generalize it a little bit and pick the chord at the top of the wheel as the key, in this case, C, that gives us a template of chords that look like this.
We have our one chord at the top, the key of the wheel, and the other chords that fill out the wheel are the major four and five chords and the minor two, three, and six chords.
Now there's a lot more we could dig into there, but effectively what we get from constructing one wheel this way is two major benefits.
First, anyone familiar with guitar or this kind of theory in general has a relatively easy to understand structure for the layout of the chords, whether they know the circle of fifths itself or are just familiar with one chord, four chord, five chord, etc.
But second, for anyone that doesn't know anything about music or theory, we have a wheel that sounds internally pleasant and consistent with the sorts of pop or rock songs that Ellie has been playing, learning, and even writing.
For example, check out this clip.
Even as I play random chords around this wheel, because of the chords we chose, it still sounds good.
That's not bad.
Small tangent, Ellie mentions to Dina early on in the game that she's written some original music since learning the guitar.
Beyond being both fun for the player in creating this introspective tone, this free play wheel provided a wonderful and somewhat accidental opportunity for the player to role play as Ellie, the songwriter, experimenting with chords and progressions at their own pace.
So now that we know what one wheel looks like, how many wheels do we need to cover everything?
Well, the brute force method, if you will, if you will, would be to have 12 wheels, one for each key.
Problem there is that we have a ton of overlap, not to mention how impractical it'd be for the player to need to scrub through all 12 keys, or the cognitive load of remembering which chords lived on which of those wheels.
If there are 24 chords, 12 major and 12 minor, technically at a minimum, we'd only need four wheels of six chords.
That's a pretty good start, but there's one more wrinkle.
We want to make sure FreePlay still lets players play the real-world songs that appear in the narrative of our game.
How do we do there?
Well, we have Ellie's version of Future Days, which she plays in C, check.
Similarly, there's a small beat where Ellie performs the intro to the song Ecstasy by Crooked Still, a key part of the dance flashback in Jackson, which is in A minor.
Still covered.
We have Joel's deep, gravelly rendition of Future Days, which he plays in E flat, still in the clear.
And then, uh-oh, Ellie sings Take On Me in the key of B.
And if we want players to be able to recreate that song, we'd need a B wheel.
So for total coverage and working within existing song constraints, we grabbed five wheels of six with some small overlap.
Those wheels are in the keys of A, B, C, D flat, and E flat.
Might not be a perfectly sensible collection musically, but there is an elegance to having an alphabetical set of wheels with some flats in there.
So we have five wheels of six chords.
Players can play every major and every minor chord, and they can play future days and take on me if they want to in a single wheel.
Since the player's thumbs are occupied by selecting a chord and strumming on the touchpad, we grabbed L1 and R1 on the controller as sensible options to cycle through the five wheels with their index fingers.
There were probably other ways we could have arranged all of this.
But this is what we chose.
As you might expect, though, this did have a few side effects.
First of all, in a lucky happenstance, any possible chord you could want to play is, at most, two taps away on the L1-R1 wheel selection cycle, since the selection loops around from end to beginning.
That also would have been the case if we'd thinned it to just four wheels.
So in that respect, R5 was just as good as four.
Second of all, we have some missing keys. A lot of guitarists might say, why'd you give me a weird key like Db and not a normal guitar key like G, D, or E?
Well, like we said, since there are classic guitar keys that have a lot of overlap with one another, we decided to sacrifice those keys having their own wheel in favor of minimizing the number of wheels in total and trusting that players that really wanted to play in those keys would at least be able to cycle easily enough to find the chords they needed.
Finally, we elected to include just major and minor chords.
That means no crunchy chords, seventh chords, diminished chords, anything complicated.
This was also on purpose while it technically restricts the flexibility of what songs you can play.
Those kinds of chords are, especially for this genre, more niche and are complex enough that they'd run the risk of sounding dissonant or out of place, especially in the hands of a novice.
We always tried to think of that balance flexibility for the experienced, but forgiving, accessible, and encouraging for the novice.
By the way, there's a secret mode where you can play by the fret rather than by the chord.
You can access that by pressing L3 and R3 with photo mode turned off.
Try it to play some guitar solos from your favorite songs.
Well, now that we have a prototype for playing one song and we have a prototype for playing any song, let's dive into the nitty gritty of what we shipped with.
This is gonna be a high level discussion of the elements of the final design.
Frankly, we could drill into each one of these deeper, especially with all the interdepartmental work that it took, but we only have 30 minutes.
First, feel. What is the experience of playing this guitar?
Well, there are some issues we had to solve on the touchpad.
It's fairly small and awkwardly placed on the controller.
It can only register two inputs on the surface at a time.
There are no clear delineations between the regions where the strings are, so it can be hard to predict which string or strings you'll play when you tap or strum.
The sides of the touchpad, especially the top, curve off and have unexpected detection on them, since they don't lie flat plane with the rest of the touchpad.
And we can only detect a finger position once per frame.
Those limitations are actually pretty huge, and we had to work with and around them.
Well, most people know how a guitar is held, so the natural affordance for strumming felt like it should be up and down along the touchpad. However, this creates thin regions, it's good for strumming through a whole chord, but it's bad if you want to play one note at a time. For this reason, we had an option to swap the axis of the touchpad from vertical to horizontal to allow for more space per string.
Now, since you can only check your finger position once per frame, we need to be careful about quick strumming.
If on one frame your finger was in the B region, and in the next frame it's in the A region, I'm going to have to assume that you swiped from B to A, meaning I need to trigger the G and D, the strings in between, as well.
But what happens if you tap the same note quickly over and over again?
Well, the notes are going to play immediately on the frame the touchpad has registered, but a new note on the same string is not going to play until that region has been fully exited and returned to, and even then there's a slight delay before a new note will play from that string.
This is to prevent only the beginning of the sound from firing too quickly, creating artificial sounds.
Effectively, we had to let the note ring just a little bit before we killed it and started again.
Finally, we added some dead space around the borders of the touchpad, so that your fingers didn't have to slide over the top of the curve of the touchpad to count as a high E. In practice, this felt more natural when played. So if that's how the player plays the guitar, next up is how Ellie plays the guitar.
Our Rockstar animation team helped us get hand partials for the 24 different chord shapes we needed, as well as a few extras for Ellie's messed up fingers.
Here in the top video is a look at a few of them.
You can see that we blend between these based on player joystick direction, which is their chord selection.
We did play around with unique transition atoms between these, but the number of permutations became just untenable, and we were able to get it looking smooth enough just by blending between fixed chord poses.
Shifting to Ellie's other hand, we have multiple gestures for both strumming and picking.
You can see here in the lower video, she has a full strum when we determine that the player has strummed across multiple strings, but she also has individual plucks on her thumb, finger, forefinger, and middle finger to cover plucks on each individual string.
Finally, you can see we have animations that trigger on the strings themselves, both physically on the guitar and more abstractly in the UI element, so the player has extra reinforcement about which particular strings are ringing out at any given time.
Finally, the sound. How does the guitar play?
Well, coming back to the needs of the game narrative, we actually have four playable guitars over the course of the game.
We have Joel's guitar for Ellie at the beginning, the optional guitar in the Seattle Music Shop, the guitar backstage in the theater, and a return to Ellie's guitar in the farmhouse at the end.
Huge thanks to our legendary music and audio teams for recording and mixing everything we're about to talk about.
There were 30 notes in total with a couple of extra ones to accommodate those messy buzzed notes when Ellie's missing her fingers at the end of the game.
That was an interesting challenge.
We really wanted to sell the loss Ellie experienced with terrible sounding buzz notes, but we had to balance that so you could still recognize future days being played so that the symbolism would land.
Not only that, but we had multiple takes for each note, what are called round Robins and sampling, this is to avoid the robotic unnatural sound from re triggering a single audio file over and over again, instead having a bucket of samples for each note helps repetition sound a lot more natural.
That also meant setting up cross fading on repeated notes to avoid any hitching between samples.
And finally, we have a bunch of muting and slide sounds to fill those transitions and add that extra sweet layer of fidelity.
So how was the guitar received and what are our takeaways?
Well, excitingly, players really loved it and engaged with it a lot.
In the midst of all of the exciting and impassioned discourse around this game, it was really fulfilling to see several articles written up about the guitar mini game specifically, and several reviewers cited it as one of the game's most memorable moments.
More than that, players started doing exactly what we hope they do, covering songs, both casually on streams and quite seriously in full produced videos.
If you're interested, search around.
There's various videos on YouTube and Twitch of people playing different songs, some covers and even some originals with a couple articles compiling some of the best together.
And one of the most exciting and unexpected outcomes, some players were inspired by the system and the emotional resonance of the guitar throughout the game to pick up and learn the guitar for real.
A number of people pointed out that grabbing guitar tabs online could translate to making in-game covers, and the system functions somewhat as a learning tool in its own right.
Ellie uses mostly the correct finger shapes.
Awkwardly voiced D chord assign.
And that musically-minded organization of wheels that we talked about earlier helps inform newcomers which chords work well together and which might be good to learn next.
So that reception was super humbling, very exciting, and really validated the lesson that we learned in the process of designing and iterating on this system.
If we think about a spectrum of ways you could approach design, whether it's creative system like this or different mechanic in general, on one side is blue sky prototyping. Just start dreaming and making, think outside the box, don't get bogged down in constraints and until you have a lot of ideas that you've tried.
The problem with this is that this can be resource intensive and it can waste a lot of time as you reinvent the wheel.
On the other end, there's rigid documentation, planning every single little detail out ahead of time and wrestling to the point where you have a complete and comprehensive design in theory before you put anything into the game.
This creates a strong goal, but the end result might not end up working in the game the way you imagined it did on paper.
With this guitar, we found it super valuable to strike somewhere in the middle with something we'll call scaffolding.
In this process, we have a pre-prototype phase where we call out any external constraints, like the controller we're shipping with, define any internal constraints, like the narrative and emotional tone we want to strike and the kinds of musical mechanics that would support or undermine that tone, and define what our goals are for the prototype. In this case, testing chord selection and the player experience of succeeding or failing on the guitar.
Then you can jump into prototyping.
You have an initial framework, so you can dive straight in and start searching for solutions to the goals you define in pre-prototyping.
Focus on that core experience for now.
Don't go hog wild just yet.
But.
Once you have your first prototype, you can go into iteration.
This is where the scaffolding comes off and you can begin to build the whole building based on what you learned in prototyping, revisit those initial constraints, even stay open-minded to other possibilities you might not have initially thought of, but that's still fit within and support your initial constraints and goals.
Explore how to make those possibilities into accessible and understandable reality.
Then test the boundaries of those constraints and surprise yourself. We went from a goal to play two specific story songs to a full-fledged guitar practice mode because we were open to new ideas as long as they stay true to the narrative and emotional goals of Ellie's journey and her relationship with Joel.
With this, there's a concreteness and a specificity to the plan ahead of time, helping drive scope and vision, the scaffolding, but also a flexibility to adapt and grow your design as you prototype when new ideas or considerations come into play, like a free play mode, for example, in the design process, at least in our process, pre-planning and adapting aren't a dichotomy.
They're both essential parts of creating a great holistic system.
Thank you so much.
I hope you enjoyed this.
Many thanks again to our incredible coworkers.
Without a system like this would definitely not have been possible.
And thank you all so much for listening.
We hope you have a wonderful rest of your GDC.
