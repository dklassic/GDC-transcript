Hello and welcome everybody.
I really appreciate that you're all coming out to this talk and really climbing the stairs to the third floor.
This is Building the UI for a AAA Single.
And I'm incredibly honored to be speaking because generally there's one, maybe two UI talks even given a year.
So this is your quick reminder to silence some cell phones and to fill out the evaluation forms at the end, because it really helps to ensure that our specific discipline continues to be represented at GDC.
Finding UI talks in the vault can be a little difficult sometimes.
This is my first GDC presentation.
So it's a little surreal for me to be on stage, because just about 10 years ago or so, I was just a game development student sitting in an audience like this.
So it's kind of crazy to think that I'm standing here right now.
Today, we're going to be broadly discussing what it took at Santa Monica for our team to create the UI for God of War Ragnarok, the AAA sequel to the award-winning God of War, which came out in 2018.
And the goal today is to go in-depth on the plan and process for how we tackled this enormous project, specifically from a UI perspective.
To do that, we're gonna talk about three topics.
Number one, how do we build UI at Santa Monica?
Number two, we're gonna step through specific screens and interfaces to better understand what it took to create them.
And then lastly, as we dive into the pause menu in particular, we're gonna take a look back on 2018 and see what some of the lessons we had that we learned from.
But before we do all of that, let me introduce myself.
My name is Zach Bone, and I'm a senior staff technical designer responsible for building and maintaining the UI architecture, as well as implementing nearly every UI element that you saw in-game.
I worked on a lot of different types of games in my career, first on indie teams, and then mid-sized studios in the mobile space.
But over the last seven years, I've specifically worked as a user interface designer on these large AAA open world RPGs, starting with Spider-Man as a UI designer back in 2018, then onto Cyberpunk, and now with God of War Ragnarok.
So this is your early warning that I may spoil some aspects of Ragnarok to better provide examples of the UI development process.
So let's break down how we build UI at Santa Monica by taking a quick look at the team that did this.
At the height of production, we had 11 people working on the UI.
And for some of you, I'm sure that number sounds totally absurd.
11 people just to work on the UI.
That's kind of like a mini studio in and of itself.
But that's actually the reality of working on these colossal projects.
It's just a bunch of independent teams all working and collaborating together.
And I honestly have no idea how many people worked on Ragnarok.
Just before the pandemic, we had about 300 people and we were beginning to put desks in the aisles.
But back to our team.
It's got a pretty wide range of talents with a team that's split evenly between senior and junior developers.
So this is me.
I'm the senior technical designer for the team.
And for as long as I've worked in UI, it's generally been true that it takes about two people to build UI.
In our case, it's a combination of TD support on the implementation end and 3D art support, those who create the majority of our assets.
And at studios of this scale, we actually need redundancy, just because there is so much going on.
We have a couple of 2D artists on our team, and they act as concept artists, and they end up generating a lot of the initial assets that then get transitioned into a 3D workflow or a 3D environment.
We had a single UX designer who we stole from Naughty Dog, and they came about midway through production to specifically help supporting all of our wide range of accessibility options.
And then lastly, we have a gameplay engineer who acts as kind of this conduit between the UI script and then the rest of the game logic.
And this team was roughly the right size for Ragnarok's four-year development.
In truth, we really could have used one more technical designer, specifically at the very end of the project, only because there was so much going on.
So I'm going to get technical just for a quick minute.
This is the 60-second explanation of how our engine works.
In short, everything in our game is pre-allocated, that nothing gets created at runtime dynamically.
So we do this for performance and stability reasons.
As a result, everything in our game is owned by something called a WOD def, which you can think of as just a container of things.
Like, for instance, a level can be a WAD.
There's a ton of levels in the game.
We don't support all of them simultaneously, but we have the slots for a couple of levels to be loaded at any one time.
And if a level ends up getting too large, like some of our huge XBL areas, like the crater, it can be split up into two or more WADs in order for them to be loaded properly.
But some kinds of memory always need to be on.
These are permanent wads.
They manage progression and core systems.
And the UI is one of these permanent wads.
So everything we do has to fit really neatly into a specific memory budget.
And when the UI breaks, the entire game breaks.
Like, full stop.
It's a P1 assert, and that's never fun.
At Santa Monica, while nearly all of our assets are 2D, we utilize a 3D workflow through Maya.
In game, it's just all drawn in a screen space position relative to the camera.
Prior to this, every UI pipeline I had ever worked on was in 2D, so this was new and really weird.
And there's naturally some big difficulties in trying to author UI in Maya, which it was never really built to do.
Like, we have to hand author every layout in the entire game.
But we do take advantage of the materials and effect systems that are already really optimized for the game, which unleashes the creative potential for a lot of our artists.
Often, specifically with 2D workflows, you end up running into limitations when you hit the polish phase, when you want to start adding particles or you want to have specifically supported blend modes.
Now, we're able to access and manipulate individual Maya groups by just marking them as game objects through a Santa Monica tool.
And then on the scripting end, we have an API that allows us to globally search within a given WAD for a specifically named Maya object.
Our tech workflow is entirely run on Lua, which is a typeless scripting system that Santa Monica has been using for ages.
For Ragnarok, there was a major shift for a lot of other departments to start using a new visual scripting system.
And if you're interested in learning more, Sam Sternklar's talk, which unfortunately was earlier today, but you'll find it on the vault, is specifically on this subject.
But both the camera and the UI teams continue to use Lua for the entire duration of Ragnarok.
Now, for any students that are in the audience or those watching, I want to take a quick moment to touch on how the process for data is managed in AAA games.
Because as a student, you're probably familiar with Unity, and you're generally storing data inside of an inspector window, directly associating it with a particular script.
They're essentially runtime-associated script variables.
But in the AAA space, this data is often stored as static data.
This is quest, equipment, journal data, and it never changes throughout the whole game.
It's always static.
For designers, it's often authored in JSON or some simple markup language in a text file or maybe in Excel.
Now, the major difference is that in a text file, you can have multiple people editing it, and then it merges and diffs really nicely as it comes back together again.
What's also nice about static data is in a lot of instances, it can be changed on the fly while the game is running, which gives designers this lightning fast iteration period.
That static data gets interpreted by the game engine or the code that you're running on.
This is often written in C++, especially if you're on the AAA side, but it does require the game to be recompiled.
And the downside is this can take a really long time.
For the UI team, we're actively working on a layer above that, which gives us the flexibility as if we're acting like data.
The UI logic can either be updated on the fly or just rebuilt by rerunning the game.
And then we access all of the static data through APIs from C++, such as just give me all the quests, that's all I need at the end of the day, and then I'm gonna be the one managing how that looks on a particular screen.
But before we dig into the UI, I want to take a moment to step back and do a little bit of comparison.
Ragnarok ended up being this huge undertaking for every department.
Everything was expanded to give the Norse saga this big, epic, proper conclusion.
And on the UI side, that came in the form of maps, skills, and HUD elements.
The tech design team, which is just me and one other guy, oversees a code base that is about twice the size of the previous game.
And the crazy thing is, our memory budget never changed.
We had to do all of that in the exact same space, which was a real challenge.
But it was also a huge accomplishment, because over the last four years, we've added and rebuilt a staggering number of features, which we're going to dive into now.
To do so, we're going to cover three distinct areas.
We're going to talk a lot about various utilities.
We're going to talk a little bit about the HUD.
And then we're going to dive into the menus.
And that's when we're going to look back on the previous title and have a little critique about it.
So first up are utilities, which is what our out-of-box experience, or UBI for short, is part of.
This is the very first screen that players are going to encounter prior to any logos, splash screens, or even the front end.
And God of War 2018 had a very simplified image calibration screen in this place.
But our driving factor for an Ubi was really our commitment to accessibility.
We wanted to prioritize giving folks options from the very beginning.
So to do this menu, to build this menu, we took a lot of inspiration from what Naughty Dog had done over the last couple of games.
But we also innovated in some small ways.
This landing page is a really good example because we wanted to provide players with a really quick choice as if they wanted to skip past this or take their time through a guided setup.
Choosing the guided setup dropped players into the first of four pages.
This is just simply our common settings.
We wanted a place where all the standard options that you would expect would be chosen.
So language, subtitles, and UI text size, which is actually super important.
So remember that it exists inside of the Ubi, because I'm going to talk a little bit more about this later.
But as a quick aside, we totally underestimated the technical weight of our accessibility options.
And we ended up getting pinched by it in a couple of ways.
On the right-hand side is a visualization of all of the Lua files owned by the UI.
And the largest one is our settings menu.
We had almost 8,000 lines of Lua logic just for the definitions of what these settings options are.
In an ideal world, Lua is really not where we should be storing this.
Ideally, it's in a static data library, similar to what I was talking about earlier.
The last Ubi page that I want to cover is our accessibility presets, because one of the challenges we noticed with the Ubis that Naughty Dog had begun to develop was that there were so many options, it very quickly became overwhelming to players.
So to smooth out that user experience, we ended up creating these presets, which would change a wide variety of settings all in one go.
And they served needs like vision, hearing, motion, and motor.
Our front end is fairly standard.
It provides all the basics.
New game, settings.
And like God of War 2018, it exists in the same screen space as our introductory cut scene.
And I personally love it when the front end gets set up this way because it gives you this opportunity to have a seamless cut directly into the start of the game instead of hitting a big loading screen, which for a lot of players, especially if it's a narratively driven game, it can kind of ruin the excitement of starting that game.
but has a lot of extra overhead because it's a full scene.
It needs level designers, it needs lighting, it needs art direction.
So the core creative team needs to be on board pretty early on.
But thankfully we knew what we were getting ourselves in for.
What we didn't expect were the challenges with the recap video.
The recap was an overview of the events of God of War 2018.
And our challenge really ended up becoming how our engine deals with streaming video.
Because remember, our engine pre-allocates everything.
That includes video.
And the overall need to play video is really limited.
As a result, the max video size we actually support in-game is only 1280x720.
And now we were going to project this huge video along a wall, knowing that some players were going to be playing on a 4K television.
The crazy thing is, we ultimately didn't change anything.
This is actually a 720p video that is just stretched way out to fill the screen.
But the campfire aesthetic passes the low quality off as something that's almost genuine.
So I have kind of a takeaway for you.
You've got to pick your battles.
This one instance could have forced us to change the streaming video budget, which would have had major memory implications across the entire game.
But we ended up finding a creative solution, which turned a weakness into a strength.
Now, when you start supporting a wide number of settings options, we had 65, 70 options or something like that, it becomes difficult to how you categorize all of these.
And we ended up settling with a mix of standard categories, like gameplay, as well as adding some new and very specific ones, like text and color, as well as accessibility and our audio cues.
But we ended up being really flexible on exactly what was contained inside of each category.
Auto pickup is in gameplay, but it also appears in accessibility.
And this ended up being a combination of some of our opinions, but also the result of a lot of playtesting.
If we noticed players struggling to find a particular setting, we would end up just duplicating it into other categories.
With so many different settings, and some of them are controlled by the player, and some of them are being controlled through presets, we needed a way to know if a setting had been changed from its default value, which is where the blue text comes into play.
It's this bright pop of color to help players know at a glance what's been affected, whether they changed it or one of their presets did.
This is super cheap and immediately got a ton of results for us.
One of the single largest accessibility options we ended up supporting for Ragnarok was full controller remapping.
And I can't understate how colossal this was, as it involved re-architecting major ways the game worked under the hood.
Because up until this point, designers had hard-coded specific buttons for every action in the entire game.
So changing that paradigm took an entire village.
Now when a designer sets up an interact, they specify the action most suitable to the context of that action.
That could be aim, it could be interact, it could be evade.
So if you're looking to make major headway into embracing accessibility and the community behind it, full controller remapping is the single most requested feature by far and away.
And not every team has the advantages of AAA to support dozens of accessibility options.
But there are some really great ways that we've seen indies support players like this.
Like Celeste, which exposes just some basic gameplay options, which gives players a variety of different ways they can tune in order to make the game more accessible to them.
Or in Overland, where you can swap out the core font for one that better serves players with dyslexia.
Another aspect of utilities that the UI group supported was tutorialization.
We supported about 70 distinct tutorials in Ragnarok.
The vast majority of them all looked like this.
They were just utilizing our simple sidebar message and were happening in-game.
But we also supported about 15 in-menu tutorials which guided players through equipment, skills, transmog, and more.
For effective tutorialization, because we did a lot of this, I've got a couple of tips for you.
Number one, show tutorials in a very consistent space with consistent visualization so that players can learn where to look when they want advice.
Number two, please only teach one thing at a time.
From personal experience, combining multiple tutorials in-game really never gets you the results that you're looking for.
Now, this third one might only be for sequels, but slightly delaying the activation in case players have already discovered it or they remembered it from the previous title is a really great quality of life feature, and it just streamlines and continues to immerse the player without pulling them out into a tutorial.
For successful in-menu tutorials, I recommend a couple of steps.
You want to support additional visualization, such as the bouncing arrows that you saw earlier.
Those really help guide the player where they're looking on the screen.
You also need to architect your tutorial logic so that it ends up hijacking your input system, to ensure that only specific actions allow players to go to the next step in the process.
But ultimately, please keep your in-menu tutorials brief.
No longer than seven steps.
Because after this, players just start mashing buttons.
They're like, I'm done, I wanna get back to the game.
So, as we wrap up this portion on utilities, I wanna do a really small breakout lesson specifically on fonts.
Because I have a big passion for this and nobody else in the studio cares.
If you're new to fonts, here's a rule that I follow.
Just use two fonts.
Your first is your header font.
It's going to be stylized, and it's going to represent your artistic direction.
You're going to use this fairly sparingly.
For Ragnarok, we used a font called Berserker, which was created in-house, and it captures the feeling of the kind of Norse, runic-like patterns, and we only used it in two places.
our title text, and then our area announcement messages when you move from one realm to another or to a brand new area that you've never seen before.
It gives that moment kind of an epic space, an epic time.
For the second font, it's going to be your body font.
And if there's one thing I want you to take away from this entire talk, it's that your body font should be readable.
Our body font was Gilsans.
It's something we licensed from Adobe, and this font covered us for eFIGS.
And for those unfamiliar with localization, this stands for English, French, Italian, German, and Spanish.
This covers you for most of your western regions.
However, there's a number of regions that often require specialized fonts, as your eFIGS font just doesn't have the glyphs.
Thai, Arabic, Japanese, Korean, Chinese often require entirely separate fonts.
We actually lucked out.
Gill Sans already supports Cyrillic, so we didn't need an additional font for Russian.
The single biggest way we saved memory on Ragnarok was by utilizing a custom icon font.
Using applications like FontForge, we loaded in black and white icons into a font sheet and then we're recalling them in-game by using a Unicode value.
And this was a huge savings for us.
Instead of having material and texture costs for over 200 icons, we could instead leverage a single font that was baked into a 2048 by 2048 texture that was then compressed further down.
The additional advantage of using a font like this was that we ended up creating macros for our writers, so that they could embed inline specific icons into text fields.
So, with a tutorial, use HackSilver to purchase this.
Instead of writing HackSilver, they would use a macro for the HackSilver icon, which then players recognize and use everywhere else in their game.
And that was totally free.
That was awesome.
So for a quick minute, I want to talk about the future of how we're going to approach fonts at Santa Monica.
Because right now, we actually scan through all of the text in the whole game and scrape every glyph into a texture-packed sheet.
We do this for both the God of War icon font I showed you earlier, as well as our header and body fonts.
These are generally 1024 by 1024.
Our icon font has a lot more going on, so it's twice that size.
Each language in our game has its own WAD.
Every time you swap your language, we're just reloading the same WAD slot.
They each have about 10 megabytes.
But even with compression, we actually ran dangerously close to our memory limit by just supporting three fonts, which ended up limiting us in some really weird and kind of painful ways.
So our initial plan is to start looking at some GPU-based renders, like Slug.
So instead of creating texture sheets at all, we're just going to plug in an OTF or .ttf file, and then have that glyph get directly rendered on screen, which gives us this huge advantage of supporting a wide variety of potential font styles.
So you get a bunch of variety from your body font that you've created.
And this is a huge win from a graphic design perspective.
Being able to support thin, regular, heavy, or bold is something that artists ask for all the time.
But what's also really interesting is it unlocks emojis.
The implication is, up until now, all of our icons have been just in black and white.
But if we use emojis, we get to add color to all of those same icons, which is a huge boon for our artists.
So we're pretty excited.
Alright, I'm going to stop talking about fonts because I'm going to talk a little bit about the HUD.
Story comes first at Santa Monica, and with it, a clear cinematic direction that drives everything that we do.
From a UI perspective, we're always looking to minimize the on-screen presence to enhance that feeling.
But on the UX side, we also need to support a wide array of information that we need to give to the player.
Now, compared to the rest of the UI, the HUD visually didn't change very much since the last title.
However, we did change the system that governs the notifications that are on screen.
Most notably, we put everything into a single global queue.
Only one notification type can be on screen at any time.
But the problem was feedback we got late in development was that players sometimes had to wait too long for some of these messages to appear.
It was all in one giant queue.
And if you ever visited the well in Vanaheim and had a ton of resources, I'm sure you ran into this.
So moving forward, we're going to be revising the system to be more regional.
We'd have a queue in the upper left, a queue in the upper right.
And then we could either tie them together if we want to have a moment where a single UI message is really important, like the area announcement ones, or allow them to exist simultaneously in order to get through all of these different messages.
So the major HUD considerations we had for Ragnarok actually came in the form of supporting new and custom UI that all have a very specific gameplay use.
Muspelheim challenges, the Raven Arena, and the Mystic Gateway are all good examples of this.
Because for Ragnarok, we knew a key feature was that players needed to travel freely between all nine of the realms, as well as the realm between realms.
And our goal was to make this as intuitive and as time-saving as possible.
And that actually meant a major departure from what we had done on the previous title.
To give you a little bit of context, that was a while ago.
This was how realm travel functioned in God of War.
Kratos had to travel to a very specific place, Tyr's temple, and interact with this physical element in order to change all the various realms.
And this felt epic.
You had to go through this huge process in order to change realms, and it made that feel really meaningful.
but it was also really limiting from a UX perspective.
Players could only enter a realm from a single point, which made backtracking and revisiting areas really time intensive.
So for Ragnarok, all of that logic got moved directly onto the gateway itself.
And this UI is a blend of both Lua logic as well as some visual scripting because there's a lot of animations that are going into supporting this.
It's a unique blend between screen space UI but also diegetic elements.
The realm icons, their locked and unlocked states are all directly built into the doorway itself.
But midway through production, it became clear that players were starting to lose their momentum when they hit a mystic gateway.
Which was kind of odd.
Why were players spending so much time here?
In the videos captured during playtests, we ended up seeing players jumping in and out of the pause menu, trying to figure out where they needed to go.
So to solve this, we brought the information the players were looking for to directly to them by just adding two elements.
The first was that quest icons now appear on the door if one is present within a given realm.
And then secondly, we also keep a log of all the available quests on the right-hand side to give them a little bit more context for exactly what was being offered in each one of those realms.
and immediately we saw a huge change in player engagement as well as exploration.
There are these natural breaks in the story where Kratos encourages you to go explore and this directly helped support all of that.
So, some takeaways.
Playtests and having video footage of players is invaluable because they may not tell you that they need help.
They will just suffer in silence.
We only discovered this issue after watching through the footage ourselves.
And then anytime players open up the pause menu, they break away from the story that's being told.
In this instance, we actually empowered players with the right information in order to keep them in the flow, which is really important if you have a narratively driven title.
Another instance of custom UI requests that you're also gonna see in a lot of different types of games are specific variations of known systems.
For us, this was our boss health bars.
So early on, we sat down with the combat team and we discussed bosses and what kinds of support they would need for their health bars.
And the news was great.
Kratos was only ever going to fight one boss at a time.
Well, there was this one unique instance where he fights two Valkyries, but that fight's kind of unique because they share a health bar.
So we ended up only building a single self-contained element and we called it a day.
The thing was, a couple of months later, the combat team came back around again and said, well, we have this instance where Kratos fights two water dragons.
Can you support that?
Of course.
Of course we can support that.
But we actually don't have a great solution for more than two bosses, because there's only so much screen space.
And the combat team said, yep, that's great, and they went along their way.
In the last five months of development, The combat team came back around again and said, so, we have this instance where Kratos fights three bosses all at once.
Can you support this?
Of course.
Of course we can support this.
But we only have the room for two health bars.
So we ended up recycling the twin Valkyrie health bar in order to realize the creative vision of having this crazy, challenging boss encounter.
which is probably a good thing because fighting three of those things would be just insane.
So, some takeaways.
When building UI, you need to approach this from adaptability and scalability.
You never know when you need to expand a system or design decides to keep going further than you first expected.
But you also need to be clear about some constraints.
The combat team fully understood the limitations of screen space.
There's only so much real estate to go around.
And ultimately, it ended up in a better design.
So before we dive into the pause menu, let's talk a little bit about how the team looked back at God of War 2018.
It's a known fact that God of War 2018's development cycle had difficulties.
There's actually a great documentary out there if you're interested in learning more.
But when it came to the UI, there were two core issues.
Despite building a deep RPG that had an extensive progression and menu structure, the UI group had really limited resources at the time.
As a result, the whole UI that was shipped for the game was only built in six months, which is an amazing feat, but it ends up coming at a cost.
Because when you go fast, you miss things.
So while God of War 2018 was universally celebrated, there were aspects of the UI that held it back.
So we didn't shy away from sitting down and having a hard critique about what worked and what just didn't work.
So starting on Ragnarok, we had four specific goals from a UI perspective.
We wanted to let our pause menu characters have a greater visual impact.
We wanted to ensure that our font was always going to be readable this time.
We wanted to optimize our space as efficiently as possible.
And we wanted to make the UI really easy to navigate.
So looking back on Kratos in the menus, it was clear that instead of coexisting, he was competing with the UI for space.
From the tabs at the top to the info cards on the left and right, he was given this very narrow space to live in, and he was often overlapped by elements of the UI.
For Kratos to have the space to breathe, we needed to slide him over to the right, which gave us a much better separation between model and UI spaces.
because this one simple change had a whole cascade of updates, with the tab menu moving to the bottom, the attribute panel being condensed, and swapped over to the opposite side.
Our menu prompts in the bottom right now react to the menu depth and adjust their position accordingly.
This allows us to zoom in and out, have characters step forward and backward into frame, and it ensures that Kratos is never covered by the UI.
One of the biggest weaknesses of the UI on the last project was that text was painfully unreadable from a distance.
And while there was a post-launch patch, which made things maybe a little bit better, there's only so much that it could do.
This underlying system just straight up did not support this kind of content.
So we swore that this time around, it was just not gonna happen.
And in particular, for small text, these are the areas where players struggle the most.
Early on, we decided that our body font would never be smaller than 24 points.
And in fact, we were going to offer a wide array of text scaling options.
So no matter how far players were sitting, or if they had some kind of visual impairment, we wanted everyone to be able to read what was on screen.
As a quick aside, this text scaling was phenomenally successful.
Our early metrics at the number of players who changed the font initially did not seem real.
As of today, we're seeing nearly 60% of players change their setting, which never happens, to large, which is one step up from our default.
Once you make this commitment to having font scaling, it means that you need to build the content and the technology that scales well with it.
And this is often called dynamic layouts, where the position of content shifts to accommodate other content.
So, for instance, when you have one text field's Y position being based on the height of the text field above it.
This seemingly simple concept is not supported out of the box by most UI systems, and it needs to be built.
The card in the middle of the screen is a great example of this.
It is capable of reacting to a wide variety of possible components, from attributes and descriptions to perks, bink videos, and lore entries.
No matter what kind of content we throw at this card, we're capable of handling it, which comes in especially handy for localization, where a simple description can easily become a paragraph in certain languages.
Now, in comparison, for God of War 2018, all of the layouts were completely static.
We didn't even change or update to take advantage of the space that was available.
The stats card in the middle was built with the fullest possible layout in mind, which looks pretty good at the end of the game, but it looks really awkward at the start of the game when a piece of gear hasn't been fully realized.
And then lastly, from a pure graphic design perspective, there were some inconsistencies with navigation.
While primary navigation was localized in the same general screen space, what we considered a button was really different depending on the menu that you were in.
Buttons end up being these large sockets on the weapons menu.
They were a completely different shaped socket on the armor menu.
They were a list on the enchantments screen and there were nodes on the skill tree.
So for Ragnarok, we have a very consistent sidebar, which shows up everywhere, from the weapons and armor menus, to the skill tree, to the vendor.
We also visually transition.
Anytime we dive deeper, the menu slides to the right, while ascending is always to the left instead.
Our last section today is going to be on the menus for Ragnarok.
But instead of diving into each of the pause menus, I'm going to take you through three specific case studies.
Enchantments, skill mods, and the journal.
Our first case study, the enchantments screen, is one that I see as one of the greatest success stories of the UI.
One of the core long-term progression systems in 2018 was the enchantment system.
Gear, such as chest or waist equipment, had some number of enchantment slots.
And these slots were filled with enchantments that offered a wide variety of bonuses, from simple attribute buffs to some build-defining perks that could fundamentally change combat in interesting and unique ways.
By having enchantment slots tied directly to gear, it made that equipment really valuable, but it also created a weird UX issue.
There was no way to view all of the players' equipped enchantments all at once.
You needed to individually inspect every piece of gear, making it difficult for players to understand their overall build.
And ultimately, this UX issue led to a lower-than-desired percentage of players who would even interact with the system, particularly on the deeper side of things.
So there was this universal desire from the combat and the UI team to remedy this particular problem for Ragnarok.
And thus, the amulet of Yggdrasil was created.
It's a single place where all of the player's nine enchantments could be viewed at once.
On the UI side, this offered some challenges though.
Our first iteration had this function like every other equipment screen in the game.
Our goal was to have consistent navigation no matter where you were in the menus.
because where every slot is just a category that we dive into and then we show the list of all the possible items that can be equipped.
But this proved totally disastrous.
Players and developers hated it because just like in 2018, you end up losing track of every other enchantment you actually had socketed in.
So the solution ended up being that we had to break some of the conventions that we had stuck to our guns on for so long.
In this particular instance, we decided that the user experience need was greater than the game fantasy, so we put UI directly on top of Kratos.
And we developed a new menu structure that allowed for two simultaneous lists, the items on the left-hand side and the slots on the right, which is actually another convention that we're breaking.
Usually it's the other way around.
We start from the top and work down instead.
But in this instance, players choose an item, and then they choose a slot that it goes into.
And this was a total breakthrough.
All of a sudden, people were really starting to engage with the system.
Sorry.
But there was still some friction where players were beginning to reconceptualize their build.
So the next iteration was a context-sensitive approach.
where we allowed players to directly navigate onto the menu list, which would allow them to reverse their flow back into kind of our standard convention, where players would then pick a slot and then choose which enchantment would go into it, which ended up being a great way to rapidly unsocket all of your build if you wanted to make changes, which was really important for our power players, particularly towards the end of the game where things got really difficult and you had to hyper-specialize in order to complete the game.
Our director, Eric Williams, loved this navigation flow so much he wanted us to use the same framework for all of our companion accessories as well.
So this system and this interface is seen by the UI team as a great triumph.
It's a great system that ends up blending systems design and great UX.
And we know it's successful because nobody mentions this UI at all.
Instead, they talk about their builds and their excitement and the possibility space that enchantments provide.
So you know you've created great UI when it becomes totally invisible.
So the two takeaways that I have for you are, if it's a core system that's fundamental for long-term player engagement, and it's just not clicking, keep iterating.
But please build time into your schedule.
We did not do this.
It was a lot to finally get there, but it was totally worth it in the end.
But you also need to know when to break your own rules.
In our case, the UX rule won out over our own artistic pillars.
So the second case study I want to take a look at is our skill mods, and how another system that ended up lacking a lot of engagement in 2018 was re-conceptualized.
So in the previous title, there was a system in the skill tree called bonuses.
It's down there on the bottom right, and probably not a lot of you remember it.
This bonus system was really interesting from a combat perspective, and it opened up a lot of new possibilities for players.
The system was intended to continually keep combat fresh during the end portion of the game, after the players have already unlocked a lot of their skills.
But nobody engaged in the system at all, because it was a mismatch of player priorities.
On this menu, we had been training players for hours, just worry about your skills.
This is the only thing you need to do.
But the thing was, all of these bonuses were gated by attributes, which is something they did on a totally separate screen.
So this mismatch in player priorities basically made the system that we spent all this time building totally useless.
So, for Ragnarok, we wanted to take another stab at this.
For the same reasons as before, we wanted to keep combat fresh during the end portion of the game, after players have unlocked a bunch of skills already.
But to drive engagement, we end up doing an unusual thing.
We hid the system away entirely.
Players don't unlock skill mods until they've completed a chain of quests tied to a particular skill.
Once they complete it, next time they open up the skill menu, we introduce the system with the tutorial.
Instead of having a passive bonus that simply activates, this system now takes active participation from the player.
Players have to purchase a skill mod from a curated list of possibilities, which allows a lot of experimentation on the player end, but gives us a little bit of context and a little bit of constraints to ensure they can't get overly powerful in a particular way.
They then socket that into place.
And this tangible nature of upgrading the skill went a really long way.
We're seeing massive player engagement and player enthusiasm for this system across the board, and for something that is pretty hardcore in a lot of instances.
So, some takeaways.
Presentation matters, especially for systems that require active engagement.
But hiding progression systems, especially if they're targeted towards high-end or end-game players, can be really valuable because it makes them novel.
But don't forget to tutorialize it because you want to really introduce the fact that this is something brand new, you've never seen this before, and then they know it's a brand new system.
Our last case study that I want to discuss is a feature that I think we failed to properly deliver on, and this was the journal.
For reference, here's what it looked like in God of War 2018.
Because the pages are flat, you can't tell that we're totally faking it.
All of the assets are rendered on top of the book.
And here's the journal for Ragnarok.
In a lot of ways, it's totally identical.
But this time, the content is directly rendered onto the page.
And you can see some evidence of that with some highlights and some of the background effects that kind of like contour to the page.
But we were like, we're AAA, we want to take this a little further.
So we wanted to provide, we really wanted to prove that the content was physically present or diegetic.
So to do this, we were determined to get the book to flip the pages.
Oh man, we had no idea what we were getting ourselves in for.
At first, things are pretty straightforward.
You get these elements to show up on a page using something called a custom render target, or custom RT.
Anything sharing a custom RT texture would render together as a single flat texture that was just texture mapped to a page.
Cool, we have content on a page, this is great.
When a book is flipped, you have the left and right pages.
But when you're flipping a page, you also have the left and right pages of the next upcoming page to deal with as well.
Now a page flip happens anytime we change categories.
And some categories have similar UI elements, like headers, descriptions, or lists.
But because we're page flipping, we can't recycle any of it.
Any possible combination of categories could be opened at any time, like labors and the treasure maps.
So instead, we ended up supporting unique assets for every category.
What further complicated this was that we decided to flip pages between tabs, which was a really bad idea.
Because despite the fact that they look the same to the user, these are entirely different scripting classes under the hood.
So between the complexities of page flipping and our ability to render all of these assets in a really limited way, the scope of what should have been the simplest menu in the entire game ballooned.
And ultimately, it came to a head during the finaling period of Ragnarok.
Because testers were able to break this in so many ways.
It took a long time.
The journal is stable-ish.
But to this day, you can still put it into a broken state where no UI will render at all.
It does fix itself, I assure you, most of the time.
But please do not try pushing this harder than it should be.
So while aesthetically pleasing, most players will actually never notice this effect.
So the takeaways from the journal should really be, don't change something just because you can or you feel like you should.
Please evaluate what the change brings to the experience.
As our producer likes to say, is the juice worth the squeeze?
This was not worth the squeeze.
I spent a lot of time on this.
I'm really glad that I don't have to do that again.
So we've covered a lot of ground here, ranging from the ways that we build UI at Santa Monica to deep dives on specific UI, as well as how the UI for God of War has evolved over time to provide a better user experience for players, which really brings us to the end.
My name is Zach Bone, and I really thank you for coming out and coming out to GDC.
We've got 13 minutes left for questions if anybody wants to ask.
Hello.
I was wondering if you guys localized your header font since you said they made that in-house and we had a lot of fonts for your other languages.
Did you guys localize that in-house or what was your solution there?
So the question is, do we localize our header font?
The answer is no.
If you are not one of the western regions, you do not get this font.
We instead swap it for your body font instead, which is a real bummer, but that's kind of the limitation when you end up building something by hand.
If we had someone on staff who was a graphic designer and could continue building out all those glyphs, that's awesome.
But that's also a huge skill set.
I don't know if I would feel comfortable trying to author a Chinese glyph and making sure that it appears correctly.
So that's just kind of a limitation we live with.
Thank you.
Go ahead.
Hi, thank you for your talk.
It was very good.
I just wanted to know, what are your most recommended places to find fonts?
And what are the telltale things to know if it's readable?
So the question is, where do we often find fonts?
And what was the second part?
And what are some signs that are going to let you know that it's going to be a readable font?
It's going to be a readable font.
So the advantage of working for a really large company, and some of the downsides too, is that we are very limited to where we can find fonts from a licensing perspective.
Sony has access to a huge variety of Adobe style fonts.
So basically they're like, You can pick whatever you want, but it needs to be on the Adobe side.
As for readability, we tested a lot of different fonts in the past with a bunch of users where we just put a bunch of like lorem ipsum text and we put them side by side and eventually kind of picked down to the one that we're looking for.
What I did do for a lot of other languages was I was given a font for Arabic, for instance, and they were like, just go ahead and use this.
But I ended up turning back around to native Arabic speakers, particularly through our localization QA, and said, what do you think about this font?
and I'm really glad I did because they came back and they said, it just looks like a textbook, it's fine, whatever.
But ultimately, I then basically sat them down next to me as we went through Adobe's huge library of Arabic fonts and we picked out one that we just liked and it worked out.
Nice, thank you so much.
Go ahead.
Hi Zach, thank you for the talk.
I'm a technical UI designer, and you mentioned in the beginning that there aren't many talks on UI.
So with it being such a huge part of games, why do you think that is?
So why do I think there's not a lot of UI talks?
I think it's because it's a really specialized skill set still.
You don't see a lot of UI positions for the most part, or it's kind of a field that only developed over the last three to five years.
The industry is going to catch on, but it's also one that's really limited.
On a title like Ragnarok, we have 40 level designers, where we only have a couple of UI folks.
So the need is always going to be smaller.
It's just like at a studio, you may only need one writer.
So that is just kind of how it goes.
I hope it does change over time though.
Thank you.
Awesome talk, super informative for all of us, I think.
My question actually comes down to the connection between combat design and UI.
As a combat designer, I would love to know any tips or like insight you have to what we could do to help UI and reduce pain points late in development when we realize that we have limitations and any tips you have.
Okay, so question is like, how can you better foster a relationship between the combat and the UI teams?
This is something we talk about a lot at Santa Monica.
The combat team drives a lot of design for us.
So the biggest thing is On the UI side, being in the room when decisions are being made, that's probably the biggest thing.
We can just be a fly on the wall and kind of listen for when something needs an extra piece of user interface or potentially another set of ears.
That's probably the best thing to get started with.
Anytime there's a new system being a part of that, talk.
Hey, thank you.
That was really good.
My question is, what was the process for you guys like when you do the UI and then knowing that you have to support a lot of different languages and with fancy features like the font scaling?
Did you guys experience a lot of problems when you work on the UI and then everything is working well but only realized that it doesn't really work in another language at all.
Was there a lot of back and forth or did you guys do anything special throughout the production to help solve this sort of issues?
So kind of a good culmination of that question is, how do we make sure that we don't get bit later on for localization?
For me, it came from experience.
I ran into that exact issue on Spider-Man, and I spent three months fixing Korean, and I was like, I'm never doing this ever again.
So when I came on at Santa Monica, my goal was like, we're doing dynamic layouts, and this is how it's gonna be.
So super early on into every system, I built this expectation that it needed to have a dynamic layout.
And as we moved forward with every layout we would do, all the way down to the wireframing, we were always asking the question, how is this going to be supported in other languages?
How are we going to make sure that it doesn't have overlap or have too long of a space?
Unfortunately for a lot of localization, it comes online really late sometimes, maybe in the last five or six months where you actually get meaningful amounts of localization in and you can kind of test your UI at scale.
And it came online and it was crickets.
And I was like, oh my gosh, the world is exploding.
Like, why am I not getting any bugs like I did for Spider-Man?
And it was because the dynamic layouts worked, which was really weird.
So you got to pre-plan for it.
Great, thank you.
Go ahead.
Thanks for the talk.
I was wondering how the conversation went between you and your team, how it was when you were kind of talking about breaking your own rules, specifically about putting overlap on Kratos, and was there any disagreements, and how did you kind of manage that conversation?
So, how did we finally realize that we needed to break our own rules, specifically around the enchantment screen?
It was through feedback and through testing, we had gone through two different play sessions with the enchantment system in the game.
And the first set of play tests, we kind of ignored the feedback.
We were like, yeah, it can't possibly be that bad.
And then once it repeats, you know it's a real problem.
So at that point, we started wireframing at the very beginning of like, how can we redo this system?
But we were also under this really intense period of time where we needed to make sure whatever we did, we could implement fairly quickly and with a low amount of bugs.
So I actually ended up leading that wireframing to say, what if we did this instead?
And people were like, yep, let's run with it, which was great.
So we had a great team with a lot of great communication.
Hi.
I can see that you have a very tight memory budget, and I would like to know how you manage to support CJK in Funtouchi, because it tends to get pretty big, and we usually tend to narrow the use of character sets, but I would like to know how you tackle this.
Okay, so you're asking how did we support Chinese languages specifically on the localization side?
Yes.
Yeah.
So this is kind of the sad truth, is that we downscaled our God of War icon font down to 1024x1024 in order to upscale for a 2048x2048 to give the body font, which from a UX perspective is the most important thing, the players need to be able to read that text, That is more important than our icons, despite the fact we put so much effort into making them look good.
That's how we did it.
That is a painful thing, decision to make, and I made that decision.
That's why we're looking at other solutions to avoid having to make that decision ever again.
We ended up making that for Chinese, for Japanese, for Korean, and for Thai.
all the other languages kind of miraculously worked.
We were so close that it was fine and we could get away with it.
Thank you very much.
Go ahead.
A lot of this was answered in a previous question, but I just wanted to bring up, I work as a UI UX designer, and I really appreciated your insight into having the different panels be scalable to fit other content, rather than the content having to be adjusted.
I was wondering, for the max use cases of Ingottawar Ragnarok, like having max font size, and longer localizations like in Japanese and Korean that use a larger width.
Are there specific fallbacks that your team had used to do that?
Did the panels still adjust dynamically to fit it?
Did you have to work to shrink any particular lines of text?
Did you have to scroll it?
A big problem.
For me, as I work in a live service game and the localization comes in late, it comes in for a lot of different things.
It switches all the time.
And we have problems with it posterizing, scrolling back and forth, and bringing a lot of players' eye attention just to that text.
So I'm going to try to summarize a little bit of how do we make sure that our largest font size works in all of our dynamic layout conditions.
So we design from a perspective of the default layout.
That's the one we want to have looking the nicest from a pure graphic design perspective.
and we accept the fact that if you are pushing it all the way up to the highest text size, it may not look great in all of the instances.
There are resources in the upper right-hand corner which track your hack silver and some of your XP.
That kind of overrides or overlaps some UI in specific instances and you're like, yep, that's fine, don't worry about it.
So you kind of have to figure out what you care about and what you don't care about.
We have a scrolling solution on the cards, and in a lot of places we made sure that we had scrolling.
In the future, and this is kind of a time-intensive thing, you get the ticker tape, like you would see on CNN or something like that, where the text will go off-screen and then slowly march on-screen.
And this is really good when your text field can't go multi-line and has to stay inside of a very specific box.
and you see that a lot specifically in the settings menu where you have all of these things listed down and you don't want to support multi-line because now your buttons are offset and because you're not actually scrolling your list smoothly that you run into problems there.
So the ticker tape is ultimately like the sweet spot if you can do it right, but it takes a lot of time to make sure you can build that correctly.
Thank you so much.
Hi there, my name's Andrew.
Sounds like your team is a very supportive, generous, collaborative UI team.
As a UI designer, and maybe others here, we dread having to say no to something.
Always want to be helpful and support what the user needs, what the teams need.
Were there any instances where you did have to push back a little more at something, or had to say no to something, and how did that go?
Were there any places where we needed to say no?
I try not to say no a lot.
There are definitely places where I want to say no a lot.
The goal is it should be a conversation of like, here are the limitations that we're running up against.
And if we feel like this feature or this piece is really important, we now need to have a production conversation about what needs to get bumped next.
That is not always how it goes, but that is ideally the conversation about how we kind of handle it.
And there's a couple of instances, a lot of it is content that's cut, I don't know if I can talk about, that we ran into for that.
Sure, yeah, appreciate that, thank you.
Hi Zach, thanks for the awesome talk, I would love to ask a question about what do you think about building visual effects into a UI element, what do you think like the positive side on that, negative side on that, or do you just like don't like to do that and just treat VFX as VFX, especially for like on-screen, like a non-pausing gameplay style overlay stuff?
So how do I view VFX specifically in UI and kind of its role and its place?
VFX are awesome.
They are the super extra polish element that you not always have the time to do.
The VFX team at Santa Monica gets pulled in a lot of different ways, so we end up being the ones who author most of the visual effects talk about compared to a lot of other teams where we have designers, and we have programmers, and we have artists, is that we do so much of our stuff in-house, inside of our own team, in order to not change the trajectory or the scope or scale of other teams.
Anytime we go out and do that, it could be weeks before we get an answer, or the answer could just be, nope, they are totally booked because they're doing something else.
So, and a lot of times, our artists, our generalists, and they actively go out and learn more about other techniques or other things in order to bring that back to the UI team in order to build really polished UI elements.
Thank you.
Cool.
We are actually a little bit over time.
Thank you so much for coming out.
We'll see you around.
