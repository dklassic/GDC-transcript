So, hi everybody, my name is Jesse Vigil.
and I will talk about some of those sort of as we go.
a QA team that we by necessity had to put together, more about how to build a culture of assured quality, as I like to call it.
So even though this is the Education Summit, there might be other people in the room too, and that's cool, because this honestly can work for anybody who is small, starting out, thinking that maybe they can't afford full QA or don't have the resources to do it sort of properly.
And I say this because our games are increasingly public-facing, and I'm not...
talking just about USC games, although, I mean, even just recently, we were in the failing New York Times.
So, it's just everybody.
In general, the rock stars that we teach who are 20, 21 years old, are increasingly not waiting even until they graduate before they are starting to take their place in the professional community.
And that means that to a degree, like since more and more people from the outside world are putting hands on things, we've realized that we have to start sort of changing to reflect this reality.
I spend a lot of my time and sort of my focus in a lot of the teaching that I do is I think basically on straddling the difference between finished and done, which tends to work.
in both directions. I end up with teams that say, well, I implemented my last feature, so I guess I'm done. Or also the reverse, who are the people who say, I know that I will never be finished. Art is never finished. Only ever shipped.
So we've been making a lot of changes sort of as we go. Even just in our...
intermediate class, we build in more time for dedicated QA and the advanced game project of which I am the production faculty.
There's now a dedicated QA phase and a proper beta that is not two nights before the show.
We've done away with a mid-winter sort of progress show in favor of things that are actually fully done because we are just brimming with so much.
stuff that needs eyes on it, that we're changing the focus.
And Sean and I teach a Polish and Publish class that is entirely about taking things that were made in other classes and spending another 15 weeks polishing them up and making them public-facing.
But sort of the biggest thing that we started doing was USC Games Publishing, which is the first digital press, university press more or less.
We're a publisher on PlayStation, we're a publisher on Xbox, we're a publisher on a few other people, I can't say just yet.
But this is sort of the big time, and we've announced our initial sort of slate, but the debut title for the publishing label was going to be a student game that started as a jam and then had a lot of festival success, won a BAFTA, did more festivals, and then pitched more or less to spend another 16 months as an advanced game project with the Express purpose of becoming public facing and arriving on a console at the end.
And it went very well.
So well in fact that at the end of their show we very confidently announced the date that we had chosen and cleared with the platform, which is July, was it July 26th.
And then...
I realized that I was going to be one of the people who was responsible for that and I had a minor freak out about it because consoles have a lot of rules.
Like a lot of rules.
And this is a generic stock photo because we're not allowed to show photos of the binders that...
The consoles give but I'm guessing that there are a lot of people in this room who have seen the real binders and know That this is almost not an exaggeration Every console has different requirements They're each vague and confusing in their own ways And they kind of require a specialized skill set in order to be certified properly work the way that they're all supposed to that's the inherent promise behind a console Large publishers maintain dedicated teams devoted to just getting through the technical requirements in part because they can and it's good business, but also because you can incur severe financial penalties and we are talking about like low five figures every time you screw up after your free try which to a publisher is, somebody's gonna get yelled at into a university, it's like, how much?
And I know all of these things because my first job in games was actually in QA so I started at the Vendy Universal Games.
I guess younger and thinner.
That's actually me on Half-Life 2, during the only time we were allowed to work on Half-Life 2, which is when there was no one else in the building.
And I started in QA and I moved into requirements and eventually production, so that was sort of always known when we were mentoring this project and we knew that if we were going to be serious about this, Chambara was basically going to need...
a proper, like, team of, like, a crack team of commandos, more or less, to QA the hell out of this thing and make sure that it was going to get there.
But we didn't really have that.
And most small teams don't have that at the scale that is probably necessary, especially when the penalties for being wrong are pretty severe.
So how we decided to come about this was to solve the problem like producers and then execute it like educators.
We knew by necessity this team was going to be made up mostly of passionate volunteers who at most we could throw some hourly student worker money at, but for the most part they were going to be there because they wanted the experience, because they wanted to support their friends, because they were excited about doing this brand new thing with us.
So there's a lot of formal training normally to get to sort of requirements level QA knowledge.
We didn't have that.
But on the other hand, one thing we had that we didn't have even when I was being trained at Vivendi was theoretically we're pretty good teachers.
And so we did what we do best is we built a crash course at a curriculum really quickly based on all the things that we know.
a work about how we teach people and then try to teach them some of these things as quickly as possible.
But it's important to just sort of know that it doesn't really matter whether they're students or anything else as far as I'm concerned because one of the things that when I came to this QA, everybody sort of starts as a passionate amateur.
For a long time, and this has changed a little bit, but it's still basically true, that QA is full of people who love video games and want to learn more about how to make them and want to work in any capacity that they can.
So it's all sort of about onboarding more or less.
This is what our onboarding sort of looks like.
It was a casual meeting of friends more than anything super formal.
And the sort of early important soapbox lesson that I'm going to give about this is that our entire industry tends to mock and downplay QA to some degree.
And I kind of hate this because it shapes attitudes about the importance of delivering a quality bug-free experience.
When we treat QA like they're not part of the development team, we train developers to think QA is not part of the development process.
So I tend to try to frame QA, and I did with this team, as the last line of defense, more or less.
The only people in a critical capacity who are going to be on the side of the game.
So while it sucks to get feedback that you don't want to hear sometimes, this is the last time that you're gonna get it from people who are on your side and part of the team.
So I feel really strongly about this, and I don't put up with that mockery sort of professionally and definitely not in my classroom, and I'm happy to say that.
We had a really positive overall culture which formed the seeds of things to follow.
So in the crash course, things we did.
We explained, first of all, that there are different kinds of testing.
And while we had spent a lot of time as educators talking about the importance of playtesting, talking about usability testing, sometimes they only ever heard the testing part of it.
So whenever we talked to any of our students and say, hey, have you really tested this thing for bugs?
They're like, oh, yeah, I tested it.
But they just playtested it some more.
I even got an email from some producers just two days ago.
say they were QA testing, but it turns out they were play testing, and they found no new bugs.
So we spent a lot of time just sort of very carefully laying out all the different kinds and what each one of those things sort of, what they do more or less in order to make it better.
And the best thing that we did was frame it out of the context of game development.
So this actually worked extremely well.
I told them, all right, think about it instead of, like, when somebody finds a bug, a crime has been committed.
And your job is not to prosecute the guilty, and your job is not even to understand all of the whys.
You guys are the CSI team, more or less.
You arrive at the scene, and your job is to gather as much information and evidence as humanly possible to turn over to the developers, who will be able to do the whys, be the detectives, more or less, and make the fix, and then leave it up to production to prosecute the guilty.
And that worked really, really well.
One thing that I was trying not to do, however, was introduce a lot of complicated jargon, more or less.
But then it ended up slipping out.
And when I brought in some industry mentors, more or less, old habits flared back up and pretty soon we were having our own conversation about, well, that's a dupe or can you repro that.
I should write a suite for that.
That's a NAB, which is slang for not a bug.
But it turned out that using that slang was an unexpectedly really great thing.
First of all, it professionalized them.
It made them feel qualified and vital members of the team.
Just like any time you give any group of people a special secret code to talk in automatically, you feel cool and important and with some kind of specialized skill set.
So it felt more like being part of an elite team and less like doing menial grunt work.
And it also, I think, prepared them to interact professionally.
The students were on Sony DevNet, they were on ID at Xbox, asking questions of other seasoned developers and our partners directly.
And because they had those words, I think it definitely helped make people feel a little bit more charitable towards ushering along all of us noobs, more or less.
It also.
In hindsight, I thought about what does it mean, like why does jargon exist?
And part of it is because it's clear communication, so there's never any misunderstanding about a vagary of a word, more or less.
So because we didn't have a lot of time and we didn't have a lot of formality, the communications between the QA team and the developers were very smooth.
Another good thing that we did was, I freaked out really early on and I called my old buddy from QA.
So in 2003, that's him on the left.
and also there he is in 2016.
Tom doesn't look that different.
Neither of these photos are at work either.
It's just like him at a restaurant and him in a kitchen.
We could never take any photos at work.
This is what we have.
But yeah, so Tom is now the head of Konami QA.
And so I called him up and I said, we're going on console.
And Tom said, when?
I said, July.
And he went, no, that's not, no, you're not.
And I said, no, we seriously are.
We told the world.
And so Tom very graciously.
helped out and reminded me because I had not done a console in this generation.
My last one was PS3.
So Tom and I wrote basically a course reader, but a manual based on what we remembered from our old Vivendi training manuals, what worked and what didn't, and a lot of sort of practical knowledge that Tom picked up when he trains new hires at Konami.
The thing that we did was these manuals are also just as thick and dense as the ones that were responsible for servicing with the consoles.
And Tom and I both had a moment where we were like, oh yeah, I didn't read that very carefully either.
So we stripped a lot of that out and kept all the high-level philosophy, more or less, and pulled a lot of the technical stuff onto sort of a case-by-case, oh, now we need to know that, let's put that in there so that we don't overwhelm people.
Like here's some examples of some of the stuff that were in the book.
We talked about how to play sub-optimally.
The goal is no longer to win the game or beat the level.
Your goal is to find everything there is to know about the level, to know it better.
Be a cartographer. Have you seen every corner of the game?
Have you fallen in every pit? Have you climbed in every wall?
I told a story about when I was on Lord of the Rings Online and I walked into every tree in Mirkwood one week.
Play counter to the designers intentions.
If the designers want you to be able to unlock a door with a key, then your job today QA is to get through that door without a key.
Figure it out. Do it. Break the game. That's your job.
We also built some sort of like rapid knowledge dump, Neo, the matrix level, just pour as much as we could into their heads, PowerPoints.
These are some of the best slides.
This by far is the most effective slide in that entire talk.
I stress over and over that developers are poor QA testers unless they have superhuman discipline because they know how their game is supposed to be played and they, on some subconscious level, always want it to work and will avoid things that their brain, even subconsciously knows doesn't work.
This is also true of their friends and peers who are often good at games and understand what a game is trying to do But I remind them that the majority of their end users are not those people and they are the ones who will find a problem They are the ones who will be unhappy and they are the ones that ultimately you are trying to service So it might be slightly hyperbolic, but it really drove the point home And now that I have a toddler who grabbed my controller, I actually found like two super cool bugs recently So maybe it's not even that hyperbolic We did go over some formal stuff so that we could run as much like a professional team as possible.
This also helped us when we were talking to mentors.
So we wrote a bug just the way that you would professionally with all the pieces.
We did not invest at the time in a formal bug tracking system, although I think that's sort of an improve on my part.
We learned, I think, the upper limits of Google Foo during this process, but since we were a new publisher and we hadn't really decided on all of our techs just yet, this was a pretty good trick.
But one thing that we did was we built a lot of on-rails experiences for inexperienced QA people.
Which are very similar to professional QA test suites, but with a few extra sort of interactive tricks.
Do this, did it work?
Yes, do this then.
Did it work?
Yes, do this.
That did not work?
Okay, stop everything, write a bug right now.
Here's the form.
Now you may click here to go back and keep going.
After a while, we didn't have to do that too long before they just started using the forms on their own and everything was cool.
We also tried to make some games out of it when we did. I invented a PowerPoint game that's like a game show called Name That Severity where we all yell, we look at bugs and then we all yell how severe we think they are on a scale of 1 or A to C or 3, like a minor graphical kind of issue. I pulled things that I found personally.
or other really great sort of things.
And we sort of talked through each of them.
And even some of the edge cases, too, judgment calls and emphasizing the severity because it becomes a key part of triaging.
So bugs like this, and we were all, Firewatch was new at the time, we were all playing Firewatch, so a lot of our bugs were about Firewatch.
These sorts of things where yeah, technically the game didn't crash, but the rope is attached like basically perpetually at this point It definitely makes things Complicated and later in the game you can't do anything so It's even though it doesn't seem like a crash. It's as bad as a crash, and this is important because coming to terms with triage Keeping the notion that triage is coming early at the foreground kept everything constructive I think on some level we knew that we were going to let some things go at the end of the day but reminding ourselves that we were going to be having those conversations early helped when it came to Well, how many hours did we spend fixing a C bug when there were 12 A bugs still in the system?
How many hours does QA have left? How can they best be deployed?
And make sure that they're using their time well also, because sometimes, again Firewatch...
It was helpful to explain enhancements also, which are, I, professionally, we always use D for enhancement.
Things that are working the way that the developers intend to work, but maybe QA has a different opinion of a way things could work better.
Sometimes, inexperienced teams flood the bug system with feedback instead of bugs.
So, we spent a while talking about.
The difference between feedback and bug hunting and making sure that those were in the proper proportion.
And all of this worked out really well because, and I've been hinting at this a few times, the most important thing we did was the culture.
Overall, the environment that we were building ended up being the lasting legacy more than any of the hard and fast rote rules that we ended up teaching.
The relationship dynamics turned out to be the real factor in that team's stunning effectiveness.
The QA students became better collaborators after the summer because of the sort of team-based nature of being in the trenches in that tiny room that didn't even have air conditioning sometimes.
And there was also no substitute for practice.
So the more time that they spent with games, they even started testing other games as hard as they were testing the one that they were being paid to test.
And it really sort of built them into people who thought critically, but were able to communicate constructively.
And that ended up being a meta-conversation that wasn't formalized or anything about, but I'm already sort of seeing a vague sort of culture shift.
But the one thing that I do have to say that we were not able to streamline is I think the best on a university level, the best equivalent is sort of dedicated lab time.
But we learned that they were minimally effective.
All of these lessons were not effective when we introduced them as part of like a subclass more or less.
Only the dedicated time and large blocks of two to four hours to actually do the testing was where we started to see some real.
Results, I think there's something about just that amount of time and that closeness with the material that really starts to sort of cement some Of the broader cultural messages. Other unexpected result to use a bug term. We ended up with more mindful developers Veterans of that summer crash course team have become more thoughtful and far-thinking in their practice as developers They recognize bugs in their own work and know better practices for how to solve them They give better feedback to their fellow designers, and they manage tasks and deadlines better.
And I will say that the Chimbara developers became more thoughtful and professional for putting their game through a formal QA process.
I think they have all become a lot more respectful of the process, better at taking feedback, and more deliberate in some of the decisions that they make.
So then we shipped it, and here we are at E3, which is the proudest I've been of any title I've ever taken to E3.
And that is my 19-year-old Sony Requirements lead with the lead designer in this photo.
It was a really happy day.
We still had another month of development and fixes ahead of us when this photo was taken.
It was a struggle. I'll say that it was not easy. Without about three vital students who really threw themselves into requirements and two dedicated faculty acting as producers, we would not have made our real estate. And navigating all those procedures and all the rules and things would not have been possible without advisement from Tom and some of our partners at Sony and Microsoft. I'm going to say thank you guys so much, just in case you're ever watching on the vault.
And it's worth mentioning that before entering formal QA, the developers had worked on this thing for about 18 months prior to us getting involved.
There's a lot of work into this. This wasn't just us deciding, oh, I think it's time to put a game on a console.
In hindsight, I think there was a point maybe...
early July, where we would say why did we decide to go on a console? This is the worst idea we've ever had. The constraints ended up being super useful though, and if I had it to do all over again I would do it exactly the same way, even though there was a little bit of heartbreak along the way.
Even just the differences between working on PlayStation and Xbox, which is coming, highlighted some, and I know there's at least one developer in the room because I just saw him, lazy and suboptimal engineering.
There was an over-reliance on plugins that finally had a real-world consequence that became, I think, a really powerful lesson when it almost prevented...
submission from going through.
And it was nice to have an external keeper of standards.
We can say all of these things, but it was nice to have like Big Bad Sony and Microsoft also saying no, it will absolutely not go on the console unless these things are adhered to, that I think finally drove home some really important lessons at the end of the day.
Also, the entire team has like a really vital hireable experience now, so I wouldn't trade that either.
If you are going to go down this road and undertake some of this insanity, here are the best things that we learned so far.
Make it part of your practice in every class, even if it's just a mention.
Like I said, I feel it's important to talk about this as part of the process.
done when we get right up to the point where we're fixing bugs, we have in fact just sort of begun.
Having a dedicated class or a summer workshop was a big leap forward. That time together to focus on nothing but this paid off in spades. I don't know if we're going to have to do that every single time to be perfectly honest, even if we get new people, because the seeds of What we learned and how we conduct ourselves and how we think about things and help each other just as sort of a large developer more or less or a publisher across the entire university program have already sort of been shown and we're already starting to see that the student teams that are working on things for this year or for even the year after that are are internalizing a lot of these lessons and applying them themselves when they in turn become leaders and set up their own teams and their own cultures.
I think it works best with practical, real software and goals rather than talking about this entirely in theory like I'm doing right now.
Works 100% better when...
We have foolishly told the world that something is going to happen on a specific date.
And also, it's really, really important to celebrate those successes.
I've mentioned this at the beginning, but making QA feel like part of the whole team and also a vital and special part of it.
made a huge difference, I think, in terms of those critical points, since we couldn't necessarily even pay overtime, like a traditional publisher will dump on QA to stay all night or do all those sorts of things.
being part of the family and being part of the team and celebrating them when they did something right was what got them, got the developers through at the end of the day.
Giving them lots of scaffolding at the beginning is super good. Writing those guides, giving examples, writing sample test suites, doing a couple of bug reports at the beginning for an inexperienced team so that they have something to follow.
It goes a long way.
They'll pick it up pretty quickly.
And then this one, anecdotes are key.
Get them, share them, make them a core part of your teaching.
Tom and I, at the beginning, were worried that we were telling too many war stories and just funny stories about some of the things that happened to us in QA.
But it turned out to be those are the lessons that people remembered and stuck with and did something with moving forward.
If you don't have some of your own, but you probably do, get a few more and build that into it.
The sort of core teaching I think is that there's a big difference between hiring bug hunters and building sort of an overall culture.
We did not set out to do that, but when we figured out what was happening, we leaned on the till pretty hard to get to that direction and it's been paying sort of lasting dividends.
Chimbara in fact passed Sony FQA on the first try with zero issues.
There's normally a tab that has a list for issues, but that tab doesn't appear apparently if there are no issues, which I'd never seen before.
We thought that there was a bug and that we were going to get that report later, and they were like, no, stop asking questions.
It's fine. There's nothing wrong with it.
So that was a huge win. Tom and I high-fived over that one. Note the release on the TSN store, July 26th, exactly the day that we said.
We feel really proud of that.
But also, the veterans on this year's teams are turning out significantly more stable and complete software at the halfway mark than previous years.
I feel like it is partially due to example and partially due to training.
And there's just this, like I said, this culture of assured quality experience for players that is starting to spread.
And we're seeing this in the things that are stepped up to take that next spot.
This entire talk was about 14 years in the making, crossing those photographs.
We're still learning things.
I hope this was helpful.
Thanks a whole bunch.
And I can take a question, I think, or two before I have to wander towards the room, or the place outside where I will keep talking, if anybody's got anything.
