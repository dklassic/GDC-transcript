All right, I think it's 10 o'clock.
Good morning, everybody.
Welcome to the producer boot camp.
Some housekeeping things first.
So, please be sure to silence your cell phones.
Make sure to fill out the evaluations afterward.
Those are actually super useful for us when speaking to calibrate and make sure that people get the most out of the talks as they can.
I'm gonna put up at the end of my talk, I'm gonna put my email address up.
You don't need to take pictures of the slides.
If you email me, I will send them to you.
I'll send you a PDF with my notes and everything.
So don't bother taking pictures.
And I'm gonna leave a bunch of time for Q&A at the end.
So, you know, keep track of any questions you wanna ask.
All right, I'm gonna go ahead and start.
So this is the producer bootcamp.
My name's Ruth Temandl and I've been a producer, project manager, program manager in games and game adjacent technologies for about 16 years.
And I've kind of developed over time this love-hate relationship with ambiguity.
I wanna talk about today why there's so much ambiguity in game development, what kinds of problems it can cause and what you as producers can do about it.
So to start with, I'd like to know how many people here are currently a producer on a video game?
Oh, lots of you, awesome, all right.
And then how many of you are game developers but not producers?
And then how many of you are students who want to get into game development or production?
Cool, okay, awesome.
So to start with, I'm gonna define some things.
I'm gonna say the word ambiguity a lot in this talk, so I wanna make sure that it's clear what I'm talking about.
Ambiguity is when you don't have enough information to make good decisions.
And it's different from risk.
Here's how.
So when you bet $100 on a coin flip, that's taking a risk.
You have a ton of information.
You know how many possible outcomes there are.
You know the approximate odds of those outcomes.
And you know what's gonna happen to you in either outcome.
You're either gonna win $100 or you're gonna lose $100 and there's about a 50-50 chance of that happening.
Now humans love risk.
We cannot get enough of it.
There is, you know, there's billion dollar casino industries built around how much we completely love this.
Like we love taking risks and taking chances when we know approximately the odds on what's gonna happen to us.
Unfortunately, ambiguity is like betting $100 on if I roll the dice in this cup, are they gonna add up to at least 20?
You have very little information on which to base that decision.
You don't know how many dice I have or how many sides they have or what numbers are on them.
You don't even know if I have dice in this cup at all.
So you really don't have enough information to make that decision confidently.
Now, as much as humans love risk and seek it out, we avoid ambiguity.
We really don't like it.
It makes us uncomfortable.
It makes us unhappy and nervous.
And unfortunately, in game development, almost every decision we make is that kind of ambiguous decision where we really don't have enough information.
If you're trying to decide whether to include multiplayer in your game, for example, you don't know how much time and energy that's gonna cost you.
You don't know how many bugs it's gonna introduce.
You don't know if it's gonna be good or not, or if it's gonna be better or worse than the single player mode of your game.
Maybe players will love it, maybe they'll hate it, maybe it'll raise your Metacritic, maybe it'll lower it, right?
There's tons of possible outcomes and you really don't have a lot of information to use to predict how likely each of those outcomes are and you don't necessarily know what's gonna happen to you or your studio in any of those possible outcomes.
So ambiguity is really stressful.
We don't like it, we try to avoid it, but in game development, we deal with it constantly.
And not only is ambiguity scary and uncomfortable, to ship your game, you have to make all the decisions and get rid of all of the ambiguity.
You can't ship a game with anything TBD, right?
When you ship a game, you have made every single decision and you've decided every single aspect of every feature, every character, every single thing in your game.
Even in live games, if you're doing regular releases, you have to decide every single aspect of every single thing that goes into each release, right?
So you can only ship when all of the ambiguity is gone.
How many people here are working on a project that's super straightforward and well understood with basically no ambiguity?
Oh, one person.
Okay, awesome.
Yeah.
Since 2001, I've worked at seven studios, I've shipped a dozen games, and I've worked on a project like that once.
And that makes sense because most of us get into game development because we wanna innovate, right, we wanna make awesome new things.
And when you're innovating is exactly when you have the most ambiguity because you're doing something new, so the information about how to make your decisions really doesn't exist yet.
You are creating that information.
The other time there's lots of ambiguity is when we're personally doing something that we've never done before Which is also when we're growing the most and learning the most ourselves and becoming better game developers, right?
So we're we're again we're dealing with us all the time and especially those of us working in VR There's tons of ambiguity there because nobody even knows yet like what good VR games are or anything about it, right?
So tons and tons of ambiguity and okay, how many people here are working on a really ambiguous game?
We have tons of unknowns to deal with Yeah, so you're all in good company.
All right, let's talk about why that's hard.
You know, it's hard to make good decisions when you just don't know what's going to happen.
And there are a lot of things that are unknown when you're making a game.
Some of them you can control and some of them you really can't, right?
So first of all, like what is your game?
What game are you making?
What's it gonna be like?
What is the vision for your game?
A lot of times that's super ambiguous.
And then how do you make it?
Like how do you execute on that vision and what's going to actually happen when you sit down and start making this game?
And then even things like team roles and team organization, like who's responsible for what on your project, who's in charge of what, and who gets to make which decisions.
That can be super ambiguous.
And then things you don't have control over, like your partner's decisions.
Maybe your publisher decides tomorrow morning that they really hate first-person shooters now.
Who knows?
Anything could happen, right?
And again, you don't know the possible outcomes or necessarily what's gonna happen to you and your team in any of those outcomes.
Market forces.
Maybe a new game comes out that redefines your genre tomorrow, and you have to sit down and decide if you're going to redesign your game or not, again, with very little information on which to base that decision.
You know, other nasty surprises.
Maybe your studio floods tomorrow and you lose all of your source code.
Maybe your only multiplayer engineer quits.
You can't control a lot of these things.
But as a producer, you have to plan for them and you have to be prepared for them.
Okay.
So what can producers do about ambiguity?
In this talk, I want to talk about some of the problems that arise from really ambiguous situations and what you as the producer can do to either solve these problems or avoid them before they happen.
Again, because ambiguity is something that all of us are going to face on almost every project, so if you can get really good at dealing gracefully with it, you are going to be a really valuable producer and a better producer.
So as a producer, your job is to make sure the right work gets done.
Okay?
This is basic project management.
Make sure that the right work is getting done.
The number one thing that my team looks for when hiring project managers is the ability to deal gracefully with ambiguity.
Because as producers, there's a lot of things that we can do to manage this uncertainty.
And really, it's kind of the core of our job.
Because this is what your job is as a producer, right?
So prioritization, you know, if you're trying to make sure the right work gets done, you need to make sure that your team knows what the right work is.
Driving decisions, making sure that the right work is defined when it needs to be, and gathering the information that people need to define which is the right work.
Scheduling and tasking, communicating what the right work is to people, making sure that everyone knows who's doing it, and making sure that the things are getting, you know, that are being worked on when they need to be.
And then owning deadlines, so making sure that work gets done, and making sure everyone understands what done means.
So this is your job.
Now, on super ambiguous projects, you can get into this kind of worst case scenario state where your job becomes something that's much harder to do.
Prioritization turns into kind of wild guesses where everything's constantly changing all the time.
Driving decisions, you just hear, let me think about it some more from everybody, and they just won't decide.
Scheduling and tasking, you're like, someone should really do something, we're not getting anywhere.
You make a schedule, and three weeks later, it just looks like a total fantasy.
And then owning deadlines becomes like, hey, we passed feature complete four weeks ago and I don't think we're feature complete at all.
Multiplayer doesn't work.
Someone should probably do something about it.
This is sad because this is not a good situation.
It's really hard to deal with.
And one of the hardest things about it is often in this situation, you don't really know if it's a problem or if you just don't know how to deal with it.
So you don't know if you're the crazy person or if everyone else is crazy.
And sometimes everyone else on your team thinks this is fine.
Your creative director is having a blast coming up with cool new features that they want to put in the game.
And they tell you, making a great game is way more important than hitting some arbitrary milestone, right?
And your engineers are like, other game studios do it this way.
They just make great games and they don't even have producers.
I would much rather work there.
They don't have producers.
They just listen to their engineers and they make awesome games.
And isn't that really the important thing?
So are you turning into one of those like super process heavy producers that can only like make a schedule and follow it and isn't gonna make a great game?
Like, how do you know?
And really the question is, is it okay if things are ambiguous on your project right now?
And of course it depends, it depends on a lot of things.
So first of all, where is the ambiguity?
To successfully make a game, you have to have a core vision of a game that you want to make, and then you use that vision to drive all those thousands of execution decisions that you have to make over the course of your development.
The higher level a decision is, the more of your project it affects, the more important is that that decision get made and made early.
You have to get rid of any ambiguity in your game's vision as early as possible.
If you don't have a clear, well-defined, and well-understood vision for your game, you should do that first. That should be your top priority.
And really, nothing else I'm going to talk about matters if you don't have that.
If you haven't already, I really encourage everyone who's a producer to read the Game Outcomes Project. It was a series of articles.
I'll link to it in the notes. It was published a couple of years ago.
Paul Tozer and his team surveyed hundreds of game developers and they asked them questions about their process, how they made decisions on their team, how their team was structured, a bunch of different questions, and then they correlated the answers to those questions against the success of the finished games. And not just Metacritic, but Return on Investment and how well that game met the expectations of the development team themselves. And what they found...
was that the strongest correlating factor to a successful game was a viable, compelling, clear, and well-communicated shared vision.
Games that had this were successful, and games that didn't have this were not successful.
So if you don't have this clear, strong, agreed-on vision for your game, then you need to get one.
As a producer, that is your top job.
If you do have one, then you can use it to drive, again, all of those execution decisions and get rid of the other ambiguity on the project.
All right, similarly, ambiguity is less negative and can even be positive if you're early on in development.
So remember, ambiguity is when you don't have enough information.
So this is the cone of uncertainty.
And early on in a project, there are tons of unknowns and tons of uncertainty, right?
You don't know what game you're making, you don't know maybe what engine you're gonna use, you don't know what the main character will look like.
You have to develop all of that information over time.
And then by the time you ship, you know every single thing.
Or you've decided everything, everything is precisely defined.
To get there, you have to drive this cone down over time.
Now, the thing is, this cone does not narrow on its own, right?
It wants to get wider.
People want to play around, they want to innovate, they want to come up with cool new stuff.
But you as the producer have to make sure that the cone is trending in the right direction so that it gets to zero by the time you ship.
And again, if you have time to be in pre-production and, you know, innovate and come up with cool stuff and try things, then do that.
Like, you know, that's fine.
Just, again, as a producer, you have to keep track of where you are and where things are trending.
And then third, whether or not ambiguity is a problem depends on your constraints.
So this is the iron triangle, and you may have heard of it as fast, cheaper, good, pick two.
But in game development, usually we have to pick all three, and we have to ship a good game, and it has to have a bunch of features in it that the publisher demands or whatever.
So it can be really difficult.
And really this iron triangle, it's a way to think about your constraints.
So the smaller your budget is, the shorter your schedule, and the more features you have to include, the less room you have for ambiguity, the less room you have for that innovation and creativity, and the more you just have to focus on executing.
If, you know, again, if you have all the time and money you need to prototype for three years and be in pre-production, then, you know, go for it and knock yourselves out.
But if you don't, then you have to really tighten things down.
The least ambiguous game I ever worked on was an expansion pack to a sequel.
and the budget was small, the schedule was super tight, and because it was based on existing games, we didn't have a lot of room for innovation, right?
We knew a lot about the game we were gonna make.
So we just executed, and it went really well.
You know, it wasn't the most innovative game ever, but it was fine, and we were able to, you know, keep the ambiguity really low and just execute.
And then finally, ambiguity is a problem if it's causing problems on your project.
So I'm going to talk about five kind of major problems that can result from too much ambiguity.
And I'm going to talk about them and give you some tools that you can use to either, again, avoid these problems or fix them.
So first of all, churning without progress.
This is when you have too much ambiguity to be able to actually make real progress on your game.
No matter how hard you work, it just kind of feels like you're not really getting anywhere.
And second, feature creep.
You don't really know what your game is, so you just kind of add more stuff, hoping that you'll make it better.
And then team anxiety.
Your team is afraid of what might happen because they can't really predict outcomes, so they get kind of nervous and anxious and they aren't able to do their best work.
Conflict and resentment.
You feel like the ambiguity is somebody's fault, so you have to blame somebody.
Obviously, it's not my fault because I'm doing my best, so it must be somebody's fault.
And then indecision.
You don't have enough information to make good decisions, so you just don't make them.
So obviously most of the time the problems aren't going to be as clear as I'm going to lay them out here.
They're not going to be super clear cut.
But again, even the best well-managed projects with super clear goals are going to run into some ambiguity that's going to make your team maybe start churning or start getting anxious.
And sometimes these are small isolated problems that are easy to fix but sometimes if they're not addressed, they can grow into big giant major problems that will destroy your team.
So let's go over some things that you as a producer can do to fix these problems before they get that big.
All right, so churning without progress is probably the most damaging result of ambiguity, right?
So this is when you're doing a bunch of things, but you're not really getting anywhere.
And this is usually, again, because your vision isn't clear enough to know if you're really driving toward it or not, or if you're getting closer to your vision or not.
So here are some problems to watch for.
First of all, if your game isn't changing.
Maybe you have weekly design reviews or regular reviews where you look at the game and it's not really changing, it's not any different.
People are playing on their phones during design reviews because there's just nothing interesting happening.
Or your milestones slip.
People can't really tell you when they're gonna get something done because they're kind of blocked by something they can't really define.
Rat-holing or bike-shedding, these are both jargon terms for focusing on a small problem that's easy to fix while ignoring a gigantic problem that's hard to fix.
So you haven't decided which engine you're going to use yet, but you have these giant epic reply-all email threads about which font to use.
That's a much easier problem and something people really like focusing on and diving into because they just want to really not think about the fact that there's this huge problem they haven't fixed yet.
Go to Beadaholique.com for all of your beading supply needs!
And last, you know, throwing away work.
So, I was a level designer on a game where the level design team was pumping out levels like clockwork, so each of us were making three levels every three weeks.
And they were good levels, like we were doing good work, you know, we were having an okay time, we were delivering very regularly, but the story for the game wasn't written yet at all.
the monster behaviors weren't defined.
There were tons of things about the game that nobody knew yet.
So, you know, everything we were doing was basically destined to be thrown away.
The other problem was of the levels we were making, two out of every three of them were rejected by the lead designer as like, no, this isn't really what I'm thinking.
So, we were completely spinning our wheels. We were doing our best, but it wasn't really going anywhere, and ultimately all of that work was thrown away.
Remember that people don't get into game development because they're lazy, right?
They get into game development because they want to make awesome things.
And they will do that.
Even if you don't have your clear vision that they can work towards, they're going to do their best to do good work.
And throwing that work away is a huge waste and it's really demoralizing.
So you shouldn't do it.
Here's what you can do as a producer to fix that situation.
So again, I'm going to say this over and over and over and over, drive towards a clear vision.
Remember that the one thing that will help your team be successful is to have a strong, clear vision.
And if you don't have that, make that your top priority.
Now second, if you do have a clear vision for your game, but you still feel like your team is kind of spinning their wheels and not really getting anywhere, you know, maybe set shorter term goals or prototype goals to where your team can get in the habit of finishing things and where you can build something that you can really play test.
So, you know, let's say you build a vertical slice, which is where you sort of try to build something that reflects your final game vision to the point where it's playable.
And then your team can play it and find out, okay, what is really good about this?
What's the strengths of our game vision?
What are the things that players are gonna really fall in love with?
And then also, what are the things that took up a bunch of time and effort but that really aren't that good?
Maybe we should cut those things and focus on the things that are awesome.
And then third, is your team exploring cool, innovative ideas during pre-production?
You know, that's fine.
Or are they totally lost in the woods?
Remember that the difference between exploring and being lost is that if you're exploring, you're going towards something and you can kind of tell if you're getting closer to it.
But if you're just lost, you're lost and you're not really getting anywhere.
Again, if you have the time and money to be lost for a little while, that can be really useful.
But if you don't, make sure that you're not.
And then If you're kind of churning, but it looks like it might be temporary and you're not really sure, you can do something called time boxing.
And that's where you say, okay, we don't know yet if we're going to do multiplayer, we're trying some things, we're doing some prototypes, but if we haven't decided by May, then we should really start worrying because our schedule is not going to let us spend any more time on this, right?
Or even if your team is reluctant, or if you don't want to bring that up to your team, maybe just internally yourself as the producer.
You can say, okay, if we haven't decided by May, I'm personally gonna start worrying and freaking out and raising this to people, right?
I'm gonna raise some flags if we haven't decided this in two months or whatever.
You know, execution always takes longer than you think, especially if you're doing something new, which you probably are, so keep that in mind and just try as a producer to be a little conservative with your schedule.
And then last, if your team is so stuck that they can't make progress, you can try something drastic.
So I don't know how many of you are familiar with Scrum, but Scrum is a project management system that was developed specifically to unstick stuck teams.
I think people use it a little too much, probably more than they should.
But, if your team is super stuck, it might be worth trying something like that.
Just change up the way you do your process, change up the way you schedule or track work or something like that.
If you're having daily stand-ups, maybe change to weekly or something.
Try changing things so that maybe it kicks your team out of their deadlock.
But again, the most important thing is having a clear vision.
So I'm going to talk about a tool for developing and protecting that game vision.
Okay, so these are pillars.
I made these up, so they're not very good.
So this is a sample pillars for a made up game.
The player is a powerful commander of a dragon army.
Players can battle their armies while waiting for the bus.
And players use their huge inventory of magic items to power up their dragons.
Okay, so again, not the best pillars ever, but reading them, you can envision what this game would be like, right?
And if you're working on this game, you can kind of use these as a yardstick to think about the work you're doing, right?
If you're working on the UI for giving your dragons commands, that's really important, that supports the top pillar.
If you're working on customizable dragon houses, right, that doesn't really support any of the pillars, it's probably extraneous and you don't need to do it.
So pillars are kind of like a distillation of your entire design doc into a couple of bullets.
and they're easy to communicate, they're easy for your team to remember and understand, and you can kind of use them as a ruler for the work that you're doing.
They're also kind of like a pitch, right?
If you told someone about these pillars, if you were in an elevator with someone, you told them this, you would know pretty quickly if they were excited about the game or not, what about it excites them, what are they interested in learning more about, right?
So it's kind of a distillation of what is your game down into a very short list.
I talk about pillars and game vision all the time.
I really can't shut up about them.
And this is why I think that this is so important.
If you want to build a ship, don't drum up people to collect wood and don't assign them tasks and work, but rather teach them to long for the endless immensity of the sea.
I would bet that most people on your team did not get into game development because they really like following directions.
They get into game development because they long to make amazing, great games.
So make sure you have a vision for a game that your team will long to make and that players will long to play and that your team can believe in and be proud of and pour all of that creative energy into.
Because if you don't, you'll end up with feature creep.
And again, this is where you aren't really sure what your game is, so you kind of throw in random cool stuff, hoping that it will be good.
It won't.
It will make it worse.
Or your creative director gets super duper excited about every new idea.
She comes across and nobody can tell her no.
Or you don't know if you should tell her no or not.
Or what you should say no to.
Or you're halfway through production and your schedule is clearly completely impossible, but you don't really know what to cut.
You don't know which features are going to have the most payoff and which ones are going to be big risks that end up not being very good.
I worked on a really big AAA game that actually had a super clear, strong vision, a great vision that everyone really loved, but it was a big team.
We hadn't really worked together before.
The leadership was a little bit fractured.
The cost of failure was super high.
There were a lot of stakeholders at the publisher level that were super invested in the game.
They wanted us to add a bunch of stuff.
You know, we added all these expensive features to the game that it didn't really need, that cost a ton of time and effort.
And then, you know, we would do these demos to the stakeholders who wanted them and they would kind of get excited, but it was just this like total waste of time.
And then the features that were core to the vision of the game, which again was super good, were getting short-changed and not really worked on as much.
So, you know, this caused a lot of tension and infighting and frustration among the team because we could see that the really cool game we were thinking of just wasn't getting done.
So, what can you do in this situation?
First of all, again, ambiguity is when you don't have enough information to make good decisions.
So you can reduce ambiguity by getting information.
One way to do that is to get data by sitting down with your team and figuring out how much each of these features that you want to make are going to cost you.
There's lots of ways to do this.
This is something that's, you know, there's a lot of articles written about.
But you basically sit down with your teams, you list the features you want to do, and you come up with some way to estimate the cost of each of them.
So it can be man months.
It can be arbitrary made up numbers.
It doesn't really matter.
But if you can estimate and assign some number to the cost of things, again, it'll give you a little peek inside this dice cup, which can really help you make decisions.
And then honestly evaluate each feature against your game vision.
So if you have pillars, or a design doc, or a vision statement, you can evaluate those features.
Do they really support our game vision or not?
Are they extraneous?
Can we cut them and not really lose anything?
And remember that if your constraints are tight, the tighter your constraints, the less you can afford this extra stuff.
The more you have to focus on really just what do your pillars absolutely need?
And then, you know, you can work with your team to rank features based on these two aspects, cost and value.
Be brutally honest about how much this stuff is going to cost and how much you really need it.
Here's an example of a feature list ranked by benefit to the game, so this could be just how much it supports the pillars or how good it is, and then secondly by effort, so this could be man hours, it could be man months, it could be just some arbitrary number, and then based on those two numbers develop a value, some value estimate for how valuable is this feature to my game, what's the return on investment?
If you can use this to really generate your priority list, start at the top and work down, and then realize, okay, you know what, these two features, they seem cool, but they really either don't have a lot of value to the game or they're just gonna cost us too much.
We don't need to do them.
Make sure that you have some way to add numbers to things so that your team can really agree, right?
And again, these numbers do not have to be super precise.
They don't have to accurately reflect like the exact number of days you're gonna spend on it.
But just having numbers so that you can have a conversation about it with your team is gonna be really valuable.
There's a GDC 2015 talk about doing this on the Witcher 3, which is super interesting.
I'm going to link to it in the notes and I recommend checking that out if you're interested in learning more about this.
All right.
So third, team anxiety.
This is when your team just gets overwhelmed by the amount of ambiguity and they get unhappy, they get negative, or maybe they just kind of give up and stop putting so much effort in because they feel like their effort isn't going to the right place.
And maybe that's because they don't know what they're expected to do.
They don't know what success looks like for them.
Maybe this is because your game vision isn't really clear to them, so they don't know what they're working towards.
Or maybe they don't see how their work fits into that game vision, right?
Maybe they're working on something that doesn't really support any of the pillars, so they don't understand how it fits.
Or maybe they don't believe in your game vision.
Maybe you're working on a game in a genre they don't respect or like.
Or maybe they don't think the game you're making is good.
Or maybe you or the leads on your team just don't have credibility, so that you tell them what the vision for the game is, and that, hey, you're working towards this thing that's really important, but they just don't believe you.
One of the worst instances of this I ever saw, so I was on a project that had an enormous amount of pressure, right, and tons of ambiguity.
The design for the game, the core design, kept changing really radically, and that meant that the design team was crunching to implement these changes into the levels and catch up with the balance changes and all the other major changes that were happening.
So everyone was working crazy hours, tempers were high, stress was super high, people were having shouting matches on the floor over who wasn't doing their job.
Years long friendships were dissolving, it was a mess.
And in the middle of all of that, we had a team meeting.
And one of the studio heads got up in front of everyone and said, hey, our plan is great, if you guys are crunching, it's your own fault for not planning well enough.
And this happened over 10 years ago, and you can probably tell I'm still pretty upset about it.
That was like a slap in the face, right?
And not only because it was clear that our hard work wasn't being appreciated and respected, but also because either they didn't know we were crunching this hard, in which case we didn't trust them anymore, we didn't trust their judgment, or they knew and they just didn't care, right?
And neither of those are great.
Don't do this to your team, please.
What can you do?
What do I wish that my producer had done in this situation?
First, be honest about what's happening.
There are problems on your project.
Be honest about them, because you need credibility with your team, and your team needs to know that you know what the problems are and that you're willing to talk about them.
If that guy had stood up and said, look, we know you're working long hours.
We know that things are super ambiguous right now, but we're working on it, and we appreciate what you're doing, It would have been a very different situation, right?
I would have respected him a lot more, and the team would have been a lot happier.
So just make sure that people's work is appreciated.
Again, lazy people don't become game developers.
People are going to put in a ton of work.
So make sure they know that it's appreciated.
Make sure it actually is appreciated.
And then second, communicate critical information to your team.
If there's something they need to know to do good work, make sure they're not the last to know it.
Make sure that they know all the information they need.
Again, ambiguity is when you don't have enough information.
So make sure your team has as much information as possible.
And then, if your team doesn't have trust in your plan, one way you can build trust is by executing your plan well, showing your team, look, this plan is working, right?
We're getting closer to the game we want to make.
Things are going well.
The schedule resembles reality, right?
Now, if the plan doesn't work, you have a problem, and maybe your team is right not to trust it, and they need to fix it.
But if you have a good plan, execute it well.
Be a good, strong producer so your team can rely on you and the plan and feel some more confidence in what's going to happen to them.
And then keep your ears open for problems.
Pull on little threads until you find out what's wrong.
Remember that most of us are on teams full of nice, decent people.
Most people do not want to complain or give you bad news.
But to be a good producer, you need that bad news.
You need to be able to know the problems on your team so that you can fix them.
So if you hear someone complaining about how a design doesn't know what they're doing or expressing.
a lack of confidence in your overall plan, pull on that.
Find out what's underlying that.
Maybe it's something real that you need to fix.
And then last, work with your team to really assess the risks to your project.
Your project is going to have risks and sitting down and really talking them out.
And planning out what you would do if those things happened is a really valuable exercise.
If you don't have a plan B, you don't really have a plan.
And again, because there's so much ambiguity in game development, sometimes you need a plan C, D, E, F, et cetera also.
So here's an example of a risk assessment.
So this is when you sit down with your team or with your leads if you're on a big team.
And you ask them, what are you afraid about?
Like, what keeps you up at night?
What are you afraid is gonna happen?
And then you list those things, write them down.
And then for each risk, talk about how likely it is to happen.
And then what impact on your project would it have if it happened?
How bad would it be if this happened?
So, and then, you know, talk about a mitigation plan.
What could you do if this happened?
Or what can you do to prevent it?
Not only is this going to make you feel like you have more control over your lives and over your situation, but it will actually give you more control over your lives and your situation because, again, you're developing information, you're creating information so that you have less ambiguity.
A lot of publishers require an updated risk assessment like this with every milestone, and I think that's a really good idea.
I think this is super valuable, and every project, I think, could benefit from this.
Okay, number four, conflict and resentment.
So, nice people are usually good at hiding problems, but sometimes those problems get so bad and so big that they blow up and, you know, again, cause everything from shouting matches on the floor or just long-term simmering resentment that makes it harder for your team to work together.
And usually this is because of that combination of lots of ambiguity and tons of pressure.
People don't behave well in those situations and they're going to want to lash out.
It's human nature.
Sometimes people on your team may be afraid to bring up ideas or ask questions in meetings because they're afraid of either being scapegoated, like being seen as the problem, or just that they won't be respected or listened to.
And maybe that is actually happening.
Maybe people on your team do get thrown under the bus if they're the ones bringing up problems, right?
And these problems aren't always visible.
Maybe there's just some invisible hidden resentment or fear or bad feelings and they're ready to erupt at any moment, but you're not really seeing them because, again, people are pretty good at hiding them.
A friend of mine was a producer on a team that was under a ton of pressure to ship a launch title.
The publisher's priorities kept changing pretty wildly.
and the team was working super hard.
Now, they did manage to ship, and they shipped a good game.
And it was critically acclaimed, everyone was happy.
It was like, okay, that's over, awesome, everything's great.
And then the team did peer reviews.
And all of these huge interpersonal and team dynamic problems just boiled up in these peer reviews, kind of out of nowhere.
And the team leadership was like really surprised they didn't even know that any of this was there because the team was like a bunch of senior people who didn't want to rock the boat.
They didn't want to distract from like this huge, you know, tons of pressure problem they had to ship this game.
So the leadership also had been hyper-focused on shipping.
So they really hadn't noticed that their team was completely falling apart because it was all happening kind of invisibly.
Okay, so what can you do about this to prevent this from happening?
First of all, doing peer reviews earlier.
So peer reviews are when you have everyone on your team pick like three to five people and write a short kind of blurb about, okay, how is this person doing?
What could they do better?
Are there any problems with them?
So this is something that you should do if you can.
It's a good way to surface problems.
It is difficult, though.
First of all, it's time consuming.
Second of all, if there are a lot of personal problems on your team, people may not be willing to attach their name to it.
And third, you know, people do not want to hurt someone else's feelings.
Nobody wants to be mean or raise problems.
Most people don't.
If you do these anonymously, anonymous reporting isn't great either.
That can cause some problems too.
But it's better than nothing.
Like, if you have problems that are so big that no one on your team wants to speak up, anonymous reporting or anonymous peer reviews may help you find those problems.
And again, they're better than nothing.
Another better way, though, is one-on-ones.
So this is when everyone on your team has someone that they trust and respect, that they talk to regularly, just, you know, the two of them, and they're able to surface problems and kind of chew over things and develop solutions.
So even if you have a very small team with light management, it helps to make sure that everyone on your team has someone that they're talking to regularly, that they can, again, work with them to solve problems and just raise issues.
And that helps people also feel like they're being heard and listened to and respected, which is important.
Second, if your team members aren't comfortable speaking out, you need to build psychological safety on your team.
So this is something that Google did.
It's called Project Aristotle.
I'll link to it again in the notes, but you should look it up.
Google looked at all of their teams and they looked at which teams performed really well and were super strong and which teams were underperforming.
And they looked at correlating factors.
And the strongest correlation they found was something they called psychological safety.
And that's when people felt comfortable and safe expressing their feelings and ideas.
Where everyone felt heard and respected.
People didn't feel like they were being dismissed, people weren't being talked over in meetings.
This is super, super important.
You need to make sure that everyone on your team feels like they can express themselves without being, you know, disrespected or not listened to.
So one thing you can do as a producer is in meetings.
Make sure people aren't being talked over.
Make sure people are being listened to.
Make sure people know that they are respected and that their ideas are listened to.
This is something that you can do and it's super, super valuable.
Ask people who don't usually speak up for their input and then really listen to and respect what they have to say.
And then, you know, third, yourself be trustworthy.
So again, especially if there's tons of ambiguity on your project, make sure that there isn't any ambiguity about you, the producer, personally.
You know, make sure people can trust you.
Do what you say you're going to do when you say you're going to do it.
This is actually a lot more rare than you might think, and as a producer, it will make you really, really valuable.
Make sure that the information you're giving your team matches the information they're hearing other places.
Make sure that people can really trust what you say.
And part of that is if you don't know something, say you don't know it.
Like be comfortable saying, I don't know.
I don't know, but I'll find out, right?
Don't pretend you know something when you don't.
People see through that.
It'll eat away at your credibility if you pretend you know things that you don't.
And you really need credibility as a producer to be able to solve any of these problems.
And then last, make sure that the ownership areas of your project are super clear.
You as the producer can't make sure the right work is getting done if you don't know who is ultimately responsible for that work.
So you should know who owns every single feature or level or character or API integration on your project and really you should be able to sit down and write it down.
So here's an example of an ownership list.
And these can be as detailed or high level as you want, but if you couldn't right now sit down and generate this list for your project, then you have a problem as a producer.
You should be able to make this.
Secondly, if you make this list and it's just like the same name over and over and over and over for everything, and you don't have a one person project, then you do have a problem, right?
Anyone who has ownership over something needs to be able to make decisions about it, and they're responsible for getting it done.
There's no reason to hire really smart and motivated and creative people if you're not going to give them actual ownership over the work they're doing and control over it.
There are people who just want to follow directions and do what they're told and they're way cheaper and sometimes easier to manage.
So just hire those people.
Save your money.
If you're not going to give people ownership over their work, don't hire awesome creative people because they'd rather work somewhere else anyway.
All right.
Last, indecision.
So I'm gonna say it again, ambiguity is when you don't have enough information to make decisions.
So naturally, when there's lots of ambiguity, people are gonna wanna not make decisions because they don't wanna make the wrong decision, right?
But you have to make all of your decisions to ship your game.
So indecision is gonna keep you from shipping.
And the most common problem is this kind of unspecified delay.
This is when people want more time to think before making a decision, but they don't really know how much time that's gonna take.
They might be waiting for inspiration.
They might be waiting for something to happen that could help force them to make the decision, but they don't really know what it is.
They might be afraid of the consequences of their decision.
So again, if you're working within really tight budget or schedule or future constraints, this can be a big problem.
Maybe the person making the decision isn't really qualified to do it.
So remember the ownership list we were just talking about.
Maybe the person owning art decisions isn't a very good artist.
Or maybe your lead designer isn't familiar with the genre you're working in.
Or maybe someone's trying to make engineering decisions because they were a programmer like 15 years ago, but they don't really know what they're doing, and so they kind of just wait until they know what's the right decision, but they never will.
Or maybe you're lucky and it's hard to make decisions because you just have way too many good options.
Maybe your design vision has eight awesome pillars and they're all so good that you don't wanna cut any of them.
But you know that you have to to ship, but you just can't bring yourself to cut any of these awesome features.
That's not the worst situation in the world to be in, but it will keep you from shipping just as much as everything else.
So ironically, I'm on a super ambiguous project right now, but I don't have to deal with this very much because my project director has this philosophy where all decisions are easy.
If it's an easy decision, you just make it.
And if it's a hard decision, it's hard because both options are about equally good, so you just pick one.
Now, I really like this because not only does it make it way easier for me to do my producer job well, but also because it's kind of this interesting yardstick I can use.
If we're facing a hard decision, like, why is this one hard?
If all decisions are easy, then what's unique about this decision that makes it really hard to make?
You know, is it...
Why does it not fall into one of those two categories of, like, either it's easy or it's hard so it's easy?
Is it because both options are really good, and you don't want to let either one go?
Then you as the producer need to drive that decision.
And you can do that with data.
You have to say, look, our schedule dictates, like the laws of physics dictate that we have to decide this now.
We just have to pick something.
Have data, be really dogged about this.
And again, the more critical this decision is, the more it's holding up your project, the more energy you have to put in to make sure it gets made.
Or is it because all possible decisions are really gonna hurt your game or your team?
Maybe all the possible decisions are really bad, and so the decision maker is just super reluctant, right?
You know, then your risk mitigation plan can be really helpful.
Is there a way to assign numbers to how bad these decisions are, right?
If both options are terrible, maybe one of them is slightly less terrible, and then you can pick that one.
You know, is there a way to mitigate one of the, you know, some of the fallout from one of the options?
And again, it's almost always better to make the decision early rather than put it off.
Almost always the longer you put off a decision, the worse it gets.
Or is it hard because the person making the decision just really doesn't have enough expertise in the area or enough information to make it, right?
In this case, maybe you either need to change who owns that decision or educate yourselves, right?
Maybe that person can become an expert in this area.
You can have tools like play tests or competitive analysis, like do market research, bring in users, have them talk to whoever's making the decision.
I was on a team where we were working on a game genre that the lead designer had never worked in before.
So we played a bunch of games in that genre together and just looked at, OK, what makes these games good?
What do we like about them?
What don't we like about them?
If you're making a kid's puzzle game and your lead designer has only done hardcore strategy games, bring in some kids.
Talk to them about what games they like.
Look at a bunch of kids' puzzle games.
See what is it about those games that people fall in love with and what you can focus on.
And then last, as a producer, you're in a powerful position where you can kind of propose a decision out loud.
Often as the producer, you're less kind of married to the outcome of the decision, because your goal is to get the game done.
So maybe you can say like, hey, we should do this.
Sometimes a decision maker just needs to hear someone say it out loud and then respond and like, oh, I agree with you, or no, I disagree with you.
Now, be very careful here.
Because as a producer, your job is not to make decisions, it's to get them made.
I've seen a lot of times where producers will kind of try to jump into this gap because there's a hole in ownership.
And it basically doesn't ever work out.
It's kind of a temporary fix.
It can cause more problems than it solves, so be careful with that.
You should be getting decisions made, though.
That's your goal.
So one way you can do that, this is a backlog.
So basically, you take all the features you want to make, and you just put them in a list.
You order them.
And this is one of the core tenants of Scrum.
So this backlog actually is from a project I was on, which was in the too much good stuff scenario, where we just had too many good things we wanted to make.
Any of them could make our project successful.
We couldn't really decide.
So I just listed everything in order.
And I gave it to the project director, and I was like, look, reorder this.
Do whatever you want with this list.
You own it.
But it has to have an order.
It has to be sequential.
And then we're gonna start at the top, and we're gonna work down.
So if your team just isn't making important decisions, starting with a backlog can be really powerful.
If nothing else, it's gonna force you to confront like the sheer quantity of stuff you wanna do, and it'll force you to put some things at the top and other things at the bottom.
Okay, so in conclusion, to ship your game, you have to recognize ambiguity and you have to reduce it.
You cannot ship until you've gotten rid of all of the ambiguity on your project.
Second, ambiguity is something that negatively affects all of us, and the producers who can deal with it effectively are going to be the most valuable.
Your job is to make sure that you have a plan that drives down ambiguity at the right time and lets you successfully ship a great game.
And even though ambiguity can cause a bunch of problems on your game, you can fix them.
All right. Thank you so much for coming.
All right, we have a bunch of time for questions, about 15 minutes, and again, email me for slides.
My last name ends with an L, not an I.
I've got some resources, so again, the Game Outcomes Project you should definitely read.
Gamasutra has a bunch of post-mortems that are super valuable.
There's a blog called Ask a Manager which is more about personnel management than project management but there's a lot of good stuff on there about team dynamics and helping your team deal with problems.
The GDC Vault has a bunch of good stuff that I'll link to in the notes and then a couple of books also.
And if you have questions, come on up to the microphones.
My question is, how can producers become subject matter experts in a particular field in order to be more invaluable to the companies they're working for?
How can producers become, I'm supposed to repeat your question, become subject matter experts and be more valuable to the company?
Exactly.
Yeah, I think that's a tough one because on most of the projects I've been on, I have not been a subject matter expert.
So I was on, like the biggest example was I was on a MOBA, right, and I really hate MOBAs.
I do not like playing them.
I didn't really know much about them.
But I think it can also be valuable to come to something impartially.
Because I wasn't super invested in any of the features of the game, I think I was able to be a little more just passionate about like, hey, you know what? This is contributing to the game design and this isn't.
You said the game design was about this, but you're working on this other feature that doesn't matter.
I think being able to prioritize well...
does depend somewhat on being a subject matter expert, but not entirely.
I think as a producer, the most important thing is to learn how to learn enough to be useful as a producer and not necessarily to know everything there is to know about the genre, right?
I think in some ways, the more you know or the more you're kind of engaged with what you're doing, sometimes you can be like a less good producer.
Maybe that's just me.
But I think that kind of dispassionate and objective, like, hey, are we getting closer to our goal or not?
Doesn't require subject matter expertise now. I know a lot of people on smaller projects. They'll have two hats, right?
They'll be a producer and like lead engineer or they'll be a producer and a level designer or something, right?
So in that case you definitely do need subject matter expertise But you also do have to be able to step back and divorce yourself from it and go like, okay You know what right now?
I have my producer hat on and I'm making decisions based just on like, you know return on investment and Value to the game, right? I don't know if that actually answers your question, but that's my personal opinion. Thank you. Yeah You had a slide earlier about having team members own certain parts of the project.
Do you have any insight on how you might go about trying to get people to take ownership of things that they don't want to?
That's a good question.
So, yeah.
Team ownership and how you get people to take ownership of things when they don't want to.
That's a really tough one.
Again, I'm on a super ambiguous project right now, and there's a lot of subprojects that need to be owned.
And most of that has been like the project lead just sitting down with someone being like, look, someone needs to own this.
Are you in or are you not, right?
Are you in or out?
And if they're out, then it's like, okay, you know what?
Like you don't get to make decisions about this thing, right?
This more junior person who isn't as good as you is willing to take ownership of it.
They're gonna make the decisions about it.
And then as the producer, like have a structure that backs that up, right?
It's really difficult to have owners who aren't invested.
Like those owners really do have to be invested in what they're doing and have, like feel ownership over it.
And if they don't, like they really shouldn't be owning it.
And yeah, I've been on teams where someone was like, well, I guess I'm doing the monster design, but I don't really care about it.
Like, I don't like this game, you know?
It's like, it's probably not gonna work.
So, you know, yeah, you have a junior designer that's, like, super passionate about the monsters, like, put them in charge, you know.
And maybe they won't do, like, as good a job in terms of, like, decisions or whatever, but they'll have the passion to be able to reevaluate.
Like, you can always change, or most of the time you can change the decisions that you make, right?
So, you know, at least you do something, and then you play it, and you're like, you know what?
This isn't fun.
It could be better.
And then during that time, that person's learning more about being an expert in that area anyway.
So, that's probably how I'd approach it.
And that's how, again, we're approaching it on my current project.
So, thank you.
Yeah.
Hello.
You mentioned one-on-ones, and you mentioned that, like, sorry, the...
Yeah, they're doing construction, so we're still alive.
Yes, you mentioned people should have someone that they can talk to that they trust.
In my previous team that I was on, that was the head of the team, but it can be anyone on the team?
How would that work if people go to different people to talk to?
Yeah, so the question is one-on-ones, like does it need to be someone with authority on the team or can it just be like anybody, right?
So I think it is important if you have a one-on-one with someone, like, you know, let's say you're like a junior level designer, right?
Having a one-on-one with a different, like, junior level designer is probably not gonna be as valuable as having it with someone who you feel like does have kind of some control over the project.
But...
Usually people on the team, let's see, so I was on a pretty large team where we didn't really have any control, right?
We were under a publisher, the publisher was calling all the shots, but it still felt like when I had a one-on-one with my manager, even though I kind of knew they couldn't really do anything about the problems, like at least they were listening to me.
I think it depends less on how much authority the person has necessarily and more on how helpful it seems like they're being.
I don't know if that really answers the question, but the important thing is to be heard and feel like you're not alone and someone is sympathizing with you and in the boat with you.
And I know it kind of sucks when you just hear like, well, there's nothing I can do about that, you know, live with it.
But, but just like being heard, I think is the more important thing sometimes than actually even fixing the problems.
Like there's always gonna be problems, you can't fix all of them.
So having a structure where you can kind of talk about them and feel like you're working through them is sometimes kind of more important or as important.
Okay.
Thanks.
Thanks for sharing all the information and all the insight.
I have a couple of questions.
You mentioned something about the Witcher 3 talk.
I just wanted to make sure which one it was.
Is that the Anti-Chamber one?
No.
Let's see.
I don't link to it at the end here.
Let me see.
Sorry.
I will find it.
The question is which is the Witcher 3 talk about feature ranking?
Man, I have a lot of slide animations.
All right.
Here we go.
It is called From Great Ideas to Game Features, I think.
And it was from 2015, and it was by the lead designer on Witcher 3.
And it's in the vault.
And the other one is, what do you think makes a good game vision?
Oh, what do I think makes a good game vision?
I think something where, so good pillars, I think, are specific, and actionable, and positive.
So.
Examples of good pillars are things like, you know, like, you're gonna play as a wolf spirit and the game has a Sumi-e art style, right?
Like, you know exactly which game I'm talking about.
Or, you know, if you can sort of tell someone in two sentences what the game is and they get it and they're on the same wavelength as you and they're like, oh, I see where you're going with that.
I think when you try to tell someone what your game is, and you kind of spend a lot of time explaining, and they don't really get it, that almost always means that you don't really know what you're making, or it's not gonna be very good, right?
Usually when you tell someone, and they get, they're like, oh, I see what you're talking about, like, I understand, right?
That's a good game vision, is something that gets across to someone, and then they kind of like have this spark of like, oh, I love what you're saying, right?
That's, I think if you talk to someone at GDC, and you tell them your game vision, and they get excited, it's a good vision.
Even if it's like, hey, I'm making a Candy Crush clone, but instead of candies, it's aliens.
It's like, oh, OK, I get it.
It's not the most innovative game, but you know what I'm talking about.
Thanks.
Hello.
There's a couple of things that you mentioned I wanted you to elaborate on.
The first one was the iron triangle.
There's three, the time, quality, cost, pick two.
And you said in game development we pick three, but that's physically impossible.
So I wanted to elaborate on that.
And also, why do you feel that Scrum is being used too much?
So the iron triangle, why do I say we have to pick three when it's only physically possible to pick two?
And why do I think Scrum is used too much?
So.
The Iron Triangle, it's more like how far out each of those corners are, right?
So it's sort of like, okay, how big is your budget?
How big is your schedule?
And how many features are you including is sort of an inverse one, which is weird.
And then the size of those is kind of how much time you can mess around.
And and in a way, how innovative your game can be. Right.
So I don't know if quality is really the word. It's more.
How innovative.
Yeah, and scope.
And then if you execute well on all of those, then you'll end up with quality.
You can have a quality game that has to be a racing game sequel so all the features are well-defined, and you have six months and no money.
And you can still make a quality game out of that, but you can't do any innovation.
So it's it again. It's like you can't do that and innovate But you can do without innovating does that does that make sense because in the triangle quality is usually in the middle Yeah, scope so you're saying that you do work with all those you can't fix those though That's what when pick two means you fix. Yeah accessory exactly which ones are fixed which ones are adjustable and then how do you have?
to work within them right And then the other thing about Scrum, so I know a bunch of game developers where someone at their studio is like, let's do Scrum, I hear it's amazing.
And the thing is, so another interesting finding of the Game Outcomes Project is that what project management process you use is not really important, or it doesn't really correlate to the finished game quality, right?
Scrum, Waterfall, Agile, like whatever, doesn't matter.
What matters is, does your team understand it?
And are they using it well?
So I think a lot of people look at Scrum and they're like, this is gonna change the world, it's gonna be amazing, and then everything will be great.
And it's not, right?
So they put a bunch of time and effort in, they change over to Scrum, the team doesn't really understand it, and then things get kinda worse because the team isn't bought in.
If your team's bought in, it really does not matter what project management process you use, as long as you do it well and everybody understands it.
Right, so that's the important thing.
Okay, thank you.
Hello. While working on an ambiguous project, have you ever had to work with developers and team members that don't work well with ambiguity? And if so, what would be your advice for dealing with that?
Yeah, so a lot of times when I'm interviewing, I'll ask someone, like, oh, sorry, the question is what about people that don't work well with ambiguity, what do you do?
So one thing is interviewing, just say, like, hey, are you the type of person that likes getting handed a list and then just doing the list?
Or are you the type of person that likes their management to be really hands off and be like, hey, there's this problem, figure out how to fix it?
Right?
Some people who are game developers just want to be given, like, do these 50 things in order and just figure out how to do them.
And some people like working that way.
Those types of people are not gonna do as well on a very ambiguous project, unless they have a strong lead that can kind of shelter them from the ambiguity and tell them, like, do this and this and this, right?
So a lot of it is just hiring the right people for your project.
If you're on a super, super ambiguous project and you have people like that, you kind of have to protect them a little bit.
And currently, I'm in research, we kind of just don't hire those people because we know they're not gonna succeed.
So it's kind of different on a big team where you have a bunch of people and you kind of have to hire more junior people who don't really know how to deal with ambiguity yet.
But again, make sure that they have someone that they can ask.
Like, hey, what am I supposed to do right now?
I don't really know.
I feel bad.
I'm nervous.
And have someone that's telling them, OK, here's what you need to focus on.
Here's what work you're doing.
Here's how your work fits into the project.
Everything's cool.
So strong leads is, I guess, my answer in two words.
OK, thank you.
How do you get designers comfortable with time box ideation?
How do you get designers comfortable with time box ideation?
I think data.
So.
If you are a producer on a project and your designers just will not work within a time box, then kind of all you can do is shove data in their faces.
Oops.
Oh, no.
Sorry.
I'm trying to flip to my last slide while I'm talking.
That's not great.
So if you have data and you're like look, this is our schedule, right?
We have to ship by Christmas or our studio is getting shut down, right? Just Reemphasize that and again I think that's where being a producer and being a little more objective and kind of divorced from like but I care so deeply about What color the players hair is, you know, like you're like, I don't care. We just have to ship and being that person kind of allows your designers a little bit more freedom actually because if your designers are the kind that like want to iterate on stuff and really want to play around It's it's good to give them that space and I think you as the producer can kind of be like, okay I'll be the one worrying about the schedule you worry about making stuff cool And then we'll both contribute and work together and there's like a healthy tension I have worked though with designers that just will not right they just won't and those games don't ship So update your resume, I guess, is the answer.
Yeah.
All right.
How much time?
Or let's see.
We've got two minutes.
All right.
One minute.
OK.
Hi.
So I had a question.
In a fairly flat hierarchy, how do you get your colleagues to buy into your somewhat arbitrary deadlines?
So in a flat hierarchy, how do you get people to buy into arbitrary deadlines?
Arbitrary deadlines don't really work unless your team is bought in, right?
So if your team sees the value in, okay, why do we need an arbitrary deadline, then it'll work.
But if they just see you as the producer being this dictatorial, like, for no reason we have to hit alpha by March, right?
Like, they just won't listen to you because your priorities are different.
They want to make a great game, you want to hit an arbitrary deadline.
You really have to have this kind of deep understanding of why.
Why is it important that we finish something?
Sometimes it's not. I went to a talk yesterday by the guy who did Thumper, and they worked on that game for seven years, and he was like, we were lost in the woods and it was awesome.
It's like we had the best time just like trying stuff that didn't work for like five years.
It's like, okay, like you do you, man, you know, like, but they didn't have anyone telling them like, no, you have to ship by next year, you know.
And sometimes that works.
And I think if they had had a producer on that project that was like, no, you have to finish now, it wouldn't have been good, right?
They would have shipped a game that was bad.
So it kind of depends on what your constraints are.
If you don't have schedule constraints, then don't have schedule constraints.
If you do, though, then your team needs to understand what those constraints are and why you have them.
I don't know if that.
Yes, it does.
Okay.
Thanks for the talk.
All right.
All right, awesome.
I'll be hanging around outside a little bit if anyone has more questions and otherwise enjoy the rest of the bootcamp.
Thanks.
