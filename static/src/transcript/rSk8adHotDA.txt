Hello, everybody.
Hi.
I'm Adam DeGrandis.
This is my beard.
I'm sorry.
Today, I was the art director on a game that's about to be released called Tooth and Tail.
And I'm going to be talking about a major art overhaul that happened in what we naively thought was maybe not like the 11th hour, but like the 9th or 10th.
It turned out to be more like the second.
I'll talk about that chestnut later.
So this is gonna be broken up into four parts.
The first part, I'm gonna be talking about the analysis of the old art, how we kind of broke it down.
Then I'm gonna move on to kind of the initial corrective measures we took.
Then I'm going to talk about production.
And then the fourth part is kind of the ramifications of all this and the results of it.
So.
Probably I'm not a big name in games.
Little bit of info about me before I start is probably helpful.
This is the picture I use across all my social media.
And it's jokey, but it is.
a pretty genuine thing that the the small handful of people in here who really know me know that this is like yeah okay that's sure that's adam uh...
uh... but that doesn't really tell you uh... anything about uh... my professional history just kind of where my head space is so let's do some professional history uh...
I currently run a visual design in an art production studio called Chickadee with my wife Sarah.
I'm also a part-time educator at Maine College of Art in Portland, Maine.
And I've been making games professionally since about 2004.
Now when I got started, I didn't realize that people specialized.
I thought if you were going to make games, if you're going to be an artist in games, you had to be a concept artist and a technical artist and a visual effects artist.
I didn't realize that there were distinctions between those things.
And I'm self-taught, so I took a very long time learning how to do all of that stuff, and it was very, very sweaty.
It turns out that someone who understands that whole tapestry of game art is really, really valuable to small teams.
Small teams like Pocket Watch Games, who make Tooth & Tail.
And that brings us to Tooth & Tail.
So what is Tooth & Tail?
Tooth & Tail is an arcade real-time strategy game that tries to take the big, broad pillars of the genre.
So, you know.
fielding armies and building bases and all that kind of stuff.
And it cuts out all like the micro bloat that's crept into the genre since its heyday in the 90s.
It's designed to be a strategy game as much for fans of the genre as like people who think they don't like strategy games.
It's meant to be really approachable.
For a really long time we were using Starcraft meets Mario Kart as the elevator pitch, and I still think that's pretty apt.
So here's just a quick video.
This is just from a few weeks ago, just to kind of ground everyone.
So the player plays a rat commander, rallies various units to them.
It's designed to be played with a controller.
Oh, and that's the end of the video.
And here's where it looked like when I joined the team.
Now, you may be thinking like, oh yeah, no big deal.
Early artwork looks rough, and that is true.
One of my very favorite one-sentence lessons for my students is games look terrible until they look great.
But these shots are from about like 18 months into development.
They were considered full production.
This is what would ship.
So they're pretty rough in that regard.
The kicker was that the game played great.
It was really, really fun.
And it was absolutely a delivery on the promise of accessible strategy.
But these rough visuals were kind of a barrier that stopped players and press from ever discovering that.
So in early 2015, Andy Schatz, the kind of main pocket watch guy, got in touch with me and said that the project needed a dedicated art person to kind of help write this ship.
But there were a couple really critical wrinkles.
A lot of money had already been spent on the project, so this isn't a problem that could be solved with money.
And related to that, the game needed to be shippable by the end of the year, so about ten months.
I've worked with Pocket Watch on and off for about 12 years, and it's always a really, really good time.
Plus, I myself am most happy trying to work through like a really meaty creative challenge, and this was definitely one of those.
So I joined the team in February of 2015.
So the very first thing I did was a big analysis of all that preexisting art, and I tried to articulate in objective terms why I thought it was coming up short.
Here's some of that stuff.
Art fundamentals.
So basically the stuff that you would learn in art class.
They weren't being used to communicate important information to the player.
So value, the artists in the room know what that is.
It's how light and dark something is, basically.
It's great for making things stand out.
So what's the important stuff in an RTS?
Well, that's going to be your units, or your buildings, or in the case of tooth and tail, your commander.
You want those things to be higher contrast, so darker darks and brighter brights all in the same area.
And you want the less critical stuff.
random terrain and whatever you want that to be a little bit more right in the middle. Little bit more even if we if we look at one of these old images in grayscale we can kind of see that that that rat commander right in the middle kind of those grays are kind of following.
falling right along the same level of gray as the rest of the image.
That rat's not really popping out because of value.
In the terrain itself, there's these kind of like undulating darks and lights, but there's no real rhyme or reason to it.
The one effective bit going on is those pigs, which are an important part of the game, those are really popping off that dark terrain.
But overall, this is just not a very effective use of value.
color wasn't really being used effectively either.
So we have one smart bit going on.
We've got this kind of orange, red rat on top of mostly green terrain, and that's a pretty classic example of complementary colors, which is similar to how there's a joke about how all movie posters are blue and orange.
Kind of funny to see all of these spread out.
They all kind of look the same, but the fact of the matter is, is complementary colors can be pretty striking when used skillfully.
But in the case of Tooth and Tail, it wasn't really pushed far enough and it wasn't consistent.
For instance, if I played as any other commander, my faction color would change and I would lose that complementary color relationship.
Additionally, speaking of faction color, if we look at the faction color of the units, it's red, but those reds are really dark and kind of under saturated.
The saturation is lower than the terrain, so they don't really pop off the terrain.
Overall, the color palette kind of felt a little subdued and sleepy, and definitely didn't prime the player for the kind of like fast, quick action that the game is kind of made of.
Related to those art fundamentals, character designs were overly complex.
Now, I'm a big believer that all design, character design, game design, industrial design, graphic design, all of it, it's not really about what you can add but what you can take away.
The units in Tooth and Tail when I joined the team were like detailed little paintings which made them really, really cool paintings, but kind of poor character designs.
When you got a bunch of them in a mob, which is a pretty common occurrence in the game, all that detail kind of just became this undulating block of noise.
It made it really hard to see what was actually going on.
One of the biggest issues here was that silhouette.
wasn't consciously considered when designing the units.
All the units had kind of a similar posture, similar volume, a lot of them carried kind of similarly sized weapons.
Now, this maybe seems insignificant or even silly, talking about silhouette, but it's actually one of the most powerful tools in a character designer's.
Toolkit, it helps maybe more than anything, that five second read.
Something to kind of think about.
It's not an accident that there are no background characters in The Simpsons that have the same like head shape as Lisa or Bart or Marge.
If you want something to stand out in a crowd, give it a unique silhouette.
And even better, put some useful information into that silhouette.
Another problem, the visual design of the environment was straddling between organic and board game-like in a way that undermined the narrative.
What is the narrative?
In the world of Tooth and Tail, an unspecified calamity wipes out all the crops, causes a massive food shortage, and all animals, even herbivores, they're forced to eat meat to survive.
But then they all kind of decide they like to eat meat.
They prefer it.
So this...
War is ultimately about who gets to be the people and who has to be the meat.
It's modeled loosely around conflicts, the dawn of mechanized warfare, so World War I, but I think more specifically the Russian Revolution.
So this is not a happy place.
But the tile approach that was being used when I joined the project kind of undermined all that.
We're saying it's about terrible social upheaval and this kind of unprecedented carnage and a genie that's been let out of the bottle, but what we're showing you is like Marble Madness special edition re-release.
If you're too young to know what that is, that's a game that like cavemen played going to dinosaur school.
just look it up it looks just like that uh...
okay so another problem there is no uh... achievable and goal defined basically there is no like actionable mock-up The mockups that were made looked super nice, but these were really paintings and not proper mockups.
Given the tech that the game was built on, there's really no way of recreating this in game, so you're still left with this big open question of like, okay, well, this is great, but what does the game actually look like?
The arc lacked a solid direction to head in.
Another problem was that there were a few thoroughly tested ARP pipelines in place.
Now, PocketWatch likes rolling their own engine, and the engine had all the support for like the major features you would expect.
It had actors, and it had objects, and it had a bunch of environmental stuff, and it had particle effects, and all this kind of stuff.
But nothing was really documented and an experienced artist never really put all of that stuff through its paces.
So there were big questions about where the weak points in the tech were.
And then finally, the last little bit of critique, there was no art director.
So IndieShots, again, the main pocket watch guy, he was playing art director while he was also being a designer and running a business and being a programmer, and even in the indie space, which is kind of known for people wearing multiple hats, I think that was one hat too many.
I think another thing, though, was Andy does have some experience as an artist.
He actually has an art degree, and he paints and a bunch of stuff.
He's actually a pretty decent painter.
But he hasn't spent years solving visual problems.
And if you've got a stack of visual problems to solve, it's gonna be most efficient to have someone who does have experience doing that, trying to work through that stack.
Another thing I did was I took stock of the things Pocket Watch had going for them.
And the top of that list was the painter in the project, Jerome Jacinto.
Jerome is awesome. All the art that I just spent 10 minutes critiquing was made by Jerome.
But Jerome is an incredible painter. He can paint circles around me all day before I even get out of bed.
And he's just awesome to work with.
But at the time I came on board, I think he was still pretty green in terms of being a game artist.
he knew how to make a still image that would blow you away but uh... hadn't yet developed a ton of experience kind of wrestling with the complex uh... changing informational landscape that is a game but it was pretty clear that with uh... just even a little bit of direction he was going to be like a super weapon and that that was the case So lessons, I'm gonna be calling out key lessons at regular intervals and I'm hoping, my aim is that these lessons are broader than the talk itself.
They're things that you can apply to all kinds of art making not just like 2D stuff, but even hopefully other disciplines.
So here's the first batch.
Even if you are crunched for time, allowing yourself to stop and think kind of about what you're doing usually ends up paying dividends in the form of, in productivity.
You end up working faster after you have that time to think and you end up making less mistakes.
I know it's super stressful, potentially, because stopping to think does not feel as much like work.
as like trying to just like brute force your way through an asset list.
But in my experience, it has always been worth it.
Another one. Fancy tools are awesome.
And we have tons and tons of fancy tools in 2017.
But...
I won't say they're useless, but they're not as useful as they could be if you don't understand visual design basics.
If you want to develop these skills, skip the...
how to model a soldier in Blender tutorial and go for like basic color theory or understanding anatomy or something like that.
And even if you aren't an artist, checking out something like that, you're gonna be able to talk to artists way more effectively.
And maybe prototyping even goes better.
So I think it's a good exercise.
And then three, it may seem like semantics at first blush, but I think there is a really important distinction between being a game artist and being an animator or a 3D modeler.
The artwork in games is, I think, in its purest form, visual communication of the gameplay.
Yes, it's also there to kind of get people amped and keep people there once they're there, but you can kind of take those things away.
And the art still works as long as it's communicating the design.
There's another discipline that is primarily concerned with visual communication of information, and that's just graphic design.
So besides those art fundamentals that I was just talking about, you know, learn about branding and typography.
Like, dive down into this kind of stuff.
Do research about.
subway maps or signs in like tourist areas and then try and draw the connections between what makes that stuff successful and what makes an interesting character design or an interesting, the design of a locale or something like that.
Okay, so we knew what the problems were, and now it was time to start addressing them.
The very first thing I did was I made a new mock-up that addressed those formal issues I just talked about while also trying to reinforce the game's narrative.
I kept it super simple at the beginning because I wanted to be sure we could easily talk about everything that was there.
I wanted all of these early ideas to be properly critiqued.
I wanted nothing to be lost in the mix.
And I wanted everyone to understand like...
uh... why we wanted to do each one of these things basically uh... metaphor that we can kind of think of i'm trying to like lay a really solid foundation here uh... and maybe like sketch out a floor plan but in no way am i trying to show a finished house I think there's a lesson in that.
Baby steps, I'm gonna come back to baby steps again and again throughout this career.
It ensures an entire team, especially a remote team.
I was remote, Pocket Watch Games is in San Diego, I live in Maine.
It ensures that an entire team can kind of keep up and it stops problems, like small problems, from becoming compounded.
I think also if you ensure an entire team is moving together, you're kind of sharing the experience of making that game and I think you're more likely to be on the same wavelength in terms of communication.
So this mockup was made with actionability in mind.
It only included artwork or features that I knew we could add.
There wasn't any bit of art here that made me say like, oh, well this is cool, but I don't know how we're gonna do this yet.
No new questions, only answers.
Let's go through some of these things bit by bit.
So one suggestion was instead of those like grid blocks, then the checkerboard that the game was using before, I suggested we do a fill of like much larger textures at the base level of the world, kind of underneath the cliffs and underneath the units and stuff.
And that was to help reduce patterning, make the world feel a little bit more organic and get rid of that checkerboard effect.
I suggested we use a shader, even just like an old-fashioned overlay image, to shift the color of the terrain so as to get a little bit more color variation, make it feel a little bit more organic.
And I suggested some simple atmospheric overlays, so cloud shadows that scroll across the ground and animated sun rays on a post-process tint.
This was to help push the value range and make the whole scene feel a little bit more dramatic.
There's also some changes here meant to solve some like mundane but critical problems. So an example Z fighting or like bad sorting was a problem with the way the the old terrain work sometimes units would render behind squares that they were in front of and vice versa. So I suggested we paint terrain are we rather pink cliffs and ramps in such a way that you can never actually get behind them.
A lesson for junior artists, or really actually all artists, that if you can reduce like bugs for coders, they will love you forever, and do that.
Just do that.
So the mock-up was well-received, and I don't want to put words into anybody's mouth, but I think everyone kind of felt reinvigorated a little bit.
And it was around this time that Andy said, like paraphrased, I always imagine this as a pixel art game.
Can we do pixel art?
Is that even a good idea?
Would that work?
How does that change the schedule?
Can we do it?
I loved that suggestion because Command and Conquer 1, the very first one, was the game I was obsessively playing when I realized it was like someone's job to make games and like holy shit I could be one of those guys.
to make a strategy game with big chunky pixels was like a pilgrimage for me.
But more important than that personal excitement was the fact that moving tooth and tail to a pixel style kind of spoke to the game's soul better.
After all, it's a bit of a love letter to those classic 90s strategy games, while also being a little bit of a love letter to some classic arcade games and like arcade culture.
It also simplified animation production tremendously.
Before, it was a bit of an open question of how we would actually produce all of the animation in the game.
It would probably require a new tech or be expensive.
Would we use like a 2D rig system?
Would we model and animate everything in 3D?
Would we do like high-res hand-painted animation?
Nope.
we would use good old-fashioned hand-drawn pixely sprites.
We could focus entirely on broad gesture without getting caught in expensive details.
Relatively nice and easy compared to those other options, and it works with our existing tech, great.
So the first pixel mock-up was a hit, and again, while it was a little bit thin at the start, it proved to be the perfect foundation on which to build, but I will get to that in just a second, because let's do some lessons first.
If you pick an art style that plays to your team's strengths and speaks to your core experience, you reduce the number of visual problems that you actually have to solve.
It makes you and your team saner because you're not trying to figure out a way to say X.
with the visual language that just isn't well-equipped to say x in our case pixels spoke to the soul of the game uh... really nicely it it's all the bunch of technical problems and it was faster produce so is a plus for us And two, a mock-up is a tool, and I think in some cases, in my experience, maybe even most cases, it's the most valuable tool you have.
It's not just a painting or a fancy render.
It can often give you a leg up on production too, because the assets you make in the mock-up can just be moved into a build.
So in my experience, it's always been good to spend real time on it and not think of it as like, oh, we just have to get this done and then we can start making the real art.
Okay, let's keep going.
So we had a mock-up, we had total team buy-in, we were all excited about pixels, there we go.
At this point, we started pushing forward on multiple fronts.
So Jerome and I dove into character design, we did just iteration after iteration of line art.
This is like the tiniest tip of the iceberg, I would need all of the walls to show everything we did, it was exhaustive.
Jerome himself did a bunch of like paintings exploring a bunch of different fun, none of these are fun, but different, but fun potential scenarios and emotional themes.
I want to make a game just about this dog getting his hat shot.
That doesn't show up in the game, but it should probably.
So the end result of all this work was a nice set of guidelines that dictated the visual design of our units.
So units in a given tier, we've got these three tiers.
Units in a given tier all stand in different poses or have drastically different equipment or weapons so as to help the silhouette be as informative as possible.
Reptiles are primitive. They have less clothing and they generally have melee attacks.
Mammals wear more clothing and are generally ranged.
Scale clearly denotes combat effectiveness.
One thing that I've learned is that my job as a visual designer, it's not just to design stuff that looks cool, it's to design stuff that allows for a suspension of disbelief.
And creating a consistent visual language, something that has order and patterns and stuff, really helps do that.
The mockup itself became something of a living document.
So if anyone had any idea for art, it was iterated a half dozen times in the mockup before we ever actually put anything in the build.
One of the best pieces of advice I ever got from my first art director was, it's cheaper to iterate on paper, and I think this is a version of that.
It's maybe also worth mentioning that all of this work I've described so far happened pretty quickly, about the first two months.
One thing that helped us a great deal as we were doing all of this was a slightly exhaustive visual communication among the team.
Little storyboards, if you will, that kind of describe tech needs or how a sequence of events should work.
Since we didn't have a lot of time we couldn't afford to lose time due to miscommunication.
So if we're ever kind of talking about a complex topic, we would do something up like this to make sure that all of these ideas were like completely thoroughly understood.
I came to understand the value of this though through the context of my wider career.
I've worked with a lot of different kinds of people in a lot of different spaces.
Certainly teams like Pocket Watch, but also teams in academia, research teams, marketing teams, and I've learned that everybody communicates a little bit differently.
So, working to convey a single idea in multiple different ways helps ensure that that idea is going to be understood regardless of what kind of communicator is on the other end.
Taking a little bit of time to communicate clearly, in my experience, helps prevent miscommunication which can be super costly sometimes.
But we eventually had to move from these nice looking mockups and start putting the stuff in the game and wrestle with the two or three weeks where the game looked like an awkward teenager, which is what this is right here.
So at this point I proceeded to create at least one of every major asset type in the game.
So at least one commander, at least one unit, at least one building.
And the goal was twofold.
one, to get like a first-hand, a little bit of first-hand experience and understanding of like the assumed art pipelines.
So we could identify the weak points in that tech, but also I needed to know how long it was gonna take to make each one of these things because we needed to build a schedule that was based on something besides just like gut estimates.
And there's a lesson in that.
Uncertainty is, in my experience, just about your worst enemy.
Experience is always better than an educated guess.
And the longer I have let blind spots live, the more time they've cost me in the end.
So again, in my experience, it's best to remove those blind spots as early as possible.
So at the onset of these tests, I was thinking like, okay, great, this is a pixel art game.
I can do everything in Photoshop.
I can have a nice, neat, like single piece of software tool chain.
And since we're dealing with tiny resolutions, I can basically just make like a super small PSD, like 480 by 270 pixels, and just paint all the environmental assets right in there without worrying about blowing through memory.
Everything would look consistent.
because it's all like just painted right there in the same scene.
And in the end, that is how we produced all the environmental assets in the game.
I have a PSD with no joke between two and 3,000 layers that just has, bam, every environmental asset that's in the game.
But these early pipeline tests showed us that animation was still going to kill us.
Even after the move to pixels, it was still going to kill us.
Now it's worth mentioning that one of my goals for the animation was that I wanted really lively, kind of organic, nuanced animation and not like the limited frames, no in-between.
approach usually associated with traditional pixel art, and the reason I wanted to do that was because one of the conditions of moving to pixels was that we had to be sure we did it in a way where we couldn't be written off as just another indie pixel game.
I hate this animation.
So in theory...
The move to pixels actually made that goal of like really nice animation more achievable.
Like I said before, we could focus entirely on big broad gesture.
We didn't have to get caught in details.
We could have all the in-betweens I wanted.
We could do it right at chickity.
We didn't have to like hire an army of French animators.
But animating in Photoshop for me is like so cumbersome.
And I know it is a bad artist that blames his tools.
But there's no way to like quickly move between frames and like, and I'm talking about like.
like the rough animation, not painting frames.
It just feels like everything takes more than one click.
It's really hard to nail that initial gesture, and that makes the final results suffer.
So I need to figure out a new tool chain at this point, and realistically I needed to find a way to cut scope too because there was just so much animation in the game.
So just like before, I made time to think about the problem before me.
I allowed myself to consider ideas that seemed bad.
This isn't actually me thinking.
I accidentally deleted four hours of work, and then I just laid on the floor for five minutes.
So around this time, though, while I was trying to solve these problems, an insane opportunity, insane fell into Pocket Watch Games' collective laps.
Hold on, water.
So I got the call while I was at lunch with my wife at the bar underneath our studio, and Andy asked, this is crazy, but do you wanna be in a Coors Light commercial?
So.
Evidently, Coors was producing a new marketing campaign based on makers and artists and musicians and I guess how the cool, crisp taste of the Rockies inspired them to make cool stuff.
I swear this is true.
The premise of this commercial was that there's this team of like young dudes in a bar and they're like scrolling on napkins and getting all excited and then it shows them like I guess in their office and there's like big character drawings and stuff and they're like oh wow I'm making the game and then there's like a launch party in a bar and like they're showing the game up on a TV and it's like whoa we made the game and just everybody's drinking Coors Light.
because that's like a very realistic thing that happens to all of us.
But here's the kicker.
We only had a fraction of the art in the game.
We still had awkward teenager art going on.
So I had to do like a little mini crunch to make like a fake gameplay loop and a fake title sequence.
So here's the title sequence.
It looks pretty good, right?
And then here's a gameplay loop.
So this is like squirrel D-Day, basically, and it never gets better.
So the commercial is actually shot, and then Coors decided to change direction, the direction of the whole campaign, and the whole thing was scrapped.
And because you need closure, I'll tell you that I declined to be in the commercial, because, and this may be shocking to all of you, I don't drink a lot of light beer, and it felt really dishonest to like, you know, promote it.
But the gameplay loop was like the most perfect, albeit like super random, task to be required at that moment.
It was a great proof of concept for a few ideas that I was kicking around in my own head and they turned out to be game changers, utter game changers for the rest of production.
So the big one was the unit animation pipeline.
Given that I only had a week to get this done, I went with a pipeline that I knew worked.
It was a little long and a little clumsy, but I knew it worked.
What I would do is I'd do the rough animation in Flash.
I'd export it out without anti-aliasing.
I'd rebuild the sequence in Photoshop, and then I would just paint the frames.
This was the same pipeline I developed to create a trailer of a little unreleased game that Chickadee was making in-house. It was clumsy for that because the characters were bigger, the sequences were longer, the shading was a little bit more complex and had to be tracked. Basically there's just like more of everything.
If I got to Photoshop and I realized like I wanted a core change. I would kind of try and make it happen right there, but usually I'd have to go back to flash and that means any painting I had already done would be scrapped and it was this like really cumbersome back and forth thing that just took a lot of time.
But for the characters of Tooth and Tail, like the squirrel comes in at like 10 by 10 pixels. It's tiny. This whole thing was lightning fast for this stuff. There wasn't really a need to ever go back and forth.
uh... as long as i i really tried to capture like the gestalt of the animation in flash any changes i need to make i could just make in photoshop So on the surface, it seemed like this was gonna be clumsy, but it turned out to be pretty efficient.
And then once we took it to production, I added a few steps that again, it made it seem like it was gonna be slower, but it turned out to be even more efficient.
So in production, I would create the rough lines in Flash, and then I would test those in game.
And then I would clean them up a little bit in Photoshop, I'd do some like simple color fills, and I would test those in game.
And then I would bring them back, I'd do my final shading passes, and I'd be left with my final artwork.
so i mentioned before about the benefit of uh...
baby steps at this uh... stop like small problems from becoming compound and and turn into a much bigger problems uh... richard williams who is like a master animator he wrote this book animator survival kit and talks about the long shortcut He says, the long way turns out to be shorter because something usually goes wrong with some clever rabbit's idea for a shortcut and it turns out to take even longer trying to fix everything when it goes wrong.
This is some of my absolute favorite advice.
I love sharing it.
In my own creative life, I've taken it to mean important stuff usually takes time to do so don't make it go even longer by half-assing it.
So in the case of the animation pipeline, baby steps maybe took more time up front, but I no doubt saved tons of time that reshoots would have taken had I not been so cautious.
We had another win for the unit animation in terms of a scope cut.
So originally Andy envisioned four directions of movement for the unit.
So diagonally, up, down, left, and right.
I suggested keeping them in profile would help the silhouette read more clearly and consistently while also reducing the amount of animation we had to do.
But there was a little bit of a concern that maybe that would just look wonky like a...
unit staying in perfect profile walking around a more 3D world.
But the commercial proved that this approach was going to work just fine.
Additionally, I myself discovered that I really didn't need as many in-betweens as I initially anticipated.
So, you know, again, test your assumptions. I was wrong. I'm happy I did my test.
Another big gain from the commercial was the discovery that we could use 3D models to create pretty decent pixel work.
Now when I first thought of this idea, I laughed at how bad it was, because it is a bad idea.
Certainly we could use 3D models and render sprites, but trying to use 3D models to render that looked like they were hand-painted seemed like a really roundabout way to get a good result.
of getting a result, right?
Just paint the sprite.
But just like with the character animation, there's a little bit of experience from my past that I could draw on.
So one evening, many years ago, I was fooling around and I made these little 3D shapes and I rendered them at a super low resolution and I thought like, oh, that's kind of funny, they look like pixel art, but I made them in Max and I toss them on my Tumblr and that was that.
But because I had this tiny bit of experience in my back pocket, I thought, okay, well, this is probably gonna be a waste of time.
But the fact is I need to figure out a way to render, or to get, like, 60 or 70 frames of slow, windmill rotation animation.
And I need to get it quickly.
So a proof of concept will probably only take me an hour, and then once I fail at that, I can kind of just get it out of my head and figure out, like, the right way to do it.
But in an hour, not only did I have my proof of concept, it was just done.
That's all it took, which was awesome.
So I'll walk you through the setup real quickly, just in case anyone's interested.
So first I made a camera that was angled to match the in-game camera.
Then I tossed the windmill tower, which wasn't animated.
That's just on a plane in the background, and the plane is aligned to the camera.
I created two versions of the windmill blades.
One is aligned to the camera, which kind of gives it a weird angle.
It makes it hard to work with.
But then I had an instance proxy off screen or off camera.
And that was aligned to the world, which was a lot easier to work with.
I unwrapped it, I gave it a tiny, tiny resolution texture.
I turned off filtering on all the maps to maintain those chunky pixels.
And then when it was time to render, I just turned off antialiasing and set it to a really tiny resolution, and that was that.
I got my 70 frames of animation, and it only took an hour, which was awesome, again.
The process actually worked so good that we just kept it around for the final windmill.
This is the windmill that's actually in the game.
I'm going to jump ahead a little bit, but this is all related.
This workflow found an even more important use down the road, which is for the commander flag.
Now, there are four commanders.
Each one has a different flag, and each commander has about 80 frames of animation, and that flag is moving around in all different ways for each of those frames.
There's no duplicates.
In the original commander test, which is what this is, I hand-painted...
those flags and it took forever.
In fact, how we were going to get this done was the only open question we had left going into production.
I just kind of assumed I'm going to have to hire someone to do this part of it because I can't be tied up for like four weeks just painting fabric.
But I was also a little bit concerned about the fragility of it, right?
If we went ahead and did all that work and then we realized we needed a core change to the animation, that is a ton of time just tossed out the window.
And again, we're working on a really tight schedule.
But the 3D pipeline saved us here.
So again, at first blush, I thought this probably won't work.
The commanders are way more complex than the windmill.
They're moving around in all different ways.
But I decided, again, it's worth a proof of concept.
I can probably get something going.
Maybe not even something that looks good, but I could figure out in about an hour or two, is this worth pursuing?
And after about an hour, I discovered that, yes, despite that extra complexity, we could get a 3D flag to track with the original 2D flag.
At this point, all the commanders had just like a flat shaded flag in place that was properly animated.
And you can see here, it's like super simple.
It's like just kind of a low density mesh.
The bones don't even have controls.
I'm sorry, animators, I know that's super, super bad.
And after a couple more hours, I figured out a material setup that yielded pretty good results.
So I had two UV sets on the flag.
The first one held a static texture, the chunky pixels, kind of just like the windmill.
And the second one had a static texture.
a bump map on it that was animated to scroll from the flagpole out to the end of the fabric.
And that was used to kind of create these like tiny undulations that would have been time-consuming to do like in a rig.
You combine the physical animation of the flag with that texture animation and you get the final composite, which you know, that works pretty good.
Here it is in-game.
Now.
After a couple more hours of lighting and tweaking values here and there, kind of trying to fine tune it, this is what we got.
So because we're all kind of used to looking at a lot of game art and working with this kind of stuff, I'm sure you can all look at this and say, I mean, that's pretty cool, but it doesn't like perfectly match the hand-painted artwork.
And that is true.
But.
I am a pragmatist and I believe in the admittedly unromantic but I think still powerful and human and kind of poetic notion of good enough.
Good enough has a bad reputation, I think.
When I say good enough, I think maybe a lot of you can imagine a time when you've had to say, like, okay, well, this is, we have to ship, so whatever, good enough.
But I think good enough is like more measured and powerful than that.
So as I said before, I'm a college educator.
And one of the things I tell my students is not to stress out too badly about finding a job.
In order to get a job, you really only need two things.
You need to have the base level of skill and just don't be an asshole.
You're gonna enter the industry as a junior artist, and people know when they hire a junior artist, there's gonna be some education that needs to happen.
You're not expected to do the work of a lead artist right out of the gate.
Maybe as a student, you don't even realize there's a difference between those two things.
You know, but don't worry, because if you try hard, if you put the hours in learning those core skills, you try and develop your ability to solve visual problems, you get out and do some networking, and you try and be a good person, don't worry, you're gonna be good enough.
So what's the real philosophy of good enough then?
Good enough is about looking at the whole package and weighing all options.
I tell my students, I've never hired the best person who applied for a job when I've been in a studio and in charge of hiring artists.
I've never hired the best artist, but I've always hired the best fit.
Certainly, how well someone can practice their craft, that is a huge part of it.
I don't want to mislead anyone, but also what kind of person are they?
Are they nice to be around?
Do they express their ideas clearly?
Are they a good problem solver?
Are they self-reliant?
Are they funny?
Are they nurturing?
Are they responsible?
Or are they just an asshole?
So back to the Fleck.
uh... this process turns uh... five weeks of painting by hand intellect just a week of work to get all of them done uh... we can do it all it should be in spending instead of spending money on an outside contractor uh... we can if we need to do a retake we can build off of what's already there uh... if we need to add more animations in the future again we have our base so the slight mismatch in visual style is totally fine when weighed against those gains.
And what's more, the 3D flags actually made an awesome feature possible that would have been totally impossible otherwise.
Using this approach gave us a really easy way to do decals, custom decals on the flag.
Because we have a 3D model and a camera, we know where things are sitting in space.
So I could render out a sprite sheet of a flag that was basically just a screen space normal map.
and he was able to use the sprite sheet to dynamically place any random image uh... on the flag in real time here we have a little monaco guy uh... so players now have like a way to make like custom banners for themselves for their clans i don't know if plans are still a thing they were when i was younger just going to be used for means probably is still it's pretty cool uh... and just think the decals on the flag, the whole 3D pipeline, the 2D animation pipeline, all of these beautiful trees grew from seedlings nourished by the crisp, cool taste of the Rockies light.
My talk should be sponsored by Coors and it's not.
Okay, but let's do some lessons.
So, I won't say that bad ideas don't exist, but I do think that most ideas probably aren't bad.
They're just ideas.
They're maybe not widely considered, and therefore maybe they're a little scary, but I think that also means that they're not obvious, and therefore they're loaded with potential.
So when looking at an unconventional idea, resist the urge to say, we've...
we're under too tight a deadline to consider that crazy, stupid idea.
If you can do proof of concept in a short amount of time, I think you're crazy not to do that.
And make time for random experiments outside of your main work.
I am admittedly terrible at this.
I have an iron work ethic and a crippling sense of responsibility.
I'm really fun to be around.
So I have a hard time to just, allowing myself to just sit and make art.
But if I hadn't been just fooling around in Macs all those years making stupid little primitives, render as pixel art, while my wife watched, I don't know, Pretty Little Liars or something else that's great, I probably would never have considered the 3D for the windmill.
And the ramifications of that would have been astronomical.
So on to the last leg.
It was early summer of 2015.
We had our pipelines.
We were on schedule.
We pushed ahead.
We announced the art style Switch along with the name Switch in the August of 2015.
The game used to be called Led to Fire.
Now it's called Tooth and Tail.
Here was a game.
that was a visual homage to the greats of the past, but I think was also a bit of a fresh take and had some new ideas in terms of gameplay.
I suppose it's ultimately a subjective thing, but I do think we made a pretty good case for why we weren't just like another indie pixel game.
The clouds and sun rays and water were all dynamic and shader driven.
The water actually was basically a 3D water shader crammed down into 2D.
And the waves were driven by dynamic wind forces.
And props to Andy for making all that stuff happen, because I originally said, oh, just bake it in art.
And he was like, no, it has to be real.
And it looks dazzier.
It looks dazzier than if we tried to bake it in art.
uh... so as i said before the game was always about the blast to play but the kind of an inconsistency of the old art i'm gotten away of that uh... ever gotten away of people discovering that rather so with that barrier removed on the press was more interested in more people started joining our alpha community This is my favorite slide.
In the fall of 2015, Chickadee picked up a couple interns that were like instrumental in helping us hit our art target, Harrison Brown and Samar Makhuk.
So together, along with Jerome, we all pushed ahead on the art.
So let's just take a look at some shots in no particular order.
We iterated the environment artwork.
So we're using color and value here to indicate collidables and elevation.
We animated all the units.
This is just what I could fit into a single slide.
There's about twice as many.
Units are points of high contrast and vivid colors, so they pop off that terrain.
We had time for some winding iteration on a few units.
I've learned that it's always good to plan dead space into any schedule because not everything is gonna go perfectly.
You're gonna need a place for those mistakes to kind of fill into.
We animated all the buildings.
This windmill right in the center is like my favorite thing from the game.
I made a point to Pocket Watch.
Well, it's worth saying that all of this animation was done pretty late in production.
I made a point to Pocket Watch that we should live with the static versions of the units in the buildings as long as possible so that the inevitable ebb and flow of the design wouldn't relegate a bunch of...
animation to the trash.
We wanted to wait until the design was more or less settled before diving into this stuff, again, because we had such a tight deadline.
Jerome painted amazing portraits for each unit and each commander also did a bunch of marketing shots that aren't shown here.
We lost a chunk of time to UI iteration, and that's kind of a pretty common thing.
UI always takes a long time.
But I don't think we did ourselves any favors, because we never really had a solid plan or took time to think long term.
As we were doing this stuff, it was kind of like, oh, okay, well, once we make this change, then it's gonna be perfect.
And then compounding that poor mentality was, The fact that our tools were a little cumbersome, they didn't really allow for rapid iteration.
So because we were worried about taking too much time, we really didn't do the proper legwork.
And it ended up taking way more time in the end.
We should have done the long shortcut, right?
And we didn't.
And I think it cost us.
But hey, look at this, particle effects.
that was kinda like a downer slide and now we have like a really zazzy slide right here.
So there's tons of, it's a game about battle, there's tons and tons of effects and they were a lot of fun to do.
So Art slept a little bit.
We didn't hit the end of the year, but we did hit like the second or third week in January.
And then we shipped shortly thereafter, just kidding, we worked on the game another year.
And we did that because game development.
So.
Before I go any further, I should be like absolutely clear from this point on this is like personal reflection This isn't pocket watch. It's not even really chickadee It's just you know one guy who makes games kind of reflecting on that stuff It's a little bit like a like a personal post-mortem except the games not out yet, so it's like a pre post-mortem I guess I don't know So the extended development was seeded, I think, by our improved standing with gamers and press.
When I started on the project, I think there was a little bit of a fear among the team that this was maybe a niche game and it might bomb.
The increased visibility and excitement reduced those concerns, but replaced them with the worry that maybe a minimum viable product wasn't gonna be enough.
And then this guy joined the team, and he began wagging his jaw.
Some of that wagging was pretty decent.
It made decent sense, right?
It felt logical.
Some of it was a little more superfluous.
If you've been in games, if you've made a game even as a student, you kind of know about the feature creep.
A lot, maybe most of his ideas are cool, but he talks in box bullet points.
He doesn't really consider objective merit or time, but he appeals to emotion like a great salesman, and it's really hard to not listen.
Let's take a look at the weather system.
As an example, the weather system allows us to do surprise different kinds of weather, but also different times of day.
And it makes the screenshots look super zazzy.
They look really, really nice.
But it dismantles the visual hierarchy a bit.
It flattens values and homogenizes color.
It actually makes the game harder to play.
As a visual purist, I lament that loss of clarity, but at the same time, it makes for a more marketable product as far as screenshots and video are concerned.
It looks fancier.
So was it worth it?
I don't know.
I suppose it depends on what metric you're measuring.
But our process, I think, was undeniably messy.
We took an idea suggested by FeatureCreep.
We didn't do our homework beforehand to figure out the true scope of it.
And we implemented it before we had a mock-up.
We basically tossed aside a bunch of the very practices that led to our previous success.
This wasn't a brick laid in surface to a carefully considered long-term plan or even really a poorly considered long-term plan.
It was just a brick that we kind of like the shape of.
So who knows if we actually needed it to finish our house?
It may be made for a better product, but did it make for a better game?
I don't want to give the wrong impression either.
We were all working really hard during this time.
We were adding new features, we were showing the game off at conventions, we were considering publishing and platform possibilities.
Seasons passed.
I think we're all just, you know, like trying to make the game better bit by bit, and that's cool, that's a very organic way to approach game development, and I think there are times when that's exactly how you want to approach your craft.
But in comparing the first year I was on Tooth and Tail to the second, I think all evidence points to the fact that we did our best work when we were under a deadline.
uh... the initial you know get this done by the end of the year deadline was self-imposed but uh... we stuck to it and help focus our decision-making we didn't have time to be wishy-washy the week-long crunch for the course commercial uh... forced me to quickly test a few ideas that turned out to be game changers now Obviously, the reality of game development is that it's time consuming.
I get it.
And I'm not trying to argue that through the magic of project management, you can find a secret shortcut from the kitchen to the study.
That was about Clue.
A little esoteric, I know, but I really wanted to put it in there.
But I will say that smart, consistent project management, in this case, you know, slowing down to think about our approach, having a clear goal in mind, tossing dead time into a schedule for when things don't work out, basically all the stuff that I just spent 45 minutes talking about, it allowed us to get about 12 months of artwork done in about 10.
We were like art machines that first year.
In the second year, we were way less efficient.
We wasted time.
Now, I'm sure many of you can think of inefficient development cycles and think of how expensive it is, like, oh, that's extra monthly burn.
And that's true, but I think that's a very business-oriented way to view the downside of poor planning.
I think the steeper cost is far more human.
The monetary costs of your development are recoupable, but your time is not.
So something to think about.
If through thoughtful planning and disciplined management, you were able to release a game three months earlier than you would have otherwise.
That's effectively free time.
What would you do with that time?
Would you prototype a new game?
Would you dive back into it?
Would you learn a new skill or gain an experience that would inform your future game making?
or maybe you would just go outside once in a while and spend time with loved ones.
Again, I get it.
Development is just hard and it takes a lot of time, but poor planning is just about the dumbest, most pointless, most avoidable, just shittiest excuse for wasting time.
you're not getting it back, none of us are.
The time we spend on our games comes from someplace, it comes from every other experience we might gain if we weren't doing that.
Simply put, to borrow a phrase from Andy Nguyen, one of the other pocket watch folks, he talks about maximizing value, the man likes to find a good deal.
I think simply put, it's tragic to not maximize the value of your life.
But I'll tell you what, this is heavy, right?
We thought we were learning about pipelines and stuff, and it's like, what's this guy talking about now?
I don't wanna come off as a bummer, or defeatist or anything like that, because Tooth & Tail, actually, in my eyes, is already an incredible success, and we haven't launched yet.
But it's a success, not for any of the reasons I've talked about in the last hour.
It's successful because it brought people, it brought other human beings, it brought them together.
Even before launch, Tooth & Tail has had an astounding community.
And this is largely thanks to the cultivation efforts of Andy Nguyen, the guy that I just mentioned.
This is a community that's hundreds and hundreds of people before we ever launched. Active players.
And I don't say this like, oh, it's a stats thing.
It's, it's, this is, these are people all over the world sharing their excitement and happiness and they're learning together.
Old players help new players learn the game.
They invent new strategies and record them and put them online.
It's like, oh my God, do you see what that guy did?
There are people who modded the game before it's ever been released.
There are people who are learning how to make games by modding our little unreleased game.
That is mind-blowing to me.
One community member, CapnFog, that's him right on the second third of the image right there, he came out to help us at PAX East.
He was a local there in Massachusetts.
He did all the grunt work, like grabbing waters and grabbing sandwiches and stuff like that, and he demoed like a pro.
He was awesome.
He was my MVP of the week.
We made a thing that was a force of good in the world.
And that is my personal best case scenario for what defines a successful game.
Weighed against that, I feel pretty comfortable saying that all of our development practices, warts and all, were probably good enough.
That's my talk, thank you.
Um.
You have any?
All right, well, thanks for attending, everybody.
Fill out the thing, because it helps this whole thing go better.
Oh wait, do we have a question?
Thank you.
I just had a quick question about the flag stuff.
Yeah, sure.
How dynamic did you have to make the flags as far as how they moved around with the characters?
Are they like separate sprite sheets that are oriented around the characters?
So that's a good question.
So the question is, are the flags different sprite sheets from the rats?
No, the rats and the flags are all the same sprite sheet, although when I rendered the flags, the rats weren't included in that render.
So I basically did a pass of the flags, and then I had the original rat animation with the flag pull and stuff, and I just smashed them together in Photoshop and saved out the final image, the final sprite sheet.
Yeah.
Thanks.
Yeah.
Hi, my name is Chris and I'm from Indonesia.
Actually I saw your game on PAX East and it's amazing.
Oh, thank you.
And my question is, you seem, when you change the art style, it seems like there's some changes in the code as well, like in the grid system and everything.
And because I think, I see that you have some technical knowledge.
But what if there's, for example, an indie team, and the artist basically wants to change the art style, but he doesn't know the technical side of it?
How do they communicate with the programmer, and how do they convince that?
That's a really good question, and that's maybe a big question.
So, the question is, How do you make these big broad changes if the artists themselves don't possess that broad technical knowledge?
In Tooth and Tail, Andy Schatz is an amazing graphics programmer.
That was one of the team's strengths.
I knew that I could make requests that were moderate and he would be able to get them done in a reasonable amount of time.
If you don't have that, or...
I don't possess those skills myself.
I can't code up shaders.
That's something I can't do.
All of these requests that I made, I did those storyboard images of like, okay, here is exactly what I want.
A lot of those images were just, here's how I made it in Photoshop, step by step.
like oh I blocked out like this black portion and then I blurred it and then I did like a weird distort thing and then we use that as a mask and fill in a different texture and that's enough that was enough for Andy to say like okay cool I see what you're doing here and I know how to translate that to code I think really I don't know if it would work for every team, but the way we did it was just being really exhaustive with communication and basically drawing little pictures to aid that.
I'm not sure how it would work with other teams, though.
It really, I think, depends on the dynamics of your own team.
All right.
Thank you, everybody.
