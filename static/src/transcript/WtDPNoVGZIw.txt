All right, hey everybody, my name is Seth Koster and I am the game programmer and co-founder of the studio Butterscotch Shenanigans.
Little bit about our studio.
We were founded in November of 2012.
We started as a two-person team and we've since expanded to a four-person team, so we've just grown massively.
We've launched five titles since our inception and the most notable title we've launched is Crashlands, which is an action crafting RPG.
We launched it in January of 2016, and in that year it received numerous Mobile Game of the Year awards, sold over half a million units, and received a 93 Metacritic score for mobile.
So by all accounts, it's okay, and people seem to like it.
And before I go into the meat of this talk, I need to remind you guys that we only have 20 minutes, which means what I'm about to say has absolutely no nuance whatsoever.
So if you have a bunch of questions at the end of this, that makes a lot of sense, and you're gonna have to just think about it, I guess.
All right, so because Crashlands did pretty well for us, we get this question a lot, which is how do we go about designing our games?
And to answer that question, I'm gonna ask a few questions of my own.
Why do studios crunch?
Why do studios go bankrupt?
And why do projects get canceled?
Well, these are the kinds of things that you would expect to see in a studio that has plans.
And so, we've managed to sidestep a lot of these problems or mitigate them entirely by never having a plan of any kind whatsoever.
For example, we don't have deadlines, so we have no reason to crunch.
And deadlines are the kinds of things you have when you have plans.
And this kind of anti-planning philosophy goes all the way down into our game development style.
Because to answer the question, how do we design our games?
Well, we don't.
We just iterate.
We've never done a game design document.
We don't really do anything like what you would call concept art.
And if you were to pick any one thing out of any one of our games, we didn't know that that was going to be in there until the moment we put it in.
So for those of you who are more accustomed to a much more structured game development style, you're probably thinking, OK, how does that work?
That sounds like absolute chaos.
So that's what we're going to talk about.
The first thing to know about iterative game development is that it's not random.
The iteration is directional.
And the thing that you're always iterating towards is the vision of the game, which is just the core idea.
We know a lot of developers that get really fixated on trying to find the perfect game idea.
And they bounce from project to project, just trying to find that one gem.
At our studio we believe that there is no such thing as a good game idea or a bad game idea.
There's just good or bad execution of a game idea.
And we believe this because we've seen ideas that were just so far out there, like Be a Goat and Break Things, that have turned into huge classics that everybody loves.
that we've just come to believe that you can just do whatever you want, and as long as you understand the fundamentals of what makes your game good, and follow that path, then it just doesn't really matter.
So this is the core idea that we have as a studio, is just what your game idea is, is completely irrelevant.
So if that's the case, why do you really need a game idea?
It's because your studio is a boat, and it has limited resources on it.
And at some point, you gotta get to land and restock, right?
In other words, you gotta launch a game.
And if you hand everybody on your team a paddle, and they all start rowing in different directions, you're just gonna spin in place, and everybody's gonna get scurvy.
So the point of a vision is just to get everybody paddling all in the same direction.
And that's really all that it's for.
So in our studio the way that we go about sort of structuring our vision development process if you could call it that is we keep it very simple.
First, we keep it brief, so single phrase or sentence.
Once you get into paragraph territory, that starts to look like a game design document, which is a plan, and once you have one of those, you die.
So don't do that.
We also keep it very high level.
So we don't really go into a lot of specifics about the story, the characters, any of that stuff.
We just focus on what we would say are mechanics, experiences, or feelings.
And the reason we focus on these is because these are simple touchstones that we can always refer back to and ask, is the game feeling like this?
Or do we have this mechanic and are we executing it really well?
So to give you an example of how we did this with Crashlands, the Crashlands vision is a light-hearted, open-world crafting adventure with tameable creatures and lots of jokes.
We ended with a lot more than that.
And we also, at this time, we didn't know who the character was, what their motivations were, what the story was, where the game was, any of that stuff.
These were just the targets that we were trying to hit.
And then we got started.
So once you have your vision, it's time to start prototyping.
The prototype only exists as a sort of anchor point for your iteration process, and that's really all it is.
This is the thing that will become your game in the end.
So to start your prototype off on the right foot, you're going to want to find the foundational piece.
So if your vision has something that you believe to be sort of the core element, that if you nail that, then everything else will kind of spin off of that.
Then that's where you want to focus your efforts for that early prototyping phase.
Crashlands was a crafting game, and so we thought if we get the crafting, then we're good.
So.
you can't craft unless you're collecting stuff.
And so the first thing we had to do was focus around that, acquiring things in the world and then building stuff out of them.
So with that in mind, we started prototyping.
And on day one, we had this, which is a gray circle that picks up hand placed leaves.
There's only 10 leaves, the camera doesn't move.
And once you pick up all 10 leaves, they craft into a pair of leaf shoes, I guess.
So that is our crashlands prototype on day one, and now we can start going through the iteration process.
So what we do in-house for our iteration process is first we play the game, and we try to play the game in a very sort of, you gotta set your ego aside, and you wanna think about what would a player perceive of this if I just handed this to a random person.
So you think about it as if somebody else made the game.
And then you want to evaluate, how is this current state of the game lining up to the vision that we originally put forth?
And where are we just really missing the mark?
And what kinds of systems do we need to shore up?
You can go ahead and invent solutions for those problems, bring those back to the team, come to a consensus if it's something huge, like if you say, we need to rip out a system entirely.
So you go ahead and do that.
You implement those things, and then the loop starts over again.
And so the important thing to know about this iteration concept is that a lot of teams start to forecast at this point.
Once they start working on a system they say, well once we get the combat in we're going to need to buff debuff system and once we have that we're going to need combos or whatever.
And you start forecasting what the game is going to feel like 3, 5, 10, 20 iteration cycles down the road.
Well guess what that is?
It's planning.
So don't do that.
You should iterate based on what the game is, not what it will be, because all that time you spent forecasting, you're just gonna be wrong, because you can't know what the game's gonna be like.
So with that in mind, let's take a look at what Crashlands evolved into over time from this weird gray circle picking up leaves into what it is today.
So here we were on day one.
After a couple weeks, literally everything's different.
All the art has changed.
And this is all placeholder art as well, because the art we're just using to sort of try different color palettes and shapes and stuff to kind of see what's feeling good.
Is this kind of hitting the target that we set forth in the vision with the full intention of doing a repass on these assets later.
At this point, we also gave the character the ability to remove its arms and replace them with anything in the environment.
It was an insane and terrible idea, so that didn't last more than this week.
But this is the early phase of the game where all bets are off.
Anything's on the table. We can do whatever we want and just see how does this line up with the vision.
After a couple months, the game starts to solidify and look a lot more like the modern version of the game today.
And we have one biome in place and it's not fully fleshed out.
We're learning about how to make a scalable and robust crafting system.
We have lots and lots of stuff in the world.
We're starting to figure out who the character is, but we don't care that much yet.
You can craft yourself armor and weapons and there's combat and all that stuff.
So the first thing we had to do was get that crafting system in and once we had that, then we could start kind of layering the rest on top.
And then finally, as we approached launch.
This is what the game turned into.
We ended up with about a 60,000 word story.
And yes, you can put story into your game through this weird chaotic process, and we'll talk about that in a little bit.
We have nearly 1,000 unique items in the game, 500 craftable recipes, just tons and tons of content, none of which we knew was gonna be there until it was.
So we like to think about this process as the game discovering itself over time.
Because as iterators, rather than designers, it's our job to simply play the game, listen to it, feel it, and kind of feel out what it seems to want to become, and just follow the trails of what's fun.
If something's boring, we try to fix it, or if we can't fix it, we get rid of it, like removing your arms and replacing them with weird things.
And over time, you can see that the game solidifies very quickly, because the first three screenshots are the closest together in time, but the last two screenshots look the most similar.
Because those early days, the game is kind of like a white hot ball of magma.
It's just very liquid and fluid, but the longer it sits, the more it solidifies, the more it cools, and the more it just sticks to whatever shape you give it.
So that is the iterative process that we use to make our games with no planning at all.
But there are some things that if you want to do this in your studio, that if you take these philosophies into your workflow, then it'll help you kind of work through these iteration cycles much more quickly.
So the first thing that we do is we focus really hard on speed, because iteration is a compounding process.
If you can get 20 iteration cycles in at the same time that somebody else can get three, you're just going to have a better game.
In that same amount of time, it's going to be much more cohesive, and you're going to understand it much better.
Because of that, our studio has a philosophy called take the time to go fast.
which is just a little saying where, you know, if you think there's a tool or something you can learn or something that you need, that if that's gonna save 20 minutes a day for you on something, but it takes you eight hours to figure it out, still worth it because that's a permanent gain in your speed, right?
And so we always focus on speed.
We do lots and lots of game jams to sort of test ourselves and we'll make games in just a couple of hours just to see what we're capable of and try to find our weaknesses in our processes.
We also love the phrase, can we not?
Which is just a way of asking yourself, am I doing stuff that's a waste of time?
And what would happen if I just didn't do those things?
Because what we've found is that speed of development largely comes from cutting out things that you just don't need to be doing.
Whereas most people tend to try to focus on just doing the same things faster.
And that's where you start crunching, that's where you get burnout, that's where you get all these other problems.
So because of this, we actually only have to work four days a week, and it's still fine.
We also adhere pretty strongly to the good enough principle, which can be summarized by the phrase, perfect is the enemy of good.
And to kind of give you an example of how we do this, when we were working on Crashlands early on, we needed to get the first creature into the game.
And we had a set of criteria on what this creature had to do.
For starters, it needed a simple, avoidable attack, because this is the first creature that the player's gonna encounter.
And so, they need to be able to understand how to not get killed by this thing.
Should be pretty friendly looking, even though it's dangerous, but we don't wanna scare players away, because again, it's a lighthearted game.
It needs to fit with the aesthetic of the environment, which is easy for us because we only have one artist, but for other teams this may be a little bit more of a challenge.
It needs to have very few moving parts because we don't know how creatures work yet and we don't know how we're going to animate them, and we don't have a plan for that, so we're just going to make something that's easy to implement.
So we handed this list to our artist in the morning, and by noon he had created the Wompit, which is a one-legged creature, so a few moving parts, no problem there.
And it stomps on things, which is a simple attack.
You can see it go through the air and land.
So it checks all the boxes.
So we said, is this good enough?
Yes, it is.
We put it in, and we had it fully implemented by the end of that day.
And that's the same creature that's still the first creature players encounter in Crashlands.
The reason that we stick to this strong good enough principle is that as a developer you have to understand what do players actually care about.
Because when a player encounters this wompet, their reaction is going to be, hell, I'm being chased by a one-legged hippo.
That's sort of where their thought process ends because it's a threat to them, it's coming after them.
And once it checks all those boxes, they don't care anymore.
So a player isn't going to sort of behave the same way that maybe like a video game producer looking for perfection might.
The player's not gonna lean in and say, you know, the ears on that wompet could be slightly larger, I think.
They don't care because however you present the world, as long as what you've created is good enough and fits, the player stops asking questions at that point.
So if you're having big debates about whether your main character should be wearing jeans or khakis, maybe just don't.
Another thing that we like to use is using prototypes to crush debates.
This phrase will save you so much time in your development cycle that it's unbelievable.
How long would it take to prototype this idea?
When we were working on Crashlands, we had these floors that players could build and they could sort of lay them out on the ground.
but players weren't building them and they weren't using them for anything.
And it turned out that floors were basically a useless item that we hadn't given any purpose.
So Sam, our artist, came up with an idea on what we could do to make floors useful.
Adam and I, the other two members of the team, didn't understand how his idea would work or how it would be feasible or even why it would be good.
And so, of course, we did the natural thing and we argued about it for three hours.
After three hours we didn't come to a resolution.
We walked away in a huff.
I sat down at my computer and I prototyped it in seven minutes.
Turned out it was a great idea and that's what we have in the game today.
So if you find yourself arguing for a long time, just ask how long would it take to prototype.
So the final piece of this iterative design philosophy is that a lot of people get really fixated on story.
And the question is, can you get stories into your game using this sort of chaotic design method?
So to answer that, I'm gonna tell a story of my own.
In the beginning of Crashlands development, we got combat in, in the first couple months.
and the player was taking damage but couldn't heal.
And so I said to Sam, our artist, I said, we need an item the player can just pick up off the ground and eat it to heal.
And so he sent me this flower.
And I'm sitting there thinking, who eats flowers?
This is weird.
So I just gave it a name and called it bacon weed.
And now it heals you and it makes perfect sense.
Later on in the development cycle we we added farming with the player can sort of plant stuff and put things in pots and regrow stuff and so a potted bacon weed was born. And as the programmer I was also writing the tool tips for the items as we implemented them into the game and it was my job to write the tool tip for potted bacon weed.
This was the 30th thing I had written a tool tip for that day. I didn't know what to say because it's bacon weed in a pot. I mean what more do you need? So I just made up some nonsense and I wrote.
Legend says if you leave a potted bacon weed by your back step, the bacon weed fairy will steal your teeth.
We said, heh, and then we moved on.
About a year later, we wanted boss fights in the game.
We didn't really know what the bosses should be, and so we kind of combed back through all of our tooltips, and we kept coming back to this bacon weed fairy.
We thought, this has to be a boss fight.
So we created a huge elaborate quest chain that the players go through, and at the end of that quest chain they confront the Baconweed Fairy, whom they have to defeat to get a healing trinket that's one of the best items in the game.
And the Baconweed Fairy is a crazy bullet hell fight that changes everything about the way players think about the game, and it's also one of the coolest moments that we see whenever YouTubers or streamers play the game because they're so surprised and taken aback by this, as you would expect.
So the way that you then go about creating story using this design process is, for starters, don't worry about it.
Finish the game first, because the game is the setting for your story.
So just as the game takes shape over time, you're just going to be looking around for little pieces of hints at a story.
You're just going to pick them up and weave them together and just kind of let those stories emerge from this weird thing that you made.
And above all, when you're telling your stories, be unapologetic about it.
Just let the game tell the stories that it wants to tell and don't try to force it to be something that it's not because maybe it's too zany or too weird or whatever.
Because as long as you interpret the game honestly as it seems to be interpreted, you're gonna end up with something that fits really well and is also very interesting to players.
So that's our whole design process.
So as a quick recap of the main points, in case you guys want to take a snapshot of it, you can I guess use your phones for that.
So for starters, ideas don't matter, don't worry about it.
Just start making stuff.
Quit worrying so much, that's just in general, just life advice.
Don't plan everything or anything if you can help it because you can't know the future and you're gonna waste time planning and then waste time being wrong later.
So don't do that.
Also don't sweat the small stuff.
Also don't sweat the big stuff either.
Just stop sweating.
It's not a good look.
Speed is your best friend, so focus on that and everything else will fall into place.
And don't worry about trying to tell stories in your games.
Just find them, because they're just laying around.
So just pick them up.
All right, thank you guys very much.
Appreciate it.
Also, we do have a podcast at our studio, which we talk about this kind of stuff all the time.
So if you'd like to check that out, we have a link up there.
If you want to find me on Twitter, you cannot.
So, good luck.
Alright, does anybody have questions?
Yeah.
So, great talk, thanks.
You mentioned in the beginning, we were like four people.
Was it bigger afterwards?
We started it as two, and we are now four.
And do you think it would work for a much bigger team, 20 or more?
I simply cannot say.
I think one of the things that's really important for our design style is autonomy, where it's sort of like, we do things by targets.
So some general idea needs to happen, like with the Wompit example, we just have our checklist for our artist, and we don't care what comes out, as long as it meets those requirements.
And so he made that thing and we put it in without any oversight really or anything like that.
So I think it can work with a larger team, but you would need people who you really trust to be that autonomous.
But at the same time, I think the larger a team gets, you know, the more people want to know what's happening and the more planning you seem to need.
So one of the questions people rarely ask is, you know, how small can we just keep our team?
or do we need a team this big?
And what if we split the team and make two games at the same time, right?
So I think, I can't say, but I've never been that comfortable on large teams anyways, so who knows.
Thanks. Thanks.
Yep.
Yeah, so I just want to thank you for...
all the hours that I spent playing this game, it was awesome.
Yeah, no problem.
I wanted to ask about, I really fell in love with the creatures, and especially that embiggening moment.
Yes.
Can you talk about the design process that led to that?
Yeah, so that design process was just this, but I'll kind of recap how it went, which is, so we have a moment in Crashlands where you can collect items, and then you can create this weird thing for each creature, and you can give it to the creature.
and we do sort of like a Pokemon style, you know, it flashes on screen, what, it's evolving or whatever.
But then, at the moment that it's about to evolve, we flip the screen into this crazy view with weird words flying across the screen and we turn on some dubstep, and then the creature just kind of flies in your face a whole bunch, and big words flash on the screen saying, creature embiggened, and that's, and then it just happens for a few seconds and then it just goes away, where the player's kind of going like, what?
what just happened.
I would literally, when I was playing this game on my commute, I'd be like, oh god, I can't watch this on the bus because I wanted to save it for home.
Yeah, and that became one of those special moments.
And so where that came from was actually, I had been doing the programming for this and Sam had created some of the art for this embiggening scene.
And we originally just had some very mundane music, and I'm sitting there programming it, and I thought, this isn't anything.
So I kind of snipped up some Skrillex or something.
I just threw it in there just as sort of a demo.
And I didn't tell Sam about it.
And so then he was playtesting the game, and then he just started screaming.
So we were like, yep, that's the thing.
But again, that just came through interpreting the game and just saying, this isn't good enough.
This isn't hitting what we needed to hit.
We need a joke here.
And so that's where that came from.
Yep.
Hi, I'm wondering about playtesting your game and if you guys do any playtesting with players outside your studio.
In specific you talked about the floors and how players weren't using the floors.
Who are the players?
If the game wasn't out yet, who's playing it?
We do a series of testing moments where at the very beginning we will just do one-on-one sit-downs where we'll bring in somebody who's never seen the game before, who isn't afraid to tell us that they hate it.
And we don't ever ask them questions.
We just sit down with them, and as they play, we just take notes and just watch what they're doing and see if our ideas are actually landing.
Because it's easy as a developer to say, here comes the funny part, and then they're going to be like, huh, and try to, you know.
like when you show a friend a YouTube video and then there's that painful experience.
So we don't do that, we just observe.
And so we do that early on in development and then later on we reach out to our community of players and we do sort of a small alpha.
where, because these are sort of our bigger fans and they are very uh...
sort of forgiving of if the game crashes or has terrible bugs or whatever.
So we do that and then we do a much bigger beta later on through invites.
So yeah, we do have a pretty stepwise testing process that we go through.
So I love iteration, I love prototypes. I agree that that's how you make your games not suck.
So that's awesome. What I've noticed happening on development teams that I've been part of is that 40 iterations down the road you're like, oh, we're going to implement this feature, it's going to, we're going to test it today. And you're like, a week later you're like, wow, that was a lot harder to implement because there's a whole lot of code in here that's kind of bad. And so at what point or if ever do you be like, all right, we like what we've got, tear it down, build it the right way so that we can continue prototyping because now our momentum is being sucked.
Yeah, so one of the key ideas that you want to hit when you're going through these iterations is trying to get the current state of the game to be in a really good spot.
So, as opposed to saying, you know, the game doesn't feel very good, but if we just add ten new systems, I feel like that's going to do it, you know, because now you're six months down the road, you're going to get all those systems done and the game is worse now because it has a bunch of systems with no content.
So one of the things we've noticed happening when we do these iterations is that if we leave a sort of a stone unturned where we leave some kind of a weak special effect or something that just doesn't feel good to use, then we will go ahead and forge ahead without that thing and we'll just keep developing the game and leave that poor underused system behind because it just wasn't doing what we needed.
And so that's not good, right?
Because now you have a system that a player will encounter thinking, this is going to be great, and then it's just kind of bland and then they just forget about it.
So we've really tried to take seriously the idea of whatever you put in the game, nail it.
So a lot of people try to save polish for last.
And I think if you do that under the iterative cycle, then you're gonna end up just with a lot of sad systems that have never been finished because you didn't wanna use them, you didn't wanna explore them, and you didn't wanna play with them to do your comparisons to your vision.
So you should always try to shore up your systems to be in the best possible state before you think about moving to the next thing.
Got time for, yep.
I wanted to ask.
Why do you use Game Maker Studio?
I mean, I'm a master race myself for that, but I wanted to ask why do y'all in particular?
Because it's the best.
We've tried using lots of other engines for 2D development, and we found that we just can't do anything faster than we can do in Game Maker Studio.
We've actually, we've even done a series of jams where every Monday we started a game at eight o'clock in the morning and had it published on Google Play by 6 p.m.
with a full set of loops, in-app purchases, the whole thing.
Some of those games even got featured.
And so with that kind of speed, since that is our primary concern using this development style, we just have to go with whatever tool lets us do what we want to do the fastest.
And that just comes to be Game Maker Studio.
So with your iterative process, I guess you said you you're trying to just cut out as much planning as you can how do you know when you're getting to that point where you're ready to launch and I guess if you're just always kind of Yeah, you can always keep going, right?
Right.
Yeah, it basically just amounts to, for us, you just gotta kinda feel it out.
So, sort of, a lot of it comes down to comparing the game to the vision, right?
And when you feel like you've just hit everything that you wanted to hit, you gotta wrap it up and move on, because you will just run out of money at some point, or people will just lose patience.
So, if you're trying to build up hype at the beginning of your dev cycle for your fans or whatever, and then it takes six years because you just gotta get it right, then you're gonna have a hard time.
And that's partially where the good enough principle comes in as well, where you have to be willing to accept that perfection is impossible to attain, and once something is good, and good enough that your players will really be into it, then you move on to the next thing.
If you have a lot of ideas, do you ever have a hard time deciding which ones to prototype?
Uh, nope.
We don't really have a lot of ideas.
We just throw stuff at the wall, and then it's...
So we just...
We kind of operate on action.
As soon as somebody says, what if we did this?
And we go, okay.
And then there's a prototype within six hours, and then that just sort of...
becomes whatever the next game is.
And so, I know a lot of people have binders and binders full of ideas, laying around their studios and stuff.
We are, our studio is very Spartan, there's just nothing.
We don't have any ideas at all, so.
Yeah.
Anybody else?
Okay, thank you very much guys, appreciate it.
