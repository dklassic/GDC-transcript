Well, thank you all for coming to one of the GDC 25th anniversary post-mortems.
We're here today, of course, to talk about Marble Madness.
It's not going to be a whole hour talk.
I was told to leave 20 minutes for questions, so I'm targeting 40 minutes with it.
One request from the GDC is please fill out the evaluations.
They're very important to the overall process.
Thank you.
Tough crowd.
So.
I've been making games for about 30 years now.
And way back at the beginning of my career, I made three games, worked on three games, I should say, during sort of the final years of the golden age of the arcade.
And the third of those games was Marble Madness.
Now, I hadn't really played arcade games much at all to begin with.
In fact, Pong, I don't know, it seemed kind of limited.
And plus, you could play it at home.
But a friend of mine came to me in high school and he said, Mark, you have to try out this game.
It's the coolest thing.
You're shooting at soldiers who are advancing at you and shooting back.
And you're dodging behind bunkers and things.
And he's actually talking about space invaders.
I don't quite see the soldiers there.
But anyway, I did play it.
And it was, indeed, the coolest thing ever.
And so I started to play a lot of arcade games.
And I loved, more than anything else, the variety of these games.
Because these are games from 1980.
and 1981. Eight games, but also eight completely different genres. That's the way it was in the arcades those days. You'd go in every week and you'd find something totally new that you'd never seen before. Now, in those days I was also a pretty big paper RPG fan.
I used to play them with my brother and his friends.
And you know, paper RPGs, you draw a map, and then you have to make a copy of part of that map and show it to somebody to show them where they are, and you have to roll a lot of dice.
And my brother and I thought that, hey, wouldn't this be simpler on a computer?
And so we found a couple hundred thousand dollars of equipment at the nearby university that was underutilized.
And we sat down to make a 3D real-time action RPG.
in 1977. And the idea was that, as you were wandering around the dungeon, above ground, below ground, that the graphics would be like Battlezone, but better, because they'd have a solidity to them. We were actually going to do, we're trying to do, hidden line vector, which is a very tricky kind of graphics. And we could do about, on our scope, it wasn't even a monitor, on our scope, about one image every few seconds. And then for...
for the action sequences, we were going to shift to sort of a Cinematronics warrior style overhead real-time combat simulator.
Now my brother and I had about as much chance of finishing this project as two six-year-old kids in the backyard trying to dig a hole to China.
But I did learn a lot about programming.
And oh, and we did see the game we were trying to make, by the way.
It was called Final Fantasy VII many years later.
So I had two hobbies.
One was programming, and yes, it was on punched cards.
And the other one was playing arcade games.
And I used to dream about turning my two hobbies into a job and getting fame and fortune.
Fame, because I could see it.
I'd release that game in the arcades, and then I'd be on Johnny Carson talking to him about my latest creation.
And as for the fortune, I figured, wow, that quarter.
I could just get five cents out of that quarter.
If I could just get one penny out of that quarter, you could do the math.
That would be like millions of dollars.
And I got very lucky.
While I was in college, I ran into a man who was writing a book on arcade strategy.
We're talking an era where you got your information from TV, radio, newspaper, or magazine.
That was it.
We're talking pre-web.
We're talking before the release of the CD here.
If you were going to get information on an arcade game and how to play better, you were going to read a book.
And so I ran into this guy, and he interviewed me because I was a very good arcade player.
And after that, he offered to set me up with an interview with the head of product development at Atari.
And January 1982, I became employee 16,000 of Atari.
More properly speaking, I was in a much smaller part of Atari.
Atari was three different companies.
There was a company making home computers, a company making consumer game machines and consumer games, and then a very small company making arcade games.
Only about 150 people in this group.
And that's what I joined at the age of 17 years and four months.
And I quickly learned that, wow, oh, here's me at the time, by the way.
I quickly learned that the thing about fame, it wasn't going to work that way. We were forbidden to tell people that we had created these games. The stance was that it was a corporate creation. So my good friend Dave Toyer released Tempest. It sold 30,000 units all across North America and he couldn't tell us all that he created that game basically by himself. Now the consolation you got for this was that you could put your initials in the high score table.
And so you can see the creators of Centipede here, Don Bailey and Ed Logg, and their initials there.
That's the fame.
And then for the fortune, well, turns out the economics of the arcade business weren't that great.
So we made the game, but we didn't get those quarters.
What we did was we'd add a couple hundred dollars in margin and sell it to a distributor who would sell it to an operator who would perhaps have an arcade like Time Zone, and that operator would get 100% of those quarters.
but would have to pay for rent and salaries and maintenance, which was huge, actually.
Those joysticks would break down all the time.
Alternatively, the operator could put the game in a 7-Eleven, in which case no salaries, no rent, but only half of the quarters.
And either way, the economics were not great.
The operator needed 10,000 plays at $0.25 to purchase a $2,500 machine.
Except that math assumes there's no overheads at all.
Realistically speaking, the operator needed 20,000 or 30,000 plays to break even.
So nobody was making very much money.
Now, the final thing was, I kind of knew this intellectually, but I didn't think it through, was I wanted to make 10 or 20-hour cinematic story-based games.
And I was in a world, right, one quarter got you three minutes.
It doesn't get you this, whatever it is.
And I guess the only consolation I had was that we were totally empowered at Atari.
There was one job.
It was the programmer slash designer slash artist.
So you made the design doc, got it approved, did the artwork, put it in the game, coded it up.
Even as a rookie, you do this.
And consequently, there was a 100% failure rate for first titles.
uh... even a famous guy like Dave Toyer his first title was a soccer game that was unsalably low in income when he put it in the arcades trivia uh... true trivia here it was a soccer game based on a track ball and the track ball was actually a bowling ball and this uh... by the way this uh...
failure rate was finally broken in nineteen eighty three by Franz Lanzinger who I hope is here today are you here Franz?
stand up this man The first man whose rookie title was published, and it was, of course, Crystal Castle.
So 20 or 30 before couldn't do it, France could do it.
I never knew this.
There was also something going on here in that you controlled your own destiny.
You had a very direct link to the consumers.
These titles were not marketed at all.
They couldn't be marketed.
All you did was put them in the arcade and see how much money that they'd earn.
And the players, you know, they could see it for free, they could play it for a quarter.
If it was fun, they'd play it again. If it wasn't fun, that was it.
Or maybe they played it ten times, and the tenth time wasn't fun, and that was it.
So it was very, very tough business.
Talk about monetization hell.
And to see if a game could be published, what we would do is we'd make the game about up to the 80% point, so it looked indistinguishable from a finished game.
And we put one of them in an arcade and just see what the coin drop was.
And at this point, two out of every three games would be canceled.
It was a brutal environment to be in.
So here's my first game, which is one of those two out of the three that did not get published.
Thank you.
You can play it on main.
You'd slide tiles and try to.
get the ducks to safety on the right-hand screen or the bottom of the screen.
True to form, I did every piece of artwork in this game except for the ducks.
And believe it or not, this thing was viewed as great artwork for its day, but very poor gameplay.
So after this failure, I sat down in early 1983, now that I had a little bit of experience in the games business, and tried to figure out what sort of game I wanted to make.
And I guess it was time to go back to the old days.
So I did this piece of artwork in early 1983, and it was a really bad game there were a few design targets that you had.
You needed to make something unique.
Sequels did not sell, believe it or not.
Atari was particularly serious about making unique titles.
If there was ever a top-down driving game that had been released in the history of games, you couldn't make one.
If there was a head-on-head fighting game that had been released, you couldn't make one because that would be insufficiently original.
So it was a very high bar to hit with these games.
The other target was unique controls, because Centipede and Asteroids and Tempest, of course, all of these had different controls.
We believed it was an important part of keeping the concept fresh.
The final thing, which started coming out in 1983, was that the game should have at least two players, because the economics were getting worse and worse, and two players at once meant two coins.
So I thought about this.
I loved 3D graphics.
And there was Battlezone and that kind of hardware that could do it.
But it was so floaty.
I mean, these objects are transparent.
And there was this other hardware in development at the time, since actually before I came to Atari, called iRobot.
And iRobot was raster 3D.
So it's solid, these images, in 3D.
Now, very low polygon count.
about 5,000 polygons a second.
And so the poor designer here was trying to make an entire frame of the game with 200 polygons.
And the other thing about this is when you really looked at it, all of the edges of the polygons would crawl.
You'd get very distracted by the aliasing in the game.
And I wanted to be the first person to do solid 3D.
So maybe not a lot of moving camera, but really clean 3D.
uh... and i sat down to figure out what that game would be and uh...
uh... how i would go about making it and uh... actually uh...
frantz beat me to it with crystal castles but we won't talk about that today uh...
i would sit around late at night on our pixel processing system so this is our art system we had two of them in the office uh... it was built on a mini computer about the size of a refrigerator and i'd sit there and i'd fiddle and i thought okay theme How about miniature golf?
People like that.
And then what do you do in the game?
Well, what are the controls?
Before that, sorry, I had to work out how I was going to do the contours of the play field.
I worked out that two lines in different directions could give me the contours.
And holes, I don't know if that would work, so I put pipes in there.
And this is a Actually, a copy of our old design document.
I could not take anything with me when I left Atari.
They were not really all that creator-friendly.
And when Atari finally closed in 2004, a man named Scott Evans went there that day as they threw out everything from the 30 years of the company's history, picked it up, and then all of the stuff is on his website, atarigames.com.
I'm very grateful he did this, because the only copy of my own design document I have is from the website.
So for controls, we'd actually done for Quack, one of the versions, we'd done an industrial strength touchscreen.
And the idea was this was a frame embedded in the cabinet, shooting rays of light horizontally and vertically across the face of the monitor.
So if you put your fat finger through to the face of the monitor, it could detect where it was.
And I thought, okay, we'll use that touchscreen and you'll somehow hit the ball and...
You've got to go around corners.
Maybe you'll place bumpers or something to help yourself around the corners.
And I don't know, what does the second player do?
Not really clear.
I walked this around the office, and everyone hated it.
So then I thought, what about a race?
People like to do that.
And what about we use a track ball as the controls?
So you'd see a ball on the screen and have a ball to roll.
But what about a motorized trackball, where we'd actually have the ability to spin the ball programmatically?
So for example, as if the ball went down a slope faster and faster, you could just stand there and watch that ball roll.
And if you wanted to break it, just put your hand on it.
If you put your hand on it and it's on a slope, you can tell what the slope is just by the way it's fighting your grip.
And then for actual gameplay, a race.
If you get to the finish first, you continue.
If you don't, game over.
And for two-player play, I thought, how about two players versus two AI opponents?
And I thought, how about the players are glass marbles and the AI opponents are steel marbles or steelies?
And this plan was.
But first, you had to make the hardware, because every game hardware in those days was unique to the game for which it was created.
So clearly, you needed to do that for something like Star Wars versus for something like Centipede.
But the truth is that no matter how similar the Atari games look to you as a player, actually, it was all custom work inside the cabinet.
So it takes a while to make hardware.
And while they were doing that, I went off and helped my friend Owen Rubin.
on his game, Major Havoc. And the hardware engineers started on the Marble Madness hardware.
Now I had to specify that as well. And I had, again, two choices, vector or raster, pretty much everything those days was one or the other. Vector was simply colored lines on a black background. But the plus was they were under complete programmatic control.
So you had a command buffer like a modern graphics hardware, and the program would just put the list of lines in it, anything you wanted to draw.
You can draw.
And if you wanted 3D, they could put what they called a math box on it.
And all of a sudden, the images would look like that.
With raster hardwares, though, they were based on ROMs.
And they were incredibly finicky.
You were not able to do any freeform graphics whatsoever.
You had a ROM.
Back up there.
You had a background that was made out of 8 by 8 pixel stamps.
That was the basic unit that you populated with.
And then you had a very few sprites, maybe 16 or 32, which were small, movable objects on top of that that also came out of the ROMs.
And every single graphic you were going to display had to be in a ROM, in a custom chip, basically.
And so these are stamps from Centipede.
The images you could display in Centipede, that was it times about 10.
And what you did was you passed the hardware, the code for that stamp.
you did not have the ability to say, I want to put a dot on the screen and put it here.
Now, during development, we couldn't afford the six-week turnaround time to make custom ROMs.
So we used erasable programmable ROMs, EP ROMs.
Just an example, so that's Centipede's background.
It's all made from two types of stamps.
If you want the mushroom to disappear, you have to just substitute things that look smaller and smaller until it's gone.
And then something like the spider is one of those sprites on top that you have maybe 16 or 32 of.
And the only thing you can do runtime programmatically is change the color.
That's it.
Everything else is canned.
So this created a situation where Ed Log, if he wanted to put a asteroid that looked like a mushroom in his game on a vector hardware, that was a couple minutes.
Type it in, download it, done.
Whereas if Ed Log thought that the legs on the centipede should be one pixel longer, he had to go lengthen them on the pixel processing system, transfer the data to the main mini computer that we used, run a utility, put the results on an eight-inch floppy, take that to the EEPROM burning room, enter a code, burn a set of ROMs, go back to the lab, lever them out, put in the new ROMs, and then find out that probably he screwed up one step along the way.
So ours, very inflexible.
So there was a third choice.
It was a very unique choice.
The iRobot hardware.
It's the very clever hardware engineer, liked my game design.
And he said, you know, Mark, these procedural play fields that you want to make are really easy to do in hardware.
Why don't we make a cheap version of the iRobot hardware?
You'll just give it the heights you want to display.
and it'll do it live.
And at that point I got really excited because now the play field can be sort of a living creature that's a part of the gameplay.
It can chase the player around.
And that was so cool, I put this in the game design.
So the core game design concept then became a race against an AI opponent on this dynamic play field.
And what happened next is that, of course this didn't happen, the economics of the arcade business got still worse.
We were having a crash in 82 and 83 and 84.
We lost 90% of our sales.
It was very tough.
We'd saturated the market.
There were 1 and 1 half million arcade games in North America in 1982.
And we just couldn't sell anymore.
The old ones weren't dead yet.
So our strategy for improving the economics of the arcade business was we were going to do system hardware.
System hardware meant that the operator would buy a $2,500 game machine one time, and it would have what we called a system board in it.
And after that, the operator would buy new games just by getting a giant cartridge, like I have a photo of here.
Doesn't really look like a cartridge, I know.
And a control panel specific to that game, and plexiglass, giving the game's title, and maybe some artwork for the side of the cabinet.
And we figured that that would be about.
$800 rather than $2,500. So we would help out the business by not having custom hardware every time. Now, we were in luck because there had been a skunk works project, again, going on from before I joined Atari, where a poor engineer locked in a room was embedding all of the conventional stamp graphics in a single custom chip. And so he'd come into work every day and manipulate diagrams that looked like this.
That's apparently how you made chips in those days.
It certainly isn't how you do it now.
And so we would have our ROM stamps and our ROM sprites, and in addition to that, we would have RAM sprites.
And that meant that I would have a programmable area, maybe not large, 32 by 32 pixels, 64 by 64 pixels, and inside of that, I could draw any graphic I wanted to programmably.
And that meant...
marbles that could refract the playfield behind them, and steelies that could reflect the playfield around them.
And this totally did not happen as well.
It did not happen because we'd locked the guy in the room too long.
And he couldn't take it.
He quit.
He took another job.
He told us it was one month left, just one month to finish the chip.
It'll be fine.
Well, we looked at it.
It wasn't a month.
It was six months through a year to finish that thing.
And it wasn't just me that was waiting for hardware by this point.
We, as a whole company, were going to go to system hardware.
So all the teams were waiting.
So very reluctantly, the engineers settled down, and they did what they called the budget system.
The budget system was a utterly conventional ROM-based hardware.
And you can see here the motherboard on the left.
That's the Marble Madness cartridge on the right.
Only about two things notable about this hardware.
56 sprites, so a few more. And if you wanted 32 or 64 colors rather than 16, you could have that many. You just needed to put more ROMs into the cartridge.
The motorized trackball had also been in development. Now, before I get into a motorized trackball, let me show you the inside of a basic trackball. It's supported on three shafts. So there is a shaft with an optical sensor to detect the vertical motion.
There's another one to detect the horizontal motion.
There's a third shaft, just the track ball, which is actually a cue ball from billiards, can make good contact with the mechanisms.
So these guys had made a prototype with four shafts.
They had two for detection and two for driving the ball with motors.
And they found out that with four shafts, cue ball couldn't make good contact with all of them simultaneously. And for anybody who's ever bought a kitchen table, dining room table, you know this, right? If it sits on three legs, it's stable. If it sits on four, you need shims or something. And they could not machine this to enough precision that it would survive in the arcades. And so this, too, was scrapped. Right here is the actual Marble Madness control panel, and it is two utterly conventional trackballs.
So 1984, the hardware finally arrives.
And let me tell you a little bit about our development environment here.
We were using a VAX mini computer, the 11780.
It was a true one MIP machine.
That means 1 million instructions per second.
This does, I think, 10 billion.
I'm not sure.
Not a whole lot of horsepower.
That might have been OK.
But the thing is, 50 of us shared this machine on terminals.
Whatever you wanted to do, you were going to do very slowly.
On the good side, wow, the 68,000 CPU.
I got to be the first person at Atari to use it.
And all I can say is it was posh.
32-bit registers, eight of them, eight address registers.
And it ran at an amazing 7 megahertz.
It was great.
We were also the first team to use C as a programming language.
And I was a little excited and a little suspicious, you know, what's going to happen if I don't have direct control over the assembly language instructions.
And that was actually justified suspicion, is sure, during the beginning part of the project, you could type something in and it would compile quickly and you could see the result. But after a while, it was taking 15 minutes to get through the compiler, linker, and download process to see even a single character change in the game.
And there was also this hidden time sync in that I had to go back in and hand optimize a lot of the code that the C compiler created.
Net-net, we ran at 30 hertz because we used C, not 60.
And I suspect that it actually took longer to make the game because of that.
Now I've been saying we, and I just said that the, you know, this was the error of the one person, one project.
Well, by 1984, that had changed.
It was a three-person project.
The second of those people was Bob Flanagan, who had been helping out John Solowitz on Paperboy programming, and then came on to be my partner programming on Marble Madness.
And so we settled down to code the game in C together.
And our first milestone, remember the pitch, player versus AI opponent on a dynamically changing terrain.
And so we had to somehow show that.
we could use a ROM hardware, very flexible ROM hardware, to do this kind of smooth graphics.
You know, iRobot, no problem.
But if it has to be a canned graphic in a stamp, big problem.
So I looked at the play field, and this is a bump.
And it's made out of stamps.
There's a lot of duplication here.
All of the flat areas are just those two stamps.
There's all the flat areas.
And then those stamps are actually the same stamp.
And if we look at the front of the bump, it's the same stamps repeated.
There's not that many unique stamps needed to do a bump like this.
But what stamps do you need is next to the question.
And so just looking at one stamp here, that stamp I realized is trying to represent three planes of the bump behind it.
So zooming in on it.
There's the three planes.
You can represent, really, the stamp as that zigzag line.
And you can give it a number, too.
You can say it starts on the left, and it starts 10 pixels up above the stamp, and goes to the right 6 pixels up, comes down, it's 4 pixels in, and so on.
You can turn any stamp into a couple numbers.
So here's another stamp.
And so I thought, OK, I will.
Sit down, I'll figure out what the static aspects of the play field will be.
I'll derive the library of stamps.
I need to represent that.
I'll take four hours to burn that into ROMs.
I'll put them in the game.
I'll play the game.
And it won't have all the stamps it needs for that living bump as it chases the player around.
It'll use the closest one it can find.
But it'll keep track of the ones it doesn't have.
Then offline, I'll incorporate those additional stamps into my library.
and reburn the ROM.
And after a couple cycles, the idea is everything you need for a dynamic play field will be in that ROM.
And we did, on this basis, a simple proof of concept, and it appeared to work.
Now, the second milestone was the player versus the AI opponent race.
And wow, the design document had all been about the competitive and the cooperative aspects of racing.
Competitive is things like the first ball breaks the glass supports for the trap and the second ball is trapped by it.
Or there's a cliff that you can't jump down, your marble would shatter.
And so the first ball can use the teeter-totter to get down, but the second ball has to wait and so on.
And here is the actual playfield from the design document.
You can see it's a symmetrical track for the player and the AI opponent until you get to the end.
a wedge sitting on glass supports.
And the first person to hit those glass supports breaks them, takes the shortcut, and forces the other player to take the long way around.
So that was competitive.
Then for cooperative, the idea was you and I play against two computer opponents.
But maybe there's an elastic barricade where you and I have to hit it simultaneously.
If we do, we get through.
But if I get there before you do, I just have to wait for you to get there.
So we got the race in against the AI opponents.
We got the dynamic play field in.
We put it all together.
We played it.
And it was a enormous disappointment.
The bump that chased you around, it just felt creepy.
It had a weird rat under the rug kind of feel to it.
And it didn't really affect the gameplay very much.
And as far as racing against an AI opponent went, the thing was you'd be going as hard as you could, but we couldn't let you go too fast.
I mean, these play fields couldn't be very long.
And minute variations in how you went down trenches and around corners would be all that determined who won the race.
It was a pretty complete disaster.
Now, luckily, my second partner on this, Sam Comstock, our artist, we had a full-time artist.
It was great.
he'd been doing the critters for the game and he looked at this and he said no no no static is actually good you get rid of the dynamic concept and you make the play field static you can do shadows which will make it pop you can do ornamentation which will make it prettier and a programmer friend of mine said and if you ray trace it you can anti-alias it which will get rid of the jaggies on the edges of everything So to start with the last of those things, the concept here was I would define a height field.
I would then write a program that would ray trace it on our shared mini computer, 16 rays for every pixel that we would then average.
And then I would hand it off to the artist to touch up by hand.
And as far as ray tracing, I don't mean anything particularly complex.
This is a play field scene from above.
I meant take a ray in from the front.
see if it hits a white center of a square or a black line and figure out the color there.
Then go from the point of collision out to the light source.
If you can get to it, you're in sunlight.
If you can't, you're in shadow.
And as far as more rays, 16 rays is definitely better than one ray.
You know, you got one ray, it's going to be light or dark.
And you'll see, like in this ramp area, some significant jaggies.
If you can have a lot of rays and average them, we used a pyramidal filter for that, you can get these very, I don't know, delicate looking graphics, quite unique in the day.
So that worked very well.
As far as shadows went, I went in and I doctored last week one of our screenshots to remove the shadows to show you what they look like without shadows.
So the left is Marble Madness as if it had no shadows.
And it actually is quite hard.
I'll zoom in.
quite hard to see the relationship spatially between the objects here. If you look at the pillars on the right, it's a little hard to tell what the height of each of those is. But as soon as we add shadows, you instantly know the spatial relationships there. So yes, Sam Comstock was correct. And then of course ornamentation, sure. You get your artist in there and he freehands, I don't know, rails and their shadows and arrows and adds color and of course it's going to look better.
The problem we ran into was I needed to trace eight, seven, excuse me, just seven, seven million rays a level on our shared computer. That was 12 hours of full-time usage on a computer shared by 50 people.
So I did it nights, I did it weekends.
Francis forgotten this when I mentioned it yesterday to him.
He burst into my office some Saturday morning wanting to know what the hell I was doing.
Because what we didn't know is the sharing algorithm on the computer.
If you use the whole mini computer for too long, you'd own it.
And nobody else could get in.
It took him 15 minutes to type in his name and password to log in.
At any rate, I did finesse that problem.
I did become the largest user.
nights and weekends of this computer. And we did, by this whole transition from dynamic to static, we did lose a month, but we gained a look.
As far as the race versus AI opponents went, that turned into a race versus time. I just loved pole position to death, so I simply used the pole position time algorithm. It's very simple. You race. If you have seconds left over at the finish line, you keep them, and you get more seconds.
So, we're going to go ahead and get started.
If we look at the transition between early 83, when I did the paper design doc, and June of 84, when we'd actually gotten the game up and found its problems, it was a completely different game.
However, that was a plus.
We had this killer look, and we also had pretty good gameplay here with the race versus time.
That turned out to work very nicely and intuitively.
And finally, I haven't talked about this much, but we had this really nice approach with the enemies that I and Sam had worked out, where they were all...
bits and pieces of things, like the slink, sorry, the marble muncher is just a foot, or the ooze is just a blob, no eyes or anything, or the birds are just things with wings.
I should also say we had a great audio team who, they'd come by occasionally and download stuff on it, and it was great stuff invariably.
I had nothing to do with that creatively, Brad and Hal.
They got Yamaha FM sound synthesis.
It was from a color organ.
This was, I believe, the first time that chip had ever been used in an arcade game.
It had just beautiful audio.
And they did their excellent sound effects and sort of pseudo-classical compositions with it.
So it was actually, from that point, I know this is boring, but it's pretty smooth sailing.
Less than six months from that time to release, we made three levels.
And we did a in-house focus test where we just had players come in and play.
They loved it.
We made two more levels.
And we put a game machine, a prototype, in an arcade near my house.
And a lot of coin dropped, a lot of income.
We added one more level.
And we shipped it.
Just four brief stories from game development.
uh... i had in the original design sort of a black hole style gravitational funnel where the force would suck you down into it and wow i couldn't get that to work so and it was very hard to iterate on the ROMs it's not like i i could try uh...
any more than one shot at this a day because i had to rerun the levels overnight and after four or five tries i just gave up and the dimple you see in the second level is what we ended up with I ran out of sprites. So we had marbles. The marbles had dots in them to indicate their motion. And I needed 11 sprites to make one marble, because I needed the left half, the right half, eight dots, just to do a dot, you needed to use a sprite. And then I needed a highlight that would be in front of the dots. Two marbles, 22 sprites, we had 56 total.
thought about this, I ended up making every single possible combination of two dots.
And by using that library, I could then do it with four sprites that each had two dots and save eight sprites. And that got us through our sprite crisis.
The ooze, we really wanted to do a translucent effect, and we did not have hardware that supported translucency. So Sam drew the grid into the ooze.
It was very well done.
We had a bit of a kerfuffle with our graphic designers.
This was the age of the character, Pac-Man, right?
Biggest game of the day, Pac-Man.
And I didn't want to do that.
I wanted to do this abstract, Escher-esque game where nothing had eyes.
And they looked at the marble and they said, no, that's not a marble.
That's a happy face.
And they did the plexiglass top with happy face marbles, and they did the control panel with happy face marbles for our first test.
And I negotiated this one.
As you can see, we ended up with a smile, but not a face.
So those are happy, what are they?
Yeah, they're happy marbles.
But they're not happy faces.
So we shipped it in December of 1984.
We sold 4,000 units.
The market had come way down.
In the heyday, it was 100,000 for something like Pac-Man.
Even something that was a.
A failure, perceived as a failure, like Battlezone, sold 30,000.
1982, Pole Position sold 20,000.
1983, Millipede sold 10,000.
By the time the game this time came out, that was one of the top sellers of the year at 4,000 units.
What was good about that was we were in such trouble, that kept our factory open for three months.
Otherwise, we would have had to furlough the workers.
We were number one in income in the arcades we tracked.
Across the board, we tracked 18 arcades.
And after six weeks, simultaneously dropped out at number one, because the game was four minutes long.
Now, I've come back.
Why so short?
It really doesn't make a whole lot of sense.
And Scott Evans, AtariGames.com, sent me my source code.
I did not ask him for it.
He sent it to me.
I looked at it.
I should not have.
I felt so small.
The code for the ooze is 300 lines of C.
I mean, we're talking not even student project level for this.
And we were professional programmers working at the top game company in America in arcade games.
I don't know.
It's just mind boggling.
I looked at Uncharted last week.
The AI code for a typical enemy in Uncharted is 750 lines.
That code is written by a game designer, not a programmer.
So all I can figure is that our environment had so many obstacles that threw in front of us, you know, four hours to see your graphics on the screen and those compiles and the shared mini computer and the like, that just to get a 64K program was an accomplishment.
Anyway, I'm going with that.
uh... it wasn't all bad that marble madness had such short income. I mean it was a system hardware and we were the first game so as soon as that dropped out there were more games ready to sell to the operators like Peter Packrad and Road Runner and Indiana Jones and the like. One final thought. Marble Madness is certainly the most creative title I've ever worked on. It's probably the most creative title I ever will work on.
There's a certain commitment to a concept there that hasn't been in anything else I've ever been on.
And that's really rare. If you look at the games business today, there's not so much of that, a couple exceptions aside.
And in the process of putting this together, I was thinking about it.
What I think is this is our games were so small in scope that you got one concept.
And one concept was asteroids and spaceship. Go!
mushroom and centipede, go.
And it would either work or it would not work.
But simply, we were in an environment that fostered, that required that kind of commitment to a creative idea.
And that's really it for the prepared talk.
Thanks so much.
And I've been asked if you have a question to use a stand mic.
Hi, great talk.
If you were to iterate on Marble Madness today and take it to the next level, what would you do?
I've joked, I want to do sort of a philosophical quest where the marble goes out into the real world and has conversations with people about things like, why is there evil in the universe?
I'm really not kidding.
I did a design for this a couple of years back.
It will never happen.
This one goes back a little while. So understand if you don't have the answer for this. I read in the press 20 plus years ago that you were unexpectedly a detriment to the major havoc project because you were such a good play tester the game was tuned too high in the arcade. I read that in an article and I don't know if that was someone being, they were talking about you in the context of Marvel Madness.
Really?
Yes.
At the arcade show last year, the Gravatar team said I almost took the team down, actually, because yeah, I was the in-house play tester, and I thought it was much too easy.
It's a good lesson in usability for everybody involved, let me tell you that.
I haven't heard that about Major Havoc, though.
We just had to kill the player so darn fast was the thing.
I mean, if the game time play averages weren't three minutes or less, it was unsaleable, and Major Havoc, because it was sort of a platformer in some respects, was more like a four-minute game.
Question about all the fall on ports of Marble Madness 7.
Were you involved in any of those, bringing Marble Madness to any of the platforms?
And did it have any kind of a different, was the contrast really notable to you?
No, I wasn't involved in any of those.
It's really a shame that they couldn't have used trackballs.
It's not really such the same game as a joystick.
But now that we have the tablets and things, we might be able to use the gyros in there to do something well.
I did have somebody show me their version of Marble Madness on a smartphone one time and ask if I wanted to convert it to other smartphones, and I noticed they'd ripped my credit out of the game.
And my question was, if I did the project, would I be responsible for ripping out my credit or would somebody else take care of that for me?
I remember when I'd play the game in the arcade, I was always very convinced by how solid the physics felt.
I was just wondering if you had any comments on how you implemented the physics for the game.
Oh wow, it was a hack. Thank you for the kind words though.
Yeah, you kind of roll the ball and if you got to an edge, the edge would push you off usually.
I'm sure you've seen the speedruns where you take advantage of the bad physics to roll off and then pitch into an edge and just pop up to the playfield.
You can do that almost anywhere in the game.
Hi there. So at any point during the design process, did anybody mention that the gap between the track ball and the control panel is just perfect enough for a seven-year-old to get his middle finger stuck right in there?
Now, you should have played Dave Toyer's game where it was a real bowling ball without holes because you could get the entire side of your hand in there.
You owe me some Band-Aid money.
Any more questions? No? We might. Yes? I can repeat it.
Yes, so the follow-up game, Marble Man, that was Bob Flanagan, who was the other programmer on Marble Madness, working with, oh, he'll kill me because I'm forgetting his name, Haley, who worked on, um, Paperboy and a couple other very famous games.
And they, Mike Halley, sorry.
And they took a very different approach.
They thought that the sort of abstract look was hurting them.
So they went with enemies like a tomato or a giant fork and knife.
And trackballs were actually terribly expensive.
Trackballs were $50 a pop.
And they break down frequently.
So they went with joysticks so they could afford to put three of them on the control panel.
They took it all the way to test.
and found that the income was not high enough to release.
Yes.
I was just wondering, when you, after you rendered the play fields and you broke them up into tiles, did you ever run into the case where you had too many and how did you resolve that issue?
A case where I...
Too many unique tiles for the background?
You know, I kind of just worked and I didn't think too hard about it.
I wish I had a better answer than that.
I should have done more play fields than that. I have really a mystery looking back why that is all that is in the game. When we could have run, you know, three months longer and had an eight-minute game and maybe not dropped out of first place in the arcades after six weeks.
Thank you.
I was going to ask if you, sort of a very un-technical question, if you have any favorite game from the era back then and a favorite game sort of anymore.
Oh, I was in love with Defender.
And Eugene Jarvis was my childhood hero.
And a couple years back I got to give him his Lifetime Achievement Award at the awards ceremony.
It was a great moment.
Thank you.
Well, oh, yes.
Just as a, you know, playing it a lot, I always wondered if the reverse level was something that was a happy accident or if it was something you planned from the beginning.
It was...
It's really see to the pants is we had, we did level two first, and then we did level one, and then we progressed through the game, and when it got up time to level five, it's like, okay, they've seen all that stuff, how can we break the rules? And I'd had a very relaxed weekend up in Mendocino or something, and I thought, hey, you know, go uphill. Not a very sophisticated thought process, no.
So, related question.
How much tuning did you have to do on the levels after you made that initial prototype and put it in the game?
Did you mostly get it right from the start?
Or did you find you had to do a lot of tuning after you played it?
Yeah, it was a really cumbersome process to create the arc word for this.
So if we look at the second level, the blue level, you can see five rectangles at the top, which are sort of your opening shot of the level.
pretty much every night for a week I tried some different graphic to make, try to make that pop better until Bob told me to just stop it and get on to the next part of the game.
I mean, very, it would have been so much easier if we'd have gone with the original plan of the eyebrow butt style hardware. We could have just typed it in and seen it live.
Yeah.
But, but other things like, you know, the, I don't know, I could imagine like the slope on the, you know, the, you know, lines going down, or, you know, like the height of some of those bumps that you would have to go over.
You know, is that stuff that needed to be tuned, or was that kind of mostly got it right from the start?
In general, there wasn't a whole lot of finesse to it beyond the width of the play field.
And if you look at it, you got one square, two square, or three squares, and two squares seemed to be about the right spot.
So, no, it wasn't particularly tricky.
More of the question was what was the shtick gonna be?
So why is that level going to be artistically different, or what is the obstacle in your way?
And the actual geometry of the play field doesn't figure into it too much.
Thanks.
How long after you finished the arcade version of Marble Madness did they come out with the version for the Amiga?
So we finished the arcade version in December of 1984.
And the Amiga version came out towards the end of 1985.
It took them roughly as long to convert it to the Amiga as it did for us to make it in the first place because they weren't using the mighty power of the 7 megahertz, 68,000 and so on.
Ironically, EA was heavy duty into their electronic artists program.
So if you open that up, the two guys who did the conversion are the featured artists.
And just one more of these.
I don't want to be bitter.
Next year, Franz, please come and give a postmortem about Crystal Castles and talk about your experiences.
EA had asked for permission to feature myself and Bob Flanagan and Sam Comstock in Marble Madness for the Amiga.
And it sold 500,000 or a million units.
And Atari Management refused, saying that it was a corporate product and that they did not want any of their people featured in that way.
Crazy. Thank you.
All right, well, thank you very much for coming.
