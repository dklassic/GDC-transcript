I am Matthew Davis.
I'm one half of the team, Subset Games.
I'm going to talk to you about how we made Into the Breach.
On Subset Games, I am primarily the programmer, while Justin Ma, who's sitting up here, is the artist.
We work together.
pretty much full-time, just the two of us on the majority of the projects.
And then we end up doing and hiring out contractors and very talented people that fill in the skill gaps that we don't have to flesh out the game.
Stuff like music and sound effects especially.
Justin helped me on this whole talk, so even though I'm the one giving it, a lot of the ideas and the concepts kind of represents our collective memory of how we made the game and how we make games in general.
As I am a programmer, I'm not used to public speaking, so forgive me if it's a little rough.
I spent the last six years in my pajamas programming in my room, not standing in front of a lot of people.
Our first game was FTL.
It was a hobby project that took off a lot more than we ever expected.
It was made in just 18 months, which in hindsight was spectacular.
At the time, we thought 18 months was a totally reasonable amount of time to put into a game.
And then we did the advanced edition after that, and we moved on to Into the Breach with the security that FTL provided.
FTL went on, I mean, Into the Breach went on to take just about four years.
And this talk is going to go through why it took four years, the mistakes we made, and the good things we did, but ultimately that whole process of constant iteration and cuts that led us from that original prototype on the left.
to the final game that hopefully you've all played on the right.
If you haven't played it, it's a micro-tactics game that relies heavily on the mechanic that all enemy attacks are telegraphed so you see what they're going to do before they actually do it.
And so the game generates these micro-puzzles where you have to respond to enemy actions before they've committed to them.
Before actually talking about Into the Breach specifically, I'm gonna introduce a concept that kind of runs through the thread of how we make games and how we made Into the Breach, which is designing with constraints.
Justin and I are very game design, gameplay design, whoops.
Sorry.
Gameplay design focused.
Everything else kind of has to follow the game design, the narrative, the sound, all the elements that go in the game development end up kind of being a slave to the game design.
And then stepping one step further, there's usually these key designs that we hold constant, the key mechanics and pillars that make everything else work.
and it's a process of following those key designs to create the game.
So like the shape shorter, those key designs make up that framework and everything else from sound to game design has to slot into the shapes that are determined by those key constants.
The fun part about that in the end is you get to follow a design instead of creating a design.
Justin and I are terrible about big picture, see the whole game, what we're gonna make, and go make it.
We have to kind of discover it and iterate and prototype and fumble our way towards the final game.
And the constraints are a key part of being able to maintain that and make sure you're paying attention to what's important to the design.
As a really trivial example, if you've decided to stick with an action RPG genre constraint and you move on and you're doing the very classic mechanic of health, that health mechanic is going to constrain a lot of the different mechanics that the rest of the game is going to be built around.
You're going to be stuck with probably some way to heal them, health potions and healing spells and the like, and you're going to have to deal with what happens when health runs out.
Will you die?
Is the game over?
Et cetera.
And as a less trivial example, if you went back to not using health, and there was no health and no damage, then what would that do to the game?
How does it change?
How does that entire structure of how the game works would completely be turned on its head?
And so chasing down those constraints, finding the interesting constraints, and seeing where they lead you is how Justin and I like to make games.
I'm going to start by talking about how we found those constraints for Into the Breach, the important ones that led to the game that we ended up making.
Even outside of the specific game, we are kind of stuck with our own personal constraints as a studio.
There are practical constraints in that there are just two of us for most of the project, and then a few more at the end of the project.
It means we're not going to be making grand designs of MMOs and big 3D RPGs.
We're going to be making smaller experiences inherently.
Our design solutions have to be smaller.
But it is a benefit in that with just two of us, we can iterate really well.
We can cut design without affecting hundreds of other team members that have been working for years on something.
We can just say, oh, well, there's just two of us and move on to something else.
We don't have to update anybody else.
We can just push ahead.
On top of our team, there's just some subjective constraints that we have.
Ways that we approach design, aesthetics we like, things that we like to see in our games.
A lot of these are going to look really familiar in the sense of, obviously, game designers like these things.
But I think everyone has a different take on what it means to them.
Readability is important to us, and for that, for us, kind of specifically refers to limited menus, kind of that single-screen combat UI like you see in FTL.
Most of the game happens just like that screenshot.
You're not digging through really any other visuals.
We also like very low numbers, an almost board game-like design with low health, low damage.
where one point of damage is meaningful and then making that two points of damage is a huge change.
Being able to make those really big changes with small increments is fun.
Or looking at the shield bubbles we don't have in FTL.
You don't have percentages, you have just this really visceral bubble system that you can just glance and see the counts, they're kind of like tokens in a board game.
We like streamlined design where you're looking to minimize wasted time And in hopefully making shorter experiences We're not looking to make at least in these first games that we made Really big 40-hour games we were hoping to make something you could sit down and play in a lunchtime get a lot of design and compact gameplay in like a good punchy 20 minutes and be able to put it down as Opposed to you needn't commit your afternoon away to enjoy the game Interesting choices is another one that sounds ridiculously obvious.
We're all out there making interesting choices, hopefully, in our games.
But I think that it's something we forget quite often.
Like, we get so bogged down in the designing systems that if we don't stop to say, wait, have we actually made an interesting choice?
Is this huge mess of systems actually creating anything worth thinking about?
Or am I just doing busy work when I'm working Mario through them?
Beyond our own personal constraints and studio constraints, we start out with what the game is to begin with.
And the easy one that we all start with is genre that provides all of those early constraints and all those early designs that you can hang everything else off of.
The trouble is you don't want to get too stuck on it.
And we want to find something that is slightly fresher in it, if we can.
With Into the Breach, we knew quite early that we wanted to experiment with turn-based, grid-based gameplay.
I was playing a lot of Hoplite, which is what you see up on the screen there.
It's a brilliant, elegant, clean, roguelike experience on mobile that if you haven't played, you should.
Justin and I have always liked tactical turn-based games.
Things like Final Fantasy and Advance Wars are big touchstones, especially for Justin.
And we just thought it would be an interesting design space to explore.
We wanted to reduce random chance in the game, if we could.
Coming off of FTL, FTL was complimented and criticized for the high degrees of randomness in the game.
As a response to that, not so much to fix it, but as just a, what if we did something different?
We wanted to play with a game that would have fewer die rolls, fewer just random slot machine-ish mechanics.
Other than genre, a lot of the thematic trappings are quite important to us.
We approach games thinking, how do we want the player to feel?
What are the basic experience you're going to have?
And building the key game designs around that concept.
For End of the Breach, collateral damage was kind of that core beginning thing.
There were a lot of movies at the time that had a lot of damage and didn't really seem to care about it.
And we wanted to have that feeling that when you're committing to these massive explosions and massive damage, that you're also committing to whatever you're doing to the land around it.
And so the mechs versus monster theme kind of fell into that quite naturally.
Because when you have giant monsters and giant robots fighting, you're naturally going to have that collateral damage.
So we start out with a prototype.
I mean, and that last screen in the terms of the genre and the theme was basically all we have to go on when we start.
We don't really dig into huge design documents, as I had said earlier.
So we made something that is a relatively standard tactics formula.
It's not really shaking up the genre too much.
It's just playing within what people have already done before.
You can see that this here is a telegraphed attack, which we did have in the game from the beginning.
Though a lot of the other units did not have telegraphed attacks, they just did standard on their turn, they moved and hit you.
We were already playing with building damage in that we had this casual encounter, but it wasn't an end state or fail state.
It wasn't really anything that important.
It was just a score or something to remind the player that they're hurting people when they've been building free damage.
And we stuck with relatively familiar weapon designs, even from the prototype.
You could recognize here the laser beam weapon that does end up in the final game.
I find it shocking when I look at the prototype that there are ideas like that we stuck with, because it seems like at this point, hey, that's most of the game.
Why did this take five years?
But from this point and this kind of standard tactics point, we explored a bunch of different ideas before we ended up settling on that telegraphed attacks being the primary one.
One thing we played with was time in a turn-based game, so inserting real-time elements where the enemy would.
have a countdown and every time the timer reached zero, like corruption were spread.
Some kind of mechanic would increase their power.
And the obvious attempt at doing like a chess timer in a game like this that constantly created that pressure.
It wasn't bad, it just wasn't what we were going for.
We wanted to make a turn-based game and have that kind of really careful, calculated play and really weighing your decisions.
And that ran contrary to that.
We played a lot with turn order.
Not just turn order in terms of how and when people acted, but also what you acted and how you acted on your turn.
The traditional tactics game usually runs with you move and you attack, and that's what a unit gets to do.
And so we had a lot of stuff.
If you can see it with this, is what we're talking about.
And this is a functioning prototype.
A lot of these were functioning games.
We spent a year doing functioning games like this that we would throw out because we didn't like.
So here you can see that it's a strange concept where you can reposition or move your entire squad for an action point.
You could attack with your mech for an action point.
Or you could move some tanks and attack with them for an action point.
Even explaining it is hard, and that's a really good example of why it was terrible.
And on top of that, we had this complex timeline system where, like, when enemies would act and when players would act and you get a free movement, it's a mess.
It didn't work.
And we added a timeline system where the more you acted, the further back your units would go on the timeline.
So if you shot and you moved, then you'd end up at the bottom of the timeline, you wouldn't get to act again for a long time.
Or if you just moved, then you'd probably get to act quite quickly.
The ultimate result of that wasn't that interesting.
It was still essentially you had to move and shoot because in order to shoot, you're gonna have to position.
And so mostly you moved the same amount down the timeline and it ended up with just a term-based system wrapped up in a really complicated veneer.
And that was something that we run into a lot when it comes to experimenting with these designs is you get a lot of really complex rules but not particularly interesting or deep rules.
It goes back to that, wait, am I doing anything interesting here?
Am I creating interesting choices or am I just making systems for the sake of it?
And that's what most of this stuff was.
But the fun part about doing this and the, quote, wasted time on these prototypes within the genre was that we kind of get to prove to ourselves why the genre standards exist.
There's a lot of times that you might want to put money into a game, put turn-based systems into a game.
You just throw stuff into a game because we've all been doing it.
And we love the games that do it.
And so we're pretty sure we want it in our game, too.
But when you experiment with changing them, you get to learn.
why they're there, you get a better understanding for why they work, you get a better understanding for how we can change them, how we can turn them on their side and do more interesting things with them.
So from this point, we focused on the...
telegraphed attacks. And by telegraphed attacks, I mean that all enemy attacks are shown, that there's no mischance, and there's no hit chance, so those telegraphed attacks are reliable.
The information is always going to be accurate. And the end result, hopefully, was that the player turn was completely deterministic.
There would have to be a random chance in the sense that when an enemy acts, it randomly chooses its position and its target.
But the hope that we had was once the player was doing their thing, they could completely rely on the information and what their units can do to come up with a solution and enact that solution reliably.
And so from there, the question is, how does that guide the design?
So if we're gonna run with this concept of telegraphed attacks, it's going to, and we did not realize it actually at the time, end up shaping the entire game from that point.
We thought it would be maybe a minor shift in the system, but it kind of breaks every other tactics game system that we were used to.
And we had to find, through mostly trial and error, how it broke all those systems.
And so I'm gonna run down kind of some of the more interesting and the major points on how it changed the combat from that point.
First, as a generality, if you look at a tactics game, a lot of it deals with managing threat.
You have these attack zones that the enemy has and that the player units have, and it's about staying out of their attack zones and putting them in your attack zones.
They tend to be, in this shot from Advance Wars, quite large, that you're not going to actually be able to avoid all of the threat, that you're going to end up having to deal with.
Hiding in trees for cover to reduce damage, dealing with random dice rolls that varies the damage, a lot of ways for that threat to get mitigated in some way.
XCOM uses cover, very large and big threat zones, but a robust cover system to reduce the chance of getting hit.
Telegraphed attacks kind of change all of that, because a telegraph system means that that threat zone shrinks to something incredibly small.
It becomes trivial to move a mech out of the way.
managing the threat no longer becomes part of the game.
And since 90% of a tactics game is about managing the threat, then that kind of breaks the game.
And so you kind of, you could give up at that point, and I think there were times that we did because we didn't see immediate solutions, but you can kind of dig it down and see how can you make sure that can still be functioning threat in a game with telegraphed attacks.
The solution that, if you've played the game, you know what you've ended up on, is that the buildings are where the primary problem lies, and that the enemies have to destroy the buildings to win, and the buildings, if they get destroyed, is how you lose.
In hindsight, that seems ridiculously obvious, because buildings can't run away, so just target the buildings.
It seems extra obvious because we wanted to target buildings anyway.
We wanted that to be part of the game, so it seems like it should have just slid into that point.
But it's another good example of how we get stuck in genre and expectations for how game design works, and that we still wanted the mechs to be the primary...
um, thing in the game to be the thing you wanted to protect.
It's so natural, even now when you watch players play the game, it's so natural to see the, um...
you want to defend your units.
The whole every other game before is don't let your units get hurt and kill the enemy units.
Well, this needed us to be, no, no, your units aren't that important, it's the buildings that are important.
But to start with, we did these designs where if the buildings got damaged, it would reduce the shield and then your mechs would be vulnerable.
And so then the day of the game would still get pushed back to the mechs being the meaningful element in the game.
But that never really worked.
It always fell apart for the same reason in that once you hit that point, it was trivial again.
It was only interesting when you were worrying about the buildings getting damaged.
So you follow the design down from telegraphed attacks, you end up with this defensive gameplay.
This defending these immovable objects, which again has these knock-on effects in strange ways for how that affects what I'm going to go into here, which is the fail state and the win state.
From the win state point of view.
we saw quite quickly that killing enemies just fundamentally wasn't as fun as manipulating them.
When you have a system with these telegraphed attacks, it's really satisfying to move their telegraphed attacks.
The teleport spells and the grappling, teleport skills and the grappling weapons and all the various ways you can push the enemies were so much more fun and they made the player feel really smart when they're engaging in that.
And so, instead of running with the traditional just kill all the enemies, we wanted a way that we could enhance that that nice part of the game that worked better than others.
We arrived at the turn limit concept, where it was just X turns until the battle ended.
It's quite simple.
We've all done it in a thousand different ways in terms of defend the hack of 20 minutes or defend this zone.
It's the defensive gameplay kind of lends itself to that concept.
It can be miserable if it's done and quite frustrating, so we wanted to try to avoid that if we could.
But the immediate initial end result was great in that we could make interesting non-lethal weapons.
If it no longer became kill the enemy, it just became survive a couple turns, then you could do anything you wanted with the enemy and have lots of fun with it, and it didn't matter if anybody died.
The bonus benefits is the streamlining came in naturally.
A lot of turn-based games can have dead turns or dead space, like when you're chasing down the final enemies or when you're just finding the enemies to begin with.
While with a limited turn count, we found that we could really tighten it up to be impactful in every turn.
That there was always interesting decisions to be made.
You never really had to burn time just looking for things.
And then as a result, we discovered that micro battles were quite fun.
The end battle length for End of the Breach is only four or five turns per battle.
That was not something we set out to do.
If you told me, make a game with four turn battles, I would say that sounds really hard, and I have no idea how to do that.
But with...
the telegraphed attacks and just kind of following it naturally, we discovered that four turn battles was really fun.
And it was a cool thing that I, I mean, I'm sure it exists elsewhere, but I couldn't think of an immediate example for it.
And so it was a cool thing to just stumble across ourselves.
Other than the win state, to go back to the fail state, I've already covered that the mechs getting killed couldn't really be the fail state.
And so naturally it fell on the building damage being the fail state.
The trouble with that is that you can't say, because 10 buildings fell down, the whole world is lost.
From a thematic point of view, that just sounds ridiculous.
And so the big challenge comes, and this comes up a lot for us, in how do you thematically wrap that game design?
We follow the constraints until we get to a design that we think is the clear solution.
And since it's the most important thing, the gameplay design is the most important thing to us, we need to then come up retroactively with something to explain why.
We explored a lot of stuff that's very traditional like morale and panic or energy levels None of them felt great.
Even the last one that we ended up with, I still don't think feels great.
I think it's the least bad option.
The narrative explanation of the buildings are powering the mechs, and if the buildings get destroyed, your mechs don't work anymore.
It functions, I don't even think we really explain it very well in the game.
We mostly run with the idea of, oh look, the player sees this as power grid, that sounds important.
And it works.
It's not brilliant, you wouldn't write a book about it or a movie about it, but it functions enough that you can ignore it for the purpose of the game design function.
Following that further, that end state creates another problem, in that you have these checkmate scenarios, where the enemy is attacking too many buildings that you can't stop.
This example here, these two buildings are gonna get killed, and that one mech can't do anything about it.
So you know you've lost.
In chess, that would just be checkmate and you'd stop playing.
It would be very frustrating to throw up the enemy Vex saying, checkmate, you've lost.
That's not how you want a big epic battle to win.
You want something a lot more thematic than that.
But having the player play out a dead turn and then hit end turn, which might as well be a I lose button, is really mean.
And that's a really unsatisfying way to lose the game as well.
And so we had to do something strange in hindsight of inserting randomness into an otherwise deterministic design.
So we followed this design down that was guided by deterministic design, but the kind of, one of the final key solutions was, oh wait, we need a mischance.
We need this random chance to still be in the game.
This way when the player hits and turn, there's this grid defense that's a very low percentage chance that whenever the building gets damaged, they won't actually get hurt.
And so there's always a chance, no matter how dire the situation is, the player can cross their fingers and hit enter and maybe keep playing.
And that was an incredibly important part of the game.
We like to build out systems that are interconnected, we don't like to just have them hanging there.
So we built a lot of things like pilot skills to increase grid defense, or ways to overpower the grid defense, and built a lot of structure around it.
But ultimately, I feel like that's if you're building like a building and you need this gross, ugly pillar in the middle of the room to keep your ceiling up, and then you hang some pictures on it so it's not that bad, it doesn't help.
And ultimately, we just kind of annoyed players.
They really hated the pilot good defense skill.
It had to be very low because we couldn't have them relying on it.
And it was just kind of drawing attention to an otherwise just necessary, but not super great mechanic.
In hindsight, I probably would make it almost hidden, something you wouldn't manipulate, something that just always had a chance to do, but you don't talk too much about the player, just they know it exists.
So, telegraphed attacks led to the defensive gameplay, which leads down to the turn timer win state and the power grid fail state and all the stuff that kind of spun out from that.
But I'm gonna sidestep and talk a little bit about the UI challenges that came along with the rest of it.
A lot of this is going to focus on UI guided design, because you'll see that it's amazing how much the UI ended up influencing the design instead of the other way around.
We found that we were going for a chess-like interface.
With chess, you're looking at that board, you know, assuming you've played chess, how the game works, you know what the pieces are, you know who can attack who, where the threat lies.
You don't need to mouse over the pawn to double check what it does.
We wanted to have a feeling like that with Into the Breach.
We wanted you to see each puzzle and have it act like a little micro chess puzzle that you could plan out your moves without double-checking everything on the board.
The early iterations of that didn't have that.
It was a mess.
Even looking at this screen now myself, I don't really know what's attacking what.
This is an example of the game today without the icons that we ended up adding.
And it spent years to add the icons and figure out which ones we needed.
Some of them were added as late as just like three months before release.
It was a case of they look so painfully obvious in hindsight, but it was putting it in front of play testers, have them be confused, get it back, put it in front of play testers, have them be confused, put it back.
And it's just ad nauseum for years to sort it out.
These are the ones we ended up running with.
They're highlighted in yellow to make it a little bit clearer.
And the initial goal with these was just to show what was attacking what.
So you could see that this guy quickly was attacking this, and this guy quickly was attacking this.
We thought that was all that really mattered, is that the target for each enemy was what you needed to show.
But we learned from iteration and experimenting more, was that the attack type was also important to show.
that it was really meaningful if this Firefly unit was punching this mech, or if that unit was shooting this mech, because when you move him, it's going to dramatically affect the end result if this unit will punch this space, or if he will shoot this space and damage the building.
Having the UI need to show both target and type hugely constrained the possibilities, because you've just made it exponentially more difficult to show the information you need.
And so that's what really ended up saying we had to go back and instead of building a UI that could describe all of our weapons, we had to start building weapons that could be described by the UI.
The new constraints that we started with were just three attack types, so the same ones you saw in the last one, in that there are artillery attacks, melee attacks, and projectile attacks.
They provided enough variety to have interesting ways to interact with them, but were also restrained enough that you could quickly recognize them.
They exist in other games, they're not doing anything that crazy.
We did not originally have particularly limited attack zones.
You had this situation where you have no idea what this is doing, where this is coming from.
It is these units here, but there's no way of knowing that.
Their threat range, I think, was the traditional radius around an artillery unit, which was hard to predict and see on the screen.
We also experimented even with player weapons, these strange attack ranges.
You can see this is almost like a four-leaf clover.
And the hope was that you would have almost like a Tetris-like game where you could layer these shapes and kind of figure out the optimal placement against the enemy shapes in a very traditional tactics method of managing those threat zones.
But it meant always checking threat ranges.
every time you moved your unit, you weren't sure where that unit was going to be able to attack.
It meant looking at an enemy unit, you couldn't tell which enemy was attacking where.
And so we shred all that down to just being orthogonal attacks, just shooting up, down, left, or right.
This had the benefit of, for player attacks, as long as you can move to the space, and if you knew what places you could move to, then you knew where you could shoot, because it was very easy to tell you could shoot up, down, left, or right from where your destination.
and similarly all of the enemies lined up with their attacks so it made it much easier at a glance to see what enemy it was attacking where.
And the last major constraint, though there were many, many more, was these static enemy designs.
This is kind of running with the almost chess-like interface in that once the player has learned the units, the units are reliably the same.
A Firefly unit is always a Firefly unit.
It has the same health, the same weapon, and the same movement.
That created a huge design challenge later on when we started worrying about difficulty and balance.
When it comes to balancing the difficulty, it's super helpful if we could have made micro-changes.
If we could have said, this one extra unit does one extra point of damage, and that way it could...
Shift the game slightly without breaking it because end of the breach really runs into a problem that if it's slightly harder It can be nearly insolvable But since we needed everything to be static we didn't have that option We did run with this concept of purple units which are significant power upgrades to the existing ones They have they across the board more health more damage and more movement, but it consistently so and they behave very similarly So this firefly unit still shoots out a projectile just like this one We explored more changes to that, like the original design was this unit would also push its target.
while the basic version of it did not.
But that shift was really hard to remember and keep track of.
You thought you had the Firefly down, you understood how to stop a Firefly unit, and then when they get upgraded, suddenly blocking a pushing attack is hugely different than blocking a static attack, because it might push your mech into a building.
And that kind of swap to how you deal with the units was too difficult, so we had to cut that.
It had...
a very strange knock on effect that you'll notice that there's very few game um... enemies in the game with push attacks uh... there's only I think just the beetle, maybe one other.
And it was kind of a direct result of this, in that we didn't want push attacks on the early units, because we wanted the game to be more accessible and functional on those early islands and easier, and push attacks made it really complex.
But then we couldn't change those units in the later portions, because we had to keep that static enemy design.
And so by accident we ended up with that mechanic almost being cut from the game and we didn't really even realize that until quite late in the process that that's what had happened which is kind of sad but it was worth it in the sense of that consistency of gameplay really made the enemies manageable.
You can see all these combined resulted in massive cuts to weapon design.
Justin had made these amazing upgrade trees where this is a unit that never actually existed in the final version, but the huge spread of how weapons might change and get managed and the shapes they might make, and when we actually realized all these UI constraints, we had to ditch all of this stuff.
which was a shame, but it was for the best and that tighter, more elegant weapon design really benefited all the other constraints that were in the game.
So you can see how we're growing this web off of telegraphed attacks.
And while it's also influenced by a lot of those core personal constraints that we had that I talked about at the beginning, it is ultimately back to following telegraphed attacks that got us to everywhere that we were.
And this was a multi-year process, taking all the way up to the end of development in terms of sorting this stuff out.
I wish it was as easy as just, oh, there's obvious solutions once you pay attention to this, but for us it wasn't quite that simple.
And as a better example of how it wasn't quite that simple, I'm going to move and talk about the strategy layer design.
which is a big shift away from the combat for a minute, as I've been rambling quite a lot about the combat here.
And for the strategy design, what I mean by that, because you'd think the whole game is strategy, so what am I talking about?
This, all the stuff that happens in between the combat.
The, that big XCOM map that.
you're used to seeing that gives you an excuse to tie the missions together and has lots of other stuff on top of that.
We love Dexcom and love the games of its ilk and we wanted to have that mechanic in the game.
We wanted to have you care about your pilots and manage squads and repair them and juggle resources and deal with the upgrade trees and research and all that stuff, because all that stuff is super duper fun and we thought of course we'd want this.
It's worth noting that we were simultaneously designing the strategy layer and the combat.
In the way this talk is structured, it might seem like we're like, oh great, combat's complete, let's figure out the rest of the game.
But it was a lot more in parallel to that.
And so a lot of the constraints weren't quite figured out, and we probably, and we suffered a lot more on the strategy side for that reason.
We started with a very large scale world with lots of nodes and you'd have your little mech squads, multiple squads that you were managing, running around the world and chasing down enemy units.
It was very board gaming, it was very abstract.
We even had a card system where you draw cards to get events and insert technology into it.
A lot of deck building games were all the rage and so we were trying to put that into the game.
Or you can see here that this is a corruption mechanic.
that the enemy could explode into neighboring territories.
That was me playing far too much Pandemic during development.
I fall into that all the time of, wait, what did I enjoy yesterday?
Okay, I'm going to put this in the game.
It was dull to chase the enemies around.
Chasing squads and pawns on the board just wasn't fun.
You didn't actually care about these abstract nodes.
It didn't satisfy what we're looking for at all.
And ultimately, and this wasn't necessarily negative inherently, it was going to be a huge game.
This had to end up feeling very exclamative in that it was going to take you 20 hours to do.
We could tell ahead of time that that's where the design constraints would lead us.
And that wasn't really what we were looking to make.
Despite spending, I don't remember exactly how long, but probably six months at least, maybe a year, we cut all of this and tried something else.
We went for something smaller, something that you could maybe care about where you'd have these four different maps that you kept returning to.
And you'd be repairing the buildings, and managing, and kind of learning to love your little home here.
The end result wasn't great as well.
Oh, it's worth noting as well that there are two games here.
It looks like one in the sense that we've got these four squires, but this side has a lot more of this energy management where you're upgrading squads and repairing squads and having a research tree.
and it's a lot more juggly with the resources, while this side ends up a lot more XCOM-y with events that come up in certain time scales with the whole time system, and you have your units in and out of battle, but it's just the core units with a few extras, and big text events, kind of like FTL.
Ultimately both of these were very complex but not very deep.
It goes back to the, I'm building out this huge system, but I'm gonna stop and say I'm actually making interesting decisions in this huge system.
The research system was completely failing.
It was failing for the reasons that I've talked about and that the weapon design really couldn't support that research system, but we didn't know that at the time.
We were blindly charging ahead because we thought we liked upgrade systems.
These suffered, as did the other one, as do most strategy layers, from ambiguous fail state.
It's not necessarily a problem. A lot of games do have it and it functions.
Civilization, I think, has quite an ambiguous fail state in that you don't, or I don't, normally play all the way up until I've lost my last city.
Like, I see the writing on the wall and I say, oh, I'm just going to scrap this and go and start a new game.
And we would rather that the player...
played all the way up to the end.
That they always thought they had a chance and that it was really clear, like a health bar, which is what we ran with, that can show you where your fail state lies and what's gonna happen.
And text events didn't work in this game.
I think this is more our narrative failings as writers than it is that the inherent mechanics didn't work.
Since Justin and I work in isolation to prototype this stuff, we didn't work yet with Chris Avalone, who did the brilliant writing in the game at the end.
and we had a lot of troubles writing text events for this game.
FTL was so easy to build out a world that you go to new systems and meet aliens and there's politics and you talk to people and there's pirates and space stations and just an incredible diverse set of crap to pull from.
Well, this was a single city with a couple mechs, enemies that you couldn't talk to because they're just mindless beasts.
And the narrative potential for us as amateur writers was not there and so we really couldn't make anything interesting out of it.
And so at this point, we're years into development, and we're incredibly despondent and frustrated that none of this is working, that we honestly don't think that there's going to be a game here.
As we're developing this in simultaneous with the combat, even the combat, while it was looking interesting, it looked like it had more potential, it wasn't great, and the strategy layer was terrible.
And so that's really between the two, you weren't looking at a great game.
And so we really did consider quitting and dropping it and starting something new multiple times in development.
We took breaks to make other prototypes just to kind of get away from it and clear our brains because it was miserable.
In hindsight, I think that all of the strategy layer stuff was failing because we were ignoring the constraints that were imposed by the combat.
I've introduced most of them already, and that the telegraphed attacks with the limited weapon types meant that you couldn't really upgrade anything.
All those awesome research trees couldn't be a part of the game, and that was an inherent part of the combat that we were refusing to acknowledge because we desperately wanted upgrade trees to be in the game.
That building defense focus meant that units were not as important anymore.
And so building out the squads and carrying, and while we did have that pilot system in the final version, we wanted it to be a lot more complex and having to devote resources to repairing mechs and devote time to repairing mechs, but that and making you care about the buildings more didn't match and we didn't really acknowledge that in these early versions either.
So instead of actually completely giving up on the game, we completely gave up on the Stratula.
And we moved on to this version, which was fundamentally cut everything except for what would tie missions together.
So you just would pick from a list of missions.
And that was the whole strategy layer.
You had, we just wanted you basically to go from a complex system with tons of choices to a very simple system with one choice.
And that one choice would have clear rewards and you would make one interesting choice and then start your next battle.
And that could work.
And the amazing part was it did work.
The combat at this point was functioning enough that this could sustain the game in a way that all the other strategy layers weren't sustaining it.
So.
It was fun for the first time.
We sent it to people and they're like, oh, this is interesting.
This actually, maybe you have another fun game here.
And this was years down the line.
We haven't told anyone we're making it and we still weren't gonna rush out and tell anyone publicly we were making it.
But it was really encouraging to finally have this.
It wasn't what we were necessarily looking to make.
It wasn't what we set out to make.
But it was an acceptance, again, of that least bad option.
The acceptance that...
this is what benefits the design, and it also put us back into a position that Justin and I were most comfortable.
As I had said at the beginning, we're terrible at that huge, big picture design.
Those huge strategy layers, you had to kind of build all the pieces at the same time, put them all at the game at the same time, and hope it worked.
This meant something incredibly small that we could then add on top of, that we could iterate on and add small pieces and kind of figure it out as we went, which we were much better at doing.
And so from there, we could build it up into something you'd recognize today.
The first thing that we wanted to do was to keep that map visual.
I think having an actual physical place is very important.
It helps you kind of survive in the world and exist in the world and care about the people you're trying to help.
And so we quickly put a map back in the game.
Though it is ultimately just a thin veneer for a mission list, you can like on the final version or close to the final version, it's just three missions here that you could select from.
And that's no different than the list is just on a map now instead of on a list.
We wanted to make sure we could keep the choices interesting, because as I had said, we basically wanted to cut the game down to just that one interesting choice between missions.
And so the question became, how do you make that one choice interesting?
We experimented a lot with different rewards.
We had this asset system, which both of these versions of the game had, where battles would give you these buildings, and those buildings would affect the combat in different ways.
like increasing your mech health, increasing your reactor cores, that sort of thing.
It didn't work for a number of reasons, one of which was it was really hard to balance to make it so one of them wasn't the obvious choice.
We hate it when you're presented with three things and one of them is 10 times better than the rest and so you just always pick that because that's not an interesting choice.
and creating assets that would blend with the combat, which at this point we understood was very tightly balanced and couldn't really take a lot of poking before it fell over and that's what these assets did.
These building effects would just topple the game if you poked it too much.
We also needed to worry about how to pace the game, which is an excellent place to find ourselves because that meant we were finally thinking, oh wait, this is a functioning game, how can we flesh it out, how long is it going to be?
and we need to worry about how hard to make the game.
Same idea.
So this stuff kind of lays down to our final touches.
And I'm going to talk a little bit about these final touches in the last couple slides here before closing out the talk.
The resource design...
was we moved it down to something very simplistic.
That those early assets were so complex that we needed something that you could more quickly get a grasp on.
So we moved it down to just three resources.
Just your power, your upgrade cores, and basically money.
the difficulty could be shown by the resource count.
So just three resources would mean hard and one resource would mean easy.
And the map design gave you an option to plan ahead.
And all this together combined into that brilliant single screen UI that we would love to chase down, that we love to get into the game.
It kind of mirrors the combat in that sense that you can, without checking tool tips or whatever reward does, you can see instantly what your choices are.
and you can make a reasonably informed decision taking into account what you need right now and what you need in the future.
It's not complicated, it's not fancy, but it's totally functional, which is all we really needed from the strategy layer at this point.
From a game length perspective, like we did with FTL, our approach tends to be just where is the upgrade curve gonna lead us, how quickly do we wanna dole out upgrades, and what is the final point we want you to get to with upgrades.
But with End of the Breach, we found that there were multiple options, and Justin and I didn't really necessarily agree on which one was the best option.
I liked the two island game length.
It meant that mechs were going to be upgraded.
A little bit, you'd get one or two secondary weapons.
You weren't gonna be able to cap out your upgrades.
You're gonna play the game in just like an hour, hour and a half, so it was a lot more of a single sitting game.
And I really enjoyed that tighter, smaller experience.
Justin really enjoyed the four island, more epic experience, where every mech gets a secondary weapon, which ups the complexity a ton when you have a lot more options per turn of what you could do.
and it really adds a lot of overhead to the game, which is cool.
Justin loves it, I'm sure a lot of players love it as well, but it wasn't necessarily what I was going for.
And so with the sense that we didn't really have a constraint where it led us to a specific answer, we tried something weird, which was to do this dynamic difficulty length.
dynamic, not difficult to length, but length of the game.
So the idea being that once you finish two islands, you could choose to end the game at any point.
Justin and I intended this decision to be purely player choice.
It was supposed to be, oh crap, I've gotta go eat dinner, I'm gonna end the game.
Or oh, I'm bored of this, I'm not having a super lot of fun, so I'm gonna end the game.
Or wow, I love this squad, my weapons are so much fun, I never want this to end, so I'm gonna do four islands.
But when you bury that choice in the middle of a strategy game like this, it gets obfuscated and the player doesn't expect it to be just a personal choice.
I see a lot on the forums, on the subreddit and stuff, of people talking about when's the ideal time to end the game?
When should you attack the boss?
When is it harder?
When is it easier?
Where's the strategy to this decision?
Because every other decision involves strategy.
But since we scale the boss to always be the same difficulty regardless of when you end the game, that was never part of it.
So it just ended up kind of confusing a lot of people.
For some people, they really enjoyed it, but there was enough confusion and enough...
Oddity to the design that I'm not 100% sure I would chase it down again as a great way to do it But it was a fun experiment and it was something that Was cool to put in the game When it comes to difficulty, I could probably ramble for like a half hour about Into the Breach difficulty, probably longer, but I don't have a ton of time, so I kind of have to condense this down into what I think the most interesting parts about it are.
Inherently, Into the Breach is a strategy game, or a puzzle game, that's masquerading as a strategy game.
it creates these little micro puzzles that you have to solve and the result of that is that too hard becomes unsolvable instead of just hard.
You end up with a situation that as soon as you have six monsters attacking six locations and you've only got three mechs, then it's not that it's hard, it's that you just can't stop that.
And if every turn that was happening you're not feeling like it's hard, you're just feeling like this game is unfair.
and it doesn't really leave a lot of wiggle room for what you can do.
And it really was a threshold that was just very tight that as soon as we spawned one too many enemy, the whole game broke.
And so we really had to build up a lot of.
to balance designs around that, on how we spawned enemies and how we designed maps, to try to reduce that and to make it as functional as it always could so the game would always be solvable.
And the difficulty ended up being very much constrained by the design.
We did not say, this is how hard we want Into the Breach to be.
Into the Breach said, this is how hard I can be.
And we found the limits on what we felt were the limits that the game could do in terms of pushing it to an upper limit of difficulty and finding a lower limit that still kept the game being interesting with interesting choices, even for lower skill levels.
On top of this, Difficulty Into the Breach was weird because Players disagreed hugely on if the game was hard or not.
We had early Steam reviews that were back to back, this game is way too hard, this game is way too easy.
It just clicked for people in a way that it didn't click for others.
When you're asking, it's like when we were doing the early play tests and people didn't wanna get their units hurt, they didn't wanna defend the buildings, they're so used to their units being the most important thing.
that a lot of the decisions we're asking players to make are not necessarily intuitive in what they're used to doing.
And maybe we did a bad job teaching that and explaining it ahead of time so they would be able to click with them faster.
But for some players it took a lot longer to click and so the game was a lot harder for them.
I think the end result for End of the Breach is a good chunk easier than FTL, but the really cool thing is that I think that it's still super fun.
And if you told me ten years ago that an easy game could be super fun, my naive early designer self would have said that's silly, I love hard games.
But I think the puzzle game design inherently benefits kind of easy play.
It's really satisfying to do a crossword puzzle or any sort of puzzle that you're good at and to find solutions and just kind of mellow out and solve the game and kind of just enjoy yourself in a way that you couldn't do with FTL and that I think FTL...
as a contrast, when it was too easy it was dull, because you didn't necessarily feel smart, you just felt like you were being pandered to, or you were not making interesting choices anymore.
And so it's just another great example for how these games define themselves more than it's anything that we're actually doing, and so it's a case that we need to chase that down.
So on a whole, had we been better at a lot of the ideas that I'm espousing here when it comes to following designs and letting the designs constrain the game, we probably wouldn't have taken four years to make this game.
I think that that was not an inherent necessity.
It was just us being naive in our approaches.
Some of the key things we could have done better is we could have been faster at cutting bad design and realizing faster that cutting design was really fun.
I love the feeling of getting rid of bad design now.
I love the freedom it gives you when you finally get rid of that horrible thing that you've been stressing about for the last year.
It's frustrating to lose a year of work, but it's so freeing to move on to the next thing and think maybe it'll be better this time.
We need to realize sooner that we're stuck in a genre.
It happened with the focusing on buildings instead of mechs.
It happened in the strategy layer constantly.
That we're saying, we want this in the game, we like this mechanic, so we're gonna keep it here, gosh darn it, and this is exactly what we need.
But the game was saying, no, no, no, that's terrible, this doesn't work.
And we weren't seeing that fast enough.
We needed to follow those natural design constraints.
We needed to see what the game was imposing on us instead of us trying to impose nonsense on the game.
and ultimately the importance of that there can be mediocre design in the game.
We went into The Breach with so much time and the luxury to really explore design after FTL that we were overly perfectionist in our approach, that we needed every mechanic and every element to be that perfectly balanced, elegant thing.
And that doesn't work, or from our experience, maybe better designers could do it.
But we found that, as I've covered a couple of them here, there are cases where the design leads to this ugly wart that sits on the side, and that's okay.
The strategy layer was not what we wanted to make.
I still don't think the strategy layer is brilliant.
but it does a completely sufficient job at tying together the combat, which is interesting.
And letting the combat thrive and find its place and really dominate the play experience is fine.
Letting the strategy large get out of its way, do the necessary job but mostly not annoy you, is all it needed to do. And that's what we ended up with.
Thank you very much for listening.
I hope some of it is helpful.
I know that not everyone has the same approach to things, but I think that our journey maybe could, I would hope, provide something useful to everyone.
If you have questions, you're good to go.
I've played about 80 hours of this game.
It's awesome.
Thank you.
I had to take it off my computer because I have to do work sometimes.
One question.
When you are at that last bar of grid power and you're about to lose the game, it does seem like the buildings resist a lot more than the alleged percentage.
It does not.
No.
It does not.
It does not.
No, we have personally, from a design point of view.
I don't like changing the game, I don't like doing those mechanics, I like a game to be a static experience.
A lot of the design inspiration for me comes from board games and the like, which are inherently very static experiences that don't accommodate to the player, and I like making design just from a personal standpoint of we don't accommodate to the player, we don't try to artificially create those exciting saves.
Not that there's anything wrong with that, it's just from our approach that's what we do.
The very few times we do anything...
that accommodates the player and into the breach is spawn mates and enemies.
If there are too few enemies, then we will bump the spawn, and if there are too many enemies we drop the spawn.
Because I talked about difficulty, it makes a huge difference to how functional the game is and how many enemies are on the board.
And so that's one of the only moments where we check the player progress or check the board state and change the game based on that.
So is that based on there are going to be a certain number of opponents throughout the thing, or is it...
It's per turn.
It's per turn.
Thank you.
Great talk, and amazing game.
Thank you.
So in the game, you have this chance where there's a debris that drops, and you have a random number of turns where you can come and go and pick it up.
What was the reason to add that feature in the game?
The time pod that shoots down, and you collect that?
Yes.
I'd have trouble remembering the exact set of things that led us there.
Part of it was thematic.
We liked this idea that we were running with this time travel mechanic where people were going back in time and you were doing this loop and all the pilots were supposed to be time travelers.
So we needed some way to thematically introduce time travelers into the game and it just felt really epic and cool to have this pod flying down and crashing into the earth.
And then on top of that, it fit the other constraints quite nicely in that it follows the core design of defend things.
It added something else to the board to defend.
And so it fit the mechanics along with the theme in a way that felt quite pleasant.
I think we had the time pod pretty early, and we liked it from the beginning, and it didn't really change all the way through.
Hi, thanks for the game, thanks for the talk.
Thank you.
So you mentioned that things like the grappling hook and the teleportation spell were very fun for players and make you feel smart and all that kind of stuff.
I'm wondering if you ever experimented with having the starting mechs be more like the steel Judoka?
where it's like their primary attack is more of a movement and enemy manipulation attack than being... because the initial set is more like direct damage and the enemy movement is kind of secondary.
I'm based on the early experiments the if anything that first starting squad was still too complex for a lot of players We especially the artillery weapon which would You need to shoot next to an enemy to push it instead of shoot at the enemy and all games have always trained us to shoot at the enemy.
And so putting people in front of that and saying, do something like indirect fire, do something like manipulating them, was a lot to ask.
And so we were focused more on how do we just introduce something like a push mechanic in a very natural way so they could get comfortable with it.
And even then, I'll see Steel Dukku have a huge, um, divide in how much players like it.
And there are players, perhaps if the game clicked more, that they really enjoy it, because they get to screw around with those mechanics more.
And then there are players that are like, how on earth do you do this?
And so it was important, especially for the starting squad, to have something that everybody could try.
That makes sense.
I love the steel jujitsu.
Thank you.
Thank you for the talk.
When you, early on, decided how to move your units, and you said you were inspired by Civ, did you consider Hexagon?
Oh, no.
We started with a grid from the very beginning, and genuinely my only reason for that was that the first prototype that you saw in the beginning was like a city, and the idea was that there were city blocks, and it was a grid-based system like a city, and that was where I was coming from when I put that together.
And I know that's an arbitrary thing, it's really silly, and I think once you started programming it, changing it to hex would have been a huge change that fundamentally changed all the design that we'd done up at that point.
And so even though we ran away from cities and ended up on larger fields, the grid, the square grid still felt more natural.
I think it's also great for the pushing mechanics, though, is that it's a lot more intuitive to push and be aligned on a grid system, but that's a happy accident, not like an intentional design.
Thank you for the talk and congratulations on winning last night.
Oh, thank you.
I was wondering if you could speak a bit about how the telegraph attacks influenced your enemy AI design and like how the AI behave.
The AI is very simple, where it's just every enemy acts entirely independently.
There's no planning between them to make sure they're covering a certain amount of buildings or units.
Every turn they just look at everywhere they can attack.
They take the best options and the second best options and they randomize between them.
And it's as simple as that.
And do you... what about the spawn points of the new enemies?
Completely randomized within a spawn zone.
Wow.
We always, I always, as a solo programmer, because the whole game was programmed by just myself, and a small design team, I always pick the absolute simplest implementation first.
So I do something just stupid simple to put it in the game.
And then if stupid simple works, I say great and move on.
So is it that you have a few different map types and you have spawn mapped out for them?
Yeah, all the maps are actually pre-made.
Yeah, it doesn't look like that, and a lot of players don't realize that because of the simplicity of making maps.
It takes two seconds to make them. I mean, not two seconds. Justin did most of the work, so for me it was super easy.
But they are all pre-made, and we have like 200 or something in the game.
And they had to be, it pre-made made it a lot easier because we could control stuff like, a bad map could really influence the difficulty in ways that were horrible.
And so we needed to control it tightly.
And again, it goes back to stupid simple and that it was easier to make the maps rather than me design some algorithm to generate the maps.
Thank you so much.
This will be the last question, but if you want to do more questions, I can go to the wrap-up room.
Is there a specific room I should go to?
Thank you.
Go for it.
Great game, great talk.
I'm curious about your process.
Like, you have multiple iterations of mechanics, multiple implementation.
So what, how do you get to the point where you suddenly realize it needs to change?
Is it playtesting? Is it, your mindset is self-critique?
How do you approach that?
It depends on the situation and there was a lot of play testing when it came to like Teaching the game and seeing what mechanics would work based on just raw usability A lot of the earlier decisions is just in my play testing a lot on our own It's one of the reasons we like procedural gameplay and that we can surprise ourselves and really test the game against ourselves quite easily And it there comes down to just a lot of intuition and we can tell this mechanics working this mechanic We try to balance against it and I'm sorry. I don't have a great answer for it, but But it's with a lot goes into it.
Yeah.
Thank you.
