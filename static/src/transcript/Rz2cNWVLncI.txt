Well, hello everyone.
So we are here to talk about Crowd.
This talk has been prepared by me and Antoine Fortier sitting right there.
So when you see us on the street, come and say hello.
So first, I'm gonna have to remind you to turn off your cell phones and then rate me after the show or not if you didn't like it.
All right, so let's get started.
So I don't know if you've played the game, but on Assassin's Unity, we have been able to build these truly huge massive crowds.
So in this scene, for example, we have 10,000 NPCs that the player can interact with them.
So how did we do it?
Well, I'm here to answer that.
But first, let's give a bit of backstory because everybody does it.
So if you remember the first AC1 E3 trailer, you can see Altaïr walking through a crowd trying to reach an execution. So it has really been in our mind since the beginning of the brand to have like these really really huge crowds that the player could actually be stealth in and we also thought that it would give a sense of life to our cities.
But we were limited. Actually our AIs were really costly and we could never have these big crowds.
The limits themselves.
was of 100 NPCs.
That's really small, and that's for all the possible NPCs spawned at one point.
This means that this accounts for guards, accounts for people imported for gameplay.
So if you want to have a budget for decorative civilians, you're left with about 20 NPCs.
Out of these 20 NPCs, You have to spread them across the whole loading range, which leaves about 4 around the player.
So that's obviously nowhere near a crowd.
We were able to build some crowds before, but in specific missions, where we have full control over the resources we have.
But we never could do systemic big crowds.
So, were we doomed? Well, no. In Assassin's Creed 3, we integrated technology from an old prototype and we were able to display thousands of 3D cheap mesh that could play simple animations.
We used it for the rats and the birds that you've seen in AC4 and AC3.
And the most memorable sequence is the Bunker Hill sequence of Assassin's Creed 3, where you see this army of thousands of people in front of the player.
There, in the Bunker Hill sequence, it's really only meshes playing a simple, like, get down, reload animation.
So there are no entities, like, over there.
And they are far away from the player.
The player cannot interact with them because they are only meshes.
So, is there a way to link the legacy AIs that we've had in our games and link them to the really cheap mesh that we've built on AC3 and 4?
Well, yes.
We created a new system.
We call it the Bulk System.
It's called the Bulk System because of the name of an old prototype, but we call it the Bulk System.
Each member inside the system is called a Bulk.
So when I talk about an individual, it's a Bulk.
So the main idea behind it all is that we have these thousands of really, really cheap mesh.
We have a pool of pre-spawned NPCs, and as the player gets close to the cheap mesh, we basically replace them with a guy from our pool. So it's really based on the distance.
We call it like an AI LOD system, and there are three possible states.
So I'll go over the states briefly. The closest one we have is the low-res bulk.
So this one is the furthest one. He's at 40 meters away.
He has no entity. So this guy is only a visual that can play animations and cheat animations.
So he has only 2000 polygons and he has only 11 bones. So his animation system is really, really small and runs fast. He also has a really basic reaction system.
Now, on the other side, so close to the player, you have the autonomous bulk.
This guy is mostly a real NPC.
So he has an entity with all the components that a regular entity has.
So he has Havoc, Klot, full AI, so he's like a real NPC.
But he is super costly.
So in our game, we can only have 40 of these autonomous bulk.
So the goal is to link them with the low res.
So we created an intermediary state, the puppet bulk state.
So this one is a bit of a mix and match between the two.
So he has an entity, but all the components are off.
He only has the visual components of this entity.
All the logic, havoc, and everything is off.
So he's running using the cheap animation system, cheap collision system, and cheap reaction system that the low res is doing.
So, if we see them next together, we see that on the left side, you have the low-res bulk.
So, here, the mesh is really, really ugly.
So, it looks like a guy from an N64 game.
And the animation, I mean, it doesn't look real.
It's bulky.
It's not — it doesn't feel right.
On the right side, you see the autonomous bulk.
And, I mean, the stance looks good.
You can actually see, like — facial expressions, but not on a still, but yeah, if you're up close you can see it.
So the stance is good, the mesh is really good also, and you can see the metal, the puppet bulk, as a bit of the two.
So he has the visual, but he has the stance of the low-res. So these are our three states.
Remember them well, because I will be referring to them throughout all the presentation.
So, basically the autonomous balks are up to 12 meters from the player, from 12 to 40 meters we have the puppets, and then all the way back there you have the low-res balk at 40 meters.
So, a bit on the cost, to explain why we use this approach.
The cost for a low-res is actually 25 microseconds.
So they are super, super fast.
The Puppet one is 150 microseconds.
It's mostly taken to account by the higher resolution mesh that needs to be computing, so that's why it's a bit heavier.
And finally, the autonomous.
So this guy can go from .5 milliseconds to 5 milliseconds if he's doing complex reactions.
So that's like the idea behind this whole system is to limit the amount of autonomous because the difference in the CPU is 100 to 1 between the low res and the autonomous.
And to render all the similar meshes of the low res, we use hardware instancing.
All right, so a bit on the differences between the two because they're really, really different.
like how we think about them. So a real NPC, the autonomous bulk, has infinite permutation.
This means that when we spawn one of these guys, he can be of any different, he has, he can have any different face, he can have hair, beard. So every time we spawn one of those guys, they are completely random using our random system from Assassin's Creed.
The low res though, the low res have really specific meshes.
This is done to optimize everything, so they have really a fixed number of meshes.
And this goes fast.
So we only have 29.
And for example, if you have a poor male civilian, rich male civilian, female poor civilian, so I mean, you cannot go up to 29 really quickly, so we don't have lots of variety of low res.
That's really important to know.
But they are far away from the player, so it doesn't really matter.
Now the difference in polygons, the closest LOD of a real NPC is 20,000 polygons, and on the other side you have about 2,000.
So I mean obviously it's a lot faster to render the cheap ones.
Now on the animation side, you have 300 bones for the real NPC, so they can do full complex animations.
But with 11 bones, the low-res cannot do much, and that's why they usually have their hands spread open, because you don't have bones for the hands themselves.
Now, the low-res bulk of a specific system, basically we limit the total polygons for the low-res.
This means that if you have many, many, many low-res in front of the camera, we'll actually limit the amount of polygons to 300,000.
This means that if there are many, many low-res, we basically tone down the LODs of everyone to make sure we fit in our budget.
So this is how, even if we have 10,000 guys, we still have the same cost.
Alright, so how do we recycle those polygons?
How can we make it fast?
We basically have a culling system, so that we basically only...
So we only display the box in front of the camera.
This means that if I look at a top view of when the player is turning, no box behind him.
This saves us some polygons, obviously.
And when they are not drowned, they actually compute reactions, but no animations.
And obviously, they are not displayed, so they go pretty fast.
So I'm coming back to this slide now.
You remember the autonomous and the puppets?
They actually only live inside a cone in front of the camera because as we turn around we basically move them to the low res so that they are cheaper to compute all their logic and we do not display them anymore. So we only have the autonomous and puppet box in front of the camera.
All right, so the cheap animation system.
So it's really, really stuff from the 90s.
So it's super fast.
It can support like two blending animations.
We play uncompressed animation.
So everything goes really, really fast.
We basically scale animation depending on the scale of the model.
And the main thing about them is that they have stiff ends.
That's like the giveaway.
If you see stiff ends, it's always either a puppet bulk or a low-res bulk.
So here in this animation, you can see them that they, They have these big spread open hands, and the hands are not correctly on the arms of the chair because we have only 11 bones, so the calculation did not give the correct results.
But this is from far away, so the player does not see that ever.
And we also built our own collision system.
Obviously, we cannot have 10,000 NPCs running Avok.
Avok would cry.
So we created our system.
We basically have a partition map where we have the location of every NPC.
on the world, and then for each bulk, we detect if he's ever inside the range of another NPC.
And if that's the case, then we play a simple animation and we slide him.
So it slides, so it's not like a real physical collision.
And then we always clamp them on navmesh.
That's super important.
This means that if they start running, since they have no capsules, they could have entered a building or anything.
But by keeping them on navmesh, we make sure that they are always, at least, not inside a collision.
and it also enables them to walk indoors.
All right, so let's take a look at this collision system.
So here you can see guards walking to the crowd.
So again, when there is a collision, we do basic sliding.
It's not perfect.
It has interpenetration.
But again, all this occurs far from the player, so from a distance, it actually looks pretty good.
All right, so a bit on the AI now.
The legacy AI uses big state charts.
It's super complex.
It can handle every event, every reaction, lots of randomness.
And it's all event-based, and it's super, super slow.
It's actually mostly running in single threads.
So, I mean, obviously, as it scales up, it's costlier and costlier.
So we had to build our own reaction system.
So we basically created really, really small scripts.
So these scripts are simple, like go to, stand still, animation.
And by linking them together, we can try to recreate more complex reactions.
We always try to follow what the real NPC would do, but it's not as good, obviously.
So I'll take, for example, the smoke bomb reaction.
So when a smoke bomb explodes, you see the NPCs in the smoke moving their arms, trying to navigate out of the smoke.
Now, let's take a look at the low-res version of that.
Basically, they start reacting, so they stand still, play animation, as the animation finishes, they turn around and then move away.
So you kind of see a glitch, you kind of see that it's not perfect, it's not super seamless, but I mean, when the density is right, this one I cranked it up to the max, it looks good.
So this is the real reaction, so you see now they have hands and everything, so this one is obviously fully realized, and this is the one that occurs close to the player.
So we can get away with cheaper reactions if they always happen far from the player.
All right, so where do the Bulks live?
Because I mentioned earlier that the Lores don't have an entity, so we need to have them somewhere.
So we basically created Shepherds.
Shepherds are really like containers, holders.
So the Bulks themselves, we never spawn them, but we spawn Shepherds.
Shepherds will contain all the AI.
It's them that run the logic script I talked about.
They will push the animation on each individual.
So they are the one controlling the Bulks.
So, uh...
each bulk inside a shepherd has a unique ID.
So it can actually be referenced from inside the code, but usually we work the shepherds themselves.
So we don't spawn bulks, we spawn shepherds.
And when a shepherd spawns, it allocates the memory for all its members.
So, I mean, the spawning is really fast.
And when, for example, the shepherd spawns, you can see thousands of people appearing in one frame.
So typically in Paris we have 2,000 bolts and counting all the shepherds it's about 30 megabytes.
So it's really, really cheap.
And all the shepherds are placed by level designers.
So this is how the level designers can actually interact with our system.
They place shepherds and it creates a bunch of people.
So every time a level designer places a shepherd, they can select a count and a density.
When they do, we basically randomly generate the positions to fill.
They can actually and manually edit the position of each bulk, but I mean doing so obviously takes a long time, but they can do it if they want to.
We also give tools to script shepherds.
So for example, the mission designer could have all the members of a shepherd start rioting, or they can have all the members flee.
So the mission designers can play with the shepherds, they can never play with the individual.
We didn't give this power.
So for a scene in a mission, for example, you can see that the mission designer placed lots and lots of shepherds.
On the left, for example, you can actually see them like separated, they are like these big squares of people.
On the right, you can see that the density of some shepherd change.
So it's really end place by level designers.
So to see a bit how it looks, on the left, you can see a shepherd.
But on the right, you can see that you can actually go and manually exit all the position of the bulk inside the shepherd.
And the cool thing is that when we save a Shepard, we save all the positions.
And every time a Shepard spawns, all the members are at the same position.
And this is the basis of all our networking.
So when two clients spawn a Shepard, all the members will have the same position and will have the same ID.
So our system is deterministic.
Now, we only have like, I talked about static people, but it would suck to have a city full of static people.
So we need wandering people.
So we created something different for the wandering people.
We have a unique shepherd that we call the wandering shepherd.
And basically what we do is we randomly generate closed paths so that the bulks can walk around these paths, always staying in the map.
And the way we create our determinism is that for a fixed time, we know the position of every bulk on each path.
This means that if you're over the network and you sync the net time, which is easy to do, then you sync the position of every bulk using this system.
So this is, again, how we do our replication for this system.
Also, every path is generated in a region of Paris, and depending on the region, you'll have different models on those paths.
All right, so this is what the paths look like.
So it's a bunch of lines where the bulk walk around in a circle.
This is done in a test map, but in Paris, those paths are super huge, and you don't really see, you cannot, like, see a loop unless you play, like, 20 minutes following a guy.
So I talked about the Lures.
Now I'm going to transition to, like, how do they link with the real NPCs?
So the link comes from a pool.
So this is where we hold all our pre-spawn NPCs.
So basically, inside each low res, we store a tag, and the pool takes all the low res around the player and then counts the tag.
So for example, if there is 50% poor male civilian and 50% rich male civilian, then the pool will try to have 50% of each mesh inside its pool.
So it's very statistically based, and it changes every frame, depending on the position of the player.
And obviously, the more models you have, the more that the pool will be spread.
So it's going to be a lot harder to have the right mesh when trying to change a low res from a pop-up, for example.
So I'm going to show it a bit in action.
So I'm going to show you the game running with debug display.
So on the display, you can see two pie charts.
The one on the left, you'll see that it represents what the composition should be.
So a model is a different color.
And on the right side, you'll see what the pool actually is.
So I'll show it in action.
This is done in debug mode, so it's not going to run where you need.
But you can see the pie charts.
So when we run it, you see that the pie chart on the left is actually always computing what the density should be around the players.
And the one on the right is trying to adjust to the one on the left.
Now, in our engine, we are limited to only spawning one NPC per frame.
So the pool will take time to adjust.
So you can see that the pie chart on the right takes time a bit to adjust to the left.
All right.
So now we have our pool of NPCs, and now we can build our puppet bulk state.
Only to refresh your memory, the puppet bulk state is the one where we have a high-quality visual, but it's still behaving as a low-res.
So basically what we do is the pool looks for the low res, it asks for the best matching NPC it has in its pool, and then makes the swap.
We try to get the best one in our pool, but it's not always the case.
I mean, it's statistics, it could fail.
So for example, if we need a poor male civilian and we only have a rich male civilian, we might do the swap anyway, and you will see visual popping.
But I mean, if it needs to be, if the both need to interact, for example, then we actually need to do the swap, so we don't care that we see a visual popping.
But usually, when the regions are well set up, you don't see this popping.
So we swap, we take the mesh on the pool, place it on the low res, we change color, we disable the components to make sure that only the visual of the entity is still there.
We match the hats, I'll come back to color and hats in a bit, and then we do some remapping of the bones. Because if you remember, our real entities have 300 bones, but we are going to play 11 bones animations on them. So you're going to see this ugly mess on the left.
So here we have problems where, for example, we have only one torso bone.
So we didn't have enough bones to do the full curvature of the torso.
But the neck was at the right place, so that's why it's super stretched.
So we needed to do some remapping of some bones to make sure, for example, that our torso bone always look at the neck so that you can see that on the right, it's looking good.
So let's take a look at this conversion.
I talked a bit, but the videos are better.
So here you can see it in action.
So again, the conversion happens at 40 meters from the player.
So this is far away.
And I mean, you don't really see any visual popping because it's so far.
So these are perfect conditions and it works really, really well.
So I'll come closer and then you'll start to see it more in action.
So now you can see the visual popping.
So every time we replace the low-res mesh with a real NPC, you see that the shape changes a bit, the color changes a bit, so it's not perfect.
But everything is based on distance and from far away, it's good enough.
Now, when we do this matching, we match colors also.
Because our low-res models have a different shader than the real NPCs, we needed to develop a specific color matching tool so that character modelers can see the cheap mesh, the real mesh, and then manually select which transformation it needs to do to match the colors.
So it's obviously really long.
It came at the end of the project, and you can definitely improve this, obviously.
And then finally, apps. Apps are like how we cheat, basically.
As I mentioned, we don't have many models.
So how do we create variety?
But we found that if you have lots and lots of people inside a crowd, you actually only see their heads.
And by having a variety of hats, you can actually fake that you don't have a huge variety of models.
So we developed a system to have different hats on box.
The way we do it without having to respawn an NPC from our pool is that every time we spawn an NPC in the pool, it spawns with all possible hats.
So that when we apply it on a low res, we only display the right hat.
So now our final state, the autonomous state.
So the bulk puppet state at the entity with the components off.
So obviously, to create the other one, you turn them on.
So that's the autonomous bulk.
So that guy has all its components on, so it has full AVOC, CLUT, AI, so it's really a legacy NPC from that point on.
It's still part of a Shepard, so it still has an ID, but it's not controlled by it.
It's fully autonomous, hence why we call it that.
So this guy is easy, I mean, only one slide.
But it's not the case.
This one is the trickiest.
Because basically, when we turn it on, you need to remember that it came from a pool.
So it has been recycled, it has moved around a bit.
So you need to reset everything.
That's everything.
So if the bulk was jumping in the air, giving back to the pool, and put on a fleeing bulk, then this entity needs to have all the variables set up properly.
So we needed to go into all the legacy systems and make sure this was supported.
Obviously, I mean, we had some glitches, but we managed to do most of it.
We also need to start the AI in the correct state.
So, for example, I'll come back to the smoke bomb.
So if the reaction starts by moving their hands and trying to get out of the smoke.
So if you come near a low-res bulb that's leaving the smoke area, and then it starts its real logic, it must skip the moving ends part, because it's already out of the smoke.
So it needs to start the reaction after the ends, and start at the correct place.
So all our AIs, all our reactions, need to support...
Jumping in the middle of everything. So again, that's a huge task and it need to like refactor a lot of old systems And obviously it needs to be fast resetting everything restarting all AI is costly in some systems But I mean we needed to do it really really fast because this can be done like five six times in one frame All right. So let's take a look at it a bit. So now we see this conversion it happens at 12 meters So don't look for visual popping now.
It's not a visual transition, it's a behavior transition.
So look for behavior differences.
What I mentioned earlier, the giveaway is the ends.
So on the right side, you can see that people walk with these open ends, and they have like an as-good WAG cycle.
But when they transition, you see that they start using their ends, they start using their heads.
So when they transition, they are like real NPCs from that point on.
I'll show it in slow motion because that's easier to see.
So now he has these open hands.
He's a puppet bulk.
And then he's walking, he's walking, he's walking.
And then when he transitions, actually you see his hand coming together.
He'll start moving the arms, moving the head.
You see that he doesn't have the blank stare anymore.
It has a full facial expression.
So now that guy is like a real NPC.
But when that happens from 12 meters and up, we found that the player really does notice the difference.
So now you're stuck with all these autonomous bots near the player.
So the player needs to be able to interact with them, and the guards also, and other real NPCs.
So, easy, but not really.
The thing is, again, this entity is part from a pool, and it will change all the time.
If you remember, like in my first slides, when a camera moves around...
all the autonomous bulks are shifting away, so the entities are giving back to the pool and assigned on another.
So we cannot store pointers to those entities.
That's a big trick.
I mean, when you do the reaction, you can never store a pointer to an entity on a bulk.
So we had to develop our own smart pointer system that uses the bulk ID, so that when you actually query an entity using the bulk ID, it gives you the entity on top of the bulk at this moment.
So obviously, we needed, again, to go into all the reactions and re-edit them to make sure it supports having the entity change.
In some cases, we judged it to be impossible.
I'll talk about one of our gameplay loops, the accusation loop, where if you kill somebody, there's a possibility that a civilian will start yelling.
It will attract a guard, talk to the guard, point the player, and then have the guard chase the player.
All this long reaction does not support changing the entity super well, so we had to develop a fallback system.
So our fallback is pretty simple.
If there's ever a need to have a really really complex reaction, we spawn right there on this frame a real NPC and we replace the bulk.
So after this fallback happens, this bulk is not a bulk anymore, it's not even the same entity, it's a new guy doing a real reaction.
It works, but it's super, super costly.
When we do that, it's a five millisecond hit minimum.
And then on a system with Unity, we have a limit of 60 real NPCs.
So you're basically pushing one more NPC on top of that so it can unbalance your resources.
So let's take a look at this fallback in action.
This one is really, really hard to explain, so I tried my best.
Here you'll see I put some spheres on top of my bulk.
So as long as he has those spheres, he's a bulk.
And when I will kill the guard, you'll see the sphere disappear.
This will mean that he will have changed.
So now it goes pretty fast.
This transition is totally seamless because we take an autonomous bulk, which is basically a real NPC, and replace it with another real NPC.
So we can swap things really easily.
So looking at it in slow motion.
So now I kill the guard and now he has changed.
This guy is not the same one as the guy that had the spheres.
This is a completely real NPC and he has replaced the ball completely.
And this guy can now do the full complex reaction.
It looks good, but it's super costly.
Every time this occurs again, it takes a five millisecond hit.
So we tried to avoid this reaction like when possible.
The cool thing, though, is that now this guy is a real NPC and he is fully replicated.
So let's talk a bit about replication, because I mentioned it a bit.
So, the networking, the things we did is use the deterministic system.
So, all the shepherds have vaults in them, so their positions are all deterministic, as I mentioned before.
So it's all good, but then when they react, it all goes to hell.
When they react, they move away, and then we cannot keep the determinism.
And we did not want to replicate thousands of position logic and everything.
So we basically replicated only the reactions themselves.
Because we assumed that if a bulk starts...
I mean, they all start at the same position, so if we can only replicate the reaction element, then they should mostly do the same thing.
Which worked, actually.
The bulks, I mean, at a certain position would all flee, would all react.
I mean, our reaction system is not deterministic, so we could have...
discrepancies between positions, but I mean, since the Borgs themselves are mostly decorative civilians, we don't really interact with them, then it's not a problem.
If we ever need to interact with them and they're offset too much, then we use our fallback that I mentioned earlier, and then it becomes a real NPC fully replicated.
If you ever want to learn more about the replication of real NPCs, you can see Charles Lefebvre's talk on Friday.
All right, so let's talk about performances, because we like that.
So we basically used 20% of the CPU, as you can see on our left pie chart.
So that's for an average of 2,000 box.
So that's not huge, if you think about it.
That's 2,000 NPC on screen, and only 20% of the CPU.
So I mean, we worked a lot to have these good results.
On the right side, you can see this is our most craziest mission where we have 10,000 NPCs, there we actually use half the CPU.
Now it gets a little big, but remember that this is a mission and we have full control over the resources, so we can have like less guards, less of other things, so we can keep it running good.
All right, so let's break this down a bit.
On the left, you can see that for a typical crowd, What uses the most CPU is actually the 40 autonomous bulk.
So this is like the basis of all our system.
This is why we did all that.
It's because real NPCs are super costly.
So having only 40 of them takes 70% of all the CPU time used to render 2,000 bulks.
On the right side, you can see that for 10,000 PCs, then, I mean, the autonomous bulk do get crowded a bit, and it's mostly the shepherds now that take the most amount of CPU time.
On memory, this is where our system shines.
So all the costs are fixed in this system.
So again, the pool has a fixed size.
The shepherds do not take much memory, and when they do spawn, they allocate everything.
So it's super cheap.
Actually, for 2,000 bulks, we only use 230 megabytes of data.
And when we ever increase that to 10,000, it's only a 20 megabyte increase.
So we end up actually using only 5% of the total RAM of our budget.
So that's really, really good. And you see that on the right, it's mostly used for the graphics of the low-res bulks.
All right, so how did we get these good CPU results? How is it running good?
Well, we use a lot of multithreading.
It's like the best situation possible, right?
You have thousands of guys doing single stuff, so everything is super easy to multithread.
But, I mean, there are so many of them that you need to be careful.
So, we did a lot of work on our profiling tools, and we did a lot on our task scheduling to remove every possible idle times.
So, you can see in my image that our big bulk update task, actually has no idle time from the previous task and to the next one.
So you don't miss any CPU cycles.
So that's mean that's perfect for us because we didn't waste time.
We used a lot of lockless coding mechanisms when we could.
And if we did have to use locks, we kept them like really, really short.
So it's a bold world, bold words, but let's give some concrete example.
So one thing I talked about when I talked about the collision stuff.
is that to do our collision system, we use a map that keeps all the position of every NPC in the world.
So basically, we use that map for our collision, as I mentioned.
We keep two maps.
It's double buffered.
So on a given frame, we insert all the position of every NPC in the world.
And when we need to do some queries, we use the map from the previous frame.
So we do have a fast insert.
is what's the most costly operation.
So we can actually have only 1.5 microseconds operation for a 1.5 meter radius query.
So all that is super fast, and this is done by 10,000 people every frame.
All right, so it's quick code.
I want to show you that, for example, on the left, in our big loops, we use intrinsic operation to make it run super fast.
And on the right, when we add elements, we use...
Atomic operation to make sure that we don't actually need luck. So all this makes it run super fast Alright, so what's is left to do? Well lots of things Obviously the transition the transition is the most problem problematic part of this system Either from low-res poppet or from poppet to autonomous on the two sides. We can actually do more to improve it in Our game we only swap the mesh So when going from low-res poppet, so you see visual popping occurring if we could use our deterring system and do stuff like we do for the building LODs to make it, if you can like, not have it so aggressive in the eyes of the player it would like, help, like reduce it like a lot and it would be better for the enjoyment of the player.
Then we, when going from Puppet to Autonomous I mentioned that we needed to go into all possible behavior, we need to start every behavior at the right place.
So that's super hard and not really manageable in the future.
So a good way to go around that would be to have a unified reaction system.
So if we could have a really, really cheap script maybe running at the core of the real AIs, then when we turn them on, we basically can swap the scripts around and it can go pretty fast.
Then on the networking side, I mentioned that when they start reacting, it goes a bit to hell.
Well, if we could have deterministic reaction, this means that, I mean, we start with the good positions, right? All the positions are the same on each client. So is there a way to make the reactions themselves deterministic to have them always flee the same way and everything?
When we do it, if we could do it, then the position will stay a lot closer to what they should be.
And then if we can have better...
these better reactions synced over the network, then we could actually make them a bit more trickier.
For example, all the reactions in our systems are done on the individual.
So a bot will always react on himself, basically.
He'll flee, he'll do some animation, go out of the smoke area, but he's always doing it on himself.
if we could actually have interaction.
So maybe the Shepard could have a reaction running and those two Bulks may be fighting each other.
Then we could have fight in the Bulk system and we could put all our guard NPCs inside the system so that more NPCs are actually using our pool and this will help to have even more NPCs in our game.
And if we can ever have fighting between Bulks, then it would be my personal favorite thing to see two armies fighting each other.
people fully rendered, fully interactable, and slicing everywhere. That's what I would like to see. So what is the end result? Well if you played the game you probably see the video I'm gonna show. I'm actually kind of scared now because when I rehearsed yesterday I had some glitches in my video. So let's let's hoping it works and that the compression worked.
Let's hope also that, okay, all right.
So this is like our big, all right.
So this is our big mission, the King's Execution Mission, where we have 10,000 NPCs on screen at the same time.
So all these guys are bulked.
And the main thing I wanna say is, if you ever want to build a system in your own engine, because I showed a lot of stuff about AC.
But if you want to do it, you only need a key simple things.
So some things to have lots and lots of really cheap mesh.
And that can play simple animation.
So go cheap.
Go back to your old PS1 code, your old GameCube code, and then have lots and lots and lots of really cheap mesh.
Then you need a pool, a pool with real NPCs.
And as the player gets close to the cheap ones, you basically replace them.
And then you can have the intermediate state that we have, the ball puppet state, if you want to.
So, this was it for me, and I hope you enjoyed the presentation.
I will sadly not be having questions, but if you ever see me or Antoine walking around, please come and see us and talk to us.
