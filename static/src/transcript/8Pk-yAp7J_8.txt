Thanks all for coming.
My name is Valentin Minitskiy and I'm a Lead VFX Artist at Playground Games.
And today I'll tell you how parameters drive the particle effects of Forza Horizon 5.
But before we will start, please turn off the sound on your phones and also...
In the end do the evaluation please.
Alright.
So today we'll be looking at what challenges we faced in a new project and why we decided to switch to a new particle editor to overcome them.
Then we will talk about how we redesigned our core gameplay graphics and we'll show how putting carve physics at the core of our effects help us to achieve more convincing and satisfying visual results.
We also take a closer look at several use cases, such as how we use wheels temperature to drive tire smoke effects.
We'll show our kick-up master effects and explain the external parameters that we use to control them.
Then we will break down how with two effects we were able to cover hundreds of destructible props.
And we will wrap up with several tips on efficient batching solutions that help us to optimize our game for various platforms.
So the goal of this talk is to show how we discovered that building VFX systems to take an advantage of parameters would be a key to producing more satisfying gameplay effects and efficiently creating a wide range of assets.
So, but before we dive into that, let me tell you about the game itself.
Forza Horizon 5 is an open-world driving video game set in authentic representation of Mexico.
Let's take a look at the trailer.
And I'll tell you what I'm gonna do.
I'm not giving up.
Come on, we got nothing left to lose.
I've been here from the start.
You know where I'm going.
Tell me what you want right now Let everybody talk right now tell me what you want right now you can get it Alright, so first let me describe what challenges we faced in the new project and why we decided to switch to a new effects editor.
So what were our new project considerations?
We planned for a 50% longer development cycle and this was intended to give us more time to push the quality of our effects.
But there was also a bit of a scope increase, as the goal was to create our largest and most diverse world to date, replicating the huge variety of biomes present in Mexico.
The key tech improvement that we identified on the FxHard side was to push for a new particle editor that would enable us to live up to those project targets.
To better explain why we wanted to switch to a new editor, let's take a quick look at previous editor challenges.
So During Forza Horizon 4 production, we felt that we had hit the limits of what our old editor could do, and it felt that we were spending as much time fighting the tool as we were creating the art itself.
It was a heavily extended middleware that had not been in active development for years, and we were highly dependent on the help of our internal engineers for any fixes and new functionality.
But still, it was a cumbersome stack-based editor in its core, and No amount of engineering support could change that.
In 2018 and early 19, we spent a lot of time checking various GDC talks and engines like Unreal Engine and Unity to understand what kind of tool we were looking for.
Everything was going node-based, and overall trend in the industry was to give more control to artists through node graph editors.
as this approach is giving the ability to craft our own logic and data relationships in a way that suits our effects.
We had the choice to create an editor internally or use a third-party software again.
In this case, PopcornFX version 2 was clearly the best option for us, so we decided to go with it.
But this did mean that we would have to build every VFX in the game from scratch.
There would be no longer the momentum of previous projects behind us, and we also would need to help support the implementation of this editor.
As part of a new editor evaluation process, we started by designing a gameplay-related VFX.
So, what was the problem that we tried to solve here?
Well, In Forza Horizon 4, we had a limited visual feedback to reflect what the car was doing.
There were many blind spots.
For example, our particle system didn't know anything about which wheels were actually driving the car, and we had to offer most effects expecting real wheel drive.
Any deviation from this required more duplication and workarounds.
Because of that, in some cases, we could achieve behavior seen.
We couldn't achieve the behavior seen in the reference, and that would frustrate us a bit.
Previously, there were some situations we struggled with, such as an initial kick-up when the player suddenly accelerated from a static position.
To fix this, we needed to introduce workarounds.
But in turn, workarounds could cause incorrect behavior, which would then also trigger in other unwanted situations.
In this video, we can clearly see an unintended emission when the front wheels stopped rolling.
This wave was byproduct of previously mentioned workarounds, and we unfortunately couldn't fix this.
So the first picture here describes how previously our effects work.
And we could only use primitives for emission points.
And from those, we emitted particles flying backwards and up into the air a bit to create a feeling of kicking out dust and debris.
But now we have the power to create our own emitter behavior.
The good place to start would be by defining a cylinder that matches the tire.
Then we want to know where the contact point is and to use the surface of the tire thread around that point.
And then we eject the particles with initial velocity set according to how fast the wheel is spinning.
This is a very first proof of concept for wheel-based emissions that we created during PopcornFX evaluation stage.
Let's take a look at the effect graph on the right.
The script node here is defining a cylinder almost in the same way that we showed in the previous slide.
Then we have a few inputs to control the arc and velocity of the base emission.
This then goes into the default physics node to add some gravity and billboard renderer.
This basic effect already feels quite satisfying.
You can imagine this is coming from a car wheel that is spinning away on a very loose surface.
Let's dive deeper and see what is under the hood in our cylinder-defining script node.
So, this is a basic script at the heart of this effect.
There is no reason that this couldn't be done in the node graph, but it's far more visually transparent to do this in a few lines of code.
We start by picking a random angle from a defined range for the arc of emission and the same for the radius.
For a bit more randomness, there is a control over how much side-to-side spread we want.
We use this to pick a position on the defined cylinder that placed at the origin, and then we calculate an initial velocity based on how that point on the tire relates to the contact point.
As at this point, we were still working only in Popcorn, the fixed editor, so we recorded some gameplay from Forza Horizon 4.
with our physics overlays enable to try extract the data and apply it in our proof of concept effect, pretending that the effect is listening to the game.
As you can see in this short clip, the car is driving from a static position on a gravel road and this shows a bit of variance in how much traction there is due to the loose surface.
We took some notes of what we see happening here with those values over time and it looked like RPM and slip related data are the key.
So, with those notes in mind, we improved the previous test effect.
Those previously fixed inputs are changed into attributes, which allows everything to be controlled from the effect interface in the top right of the frame.
This control panel allows for live tweaking of elements of the effect, but in theory, this function is more appropriate for listening to external data.
As we don't have the physics data directly available for now, we created some curves that map what we saw in the previous clip and sampled that over time to drive the effect.
Here we have a side-by-side comparison that works as a proof of concept for inputting the physics data into this tire emitter effect.
So after we proved the concept in PopcornFX Editor, it was time to start implementing all of this into the game.
And at this point, we decided to look back and revisit a little bit our approach for creating effects for core gameplay systems.
As previously, we were relying on options and data that are known to us instead of thinking about what are we actually trying to represent.
So that was a really good question.
And to answer that, we decided to start by talking to our resident vehicle handling and dynamics team, as they're the people who know everything about the behavior of the car and what we are trying to represent in these gameplay effects.
It turns out that the key concept that relates to tires kicking up matter is a slip ratio.
This is a difference between how much the wheel is rotating compared to how far it has moved linearly.
At zero slip, one revolution of the tire should propel the car by the circumference of the tire.
And at one slip, there is no movement at all.
We kind of knew about slip thanks to the in-game physics overlays, but didn't fully understand it.
And it turns out that this was the main contributing element to the smoke factor previously mentioned.
What this ultimately boils down to is that the rotational energy the tire spends that doesn't move the car forward.
must be doing something else.
This could be pushing surface matter away from the car or lost in the heat energy in the friction between the tire and the surface.
Sleep ratio is a key parameter that informs us of all of this happening.
So with that information in mind, we start by implementing some debug visuals to test that parameter hookups from the game to our effects are performing as expected.
We use tire properties to play those debug particles from the surface of the tire.
And to do that, we are reading the wheel position, tire radius, and its width from the game.
We use RPM to rotate this as the wheel rotates.
And at last, we change the color depending on the slip value.
With those debug visuals up and running, we now know that we can trust the data connection, and it's time to start working on getting some kickups in place.
Here we show some early spawn layer logic.
We are able to map emission curves to the physics inputs.
and use a control panel of basic debris emitter to set tune the behavior of this effect.
As you can see, when we increase the slip ratio, particles begin to emit it over a growing arc from the contact point and with increasing velocity, depending on the maximum that is determined by RPM.
And this is a breakdown of the core behavior of the tire emitter, demonstrating how these inputs are reflected in the editor in real time.
Our templates are able to be adjusted to create variants to tune on the fly.
So let's for a moment dive inside the debris emitter template again.
This is an evolution of the graph that we showed from the popcorn-fixed evaluation stage.
The purple inputs are being read from the game, but also are accessible in the control panel in editor for testing purposes.
From game read, we'll position tire radius and width, RPM, slip ratio, and use this to inform effect behavior.
And the dark blue are internal parameters that we were adjusting via control panel in previous slides.
This all comes together to allow us to create a comprehensive effect system that now considers all forces.
on the tire at once, allowing that to influence the whole particle system in combination with other factors at play. If we know that the tire is traveling at given speed, spinning at a specific rate, and the amount of it is slipping, this can all be taken into account for the initial behavior of the spawned particle.
We only have to define the nature of the effect once and then drive it with the data from the car physics.
Now that we have the core tire emitter behavior coming along nicely, let's put it to use with a tire smoke, one of the most common effects you'll see in the game.
But first, let's look back at what was wrong with our previous iteration of tire smoke.
We previously discussed a smoke amount value.
This was a bit of a black box magic that tried to tell the particle system that the wheel was slipping, and if it was hot.
This led to a fact that lacked much subtlety.
The smoke amount number needed very little change to go from minimum to maximum, leading in most of the cases to binary on-off behavior.
And obviously, our effect lack a thick billowing smoke.
So to even better illustrate this, let's compare our effect from Forza Horizon for a GANSA reference.
Well, clearly, our tire smoke look quite.
underwhelming. If you think about the burnouts and drifts you imagine a big thick clouds of smoke but ours were quite thin and weak. So what can we do about all of this? We decided that the good place to start would be by finding a more appropriate trigger to drive the effect itself.
So again we go to our friends in vehicle dynamic team and tell them that we want to achieve what we see in the reference where tire smoke starts off fairly thin.
and then thickens up as tar gets hotter and hotter.
They gave us a quick lesson on what causes a tar smoke and pointed to some good reference.
Let's take a closer look at the reference together.
So in this case, the tar starts off cold at an ambient temperature of 90 degrees Celsius.
As we can see, a lot of slip causes a tire to quickly heat up and pass 100 degrees Celsius mark, leaving some rubber on the ground and producing a thin, short-lived smoke.
Often, at this stage, we are seeing dirt and other contaminants on the surface of the tire smoke before the tire compound itself.
Note that there is a bit of a hot spot developing on the inside left of the thread.
Unfortunately, this reference is unable to capture the heat about 100 degrees Celsius mark.
But a few seconds later, you can see the heat has spread across the entire tire thread.
At this point, the smoke produces noticeably thicker and continuous.
And after sustaining that amount of friction for another 15 seconds on the similar RPM, the tire is clearly starting off to break down.
A lot of lingering smoke is being produced, and you can see particles of tire rubber being cast off.
It turns out that our car physics simulation already tracks all the necessary data.
In fact, we were informed that it goes a step farther and tracks how each tire compound responds to heat, at what threshold it should start smoking, and what will be reaching the breaking point.
A new smoke control parameter is produced to trigger this effect called Smoke Input.
The temperature of the tire is compared to these thresholds and mapped to 0 to 1 range for easy effect control.
As soon as the tire is hot enough to be starting to produce smoke, the VFX system is informed by the parameter going above 0 and increasing up to 1 for maximum smoke.
This new temperature-based control will have a bit more of a range than the previous one, has access to allowing for subtle build-up in effect and will be helping us to address this prior binary nature.
From here we just need to apply it alongside our new tar emitter and see how it feels.
So we decided to go with two primary elements, thin and thick smoke.
There is a dead zone around zero, but once we pass that with a smoke input, the thin emission increases and thickens up, until we cross a threshold to thick smoke.
On this example, you can see that the action of the tire influence the overall movement of the smoke.
The highlighted parameters are the temperature that we talked about previously.
They determine the type of the smoke that is produced.
Obviously, the smoke material in this demo aren't great, but alongside this, we've been working on some significant rendering improvements that give us confidence in producing some thicker smoke materials.
But first, let's go back to Forza Horizon 4 to talk a bit about the pre-existing issues.
Our particle lighting model was not fully featured as the rest of the game.
Each billboard had a lighting value that was average of its four vertices.
This led to strange visual behaviors in areas of mixed light and shadow.
The solution at the time was to reduce opacity and increase translucency, leading to rather weak tire smoke and trails that don't light appropriately.
Here you can see some Forza Horizon 4 tests on fine-tuning translucency value, which in effect lowered the amount of shadow details available to our particles by adding the light from the other side of the billboard.
So here we have a comparison of our old particle lighting model on the top with the new one at the bottom.
We now have per pixel light and shadow, a massive improvement.
And as you can see, the particles reading is more closely aligned with the rest of the game world.
On the right, we also have a new six-directional light map shader, which again gives us more confidence in using thicker clouds, as now we can bake it into the info for the light scattering through from behind.
To quickly recap how we improved our tire smoke.
So, we've created a new bespoke smoke controls that we plug directly into the effect.
In combination with the new tire emitter, we can change all kinds of behavior according to the temperature and movement of the tire.
Tire smoke behavior now reacts more realistically according to what the wheel is doing and how hot the tire is, giving us a satisfying ramp up over time.
And per-pixel lighting and our new six-directional smoke materials allow for bellowing, lingering smoke to look good.
And now we are happy to leave smoke particles lingering in the world for some time.
time, and that in turn allows players to create long, satisfying burnouts.
With all ingredients in place, let's take a look at what we've created.
Here you can see how results of our work compare to what we had previously.
Notice how in a lot of the cases our new tire smoke ramps up from thin to thick and billowy.
Well, and being such a core part of the game, it's great to see that it was well-received by the players and reviewers alike.
We were really happy by the amount of great photos that our players community created in photo mode, specifically showcasing new Tire Smoke.
One more thing before we move on.
Having the ability to do what we like with data allowed us to create some cool new features.
By tracking the car volume, we can determine if the smoke is inside the car and change its behavior.
For example, as you can see on this video, we can fade out smoke over time to give the impression that you've dispersed it with your car.
We've made a good progress with the tire smoke, but what about the kick-ups we expect to see when we go off-road?
But first, let's look back at what challenges awaited us when we started creating kick-up effects.
Every Forza Horizon game is more demanding than the last when it comes to kick-up effects, as our entire art team is always pushing boundaries and trying to make each location in our game as varied as possible.
The VFX team need to have an appropriate effect ready for every terrain material in the game.
To better illustrate this, here's a quick selection of several biomes from the game, but there are many more to account for.
There were at least 120 materials to keep track of across four seasons.
This can be blended together into all sorts of combinations.
That's a lot of ground to cover.
Previously, we would duplicate an existing effect and tweak it to suit each surface in the game.
And obviously, this is a very cumbersome approach.
So, this time around, we decided that we can come up with a better solution.
Considering previous success with receiving data from the game, we asked our VFX-friendly rendering engineer to give us the ability to send parameters of our choosing from the game to the effect based on the underlying surface.
When we received this functionality, we started by feeding in different flow3 color to the same effect depending on what surface called for it.
Here's an example of this in use on a cluster of fairly similar but distinct surface.
We use a single effect that is selecting between some nice bright debug colors, depending on what the tire is actually touching.
Empowered by the ability to feed a color into the effect, we start to group up similar surface types to see what we could put this to use.
Here's a list of sand kickups effect that we ended up with in Forza Horizon 4.
We have three base colors of sand, each with a compact and deeper version.
Some of those were also kicking up stones, some that were red, et cetera.
Based on that experience, we realized that if we can use parameters for more than just palette swapping, we can really streamline the process of kickups creation.
For example, here we have three sand types from the west coast, and it's adjoining sand desert.
Some sand here have a lot of stones mixed to it.
The other one is very deep.
So we don't want kickup's effect for those to be identical.
But we also would like to avoid having to maintain an entirely new effect every time.
So how could we do this?
What if we also thought about the amount of sand that should be kicked up?
that relates to the depth of the matter that is being pushed around or that the tire sinks into the surface.
The core behavior is much the same, just a different density, from thin layers of compacted sand through to the soft, deep, deformable sand dunes.
So we thought maybe Olki-Kaap's effects with the sand trail component could be a single master effect, which effect Float 4 suddenly transforms depending on the depth of the terrain.
Let's go back to our previous example.
Our float 3 is now float 4, the extra channel being depth.
And as you can see, we use this to drive the size of the particle.
But why stop there?
There is no reason that this attribute cannot drive multiple aspects of the effect.
Like, for example, emitted sound opacity levels.
So let's put this into practice and define the RGB and depth for each kickup in the same float 4.
This is how our different kickups look in XML.
As an example, we use sundeep and sundeformable.
This is our float4 that defines the color via RGB, and the last parameter defines the depth.
This depth, in effect, will be used in a similar way to the temperature input for the tire smoke.
We use depth to decide if the surface should use a thin or thick cloud materials.
We've simplified the logic inside our effect for this example a bit, but we listened to the dust RGB attribute and split that into RGB and force channel depth.
This depth value is used to learn between min and max values contained in float 2s to the left.
This allows many aspects of the effect to be driven by this one input.
The rest of the effect is controlled using previously demonstrated panel of inputs on the tire emitter system.
So.
We decided to take it even a step farther by adding another float4 to control a debris element with a range of properties.
We already have RGB, so we don't necessarily need that to duplicate.
But we could use one channel to control the type of debris, another for the spawn count of that debris, the base size of debris, and finally, a control for which quality setting platforms this debris appears on.
Now, with this setup, we can not only output sand of different color, size, and opacity, but also rise debris types to it.
This example demonstrates how we go between those min and max depth values and also how those additional debris types looks like.
Remind you, this is actually the same effect, and we just fit different input data to it from the game, and it outputs us very different visual results.
In going through this process, we made some discoveries that surprised us.
We found that using fewer but more complex and adaptable effects was significantly cheaper for our CPU task usage than numerous simpler effects in these situations.
Popcorn FX scales very well as you add more particles to an existing system.
This was very important when we ran into some CPU bottlenecks at times.
The more coverage we could get from this master effects, the better our performance.
This allowed us to propagate optimization easily to all keycaps across seven platforms, creating scalable effects that work on base Xbox One through Xbox Series X and top-end PCs.
This was vital in a game where it's common for 12 cars to be traversing the world at anywhere up to 300 miles per hour, crossing numerous surfaces per second.
So at that point, we were quite happy with the effects that we produced.
Those effects played a big role in our game promo materials.
And our players community just loved them and created so many great photos showcasing our kick up effects.
The next good use case would be a smashable effects.
So what were our production goals for the so-called smashable effects?
First and foremost, our effects should look and react naturally to the forces at play when the car smashes a destructible asset.
Also, our world is densely populated with those smashable props.
Early production estimates put them on to about 500 unique assets, and each required appropriate effect.
So how do we build one of these?
Based on our previous experience, we started by identifying key parameters for us to listen to.
Those were the impact energy and focus car velocity.
The impact energy is used to determine the spound count.
The harder they impact, the more particles that will fly up into the air.
From there, we add the basic behaviors that calculate the initial velocity of any debris.
We consider how much we want the impact energy to scale the overall movement of the emitted particles.
And we take into account the velocity of the car that has just broken the destructible asset to trigger this effect.
We also added some external controls to allow this template to be used and reused.
Externally, we control the overall velocity spread, direction, min and max.
Taking this initial velocity stack, we then also define the physical properties of the smashed debris.
Size and density are used to calculate the mass per particle.
Then we use consistent, accurate gravity and wind settings across all effects for natural and cohesive behavior.
This video demonstrates how the previous system come together in Editor.
Using the control panel on the left, we can test how.
our effects looks with low impact energy and high impact energy.
We can also preview our effects simulating various car velocities and different impact directions.
So after creating this template and solving basic behaviors of the debris, it was time for us to again think about how we would create all the effects that are needed.
Inspired by the kickup system, we implemented a similar XML-based solution to drive smashable effects variation from within the master effect.
We extended it further with couple of additional float4s to allow for texture selection using the uber material.
And to create a new effect, we just need to add several new lines in our XML file and assign it to the prop.
To handle so much variety, we define an indexed list of presets for each type of debris, in this case rocks.
By doing this, we are allowing to select a specific size, color, and other parameters from predefined lists by single float in the XML.
This is how our smashable master effect looks from upper layer.
It can be a little bit complicated, but this is how we get all this to work in a single effect file.
When the car smashes one of the prop, it sets a specific lot form from the XML to our effect.
Using those, we select color and the size of the debris from predefined index lists shown in the previous slide.
We also determine how many particles and of which type we should spawn.
We select between slate, big rocks, dust, sparks, wood splinters, plastic parts, et cetera.
After that, all the information comes together inside the effect layer, where we also use car physics data to determine velocity, direction, and other properties of the spawn debris.
And this is how our system behaves in-game.
With some careful consideration and categorization, we were able to cover these 500 plus mashable props with just two master effects and XML file.
This approach again led us to massive performance savings in a situation like in this video when the player is constantly breaking a wide variety of props.
Let's quickly recap what we ended up with.
So with our new approach, almost all our smashable effects are now being batched together.
Essentially, we have the same two effects being called over and over again in a new position with an appropriate attribute.
This resulted in massively reduced draw calls when player performed extreme landscaping, wreaking havoc upon everything in their path.
This allowed a single emitter to be used to output numerous distinct debris types, smoke and dust, and also meshes.
This greatly reduced CPU task time as it required less duplication.
As we've previously mentioned, PopcornFX prefers fewer but more complex effects.
If we did this with individual layers, we'd have to pay extra CPU time for each one.
Now we are going to dive a little deeper into this notion of payloading and making the most of a single simulation layer, looking at how we use that to create waterfalls and much, much more.
So we do this using what we call batch templates.
These apply many of the principles that we've already covered today, but within a single particle system.
To better explain how we do this, let's take a look together at a simple example.
All the physics simulation happens in a single layer.
But instead of defining input data inside this layer, we use intermediary layer where we payload data, like position, orientation, color, and lifetime, and send it to our physics simulation layer.
And as a resulting effect, we have this stream of balloons.
We convert our payload layer into template, the batch template, and reuse it several times over.
But every version of this payload is now sending different data to the batch layer.
Sorry.
So all the data is extracted to achieve different visual outcomes.
And now we have three visually different streams of balloons.
But the physics simulation for all of them is happening in the same layer.
All the waterfall streams, splashes, and mist in this cenote are placed using this method.
All the VFX you see here are just a single particle system with two simulation layers and a whole bunch of payloaded data.
This massively reduces CPU task duplication that would happen if we would be doing this individually.
Here we can see a list of payloaded data that are attached to each spawn event that goes into the simulation layer for the CNOT water streams.
We feed data like position, size of emission zone, orientation, particle size, and so on.
Inside the layer, the data is extracted and put to use in the common logic for each stream of water in the same way that we showed in the beginning with the waterfall balloons example.
This is an editor example.
You can see payloads being used to drive one stream.
Then we activate numerous other streams that we find that the final waterfall consists from.
We also use the same payloading approach for the splashes layer and the mist, and we have the combined effect in the editor.
Back to the game for comparison.
As mentioned previously, this is a very CPU-friendly approach.
And therefore, this technique is used widely across the game.
For example, the cloudscape, steam vents, and volcanic plumes in our game initial drive are created using this workflow.
And our version of the dust storm is also using a lot of the same principles.
OK, let's sum up what we showed today.
So.
Start off by identifying a couple of key parameters for your effect.
Design the system around this as inputs.
Effects created that way can adapt to gameplay by reading necessary data.
Later on, you can easily overhaul your effects or create variety by defining variants through an XML or in some other way.
This approach could still be valuable even without external inputs as you can easily define or embed all needed data in the effect itself. I also would highly recommend a talk from GDC 2021 that touches on a lot of same topics that we discussed today. It's called how to build complex VFX system with simple controls. So templates are good.
Designing useful templates when you start working on a big effects group can pay off tenfold later on in a project in many ways.
With templates, making consistent behaviors become easier.
You only need to make a tweak once to have it inherited by the family of the effects.
In each cases, workarounds or exceptions can be done by creating a local copy of templates.
You just need to identify what you don't want to propagate changes to all dependencies.
The approach we took proved very efficient in terms of development time cost, as we had to create all effects for our game from almost from scratch.
With SkickUps, what used to be 100 distinct complex files is now fewer than 10 effects and XML document.
And with Smashables, over 500 distinct props are covered by two master effects and XML.
All of this also gave us huge performance benefits that allowed to successfully.
scale our effects for various platforms.
OK, and well, that's all from me for today.
But before we wrap up, I would like to say thank you to the team behind Forza Horizon 5.
So first, thanks to our great VFX team, Carl Sear, John Reeds, and Michele Talentino.
Big thanks to Josh Alenia and Paul Benson from rendering team, and Marco Conti and Chris Phillips from vehicle handling.
And I also would.
like to say thank you to our art directors, Donner, Seta, and Conor Cross for pushing our effects to be at their best.
And everybody else at Playground Games.
And of course, thank you all for listening and any questions.
Hi, thanks for your talk.
I was curious, it sounds like you're basically doing effects emission based upon the material name, but materials can vary across, say, the material itself.
Are you reading the textures like, oh, there's a puddle here, but there's not a puddle here, because you're dynamically deciding that in the shader or something?
So in our terrain texturing system, we had a lot of those materials.
And We had also so-called surface types that kind of had the visual material side in it, but also there was obviously parameters from game design in terms of how the car behaves on that material, if it's sand or...
like a tarmac road and stuff like that and also audio.
And we also use those to define what kind of emission we would like to do in our master effects.
Got it, thanks.
Thank you once again, I appreciate listening to your talk today.
I wanted to know, in comparison to Forza Horizon 4, how much more resource intensive did these effects end up being?
Sorry, can you define resource?
So, I apologize.
Texture CPU time?
CPU.
OK, so we had 2.5 milliseconds of CPU budget across any kind of platform.
So it's the same on Xbox One and Xbox Series X.
Obviously, 2.5 milliseconds on Xbox Series X is quite different from Xbox One.
But we were constantly staying in that budget.
And in some cases, we also had to even cut lower than that, Our environment were like really complex with some additional props on Xbox one So yeah, basically I'll be never were higher than 2.5 milliseconds overall. Thank you Hey, awesome. Two questions. Are you guys on the same engine as the Force of Motorsports guys? Just out of curiosity.
And two, your guys' HDR skies and rendering is probably one of the best that I've seen out there.
It's really beautifully done.
What on the particle side did you guys have to adjust at all for the HDR rendering?
So yeah, that's correct. We are sharing the fuel engine with a Terentan and Forza Motorsport title.
And on the sky setup. So yeah, basically our sky rig, as you probably saw in some GDC talks back from the years, is we just capture the sky in various different scenarios and use that with a motion vectors to kind of make it look most realistic that we can do. And on the effects side, in some cases, in some scenarios where the player was on the top of the mountain, we added some additional kind of low-lying clouds overall to to mimic some clouds that we saw on the sky itself.
Obviously it's pretty hard to do because like you have this perfect picture of realistic sky and you're trying to mimic that with particles so there wasn't any space for doing something kind of a little bit stylized we had to yeah make it as much realistic as we can.
Cool, thank you.
Hello, thanks for the talk, it was super interesting.
And I was wondering if you had some overdoer issues because I noticed that when you have objects which move very fast, like your cars, you have to spawn a lot of particles to avoid gaps in between them, right?
And so I was just wondering if the player positions, I don't know, the camera behind the car and you go through sand.
I imagine like the PC or the Xbox just melting because of the overdrive.
I wonder how you overcame this issue.
So...
With a lot of those kind of bigger particle effects, like the long trails of kickups or tire smoke, we actually use a quarter res rendering of those particles that kind of significantly improve the...
GPU side of that.
Yeah, and it all kind of worked.
And obviously, for the lower platforms, we scaled down the emission counts of the particle system, et cetera.
But we were kind of lowering the lifetime of the particles as well, so there won't be like dead zones between the particles that we emitted.
The only thing that they would live.
shorter life on the Xbox one compared to Xbox Series X Okay, thank you, and I was wondering Whenever I try to make such a dynamic system with these parameters I often run into edge cases just for example You mentioned that you can scale up and down the particle size depending on the speed right and it looks okay in 80% of the cases but if the car is very slow for example then you have mini particles which look a bit weird right and sometimes I run into these things and then I try I make add workarounds for these edge cages and at some point I have a system which is so complex that it's hard to extend because it's basically full of workarounds and I wonder how you covered these edge cases and made it just look good every time by not sacrificing the complexity of the system.
So with example that you've just described, the good idea would be probably not to start with the size of the zero.
You start with some predefined size and then there is a maximum as well.
And you basically kind of lerping between those values depending on the parameters that you receive from game.
So that was kind of basically our solution.
Obviously, this all kind of required a lot of tweaking.
So that's why in Popcorn FX, we had that panel with the.
various attributes where we predefined some mean and max values.
So the effect itself won't be breaking down, and we won't have that small, really small particles or something else like that.
OK, thank you.
Cool.
I guess that's it in that case.
Cheers again.
Thanks all for coming, and don't forget Feel the evaluation.
