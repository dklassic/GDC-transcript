Thank you all for coming, and would you kindly please silence your phones.
And if you would also be so kind as to remember to fill out the surveys at the end, they get a lot of valuable information from them.
Hi.
My name is Soupy, at least to 98% of the people that I work with, to the other 2%, I'm Chris.
And this talk is about a way of prototyping gameplay that we call action blocks and how we use them to find the core of Titanfall 2's single player campaign and to develop the levels.
A little bit about me.
I've been working in games for about 13 years.
I started making some.
World War II Call of Duty games, and then I worked on Modern Warfare, and for the last eight years or so I've been working on the Titanfall games.
I'm a level designer. My focus is mostly on layout, and I've done both single-player and multiplayer levels. And a little bit about the folks who made Titanfall.
So years and years ago, a group of guys made a really fantastic game called Medal of Honor Allied Assault.
I remember this playing, or I remember playing this before I even thought I could make video games as a profession and loving it.
And then some things happened, and some of those guys made a new company called Infinity Ward, where they made the Call of Duty franchise.
And then some things happened, and those guys, some of those guys.
and me went to form Respawn Entertainment.
That is to say, there were a lot of talented people who had worked together for a really long time.
And because of that, there was a lot of collective institutional knowledge that created this well-oiled machine that had the skills and experience at making a particular type of game.
But now we had to make a brand new game.
And this was exciting, and it was scary, and we flailed around a bit, and we experimented with things.
And finally, inspired by different gameplay prototypes and pitches and concept, we found the core of that game, which was a first-person game with wall running and double jumping and giant robots.
And it was pretty great.
We also wanted to make a single-player game.
One that was new and went with all of those new mechanics that we had.
And that was a bit harder, particularly because we fell into some bad habits.
Like pitching levels as a series of cool movie moments.
Because this assumed that we knew what the core gameplay was going to be, but the movie moments didn't help create that gameplay on their own.
or long, meandering, brainstorming meetings that were full of arguments and whiteboard vomit and tears.
And on top of that, in AAA, you have a whole bunch of other departments that are just hungry beasts waiting to be fed.
Still, we spent some time making a single-player campaign.
And some of that stuff was really, really cool.
But the gameplay never quite got there.
Because of that, because of production constraints, we ended up cutting single player so that we could focus on making multiplayer, which ended up as Titanfall, this crazy mobility, giant robot, MP game.
And we managed to sneak a little bit of single player flair in there.
So when we finally got to make the sequel, we had some of the same questions and problems.
We knew we wanted a single player campaign, but we didn't know exactly how to get there.
We had a sense we were going to make a first person platforming shooter, something that used all of those things from Titanfall, like our mobility and our Titans.
But we also needed to change our process a little bit so that we didn't fall into the same familiar traps.
And that's when we had a design meeting, and the design team was told, go do some action blocks.
Sorry about that.
So action blocks.
are kind of game jam style design sprints.
The point of them is to encourage creative play and to get designers thinking about game play.
And they came with a few simple guidelines.
They needed to be quick and dirty.
I made this guy my blocky buddy titan.
Rather than finding a model and posing it and doing all of that, this was quicker.
I got him into the game.
And that is to say, these should be short.
They should take days or a week.
Every once in a while, if something's a bit more complex, it can take a little bit longer.
But we sort of had a hard limit on two weeks.
And that was the exception.
They should also be a single designer working alone.
Unless two designers work together because they complemented each other, like one designer doing layout and the other doing script for a particular action block that needed that.
And most importantly, things needed to have a skill test that could fit into a level.
So that could be platforming or resource management or combat or puzzles, whatever, but it had to be about gameplay.
And the designer was supposed to take that and iterate on it, dive deeper.
And to that point, we were not allowed to do awesome moments.
You couldn't just put something in because it was cool.
unless you were able to turn it into a gameplay skill test.
Now when we were finding gameplay, we were told that it was okay to be as abstract as we wanted.
It didn't need a theme, story, or setting as we were just kind of exploring what was going to be fun.
But, context wasn't necessarily discouraged if it helped get the idea across.
as long as it didn't suck up too much of that time developing the gameplay.
And finally, it had to be playable.
Not perfect, but playable.
We weren't going to do on-rails demos.
We needed to solve the hard design problems of making something fun for somebody else to play.
So that means pulling people in for hallway testing and iterating on the idea.
And this was super important because We were pushing into unfamiliar territory and trying to explore gameplay that was outside of our wheelhouse.
It was really necessary to make that playable so that we could figure out what the hard problems to solve were.
But it wasn't always possible.
See, sometimes you would hack controls, or there would be particularly difficult bugs in some of the more complicated action blocks.
If there's so much duct tape that it's not safe to let somebody else drive.
It's OK for the designer to do that as long as they're still working at solving the hard problems of how we're going to get the gameplay across to a player.
And then at the end, we did our show and tell.
We'd gather the whole design team.
Sometimes people from other departments would wander by.
And we would do this every week and show all of the action blocks that we had worked on, especially things that didn't work.
Because if you just stick those in a file cabinet and hide them away, other people are doomed to repeat them.
Sometimes the designers would explain what their thinking was or their process to help everybody understand it.
And if possible, when we were playing it, we would do a little bit of hallway testing right there, have somebody play it who had never played it before.
And at the end, we'd discuss, we'd give some honest feedback and a lot of cheering for the really cool things.
But there was no decision and no action items.
Like this was.
really about getting everyone together, sharing ideas, learning from them and getting inspired.
So now we just had to use them.
The design test, the first thing that we did was to take the design team and say, use your action blocks to try to figure out what Titanfall 2 single player was gonna be.
And this was a very open-ended exploration.
In the end, we did come up with what the core of the game was.
After a week, we had a bunch of different ideas.
We had a maze, a chase, a few different takes on platforming and mobility, an old school shooter, some Titan Buddy combat, a new movement model.
And we were all excited about the potential for the game that we could make.
We did this for another six weeks.
And we ended up with about 45 different action blocks, each one exploring a new type of gameplay.
And we were really excited at this point.
See, these specific chunks of gameplay cut through all of our grand prototyping and our rambling debates.
They gave the team a shared, clear vision of the game that we wanted to make.
So how did this work?
I'll go through the process a little bit.
I'm going to start with an example.
This was my first action block.
And I think it's representative of the process and some of the results.
As a layout guy who's done a lot of Geo in my time, I started with this question.
What interesting gameplay can I get with a Pilot and a Titan by just using layout?
My answer was a maze.
Now, as a kid, I loved mazes.
I've kind of always loved mazes.
As an adult who played games, I kind of hated mazes.
Because every first-person game that I've played that had a maze, I didn't enjoy.
But this was about the time that Maze Runner had come out.
And that changed the scale of what a maze could be.
And I got this idea.
What if, as the pilot, you got out of the maze, you looked at it from above, and you solved it, and then you got in the Titan and you went through the maze?
So you weren't hitting dead ends.
So I did some pen and paper stuff, and then I got in the editor and started blocking things out, and I made a nice, simple maze.
OK.
It really wasn't that simple.
I was frustrated when I played this and walked around.
So I started trying to work out the kinks, trying to do the design thing of solving the problems.
And I separated out different pieces of the maze, made them a little bit simpler.
Honestly, it was still over-designed and over-complicated.
I felt at the time like it was important to have a significant challenge that would really force people to get out and solve the maze, but I have a lot of sympathy for the hallway testers that I dragged into my office.
None of them enjoyed this.
They did exactly what I did every time I went through a maze, which is just kind of walk through and bonk my head into the wall.
So I thought, oh, they just need the right incentive.
So the next version, I added deadly ground lasers.
Because pain is motivation.
It turns out this was also not a success.
Pain and complexity just kind of make something really annoying.
So there were a few people who did what I wanted, but nobody enjoyed it.
And finally, I ended up learning the right lessons, which were to simplify it down, keep some of the things that I learned on the way about landmarks and even the damage.
but make it straightforward enough that people would go in, solve the puzzle of understanding the environmental exploration, go aha, and then get through it and move on to the next thing.
We played this at the end of the week.
Somebody played it who had never seen it before, and it was really enjoyable.
Everyone kind of gave it a thumbs up, and we identified, because of action blocks like this, a tone that fit in the game.
This particular one set up an idea that we could do light exploration and environmental puzzles as long as they were on the relatively simple side.
And we ended up having a lot of action blocks like this.
All of these were examples that didn't directly make it into the game.
Like there's no maze in Titanfall 2, but the tone in the central idea had a fairly direct influence on different parts of the game.
There is environmental exploration and light environmental puzzles throughout.
And then some of these early action blocks did even more than that.
So designer Sean Slaback had an idea.
He wanted to create an alternate use for the smart pistol.
Smart pistol was this auto-targeting gun from Titanfall 1 that was either the best or the worst thing in the world, depending on who you asked.
He made the gun lock on to switches that would cause panels to flip down and create a cool little wall running path.
The light context was a construction area, but more importantly, it was fun.
Like the maze, this action block helped us understand kind of what the core of the game was going to be, that we wanted to have platforming and that the platforming could be a little bit more dynamic.
Now, we didn't have any idea where this was going to fit into the game that early on, so we filed it away.
Until eventually, that is not the right thing.
Until eventually, Diner Jason McCord was blocking out the level The Beacon, and he needed a way for the player to traverse this big open area.
And he had a unique weapon for that level that locked on to switches, and he had a construction theme.
This action block fit perfectly.
And so he used it to traverse that space.
And this wasn't the only one.
There we go.
From crane puzzles to titans throwing the player, we had this good library of gameplay segments that we could pull from and slot into designs later on in development.
These were things that we knew were fun, even if we didn't know exactly where we were going to use them.
But action blocks didn't just tell us what we should do.
They also helped us figure out what we shouldn't do.
So if you look at Titanfall 1, we had pilots and we had titans.
And there were kind of these four food groups of gameplay.
There were human versus human.
There was human versus titan.
There was titan versus human.
And then there was titan versus titan.
And we, when we started on single player, we wanted to have all of that because they were all fun, good parts of what the game was.
So during development, during this early development, we used action blocks to explore each of them.
One of the things that we thought in particular would be great were human and titan interactions.
To be a pilot fighting a giant enemy titan or next to your giant big buddy titan on the ground.
We tried giving the player different special weapons.
We tried using disposable titans.
We'd had titans that would go into a shield state and get repaired.
And some of it was genuinely cool, but they also showed some very real challenges with this kind of gameplay.
Fights were either too easy because your big buddy titan destroyed all the enemies, or too hard for the little pilot on the ground when enemy titans were smushing you.
there were a lot of hard problems.
And at this point, we hadn't even figured out the fundamentals yet.
We still needed to get human-sized and Titan-sized combat good.
So we decided to just not figure that out this game.
Because of those early action blocks, we knew that we didn't want to solve that hard problem that would, if we had kept working on it through the whole project, led to bloated production.
And a lot of time where eventually we would have had to cut it.
The early action blocks let us narrow our focus and really not underestimate some very hard problems in design.
And all of these action blocks set up different fences for the design of single player.
By saying that, by saying no to things like mix, tighten, and human combat We were able to scope the combat experience to solve the problems that we already knew that we had to solve, like Titan on Titan, human on human.
Then there were some very special action blocks.
Sometimes you get context and you get gameplay, and it creates this defining moment in development.
Jake Keating had this idea.
What if the player could control time travel?
This is kind of a crazy idea, but he wanted to get in there and do it.
And he needed a context to make it work.
So he took this Titanfall 1 map that he had designed for multiplayer, and he made a quick overgrown duplicate of it so that it looked like it was from a different time.
And this set up the temporal research facility.
Then he set up...
some script so that you would teleport between the two locations at the press of a button.
And after that he built a path through the environment using that to explore different gameplay elements with his new ability.
It was awesome. The entire team just fell in love and he sold the idea beautifully.
We saw a great idea for a level, and much of it worked so well that it just made it into the final game.
Things that he did early on when he action blocked combat with his new ability translated really well.
And there were other cool platforming puzzles that he did because that's what he thought would be fun that, again, directly made it into the final level.
But this did something else for the team.
It also showed us what a level could be.
what the tempo and the sense of timing and pacing and how all the different parts of mobility and puzzle solving and combat, how they could fit together into one space.
And this was really wonderful.
This was also the only action block that made it directly into the final game as an entire level like this.
There were other ones that had this kind of levelish action block.
feel to them. And they helped us evolve what our sense for a level was going to be.
But they really weren't the defining aspect of this early action block time. It was all of the action blocks together. The things that inspired us and the things that guide us and the things that set up those fences. And even ones that didn't come close to making it in the final game had very real impact on what the final game was.
when Moe Lavi made this awesome action block that was absolutely never going to ship.
So he wanted destructible environment.
And it was awesome. Like the titan walking through the buildings was great.
And there was gameplay in there. You'd play hide and seek with this giant robot who was smashing through buildings.
But it was way out of scope for the team and the production schedule that we had.
There were code reasons, and design reasons, and production reasons, and art reasons.
And it was just too much.
We weren't going to be able to do it.
But in a really unexpected way, it was the inspiration for the level that I worked on for most of the project, Into the Abyss.
Now, not only did Mo's action block inspire this level.
But action blocks also played a significant role in shaping the level.
A little bit of background.
Into the Abyss is the third level in the campaign.
It's sort of a Mines of Moria.
It's a shortcut through a bad place to get to the other side.
It ended up being this crazy underground factory that constructed military test chambers, but it started with Titans crashing through walls.
Because after finishing that action block in that sort of six week sprint, we actually started designing levels, or pitching levels is a better way of putting it.
One of our designers, David Shaver, wanted to do the destruction that he saw in that action block.
And he knew that we weren't going to be able to do it for the scope of the entire game, but he thought, well, what if we limited it to military testing facilities that were made out of plywood shacks?
And then you could destroy the town with robots and stuff.
And then you could replace the town again.
And it was literally a boom town, a town that goes boom.
So the pitch went on.
If you're going to replace this town that's being destroyed, you also need this crazy automated factory that keeps replacing the parts of the town.
And of course, as the player, you'd have to go into that factory.
I heard this pitch, and I got it.
really excited. I thought that there was a lot of potential. And the factory that built towns, it tingled something in my brain. And it made me think of this particular piece of concept from Jung Park. I love this concept. I just thought this was beautiful and inspiring. And I thought, well, this fits really well with those towns that Schaeber was pitching.
What if we tag team on the development of the level?
I had more Geo experience.
He had more scripting experience.
And we could both design it together and come up with a pitch.
And he said, sure.
So we rolled up our sleeves and we got to work.
And this was diving deeper and trying to design a level.
It's coming up with and pitching the entire thing.
So trying to figure out what the story was, what the characters were going to be, and the setting, and the beats, and the cool moments, and of course, the game play.
Often, the gameplay would be inspired by those early action blocks.
And we did cool platforming early on.
What if we were wall running on those grassy panels?
What would it be like to play in that factory?
Or we would expand on the town fighting idea.
Like what about the town collapsing around you?
We wanted to find the best gameplay though, before putting it into the final design.
So while art was diving deeper on a style for the level and we were exploring layout and story stuff, we also took those ideas and used action blocks to drill down on the gameplay.
And we started with a little open-ended, context light, context light action blocking.
The idea was to quickly play with ideas and figure out what was going to be fun and what was going to work in the space and get a handle on what the fundamentals were.
So as an example, platforming in that factory.
So art was worth wasting no time.
Todd Su, the lead environment artist, did this 3D sketch of what the giant underground factory could look like, because this is the obvious place to put a factory.
It looked cool, so we figured, yeah, we should use that.
And I used this with those ideas of big grass panels as a starting point to do some simple platforming action blocks.
I blocked out a space that looked almost as good as what Todd had done.
And I put some giant rectangular grass panels in them.
And over a few days, I played with static platforming.
And I started.
those panels moving across and then moving up and down, using them as elevators, just trying different ideas.
And this created a library of gameplay ideas, but also helped me solve some of the design problems.
How do I translate my skills at making mobility in an open multiplayer environment to a linear path that we're trying to guide a player down?
I figured out what worked and some of what didn't.
While I was doing this, Shaver had a different approach.
He wanted to play with hazards and riding along those platforms.
So he thought of things that could knock you off the platforms, or things that you had to jump over, or things like these beautiful rollers of death that had pretty simple and straightforward platforming to get around.
Now, really didn't have a clear idea of what these were going to be in the factory.
But they were fun, and that was the first thing.
And they also solved some problems with first-person platforming, like letting the player know that there was a big threat they needed to watch out for and having simple platforming navigation so that they weren't overwhelmed by what they had to do.
So we took this and filed it away in the library.
Now, how does all this make it into the final game?
Eventually, we started.
doing level design.
Shaver wrote the level design doc.
And this is a page from that section about the factory.
I actually took this doc and did the layout for the level, or this chunk of the level, and started with the grand reveal of the world foundry.
So I wanted to do the best grand reveal.
And I went and asked an artist, specifically Jose Zavala, who was the.
environment artist that was working on the level.
And I said, OK, we have this big factory.
What's the best view to look at it from?
And he gave me this view, which had a problem, because that's where I needed to get to.
The doc, of course, reads, the pilot crosses the chasm on blank moving terrain panels.
So this line existed because of those old action blocks.
We didn't have to have the specific details of what the platforming was going to be.
Figure that out when we're actually blocking out the level.
But because of them, I was confident that I'd be able to make good platforming to cross the space.
So I added some platforms.
And then I got them moving.
And then I did a little bit of testing and a little bit of tweaking.
and made some adjustments, and eventually it was a fun little platforming that got you across the section.
I also added a little bit of context in my block out.
But just enough to get across the space, the timing, the important points, so that when art came in and the scripter finally made it work, for real, it could all come together.
So when we got to full production, Chad Grenier, who scripted this.
section of level, he came in and he just made it amazing.
The timing was adjusted a little bit.
There were definitely slight adjustments to the positioning as the robot arms were taken a bit more into consideration.
But fundamentally, it was building on the platforming principles that we'd already established.
Now, we had another problem, which was, how do we get our pilot from one platform where he's just?
squished a bunch of bad guys to the next platform where he's got to fight new ones.
Again, in the document, it said, the pilot jumps on a grassy terrain panel and rides to another assembly area.
Well, riding didn't seem quite interesting enough.
And we actually still needed the detail of how the grass got added to the panel somewhere in this design.
So I came up with this freaky farm equipment hybrid.
It looks like a machine that.
you know, adds grass to things.
Art agreed that we could probably make something work like that.
But then how does this translate into gameplay?
Well, that's where Shaver's action blocks came in.
See, his exact layout of action block platforming, where you jump from one to the other, that didn't work in the space.
But the general lessons, the big hazard and simple platforming, that actually worked really well.
So when I ended up blocking this out, I got to a point where I made a simple platform that you jump on and then you see the giant rollers of death.
And that forces you into the one path, which is a simple wall run.
You jump around the other side and when you land on the platform, it's covered in grass.
We ended up making a lot of abstract platforming action blocks.
And some of them, like those, made it in.
There were lots of them that didn't.
They didn't work or they didn't actually fit the gameplay that we needed, but all of them guided the gameplay in the section.
They were lessons in how to design that kind of platforming gameplay.
It's kind of like how a good piece of concept art guides the visuals of a level without actually giving you the level layout.
These action blocks guide the gameplay and give you a target to shoot for without necessarily saying this is exactly what you're doing.
But we did use them in a lot of other ways too.
More specifically, we wanted to try to use action blocks in a more focused and directed way.
So we would take an initial idea and then explore it with theme and context and try to figure out what was going to work.
In this case...
what are the details of a factory? So we started with some just factory reference.
How are cars built or houses? Because apparently there are factories that build houses.
And this inspired memories of I think one of the greatest science fiction movies of all time.
And this particular scene.
Well screw that!
How are we supposed to get through this?
I don't think she said screw.
So what about something like this for our crazy factory assembly line?
I took that and decided, well, we need to make panels.
We need to make parts of these houses.
So let's block out an actual assembly line.
I started with it turned off.
static environment that was blocked, but that you could go through and do some simple platforming on.
You get to a control room, and you turn it on.
And rather than trying to make it work in that area, I just teleported you to another area where everything was already moving.
And then I started playing with a bit more context ideas, like laser things.
And screw this.
These were terrible.
It was not fun at all.
But rather than, you know, redesigning that little chunk, I just kind of went forward and I started doing things that you could jump over, figuring out that, oh, if you had a place where the player could stop and rest, that worked better.
And, you know, adding these in a row and having fire, like there were different gameplay things that worked.
And we got to some place where some of these were really pretty fun.
Learned some good lessons.
And then I moved on to a different problem.
What about building the house?
Because this was another idea.
We thought, wouldn't it be cool if you had the house built around you while you were fighting on it?
So I made a really simple frame.
I put some enemies around you, and while you were fighting them, I just had the walls of the house start to drop in and block up the fight.
It was fun.
Like, it was a fun little dynamic moment.
when I played through it.
And then when I had other people play through it, I started to see some problems.
They didn't just stay on the platform and wait for the walls to fall into place.
So the next version, I added a little bit of cover in there, those white walls that are now around the frame.
That drew people to them, because cover always draws people.
And they stayed there, so they were in roughly the right position while the walls dropped in.
Now, sometimes people would ignore that completely and then just run off to go fight the enemies.
So the next version, I ended up putting it over a giant pit.
And that kept the players on the platform because they didn't feel as encouraged to run and jump off.
The walls kept them roughly where I wanted them.
And I still had some problems with players being squished.
So I ended up making the walls come in from the front.
But this was a pretty cool little moment.
And I'd solved some of the design problems with making this kind of gameplay and space work before we were in full production for the level.
Now, it turns out we had to make a decision.
The problem was, in the final level design, considering production constraints, we couldn't do both of these.
We had to pick one that was more fun and better.
But because we had the action blocks to look at.
it was easier to make that decision.
Getting the house built around you was the more enjoyable, the cooler choice.
We didn't need to, on top of that, there were a couple of extra bonuses from doing those early action blocks.
We didn't need to discover the design lessons all over again when we were in full production.
The cover was already on the platform.
I knew it needed to be over a big pit, which worked really well in that giant underground space.
So.
I just put them in and blocked it out when it came to blocking out this section.
The other thing that we got out of those high context action blocks were good reference for art and animation and script.
See the level block out when relatively quick and it saved a bunch of time to be able to see to say this is what we're going for.
Now there was still a ton of work to do from a lot of valiant people to put all of this.
together but we had already solved the hard gameplay problems so at least that wasn't getting in the way and causing us to redo animations and change art and set up like different rigging throughout the process. We didn't waste time with that. Unfortunately there are some things that just don't work out. There are ideas that you just love and those ideas are almost too good to test.
And action blocks are so far the best way that I've found to test those exciting and kind of untested things Figure out what could make them fun or that we just shouldn't do them So one of the earliest things As I mentioned a while ago now It feels like was that we wanted to have the test chamber combat like that was a big part of what the level was going to be the town was going to switch around you. So while you were in a fight, we wanted floors to drop out and buildings to be raised and everything to change in this dynamic battlefield and give you alternate ways of flanking. And it was going to be really cool. And it sounds really cool. Like all the ideas we had when we were talking about it were great. And we spent weeks trying lots of variations on this.
Simple rooms with just very clean flank paths where you could go underneath and you would drop stuff out It was okay, but it didn't add anything to the fight when you could just shoot the guy who was across from you We tried more complex interesting environments with bigger enemies and a chance to use your mobility underneath and it ended up being too Challenging and there were still reward issues and on top of that once you get underneath you didn't understand what was going on up above you Interactivity.
Shaver made these cool pistons that you could shoot from underneath.
And you could shoot them while enemies were standing on them, and it would drop guys down and kill them, which seemed like it was going to be obviously great.
And it still wasn't worth it, even when there were giant rollers that they fell into and they died.
We didn't stop there.
There were so many more action blocks trying to figure this out.
Buttons on the top that would drop panels.
Sometimes we did some puzzle game play in the arenas.
We tried all sorts of enemies, glass floor, whole houses being built around you.
But there were really too many problems and it never ended up being fun.
They were a little bit too random.
There wasn't enough reward.
It just didn't quite work out.
I'm sure that there is a solution and that there is a really cool dynamic arena fight that can happen somewhere.
but we did not figure out what it was going to be.
And so it didn't go into the final design.
We still got cool stuff out of this time.
We learned a lot.
And there were even things like this little section that, again, a little too random when you were fighting in it, but it ended up being a template for moving the town into position.
And honestly.
It was really great that in the end, it just ended up being this little intro to the town.
It's a cool scene and it feels good when it's happening.
But more importantly, we figured this out before we were neck deep in production trying to do that final push on the game where everyone is in full swing and you're trying to figure everything out, not having to figure out what that dynamic town gameplay was then because we'd already decided not to do it.
was incredibly valuable.
So let me give you one final example in the process.
Much like the noble platypus, nature's Frankenstein monster, there are lots of different ideas and things that come up in development.
Design is busy designing, art is arting, coders are codering.
And we're getting a lot of new things.
And throughout development, action blocks are...
a nice way to experiment with those new things and then try them out and see if you can mush them into the level that you're working on. So to step back a little bit, there was a time where we were still convinced that we were going to make that dynamic town work and that it was going to be fun gameplay. During this time, like I said, Art was still exploring the space. Well, I went down to Jose and I asked, how could we make this happen?
without using magic floating platforms.
And to me, because I wanted those individual pieces to come out, I thought, oh, let's do giant robot arms, and they'll pull out some and replace it with others, and we can do cool stuff.
So he begrudgingly obliged me and made this little mock-up.
But he had another idea.
He thought, well, what if we put all those long panels together in a strip?
And then that strip is mounted into this big underground cavern where it rides on rails, and that moves up to position.
I hated this.
It was so against the gameplay that we were at the time trying to figure out.
It was a great idea for solving the mechanical problem, but it didn't fit the arena that I thought we were going to make.
So I filed it away.
Now I'm going to jump to the side a little bit.
The tech that we had initially did not support players interacting with moving geo.
We knew we wanted to and so code put it on the schedule and John Haggerty, one of our programmers, made it work.
And it supported players navigating and wall running through stuff like this.
Now, I'm flying around it just to show you broadly all of the things that Jason McCord took and experimented with once this feature came online.
He made this big abstract funhouse where we could just...
play, or he could just play with a bunch of different ideas, and try things to figure out now that we had moving Geo, what was actually going to be fun, a fun challenge for the player to do.
At the end of this giant, crazy Plinko machine that he had, you'd get to the top of it.
And when you landed here, under your feet, the entire thing would start rotating.
And it would go from vertical to horizontal.
And this was just a great example of like what you can do with action blocks.
You don't even know like where it's going to go.
But it was really cool and it was really inspiring.
So again that got filed away a little bit jump to the side one more time.
Shaver and I were talking about the overall flow and layout of the level.
And we had a problem which is how do you get from the factory to the arena that the factory has built.
Now, we knew a few things at this point.
We knew we were going to have a factory, and we knew that we were going to have the house built around you.
We also knew that we were going to have an arena and that it wasn't going to be dynamic.
And I was just sitting there and kind of thinking about this one day when I had an idea.
That sort of clear, beautiful vision where maybe you start in the house in the factory, and that moves through the space.
And it gets turned on its side and stored in this sideways town that you do platforming to get up.
And then that entire town flips directly from McCord's funhouse.
But also, because Jose had done that particular type of contextualization, that would be a good delivery system.
And then you'd get to the top, and you'd fight.
So action blocking this, I got into the editor.
And I just started building a little town.
I instanced it and stuck it on its side so that when I was in the test map, I could fight around the town, walk around the town, and then jump up there and try to do some platforming.
And I learned a couple of valuable lessons about guiding the player and mobility in that kind of an environment.
And then I just took the thing, and I cut it into a bunch of different pieces.
And I took all of those pieces, and I did the brute force like mash them.
riding down a hall and then onto the side and I put a couple of rails on the side to sort of imply where it was gonna go.
And then eventually made it playable.
This was kind of a bit risky as a total idea, but it turned out that it worked pretty well.
And like the other action blocks that I did, I learned a lot that guided us in making the final.
block out of the level.
I got a lot of confidence that I could make something that would be fun, even though I'd have to make some changes to make it work.
And I made a template for what the final section was going to look like and what the gameplay beats could be.
Not one-to-one, things definitely changed as we did the work, and Chad added a whole bunch of touches to it when he was scripting it that made it better.
But personally, this was, I think, one of my most successful action blocks.
And there were a lot of them throughout the entire project of Titanfall 2 that influenced the final design of the game in so many different ways. We had other abstract action blocks from all sorts of other designers. We had wall running on spinning concentric rings and arbitrary wall hazards. We had level experiments like deadly sludge and poisonous gas.
We played around with core loop for mobility and combat exploration, and the list kind of keeps going on and on.
Directly or indirectly, all of these influenced the final design.
Now, this whole talk might imply that we actually got the process right in Titanfall 2 development, but it was genuinely a bit more messy like game development always is.
And we made some mistakes in how we used action blocks.
I think I've tried to give a bit more of an idealized process than what it was actually like.
But I'm going to try to help you avoid some of the same pitfalls.
So one of the things that we fell into was naturally just trying to make something perfect and polished and finished.
But action blocks are supposed to be quick and dirty.
You're supposed to get to them.
and get them done and then move on, generate more ideas once you've found the good gameplay.
And there is some friendly competition that goes on.
There's a little bit of action block envy, especially when you see Jake's time travel action block.
It's a thing to watch out for only in that it can lead to spiraling out of control to the point where action blocks blow into this giant thing.
They have to be kept.
quick and dirty. There is definitely a problem where the action blocks can create the impression that things are going to be easier than they are. It's a lot simpler to move a few pieces together and make a house than it is to art and rig and animate.
and deal with the collision on having a house in there.
And so things like that, as part of the process of designing the levels, they just need to be called out.
And the real production cost has to come.
And it's easy to spend a lot of time doing action blocks that imply a much bigger game than you actually have time to make.
We did that a little bit.
There's also a problem with making action blocks that are a little too abstract, unless you end up with a game that's a really abstract game.
Because at some point they need to be turned into the real world equivalent.
Now this doesn't mean that you shouldn't make abstract action blocks, just that the part of the process where you decide what the thing really is, has to happen during the level design phase.
You don't wait till the end of the project and say, hey art, make something that looks real here.
you figure it out while you're working on it.
And finally, action blocks are not level design.
I personally fell into this trap a lot, where I would do both, not only a little bit of block out, but a lot of block out, and then I would just kind of like mash action blocks in, and it ends up being an easy trap to fall into, but it's really important that action blocks in the gameplay prototyping are separate.
from the actual problems of solving game flow and level design, and that they're not mashed together.
So we have actually formalized the process a little bit because of some of those problems that we had with it.
We do use action blocks early on to find the gameplay foundation.
Sometimes we do them with no direction, and sometimes we have light guidelines, like play with titans a little bit.
We also use them to get 100% confidence in our level designs.
We try to find the most fun gameplay, but also make sure that we've solved the hard gameplay problems before we commit to them in the production process.
And then we continue to sprinkle them out through as inspiration strikes.
And of course, the rest is just making games, which is the easy part.
So I would really like to thank everybody at Respawn.
It is an incredible team of people to work with, and especially the design team, who I wish I could call out all of their individual contributions to that whole process.
There are so many of them.
Additional special thanks beyond the people I already mentioned to Carlos Pineda, who helped me with the submission process for this.
And to Rick Grubel who captured almost I think all of the video footage you saw and really just saved my bacon. And GDC for having me and Amy Hennig for mentoring me through this process.
And finally, my daughter for her artistic contributions and my family for their love and support. I am Soupy. I twit relatively infrequently at Mr. Soupy. Thank you so much for coming.
And I believe we do have time for questions.
There are mics.
Hey, I've got a question.
By the way, awesome talk.
Thank you very much.
Thank you.
I've got a question about the production scheduling of action blocking.
You mentioned at some point that the player interacting with dynamic environment feature was not in the beginning of the production or in pre-production.
I'm just wondering where, how do you reconcile the lack of gameplay features and systems with building prototypes that require them?
And how do you, do you assume that you will get these systems later on or like where do you, at which point do you do these action blocks basically or do you polish them later?
So let me see if I'm clear on this.
Your question is about when we do, when we commit to.
other things that we need to do for production of the game versus when do we do the action blocks in the production schedule? Yeah, exactly. Okay, so we try to do the action blocks, the big action blocks very early on to get a general idea for what we wanted and so for example we knew because of those early action blocks that we liked platforming with moving geo but we also knew that we kept getting stuck in the moving geo.
So, one of the earliest code schedules, because we knew that there was something good there, one of the earliest code features was, okay, let's make that.
And we use that to sort of imply what we're going to do later.
And then as the project goes on, we tend to be just a bit more aware of what we have the time to maybe add in as a code feature.
Versus you know what we should be prototyping with action blocks and we tend to be a little bit more selective about prototyping action blocks It'll represent gameplay that we can actually make in the time that we have left All right, thank you So you stop action blocking like in the beginning and just don't come back to it later on you just use whatever was there We'll use it what we do action when we do action blocks for levels throughout development We'll use it more in the context of the tech and the features that we know are going to be coming online or that we have online.
So we still will do action blocks, but they're more limited in scope to what we can reasonably make.
OK, thank you.
You're welcome.
Hi, a bit of a similar question.
In your first round of action blocking, it sounds like you had a leg up because you were making number two.
So you already had your.
traversal mechanics and your metrics.
So how would you approach doing the first round of Action Block if you're working on a new IP?
Yeah, so the question is how would you approach doing Action Block on a new IP where we really didn't have, where you don't really have anything?
I think I would take more of an approach from like a game jam.
perspective so.
And that was a little bit similar like there were we did have experiences that were kind of like that during Titanfall one development and that's where some of our first game play John Haggerty would.
Made all the moving geo he made the first like wall running and double jumping stuff in source and some of that was just.
Coming up with the idea and then in a similar way making it work as quickly as you can.
The problem there, of course, is that you have so much more of a broader place.
And so I think there, it's important to have the step before then, which is to just do a little bit of that talking about and pitching ideas and coming up with potential games that you want to make so that you know what the first set of things you want to experiment with are.
And then treating it a bit more like a game jam where it's, okay, what are we going to figure out with this?
Okay.
Thank you.
Welcome.
So this is a bit of a follow-on question to contextualness, but you mentioned the, like for instance, the prototype that you were working with, with the building house and everything, and obviously that has quite a tie into the environment that you're going through, and I was wondering if you're mindful of the narrative that you already have at that stage, are you thinking about that specifically, or are you trying to not think about that and then shape that later?
I'm wondering where the narrative sort of flows into the types of prototypes you're coming up with.
Are you asking about the narrative of the entire game, or the narrative of like a specific level?
Well, you had a specific script for what the pilot does and the environment they go through at this particular stage, but was that, it was loose enough that it could fit into any particular environment, or?
No, that was actually more specific in that case to the way that that level was being designed, and some of that was because in this particular case, we were doing the action blocks alongside trying to come up with the level and the story and the beats and what the tone was gonna be for the level.
In...
you know since then the way that we've tried to refine and formalize the process is to do the action blocks kind of before with only a rough rough sense for what the beats are going to be so you know when you're doing the brainstorming come up with the this is what i think the level is going to be and then uh based on that go oh this would be an interesting place to play this would be an interesting place to play and go in and start doing more specific action blocking around figuring out what that gameplay is going to be.
But the actual level design as it was described, it was aware of what those action blocks were and some of that prototyping and all that kind of discussion that went on with it.
Cool, okay thanks.
Yep.
I was just wondering how you would apply action blocks to something like an indie group that had maybe up to five to 10 people as opposed to a very large company like Respawn Entertainment.
Hmm, how to apply action blocks to a smaller indie group.
I feel like the biggest difference is in what happens after having done the prototyping phase and how you transition from that to full production.
And in some ways taking that into account when making the decisions about what to go forward with.
So with a bigger company like Respawn, where we have fairly big animation and art department and they're really good and you can kind of say, all right, we need all of this.
It's a little bit easier to say, these are all the pieces that we wanna have and kind of try to do everything.
And I think, I would think with a smaller group, you'd get the same benefit of.
finding out what the gameplay was that was going to work, but then have to be a lot more diligent about what in production you decided to focus on and what you actually had the time to take from it.
Because, and I didn't even get close to this, like I showed the grid of 45 action blocks, like there were probably 200 by the time we shipped the game and it was way more than we could actually, we could make in the time that we had by a large amount.
And part of the process, which I don't think we respected as much on this project, was that step of saying, here are a bunch of good ideas. Let's decide on only the ones that we have time to make.
And I think the big difference would just be would be in being how selective that would have to be, and at what point you'd need to cut off and decide. Thank you. Welcome.
And I think we are now done. So thank you all very much.
