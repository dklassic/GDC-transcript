Hello, everybody, and thank you very much for coming.
I'm Tynan Silvester, and today I'm going to be going over RimWorld, Contrarian, Ridiculous, and Impossible game design methods.
But for those of you who might not be as familiar with it, I just want to run the trailer and tell you a little bit about it.
So RimWorld is a space colony simulator in which you land on a distant planet and it's sort of a space western and you construct your base.
You farm stuff and your characters interact, you'll trade, they develop relationships, they fall in love, they fall out of love, they have ex-breakup fights and go to each other's weddings and get drunk and do things they probably shouldn't do.
And over time you develop a base.
and continue in that direction.
So, with the design of RoomWorld, I tried really hard to approach the problem in a different way than what I saw as the usual. So today I'm going to talk about some of those contrarian approaches and the beliefs that make them possible.
The core idea here is not about what to do specifically, but rather how to change the mental framing of design problems to try to find new solutions.
Because if you frame a problem in the same way as is automatic and common and typical, then often you will get the same answers as everyone else.
But if you frame a problem in a new way, valuable new answers can arise.
So, on to RimWorld.
One of Emerald's greatest inspirations is, obviously, Dwarf Fortress.
So hats off to Tarn Adams for that one.
But I wasn't actually inspired by playing Dwarf Fortress as much as I was inspired, because I can barely play Dwarf Fortress, as much as I was inspired by the stories people created from Dwarf Fortress.
Players have used Dwarf Fortress as a storytelling tool.
by playing lawn games and writing down what goes on and recording the events, taking screenshots and embellishing it all with poems and stories and art.
So some of you might have heard of stories like Boat Murdered or Gem Clawed.
And these are epic tales of creation and destruction and humor and victory and ambition and tragedy and interpersonal tension and alcoholism.
And this fascinated me because The emotions are so varied.
I've long believed that games attract us because they yield emotional experiences that people find fulfilling.
And I think classically, games deliver what I call the arcade emotions, which are basically suspense, triumph, and defeat, and the emotional sphere surrounding those.
But in Dwarf Fortress stories, the emotions were much broader.
They were the emotions of story, and character, and empathy.
Like the feeling of discovering a character is jovial or evil or prideful.
There's an emotion to discovering who someone is.
Or pride in seeing an evil character reverse themselves and become good.
Or disappointment when a good character does the opposite.
Laughter at absurdities, anger at injustices, and worry over wounded friends.
And these kinds of feelings speak to deeply ingrained human needs that go beyond skill and competition.
And so why did so few games seem to be yielding these experiences in a systematic way?
I think part of it is social momentum.
I mean, back in the 80s, you had arcade game designers, they wanted to get people to put quarters in, and so a great way to do that is to make an infinite difficulty game that anyone can start out playing, but no one can ever finish.
They absorb any level of skill, and they take in money by selling you lives and continues.
And a lot has changed since then.
But I think we're still living in a design culture that echoes that founder effect, those founding ideas.
Even the name of what we're doing here, games, it's the Game Developers Conference.
Even that has assumptions embedded into it.
Typically, if you talk to people about games, games mean competition, victory, triumph, defeat.
The word game does not refer to the emotions of picking strawberries with your child, or going to the beach, or laughing at some comical misfortune, or the pride of creating a story.
So when someone says, I'm going to make a game, before deciding anything else, they've already set a mental frame on the problem.
And if not careful, they've potentially subscribed to a set of assumptions that could limit them.
And of course, I'm not the first to notice this.
So we do hear a lot about doing narrative in games, and this is a really good impulse.
Often, though, this means importing other assumptions from books or movies and sort of ramming them together with games and kind of doing the two side by side.
So, and even then, saying, I'm gonna make a story is just as much of a cognitive prison as saying, I'm gonna make a game.
But what I saw with Dwarf Fortress and the stories that it's created is a glimpse outside these constraints.
So from very early on, I said specifically and explicitly that RimWorld is not a game.
It's not a game.
RimWorld is not a game.
And I have to keep repeating it, and I have for years, like a mantra, because it reframes everything, and it's so easy to slip back into the game framing.
Nor is RimWorld a story.
I'm not here to tell a story.
The game is not there to tell a story.
RimWorld is a story generator.
The player interacts with it and stories emerge from that interaction.
So let's look at examples of how this reframes some design decisions.
First one.
One common complaint among RimWorld players who are really skilled is that they play really well, but they still get their face beaten by the game.
And they feel this is unfair because they think that their skill should be rewarded with commensurate success.
And since this comes up so often, I've actually named it the skill test assumption.
It's the assumption that skill should be rewarded proportionally.
And this seems kind of obvious, right?
Like, the player's more skilled, so they have more success.
But hold on.
It's not a game.
It's not about winning and losing.
Success isn't assumed.
It's not even important.
Stories can end in success or failure and still be great stories.
Every tragedy from Romeo and Juliet to Ex Machina ends in horrifying failure and loss for the protagonist, but those tragedies are rich and moving emotional experiences.
I mean, imagine applying the skill test assumption to.
stories, like a movie. Imagine a movie where the protagonist gets exactly their rewards proportional to his skill level.
I don't think it would be a great movie. I think this is the opposite of a good story, but it's exactly what a classical game is supposed to be.
In writing, they'll teach you that one basic principle of good stories is that the protagonist pushes against some challenge and gets an unexpected, disproportionate pushback.
So you look at examples.
The movie The Matrix.
Neo is exploring the mystery of the Matrix.
He doesn't even know what it is.
And suddenly he wakes up in a tube of goo with wires down his throat.
That's a disproportionate pushback.
In Star Wars, Luke is basically just bored and he doesn't like the Empire and he wants to help out against it.
And he ends up holding a laser sword fighting a dark lord.
An alien, Ripley's crew, looking to make a few extra bucks from some distress signal, and they're hunted by a xenomorph, by a weapon, perfect organism, that's going to kill them.
And this is the opposite of the skill test assumption.
So I think we have to choose.
If we're going to make an accurate skill testing game, we cannot generate a good story, at least not in the mechanics.
Games with split story and gameplay can do this, because the scripted story.
presents the unexpected pushback against the characters, while the individual game mechanics challenges reward the player's skill.
It's like a back and forth structure.
But with the game generating the whole story top to bottom, characters and all, initialization and conclusion, it doesn't work anymore.
So that's why while RimWorld does acknowledge player skill, and we do try to reward it in many ways, The game is very deliberately willing to harm players who are even playing well.
Because if it couldn't, I think it would be badly hobbled as a story generator.
Another aspect of RimWorld that makes it work without matching player rewards to skill is how it handles failure.
To have tension, I think a game has to threaten the player with some sort of consequence.
That's what's in the balance.
In classic games, this is, the game is over, or you failed the skill test.
And this makes sense, because these games are all about testing skill.
Once you've failed the skill test, the question is answered, the test is done, there's nothing else to find out.
Stories are different.
In a story, attention is maintained by threatening things that the characters care about, not by threatening to end the story.
So in RimWorld, when things go wrong, they're designed to go wrong such that the player loses some story element that they care about.
like a pet or a loved one, but the game isn't ended.
We just keep going.
We play it out.
And this works because the player's invested in these things.
In StarCraft, you don't really care about any one of your Marines, right?
There's nothing to make you care about them, except insofar as they can help you win.
All you really want is victory.
But in RimWorld, you care about your characters because you've gotten to know them.
And losing even a character who might be kind of useless in terms of victory can still be a little bit heart-wrenching.
And losing things is a good story.
Losing things is emotional, it's powerful.
It sets up the stakes for later on.
You remember Psycho, the movie.
It starts out with the woman.
She goes out to the hotel, she's looking for something, and she gets stabbed to death like a third of the way through the movie.
And you all think that she's the protagonist.
But the story doesn't end.
It just goes on with other characters.
And the fact that she got stabbed and killed raises the stakes later on.
And that's how RimWorld handles failure.
So here are some examples, specifically, like of game mechanics.
When the raiders win a battle, they don't just keep going relentlessly and massacre everyone in the base after they've broken your defenses.
They used to do this, but in later versions, We discovered that if the raiders become satisfied with kidnapping somebody or stealing some of your stuff and leaving, they leave you to recover, you can rebuild and you know the stakes next time they're coming after you.
Even if your whole base burns down, you can rebuild a new one right next to the ruins or in the ruins.
If your colony's in a poor state, your characters get low expectations mood bonuses so they can continue to function at a lower wealth level without the creature comforts of a rich base.
and that lets you have some space to recover without everyone just falling apart.
And when things go really bad, the player can even flee their base in a caravan and go somewhere else entirely.
And we've just emergently created that old Western story trope where the protagonist flees their village that's burning behind them with their family dead or enslaved, looking to get revenge or start a new life for whatever goal they might choose.
It's the same as when Luke's parents got roasted at the start of A New Hope.
I call this elastic failure, because instead of failure being a brick wall that you run into and shatter on, it's something that stretches the failure state.
You enter a deeper and deeper failure state, and those failure states tend to be very dramatic and very storyful, because it's in the process of failure and the process of perhaps recovering from that, that if we can stretch that out, that produces those dramatic situations.
Another example of applying the story generator concept is RimWorld's approach to game visuals.
So typically, I think when we evaluate game graphics, the most obvious way to do it is to say, how good do they look?
How clearly do they communicate gameplay?
And these are generally pretty good criteria.
But if you're making a story generator, the frame is different.
What purpose do the visuals serve?
To communicate the story.
They don't have to look detailed to do that, or beautiful or realistic.
In fact, it might be better if they were less detailed, less beautiful and less realistic.
Because a story is not a sequence of images, it's a sequence of events.
Images are just one means of communicating those events.
But there are others.
When you read a novel, or you listen to a friend tell you a story verbally, your mind fills with the situations and the characters and the emotion.
And you feel the story.
And those situations and characters and emotions are what the story generator's trying to create.
And none of them are visual.
So all that stuff on the screen, it's not the end product.
The end product is the understanding and emotions and internal experience of creating and enjoying that story.
So Rimworld's graphics don't actually attempt to look maximally beautiful, or realistic, or detailed.
I think of Rimworld graphics as a system of symbols, like Asian characters a little bit, or icons on your phone, and they represent abstracted objects.
To me, Rimworld graphics are as important as the typeface on a novel.
It can be better or worse.
But in the end, I don't care, except in terms of how effectively it transmits the story into the player's mind.
So, how do we do that specifically? In RimWorld, this is what I tried to hit.
Number one, not ugly. If it's painful to look at, or it looks awful on video, you're not going to sell that many games because it's just ugly.
It's actually unpleasant to look at.
So we try to definitely at least reach the threshold of beauty where you can look at it without psychic suffering.
uh... easily identifiable visual characteristics have to be very easily to identify for what they represent this is in conflict with conflict with abstraction a little bit it makes it easier for new players to to play or for people watch a video or trailer and understand what's going on which is important minimal noise making the graphics really simple reduces the noise in the image and that reduces the cognitive load to read the image An image with a lot of detail everywhere might be beautiful, but when you're talking about a game like RimWorld with potentially hundreds and hundreds of objects on the screen, scanning through that with your eyes and finding what matters to you becomes harder and harder the more details in there.
Intensity hierarchy.
This is one way of helping people determine visually what is important and what is not.
So it's essentially a hierarchy of what you call visual intensity, to draw the eye more strongly towards things that are story relevant and let the eye slide over things that matter less.
As a simple example, characters and buildings in the game have solid black outlines, but plants have dark green outlines or no outlines at all.
And this means that plants tend to blend in the background slightly.
You can still see them, it's not difficult, but the characters really pop out.
So if there's a big field of trees, and one character on it.
The character is, looks like he's in the foreground.
And the plants are all sort of smeared together.
And it draws your eye there.
And the same is true of items, gold, food, all have black outlines.
Plants, no.
Second to last, fast implementation.
For Rimworld, I really just made graphics really, really quickly.
Skipping over the need to worry about animation and complex graphics made it possible to inject more story content into the game, more mechanics.
A lot of this stuff would be almost impossible to do if we tried to do it anywhere near the standard that a lot of games go for with their graphics.
Because if the only goal is to enrich the story, you cut whatever details you need to to make the story as rich as possible.
It's all about focusing on that one target of being a story generator that works well.
And finally is leave room for interpretation.
I'm gonna go into this later, but the basic notion is that you don't show everything and that lets the player imagine things better.
But I have a later discussion on that, which is right here.
Usually one would assume that in order to play or in order to enjoy some aspect of a game, the developer has to implement that aspect of the game.
But it's not necessarily true.
So if you consider this table, the top left and the bottom right are what you would expect.
You put something in the game and people enjoy it, or people read it.
You don't put something in the game and nobody perceives it because it's not there.
The top right is a classic design failure, wherein a designer might put some complex, beautiful number system in, but a player just reads it as noise because they don't know what's going on, or they don't see it.
But the bottom left is what I'm really interested in.
This is what I mean when I'm talking about impossible game design.
Something that's not present in the game, but the players are perceiving it anyways.
And think of how powerful this is, because you don't even have to do the work, but the players are enjoying things that you never had to actually implement.
And it works because the human mind is really an overactive system for matching patterns.
This is why...
you know, ancient people, they would look at the constellations in the sky and they would see beasts or chariots or people, or they saw messages from the gods in chicken guts and tea leaves.
And people pattern match in a very specific way, it's not random.
People interpret everything that's possible as tribal interpersonal politics.
So this is why religious traditions or mythologies would interpret unknowable phenomena in the old days like weather or earthquakes with the intentions of unseen deities.
It's the weather has an intention, it's not just an object.
Our political discussion tends to revolve around pretending countries are people or corporations are people.
It's like France did this or Germany did that.
Germany has a lot of different people and it doesn't have a single intention, but we anthropomorphize it that way.
And I think it's because the part of our mind that models social interactions is super overdeveloped because it's important to us.
But it's so overdeveloped that we thoughtlessly apply it to everything, effortlessly, without even realizing we're doing it.
And we impart rocks, or we impart emotions and intentions on things like rocks and rivers and rain and stuffed animals.
And this happens, of course, even though these things don't have feelings.
So we can use this, since the goal of RimWorld is to create a story of emotions and intentions, and people are massively over-interpreting these things, we can let the player's pattern-matching mind automatically and unconsciously ascribe emotion and intention in places where it doesn't actually exist.
And that's useful because stories are made of emotions and intentions.
So here are some ways to do it, or some things that feed into this phenomena, which I call apophenia.
One is abstracted feedback.
This is what I mentioned before.
The player can only invent interpretations if you don't force an interpretation upon them.
This is why the graphics are kept so simple in RimWorld.
So for example, here's a situation.
The doctor is treating his wife's bullet wound, but it doesn't show the character's faces or their body language.
This is deliberate.
It means that the player is free to imagine these faces and this body language based on the situation.
if we put a visual image of that body language in, the player would not be able to imagine it.
So, you know, if the doctor and the wife like each other, the player might imagine a heartfelt moment of tension as he tries to save her.
And if they dislike each other, the player might imagine that they have this, like, get it over with attitude, or I'll let you touch me, barely.
And if one character likes the other, but not the reverse, there's all sorts of other permutations that you could come up with.
The second thing is long-term relevance.
You want to keep things relevant for a long time to maximize the connections between circumstances and events.
Interesting story events and interpretation spring from the overlapping of different circumstances.
So if you can retain over time the reasons why a character might want to do something, why might they want to have that intention, or why they might feel a certain way, you can give people food to generate their own interpretations.
So for example, this is why in RimWorld, I specifically designed the random incidents to take a long time to play out, wherever possible.
So diseases, they last a long time.
So does the toxic fallout.
It floats down for months, half a year maybe.
Volcanic winter, prowling manhunter packs of wild boars, they wait outside the doors for a week, hoping you'll come out.
sieges and so on and so forth.
Colonists remember events like family deaths or marriages or divorces.
They know their relationship, they know what this person did to them.
Failed surgeries, they remember these things for a long time so there's many ways for these situations to overlap and connect together and knit into a story of intentions.
So for example, if the doctor previously failed a surgery on his wife, she will have a memory record of that which the game will express.
It says botched my surgery.
and makes her express dislike for him in the game systems.
But that's pretty thin in terms of how we do it numerically with the game, but in terms of how this player can interpret it, it can be quite rich in terms of how she might feel about this situation.
If the wife needs surgery because of a wound from an animal who's still prowling outside and food is short and the two were divorced recently, but they had a cathartic fight that they feel better about, you could just pile in the context and imagine what all these different permutations.
Next, I want to talk about game developers.
So game developers, as a group, I think we tend towards, obviously, a fascination with mechanics and logic and systems and numbers.
And especially this is in computer game development, because this is how computers work.
So game developers will often chase their own emotional signals and tend to work towards mechanical, numerical interactions that are interesting, which can work really well.
Don't get me wrong.
But if we're making a story generator, this is a trap.
Because stories are not made of numbers.
They're really made of emotions.
A story generator game has to relentlessly focus on the emotional journeys of the characters depicted.
And this is really different from a game game, where the numbers and the mechanics provide the puzzle that the player can test themselves against.
So as before, we have a conflict between the game as a skill test and the game as a story generator.
In a skill test game, the player spends their time engaging with a logical system that they can master.
In a story generating game, the player spends their time engaging with the imaginary emotions of the characters.
And so many times, I've gotten suggestions from players for mechanics that would be interesting to add.
Interesting.
More intricate economic production chains, like right now you can just dig steel out of the ground and build something with it, which is ridiculous, because in real life you have to dig ore out and then get some coal and smelt them together and refine them.
And people want that modeled, some of them.
Weapon customization with grips and stat changes and scopes.
Propagating fluid dynamics or gas.
Or deeper simulation of plant seeding or animal breeding or these sorts of things.
These don't go into the game automatically, because even though they're interesting, none of them are fulcrums for characters' emotional journeys, or at least not as strong as they could be.
You're not gonna get an emotional character moment from somebody smelting ore or seeding plants.
And that's the sort of decision razor that I try to apply to cut things out of the design.
Is it relevant to the character's emotional journey?
If it's not, it doesn't go in the game.
So I focus always on things that characters will feel about.
Things like changes in relationship status between people, arrival and departure of family, health problems created and solved, food being good or bad or scarce or plentiful.
I mean, these speak to deep human needs, evolutionary time needs.
Social competition and wealth and status.
Quirks and traits of individuals.
I mean, getting to know people is a very feeling intense process.
And this can be hard to do because I have the same impulses as everyone else who loves to write computer code, which is I'm really interested in numbers.
So it's easy to fall into the trap of self-indulging that and saying, oh, I'm going to code this really interesting thing that's going to make this system that's going to have all these crazy properties.
But I try to suppress that.
it could drive the game away from what it's really supposed to be, which is story generation.
So I always ask over and over, does this enrich the emotional journeys of the characters?
So that's RimWorld as a story generator.
Next, I want to move on to some of the specific methodology that I used during development.
So game design, I think as a discipline, is really all about task selection.
It's answering the question, what do I do next?
Do I optimize the graphics system, draw art for a new character?
Do I write some new dialogue?
Do I clear a whiteboard and just start brainstorming or start implementing a new bathroom mechanic, or do I go to lunch?
And this is a hard problem.
And it's an important one because task selection is staggeringly impactful.
It shouldn't be done casually.
Because that one moment where you choose to do the right task, or the wrong one can equal months of labor trying to fix a problem on a poorly chosen task or spending time implementing features that don't really have much impact.
Optimizing things that aren't slow or perfecting graphics that nobody notices.
Unfortunately, there's a lot of great games out there that are really well implemented, but the developers worked on the wrong tasks and so they don't see the success that they should.
So I spent a long time thinking about how to do task selection.
And I'll start by criticizing some of the typical approaches a little bit.
And I'll tell you what I've done on RimWorld.
So how do we choose?
Very consistently, I think that really the first naive approach that a random person on the street will come with is to game designers.
They'll ask the question, here's an idea.
Would this idea be cool in the game?
And if so, they think it should go in the game.
And I get suggestions of this form all the time.
This idea would be cool, so you should put it in.
But this is absolutely the wrong question to be asking as part of a design process.
In fact, it's almost a useless question, because lots of ideas would be cool in the game.
The fact that an idea would be cool does not mean you should do it.
The real question is, of every possible idea for the game, which one has the best coolness to cost ratio?
And this is the difference between satisficing and optimizing.
And these are two decision making methods.
So satisficing is, you set your criteria, which is, the idea is cool, and you consider options, one after the other.
And as soon as you find one that satisfies the criteria, you choose it, done.
Optimizing is different.
With optimizing, you would essentially enumerate as many options as possible, sort them according to some criteria, and then choose the best one from that process.
So each of these has its place.
If you want to buy a T-shirt off the internet, you're going to satisfy us because you can't enumerate all the people who will sell you T-shirts off the internet.
And T-shirts are pretty darn similar anyways.
So you'll probably just go and maybe look at a couple sites and choose the first one that you like.
And that's rational.
That's a good thing to do.
But if you're choosing dinner off a menu with five items, you can afford to consider all the options before choosing the best one.
If you were satisficing, you would just read from the top of the menu and literally just choose the first thing that was not awful.
But with optimizing, maybe there's something even better down and you're gonna check there too.
You're gonna do the extra work.
So we can see some clear differences between these two.
Optimizing is way more effortful and satisficing criteria can be simpler because it's just a pass fail.
But optimizing criteria need to be a comparison operator between two options that lets you know which is better than the other.
Satisfying saves time because you can consider just a tiny proportion of the options, but optimizing needs to look at as many as possible.
And even though it's just thinking, this is real cognitive effort, the type that people try to avoid doing and really instinctively recoil from.
So I have to push myself into it.
As an aside, when I understood this, I read about this concept, I realized why I hate shopping so much.
because when I shop I tend to try to optimize.
So I'm looking at something in the store and I'm like okay, is it better than all the other ones here?
Is it better than every other option of this type in the universe?
Is it the best thing I could spend this $20 on with the total integrated feature value of this being superior to the total integrated feature value of every other option that I could possibly spend this $20 on?
Which is a really kind of stressful problem to be facing all the time in the shopping mall.
So I've learned to start satisficing a little bit there because it's a lot more relaxing.
But optimizing does get better results in terms of decision quality.
And as we saw, because task selection can be so impactful, this is important in games.
So with RimWorld, I tried very much to not satisfy us, but I also tried not to plan, or at least not plan in a traditional way.
You know, the classical approach to a problem is you decide what you're gonna do and then you do it.
So it's a blueprint for a house or a script for a movie, that's your plan.
But think of everything you discard.
by creating a plan like this.
You discard the inspiration that you might have during development, like new ideas, shower thoughts.
You discard feedback you might receive from players.
You discard things you learn from testing your own game.
Because you're a slave to decisions you've made when you put them in the plan.
And some developers move against this in a partial way, which I've definitely done and works in certain circumstances by iterating.
So essentially create a plan, execute it, maybe in some simplified form.
and then iterate on that result.
But I decided to try to go a little further in this and remove the concept of the fixed plan from the design process entirely.
So here's what I did on RimWorld, day to day.
First, I kept one immediate to-do list.
This is a Google Doc for each developer.
This is what they're working on at that moment.
Usually it's like a page or two pages, maybe a little longer sometimes.
They're short, they generally don't include more than a week or two of stuff to do.
And I have one, each of us have one.
Second, the giant ideas reservoir.
That's another Google Doc.
In this one, I record every inspiration, and every idea, and everything that comes up.
that seems like it could possibly ever be worthwhile.
And this is where I'm trying to enumerate all the options.
Because even that's its own task.
And this document soon includes hundreds, even thousands of items.
RimWorlds currently is about 60 pages, 25,000 words or so.
I think it might be a little more now, since I wrote this.
And probably it should be longer, because I don't, I'm a little too lazy to write down every idea, but I really should.
Third.
Regularly put effort into sorting the ideas reservoir to put the best ideas on top.
And this is something you do week after week, month after month, revisiting the same stuff over and over and over again.
Or the new stuff as it gets added in.
It's a living document.
To me, I just basically do a bubble sort.
I compare pairs of ideas and if they seem out of order, like this one's on top, but this one seems stronger, I just put the lower one on top.
And often, because I'm doing it repeatedly, I'll reverse the decision that I made the week before or the month before, because I've learned something new, or I feel different, or something else has come up and been added to the document.
I think while sorting, one tip here is, it's important to never ever consider anything to be locked in.
Because when you feel like locking something in, what I tell myself is, it's my mind not wanting to do the work.
Because when something's locked in, you don't have to think about it anymore.
And that's delicious.
That's what you're after, right?
That's cognitive comfort.
But that would make the system not work as well.
So I really try to force myself to never consider anything locked in.
Re-evaluate, re-evaluate, re-evaluate every time.
You gotta ask.
If this idea wasn't already in this position, would I move it here?
And if not, move it to wherever it should be.
And I've said which idea is better.
By that I basically mean benefit per cost.
Benefit means having more positive impact on player experience or better market positioning.
Cost is a combination of implementation difficulty or negative impacts on players, like if they have to learn something new or do a new tutorial item or something like that, then that's a negative impact on players.
These are big topics in themselves, so I won't go into them.
I just wanted to clarify that a little bit.
Fourth, when the to-do list gets under about a week of tasks, or any to-do list, I go to the ideas reservoir.
I sort it, maybe a little more if needed.
And then I just take some ideas off the top and move them over.
And so it's just copying and pasting between Google Docs.
And that's it.
And these are the results that I think make it advantageous.
One is you retain inspiration.
Have you ever written something in a notebook and then open it up two years later?
Like you forget about it entirely.
You open up your notebook, you look at your ideas from three or four years ago and you just don't recognize any of them.
It's like another person giving you ideas.
That's inspiration retention.
You've forgotten the ideas.
I've had this happen to me so many times.
What's good about having an ideas reservoir that you're always putting things in is you capture every idea, every valuable thought from every day all the time.
You don't just capture from your brainstorming sessions.
You capture from the shower, from the car.
You capture from stuff you read or a movie you saw.
Some of these ideas can be used years after the fact.
And some of them are layered.
You put an idea in.
It inspires another one and then you compare it to a third and they combine together into something new that goes into the game two and a half years later.
That's happened.
I think a few months of random note taking beats a three-hour brainstorm session every single time.
Next is long-term decision making, it really reduces bias.
Essentially the goal of all this is to get better quality design choices.
So if you can reduce bias, that's obviously what you're after.
Since you're not deciding at one specific moment what you're gonna do, you're not subject to the biases of that moment.
Instead you make decisions over time and reconfirm them in different states.
And this is good because it eliminates those short-term biases.
Your emotional state one day might lead to a bad decision or maybe you're just obsessed with some new idea, but later on you'll realize, you know, that was actually kind of crap.
Next is future knowledge advantage.
Since you only decide things when you need to, by which I mean you only move things to the to-do queue at the latest possible time when you really need something to do, you always know as much as possible when making that decision.
The principle is, the future version of you always knows more than the present version of you.
The future version of you pretty much, more or less, is a universally entirely better decision maker than you are now.
Because they know everything you know and they also know whatever you're going to learn between now and then.
And so if you can hand a decision to someone who's smarter than you and more knowledgeable than you in every conceivable way, then you probably should.
And that's future you.
So that's the future knowledge advantage.
No status quo bias.
Status quo bias is the cognitive bias where people prefer the status quo.
And they look at change with suspicion.
And this is measurable, this is just part of human nature.
And there's a reason for it, but it's a major problem that comes from planning.
Because you put something in a plan and the bias kicks in.
You don't want to change the status quo.
And it gets worse in a group, because everyone gets invested in the status quo.
In this system, you've got a big ideas reservoir, but none of it's planned.
None of it's locked in.
There is no status quo.
Because you don't have a status quo plan to change, your decisions aren't affected by the bias.
Next is asynchronous working.
You don't need to work synchronously.
I work remotely with currently two other people.
In Ludean, we don't even talk to each other that often.
Sometimes we'll go several days without talking directly.
Because Communication is actually pretty costly, and a lot of communication is wasted time that could be done better in other ways, especially when you need to schedule meetups or worry about when you're actually gonna synchronize and get together and have those discussions.
And if you miss something, it's brutal, because you gotta go back and get it later.
This methodology doesn't require brainstorming sessions or design meetings or anything, because you're always brainstorming.
And even when you're sleeping, if you have an idea, you don't have to evaluate it.
You just drop it in a reservoir.
And the designer will later bubble sort it in.
And you don't get emails with your tasks.
They're just there in your to-do document.
And it works remarkably well, at least for our context.
I'm convinced, personally, that I think the intensely social, synchronous methodologies that get used a lot.
People are biased towards them because people like hanging out with other people, which is totally a legitimate thing to want to do.
But it's at least worth acknowledging that and saying, if you can do this in a different way, it might be more optimal for decision making and saving people time.
I don't necessarily recommend this for extroverts, though.
Finally is ideas fight their way to the top.
By the time you're working on it, every idea...
that anybody works on explicitly or implicitly has been compared with every single other idea that's ever been had about the game.
So they have to fight their way to the top of that ideas reservoir over time.
And to get there, they have to be good.
If there's a lot of ideas, they have to be really good.
For RimWorld, we had so many great ideas that never made it into the game because other ideas were even better.
I had, like, I would think this idea was amazing and it just gets out-competed completely and a year later, it's in the middle of the document.
Because to fight their way to the top of that competition, each idea has to be a champion.
And if you make a game with champion ideas only, it's gonna come out real strong.
And this is really honestly, that last one I think is the most important outcome.
Champion ideas, things that are stupidly simple, but emotionally rich, elegant, and meaningful in mechanics and story.
Gettable and familiar for new players, but also new and exciting.
You never spend your time doing work to fix up downsides or breakage cases of some idea because once you recognize that the idea has those downsides or breakage cases, which ideally you would during the analysis phases, maybe not this month, but maybe next month, you'll find it out or realize it, you'll bubble it down.
There's one other useful decision razor here is it possible ship without it.
This is critical before you've actually ship something that people are playing.
It's remarkable how often the answer is yes actually.
So here are some of the things that I shipped early versions without some of this has been added later, but the first version of room world which did people did play and enjoy and pay money for back in 2013 didn't have these things character animations already discussed how.
Nobody animates and why.
And it doesn't bother anybody.
Stockpile system.
Traditionally in the Dwarf Fortress like colony simulator genre, a core part of the gameplay is placing down these stockpiles and putting things in it and managing where they are.
But in the first version of RimWorld, I wasn't that great of an AI programmer and I couldn't figure out how to make them do that.
So I just had them pick up resources and touch a building and then just disappear into this magical place in the sky from which you could spend them.
And nobody minded, the game still worked fine.
traders who physically visit the player.
I wanted trading in the first version of the game, but the AI for having a trader come in and deal with getting attacked and hang around and interact with you and leave and carry all this stuff, all those systems were just really brutal and complicated to do, so I just didn't do them.
Instead, I just put a communications console where ships fly over and you can trade with them magically and stuff just teleports up and down.
And it fulfills the same design purpose as the trader without all those nasty details.
Contagious crop blight, you'd think a crop blight would have to move between plants and spread and things like that, but no, mine just kills a whole bunch of plants randomly.
It fills the purpose, although I might replace that one soon.
And contagious diseases.
So players are, I have found, remarkably accepting of not having things that might seem to be necessary up front.
Very, very few people complain about the things that I've talked about.
but they have lots of complaints about other things.
So the things that seem important up front, the things like, yeah, we gotta have character animations, and the trader has to come and trade with you, obviously, right?
The players probably don't really care, necessarily, about those things, and they probably really care about other things entirely.
So, I've described a bunch of somewhat contrarian design strategies.
One can just try to follow the steps.
But I think to really be able to try to do something different, you have to go deeper and have this intention on a level of personal philosophy and belief, for a couple reasons.
First, obviously, contrarianism means doing things differently, so everyone can't do different things the same way.
I'm not saying...
This talk isn't telling you guys to make a story generator, necessarily.
It's to find your frame.
Secondly, it's...
you won't get social reinforcement as much as if you're doing something more typical.
You might see some non-comprehension or disagreement or pushback from the social environment around you when you discuss something like that.
And you need to have the belief foundations to hold on to those convictions even without external positive feedback.
And this is doubly challenging because it's human nature to synchronize our beliefs with the people around us.
It happens automatically, it's unconscious, almost involuntarily.
I'm sure some of you have heard of these research studies, where they'll put a subject in a room surrounded by actors pretending to be other subjects, and they put some lines on the wall, and they ask, which line is shorter than the other ones?
And all of the actors pretending to be other subjects, they all give the wrong answer.
And something like 30% of the time, the research subject will agree with the social milieu instead of the line which is right on the wall, right in front of them.
They will agree with essentially hallucinating or trying to go along with the people around them.
And so if that happens 30% of the time for something so simple, imagine how much harder it is to believe the correct or a contrarian logic on a deeper question.
Speaking of questions, it's often hard to even ask the question, much less get the correct answer.
So consider questions like, should we make a game?
Should our product tell a story?
Should more skillful players get greater rewards?
Should we plan our work ahead of time?
Should we try to maximize communication between developers?
Should we try to make our game as beautiful as possible?
Do our characters have to have faces?
Should we implement this idea that seems really cool?
I think noticing these questions exist can be an intellectual challenge.
And giving unusual answers to them is really just a matter of mental effort.
Finally, I think the thing that convinced me at the core to pursue a strategy like this, or at least trying on some level to do something different, is that indie game development is really a tournament market.
It tends to be set up such that to a small number of winners, all of the rewards go.
That means that in such an environment, a typical result, the 50th percentile, is actually either failure or a struggle.
It's not a success to be typical.
And if you use typical strategies, you should expect typical results.
So, from this logic, the only option is to use an atypical, high-variance strategy.
And these will be strategies, by definition, that most people are not using or likely won't agree with.
Because if a lot of people are using them, then you're back to the typical results.
But take heart, one rule of history is that the social milieu is always making mistakes.
It's true in every society and all time everywhere.
So just because nobody's thinking a certain way or asking certain questions doesn't mean that they're dumb.
In a tournament market, where the average results equal failure, I don't think you should be frightened of following individual logic to a different conclusion or frightened of taking a strange frame.
I think it should be more frightening to follow the group.
Thank you very much.
As always, please fill out your evaluations.
I did write a game design book a few years ago.
That's it.
And you can check that out.
And yeah, if you guys have some questions, I would love to take you if you'd just come up to the mics here.
And how about over here?
Hey man.
Hey.
You spent the beginning of the talk drawing the distinction between a game and the story simulator you're trying to make.
Yeah.
And talking about how people generally want to feel skillful and want the game to be fair, and that's something you're not, I don't want to say not interested in, but you know, that's not the priority.
Yeah.
And then you're talking a lot about how you're actually bringing story tropes from movies and books, you know, disproportionate pushback and so on.
to this game. I would argue that when you are watching a movie or reading a book, the one thing that the audience can do is abdicate responsibility for what's happening on screen.
We feel empathy, but that's probably the only way we can actually survive watching Game of Thrones because, well, at least that wasn't our fault.
versus when you're doing something in a game, people feel implicated in the success of what's happening on screen.
I'm wondering how you're drawing the line on the one hand where people actually form this emotional connection, but also feel they're responsible for what's going on screen, but you're telling them, yeah, but it's not a fair game, right?
Like, the fact that you can be competent is not really important.
I think there's a balance of influence.
that at least this is the strategy that RimWorld took.
The player can influence the game, but they don't control every single thing that their characters do.
They lay out priorities or set a schedule, but the colonists that you're controlling won't always follow what you want them to do.
They might do something else entirely, they might go crazy, or they might just fall asleep, or so on and so forth.
So I think in a game where you control people directly, or control a protagonist at every moment and every action, A lot of this would have to be reinterpreted because you wouldn't be able to abdicate anything.
It wouldn't be the feeling of watching something.
But in BrimWorld, you're far enough away from what's going on and the moment-to-moment interactions that even though you influence the context of the situation and set the overall priorities of some of the characters, you are not exactly in control.
And so you can get into the mental frame of watching it and saying, this thing happened, not I did this thing necessarily.
Does that make sense?
Yeah, of course.
Thanks.
All right.
Please.
Hi, thank you very much for your talk.
I was very intrigued by your methodology pieces and where they borrow from.
other methodologies but have their own unique spin on them. I was curious if you have given much thought to how those would scale up as you start adding much larger team sizes. It seemed like some of the things you were talking about make a lot of sense with a pretty small team and I could see how that could work with compartmentalized small teams and a larger team. But say for example if you have a team of 130 devs.
and everyone's contributing to the idea barn actively, organically.
It's almost like multiple full-time jobs just to sort that list.
Much less try to turn that into collaborative work assignments between different disparate groups of people.
So I was just curious, because you seem to be very well thought how that maps to scale.
I gotta be honest, I generally focus on my own problems and I am in the sort of the three person range.
I think it would be a really interesting discussion to talk about that, but I can't claim expertise on it at this point.
I think you could probably come up with ideas just as good as mine, right?
So I don't want to pretend to have some more knowledge than I have here.
But it's a good question.
Thank you very much.
I should have mentioned earlier that I only have three people and that this is really a system that was designed for that, and that scaling it up would be something that you guys would have to figure out in your own context.
Okay.
Thank you.
With just those three people, with your ideas list, is it just one person sorting the list every time?
Or because, so you just unilaterally decide what ideas are the best ones?
Pretty much.
I mean, on RimWorld, I do the design work, and I do some programming, and the other guys help out with tech.
We do discuss things, of course.
You know, I ask some questions.
You know, what do you think of this or that?
But I am making those executive decisions, so to speak.
Please.
So storytelling or telling stories about my game would require having a nice record of the game, at least as a memory prompt to show stuff off.
Do you have any thoughts on what direction you're going to go with the game recording what's happened so I can tell stories?
I think this is an interesting question because it touches on the difference between generating story events and recording and telling them.
Because those are different processes, right?
Like you can watch something that goes on the street or in a video.
and the story comes in your mind in some format and then if you're gonna repeat that backers synthesize that are say what was important about it and what was the connections that's a layer of interpretation which is and uh... i think a different task entirely and my approach to that on rimworld was just to not do it because i think that the player mind player can unconsciously do that better than the game.
The game is fine at generating these numerical interactions and all this stuff, but the interpretation and seeing what's important and what's meaningful, I very much leave that to the player apophenia.
You do record rates.
Sorry?
You do record rates and things.
In a very simple format, just so people can correlate something on the graph with an event.
Yes, yes, yes.
But it's not trying to tell the story in an accurate way.
Sorry.
Please.
Hi.
I just had a question about the task selection stuff.
So once you got individual developers' lists of things to do, do you often find ideas from the pool sort of bubbling up to be even higher priority than what people were working on and then have to kind of change?
you know, direction or even if something was already like half implemented in the game, did you ever find it like priority dropping below new ideas?
At least for WimWorld, it doesn't tend to happen.
I mean, I don't think we've cut anything significant for a couple of years.
So.
No, I mean a big part of the point of the whole process is to try to avoid finding out that something is broken after you put it in.
So no, in practice, it doesn't tend to happen, at least for RimWorld.
Not that much.
Although if it does, we're always watching out for that.
And we will definitely redesign something.
I'm sure it happened.
I just can't think of examples of that specifically.
Thanks.
All right.
So I'm wondering if you've thought about.
basically a hybrid where you take something like an MMORPG and put some of these story generation elements into it, or going the other way and make a game that starts out as a story generator, but has selected game mechanics added in?
From the MMO point of view, I mean, to me, that's like an entire other layer of complexity, so I'm trying to solve the basic problem to start with, which is to do it with one person.
I have, you know, people suggest ideas about putting multiple RimWorld colonies in one world or having a whole bunch of people on one planet so they can interact over a distance and that would sort of start to seem like an MMO if it was long enough.
I do think that introduces a lot of difficulties that I have not thought through how to solve exactly right now.
You gave us a bunch of examples of stuff players didn't miss when you launched your game, but what examples of stuff did players actually complain about or miss?
They complain about...
See, now I'm trying to think back to years in the past too.
to some of the stuff that happened during that time period when those things weren't in there.
A lot of the time people wanted more content, they'd say things were unbalanced or something would be unclear so they wouldn't know how to interact with something.
Like really prosaic design problems a lot of the time.
Or oftentimes, yeah, people want different content.
Instead of wanting, say, I want the trader to come on foot instead of by the sky, they want slug aliens to come and give you alien milk that's like super powerful or something like that.
So people are usually asking for totally new things, or fixes to things that are bothering them actively, not to more complex versions of things that already work pretty well.
Does that make sense?
All right.
Thank you.
OK.
Yes?
So I'm assuming you're entirely self-funded, but in a situation like this where you're so flexible and you have no commitments, how do you see working with business partners or people who might want, say, milestones or some kind of idea or commitment of where you're going?
Yes, you're correct that I was self-funded.
I just used personal savings to start the company and did it myself and got some roommates for the first while.
In terms of integrating other people, I think there would have to be a very high degree of trust from those partners in you.
I think that someone could contribute things with the understanding, like ideas or concepts or suggestions, with the understanding that they're going into the process in the same place as everyone else.
So, essentially I think it demands trust.
But I haven't personally faced this problem and it's something that I would.
Generally, I personally prefer this model of self-funding just because it gives that freedom.
But yeah, if you could find some business partners who could trust you that much, that could work out as well.
Thank you.
Hi there.
So RimWorld's been early access for several years now, right?
It was Kickstarter 2013, late 2013.
Then I sold it on my own website for several years.
And then it hit Steam Early Access in July 2016.
OK.
Would you say that your decisions on cutting what features would be in the launch version were a little bit easier because you weren't doing a 1.0 final release of the game?
It's definitely been essential to have a lot of players banging on the game over time.
For the first period before the Kickstarter, I was just by myself, but even then, I got to play it where possible, and I even sent it to people and demanded that they make a YouTube video of themselves playing it the first time, because I wanted that first-time experience, and I need to be able to watch people just playing the game to solve those problems before I send it to the initial batch of YouTube videoers or journalists.
So that feedback is really an essential part of the process, and it's a huge fountain of information.
Does that address the question or was there something more specific?
And as a follow-up, do you know when you're going to come out of early access on Steam and call it 1.0?
I couldn't speculate about the future.
Never?
Well, I mean the game has long legs and there's a lot of places to add things.
But my general strategy on this is I don't promise the future because I don't actually know.
Thank you.
Okay.
Hey, you were talking about your, um, sorting system.
Yeah.
And, um, is that a lot of different, I'm just trying to kind of get an idea of how that sorting system is, is that just a whole bunch of different numbers that you've.
I know it's just put I it's a bubble sort which doesn't require it only requires comparison one to one like the way I just approach it personally I thought about making make making a giant spreadsheet and putting numbers are cost-benefit score or something like that and try to do some mathematical thing but I find it so hard to put numbers on these things because they're so asymmetrical like you're comparing one task which is like you know let's stabilize the.
the data loading XML reading system so the modders can use it more easily, versus like let's add some butterfly men who will fly you to the moon or something like that.
They're just so completely different.
I don't know how to compare those things, except for directly in sort of a very subconscious evaluation type way.
So it's basically just bubble sort, one-to-one comparison.
Hey, do you find that you have to do a lot of work to manage expectations of your players if they don't really understand that the idea here is that it's a story generator and not a classic game design?
Definitely.
This is a really good question.
Thank you for asking.
OK, players have this notion where they'll get really pissed off at a challenge if it seems illegitimate, and especially if they're losing to it.
But if it seems somehow legitimate, they'll totally accept it.
So in RimWorld, we always have the problem people get angry when their characters go crazy on a drinking binge or set the place on fire because they're pyromaniacs.
But even if they don't lose that much, but if an enemy raid comes and just crushes them, that seems more legitimate because it's from the outside and they have this notion that my people should be mine.
And that's an expectations problem, I think.
It's not something you necessarily fix on the actions, it's something you fix in terms of setting the player's expectations.
So, I tried as much as possible in the marketing, in the name of the storytellers.
For example, the RimWorld has the AI storyteller that you choose.
and this is very explicitly done that way uh... and just all the messaging around the game to try to get people in the frame of you know you can enjoy when things are going bad it's here to see this crazy wacky stuff that goes on even things like there's no you know I'm not adding points I won't add uh... steam achievements for this reason because as soon as I added that suddenly it would be about getting those and that would displace the motivation and just shatter the story frame people can set their goals but that's really up to them It's a lot of different stuff, basically.
It's a lot of different stuff.
And yeah, setting those expectations is critical.
Great, thank you.
Thank you.
All right, well, thank you everyone for coming.
And don't forget those evaluations.
