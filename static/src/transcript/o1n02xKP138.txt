carefully and take to heart all of your suggestions.
And the ratings very much matter for whether we're invited back next year. So please do that. And please make sure you check your junk mail folders for those things. They often end up in there.
So I'm gonna end on what I'm hoping is a light note. This was a last minute swap in for a different talk that we had planned.
But I wanted to talk about homogeneous coordinates and So my goal here is to kind of plant some seeds, intuitive seeds about this.
I'm going to be very informal about this.
And my goal is to hopefully give you a little better gut-level comfort with homogeneous coordinates and what they are and how they work.
So I'm going to be a lot less formal.
So, let's start with some questions and motivations.
What we're trying to do here is understand how is the illusion exactly of 3D perspective achieved?
How does perspective projection matrix work exactly?
Or what's the essence of it, rather?
Why do we keep ending up in Vec4s all the time?
And exactly what does W mean anyway?
We sort of kind of know what it means sometimes.
So I'm going to pick a very specific and strong bias, mostly just focusing on 3D and 2D games.
And we mostly primarily use matrices for transforming positions, directions, and other matrices.
And we use the 5% of matrix math that mathematicians use.
But I'm focusing on that 5%.
So for this talk, I'm talking about Vec4.
I'm talking about Matrix4 and trying to get to the bottom of those.
So, I want to start, and this is kind of chronological through my own understanding, wrestling with like what the hell this stuff means.
And so, I was like probably most game programmers that I know, my initial theory was the W is for witchcraft, which was working fine for a while.
So let's look at a couple of things relating to W and see if we can start building some intuitions.
So let's say you have two different positions, right?
3, 2 and 5, 3 if we were in 2D.
We could subtract them, right, to get the displacement between them of 2, 1, 0.
Now we have two different positions somewhere else.
They have different coordinates, but the displacement between them, different positions all have different coordinates.
Different displacements do not.
So there's something right away there that's interesting about the differences between these.
And it's very easy for us to just say vector 3 position and vector 3 displacement, right?
And gloss over the differences.
Another example, let's say you have an actor who's at 230 facing north, and she gets bumped to the right.
Her position changes, her facing does not.
Right?
So, these are all obvious things.
I'm just trying to look for little nuggets of wisdom that we can harvest and chase down.
So let's take a little quick pop quiz.
What is a position minus a position?
Is a displacement, right? We all know that.
A position plus a displacement?
Makes more sense if I make the displacement on it.
That's another position, right?
I'm here at a location.
I take two steps to the left, now I'm somewhere else.
Two displacements? Sure, I can add that.
Walk five feet north, walk five feet east.
You've now walked northeast.
So we can add displacements, tip to tail.
Can we add two positions?
So, we can certainly add the numbers, right?
They would add up to five comma seven comma zero.
But, like, what does that even mean?
And if we try to justify it by drawing it aligned to the origin, well, really now we're just saying, well, if they were displacements, we could have added them, but that's not the same thing, is it?
So that's part of the question is, like, can you add positions or what does that even mean?
Clearly, however, positions and directions are not the same.
So let's take another example.
Let's say we have a box that's kind of centered around the origin.
It's got these four points.
And let's say it has vertex normals and maybe a forward vector, right?
If the box is rotated, every single one of the things changed.
All the vectors changed.
All the positions changed, right?
But if we translate the box, we'll note that the positions are all changing, but the vectors, the directions, are not changing.
So translation apparently is changing positions, but not directions.
So positions and directions both rotate, but positions translate, somehow directions don't.
Mathematicians have provided us a fix.
This is the W, and this is where it comes from.
It's called the homogeneous coordinate, or it's a homogeneous coordinate.
And for now, we're going to say that someone told us, the mathematicians told us, you should use W equals zero for directions, and W equals one for positions.
All right, so that's our first real working theory, right?
So let's take a look at what that means.
I'm going to break out a matrix here, and I'm using column-major notation.
So by column-major notation, what I mean is these three columns of the matrix are the x, y, and z, or rather i, j, k, basis vectors that form the coordinate system.
And then we have a potential translation as well.
And then we have, to make it a square matrix, which we would call an augmenting matrix, we have these 0, 0, 0, 1 terms at the bottom.
We don't know why there are those terms, except that's kind of just following the pattern of diagonals on the ones.
But what's interesting is if I think about the matrix in this way, as a basis of a space, then I can extend those by stepping one in the i direction and one in the j direction and draw a little point and another one in the i and one in the j and draw a point.
And I can create a graph paper out of this, right?
And if I change those vectors by changing in the columns where they point, I'm changing the graph paper.
Likewise, I can change the translation here to change the graph paper and move it over.
So if I'm drawing something in local space, like, say, in this square up there, just by changing the graph paper, I rotate my object, right?
This is the whole basis of modern transformations.
And if I translate, I move the graph paper and I draw the object on the graph paper that's now moved, rather than moving the object itself in the vertex buffer or something like that.
So let's look at a couple examples. Let's say I have a rotation matrix like this one, and I have a position x, y, z, 1, because the mathematicians told us to put a 1 there for positions. So we do the matrix math.
The result is that the position is changed.
It is rotated. Okay, that's great.
Let's do a rotation of a direction.
And sure enough, the direction was also rotated, which is exactly what we saw on our box, right?
And the zero's still in the bottom, so it's still a direction after it's rotated.
Now let's do translations on the matrix.
And when we look at the results for the position, it is translated, right?
But when we look at the results for the translation...
of a direction, it's .7 times zero, meaning the zero specifically says I ignore a translation.
So directions ignore translation by virtue of this zero, right? That's why they told us to put that there, to achieve mathematically what we kind of knew intuitively. So that makes sense now to say W is zero for directions, W is one for positions. So the matrix math with those rules just kind of does the right thing.
It translates our positions but not our directions.
If I've got a normal and I move way over here, I don't want my normal to be something wacky.
It should still kind of point that way and be normalized.
So let's come back to the matrix itself and look at it.
If we have these i, j, and k basis vectors and the translation, if we instead viewed those as four vectors, right?
Let's extend these columns all the way down and include them in our new way of thinking.
What does that tell us?
Well, it's interesting that has zeros for the i, j, k basis vectors.
So those are now pure directions, which feels right to me.
This, however, feels weird.
The translation it's sort of implying is a position with a one and a w.
That doesn't seem right to me.
I think of a translation in a different way.
So if I'm translating something like this...
I think of that as more of a relative movement, right?
I could translate to the right and then translate again and move more to the right.
That seems like a displacement.
So it's a little weird to me that there's a 1 in that W for the translation column.
All right, so let's play around a little bit more.
What about a matrix versus a matrix multiplied?
Does that illuminate anything?
So if I have some transformation and I multiply it by a translation that I'm trying to apply...
If we do the matrix math out, we get a matrix who is affected, that the translation was changed.
But we'll notice that the i, j, and k basis vectors, again, were unaffected by the translation we just applied.
And in general, the i, j, and k basis vectors are not gonna be translated, and yet the translation...
basis is changed. So now let's update our theory to say, well, it's not exactly that zero means directions and w1 means points. It's more like whether or not you should be translated. That's what it means. And then actually, in that sense, it feels good that a translation part of a matrix would itself be translated, because you could double, double, triple translate and have them accumulate, right? So in that sense, it feels correct to have a w of four.
So let's do the quiz again, but now in four dimensions, right?
In homogeneous coordinates.
I've got a position minus a position.
Those are points in space.
They have ones.
I subtract them, and now the one minus the one gives me a zero for the w coordinate.
It is a displacement, right?
Mathematically now, not just intuitively.
Position plus a displacement.
I add the w, and I get another point.
displacement plus displacement, they both have zero for the W's, so I add them up, and they still have zeros for the W's, so that makes sense.
So now when I do my position versus position, I get a 2 for my W coordinate.
Yeah, that's strange.
So, what does that even mean, right?
Now I have to, like, say W equals something else for things that don't exist?
So let's look at real space, or what I think of as real space.
I'm sure the mathematicians here will have better terminology for this.
I'm just trying to give you my intuitions.
So we're saying it doesn't make sense to add two points together, right?
Well, but that's actually not true.
What if we wanted to say average two points?
How do you do an average?
Everyone knows you add two things and you divide by two, right?
Well, now that makes sense.
If I add these two points, I'm gonna get some crazy thing, but I have to divide by two to finish the average, and that brings it back into sort of real space.
Right?
And that's perfectly legit.
So it is OK to add positions together as long as I divide by this W afterwards to clean up.
Right? If W ends up being 14, I need to divide by 14 to bring it back into the real world, so to speak.
Likewise, if I have an average of n positions...
22 positions, I add them all up, I divide by 22, and I get something still in real space.
So now I kind of feel like W means how grounded a thing is in real space, right?
And it kind of feels, if I use that terminology, while directions aren't grounded, they fly around freely with no change, positions are grounded, they're anchored, and they can't move without changing values, right?
When we saw, we moved a position and changed its values.
OK. So let's shift gears real quick and talk about some applications of what this means.
Another pop quiz. What makes something look 3D? There are a bunch of Q's. One of them is relative size. Right? Eric is much bigger, apparently, than someone back there to me.
Perspective. As things go away, they sort of converge all together in the distance.
Motion parallax. The people walking back and forth over there.
don't seem to be moving nearly as fast as the people in front of me.
Things that are close cover up things that are far, et cetera.
Texturing, lighting, shading, distance, fog.
Like in the mountains, they seem really foggy and far away.
I have my eyes triangulate on someone, blah, blah, blah.
W is gonna help us achieve these three.
OK.
So let's look a little more at the illusion of perspective.
And I have a simple cheesy gif here, but I think it's helpful to take the things you take for granted and go back and look at them with fresh eyes.
And you look at what's actually happening apparently to these things, is that they're all getting smaller, that's obvious.
But they're also converging on the center of the screen.
Right? As I pull away from them.
This is something that several people alluded to, and Eric did in his talk.
So let's say I have two views here.
One of them on the left is a top-down view.
And so that's the camera, that little cone.
And then the pink line at, that's the z-axis going up.
So the pink line is the near plane.
Or it's right in front of the camera.
And then on the right is going to be the, what I would see on my screen.
So let's say on my screen I see a big.
And it's actually a little bit far away.
It's kind of three units away from me on Z on the left one.
And so kind of what we want to do is say, well, how should that appear to be, right?
If I'm in 2-D mode, it should appear the same.
But if I'm in 3-D mode, it should appear smaller if it's farther away.
So we should draw lines from the points to the origin and then move the object.
closer to the origin. And this is part of why we have a coordinate system by default where 0, 0, 0 is in the center of the screen, is we can easily move things towards it just by dividing them by something. And how much do we divide it by? If you look at the left diagram, if we're three away, then we need to divide by three. In other words, we're sort of projecting this thing onto the z equals 1, onto the near plane.
OK, so if I have a group of objects, I do the same for all of them.
A is already on the near plane, nothing to do.
B has to come in close.
C also is far away.
And so you can see on the right, which is our screen, C is going to appear to be much smaller and in the distance, right?
And D is going to already be right where it needs to be.
So this is kind of what it would be in 2D mode, and this is what it would be in 3D mode.
So the takeaway here is in order to make objects look smaller as they go far away and get closer to the screen, we want 0,0 to be in the center of the screen.
And basically we want to divide by the distance.
Right?
And we all kind of know this intuitively.
So the question is how does a matrix do that?
Right? I didn't think matrices could divide.
So let's look at this perspective projection transform.
And it's probably, unless you're a graphics programmer and possibly even then, it's usually something you just look up on the Internet and you type in.
You used to just call glPerspective or d3d get matrix left hand or whatever that is.
And now those are gone.
So now we have to just steal the code off the Internet, right?
Type it in and it's field of view, blah, blah, blah.
What does it actually do?
Cutting away all the chaff, let's say we assume a square screen, so there's no aspect ratio to consider.
Let's say we consider a perfect 90-degree field of view, so it's going to be like the tangent of 45 in the math, so that goes to 1, all this stuff.
The most important term of the perspective that gets this out of us is this term down below in the bottom.
It's a 1 typically in DirectX and a negative 1 in OpenGL.
So let's look at what that term does exactly.
Just using that, what I'm calling a pure perspective matrix.
And you can do this, you can render this, and it will have a 3D effect.
Let's transform a position.
Ooh, it's got a zero in it.
So when we transform it, we get 0010 times XYZ zero.
And so what happens is that this perspective matrix does nothing except take our Z coordinate and put it in our W. That's all it does. And we call that clip space.
So the beauty of this is it's not actually a matrix that does the 3D illusion at all.
In fact, we would have to do it in software, and we did for a long time. It's the dividing by W that does it. So we said before, if we, say, added up three points and they all have – so we're going to take a three-way average, we have to divide by W to bring them back into real space, right? And it was the same thing we saw when we were trying to bring the objects, project them onto the Z equals one plane. Now, by having the W divide, we basically take our XYZZ.
and divide it by whatever's in our W coordinate at the time, which is our Z.
And since this is clip space, which is based on I space, that Z is gonna be depth out from us.
Or negative Z would be depth out in OpenGL.
And after this W divide, which happens automatically all the time in hardware, whether you want it or not, now we're in what are called normalized device coordinates.
It's the same as clip space, 0, 0 in the center.
It's just now we've done this divide.
So now we get that effect that we wanted, right?
X divided by Z, Y divided by Z.
Where the farther you are out on Z, the more you're going to divide your X and Y.
You make them smaller and smaller, close to zero.
That's going to bring them all closer to each other and closer to the center of the screen, which is exactly the perspective illusion.
So it's interesting, if we're in 2D, this is happening anyway.
Right, there really is no 2D, right, there's just 3D.
And so we divide by W, but that's a benign divide, it divides by 1.
So what happens then, if we're just looking for little tidbits of intuition here, what if our W was, say, 0.1?
It was kind of small.
Well, we would divide by that, right?
That would mean X divided by 0.1, which is like X times 10.
What if it was very small?
Very, very, very small.
Very, very small.
What happens is, you have this sort of sense that as w goes down from 1 and sort of approaches 0, that the point is getting bigger and bigger and bigger and bigger, but it's keeping its same proportions.
And as we divide by approaching 0, we scale it by approaching infinity.
And so it's kind of an interesting thing that it basically means that directions are kind of like points that are infinitely far away in a sense, mathematically. I don't know if there's a more elegant way to say it. I just find it interesting.
OK. Let me just wrap up. I didn't have a whole lot I wanted to cover.
I guess there are a lot of different ways of thinking about homogeneous coordinates.
For me, I like to think of it as a measure of something's groundedness in real space.
But really that means it's a measure of its translatability.
Which generally means we're going to have zero for directions and one for positions, but of course we saw there are exceptions.
And it's the translatable part that's more important than the directionness or the positionness.
And generally, anything with a w value other than one or zero is kind of in an improper state that almost always we want to resolve back into real space by dividing by w.
And lastly, that directions are kind of like points at an infinite distance.
And Gino quoted Ken Schumach's amazing post, and it's like plain text.
early internet about Pluker coordinates, which if you're interested in this homogeneous stuff, that's the next step.
I highly recommend it, and go read it.
It's really taking homogeneous coordinates to their fruition, is how it feels to me.
So, and that's great if you can go read that five times through and play with it for three weeks on paper and see what all kinds of things will pop out at you.
And that's all I have.
Thank you.
