Hi, everyone.
I'm a little bit surprised.
There's a lot of people.
But I'm really happy.
And I hope you get something out of this talk.
So welcome to my talk about design tests and what to expect from them.
Trolling the internet and the vault, I became aware that nobody is shining light upon this topic.
So I'm here to break that silence.
I'm Peter Buchard, and I worked at Playdead in Copenhagen.
I worked on Limbo and Inside.
And I'm currently at Studio Gobo in Brighton, England, where we worked on Disney Infinity, and we're currently working on a big co-op devs project with Ubisoft.
And speaking of Studio Gobo and their partner company, Electric Square, they're currently hiring.
So if anybody fancy a cool career at an awesome studio in England, then have a look at their websites.
So I've been a bit more than 10 years in the industry.
And from time to time, I felt the urge to try to look for other design opportunities.
And that has led me to receive some tests from the big companies, probably some of the ones that you all want to work at.
So I'm here to share some of my knowledge about doing those tests.
I did a game designer test where I got an interview.
I did a level designer one where I had to push for some feedback.
I did an RPG designer one, where I gave up on.
I'll talk more about that.
I did a level and mission designer and scripter position, where I got a job offer, declined it.
A single player designer and a multiplayer designer, two tests at once.
We'll talk more about that.
I got an answer, but no feedback.
Oh, sorry.
I see the way that tests are being used by the companies as a new tendency in modern recruitment, and especially for the big companies who receive a lot of applications for their open design positions.
So instead of just requiring an attractive resume and an impressive portfolio, companies now also require you to do a test.
And the test functions like a natural filter, because it's only the most dedicated people who even get through that first process.
And it also creates a foundation for the companies to compare you guys, or me, or whatever, one to one, because of that test.
Because the companies have found this to be a cheap and easy way for them to create a better base for their decision, they seem to forget the individual in that process.
And that's a little bit why I'm here to let you know.
So will I be telling you how to pass these tests?
No, that's not what this talk is about.
The talk is not about how to deliver the perfect answer to these tests, but it's more about preparing you folks for the experience of being an individual in that process.
And it all might come off a bit gloomy.
The fact is, I actually had a lot of fun, and it was really interesting to do these tests, and I learned a lot from it.
But today, I'll touch upon three major topics that is worth keeping in mind when you decide to go on a design test adventure.
I'll be going into details about the format of an answer.
I'll be giving examples of what to be expected in terms of the workload that can be involved when answering these tests.
And I'll be diving into what you can expect in regards to feedback from the people who ask you to do the test in the first place.
But first of all, I think it would make sense to just have a look at one test, so that anyone here in the audience who might wonder what constitutes a real-world test that anybody in here might be asked to do one day.
On that note, I also want to say, when I present some of the tests up here, there's going to be a lot of text on the screen.
Don't try to read all of it.
I'm going to share a link at the end of the talk where you can download a PDF with all the tests that I'm talking about.
So you can try it at home and fail or exceed.
You can do all the kinds of stuff you want.
So here's one of the tests.
This test was done for a big AAA company who are highly regarded in our industry.
And I feel it's fairly representative of the type of tests that you can expect to get.
This was, by the way, for a level designer position.
As you can see, they ask for some slightly generic information about what games you play and what scripting and 3D experiences you have.
It seems to serve as a more personalized resume where you actually get to explain yourself a little bit.
Then there's the final part, which is the actual test.
And even though this was supposed to be a level design test, you can see that it requires a rather broad understanding of game design to answer.
It will have you designing enemies, mechanics, and puzzles.
What's fairly unique about this test is that it actually clearly states a format that you should be answering in.
And it also tells you to answer the questions in two or less paragraphs.
And finally, it states that the level scenario should fit on a two-page document.
This is a lot of good information that you can squeeze your answer into.
But as you'll see as we continue with some of the other examples, this is not always the case.
Generally speaking, tests, they are answered with paragraphs of text.
But depending on the job type, there's usually other formats to consider, too.
For game design, it's primarily text, diagrams, and images.
For systems design or technical design, there's usually some code, some scripts, that has to be analyzed, modified, or created.
For level design, it's 2D and 3D mockups of scenarios, maps, and levels.
But I have found that when the test isn't giving any specific indications for the desired format, then you run into the dilemma of wanting to make sure that your ideas and answers are fully understood and that the reader isn't left with the feeling of you leaving things out.
But at the same time, you don't want to intimidate or bore anybody with walls of text.
At least, this has been one of my greatest concerns when answering these tests.
So what can you do to approach this format?
The best thing you can do is to make sure that you read and understand the entire test.
I know it sounds simple, but as I'll show in some of my examples what my approach was, you don't always do that.
And then make sure that you feel that your ideas reads well.
You could potentially have an interesting savvy friend or just somebody who's better at grammar than you read through it, because they might have some input for you on how to formulate yourself better.
Of course, if you're lucky enough, you'll be able to get information about the exact persons or the teams that will be reviewing your test.
And from that, try to pick an appropriate format.
But remember, often these tests, they are sent out by the HR department.
And honestly, they rarely have a clue about the actual tests, its context, or its precise purpose.
So let's have a look at a test in question and how I decided to approach the format.
This test was for a game designer position.
Firstly, the assignment itself.
You'll be creating a design specification for a grenade system used in an FPS.
Then the test states a suggested structure.
And this is really cool because they mentioned before that it was a design specification.
And that can be very different from company to company.
So apparently they have a structure for that.
Then it mentions format, as you can see here.
But what's a bit funny about that is it says that you can do anything you want, as long as it's easily reviewed.
But honestly, what does that mean?
A sentence like that does not help you find your format.
So the test I just showed you was a rather technical game designer test.
So there was some tech questions that came with it.
But because they were more straightforward, I'm not going to dive into it.
But for reference, I'll just go over quickly the three steps there were.
There was stuff about explaining a script's behavior.
Then there was stuff about fixing errors in a script.
And finally, it was about suggesting a new script structure for a set of new requirements.
So I ended up with a 12-page answer that featured eight images and seven diagrams.
And to back my design up, I decided to do what I call a brief feature and context analysis, which is something I've gotten very familiar with while working at Studio Gobo, too.
And of course, there was eight additional pages to answer the technical test.
So I want to briefly explain my way of using feature and context analysis, since it's a design tool that I've used quite a lot for these types of tests, but also in a more professional capacity.
The basic idea is to look at how similar features are treated in other games, but also look at the context that the feature is supposed to be used in.
So in my case, with the test you just saw, I would look at other grenade systems.
And I wouldn't just look at first-person grenade systems, because the first-person approach they're asking for, I might be able to pick some cool things up for the third-person approaches that is out there.
So I put that into my test.
But for context, I looked at other games from the same studio as a way to see how I would approach my design so it fit within their way of thinking.
But if the feature is for a more specific scenario, then it could have been looking at the narrative where it's being injected, or the mechanics that surrounds it, or it has to fit in with.
Or it could be something completely different.
So based on their previous games, I argued that a normal grenade system wouldn't really cut it.
It would have to take some sort of twist to the mechanic.
So I suggested magnetic grenades, that when you threw them, they would somehow get influenced by the metal that was in the world.
From there on, I followed their suggested format, which made a lot of sense to me, because it was those type of questions that you need to be answering in a professional capacity anyway.
At Studio Go, we call that a creative brief when we try to draw those kind of outlines up.
But in this case, because I wasn't there to present it, I thought it was OK with a little bit more text.
I ended up, oh, sorry.
So what happened with this approach?
I ended up getting the interview where it clearly felt like the people in the room had only skimmed my answer, so I felt I could have created a more elegant answer and that my answer might have been too long.
And we didn't even touch upon the technical stuff in the meeting, which meant I didn't get any feedback on that.
And I didn't know if I had done it right or wrong or anything.
So I'll bring another test forward now.
This test was made for a company that does a lot of open world AAA games.
And it was for a level and mission designer slash scripter position.
So the actual assignment, this is as simple as it gets.
Design a new mission for this game.
Then it states some requirements.
and that is where the mission is supposed to be injected the location in the game and some narrative considerations to take into account.
And then it also has a suggestion for the format.
But as you can see, it says you can do anything you want.
And it even says there's no limit to the quantity of pitches.
So what does that mean?
Do you do two pitches, or 10 pitches?
Or do you do one really awesome pitch?
I don't know.
I did one really awesome pitch, I hope.
Like the first test I presented to you, this test was also threefold.
The first part had the meat of convincing them that I can design in the way they want, and it fits with their games.
The remaining part seems to be gauging what I see as quality, where I get my inspiration from, but also my ability to reflect on my own design ideas and analyze other people's designs.
So like with my first example, these parts seem like a more elaborated part of a resume or a cover letter, if you want.
Because I wanted to illustrate that I liked and understood their games, I did another basic context analysis where I looked at the place they asked me to inject the mission.
For me, it made a lot of sense to consider what the player had learned and what tools the player could access at the time, and also what the immediate mechanics and tools were after the mission.
Because I felt that this would be designer consideration that I would do that if I was working on that in a professional capacity.
So at the same time.
I also wanted to give a narrative wrapper, so I wrote a narrative outline for that to show them and understand that narrative is important.
But by the time that I added up all the relevant screenshots from the game, the illustrations of my map layouts, I ended up with 30 pages.
Not 30 pages of text, but 30 pages with a lot of imagery and whatnot.
And again, you ask yourself.
Is this showing what I have to do if I get the job when I need to do my designs?
Or does it say, this guy is really thorough and he knows how to make himself clear when he has to?
And you're also thinking, can they even be bothered to read through this?
I could probably have explained and tried to sell the idea of the mission in one, two, three pages, really.
But I feel that when answering these tests, it's important to show who you are and what type of designer you are.
Being a designer requires you to be able to approach designing in many various ways.
The way you structure your answers shows a lot about how you get your ideas, if you're good at understanding context, and if you're good at communicating your own designs.
So I was aiming to try to show that I could design almost anything for anything.
and not just answer one specific question.
But of course, you guys have to find your way of doing it and something you feel comfortable with.
So on an end note about formats, let's look at some of the format suggestions that existed within these tests.
It says, whatever mixture of mediums that delivers the best impact efficiently.
Detailed design documentation.
Any form you require, as long as it's easily reviewed.
As you can see here, you will encounter very open-ended tests.
And you have to ask yourself how you want to be perceived, and see if you can find a way to rationalize what they might be expecting.
Some tests do have a stated length limitation, which really helps in understanding what depth they want you to be answering in.
And the same with the suggestion to the structure.
It can tell you a lot about what they'd like you to focus on.
So we touch upon the format.
But as you can figure from my 30-page example, another important thing to prepare for is the amount of work that has to be committed to a test from its received until you send it off.
The majority of the tests that I have encountered, I've been told to answer within seven days.
But I've also had four-day tests, 10-day tests.
And I have the odd pleasure of receiving two tests at a time, where one was a 48-hour test and one was a seven-day test.
And I had to do both of them in seven days.
So I feel it's important to take these time frames into account when answering the test.
But you will find it really difficult to assess, especially if you're studying or working while answering.
You'll be hit with the feeling of having much less time and resources than other potential candidates who could be spending 10-plus hours a day, and you'll only be able to squeeze in a few hours every night.
You can maybe you can imagine being lucky enough to send out more than one application at a time, and then you receive two tests at the same time.
This is, of course, a luxury problem, but still.
So the short story is that when answering these tests, it can feel a bit overwhelming.
Let's have a look at some of the tests that I feel have had a big workload connected to them.
As part of one of my examples for workload, I'll bring forward a test that I actually gave up on.
Let's go over the test.
So first of all, it has a statement for the assignment.
Design on paper and implement using this Unity UI tool that was on the shop.
A crafting system for a futuristic RPG.
Followed by a design brief detailing the context for the system and some function requirements.
After this, we see some more specific requirements for the crafting system's features and its content.
And then there is a list of required deliverables in terms of documents and files.
Furthermore, it states some generic requirements for the answer.
And finally, it concludes by listing some topics that, if included, would be considered a bonus.
No pressure.
So what went wrong for me with this test?
Firstly, I didn't do my homework.
I didn't consider all parts of this test before I started it.
This meant that the first thing I did was research crafting systems and sources of inspiration before understanding the exact requirements for the implementation of that prototype.
The result was that when I finally had a solid design idea that I believed in, then I found out that the free Unity UI tool was a bit deprecated and a bit broken.
And I didn't have the time to find and fix the bugs.
Secondly, I also realized how much work it would take to implement all the desired features.
I felt that it would be near impossible for me to deliver something that feature-wise would live up to my own quality expectations, but also that I would be under delivering on the requirements stated in the test, let alone the bonus goals.
So with three days left on the test, I gave up.
I threw the towel in the ring.
Retro, oh, sorry.
And this left me with a feeling of not being good enough for the industry.
Retrospectively, I've considered that part of the test might have been to test how I would react in a situation where there were exceptional high requirements.
And sometimes I regret not actually trying to submit something for that test.
But honestly?
At the time, I just felt like giving up.
And with companies throwing these tests after applicants without much consideration, I'd say it's OK to let go and give up on some of them.
You might not even be the right fit for that position if it feels bad to do the test.
So now you'll all at least know that if you end up in this situation, you're not alone.
Other people have been there.
And maybe you can sleep better at night with that.
So another example of big workloads is when a studio decided to ask me to do both a multiplayer and a single player test at the same time, expecting the answer within seven days.
Since this might be a slightly unique situation, I'll just have a look at the multiplayer test and go over it, because it has plenty of work in it, as I will show.
Firstly, they want you to design a gun recoil system.
Then they want you to fix a really hard technical problem of over-the-shoulder aiming in a third-person shooter.
The third part will have you design a multiplayer skill balancing system, and surely also a full multiplayer mode.
And then after that, broadly outline design ideas for an engaging progression system.
And finally, present ideas for a new mechanic.
So as you can see, the test basically want you to do five different designs and solve a difficult technical problem.
I like these type of tests.
I like answering them.
But it felt like I could dive down and use seven days on each of these questions if I really wanted to.
After squeezing these six answers onto 15 pages with imagery, tables, diagrams, it still felt like I might have been over-delivering and somehow should be able to create a more elegant answer.
I feel it's a really good example of where you as a designer have a hard time guessing where the focus should be applied and where to elaborate and where to cut it to the bone.
As you can see, some of these tests seems to be requiring a lot of work.
And a lot of work can mean long answers, which in turn can be conceived badly, because the recipients don't have a lot of time to go over them.
So you want to make sure that you cover all the relevant aspects, but also keep it relatively digestible, which, of course, comes back to the format concern.
Here I want to add that I have asked for time extensions on these, and the companies are usually very open to this if they know that the engagement was something you had before you even received the test.
So keep that in mind if you ever feel like you're out of time.
So when it comes to feedback, you would imagine that it was simple.
Do this test.
You say, sure, it's cool.
Here you go.
Here's an answer.
And they say, thanks.
Then they think about it.
And then they say, no, because of something.
Or they say, yeah, let's talk more about it.
But sadly, the current reality of things is different, and since the companies have introduced this test to save resources.
So after spending all that time.
worrying about the format of your answer and doubting your ability to even complete a test on time, you managed to pull through and deliver something you're truly proud of, and it cost you quite some time. Now, what can you expect in return?
Be realistic. Absolutely nothing.
Should you accept no feedback? No, I don't think so. So if you don't receive tangible feedback, you should try to ask for it.
If you all do that, maybe some of the companies will realize that they should be treating this a little bit differently.
But now, let's have a look at some of the feedback that I have received over the years.
So let's first start with the seven and the two-day test.
After finishing, I received this.
We wanted to let you know that the tests has been reviewed by our leads, and unfortunately, they have decided not to move forward with the interview process at this time.
And as you can guess, this feels a bit off, because I pour my heart and my soul into a test.
And then the leads sit down and actually review it.
And they don't give me any feedback or insights into why they choose not to continue with me.
Secondly.
I want to bring forward an example from interacting only with the recruiter, not the actual company.
I honestly think there was a great mismatch between my profile and the profile desired by that company.
My theory is that it was the recruiter who was aiming very broad with candidates for the position.
Since it was a recruiter who asked me to do the test, I felt it was OK to require the recruiter to also make sure I receive feedback for that test.
They should be protecting my interest, too, right?
So after having asked for feedback quite a few times, I got this.
We have reviewed the test, and we feel like the test is incomplete or vague at best.
The level design proposal is way too high level and not detailed enough.
And you might be thinking, this seems harsh, or it's really short.
But as my other examples show, this is actually good feedback, because they're actually letting me know what part of the test they didn't like, and also that it's too high level, which meant that I learned something from doing this test.
I also have examples of situations where it seems like the companies forgot to check my profile before they asked me to do the test.
From the test I answered with 30 pages, three days later I received this.
Thanks for your reply, Peter.
We just found out that a US work visa would be tough to get in your case.
So that just hurts, and it leaves you wondering how to do better in the future.
And the last one in the same category.
We were impressed with the effort you put forth in the scripting test.
While your background is impressive, we were going to focus on candidates not requiring sponsorship.
We apologize for not recognizing this requirement ahead of time.
But at least they recognized they made sort of a mistake.
And of course, it's also reassuring to receive positive feedback in regards to my answer.
My point about feedback, therefore, is that it can cause a lot of frustration not to be able to learn from doing these tests.
And if you feel comfortable enough, then try to push a little extra to receive some of that feedback.
I hope that these concrete examples will help you prepare for similar situations and let you rest assure that you're not the only one to have dealt with these results.
So we're here at the end of my talk.
And I just want to quickly recap some of the major topics from the talk.
Design test comes in many shapes and forms.
So prepare to be an agile designer, even though you feel specialized within one single design area.
Read, understand, and consider all parts of the test before you start answering it.
Seek, oh, sorry.
You don't have to sit with the test completely alone.
It's always good with inspiration.
You will find yourself wanting to design entire worlds and games to make your ideas and passion for it come through.
So prepare for the test to take time and utilize that time as well as possible.
Don't do everything you can to adapt.
You want to leave some of you and your answers, as long as it's easily readable, of course.
Lastly, and probably most importantly, prepare to do a lot of work, potentially multiple times, and all that without receiving any feedback at all.
But don't give up.
So.
That was it for me.
I hope that this helps you guys find, help you chase the perfect designer job.
Here's a link to the tests.
I hope that it will also help you prepare for any future tests that you might be doing.
I was told to please remind you to do the surveys at the end of this, but I'm really happy you all came and thanks for coming.
