It's 3.30. Thanks for coming, everybody. I don't know why everybody's here, because this is a talk about a really old, kind of mediocre game. How many of you actually were born since this game came out? Yeah, I figured it'd be about half and half. Obviously, I have very fond memories about Raid on Muggling Bay. This is always the way I see it in my mind.
Although this is not exactly a screenshot from the game, in fact this is like some recent Activision thing, this screenshot, as a matter of fact, is seven times larger than the entire game was, and all the content and everything. So right on Bungling Bay would have fit in that little box over there.
Now this is what the actual original looked like, back from 1984. It was my first game.
It was very interesting, kind of, the learning I went through on this.
And I don't, didn't really consider myself a designer at the time when I was working on this game.
I actually went back and did a very quick little calculation.
And this is about 80K of code, data, sound and everything.
And I spent about a year working on it.
And that works out to about one byte per minute, you know, of effort that I spent on this game.
You know, that was kind of the productivity of somebody back at that time in the early 80s.
The more recent games I've been working on, in fact, even divided across, you know, 50 people over several years.
everybody on the team is roughly generating about 100 bytes per minute.
So we've gotten 100 times more productive in that period of time, which is great news, right?
Now, Bumbling Bay was released back in 1984, which was, it kind of surprises me how long ago that actually seems now.
If we think back to 1984, this is when Ma Bell was broken up, finally.
This is, gas was a dollar and ten cents a gallon.
The Soviets were boycotting the Olympics.
This is back when the Soviet Union still existed.
In the theaters, the big movies were Terminator and Ghostbusters.
Two dollars and fifty cents to go see a movie.
And the big things on TV, the top shows were Magnum P.I. and Dynasty.
And this is also the year that the first portable CD player came out.
And that was one of the things that really kind of changed the face of the way games were made and content delivered.
And on that, of course, the top song that year...
This is also way before we understood that Kevin Bacon was the center of all social networks.
As a matter of fact, the term social network wasn't even in our lexicon back then.
Now, 1980 is when I bought my first PC, an Apple II computer.
Back in those days, I was actually kind of into auto racing.
And my other big thing besides auto racing was robots.
And that's why I bought this computer.
It was actually one of my racing buddies, he had a business where he would take Apple IIs and kind of remake them into medical computers.
And so he got a deal on Apple II computers, and he said, oh, you've got to buy one of these things.
They're really cool.
And so I bought one to connect to my homebrew robots at the time.
And I was living in New York at the time, and I should explain that I lost my home in the Oakland Hills Fire back in 1991.
And almost all my old prototypes and photos of Bungling Bay, you know, basically were burned up in that fire.
So basically I had to...
get a celebrity stand in here.
So I'm having to recreate dramatically, you know, this aspect of my life.
But anyway, as a kid, teenager, I grew up playing these elaborate board games, these board games like Panzer Blitz, which is a wonderful game.
And I had this Apple II that I was kind of teaching myself to program, and I was living in New York and there was one computer store in all of New York City that I would go to.
And at some point they started carrying games up on the wall, basically in Ziploc bags.
And I started buying some of these and trying them out.
You know, some of the earliest stuff was Bill Budge's work, the pinball games and stuff.
This guy, Nasser Gabeli, who made these amazingly graphically intense games that he programmed entirely in the assembler.
And then some of the old games that I used to play as board games were starting to appear.
This is one I actually spent a lot of time with called Computer Ambush.
This is actually on the box.
It even said, programmed in AppleSoft Basic.
And, you know, basically it was a faithful recreation of the board game.
And you'd sit there and you'd make your move, and then you'd, you know, say, finish.
It was a turn-based game.
And then it would say, calculating the computer's move.
And it would show this little progress bar that was about 40 minutes.
And so you'd go out and get lunch, you know, and come back.
And after lunch, maybe the computer had finished thinking about its move, and then you'd take your move.
Which is about how long it took, you know, to play the real game with a real person.
Flight Simulator was a huge kind of eye-opening experience for me, that for the first time there was like this really kind of consistent, microscopic little world.
Even though it was wireframe graphics, it was incredibly primitive.
compared to what we have nowadays, but yet the idea that there was a simulator of this complete little world just amazed me. And the Apple II version, the very first one, actually came out when you bought it, it actually, the first thing you had to do was write a machine language patch to get it to boot up properly on the Apple II Plus. And so the kind of the level of sophistication of the users was radically different than we, you know, think of these things now. Choplifter was another one, you know, where finally we were starting to get kind of arcade-like graphics. People were really starting to push the Apple II graphically to what it could actually do.
And, but I basically got absorbed in learning how this computer worked. And, you know, that generation of 8-bit computers, one person could pretty much almost grok the whole thing.
You could understand the interrupt structure, the hardware, the operating system, all the calls. And that was probably about the last time that one person could fully understand every operation within one of these machines. But one of the things that really sucked me in, you know, as I was kind of learning about this stuff, was Conway's Life. And probably most of you are familiar with this. You know, it's this little cellular automata world, deterministic.
amazing patterns emerge from this. Complexity emerges from utter simplicity.
And this is one of those things that can basically drive you crazy. I spent, almost lost a year of my life to this. And, you know, there's good and bad that came out of it, but luckily I pulled out of it. But, you know, one of the things that I was kind of obsessed with was programming this myself. And at first I programmed it in, you know, AppleSoft Basic.
And then I taught myself Pascal and did it in Pascal because it was ten times faster.
And then that was really the one thing that kind of got me to finally break down and learn machine language, which was, you know, kind of a radical thing for me compared to Pascal, which is highly structured, highly data-typed, etc.
But the fact that I was able to make a live version that was a hundred times faster than my AppleSoft Basic one incentivized me to spend, you know, just sit down and spend two months learning how to do machine coding.
And at that point I was basically piling up with all these games I was playing, and I started thinking, you know, well, maybe I should try making a game, you know, at least they'd be tax-deductible then, all the stuff I buy from my computer.
And so it was almost more of a whim, that I'm just going to try programming a game that I've learned, you know, to program and that I enjoy games.
And it really kind of came down to, you know, what kind of game am I going to do?
Now at that time, also, a lot of the people in the Apple II were really kind of on their second and third generation games.
They really had figured out kind of how to exploit that hardware to the fullest.
And so I was kind of a little behind the pack on that one.
But right around that time, the Commodore 64 was just coming out to market.
And so I thought, well, I have an idea.
I'll just kind of buy one of these new computers and learn it as quickly as I can.
and work on that machine. That way it's more of a level playing field.
So I did. I went out and bought a shiny new Commodore 64.
I paid full retail price of $600 for it.
Very shortly afterwards it dropped to about $300 and that's when it really just kind of skyrocketed, the penetration of it.
And basically the only technical information that came with it was the programmer's reference guide.
And basically I absorbed that book.
I just spent day after day reading and absorbing and experimenting with this computer.
Now what made the Commodore 64 kind of special, relative to the Apple II, were these two chips inside of it, Vic and Sid.
VIC was the Video Interface Controller, SID was the Sound Interface Device. And these, you know, basically were very powerful chips designed by Motorola that allowed the Commodore to do really cool graphic and sound things that the Apple II really couldn't do. Basically, you kind of interacted with these chips through peaks and pokes, which were pretty aptly named because while the VIC was pretty logical, and you could read the manual and it would pretty much, you know, do what it said, the SID chip was totally unpredictable. And so pretty much all you did as a programmer was sit there and poke the thing over and over and see what kind of sounds it would make.
It was totally experimental, you know, and just basically it was totally trial and error, empirical, let's see how to make, you know, let's say I'm going to poke it a million times.
Now on the VIC chip, you know, one of the kind of cool features of the Commodore that attracted my attention right off the bat was the idea that you could redefine the character set, and then smoothly scroll that around on the screen, which kind of gave you the ability to do these smooth scrolling worlds that was very difficult to do on the Apple.
You know, the Apple you basically had to implement it as a bitmap, and it wasn't fast enough, even with the 1 megahertz 6502, to move that much data very smoothly.
So what I did is I had actually been programming on my Apple II for quite a while, and there were some really good tools on the Apple II. At the time when the Commodore first came out, the tools really sucked. You know, the compilers were slow, the disk drive was slow.
And I had a bright idea, which is I'm going to do all my programming on the Apple II, and then I'm going to dump it into the Commodore. So I actually wrote, you know, a little machine language routine on each end, built a hardware interface between the two, so I could do all of my programming on the Apple II, press a button, it would instantly spit that program into Commodore's memory and start running.
So it made for a very quick iteration cycle, and so I was able to learn the machine very rapidly and keep all of my development tools on the Apple II.
But still, I was kind of left with, you know, what kind of game do I want to make here?
And ever since I was a little kid, I loved helicopters, you know, and right off the bat, it was like, okay, helicopters, helicopters.
I remember as a young kid, probably my first interaction with a helicopter was my dad took me to a state fair, and they had helicopter rides in an old Bell 47.
And I remember I was probably maybe four or five years old.
We went up in a helicopter ride.
and it was like the coolest thing in the world.
So later, you know, one of my favorite TV shows was this, Mutual of Omaha's Wildlife Kingdom.
Marlon Perkins was this guy, and he would go around various places in the world and kind of study endangered animals.
He had this sidekick, I forgot his name.
But no matter what was happening, no matter what the animal was, it seemed to me like almost every single episode eventually resolved into them chasing a herd with a helicopter and tranquilizing something.
And so you'd watch this whole show about the animals, oh, the poor baboons or whatever, but eventually they're chasing a herd of them with a helicopter and cheating at them.
But, so that was like kind of the money shot for this show.
But, and so I, you know, I've just ever since then loved helicopters of every type, civilian, military, etc.
So I kind of knew that I wanted this game to be about helicopters.
You know, now based upon kind of my interaction with Conway's life and cellular automaton and all that, I knew I also wanted in this game there to be this kind of intricate, kind of clock-like world.
I've always enjoyed kind of things like this, Ori's and things where they were kind of simulating world in very mechanistic fashion, very precise little things that have a lot of kind of unpredictable complexity emerging from them.
So that was kind of like my second thing.
It's about helicopters and there's kind of this clock-like little world of things going on inside of it.
And the last one was, you know, the games I've been playing on the Apple II, you know, really were very simple little worlds.
You were, you know, continuously scrolling back and forth or whatever.
And I wanted a game where basically the world was large enough to get lost in.
And that's, you know, basically what I wanted to accomplish with this, you know, smooth scrolling.
I wanted to build a very large world that I could potentially kind of get lost in and feel like it was that large.
So, going down this path, I kind of wrote two programs on the Commodore.
One was Chedit and the other was Wedit.
Chedit was a character editor, and this is what I would actually use to create custom characters.
On the Commodore, you could redefine the character set and build graphic characters at fairly low resolution.
It was like 4 by 8.
And they had to be one of, you know, four of 16 colors.
This is the entire palette on the Commodore.
and you had to pick your four favorite colors and kind of use those. And so the whole background was kind of built out of those four colors. Now, Wettit was actually a program that allowed me to now scroll around this large world and place these custom characters in little patterns, just kind of dropping down tiles. And this is basically how I built the world for Raid on Mungling Bay. And in fact, later, after I finished Raid on Mungling Bay, it was Wettit that kind of eventually evolved into SimCity. I was having so much fun kind of like building these little worlds in Wettit that I started adding more and more features to it and making it a little bit more automatic and a little bit kind of more satisfying.
Now, back in those days, you know, we actually had memory maps, where we actually were very aware of, you know, where all the memory was in the machine, what we were doing with it.
We didn't really allocate memory so much as we usurped it. You know, you just kind of came in and said, I'm using that memory, and that memory, and that memory. The Commodore is kind of nice because you could basically map out all the ROM that you didn't need, which is mostly like the basic and the kernel and all that kind of stuff. And the one part you didn't really want to use was this one 4K slice over here, which is where Vic and Sid lived, and you're using them all the time. But otherwise, we basically had, you know, about 60K free to kind of work with.
And we would build these elaborate memory maps.
Pretty much this is standard the way games were programmed back then.
And you knew exactly where every piece of code was, every piece of data, and it didn't move, because you put it there.
And if you needed to put something new in there, you would basically find a little chunk, you'd move things around, and you'd kind of update it on the map.
And so this is a continually evolving little map.
And this is exactly the kind of way we thought about it.
It was very to-the-metal programming.
To the point where memory was this incredible commodity.
Toward the end of this project, a lot of other people were working the same way.
You know, you'd need five bytes or six bytes to do one cool little thing, and so you'd go scrounging around in memory. Even though I filled up every last byte in that machine, you'd start using tricks. Like, one trick was looking for a pair of JSR RTS pair like this, which is actually jumping to a subroutine, and then when it comes back from that subroutine, it's returning back from the outer subroutine. You could replace that with a jump, in which case the RTS at the bottom of the first subroutine jumps you all the way back out, and you end up saving exactly one byte. So if you can find five of these pairs, you can actually get five bytes back.
And we actually spent time doing this, hunting through the code, looking for little tricks like this, you know, because I need 10 bytes now and 5 bytes here. And that's the, you know, amount to which we were utilizing all the memory in these machines. It was just kind of ridiculous. In fact, kind of after that, you know, second, third generation computers after that, I'd be talking to programmers and they'd be, you know, allocating a 10-byte record that we needed for whatever reason. But they said, oh, I can only allocate this as a 256-byte chunk. And it's like, oh, my God, you're wasting 240 bytes? You know, it's almost like my grandparents that grew up in the Depression telling me about wasting food or something.
That's how I'd feel talking to these programmers.
And it took me a while to kind of get out of that mindset.
OK, memory's cheap. Memory's cheap.
You know, I had to keep repeating that to myself.
So back to the world.
So basically, I started drawing out this little world of islands and water.
And this is the world I wanted to kind of build the game around.
This is actually kind of a zoomed out version of what became the eventual world.
This is about a hundred screens of data.
So basically one screen was about that large, you know, as you're playing the game.
And the idea is that as you're flying this helicopter around...
this little thing is kind of panning over the map very smoothly and that was basically my core idea for how this game would work. I'm flying a helicopter over this world, it's going to scroll around smoothly and things will be coming after you. You know, that was about as deeply as I'd thought it out at that point. Now, I kind of got into this prototype phase where I was scrolling around this little world with my helicopter and I had little airplanes kind of chasing me down, firing missiles at me. You know, that was basically the game. And I had moved to California at that time and you know, basically the Bay Area, and this is kind of like the center of the computer gaming universe at that time.
About half the computer gaming companies were in the Bay Area.
And there were about five, I don't even remember, like, LunaSoft and a few others.
And I ended up just kind of going to all the ones in the Bay Area, kind of showing them my little prototype, saying, you know, what do you think of this game?
And one of the ones I went to was Brøderbund.
You know, this was way, way back in the early days.
I met the Carlstons, Doug and Gary Carlston, and later Kathy joined a few years later.
But at that time, Brøderbund Software was 17 people.
They were running it actually out of an old liquor store in San Rafael that they had taken over.
And it was really cute because in the back there was this freezer door and that's where the programmers lived.
There were like five programmers and the programmers didn't like light, you know, and they'd open this giant freezer door and there'd be five programmers sitting back there.
They'd turn the freezer off, of course.
But it was just like so quaint and, you know, there's these wonderful, you know, kind of family-run business in a way.
You know, they're kind of of Swedish descent, you know, these kind of wonderful, you know, peace-loving, very...
Very nice people, and they were kind of horrified actually later to learn they had named their company after an extremist African apartheid group.
But at any rate, other people I had met at Brøderbund, you know, of the 17, you know, Gene Portwood, who passed away about 10 years ago, was just a wonderful guy. He was really my first project manager on Mungling Bay.
He was a former Disney animator. He was the oldest guy at Brøderbund by far.
You know, he was like in his 50s and everybody else was, you know, young 20-somethings.
So he was this grizzled old veteran that was just, you know, incorrigible.
Later, his partner, Lauren Elliott, joined with him, and they both were working with me on both, you know, Random Bungling Bay and on later Sim City.
These are the two guys that kind of later went off to go invent Carmen Sandiego and turn that into a giant hit.
But the other person at Brøderbund that was kind of a huge influence on Random Bungling Bay was a guy named Alan Weiss, who was, you know, ran the testing group at Brøderbund.
The testing group, you know, was really three people or something like that, you know, three part-time people and then Alan full-time.
So Alan is probably the only person that's played And he would sit there and give me just like this great feedback about, oh, I think this is too hard, you know, we need to adjust this, that's too fast, etc.
But really the person that probably gave me the most advice was Gary Carlston.
Gary would spend so much time with me just talking about the market and where things were going and entertainment and stuff he learned about business.
You know, I really felt like Gary Carlston was kind of my mentor for business.
And I just always appreciated the time he sat down, you know, for no apparent reason, he would just, you know, spend hours kind of...
telling me the way he saw the market developing, or the way he thought business should be run.
Just a wonderful kind of learning experience, and I owe Gary a deep debt of gratitude for that time that he spent with me.
But back to the game.
So at that point, we were starting to think, okay, we're going to start populating this world with targets.
And at first, basically we were going to put down factories.
And so Bungling Bay had six factories spread across these islands.
Now, basically I wanted this clockwork universe that we're going to build here.
And so I had this idea in my mind that there were resources distributed out in this world that somehow the bungling empire, and we'll get into that later, is collecting.
And they actually collect this with little boats that actually drive around, and they actually go on these pre-programmed circuits, and they cycle back to little port areas.
And they take these resources to these little tanks, which then carry the resources to the factories.
And this is, you know, basically the underlying infrastructure of the bungling war machine.
On top of that, we wanted to build their defensive networks.
And so they have anti-aircraft guns spread out across the islands, radar dishes.
The radar dishes actually call in airstrikes from two air bases that are in the world.
And lastly, this battleship, which is kind of a long-term timer.
At some point, the battleship is being constructed during the game.
As you start bombing more factories, the construction accelerates.
Once it's completed, it actually steams out a port toward your carrier, which is sailing up and down this world.
And if it ever gets to the carrier, you lose the carrier.
and that's kind of part of the tension of the game.
So basically we have this resource model where resources are being collected out in the water, brought by little boats, these little tanks, to the factories.
Those resources are being spent on the defenses, and there's a priority system, where first they will rebuild any local anti-aircraft guns, then radar dishes, then any fighter jets or bombers, then the tanks, and lastly the boats.
So there's basically a repair priority and a resource flow into that repair priority.
And this is the basic little mechanism of this world, this game, how it operated.
Oh, okay.
So, flight diversion.
Believe me, it is hard to talk for an hour about a game that you can finish in ten minutes.
So I did a little padding here.
Outside of Moscow, there's this museum, the Museum of Cosmonautics.
This is actually the roof of the museum.
The museum's underneath this.
And there's a park outside of this where they basically have statues of the major heroes of the Soviet space program.
And the Soviet space program really has four consistent heroes that they always have statues of and monuments to.
One was Sergei Korolev, the chief designer, who was basically their chief engineer that architected their space program.
Yuri Gagarin, of course, the first man in space.
Valentina Tereshkova, the first woman in space.
And lastly, Alexei Leonov, who was the first guy to ever walk in space.
Basically, I'm going to focus today on the Russian Space Minute on this last guy, Alexei Leonov.
Now, in addition to being the first guy to walk in space, he was also the commander of the Apollo-Soyuz test project, you know, the first time that an American and Soviet spacecraft had docked in orbit.
And he was training to be the first cosmonaut on the Moon, back when the Soviets were actually pursuing their lunar program.
He actually flew on the Vostok 2, or Voskhod 2, excuse me, which was a slight modification of the Vostok.
He made the first six Soviet spaceflights.
The one with Yuri Gagarin was the first one.
were all in a Vostok. And it was a one-person capsule. And the reason it was a one-person capsule was that when it was coming down from orbit, they didn't really have the capability to have a soft landing. This thing smashed into the earth really, really hard. And what most people didn't know, they didn't know back then, and it wasn't until many years later they found out, was that he was actually ejecting from the capsule on its way through reentry. So when the capsule was coming through about 30,000 feet in the air, what would happen is this ejection seat would fire him out of the capsule, and it was a very elaborate ejection seat.
After that came down to about 10,000 feet, he would actually jump out of that and then open a parachute.
So the first six cosmonauts that went into orbit were actually landing by parachute while their spacecraft crashed about 10 kilometers away.
This ejection thing was just amazingly complicated.
I actually got to talk to one of the engineers who designed it.
And the amount of redundancies and fail-safes in this thing were extraordinary.
It was all mechanical.
They basically had mechanical computers embedded in this thing to detect if it was landing on water or if the cosmonaut was knocked out.
They had no idea what the state of the cosmonaut would be coming back from orbit.
So they had all these automatic things that would push him out of the seat and cause this parachute to open if he was unconscious.
And when he was explaining all this stuff to me, I was kind of asking him, how do you test this?
And this seat was also used for launch aborts.
Basically if the rocket was about to blow up on the launch pad, they could fire them out of this and it would basically, the idea is it could safely land the cosmonaut from the launch pad.
And he said they built a tower, same height as the launch pad, as the rocket on the launch pad, and they built a launcher that would basically, you know, test this thing and find out how many of the crash dummies survived this.
And I asked him how many, you know, did they have to do to get it right?
And he said, by the time they finished, there was this giant pile of prototypes underneath this launch apparatus.
But at any rate, so the Voskhod, finally they got the landing right.
They actually had retrorockets that would fire before the capsule landed.
And so the next flight, which is now labeled the Voskhod 1, they crammed three cosmonauts just to see if they could do it.
And they made a successful flight.
They just basically went up, did a few orbits, and came down.
And it was the first flight with more than one person in space.
And it was the next Voskhod that Alexei went up on, the Voskhod 2.
And what they did is they took out one of the passengers, and they used that extra room to attach this bizarre airlock device onto the side of the capsule.
What it was, it was an inflatable airlock.
They would get up in this space, inflate this thing, and it would pop out like a balloon, basically.
This is actually a ground prototype of it.
And the cosmonaut would climb inside of this thing, close the hatch, and then they would decompress it.
They couldn't decompress their entire cabin like they did on Gemini, because all their electronics...
were basically very rudimentary air-cooled electronics.
And the electronics would have overheated almost instantly had they depressurized the capsule.
But anyway, that was kind of the plan.
And so they launched in March 1965.
They went up, you know, everything was pretty much normal.
Alexei kind of got in the airlock, depressurized, got out into space.
As soon as he got into space, two very unexpected things happened.
Now, first of all, realize that nobody had ever done this before and they were only kind of guessing what the dynamics might be.
They hadn't really thought it through that much.
The first thing is that his suit inflated like a balloon.
they hadn't really considered the fact that he was in a vacuum, that he was full of air.
The second thing is that he started overheating.
This is about the first and only EVA suit that didn't have an integral cooling unit for the astronaut.
All the astronauts now have this woven set of tubes that go across their body and circulate air to cool them because the amount of solar radiation you're receiving is tremendous.
And so within a few minutes, you know, Alexei was basically out here like this, overheating, sweat was piling up in his space suit, and he realized he better get back in fast.
He managed to just barely kind of squeeze back into the airlock, but he couldn't get in feet first the way he was supposed to.
He had to get in head first, the opposite way, which was totally unplanned.
You know, at this point, he had actually lost several pounds from sweat, and it was pooling up around him inside the spacesuit.
But he did manage to get in the airlock, but the only way to close the hatch was to turn around inside that inflatable tube.
And he, you know, tried as he could.
He could not actually maneuver his body to turn around and do a 180 inside the tube.
So his last kind of hope was to actually let air out of his suit.
And so he actually started bleeding air out of his suit to the point where he was almost losing consciousness.
And he got the pressure low enough to where he could bend his body around and close the hatch, which is lucky because, in fact, the other cosmonaut was given orders that if he couldn't get back in, that he was to jettison the airlock with Alexei in it and come back safely himself.
And, in fact, Alexei had a suicide pill with him in that case of that happening.
But, at any rate, they did make it back in.
And, you know, at that point, they were ready for reentry.
And after they fired their reentry boosters, another problem happened where the this service module, this kind of back portion, didn't separate.
The straps didn't come apart the way they were supposed to.
So the dynamics of this, coming into the atmosphere, were totally backwards.
And in fact, the hatch was facing downward, not the heat shield.
And so they were starting to see smoke coming in through the hatch.
The thing was rumbling.
But around that time, the straps finally burned through, and it reoriented itself correctly just before the seals in the hatch blew.
So they basically kind of made it through that.
But that reentry profile was radically different, which means that they landed several hundred miles off course in the Ural Mountains.
When the spaceship landed, it landed between two trees, actually jamming the hatch shut.
They spent about an hour rocking the capsule back and forth.
Nobody knew where they were at this point.
But they managed to rock it out between these two trees enough to open the hatch, at which point, you know, it was getting dark, cold, it was, you know, very, very cold.
They had to make a campfire.
And then the wolves started closing in.
But, luckily, a helicopter crew found them and dropped some paratroopers about ten hours later as daylight was breaking.
And it was after that mission, every single Russian space flight after this, they give the cosmonauts guns and vodka.
Just such an eventuality.
And that was what really started that whole tradition.
Alexei was also the commander of the Apollo-Soyuz test project and met the astronauts for the first time.
This was the first time the Soviet cosmonauts actually met the American astronauts.
And he said that when he met the American astronauts, it was amazing because the American astronauts were all 10 years older, college educated, with master's degrees, whereas the Russians were like these young yahoos out of the Air Force.
And it was really a kind of, not just a cultural mismatch, but almost a generational mismatch as well.
As I said, he was actually going to be, because of his EVA experience, the first cosmonaut on the moon, their lunar lander was actually designed to only land one person, and it required a fairly risky EVA even to get into it up in orbit.
But the Soviets never perfected the N1, which is their giant moon booster.
You know, they tried four test launches, every one exploded before going too far.
In fact, it was the largest explosion, non-nuclear explosion, ever recorded.
on Earth was the N1 booster blowing up on the launch pad.
But Alexei also is a kind of interesting guy because he's an artist.
He does fine art, he does space art, he does landscapes.
And for a general in the Russian Air Force, he's kind of an amazingly interesting, well-rounded guy.
The spaceship in 2010 was actually named after him, the Leonov.
And I had the privilege to actually get to know him a bit.
He actually came and stayed at my house for a week a few years ago.
And he's just an amazing, spunky guy.
And he is just the feistiest character you could ever imagine.
But, anyway, that's the story of Alexei Leonov. Back to Bungling Bay.
So now we have this world with resources being collected, airstrips, air defenses, et cetera, et cetera.
Now one thing that I found, you know, after Bungling Bay was released, kind of in the spirit of a post-mortem, was that players totally got this repair priority. They kind of understood that, oh, I've got to get the guns fast. They're going to be rebuilt fast.
that was totally transparent to the player. They had no idea about this resource flow thing. It was totally opaque to the players and pretty much wasted on people. They might have understood that these boats and tanks had something to do with it, but it was not clear at all what. Kind of thinking back on it, really I should have made the resources visible, because it was kind of a really stupid decision to make them invisible. I should have actually shown them out in the water with the ships picking them up, bringing them to the dock, having the tanks, bringing them to the factory, and actually seeing them converted.
back into, you know, the components that they were rebuilding. I think that one change alone probably would have been the biggest improvement I can think of, looking back on it, that I would have made to Bungling Bay. Now, there was also kind of the difficulty level issue.
I didn't want to have a game with discrete levels. I wanted to have a game that was one coherent world. So instead what I chose to do was that depending on how many factories you destroyed, the defenses within that world would escalate. With six factories, you had pretty simple defenses, you know, simple anti-aircraft and a little bit of light.
ground fire from the boats and the tanks. Once you destroyed one factory, the first jets appeared. They would start chasing around, firing missiles at your helicopter. Once you got to the fourth factory, bombers would appear. These bombers would attack your aircraft carrier.
Third one, they would actually escalate some of the attacks. By the time you got to the two factories left, guided missiles would appear. And this battleship would start accelerating its construction. So the idea was that, you know, as you got further and further in the game, the game was pushing back on you harder and harder with this very dynamic spring tension.
And really the way I wanted to think about it was that, you know, I thought in the first game somebody should probably die before they've blown up one factory. By the second time they play the game they should get at least one factory. By maybe the fourth time they should get this far and so forth. So that by the time, you know, you got to the last factory you'd probably play the game, you know, 10, 15, 20 times to get that last one. And I think I pretty much achieved this pretty well. Because if you play Bungling Bay, it's that last factory that's like half the game really. You can get like four or five down.
in a few minutes pretty easily, but when you get to the last one, it gets really intense and the escalation of tension is pretty interesting. I'm going to show you a little bit of a video of Bungling Bay. This is actually done by some dude in Germany that actually finished the game in like ten minutes, but you'll get a little bit of a sense of it. It's got a full screen. I'm going to skip ahead to a couple of spots just to give you a sense of how this game looks and plays.
I could be playing in an emulator right now, but this will be faster.
There we go.
So that's the carrier you're taking off from.
That's one of the islands you're going over.
One of the things that always annoyed me was this little line you might notice right above the text at the bottom.
You might see how it's kind of sitting there and flickering.
That was this interrupt I was trying to do where I had to switch between the smooth scrolling graphics on the top and the fixed graphics on the bottom.
And I never could get it right.
It would always flicker no matter what I did.
And I spent hours and hours trying to fix that.
It still annoys me, even seeing it right now.
But basically, what you just saw was an attack, and the helicopter was damaged.
And I really like the idea that you're kind of limping back to the carrier all the time.
And it kind of establishes this connection with the carrier that, you know, at first you're kind of on the offensive.
You're going after them.
I'm going to go get them.
And all of a sudden, you get your butt kicked.
And, oh, no, where's mommy?
And That was something that I really wanted to kind of replicate, you know, in the game, where you started developing this tight connection with the carrier, not only because that's where you can kind of repair, but also you had a limited bomb load.
So at some point, bombers start attacking the carrier.
This is about two factories into it.
And this periodically happens. It calls you back.
You come rescue the carrier.
You don't basically defend your carrier.
What will happen is they'll sink it, and you'll be on your last helicopter, because you actually get, like, three helicopters for the whole game.
So this is an example of kind of the attacks on the...
carrier distracting you from your offensive duties.
Let me go back to about here.
Now at some point these heat-seeking missiles start appearing.
That's the little missile that's chasing.
This is really very much kind of an issue of tuning the missile turn rate and speed to the helicopter.
If you had a fully repaired helicopter in full speed, you could pretty much avoid these things by outmaneuvering them.
But basically if you were slightly damaged, the heat-seeking missiles were just lethal.
Now again, you see our speed slows down.
At that point, the screens yellow were slightly damaged.
There was also this kind of death spiral thing that was fun.
That if you actually do this right, you still have a slight control over the helicopter when you're going down.
And if you did it just right, you could land into a factory and blow it up as you're crashing.
And that kamikaze thing actually was very, very satisfying when you pulled it off, but it was very hard to pull off.
Now, at some point, as I mentioned, that spring tension, as you get further and further, I think we're down to one.
Now, at this point, the battleship is leaving port.
you can actually slow its construction down by attacking it, but once it's been built, it's firing heat-seeking missiles, and it's pretty much almost impossible to destroy.
It is possible, but it's almost not even worth it.
Once it leaves, it's basically a timer being set.
It's gonna be about three minutes before it actually gets to your carrier and sinks it.
And so, at that point, you know, either you're on your last factory, and you can see, in fact, he is on his last factory.
It's factory one down here.
And so this is really kind of a push in the endgame.
In fact, this guy finished the entire game in about 12 minutes.
And of those 12 minutes, about six of them were with one factory left.
You know, this again is one factory left.
Now, at this point, just kind of the intensity of the jet attacks, guided missiles, etc., the rate of guided missiles start going up as well.
Now, at this point, he's got two left.
The factories would also repair a little faster on the last factory.
So you could never really destroy it with one bomb load.
You actually had to go back with several bomb loads to attack it.
And let me pause that here.
So you get some sense of kind of the escalation path that was going on here.
Now, Brøderbund being, you know, peaceful living Swedes and all that, were a little, you know, not really kind of against violent shoot-'em-ups, but they wanted to kind of soften them at every step.
So...
With Bungling Bay, they kept thinking about, okay, how do we make this not killing people?
How do we make it not killing people?
And so they took the, you know, really creative solution of let's make them robots.
It's a machine, yet it lives.
Yeah, this is their box design.
It defends itself.
It is programmed for survival.
It is programmed to destroy.
When I first saw this box design, it was like, oh my God, what did you do to this box?
It was like the ugliest thing I had ever seen.
But they'd actually done this on previous games.
Radon Bungling Bay was like actually the third game in which the Bungling Empire appeared.
That was the name of the bad guys in Choplifter, and then later, Lode Runner.
And these games became known as the Bungling Trilogy.
So the Bunglings kind of became their stand-in robotic opponents so that they weren't actually killing real people.
These three games were also the first three American games that were licensed to the Nintendo operating system, the very first 8-bit Nintendo in Japan.
And that was kind of interesting, what happened.
They basically reprogrammed it for the Nintendo, which was also a 6502 based system, and the MSX, which is this computer standard in Japan.
And I played very similar.
They had a couple of enhancements on the NES.
The early NES for some reason had a microphone on the controller, and you could actually yell into the microphone and cause things to happen, like airstrikes.
The C64 version sold on the Commodore 64 in America, and back in the time piracy was incredibly rampant.
In fact, I spent, you know, just huge amounts of time doing weird, bizarre copy protection things.
And everything the Commodore did, you know, one of the big tricks was that the 1541 Commodore drive actually had its own processor, its own 6502 in it.
And you could download code into the disk drive and have it run kind of covertly and do a checksum on the computer's code.
And so a lot of the copy protection that we were writing was either disk read errors that were, you know, printed on the disk at the manufacturer or it was these weird little Trojan horse programs that you downloaded into the disk drive and were running.
And I spent hours just kind of wasting my time writing weird copy protection schemes, which was basically, you know, wasted time because, you know, it just delayed the hackers by maybe two days before a cracked version appeared.
Once it appeared, it was everywhere.
And that was just kind of the way things were back in those days.
We never really had hard metrics, but it was very interesting because a lot of people I know that, you know, had a Commodore back in those days had played Great Armageddon Bay, and we actually ended up selling only 20,000 units on the Commodore.
Now, the Nintendo in Japan, which had about the same installed base, roughly.
as the C64 did in the US. Because it was a cartridge system, there was virtually no piracy.
So the same game on the similar install base in Japan sold about 800,000 units. So about 40x. So almost all the money I made from ran up Bung Lee Bay came from Japan and in fact kind of funded Maxis and how we got Maxis off the ground in the early days. And that was true of a lot of other game developers as well.
Brøderbund kind of noticed this. They got very interested and in fact kind of...
organized a couple of trips where they took all of us over to Japan in 1984 right as the Japanese game market was kind of exploding. And it was really eye-opening experience to kind of go over there and kind of see your stuff on Japanese shelves in a different language and also just the amount of them because, you know, nobody's pirating them so the stores were stocked with just, you know, piles of these things and people were buying them by the tens of thousands. And it was interesting after that, you know, I started kind of thinking, you know, what do I want to work on next, you know? And, you know, of course as I mentioned I took...
the editing of that world, the building of that world was really one of the satisfying parts of SimCity, I mean of Radar Mongolia Bay for me. And so that's when I started slowly evolving Wedit into what became the very first version of SimCity, which was on the Commodore.
Most people have never seen, most people think of the Macintosh and the Amiga as the first versions of SimCity, which in fact were the second generation of SimCity. The very first generation was programmed on the Commodore 64. It was a much simpler game, but I actually had to write kind of a little multitasking operating system to get it to run on the Commodore, because there were some of the routines that were incredibly slow to run, like the PowerScan. But in SimCity, you know, I was working on that right around the time the first GUIs were coming out on the Macintosh or whatever. So I decided, oh, I'm going to design a fancy GUI on the Commodore. And that was my attempt at a graphic operating system, these little icons at the bottom. And I thought it was like so cool at the time, too cool for school. But every game, every version of SimCity after that has had helicopters in it. And it's just kind of a thing that, you know, we have to have helicopters in every version of SimCity, you know. That's kind of where it came from.
Now, Brøderbund actually worked with us when we were starting Maxis, and we were an affiliate publisher with Brøderbund for many years.
Again, they kind of helped get us off the ground until we kind of later went our own way.
We did an IPO.
Eventually, EA swooped in, bought Maxis.
Brøderbund continued.
A few years later, Brøderbund actually tried to buy The Learning Company, which is another big game company.
They actually got outbid by this distributor called SoftKey, which actually ended up buying The Learning Company from underneath Brøderbund.
And because The Learning Company sounds so much cooler, they ended up adopting the name, becoming a bigger company.
and then in a funny reversal, they ended up buying Brudderbund.
Until a few years later, Mattel swooped in and bought the both of them for some huge amount of money. I forgot what the number was.
But then a few years later, they decided it was a boondoggle, so they got rid of it.
They brought in this corporate liquidator that took the two and then kind of chopped it up and sold part of it to Ubisoft, part of it to this company called Riverdeep, which I think is the company that now actually owns the title of Brudderbund, and they still publish Print Shop and stuff like that.
But later on in my career, I kind of stayed into helicopters, did a game called SimCopter, which had some interesting exploits in it. If you ever finished SimCopter, you actually got to see the famous alien scene, too. But later on, you know, I'd always kind of go back and I started tuning into the emulator scene. And every now and then, like every five years or so, I would, you know, pull down an emulator and play an old version of Raid on Bungling Bay. And it was just kind of amazing to me that, you know, I can now play this game in an emulator and it was, you know, exactly what I had done. And it was very nostalgic for me.
At some point I started looking around and I started realizing that people were reprogramming the game on their own. Just recreating it. And it just kind of blew me away. Like, what the hell is this? This is why I just want to show you because it was just like some kid in Kansas or something just decided he, you know, wanted Bungling Bay to look better so he redid it. I'll actually run it for you here for a minute. And it's actually fun to play. I have a couple issues with the way he tuned the helicopter dynamics.
But otherwise, graphically, it's gorgeous compared to my original.
It's got some cool little tilting going on with the helicopter, much better sound effects.
It's got these cool little radar panels where the radars protect you.
It's actually kind of a 3D parallax on the building, as you can see.
It actually is kind of a 3D world, even though I'm only navigating in two dimensions.
But the fact that fans are basically building things that are far superior to the original as tributes just blows me away.
I still suck at this game, so I'm not going to embarrass myself by showing you how bad I am at this.
One other thing, he didn't put in the cool thing where you could land on the board with Airbus.
So I've been actually trying to contact him and tell him about a couple little improvements that would really make this game kick ass.
Then after that, I was looking on the web some more, and I found...
Oop, I don't want to do that.
I found that people were doing more stylized versions of Bungling Bay.
This is not the only recreation of it.
One guy actually did a full 3D version of Bungling Bay that she could play from the helicopter's point of view, heads-up display, etc.
And, you know, it kind of amazes me that things that used to be done by us as professional game designers are now things that, you know, 12-year-old kids are doing, you know, as part of their computer science class.
And I think it's very cool, too, the fact that kind of these ideas that started these like little germs can kind of live on in people's imagination. And as I showed you that very first slide, you know, when I think of Bungling Bay, this is what I remember. In fact, it's kind of coming true automatically. It is going to become that over time. You know, I'm sure people are just going to keep remaking these old games like this. But that's the end of my prepared talk. I think I actually, for the first time in my life, have a few minutes for questions. So, thank you.
So I guess the microphones, if anybody wants to ask a question, just go up to one of these microphones in the aisles here.
Howdy.
So, in the original Commodore 64 version, I found a reproducible bug.
I'll get right on that, yeah.
If you kamikaze your last helicopter into the last factory for critical damage, the game horks because it doesn't know if you've won or lost.
Oh, you mean it freezes.
Yeah. It's a full crash, and so I was just wondering when the patch was going to come out.
Well, thank you for reminding me, because the one thing I didn't show you was what happens when you win the game, which a lot of people never saw, so I'm going to skip ahead into this movie a little bit, because this is like my forte of graphics programming, and let's see, it's about 50, yeah.
So right about here in this little movie thing, he actually wins.
I'll just take a second, you can watch it.
And then the whole game goes into a kind of this, it pauses and then goes into slow motion.
Now I said that basically the entire game was about 80K, you know, we only had 60K of memory.
That other 20K was actually the loading screen and the wind screen.
And it was funny because back in those days programmers would spend, you know, a month working on the wind screen or the loading screen.
and sell it on that. So here's basically the daily news.
And depending on your victory, you've got different headlines here. You've either got a marginal victory, a decisive victory.
So the headlines would actually change depending on how well you had played the game.
And at this point, oh and then we get the victory celebration. Do you ever see the Calvin and Hobbes cartoon where he gets an A somehow one day on a math test?
And then he imagines in his mind this giant parade, ticker tapes, and he's going through the streets. Calvin is a genius.
That's what I was kind of thinking here.
So you basically get this little.
guy with a parade of fireworks. Yeah, I know it's not impressive. But this is what happened if you wanted to write a book like that. More questions? Or was it all self-explanatory?
I got most of that.
I got stupid happy. Yeah, go to the microphone.
Is that the end guy?
No, just don't mic one of the chimp, I can be smarter.
Hey, good to see you again and I just wanted to find out how things are going with SuperHappy and what are you going to do to innovate offline, online that others aren't?
I didn't, still didn't get the last thing about the offline, online.
Well, because you remember you talked last time, we talked about what you guys were looking at.
with gaming and real world problems and online, offline, along with the robots and other stuff, you know, but where do you see some real ventures?
Well, first of all, it's the Stupid Fun Club, not the Stupid Happy Club.
Oh, I'm sorry.
Stupid Happy Club makes no sense.
Well, I'm always happy when I'm stupid, but you know.
Okay, that's just me.
Yeah, Stupid Fun Club, I mean, we're doing several projects.
Most of them I can't talk about right now, a couple of which I can, actually.
One of them is a crowd-sourced television show that some of you may have heard of.
It's on Current TV called Bar Karma.
And we actually have thousands of people.
submitting storylines and then collaboratively working on storylines and voting on their favorite storylines that through this pipeline process we take these storyboards, kind of like graphic novels that the players have made, and give them to the production team.
And they actually go out and shoot with real actors on a real set, you know, pretty high production standards, shoot an episode every week based upon crowdsourced submission of ideas and in fact down to the scene level, how the scenes go in the plots. So that's one of them. We're also doing a lot of kind of fun toy stuff.
mainly just because I like toys.
Our first toy that was announced, actually, I've always loved ants, you know, ever since SimAnt and before, and I got a chance to go meet with people that make the ant farm, Uncle Milton's, and told them, hey guys, I like your ant farm, but I could do better.
And so we asked if we could redesign the ant farm, and we did.
So we redesigned the ant farm for them, and it's going to be on the market this fall.
It's called the Ant Farm Revolution.
You know, it's fun kind of taking in, even with that, we're kind of looking at how we, you know, not only have an ant farm, but have a collectible card game about ants and all the cool ant species and stuff like that.
So I'm, you know, with a lot of things in the Stupid Fun Club, trying to move gaming out into the wider world, embedding it in television and toys, you know, in the web and stuff like that.
We're also working on some game projects that I can't really talk about.
That's cool.
But for the most part.
And for the gaming stuff, you know, we are doing some gaming stuff, and, but for the most part, the stuff we're working on is not shrink-wrapped, triple-A, Xbox only.
It's stuff that's a little bit more diffuse, you know, mobile, web, connected.
And I'm really interested right now in games that get people more engaged in the world around them rather than distracted from it.
So games that actually are kind of played out in the world and about real things.
And using the world as a gaming platform rather than an Xbox.
Wow. So kind of AR stuff.
Cool. I'll talk to you later.
What's the biggest thing keeping you up at night right now?
And what are you trying to figure out next for the industry?
You may have talked about that. I'll shut up after that.
The biggest thing keeping me up at night right now is a 27-pound 10-month-old.
I have a new son, Parker, who's wonderful, but that's what keeps me up at night.
Congratulations.
Thank you.
Thank you.
Hi.
Hi.
Hey, yeah.
Yeah, I just wondered if you could share your thoughts on the N1 rocket platform and any of the issues there that may have kept them from successfully being able to get to the moon.
Oh, the N1.
Yeah.
Yeah.
Yeah.
That's a long story.
That's a whole other Russian Space Minute.
The N1 was an amazing booster, and they had amazing engineers on it, but they didn't have the budget.
The entire Russian space program, you know, even up to that point, up to, like, the lunar race, the Russians were basically operating on about 20% of the resources of NASA.
The Saturn V did a huge number of ground tests of the Saturn V booster, and they had some huge problems with the internal dynamics of that, called pogoing, where these oscillations would start being set up and the thing would shake itself apart.
And it was only because of their extensive ground testing that they were able to kind of solve that problem.
You know, basically, had NASA had the budget the Russians did, there's no way the Saturn V would have ever, you know, become flight ready.
So the Russians were forced to do flight tests when instead they should have been doing ground tests.
And they were all full-scale tests of every stage at the same time.
And that was the only way they possibly even had a shot at it.
And they kind of knew that.
They kind of knew that it was a long shot.
They had about a one-in-three chance or maybe a one-in, you know, six chance of pulling it off.
And the N1 was this humongous thing.
It was bigger than the Saturn V.
had a huge number of engines in the bottom of it.
And also the material science in Russia was a little bit beyond NASA, and they kept having failures down in the turbine section of the engine, and typically most of the failures were the result of a turbine burst that would then cascade through the entire first stage.
But that's the short story.
Awesome, thank you.
Sure.
Yeah?
Hey, I was at your IGDA interview with the Romero Archives.
Yeah. And you talked about that robot kind of game that you were contemplating while you were developing SimCity kind of in parallel.
Oh right, yeah. In fact, I kind of skipped over that here.
But there was a game I worked on actually between Red Emberling Bay and SimCity that I called ProBot.
And it was a very strange game. It was like, I was moving over a scrolling world still, but it was like this Escher-like world of platforms and catwalks and ramps.
And in that world, you actually were driving this little robot.
And basically, it was a little six-wheel robot with an arm on top.
And if you move the joystick around, you would drive the robot.
If you held the button down to move the joystick, you would move the arm.
And so you could kind of move around, up and down these little platforms, and pick up things and manipulate them.
And then on top of that, I built this kind of weird landscape of waterfalls, some going uphill, some going downhill.
Again, you know, downhill, a very Escher-like world that little things were flowing on the water, little balls and boxes and pyramids and stuff.
And you were trying to collect these, you know, with opponents.
It's kind of hard to describe, but...
Yes.
So my question was, in that talk and in now, there's sort of this series of facts and it's this interesting hindsight model. I was wondering if you could talk about, you know, in the moment, like a lot of these people here, you're, you know, you don't know that SimCity is a really great idea and that's going to succeed. Were there like emotions and sort of decision making you had to do to, like hard decisions to go with SimCity? How did that feel in the moment?
That's a good point. So I was working on this little robot game and kind of at the same time I started playing around with the editor and playing around with SimCity.
It wasn't SimCity at that time, it was a world editor and I was putting down little roads.
But I began becoming interested in adding more dynamics to the world.
I wanted to see traffic moving on the roads and things happening.
And so that was the first time I actually started reading books on, you know, cities and urban planning and urban dynamics and came across the work of Jay Forrester who wrote a seminal work way back called Urban Dynamics.
And because I had that kind of resource, this depth of a whole field of topic to research, I got interested.
more interested in this little program.
Hey, I wonder if I can do a traffic model the way they do traffic models.
I wonder if I can do land value according to this theory.
And in some sense, the research I was uncovering that eventually led me to SimCity was encouraging me to spend more and more time working on that simulator.
Whereas the robot game was really just this fantasy little world.
It wasn't really connected to anything.
It was purely from my imagination, which was cool in and of itself.
But I think there was something deeply fulfilling about me trying to recreate the world in what became SimCity.
relative to imagining just a fantasy world in the robot game.
And I think that's kind of what really tipped the balance.
That I found myself more and more...
I never really thought of city planning as that fascinating until I had been...
At some point, popped up and realized I was developing a city simulator for several months.
And I kind of looked back and said, wow, this is like a little city simulator, isn't it?
And that was the point at which I started noticing urban books, urban planning books, and saying, wow, that looks like a good book.
Whereas before, I would have walked by and said, wow, that sounds boring.
And it was this almost discovery, the fact that...
by having this little guinea pig city on my computer I could poke and prod now made the subject matter fascinating to me.
Whereas before the subject matter, just reading it in text would have been very dry and boring.
So it was that discovery that I think I wanted the player to kind of re-experience when they were playing the game.
So did you say the model was sort of following your own interests and fun and just trusting your instincts?
Yeah. I mean, in that case, you know, typically almost all the games I've worked on, every game I've worked on, has been, you know, some passion, some interest I've had.
that I knew that I could, you know, spend years immersed in this because I love the idea of the subject, the topic, whatever it is, whether it's ants or cities, astronomy or helicopters.
You know, unless you really enjoy, you know, the topic, you're not going to do a good job on it.
So, and to me, that was one of the huge attractions of becoming a game designer.
You know, it was when I realized that, that I realized, okay, I don't have to become an architect or an engineer or whatever.
If I'm a game designer, I can study whatever subject I want to, immerse myself in it, and get paid for it.
It was one of the few careers I actually saw where I could spend my life learning about random disconnected topics and still making go of it.
Thank you.
Sure.
Yeah.
Yeah.
Hey, Will.
Hey.
So suppose I know this guy whose copy of Bungling Bay happened to be a pirated copy.
What should I tell him would be your favorite charity to send the inflation adjusted retail cost of goods to?
Oh, wow.
That's a good one.
Man, I would say take that money and just use it to support the indie game scene, you know, right now.
I think that's, you know, the kind of ethos of these games, where they came from, or, you know, what the indie game scene represents right now.
And so I'd say anything you can do to represent that community, that's where it should flow.
Great answer, thanks.
Sure.
Yeah.
Uh, maybe a better answer would be...
The Pursuit of Happiness Foundation. We're a non-profit that specializes in getting custom controllers to gamers with disabilities.
Oh, okay.
Just throwing it out there.
Yeah, there are many good gaming charities. There's another one that I was just acquainted with.
I forgot what it was called, though. I wish I could remember the name.
But basically it's for disabled veterans in the military hospitals, you know, basically donating games and Xboxes and stuff to these people that are stuck in the hospital, you know, for long periods of time.
And for them, you know, the big deal is, you know, Halo's coming out. We want Halo. And they actually send people down and buy Halo for full retail price so these soldiers back in the hospitals can, you know, enjoy it.
And I thought it was just a great charity for these guys that, you know, really aren't asking for much. In fact, they love, you know, this is the demographic. This is our pride demographic.
And I forgot the name of the charity, though. I wish I could remember it. But there are many good gaming charities out there.
Yeah. Hi, Will. I was just curious, how long did it take you to make and did you have to have like a secondary job, like to support yourself at the time?
Um, actually I was going to school at the time I was working on Bungling Bay and it took me about a year.
But at that time what would typically happen is you'd go to a publisher, you'd kind of build a prototype, which, you know, back in those days would take you a few weeks or a month.
You know, the first prototype I showed to Broderbund was the result of about a month of coding on my part.
And the publishers would typically give you an advance on royalties.
The royalties back then were extravagant, to say the least.
They were like 20, 25% of what they'd receive.
And the licensing royalties, the reason I made enough to help kickstart Maxis was that of the licensing revenue, they would actually give me 40%.
So 40% of what Nintendo paid Broderbund, I got.
In 800,000 copies, it kind of added up.
But that was typically what happened back then.
And almost nobody spent more than a year on a game.
A year was a huge, huge amount of time to spend on all these games.
Some of these guys, like Nasser Gabelvi, would spend three months just banging it out and do the next one.
Three months, three months.
And these were good games.
They weren't junk.
They were just amazing little pieces of craftsmanship on the Apple II.
Cool.
Thanks.
Sure.
Hey, you mentioned earlier that one of the reasons you wanted to create Bungling Bay was sort of this.
feeling of having a self-contained world for the player to explore.
Yeah.
And I know you study architecture, right?
Yeah.
I actually, when I first went to college, my first major was architecture.
Okay.
I was wondering if maybe you thought about what it would be like to have a game where it was just a world to explore and maybe there weren't any really goals or objectives.
I've seen art projects like that.
You know, different people, you know, both coming from the game community and also coming from.
the art community, people like Bill Viola and stuff, kind of doing these interactive things where you're just kind of moving through a space. In some sense I always thought the Miller Brothers stuff, Cosmic Osmo, Manhole, that's what those games felt like to me. And you know, those games, even though they were basically elaborate hypercard stacks, and Myst as well, were these almost artistic statements of ambience.
what it felt like to be sitting there and hearing the wind blow through the trees, or the water lap against the shore.
The puzzles were kind of an excuse.
And even, you know, Cosmic Cosmo and Manhole didn't even really have puzzles.
It was just like little toys you could go kind of play with.
But they had places. It was these spaces, and every space had a different feeling.
I remember there was one scene in Manhole that I always just found enchanting, and it was simply this little open field on a summer night with the crickets chirping.
And this is black and white graphics, you know, on the Macintosh, but yet...
going to that screen and moving around this little meadow and hearing the crickets chirping on a warm summer night was so evocative to me. And it just amazed me how they can kind of pull that association out of my mind using such simple techniques. But, you know, and again, in this game there was nothing to do. There was no winning or losing. It was just you kind of moving around the world. But I always love their stuff.
Thanks.
I don't want to start dueling charities here, but one of the better.
One of the better kept secrets of the IGDA is the fact that it has a 501c3 foundation, which is a charity.
There are people in this room who have benefited student scholarships from the IGDA foundation.
So it's your organization and it's a charity.
It comes off your taxes.
So if you're looking for a place for a few spare shekels to help folks in the industry, that's one of the ones to check out.
Okay, thanks.
So I'm having trouble making rent this month.
Yeah, so what's your charity?
Actually, I wanted to ask if Chetted and Wetted are still around or if they went up in the fire.
No, it all went up in the fire. I mean, I had all these old prototypes, my original Commodore, my original Apple II.
Yeah, it all went up in the fire, unfortunately.
Well, that sucks. Thank you.
Yeah, I know. Yeah.
Did I ever get my own helicopter? No, no.
But I actually had a pilot's license before I kind of got into all this stuff.
And later when I was working on SimCopter, I went out and started taking helicopter flight lessons.
Although I never got my helicopter license.
But I still to this day just love those things.
They're just too expensive to own.
They're not very practical machines.
Let's see, how are we doing on time?
We probably should, I think, one more question.
One more?
OK.
Yeah.
Concerning your interest in games and conveying interest in topics to other people through making a game on that topic, so when is cosmetology, or I'm sorry, not cosmetology.
the Russian, the Soviet space program, when is that going to be the next topic for your game?
Oh, the Russian space program.
In fact, that's, you know, I think the games are great for certain things and I think storytelling is great for other things.
I think of play and story as kind of two sides of the same coin.
And the Russian thing I think definitely is more a story thing.
You know, one of the reasons I kind of insert these in my talks is because they're these amazing untold stories.
about reality, what really happened.
Everybody's heard the Apollo 13 story over and over and over, but equally bizarre, interesting, cool things have happened in the Russian program many, many times, and nobody in the West has ever heard them.
In fact, a lot of people in Russia, most people in Russia have never heard them.
A lot of these were classified until about, you know, 15 years ago.
And so one of my background projects is, in fact, trying to find a really dramatic way to bring these stories to the public, probably in the form of dramatic, you know, reenactments.
So I'm just practicing for that.
All right, well, thanks, everybody.
