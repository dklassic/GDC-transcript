Welcome, humans, to everything I said was wrong, why India is different now.
Allow me to briefly set the context for this series of micro talks.
This is a session about regret.
Everyone on this stage has given advice, advice that they stood by and truly believed in, advice that maybe they don't think is such a good idea anymore.
So today's a chance for us to refute our past selves, to set our records straight, and to protect our reputation as decent givers of advice.
But why do we care?
Why bother about things we said in the not so distant past?
Well as we have all been told, the industry changes super fast and advice given just a couple of years ago in earnest may be irrelevant in today's world and context.
To illustrate, let's take a look at how the future of games has changed over time.
So I think it's a good idea to look back on things that were considered the future of games many years ago because it's a good way of looking at how people were reacting to the changes that were happening right underneath them.
And also stuff that seems super obvious and commonplace now wasn't necessarily as obvious then, especially developments that would have wound up having a huge impact on indies.
And you know, sometimes you make a prediction about the future and it's not, it's just not like right.
Doesn't quite make it, but the point is, opinions change fast, predictions about the future change fast, and our industry just changes super fast.
So, advice we give today probably has an expiration date.
Basically, context is everything when giving advice, and time frame is but one of many contexts that you will listen to today.
So, let us begin.
My name is Lisa, I am a game designer, and I'm a giver of bad advice.
I've worked on a number of large AAA games, and a number of indie games, and one game that's sort of in the middle of there.
And over time I've given a lot of advice, be that in formal articles, or on forums, or speaking with aspiring devs, or giving feedback on game jams or whatever.
And as it turns out, a lot of this advice has been less than good.
In hindsight?
My big thing, I'm very concerned with pendulums, meaning sometimes I would give advice that wasn't outright bad, but over time it would swing too far in one direction, so I want to take it back towards the middle.
So my bad advice are mostly a lot of updates and clarifications and course corrections.
So when I say bad advice, I probably really mean okay advice that was given irresponsibly and bad in specific cases as if they're getting too pendulous, but that is long and hard to say so we'll keep with bad advice.
So here's number one.
This is a pretty general one that I used to give very early on in my career and it goes something like this.
Someone who's just getting started in the games industry would say.
or they were just getting started making games at all, or interested in games.
They would say, how do I break into the games industry?
And I, being a young enthusiast who was freshly at the start of my career, would say, make a game.
Congrats, you are in the industry.
Now, before I explain the trouble with his advice, let me explain why I did it.
This advice, the problem it was addressing was one of confidence.
You know, at the time, the indie scene was still on the rise and a lot of aspiring developers still had the mindset that the industry was limited to big studios and that there was some prerequisite they had to fulfill before they actually got to make games.
So, you know, imposter syndrome has, and will probably always will be, a big obstacle for people to overcome to get in the games.
And, you know, that was good.
That's good advice for those people, but I hesitate to give this blanket advice immediately anymore, because yes, it's still helpful for people who are just getting blocked from being in the community, but I started realizing over time that this is only a subset of people who are asking this question.
For everyone else, how do I get into the games industry was often a broad question that was masking something more specific underneath.
Questions like, how do I make a sustainable business making games?
Or, how do I get to work in this particular studio?
I want to make a game and I'm confident but I feel overwhelmed and don't know where to begin.
Please help. Or how do I feel like I belong in this industry or this community?
And for all those people, the advice of just make a game is really unhelpful, like supremely unhelpful.
So I stopped defaulting to this response when I noticed I was occasionally getting more eye rolls and exasperated sighs.
And also, what an asshole I was to have that response, just make a game and you're in, coming from me who had one, gone through an expensive graduate program in the US with a highly active network of alums and budget to send students to GDC.
and who got extremely lucky that a lead designer at a big studio took a chance on her for an internship that pretty much paved the way for her to enter studio work directly after school conveniently sliding in just before the local economic climate made that path way harder for everyone else and I'm just like yeah just make a game and So I wasn't very self-aware in the early days.
So nowadays, if someone asks me that question, I drill in for more details first.
What do they mean specifically when they're saying what, how do I get into the games industry?
And then of course, any subsequent advice I give is amended with the fact that the industry constantly changes, so I have no business giving break-in advice when I got into the industry eight years ago, but I can try and be as helpful as I can.
So, the pendulum, in this case, the course correction, looks like this.
I gave this advice as pushback to the perception that there were these big obstacles keeping someone from making games that they weren't allowed to.
But over time, it swung too far in the other direction and became an answer for too narrow of an audience.
So now I try and take it back to the middle there.
All right, bad advice number two.
This is a bit student-centric, but I still think it has some general applications.
It's about portfolios.
People often ask me for portfolio advice, and there used to be a time when I would tell people, especially students, game jam games are great for your portfolio.
Now I do love game jams and I think they have tremendous value, but I don't give this advice anymore.
And let me explain why.
So, in the first place, I would give this advice for several reasons.
One, you know, this is just good advice for people to take when they're afraid to jump in and make anything at all.
I found that years ago it was way more common to find people who were mired in gigantic, too long projects as their first game and needed a way of overcoming that.
And on the student front, there were fewer game programs at the time and many people making games for class, those games tended to lack depth.
In fact, I remember a time when a lot of professionals gave the advice, don't include student work on your resume.
And that was because of reason.
So I encourage students to include Game Jam games as a way of pushing them to do work independent of the classroom.
But things are different.
For one, game schools are more prevalent and many are way more robust in the props tricks they require of their students, which are definitely things that are worthy of showing up on resumes.
It isn't just, oh, this is an offhand assignment I did for class.
So that's being fulfilled.
But game jams have also changed.
Game jams used to be less frequent and only a few happened a year and they tended to feel like big notable events and participation could draw a lot of eyes on each one.
And now there are many, many game jams you can count simultaneously running at all times as you can see from this slice of the game jam event calendar on itch.
And I noticed recently, like within the past couple of years, I had students that participated in so many game jams so frequently that they weren't spending any time on any long form work.
So their portfolios ended up being quite shallow.
So I still think game jams are wonderful ways to get involved with the community, get experience working with new devs, have a chance to like force yourself into some creative constraints.
And of course it is extremely useful still for someone getting over the hump of completing their first game.
And I recommend it to those people all the time for those reasons.
But when it comes to the portfolio stuff, I don't say that anymore.
I tend to recommend them as supplementary material.
And the goal here is the pendulum swung so far from only do what's required in class and I have to make an MMO as my first game to all game jams all day, every day, forever.
So just trying to take it back to the middle.
All right, number three, this is an apology to tech folks and programmers that I've worked with over the year who patiently taught me why this advice was not so great.
This was another one I'd often get from people wanting to get started and they would say, what programming language should I learn?
And I would say, it doesn't matter.
It does not matter what programming language you learn.
And I don't give that anymore.
But at the time, that advice by itself isn't necessarily bad.
And at the time, I had a lot of students, or not students, but just people getting into games.
They were coming up through game dev.net communities where there's these arguments about what the best programming language is and this weird posturing thing going on in that community.
And that sort of thing can really demoralize people even before they get started.
So for folks in that context, that was a useful thing to say.
But I found that over time, saying this as a general blanket advice for everyone involved in games could perpetuate inaccurate information and it ended up blocking some programmers from reaching the goals that they had.
Because yes, at a certain level it doesn't matter what language you use and it's good not to get discouraged by evangelists.
But you know.
there is this one level, like when you start dealing with memory management and optimization, it's different. It's a different level and at this point it does start to matter what language you learn. There's just like a different skill threshold. So I started to realize by withholding this information up front, it did people a disservice, especially if they had particular future goals where they might need to end up knowing this sort of stuff.
And I know we tend to think of optimization as like things for big AAA companies and console game development not relevant to indies.
But that's not always the case and it doesn't always have to be the case.
Especially with VR being such a thing for the indie community.
Optimization is a thing that can come into play and even just on that, I know a lot of people who got into gameplay programming and ultimately realized that their true passion was tools.
And so that sort of thing was a bit of a block to keep them from getting there.
So it's not that this advice is bad without context, but I noticed over time I started seeing interpretations of that advice turn into something a little bit pendulous, which is why I don't give it anymore.
So instead, if someone asks me for advice on programming languages, I try and get more details and context, you know, what...
What are your goals?
What's your current experience?
Are you the sort of person who learns best by seeing results fast?
Are you the sort of person who needs to completely understand a system and how it works before moving forward?
And all of these bits shape the answer to be more specific.
So there we go.
This is where it started, where it ended up.
Trying to keep it down in the middle.
Alright, last one.
This is kind of a super specific weird one.
It's different than all the others, but it has something that has burdened me with guilt for many years, so bear with me.
For a long time, throughout my career, I used to say this, I used to recommend, group brainstorming is the ideal way to generate creative ideas.
And I really believed this.
I believed it so much, I once wrote this extensive article, I think on Alt Dev Blog a Day, about how to moderate these meetings and pool of tips to make them not terrible.
And it's because at the time I was really believed in emphasizing that ideas came from the team, not one person dictating all the creative decisions.
So I really pushed this.
But as it turns out, group brainstorming is actually not a very good way to generate creative ideas like at all.
And this has been proven like with science, all those hot takes.
This is the research that they all refer to.
And you know, the reason it ends up being has big creativity flaws, it's because of interference of human group behaviors like anchoring or social loafing or regression to the mean, stuff like that.
But there's something else going on that I want to point out.
These studies on the ineffectiveness of brainstorming came out in 2010.
Meanwhile, my manifesto was a year later.
So it's not like I didn't have this information available to me.
In fact, I'm pretty sure in those years I probably heard the counterclaim about group brainstorming being.
garbage, but I conveniently filtered those out, and it's quite frankly because I wanted it to be true.
I was good at those meetings, I was good at moderating, brainstorming, and I wanted it to be a useful skill.
So I conveniently filtered out these facts.
This is one of the most dangerous parts of giving advice, is the cognitive biases that come into play that allow us to pass on terrible advice, especially when it comes to advice that involves always or never or the best way to do something.
So remember the wise words of Neil deGrasse Tyson.
If you want to assert a truth, first make sure it is not just an opinion that you desperately want to be true.
So I don't give this advice anymore, but it's not like a complete wash.
I do advise a slightly modified process that works pretty well and keeps the teamwork aspects in where you brainstorm problems to solve as a group, break off, come up with solutions individually, and then come back together to discuss those solutions.
I've used this on a few smaller games since, and it's a pretty good process.
All right, so the pendulum here was one of an extreme.
I was pushing the group brainstorming for the group part, but was justifying the process with something that was not true.
All right, so real quick, to close out, I wanna give some rapid-fire advice for people receiving advice, how to take advice.
Number one, be suspicious of how-to success stories.
Stories where, you know, stories about how people got where they are are great, but watch out for things that are like, I did these steps and had success.
Therefore, to success, you do these steps.
Similar, realize people may not have had success, or they might have had success in spite of the things they did instead of because of them.
And number three, mind the voices you are not hearing when you hear advice.
We hear a lot of the same voices in this community over and over again.
And just be mindful of this, be mindful of who you are not hearing from.
Because if you aren't careful, the people you hear from over and over can end up sort of narrowly defining what the industry is, and that's dangerous.
So just be mindful of that.
Mostly, context is everything.
The answer to any request for advice is usually it depends.
Mind the pendulum and give advice responsibly.
Thank you.
All right.
So I've given a lot of advice.
My name's Daniel Cook.
I'm a chief creative officer over at Spryfox.
And.
I've given a bunch of bad advice.
We've had some of that success bias that Lisa was talking about, where we've done things and we've been successful, and then we try to tell people those, you know, it's like, hey, look at this cool thing we did.
You could try it too, and then it never works out.
And then I come back a couple years later and I talk to the people that I've given advice to, and they're like, yeah.
We kind of went through a year of hell trying to do what you told us might be work out.
And we almost lost our passion for games and our lives were almost ruined.
And but you know, then we figured out kind of something that works for us.
But thank you so much for that advice.
And I just go away and I'm like, Oh, why am I a horrible human being?
So this site gets me in trouble a lot.
There's a website called Lost Garden.
It has a lot of, it's got years, years of game design advice on there.
And yeah, you know, context.
In 10 years, a lot of stuff changes.
For example, I used to give advice, this was in 2005, before there was even a thing called free to play.
The acronym didn't really exist.
And I was super excited about this new business model called service based games or free to play games.
Like I wrote this article about like.
It's like getting the band together and you're going touring as opposed to selling this big album.
I was contrasting it with retail sales and I was super excited about where that would take us.
there were all sorts of good things about it.
I don't know if anyone here has done retail.
I don't know if retail exists for a lot of people anymore.
But it used to be these feast and famine cycles.
You'd really get lots and lots of money and then you'd have no money for like three years.
And then you prayed that your next game was gonna be a hit.
And so I'm like, wow, if we could get continuous money all the way along, wouldn't that be awesome?
There were big, powerful publishers, the indie digital distribution thing didn't exist at the time, and it's like, wow, we could break the power of publishers, we could have direct connection with our customers, and free-to-play's gonna solve all that.
We're gonna have this tight connection between us, the developers, and our community.
And so all this good stuff was I was like excited about it was one of these things where sometimes advice givers They see a future and they make that future into a beautiful thing in their head, but then reality happens and capitalism happens Turns out that service based games are a pain in the ass to make. You can make them and you can lose your shirt on them.
Super specialized knowledge to build well. You have to have analytics and back end knowledge and there's certain patterns that work and there's certain patterns that don't work. There are, if there's a hundred ways that a steam launch can go wrong, there are 10,000 ways that a free to play launch can go wrong.
And they do not work for every game.
Certain people, like developers, they have a dream game, and they're like, oh, well, just switch out the business model and add that free-to-play to it.
It doesn't work.
It doesn't work at all.
Like, the game and the business model are tied together at an intimate level.
Most of the games that you grew up with in the like.
in the 90s or early 2000s, were specifically, they evolved for retail.
They evolved for a very specific market environment where there was a single price and they didn't give a damn what happened to you afterwards.
As long as you paid that upfront cost and you got excited about the press and PR and you bought the game, then the game was good to sell.
And so we built these genres that were based off that business model.
and they don't transfer very well to service-based stuff.
And teams don't necessarily have the same skills, mindset, excitement.
Oh, sorry.
I'm just talking here.
Put me in a closet, turn me around backwards, and I'd be happy.
So they've also evolved into their own ecosystem.
So like Free to Play is just a weird, it's this weird like Galapagos of its own type of games.
You know, like, you see the future, and you dream about it, and then you build it, and it turns out every single time there is a new technology or a new platform, it's going to come with unique constraints.
And we don't know what those constraints are when we're dreaming.
And when we get there, they may not be constraints that we'd like.
So, and you may not want to build on Galapagos.
It's kind of a series of islands full of turtles in the middle of nowhere, right?
So maybe that's not your thing.
So whenever you're hearing someone dreaming, it's very exciting to listen to dreamers.
But don't necessarily say, oh wow, it's gonna be everything they promise.
Because usually it's that plus a whole bunch more.
The other one I was excited about was making your game multiplayer.
I'm like, maybe we can connect people.
Wouldn't it be cool instead of dying slowly as we stare at the glowing screen all by ourselves in a darkened room, we were actually connecting with humanity and making friends and building relationships.
That sounds like an amazing thing to me.
And like, you know, you put a game out there and it's got community and people are playing with each other.
It's like all the joy of playgrounds in our childhood coming into a game that we're making for others.
And so I got really excited about multiplayer as well.
And it turns out there's a whole bunch of other constraints associated with that that cause people to Destroy their entire careers as they smash up against this cliffside It's very expensive.
Multiplayer can be anywhere from 2 to 10x as expensive to make as a single player game.
It's a lot of work.
It has more design risks.
It turns out when you put people together with other people, they do weird shit.
And...
When you have a single player game, you kind of have this funnel, and you can do a bunch of play tests, and there's a limited range of things that people can do.
But multiplayer, it's like, wait, I had no idea he was going to do that with the seashell to that other person with 500 of his friends.
Like, it's just not something that comes into your head.
And they do it and you're like, oh wow, we now have to solve that.
And now you're into weird, messy design problems of like governance and like how do we implement a proper like government and democracy and rule system in our game.
And it's like, wait, those are unsolved problems.
And so it's hard.
And technical risks and servers.
And so everyone who took that advice kind of failed.
So I've had great guilt over that.
So I would say whenever Multiplayer development is sort of like expert game development, is one way to look at it.
So if you've got four or five games under your belt, you have an amazing technical background, you've built like a half dozen multiplayer prototypes in your spare time, you know how to scale servers, you know how to do all this stuff, then sure, go for it.
But...
Often I should like say, wait, what's your background?
Like, is that the type of game you want to make?
Like, you know, like what's your skill set when you hear some of this advice?
Go cross platform.
This was another piece of advice I gave.
Seemed really smart.
So multiple shots on goal, like you make one game and then for relatively inexpensive porting costs you get to put it on multiple platforms.
And let's say that one platform totally screws you over by not giving you a feature, well that's all right.
because then you can get a cool feature on a different platform and maybe you'll be a success.
And this actually worked for us.
We released Triple Town on two different platforms and it was a disaster, complete disaster.
And then we released it on mobile and it was this wild success and we're like, obviously this works because it worked for us.
So multi-platform is the way to go.
But you know, it's not always a good idea.
Certain games fit certain platforms well.
We had a game, Scott Brody, right over here, and we released a sort of a collectible card game.
And we put it on Facebook, of all places.
And at this point, Facebook was relatively new.
It was a new platform.
New platforms are exciting because you can get access to customers.
So it's not like this bloody red ocean of like thousands of games out there.
You might be like a small number of games relatively early on.
Hey, look at all these people that are desperate to play.
They'll play our game.
But each platform has its own style preferences.
The players on Facebook prefer a particular type of game.
The people on a mobile platform prefer a particular type of game, and games don't transfer all that well.
Control systems don't transfer.
Aesthetics do not transfer.
And early on in a platform's life, you don't know what those aesthetics are going to be.
You have no idea.
So again, you're guessing into the future, you're making a prediction, and often you'll port a game to that platform and it just won't work out.
It just will be like a complete disaster because you kind of missed something really, really obvious that you learned about six months too late.
With multi-platform, I still think it's an okay idea, but on new platforms, you're really taking a risk.
And if you don't have a lot of experience with a platform, you're taking a big risk.
So do it in a way where you can fail, you know?
Which actually leads directly to this last lesson.
Right here, or where are we?
There we are.
I was like, well, games fail all the time.
Like, I've been making games for about 20 years, and you know how much money I've wasted?
How much time I've wasted?
Like, so many dead games.
So many things that I believed in 100%.
We built them, and they just failed.
Like, just carcasses of games.
That is my career.
And so I'm like, but wait wait, I know how this is done like I've watched publishers do this What you do is even if you have like five games fail That's okay because one game will be a success and it will make a lot of money and it will pay for all those other games And so I wrote this big article on it.
I was like, hey, here's portfolio theory for game development.
Here's how you make multiple games and here's how you budget in order to like, so that you can have one game be a success and pay for some of the other ones and so on and so forth.
It's lovely business school theory and it works really, really well, except there's a problem with it.
People heard this aim for a 5X return on costs, and they got completely and utterly freaked out.
Like, new devs, I was speaking to new developers, and they're like, I'm struggling to just make a single game, and you're telling me to make five games?
this is overwhelming.
You've basically just ruined all my dreams.
And I went home, I read your article, and I went home and cried.
And they're like, and wait, wait, like I made a game, and I'm so happy because it made back the money that I made, that I put into it.
Like it broke even.
I can make another game.
Isn't that amazing?
And then I read your article, and it said, no, you're a failure of a human being.
And, It's like, oh, it comes, like this portfolio theory, it comes across as you're all gonna fail and shouldn't even try.
And so I was giving advice that was based off an actually well-proven sort of strategy for making games, but it was the wrong advice to people at the wrong time in their careers.
And it was really demotivating.
So again, that was a matter of me not listening to who they were and what they needed.
So this kind of gets into a piece of advice giving.
We're all on sort of a very, very personal journey when we make games.
We all start out and there's certain things we're good at and certain things we're bad at, and then we learn new skills.
We might learn how to program, we might learn how to do design, we might learn how to think about business, but we're all on very, very different points in that career.
And when someone gives advice, especially in a conference like this.
they're usually at a completely different point in their personal journey than the person who's listening to the advice.
And it's not an advancement, it's not like this person's level one and this person's level five, and level five giving advice to level one doesn't work out.
It's a tree, and people, like, there are so many, there are lifetimes.
of learning in game development.
Like you can be, you could spend 100, 300 years learning game development and you wouldn't know everything.
And so, when we give advice, often it's, you're listening to an expert.
And that expert is very, very good at a very specific area of game development.
what their advice may be doesn't really match up with what you need at that moment.
So anytime you take advice, use it to go off and do your own experiments.
and do those cheaply.
Don't say, I'm gonna do this thing that this expert told me and it's gonna work out, because you may not have the right skill set, you may not have the right mindset, you may need to contextualize that advice in terms of your own experience.
And this is, I think, one of the reasons why people come back to me and say, you ruined my life, but thank you.
because they were able to take that and go on their own journey and find out things about themselves and about what they could do and what they liked that led them to a place where they could find success in the future.
And so just to show you how screwed up this is, every single piece of advice that I said you probably shouldn't do and was bad advice is our company strategy.
Like, we take, we do every single one of those on all of our games, and we're like, of course we're gonna make a free-to-play, multiplayer game, you know, that brings people together and does all this stuff.
Because it works for us, in our place, in our journey.
But that doesn't necessarily mean it's good advice for everyone.
That would be awkward, but...
Sorry, hold on.
Hi.
There we go.
Hi, I'm Liz England.
I speak really loudly, don't worry, you'll all hear me.
I'm Liz England, I am a game designer at a tiny indie company called Ubisoft.
But, okay, so to be honest, I'm here talking at the Indie Summit, obviously, and I just wanna.
prep you guys to know that my talk is for everybody in the industry.
Doesn't matter if you're AAA, doesn't matter if you're indie, doesn't matter if you're a student or an entrepreneur or you're a developer or a business person.
Whether you're aspiring or you have many more years of experience than me, I feel like this is one of those talks that sort of speaks to everyone.
So anyway, let's get into how I was wrong.
So once upon a time I was a baby game designer.
And when I first entered this industry, I did what a lot of other people I think do, which is seek out advice from more experienced game developers.
I sought out mentors, and I tried to learn as much as I could from them, from their prior, like their existing experience in the game industry.
I took their advice, I took their industry wisdom, I internalized it, I learned how the game industry works, how does the game industry function, and I followed a lot of that advice personally, and I even came to attribute a lot of my success to this advice that I gained from others, right?
And I think, As I was getting that advice and I was succeeding on my own, I was like, well, obviously the next thing I want to do is just as I was mentored by people more experienced than me I would continue and mentor people following in my path.
And I take the advice that I was given and I was like, oh yeah, this is great advice, I'm succeeding, things are going well, and then I pass it down to the next group.
And I think, I thought then and I still think today, it's incredibly important to share knowledge in this industry, except that maybe you should be a little bit more critical than I was on what that knowledge was that you were sharing.
So one of the problems I ran into, as I've gotten older and gained a bit more experience and listened to some other voices, I realized that a lot of the advice that I was passing down, that industry wisdom, the how the game industry works, was being passed down rather uncritically.
And so today, not only am I here to say that I was wrong, but I'm now even philosophically opposed to a lot of the advice that I used to give, and I'm gonna pull out some of the worst things that I said.
And I'm repeating them here today because I treated them like they were facts, like they were immutable, unchangeable facts about how the industry is.
And what they really are is myths we make up about our work.
And you could say that I'm kind of here to try to like break that cycle And so a lot of these things that you're gonna hear me say are gonna be very familiar And you may have heard yourself say them you'll probably have heard many other people here at GDC who have said them at some point And I disagree with all of them, and I will tell you why so here's some of the terrible things that I've said All that matters are your skills just do good work, and you'll succeed You will have to crunch I got to where I am by suffering or some sort of hardship, and so will you.
You know, there's no way to cut corners.
Don't make games for the money.
Make games because you have passion.
A thousand other people would kill to have your job.
People who burn out, well maybe they're just not able to make it in this industry.
And if you aren't willing to make a few personal sacrifices, maybe the industry is not for you.
These got subtly more depressing as I went through them.
But this is advice that I received from my peers, from my mentors.
This is advice that I followed for a while, and some longer than others, I'm ashamed to say.
And it's advice that I used to tell others, and it's advice that I still hear.
I hear it on forums, I see it on Twitter.
I hear about it in studio offices, or among other game developers at ad conferences like GDC.
So this is advice that people still give.
And I feel like a lot of this advice is just putting on horse blinders.
If you don't see the problems in our industry, and you don't acknowledge them, then you can pretend they don't exist.
Or maybe you can say, you can acknowledge that they do exist, but you can't fix them anyway.
Or you can say...
say, as I think both Lisa and Dan may have mentioned, you can pretend that they're, you can believe, you can choose to believe that they're ingredients to success, you know?
You can say that because of this advice you succeeded.
So you succeeded because of this advice instead of in spite of this advice.
So some of this advice, oops.
Some of this advice ignores or diminishes the effects of say toxic work environments, casual sexism, racism, xenophobia, and ignores that some people have advantages as others don't, and that not everybody is completely, not everything that you do is completely under your own control, and that sometimes if you don't succeed, it's not actually your fault.
Some of this advice is all about sacrificing, encouraging you and me and everyone around us as artists or as developers to give up the best years of our life and to ignore self-care, to put quality of life on the back burner, because for some reason a lot of us have it in our heads that making games is more important than being happy and healthy.
And then a lot of advice is there to silence criticism, and it makes you feel guilty or ashamed for complaining.
Because I mean, a lot of other people, like we have it better than a lot of other people.
And some of us have it better than others, and it's true.
But the culture of making games can sometimes feel like one of those stereotypical Greek fraternities.
We have this hazing ritual of sustained crunch, whether it's days, weeks, months, years.
We eat poorly, we have poor health, we miss out on major events with friends and families because we're too busy making games.
I missed out on my aunt's wedding because of crunch and this is somebody who helped raise me.
But I missed her wedding because I was too busy shipping a video game.
We're an in-group of people who have like these shared similar hardships and a lot of us don't know an alternative way but that doesn't mean that our hardships need to be a rite of passage.
And sometimes the advice is just as much for us, the advice givers, as it is for others.
They're the myths we tell ourselves about why people quit, why our colleagues, our peers, our friends are no longer in the industry.
And we say, well, it's not the industry's fault they didn't succeed.
Maybe they just weren't right for the industry.
It wasn't a right fit.
Or maybe we imply that, you know, they're the ones that need to change to fit the industry.
The industry can't change to fit them.
And maybe that's just an easy lie to tell ourselves because it's just so hard to make change.
And then sometimes advice that's given out so freely can feel threatening under the wrong circumstances.
Don't complain or you'll get replaced by somebody who won't.
So none of these statements are true, I say.
Although some would warn, don't take advice that says none in all ways.
I found myself hearing them.
I repeated them.
I was pretty uncritical about them.
I still hear them tossed around pretty freely.
I apologize for every single one of these.
And the attitude paired with this advice is not always bad, right?
Like a lot of times it's just being helpful.
I mean, I think I was just trying to be helpful when I said it.
Sometimes...
We say this when we say, oh, we know it's true, even if we don't like it, it's just the way it is.
It's kind of like giving up.
Sometimes we say it to scare off people who are not really dedicated to making games.
You know, those people who don't realize making games is actually hard work.
Without realizing that we're also scaring away all those people who are willing to do the hard work to make games, but they're not willing to follow along with these myth-making hardships.
And so we scare off the people that could be helping improve our industry.
And when I find myself repeating advice that I was given, and when you find yourself repeating advice that you were given from me or from others, advice on crunch, on personal sacrifice for your art, on the difficulty of breaking into the industry, on the hard day-to-day work of just making a game, I want you to ask yourself, and I really mean this seriously, ask yourself, what kind of game industry do I want to have in 30 years?
And when you, just like me today, are in a position to give advice to others, think about whether you're perpetuating bad habits in this industry, the worst parts of the industry, or whether you're encouraging improvements with your advice, whether you're encouraging the right kind of people that will help this industry evolve into a better place, so that you're still happy to work in it 30 years from now.
And 30 years from now, it'll look like a practical utopia compared to how it is today.
So all that advice that I used to give, those were the myths about the industry that I bought into.
And there's other myths today.
But that's what old Liz would have said, baby game developer Liz.
And today, here's what I would say instead for each of those.
So what I used to say, all that matters are your skills, just do good work and you'll succeed.
Instead I say, It's not just your skills that matter, but also who you know, where you live, what language you speak, your gender, your skin color, or whether you even know about an opportunity in the first place, and that's just the tip of the iceberg.
There's so many factors that you can't control.
So focus on the factors you can control, and if you don't succeed, it's not necessarily your fault.
It doesn't make you a bad developer.
You will have to crunch.
This one's still very popular.
So you don't have to crunch.
So I know developers who are successful, and I know studios that have made successful games without crunch.
But not all of us have the privilege to choose our own schedule.
So even if you don't have the privilege to not work under a crunch condition, you can still make choices that will help mitigate crunch.
You can help make changes in the production cycle.
You can create methods and processes that will, maybe if you can't eliminate it, reduce it.
And over time, it will improve.
But don't accept the status quo as it is.
I got to where I am by suffering, and so should you.
This is sort of like, I had a hard time figuring out how to word this one.
It's like, I walked up two feet, I walked uphill, two feet of snow, both ways to school.
I don't want you to hear me complain.
It's that sort of like attitude, and it's really, really common in the game industry.
And instead, what I say is, it's my responsibility to help improve this industry, so that the problems that I face are not the same ones the next generation face.
Just because I had to deal with a negative experience doesn't mean that you have to.
And each new generation of game developers should have it easier than me.
Don't make games for the money.
Make games because you have passion.
To that I say, you can't eat passion.
Don't be afraid to ask people to pay you for your work.
You deserve to be compensated fairly for your labor.
This cannot go, it needs to be repeated over and over, especially among indies.
Asking for fair compensation does not make you any less passionate about making games.
A thousand other people would kill to have your job.
Well, now I say, be thankful you get to do something that you love for a living, and I hope that you still love doing it.
But never let yourself be satisfied with the status quo.
It can always be better.
I used to say, people who burn out, maybe they just aren't.
they just aren't able to cut it.
One of my best friends is an excellent multiplayer designer, or she was until she left the industry because of burnout.
And from that I learned that burnout is not a sign of weakness, it's a symptom of depression, and it can affect anyone.
And when our peers and our friends suffer from burnout, we should do our best to support them as they recover, and when we figure out when we should take...
My slides are really small on here.
We should take lessons on what triggers burnout, and we should do our best to eliminate them from our work.
Again, it's all about improving what we have.
And then last, but definitely not least, if you aren't willing to make a few personal sacrifices, then maybe the industry is not for you.
And to that I would say, there's no contract you sign, no bargain with the devil that you make when you enter the game industry that says you cannot have a happy, full life.
So this talk is titled Everything I Said Was Wrong, How Indy is Different Now.
I think I covered the first part, right?
There's a lot of things that I said that was wrong, and there's probably still things today that I say are wrong but I'd like to just change the second half and say how Indy can be different now.
Because the industry and the way that things are right now are not immutable facts of life.
Our industry culture is created by humans.
We're humans, we can change that.
The myths that I bought into about the industry don't need to continue to be perpetuated.
And instead of scaring people out of this industry with horror stories about how bad it gets so that only those willing to put up the industry at its worst stick around.
Let's try to talk about this industry as though it has a future that's a much better one that we're painting and encourage people who won't be satisfied with the industry as it is to come join the industry and help make it better.
Thank you.
Applause My name is Rami Esmael. I'm one half of Dutch Independent Studio of Lambir. I'm also the least experienced person here on this panel. I didn't know you could have an imposter syndrome for a talk about being bad at something.
So it's funny, advice has always been a funny thing in my life.
I was raised Muslim, and Muslims, when they give advice to each other, they usually start with a phrase and end with a phrase that is Allah o'Alam, which means only God knows.
But it's funny because that phrase is meant to tell people that you shouldn't take anything at face value.
You should think about what somebody tells you, like even a wise person, you should think about it.
The irony is that that phrase became a signifier for somebody being a wise person.
So even starting and ending your advice with that now just means like, oh, you should probably just listen to this person, because clearly they know what they're talking about.
So here's what I've come to realize.
All advice is bad.
So okay, if I were to tell you the story of how Flambier came to be, if I were to give you the advice of how Flambier came to be, it would be go to a university that you don't like, Meet a person that you don't like.
Start a company together and make flash games.
That's how we did it.
Done.
Congratulations, international success.
Now here's the problem.
We work in a really strange industry.
There are four factors to this industry that are really odd.
First, we're a technological industry, and technology changes rapidly.
Second, we're a creative industry, and that's deeply personal and subjective.
We're an industry of entrepreneurship, which might even change faster than technology.
And then we make art.
Let's not even get into that one.
Then on top of that, on top of those really shoddy foundations, we build our own culture.
We build video games culture.
We built Game Development College, and guess what?
That changes even faster than all the other things I just mentioned.
And then we like to say that we're a global industry, but we're not really.
We're global in that way where everybody that does what we do is considered part of the games industry, and everybody who doesn't is kind of, we don't talk about those people.
And then every advice we give by the time we mention to form a coherent thought in our head is outdated.
So...
Whenever you get on a stage or start writing a blog, let me tell you up front, your advice is bad.
And for a moment, consider the irony of me standing here, giving you advice about how advice is bad.
So I have a few stories I want to tell you.
The first one is about perspective and hindsight.
So I just told you Vlamber's story.
Vlamber's story makes a lot of sense to me, and it's a comfortable story to me, because in that story, I kind of get to be the hero.
Right?
It's kind of my story.
It's like, this is how I did it.
Like, nice.
You could do it too, and then if you fail, that kind of means that I'm probably better at that than you.
Like, it's weird, because it's not why I give advice, but it's a deeply human thing to want to be that person.
So, I'm not trying to intentionally sabotage anybody.
But in a weird way, the device is effectively sabotaging somebody.
And by the time I give a talk about something, a lot of things have passed.
Like, I remember when I was just starting, the first talk I ever gave was Vlambeer.
It was titled, Games Should Be Games Again.
And it was a scathing rant against the idea that games now had all this stuff that was like narrative and thematics, and it was all gross.
I didn't like that.
Like, games should be about the rules again, games should be about gameplay again, that was it.
That was the first talk I ever gave.
It was a bad talk, horrible talk.
But I genuinely believe that.
Like I had to kick against something, right?
Like I was new, I was just starting out.
Like obviously if I was happy with the games industry, I wouldn't be standing on the stage yelling about something.
So I kicked against that.
And I also used to say, the most important thing in the games industry is motivation, it's passion.
Motivation.
It's important.
If you have three things, right?
Three things.
You have motivation, you have money, and you have knowledge.
Right?
If you would drop one, if you don't have money, but you have the knowledge and you have the motivation, you can make something.
Right?
If you don't have the knowledge, but you have money and you have motivation, you can hire somebody.
If you have all the knowledge and all the money in the world, but you don't have the motivation to do it, you're not gonna make something.
Right?
Made a lot of sense to me.
It even sounds smart when you say it that way.
But there's a weird thing.
I remember being deeply, deeply demotivated through so much of our best projects.
Ridiculous Fishing, I went through months of hell just being depressed about somebody else stealing our game.
And I was demotivated.
And here I am telling people, you know what, you need motivation.
Because it makes sense.
But it's not my own story.
So nowadays I say, well, okay, motivation and discipline.
Now I can tell you many things about me, but one of the things I can tell you is I'm also not super disciplined.
And some of them are still here.
But I'm hoping with that advice to point somebody in a direction where they can run into errors themselves and then figure things out.
That in the meanwhile, oh, there's water here, my God.
Sorry.
Good advice. Drink water before you get on a stage.
But that in the meanwhile, some people might run into walls that were completely unnecessary.
I couldn't help that?
It's kind of a weird thing to say because I'm still getting on this stage, right?
And I realized recently that part of that is just my position in the industry.
Like, I'm a bad source for startup advice. Don't ask me.
Like, I don't know. I'm looking back at the industry with six years of advice.
You all have way more than me. Like, if you ask me how to get started today, I don't know.
Why are you asking me? I started six years ago.
So one day...
And this is actually kind of a cheat because this is not bad advice I've given.
It's bad advice somebody else gave.
But I thought it was interesting.
One day I went traveling.
I travel a lot around the world and I talked to people in emergent territories, a place where the games industry doesn't really exist yet.
And I came across this one very peculiar indie studio.
And what they had was effectively a vertical hierarchy.
Everybody was in charge of somebody else.
Which is weird.
Like you had a CEO figure who was in charge of a CEO figure who was in charge of an artist who was in charge of a programmer who was in charge of a sound designer.
I was like, huh?
How do you like, I see a lot of indies doing flat hierarchies I don't like that either.
But a vertical hierarchy?
This is a strange place because you know, communicating was kind of hard.
They didn't speak great English, I definitely didn't speak their language.
So we're trying to communicate like how did this happen?
And they pulled up this talk.
that a friend of mine had given that was a sarcastic talk.
And it was meant to be sarcastic.
And it was meant to be so clearly sarcastic, it was so funny.
I laughed through the entire talk.
Then somewhere out there in the world, a bunch of people started a studio, taking that exact advice step for step.
They started on four projects at once, they had a vertical hierarchy, they didn't start emailing the press until they were close to release, because stealth releases are good.
And this was real advice.
They took it as real advice.
Now here's the thing, you can give a sarcastic talk, but it's not clear to you how much authority people give you.
I don't know how much authority you give me.
Like some of you might think I'm really good at what I do.
Some of you think I'm just the yelling guy at the end of this panel.
You'd both be somewhat correct, maybe.
I don't know.
The problem is I don't know.
And it gets worse, it gets worse, because I don't get to pick.
Now one of the themes you keep hearing during these other talks was that a lot of times when you give advice you would like to specify and clarify what people are actually asking.
Well let me tell you on this stage I don't get to do that. I don't get to do that for a number of reasons. A, you're too many. B, Charlie Hall right there is writing an article about it that's probably going to go up on a website somewhere that I don't have control over. And C, right there in the back of the camera, you see that camera right there? I don't get to pick who watches this video on the Vault either. So.
Here's another story.
One day I was in South Africa.
And in South Africa there's this university called DeWitts University.
And DeWitts has somebody that leads the gaming program named Hanli.
Hanli is a phenomenal woman.
And she has ran that game program for many, many years and managed to get a lot of people that would otherwise not be part of our games industry to look at games, to learn games.
And one day she asked me to give a talk at DeWitts University.
So I went over and I gave a talk.
And one of the students.
was kind of, you know, one of those kind of blunt students who ask questions that are probably inappropriate in like an educational environment, like should I drop out of school?
There's the thing, I'm a school dropout, right?
So when I get that question, I try to be very relative about the answer, like okay, listen, everybody learns differently.
Some people, you know, have a lot of benefit when they go to school and they follow a program and there's like set guidelines for how you do and how you engage, and some people, they're better off when they do it on their own and they don't learn as much in school because they feel claustrophobic or they don't fit the way the school teaches.
So it's really up to you.
Like I always say, if you have to ask me, then you probably shouldn't drop out.
So the student was happy and sat down and nodded and I looked back over to where Hanli had been watching for the entire talk, so I'm like back in the corner there.
And she'd been smiling and so happy with all the questions the students asked.
Suddenly she was gone.
And I thought, well, maybe she's heard that, you know, I sort of told them that school might not be all that necessary, and she's a teacher, so maybe I hurt her feelings.
So when I went off stage, I went to look for her, but I didn't have to because she came basically storming at me and grabbed me by my jacket and said, if you ever do that again, you're never coming back.
I was like, whoa, whoa, whoa, whoa, whoa, whoa.
If I ever do what again?
It's like, you don't understand, right?
You're from the Netherlands.
You know what happens when you drop out of school? The state pays for your life.
That's what they do. It's the Netherlands. You know what happens in South Africa when a kid leaves school without graduation? Kid that came here with a grant, they go into crime, they go into drugs, they die.
They die.
Hi, my name is Rami Esmael. I'm one half of Dutch Independence City of Lambeer.
Did my advice get people killed? I don't know.
Did yours? I don't know. Is that dramatic? Yes, it is. Is it real? Apparently, yes.
Had I ever considered that? No.
Is that the reality of a global industry? Yes.
We don't get to pick who follows our advice. We don't get to pick who follows what we say. We don't get to pick how people think of us, what authority they give us.
Sometimes that leads to painful situations.
So why am I on this stage?
Why am I here talking to you?
So there's two types of advice.
Either you try to maximize the winners or you try to minimize the losers.
Those sound very similar, but they're very different.
If you try to maximize the winners, it doesn't really matter how many losers there are.
You try to minimize the losers, it doesn't really matter how many winners there are.
There are two completely different ways of giving advice, and both are not right and both are not wrong.
Both have their own problems.
So for example, if you come across a student and they say, okay, should have been in the games industry, and you say, go for it.
You know that this industry can be rough.
You know that the industry can be harsh, but you're hoping that if through a combination of luck and merit, they will join this industry and that they will hopefully get to improve this industry in the future.
Or you could tell them, be careful.
This industry is rough.
And then you have a chance that those that are confident and that don't have, that aren't marginalized, that.
those will have a shot at the industry and that, you know, they will get to improve the industry in the future. And then you can choose the middle ground which means that you don't really get to pick which one happens. It's a little bit of both or maybe a little bit of neither. So all advice is bad. It's too personal, not personal enough, it's too broad, not broad enough, too specific.
not specific enough. I stand here because I'm experienced. You know what? Experience is bad. I have experience. Who am I to tell somebody who's just starting out what to do? If I had followed my own advice, I wouldn't be standing here. I did everything wrong. I tell you I did everything wrong. But it's why I'm standing here. It's why I'm on this desk. So advice is outdated, slow.
Videos are saved and people can play them everywhere. So I used to end presentations with make games. Make games exclamation mark. Make games. Go do it. That's why we're here for, right? Let's go do that and then if we do that in the future somehow things will work out.
And instead of making games, you know what I did?
I made some games and then I built Prescott and I started flying around the world and gave some talks and started doing marketing and went to events and did all that stuff.
I say make games, that's the exclamation point to my talk and it's just a tiny part of what I do.
It's a tiny part of what I believe made me successful.
Now here's what I learned about giving advice.
Extreme advice, it's bad advice.
Middle of the road advice, bad advice.
Optimistic advice, it's bad advice.
pessimistic advice, it's bad advice.
Any attempt you will give to offer just a perspective will be taken as authority.
No attempt that you do to look fallible will work.
No attempt at offering caveats will work.
No attempt at contextualizing your achievements will work.
All advice you give is final, and it is truth to the people that listen to it.
This is a failure talk.
This is not a success talk.
We're talking about our failure.
The fact that we failed probably means we shouldn't be an authority on what we're doing here.
And still people are gonna take this as authority.
So, all advice in this talk is probably bad advice.
All advice in my talk, probably really bad advice.
How you mix those two in your mind, I don't know, that's up to you.
But if all advice is bad, I have one thing that I think is worse, and it's no perspective.
A lack of perspective is far more dangerous than bad advice.
A lack of seeing lots of people do something wrong is worse than having nothing at all.
So we can't preempt every possible failure of advice we give, and all we can do really is try to do right, check as frequently as we can.
to what changed in us, what changed in the world, what changed in the people that listen to us, and know that everything I've ever said was wrong.
And then, you know, you get on a stage, start typing a blog, and your advice is probably bad.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
I think we're done.
I don't know the things that you're supposed to say at the end.
Akira, help me.
Evaluation forms.
Evaluation forms.
Do those.
Lunch break.
We'll be back at some time.
Thank you so much for coming.
