1
00:00:05,762 --> 00:00:06,023
All right.

2
00:00:06,723 --> 00:00:07,043
Hello.

3
00:00:07,884 --> 00:00:11,007
Welcome to Bringing Hell to Life, AI and Full Body

4
00:00:11,067 --> 00:00:11,847
Animation in Doom.

5
00:00:13,088 --> 00:00:14,450
I want to thank you all for coming today.

6
00:00:14,490 --> 00:00:15,270
I really appreciate it.

7
00:00:15,671 --> 00:00:16,671
My name is Jake Campbell.

8
00:00:16,972 --> 00:00:18,673
I'm an AI developer at id Software.

9
00:00:19,273 --> 00:00:21,996
And for those of you that don't know, Doom was released

10
00:00:22,196 --> 00:00:25,859
last year, and it's our reimagining and modernization

11
00:00:25,879 --> 00:00:26,399
of the series.

12
00:00:26,960 --> 00:00:29,802
And since release, it has gone on to receive a number of

13
00:00:29,962 --> 00:00:31,323
awards and nominations.

14
00:00:33,595 --> 00:00:38,439
The underlying theme of this talk is how we have given our AI more direct control over

15
00:00:38,519 --> 00:00:39,339
their animations.

16
00:00:39,820 --> 00:00:43,823
The AI does not drive the character with stick input and button presses.

17
00:00:44,383 --> 00:00:48,867
In our system, there's not really a clear distinction between AI code and character

18
00:00:48,927 --> 00:00:49,147
code.

19
00:00:50,068 --> 00:00:55,953
And along with that, we rely heavily on full body animation rather than a partial body

20
00:00:56,133 --> 00:00:56,893
or layered approach.

21
00:00:59,030 --> 00:01:00,892
This presentation is split into three segments.

22
00:01:01,452 --> 00:01:03,834
First, I'm going to explain some of the reasons

23
00:01:04,015 --> 00:01:05,676
that we went with a direct control approach.

24
00:01:05,997 --> 00:01:07,878
Then I'm going to provide four examples

25
00:01:08,419 --> 00:01:10,901
of how our AI makes use of this extra control.

26
00:01:11,522 --> 00:01:14,265
And finally, I'm going to conclude with an example

27
00:01:14,305 --> 00:01:16,507
of how it all works together to influence

28
00:01:16,947 --> 00:01:18,429
the ways we implement certain behaviors.

29
00:01:21,065 --> 00:01:22,726
Now, our most defining feature,

30
00:01:22,906 --> 00:01:24,326
which is a diverse cast of enemies,

31
00:01:24,846 --> 00:01:27,287
was the source of two primary factors

32
00:01:27,327 --> 00:01:30,987
that influenced how much control we gave our AI.

33
00:01:31,468 --> 00:01:33,308
Our game contains 19 AI types,

34
00:01:33,828 --> 00:01:35,308
each with many custom behaviors

35
00:01:35,348 --> 00:01:37,389
that imply custom animation solutions.

36
00:01:37,929 --> 00:01:41,410
Along with that, the game fiction and genre dictate

37
00:01:41,770 --> 00:01:44,390
that animation style is of utmost importance.

38
00:01:46,731 --> 00:01:52,215
So, the goal of minimizing constraints that inhibit animator creativity was one of the

39
00:01:52,256 --> 00:01:54,577
significant factors over the duration of the project.

40
00:01:55,158 --> 00:02:00,162
If the AI requires things like shorter animations, multiple layers, pose matching, etc.

41
00:02:01,105 --> 00:02:04,008
those can quickly add up to have a net impact on a final result.

42
00:02:04,648 --> 00:02:08,731
Animators can typically deliver the most stylish and impressive results

43
00:02:09,032 --> 00:02:12,414
when they can focus on the animation itself rather than technicalities.

44
00:02:13,155 --> 00:02:17,838
Now nothing looks as good as a well-made full-body animation full of style and personality.

45
00:02:19,557 --> 00:02:22,819
A great example of how successful and unconstrained,

46
00:02:22,899 --> 00:02:24,120
straightforward approach can be

47
00:02:24,520 --> 00:02:26,161
is the response of RAI to damage.

48
00:02:26,681 --> 00:02:29,443
Now there are four general categories of damage response,

49
00:02:29,923 --> 00:02:31,844
each being more severe than the previous.

50
00:02:32,424 --> 00:02:34,005
And there are also different severities

51
00:02:34,085 --> 00:02:35,126
within each category.

52
00:02:35,606 --> 00:02:37,887
This ends up being a lot of animations.

53
00:02:39,669 --> 00:02:43,411
Twitches are additive animations that are played in layers

54
00:02:43,491 --> 00:02:45,012
over whatever the AI is currently doing.

55
00:02:45,433 --> 00:02:46,573
Now, they are not full body,

56
00:02:46,913 --> 00:02:48,554
but I'm including them here for completeness

57
00:02:48,835 --> 00:02:50,356
and to illustrate that we do use

58
00:02:50,396 --> 00:02:51,796
partial body solutions at times.

59
00:02:52,397 --> 00:02:54,898
But anything more severe than twitches,

60
00:02:55,399 --> 00:02:56,479
like a standard pain,

61
00:02:56,739 --> 00:02:59,041
is just a straightforward, full-bloody animation.

62
00:02:59,541 --> 00:03:01,802
Now, our pain animations often move the characters,

63
00:03:02,263 --> 00:03:04,004
and animators find great enjoyment

64
00:03:04,044 --> 00:03:05,405
in authoring this kind of content.

65
00:03:06,844 --> 00:03:08,625
A special category of full body,

66
00:03:08,665 --> 00:03:11,726
a special category of pain animation

67
00:03:12,466 --> 00:03:13,767
is what we call a stagger,

68
00:03:13,927 --> 00:03:16,588
and the player can execute synchronized glory kills

69
00:03:16,908 --> 00:03:17,828
against staggered enemies.

70
00:03:18,648 --> 00:03:21,590
Standard deaths start out as full body animations,

71
00:03:21,890 --> 00:03:23,610
but they blend into ragdoll physics

72
00:03:23,810 --> 00:03:24,771
as the model is falling.

73
00:03:25,747 --> 00:03:30,689
And classic deaths include multiple separate skeletal meshes all animated in sequence.

74
00:03:30,869 --> 00:03:35,371
For example, a Hell Knight's limb being severed and animating along with the rest of his body.

75
00:03:35,992 --> 00:03:39,073
Now, many classic deaths involve animated jibs

76
00:03:39,553 --> 00:03:43,755
because we wanted to give the animators control over every facet of the presentation.

77
00:03:44,515 --> 00:03:49,677
All of this content was manageable and successful across more than 10 unique character skeletons

78
00:03:50,098 --> 00:03:51,698
because we just let the animators have at it.

79
00:03:53,683 --> 00:03:55,804
The other significant factor in forming our approach

80
00:03:56,244 --> 00:03:58,965
was the goal of adding sophisticated polish to characters

81
00:03:59,125 --> 00:04:00,885
in order to make them feel as alive as possible.

82
00:04:00,945 --> 00:04:02,006
This is kind of obvious, right?

83
00:04:02,886 --> 00:04:05,827
But we wanted the ability to easily add or modify behaviors

84
00:04:05,867 --> 00:04:07,607
in ways that increase responsiveness

85
00:04:07,747 --> 00:04:09,888
while maintaining the style and cadence

86
00:04:09,948 --> 00:04:11,029
of full-body animation.

87
00:04:11,729 --> 00:04:13,849
An example is our imp performing

88
00:04:13,889 --> 00:04:16,310
the conceptually simple behavior of throwing a fireball,

89
00:04:16,590 --> 00:04:18,131
which ends up being quite sophisticated.

90
00:04:19,201 --> 00:04:21,423
The projectile throws follow parabolic arcs,

91
00:04:21,763 --> 00:04:22,925
and the imps lead their targets.

92
00:04:23,605 --> 00:04:25,887
So validating these potential trajectory paths

93
00:04:26,068 --> 00:04:27,789
entails a non-trivial set of tests

94
00:04:28,050 --> 00:04:30,212
that requires timing and pose information

95
00:04:30,292 --> 00:04:31,613
from the animations themselves.

96
00:04:32,254 --> 00:04:34,155
Furthermore, to improve presentation,

97
00:04:34,616 --> 00:04:37,719
our imps try to release their fireball not on a fixed frame,

98
00:04:38,640 --> 00:04:41,361
But when the tangent of the arc that their hand joint follows

99
00:04:41,481 --> 00:04:42,881
matches the desired launch angle,

100
00:04:43,101 --> 00:04:44,182
just like throwing a baseball.

101
00:04:44,762 --> 00:04:47,583
And since a target is typically moving throughout a windup,

102
00:04:48,143 --> 00:04:50,003
this essentially couples the animation

103
00:04:50,043 --> 00:04:51,304
with the AI targeting systems.

104
00:04:52,684 --> 00:04:54,465
Then we wanted to give the imp the ability

105
00:04:54,485 --> 00:04:57,926
to throw during stop transitions and evasion hops, which

106
00:04:57,986 --> 00:05:01,187
is coupling attack behavior and locomotion animation selection.

107
00:05:01,847 --> 00:05:05,068
On top of all this, we added stronger fastball throws

108
00:05:05,188 --> 00:05:07,529
that require a looping charge animation shown there.

109
00:05:07,953 --> 00:05:10,034
that can be aborted when the angle to the target

110
00:05:10,094 --> 00:05:10,835
exceeds the threshold.

111
00:05:13,396 --> 00:05:15,838
So why give the AI more animation control though?

112
00:05:15,978 --> 00:05:17,399
To sum up the two goals,

113
00:05:17,699 --> 00:05:20,421
or keep the animators from being unnecessarily constrained,

114
00:05:20,841 --> 00:05:21,982
the thing that they do best

115
00:05:22,762 --> 00:05:25,084
is animate straightforward full-body animations

116
00:05:25,124 --> 00:05:27,245
that play out the way they see them in their tools.

117
00:05:27,967 --> 00:05:32,649
And second, make it easier for the AI to do more sophisticated things without needing

118
00:05:32,689 --> 00:05:38,313
to constantly refactor non-AI code in ways that only the AI ultimately benefits from.

119
00:05:39,473 --> 00:05:45,096
Now both goals are reached by shifting animation control to the AI, because then using full

120
00:05:45,136 --> 00:05:50,319
body animations to construct and improve behaviors is a straightforward and thus a known quantity.

121
00:05:51,280 --> 00:05:53,801
They become the ideal building block for whatever we want to do.

122
00:05:55,959 --> 00:05:58,581
Now the AI code can do extra work on its end

123
00:05:58,621 --> 00:06:00,402
to make better use of full body animations.

124
00:06:00,963 --> 00:06:02,464
Today I'm gonna talk about four examples.

125
00:06:03,224 --> 00:06:06,086
Our AI modify animation translation and rotation

126
00:06:06,246 --> 00:06:07,928
using a technique we call delta correction.

127
00:06:08,468 --> 00:06:11,530
Their focus tracking involves modifying animation pose.

128
00:06:12,291 --> 00:06:14,973
Our foot phase synchronization requires being able

129
00:06:14,993 --> 00:06:16,934
to modify playback rate and position.

130
00:06:18,115 --> 00:06:20,637
And the way our AI perform bad zone avoidance

131
00:06:21,097 --> 00:06:23,819
is somewhat counterintuitive way of modifying blend weights.

132
00:06:26,418 --> 00:06:30,400
So the first way I try to make the animations more useful is by influencing

133
00:06:30,440 --> 00:06:34,721
the origin bone or root bone, depending on the engine use translation and or

134
00:06:34,802 --> 00:06:39,023
rotation. The primary use of this in our code is what we call Delta correction

135
00:06:39,423 --> 00:06:43,365
and the basic idea is scaling or lurping the translation and or rotation

136
00:06:43,805 --> 00:06:47,726
of a non blended full body animation. We take a single animation

137
00:06:47,986 --> 00:06:52,008
here and imp jumping forward and we make it usable in an infinite number of

138
00:06:52,068 --> 00:06:53,168
scenarios within reason.

139
00:06:53,911 --> 00:06:56,513
And effectively, this allows the AI

140
00:06:56,533 --> 00:06:59,835
to use far fewer animations, yet retain the ability

141
00:06:59,895 --> 00:07:01,976
to move where it wants when playing those animations.

142
00:07:02,476 --> 00:07:05,158
Now in the following slides, I focus mostly on translation,

143
00:07:05,518 --> 00:07:06,859
but the system is equally powerful

144
00:07:07,139 --> 00:07:09,040
and is used just as much with rotation.

145
00:07:10,341 --> 00:07:13,183
So here we have an imp playing a gap jump animation,

146
00:07:13,703 --> 00:07:15,464
but the animation doesn't automatically place

147
00:07:15,524 --> 00:07:17,625
in where we want in the world, which is at the red star.

148
00:07:18,046 --> 00:07:18,826
So how do we fix that?

149
00:07:20,287 --> 00:07:22,328
Well, if the model is at point X at time T sub C,

150
00:07:23,516 --> 00:07:25,579
First, we want to define a reference point in the animation.

151
00:07:25,699 --> 00:07:27,982
This is what you want to align with the target position

152
00:07:28,062 --> 00:07:30,085
by the time that time in the animation is reached.

153
00:07:30,425 --> 00:07:32,768
And here, the time at the reference point is T sub n.

154
00:07:34,230 --> 00:07:35,392
We already know what the target point is,

155
00:07:35,432 --> 00:07:36,273
just label it z.

156
00:07:37,617 --> 00:07:41,259
The delta between those defines the remaining error that's going to need to be applied before

157
00:07:41,279 --> 00:07:42,179
the animation finishes.

158
00:07:42,539 --> 00:07:46,601
But how much of this error should be applied on the next time slice of the animation?

159
00:07:46,981 --> 00:07:52,823
Well, find the next time, t sub c plus one, and then the ratio of the next time slice

160
00:07:52,923 --> 00:07:57,685
to the remaining time in the animation to the reference point defines the fraction to

161
00:07:57,745 --> 00:07:58,966
apply on the next game frame.

162
00:08:00,126 --> 00:08:00,726
So we do that.

163
00:08:01,637 --> 00:08:03,658
and it moves the model a little bit towards the target point.

164
00:08:04,159 --> 00:08:07,321
Now, applying the same equation each game frame

165
00:08:07,542 --> 00:08:09,623
will ensure that animation point Y

166
00:08:09,784 --> 00:08:11,605
coincides with world point Z

167
00:08:11,965 --> 00:08:13,807
under a wide variety of conditions.

168
00:08:15,235 --> 00:08:17,336
In particular, if the conditions change

169
00:08:17,577 --> 00:08:19,578
such that the reference point is prior

170
00:08:19,618 --> 00:08:20,619
to the window of correction,

171
00:08:21,019 --> 00:08:23,882
the target point is before the animation

172
00:08:23,922 --> 00:08:24,762
or behind the model,

173
00:08:25,463 --> 00:08:27,525
and even if the window of correction

174
00:08:27,685 --> 00:08:28,906
ends before the animation,

175
00:08:29,566 --> 00:08:30,987
the math stays exactly the same.

176
00:08:31,468 --> 00:08:33,369
Applying the same equation gets a different result.

177
00:08:33,749 --> 00:08:35,331
In this case, correction is backwards.

178
00:08:35,891 --> 00:08:37,072
And the math aligns the model

179
00:08:37,472 --> 00:08:40,875
as if the animation has hit the target point,

180
00:08:41,295 --> 00:08:43,277
essentially correcting to a point in the past

181
00:08:43,477 --> 00:08:44,258
rather than the future.

182
00:08:46,177 --> 00:08:47,978
Now given an animation like this traversal,

183
00:08:48,358 --> 00:08:50,739
where the imp is leaping up to grab hold of an overhang,

184
00:08:51,079 --> 00:08:52,379
climbing over it and jumping off,

185
00:08:52,940 --> 00:08:55,060
we can more effectively use delta correction

186
00:08:56,121 --> 00:08:58,322
if we restrict the application

187
00:08:58,382 --> 00:09:00,662
to discrete windows of the animation.

188
00:09:01,623 --> 00:09:04,404
For example, to prevent sliding and or clipping,

189
00:09:04,904 --> 00:09:06,184
we can apply the error correction

190
00:09:06,364 --> 00:09:08,825
only when the model is completely free of world contacts,

191
00:09:08,885 --> 00:09:09,986
in this case, in the air.

192
00:09:10,938 --> 00:09:16,482
Defining windows like this, where the correction will not cause foot sliding, is absolutely essential in most cases.

193
00:09:18,404 --> 00:09:20,285
You can even use multiple windows if you want.

194
00:09:21,286 --> 00:09:25,249
For example, maybe you want to separate translation correction from rotation correction.

195
00:09:26,110 --> 00:09:35,918
Now the power of using windows is that the AI is able to treat a single animation as a sequence of multiple parts without the animators needing to do the work of cutting it up.

196
00:09:38,125 --> 00:09:39,446
Some more subtleties in our approach.

197
00:09:40,207 --> 00:09:42,148
If you really want to minimize the perception

198
00:09:42,189 --> 00:09:45,131
of error correction, you can scale the fractional amount

199
00:09:45,572 --> 00:09:48,434
of correction each frame by the relative velocity

200
00:09:48,454 --> 00:09:49,455
of the model in that frame.

201
00:09:49,535 --> 00:09:51,878
In other words, you hide the correction

202
00:09:51,978 --> 00:09:53,119
behind a faster moving model.

203
00:09:54,233 --> 00:09:57,215
And most importantly, because the math is repeated

204
00:09:57,275 --> 00:09:58,956
each game frame rather than just once

205
00:09:59,016 --> 00:10:00,117
at the beginning of the animation,

206
00:10:00,537 --> 00:10:02,298
a target point moving through the world

207
00:10:02,699 --> 00:10:04,080
is automatically accounted for.

208
00:10:04,200 --> 00:10:05,901
In this case, assume that our target point

209
00:10:05,961 --> 00:10:08,142
is moving upwards like that during the animation.

210
00:10:08,643 --> 00:10:10,164
Well, the system simply plays catch up

211
00:10:10,584 --> 00:10:13,066
and increasingly applies more error correction each frame.

212
00:10:15,573 --> 00:10:18,154
Some examples of where we use Delta Correction extensively

213
00:10:18,554 --> 00:10:19,695
are traversals and attacks.

214
00:10:20,115 --> 00:10:22,355
Now in all these videos, the blue lines

215
00:10:22,415 --> 00:10:24,236
correspond to windows of Delta Correction.

216
00:10:24,956 --> 00:10:27,217
We have a library of traversal animations

217
00:10:27,277 --> 00:10:29,397
that is orders of magnitude smaller

218
00:10:29,437 --> 00:10:30,637
than the use cases and levels.

219
00:10:31,378 --> 00:10:33,698
Scaling the traversals lets the animators

220
00:10:33,758 --> 00:10:36,459
deliver highly stylized and unique animations for them,

221
00:10:36,899 --> 00:10:39,640
while also allowing designers nearly unlimited use

222
00:10:39,680 --> 00:10:40,920
of those animations in their levels.

223
00:10:42,443 --> 00:10:44,164
And we also Delta correct melee attacks,

224
00:10:44,564 --> 00:10:46,425
such as the rotational yaw of swipes,

225
00:10:46,525 --> 00:10:49,207
the forward translation of lunges, the arc of leaps.

226
00:10:49,908 --> 00:10:51,889
All of this helps the AI feel more engaged.

227
00:10:52,289 --> 00:10:53,970
They can relentlessly pursue the target

228
00:10:54,511 --> 00:10:56,492
with less requirements to reposition

229
00:10:56,512 --> 00:10:59,094
and orient themselves properly prior to the next attack.

230
00:10:59,834 --> 00:11:02,536
And scaling leaps in particular allows the AI

231
00:11:02,576 --> 00:11:05,118
to attack across a wider variety of level conditions.

232
00:11:05,518 --> 00:11:08,019
In this case, the Hell Knight is able to leap up

233
00:11:08,059 --> 00:11:10,021
and down the stairs by Delta correcting

234
00:11:10,081 --> 00:11:12,142
the same animations that he uses on flat ground.

235
00:11:14,957 --> 00:11:17,539
A second example of the control area I have over animation

236
00:11:18,179 --> 00:11:20,040
is changing their pose to track a target

237
00:11:20,080 --> 00:11:21,321
with their torso, head, or weapons.

238
00:11:21,902 --> 00:11:24,924
Now the canonical name we use for this is focus tracking.

239
00:11:25,664 --> 00:11:27,726
We use a hybrid inverse kinematic

240
00:11:27,766 --> 00:11:29,147
and forward kinematic solution,

241
00:11:29,207 --> 00:11:31,589
but hereafter I'm gonna refer to it as IK.

242
00:11:32,449 --> 00:11:32,890
Take a drink.

243
00:11:38,814 --> 00:11:40,515
The basics of focus tracking is straightforward.

244
00:11:41,829 --> 00:11:45,312
First, you find an effector transform in a reference pose.

245
00:11:45,652 --> 00:11:48,214
Now when I say effector, I'm speaking of the end effector

246
00:11:48,274 --> 00:11:49,475
in an IK joint chain.

247
00:11:50,036 --> 00:11:51,477
And I'm gonna explain this in a few slides,

248
00:11:51,897 --> 00:11:53,798
but how the reference pose is composed

249
00:11:53,919 --> 00:11:55,119
is extremely important.

250
00:11:57,181 --> 00:11:59,863
Next step is finding the desired transform for the effector.

251
00:11:59,883 --> 00:12:01,464
In this case, it looks like the Helmite

252
00:12:01,545 --> 00:12:02,365
wants to look to the right.

253
00:12:04,167 --> 00:12:07,230
Using IK, calculate the rotation that bring the effector

254
00:12:07,310 --> 00:12:08,451
into the desired transform.

255
00:12:08,912 --> 00:12:12,375
Then, spread those rotations across the desired joints

256
00:12:12,415 --> 00:12:14,176
in the IK chain underneath the effector.

257
00:12:14,677 --> 00:12:16,519
Now, since the spreading like this

258
00:12:16,659 --> 00:12:18,100
will introduce inaccuracy,

259
00:12:18,520 --> 00:12:20,082
if you desire perfect alignment,

260
00:12:20,442 --> 00:12:22,304
you can recalculate error at each joint

261
00:12:22,384 --> 00:12:23,185
as you go up the chain,

262
00:12:23,665 --> 00:12:25,186
or just the final joint in the chain.

263
00:12:27,560 --> 00:12:28,861
Then we add the joint rotations

264
00:12:28,901 --> 00:12:30,483
to the current animation pose.

265
00:12:30,983 --> 00:12:34,326
Now notice that this is identical to an additive animation.

266
00:12:34,486 --> 00:12:35,907
Conceptually, we're just making

267
00:12:35,927 --> 00:12:37,168
an additive animation on the fly.

268
00:12:38,670 --> 00:12:40,531
I mentioned that calculating error once

269
00:12:40,892 --> 00:12:43,073
and naively spreading it across multiple joints

270
00:12:43,134 --> 00:12:44,194
introduces inaccuracy.

271
00:12:44,735 --> 00:12:46,977
But that's exactly what our AI do,

272
00:12:47,457 --> 00:12:49,299
and yet they are accurate even at range.

273
00:12:49,799 --> 00:12:51,741
So in practice, the error isn't much,

274
00:12:51,941 --> 00:12:53,202
on smaller characters especially.

275
00:12:54,864 --> 00:12:57,166
The way we calculate angular error in our IK

276
00:12:57,266 --> 00:12:58,667
is what we call the circle trick.

277
00:13:00,248 --> 00:13:02,270
Given an IK chain, or a joint chain,

278
00:13:02,410 --> 00:13:05,773
rooted at P, and a target T that you want to align with,

279
00:13:07,014 --> 00:13:10,136
first create a sphere around P that intersects T.

280
00:13:10,997 --> 00:13:14,139
Then, simply extend a ray from the effector

281
00:13:14,259 --> 00:13:15,680
and find where it intersects the sphere.

282
00:13:15,740 --> 00:13:16,981
In this case, I've labeled it E.

283
00:13:18,262 --> 00:13:20,784
Those two intersections on the sphere

284
00:13:21,165 --> 00:13:23,226
define an angle, here labeled A.

285
00:13:24,736 --> 00:13:28,403
and rotating the root by A is going to align the effector,

286
00:13:29,264 --> 00:13:29,665
like that.

287
00:13:29,685 --> 00:13:34,774
Now often, we want to preserve animation content

288
00:13:34,834 --> 00:13:36,337
on a skeleton while tracking a target.

289
00:13:37,291 --> 00:13:40,634
To do this, we limit the rotations visible to the IK,

290
00:13:41,115 --> 00:13:43,197
and it calculates error from a single pose

291
00:13:43,377 --> 00:13:44,838
of the animation that stays constant.

292
00:13:45,439 --> 00:13:47,501
Here I have included a very embellished taunt

293
00:13:47,541 --> 00:13:50,384
from the Hell Knight, and an even more flavorful reaction

294
00:13:50,464 --> 00:13:51,105
from the Revenant.

295
00:13:51,725 --> 00:13:54,348
In both cases, notice how animation rotations

296
00:13:54,408 --> 00:13:56,530
in the head and torso are fully preserved

297
00:13:56,890 --> 00:13:58,892
as the characters track the target circling around them.

298
00:14:00,780 --> 00:14:04,226
Preserving animation content is just as useful for subtle embellishment.

299
00:14:04,687 --> 00:14:09,316
In this case, notice how the Mancubus appears to be glancing back and forth a little as he is looking at us.

300
00:14:09,697 --> 00:14:12,281
That's actually part of the animation, that is not focus tracking.

301
00:14:15,209 --> 00:14:17,090
And being able to preserve animation like this

302
00:14:17,390 --> 00:14:20,232
also makes it simple to implement behaviors like sweeps.

303
00:14:20,892 --> 00:14:23,173
In this case, the Hellraiser's focus tracking

304
00:14:23,473 --> 00:14:25,454
is merely adding some pitch to his lower back.

305
00:14:25,915 --> 00:14:27,255
It is the animation itself

306
00:14:27,355 --> 00:14:28,996
that sweeps the beam back and forth.

307
00:14:29,417 --> 00:14:31,778
IK is not even aware that this guy's arm is moving.

308
00:14:35,320 --> 00:14:37,901
So when we talk about what rotations are visible

309
00:14:37,961 --> 00:14:39,962
to an effector when it generates a reference pose,

310
00:14:41,045 --> 00:14:45,556
We're speaking of what information the joints in an IK chain inherit from their parents.

311
00:14:46,225 --> 00:14:49,046
For example, the head effectors chain in this Hell Knight

312
00:14:49,146 --> 00:14:51,107
inherits only the IK rotations

313
00:14:51,587 --> 00:14:53,027
from the torso joints underneath it.

314
00:14:53,587 --> 00:14:55,868
The debug arrows shown in the video

315
00:14:56,028 --> 00:14:58,869
display the joint transforms visible to the IK system

316
00:14:59,009 --> 00:15:01,990
as it builds a reference pose for the head to calculate air.

317
00:15:02,510 --> 00:15:04,031
Now observe how those transforms

318
00:15:04,151 --> 00:15:06,411
maintain a constant position and orientation

319
00:15:06,971 --> 00:15:09,572
despite the wildly changing animation on the upper body.

320
00:15:10,212 --> 00:15:11,953
In other words, the reference pose

321
00:15:12,013 --> 00:15:13,433
is constant throughout the animation.

322
00:15:14,221 --> 00:15:16,822
Now this implies that the rotations IK generates

323
00:15:17,562 --> 00:15:19,804
to aim the head are going to be constant as well.

324
00:15:20,184 --> 00:15:22,525
The animation rotations are not counteracted.

325
00:15:23,585 --> 00:15:26,066
In contrast, if an effector's chain

326
00:15:26,166 --> 00:15:27,747
inherits the animation rotations

327
00:15:27,827 --> 00:15:28,988
that change from frame to frame,

328
00:15:29,468 --> 00:15:31,169
it will calculate counter rotations

329
00:15:31,509 --> 00:15:33,250
and the animation will be counteracted.

330
00:15:33,610 --> 00:15:35,391
For example, look at the reference poses

331
00:15:35,431 --> 00:15:37,832
calculated for the shoulder cannon effectors of the Revenant.

332
00:15:38,092 --> 00:15:40,133
They're moving like crazy with the animation.

333
00:15:41,268 --> 00:15:43,150
They inherit the actual animation rotations,

334
00:15:43,971 --> 00:15:45,792
the IK counteracts those rotations,

335
00:15:46,673 --> 00:15:49,015
and the guns are conceptually locked on target

336
00:15:49,315 --> 00:15:51,577
with almost all animation rotation being removed.

337
00:15:53,843 --> 00:15:55,664
Because proper usage of a system like this

338
00:15:56,184 --> 00:15:58,805
requires reference poses that are fairly representative

339
00:15:58,825 --> 00:16:00,106
of the current animation behavior,

340
00:16:00,746 --> 00:16:02,747
swapping effector data sets is common.

341
00:16:03,327 --> 00:16:05,228
For example, in a forward aiming animation,

342
00:16:05,648 --> 00:16:06,969
the Mancubus uses an effector

343
00:16:06,989 --> 00:16:08,349
that is conceptually forward,

344
00:16:08,809 --> 00:16:10,850
while in another animation it might use an aim right.

345
00:16:11,530 --> 00:16:13,831
Now since the system generates a set of rotations

346
00:16:13,891 --> 00:16:17,373
that are essentially an additive pose, swapping is easy.

347
00:16:18,001 --> 00:16:20,964
Simply generate the rotations for each effector independently

348
00:16:21,365 --> 00:16:23,267
and then blend from one set to another

349
00:16:23,447 --> 00:16:25,269
just like you would blend any other set

350
00:16:25,329 --> 00:16:26,310
of additive animations.

351
00:16:28,292 --> 00:16:31,135
This system also easily handles multiple effectors

352
00:16:31,175 --> 00:16:33,878
in a tree topology, as long as they are evaluated

353
00:16:33,958 --> 00:16:36,401
in order of inheritance, such that each child

354
00:16:36,581 --> 00:16:39,264
inherits the rotations of its parent, the math just works.

355
00:16:40,645 --> 00:16:43,427
In this case, the torso focus inherits nothing.

356
00:16:43,828 --> 00:16:44,828
It's parented to the origin.

357
00:16:44,888 --> 00:16:46,810
This is similar to the hybrid joint

358
00:16:46,870 --> 00:16:48,731
that the previous talk mentioned.

359
00:16:50,653 --> 00:16:54,175
The head focus is a child of the torso focus in terms of IK,

360
00:16:54,255 --> 00:16:55,857
so it inherits the IK rotations.

361
00:16:56,217 --> 00:16:58,739
But for animation purposes, it is a child of the origin,

362
00:16:58,839 --> 00:17:00,080
so it inherits no animation.

363
00:17:01,621 --> 00:17:03,883
But we want the shoulder guns to aim directly at you,

364
00:17:04,143 --> 00:17:07,185
so they inherit both the IK rotations from the torso focus

365
00:17:07,685 --> 00:17:09,226
and the current pose from the animation.

366
00:17:11,468 --> 00:17:16,252
The third control mechanism available to the AI is access to the playback rate and time

367
00:17:16,292 --> 00:17:17,413
in the animations themselves.

368
00:17:17,873 --> 00:17:22,456
An example is the way that our AI use foot phase tracking to synchronize the animations.

369
00:17:23,097 --> 00:17:28,521
Now this is important to us because we remove the need to match both footstep counts and

370
00:17:28,601 --> 00:17:33,284
poses amongst locomotion cycles and animations that blend into such cycles.

371
00:17:33,785 --> 00:17:36,647
For example, this zombie's walk animation blend space

372
00:17:37,485 --> 00:17:38,627
shown in the video on the left,

373
00:17:39,047 --> 00:17:41,470
is composed of animations with different footstep counts,

374
00:17:41,891 --> 00:17:44,394
yet we are able to seamlessly synchronize their playback.

375
00:17:45,195 --> 00:17:46,597
Forward is at least four cycles,

376
00:17:46,697 --> 00:17:48,859
while left, right, and backward are two cycles each,

377
00:17:49,019 --> 00:17:50,001
shown in the videos on the right.

378
00:17:51,884 --> 00:17:54,805
Now, we use four markers to keep track of foot phase.

379
00:17:55,066 --> 00:17:56,186
Why four and not two?

380
00:17:56,826 --> 00:17:59,728
Because directionality is encoded in a sequence of four,

381
00:17:59,948 --> 00:18:00,808
but not in two.

382
00:18:01,208 --> 00:18:04,390
In other words, the sequence one, two, three, four, one

383
00:18:04,890 --> 00:18:06,631
clearly defines a forward direction

384
00:18:06,671 --> 00:18:09,472
while the sequence one, two, one, two, one does not.

385
00:18:11,993 --> 00:18:13,974
The four markers we use are left foot plant,

386
00:18:15,035 --> 00:18:17,956
right knee cross left leg, right foot plant,

387
00:18:18,536 --> 00:18:19,917
and left knee cross right leg.

388
00:18:21,291 --> 00:18:25,454
Now suppose we have two animations that we want to play in sync, animation A and animation B.

389
00:18:25,974 --> 00:18:29,877
Further suppose that animation A has twice as many footsteps as animation B,

390
00:18:30,217 --> 00:18:33,259
yet the time between footsteps in animation B is longer.

391
00:18:35,680 --> 00:18:37,882
First, get the current frame of each animation.

392
00:18:39,023 --> 00:18:42,045
Then advance each animation as if they are not synchronized.

393
00:18:42,565 --> 00:18:44,326
Just assuming they have the same playback rate,

394
00:18:44,566 --> 00:18:47,988
we'll come up with the contrived number 1.3 animation frames.

395
00:18:49,978 --> 00:18:54,043
then you want to convert those frame deltas to phase deltas.

396
00:18:54,483 --> 00:18:58,187
Now note, since animation B is a longer span

397
00:18:58,207 --> 00:19:00,429
between footsteps, it's going to have a smaller fraction

398
00:19:00,469 --> 00:19:00,929
of the phase.

399
00:19:02,675 --> 00:19:04,577
Then we want to find the weighted average,

400
00:19:04,717 --> 00:19:06,158
weighted by blend contribution.

401
00:19:06,178 --> 00:19:08,761
I apologize that the number in the math

402
00:19:08,801 --> 00:19:10,102
does not match the number in the picture.

403
00:19:10,983 --> 00:19:12,305
The essential thing is that we're finding

404
00:19:12,345 --> 00:19:14,967
a single average phase amongst all the animations

405
00:19:15,087 --> 00:19:16,189
weighted by their blend values.

406
00:19:16,269 --> 00:19:19,612
In this case, because animation B is 66% of the blend,

407
00:19:20,113 --> 00:19:24,017
the end result, 0.19, is closer to its original value of 0.17.

408
00:19:25,398 --> 00:19:28,460
and then we take that single average phase

409
00:19:28,580 --> 00:19:31,041
and convert it back to animation frame deltas,

410
00:19:31,402 --> 00:19:33,223
which are gonna be different for each animation,

411
00:19:33,583 --> 00:19:35,985
and then advance each animation with the new numbers.

412
00:19:36,465 --> 00:19:37,586
Now they are synchronized.

413
00:19:38,066 --> 00:19:39,467
Now observe how in this example,

414
00:19:39,967 --> 00:19:42,108
animation B will be cycling from start to finish

415
00:19:42,148 --> 00:19:43,529
much faster than animation A.

416
00:19:43,850 --> 00:19:45,911
That's okay, that's what it's supposed to be doing.

417
00:19:47,957 --> 00:19:52,449
A fourth control the AI makes use of is manipulating blend values through a number of means.

418
00:19:53,031 --> 00:19:55,217
Now one example is bad zone avoidance.

419
00:19:56,208 --> 00:19:58,369
Here we have some hypothetical edges

420
00:19:58,629 --> 00:20:01,310
in a walking Revenant's 360 degree blend space.

421
00:20:01,730 --> 00:20:03,950
Now a bad zone is an area of this blend space

422
00:20:04,371 --> 00:20:06,591
where the animations don't work well together

423
00:20:06,711 --> 00:20:07,931
when played simultaneously.

424
00:20:08,732 --> 00:20:10,312
Perhaps the blend here colored in red.

425
00:20:10,852 --> 00:20:12,513
Now what do these bad blends look like?

426
00:20:13,093 --> 00:20:16,434
Well, Doom AI does not suffer from bunny hopping

427
00:20:16,694 --> 00:20:19,494
in bad zones because our foot fade synchronization

428
00:20:19,514 --> 00:20:20,015
prevents this.

429
00:20:20,315 --> 00:20:22,295
Instead, we get foot mangling.

430
00:20:22,955 --> 00:20:26,316
which is where the legs interpenetrate during crossover events in the animation

431
00:20:26,936 --> 00:20:28,077
and the hips just look awkward.

432
00:20:28,697 --> 00:20:31,017
So in trying to find a decent solution to this, we asked,

433
00:20:31,057 --> 00:20:32,578
well, what do humans do?

434
00:20:32,978 --> 00:20:33,838
Well, we...

435
00:20:34,918 --> 00:20:36,359
our legs physically cannot mangle.

436
00:20:36,719 --> 00:20:41,460
Instead, our bodies over or under rotate our hips

437
00:20:41,880 --> 00:20:43,521
relative to our desired facing

438
00:20:43,761 --> 00:20:46,221
and relative to our desired movement heading.

439
00:20:46,681 --> 00:20:49,042
And then we simply walk a little differently to maintain those.

440
00:20:49,915 --> 00:20:51,537
Now the AI used the same approach.

441
00:20:52,077 --> 00:20:53,999
This is based on the fact that the blend space

442
00:20:54,059 --> 00:20:56,021
is conceptually parented to the model's hips,

443
00:20:56,381 --> 00:20:57,482
meaning if you rotate the hips,

444
00:20:57,642 --> 00:20:59,404
you will rotate the blend space underneath them.

445
00:21:01,586 --> 00:21:03,047
Given blend inputs in model space,

446
00:21:03,868 --> 00:21:05,589
which is the desired facing of the hips

447
00:21:06,050 --> 00:21:07,271
and the desired movement direction,

448
00:21:08,160 --> 00:21:10,623
we simply rotate the hips and thus the blend space,

449
00:21:11,164 --> 00:21:15,048
like that, until the move direction is out of the bad zone.

450
00:21:15,409 --> 00:21:17,391
Now unfortunately, this implies that the hips

451
00:21:17,451 --> 00:21:18,993
are no longer gonna align with the target.

452
00:21:19,653 --> 00:21:22,156
The usual reason we want hips to align with the target

453
00:21:22,637 --> 00:21:24,239
is just because the character wants to aim

454
00:21:24,279 --> 00:21:24,879
in that direction.

455
00:21:25,280 --> 00:21:28,303
So, we just let the aim focus system fix the difference.

456
00:21:29,717 --> 00:21:34,078
Now one additional item to note is that you should always over-rotate or under-rotate

457
00:21:34,138 --> 00:21:35,378
the hips by the minimum amount.

458
00:21:35,878 --> 00:21:40,759
In other words, find the nearest edge of the bad zone and always rotate with that edge

459
00:21:40,799 --> 00:21:41,099
in mind.

460
00:21:41,719 --> 00:21:45,440
In this first case, since the desired movement direction was closer to the top of the bad

461
00:21:45,480 --> 00:21:46,620
zone, we rotate clockwise.

462
00:21:47,080 --> 00:21:51,321
But if the desired movement direction is closer to the bottom edge, we do the opposite.

463
00:21:54,342 --> 00:21:57,022
Some subtleties about our particular implementation.

464
00:21:57,920 --> 00:22:01,304
If the system dithers back and forth across a bad zone rapidly,

465
00:22:01,885 --> 00:22:03,667
it defeats the purpose of avoiding them.

466
00:22:04,207 --> 00:22:07,191
To solve this, we treat the system as a simple state machine

467
00:22:07,551 --> 00:22:10,274
and simply prevent it from re-entering states too quickly.

468
00:22:10,915 --> 00:22:12,416
And then to refine the system even more,

469
00:22:13,514 --> 00:22:17,537
we use foot phase data to delay the switch across the zone

470
00:22:17,577 --> 00:22:19,579
until the ideal foot phase has been reached

471
00:22:19,619 --> 00:22:20,239
in the animation.

472
00:22:20,660 --> 00:22:22,701
Now if used correctly, this kind of approach

473
00:22:22,741 --> 00:22:25,023
can help prevent the brief foot mangling

474
00:22:25,083 --> 00:22:27,986
that would be inevitable if the bad zone was crossed

475
00:22:28,066 --> 00:22:29,727
at any arbitrary time in the animation.

476
00:22:33,069 --> 00:22:38,673
So I've covered four examples of the ways that AI can improve the viability of a full-body

477
00:22:38,693 --> 00:22:43,476
solution and I want to conclude by going a bit higher level and providing an example

478
00:22:43,496 --> 00:22:46,799
of how this can influence the behavior implementation and presentation.

479
00:22:47,679 --> 00:22:51,882
As AI developers, we have two goals that we try to satisfy simultaneously.

480
00:22:52,222 --> 00:22:56,605
We want the AI to feel as alive and responsive as possible, but at the same time we also

481
00:22:56,646 --> 00:22:58,487
want the player to enjoy their experience.

482
00:22:59,167 --> 00:23:04,691
And the combat in Doom is critically acclaimed in large part because of how powerful it makes players feel.

483
00:23:05,371 --> 00:23:07,532
They really enjoy beating up on the enemies.

484
00:23:08,373 --> 00:23:12,716
And we found that the cadence of the AI behavior is essential to this power fantasy.

485
00:23:13,196 --> 00:23:19,880
If the player understands enemy cadence, they're able to avoid attacks and exploit openings.

486
00:23:20,646 --> 00:23:23,027
Having so many of our behaviors be structured

487
00:23:23,548 --> 00:23:26,409
as sequences of discrete full body animations

488
00:23:26,770 --> 00:23:29,171
means that the player is able to more easily read

489
00:23:29,211 --> 00:23:30,172
and understand this cadence.

490
00:23:31,352 --> 00:23:33,294
Now, you can really approach our enemies

491
00:23:33,334 --> 00:23:36,316
and sort of dance with them, even the strongest demons,

492
00:23:36,796 --> 00:23:39,517
because of how clearly the animations define their attacks.

493
00:23:40,298 --> 00:23:42,479
Now, behaviors like this always work best

494
00:23:42,519 --> 00:23:44,300
in wide open areas where the player stays

495
00:23:44,340 --> 00:23:45,021
in front of the enemies.

496
00:23:45,041 --> 00:23:46,141
These are ideal conditions.

497
00:23:46,722 --> 00:23:48,503
But Doom has a very dynamic player

498
00:23:48,743 --> 00:23:50,184
and all sorts of combat spaces.

499
00:23:51,638 --> 00:23:55,361
One approach we used to preserve as much of the rhythm of combat as we could,

500
00:23:56,081 --> 00:23:59,964
in less than ideal conditions, is that of driving behavior with animation sampling.

501
00:24:00,344 --> 00:24:04,928
Now conceptually, this is the practice of sampling animations against a target and or

502
00:24:05,008 --> 00:24:06,889
world to see which will work best.

503
00:24:07,529 --> 00:24:11,773
The desired benefit is the ability to quickly transition to another attack

504
00:24:12,173 --> 00:24:14,575
without upsetting the cadence for longer than necessary.

505
00:24:16,007 --> 00:24:17,968
Now as the debug output in these videos shows,

506
00:24:18,548 --> 00:24:20,709
at times we like to go one step further

507
00:24:21,510 --> 00:24:23,170
and also sample multiple instances

508
00:24:23,230 --> 00:24:24,751
of the same animation against the world,

509
00:24:25,392 --> 00:24:28,233
differing from each other only in slight rotation

510
00:24:28,273 --> 00:24:29,254
and translation offsets.

511
00:24:31,115 --> 00:24:32,916
The AI then uses delta correction

512
00:24:33,176 --> 00:24:36,277
to ensure that the animation playback mirrors those offsets.

513
00:24:36,858 --> 00:24:39,999
In this way, even if there's only a single attack animation

514
00:24:40,039 --> 00:24:41,000
that might reach the target,

515
00:24:41,420 --> 00:24:43,621
our daemons have a number of options to choose amongst.

516
00:24:44,332 --> 00:24:46,173
And there's almost always at least one instance

517
00:24:46,554 --> 00:24:49,075
that will fit on the navigation graph

518
00:24:49,275 --> 00:24:50,336
and within world geometry.

519
00:24:51,337 --> 00:24:53,618
Driving AI decisions with sampling like this

520
00:24:53,678 --> 00:24:55,419
can really bring a behavior to life.

521
00:24:55,859 --> 00:24:57,020
It feels extremely responsive.

522
00:24:57,941 --> 00:25:01,283
But in all honesty, being alive as an enemy

523
00:25:01,303 --> 00:25:03,464
in a game like Doom has a lot to do with death.

524
00:25:03,904 --> 00:25:07,046
And so coming full circle, we return to damage response.

525
00:25:07,887 --> 00:25:11,469
You know, we perceive enemies as the most alive

526
00:25:11,589 --> 00:25:14,010
when they react directly to our actions in the game world.

527
00:25:14,859 --> 00:25:17,800
and no player action is more deserving of a reaction

528
00:25:17,880 --> 00:25:18,821
than causing damage.

529
00:25:19,581 --> 00:25:22,862
So in an ironic twist, I think it can be argued

530
00:25:22,902 --> 00:25:25,303
that the best example of how we bring hell to life

531
00:25:25,803 --> 00:25:28,124
is the way our heavy use of pain and death animations

532
00:25:28,264 --> 00:25:30,505
makes hurting and killing the enemies so satisfying.

533
00:25:33,928 --> 00:25:37,851
So giving all this control to our AI and building our behaviors with full-body

534
00:25:37,891 --> 00:25:41,574
animations worked out very well. The animators really got to focus on their

535
00:25:41,614 --> 00:25:45,717
craft and the animations in the game are just fantastic. And the way those

536
00:25:45,777 --> 00:25:49,280
animations are used helps the enemies feel like they are really living in this

537
00:25:49,320 --> 00:25:53,564
game world. An added bonus is that it was really fun to develop these units.

538
00:25:54,324 --> 00:25:58,247
Being able to easily and reliably get the AI to deal with animation

539
00:25:58,288 --> 00:26:01,730
content and having that amount of control on our end made it super

540
00:26:01,770 --> 00:26:03,091
satisfying to author the AI.

541
00:26:04,752 --> 00:26:05,893
That concludes the presentation.

542
00:26:06,073 --> 00:26:08,335
I'd like to thank everyone again for coming here today.

543
00:26:09,175 --> 00:26:10,796
GDC wants me to remind you, do not

544
00:26:10,856 --> 00:26:13,078
forget to fill out the electronic evaluation

545
00:26:13,138 --> 00:26:13,678
for this talk.

546
00:26:14,459 --> 00:26:16,200
If you have any questions, I can answer a few right now.

547
00:26:17,340 --> 00:26:19,442
Otherwise, I will be in the wrap up rooms afterwards

548
00:26:19,482 --> 00:26:21,343
to talk about whatever you guys want to chat about.

549
00:26:21,363 --> 00:26:29,688
Thank you.

550
00:26:29,708 --> 00:26:30,089
Yes, go ahead.

551
00:26:31,196 --> 00:26:33,277
Great presentation, by the way.

552
00:26:33,977 --> 00:26:37,078
One of the questions I had is when you have a lot of AIs

553
00:26:37,118 --> 00:26:42,721
who do a lunge melee at you, and during those times,

554
00:26:42,761 --> 00:26:44,061
do you commit to the animations?

555
00:26:44,341 --> 00:26:48,243
Or especially for reactions, have you considered,

556
00:26:48,723 --> 00:26:50,764
or did you consider having additive paints

557
00:26:51,104 --> 00:26:54,746
during the melee lunges to be able to continue

558
00:26:55,206 --> 00:26:57,687
to have reactions if the player shoots the AI?

559
00:26:58,536 --> 00:26:59,637
Yes, so, sorry.

560
00:27:00,138 --> 00:27:02,340
So the question is, do we consider having

561
00:27:02,380 --> 00:27:03,721
like a more additive pain approach

562
00:27:03,741 --> 00:27:05,783
so that the AI could continue their attacks

563
00:27:05,884 --> 00:27:06,624
while taking pain?

564
00:27:08,767 --> 00:27:09,487
Yes and no.

565
00:27:09,687 --> 00:27:12,290
That's kind of what the Twitch pains ended up being.

566
00:27:13,531 --> 00:27:16,054
And we did experiment with sort of

567
00:27:17,717 --> 00:27:20,438
The idea of pains being only a visual thing

568
00:27:20,478 --> 00:27:21,779
and not interrupting the AI,

569
00:27:22,319 --> 00:27:26,942
but it ended up being that the feedback that we got

570
00:27:26,982 --> 00:27:30,144
during play testing and iteration really suggested

571
00:27:30,204 --> 00:27:33,066
that people like being able to stop the AI in their tracks.

572
00:27:33,546 --> 00:27:36,068
And in fact, when we embrace that decision

573
00:27:36,088 --> 00:27:37,489
to sort of make the pain this.

574
00:27:38,309 --> 00:27:44,474
discreet thing that you can put them in it and then do whatever you want to them that changed our gameplay from being you

575
00:27:44,494 --> 00:27:50,258
know from kind of not knowing which direction we wanted to go to this is absolutely what players are going to enjoy and

576
00:27:50,378 --> 00:27:55,302
The game was made, you know much much better because of it now that's not going to work in everybody's situation

577
00:27:55,623 --> 00:27:58,124
but again because the power fantasy of

578
00:27:58,785 --> 00:28:04,750
Controlling the demons with your gun is kind of what makes the game so satisfying it really worked for us in our instance

579
00:28:05,203 --> 00:28:08,066
Just a quick question on the other part where you do the IK

580
00:28:08,086 --> 00:28:11,129
correction for the upper body to be able to track the player.

581
00:28:12,310 --> 00:28:16,114
Do you give control to the animators to control how much

582
00:28:16,154 --> 00:28:18,156
rotation based on the variations

583
00:28:18,196 --> 00:28:19,057
within the animations?

584
00:28:20,615 --> 00:28:23,138
especially because in some cases the hip looks good

585
00:28:23,218 --> 00:28:25,600
and hands look good, but in some other cases

586
00:28:26,180 --> 00:28:27,501
the hands do not look as good.

587
00:28:28,442 --> 00:28:31,345
So do you give control, very similar to the footsteps,

588
00:28:31,405 --> 00:28:34,047
do you give controls for the windows

589
00:28:34,067 --> 00:28:36,629
or amount of angles or how much you are allowed

590
00:28:36,669 --> 00:28:37,550
to rotate procedurally?

591
00:28:38,335 --> 00:28:39,856
Yes, so the question is, do we...

592
00:28:40,417 --> 00:28:42,499
What level of control do we expose

593
00:28:42,659 --> 00:28:44,641
for like the parameters that go into the IK

594
00:28:44,761 --> 00:28:46,883
so that the animators could say in this animation

595
00:28:47,303 --> 00:28:49,866
maybe constrain the angles a little more

596
00:28:50,126 --> 00:28:51,687
or switch or whatever.

597
00:28:52,388 --> 00:28:54,290
And yes, we have full level of control.

598
00:28:54,310 --> 00:28:55,611
That's what I was talking about in the slide

599
00:28:55,631 --> 00:28:56,612
about swapping effectors.

600
00:28:57,413 --> 00:29:01,075
Our effector comes with a dataset that defines all those attributes.

601
00:29:01,415 --> 00:29:06,439
The clamp values, the rotation speeds, which bones it's parented to.

602
00:29:06,739 --> 00:29:09,921
Although we actually use like a hybrid bone solution, like I said, where we have an

603
00:29:10,481 --> 00:29:13,443
even an extra layer of abstraction that we can specify in the tool.

604
00:29:14,103 --> 00:29:15,725
and we can put an offset from a bone

605
00:29:15,845 --> 00:29:16,706
for where the effector is.

606
00:29:16,786 --> 00:29:18,908
And so all that kind of stuff is encapsulated

607
00:29:19,028 --> 00:29:20,650
in the data set for a single effector.

608
00:29:20,990 --> 00:29:22,572
And we just swap back and forth

609
00:29:22,672 --> 00:29:24,273
depending on which animation we're playing

610
00:29:24,474 --> 00:29:26,435
or even multiple times in the same animation

611
00:29:26,716 --> 00:29:27,837
depending on what the needs are.

612
00:29:27,857 --> 00:29:29,418
All right, well thank you very much.

613
00:29:29,438 --> 00:29:29,859
You're welcome.

614
00:29:32,315 --> 00:29:37,819
Hello. Hi, so first of all I would like to thank you very much for providing this incredibly

615
00:29:37,859 --> 00:29:44,704
insightful talk. Given all the details that you provided about the nuances and subtleties

616
00:29:44,724 --> 00:29:51,649
with regards to effectors and also the use of planes in order to dictate enemy movement.

617
00:29:53,250 --> 00:29:58,272
and taking into account the diverse cast of enemies that's kind of a hallmark of the Doom franchise,

618
00:29:58,813 --> 00:30:06,777
I'm curious as to what exactly Intel did in terms of giving each monster their unique traits and personalities

619
00:30:06,837 --> 00:30:10,218
when it comes to, you know, animating all of those different body parts

620
00:30:10,378 --> 00:30:14,120
and making them feel unique from a presentational standpoint

621
00:30:14,641 --> 00:30:20,263
in addition to serving the gameplay through their manifold combat functions.

622
00:30:21,576 --> 00:30:24,724
I'm sorry, what was the actual, what question?

623
00:30:27,541 --> 00:30:33,545
Like, basically, in terms of, because each enemy has their own combat routine,

624
00:30:33,585 --> 00:30:37,767
such as him throwing the fireballs, and you mentioned nuanced insults,

625
00:30:38,268 --> 00:30:44,092
like, in terms of, like, how did you essentially try to make them, you know,

626
00:30:44,112 --> 00:30:49,855
that much more distinguishable, like, from both a presentational and gameplay standpoint,

627
00:30:49,935 --> 00:30:54,538
given their diversity, and also the fact that they add variety to the combat?

628
00:30:54,981 --> 00:30:59,884
All right, so the question is basically what do we do to really embrace the diversity of

629
00:30:59,944 --> 00:31:05,368
the enemies and the simple answer is we gave a lot of that control to our animators, you

630
00:31:05,408 --> 00:31:09,710
know, we have previous videos where they sort of come up with ideas of what attacks might

631
00:31:09,750 --> 00:31:10,111
look like.

632
00:31:11,612 --> 00:31:17,916
There are they are allowed to basically make a character look animation wise, however,

633
00:31:18,016 --> 00:31:20,317
they think it should look and I mean there's you know there's.

634
00:31:20,717 --> 00:31:24,159
feedback and iteration and meetings where things are rejected and things are

635
00:31:24,200 --> 00:31:28,282
embraced but at the end of the day it was mostly driven by giving a lot of

636
00:31:28,322 --> 00:31:32,325
control to our animators and the awesome thing about giving control to the

637
00:31:32,365 --> 00:31:35,166
animators is that as an AI developer

638
00:31:35,927 --> 00:31:37,587
or as anyone else on the team,

639
00:31:38,028 --> 00:31:39,388
you can come back the next day

640
00:31:39,408 --> 00:31:42,890
and maybe you'll not even look at what an animation looks like

641
00:31:42,930 --> 00:31:45,311
before the animator plugs it in to replace a previous one,

642
00:31:45,711 --> 00:31:49,673
and you'll play the game and all of a sudden this thing will look amazing

643
00:31:50,053 --> 00:31:51,774
and have so much style and personality

644
00:31:52,294 --> 00:31:53,835
and it will surprise you.

645
00:31:54,175 --> 00:31:55,915
And that's like, you know, that's the moment

646
00:31:55,935 --> 00:31:57,576
when it's really cool to be a game developer,

647
00:31:57,596 --> 00:31:59,857
when like you're surprised by playing your own game

648
00:31:59,917 --> 00:32:01,738
just a day after you played it.

649
00:32:02,798 --> 00:32:06,520
because some content creator has put something in that's just totally awesome.

650
00:32:06,920 --> 00:32:10,602
And so I guess the short answer is we let the animators drive a lot of that.

651
00:32:11,202 --> 00:32:11,382
All right.

652
00:32:11,622 --> 00:32:12,682
Well, thank you very much.

653
00:32:12,922 --> 00:32:14,843
Again, congrats on the talk.

654
00:32:15,243 --> 00:32:15,463
Thank you.

