1
00:00:05,513 --> 00:00:07,917
Before we get started, we'll introduce ourselves.

2
00:00:08,277 --> 00:00:09,299
I'm Carrie Patel.

3
00:00:09,479 --> 00:00:11,483
I'm a senior narrative designer and writer

4
00:00:11,583 --> 00:00:12,765
at Obsidian Entertainment.

5
00:00:13,506 --> 00:00:14,367
And I'm Dave Simchick.

6
00:00:14,568 --> 00:00:15,970
I'm the tech director for our tools team.

7
00:00:16,842 --> 00:00:21,003
And today we're going to talk about the key features of conversation editors that can

8
00:00:21,103 --> 00:00:23,464
aid in the creation of branching dialogue.

9
00:00:24,184 --> 00:00:28,665
Our main reference point here will be Obsidian Entertainment Incorporated Tools, which we

10
00:00:28,725 --> 00:00:34,686
refer to as OEI tools, which Dave and his team have iterated on for years for the purposes

11
00:00:34,726 --> 00:00:37,047
of helping us better create branching dialogue.

12
00:00:37,847 --> 00:00:41,829
Our hope is that you'll leave this talk with a better understanding of how good software

13
00:00:41,929 --> 00:00:47,232
can facilitate both the creative and the technical work of authoring branching dialogue, and

14
00:00:47,272 --> 00:00:51,814
that you can use that information to either guide in the development of your own in-house

15
00:00:51,854 --> 00:00:54,315
tools or to seek out third-party options.

16
00:00:55,076 --> 00:00:59,598
There are plenty of alternatives to Microsoft Excel, and our goal is to encourage developers

17
00:00:59,658 --> 00:01:01,999
to build or seek out more robust options.

18
00:01:04,183 --> 00:01:05,724
So, what is branching dialogue?

19
00:01:06,285 --> 00:01:08,967
Simply put, it's dialogue that does not follow

20
00:01:09,167 --> 00:01:10,628
a single linear path.

21
00:01:11,289 --> 00:01:13,150
This is a screenshot from OEI tools.

22
00:01:13,610 --> 00:01:15,092
We'll get into specific features

23
00:01:15,152 --> 00:01:16,293
over the course of the talk,

24
00:01:16,713 --> 00:01:18,454
but here you can see the dialogue tree

25
00:01:18,655 --> 00:01:19,735
in the main editor window,

26
00:01:20,356 --> 00:01:21,957
which is made up of dialogue nodes

27
00:01:22,177 --> 00:01:24,059
that we can individually write and edit.

28
00:01:24,659 --> 00:01:26,200
And on the right-hand side of the screen,

29
00:01:26,660 --> 00:01:28,741
panes to set properties and scripts

30
00:01:29,081 --> 00:01:31,603
which can allow us to fine-tune the behavior

31
00:01:31,703 --> 00:01:33,604
of individual nodes and branches.

32
00:01:34,524 --> 00:01:36,365
Now, why is branching dialogue important?

33
00:01:36,885 --> 00:01:38,126
That's a talk all of its own,

34
00:01:38,586 --> 00:01:41,828
but suffice to say that it allows us to build stories

35
00:01:41,868 --> 00:01:43,608
that are reactive and player-driven,

36
00:01:43,909 --> 00:01:47,230
and it allows players to drive the flow of conversations

37
00:01:47,430 --> 00:01:50,011
and to define their characters in those conversations.

38
00:01:52,459 --> 00:01:54,960
We've used some version of this conversation editor

39
00:01:55,000 --> 00:01:57,281
for over eight years to ship titles,

40
00:01:57,401 --> 00:01:58,821
including Dungeon Siege III,

41
00:01:59,361 --> 00:02:00,742
the Pillars of Eternity games,

42
00:02:01,402 --> 00:02:02,922
South Park, The Stick of Truth,

43
00:02:03,602 --> 00:02:06,623
Tyranny, and our upcoming RPG, The Outer Worlds.

44
00:02:07,584 --> 00:02:09,864
While you can see that the presentation of dialogue

45
00:02:09,904 --> 00:02:10,945
varies between games,

46
00:02:11,445 --> 00:02:13,705
all of them require some level of branching,

47
00:02:14,106 --> 00:02:15,326
and the conversation editor

48
00:02:15,506 --> 00:02:17,147
allows us to build that structure.

49
00:02:19,388 --> 00:02:22,269
Without further ado, let's get into how the conversation

50
00:02:22,329 --> 00:02:25,110
editor allows us to turn a dialogue tree like this

51
00:02:27,090 --> 00:02:28,891
into a conversation like this.

52
00:02:31,952 --> 00:02:33,792
So the conversation you see on the left

53
00:02:34,152 --> 00:02:37,113
is part of a file from Deadfire with a character named Zuhira.

54
00:02:37,713 --> 00:02:39,234
And the video that's playing on the right

55
00:02:39,714 --> 00:02:42,875
shows the highlighted path of that conversation playing

56
00:02:42,995 --> 00:02:43,475
in-game.

57
00:02:46,503 --> 00:02:51,008
Now you can see the editor's strengths are not only that it optimizes the creation of dialogue,

58
00:02:51,368 --> 00:02:55,612
but also that it helps us integrate the presentation of that dialogue in-game.

59
00:02:56,313 --> 00:03:00,437
So for the first part of the talk, I'll discuss how narrative designers and writers

60
00:03:00,838 --> 00:03:06,263
use the Conversation Editor to structure dialogues, to quickly write and revise dialogue text,

61
00:03:06,743 --> 00:03:08,645
and to script the flow of a conversation.

62
00:03:09,546 --> 00:03:10,447
And for the second part...

63
00:03:10,975 --> 00:03:13,976
Dave will cover the conversation debugger and the script tracker,

64
00:03:14,436 --> 00:03:17,256
which are two of the tools department's most recent innovations.

65
00:03:19,417 --> 00:03:22,097
The first thing the conversation editor allows us to do

66
00:03:22,217 --> 00:03:23,998
is create a conversation structure.

67
00:03:24,318 --> 00:03:26,858
And here I'm going to show you an example of what it looks like

68
00:03:26,898 --> 00:03:30,379
to create a very short, simple dialogue tree in our tools.

69
00:03:32,319 --> 00:03:36,360
So here I hit insert and that automatically creates a talk node.

70
00:03:36,740 --> 00:03:38,940
I can quickly add in some placeholder text.

71
00:03:40,057 --> 00:03:43,918
Right click, drop down, and I can place three player response nodes.

72
00:03:45,639 --> 00:03:49,680
Quickly writing some placeholder text that someone can come by and do a better job of

73
00:03:49,720 --> 00:03:49,960
later.

74
00:03:58,062 --> 00:04:01,703
I'm selecting the top node, insert again, and there's another talk node.

75
00:04:02,923 --> 00:04:04,864
Write some text, correct my typo.

76
00:04:09,295 --> 00:04:10,917
And now by holding Control and dragging,

77
00:04:10,937 --> 00:04:13,799
I can link that node to other branches in this file.

78
00:04:14,981 --> 00:04:16,642
So for the purposes of our examples,

79
00:04:17,122 --> 00:04:19,765
this is a simplified version of the Zuhira dialog

80
00:04:19,785 --> 00:04:20,546
you saw earlier.

81
00:04:20,826 --> 00:04:22,267
It's what we refer to as a stub.

82
00:04:22,998 --> 00:04:24,958
the conversation editor builds trees

83
00:04:25,058 --> 00:04:26,219
out of different kinds of nodes.

84
00:04:26,799 --> 00:04:29,439
And as you could see, OEI tools automatically

85
00:04:29,539 --> 00:04:32,580
spaces these nodes for us and builds from left to right

86
00:04:32,920 --> 00:04:35,961
and top to bottom, which makes the creation of a dialog tree

87
00:04:36,261 --> 00:04:37,181
very fast and easy.

88
00:04:37,902 --> 00:04:39,122
Now, this sounds like a small thing

89
00:04:39,502 --> 00:04:42,063
unless you've worked with a tool that looks more like this.

90
00:04:45,203 --> 00:04:47,564
This is an example flowchart from GoDiagram,

91
00:04:47,764 --> 00:04:50,385
which is the foundational software of our conversation

92
00:04:50,445 --> 00:04:50,685
editor.

93
00:04:51,348 --> 00:04:54,153
The size, spacing, and flow of nodes is chaotic,

94
00:04:54,553 --> 00:04:56,958
and managing them becomes a chore for the developer.

95
00:04:57,719 --> 00:04:59,742
It's an annoyance for a small file like this,

96
00:05:00,283 --> 00:05:01,906
but the problem gets a lot messier

97
00:05:02,086 --> 00:05:03,970
when you consider a dialogue of 100 nodes or more.

98
00:05:07,180 --> 00:05:12,103
A structure like this, in which the designer need only adjust the ordering of nodes, allows

99
00:05:12,143 --> 00:05:17,386
designers to quickly create dialogue trees, and for other designers to understand the

100
00:05:17,486 --> 00:05:21,588
size, complexity, and flow of a conversation at a glance.

101
00:05:22,409 --> 00:05:26,932
This makes it a lot easier to both create dialogues and to pass them between designers,

102
00:05:27,372 --> 00:05:29,473
which is often crucial on larger teams.

103
00:05:30,599 --> 00:05:33,581
This also helps designers diagnose potential problems

104
00:05:33,621 --> 00:05:34,922
with a dialogue at a glance.

105
00:05:35,503 --> 00:05:38,025
This can include long stretches of the NPC talking

106
00:05:38,065 --> 00:05:40,847
at the player, moments where we're branching too widely,

107
00:05:41,107 --> 00:05:43,549
or moments where we aren't offering enough player dialogue

108
00:05:43,649 --> 00:05:44,009
options.

109
00:05:45,290 --> 00:05:48,132
So to understand how the conversation editor helps

110
00:05:48,213 --> 00:05:50,074
us structure a dialogue, let's quickly

111
00:05:50,134 --> 00:05:52,556
look at the types of nodes designers can place.

112
00:05:54,193 --> 00:05:55,714
Talk nodes are the most common.

113
00:05:56,515 --> 00:05:57,636
These are for NPCs.

114
00:05:58,176 --> 00:05:59,997
Each talk node is assigned a speaker,

115
00:06:00,417 --> 00:06:02,098
and that's the NPC saying the line,

116
00:06:02,458 --> 00:06:04,340
and a listener, which is usually the player.

117
00:06:06,161 --> 00:06:08,602
Player responses are dialogue options

118
00:06:08,642 --> 00:06:09,643
for the player character.

119
00:06:10,343 --> 00:06:12,504
You can include as many or as few as you'd like,

120
00:06:12,805 --> 00:06:15,366
depending on the role-playing experience you're offering,

121
00:06:15,766 --> 00:06:18,908
and also on the limitations of your in-game dialogue display.

122
00:06:21,089 --> 00:06:23,990
You can also link nodes, talk nodes and player nodes,

123
00:06:24,210 --> 00:06:25,731
to other parts of the conversation.

124
00:06:26,431 --> 00:06:28,532
The faded nodes you see here are all linked,

125
00:06:28,792 --> 00:06:31,133
and they'll preserve the same text and scripting

126
00:06:31,253 --> 00:06:32,053
as their originals.

127
00:06:32,753 --> 00:06:35,494
This allows us to funnel the player to a central branch

128
00:06:35,654 --> 00:06:37,835
from any number of alternate dialogue paths.

129
00:06:38,675 --> 00:06:40,376
For instance, in this stub example,

130
00:06:40,596 --> 00:06:43,497
we're giving the player three options to greet the NPC,

131
00:06:43,917 --> 00:06:45,658
but we still want to guide the player back

132
00:06:45,698 --> 00:06:47,579
to the critical path of the conversation

133
00:06:47,979 --> 00:06:50,660
so that the NPC can deliver key quest information.

134
00:06:51,625 --> 00:06:56,428
Similarly, we may choose to link a player response to another point in the conversation,

135
00:06:56,668 --> 00:06:58,049
as we've done at the end of this stub.

136
00:06:58,729 --> 00:07:03,292
This allows us to account for different paths the conversation might take, possibly due

137
00:07:03,332 --> 00:07:07,995
to the presence of a companion, as in this example, or to the state of a quest, while

138
00:07:08,035 --> 00:07:10,996
preserving the player's ability to pursue key topics.

139
00:07:12,308 --> 00:07:17,971
Linked nodes allow us to create large, branching, reactive conversations much more cleanly and

140
00:07:18,031 --> 00:07:22,653
readably than if we had to depend on following flow chart arrows across the screen, as in

141
00:07:22,673 --> 00:07:24,314
the Go diagram example you saw.

142
00:07:25,354 --> 00:07:30,017
And all of this means that any designer with the knowledge of our conversation editor can

143
00:07:30,077 --> 00:07:35,179
set up a working draft of a conversation to progress and iterate on content, and also

144
00:07:35,360 --> 00:07:40,282
that a designer can understand the scope and flow of a conversation before the final writing

145
00:07:40,342 --> 00:07:40,542
is in.

146
00:07:42,747 --> 00:07:45,208
The second key feature of the Conversation Editor

147
00:07:45,489 --> 00:07:47,610
is that it's easy to author and edit text

148
00:07:47,830 --> 00:07:49,311
directly in the dialogue nodes.

149
00:07:49,911 --> 00:07:51,872
And this is beneficial for a couple of reasons.

150
00:07:52,472 --> 00:07:54,593
The first and most obvious is workflow.

151
00:07:55,234 --> 00:07:56,974
Because we don't have to write dialogue

152
00:07:57,094 --> 00:07:59,256
in a separate interface and then port it

153
00:07:59,356 --> 00:08:00,736
into the Conversation Editor,

154
00:08:01,157 --> 00:08:02,737
this simplifies our work process,

155
00:08:03,218 --> 00:08:05,479
which is especially critical when we get to the stage

156
00:08:05,519 --> 00:08:08,320
where we're making numerous small edits and revisions.

157
00:08:09,181 --> 00:08:11,062
Changes can be made quickly and easily.

158
00:08:11,502 --> 00:08:13,383
which means we can fix bugs faster

159
00:08:13,744 --> 00:08:16,325
and get from first to final draft more efficiently.

160
00:08:17,506 --> 00:08:19,207
The other advantage is that the writer

161
00:08:19,247 --> 00:08:21,448
is working in a structure that closely mirrors

162
00:08:21,488 --> 00:08:23,369
what the player will experience in game.

163
00:08:24,110 --> 00:08:26,391
So it's easier to keep tabs on the scope

164
00:08:26,431 --> 00:08:27,752
and pacing of your dialogue.

165
00:08:28,252 --> 00:08:30,734
You can see when a particular node is getting wordy

166
00:08:30,974 --> 00:08:31,994
and revise as needed.

167
00:08:32,915 --> 00:08:35,276
And as you're writing, you can see the content

168
00:08:35,316 --> 00:08:37,217
of your node next to the nodes that proceed

169
00:08:37,257 --> 00:08:39,979
and follow it to help you maintain a smooth flow.

170
00:08:40,442 --> 00:08:44,725
especially in situations where you may have several different nodes funneling back to one.

171
00:08:47,228 --> 00:08:51,271
Compare that interface with this, which is from an older version of our conversation editor.

172
00:08:51,992 --> 00:08:57,036
You have to open a separate window to edit node text, which, again, may seem like a small thing

173
00:08:57,356 --> 00:09:01,980
until you're doing this across dozens or even hundreds of nodes within a conversation

174
00:09:02,381 --> 00:09:04,543
and thousands across an entire project.

175
00:09:06,895 --> 00:09:09,417
So what are the features that make it easy to write and edit?

176
00:09:10,097 --> 00:09:11,939
The first is this convenient text box.

177
00:09:12,679 --> 00:09:16,902
It feels like a simple but functional word processor, which is what most writers are

178
00:09:17,002 --> 00:09:17,362
used to.

179
00:09:18,163 --> 00:09:22,846
Conversation files and individual nodes are protected through source control, which helps

180
00:09:22,906 --> 00:09:25,387
prevent developers from overwriting each other's work.

181
00:09:26,208 --> 00:09:30,771
You have to check out a node's text, but once you do, you can write and edit just by clicking

182
00:09:30,831 --> 00:09:30,891
it.

183
00:09:31,608 --> 00:09:34,550
You can select, copy, and paste blocks of text,

184
00:09:34,931 --> 00:09:36,532
and you can use keyboard shortcuts

185
00:09:36,712 --> 00:09:38,333
to quickly exit out of editing mode.

186
00:09:38,954 --> 00:09:40,195
It even has a spell check feature.

187
00:09:40,815 --> 00:09:42,897
The point is, it feels a lot like writing

188
00:09:42,937 --> 00:09:45,779
in a small word processor, so it's relatively easy

189
00:09:45,819 --> 00:09:47,200
for writers to adapt to it.

190
00:09:49,462 --> 00:09:51,804
The editor also has a zoomable interface.

191
00:09:52,425 --> 00:09:54,186
You can get as close to nodes as you need

192
00:09:54,226 --> 00:09:56,408
to read them clearly, and then you can zoom out

193
00:09:56,488 --> 00:09:58,850
as far as you need to see their placement

194
00:09:58,870 --> 00:10:00,011
in the greater node structure.

195
00:10:02,540 --> 00:10:05,522
The conversation editor also has a collapsible hierarchy.

196
00:10:06,142 --> 00:10:08,824
You can hide and expand all of the child nodes

197
00:10:08,864 --> 00:10:11,106
that follow a particular node to focus

198
00:10:11,146 --> 00:10:12,767
on the part of the structure you're writing.

199
00:10:13,408 --> 00:10:15,509
So in the example I'm going to show you here,

200
00:10:15,910 --> 00:10:18,852
I want to see how well the three nodes near the center

201
00:10:18,892 --> 00:10:20,733
of the screen that are vertically spaced

202
00:10:21,234 --> 00:10:22,454
flow from their parent node.

203
00:10:23,015 --> 00:10:25,357
However, the number and positioning of those child

204
00:10:25,417 --> 00:10:27,658
nodes makes it hard for me to read these all together.

205
00:10:28,619 --> 00:10:31,121
So let's see what it looks like to collapse these in the editor.

206
00:10:33,674 --> 00:10:35,875
I'm just gonna scroll down a little bit and zoom in,

207
00:10:37,256 --> 00:10:38,456
click a button in the corner there,

208
00:10:38,476 --> 00:10:40,457
and it collapses those child nodes.

209
00:10:41,638 --> 00:10:42,458
Do it two more times.

210
00:10:43,839 --> 00:10:45,600
Now all of these nodes are close together.

211
00:10:45,620 --> 00:10:47,741
I can zoom in, read them together,

212
00:10:47,921 --> 00:10:48,881
and see how well they flow.

213
00:10:49,722 --> 00:10:52,223
Once I'm done, I can easily click the same spot

214
00:10:52,383 --> 00:10:53,624
and expand everything again

215
00:10:54,104 --> 00:10:55,585
to restore the original structure.

216
00:11:01,433 --> 00:11:03,475
The editor also makes navigation very easy.

217
00:11:04,216 --> 00:11:06,417
You can move around the file with scroll bars

218
00:11:06,697 --> 00:11:07,818
and with clicking and dragging.

219
00:11:08,299 --> 00:11:10,100
And if you want to find something specific,

220
00:11:10,540 --> 00:11:12,682
there are keyboard shortcuts to find nodes

221
00:11:12,902 --> 00:11:16,205
based on a text search or to jump to a specific node number.

222
00:11:18,470 --> 00:11:21,873
Finally, the Conversation Editor allows designers and writers

223
00:11:22,133 --> 00:11:25,015
to integrate scripting directly in the dialog tree.

224
00:11:25,796 --> 00:11:28,958
Now, if a dialog tree is a network of conversational roads,

225
00:11:29,479 --> 00:11:31,320
then conditional scripting is what

226
00:11:31,360 --> 00:11:33,822
allows designers to regulate the flow of traffic

227
00:11:33,942 --> 00:11:34,923
between those roads.

228
00:11:36,044 --> 00:11:38,806
Without conditional scripts, many of our conversation

229
00:11:38,846 --> 00:11:40,748
branches would be useless because there

230
00:11:40,768 --> 00:11:42,989
would be no way to set one branch to play

231
00:11:43,170 --> 00:11:43,870
instead of another.

232
00:11:45,244 --> 00:11:48,345
In the example pictured here, we have three different branches

233
00:11:48,406 --> 00:11:51,267
that can play depending on the background and chosen

234
00:11:51,307 --> 00:11:52,527
skills of the player character.

235
00:11:53,368 --> 00:11:56,129
Specifically, a character with the mercenary background

236
00:11:56,389 --> 00:11:58,330
or with a decently high insight score

237
00:11:58,750 --> 00:12:00,531
can observe additional information

238
00:12:00,951 --> 00:12:02,452
about a battle-fatigued soldier.

239
00:12:04,473 --> 00:12:06,494
So here's a video of what it looks like to add

240
00:12:06,534 --> 00:12:07,434
these scripts in the editor.

241
00:12:10,088 --> 00:12:13,770
For 309, I'm going to search for the is background conditional

242
00:12:13,810 --> 00:12:15,430
script, which is highlighted here.

243
00:12:16,151 --> 00:12:17,551
This lets me look at the background

244
00:12:17,591 --> 00:12:19,272
the player might have chosen for their character.

245
00:12:21,212 --> 00:12:23,613
Going to select the mercenary option from this list.

246
00:12:24,433 --> 00:12:27,734
And then for 308, I'm going to search for the is skill value

247
00:12:27,774 --> 00:12:29,935
conditional script, which as you can see,

248
00:12:30,255 --> 00:12:32,536
I can also find by typing in the search box.

249
00:12:34,237 --> 00:12:36,617
This lets me check the value of different skills

250
00:12:36,657 --> 00:12:37,498
the player might have.

251
00:12:38,465 --> 00:12:40,026
picking insight from that list,

252
00:12:42,187 --> 00:12:44,148
and then I'm inputting a value of three here

253
00:12:44,228 --> 00:12:45,528
alongside the other parameters,

254
00:12:46,049 --> 00:12:49,050
and the operator is already set to greater than or equal to,

255
00:12:49,250 --> 00:12:50,891
but I could adjust that if I wanted to.

256
00:12:52,012 --> 00:12:53,853
So, based on the order of these nodes,

257
00:12:54,413 --> 00:12:56,494
if the player chose the mercenary background

258
00:12:56,514 --> 00:12:59,316
for their character, 309 will always play

259
00:12:59,476 --> 00:13:00,396
because it's on top.

260
00:13:01,410 --> 00:13:05,374
If the player did not choose the mercenary background for their character, but has an

261
00:13:05,454 --> 00:13:09,878
insight value of 3 or greater, then 308 will always play.

262
00:13:10,558 --> 00:13:15,222
And if neither of these conditions are true, then 318 will play and the player will get

263
00:13:15,302 --> 00:13:18,265
no additional information about the NPC they're talking to.

264
00:13:20,818 --> 00:13:23,140
We can also connect multiple conditional scripts

265
00:13:23,480 --> 00:13:25,322
with and and or operators,

266
00:13:25,662 --> 00:13:27,284
and we can even nest these scripts,

267
00:13:27,764 --> 00:13:29,886
giving us an incredible level of control

268
00:13:30,126 --> 00:13:32,028
over the possible game states we are checking.

269
00:13:32,889 --> 00:13:34,530
In terms of the player experience,

270
00:13:34,951 --> 00:13:36,992
these scripting functionalities allow us

271
00:13:37,032 --> 00:13:39,054
to implement reactivity to choices

272
00:13:39,094 --> 00:13:40,375
the player has made in the game

273
00:13:40,776 --> 00:13:42,057
and to events that have occurred.

274
00:13:42,918 --> 00:13:45,620
This facilitates our ability to cleanly progress

275
00:13:46,101 --> 00:13:47,202
and branch content.

276
00:13:48,199 --> 00:13:50,400
And as you can see from the list in the middle of the window,

277
00:13:50,860 --> 00:13:53,342
there are a lot of different conditional scripts we can use.

278
00:13:53,903 --> 00:13:56,084
Some of the most common include checking

279
00:13:56,124 --> 00:13:58,766
to see if a particular conversation node has already

280
00:13:58,806 --> 00:14:00,928
been played, checking for the presence

281
00:14:01,128 --> 00:14:04,210
of a particular companion, checking a custom game

282
00:14:04,230 --> 00:14:04,690
variable.

283
00:14:05,011 --> 00:14:06,172
Three of those are pictured here.

284
00:14:07,152 --> 00:14:09,954
Checking quest status and checking the player's skills,

285
00:14:10,214 --> 00:14:11,175
as you saw a moment ago.

286
00:14:13,238 --> 00:14:15,379
Now the conditional scripts we just looked at

287
00:14:15,599 --> 00:14:17,379
will control the flow of branching

288
00:14:17,579 --> 00:14:19,560
by determining which nodes can play.

289
00:14:20,180 --> 00:14:21,941
But we can also set other scripts

290
00:14:22,141 --> 00:14:25,022
that activate certain in-game behaviors and game states.

291
00:14:25,742 --> 00:14:27,883
This includes setting global variables

292
00:14:28,143 --> 00:14:29,503
and updating the player's journal,

293
00:14:31,064 --> 00:14:33,825
giving or removing items and money from the player,

294
00:14:35,945 --> 00:14:38,446
and adjusting reputation and disposition values

295
00:14:38,646 --> 00:14:39,427
to name just a few.

296
00:14:39,927 --> 00:14:41,947
And once again, as you can see from that window,

297
00:14:42,147 --> 00:14:42,968
there's a lot we can do.

298
00:14:45,688 --> 00:14:48,630
It's incredibly useful to be able to set these scripts

299
00:14:48,690 --> 00:14:50,071
within the conversation editor.

300
00:14:50,711 --> 00:14:52,532
It allows the player's conversations

301
00:14:52,612 --> 00:14:54,933
to have meaningful impacts that are reflected

302
00:14:55,013 --> 00:14:57,595
in the rest of the game, which is one of the key goals

303
00:14:57,715 --> 00:15:00,716
of reactive dialogue in story-driven games.

304
00:15:01,697 --> 00:15:03,538
And now I'm going to hand it over to Dave,

305
00:15:03,778 --> 00:15:05,899
who can tell you about some of the exciting features

306
00:15:05,999 --> 00:15:08,400
our programming team has recently added to the editor.

307
00:15:18,265 --> 00:15:21,988
Hey everyone, I'm the programmer that worked on the conversation editor.

308
00:15:22,588 --> 00:15:25,311
And do you know what question I get most often from our writers?

309
00:15:26,452 --> 00:15:27,893
Why doesn't my conversation work?

310
00:15:30,415 --> 00:15:31,576
So here's what usually happens.

311
00:15:32,297 --> 00:15:35,800
A writer plays the game and their conversation isn't behaving as expected.

312
00:15:36,701 --> 00:15:39,984
They look at a complicated flow chart and everything appears to be fine.

313
00:15:40,604 --> 00:15:42,366
So they find a programmer and ask for help.

314
00:15:43,277 --> 00:15:45,578
The programmer uses Visual Studio to try to figure out

315
00:15:45,998 --> 00:15:48,520
what's going on, and this can take up to an hour

316
00:15:48,560 --> 00:15:49,981
to set up and profile.

317
00:15:51,582 --> 00:15:53,183
This is very frustrating to the writer,

318
00:15:53,563 --> 00:15:54,964
and it can make them feel helpless.

319
00:15:57,165 --> 00:15:59,107
This is also time-consuming to the programmer,

320
00:15:59,427 --> 00:16:01,108
who has their own tasks to work on.

321
00:16:01,928 --> 00:16:04,890
So our solution was to create a conversation debugger.

322
00:16:06,691 --> 00:16:08,873
The conversation debugger communicates with Unity

323
00:16:09,013 --> 00:16:10,954
or Unreal using a UDP listener.

324
00:16:12,156 --> 00:16:14,358
It automatically attaches to the game when it's opened

325
00:16:14,819 --> 00:16:16,881
and provides users with a ton of useful information

326
00:16:17,101 --> 00:16:18,303
about the current conversation.

327
00:16:20,966 --> 00:16:22,628
It shows which conversation is playing

328
00:16:23,088 --> 00:16:24,109
and what's the current node.

329
00:16:27,493 --> 00:16:30,136
It shows the current state of all nodes in the conversation.

330
00:16:30,536 --> 00:16:31,958
Has a node been previously visited?

331
00:16:32,038 --> 00:16:34,060
Does the node pass all of its conditions?

332
00:16:37,472 --> 00:16:39,213
If a node doesn't pass its conditions,

333
00:16:39,413 --> 00:16:40,633
the users can click on the node

334
00:16:41,114 --> 00:16:43,415
and see the result of each individual script call

335
00:16:43,795 --> 00:16:44,356
on that node.

336
00:16:47,438 --> 00:16:49,239
The live values for all global variables

337
00:16:49,319 --> 00:16:50,980
in the conversation are displayed here.

338
00:16:51,940 --> 00:16:53,981
All of this data is updated in real time

339
00:16:54,182 --> 00:16:55,422
as the conversation plays.

340
00:16:57,063 --> 00:16:59,044
Users can even manipulate the conversation

341
00:16:59,084 --> 00:16:59,745
through the debugger.

342
00:17:00,625 --> 00:17:02,867
Users can jump to any node in the conversation

343
00:17:02,987 --> 00:17:03,607
at any time.

344
00:17:04,378 --> 00:17:06,259
They can change global variables in the debugger

345
00:17:06,439 --> 00:17:08,179
and have them updated in the game.

346
00:17:12,181 --> 00:17:14,021
In this example, a writer is expecting

347
00:17:14,101 --> 00:17:15,742
four player responses to appear,

348
00:17:18,243 --> 00:17:19,423
but only two are showing up.

349
00:17:23,405 --> 00:17:24,585
We can see that two of the nodes

350
00:17:24,705 --> 00:17:26,066
aren't passing their conditions.

351
00:17:31,404 --> 00:17:33,306
A deeper look shows that a script is checking

352
00:17:33,366 --> 00:17:35,007
if a global variable is set to four.

353
00:17:39,050 --> 00:17:40,531
But it's currently set to zero.

354
00:17:43,534 --> 00:17:45,936
So the user is going to update the global variable value

355
00:17:46,256 --> 00:17:47,097
and go back a node.

356
00:17:52,241 --> 00:17:54,903
And now all four player responses are showing up.

357
00:17:57,841 --> 00:17:59,762
So there appears to be a scripting problem in the game

358
00:18:00,063 --> 00:18:02,504
where a global variable is not being updated correctly.

359
00:18:03,565 --> 00:18:05,787
So using these tools, writers can usually figure out

360
00:18:05,867 --> 00:18:07,248
what's wrong with their conversation

361
00:18:07,368 --> 00:18:09,289
and don't need to go to a programmer for help.

362
00:18:13,332 --> 00:18:15,554
One issue with branching dialogues

363
00:18:15,694 --> 00:18:17,755
is there are a lot of possible player builds to test.

364
00:18:18,336 --> 00:18:20,257
And we wanted a way to quickly test these builds

365
00:18:20,397 --> 00:18:23,019
without generating save games or having to restart the game.

366
00:18:25,441 --> 00:18:26,882
So we do this with profiles.

367
00:18:27,770 --> 00:18:30,491
A writer can quickly set up a character to simulate gender,

368
00:18:30,791 --> 00:18:34,572
race, class, stats, skills, and who is in the party.

369
00:18:35,473 --> 00:18:37,313
Profiles can be saved and loaded on the fly,

370
00:18:37,713 --> 00:18:39,834
allowing users to quickly test various branches

371
00:18:39,974 --> 00:18:40,915
of their conversation.

372
00:18:44,956 --> 00:18:47,477
In this example, we're going to load a fighter profile,

373
00:18:49,418 --> 00:18:51,139
and we're going to take a look at the fighter's

374
00:18:51,239 --> 00:18:55,620
intellect stat, which is currently set to five.

375
00:18:57,471 --> 00:18:58,711
When we play the conversation,

376
00:18:59,772 --> 00:19:01,352
we get a fighter-specific line.

377
00:19:05,974 --> 00:19:07,774
But one of the player responses is disabled

378
00:19:07,854 --> 00:19:09,535
because we failed the intellect check of 12.

379
00:19:09,675 --> 00:19:15,897
We're now going to load a wizard profile.

380
00:19:18,818 --> 00:19:21,279
And you can see that the wizard has an intellect stat of 14.

381
00:19:21,359 --> 00:19:23,419
We'll go back a node.

382
00:19:23,439 --> 00:19:26,360
And now we get a wizard-specific line.

383
00:19:30,292 --> 00:19:33,313
And the player response is enabled because we passed the intellect check.

384
00:19:40,437 --> 00:19:45,179
Another issue that arises is when we have play days, where everyone on the team plays the game for a day.

385
00:19:46,080 --> 00:19:51,542
If a non-writer is playing the game and something unexpected happens, they'll go and grab a writer and show them what's happening.

386
00:19:52,403 --> 00:19:56,165
The writer will ask, what were all the choices you made leading up to this point?

387
00:19:59,870 --> 00:20:02,372
And the usual response is, I don't know.

388
00:20:02,392 --> 00:20:04,253
It's like, I don't remember what I did.

389
00:20:05,394 --> 00:20:08,095
So this is a crucial piece of information that's needed to

390
00:20:08,135 --> 00:20:09,156
track down the issue.

391
00:20:09,716 --> 00:20:12,498
So what we can do is we can open the conversation debugger

392
00:20:13,279 --> 00:20:14,539
and we can go to the history pane.

393
00:20:15,200 --> 00:20:18,162
There the writer can see the exact play order of each node.

394
00:20:18,882 --> 00:20:21,704
They can copy the history to the clipboard, or they can

395
00:20:21,744 --> 00:20:23,085
save that data to a file.

396
00:20:23,625 --> 00:20:26,246
So this has been really useful for helping reproduce bugs.

397
00:20:30,004 --> 00:20:32,085
Now I'd like to talk about branching balance.

398
00:20:32,925 --> 00:20:35,186
We've seen that player responses can be conditionalized

399
00:20:35,226 --> 00:20:36,046
by skill checks.

400
00:20:36,927 --> 00:20:38,928
It's very important that we have about the same number

401
00:20:38,968 --> 00:20:40,909
of skill checks for each stat type.

402
00:20:41,609 --> 00:20:44,210
Otherwise, certain skills become more valuable than others.

403
00:20:45,091 --> 00:20:46,992
If a player gets more dialogue choices

404
00:20:47,072 --> 00:20:49,233
for investing in skill A than skill B,

405
00:20:49,893 --> 00:20:51,614
then players who invested in skill B

406
00:20:51,694 --> 00:20:53,775
will feel like they made a mistake with their choices.

407
00:20:54,896 --> 00:20:56,556
So how do we figure out how many times

408
00:20:56,676 --> 00:20:58,297
each stat is used in the game?

409
00:20:59,207 --> 00:21:01,748
Pillars of Eternity had over 1,200 conversations

410
00:21:01,848 --> 00:21:03,889
and over 25,000 nodes of dialogue,

411
00:21:04,289 --> 00:21:07,211
so it's not practical for someone to open up every file

412
00:21:07,371 --> 00:21:08,211
and check every node.

413
00:21:10,232 --> 00:21:12,253
So instead, I wrote a script tracking tool.

414
00:21:13,013 --> 00:21:14,694
It parses every conversation in the game

415
00:21:14,894 --> 00:21:17,415
and gathers every script call from every node.

416
00:21:20,656 --> 00:21:22,997
In the scripts pane, users can see each script type

417
00:21:23,097 --> 00:21:25,018
in the game and how many times it's used.

418
00:21:25,764 --> 00:21:28,565
In this case, we're looking at a skill value comparison call,

419
00:21:29,026 --> 00:21:31,907
which is being used 1,646 times.

420
00:21:34,788 --> 00:21:37,509
Here we can see every individual skill check call

421
00:21:37,630 --> 00:21:38,050
in the game.

422
00:21:38,690 --> 00:21:41,211
There are columns for the file the call is made in,

423
00:21:41,731 --> 00:21:44,353
the node ID, and each parameter passed in.

424
00:21:45,373 --> 00:21:46,494
Double clicking one of these calls

425
00:21:46,514 --> 00:21:47,994
will open the conversation editor

426
00:21:48,134 --> 00:21:49,855
and select the node calling the script.

427
00:21:52,756 --> 00:21:54,417
There's also a set of filter controls.

428
00:21:55,033 --> 00:21:57,073
Here we can force the tool to only show scripts

429
00:21:57,093 --> 00:21:58,334
with certain parameter values.

430
00:21:59,314 --> 00:22:01,394
Here we are specifically looking for skill checks

431
00:22:01,534 --> 00:22:02,915
referencing their survival skill.

432
00:22:03,535 --> 00:22:06,115
This limits the display to only calls with survival

433
00:22:06,275 --> 00:22:07,256
as the second parameter.

434
00:22:09,876 --> 00:22:12,697
So now we can see there are 112 survival skill checks

435
00:22:12,797 --> 00:22:13,197
in the game.

436
00:22:13,937 --> 00:22:15,578
In about five minutes, our game director

437
00:22:15,638 --> 00:22:17,898
was able to get counts for all stat, skill,

438
00:22:18,098 --> 00:22:19,639
and ability checks in the game

439
00:22:19,999 --> 00:22:21,179
so he could make a balanced pass.

440
00:22:24,719 --> 00:22:26,542
So one additional benefit of the script tracker

441
00:22:26,562 --> 00:22:28,564
was I was able to validate every script call.

442
00:22:29,285 --> 00:22:30,847
Here we can see all the scripting errors

443
00:22:30,927 --> 00:22:31,808
currently in the game.

444
00:22:32,630 --> 00:22:34,152
These usually come from game objects

445
00:22:34,232 --> 00:22:35,734
or global variables being deleted,

446
00:22:36,114 --> 00:22:37,596
but are still referenced in scripts.

447
00:22:38,617 --> 00:22:40,720
There's a repair feature to correct the scripting errors

448
00:22:40,760 --> 00:22:42,783
without having to open the conversation file.

449
00:22:46,086 --> 00:22:49,229
So if your studio is using Notepad or using Excel to write

450
00:22:49,249 --> 00:22:51,972
branching conversations, I highly recommend moving

451
00:22:51,992 --> 00:22:54,454
towards a flowchart-based authoring tool.

452
00:22:55,075 --> 00:22:57,177
If you don't have the resources to create your own,

453
00:22:57,497 --> 00:22:59,239
there are some good third-party tools available,

454
00:22:59,279 --> 00:23:01,080
such as ChatMapper and Articy.

455
00:23:04,223 --> 00:23:06,105
So I'd like to thank everybody for coming today.

456
00:23:06,606 --> 00:23:09,088
And if you have any questions, you can come to the

457
00:23:09,128 --> 00:23:09,649
microphones.

458
00:23:10,189 --> 00:23:11,270
And again, thank you very much.

459
00:23:20,360 --> 00:23:27,366
Hi. So I was really struck by the contrast between the diagram, the Go diagram, I think

460
00:23:27,386 --> 00:23:32,110
you said it was, and the main diagram you've been exhibiting here. It was clear that the

461
00:23:32,130 --> 00:23:37,094
Go diagram was a mess, and this one wasn't. But I wasn't exactly sure why it wasn't. It

462
00:23:37,154 --> 00:23:41,918
seemed like the main thing that was different was that in this tool, when you have...

463
00:23:43,219 --> 00:23:46,782
Two... when you have two nodes that link to the same place,

464
00:23:47,302 --> 00:23:50,785
in Go, the arrows would cross, and that's what's going to make the mess.

465
00:23:51,125 --> 00:23:53,687
But here, the nodes would be duplicated?

466
00:23:53,827 --> 00:23:56,188
Would they be completely duplicated, including all of their children?

467
00:23:58,309 --> 00:24:00,370
Yeah, they would be, well they wouldn't be duplicated,

468
00:24:00,390 --> 00:24:02,750
they would just point to each other.

469
00:24:02,830 --> 00:24:05,111
So if you had two nodes referencing the same node,

470
00:24:05,151 --> 00:24:07,331
there would just be an arrow pointing to the exact same node

471
00:24:07,371 --> 00:24:09,392
which could be across the entire conversation.

472
00:24:09,972 --> 00:24:11,252
With the way that we're doing it,

473
00:24:11,652 --> 00:24:13,733
is we just have one single node,

474
00:24:14,233 --> 00:24:16,593
and that points, you can make a reference

475
00:24:16,653 --> 00:24:18,954
to that other node, and you'll see it in the tool

476
00:24:19,114 --> 00:24:22,575
as a grayed out version of that node.

477
00:24:23,360 --> 00:24:27,423
And so that there was like one of the slides had an example of this.

478
00:24:27,483 --> 00:24:28,344
I didn't look great out.

479
00:24:28,664 --> 00:24:29,245
Was it great out?

480
00:24:29,765 --> 00:24:32,728
It was, it's just a little bit more faded than the others.

481
00:24:32,988 --> 00:24:36,090
Um, and a lot of these visuals you can adjust in the tool if there's

482
00:24:36,130 --> 00:24:37,492
something that's easier for you to see.

483
00:24:37,512 --> 00:24:42,696
Uh, but yeah, if you, if you double click one of those slightly faded nodes, it

484
00:24:42,736 --> 00:24:46,279
will take you to the original node in its place in the conversation, and you can

485
00:24:46,319 --> 00:24:48,521
follow from there to see where that node branches.

486
00:24:49,428 --> 00:24:50,409
OK, so I see.

487
00:24:50,769 --> 00:24:52,410
I think I didn't see the fadedness.

488
00:24:52,830 --> 00:24:57,833
So in fact, is that reference the key thing that makes this

489
00:24:57,893 --> 00:25:00,515
diagram readable, as well as collapsing children?

490
00:25:00,555 --> 00:25:01,275
Those are the two?

491
00:25:01,696 --> 00:25:01,876
Yes.

492
00:25:02,496 --> 00:25:02,656
Right.

493
00:25:03,116 --> 00:25:03,356
Thank you.

494
00:25:05,559 --> 00:25:09,241
Hi. Our company is working on an authoring tool.

495
00:25:09,701 --> 00:25:16,565
It's not just for conversations, it's for controlling game objects in the world.

496
00:25:16,925 --> 00:25:26,911
I'm an engineer. When you said that companies should move to flow chart or flow-based conversation authoring,

497
00:25:27,392 --> 00:25:31,433
I totally agree with you. I mean, I totally understand you because I'm an engineer,

498
00:25:32,033 --> 00:25:41,396
but don't you think that a writer who might come from like a movie, like you know, film background

499
00:25:41,557 --> 00:25:48,039
or like books background would be more familiar with like writing scripts for movies, like you

500
00:25:48,059 --> 00:25:50,580
know, just linear white page?

501
00:25:52,763 --> 00:25:59,005
I mean, speaking as a writer who had a background in novels and short fiction, for branching,

502
00:25:59,025 --> 00:26:01,106
I really like a tool like this.

503
00:26:02,086 --> 00:26:08,408
We actually have a feature in our conversation editor where you can export any dialogue file

504
00:26:08,548 --> 00:26:10,869
into a traditional screenplay format.

505
00:26:11,569 --> 00:26:18,411
But following the progress of that branching dialogue through basically pages of Microsoft

506
00:26:18,471 --> 00:26:18,752
Word.

507
00:26:19,252 --> 00:26:23,014
becomes very tedious, it's very easy to lose the flow of the conversation

508
00:26:23,074 --> 00:26:27,576
because you have to, you know, jump from one node to back where that's continued elsewhere.

509
00:26:28,237 --> 00:26:34,120
This just makes it a lot easier to visualize the structure and flow of that conversation

510
00:26:35,021 --> 00:26:37,782
in a way that's easy to see without having to jump around.

511
00:26:37,842 --> 00:26:41,024
I mean, I wouldn't write a linear novel in this format,

512
00:26:41,224 --> 00:26:43,946
but for a branching dialogue, I think it's very easy to use.

513
00:26:45,105 --> 00:26:51,775
And how, like, so if a writer that's not really familiar with software development,

514
00:26:52,416 --> 00:26:58,385
how long do you think that, like, this person would, like, you know, need to get used to this?

515
00:27:00,311 --> 00:27:04,813
I don't think it takes that long because at the very least, even if you don't want to

516
00:27:04,853 --> 00:27:11,075
get into the scripting yourself, all you really have to know how to do is add nodes and the

517
00:27:11,155 --> 00:27:15,337
talk nodes and the player response nodes are the two main kinds you're going to use.

518
00:27:15,817 --> 00:27:19,598
So once you know how to add those and just how to move them around the file...

519
00:27:20,399 --> 00:27:21,599
you can write in those nodes.

520
00:27:21,719 --> 00:27:23,561
And then I think the challenge is really just

521
00:27:23,981 --> 00:27:25,782
getting a better sense for how something

522
00:27:26,263 --> 00:27:28,604
feels in the flow chart versus how it feels

523
00:27:28,844 --> 00:27:29,845
in the actual game.

524
00:27:29,945 --> 00:27:32,387
But that's an issue anyone has to conquer

525
00:27:32,427 --> 00:27:33,547
by playing their content.

526
00:27:35,169 --> 00:27:36,029
One final question.

527
00:27:36,349 --> 00:27:37,450
Is this tool available?

528
00:27:38,711 --> 00:27:40,492
It is currently not available.

529
00:27:40,792 --> 00:27:42,233
All right, thanks.

530
00:27:43,854 --> 00:27:44,035
Hi.

531
00:27:45,542 --> 00:27:51,824
I was wondering, when you were mentioning the variables, like is background or is intellect,

532
00:27:52,885 --> 00:28:00,087
I'm not sure if this, just I wanted to confirm, is that something that is, since you work

533
00:28:00,127 --> 00:28:04,748
on a lot of different types of games with the narrative inside of it?

534
00:28:06,529 --> 00:28:15,436
Can you change the variables or add new variables within the tool or is that something that gets separated out into outside of the tool itself?

535
00:28:16,056 --> 00:28:19,879
So all of the scripts are actually authored by programmers inside the game.

536
00:28:20,339 --> 00:28:22,020
So we have a script class.

537
00:28:22,979 --> 00:28:28,922
where we can make static functions and put attributes on them to allow them to be displayed properly in the tool.

538
00:28:29,443 --> 00:28:31,364
And for each game it's going to be different.

539
00:28:31,744 --> 00:28:34,766
And so for a Unity-based game, we'll load up the assembly DLL,

540
00:28:35,586 --> 00:28:38,728
use reflection, and get all that data from the game

541
00:28:38,768 --> 00:28:45,492
and get the exact same information that's in the game into the tool in an easy-to-see UI.

542
00:28:47,029 --> 00:28:49,212
For Unreal, they have a similar thing,

543
00:28:49,493 --> 00:28:51,876
but we do have to do an export where we have to use their

544
00:28:52,216 --> 00:28:55,500
Blueprints exporter and get all that information.

545
00:28:55,760 --> 00:28:57,583
And that's how we get our scripts into the game.

546
00:28:58,484 --> 00:28:58,664
Thanks.

547
00:29:01,452 --> 00:29:10,834
Yeah, I was curious if there were any organizational or like process barriers to getting some of your tools prioritized for development.

548
00:29:11,894 --> 00:29:19,476
I'm coming from a place where I'm being tasked to sort of envision the future of authoring tools for our company.

549
00:29:20,296 --> 00:29:24,657
And I wondered if you could speak to like making the business case because I thought it was really interesting.

550
00:29:25,638 --> 00:29:28,159
how your tools went through multiple iterations,

551
00:29:28,219 --> 00:29:29,680
like they seem quite different,

552
00:29:30,200 --> 00:29:31,981
and I was just wondering if you could speak to that.

553
00:29:32,682 --> 00:29:34,683
So this really started when we worked on

554
00:29:34,703 --> 00:29:35,704
Neverwinter Nights 2,

555
00:29:36,224 --> 00:29:38,225
and we used their conversation editor,

556
00:29:38,265 --> 00:29:40,226
which is pretty much a tree view,

557
00:29:40,286 --> 00:29:41,667
where you just have nested, just.

558
00:29:43,869 --> 00:29:47,792
Nested pluses and minuses and if you have a hundred nodes or whatever in there

559
00:29:47,812 --> 00:29:53,818
It's just very difficult to use and see the flow for and so are like from the top

560
00:29:53,878 --> 00:30:00,184
We recognize that this was not a good workflow for making games with a million words in it that we needed a faster way

561
00:30:00,204 --> 00:30:05,448
To to author dialogues and so the from the top down we recognized that and wanted to go

562
00:30:07,663 --> 00:30:11,890
And we have time for one more question from each microphone.

563
00:30:11,910 --> 00:30:11,970
Yay.

564
00:30:12,230 --> 00:30:12,891
Hey, you're great.

565
00:30:13,733 --> 00:30:15,115
So quick question for you.

566
00:30:15,316 --> 00:30:17,820
As an engineer, what was the engineering resource

567
00:30:17,840 --> 00:30:19,803
cost of making this tool in terms of time?

568
00:30:20,730 --> 00:30:24,452
In terms of time, we've been iterating on it for probably about 10 years,

569
00:30:24,832 --> 00:30:29,314
but if I were to make it from scratch knowing all the lessons that we've learned,

570
00:30:29,674 --> 00:30:32,135
it'd probably take one person probably about four months to do.

571
00:30:32,375 --> 00:30:33,036
Okay, thanks.

572
00:30:33,636 --> 00:30:34,436
Okay.

573
00:30:34,596 --> 00:30:38,078
First off, when you were showing some of the playtest footage,

574
00:30:38,698 --> 00:30:42,260
was it actually like an engine playtesting where you were able to work on the dialogue

575
00:30:42,340 --> 00:30:43,881
and see what it looks like in engine?

576
00:30:44,872 --> 00:30:47,075
So there's two separate applications running.

577
00:30:47,095 --> 00:30:49,438
So the game is running, and then the tool is a separate

578
00:30:49,478 --> 00:30:50,779
application that's also running.

579
00:30:51,440 --> 00:30:54,244
But they're using a messaging system to talk to each other.

580
00:30:54,524 --> 00:30:56,627
OK, so how long does the import, export, and what's

581
00:30:56,687 --> 00:30:59,490
the functions like to sort of get those things connected?

582
00:31:00,982 --> 00:31:06,204
So we just use a C-sharp UDP listener where we specify an exact port.

583
00:31:06,684 --> 00:31:09,564
And so the designer doesn't have to do anything.

584
00:31:09,604 --> 00:31:12,125
So we're automatically doing the connection behind the scenes.

585
00:31:12,465 --> 00:31:16,486
So whenever we start up the tool, we send a message looking if the game is running.

586
00:31:16,546 --> 00:31:20,567
And the same thing with the game, that's always looking at the conversation editors running.

587
00:31:20,747 --> 00:31:22,567
And we'll sync up things automatically.

588
00:31:22,948 --> 00:31:24,048
That's really cool. Thank you.

589
00:31:25,868 --> 00:31:29,189
And if anyone has other questions, we can move to the wrap-up room to address them there.

