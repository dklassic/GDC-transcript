1
00:00:05,212 --> 00:00:06,254
Hello? Can you hear me?

2
00:00:07,796 --> 00:00:08,117
Alright.

3
00:00:09,198 --> 00:00:10,320
Too loud, too quiet.

4
00:00:11,702 --> 00:00:12,884
Everyone who was out last night is like,

5
00:00:12,904 --> 00:00:14,246
too loud, too loud.

6
00:00:16,124 --> 00:00:17,425
So a couple things before we get started.

7
00:00:18,285 --> 00:00:19,206
Please turn off your cell phones.

8
00:00:19,726 --> 00:00:23,268
If it does ring, I will mock you incessantly throughout this presentation.

9
00:00:25,009 --> 00:00:27,470
And at the end, you're going to get that electronic survey.

10
00:00:27,570 --> 00:00:28,190
We've all gotten them.

11
00:00:28,631 --> 00:00:29,171
Please fill it out.

12
00:00:30,031 --> 00:00:31,752
Let me know what I can do better.

13
00:00:32,573 --> 00:00:36,435
If we need more content, less content, some sort of synchronized dance-off, whatever.

14
00:00:36,455 --> 00:00:38,796
And it helps me come back next year.

15
00:00:41,513 --> 00:00:43,594
Also, I can talk a little fast when I get nervous,

16
00:00:44,054 --> 00:00:45,035
so if we get to the end of this thing

17
00:00:45,055 --> 00:00:46,996
and you guys are like, what the hell did he just say?

18
00:00:47,016 --> 00:00:48,756
We'll have time for questions,

19
00:00:48,796 --> 00:00:49,857
so don't worry too much about it.

20
00:00:51,337 --> 00:00:53,338
All right, my name is Scott Shepard.

21
00:00:53,818 --> 00:00:56,279
I'm the technical art lead for the 3D department at Bungie.

22
00:00:58,180 --> 00:00:59,501
I've been in the games industry since about 1999,

23
00:00:59,541 --> 00:01:02,562
and I've worked on everything from fantasy MMOs

24
00:01:02,842 --> 00:01:05,983
to survival horror, the sci-fi first-person shooters of Halo.

25
00:01:07,124 --> 00:01:08,404
But for about the past four years,

26
00:01:08,884 --> 00:01:09,665
I've been focused on

27
00:01:11,649 --> 00:01:13,551
building customizable characters for Destiny.

28
00:01:19,656 --> 00:01:21,677
To talk about Bungie's future, we first

29
00:01:21,698 --> 00:01:22,798
have to talk about our past.

30
00:01:23,739 --> 00:01:26,241
The Master Chief is one of the most recognizable characters

31
00:01:26,421 --> 00:01:27,662
of the modern video game era.

32
00:01:28,924 --> 00:01:31,085
His image was developed across 10 years of projects

33
00:01:31,446 --> 00:01:32,847
and thousands of man hours of work.

34
00:01:34,008 --> 00:01:37,451
He has appeared in games, books, animated and live action films,

35
00:01:37,811 --> 00:01:39,813
as action figures, even on soda cans.

36
00:01:41,318 --> 00:01:43,900
His green armor and orange visor ingrained in the minds

37
00:01:43,940 --> 00:01:45,081
of gamers both young and old.

38
00:01:46,722 --> 00:01:48,323
His faceless design allowed the player

39
00:01:48,343 --> 00:01:50,965
to really imagine themselves as the hero of the Halo saga.

40
00:01:52,326 --> 00:01:54,067
I call that out because that point stuck with us

41
00:01:54,107 --> 00:01:54,648
in particular.

42
00:01:56,569 --> 00:01:57,550
So where do we go from here?

43
00:01:58,951 --> 00:02:01,052
How do we on one hand build off the successes we learned

44
00:02:01,072 --> 00:02:02,253
from developing the Master Chief,

45
00:02:02,874 --> 00:02:04,214
but at the same time create something

46
00:02:04,254 --> 00:02:05,756
entirely unique to Destiny?

47
00:02:06,636 --> 00:02:07,917
Who is Destiny's main hero?

48
00:02:10,978 --> 00:02:14,580
Well, the answer is, there isn't one. Destiny isn't

49
00:02:14,640 --> 00:02:19,122
about a singular hero or story. Our mantra throughout

50
00:02:19,142 --> 00:02:21,382
the development of this project has been to create

51
00:02:21,402 --> 00:02:23,343
a world that people want to be in. To

52
00:02:23,363 --> 00:02:25,644
go back to. This is a place for players

53
00:02:25,684 --> 00:02:26,704
to tell their own stories.

54
00:02:29,265 --> 00:02:31,966
In short, our hero is you. This story is

55
00:02:32,006 --> 00:02:35,868
yours. The idea of telling these player stories were

56
00:02:35,888 --> 00:02:38,089
the driving points for all of our decisions regarding

57
00:02:38,129 --> 00:02:38,889
our player characters.

58
00:02:40,209 --> 00:02:42,852
It was important for us to feel, important

59
00:02:42,892 --> 00:02:44,373
for us to let the player feel like they

60
00:02:44,413 --> 00:02:47,756
were part of this world, invested in it. That

61
00:02:47,776 --> 00:02:49,418
we weren't handing them a role to play. They

62
00:02:49,438 --> 00:02:50,619
were creating their own role.

63
00:02:52,641 --> 00:02:54,503
To accomplish that, we needed a system that enabled

64
00:02:54,523 --> 00:02:56,725
the player to discover and shape their avatar in

65
00:02:56,745 --> 00:02:59,848
the world of Destiny. That meant allowing each player

66
00:02:59,868 --> 00:03:02,310
to stand out from others and encouraging them to

67
00:03:02,350 --> 00:03:04,031
grow and change their character over time.

68
00:03:06,335 --> 00:03:08,256
To succeed at this, we needed a deep and

69
00:03:08,296 --> 00:03:11,639
satisfying customization experience that went well beyond anything

70
00:03:11,679 --> 00:03:14,641
we've ever attempted before, and something we hadn't really

71
00:03:14,681 --> 00:03:15,622
seen in a shooter to date.

72
00:03:19,745 --> 00:03:21,726
Early on, we talked a lot about power fantasies.

73
00:03:23,128 --> 00:03:25,289
These are the heroes and adventurers that inspire us.

74
00:03:26,330 --> 00:03:27,891
At an early age, this may be as simple as

75
00:03:27,931 --> 00:03:29,052
a game of Cowboys and Indians.

76
00:03:30,196 --> 00:03:34,219
As we were exposed to different types of heroes, it grows to include the likes of space marines,

77
00:03:34,699 --> 00:03:37,801
pirates, wizards, knights, ninjas, what have you.

78
00:03:40,022 --> 00:03:44,025
We took these power fantasies and tried to wrap them into archetypes that fit well within

79
00:03:44,065 --> 00:03:44,465
our world.

80
00:03:45,606 --> 00:03:49,449
What we emerged with were three classes we felt best represented the types of stories

81
00:03:49,829 --> 00:03:51,430
our players would want to tell on Destiny.

82
00:03:52,571 --> 00:03:55,853
These are the Hunters, the Warlocks, and the Titans.

83
00:03:59,319 --> 00:04:01,921
To begin our explorations, we broke our character bodies

84
00:04:01,961 --> 00:04:04,923
into four slots, the head, chest, arms, and legs.

85
00:04:05,984 --> 00:04:07,605
As players progressed through the world of Destiny,

86
00:04:07,745 --> 00:04:09,907
they would be rewarded with different pieces of gear

87
00:04:09,967 --> 00:04:10,627
for each slot.

88
00:04:12,148 --> 00:04:14,230
This gear would alter their appearance and abilities,

89
00:04:14,690 --> 00:04:16,892
allowing them to make choices that

90
00:04:16,912 --> 00:04:19,554
affected both their visual as well as gameplay experiences.

91
00:04:20,655 --> 00:04:21,996
These four slots offered a balance

92
00:04:22,036 --> 00:04:24,678
between gameplay progression, visual customization,

93
00:04:24,998 --> 00:04:25,738
and aesthetic harmony.

94
00:04:28,499 --> 00:04:30,840
We chose basic silhouette shapes for each of the classes

95
00:04:30,920 --> 00:04:32,101
to help make them more readable.

96
00:04:33,061 --> 00:04:36,123
These shapes formed many of the ideas behind the initial concepts

97
00:04:36,563 --> 00:04:39,965
and served as guides for ensuring each class maintained a unique identity.

98
00:04:41,105 --> 00:04:45,207
To further separate the classes, we added a fifth class-specific gear slot.

99
00:04:47,308 --> 00:04:48,009
The Hunter's Cloak,

100
00:04:49,729 --> 00:04:50,610
the Titan's Badge,

101
00:04:52,291 --> 00:04:54,172
and the Warlock's Bond, or armband.

102
00:04:59,242 --> 00:05:03,865
The hunters are our frontier scouts, scavenging and exploring in the world outside the city

103
00:05:04,265 --> 00:05:07,247
to bring back valuable technology the citizens rely upon.

104
00:05:08,468 --> 00:05:11,530
They are hacker cowboys, bounty hunters, and recon snipers.

105
00:05:13,031 --> 00:05:15,112
They carry themselves with style and swagger.

106
00:05:16,473 --> 00:05:20,815
Hunters scavenge much of their gear, so we decided on an almost mix and match haphazard

107
00:05:20,855 --> 00:05:21,676
look to their designs.

108
00:05:25,267 --> 00:05:27,507
Like the wandering adventures of old, they wear heavy cloaks

109
00:05:28,207 --> 00:05:30,407
and combine utilitarian accessories such as packs

110
00:05:30,487 --> 00:05:32,688
and straps with trophies of their adventures,

111
00:05:33,428 --> 00:05:34,888
both functional and fashionable.

112
00:05:36,508 --> 00:05:38,089
We drew inspiration from survival gear

113
00:05:38,129 --> 00:05:39,849
like gas masks and hazmat suits.

114
00:05:40,549 --> 00:05:41,709
So we chose to design their helmets

115
00:05:41,729 --> 00:05:43,390
with a focus on goggles and breathers.

116
00:05:46,390 --> 00:05:48,050
Their armor is lightweight and fitted

117
00:05:48,090 --> 00:05:49,631
to allow for mobility and speed.

118
00:05:50,251 --> 00:05:52,131
It is often comprised of a hard chest plate

119
00:05:52,611 --> 00:05:54,612
over a flexible Kevlar-like midsection.

120
00:05:56,010 --> 00:05:58,891
They wear loose-fitting pants with pockets and sturdy walking boots.

121
00:06:02,732 --> 00:06:08,375
The warlocks are our warrior scholars, searching for answers to the mysteries of the Traveler

122
00:06:08,655 --> 00:06:09,735
and a mastery of its power.

123
00:06:10,776 --> 00:06:13,116
They are mystics, seers, and wandering monks.

124
00:06:14,497 --> 00:06:18,339
They are mysterious and secretive, with the ability to harness the power of the Traveler

125
00:06:18,419 --> 00:06:19,419
to devastating effect.

126
00:06:22,250 --> 00:06:23,931
They wear long overcoats and robes,

127
00:06:24,791 --> 00:06:26,652
and while they generally rely on their abilities

128
00:06:27,152 --> 00:06:28,893
more than heavy armor of other classes,

129
00:06:29,473 --> 00:06:31,634
they still pack a fair amount of hardware on their persons.

130
00:06:32,595 --> 00:06:34,475
They're scholarly, but also practical,

131
00:06:34,916 --> 00:06:37,036
and they are no strangers to the heavy firepower

132
00:06:37,076 --> 00:06:38,377
required to survive in the wild.

133
00:06:41,658 --> 00:06:43,779
The warlocks had many influences and inspirations,

134
00:06:44,499 --> 00:06:45,640
from wizards and shamans

135
00:06:45,940 --> 00:06:47,461
to the trench soldiers of World War I.

136
00:06:48,477 --> 00:06:51,858
We tried to combine all of these elements while always maintaining an air of mystery

137
00:06:51,898 --> 00:06:52,278
about them.

138
00:06:56,119 --> 00:06:59,420
And finally, the Titans, our equivalents to the Knights of Old.

139
00:07:00,340 --> 00:07:03,541
Heavily armored and bearing the emblems and heraldry of the city they protect.

140
00:07:04,302 --> 00:07:07,102
They are noble and brave, with a culture steeped in tradition.

141
00:07:08,223 --> 00:07:10,483
The Titans considered a great honor to protect their city.

142
00:07:12,904 --> 00:07:14,784
They are the most heavily armored of our three classes.

143
00:07:15,663 --> 00:07:18,365
Their designs are most often comprised of a tight-fitting rubber suit

144
00:07:18,866 --> 00:07:20,007
layered with heavy metal plates,

145
00:07:20,527 --> 00:07:23,570
with large pauldron-like shoulder pads and sweeping visors

146
00:07:23,690 --> 00:07:25,471
inspired by medieval and renaissance armor.

147
00:07:27,153 --> 00:07:30,115
Large armored thigh pads and boots are also a common trait of the Titans.

148
00:07:32,677 --> 00:07:33,918
The badge they wear at their side,

149
00:07:34,119 --> 00:07:36,741
the symbol of their achievements, lineage, or allegiance,

150
00:07:37,361 --> 00:07:39,523
much like the tabards worn by knights throughout history.

151
00:07:43,651 --> 00:07:46,352
OK, so we had a distinct look for each of our classes

152
00:07:46,392 --> 00:07:47,053
we were happy with.

153
00:07:47,593 --> 00:07:49,174
But we still had a lot of questions to answer.

154
00:07:51,735 --> 00:07:53,936
What did different versions of these classes look like?

155
00:07:55,097 --> 00:07:56,097
What parts would change?

156
00:07:56,217 --> 00:07:58,358
And what components were key to the class identity?

157
00:07:59,719 --> 00:08:01,740
How do we break up these awesome designs to fit into

158
00:08:01,760 --> 00:08:03,601
an investment and customization system?

159
00:08:06,742 --> 00:08:08,743
We generated countless drawings to help us answer

160
00:08:08,803 --> 00:08:09,744
these questions and more.

161
00:08:10,760 --> 00:08:12,421
And we use these drawings to set targets

162
00:08:12,461 --> 00:08:13,702
for our customization system.

163
00:08:14,922 --> 00:08:16,403
But an old colleague of mine used to say,

164
00:08:17,024 --> 00:08:18,785
designing games is as much about deciding

165
00:08:18,805 --> 00:08:20,606
what you can't do as what you can.

166
00:08:21,426 --> 00:08:24,408
Setting limitations was just as important as setting targets.

167
00:08:26,829 --> 00:08:29,751
For example, many of these designs called for a great

168
00:08:29,771 --> 00:08:32,893
deal of overlapping pieces, which was technically very challenging.

169
00:08:33,674 --> 00:08:36,295
We did some tests in this area, but in the end

170
00:08:36,315 --> 00:08:38,276
we felt it was significantly limiting the artists.

171
00:08:38,837 --> 00:08:40,298
So we just simplified it and moved on.

172
00:08:46,012 --> 00:08:48,273
We've done customization before with some success.

173
00:08:48,993 --> 00:08:51,194
With every iteration, we've gotten a little more complex

174
00:08:51,354 --> 00:08:52,374
and a little more expansive.

175
00:08:53,075 --> 00:08:54,275
Naturally, this is where we started.

176
00:08:55,075 --> 00:08:57,336
Could we build off what we had created for the Halo franchise?

177
00:08:59,797 --> 00:09:01,158
In Reach, we broke our characters

178
00:09:01,198 --> 00:09:04,299
into helmets, chest armor, arm accessories, and thigh packs.

179
00:09:05,220 --> 00:09:07,081
This was not unlike our plans for Destiny,

180
00:09:07,661 --> 00:09:09,682
different pieces of gear for different parts of the body.

181
00:09:10,642 --> 00:09:12,083
The problem, however, was the scope.

182
00:09:14,176 --> 00:09:15,897
The sheer amount of content we had to produce

183
00:09:15,917 --> 00:09:18,259
for Destiny meant we needed to be thinking outside

184
00:09:18,279 --> 00:09:20,480
the box, to approach this problem from a different

185
00:09:20,560 --> 00:09:20,800
angle.

186
00:09:25,103 --> 00:09:27,245
During the course of building Helmets for Reach, we

187
00:09:27,285 --> 00:09:30,547
created special add-ons intended to add extra variation

188
00:09:30,587 --> 00:09:31,107
to each helmet.

189
00:09:32,168 --> 00:09:34,209
This worked pretty much as we expected.

190
00:09:35,290 --> 00:09:35,871
But a funny thing

191
00:09:35,911 --> 00:09:36,211
happened.

192
00:09:37,131 --> 00:09:38,772
We accidentally put the add-ons from one

193
00:09:38,833 --> 00:09:40,113
helmet onto another.

194
00:09:40,814 --> 00:09:41,594
And surprisingly it

195
00:09:42,965 --> 00:09:46,148
We found that a lot of these add-ons could just be Z-buffered into the base helmets to

196
00:09:46,248 --> 00:09:47,590
quickly create new variants.

197
00:09:50,974 --> 00:09:54,117
This got me wondering if we could create an entire character using that approach.

198
00:09:55,278 --> 00:09:59,042
So I started mocking up a system in Maya, building pieces and layering them on top of

199
00:09:59,082 --> 00:10:01,385
each other, until I ended up with what you see here.

200
00:10:02,326 --> 00:10:04,909
Twenty-five or so pieces used to build twelve different helmets.

201
00:10:08,489 --> 00:10:09,950
Using these pieces in different colors,

202
00:10:10,210 --> 00:10:12,671
I was able to create a variety of helmets very quickly.

203
00:10:13,512 --> 00:10:15,433
Adding in textures and decals in Photoshop,

204
00:10:15,813 --> 00:10:17,274
I created this proof of concept image.

205
00:10:18,235 --> 00:10:20,476
This is what we presented to our tools and graphics engineers

206
00:10:20,796 --> 00:10:22,117
to kick off our early discussions.

207
00:10:25,619 --> 00:10:27,820
Going into these discussions, we had several goals in mind

208
00:10:27,860 --> 00:10:28,520
for our new system.

209
00:10:31,224 --> 00:10:35,066
We wanted to save as much time as possible in both creation and maintenance of our content.

210
00:10:35,927 --> 00:10:39,569
To have a base of common assets that we weren't rebuilding every time we had to make a new

211
00:10:39,609 --> 00:10:40,129
piece of gear.

212
00:10:41,310 --> 00:10:45,072
How many artists find themselves modeling basically the same pair of boots ten times

213
00:10:45,092 --> 00:10:46,233
throughout the course of a project?

214
00:10:47,373 --> 00:10:51,116
If they're smart about it, they reuse their high poly and kitbash some of their previous

215
00:10:51,196 --> 00:10:51,836
assets together.

216
00:10:52,556 --> 00:10:56,519
But even then, they're generally still ripping new maps, laying out new UVs, and retexturing

217
00:10:56,559 --> 00:10:57,579
things countless times.

218
00:10:58,780 --> 00:11:00,161
We needed to be more efficient than that.

219
00:11:01,920 --> 00:11:04,001
That meant the ability to build a shoulder pad one time

220
00:11:04,781 --> 00:11:07,262
and use it freely as many times as it was needed in the game

221
00:11:07,503 --> 00:11:08,563
without additional work.

222
00:11:10,424 --> 00:11:12,425
We also wanted to remain as flexible as possible.

223
00:11:13,466 --> 00:11:14,546
If near the end of development,

224
00:11:14,586 --> 00:11:16,627
we realized the same shoulder pad was over budget

225
00:11:17,147 --> 00:11:19,589
or didn't deform properly or people just didn't like it,

226
00:11:20,609 --> 00:11:22,310
we needed to be able to fix that piece once

227
00:11:22,470 --> 00:11:23,971
and not open every piece of gear

228
00:11:24,011 --> 00:11:25,051
that shoulder pad was used in.

229
00:11:28,903 --> 00:11:32,265
We knew that this was a franchise we intended to grow and develop over the next decade.

230
00:11:32,285 --> 00:11:36,687
The system needed to be expandable, something we could build on as we added content in the

231
00:11:36,728 --> 00:11:38,809
forms of DLC, expansions, and sequels.

232
00:11:40,370 --> 00:11:43,211
We knew we couldn't afford to rebuild everything for every release.

233
00:11:44,052 --> 00:11:47,874
We were spanning console generations, which meant we needed the system to be flexible

234
00:11:47,894 --> 00:11:51,496
enough to take advantage of the higher poly and texture budgets that would be afforded

235
00:11:51,536 --> 00:11:52,777
by the new generation of hardware.

236
00:11:54,185 --> 00:11:56,445
And we knew that even within the same generation of consoles,

237
00:11:56,945 --> 00:11:59,466
tech improves, tools improve, artists improve.

238
00:12:00,666 --> 00:12:03,306
It was important to be able to address old content quickly

239
00:12:03,386 --> 00:12:04,307
and easily down the road.

240
00:12:08,227 --> 00:12:10,828
From our design team, the desire was for player characters

241
00:12:10,868 --> 00:12:12,868
to pick up different pieces of gear, what

242
00:12:12,908 --> 00:12:15,289
we call arrangements, for each slot

243
00:12:15,369 --> 00:12:16,789
and swap them throughout the course of the game.

244
00:12:18,049 --> 00:12:19,269
When this happened, we wanted the player

245
00:12:19,289 --> 00:12:21,310
to notice a significant change to their appearance.

246
00:12:22,433 --> 00:12:24,494
Because of this, artists needed to be able to

247
00:12:24,554 --> 00:12:27,455
change assets significantly without having to worry about breaking

248
00:12:27,495 --> 00:12:31,516
skinning or affecting animation. In short, we needed the ability

249
00:12:31,556 --> 00:12:34,277
to create something that looked completely different with little

250
00:12:34,317 --> 00:12:35,717
to no wake on other teams.

251
00:12:41,479 --> 00:12:44,060
So after some lengthy discussions with some very smart

252
00:12:44,100 --> 00:12:48,181
people, we had a plan. We needed to stop

253
00:12:48,221 --> 00:12:49,441
thinking of our characters like this.

254
00:12:51,290 --> 00:12:54,851
and start thinking of them like this. The

255
00:12:54,911 --> 00:12:57,191
idea was to break our character designs down

256
00:12:57,231 --> 00:13:00,552
into their most base elements. Things like belt buckles,

257
00:13:00,792 --> 00:13:04,253
shoulder pads, visors and straps would all be modeled

258
00:13:04,273 --> 00:13:06,694
and textured as self-contained individual assets.

259
00:13:10,235 --> 00:13:14,596
So building this became much more about building this.

260
00:13:16,464 --> 00:13:18,646
These individual pieces, what we call bits,

261
00:13:19,367 --> 00:13:20,808
would be stored as separate files

262
00:13:21,009 --> 00:13:23,331
and assembled by an artist to create a new arrangement

263
00:13:23,411 --> 00:13:25,313
of arms, legs, helmets, et cetera.

264
00:13:26,714 --> 00:13:28,516
If the design for a particular arrangement

265
00:13:28,596 --> 00:13:31,279
called for a buckle, rather than building a new buckle,

266
00:13:31,459 --> 00:13:33,681
the artist would simply load an existing buckle bit

267
00:13:33,901 --> 00:13:35,123
and place it where he or she needed,

268
00:13:36,624 --> 00:13:38,726
with the system handling many of the technical aspects

269
00:13:38,806 --> 00:13:39,447
behind the scenes.

270
00:13:43,788 --> 00:13:46,590
To control the material properties of each bit, we created dyes.

271
00:13:47,410 --> 00:13:51,993
The dye assigned to a bit controls its color, specular qualities, detail maps, et cetera.

272
00:13:53,294 --> 00:13:58,257
We decided each arrangement would have a dye for armor, for cloth, and what we call suit,

273
00:13:58,357 --> 00:13:59,858
which is generally leather or rubber.

274
00:14:01,619 --> 00:14:05,361
Each bit within an arrangement will be flagged as one of these types and the material properties

275
00:14:05,401 --> 00:14:06,061
set accordingly.

276
00:14:07,542 --> 00:14:08,203
So we had a plan.

277
00:14:09,203 --> 00:14:11,145
We knew how we were going to break our characters down.

278
00:14:12,070 --> 00:14:13,711
Now we just needed a way to put them back together.

279
00:14:16,212 --> 00:14:16,873
Enter a mashup.

280
00:14:18,473 --> 00:14:20,354
Mashup is our custom character assembler.

281
00:14:21,275 --> 00:14:26,137
It allows for any bit created by any artist to be brought in, placed, rotated, scaled

282
00:14:26,177 --> 00:14:29,939
to fit the arrangement as needed, all without affecting the original bit geometry.

283
00:14:30,999 --> 00:14:33,620
It really is the heart of our player character building process.

284
00:14:39,847 --> 00:14:42,669
So this is an example of an artist working in mashup.

285
00:14:47,533 --> 00:14:50,415
We start each arrangement by bringing in a core to build off of.

286
00:14:51,796 --> 00:14:56,160
There's nothing particularly special about the core, but it is the foundation of the

287
00:14:56,200 --> 00:14:56,640
arrangement.

288
00:14:57,941 --> 00:15:01,844
Much like the foundation of a house dictates the basic layout of the structure built on

289
00:15:01,884 --> 00:15:02,285
top of it.

290
00:15:04,507 --> 00:15:07,329
The artist then begins loading in bits and placing them where needed.

291
00:15:09,094 --> 00:15:12,017
Each arrangement has a set of predetermined points to aid in placement.

292
00:15:12,638 --> 00:15:16,222
Things like front, back, left upper arm, right upper arm, et cetera.

293
00:15:17,283 --> 00:15:21,027
Bits can be set to default to a certain point, just to make things a little easier and faster

294
00:15:21,047 --> 00:15:21,608
for the artists.

295
00:15:25,592 --> 00:15:29,777
As you can see, the artists can scale, rotate, or mirror the bit in a variety of ways to

296
00:15:29,817 --> 00:15:31,238
accommodate the needs of the arrangement.

297
00:15:33,202 --> 00:15:36,144
There's no hard limit to the number of bits an arrangement can be made of,

298
00:15:36,584 --> 00:15:39,086
as the bits are combined at export time to save performance.

299
00:15:41,948 --> 00:15:46,010
As long as the overall arrangement still fits in its allotted memory and performance budgets,

300
00:15:46,511 --> 00:15:46,931
we're all good.

301
00:15:51,934 --> 00:15:54,176
After we've established the basic geometry of the helmet,

302
00:15:54,416 --> 00:15:58,558
there are a number of properties that can be set on each bit to alter its function or appearance.

303
00:16:05,231 --> 00:16:08,012
We can set what type of material the bit takes from our die system.

304
00:16:09,072 --> 00:16:11,253
We can set whether the bit draws in first person or not.

305
00:16:12,133 --> 00:16:16,554
We can set whether the bit, excuse me, what platforms the bit is drawn on.

306
00:16:17,194 --> 00:16:20,875
We can also override the bit's default shader, allowing for texture and shader variation

307
00:16:21,035 --> 00:16:21,976
unique to that arrangement.

308
00:16:22,596 --> 00:16:25,397
And we can even add vertex animation to give the bit sway or movement.

309
00:16:27,157 --> 00:16:29,358
After properties are set, we need to skin the bits.

310
00:16:30,538 --> 00:16:33,999
They can be quickly rigid-bound or skinned using our custom one-button skinning tool.

311
00:16:35,669 --> 00:16:39,333
Optionally, the bit can be custom skinned by one of our riggers, and the skin weight

312
00:16:39,393 --> 00:16:42,335
stored within the bit and applied the next time an artist brings it in.

313
00:16:44,938 --> 00:16:47,740
Now this video is sped up to about five times normal speed.

314
00:16:48,661 --> 00:16:51,504
And I'm not going to lie to you, I've built this helmet before.

315
00:16:52,305 --> 00:16:55,027
But it comes in in about three minutes and thirty seconds.

316
00:16:55,548 --> 00:16:58,951
So what you're looking at is a new piece of helmet content in about twenty minutes.

317
00:17:06,541 --> 00:17:08,663
So the other tool you saw in that video is Gear Manager.

318
00:17:09,543 --> 00:17:12,606
Gear Manager allows us to browse through arrangements, bits, and bobs.

319
00:17:13,747 --> 00:17:18,110
A bob, or a bunch of bits, is essentially a group of bits stored as a preset.

320
00:17:19,051 --> 00:17:22,354
It allows artists to put together pieces that are more complex than a single bit,

321
00:17:22,774 --> 00:17:24,215
but simpler than a full arrangement.

322
00:17:25,216 --> 00:17:28,219
A pair of boots including straps and armor might be a good example of this.

323
00:17:30,801 --> 00:17:34,424
Most importantly, Gear Manager gives us a variety of methods to find useful bits.

324
00:17:35,221 --> 00:17:39,045
The most obvious method being to simply scroll through pages of thumbnails looking for something

325
00:17:39,085 --> 00:17:39,485
interesting.

326
00:17:40,286 --> 00:17:41,447
But there's much more to it than that.

327
00:17:42,088 --> 00:17:47,973
I can filter and search bits by name, by folder, by class, or by artist-assigned keyword.

328
00:17:52,638 --> 00:17:55,381
I can also mark bits as favorites to easily find them later.

329
00:17:56,991 --> 00:18:02,333
For example, I can search for metal bolts, limit that to a certain class, quickly scrub

330
00:18:02,353 --> 00:18:06,955
through thumbnails, and even rotate and zoom a preview of the model, all in Gear Manager.

331
00:18:07,916 --> 00:18:11,637
Once I find one I'm interested in, I simply double-click to send it to Mashup.

332
00:18:14,419 --> 00:18:19,081
Going back to our Lego analogy, how many hours did you spend pawing through that giant container

333
00:18:19,121 --> 00:18:20,722
of Legos looking for that perfect piece?

334
00:18:22,182 --> 00:18:25,844
Gear Manager allows artists to focus on building their arrangements rather than searching for

335
00:18:25,884 --> 00:18:26,164
pieces.

336
00:18:31,709 --> 00:18:33,990
Cloth setup is generally the last step of our process.

337
00:18:34,790 --> 00:18:37,552
We use Havok Cloth, and a custom wizard-like interface

338
00:18:37,572 --> 00:18:39,552
that allows artists to define cloth regions

339
00:18:39,993 --> 00:18:41,933
without delving too deeply into technical setup.

340
00:18:43,354 --> 00:18:45,315
Artists pick the type of cloth gear they are making,

341
00:18:45,935 --> 00:18:48,256
the type of fabric, and the wizard guides them

342
00:18:48,276 --> 00:18:50,317
through selecting the appropriate verts for skinned,

343
00:18:50,677 --> 00:18:51,998
simulated, and anchored regions.

344
00:18:56,760 --> 00:18:58,440
In the end, once it's been imported into the game,

345
00:18:58,640 --> 00:18:59,581
it looks something like this.

346
00:19:06,404 --> 00:19:07,544
So now that we've built our helmet,

347
00:19:07,804 --> 00:19:09,765
we need to make sure it conforms to the geometry

348
00:19:09,785 --> 00:19:11,345
and texture budgets we've allowed for it.

349
00:19:12,365 --> 00:19:14,206
Because there's the potential for every player

350
00:19:14,306 --> 00:19:16,686
in a given space to be wearing completely unique gear,

351
00:19:17,286 --> 00:19:18,747
we decided to assign each player

352
00:19:18,787 --> 00:19:20,447
their own texture and polygon budgets.

353
00:19:21,447 --> 00:19:23,327
Memory within a mission could then be set aside

354
00:19:23,467 --> 00:19:24,908
based on the number of players it required.

355
00:19:27,668 --> 00:19:29,569
More than that, since each player can swap out

356
00:19:29,609 --> 00:19:30,709
different parts of their character,

357
00:19:31,149 --> 00:19:32,689
we had to further break those budgets down

358
00:19:32,789 --> 00:19:33,990
into an amount per slot.

359
00:19:34,940 --> 00:19:36,981
These were then tailored to best fit each class.

360
00:19:39,382 --> 00:19:42,864
For example, a Titan's arm slot allows for a 1024 by 512

361
00:19:43,144 --> 00:19:45,785
texture on the PlayStation 3 and Xbox 360,

362
00:19:46,766 --> 00:19:49,067
and roughly 170K memory for geometry.

363
00:19:52,709 --> 00:19:55,070
A Warlock's arm slot, which covers less real estate,

364
00:19:55,711 --> 00:19:57,592
allows for a 512 by 512 texture and 110K memory for geometry.

365
00:20:01,467 --> 00:20:03,269
However, the budget for all the combined gear

366
00:20:03,389 --> 00:20:05,390
of the Titan and the Warlock is the same.

367
00:20:09,673 --> 00:20:11,374
Okay, understanding that, let's take a look

368
00:20:11,394 --> 00:20:12,695
at this Hunter's chest arrangement,

369
00:20:12,916 --> 00:20:14,377
shown in our texture plate preview.

370
00:20:15,678 --> 00:20:17,039
On the left is the empty plate.

371
00:20:18,019 --> 00:20:20,421
The green area is the texture space I have to work with

372
00:20:20,441 --> 00:20:21,462
for this chest arrangement.

373
00:20:22,402 --> 00:20:23,683
On the right is the built plate.

374
00:20:24,984 --> 00:20:27,226
The engine takes each bit's textures and UVs

375
00:20:27,406 --> 00:20:29,327
and programmatically arranges them on the plate.

376
00:20:30,245 --> 00:20:32,466
Anything that doesn't fit is displayed in the red area

377
00:20:32,647 --> 00:20:33,767
on the right side of the preview.

378
00:20:34,708 --> 00:20:37,429
So here you can see I have three bits not fitting on the plate.

379
00:20:39,250 --> 00:20:40,651
At this point, I have a couple of options.

380
00:20:41,691 --> 00:20:43,792
I can remove some bits to make more room on the texture.

381
00:20:44,673 --> 00:20:46,494
I can swap out some of the larger resolution

382
00:20:46,574 --> 00:20:47,394
ones for smaller.

383
00:20:48,334 --> 00:20:49,995
Or I can change the bits texture size.

384
00:20:52,757 --> 00:20:54,458
Generally, the first two options are my best bet.

385
00:20:55,440 --> 00:20:57,681
If I change the bit's texture size, it's going to affect

386
00:20:57,881 --> 00:20:59,462
every arrangement that bit is used in.

387
00:20:59,982 --> 00:21:02,064
So increasing or decreasing resolution of a bit

388
00:21:02,124 --> 00:21:03,364
is handled with extreme care.

389
00:21:05,126 --> 00:21:08,207
In this case, though, the orange highlighted bit on the left

390
00:21:08,868 --> 00:21:11,069
was using an inappropriate amount of texture resolution

391
00:21:11,189 --> 00:21:12,670
relative to its physical size.

392
00:21:13,691 --> 00:21:14,631
So I reduced it down.

393
00:21:15,352 --> 00:21:17,433
And that change gets propagated to any arrangement

394
00:21:17,453 --> 00:21:18,293
that bit is used in.

395
00:21:19,774 --> 00:21:21,335
And it allows my three remaining bits

396
00:21:21,395 --> 00:21:22,456
to fit nicely on the plate.

397
00:21:25,100 --> 00:21:26,740
So that gives us a handle on our texture budgets.

398
00:21:27,280 --> 00:21:28,441
Now let's take a look at our geometry.

399
00:21:32,282 --> 00:21:34,783
Here you see the geometry memory profile for our hunter chest.

400
00:21:35,963 --> 00:21:38,044
Unlike the texture memory, each instance of a bit

401
00:21:38,104 --> 00:21:38,944
has to be counted.

402
00:21:39,324 --> 00:21:41,905
So each instance is shown along with a breakdown of cost.

403
00:21:43,405 --> 00:21:45,706
Since many things like UV borders, hard edges,

404
00:21:45,806 --> 00:21:47,286
and shader assignments can affect

405
00:21:47,326 --> 00:21:49,327
the amount of memory associated with the geometry,

406
00:21:49,947 --> 00:21:52,288
we try to give the artist as much information as possible.

407
00:21:54,952 --> 00:21:57,053
If I'm over budget, my options are similar to that

408
00:21:57,093 --> 00:21:58,154
of my texture budget pass.

409
00:21:59,095 --> 00:22:01,817
I can remove some bits, swap them out for cheaper ones,

410
00:22:02,377 --> 00:22:04,099
or I can open one up and make some changes

411
00:22:04,119 --> 00:22:05,040
to the actual geometry.

412
00:22:06,521 --> 00:22:08,202
Many times we'll find that something simple,

413
00:22:08,342 --> 00:22:10,984
like a bit containing a large number of unwelded UVs

414
00:22:11,344 --> 00:22:13,846
or unnecessary edge loops, in which case,

415
00:22:13,886 --> 00:22:15,548
it's a simple matter of right-clicking the bit,

416
00:22:15,868 --> 00:22:18,410
selecting edit, making my changes, and saving.

417
00:22:19,351 --> 00:22:20,892
With that, I've just made an optimization

418
00:22:20,932 --> 00:22:22,713
to every arrangement that bit is used in.

419
00:22:26,038 --> 00:22:27,539
Now that I've got my helmet built and budget,

420
00:22:27,619 --> 00:22:28,279
I'm in done, right?

421
00:22:31,101 --> 00:22:31,321
Wrong.

422
00:22:32,981 --> 00:22:34,262
Part of player customization means

423
00:22:34,302 --> 00:22:35,362
allowing for both genders.

424
00:22:36,203 --> 00:22:37,203
So now we have to look at building

425
00:22:37,223 --> 00:22:38,404
the female version of our helmet.

426
00:22:41,225 --> 00:22:43,666
We initially experimented with taking a fully built piece

427
00:22:43,706 --> 00:22:46,387
of male gear and using a combination of wrap deformers

428
00:22:46,427 --> 00:22:48,888
and blend shapes to create a semi-automated process

429
00:22:48,928 --> 00:22:49,888
for building female gear.

430
00:22:52,506 --> 00:22:53,967
There were several problems with this approach.

431
00:22:54,768 --> 00:22:56,790
First, since it combined all of the bits

432
00:22:56,890 --> 00:22:58,251
into a single piece of geometry,

433
00:22:59,352 --> 00:23:01,054
to then be conformed to the female physique,

434
00:23:01,474 --> 00:23:03,976
it lost a lot of the flexibility and benefits of the system.

435
00:23:05,638 --> 00:23:07,480
Second, to meet our high quality bar,

436
00:23:08,240 --> 00:23:09,702
artists were spending longer and longer

437
00:23:09,722 --> 00:23:11,283
massaging the geometry by hand,

438
00:23:11,543 --> 00:23:13,225
rather than relying on the automated mesh.

439
00:23:14,726 --> 00:23:16,248
So after some careful consideration,

440
00:23:16,648 --> 00:23:17,669
we made a direction change.

441
00:23:20,522 --> 00:23:22,224
We decided that with a few modifications

442
00:23:22,304 --> 00:23:24,426
and additional tools, our current process

443
00:23:24,446 --> 00:23:26,028
was quick enough and strong enough

444
00:23:26,388 --> 00:23:28,330
to use for both male and female arrangements.

445
00:23:29,512 --> 00:23:31,874
We added the ability for a bit to have a female version.

446
00:23:33,196 --> 00:23:34,677
This is particularly useful for things

447
00:23:34,717 --> 00:23:36,079
like chest plates and pants, where

448
00:23:36,099 --> 00:23:38,041
we want geometry that more closely conforms

449
00:23:38,061 --> 00:23:39,062
to the feminine proportions.

450
00:23:40,052 --> 00:23:44,714
However, the majority of things, ammo packs and the like, just needed to be slightly scaled

451
00:23:44,754 --> 00:23:46,075
down and moved into position.

452
00:23:46,935 --> 00:23:51,217
This allowed us to use the vast majority of the content we built for both males and females.

453
00:23:55,019 --> 00:23:58,400
Now, if you noticed on the texture preview slide, all of our bits are textured for the

454
00:23:58,440 --> 00:23:59,881
most part as gray scale images.

455
00:24:02,982 --> 00:24:06,364
This is to allow for the additional customization layer brought in by our dye system.

456
00:24:07,684 --> 00:24:11,727
Before I get into that, I want to talk a little bit about the textures associated with a bit.

457
00:24:13,107 --> 00:24:16,990
Like most modern 3D assets, our primary maps are diffuse and normal maps.

458
00:24:18,271 --> 00:24:20,872
But for bits, we also have what we call a gear stack texture.

459
00:24:23,474 --> 00:24:25,875
Here's a sample gear stack texture for one of our hunter capes.

460
00:24:26,395 --> 00:24:26,916
Pretty, isn't it?

461
00:24:28,837 --> 00:24:32,559
What the gear stack is, is three different black and white masks stacked into a single

462
00:24:32,659 --> 00:24:34,180
RGB texture to conserve memory.

463
00:24:35,362 --> 00:24:39,805
We've evolved these masks to be used in a number of different ways, but the general usage goes

464
00:24:39,845 --> 00:24:40,225
like this.

465
00:24:42,186 --> 00:24:44,928
The blue channel holds a fringe map, or alpha test map.

466
00:24:45,809 --> 00:24:49,891
This is primarily used on cloth bits to create tatters and holes, hence the name fringe.

467
00:24:52,012 --> 00:24:56,635
The green channel stores our specular roughness map, which works in conjunction with the assigned

468
00:24:56,695 --> 00:25:00,037
spec material to control specular roughness and intensity of the surface.

469
00:25:02,479 --> 00:25:04,740
And finally, in the red channel we have our scratch mask.

470
00:25:05,886 --> 00:25:07,927
The scratch mask is used to control what areas

471
00:25:07,987 --> 00:25:10,088
are affected by the dye assigned to the bit.

472
00:25:11,208 --> 00:25:13,229
We call it a dye, but it controls significantly

473
00:25:13,269 --> 00:25:14,149
more than just color.

474
00:25:16,210 --> 00:25:18,131
Areas that are white in the scratch mask get

475
00:25:18,151 --> 00:25:20,272
affected by not only the dye's color, using an

476
00:25:20,312 --> 00:25:23,033
assigned blend method, but also the dye's diffuse and

477
00:25:23,073 --> 00:25:25,694
normal detail maps, as well as the specular material

478
00:25:25,734 --> 00:25:26,155
response.

479
00:25:29,456 --> 00:25:31,297
Speaking of which, let's talk a bit about how

480
00:25:31,337 --> 00:25:31,977
we handle specular.

481
00:25:34,040 --> 00:25:39,643
Our spec response is comprised of three elements, the gear's specular roughness mask, as we

482
00:25:39,663 --> 00:25:42,945
saw on the previous slide, and the die's specular lobe intent.

483
00:25:46,086 --> 00:25:50,348
The specular lobe controls three aspects of the material's spec response, the shape of

484
00:25:50,389 --> 00:25:54,411
the highlight, the brightness of the highlight, and the falloff of the diffuse light.

485
00:25:55,992 --> 00:26:00,314
Instead of using a standard Phong model, we map a content-driven gradient ramp to the

486
00:26:00,374 --> 00:26:02,975
surface to define the appearance and shape of the specular highlight.

487
00:26:04,766 --> 00:26:06,508
The ramp textures shown at the bottom of the image

488
00:26:06,628 --> 00:26:08,610
are applied to the sphere above, beginning

489
00:26:08,630 --> 00:26:10,311
at the point of reflection and extending

490
00:26:10,611 --> 00:26:11,873
180 degrees around the mesh.

491
00:26:13,034 --> 00:26:14,715
The outlined orange area demonstrates

492
00:26:14,755 --> 00:26:17,318
how the ramp textures correspond to the highlight they produce.

493
00:26:21,101 --> 00:26:24,004
The Specular Tint is also a content-driven gradient ramp,

494
00:26:24,584 --> 00:26:26,586
and it controls four aspects of how Specular

495
00:26:26,606 --> 00:26:27,707
will render on the surface.

496
00:26:28,518 --> 00:26:33,019
the color of the specular highlight, how the diffuse texture influences the specular response,

497
00:26:33,800 --> 00:26:37,680
the brightness of the highlight based on angle, and diffuse brightness scaling.

498
00:26:39,301 --> 00:26:43,402
Unlike the lobe ramp, which maps based on the position of a light source, the tint ramp

499
00:26:43,462 --> 00:26:45,202
maps to the surface based on viewing angle.

500
00:26:46,442 --> 00:26:50,723
The ramp extends from the surface perpendicular to the view, 90 degrees to the glancing edge.

501
00:26:51,723 --> 00:26:54,384
This is what allows us to change specular color based on angle of view.

502
00:26:55,887 --> 00:26:59,388
Again, the orange outline demonstrate how these ramps get applied to the spheres above.

503
00:27:03,730 --> 00:27:07,592
The tent also sets how the specular highlight is modified by the underlying diffuse.

504
00:27:09,032 --> 00:27:11,914
These spheres above are rendered in a debug spec light only mode.

505
00:27:12,974 --> 00:27:17,196
The one on the left allows the diffuse texture of the sphere to modify the specular color

506
00:27:17,436 --> 00:27:17,996
and brightness.

507
00:27:18,777 --> 00:27:24,219
The middle image modifies the specular response based on the diffuse luminance, so only adjusting

508
00:27:24,239 --> 00:27:24,719
the brightness.

509
00:27:25,668 --> 00:27:28,549
And a third white overcoat image ignores the diffuse

510
00:27:28,609 --> 00:27:30,710
entirely in regards to specular response.

511
00:27:33,732 --> 00:27:35,153
Put this all together and it looks like this.

512
00:27:36,313 --> 00:27:38,494
Lobe multiplied by tint plus diffuse.

513
00:27:39,675 --> 00:27:42,897
However this image above assumes a pure white specular

514
00:27:43,057 --> 00:27:43,757
roughness mask.

515
00:27:46,618 --> 00:27:48,779
The spec roughness mask modifies the spec result.

516
00:27:49,920 --> 00:27:52,401
Generally white pixels in the mask produce a bright

517
00:27:52,461 --> 00:27:55,343
sharp highlight and dark pixels produce a dim broad highlight.

518
00:27:58,608 --> 00:28:02,849
This combination of elements gives artists a huge variety of interesting spec responses

519
00:28:02,889 --> 00:28:03,389
to work with.

520
00:28:04,330 --> 00:28:09,171
When you combine this with the additional elements in the die, it looks like this.

521
00:28:11,312 --> 00:28:15,753
As you can see, this allows us to apply a range of materials from polished chrome to

522
00:28:15,793 --> 00:28:21,135
worn leather to Kevlar to tattered cloth, all on the same base texture and geometry.

523
00:28:24,902 --> 00:28:27,464
All of these are materials we can quickly and easily apply

524
00:28:27,504 --> 00:28:28,625
to any of our player gear.

525
00:28:33,429 --> 00:28:34,910
In addition to the dyed areas of gear,

526
00:28:35,270 --> 00:28:37,692
we also have controls for the other side of the scratch mask.

527
00:28:38,933 --> 00:28:40,614
The areas that are painted black can

528
00:28:40,634 --> 00:28:43,236
be assigned their own specular properties, as well as detail,

529
00:28:43,576 --> 00:28:44,757
diffuse, and normal maps.

530
00:28:46,178 --> 00:28:48,560
This helps us achieve things like matte paint being stripped

531
00:28:48,580 --> 00:28:51,462
away from shiny metal or a shiny metal buckle on a leather

532
00:28:51,482 --> 00:28:51,742
collar.

533
00:28:56,074 --> 00:29:00,518
Each arrangement gets assigned three different dyes, a dye for suit, for armor, and for

534
00:29:00,558 --> 00:29:00,878
cloth.

535
00:29:01,799 --> 00:29:04,782
Each dye has both a primary and secondary color associated with it.

536
00:29:05,683 --> 00:29:08,645
These parameters are set on a per-bit basis throughout the arrangement.

537
00:29:12,669 --> 00:29:16,353
The dyes assigned to an arrangement help to control the color palette, homogenize all

538
00:29:16,373 --> 00:29:20,537
of the bits into a cohesive piece, and allow us to form larger graphic shapes within the

539
00:29:20,557 --> 00:29:20,897
character.

540
00:29:27,499 --> 00:29:31,303
The initial design of the customization system called for each player to have three dies

541
00:29:31,323 --> 00:29:33,264
assigned across their entire character.

542
00:29:37,288 --> 00:29:40,751
This was based on the artist's desire to avoid every color of the rainbows showing up.

543
00:29:42,433 --> 00:29:46,196
The idea was that players would pick up different die items that would fit into the three slots,

544
00:29:46,737 --> 00:29:47,637
armor, cloth, and suit.

545
00:29:49,219 --> 00:29:52,782
These dies were then applied to the arrangement across the entire character.

546
00:29:53,948 --> 00:29:55,849
Unfortunately, this was a case where the design

547
00:29:55,889 --> 00:29:58,289
needs required us to adapt our artistic plans.

548
00:30:01,530 --> 00:30:03,230
What we discovered was that when a player

549
00:30:03,290 --> 00:30:05,391
picked up a new piece of gear, even though

550
00:30:05,471 --> 00:30:07,711
we were changing the silhouette fairly significantly,

551
00:30:08,471 --> 00:30:10,612
the visual impact wasn't enough to produce the

552
00:30:10,672 --> 00:30:12,472
emotional impact we wanted from the player.

553
00:30:13,692 --> 00:30:15,313
In other words, the player just didn't feel

554
00:30:15,353 --> 00:30:16,973
as excited about a new piece of gear as

555
00:30:16,993 --> 00:30:19,074
we wanted them to, because we were only

556
00:30:19,134 --> 00:30:21,514
changing one of the visual axes of the character.

557
00:30:24,692 --> 00:30:27,112
The human eye reads changes in color better than

558
00:30:27,132 --> 00:30:30,773
it reads changes in shape. And changes in both

559
00:30:30,853 --> 00:30:34,894
color and shape are necessary for maximum impact. With

560
00:30:34,934 --> 00:30:37,135
this it was decided that each tier of player

561
00:30:37,175 --> 00:30:39,516
gear would be assigned a different color, so that

562
00:30:39,536 --> 00:30:40,996
it was obvious to the player when they picked

563
00:30:41,016 --> 00:30:42,036
up a piece of gear that it was of

564
00:30:42,076 --> 00:30:42,576
higher level.

565
00:30:44,237 --> 00:30:46,477
The challenge here was to create color palettes that

566
00:30:46,497 --> 00:30:49,258
were distinct enough individually, but worked well together from

567
00:30:49,358 --> 00:30:50,078
one tier to the next.

568
00:30:53,838 --> 00:30:56,300
Here we have our initial passes at creating these color palettes.

569
00:30:57,701 --> 00:31:01,865
We used simple block representations of our classes to assess color compatibility and

570
00:31:01,925 --> 00:31:02,545
distribution.

571
00:31:03,907 --> 00:31:07,970
These palettes have been continuously adjusted in InGen to better communicate to the player.

572
00:31:12,574 --> 00:31:16,758
Using this color and shape approach proved to be pretty successful in creating bold enough

573
00:31:16,818 --> 00:31:19,981
changes to meet design needs while still feeling good to the artists.

574
00:31:26,927 --> 00:31:28,967
So after building all these fantastic assets,

575
00:31:29,207 --> 00:31:31,228
we needed the ability to quickly view and manage

576
00:31:31,248 --> 00:31:33,209
these arrangements and die assignments in game.

577
00:31:33,829 --> 00:31:34,910
So we created Mantini.

578
00:31:36,930 --> 00:31:39,511
With Mantini, we can quickly select the designer-created

579
00:31:39,551 --> 00:31:41,672
investment item that a player would pick up in game

580
00:31:42,432 --> 00:31:45,254
and set the arrangement and the default dies assigned to it,

581
00:31:46,614 --> 00:31:48,235
all within the same UI.

582
00:31:49,855 --> 00:31:52,616
I can quickly change and browse arrangements and dies

583
00:31:52,656 --> 00:31:55,598
on the fly, as well as check both male and female versions

584
00:31:55,658 --> 00:31:56,258
of the arrangement.

585
00:31:57,318 --> 00:32:01,561
This proved invaluable for checking various arrangements for color compatibility, as well

586
00:32:01,601 --> 00:32:03,802
as finding issues such as clipping or missing pieces.

587
00:32:07,224 --> 00:32:10,906
Using Mantini, we put together this video to show off some of our very early work in

588
00:32:10,946 --> 00:32:11,687
progress content.

589
00:32:13,853 --> 00:32:14,093
You

590
00:33:00,678 --> 00:33:02,559
So, that's a pretty solid overview of the system.

591
00:33:03,279 --> 00:33:05,360
But I'd be lying if I told you it all went perfectly.

592
00:33:05,700 --> 00:33:06,861
Let's be honest, it never does.

593
00:33:08,531 --> 00:33:10,612
We faced a number of challenges throughout this process.

594
00:33:13,052 --> 00:33:15,373
The system is fairly abstract and complex.

595
00:33:16,253 --> 00:33:18,014
Destiny has been heavily concept-driven,

596
00:33:18,234 --> 00:33:20,194
and both the art director and the concept team

597
00:33:20,314 --> 00:33:23,035
are far more comfortable with designs of full characters

598
00:33:23,195 --> 00:33:24,315
rather than a modular system.

599
00:33:25,436 --> 00:33:26,536
Though we tried as best we could

600
00:33:26,796 --> 00:33:28,737
to create modular pieces that worked well together,

601
00:33:29,397 --> 00:33:30,937
many of the designs led themselves

602
00:33:30,957 --> 00:33:32,378
to unique, specialized bits.

603
00:33:33,658 --> 00:33:35,519
As a result, I feel like we've still only scratched

604
00:33:35,539 --> 00:33:37,259
the surface of what we can do with the system.

605
00:33:40,597 --> 00:33:43,298
content creation got too far ahead of tools and engineering work.

606
00:33:44,279 --> 00:33:47,341
For much of the production cycle, the tools were very much a work in progress.

607
00:33:48,001 --> 00:33:51,584
Missing features and stability issues made working with the system early on somewhat

608
00:33:51,604 --> 00:33:52,164
of a nightmare.

609
00:33:53,185 --> 00:33:56,087
This caused a lot of frustration and slowdowns for the content creators.

610
00:33:58,969 --> 00:34:01,790
And finally, we lost some of the joy of building characters.

611
00:34:02,631 --> 00:34:06,213
To be honest, this is a problem with any customization system I've worked with.

612
00:34:07,178 --> 00:34:09,639
It's difficult to maintain a sense of creative ownership

613
00:34:09,739 --> 00:34:12,600
and excitement for artists when they're building small parts

614
00:34:12,640 --> 00:34:14,321
of a character rather than the full thing.

615
00:34:15,842 --> 00:34:18,083
Since geometry and textures needed to stay modular,

616
00:34:18,443 --> 00:34:19,963
it kept the artists from really being able to

617
00:34:20,003 --> 00:34:22,164
hand craft assets to the level they desired.

618
00:34:24,846 --> 00:34:25,746
OK, so what went right?

619
00:34:28,247 --> 00:34:30,208
Overall, the system itself works quite well.

620
00:34:30,848 --> 00:34:33,249
At this stage, a new and unique looking arrangement

621
00:34:33,289 --> 00:34:35,350
can be created in a very short period of time.

622
00:34:36,264 --> 00:34:39,625
For something like a helmet, that may take as little as an hour from start to end game.

623
00:34:40,946 --> 00:34:44,107
We've also seen the system get better and better the more content we add to it.

624
00:34:44,967 --> 00:34:48,488
This bodes extremely well for a franchise we plan to carry on for a number of years.

625
00:34:51,769 --> 00:34:56,111
The flexibility the system provided us has proved invaluable in fixing bugs and reacting

626
00:34:56,171 --> 00:34:57,891
to designer and art director feedback.

627
00:34:58,792 --> 00:34:59,912
Don't like the color of something?

628
00:35:00,172 --> 00:35:00,772
Change the dye.

629
00:35:01,193 --> 00:35:02,693
That sleeve not deforming properly?

630
00:35:03,093 --> 00:35:05,074
Fix it in one place and it's fixed everywhere.

631
00:35:05,886 --> 00:35:09,329
This fits in extremely well with Bungie's approach of rapid iteration.

632
00:35:13,633 --> 00:35:15,995
Lastly, the system helped to unify content.

633
00:35:16,816 --> 00:35:19,178
With so many different artists working on player characters,

634
00:35:19,298 --> 00:35:22,561
the system proved a fantastic tool for helping to set the ground rules

635
00:35:22,601 --> 00:35:23,922
to bridge different artists' styles.

636
00:35:25,204 --> 00:35:28,086
Since artists were constantly seeing and working with each other's content,

637
00:35:28,627 --> 00:35:31,669
they quickly picked up on the design language and style we were striving for.

638
00:35:32,762 --> 00:35:35,002
The additional layer of the Dye system assured color

639
00:35:35,222 --> 00:35:37,063
and spec responses were also unified.

640
00:35:39,664 --> 00:35:42,505
So an entirely new type of game, an entirely

641
00:35:42,565 --> 00:35:45,405
new engine and tool set, and a largely new

642
00:35:45,425 --> 00:35:46,646
team set the challenge for us.

643
00:35:47,626 --> 00:35:48,506
And we learned a ton.

644
00:35:49,487 --> 00:35:51,407
How to best work with the system, what tools

645
00:35:51,447 --> 00:35:52,288
and features we're missing.

646
00:35:53,228 --> 00:35:54,728
We also learned a lot about our strengths and

647
00:35:54,768 --> 00:35:57,229
weaknesses as a team, and where we can do

648
00:35:57,269 --> 00:35:58,810
things smarter and more efficiently.

649
00:36:00,572 --> 00:36:04,054
It's been a tough road, but we've set ourselves up incredibly well for the future, and I'm

650
00:36:04,114 --> 00:36:04,955
very pleased with that.

651
00:36:08,097 --> 00:36:11,679
So now that you have an idea of the system and its challenges and successes, let's take

652
00:36:11,699 --> 00:36:13,441
a look at what happens when you put it all together.

653
00:36:14,221 --> 00:36:17,283
These are just a few of the player characters you could see when you're playing through

654
00:36:17,303 --> 00:36:18,064
Destiny this fall.

655
00:36:25,045 --> 00:36:26,527
hram

656
00:36:26,587 --> 00:36:27,187
mam

657
00:36:27,227 --> 00:36:29,670
the

658
00:36:30,070 --> 00:36:30,851
the

659
00:36:30,911 --> 00:36:31,091
that

660
00:36:31,111 --> 00:36:31,331
that

661
00:37:28,730 --> 00:37:29,951
OK, so where do we go from here?

662
00:37:31,292 --> 00:37:35,655
There are key things we missed out on, opportunities to make the system stronger that we didn't

663
00:37:35,695 --> 00:37:38,457
have time or resources to take advantage of for this project.

664
00:37:41,099 --> 00:37:44,482
First and foremost on our list is a more advanced decal system.

665
00:37:45,523 --> 00:37:48,245
Decals are a great way to allow players to customize their look.

666
00:37:49,126 --> 00:37:52,648
Games like Forza have built entire economies on player-generated decals.

667
00:37:53,907 --> 00:37:57,929
Our current system requires placement and geometry to be created by an artist specific

668
00:37:57,969 --> 00:37:58,789
to each arrangement.

669
00:37:59,650 --> 00:38:04,232
A system allowing for projected decals based on both artist as well as user generated content

670
00:38:04,552 --> 00:38:07,273
would be a huge tool in allowing players to express themselves.

671
00:38:10,815 --> 00:38:16,897
Developing for four platforms simultaneously is a difficult task for any developer.

672
00:38:17,893 --> 00:38:19,273
To make content more efficiently,

673
00:38:19,393 --> 00:38:21,014
we need better tools to allow artists

674
00:38:21,034 --> 00:38:23,655
to focus on what they do best, making amazing art,

675
00:38:24,355 --> 00:38:25,755
and not having to spend time dealing

676
00:38:25,775 --> 00:38:27,516
with separate budget and performance goals

677
00:38:27,556 --> 00:38:28,736
for the individual platforms.

678
00:38:31,957 --> 00:38:34,178
We would also benefit from an expanded dye system.

679
00:38:35,178 --> 00:38:37,179
Additional features in the dye to control things

680
00:38:37,239 --> 00:38:39,699
like environment maps, adjust wear levels,

681
00:38:39,899 --> 00:38:41,660
and blend in multiple sets of detail maps

682
00:38:41,720 --> 00:38:42,920
would greatly improve the system.

683
00:38:44,154 --> 00:38:48,176
Something we've strongly desired is the ability to add an accent color that appears in small

684
00:38:48,216 --> 00:38:51,038
controlled amounts to give an arrangement that extra little pop.

685
00:38:55,261 --> 00:39:00,204
In conclusion, Destiny is a hugely ambitious game, and our player customization system

686
00:39:00,304 --> 00:39:00,964
is no different.

687
00:39:01,885 --> 00:39:04,446
Like all ambitious efforts, there were challenges along the way.

688
00:39:05,517 --> 00:39:07,638
Overall, I believe we've achieved something completely

689
00:39:07,698 --> 00:39:10,180
unique to the shooter genre and developed a system that

690
00:39:10,200 --> 00:39:12,221
will only grow in power and flexibility

691
00:39:12,541 --> 00:39:15,102
as we continue to create content and expand the franchise.

692
00:39:16,743 --> 00:39:20,124
So obviously, a system like this takes a bunch of people

693
00:39:20,204 --> 00:39:21,485
pouring their heart and souls into it.

694
00:39:22,045 --> 00:39:23,586
And most of them couldn't be here today.

695
00:39:23,666 --> 00:39:26,367
But I have to say, thank you very much to the team

696
00:39:26,407 --> 00:39:28,709
back at Bungie for allowing me to come here and share this

697
00:39:28,749 --> 00:39:29,009
with you.

698
00:39:29,509 --> 00:39:29,769
That's it.

699
00:39:40,743 --> 00:39:44,486
So if anybody has any questions, I think they want you to use the microphones.

700
00:39:48,569 --> 00:39:49,489
But they're not going to turn them on.

701
00:39:49,509 --> 00:39:52,371
I'll pretend it's on and hopefully you can hear me.

702
00:39:53,012 --> 00:39:53,632
Oh, there we go.

703
00:39:54,012 --> 00:39:59,236
Does this system extend beyond the character to things like weapons or world doodads and

704
00:39:59,316 --> 00:39:59,977
why or why not?

705
00:40:00,697 --> 00:40:01,058
It does.

706
00:40:01,678 --> 00:40:04,640
We, we're trying to use the system as much as possible.

707
00:40:05,601 --> 00:40:09,324
We do use it on our hard surface assets as well, like weapons and player ships and that

708
00:40:09,344 --> 00:40:09,724
sort of stuff.

709
00:40:12,651 --> 00:40:19,333
When you end up changing a bit, how long does it take to propagate that across all the

710
00:40:20,213 --> 00:40:21,654
helmets that might use that bit?

711
00:40:21,814 --> 00:40:23,754
Like you have to rebuild all those assets, I imagine.

712
00:40:26,055 --> 00:40:32,777
The bits are loaded when you bring the arrangement into Maya.

713
00:40:33,918 --> 00:40:36,638
So from a content creator standpoint, it happens instantaneously.

714
00:40:36,818 --> 00:40:40,700
As soon as it's checked in and you get latest, you load up that arrangement, the new bit

715
00:40:40,760 --> 00:40:41,140
is in there.

716
00:40:42,570 --> 00:40:45,930
But then when you make the, like, when you go to use it in

717
00:40:45,950 --> 00:40:46,391
the game.

718
00:40:47,471 --> 00:40:50,771
So for the individual artists, they will re-export the

719
00:40:50,791 --> 00:40:52,072
geometry, and it'll come in game.

720
00:40:52,092 --> 00:40:54,012
Other than that, we do nightly builds.

721
00:40:54,072 --> 00:40:57,133
So for people on the other side of the team, we'll see

722
00:40:57,153 --> 00:40:58,473
it whenever they get the next content build.

723
00:40:58,753 --> 00:40:58,913
OK.

724
00:41:01,574 --> 00:41:05,695
So my question is, will we ever see Tiger Man DLC?

725
00:41:06,455 --> 00:41:10,456
And if not, how does your team go about deciding something

726
00:41:10,496 --> 00:41:12,136
doesn't fit the world you're building?

727
00:41:13,039 --> 00:41:13,879
Sorry, what was that last part?

728
00:41:14,840 --> 00:41:16,281
How does your team decide

729
00:41:17,622 --> 00:41:20,645
something that you've been prototyping doesn't fit

730
00:41:21,045 --> 00:41:22,126
the art style you're

731
00:41:22,527 --> 00:41:23,227
taking the game in?

732
00:41:23,908 --> 00:41:28,031
So, I guess I'm supposed to repeat the questions, which I totally forgot the first one.

733
00:41:28,151 --> 00:41:30,814
The first part was, will we see Tiger Man in DLC?

734
00:41:31,654 --> 00:41:32,855
The answer to that is, you never know.

735
00:41:34,864 --> 00:41:39,687
If we do, you can guarantee I'll be using Tiger Man first before you guys.

736
00:41:40,928 --> 00:41:45,571
Second part, how do we decide if something doesn't fit the art style?

737
00:41:47,853 --> 00:41:49,934
Bungie, as I said, is very much about iteration.

738
00:41:50,014 --> 00:41:55,018
We put things in game and we try to do it in the smartest way possible, but if an asset

739
00:41:55,118 --> 00:41:58,320
doesn't fit within the art style or within the gameplay, we cut it.

740
00:42:01,834 --> 00:42:08,262
So you have a lot of, you know, mix-and-match hard armor pieces like an upper chest plate and a lower chest plate.

741
00:42:09,142 --> 00:42:16,050
How do you make sure that, you know, all the different possible combinations don't end up self-intersecting and doing bad things and so on?

742
00:42:17,562 --> 00:42:21,506
Mostly just quick and easy tools for checking animations.

743
00:42:21,926 --> 00:42:24,448
We have in Maya animation previews.

744
00:42:24,508 --> 00:42:26,290
So I can be working on an arrangement

745
00:42:26,470 --> 00:42:29,152
and hit a single button to see that arrangement start

746
00:42:29,232 --> 00:42:32,074
moving through some base poses to test for clipping.

747
00:42:32,815 --> 00:42:35,517
Other than that, we have another program

748
00:42:35,537 --> 00:42:37,879
which I haven't shown called Lightbox, which

749
00:42:37,919 --> 00:42:40,161
goes through all of our content, creates screenshots

750
00:42:40,481 --> 00:42:43,644
through various poses that we can then check for any issues.

751
00:42:45,058 --> 00:42:49,458
I was more concerned about like the combinations of them, you know, could people mix and match things that...

752
00:42:49,775 --> 00:42:55,697
Right. So, sorry again. The question is how do we handle clipping of the various combinations

753
00:42:55,757 --> 00:43:00,859
of arrangements. This was something we decided early on we were going to have to deal with

754
00:43:00,879 --> 00:43:05,540
a little more clipping than we were used to in previous games. I think any customizable

755
00:43:05,800 --> 00:43:10,722
game is going to have to accept a little bit of that. We don't have a good way of prohibiting

756
00:43:11,162 --> 00:43:15,523
certain things from clipping into other things. We just use our eyes and try and best guess

757
00:43:15,883 --> 00:43:18,184
is that okay, is that shippable, is that not.

758
00:43:20,436 --> 00:43:21,107
Let's go back over here.

759
00:43:21,969 --> 00:43:25,631
So, in the start of the game you actually choose a character race.

760
00:43:26,371 --> 00:43:29,653
Did that end up actually affecting the way that you're building gear?

761
00:43:29,693 --> 00:43:33,815
Like did you have to actually build gear differently over different races, or?

762
00:43:35,296 --> 00:43:40,878
No, the race is sort of a separate part of our character building process, although it

763
00:43:40,939 --> 00:43:42,699
actually uses the exact same system.

764
00:43:45,081 --> 00:43:50,803
The exos in particular are a perfect example of how we can use the system for that.

765
00:43:51,921 --> 00:43:52,421
Awesome, thank you.

766
00:43:54,562 --> 00:43:58,444
So this is a really powerful tool for your side of the fence.

767
00:43:59,905 --> 00:44:03,567
How does this level of customization and content

768
00:44:03,747 --> 00:44:07,809
generation trickle down to the player's ability

769
00:44:08,330 --> 00:44:11,171
to customize and leverage the amount of flexibility

770
00:44:11,211 --> 00:44:11,711
that you have?

771
00:44:12,912 --> 00:44:17,034
The question was, this is a really powerful system for us

772
00:44:17,094 --> 00:44:17,955
as content creators.

773
00:44:18,075 --> 00:44:19,435
How does that affect the players,

774
00:44:19,475 --> 00:44:20,516
and how do they make use of it?

775
00:44:23,175 --> 00:44:27,519
right now for the most part it affects them in the fact that we can build a lot more content

776
00:44:27,539 --> 00:44:32,442
than we could otherwise. We can build a lot more armor sets, a lot more pieces of gear

777
00:44:32,482 --> 00:44:37,066
for them to choose from. Pushing forward, exploring the ideas of players being able

778
00:44:37,106 --> 00:44:40,528
to create their own arrangements and stuff is something we've definitely thought about

779
00:44:40,668 --> 00:44:43,570
and I would personally love to explore, but it's a long ways out.

780
00:44:46,532 --> 00:44:48,994
How does the bit system affect the concept pipeline?

781
00:44:50,455 --> 00:44:56,920
Does the concept artist then create more of a kind of keynote versions of everything

782
00:44:56,960 --> 00:45:02,064
and then the variations on the individual bits are more on the 3D artist than create on the fly?

783
00:45:02,764 --> 00:45:08,125
So the question was, how does the bit system affect the concept development and how the

784
00:45:08,245 --> 00:45:09,105
concept artists work?

785
00:45:09,966 --> 00:45:10,546
It's a great question.

786
00:45:10,866 --> 00:45:12,166
And you're exactly right.

787
00:45:13,126 --> 00:45:15,247
The concept artists create what we call theme.

788
00:45:15,747 --> 00:45:21,248
So they have a set that is like, here is what the sort of, the spirit of this set.

789
00:45:21,648 --> 00:45:25,809
And then the variations are all built by the individual 3D artists for the most part.

790
00:45:27,049 --> 00:45:30,390
We try, we very much at Bungie don't like to limit our concept artists.

791
00:45:30,990 --> 00:45:34,634
but we also want to educate them on the system. So, um,

792
00:45:35,054 --> 00:45:37,477
they start to know, like, what we can do and, you

793
00:45:37,797 --> 00:45:40,621
know, what things are easier and faster for us. Um,

794
00:45:40,901 --> 00:45:42,823
but still they have kind of free, free range

795
00:45:42,843 --> 00:45:43,744
to explore their ideas.

796
00:45:47,644 --> 00:45:53,251
Yeah, I was wondering about upgrades and if there was a way that you guys had like rules

797
00:45:53,872 --> 00:45:58,217
or some way of defining like what an upgrade would look like, since like color doesn't

798
00:45:58,277 --> 00:46:00,079
necessarily denote hierarchy.

799
00:46:00,099 --> 00:46:02,002
Were there other things that you used?

800
00:46:03,123 --> 00:46:04,545
So the question is about upgrades.

801
00:46:06,207 --> 00:46:09,490
And honestly, I'm not a designer.

802
00:46:09,870 --> 00:46:13,053
So the investment designers choose sort of the upgrade

803
00:46:13,093 --> 00:46:15,916
paths and what pieces they want to use for those.

804
00:46:17,497 --> 00:46:19,899
That stuff, since they're constantly, constantly

805
00:46:19,979 --> 00:46:21,461
iterating, a lot of times.

806
00:46:24,014 --> 00:46:28,240
We, you know, we try and put in the best pieces we think possible for things,

807
00:46:28,961 --> 00:46:32,385
but they're much more focused on the stats and the abilities and that sort of stuff, so

808
00:46:32,405 --> 00:46:34,228
I don't know if that answers your question, but...

809
00:46:34,528 --> 00:46:35,890
So you didn't have any, like,

810
00:46:36,871 --> 00:46:40,236
ways of defining, like, what those upgrades would look like, necessarily?

811
00:46:41,157 --> 00:46:44,137
Um, it, the way the system sort of played out,

812
00:46:44,197 --> 00:46:45,798
we're very flexible and reactive.

813
00:46:46,198 --> 00:46:47,738
So if they say, hey, we have this thing

814
00:46:47,758 --> 00:46:49,039
and we're gonna do an upgrade to it,

815
00:46:49,239 --> 00:46:50,659
then we can quickly go in and say,

816
00:46:50,679 --> 00:46:52,020
all right, let's add a few more pieces,

817
00:46:52,080 --> 00:46:54,120
make this thing a little, more burly

818
00:46:54,160 --> 00:46:55,400
and a little cooler looking.

819
00:46:55,801 --> 00:46:56,401
Okay, cool.

820
00:46:56,421 --> 00:46:58,421
So it's, it's more like they establish first

821
00:46:58,461 --> 00:46:59,682
and then we kind of follow what they,

822
00:46:59,962 --> 00:47:00,562
what they're looking for.

823
00:47:00,582 --> 00:47:01,902
Okay, cool, thanks.

824
00:47:03,202 --> 00:47:13,970
So with the bits, you said that it would go back and change other bits that were already put into other sets.

825
00:47:14,370 --> 00:47:21,455
So was there any instances where a bit being changed in a newer set changed an old set for the worse?

826
00:47:22,446 --> 00:47:26,068
So the question was, since we can change a bit and it affects other arrangements,

827
00:47:26,648 --> 00:47:30,389
were there any instances where this was bad, where a bit was changed and it broke something?

828
00:47:30,669 --> 00:47:31,790
The answer is definitely yes.

829
00:47:33,611 --> 00:47:35,692
We had some interesting cases where someone would...

830
00:47:36,232 --> 00:47:39,393
The most dangerous aspect is the texture resolution.

831
00:47:39,473 --> 00:47:43,895
Someone would decide, hey, this bit's too low-res, and so they'd double it.

832
00:47:44,595 --> 00:47:47,337
And then suddenly we have 20 pieces of gear

833
00:47:47,357 --> 00:47:50,358
that aren't importing because their texture budget's blown.

834
00:47:51,839 --> 00:47:55,381
So that was something that we, through a certain part

835
00:47:55,421 --> 00:47:56,482
of the production we dealt with.

836
00:47:56,942 --> 00:48:00,384
And then artists just kind of got smarter and better

837
00:48:00,444 --> 00:48:02,685
about knowing what they can and can't do,

838
00:48:02,725 --> 00:48:06,087
and also better tools at checking the content afterwards.

839
00:48:06,947 --> 00:48:07,187
Thank you.

840
00:48:08,531 --> 00:48:15,814
So I think you said that the bits get combined at export time and then so I'm assuming the arrangements get

841
00:48:16,455 --> 00:48:24,078
Stored and loaded by the engines that every arrangement is a separate piece. That's rendered by the engine. Is that correct or that's correct

842
00:48:24,238 --> 00:48:28,380
Sorry, go ahead. Oh, yeah, I just wanted to check like isn't that

843
00:48:29,220 --> 00:48:37,464
More expensive than rendering a traditional character perhaps or so there are more draw calls associated with rendering each arrangement

844
00:48:38,732 --> 00:48:43,135
So the question is, you know, does the engine render each arrangement individually, and

845
00:48:43,195 --> 00:48:49,038
is that more expensive than sort of a traditional full character arrangement, or full character

846
00:48:49,058 --> 00:48:55,201
setup? The answer is yes, it is more expensive. We've done a lot of things to optimize the

847
00:48:56,862 --> 00:49:01,544
gear shader process and, you know, the skinning and all of that to try and get that as cheap

848
00:49:01,564 --> 00:49:05,627
as possible, but definitely the characters, the player characters are more expensive than

849
00:49:05,647 --> 00:49:06,507
a lot of them say.

850
00:49:06,907 --> 00:49:08,849
civilians or combatants or anything like that.

851
00:49:09,509 --> 00:49:11,210
Can I ask another quick question?

852
00:49:11,370 --> 00:49:13,852
Just, I think you said you had a lot of problems

853
00:49:13,892 --> 00:49:16,454
with wraps and blend shapes.

854
00:49:16,514 --> 00:49:18,355
Can you go, but you didn't sort of elaborate

855
00:49:18,495 --> 00:49:19,876
what the sort of problems were with,

856
00:49:20,436 --> 00:49:21,317
you know, because I would have thought

857
00:49:21,357 --> 00:49:22,998
that would give you close fitting cloth

858
00:49:23,698 --> 00:49:28,221
if you could deform layers of cloth over a deformable shape.

859
00:49:29,042 --> 00:49:34,384
So the question was about, I mean, I think using the wraps and blend shapes, wrap deformers

860
00:49:34,424 --> 00:49:38,845
and blend shapes to create female gear and whether or not, why that wasn't successful.

861
00:49:39,546 --> 00:49:44,488
And you're right, like, for things like cloth and soft organics it worked very well, but

862
00:49:44,788 --> 00:49:49,409
as you can see we have a lot of hard surface shapes and things like cylinders that, you

863
00:49:49,429 --> 00:49:52,571
know, would get stretched and shapes would get deformed.

864
00:49:52,611 --> 00:49:54,331
And the main thing for us was...

865
00:49:54,972 --> 00:49:56,593
that in order to really use that system,

866
00:49:56,773 --> 00:49:58,334
we had to combine everything together,

867
00:49:58,474 --> 00:49:59,735
and that just wasn't efficient.

868
00:49:59,755 --> 00:50:01,056
Okay, thank you.

869
00:50:02,457 --> 00:50:04,078
I had a question about the color customization.

870
00:50:04,258 --> 00:50:05,279
If I understand correctly,

871
00:50:05,299 --> 00:50:07,260
originally a player could choose three colors

872
00:50:07,500 --> 00:50:09,441
for their character, and then you guys changed the system

873
00:50:09,942 --> 00:50:11,222
to colorize the gear,

874
00:50:11,363 --> 00:50:14,144
so it would represent the different scale of upgrades.

875
00:50:14,164 --> 00:50:16,826
So does that mean that in the current design,

876
00:50:16,846 --> 00:50:19,588
there is no color customization for their character?

877
00:50:20,410 --> 00:50:25,112
So the question is, we initially had it so that players could choose three colors, and

878
00:50:25,372 --> 00:50:30,114
then we moved to a system where that, where we established the colors to, to communicate

879
00:50:30,294 --> 00:50:33,456
the tier. Does that mean players can't customize their color?

880
00:50:35,737 --> 00:50:41,679
So, no. We, we, we definitely established what we call default dyes for system, for

881
00:50:41,719 --> 00:50:48,062
things, and the, the idea is that players will be able to customize their color choices

882
00:50:48,402 --> 00:50:48,703
later on.

883
00:50:49,493 --> 00:50:54,180
So you can take their upgraded gear and then tweak it from its current value, basically?

884
00:50:54,881 --> 00:50:59,368
So I can't go into too much detail about this because it's actually something that's still

885
00:50:59,408 --> 00:51:04,717
being worked on, but as I said, the idea is that players will have some control, for sure.

886
00:51:06,669 --> 00:51:09,711
Hi, I was just wondering about the merging process you talked about.

887
00:51:10,051 --> 00:51:16,595
So when the bits are merged together, is there, at that time, is there a lot of inner penetrating

888
00:51:16,635 --> 00:51:20,177
surfaces or do you do any kind of ray casting to make a new mesh?

889
00:51:20,457 --> 00:51:28,281
Or if one arrangement overlaps another arrangement, do you make a bake that has like nice AO under

890
00:51:28,301 --> 00:51:31,343
the overlapping or do you just try not to make them overlap?

891
00:51:31,363 --> 00:51:32,143
I guess that's two questions.

892
00:51:35,784 --> 00:51:37,497
Sorry, the first part of the question again.

893
00:51:39,222 --> 00:51:40,983
Like the helmet you showed with all the bits together,

894
00:51:41,923 --> 00:51:44,703
if it generates inner penetrating surfaces,

895
00:51:45,103 --> 00:51:46,924
is there a bake process that makes a new mesh,

896
00:51:47,124 --> 00:51:49,424
or it's just OK to have the inner penetration?

897
00:51:49,604 --> 00:51:52,665
So the question was, do the bits have

898
00:51:52,725 --> 00:51:54,385
inner penetrating surfaces?

899
00:51:54,425 --> 00:51:55,025
Is that OK?

900
00:51:55,045 --> 00:51:55,945
Do we bake things down?

901
00:51:56,605 --> 00:51:59,486
They do inner penetrate, and we rely primarily

902
00:51:59,526 --> 00:52:02,586
on Screen Space AO to kind of seal everything together

903
00:52:02,606 --> 00:52:05,987
and make it feel like it's a nice, cohesive piece.

904
00:52:08,504 --> 00:52:11,067
And then, uh, the second part, sorry.

905
00:52:11,888 --> 00:52:12,649
Well, that kind of answers it.

906
00:52:12,669 --> 00:52:13,771
All right, well there we go.

907
00:52:13,931 --> 00:52:14,392
Like a gun.

908
00:52:15,714 --> 00:52:16,375
All right, thanks.

909
00:52:18,297 --> 00:52:18,918
Justin Quimby.

910
00:52:19,915 --> 00:52:24,258
Hi Scott, great talk. We work together at Turbine. So I'm curious about the production side of

911
00:52:24,298 --> 00:52:28,660
things in terms of dashboarding tools or how do you, how does the production side of the

912
00:52:28,700 --> 00:52:32,982
house track, you know, you mentioned, oh, suddenly someone changes texture density and

913
00:52:33,182 --> 00:52:38,265
blows the budgets for stuff. What kind of tools do you have on the production side of

914
00:52:38,285 --> 00:52:44,508
the house to keep track of all the craziness that you could do given this flexible tool

915
00:52:44,548 --> 00:52:44,708
set?

916
00:52:46,014 --> 00:52:49,498
So the question is, what kind of tools do we have from the production side of things

917
00:52:49,518 --> 00:52:53,022
to keep track of all of these changes and all of the things that can be done.

918
00:52:54,563 --> 00:52:57,527
Honestly, nothing terribly fancy.

919
00:52:58,207 --> 00:53:01,651
We have fantastic producers, really, that are just very on top of their game.

920
00:53:03,678 --> 00:53:08,141
We don't, as a 3D team, we don't micro-track stuff too much,

921
00:53:08,882 --> 00:53:10,723
as our tasks tend to be, you know,

922
00:53:10,763 --> 00:53:12,904
this armor set will take four weeks

923
00:53:12,964 --> 00:53:13,984
or three weeks or whatever.

924
00:53:15,125 --> 00:53:18,387
And then we just try and remain as reactive as possible.

925
00:53:18,607 --> 00:53:20,448
The good thing is, is that because the system

926
00:53:20,488 --> 00:53:23,350
is so fast and flexible, when we do run into those issues,

927
00:53:23,470 --> 00:53:24,971
it doesn't take much time to fix it.

928
00:53:28,127 --> 00:53:29,588
Hi, first I want to say, great talk.

929
00:53:30,769 --> 00:53:34,712
I was wondering if the current system for creating

930
00:53:36,073 --> 00:53:38,334
like different pieces through bits and stuff allows for the

931
00:53:38,374 --> 00:53:40,736
addition of like normal map details, such as adding like

932
00:53:40,816 --> 00:53:44,899
screws or different like vents or valves on like a helmet or

933
00:53:44,939 --> 00:53:47,541
something, or if that's part of the decal system you guys are

934
00:53:47,561 --> 00:53:48,501
looking towards in the future.

935
00:53:48,982 --> 00:53:52,044
So the question was if the current system allows for

936
00:53:52,204 --> 00:53:55,686
adding sort of normal map details like screws and things

937
00:53:55,726 --> 00:53:56,026
like that.

938
00:53:58,775 --> 00:54:01,956
Actually, it does in a different sort of way.

939
00:54:02,316 --> 00:54:07,298
So we have a layer of what we call detailed geometry,

940
00:54:08,678 --> 00:54:11,259
which is set as a bit.

941
00:54:11,699 --> 00:54:13,540
So certain bits can be flagged as detailed geometry.

942
00:54:13,560 --> 00:54:16,500
So they're high detail, high frequency type of bits that

943
00:54:16,520 --> 00:54:19,321
then fade out quickly at distance or don't get exported

944
00:54:19,781 --> 00:54:20,942
to the older platforms kind of thing.

945
00:54:20,982 --> 00:54:22,182
So we do a lot of that with those.

946
00:54:23,342 --> 00:54:23,542
Thank you.

947
00:54:26,788 --> 00:54:38,776
One quick question I had, because this system, it actually reminded me a lot of Borderlands 2's gun system, where they built completely modular guns, and so each player who started up their game was able to have their own unique sniper rifle.

948
00:54:39,377 --> 00:54:45,141
Would this system allow for players to have completely unique, randomized helmets, or is everything built beforehand?

949
00:54:46,022 --> 00:54:48,923
So the question was, does the system allow for players

950
00:54:48,943 --> 00:54:50,923
to have completely unique randomized helmets

951
00:54:52,084 --> 00:54:52,864
or pieces of gear?

952
00:54:53,904 --> 00:54:55,325
The answer is no, actually.

953
00:54:55,625 --> 00:54:57,565
And that was a very conscious decision on our part.

954
00:54:58,045 --> 00:55:00,446
We wanted artists to still maintain control

955
00:55:00,486 --> 00:55:01,446
of the overall design.

956
00:55:02,406 --> 00:55:04,207
We wanted to try and make it as fast as possible

957
00:55:04,227 --> 00:55:05,507
for them to create something cool,

958
00:55:05,987 --> 00:55:08,808
but we always wanted it to feel like

959
00:55:08,828 --> 00:55:10,028
it was a conscious decision

960
00:55:10,128 --> 00:55:11,569
that we put this piece with this piece.

961
00:55:12,469 --> 00:55:12,689
Thank you.

962
00:55:16,904 --> 00:55:18,705
All right, any more questions?

963
00:55:21,048 --> 00:55:21,868
You guys are free to go.

964
00:55:21,888 --> 00:55:22,969
Thank you very much.

