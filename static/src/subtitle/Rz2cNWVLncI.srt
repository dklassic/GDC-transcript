1
00:00:05,840 --> 00:00:06,980
Well, hello everyone.

2
00:00:07,760 --> 00:00:09,681
So we are here to talk about Crowd.

3
00:00:10,561 --> 00:00:13,242
This talk has been prepared by me

4
00:00:13,342 --> 00:00:14,922
and Antoine Fortier sitting right there.

5
00:00:15,562 --> 00:00:18,663
So when you see us on the street, come and say hello.

6
00:00:19,463 --> 00:00:21,704
So first, I'm gonna have to remind you

7
00:00:21,744 --> 00:00:22,944
to turn off your cell phones

8
00:00:23,184 --> 00:00:25,765
and then rate me after the show or not

9
00:00:25,985 --> 00:00:26,985
if you didn't like it.

10
00:00:28,186 --> 00:00:30,046
All right, so let's get started.

11
00:00:30,466 --> 00:00:31,767
So I don't know if you've played the game,

12
00:00:31,927 --> 00:00:33,227
but on Assassin's Unity,

13
00:00:33,851 --> 00:00:36,654
we have been able to build these truly huge massive crowds.

14
00:00:37,495 --> 00:00:40,578
So in this scene, for example, we have 10,000 NPCs

15
00:00:40,899 --> 00:00:42,821
that the player can interact with them.

16
00:00:44,042 --> 00:00:45,684
So how did we do it?

17
00:00:45,904 --> 00:00:47,165
Well, I'm here to answer that.

18
00:00:47,366 --> 00:00:49,988
But first, let's give a bit of backstory

19
00:00:50,028 --> 00:00:51,570
because everybody does it.

20
00:00:52,295 --> 00:00:58,359
So if you remember the first AC1 E3 trailer, you can see Altaïr walking through a crowd

21
00:00:58,519 --> 00:01:03,182
trying to reach an execution. So it has really been in our mind since the beginning of the brand

22
00:01:03,562 --> 00:01:07,484
to have like these really really huge crowds that the player could actually be stealth in

23
00:01:07,885 --> 00:01:11,707
and we also thought that it would give a sense of life to our cities.

24
00:01:12,627 --> 00:01:19,351
But we were limited. Actually our AIs were really costly and we could never have these big crowds.

25
00:01:20,432 --> 00:01:21,453
The limits themselves.

26
00:01:22,215 --> 00:01:24,437
was of 100 NPCs.

27
00:01:24,857 --> 00:01:28,540
That's really small, and that's for all the possible NPCs

28
00:01:29,101 --> 00:01:30,402
spawned at one point.

29
00:01:30,742 --> 00:01:33,024
This means that this accounts for guards,

30
00:01:33,264 --> 00:01:35,066
accounts for people imported for gameplay.

31
00:01:35,526 --> 00:01:39,950
So if you want to have a budget for decorative civilians,

32
00:01:40,311 --> 00:01:42,092
you're left with about 20 NPCs.

33
00:01:42,753 --> 00:01:43,313
Out of these 20 NPCs,

34
00:01:44,894 --> 00:01:49,857
You have to spread them across the whole loading range, which leaves about 4 around the player.

35
00:01:50,197 --> 00:01:52,398
So that's obviously nowhere near a crowd.

36
00:01:53,119 --> 00:01:57,401
We were able to build some crowds before, but in specific missions, where we have full

37
00:01:57,441 --> 00:01:59,542
control over the resources we have.

38
00:02:00,243 --> 00:02:02,844
But we never could do systemic big crowds.

39
00:02:04,315 --> 00:02:11,302
So, were we doomed? Well, no. In Assassin's Creed 3, we integrated technology from an old prototype

40
00:02:11,922 --> 00:02:17,748
and we were able to display thousands of 3D cheap mesh that could play simple animations.

41
00:02:19,037 --> 00:02:23,000
We used it for the rats and the birds that you've seen in AC4 and AC3.

42
00:02:23,660 --> 00:02:28,384
And the most memorable sequence is the Bunker Hill sequence of Assassin's Creed 3,

43
00:02:28,724 --> 00:02:31,486
where you see this army of thousands of people in front of the player.

44
00:02:32,207 --> 00:02:35,249
There, in the Bunker Hill sequence, it's really only meshes

45
00:02:36,110 --> 00:02:38,912
playing a simple, like, get down, reload animation.

46
00:02:39,272 --> 00:02:41,053
So there are no entities, like, over there.

47
00:02:41,253 --> 00:02:42,834
And they are far away from the player.

48
00:02:42,875 --> 00:02:45,416
The player cannot interact with them because they are only meshes.

49
00:02:45,917 --> 00:02:52,098
So, is there a way to link the legacy AIs that we've had in our games and link them

50
00:02:52,158 --> 00:02:54,499
to the really cheap mesh that we've built on AC3 and 4?

51
00:02:55,459 --> 00:02:56,359
Well, yes.

52
00:02:56,919 --> 00:02:58,059
We created a new system.

53
00:02:58,339 --> 00:02:59,740
We call it the Bulk System.

54
00:03:00,100 --> 00:03:03,681
It's called the Bulk System because of the name of an old prototype, but we call it the

55
00:03:03,701 --> 00:03:04,121
Bulk System.

56
00:03:05,141 --> 00:03:07,141
Each member inside the system is called a Bulk.

57
00:03:07,581 --> 00:03:10,482
So when I talk about an individual, it's a Bulk.

58
00:03:11,531 --> 00:03:15,972
So the main idea behind it all is that we have these thousands of really, really cheap mesh.

59
00:03:16,472 --> 00:03:21,393
We have a pool of pre-spawned NPCs, and as the player gets close to the cheap mesh,

60
00:03:21,513 --> 00:03:27,494
we basically replace them with a guy from our pool. So it's really based on the distance.

61
00:03:27,774 --> 00:03:31,475
We call it like an AI LOD system, and there are three possible states.

62
00:03:31,795 --> 00:03:39,036
So I'll go over the states briefly. The closest one we have is the low-res bulk.

63
00:03:40,120 --> 00:03:43,283
So this one is the furthest one. He's at 40 meters away.

64
00:03:44,024 --> 00:03:49,989
He has no entity. So this guy is only a visual that can play animations and cheat animations.

65
00:03:50,550 --> 00:03:56,515
So he has only 2000 polygons and he has only 11 bones. So his animation system is really,

66
00:03:56,555 --> 00:04:01,319
really small and runs fast. He also has a really basic reaction system.

67
00:04:02,552 --> 00:04:04,972
Now, on the other side, so close to the player,

68
00:04:05,052 --> 00:04:06,232
you have the autonomous bulk.

69
00:04:06,472 --> 00:04:08,593
This guy is mostly a real NPC.

70
00:04:09,013 --> 00:04:11,794
So he has an entity with all the components

71
00:04:11,834 --> 00:04:13,534
that a regular entity has.

72
00:04:13,634 --> 00:04:18,395
So he has Havoc, Klot, full AI, so he's like a real NPC.

73
00:04:18,575 --> 00:04:20,576
But he is super costly.

74
00:04:21,016 --> 00:04:24,297
So in our game, we can only have 40 of these autonomous bulk.

75
00:04:25,282 --> 00:04:27,103
So the goal is to link them with the low res.

76
00:04:27,483 --> 00:04:31,064
So we created an intermediary state, the puppet bulk state.

77
00:04:31,784 --> 00:04:35,405
So this one is a bit of a mix and match between the two.

78
00:04:35,685 --> 00:04:38,826
So he has an entity, but all the components are off.

79
00:04:39,146 --> 00:04:41,387
He only has the visual components of this entity.

80
00:04:41,847 --> 00:04:43,807
All the logic, havoc, and everything is off.

81
00:04:43,987 --> 00:04:46,928
So he's running using the cheap animation system,

82
00:04:47,468 --> 00:04:49,529
cheap collision system, and cheap reaction system

83
00:04:49,549 --> 00:04:50,729
that the low res is doing.

84
00:04:51,675 --> 00:04:54,476
So, if we see them next together,

85
00:04:55,096 --> 00:04:58,778
we see that on the left side, you have the low-res bulk.

86
00:04:59,198 --> 00:05:01,699
So, here, the mesh is really, really ugly.

87
00:05:01,939 --> 00:05:04,741
So, it looks like a guy from an N64 game.

88
00:05:05,501 --> 00:05:08,042
And the animation, I mean, it doesn't look real.

89
00:05:08,202 --> 00:05:09,863
It's bulky.

90
00:05:09,903 --> 00:05:11,484
It's not — it doesn't feel right.

91
00:05:11,924 --> 00:05:13,865
On the right side, you see the autonomous bulk.

92
00:05:14,805 --> 00:05:16,366
And, I mean, the stance looks good.

93
00:05:16,506 --> 00:05:18,047
You can actually see, like —

94
00:05:18,609 --> 00:05:22,710
facial expressions, but not on a still, but yeah, if you're up close you can see it.

95
00:05:23,250 --> 00:05:27,392
So the stance is good, the mesh is really good also, and

96
00:05:27,452 --> 00:05:31,193
you can see the metal, the puppet bulk, as a bit of the two.

97
00:05:31,273 --> 00:05:35,914
So he has the visual, but he has the stance of the low-res. So these are our three states.

98
00:05:36,254 --> 00:05:39,795
Remember them well, because I will be referring to them throughout all the presentation.

99
00:05:40,902 --> 00:05:45,029
So, basically the autonomous balks are up to 12 meters from the player,

100
00:05:45,189 --> 00:05:47,232
from 12 to 40 meters we have the puppets,

101
00:05:47,472 --> 00:05:52,340
and then all the way back there you have the low-res balk at 40 meters.

102
00:05:54,824 --> 00:05:58,708
So, a bit on the cost, to explain why we use this approach.

103
00:05:59,449 --> 00:06:02,432
The cost for a low-res is actually 25 microseconds.

104
00:06:02,653 --> 00:06:04,695
So they are super, super fast.

105
00:06:05,255 --> 00:06:07,778
The Puppet one is 150 microseconds.

106
00:06:08,178 --> 00:06:12,904
It's mostly taken to account by the higher resolution mesh

107
00:06:12,964 --> 00:06:15,687
that needs to be computing, so that's why it's a bit heavier.

108
00:06:16,147 --> 00:06:17,228
And finally, the autonomous.

109
00:06:18,117 --> 00:06:21,698
So this guy can go from .5 milliseconds to 5 milliseconds

110
00:06:21,878 --> 00:06:23,238
if he's doing complex reactions.

111
00:06:23,298 --> 00:06:25,159
So that's like the idea behind this whole system

112
00:06:25,199 --> 00:06:26,959
is to limit the amount of autonomous

113
00:06:27,459 --> 00:06:30,900
because the difference in the CPU is 100 to 1

114
00:06:31,100 --> 00:06:32,461
between the low res and the autonomous.

115
00:06:33,381 --> 00:06:36,242
And to render all the similar meshes of the low res,

116
00:06:36,282 --> 00:06:37,862
we use hardware instancing.

117
00:06:39,503 --> 00:06:42,463
All right, so a bit on the differences between the two

118
00:06:42,763 --> 00:06:43,984
because they're really, really different.

119
00:06:45,537 --> 00:06:50,538
like how we think about them. So a real NPC, the autonomous bulk, has infinite permutation.

120
00:06:50,919 --> 00:06:56,321
This means that when we spawn one of these guys, he can be of any different, he has,

121
00:06:56,401 --> 00:07:01,763
he can have any different face, he can have hair, beard. So every time we spawn one of those guys,

122
00:07:01,783 --> 00:07:05,304
they are completely random using our random system from Assassin's Creed.

123
00:07:06,087 --> 00:07:08,708
The low res though, the low res have really specific meshes.

124
00:07:09,088 --> 00:07:11,648
This is done to optimize everything,

125
00:07:11,688 --> 00:07:13,389
so they have really a fixed number of meshes.

126
00:07:14,229 --> 00:07:15,549
And this goes fast.

127
00:07:15,669 --> 00:07:16,269
So we only have 29.

128
00:07:16,309 --> 00:07:20,370
And for example, if you have a poor male civilian,

129
00:07:21,390 --> 00:07:24,451
rich male civilian, female poor civilian,

130
00:07:24,491 --> 00:07:27,411
so I mean, you cannot go up to 29 really quickly,

131
00:07:27,471 --> 00:07:29,552
so we don't have lots of variety of low res.

132
00:07:29,932 --> 00:07:30,992
That's really important to know.

133
00:07:31,952 --> 00:07:33,373
But they are far away from the player,

134
00:07:33,513 --> 00:07:34,553
so it doesn't really matter.

135
00:07:35,307 --> 00:07:40,972
Now the difference in polygons, the closest LOD of a real NPC is 20,000 polygons,

136
00:07:41,513 --> 00:07:43,955
and on the other side you have about 2,000.

137
00:07:44,335 --> 00:07:47,678
So I mean obviously it's a lot faster to render the cheap ones.

138
00:07:48,839 --> 00:07:51,962
Now on the animation side, you have 300 bones for the real NPC,

139
00:07:51,982 --> 00:07:53,864
so they can do full complex animations.

140
00:07:54,304 --> 00:07:57,327
But with 11 bones, the low-res cannot do much,

141
00:07:57,807 --> 00:08:00,650
and that's why they usually have their hands spread open,

142
00:08:00,690 --> 00:08:02,591
because you don't have bones for the hands themselves.

143
00:08:04,002 --> 00:08:06,364
Now, the low-res bulk of a specific system,

144
00:08:07,445 --> 00:08:10,507
basically we limit the total polygons for the low-res.

145
00:08:10,707 --> 00:08:14,170
This means that if you have many, many, many low-res

146
00:08:14,210 --> 00:08:16,072
in front of the camera, we'll actually limit

147
00:08:16,092 --> 00:08:17,032
the amount of polygons to 300,000.

148
00:08:17,092 --> 00:08:20,235
This means that if there are many, many low-res,

149
00:08:20,255 --> 00:08:22,717
we basically tone down the LODs of everyone

150
00:08:22,757 --> 00:08:24,158
to make sure we fit in our budget.

151
00:08:24,498 --> 00:08:27,220
So this is how, even if we have 10,000 guys,

152
00:08:27,781 --> 00:08:28,781
we still have the same cost.

153
00:08:31,074 --> 00:08:34,078
Alright, so how do we recycle those polygons?

154
00:08:34,178 --> 00:08:35,259
How can we make it fast?

155
00:08:35,700 --> 00:08:37,282
We basically have a culling system,

156
00:08:37,462 --> 00:08:39,585
so that we basically only...

157
00:08:41,747 --> 00:08:45,011
So we only display the box in front of the camera.

158
00:08:45,312 --> 00:08:47,214
This means that if I look at a top view

159
00:08:47,314 --> 00:08:50,238
of when the player is turning, no box behind him.

160
00:08:52,643 --> 00:08:54,325
This saves us some polygons, obviously.

161
00:08:54,906 --> 00:08:57,629
And when they are not drowned, they actually

162
00:08:57,669 --> 00:09:00,813
compute reactions, but no animations.

163
00:09:01,053 --> 00:09:02,475
And obviously, they are not displayed,

164
00:09:02,695 --> 00:09:04,017
so they go pretty fast.

165
00:09:04,698 --> 00:09:06,680
So I'm coming back to this slide now.

166
00:09:07,701 --> 00:09:09,143
You remember the autonomous and the puppets?

167
00:09:10,064 --> 00:09:15,491
They actually only live inside a cone in front of the camera because as we turn around we basically

168
00:09:15,552 --> 00:09:20,198
move them to the low res so that they are cheaper to compute all their logic and we

169
00:09:20,318 --> 00:09:25,646
do not display them anymore. So we only have the autonomous and puppet box in front of the camera.

170
00:09:27,650 --> 00:09:29,431
All right, so the cheap animation system.

171
00:09:29,491 --> 00:09:31,151
So it's really, really stuff from the 90s.

172
00:09:31,191 --> 00:09:32,032
So it's super fast.

173
00:09:32,272 --> 00:09:34,753
It can support like two blending animations.

174
00:09:35,533 --> 00:09:37,775
We play uncompressed animation.

175
00:09:37,815 --> 00:09:39,395
So everything goes really, really fast.

176
00:09:39,856 --> 00:09:41,616
We basically scale animation depending

177
00:09:41,656 --> 00:09:42,657
on the scale of the model.

178
00:09:43,277 --> 00:09:46,819
And the main thing about them is that they have stiff ends.

179
00:09:46,919 --> 00:09:48,340
That's like the giveaway.

180
00:09:48,520 --> 00:09:50,020
If you see stiff ends, it's always

181
00:09:50,521 --> 00:09:52,922
either a puppet bulk or a low-res bulk.

182
00:09:53,362 --> 00:09:56,083
So here in this animation, you can see them that they,

183
00:09:56,930 --> 00:09:58,730
They have these big spread open hands,

184
00:09:59,090 --> 00:10:01,931
and the hands are not correctly on the arms of the chair

185
00:10:02,011 --> 00:10:04,272
because we have only 11 bones,

186
00:10:04,292 --> 00:10:06,872
so the calculation did not give the correct results.

187
00:10:07,312 --> 00:10:08,793
But this is from far away,

188
00:10:09,213 --> 00:10:10,873
so the player does not see that ever.

189
00:10:12,774 --> 00:10:15,114
And we also built our own collision system.

190
00:10:15,454 --> 00:10:18,695
Obviously, we cannot have 10,000 NPCs running Avok.

191
00:10:18,895 --> 00:10:19,856
Avok would cry.

192
00:10:20,296 --> 00:10:21,976
So we created our system.

193
00:10:22,016 --> 00:10:23,657
We basically have a partition map

194
00:10:23,677 --> 00:10:25,757
where we have the location of every NPC.

195
00:10:26,555 --> 00:10:29,095
on the world, and then for each bulk,

196
00:10:29,175 --> 00:10:33,556
we detect if he's ever inside the range of another NPC.

197
00:10:33,716 --> 00:10:36,576
And if that's the case, then we play a simple animation

198
00:10:36,636 --> 00:10:37,437
and we slide him.

199
00:10:37,877 --> 00:10:41,157
So it slides, so it's not like a real physical collision.

200
00:10:41,797 --> 00:10:43,638
And then we always clamp them on navmesh.

201
00:10:43,758 --> 00:10:44,578
That's super important.

202
00:10:44,618 --> 00:10:45,878
This means that if they start running,

203
00:10:46,018 --> 00:10:47,158
since they have no capsules,

204
00:10:47,198 --> 00:10:49,099
they could have entered a building or anything.

205
00:10:49,159 --> 00:10:51,019
But by keeping them on navmesh,

206
00:10:51,119 --> 00:10:52,699
we make sure that they are always,

207
00:10:53,179 --> 00:10:54,740
at least, not inside a collision.

208
00:10:55,553 --> 00:10:57,615
and it also enables them to walk indoors.

209
00:10:59,575 --> 00:11:01,817
All right, so let's take a look at this collision system.

210
00:11:02,757 --> 00:11:05,959
So here you can see guards walking to the crowd.

211
00:11:06,959 --> 00:11:09,600
So again, when there is a collision,

212
00:11:10,021 --> 00:11:11,121
we do basic sliding.

213
00:11:11,261 --> 00:11:12,042
It's not perfect.

214
00:11:12,862 --> 00:11:14,083
It has interpenetration.

215
00:11:14,223 --> 00:11:16,284
But again, all this occurs far from the player,

216
00:11:16,364 --> 00:11:18,405
so from a distance, it actually looks pretty good.

217
00:11:20,688 --> 00:11:22,329
All right, so a bit on the AI now.

218
00:11:22,429 --> 00:11:25,192
The legacy AI uses big state charts.

219
00:11:25,292 --> 00:11:26,393
It's super complex.

220
00:11:26,473 --> 00:11:29,496
It can handle every event, every reaction,

221
00:11:29,516 --> 00:11:30,717
lots of randomness.

222
00:11:31,338 --> 00:11:33,760
And it's all event-based, and it's super, super slow.

223
00:11:34,160 --> 00:11:36,422
It's actually mostly running in single threads.

224
00:11:36,503 --> 00:11:38,524
So, I mean, obviously, as it scales up,

225
00:11:38,604 --> 00:11:40,386
it's costlier and costlier.

226
00:11:41,247 --> 00:11:44,110
So we had to build our own reaction system.

227
00:11:44,849 --> 00:11:47,270
So we basically created really, really small scripts.

228
00:11:47,550 --> 00:11:50,591
So these scripts are simple, like go to, stand still,

229
00:11:50,852 --> 00:11:51,352
animation.

230
00:11:51,832 --> 00:11:54,293
And by linking them together, we can

231
00:11:54,313 --> 00:11:56,755
try to recreate more complex reactions.

232
00:11:57,095 --> 00:11:59,216
We always try to follow what the real NPC would do,

233
00:11:59,516 --> 00:12:01,577
but it's not as good, obviously.

234
00:12:02,177 --> 00:12:05,639
So I'll take, for example, the smoke bomb reaction.

235
00:12:05,919 --> 00:12:08,560
So when a smoke bomb explodes, you

236
00:12:08,581 --> 00:12:11,482
see the NPCs in the smoke moving their arms,

237
00:12:11,562 --> 00:12:13,003
trying to navigate out of the smoke.

238
00:12:13,783 --> 00:12:16,250
Now, let's take a look at the low-res version of that.

239
00:12:18,464 --> 00:12:22,947
Basically, they start reacting, so they stand still, play animation, as the animation finishes,

240
00:12:22,987 --> 00:12:24,969
they turn around and then move away.

241
00:12:25,309 --> 00:12:29,012
So you kind of see a glitch, you kind of see that it's not perfect, it's not super seamless,

242
00:12:29,492 --> 00:12:34,036
but I mean, when the density is right, this one I cranked it up to the max, it looks good.

243
00:12:34,056 --> 00:12:38,539
So this is the real reaction, so you see now they have hands and everything, so this one

244
00:12:38,600 --> 00:12:42,302
is obviously fully realized, and this is the one that occurs close to the player.

245
00:12:42,843 --> 00:12:47,407
So we can get away with cheaper reactions if they always happen far from the player.

246
00:12:49,565 --> 00:12:51,607
All right, so where do the Bulks live?

247
00:12:51,847 --> 00:12:54,628
Because I mentioned earlier that the Lores don't have an entity,

248
00:12:54,929 --> 00:12:56,369
so we need to have them somewhere.

249
00:12:56,490 --> 00:12:58,231
So we basically created Shepherds.

250
00:12:58,871 --> 00:13:01,212
Shepherds are really like containers, holders.

251
00:13:01,813 --> 00:13:04,034
So the Bulks themselves, we never spawn them,

252
00:13:04,274 --> 00:13:06,135
but we spawn Shepherds.

253
00:13:06,776 --> 00:13:08,517
Shepherds will contain all the AI.

254
00:13:08,937 --> 00:13:11,799
It's them that run the logic script I talked about.

255
00:13:12,179 --> 00:13:14,280
They will push the animation on each individual.

256
00:13:14,320 --> 00:13:16,722
So they are the one controlling the Bulks.

257
00:13:17,662 --> 00:13:18,263
So, uh...

258
00:13:19,085 --> 00:13:22,726
each bulk inside a shepherd has a unique ID.

259
00:13:23,166 --> 00:13:26,047
So it can actually be referenced from inside the code,

260
00:13:26,567 --> 00:13:29,188
but usually we work the shepherds themselves.

261
00:13:29,508 --> 00:13:31,888
So we don't spawn bulks, we spawn shepherds.

262
00:13:31,988 --> 00:13:32,869
And when a shepherd spawns,

263
00:13:32,909 --> 00:13:35,429
it allocates the memory for all its members.

264
00:13:35,929 --> 00:13:38,390
So, I mean, the spawning is really fast.

265
00:13:38,550 --> 00:13:40,751
And when, for example, the shepherd spawns,

266
00:13:41,131 --> 00:13:43,912
you can see thousands of people appearing in one frame.

267
00:13:45,195 --> 00:13:47,596
So typically in Paris we have 2,000 bolts

268
00:13:48,276 --> 00:13:50,937
and counting all the shepherds it's about 30 megabytes.

269
00:13:50,977 --> 00:13:51,958
So it's really, really cheap.

270
00:13:52,998 --> 00:13:55,399
And all the shepherds are placed by level designers.

271
00:13:55,820 --> 00:13:57,540
So this is how the level designers

272
00:13:57,580 --> 00:13:59,021
can actually interact with our system.

273
00:13:59,141 --> 00:14:02,163
They place shepherds and it creates a bunch of people.

274
00:14:03,883 --> 00:14:06,485
So every time a level designer places a shepherd,

275
00:14:06,525 --> 00:14:08,105
they can select a count and a density.

276
00:14:08,165 --> 00:14:11,327
When they do, we basically randomly generate the positions

277
00:14:11,607 --> 00:14:11,987
to fill.

278
00:14:14,368 --> 00:14:18,310
They can actually and manually edit the position of each bulk,

279
00:14:18,650 --> 00:14:20,870
but I mean doing so obviously takes a long time,

280
00:14:20,930 --> 00:14:22,311
but they can do it if they want to.

281
00:14:23,711 --> 00:14:27,032
We also give tools to script shepherds.

282
00:14:27,552 --> 00:14:29,193
So for example, the mission designer

283
00:14:29,253 --> 00:14:31,773
could have all the members of a shepherd start rioting,

284
00:14:31,953 --> 00:14:33,614
or they can have all the members flee.

285
00:14:33,954 --> 00:14:36,735
So the mission designers can play with the shepherds,

286
00:14:36,795 --> 00:14:38,215
they can never play with the individual.

287
00:14:38,355 --> 00:14:39,295
We didn't give this power.

288
00:14:40,787 --> 00:14:44,210
So for a scene in a mission, for example,

289
00:14:44,250 --> 00:14:46,412
you can see that the mission designer

290
00:14:46,472 --> 00:14:47,813
placed lots and lots of shepherds.

291
00:14:48,313 --> 00:14:49,894
On the left, for example, you can actually see them

292
00:14:49,934 --> 00:14:52,676
like separated, they are like these big squares of people.

293
00:14:53,237 --> 00:14:55,939
On the right, you can see that the density

294
00:14:55,959 --> 00:14:56,940
of some shepherd change.

295
00:14:57,100 --> 00:14:59,221
So it's really end place by level designers.

296
00:15:01,298 --> 00:15:05,444
So to see a bit how it looks, on the left,

297
00:15:05,464 --> 00:15:06,185
you can see a shepherd.

298
00:15:06,645 --> 00:15:08,828
But on the right, you can see that you can actually go

299
00:15:08,909 --> 00:15:11,833
and manually exit all the position of the bulk

300
00:15:11,953 --> 00:15:12,654
inside the shepherd.

301
00:15:13,318 --> 00:15:15,898
And the cool thing is that when we save a Shepard,

302
00:15:16,058 --> 00:15:17,259
we save all the positions.

303
00:15:17,799 --> 00:15:20,479
And every time a Shepard spawns, all the members

304
00:15:20,519 --> 00:15:21,419
are at the same position.

305
00:15:22,039 --> 00:15:24,200
And this is the basis of all our networking.

306
00:15:24,640 --> 00:15:26,720
So when two clients spawn a Shepard,

307
00:15:27,060 --> 00:15:28,821
all the members will have the same position

308
00:15:28,901 --> 00:15:29,921
and will have the same ID.

309
00:15:30,341 --> 00:15:31,801
So our system is deterministic.

310
00:15:33,201 --> 00:15:37,242
Now, we only have like, I talked about static people,

311
00:15:37,602 --> 00:15:40,263
but it would suck to have a city full of static people.

312
00:15:40,363 --> 00:15:41,543
So we need wandering people.

313
00:15:42,229 --> 00:15:44,530
So we created something different for the wandering people.

314
00:15:44,630 --> 00:15:46,972
We have a unique shepherd that we call the wandering shepherd.

315
00:15:47,872 --> 00:15:51,334
And basically what we do is we randomly generate closed paths

316
00:15:51,935 --> 00:15:56,197
so that the bulks can walk around these paths, always staying in the map.

317
00:15:57,337 --> 00:16:01,120
And the way we create our determinism is that for a fixed time,

318
00:16:01,700 --> 00:16:04,602
we know the position of every bulk on each path.

319
00:16:05,176 --> 00:16:10,302
This means that if you're over the network and you sync the net time, which is easy to do,

320
00:16:10,862 --> 00:16:14,386
then you sync the position of every bulk using this system.

321
00:16:14,967 --> 00:16:18,791
So this is, again, how we do our replication for this system.

322
00:16:19,992 --> 00:16:23,536
Also, every path is generated in a region of Paris,

323
00:16:23,997 --> 00:16:27,200
and depending on the region, you'll have different models on those paths.

324
00:16:28,997 --> 00:16:31,018
All right, so this is what the paths look like.

325
00:16:31,058 --> 00:16:33,778
So it's a bunch of lines where the bulk walk around in a circle.

326
00:16:34,919 --> 00:16:36,739
This is done in a test map, but in Paris,

327
00:16:36,759 --> 00:16:40,720
those paths are super huge, and you don't really see,

328
00:16:40,800 --> 00:16:42,181
you cannot, like, see a loop

329
00:16:42,301 --> 00:16:45,181
unless you play, like, 20 minutes following a guy.

330
00:16:46,842 --> 00:16:48,162
So I talked about the Lures.

331
00:16:48,222 --> 00:16:49,942
Now I'm going to transition to, like,

332
00:16:50,303 --> 00:16:51,723
how do they link with the real NPCs?

333
00:16:52,263 --> 00:16:53,523
So the link comes from a pool.

334
00:16:54,468 --> 00:16:58,171
So this is where we hold all our pre-spawn NPCs.

335
00:16:58,571 --> 00:17:01,733
So basically, inside each low res, we store a tag,

336
00:17:01,753 --> 00:17:05,656
and the pool takes all the low res around the player

337
00:17:05,936 --> 00:17:06,977
and then counts the tag.

338
00:17:07,498 --> 00:17:10,420
So for example, if there is 50% poor male civilian

339
00:17:10,460 --> 00:17:12,061
and 50% rich male civilian,

340
00:17:12,421 --> 00:17:15,523
then the pool will try to have 50% of each mesh

341
00:17:15,684 --> 00:17:16,384
inside its pool.

342
00:17:17,585 --> 00:17:19,306
So it's very statistically based,

343
00:17:19,586 --> 00:17:22,429
and it changes every frame,

344
00:17:22,489 --> 00:17:23,810
depending on the position of the player.

345
00:17:24,815 --> 00:17:27,736
And obviously, the more models you have,

346
00:17:28,996 --> 00:17:30,896
the more that the pool will be spread.

347
00:17:30,956 --> 00:17:35,197
So it's going to be a lot harder to have the right mesh when

348
00:17:35,237 --> 00:17:38,858
trying to change a low res from a pop-up, for example.

349
00:17:40,218 --> 00:17:42,438
So I'm going to show it a bit in action.

350
00:17:42,958 --> 00:17:45,119
So I'm going to show you the game running with debug

351
00:17:45,159 --> 00:17:45,479
display.

352
00:17:46,019 --> 00:17:47,819
So on the display, you can see two pie charts.

353
00:17:48,039 --> 00:17:50,040
The one on the left, you'll see that it represents

354
00:17:50,120 --> 00:17:51,700
what the composition should be.

355
00:17:52,140 --> 00:17:54,120
So a model is a different color.

356
00:17:55,083 --> 00:17:57,724
And on the right side, you'll see what the pool actually is.

357
00:17:57,744 --> 00:17:59,385
So I'll show it in action.

358
00:17:59,746 --> 00:18:02,947
This is done in debug mode, so it's not

359
00:18:02,988 --> 00:18:03,988
going to run where you need.

360
00:18:04,188 --> 00:18:05,909
But you can see the pie charts.

361
00:18:06,570 --> 00:18:09,952
So when we run it, you see that the pie chart on the left

362
00:18:10,292 --> 00:18:12,673
is actually always computing what the density should

363
00:18:12,733 --> 00:18:13,674
be around the players.

364
00:18:14,334 --> 00:18:16,115
And the one on the right is trying

365
00:18:16,135 --> 00:18:17,256
to adjust to the one on the left.

366
00:18:18,168 --> 00:18:22,570
Now, in our engine, we are limited to only spawning one NPC per frame.

367
00:18:22,931 --> 00:18:25,352
So the pool will take time to adjust.

368
00:18:25,772 --> 00:18:29,914
So you can see that the pie chart on the right takes time a bit to adjust to the left.

369
00:18:31,715 --> 00:18:31,996
All right.

370
00:18:33,136 --> 00:18:35,297
So now we have our pool of NPCs,

371
00:18:35,938 --> 00:18:38,299
and now we can build our puppet bulk state.

372
00:18:39,200 --> 00:18:41,101
Only to refresh your memory, the puppet bulk state

373
00:18:41,161 --> 00:18:43,042
is the one where we have a high-quality visual,

374
00:18:43,282 --> 00:18:45,063
but it's still behaving as a low-res.

375
00:18:46,380 --> 00:18:50,924
So basically what we do is the pool looks for the low res,

376
00:18:51,064 --> 00:18:55,528
it asks for the best matching NPC it has in its pool,

377
00:18:55,648 --> 00:18:56,489
and then makes the swap.

378
00:18:57,550 --> 00:18:59,051
We try to get the best one in our pool,

379
00:18:59,191 --> 00:19:00,312
but it's not always the case.

380
00:19:00,352 --> 00:19:02,534
I mean, it's statistics, it could fail.

381
00:19:03,095 --> 00:19:05,897
So for example, if we need a poor male civilian

382
00:19:06,118 --> 00:19:08,240
and we only have a rich male civilian,

383
00:19:08,540 --> 00:19:10,722
we might do the swap anyway,

384
00:19:10,882 --> 00:19:12,443
and you will see visual popping.

385
00:19:13,312 --> 00:19:16,016
But I mean, if it needs to be,

386
00:19:16,397 --> 00:19:17,879
if the both need to interact, for example,

387
00:19:17,899 --> 00:19:19,501
then we actually need to do the swap,

388
00:19:19,541 --> 00:19:21,684
so we don't care that we see a visual popping.

389
00:19:22,325 --> 00:19:24,649
But usually, when the regions are well set up,

390
00:19:24,749 --> 00:19:25,690
you don't see this popping.

391
00:19:26,765 --> 00:19:30,949
So we swap, we take the mesh on the pool, place it on the low res, we change color,

392
00:19:31,509 --> 00:19:35,253
we disable the components to make sure that only the visual of the entity is still there.

393
00:19:35,974 --> 00:19:40,478
We match the hats, I'll come back to color and hats in a bit, and then we do some remapping of

394
00:19:40,498 --> 00:19:45,763
the bones. Because if you remember, our real entities have 300 bones, but we are going to

395
00:19:45,803 --> 00:19:51,148
play 11 bones animations on them. So you're going to see this ugly mess on the left.

396
00:19:51,979 --> 00:19:55,501
So here we have problems where, for example,

397
00:19:55,521 --> 00:19:56,802
we have only one torso bone.

398
00:19:57,022 --> 00:19:58,423
So we didn't have enough bones to do

399
00:19:58,463 --> 00:20:00,144
the full curvature of the torso.

400
00:20:01,285 --> 00:20:02,445
But the neck was at the right place,

401
00:20:02,465 --> 00:20:03,886
so that's why it's super stretched.

402
00:20:04,647 --> 00:20:06,828
So we needed to do some remapping of some bones

403
00:20:06,868 --> 00:20:09,129
to make sure, for example, that our torso bone always

404
00:20:09,229 --> 00:20:11,811
look at the neck so that you can see that on the right,

405
00:20:12,011 --> 00:20:12,992
it's looking good.

406
00:20:14,593 --> 00:20:16,193
So let's take a look at this conversion.

407
00:20:16,214 --> 00:20:18,115
I talked a bit, but the videos are better.

408
00:20:19,314 --> 00:20:21,815
So here you can see it in action.

409
00:20:22,836 --> 00:20:26,718
So again, the conversion happens at 40 meters from the player.

410
00:20:26,918 --> 00:20:27,819
So this is far away.

411
00:20:28,199 --> 00:20:31,581
And I mean, you don't really see any visual popping

412
00:20:31,641 --> 00:20:32,341
because it's so far.

413
00:20:33,303 --> 00:20:35,885
So these are perfect conditions and it works really, really well.

414
00:20:36,205 --> 00:20:39,467
So I'll come closer and then you'll start to see it more in action.

415
00:20:39,848 --> 00:20:41,489
So now you can see the visual popping.

416
00:20:41,549 --> 00:20:45,612
So every time we replace the low-res mesh with a real NPC,

417
00:20:45,952 --> 00:20:50,135
you see that the shape changes a bit, the color changes a bit, so it's not perfect.

418
00:20:50,516 --> 00:20:55,259
But everything is based on distance and from far away, it's good enough.

419
00:20:59,155 --> 00:21:02,717
Now, when we do this matching, we match colors also.

420
00:21:02,797 --> 00:21:05,078
Because our low-res models have a different shader

421
00:21:05,158 --> 00:21:07,339
than the real NPCs,

422
00:21:08,059 --> 00:21:11,261
we needed to develop a specific color matching tool

423
00:21:11,321 --> 00:21:13,402
so that character modelers can see the cheap mesh,

424
00:21:13,842 --> 00:21:16,403
the real mesh, and then manually select

425
00:21:16,423 --> 00:21:18,704
which transformation it needs to do to match the colors.

426
00:21:18,944 --> 00:21:20,245
So it's obviously really long.

427
00:21:20,405 --> 00:21:21,965
It came at the end of the project,

428
00:21:22,486 --> 00:21:24,727
and you can definitely improve this, obviously.

429
00:21:25,637 --> 00:21:29,220
And then finally, apps. Apps are like how we cheat, basically.

430
00:21:30,161 --> 00:21:31,843
As I mentioned, we don't have many models.

431
00:21:32,163 --> 00:21:33,965
So how do we create variety?

432
00:21:34,880 --> 00:21:38,181
But we found that if you have lots and lots of people

433
00:21:38,261 --> 00:21:40,582
inside a crowd, you actually only see their heads.

434
00:21:41,142 --> 00:21:43,403
And by having a variety of hats, you

435
00:21:43,423 --> 00:21:46,264
can actually fake that you don't have a huge variety of models.

436
00:21:46,904 --> 00:21:50,485
So we developed a system to have different hats on box.

437
00:21:51,045 --> 00:21:54,026
The way we do it without having to respawn an NPC from our pool

438
00:21:54,246 --> 00:21:56,087
is that every time we spawn an NPC in the pool,

439
00:21:56,427 --> 00:21:57,908
it spawns with all possible hats.

440
00:21:58,268 --> 00:21:59,868
So that when we apply it on a low res,

441
00:22:00,228 --> 00:22:02,149
we only display the right hat.

442
00:22:04,827 --> 00:22:07,309
So now our final state, the autonomous state.

443
00:22:07,929 --> 00:22:09,751
So the bulk puppet state at the entity

444
00:22:09,771 --> 00:22:10,712
with the components off.

445
00:22:10,972 --> 00:22:13,394
So obviously, to create the other one, you turn them on.

446
00:22:14,255 --> 00:22:16,057
So that's the autonomous bulk.

447
00:22:16,097 --> 00:22:18,459
So that guy has all its components on,

448
00:22:18,479 --> 00:22:20,961
so it has full AVOC, CLUT, AI,

449
00:22:20,981 --> 00:22:23,884
so it's really a legacy NPC from that point on.

450
00:22:24,464 --> 00:22:26,886
It's still part of a Shepard, so it still has an ID,

451
00:22:26,986 --> 00:22:28,348
but it's not controlled by it.

452
00:22:28,468 --> 00:22:30,530
It's fully autonomous, hence why we call it that.

453
00:22:32,113 --> 00:22:34,635
So this guy is easy, I mean, only one slide.

454
00:22:34,855 --> 00:22:35,875
But it's not the case.

455
00:22:35,975 --> 00:22:36,996
This one is the trickiest.

456
00:22:37,756 --> 00:22:40,438
Because basically, when we turn it on,

457
00:22:40,478 --> 00:22:42,539
you need to remember that it came from a pool.

458
00:22:42,799 --> 00:22:46,521
So it has been recycled, it has moved around a bit.

459
00:22:47,141 --> 00:22:48,682
So you need to reset everything.

460
00:22:48,802 --> 00:22:49,923
That's everything.

461
00:22:50,023 --> 00:22:51,964
So if the bulk was jumping in the air,

462
00:22:52,264 --> 00:22:54,705
giving back to the pool, and put on a fleeing bulk,

463
00:22:55,265 --> 00:22:57,326
then this entity needs to have

464
00:22:57,386 --> 00:22:58,887
all the variables set up properly.

465
00:22:59,815 --> 00:23:04,239
So we needed to go into all the legacy systems and make sure this was supported.

466
00:23:04,819 --> 00:23:08,622
Obviously, I mean, we had some glitches, but we managed to do most of it.

467
00:23:09,643 --> 00:23:12,466
We also need to start the AI in the correct state.

468
00:23:12,886 --> 00:23:15,669
So, for example, I'll come back to the smoke bomb.

469
00:23:16,389 --> 00:23:21,013
So if the reaction starts by moving their hands and trying to get out of the smoke.

470
00:23:21,887 --> 00:23:25,572
So if you come near a low-res bulb that's leaving the smoke area,

471
00:23:25,953 --> 00:23:30,318
and then it starts its real logic, it must skip the moving ends part,

472
00:23:30,358 --> 00:23:31,820
because it's already out of the smoke.

473
00:23:31,860 --> 00:23:35,886
So it needs to start the reaction after the ends, and start at the correct place.

474
00:23:36,346 --> 00:23:39,230
So all our AIs, all our reactions, need to support...

475
00:23:40,310 --> 00:23:46,832
Jumping in the middle of everything. So again, that's a huge task and it need to like refactor a lot of old systems

476
00:23:47,353 --> 00:23:53,094
And obviously it needs to be fast resetting everything restarting all AI is costly in some systems

477
00:23:53,634 --> 00:23:58,756
But I mean we needed to do it really really fast because this can be done like five six times in one frame

478
00:24:00,516 --> 00:24:05,898
All right. So let's take a look at it a bit. So now we see this conversion it happens at 12 meters

479
00:24:07,456 --> 00:24:09,297
So don't look for visual popping now.

480
00:24:09,577 --> 00:24:12,738
It's not a visual transition, it's a behavior transition.

481
00:24:12,798 --> 00:24:14,759
So look for behavior differences.

482
00:24:15,860 --> 00:24:18,481
What I mentioned earlier, the giveaway is the ends.

483
00:24:18,961 --> 00:24:23,503
So on the right side, you can see that people walk with these open ends,

484
00:24:23,663 --> 00:24:26,724
and they have like an as-good WAG cycle.

485
00:24:27,305 --> 00:24:30,546
But when they transition, you see that they start using their ends,

486
00:24:30,586 --> 00:24:31,667
they start using their heads.

487
00:24:31,727 --> 00:24:35,668
So when they transition, they are like real NPCs from that point on.

488
00:24:36,927 --> 00:24:40,109
I'll show it in slow motion because that's easier to see.

489
00:24:40,650 --> 00:24:42,391
So now he has these open hands.

490
00:24:42,471 --> 00:24:43,571
He's a puppet bulk.

491
00:24:44,192 --> 00:24:46,153
And then he's walking, he's walking, he's walking.

492
00:24:46,333 --> 00:24:48,955
And then when he transitions, actually you

493
00:24:48,995 --> 00:24:50,276
see his hand coming together.

494
00:24:50,296 --> 00:24:52,957
He'll start moving the arms, moving the head.

495
00:24:53,017 --> 00:24:55,519
You see that he doesn't have the blank stare anymore.

496
00:24:55,559 --> 00:24:57,200
It has a full facial expression.

497
00:24:57,600 --> 00:24:59,921
So now that guy is like a real NPC.

498
00:25:01,402 --> 00:25:03,844
But when that happens from 12 meters and up,

499
00:25:03,884 --> 00:25:05,945
we found that the player really does notice the difference.

500
00:25:07,161 --> 00:25:10,344
So now you're stuck with all these autonomous bots near the player.

501
00:25:10,544 --> 00:25:12,626
So the player needs to be able to interact with them,

502
00:25:12,986 --> 00:25:15,088
and the guards also, and other real NPCs.

503
00:25:16,449 --> 00:25:18,731
So, easy, but not really.

504
00:25:19,232 --> 00:25:22,094
The thing is, again, this entity is part from a pool,

505
00:25:22,155 --> 00:25:23,916
and it will change all the time.

506
00:25:24,236 --> 00:25:26,819
If you remember, like in my first slides,

507
00:25:27,660 --> 00:25:28,981
when a camera moves around...

508
00:25:29,907 --> 00:25:31,768
all the autonomous bulks are shifting away,

509
00:25:31,848 --> 00:25:33,729
so the entities are giving back to the pool

510
00:25:33,769 --> 00:25:34,729
and assigned on another.

511
00:25:35,350 --> 00:25:37,891
So we cannot store pointers to those entities.

512
00:25:38,371 --> 00:25:39,111
That's a big trick.

513
00:25:39,412 --> 00:25:40,712
I mean, when you do the reaction,

514
00:25:40,772 --> 00:25:42,933
you can never store a pointer to an entity on a bulk.

515
00:25:43,093 --> 00:25:45,654
So we had to develop our own smart pointer system

516
00:25:45,734 --> 00:25:47,055
that uses the bulk ID,

517
00:25:47,595 --> 00:25:49,996
so that when you actually query an entity

518
00:25:50,337 --> 00:25:51,097
using the bulk ID,

519
00:25:51,197 --> 00:25:54,258
it gives you the entity on top of the bulk at this moment.

520
00:25:55,599 --> 00:25:59,521
So obviously, we needed, again, to go into all the reactions

521
00:25:59,662 --> 00:26:01,643
and re-edit them to make sure it supports

522
00:26:01,743 --> 00:26:02,744
having the entity change.

523
00:26:03,725 --> 00:26:07,047
In some cases, we judged it to be impossible.

524
00:26:08,008 --> 00:26:09,929
I'll talk about one of our gameplay loops,

525
00:26:10,049 --> 00:26:13,632
the accusation loop, where if you kill somebody,

526
00:26:14,012 --> 00:26:16,494
there's a possibility that a civilian will start yelling.

527
00:26:16,815 --> 00:26:19,677
It will attract a guard, talk to the guard,

528
00:26:20,277 --> 00:26:22,659
point the player, and then have the guard chase the player.

529
00:26:23,459 --> 00:26:26,860
All this long reaction does not support changing the entity super well,

530
00:26:27,140 --> 00:26:29,181
so we had to develop a fallback system.

531
00:26:29,781 --> 00:26:31,542
So our fallback is pretty simple.

532
00:26:32,502 --> 00:26:35,163
If there's ever a need to have a really really complex reaction,

533
00:26:35,623 --> 00:26:39,324
we spawn right there on this frame a real NPC and we replace the bulk.

534
00:26:40,145 --> 00:26:44,086
So after this fallback happens, this bulk is not a bulk anymore,

535
00:26:44,106 --> 00:26:47,387
it's not even the same entity, it's a new guy doing a real reaction.

536
00:26:48,701 --> 00:26:50,982
It works, but it's super, super costly.

537
00:26:51,122 --> 00:26:54,384
When we do that, it's a five millisecond hit minimum.

538
00:26:54,825 --> 00:26:57,286
And then on a system with Unity,

539
00:26:57,326 --> 00:26:59,728
we have a limit of 60 real NPCs.

540
00:27:00,048 --> 00:27:02,549
So you're basically pushing one more NPC on top of that

541
00:27:02,669 --> 00:27:04,350
so it can unbalance your resources.

542
00:27:05,911 --> 00:27:07,793
So let's take a look at this fallback in action.

543
00:27:07,873 --> 00:27:09,834
This one is really, really hard to explain,

544
00:27:10,214 --> 00:27:11,155
so I tried my best.

545
00:27:12,022 --> 00:27:15,765
Here you'll see I put some spheres on top of my bulk.

546
00:27:16,086 --> 00:27:18,568
So as long as he has those spheres, he's a bulk.

547
00:27:19,228 --> 00:27:22,431
And when I will kill the guard, you'll see the sphere disappear.

548
00:27:22,471 --> 00:27:24,272
This will mean that he will have changed.

549
00:27:25,393 --> 00:27:28,516
So now it goes pretty fast.

550
00:27:29,897 --> 00:27:33,820
This transition is totally seamless because we take an autonomous bulk,

551
00:27:33,860 --> 00:27:36,823
which is basically a real NPC, and replace it with another real NPC.

552
00:27:36,923 --> 00:27:38,584
So we can swap things really easily.

553
00:27:39,024 --> 00:27:40,706
So looking at it in slow motion.

554
00:27:41,455 --> 00:27:44,637
So now I kill the guard and now he has changed.

555
00:27:44,817 --> 00:27:47,138
This guy is not the same one as the guy that had the spheres.

556
00:27:47,198 --> 00:27:51,199
This is a completely real NPC and he has replaced the ball completely.

557
00:27:51,559 --> 00:27:54,520
And this guy can now do the full complex reaction.

558
00:27:55,241 --> 00:27:56,821
It looks good, but it's super costly.

559
00:27:56,921 --> 00:27:59,962
Every time this occurs again, it takes a five millisecond hit.

560
00:28:00,003 --> 00:28:02,864
So we tried to avoid this reaction like when possible.

561
00:28:04,024 --> 00:28:08,806
The cool thing, though, is that now this guy is a real NPC and he is fully replicated.

562
00:28:09,937 --> 00:28:13,278
So let's talk a bit about replication, because I mentioned it a bit.

563
00:28:14,259 --> 00:28:20,621
So, the networking, the things we did is use the deterministic system.

564
00:28:20,681 --> 00:28:24,042
So, all the shepherds have vaults in them,

565
00:28:24,362 --> 00:28:26,903
so their positions are all deterministic, as I mentioned before.

566
00:28:27,963 --> 00:28:31,524
So it's all good, but then when they react, it all goes to hell.

567
00:28:31,945 --> 00:28:35,826
When they react, they move away, and then we cannot keep the determinism.

568
00:28:36,697 --> 00:28:40,719
And we did not want to replicate thousands of position logic and everything.

569
00:28:41,499 --> 00:28:44,461
So we basically replicated only the reactions themselves.

570
00:28:45,201 --> 00:28:47,442
Because we assumed that if a bulk starts...

571
00:28:48,082 --> 00:28:49,623
I mean, they all start at the same position,

572
00:28:50,123 --> 00:28:53,805
so if we can only replicate the reaction element,

573
00:28:54,326 --> 00:28:56,647
then they should mostly do the same thing.

574
00:28:56,927 --> 00:28:57,967
Which worked, actually.

575
00:28:58,668 --> 00:29:01,869
The bulks, I mean, at a certain position would all flee, would all react.

576
00:29:02,730 --> 00:29:05,231
I mean, our reaction system is not deterministic,

577
00:29:05,311 --> 00:29:06,011
so we could have...

578
00:29:06,972 --> 00:29:09,213
discrepancies between positions, but I mean,

579
00:29:09,433 --> 00:29:12,575
since the Borgs themselves are mostly decorative civilians,

580
00:29:12,995 --> 00:29:14,176
we don't really interact with them,

581
00:29:15,036 --> 00:29:15,857
then it's not a problem.

582
00:29:16,617 --> 00:29:18,418
If we ever need to interact with them

583
00:29:18,478 --> 00:29:19,799
and they're offset too much,

584
00:29:19,979 --> 00:29:21,740
then we use our fallback that I mentioned earlier,

585
00:29:22,641 --> 00:29:24,842
and then it becomes a real NPC fully replicated.

586
00:29:25,402 --> 00:29:26,743
If you ever want to learn more

587
00:29:26,843 --> 00:29:28,404
about the replication of real NPCs,

588
00:29:28,444 --> 00:29:31,426
you can see Charles Lefebvre's talk on Friday.

589
00:29:34,083 --> 00:29:36,165
All right, so let's talk about performances,

590
00:29:36,225 --> 00:29:36,885
because we like that.

591
00:29:37,886 --> 00:29:40,427
So we basically used 20% of the CPU,

592
00:29:40,567 --> 00:29:41,868
as you can see on our left pie chart.

593
00:29:42,108 --> 00:29:44,630
So that's for an average of 2,000 box.

594
00:29:45,270 --> 00:29:48,132
So that's not huge, if you think about it.

595
00:29:48,172 --> 00:29:52,414
That's 2,000 NPC on screen, and only 20% of the CPU.

596
00:29:53,295 --> 00:29:57,097
So I mean, we worked a lot to have these good results.

597
00:29:57,897 --> 00:29:59,918
On the right side, you can see this is our most

598
00:30:01,495 --> 00:30:04,056
craziest mission where we have 10,000 NPCs,

599
00:30:04,356 --> 00:30:06,077
there we actually use half the CPU.

600
00:30:06,237 --> 00:30:07,658
Now it gets a little big,

601
00:30:08,098 --> 00:30:09,839
but remember that this is a mission

602
00:30:10,059 --> 00:30:12,060
and we have full control over the resources,

603
00:30:12,480 --> 00:30:15,301
so we can have like less guards, less of other things,

604
00:30:15,602 --> 00:30:18,743
so we can keep it running good.

605
00:30:18,763 --> 00:30:21,945
All right, so let's break this down a bit.

606
00:30:22,505 --> 00:30:24,286
On the left, you can see that for a typical crowd,

607
00:30:25,241 --> 00:30:28,183
What uses the most CPU is actually the 40 autonomous bulk.

608
00:30:28,403 --> 00:30:30,505
So this is like the basis of all our system.

609
00:30:30,625 --> 00:30:31,786
This is why we did all that.

610
00:30:31,946 --> 00:30:34,148
It's because real NPCs are super costly.

611
00:30:34,368 --> 00:30:39,132
So having only 40 of them takes 70% of all the CPU time

612
00:30:39,792 --> 00:30:41,233
used to render 2,000 bulks.

613
00:30:42,274 --> 00:30:45,556
On the right side, you can see that for 10,000 PCs,

614
00:30:45,596 --> 00:30:47,998
then, I mean, the autonomous bulk do get crowded a bit,

615
00:30:48,479 --> 00:30:49,599
and it's mostly the shepherds now

616
00:30:49,619 --> 00:30:51,541
that take the most amount of CPU time.

617
00:30:53,367 --> 00:30:56,168
On memory, this is where our system shines.

618
00:30:56,668 --> 00:31:00,110
So all the costs are fixed in this system.

619
00:31:00,910 --> 00:31:03,171
So again, the pool has a fixed size.

620
00:31:03,871 --> 00:31:05,952
The shepherds do not take much memory,

621
00:31:06,072 --> 00:31:07,953
and when they do spawn, they allocate everything.

622
00:31:08,473 --> 00:31:10,534
So it's super cheap.

623
00:31:10,754 --> 00:31:13,775
Actually, for 2,000 bulks, we only use 230 megabytes of data.

624
00:31:15,679 --> 00:31:19,801
And when we ever increase that to 10,000, it's only a 20 megabyte increase.

625
00:31:20,281 --> 00:31:25,843
So we end up actually using only 5% of the total RAM of our budget.

626
00:31:27,064 --> 00:31:30,646
So that's really, really good. And you see that on the right,

627
00:31:30,826 --> 00:31:34,307
it's mostly used for the graphics of the low-res bulks.

628
00:31:35,908 --> 00:31:40,070
All right, so how did we get these good CPU results? How is it running good?

629
00:31:40,847 --> 00:31:42,548
Well, we use a lot of multithreading.

630
00:31:43,229 --> 00:31:45,170
It's like the best situation possible, right?

631
00:31:45,210 --> 00:31:47,852
You have thousands of guys doing single stuff,

632
00:31:47,892 --> 00:31:51,094
so everything is super easy to multithread.

633
00:31:51,814 --> 00:31:54,636
But, I mean, there are so many of them

634
00:31:54,656 --> 00:31:55,597
that you need to be careful.

635
00:31:56,538 --> 00:31:59,940
So, we did a lot of work on our profiling tools,

636
00:32:00,400 --> 00:32:02,321
and we did a lot on our task scheduling

637
00:32:02,361 --> 00:32:05,243
to remove every possible idle times.

638
00:32:05,904 --> 00:32:09,106
So, you can see in my image that our big bulk update task,

639
00:32:10,041 --> 00:32:13,284
actually has no idle time from the previous task

640
00:32:13,524 --> 00:32:14,525
and to the next one.

641
00:32:14,705 --> 00:32:17,427
So you don't miss any CPU cycles.

642
00:32:18,288 --> 00:32:19,949
So that's mean that's perfect for us

643
00:32:20,009 --> 00:32:21,270
because we didn't waste time.

644
00:32:21,911 --> 00:32:25,153
We used a lot of lockless coding mechanisms when we could.

645
00:32:25,473 --> 00:32:26,995
And if we did have to use locks,

646
00:32:27,135 --> 00:32:29,217
we kept them like really, really short.

647
00:32:30,277 --> 00:32:32,879
So it's a bold world, bold words,

648
00:32:32,960 --> 00:32:35,542
but let's give some concrete example.

649
00:32:36,142 --> 00:32:37,763
So one thing I talked about

650
00:32:37,803 --> 00:32:39,305
when I talked about the collision stuff.

651
00:32:40,031 --> 00:32:42,333
is that to do our collision system, we use a map

652
00:32:43,033 --> 00:32:45,315
that keeps all the position of every NPC in the world.

653
00:32:45,895 --> 00:32:49,298
So basically, we use that map for our collision,

654
00:32:49,338 --> 00:32:49,758
as I mentioned.

655
00:32:50,058 --> 00:32:51,219
We keep two maps.

656
00:32:51,440 --> 00:32:52,280
It's double buffered.

657
00:32:52,360 --> 00:32:56,323
So on a given frame, we insert all the position

658
00:32:56,363 --> 00:32:57,504
of every NPC in the world.

659
00:32:58,124 --> 00:32:59,986
And when we need to do some queries,

660
00:33:00,046 --> 00:33:02,047
we use the map from the previous frame.

661
00:33:03,028 --> 00:33:05,110
So we do have a fast insert.

662
00:33:09,005 --> 00:33:10,506
is what's the most costly operation.

663
00:33:10,886 --> 00:33:14,308
So we can actually have only 1.5 microseconds operation

664
00:33:14,769 --> 00:33:17,270
for a 1.5 meter radius query.

665
00:33:17,690 --> 00:33:18,931
So all that is super fast,

666
00:33:19,051 --> 00:33:21,512
and this is done by 10,000 people every frame.

667
00:33:23,954 --> 00:33:25,895
All right, so it's quick code.

668
00:33:25,915 --> 00:33:27,656
I want to show you that, for example, on the left,

669
00:33:28,196 --> 00:33:31,238
in our big loops, we use intrinsic operation

670
00:33:31,358 --> 00:33:32,499
to make it run super fast.

671
00:33:32,959 --> 00:33:34,680
And on the right, when we add elements,

672
00:33:34,740 --> 00:33:35,080
we use...

673
00:33:36,272 --> 00:33:41,394
Atomic operation to make sure that we don't actually need luck. So all this makes it run super fast

674
00:33:42,294 --> 00:33:44,955
Alright, so what's is left to do? Well lots of things

675
00:33:47,276 --> 00:33:51,677
Obviously the transition the transition is the most problem problematic part of this system

676
00:33:52,477 --> 00:33:59,359
Either from low-res poppet or from poppet to autonomous on the two sides. We can actually do more to improve it in

677
00:33:59,559 --> 00:34:01,100
Our game we only swap the mesh

678
00:34:01,960 --> 00:34:05,261
So when going from low-res poppet, so you see visual popping occurring

679
00:34:05,902 --> 00:34:11,146
if we could use our deterring system and do stuff like we do for the building LODs

680
00:34:11,746 --> 00:34:15,448
to make it, if you can like, not have it so aggressive in the eyes of the player

681
00:34:15,468 --> 00:34:19,231
it would like, help, like reduce it like a lot

682
00:34:19,371 --> 00:34:23,073
and it would be better for the enjoyment of the player.

683
00:34:23,694 --> 00:34:27,016
Then we, when going from Puppet to Autonomous

684
00:34:28,149 --> 00:34:30,390
I mentioned that we needed to go into all possible behavior,

685
00:34:30,410 --> 00:34:32,331
we need to start every behavior at the right place.

686
00:34:32,391 --> 00:34:37,193
So that's super hard and not really manageable in the future.

687
00:34:37,513 --> 00:34:41,234
So a good way to go around that would be to have a unified reaction system.

688
00:34:41,755 --> 00:34:44,936
So if we could have a really, really cheap script

689
00:34:44,996 --> 00:34:47,317
maybe running at the core of the real AIs,

690
00:34:47,917 --> 00:34:51,859
then when we turn them on, we basically can swap the scripts around

691
00:34:51,979 --> 00:34:52,979
and it can go pretty fast.

692
00:34:54,566 --> 00:34:59,830
Then on the networking side, I mentioned that when they start reacting, it goes a bit to hell.

693
00:35:00,410 --> 00:35:05,013
Well, if we could have deterministic reaction, this means that, I mean, we start with the good

694
00:35:05,053 --> 00:35:09,196
positions, right? All the positions are the same on each client. So is there a way to make the

695
00:35:09,216 --> 00:35:13,299
reactions themselves deterministic to have them always flee the same way and everything?

696
00:35:13,859 --> 00:35:18,862
When we do it, if we could do it, then the position will stay a lot closer to what they should be.

697
00:35:19,983 --> 00:35:21,664
And then if we can have better...

698
00:35:22,800 --> 00:35:25,183
these better reactions synced over the network,

699
00:35:25,623 --> 00:35:27,886
then we could actually make them a bit more trickier.

700
00:35:28,066 --> 00:35:31,149
For example, all the reactions in our systems

701
00:35:31,550 --> 00:35:32,951
are done on the individual.

702
00:35:33,392 --> 00:35:36,215
So a bot will always react on himself, basically.

703
00:35:36,255 --> 00:35:39,659
He'll flee, he'll do some animation,

704
00:35:40,139 --> 00:35:41,461
go out of the smoke area,

705
00:35:41,521 --> 00:35:42,963
but he's always doing it on himself.

706
00:35:43,864 --> 00:35:45,365
if we could actually have interaction.

707
00:35:45,465 --> 00:35:48,327
So maybe the Shepard could have a reaction running

708
00:35:48,707 --> 00:35:51,049
and those two Bulks may be fighting each other.

709
00:35:51,529 --> 00:35:53,551
Then we could have fight in the Bulk system

710
00:35:53,631 --> 00:35:57,693
and we could put all our guard NPCs inside the system

711
00:35:57,733 --> 00:36:00,295
so that more NPCs are actually using our pool

712
00:36:00,816 --> 00:36:04,558
and this will help to have even more NPCs in our game.

713
00:36:05,419 --> 00:36:08,000
And if we can ever have fighting between Bulks,

714
00:36:08,160 --> 00:36:10,302
then it would be my personal favorite thing

715
00:36:10,342 --> 00:36:12,383
to see two armies fighting each other.

716
00:36:14,623 --> 00:36:18,925
people fully rendered, fully interactable, and slicing everywhere. That's what I

717
00:36:18,965 --> 00:36:25,229
would like to see. So what is the end result? Well if you played the game you

718
00:36:25,289 --> 00:36:28,471
probably see the video I'm gonna show. I'm actually kind of scared now because

719
00:36:28,511 --> 00:36:33,554
when I rehearsed yesterday I had some glitches in my video. So let's let's

720
00:36:33,594 --> 00:36:35,575
hoping it works and that the compression worked.

721
00:36:39,627 --> 00:36:41,327
Let's hope also that, okay, all right.

722
00:36:41,427 --> 00:36:44,188
So this is like our big, all right.

723
00:36:44,468 --> 00:36:48,369
So this is our big mission, the King's Execution Mission,

724
00:36:48,409 --> 00:36:51,990
where we have 10,000 NPCs on screen at the same time.

725
00:36:52,770 --> 00:36:54,311
So all these guys are bulked.

726
00:36:55,231 --> 00:36:57,291
And the main thing I wanna say is,

727
00:36:57,451 --> 00:37:00,512
if you ever want to build a system in your own engine,

728
00:37:00,552 --> 00:37:02,493
because I showed a lot of stuff about AC.

729
00:37:03,305 --> 00:37:05,967
But if you want to do it, you only need a key simple things.

730
00:37:06,188 --> 00:37:09,750
So some things to have lots and lots of really cheap mesh.

731
00:37:10,371 --> 00:37:11,752
And that can play simple animation.

732
00:37:11,812 --> 00:37:12,853
So go cheap.

733
00:37:13,033 --> 00:37:16,195
Go back to your old PS1 code, your old GameCube code,

734
00:37:16,656 --> 00:37:19,218
and then have lots and lots and lots of really cheap mesh.

735
00:37:20,058 --> 00:37:22,360
Then you need a pool, a pool with real NPCs.

736
00:37:22,960 --> 00:37:24,662
And as the player gets close to the cheap ones,

737
00:37:24,682 --> 00:37:25,823
you basically replace them.

738
00:37:26,944 --> 00:37:28,765
And then you can have the intermediate state

739
00:37:28,805 --> 00:37:30,787
that we have, the ball puppet state, if you want to.

740
00:37:31,639 --> 00:37:35,262
So, this was it for me, and I hope you enjoyed the presentation.

741
00:37:35,282 --> 00:37:47,575
I will sadly not be having questions,

742
00:37:48,055 --> 00:37:50,858
but if you ever see me or Antoine walking around,

743
00:37:51,098 --> 00:37:52,840
please come and see us and talk to us.

