1
00:00:06,271 --> 00:00:07,251
I think we'll get started.

2
00:00:08,092 --> 00:00:08,752
I'm Catherine.

3
00:00:09,432 --> 00:00:11,993
Welcome to my talk on game design tools.

4
00:00:13,413 --> 00:00:15,954
First, I want you to know that I am completely sober.

5
00:00:15,974 --> 00:00:19,235
I've just come from the Women in Games lunch,

6
00:00:19,415 --> 00:00:20,876
and there was a lot of drinking going on.

7
00:00:21,656 --> 00:00:23,356
But I didn't have a single drink because I

8
00:00:23,376 --> 00:00:24,337
knew I was doing this talk.

9
00:00:25,037 --> 00:00:27,638
So I'm pretty proud of myself about that.

10
00:00:28,482 --> 00:00:30,582
So, thank you, well done me.

11
00:00:30,782 --> 00:00:32,463
Yeah, so I won't get too excited

12
00:00:32,483 --> 00:00:33,743
because I'm not actually drunk.

13
00:00:34,764 --> 00:00:37,985
So, I've been asked to remind you all

14
00:00:38,365 --> 00:00:42,286
to do your evaluations and also to turn your phones off.

15
00:00:42,386 --> 00:00:44,607
I've turned mine off, I think, yeah.

16
00:00:57,433 --> 00:00:58,894
So what are game design tools?

17
00:00:59,815 --> 00:01:02,777
Well, they're tools for helping you solve design problems

18
00:01:03,258 --> 00:01:06,100
without having to build playable experiences in order

19
00:01:06,120 --> 00:01:07,301
to test out your ideas.

20
00:01:08,442 --> 00:01:11,625
So they can be conceptual tools, diagramming systems,

21
00:01:12,105 --> 00:01:14,828
notation systems, or they could be software tools that

22
00:01:14,868 --> 00:01:16,229
provide computational support.

23
00:01:17,850 --> 00:01:20,652
And one of the most notable things about game design tools

24
00:01:21,153 --> 00:01:23,655
is that the vast majority of us aren't actually using them.

25
00:01:25,043 --> 00:01:29,005
And this is kind of unusual, because creatives in other

26
00:01:29,045 --> 00:01:30,925
fields do use design tools.

27
00:01:31,806 --> 00:01:34,386
Like in music, it would be hard to imagine composing a

28
00:01:34,426 --> 00:01:36,567
film score without a notation system.

29
00:01:38,008 --> 00:01:40,368
And the fact that we generally don't use design tools is

30
00:01:40,388 --> 00:01:42,429
something we've been talking about for quite a while.

31
00:01:43,657 --> 00:01:46,998
Some of you might remember reading Doug Church's piece

32
00:01:47,038 --> 00:01:50,259
in Game Developer Magazine from way back in 1999,

33
00:01:50,959 --> 00:01:53,400
where he called our lack of design tools

34
00:01:53,560 --> 00:01:56,381
the primary inhibitor of design evolution in games.

35
00:01:58,921 --> 00:02:01,262
So right now, you might be thinking, really?

36
00:02:02,262 --> 00:02:03,963
But designers do use tools.

37
00:02:04,483 --> 00:02:06,764
I'm a designer, and I use at least three different tools

38
00:02:06,804 --> 00:02:07,604
on my current project.

39
00:02:08,980 --> 00:02:12,401
So yeah, obviously designers do use tools in our work.

40
00:02:12,981 --> 00:02:16,303
We use level editors, all kinds of scripting

41
00:02:16,363 --> 00:02:17,723
and asset creation tools,

42
00:02:17,983 --> 00:02:19,504
and of course tools for prototyping.

43
00:02:20,744 --> 00:02:23,165
And yeah, we do often use these tools

44
00:02:23,205 --> 00:02:24,326
not just to build stuff,

45
00:02:24,866 --> 00:02:26,987
but also to help us think through our ideas.

46
00:02:28,407 --> 00:02:30,288
However, it's important to remember

47
00:02:30,308 --> 00:02:32,949
that these tools are first and foremost production tools,

48
00:02:33,829 --> 00:02:34,569
or authoring tools.

49
00:02:35,632 --> 00:02:38,733
And their primary function is to help us produce playable games.

50
00:02:40,653 --> 00:02:44,434
So their goal is to help you to create data and logic that's

51
00:02:44,494 --> 00:02:46,095
bug-free and actually runs.

52
00:02:47,175 --> 00:02:50,836
Production tools try and offer an orderly, efficient process

53
00:02:50,876 --> 00:02:53,857
that helps you produce clean, optimized data that's

54
00:02:53,937 --> 00:02:55,198
nicely tidied away.

55
00:02:55,818 --> 00:02:59,039
And it's usually quite easy to show how much progress

56
00:02:59,079 --> 00:02:59,499
you've made.

57
00:03:00,559 --> 00:03:02,360
So programmers and producers are very

58
00:03:02,400 --> 00:03:04,921
comfortable with the idea of production and authoring tools.

59
00:03:06,520 --> 00:03:09,062
But they might come along and look at authoring tools and say,

60
00:03:09,082 --> 00:03:13,526
how do these weird design tools help us build the game?

61
00:03:15,067 --> 00:03:18,430
Well, building isn't really the point of design tools.

62
00:03:19,551 --> 00:03:21,192
Their primary goal is to support thinking.

63
00:03:22,353 --> 00:03:26,436
So your broken, ambiguous, and even outright contradictory

64
00:03:26,516 --> 00:03:29,178
ideas that you have in your unfinished design

65
00:03:29,378 --> 00:03:31,500
aren't necessarily treated like errors or mistakes.

66
00:03:32,660 --> 00:03:35,202
The idea here is that they're tolerated and supported

67
00:03:35,382 --> 00:03:37,203
as a natural part of the design process.

68
00:03:40,005 --> 00:03:43,108
So what do we currently use to support our design process?

69
00:03:44,429 --> 00:03:46,590
Well, traditionally, we've developed ideas

70
00:03:46,891 --> 00:03:50,473
through writing design documents, improvising diagrams,

71
00:03:50,794 --> 00:03:52,695
working out problems in spreadsheets,

72
00:03:53,496 --> 00:03:56,098
plotting out gameplay progression structures using

73
00:03:56,618 --> 00:03:58,320
flow charts, and so on.

74
00:03:59,612 --> 00:04:01,133
And of course, more recently, we've

75
00:04:01,173 --> 00:04:05,214
embraced an iterative process based

76
00:04:05,274 --> 00:04:06,514
on prototyping and playtesting.

77
00:04:07,954 --> 00:04:10,235
I think you could call this a design

78
00:04:10,295 --> 00:04:11,956
by making kind of process.

79
00:04:13,796 --> 00:04:15,457
And we've been able to sort of amp up

80
00:04:15,517 --> 00:04:19,278
the power of this iteration process with play metrics

81
00:04:19,958 --> 00:04:21,298
and data-driven design methods.

82
00:04:22,859 --> 00:04:24,659
But interesting things can happen

83
00:04:24,779 --> 00:04:26,860
if you add design tools into the mix.

84
00:04:28,715 --> 00:04:30,297
So the tools I'm going to talk about today

85
00:04:30,377 --> 00:04:32,719
cover a range of typical design tasks,

86
00:04:33,539 --> 00:04:36,542
such as system design and balancing, narrative design,

87
00:04:37,002 --> 00:04:39,404
gameplay progression design, level and mission design.

88
00:04:39,424 --> 00:04:43,847
And I'm also going to talk about tools that tackle some

89
00:04:43,867 --> 00:04:46,169
of the new design challenges we're starting to encounter,

90
00:04:46,670 --> 00:04:48,451
like the kind of meta design tasks

91
00:04:48,991 --> 00:04:51,213
that you might have when designing for procedural content

92
00:04:51,253 --> 00:04:52,234
generation, for example.

93
00:04:53,856 --> 00:04:55,617
So I'm going to start with tools that

94
00:04:55,637 --> 00:04:57,719
have been around for a few years and that you

95
00:04:57,739 --> 00:04:58,879
can access right away.

96
00:05:00,581 --> 00:05:03,803
First up is Joris Dormans' tool, Machinations.

97
00:05:06,084 --> 00:05:08,266
So Machinations is a tool for game system design.

98
00:05:09,086 --> 00:05:11,828
You can use it to design and balance your overall game loop

99
00:05:11,988 --> 00:05:13,649
and its most important subsystems.

100
00:05:14,830 --> 00:05:16,912
So this makes it particularly useful for games

101
00:05:16,952 --> 00:05:18,413
that feature emergent dynamics.

102
00:05:19,752 --> 00:05:22,954
It means it's a natural fit for board games, strategy games,

103
00:05:23,034 --> 00:05:24,055
and management sims.

104
00:05:25,036 --> 00:05:29,700
For example, at its core, Machinations is, as you can

105
00:05:29,740 --> 00:05:31,121
see, it's a notation system.

106
00:05:32,142 --> 00:05:34,825
It takes some notation ideas from designers like Mark

107
00:05:34,845 --> 00:05:37,907
LeBlanc, Ralph Costa, Stefan Buehrer, and

108
00:05:37,927 --> 00:05:38,508
some other people.

109
00:05:39,669 --> 00:05:42,311
And it combines this with PetriNets, which is a

110
00:05:42,371 --> 00:05:43,552
mathematical modeling language.

111
00:05:45,348 --> 00:05:47,970
So in Machinations, you use the concept of resource flows

112
00:05:48,031 --> 00:05:50,113
to help you visualize your game economy.

113
00:05:51,034 --> 00:05:53,856
Resources could be skill levels, hit points, money,

114
00:05:54,537 --> 00:05:57,060
types of consumables, or basically anything

115
00:05:57,100 --> 00:05:58,781
that you can abstract out and quantify.

116
00:05:59,862 --> 00:06:01,864
So this diagram here shows the game system

117
00:06:01,904 --> 00:06:05,048
for Elite, which is, of course, the 80s space trading game.

118
00:06:06,425 --> 00:06:09,388
The different shapes of nodes you can see in the diagram

119
00:06:09,468 --> 00:06:12,731
function as ways to generate, transform, or consume

120
00:06:12,771 --> 00:06:13,291
resources.

121
00:06:14,212 --> 00:06:16,794
And the arrows connecting them control resource flow.

122
00:06:18,316 --> 00:06:20,218
And as well as a notation system,

123
00:06:20,758 --> 00:06:23,841
Mackinations is also a software tool.

124
00:06:23,861 --> 00:06:27,464
So if you run this diagram, you get an interactive simulation

125
00:06:27,525 --> 00:06:30,067
that shows you how resources are moving through the system

126
00:06:30,788 --> 00:06:32,249
and the game dynamics that result.

127
00:06:36,188 --> 00:06:39,791
So here is, if I can get it playing, yeah.

128
00:06:40,352 --> 00:06:42,454
So here is an example from my own work

129
00:06:42,714 --> 00:06:44,756
where I use machinations to help me balance

130
00:06:44,916 --> 00:06:48,660
a time management inspired puzzle game.

131
00:06:49,841 --> 00:06:53,565
So I use machinations to refine and balance my prototype.

132
00:06:53,585 --> 00:06:55,347
This is definitely a prototype.

133
00:06:55,807 --> 00:06:56,948
The art is pretty shit here, so.

134
00:06:59,369 --> 00:07:01,870
I assure you it's a prototype.

135
00:07:02,110 --> 00:07:04,551
So I used it to balance my prototype's

136
00:07:04,571 --> 00:07:08,473
spawning mechanics for power-ups like speed boosts.

137
00:07:09,974 --> 00:07:12,275
And by running the simulation, I was

138
00:07:12,436 --> 00:07:15,877
able to get a rough abstract visualization of how

139
00:07:15,957 --> 00:07:18,259
different spawn rates might affect game pacing.

140
00:07:19,339 --> 00:07:22,301
I was able to feed these values right back into my prototype

141
00:07:22,501 --> 00:07:24,682
as part of an iterative process.

142
00:07:26,807 --> 00:07:28,867
So doing this helped me make faster progress

143
00:07:28,927 --> 00:07:31,628
on my spawning mechanics, as compared with simple trial

144
00:07:31,648 --> 00:07:32,629
and error and guesswork.

145
00:07:35,170 --> 00:07:39,371
So Machinations is for modeling and balancing your game

146
00:07:39,391 --> 00:07:39,791
systems.

147
00:07:40,491 --> 00:07:43,473
But once you've learned the Machinations notation language,

148
00:07:43,573 --> 00:07:47,274
it's also great for just quickly sketching and trying out ideas.

149
00:07:48,414 --> 00:07:50,655
And I've also found it useful for analyzing other people's

150
00:07:51,215 --> 00:07:52,836
games and learning from their designs.

151
00:07:55,328 --> 00:07:57,750
As for limitations, well, Machinations

152
00:07:57,770 --> 00:07:59,470
isn't going to be useful for every kind of game.

153
00:08:00,491 --> 00:08:02,792
It's not really suited to games with data-heavy,

154
00:08:02,992 --> 00:08:04,593
non-repeating scripted gameplay.

155
00:08:05,673 --> 00:08:07,114
And even though Machinations does

156
00:08:07,134 --> 00:08:09,295
allow you to simulate the game system in real time

157
00:08:09,735 --> 00:08:11,876
and even interact with it, don't expect

158
00:08:11,916 --> 00:08:15,358
to get an accurate reading of something like game feel.

159
00:08:16,418 --> 00:08:17,839
If you're looking to gain insight

160
00:08:18,259 --> 00:08:20,580
into the player interaction aspect of your design,

161
00:08:21,040 --> 00:08:23,321
you're best off just making a playable prototype.

162
00:08:24,772 --> 00:08:27,333
And the same goes for a heavily topographical game bay.

163
00:08:28,933 --> 00:08:31,234
It's hard to use resource flows to model

164
00:08:31,254 --> 00:08:33,875
gameplay that is based on exploration

165
00:08:33,935 --> 00:08:35,055
or tactical use of space.

166
00:08:37,676 --> 00:08:40,397
So you can download the tool from Joris Dormans' site.

167
00:08:41,097 --> 00:08:43,138
But if you really want to get the most out of it,

168
00:08:43,578 --> 00:08:46,619
I recommend the book that Joris co-wrote with Ernest Adams

169
00:08:47,579 --> 00:08:48,639
on game system design.

170
00:08:49,420 --> 00:08:52,181
And this book essentially serves as an introduction

171
00:08:52,221 --> 00:08:53,321
to the tool Machinations.

172
00:08:56,396 --> 00:08:59,618
Next up is Articy Draft, which is developed by a company

173
00:08:59,678 --> 00:09:00,358
called NeverGo.

174
00:09:00,378 --> 00:09:03,940
And it's a tool for narrative design and mission design,

175
00:09:04,560 --> 00:09:06,922
particularly for RPGs and adventure games.

176
00:09:08,162 --> 00:09:10,424
It gives you a flow diagram style interface

177
00:09:11,544 --> 00:09:13,225
for creating graph-based structures

178
00:09:13,265 --> 00:09:15,626
that you can use for things like branching dialogue and mission

179
00:09:15,987 --> 00:09:16,927
graphs or skill trees.

180
00:09:18,677 --> 00:09:23,300
As well as a design tool, it can also be used as a fairly sophisticated authoring tool,

181
00:09:24,021 --> 00:09:26,723
so you can export assets from Articy to use in your game.

182
00:09:29,584 --> 00:09:34,368
Obviously, there are a number of tools out there for writing interactive narrative, like

183
00:09:34,448 --> 00:09:40,792
Inkle Writer, for example, but the key difference here is that Articy also serves as a design

184
00:09:40,812 --> 00:09:41,012
tool.

185
00:09:42,138 --> 00:09:44,859
So because of this, it goes a long way to help you visualize

186
00:09:44,939 --> 00:09:47,939
and organize your ideas in a way that supports you

187
00:09:48,319 --> 00:09:49,540
while you design and write.

188
00:09:50,740 --> 00:09:54,241
So I guess some of you here might have used the writing

189
00:09:54,281 --> 00:09:55,001
tool, Scrivener.

190
00:09:56,582 --> 00:09:59,602
It's a really popular tool with writers, I think because

191
00:09:59,642 --> 00:10:00,302
of this approach.

192
00:10:01,163 --> 00:10:05,664
So if you've used Scrivener, I think you will understand how

193
00:10:05,724 --> 00:10:08,525
powerful this visualization organization can be.

194
00:10:10,184 --> 00:10:12,926
So for example, for an adventure game I've been working on,

195
00:10:13,246 --> 00:10:15,948
I found Articy useful for quickly filing away

196
00:10:16,028 --> 00:10:19,090
any new story or puzzle ideas that just come to me.

197
00:10:21,051 --> 00:10:24,433
These ideas, I don't know if you have the same issue

198
00:10:24,473 --> 00:10:26,614
as I do, but they just come at inconvenient times

199
00:10:27,054 --> 00:10:28,035
while I'm working on something else.

200
00:10:28,715 --> 00:10:32,698
And normally, you just note these ideas down

201
00:10:32,738 --> 00:10:34,059
in some kind of design notebook.

202
00:10:35,740 --> 00:10:37,381
But for me, a design notebook can,

203
00:10:38,815 --> 00:10:41,638
become kind of like a black hole for my ideas.

204
00:10:41,699 --> 00:10:43,581
So I write an idea down, and if I'm not

205
00:10:43,661 --> 00:10:47,226
super vigilant about regularly going back and looking

206
00:10:47,246 --> 00:10:50,510
through my notes, chances are I might not ever find it again,

207
00:10:50,670 --> 00:10:52,653
or I might not find it when I actually need it.

208
00:10:54,155 --> 00:10:56,058
But when I use Articy Draft to

209
00:10:57,640 --> 00:11:03,423
file an idea, I can use its referencing system to sort of tag my ideas with themes and characters

210
00:11:03,463 --> 00:11:11,728
that it might relate to, and then use the nested flow diagram structure to basically

211
00:11:11,788 --> 00:11:15,770
feel reasonably confident that the idea is likely to be there when and when I need it.

212
00:11:15,990 --> 00:11:19,773
So it's not in this great big unstructured linear notebook.

213
00:11:23,032 --> 00:11:25,573
One thing to be aware of, though,

214
00:11:25,593 --> 00:11:27,854
is that while Odyssey is pretty flexible

215
00:11:28,394 --> 00:11:30,275
and it has a lot of customization features,

216
00:11:31,175 --> 00:11:33,836
straight out of the box, it is rather heavily skewed

217
00:11:33,876 --> 00:11:35,596
towards RPGs and adventure games.

218
00:11:36,957 --> 00:11:38,197
And finally, as I said earlier, it

219
00:11:38,917 --> 00:11:41,138
does also serve as an authoring tool.

220
00:11:42,579 --> 00:11:45,239
Using it as a production tool has its own pros and cons,

221
00:11:45,800 --> 00:11:47,920
but that's off topic for my discussion here.

222
00:11:49,401 --> 00:11:49,921
There's where to get it.

223
00:11:53,240 --> 00:11:54,680
So next up is Skill Atoms.

224
00:11:55,161 --> 00:11:57,962
And this is a conceptual tool by Dan Cook.

225
00:11:59,002 --> 00:12:00,823
And it gets you to systematically break down

226
00:12:00,843 --> 00:12:03,925
your gameplay into basic units from the point of view

227
00:12:04,045 --> 00:12:05,085
of the player experience.

228
00:12:06,546 --> 00:12:08,647
So these units are called Skill Atoms.

229
00:12:09,207 --> 00:12:10,648
And they're basically a description

230
00:12:10,848 --> 00:12:13,369
of how the player gains a new skill in terms

231
00:12:13,409 --> 00:12:16,691
of the action they perform and how that action translates

232
00:12:16,751 --> 00:12:18,451
into simulation and feedback in the game.

233
00:12:20,093 --> 00:12:21,433
Once you have your skill atoms, you

234
00:12:21,453 --> 00:12:23,114
can connect them together into what's

235
00:12:23,134 --> 00:12:25,835
called a skill chain, where you're mapping out

236
00:12:25,855 --> 00:12:27,216
dependencies between skills.

237
00:12:27,896 --> 00:12:30,977
So for example, if you have a couple of skills

238
00:12:31,017 --> 00:12:33,778
like running and jumping, they might

239
00:12:33,798 --> 00:12:36,819
be prerequisites for the skill running jump.

240
00:12:38,480 --> 00:12:41,561
So it's kind of similar to a skill tree-ish in a way,

241
00:12:41,641 --> 00:12:43,722
but you can use it as a design tool

242
00:12:43,742 --> 00:12:46,263
to work out the order in which you introduce

243
00:12:46,303 --> 00:12:47,323
new gameplay to the player.

244
00:12:49,973 --> 00:12:52,594
So skill atoms can be a good framing device

245
00:12:52,614 --> 00:12:55,575
for planning out and doing some close analysis of your game's

246
00:12:55,635 --> 00:12:57,776
scaffolding or your onboarding phase.

247
00:12:58,716 --> 00:13:00,257
It can help you make sure you haven't

248
00:13:00,297 --> 00:13:03,357
missed any details that could disrupt the experience

249
00:13:03,377 --> 00:13:03,918
for new players.

250
00:13:06,058 --> 00:13:08,699
However, when I've tried to map out the player skill

251
00:13:08,719 --> 00:13:10,239
evolution for an entire game,

252
00:13:11,759 --> 00:13:14,320
For some games, your skill chain is

253
00:13:14,340 --> 00:13:17,860
going to be really big and hard to read and untangle,

254
00:13:18,420 --> 00:13:19,981
because I think even a simple game can

255
00:13:20,021 --> 00:13:21,081
involve a lot of skill atoms.

256
00:13:24,681 --> 00:13:27,242
So those are tools you can use now that I've just covered.

257
00:13:28,562 --> 00:13:30,363
So now I'm going to talk about some

258
00:13:30,423 --> 00:13:34,283
of the more advanced and experimental tools that

259
00:13:34,303 --> 00:13:35,724
show us some of the ways we might

260
00:13:35,744 --> 00:13:37,524
be using technology to support our design

261
00:13:37,564 --> 00:13:38,384
process in the future.

262
00:13:40,225 --> 00:13:41,426
And these tools I'm going to talk about

263
00:13:41,486 --> 00:13:43,327
are called Mixed Initiative Design Tools.

264
00:13:44,468 --> 00:13:46,670
So these are tools that use artificial intelligence

265
00:13:46,710 --> 00:13:49,933
and procedural generation to assist you with design tasks.

266
00:13:50,994 --> 00:13:53,856
And this creates an almost collaborative design process

267
00:13:53,896 --> 00:13:54,877
between you and the tool.

268
00:13:56,218 --> 00:13:59,420
It's one of the developments in academic game design research

269
00:14:00,041 --> 00:14:01,722
from the past few years that I think

270
00:14:02,083 --> 00:14:03,184
is worth paying attention to.

271
00:14:05,666 --> 00:14:07,387
So first up, the Sentient Sketchbook.

272
00:14:08,268 --> 00:14:10,308
This was created by Antonius Liapis,

273
00:14:10,988 --> 00:14:13,969
and it's an AI-assisted sketching tool

274
00:14:14,049 --> 00:14:15,729
for roughing out strategy game maps.

275
00:14:17,730 --> 00:14:20,370
So what you do is place key features of a map,

276
00:14:20,470 --> 00:14:23,591
like player and enemy bases and resources and obstacles.

277
00:14:24,231 --> 00:14:26,151
And while you're doing this, the tool

278
00:14:26,211 --> 00:14:28,252
is evaluating your map design for qualities

279
00:14:28,332 --> 00:14:31,492
like fairness between players and some aspects

280
00:14:31,552 --> 00:14:33,633
relevant to gameplay pacing.

281
00:14:34,313 --> 00:14:36,613
It also visualizes paths and choke points.

282
00:14:38,667 --> 00:14:40,449
While you're sketching, it's also

283
00:14:40,489 --> 00:14:43,030
creating and suggesting in real time

284
00:14:43,811 --> 00:14:46,273
some more detailed alternative designs based

285
00:14:46,293 --> 00:14:47,033
off of what you're doing.

286
00:14:47,914 --> 00:14:49,635
And then you can bring any of these suggestions

287
00:14:49,675 --> 00:14:51,776
into your sketch and continue working with them

288
00:14:51,836 --> 00:14:53,297
as part of an iterative process.

289
00:14:55,979 --> 00:14:58,201
So as you've probably gathered, the Sentient Sketchbook

290
00:14:58,261 --> 00:15:00,843
is something you might find useful at the grayboxing stage

291
00:15:00,983 --> 00:15:01,583
of level design.

292
00:15:02,904 --> 00:15:05,805
It was originally built for designing strategy game maps,

293
00:15:06,405 --> 00:15:08,605
but Antonios has been trying to broaden it out

294
00:15:08,625 --> 00:15:10,526
to serve other genres as well.

295
00:15:10,646 --> 00:15:14,587
And I believe he's using it on an FPS at the moment.

296
00:15:16,927 --> 00:15:22,388
However, it is currently quite genre-specific.

297
00:15:23,428 --> 00:15:25,389
And if there are key elements in your game that

298
00:15:25,409 --> 00:15:26,949
can't be added to the sketch, the problem

299
00:15:27,029 --> 00:15:30,230
is that the evaluations and the suggestions it makes

300
00:15:30,250 --> 00:15:32,290
aren't going to be super useful to you.

301
00:15:33,500 --> 00:15:37,544
And you're currently limited to four or so preset map sizes.

302
00:15:39,306 --> 00:15:42,390
So it doesn't give you the chance to edit in much detail.

303
00:15:43,090 --> 00:15:44,852
But that said, the point of this tool

304
00:15:44,932 --> 00:15:47,375
is to be really rough and high level.

305
00:15:49,818 --> 00:15:51,540
Here's a link where you can download it.

306
00:15:52,797 --> 00:15:55,118
Bear in mind that development of this tool is ongoing.

307
00:15:55,278 --> 00:15:58,259
So I hope he doesn't mind me saying this,

308
00:15:58,279 --> 00:16:01,560
but you should totally contact Antonius and hassle

309
00:16:01,600 --> 00:16:09,723
him to add features so that we can use this tool on Wargames.

310
00:16:09,743 --> 00:16:12,704
So Ludoscope is an experimental tool

311
00:16:12,965 --> 00:16:14,525
for mission and level design.

312
00:16:15,966 --> 00:16:18,127
It gives you the ability to procedurally generate

313
00:16:18,507 --> 00:16:21,068
and manipulate level designs using rules that you create.

314
00:16:22,562 --> 00:16:24,283
So on the left, you can see a level design

315
00:16:24,323 --> 00:16:26,684
being populated with enemies and puzzle elements

316
00:16:26,725 --> 00:16:27,845
for a top-down action game.

317
00:16:28,606 --> 00:16:30,807
On the top of the image, you can see the empty level.

318
00:16:31,508 --> 00:16:34,430
And below it is the level after the generation rules

319
00:16:34,450 --> 00:16:35,070
have been applied.

320
00:16:36,331 --> 00:16:37,552
Next to it, on the right, you can

321
00:16:37,592 --> 00:16:40,014
see an example of one of these rules being created.

322
00:16:41,870 --> 00:16:45,112
And another interesting and truly ambitious goal

323
00:16:45,132 --> 00:16:49,174
of this tool is to help you transform abstract mission

324
00:16:49,194 --> 00:16:51,615
structures with tasks, events, and goals

325
00:16:52,196 --> 00:16:54,457
into concrete spatial level designs.

326
00:16:55,998 --> 00:16:57,799
The image on the far right gives an idea

327
00:16:57,819 --> 00:16:59,000
of what that process can look like.

328
00:17:01,181 --> 00:17:02,542
Sorry, image on the right.

329
00:17:04,643 --> 00:17:05,343
There, that's enough time.

330
00:17:05,543 --> 00:17:05,643
OK.

331
00:17:08,075 --> 00:17:11,336
So Ludascope can be used to generate ideas for level layouts

332
00:17:12,016 --> 00:17:14,757
or for populating your existing level designs with details.

333
00:17:15,837 --> 00:17:18,718
But you can also use it to come up with rules and ideas

334
00:17:18,778 --> 00:17:21,979
for procedural level generation without having to build a game

335
00:17:22,419 --> 00:17:24,559
or do any scripting or any programming.

336
00:17:26,980 --> 00:17:29,160
Perhaps the most valuable thing about Ludascope

337
00:17:29,481 --> 00:17:31,801
is that it gets you to think about your level design process

338
00:17:31,841 --> 00:17:33,201
in a bunch of interesting new ways.

339
00:17:34,084 --> 00:17:37,225
For example, I now think much more about my level design

340
00:17:37,265 --> 00:17:39,626
in terms of design rules and patterns,

341
00:17:40,367 --> 00:17:42,187
even when I'm not using tools.

342
00:17:44,908 --> 00:17:47,269
I just need to warn you, though, that Ludoscope is not

343
00:17:47,309 --> 00:17:48,290
for the faint-hearted.

344
00:17:49,130 --> 00:17:51,051
It requires you to think really hard

345
00:17:51,091 --> 00:17:52,751
in often very abstract ways.

346
00:17:53,772 --> 00:17:55,472
And it can take a bit of experimentation

347
00:17:55,492 --> 00:17:57,293
to figure out which of your design problems

348
00:17:57,333 --> 00:17:58,113
can benefit from it.

349
00:18:00,338 --> 00:18:02,380
So like Machinations, Ludoscope was also

350
00:18:02,440 --> 00:18:04,781
developed by Joris Dormans.

351
00:18:04,841 --> 00:18:05,742
He's a very clever guy.

352
00:18:06,543 --> 00:18:08,284
And you should contact Joris directly

353
00:18:08,344 --> 00:18:10,605
if you're interested in using this tool and being

354
00:18:10,625 --> 00:18:11,266
a beta tester.

355
00:18:13,928 --> 00:18:14,208
Sorry.

356
00:18:15,248 --> 00:18:18,190
Again, that's his email address.

357
00:18:23,594 --> 00:18:25,435
So this next tool.

358
00:18:26,866 --> 00:18:29,528
was built by researchers at the University of Washington's

359
00:18:29,588 --> 00:18:30,709
Center for Game Science.

360
00:18:30,769 --> 00:18:31,530
Is anyone from there?

361
00:18:32,070 --> 00:18:32,711
Anyone there?

362
00:18:33,551 --> 00:18:34,452
Anyone here from there?

363
00:18:34,472 --> 00:18:34,912
I don't want to.

364
00:18:36,133 --> 00:18:37,494
Yeah.

365
00:18:37,995 --> 00:18:38,715
That's easier then.

366
00:18:39,476 --> 00:18:42,058
It's a level editor for their science puzzle game, Refraction,

367
00:18:43,239 --> 00:18:45,321
as well as being a mixed initiative design

368
00:18:45,361 --> 00:18:49,144
tool for Refraction's game levels.

369
00:18:50,425 --> 00:18:53,047
It also features computer-aided progression design.

370
00:18:54,355 --> 00:18:57,877
So if you remember, back to skill atoms and skill chains

371
00:18:59,117 --> 00:19:02,859
that I covered earlier, this progression design feature,

372
00:19:03,139 --> 00:19:05,060
which you can see on the top right there,

373
00:19:05,960 --> 00:19:07,341
is essentially the same kind of,

374
00:19:07,381 --> 00:19:09,482
well actually, it's all those images.

375
00:19:10,222 --> 00:19:11,782
It's actually the same kind of thing,

376
00:19:12,143 --> 00:19:14,003
but it uses a matrix style interface

377
00:19:14,484 --> 00:19:16,164
and it adds computational support.

378
00:19:16,865 --> 00:19:18,565
So this means you're no longer dealing

379
00:19:18,585 --> 00:19:19,706
with a giant, messy graph.

380
00:19:20,720 --> 00:19:23,161
And I think this shows how powerful even simple

381
00:19:23,262 --> 00:19:25,683
computational support for design can be,

382
00:19:27,203 --> 00:19:31,325
taking you off paper and giving you a little bit extra,

383
00:19:31,905 --> 00:19:35,347
something that goes beyond Excel formulas, for example.

384
00:19:37,708 --> 00:19:39,429
Unfortunately, you can't use this tool

385
00:19:39,889 --> 00:19:41,270
because it was built specifically

386
00:19:41,310 --> 00:19:43,111
for designing levels for the game Refraction.

387
00:19:45,031 --> 00:19:47,272
But I think it's valuable simply as an idea.

388
00:19:48,230 --> 00:19:51,191
And I think this idea is, what would happen

389
00:19:51,431 --> 00:19:54,913
if we started adding support for thinking and solving design

390
00:19:54,953 --> 00:19:58,214
problems into our level editing and world building tools?

391
00:19:59,394 --> 00:20:00,515
Like, what would that be like?

392
00:20:01,255 --> 00:20:02,336
Like, I think it might be good.

393
00:20:04,517 --> 00:20:06,117
One thing to bear in mind with this

394
00:20:06,397 --> 00:20:08,238
is that Refraction is a casual puzzle game

395
00:20:08,258 --> 00:20:11,980
with a relatively small feature set and linear gameplay

396
00:20:12,000 --> 00:20:12,500
progression.

397
00:20:13,480 --> 00:20:15,101
So the tools approach would have to be

398
00:20:15,141 --> 00:20:17,602
adapted for more complex progression design needs.

399
00:20:20,559 --> 00:20:23,262
So here's one of my messages for today.

400
00:20:24,223 --> 00:20:25,244
Let's make game design tools.

401
00:20:27,326 --> 00:20:29,669
So I've shown you some design tools that do

402
00:20:29,689 --> 00:20:30,610
a bunch of different things.

403
00:20:31,671 --> 00:20:35,815
But I think there's more scope for experimenting and trying

404
00:20:35,835 --> 00:20:36,436
to make some tools.

405
00:20:37,377 --> 00:20:39,039
I think the first step is psychological.

406
00:20:40,108 --> 00:20:43,570
We need to say in this industry, we need to say, hey,

407
00:20:43,611 --> 00:20:45,032
we're pretty good at making tools, right?

408
00:20:45,832 --> 00:20:48,394
We're pretty good at making tools that help us build games.

409
00:20:48,975 --> 00:20:50,856
But maybe it's time we started thinking

410
00:20:50,916 --> 00:20:54,159
about making tools that help us design them as well.

411
00:20:58,162 --> 00:21:00,103
For a number of reasons, I think that's

412
00:21:00,163 --> 00:21:03,226
a bigger and arguably much more interesting challenge.

413
00:21:04,987 --> 00:21:08,630
No disrespect to tool designers who make level editors.

414
00:21:10,540 --> 00:21:16,741
So taking my own advice on this, here's a tool that I've been developing actually as

415
00:21:16,781 --> 00:21:20,782
part of some research I did at the Conservatoire National des Arts Métiers in Paris.

416
00:21:21,303 --> 00:21:22,423
Thanks Stéphane for coming.

417
00:21:23,183 --> 00:21:24,923
And Flinders University in Australia.

418
00:21:27,344 --> 00:21:33,566
And it's been helping me on my own projects and some other designers' projects, usually

419
00:21:33,606 --> 00:21:33,966
my friends.

420
00:21:35,676 --> 00:21:38,037
For this tool, I was inspired by the progression planning

421
00:21:38,097 --> 00:21:40,479
ideas in the refraction level editor tool

422
00:21:40,519 --> 00:21:42,440
that I just talked about.

423
00:21:43,500 --> 00:21:45,822
And I decided to build a standalone tool

424
00:21:46,302 --> 00:21:48,343
that I can use to plan progression structures

425
00:21:48,383 --> 00:21:50,824
for my own games in a variety of genres.

426
00:21:52,065 --> 00:21:55,107
So for this, I gave Progressimo a graph-based interface

427
00:21:55,187 --> 00:21:57,508
to cater for not just linear, but also open world

428
00:21:57,568 --> 00:21:58,389
and branching structures.

429
00:21:59,602 --> 00:22:01,882
It also provides some number crunching

430
00:22:01,962 --> 00:22:04,663
to help you calculate and visualize changes to game state,

431
00:22:05,183 --> 00:22:06,584
to manage things like gameplay gates,

432
00:22:07,384 --> 00:22:09,545
also to get ballpark answers to questions like,

433
00:22:09,745 --> 00:22:11,165
when will the player run out of money?

434
00:22:11,445 --> 00:22:13,366
Or does every path through this mission

435
00:22:13,406 --> 00:22:14,786
provide the player with enough ammo?

436
00:22:17,467 --> 00:22:20,248
So far, I've used this tool on a top-down shooter,

437
00:22:20,328 --> 00:22:22,288
an adventure game, and a casual strategy game.

438
00:22:23,229 --> 00:22:25,269
And other designers I know have been using it

439
00:22:25,629 --> 00:22:28,750
on their RPGs and an open-world game.

440
00:22:29,768 --> 00:22:31,628
And they've been using it for designing missions

441
00:22:31,688 --> 00:22:34,469
or working out how missions fit together and work concurrently

442
00:22:34,509 --> 00:22:35,029
within the game.

443
00:22:36,550 --> 00:22:39,750
I've also been using it to export data for use in a game

444
00:22:40,471 --> 00:22:42,831
and also to drive procedural content generation.

445
00:22:46,652 --> 00:22:48,873
This tool was built to help with the kind of problems posed

446
00:22:48,893 --> 00:22:50,093
by progression-heavy games.

447
00:22:52,310 --> 00:22:57,416
But it's not really suited to games

448
00:22:57,476 --> 00:23:02,042
where progression is primarily driven by emergent system

449
00:23:02,062 --> 00:23:02,502
dynamics.

450
00:23:03,203 --> 00:23:06,027
So for those games, I would use machinations,

451
00:23:06,527 --> 00:23:09,591
which is the tool I talked about at the beginning of this talk.

452
00:23:12,495 --> 00:23:16,396
So if anyone is interested in using progressive mode,

453
00:23:16,596 --> 00:23:17,597
please do give me a shout.

454
00:23:17,817 --> 00:23:21,738
I'm running a fairly low key closed beta at the moment,

455
00:23:22,338 --> 00:23:24,559
and I'd love to get more feedback and input.

456
00:23:25,479 --> 00:23:26,519
So that's my email address there.

457
00:23:29,540 --> 00:23:33,441
So why bother taking an interest in the obscure, fringe,

458
00:23:33,701 --> 00:23:36,702
and desperately uncool world of game design tools?

459
00:23:37,950 --> 00:23:40,572
Well, first off, when you're using a game design tool,

460
00:23:40,972 --> 00:23:43,033
you're adding structure to your process.

461
00:23:43,433 --> 00:23:46,094
And this gives you a way to organize, visualize,

462
00:23:46,894 --> 00:23:49,356
and sort through your ideas in a way that

463
00:23:49,376 --> 00:23:50,476
can be quite beneficial.

464
00:23:52,297 --> 00:23:54,538
Another benefit is being able to have

465
00:23:54,578 --> 00:23:56,839
what I like to think of as a safe space

466
00:23:56,879 --> 00:23:58,260
policy for your design moves.

467
00:23:59,000 --> 00:24:01,101
And by this, I mean that some of these tools

468
00:24:01,121 --> 00:24:03,822
can let you define your own design constraints

469
00:24:04,402 --> 00:24:06,523
and then help you to work within those constraints.

470
00:24:07,505 --> 00:24:09,325
So this can give you a sense of security

471
00:24:09,866 --> 00:24:12,266
that can free you up to take risks and attempt

472
00:24:12,366 --> 00:24:14,067
more ambitious, complex designs.

473
00:24:15,768 --> 00:24:18,469
Design tools can also allow you to work

474
00:24:18,549 --> 00:24:20,829
on more parts of the design without necessarily waiting

475
00:24:20,849 --> 00:24:23,810
for the game to be built or a particular feature

476
00:24:23,851 --> 00:24:26,732
to be prototyped, lessening design's reliance

477
00:24:26,792 --> 00:24:27,292
on production.

478
00:24:28,912 --> 00:24:32,774
And finally, using design tools can broaden your mind

479
00:24:32,834 --> 00:24:33,454
and challenge you.

480
00:24:34,852 --> 00:24:36,833
I mean, they introduce you to new ways of thinking,

481
00:24:36,893 --> 00:24:39,215
and these new ways can impact the way you design,

482
00:24:39,375 --> 00:24:40,556
even when you're not using tools.

483
00:24:42,037 --> 00:24:43,598
For example, I've noticed the way

484
00:24:45,520 --> 00:24:49,683
that learning new ways to formalize and abstract my ideas

485
00:24:49,923 --> 00:24:52,245
has really changed the way I go about structuring

486
00:24:52,285 --> 00:24:56,288
and noting down my ideas, even on paper and in my head.

487
00:24:59,551 --> 00:25:02,633
There are, of course, some big limitations and pitfalls

488
00:25:02,693 --> 00:25:04,255
to using these tools.

489
00:25:05,629 --> 00:25:06,849
Some of them take a while to learn,

490
00:25:07,530 --> 00:25:10,512
and they can require you to think quite hard about how

491
00:25:10,532 --> 00:25:12,714
to best to use them on your particular design problem.

492
00:25:13,975 --> 00:25:16,477
It can be worth it, but sometimes you're

493
00:25:16,497 --> 00:25:17,578
spending a lot of time and effort

494
00:25:17,618 --> 00:25:19,299
before you're getting to a stage where you're really

495
00:25:19,319 --> 00:25:20,560
getting value out of them.

496
00:25:22,161 --> 00:25:26,024
For example, with machinations or any notation system,

497
00:25:26,404 --> 00:25:28,826
you not only have to learn the notation syntax,

498
00:25:29,186 --> 00:25:30,787
you have to learn how to recognize

499
00:25:30,868 --> 00:25:34,130
what good game mechanics look like in an abstract system

500
00:25:34,150 --> 00:25:34,350
level.

501
00:25:35,440 --> 00:25:37,081
And this requires a lot more literacy

502
00:25:37,261 --> 00:25:39,962
than playtesting a prototype and asking yourself

503
00:25:40,002 --> 00:25:40,823
whether you're having fun.

504
00:25:43,504 --> 00:25:46,305
Design tools tend to formalize and abstract your ideas,

505
00:25:46,445 --> 00:25:49,327
so some aspects of interaction and game feel are lost.

506
00:25:51,468 --> 00:25:53,149
And finally, if you remember what

507
00:25:53,189 --> 00:25:55,390
I said earlier about tools adding structure

508
00:25:55,450 --> 00:25:59,692
to your design process, well, some of you might be thinking,

509
00:25:59,732 --> 00:26:03,173
and you're right, any tool has its own agenda and biases.

510
00:26:04,324 --> 00:26:06,606
It acts like a kind of filter on your ideas.

511
00:26:07,106 --> 00:26:10,689
And by this I mean it emphasizes some qualities of your design

512
00:26:11,009 --> 00:26:12,470
and it de-emphasizes others.

513
00:26:13,992 --> 00:26:15,693
But I think as long as you bear this in mind

514
00:26:15,853 --> 00:26:18,555
and you're aware of what the tool's agenda is,

515
00:26:19,256 --> 00:26:20,457
it's not that much of a problem.

516
00:26:23,359 --> 00:26:26,181
And finally, it's totally possible to misinterpret

517
00:26:26,241 --> 00:26:30,004
your models and get fake positives and fake negatives

518
00:26:30,084 --> 00:26:32,987
about how fun or robust your game actually is.

519
00:26:33,952 --> 00:26:36,214
especially if you're new to using the tool.

520
00:26:39,196 --> 00:26:40,737
So here are my suggestions about how

521
00:26:40,757 --> 00:26:42,237
to approach game design tools.

522
00:26:43,498 --> 00:26:46,700
In general, my advice would be to adopt a toolbox approach.

523
00:26:48,882 --> 00:26:50,883
This is because I think the nature of game design

524
00:26:50,943 --> 00:26:54,625
is such that no one tool or approach is ever

525
00:26:54,665 --> 00:26:58,368
going to cover all our design needs for all game genres.

526
00:26:59,413 --> 00:27:00,934
So think of game design tools as more

527
00:27:01,594 --> 00:27:03,955
about adding new approaches and techniques

528
00:27:04,015 --> 00:27:05,195
to your existing repertoire.

529
00:27:05,875 --> 00:27:08,476
So you have a range of tools to hand

530
00:27:09,096 --> 00:27:11,337
to cater for different needs as they may arise.

531
00:27:11,357 --> 00:27:16,438
In my experience, game design tools

532
00:27:16,478 --> 00:27:18,938
can help complement other more traditional methods.

533
00:27:19,679 --> 00:27:22,699
So they can be useful for filling in gaps in your process

534
00:27:22,759 --> 00:27:24,900
where you feel you aren't getting enough information

535
00:27:26,380 --> 00:27:28,261
within your existing design workflow.

536
00:27:29,566 --> 00:27:32,027
So briefly, here are some examples of workflows

537
00:27:32,468 --> 00:27:33,928
where design tools have been integrated.

538
00:27:34,989 --> 00:27:39,191
I asked Dan Cook from SpryFox about how

539
00:27:39,231 --> 00:27:42,393
he uses tools in his process on games

540
00:27:42,433 --> 00:27:44,674
like AlphaBear and Steambirds.

541
00:27:46,055 --> 00:27:48,816
And according to Dan, when he's fleshing out a new game concept,

542
00:27:49,357 --> 00:27:52,238
he uses machinations and skill atoms.

543
00:27:52,799 --> 00:27:55,620
And they help him figure out resource flow, the game's

544
00:27:55,660 --> 00:27:59,062
learnable skills, and even how the monetization might work.

545
00:28:00,177 --> 00:28:01,498
And he told me that by doing this,

546
00:28:02,058 --> 00:28:04,679
he's able to figure out whether the idea is even worth

547
00:28:04,719 --> 00:28:06,220
spending time on to prototype.

548
00:28:07,841 --> 00:28:10,322
Once the game has reached the prototyping stage,

549
00:28:10,862 --> 00:28:13,423
Dan then uses skill atoms and machinations again,

550
00:28:13,443 --> 00:28:16,865
this time to analyze problems that the team have identified

551
00:28:16,925 --> 00:28:17,745
during playtesting.

552
00:28:19,066 --> 00:28:20,166
One thing that's interesting to note

553
00:28:20,346 --> 00:28:23,027
is that Dan uses machinations purely as a notation system

554
00:28:23,147 --> 00:28:25,308
and doesn't find the interactive simulation

555
00:28:25,368 --> 00:28:27,990
aspect of the tool super useful for his purposes.

556
00:28:30,657 --> 00:28:33,579
I also talked to the developers of the hybrid platformer RPG

557
00:28:33,659 --> 00:28:36,201
Wanderer about how they use Odyssey Draft as part

558
00:28:36,221 --> 00:28:37,122
of their design workflow.

559
00:28:38,703 --> 00:28:41,345
The project uses Odyssey as both a design tool

560
00:28:41,585 --> 00:28:42,486
and an authoring tool.

561
00:28:43,186 --> 00:28:46,149
And they use it for developing storyboards and quest

562
00:28:46,229 --> 00:28:48,490
ideas at the concept and narrative design stage,

563
00:28:49,191 --> 00:28:51,753
and then continue to use it to produce their design

564
00:28:51,793 --> 00:28:53,735
and narrative assets for the game.

565
00:28:56,692 --> 00:28:59,533
Finally, here is the design workflow for an action puzzle

566
00:28:59,553 --> 00:29:00,754
game that I've been working on.

567
00:29:01,675 --> 00:29:04,437
So my process on this project is that I prototype and play

568
00:29:04,757 --> 00:29:05,637
test some gameplay.

569
00:29:06,538 --> 00:29:08,699
Then I use any gameplay I've found fun

570
00:29:08,859 --> 00:29:10,560
as a basis for abstracting it out

571
00:29:10,621 --> 00:29:14,323
into a set of level design patterns and gameplay concepts.

572
00:29:15,404 --> 00:29:18,045
Next, I bring these patterns and concepts into Progressimo,

573
00:29:19,126 --> 00:29:20,807
and I create a progression structure

574
00:29:20,987 --> 00:29:22,628
for how they're introduced and used

575
00:29:22,688 --> 00:29:23,569
over the course of the game.

576
00:29:24,718 --> 00:29:27,920
Then I bring both my design patterns and my progression

577
00:29:27,940 --> 00:29:29,581
structure into Ludascope.

578
00:29:30,062 --> 00:29:33,984
And within Ludascope, I generate playable level designs,

579
00:29:34,064 --> 00:29:36,606
which I then playtest and come up

580
00:29:36,646 --> 00:29:38,968
with new ideas for design patterns.

581
00:29:39,288 --> 00:29:41,350
And I keep iterating over this cycle.

582
00:29:43,230 --> 00:29:45,470
So using a process like this has been interesting

583
00:29:45,630 --> 00:29:48,751
because it's allowed me to focus on the high-level, big picture

584
00:29:49,051 --> 00:29:51,872
of the game as well as the low-level details,

585
00:29:52,172 --> 00:29:53,932
but almost simultaneously, right?

586
00:29:54,612 --> 00:29:58,033
Instead of the traditional stage-based process

587
00:29:58,073 --> 00:30:00,333
of having to lock down key aspects of the progression

588
00:30:00,373 --> 00:30:03,334
and gameplay before the levels are designed.

589
00:30:04,754 --> 00:30:05,955
And I'm not doing this in code.

590
00:30:06,335 --> 00:30:08,575
I'm doing this with design tools.

591
00:30:10,523 --> 00:30:13,404
So I hope that's given you a bit of an introduction

592
00:30:13,424 --> 00:30:14,904
to what game design tools are.

593
00:30:15,044 --> 00:30:16,425
And if you're still interested, I

594
00:30:16,465 --> 00:30:19,946
hope you do some of your own research to find out more.

595
00:30:20,086 --> 00:30:23,207
I don't think we have any time for questions.

596
00:30:24,107 --> 00:30:27,168
But I'll be in the wrap-up room, wherever the hell that is.

597
00:30:27,748 --> 00:30:29,068
But thank you very much.

