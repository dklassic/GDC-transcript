1
00:00:09,761 --> 00:00:12,003
Super happy to be here with the Tech Toolbox 2017.

2
00:00:12,003 --> 00:00:12,824
Who made that?

3
00:00:12,824 --> 00:00:14,705
It's awful.

4
00:00:14,705 --> 00:00:14,845
Uh.

5
00:00:14,845 --> 00:00:22,171
As you can see, things are going well for us here at the Tech Toolbox.

6
00:00:22,171 --> 00:00:23,532
Now we're actually all ready to go.

7
00:00:23,532 --> 00:00:26,114
I don't have a lot of things to say.

8
00:00:26,114 --> 00:00:27,115
But thanks for joining.

9
00:00:27,115 --> 00:00:29,817
If this is your first Tech Toolbox, let me give you a super quick introduction.

10
00:00:29,817 --> 00:00:33,120
Something has been becoming more and more clear to me

11
00:00:33,120 --> 00:00:36,643
that to be a tool designer should actually be a hat that you wear

12
00:00:36,643 --> 00:00:39,325
if your browser crashes.

13
00:00:40,700 --> 00:00:46,928
It should be a hat that you wear.

14
00:00:46,928 --> 00:00:51,834
You know, even if you're in a small studio or a single developer, you wear many hats.

15
00:00:51,834 --> 00:00:55,078
You're the engineer or the marketer or whatever, but you should also consider...

16
00:00:55,803 --> 00:00:59,445
being a tool designer and dedicating some focus to it.

17
00:00:59,445 --> 00:01:03,126
Because the tools, they often influence the final product,

18
00:01:03,126 --> 00:01:05,647
game design, but they're also at the same time invisible

19
00:01:05,647 --> 00:01:07,028
because they're made for the developers

20
00:01:07,028 --> 00:01:09,449
and not for the gamers or for the players.

21
00:01:09,449 --> 00:01:11,130
And I think they're not talked about often enough,

22
00:01:11,130 --> 00:01:13,731
especially the ones that only live for one project

23
00:01:13,731 --> 00:01:16,852
but had a huge impact and were tailored specifically

24
00:01:16,852 --> 00:01:18,533
to solve problems within that project.

25
00:01:19,113 --> 00:01:22,534
And that's the sort of stuff I hope we'll be talking about today.

26
00:01:22,534 --> 00:01:28,837
I'm going to give it off right away to the first speaker, which is Michael Cook from

27
00:01:28,837 --> 00:01:39,561
the University of Falmouth.

28
00:01:39,561 --> 00:01:41,702
Let's give him a big hand.

29
00:01:41,702 --> 00:01:42,423
There we go.

30
00:01:42,423 --> 00:01:44,243
Let's try that one.

31
00:01:44,243 --> 00:01:45,284
Yeah.

32
00:01:45,284 --> 00:01:45,744
Are we good?

33
00:01:45,744 --> 00:01:46,064
Yeah.

34
00:01:46,064 --> 00:01:46,304
Okay.

35
00:01:46,304 --> 00:01:47,585
All right.

36
00:01:48,380 --> 00:01:49,840
Hey everyone, my name is Michael Cook.

37
00:01:49,840 --> 00:01:52,421
I'm a researcher in procedural generation,

38
00:01:52,421 --> 00:01:54,202
creativity, and AI at Falmouth University

39
00:01:54,202 --> 00:01:55,903
and the Metamakers Institute.

40
00:01:55,903 --> 00:01:57,824
I also organize the procedural generation jam

41
00:01:57,824 --> 00:01:59,364
and in my spare time I make games.

42
00:01:59,364 --> 00:02:01,545
So I'm really into procedural generation

43
00:02:01,545 --> 00:02:03,646
and I meet loads of people who either want to be

44
00:02:03,646 --> 00:02:06,827
or already are and over time lots of those experiences

45
00:02:06,827 --> 00:02:09,809
have led to me building this tool called Dynash.

46
00:02:09,809 --> 00:02:11,469
That's enough slides.

47
00:02:11,469 --> 00:02:14,551
So I'm gonna be demoing mostly today.

48
00:02:14,551 --> 00:02:16,451
I really love to walk you through this tool.

49
00:02:16,780 --> 00:02:21,506
which may end up being ill-advised, but I'll try and give you just a little flavor.

50
00:02:21,506 --> 00:02:25,591
But the idea behind Dynesh is that it lets people look at procedural generators from a different angle,

51
00:02:25,591 --> 00:02:28,996
and it pulls in some ideas from research and some of my colleagues' research as well.

52
00:02:28,996 --> 00:02:33,041
It's built in Unity, but it is completely open source, so if you don't use Unity,

53
00:02:33,041 --> 00:02:35,864
maybe you can pull some of these ideas out and they'll be relevant to you.

54
00:02:36,823 --> 00:02:39,744
I don't want to talk too much about setup, but it's quite easy to connect a generator

55
00:02:39,744 --> 00:02:41,425
to Dhanesh.

56
00:02:41,425 --> 00:02:45,486
It just requires one or two lines of code to tell Dhanesh where your generator is, what

57
00:02:45,486 --> 00:02:49,087
parameters you're interested in modifying, maybe how to visualize it on the screen.

58
00:02:49,087 --> 00:02:51,248
And when it loads in, you see something like this.

59
00:02:51,248 --> 00:02:56,090
So we're actually using a dungeon slash cave generator that I pulled down from a tutorial.

60
00:02:56,090 --> 00:03:01,251
And the reason I did that is because often, lots of people tell me they load procedural

61
00:03:01,251 --> 00:03:05,073
generators that they found in tutorials, and it's often very hard to solve problems in

62
00:03:05,073 --> 00:03:05,253
them.

63
00:03:05,333 --> 00:03:08,515
Maybe you've been handed this generator by a programmer and you're an artist who doesn't

64
00:03:08,515 --> 00:03:11,618
really want to dig around in code, but this generator has problems.

65
00:03:11,618 --> 00:03:16,082
So maybe it generates dungeons that are okay most of the time, but occasionally there's

66
00:03:16,082 --> 00:03:19,044
like an island that isn't connected to the rest of the dungeon, like this one here.

67
00:03:19,044 --> 00:03:23,027
So we want to solve this problem, and we could just sit here all day and change parameters,

68
00:03:23,027 --> 00:03:24,068
and Darnesh lets you do that.

69
00:03:24,068 --> 00:03:27,651
The parameters are loaded in on the right-hand side, and just like in Unity itself, you can

70
00:03:27,651 --> 00:03:30,313
fiddle with them and generate more content, but that doesn't really tell you anything.

71
00:03:31,250 --> 00:03:35,113
So the next thing you can do is load metrics into Dinesh.

72
00:03:35,113 --> 00:03:38,395
So if you have an idea that you want to capture,

73
00:03:38,395 --> 00:03:40,316
like how dense the level is maybe,

74
00:03:40,316 --> 00:03:42,637
like what percentage of the tiles are solid in your map,

75
00:03:42,637 --> 00:03:44,478
you can write a few lines of code.

76
00:03:44,478 --> 00:03:46,279
So usually these metrics are quite short.

77
00:03:46,279 --> 00:03:47,980
And Dinesh can load them in, and every time

78
00:03:47,980 --> 00:03:50,542
you generate content, it'll give you some feedback.

79
00:03:50,542 --> 00:03:51,422
So we've got a couple of metrics here

80
00:03:51,422 --> 00:03:52,203
that we're gonna look at.

81
00:03:52,203 --> 00:03:53,183
One's density.

82
00:03:53,183 --> 00:03:55,465
So on the left-hand side, you can see

83
00:03:55,465 --> 00:03:57,626
that this map here is 52% dense.

84
00:03:57,626 --> 00:03:59,067
So 52% of the tiles are solid.

85
00:03:59,804 --> 00:04:06,047
and it's .9 connected, which means that 90% of the open tiles are accessible in the largest chunk.

86
00:04:06,047 --> 00:04:08,648
So what we want to do is we want to get to 100% connectedness.

87
00:04:08,648 --> 00:04:11,890
So again, we could sit here all day and fiddle with parameters and things like that,

88
00:04:11,890 --> 00:04:15,792
but Dhanesh has much cooler tools, cooler ways of helping you look at these things.

89
00:04:15,792 --> 00:04:18,093
And one of those is expressive range analysis.

90
00:04:18,093 --> 00:04:21,854
Expressive range analysis was first proposed by Gillian Smith and Jim Whitehead.

91
00:04:21,854 --> 00:04:24,215
Gillian's a professor at Northeastern now.

92
00:04:24,215 --> 00:04:26,517
Jim works at UCSC here in California.

93
00:04:27,203 --> 00:04:29,245
And expressive range analysis is a really cool way

94
00:04:29,245 --> 00:04:31,247
of looking at a procedural generator's output.

95
00:04:31,247 --> 00:04:34,189
So you take two metrics that you have,

96
00:04:34,189 --> 00:04:36,251
two ways of thinking about your content,

97
00:04:36,251 --> 00:04:38,233
and Dinesh will go away and sample this generator

98
00:04:38,233 --> 00:04:40,335
hundreds of times, and each time it samples it,

99
00:04:40,335 --> 00:04:42,217
it'll write down those metrics,

100
00:04:42,217 --> 00:04:43,678
and it'll put a dot on a histogram.

101
00:04:43,678 --> 00:04:46,060
And the more dots appear on one particular point,

102
00:04:46,060 --> 00:04:48,082
the whiter that dot becomes.

103
00:04:48,082 --> 00:04:50,884
So on this histogram here, on the x-axis,

104
00:04:50,884 --> 00:04:51,745
we can see density.

105
00:04:52,566 --> 00:04:54,547
And each dot represents a piece of content,

106
00:04:54,547 --> 00:04:57,169
or maybe 10 pieces of content, generated by this generator.

107
00:04:57,169 --> 00:04:59,170
And the y-axis is connectedness.

108
00:04:59,170 --> 00:05:01,771
So points at the top of this, and if we hover over,

109
00:05:01,771 --> 00:05:03,812
Dinesh actually shows us an example.

110
00:05:03,812 --> 00:05:05,553
Points at the top of this histogram

111
00:05:05,553 --> 00:05:07,554
represent content that was completely connected

112
00:05:07,554 --> 00:05:09,775
when it was generated, or very close to completely connected.

113
00:05:09,775 --> 00:05:11,897
And if we hover over points at the bottom,

114
00:05:11,897 --> 00:05:13,197
we can see that this one is broken up

115
00:05:13,197 --> 00:05:14,478
into loads of different islands.

116
00:05:15,219 --> 00:05:20,422
And so what this histogram kind of shows us is the spread of expressivity and the range of possibilities.

117
00:05:20,422 --> 00:05:23,924
How often does your generator cause these outliers and what shape do they take?

118
00:05:23,924 --> 00:05:28,848
So now with this expressive range analysis, what we could do is we could sit here and change parameters every day

119
00:05:28,848 --> 00:05:34,051
and then we could look at the expressive range analysis and see whether we've managed to fix this problem.

120
00:05:34,051 --> 00:05:36,393
Because kind of what we want to do here is push all of these points up.

121
00:05:36,766 --> 00:05:38,808
so the average output is more connected.

122
00:05:38,808 --> 00:05:40,529
But actually we can do better than that.

123
00:05:40,529 --> 00:05:42,091
We can ask Dinesh to help us with it.

124
00:05:42,091 --> 00:05:44,473
Because the thing with procedural generators is,

125
00:05:44,473 --> 00:05:46,415
and the thing that people often have trouble with,

126
00:05:46,415 --> 00:05:48,757
is that thinking about it in terms of parameters

127
00:05:48,757 --> 00:05:50,278
are like inputs to a black box.

128
00:05:50,278 --> 00:05:51,439
So you can change a parameter,

129
00:05:51,439 --> 00:05:52,240
but you might not really know

130
00:05:52,240 --> 00:05:53,581
what impact it has on the output.

131
00:05:54,252 --> 00:05:58,577
It would be much easier if we could talk about procedural generators in terms of the things that come out the other end.

132
00:05:58,577 --> 00:06:00,779
And that's what metrics let us do.

133
00:06:00,779 --> 00:06:03,142
So Dinesh also has this feature called auto-tuning.

134
00:06:03,142 --> 00:06:08,548
But we can say to Dinesh, what we really want is output that is 100% connected,

135
00:06:08,548 --> 00:06:12,493
so we can say a connectedness of 1.0, and maybe 50% dense.

136
00:06:12,493 --> 00:06:14,835
We don't want it to just be a completely empty room.

137
00:06:15,476 --> 00:06:17,437
And then we can ask Dhanesh to start auto-tuning,

138
00:06:17,437 --> 00:06:19,298
and it'll go away and do all of that work for us.

139
00:06:19,298 --> 00:06:22,879
It'll, maybe I'll risk it, I think I have enough time.

140
00:06:22,879 --> 00:06:25,460
It'll use a number of algorithms that it has

141
00:06:25,460 --> 00:06:27,741
to search the parameter space, and each time it searches,

142
00:06:27,741 --> 00:06:30,722
it's looking at how the expressive range is changing.

143
00:06:30,722 --> 00:06:31,703
That progress bar isn't in real time.

144
00:06:31,703 --> 00:06:34,784
It occasionally terminates early if it finds a solution,

145
00:06:34,784 --> 00:06:37,085
and it should do in this sense, though this isn't too difficult.

146
00:06:37,085 --> 00:06:40,547
So what this allows you to do is ask Dhanesh

147
00:06:40,547 --> 00:06:43,008
for a space of outputs rather than talking about

148
00:06:43,008 --> 00:06:44,928
your procedural generator in terms of its inputs.

149
00:06:45,966 --> 00:06:50,310
And it's not just that you just have to trust it when it comes out the other end,

150
00:06:50,310 --> 00:06:53,593
you can run expressive range analyses to confirm the output,

151
00:06:53,593 --> 00:06:57,237
which we'll do when this ends, if it ends.

152
00:06:57,237 --> 00:07:00,039
I don't have time to look into the other features that DynAsh has right now,

153
00:07:00,039 --> 00:07:03,282
but you can do things like look at the complete parameter space

154
00:07:03,282 --> 00:07:05,224
by doing a randomized expressive range analysis.

155
00:07:05,224 --> 00:07:07,807
Or you can ask it to search through your code for parameters

156
00:07:07,807 --> 00:07:10,809
that you haven't considered as levers for your generator, but they could be.

157
00:07:11,964 --> 00:07:15,425
So fortunately this did, and I have no idea what parameterization it's going to return,

158
00:07:15,425 --> 00:07:17,425
so let's see what kind of things it's generating.

159
00:07:17,425 --> 00:07:19,766
Okay, well, they're definitely 100% connected.

160
00:07:19,766 --> 00:07:23,607
This may not be exactly what you were imagining, so you can go back and ask Dinesh, you can

161
00:07:23,607 --> 00:07:27,108
implement more constraints, you can turn off parameters to stop it fiddling with certain

162
00:07:27,108 --> 00:07:31,149
things, but we can confirm that this did what we asked it to by running another expressive

163
00:07:31,149 --> 00:07:31,849
range analysis.

164
00:07:32,409 --> 00:07:33,790
And if you remember what that last one looked like

165
00:07:33,790 --> 00:07:35,671
with a long tail of results coming all the way down

166
00:07:35,671 --> 00:07:37,852
the Y axis, hopefully, fingers crossed,

167
00:07:37,852 --> 00:07:40,594
when this expressive range analysis completes,

168
00:07:40,594 --> 00:07:42,395
we should see that all of those points have been shoved

169
00:07:42,395 --> 00:07:43,576
up towards the top of the histogram.

170
00:07:43,576 --> 00:07:45,517
And you can see we've got a couple of outliers.

171
00:07:45,517 --> 00:07:48,158
Let's hover over this one to see.

172
00:07:48,158 --> 00:07:50,079
This one has sort of cut off diagonally,

173
00:07:50,079 --> 00:07:52,281
but most of the data points are actually so connected

174
00:07:52,281 --> 00:07:54,582
that they're right at the ceiling of this histogram.

175
00:07:56,936 --> 00:08:01,978
To give you another idea of the kind of weird outputs that it can find, right now it's hard

176
00:08:01,978 --> 00:08:06,320
to tell Dhanesh to give you a number of options, but we're still developing this so there's

177
00:08:06,320 --> 00:08:10,442
new features like ways of exploring these through visual examples and automatic optimization

178
00:08:10,442 --> 00:08:11,423
and things like that.

179
00:08:17,898 --> 00:08:19,759
So Danesh is still in development,

180
00:08:19,759 --> 00:08:21,900
and it's a research tool, which means it looks ugly.

181
00:08:21,900 --> 00:08:23,401
It breaks things sometimes.

182
00:08:23,401 --> 00:08:25,983
It uses meta programming to dive deep inside your game, which

183
00:08:25,983 --> 00:08:28,384
means that it might jumble things up and break things.

184
00:08:28,384 --> 00:08:30,325
So there's lots of warnings everywhere

185
00:08:30,325 --> 00:08:31,406
to back up before you use it.

186
00:08:31,406 --> 00:08:34,087
But what I really need is people who use procedural generation

187
00:08:34,087 --> 00:08:35,648
or people who want to use procedural generation

188
00:08:35,648 --> 00:08:38,010
but have never done it before to download Danesh,

189
00:08:38,010 --> 00:08:39,651
have a play with it, and let me know what they think.

190
00:08:40,311 --> 00:08:45,393
So it's available online, there's papers and extra information at darnesh.procjam.com

191
00:08:45,393 --> 00:08:48,654
or alternatively you can talk to me on Twitter or maybe after this session

192
00:08:48,654 --> 00:08:53,075
or you can find me usually hanging out near the Indie Mega booth for the rest of GDC.

193
00:08:53,075 --> 00:08:54,176
Thanks very much and I'll pass it on.

194
00:08:54,176 --> 00:08:54,636
Thank you Michael.

195
00:08:54,636 --> 00:09:05,680
Has it been used in any games that are out?

196
00:09:06,910 --> 00:09:10,032
I'm working on a game called Rogue Process right now,

197
00:09:10,032 --> 00:09:13,014
and it actually came from hacked together tools

198
00:09:13,014 --> 00:09:14,754
that I'd used for that game,

199
00:09:14,754 --> 00:09:17,256
and I'm hoping to pull the finished thing

200
00:09:17,256 --> 00:09:21,018
back into Darnesh now to confirm the ideas.

201
00:09:21,018 --> 00:09:21,598
So yeah.

202
00:09:21,598 --> 00:09:24,780
Where's the name come from?

203
00:09:24,780 --> 00:09:27,121
I didn't know if I'd have time,

204
00:09:27,121 --> 00:09:30,503
but Darnesh is the Farsi word for knowledge,

205
00:09:30,503 --> 00:09:34,225
and I'm learning a bit of Farsi, so yeah.

206
00:09:40,585 --> 00:09:44,789
Next up we have Holden Link from Turbo Button,

207
00:09:44,789 --> 00:09:47,172
who's gonna talk to us about cross-platform VR tools

208
00:09:47,172 --> 00:09:47,772
whenever you're ready.

209
00:09:47,772 --> 00:09:49,133
Let's give him a big hand.

210
00:09:49,133 --> 00:09:49,314
All right.

211
00:09:49,314 --> 00:09:57,301
Thank you.

212
00:09:57,301 --> 00:09:57,581
Thanks, sir.

213
00:09:57,581 --> 00:09:57,982
Thanks.

214
00:09:57,982 --> 00:09:58,282
Thanks.

215
00:09:58,282 --> 00:09:58,502
See you.

216
00:09:58,502 --> 00:09:59,603
Cool, does that look all right up there?

217
00:09:59,603 --> 00:10:00,384
Sweet.

218
00:10:00,384 --> 00:10:01,485
Hi everybody, I'm Holden,

219
00:10:01,485 --> 00:10:03,226
and I'm the VR guy in this session.

220
00:10:05,881 --> 00:10:10,607
So I'm from Turbo Button. We're a tiny studio in LA that just makes VR games.

221
00:10:10,607 --> 00:10:14,712
We've released two so far, Adventure Time, Magic Man's Head Games, and Floor Plan.

222
00:10:14,712 --> 00:10:17,876
We're currently working on our third VR game called Along Together.

223
00:10:19,590 --> 00:10:23,572
So these games have released on four different VR platforms so far.

224
00:10:23,572 --> 00:10:27,334
Gear VR, Oculus Rift, Vive, and Daydream.

225
00:10:27,334 --> 00:10:31,876
Adventure Time was actually a launch title for all of the platforms that it's been released on.

226
00:10:31,876 --> 00:10:36,418
So we somehow ended up doing two games across four newly launched platforms

227
00:10:36,418 --> 00:10:39,520
within a year with a team of three people,

228
00:10:39,520 --> 00:10:42,962
and also none of us had shipped games as programmers when we started.

229
00:10:42,962 --> 00:10:44,683
So for a while our logo was a bit of a lie.

230
00:10:46,357 --> 00:10:48,759
So how did we do it without going crazy?

231
00:10:48,759 --> 00:10:50,820
I'd argue that we didn't, but I'll show you

232
00:10:50,820 --> 00:10:52,622
how we made the games work at least.

233
00:10:52,622 --> 00:10:56,585
So we use Unity, Unity is cool.

234
00:10:56,585 --> 00:10:58,166
And Unity didn't have native support

235
00:10:58,166 --> 00:11:00,428
for most of these platforms at launch.

236
00:11:00,428 --> 00:11:02,590
They have varying levels of support now,

237
00:11:02,590 --> 00:11:06,253
but each platform also has its own SDK and set of plugins.

238
00:11:06,253 --> 00:11:08,435
And to take full advantage of each platform,

239
00:11:08,435 --> 00:11:10,756
you have to use their SDK, and of course,

240
00:11:10,756 --> 00:11:12,698
some SDKs are only compatible with certain

241
00:11:12,698 --> 00:11:13,999
Unity versions and so on.

242
00:11:15,020 --> 00:11:20,383
So uh before we were working in VR we were using things like end control and rewired to handle

243
00:11:20,383 --> 00:11:25,506
gamepad input in some some of our game jam projects and we wanted something kind of like that

244
00:11:25,506 --> 00:11:30,229
that could wrap all the different VR headsets and SDKs uh the same way that those those things

245
00:11:30,229 --> 00:11:33,391
wrap gamepads. So we made a thing that we call T-BUTT.

246
00:11:35,123 --> 00:11:41,849
We call it TBUT because that's the obvious namespace abbreviation for Turbo Button and there's no other reason

247
00:11:41,849 --> 00:11:50,275
It's a wrapper for VR SDKs that supports Oculus Rift, SteamVR, PlayStation VR, Gear VR, Daydream and Cardboard out of a single Unity project

248
00:11:50,275 --> 00:11:55,199
so our games use TBUT functions for accessing stuff like the cameras and the controllers and

249
00:11:55,199 --> 00:11:58,482
Then TBUT turns it into SDK calls for whatever SDK that we're targeting

250
00:11:58,482 --> 00:12:03,025
A lot of this stuff that I'm going to show today is up on github now, and I'll share the link at the end

251
00:12:04,505 --> 00:12:08,447
So here's a little interface we made for switching between SDKs.

252
00:12:08,447 --> 00:12:12,369
We're using Unity's built-in scripting defines to handle swapping between them.

253
00:12:12,369 --> 00:12:16,051
And they all get toggled on and off one at a time so that they don't cause any conflicts

254
00:12:16,051 --> 00:12:17,572
with each other.

255
00:12:17,572 --> 00:12:22,995
The other big reason for doing this is that we're not actually allowed to ship some competitor's

256
00:12:22,995 --> 00:12:24,656
SDKs on certain platforms.

257
00:12:24,656 --> 00:12:28,038
So this sections off the SDKs from getting compiled and builds as well.

258
00:12:30,554 --> 00:12:32,817
So we're making a game right now for Daydream,

259
00:12:32,817 --> 00:12:35,941
where you play as a kid's imaginary friend,

260
00:12:35,941 --> 00:12:38,565
and you follow them around on their adventures.

261
00:12:38,565 --> 00:12:40,227
A big part of the game is looking around

262
00:12:40,227 --> 00:12:42,190
and grabbing things in the environment,

263
00:12:42,190 --> 00:12:44,013
but there's actually minimal support right now

264
00:12:44,013 --> 00:12:46,076
for testing Daydream games in the Unity editor.

265
00:12:46,076 --> 00:12:46,937
It looks kinda like that.

266
00:12:47,300 --> 00:12:49,001
So you have to hold the Alt key on the keyboard

267
00:12:49,001 --> 00:12:51,643
and use the mouse to rotate your view around.

268
00:12:51,643 --> 00:12:54,605
And you can't see anything in any connected headsets.

269
00:12:54,605 --> 00:12:57,468
So there, I used the platform switching tool,

270
00:12:57,468 --> 00:13:00,190
and that makes our Daydream game retarget the Oculus SDK

271
00:13:00,190 --> 00:13:02,612
instead of the Daydream SDK.

272
00:13:02,612 --> 00:13:05,394
Because if you're developing for Rift or Vive in Unity,

273
00:13:05,394 --> 00:13:07,135
you can see your game directly in the headset

274
00:13:07,135 --> 00:13:08,096
straight out of the Unity editor.

275
00:13:08,957 --> 00:13:10,998
So it does take a few seconds to recompile,

276
00:13:10,998 --> 00:13:12,679
but I didn't have to make any scene changes.

277
00:13:12,679 --> 00:13:14,720
And when I hit play, our camera's

278
00:13:14,720 --> 00:13:16,180
now running through the Oculus SDK

279
00:13:16,180 --> 00:13:18,262
so we can test our daydream game and headset.

280
00:13:18,262 --> 00:13:20,683
It's a much better workflow for us.

281
00:13:20,683 --> 00:13:22,684
And it's one that we initially started out of necessity

282
00:13:22,684 --> 00:13:25,345
because we didn't have access to enough phones.

283
00:13:25,345 --> 00:13:26,346
But we've stuck with it.

284
00:13:28,494 --> 00:13:30,995
Here's what that camera wrapper looks like in the inspector.

285
00:13:30,995 --> 00:13:34,736
So most of the VR platforms have their own camera rig prefab

286
00:13:34,736 --> 00:13:36,377
that you just drag into the scene

287
00:13:36,377 --> 00:13:38,318
and it's super easy to get started with them.

288
00:13:38,318 --> 00:13:41,560
But when you're trying to swap between different headsets,

289
00:13:41,560 --> 00:13:44,221
swapping out those camera prefabs can be a bit of a pain,

290
00:13:44,221 --> 00:13:45,662
especially since they have to live in your scene

291
00:13:45,662 --> 00:13:46,222
for the most part.

292
00:13:46,942 --> 00:13:52,163
So the camera rig we made is the only one that lives in our scenes and it just pulls in whatever

293
00:13:52,163 --> 00:13:57,044
camera rig it should be using for each platform and then applies the same settings, so you don't

294
00:13:57,044 --> 00:14:02,746
have to put your settings in one place, onto all of those different camera prefabs. So that's

295
00:14:02,746 --> 00:14:07,947
everything from like the standard Unity camera stuff to stuff like tracking volumes and sorting

296
00:14:07,947 --> 00:14:12,468
methods. For example, it's like more optimized to have the camera do sorting in a different way on

297
00:14:12,468 --> 00:14:14,248
Android compared to PC so.

298
00:14:15,129 --> 00:14:18,910
we can set all of that stuff up to work for all the different platforms here.

299
00:14:18,910 --> 00:14:23,071
We actually do the same thing with input as well.

300
00:14:23,071 --> 00:14:27,633
So in our game code, if we want to check a button presses on a motion controller, for example,

301
00:14:27,633 --> 00:14:30,814
we have a button was pressed function that accepts a button type

302
00:14:30,814 --> 00:14:35,195
and then a left or right controller. So for example, we can say like main trigger on the right hand

303
00:14:35,195 --> 00:14:39,297
and it will return whatever that button means across PlayStation Move, Vive, or

304
00:14:39,297 --> 00:14:39,617
Oculus Touch.

305
00:14:40,918 --> 00:14:43,580
New controllers are getting announced for VR platforms all the time.

306
00:14:43,580 --> 00:14:45,902
Samsung actually announced a new one on Sunday.

307
00:14:45,902 --> 00:14:51,446
So this actually makes it way easier for us to support all of those new controllers as they come in too

308
00:14:51,446 --> 00:14:55,629
because we can just add them to one place in this shared code base between our games

309
00:14:55,629 --> 00:14:56,650
and then it works across all of them.

310
00:14:58,865 --> 00:15:01,226
So we made a little interface for the editor

311
00:15:01,226 --> 00:15:03,168
that lets us toggle a bunch of different controller settings

312
00:15:03,168 --> 00:15:05,909
for our games, like how many motion controllers they need,

313
00:15:05,909 --> 00:15:08,952
or if they work with game pads or touch pads.

314
00:15:08,952 --> 00:15:11,834
We can also set up different hand prefabs

315
00:15:11,834 --> 00:15:15,296
and controller models for each different type of controller.

316
00:15:15,296 --> 00:15:16,877
And that's really important to make sure

317
00:15:16,877 --> 00:15:19,779
that each controller feels right in your hands in VR,

318
00:15:19,779 --> 00:15:21,200
so they all have different scales,

319
00:15:21,200 --> 00:15:22,581
different offsets and sizes.

320
00:15:23,904 --> 00:15:27,187
We also set up button mappings for each controller.

321
00:15:27,187 --> 00:15:29,268
And we do this on a per-game basis,

322
00:15:29,268 --> 00:15:31,570
because what we found is that we couldn't really

323
00:15:31,570 --> 00:15:33,051
get a one-size-fits-all solution.

324
00:15:33,051 --> 00:15:35,353
And when it makes sense to have two buttons be

325
00:15:35,353 --> 00:15:37,114
the same thing across Vive and Touch in one project,

326
00:15:37,114 --> 00:15:39,436
they might need to be different in another.

327
00:15:39,436 --> 00:15:42,018
So we serialize our button mappings out to JSON,

328
00:15:42,018 --> 00:15:43,759
and then bring them in at runtime

329
00:15:43,759 --> 00:15:46,061
to create a lookup table for that script

330
00:15:46,061 --> 00:15:47,221
that I showed on the last slide.

331
00:15:49,645 --> 00:15:52,347
So setting stuff up this way has been really helpful

332
00:15:52,347 --> 00:15:54,949
in our current projects, even just for development purposes.

333
00:15:54,949 --> 00:15:57,270
So this is the Daydream controller.

334
00:15:57,270 --> 00:16:00,813
It essentially has a subset of the functions

335
00:16:00,813 --> 00:16:02,875
of the Oculus Touch and Vive controllers.

336
00:16:02,875 --> 00:16:05,597
It has a touchpad, it can track rotation,

337
00:16:05,597 --> 00:16:07,478
but it doesn't track position.

338
00:16:07,478 --> 00:16:10,981
So for testing on PC, there's a controller emulator

339
00:16:10,981 --> 00:16:12,982
that is provided as part of the SDK.

340
00:16:12,982 --> 00:16:14,683
And it lets you turn any Android phone

341
00:16:14,683 --> 00:16:15,804
into a Daydream controller.

342
00:16:16,665 --> 00:16:19,605
But it's not exactly the same thing as the real one.

343
00:16:19,605 --> 00:16:21,086
It doesn't have a clicky button.

344
00:16:21,086 --> 00:16:24,066
You have to double tap on the touchpad to simulate that.

345
00:16:24,066 --> 00:16:25,166
And sometimes it's kind of hard to tell

346
00:16:25,166 --> 00:16:26,707
where you're pressing on the phone screen.

347
00:16:26,707 --> 00:16:30,447
So because we wrap all of our input,

348
00:16:30,447 --> 00:16:31,808
we can just switch over to the Oculus SDK

349
00:16:31,808 --> 00:16:33,308
and use touch controllers,

350
00:16:33,308 --> 00:16:35,288
or the SteamVR SDK and use Vive controllers.

351
00:16:35,288 --> 00:16:36,648
And different people on our team are using

352
00:16:36,648 --> 00:16:38,649
all sorts of different controllers

353
00:16:38,649 --> 00:16:39,569
to test the game in the editor.

354
00:16:39,569 --> 00:16:42,610
It's also really helpful to have this control option

355
00:16:42,610 --> 00:16:44,550
for playtesting so that we get a live mirror

356
00:16:44,550 --> 00:16:46,310
of what our players are seeing.

357
00:16:48,943 --> 00:16:51,705
So the way this works is that when we're running on PC,

358
00:16:51,705 --> 00:16:53,926
we first search for that controller emulator,

359
00:16:53,926 --> 00:16:55,607
and then we fall back to Rift Revive controls

360
00:16:55,607 --> 00:16:57,348
if we don't find it.

361
00:16:57,348 --> 00:16:59,569
When running on Android, it's not compiling any references

362
00:16:59,569 --> 00:17:01,090
to Rift Revive stuff, and it just goes straight

363
00:17:01,090 --> 00:17:03,231
to using the Daydream controller.

364
00:17:03,231 --> 00:17:06,353
So we added a layer to our input wrapper

365
00:17:06,353 --> 00:17:07,634
to throw out the position data

366
00:17:07,634 --> 00:17:10,255
from the Vive and Touch controllers for that.

367
00:17:10,255 --> 00:17:12,836
And we also have offsets that we can specify

368
00:17:12,836 --> 00:17:14,878
to make the data that we get out of those controllers

369
00:17:14,878 --> 00:17:16,458
match what we would get out of the Daydream controller.

370
00:17:17,780 --> 00:17:19,941
So whenever we're developing for a mobile VR platform,

371
00:17:19,941 --> 00:17:23,102
our workflow is actually that we just have one person

372
00:17:23,102 --> 00:17:26,663
on the team make builds for the actual target device

373
00:17:26,663 --> 00:17:29,584
every couple weeks, and then everybody else

374
00:17:29,584 --> 00:17:32,045
is testing in the editor on Rift or Vive.

375
00:17:32,045 --> 00:17:34,406
So we very rarely actually have to make builds

376
00:17:34,406 --> 00:17:35,626
and go straight onto the device.

377
00:17:37,456 --> 00:17:41,399
It takes a week or two of work each time we add a new platform to TeeBut, but once we

378
00:17:41,399 --> 00:17:44,602
add those platforms, it means that all of our games work across them.

379
00:17:44,602 --> 00:17:49,566
Wrapping code is not a revolutionary concept by any means, and a lot of VR developers are

380
00:17:49,566 --> 00:17:51,087
doing this themselves.

381
00:17:51,087 --> 00:17:54,230
We wanted to go ahead and share how we're doing it, so we can get feedback about what

382
00:17:54,230 --> 00:17:58,113
we should be doing better, of course, from other developers, but also to help other people

383
00:17:58,113 --> 00:18:00,475
who are getting started get a start with it.

384
00:18:01,156 --> 00:18:03,857
So the source for the platform switching tool,

385
00:18:03,857 --> 00:18:05,698
the camera rig wrapper, and a standalone version

386
00:18:05,698 --> 00:18:07,900
of the daydream wrapper are all up on GitHub there.

387
00:18:07,900 --> 00:18:10,501
There's also a wiki with documentation for setting them up.

388
00:18:10,501 --> 00:18:12,282
I hope you found this useful, but more than anything,

389
00:18:12,282 --> 00:18:14,083
I hope you write butt more often in your code.

390
00:18:14,083 --> 00:18:14,383
Thank you.

391
00:18:14,383 --> 00:18:14,543
Thank you.

392
00:18:14,543 --> 00:18:14,743
Thank you.

393
00:18:14,743 --> 00:18:22,547
Thank you.

394
00:18:22,547 --> 00:18:22,907
Thank you.

395
00:18:22,907 --> 00:18:23,248
Thank you.

396
00:18:23,248 --> 00:18:23,708
Thank you.

397
00:18:23,708 --> 00:18:23,948
Thank you.

398
00:18:23,948 --> 00:18:24,388
Thank you.

399
00:18:24,388 --> 00:18:24,628
Thank you.

400
00:18:24,628 --> 00:18:25,169
Thank you so much.

401
00:18:25,169 --> 00:18:26,709
What a great resource to share with everybody else.

402
00:18:26,709 --> 00:18:27,070
And good name too.

403
00:18:28,200 --> 00:18:36,610
more but-named tools for just abbreviation reasons.

404
00:18:36,610 --> 00:18:39,633
Next up, we have Ryan Williams from Spryfox.

405
00:18:39,633 --> 00:18:42,216
You may know Spryfox from games like Alphabear.

406
00:18:42,216 --> 00:18:42,376
Anyone?

407
00:18:42,376 --> 00:18:43,738
Yeah, thought so.

408
00:18:43,738 --> 00:18:47,402
You ready to go? Let's give him a big hand.

409
00:18:54,397 --> 00:18:57,539
Hi, I'm Ryan Williams, and as was just announced,

410
00:18:57,539 --> 00:18:58,339
I work at SpryFox.

411
00:18:58,339 --> 00:19:01,401
I want to tell you about a little library we made

412
00:19:01,401 --> 00:19:03,222
called Darkenfig.

413
00:19:03,222 --> 00:19:06,044
It is a tool for improving iteration time

414
00:19:06,044 --> 00:19:08,186
by hot-loading text files directly into games.

415
00:19:09,310 --> 00:19:11,031
As you know, faster iteration time is always better.

416
00:19:11,031 --> 00:19:15,113
Faster speaking time always better too.

417
00:19:15,113 --> 00:19:16,713
And hot loading assets and behavior

418
00:19:16,713 --> 00:19:19,295
is one of the key ways to get a shorter iteration cycle.

419
00:19:19,295 --> 00:19:22,036
So there's lots of tools out there that do this.

420
00:19:22,036 --> 00:19:23,517
This is not unique.

421
00:19:23,517 --> 00:19:28,779
But they're just not really suited for our use case.

422
00:19:28,779 --> 00:19:31,661
And I think that you might find that to be true as well.

423
00:19:31,661 --> 00:19:34,362
So you might find Dark Config to be useful as well.

424
00:19:34,362 --> 00:19:38,004
So Dark Config sits in kind of a sweet spot.

425
00:19:39,082 --> 00:19:40,883
where it's very general purpose.

426
00:19:40,883 --> 00:19:44,165
It helps you iterate quickly with its hot loading.

427
00:19:44,165 --> 00:19:47,127
It's easy to integrate new configuration files

428
00:19:47,127 --> 00:19:48,688
with the game.

429
00:19:48,688 --> 00:19:52,290
And you can express virtually anything in those files.

430
00:19:52,290 --> 00:19:55,772
So you can use it for all sorts of things.

431
00:19:55,772 --> 00:19:57,173
And so by doing that, it takes over

432
00:19:57,173 --> 00:19:59,175
some of the mental burden of developing,

433
00:19:59,175 --> 00:20:00,135
which is super important.

434
00:20:00,135 --> 00:20:01,596
Because when you're working on something,

435
00:20:01,596 --> 00:20:03,497
you really need to be focused on your problem,

436
00:20:03,497 --> 00:20:05,859
your gameplay, and you don't want to be wrestling

437
00:20:05,859 --> 00:20:07,780
with like, oh, these files aren't loading.

438
00:20:09,814 --> 00:20:10,854
That's great.

439
00:20:10,854 --> 00:20:15,516
Let me show you what I mean with the classic live demo

440
00:20:15,516 --> 00:20:17,977
of fast iteration.

441
00:20:17,977 --> 00:20:19,578
There's no way this can possibly go wrong.

442
00:20:19,578 --> 00:20:25,340
So we use uniting, and that throws a lot of you.

443
00:20:25,340 --> 00:20:27,240
This is the current title I'm working on.

444
00:20:27,240 --> 00:20:29,941
It's called Steambirds Alliance, and it's a big game.

445
00:20:29,941 --> 00:20:30,982
It's an MMO.

446
00:20:33,432 --> 00:20:36,075
It's got a tremendous amount of content.

447
00:20:36,075 --> 00:20:41,562
We put almost everything in Dark Config in this game.

448
00:20:41,562 --> 00:20:44,967
We have close to 1,000 configuration files for this,

449
00:20:44,967 --> 00:20:47,090
which we have manually typed.

450
00:20:47,090 --> 00:20:48,491
So ignore that error message.

451
00:20:48,491 --> 00:20:49,373
That's because I'm offline.

452
00:20:52,138 --> 00:20:56,139
The configuration file I want to show you here is describing the backgrounds here behind

453
00:20:56,139 --> 00:20:56,559
this area.

454
00:20:56,559 --> 00:21:01,360
So I'm flying around and I've got this beautiful procedurally generated world behind us.

455
00:21:01,360 --> 00:21:04,981
And on the left here is the configuration file that describes the parameters for that

456
00:21:04,981 --> 00:21:05,521
background.

457
00:21:05,521 --> 00:21:13,783
So one of the things that's useful is being able to reuse and pastiche existing assets.

458
00:21:13,783 --> 00:21:19,284
We're an indie, and so making new stuff is expensive, and we're often just trying experiments

459
00:21:19,284 --> 00:21:20,205
and then try something new.

460
00:21:21,123 --> 00:21:23,885
So, we have this based on property here.

461
00:21:23,885 --> 00:21:25,766
Like this is the section that describes this dungeon

462
00:21:25,766 --> 00:21:26,326
that I'm currently in.

463
00:21:26,326 --> 00:21:28,488
And you can see it's only using a subset

464
00:21:28,488 --> 00:21:29,748
of all the fields that I've got available

465
00:21:29,748 --> 00:21:30,989
for all these other things.

466
00:21:30,989 --> 00:21:32,210
So, we've got this based on,

467
00:21:32,210 --> 00:21:34,471
and that steals all the fields from a different area.

468
00:21:34,471 --> 00:21:37,533
So, I can change this,

469
00:21:37,533 --> 00:21:39,594
and I'm gonna try to get like a cryogenics lab

470
00:21:39,594 --> 00:21:40,414
type appearance here.

471
00:21:40,414 --> 00:21:42,655
So I can change that, and then boom.

472
00:21:42,655 --> 00:21:43,536
Let me make this a little bigger.

473
00:21:45,509 --> 00:21:47,189
It just changes every single asset on the screen.

474
00:21:47,189 --> 00:21:48,370
And then I can refine that, right?

475
00:21:48,370 --> 00:21:48,850
Like I can change,

476
00:21:48,850 --> 00:21:50,811
I remember that the highlands has kind of like

477
00:21:50,811 --> 00:21:52,452
a mechanistic background, so highlands.

478
00:21:52,452 --> 00:21:53,232
So cool, we got some stuff down there.

479
00:21:53,232 --> 00:21:53,993
Fog, let's do the, bring the fog up.

480
00:21:53,993 --> 00:21:54,673
Okay, that wasn't enough, let's do more.

481
00:21:54,673 --> 00:21:55,334
That's the right amount of fog.

482
00:22:16,265 --> 00:22:19,387
Let's change the walls.

483
00:22:19,387 --> 00:22:20,748
Oops.

484
00:22:20,748 --> 00:22:26,553
Oh, I didn't know there was sound. Cool.

485
00:22:26,553 --> 00:22:32,959
So, yeah, so we're kind of getting there towards the cryogenics lab.

486
00:22:32,959 --> 00:22:35,781
The last thing I want to do is just turn off the snow.

487
00:22:40,247 --> 00:22:41,348
So okay, cool.

488
00:22:41,348 --> 00:22:44,089
That's different than what we started from.

489
00:22:44,089 --> 00:22:47,010
And just to prove to you that it's not exactly

490
00:22:47,010 --> 00:22:49,791
like the Highlands, I can steal the rest of its fields.

491
00:22:49,791 --> 00:22:50,891
And you can see, you know,

492
00:22:50,891 --> 00:22:54,592
the lighting makes a big difference, so cool.

493
00:22:54,592 --> 00:22:56,433
So we wouldn't just stop there.

494
00:22:56,433 --> 00:22:59,874
We would probably make new assets,

495
00:22:59,874 --> 00:23:01,595
but we wouldn't have to remake everything for that area.

496
00:23:01,595 --> 00:23:03,496
And that's because Dark Config allows us

497
00:23:03,496 --> 00:23:05,016
to do this quick reloading and see

498
00:23:05,016 --> 00:23:09,478
that we've made something that's distinct enough.

499
00:23:09,478 --> 00:23:09,838
So, okay.

500
00:23:11,966 --> 00:23:13,374
Express anything.

501
00:23:13,374 --> 00:23:15,064
Why is this important?

502
00:23:15,064 --> 00:23:15,728
Well, it's.

503
00:23:16,200 --> 00:23:19,382
really valuable to be able to use this general purpose tool

504
00:23:19,382 --> 00:23:21,204
for something that's an experiment.

505
00:23:21,204 --> 00:23:24,306
And if you end up using that feature or functionality,

506
00:23:24,306 --> 00:23:26,047
then you can make a more specific purpose tool.

507
00:23:26,047 --> 00:23:29,809
So let me show you some of the expressiveness of DarkConfig

508
00:23:29,809 --> 00:23:31,710
in some of these configuration files.

509
00:23:31,710 --> 00:23:35,593
This is the configuration file that defines

510
00:23:35,593 --> 00:23:38,815
how the procedural generation layout of the dungeon works.

511
00:23:38,815 --> 00:23:40,496
So this defines where the enemies are spawned,

512
00:23:40,496 --> 00:23:42,537
where the walls are.

513
00:23:42,537 --> 00:23:44,018
And we use, as you can see, YAML.

514
00:23:44,919 --> 00:23:48,181
YAML is a very human file format.

515
00:23:48,181 --> 00:23:53,046
It doesn't have a lot of boilerplate that XML and JSON have, so it's a lot more fluid

516
00:23:53,046 --> 00:23:54,867
to type.

517
00:23:54,867 --> 00:23:59,752
The other nice thing about it is it supports sort of different layouts for how you do things.

518
00:23:59,752 --> 00:24:03,415
For a list data structure, you can do a dash at the beginning of the line.

519
00:24:03,415 --> 00:24:05,256
You can see here's two list items here.

520
00:24:07,107 --> 00:24:10,929
But that doesn't always work. It's a kind of cumbersome if you're just doing a point

521
00:24:10,929 --> 00:24:16,410
So this is another list and you can do that wherever you want, and it just looks the same in the in the code

522
00:24:16,410 --> 00:24:19,111
The other thing that we do that's fairly interesting

523
00:24:19,111 --> 00:24:24,753
and this is specific to dark config is that you can override the parsing in certain cases and

524
00:24:25,382 --> 00:24:26,743
do heterogeneous lists.

525
00:24:26,743 --> 00:24:28,084
So this is a heterogeneous list here.

526
00:24:28,084 --> 00:24:28,924
This is an enum.

527
00:24:28,924 --> 00:24:30,705
This is another enum.

528
00:24:30,705 --> 00:24:32,567
And this is a structure.

529
00:24:32,567 --> 00:24:35,129
And there's just a little hook in the code

530
00:24:35,129 --> 00:24:37,090
that looks at that list and parses this out.

531
00:24:37,090 --> 00:24:39,892
And it makes it so that when I'm authoring this file,

532
00:24:39,892 --> 00:24:41,953
I don't have to have a separate field for showing.

533
00:24:41,953 --> 00:24:49,038
I can just say, OK, this room spawns at this area.

534
00:24:49,038 --> 00:24:49,519
And it's right there.

535
00:24:50,620 --> 00:24:53,243
You can also see that we have ASCII maps in here.

536
00:24:53,243 --> 00:24:54,425
That's always nice.

537
00:24:54,425 --> 00:24:56,667
It's almost visual, you know?

538
00:24:56,667 --> 00:24:58,229
Just imagine.

539
00:24:58,229 --> 00:25:05,276
So, yeah, it's not going to be the greatest at any particular thing, but it is pretty

540
00:25:05,276 --> 00:25:06,318
good at a lot of things.

541
00:25:09,250 --> 00:25:14,354
And the last thing that I think is really important is that you actually make your game configurable.

542
00:25:14,354 --> 00:25:19,518
I don't know if you're like me, where I work with a bunch of other folks, but those people

543
00:25:19,518 --> 00:25:21,460
really hate it when they can't change something about the game.

544
00:25:21,460 --> 00:25:27,705
So I really think, I've really focused on making Dark Config easy to integrate into

545
00:25:27,705 --> 00:25:29,986
your game, and oftentimes it's just one line.

546
00:25:29,986 --> 00:25:36,011
And I know that this is an important property because I've been that guy who hasn't made

547
00:25:36,011 --> 00:25:37,672
my game configurable and these guys have been all like it.

548
00:25:37,945 --> 00:25:41,427
I don't want to learn C sharp to have to edit this game.

549
00:25:41,427 --> 00:25:44,728
I want to be a designer or an artist.

550
00:25:44,728 --> 00:25:50,530
So this is the line that integrates this Dungeons.bytes

551
00:25:50,530 --> 00:25:51,670
we were looking at before.

552
00:25:51,670 --> 00:25:55,212
And this does two things at once.

553
00:25:55,212 --> 00:25:57,832
It loads the file the first time.

554
00:25:57,832 --> 00:26:01,614
And any time that file changes, it hot loads that

555
00:26:01,614 --> 00:26:04,735
and propagates those changes everywhere in the world,

556
00:26:04,735 --> 00:26:05,595
the game world.

557
00:26:07,135 --> 00:26:08,655
One of the nice properties of Dart config

558
00:26:08,655 --> 00:26:12,296
is that it updates the objects in place.

559
00:26:12,296 --> 00:26:15,877
So you see it blows this onto this dictionary.

560
00:26:15,877 --> 00:26:17,697
And then I take objects out of that dictionary,

561
00:26:17,697 --> 00:26:19,298
and I'll just pass them around.

562
00:26:19,298 --> 00:26:21,938
I pass that to the constructor of some other thing.

563
00:26:21,938 --> 00:26:24,079
This object just goes all over the place.

564
00:26:24,079 --> 00:26:25,959
And everywhere that uses it doesn't

565
00:26:25,959 --> 00:26:27,800
have to care that it came from a configuration file.

566
00:26:27,800 --> 00:26:30,420
It just knows that when the configuration file hot loads,

567
00:26:30,420 --> 00:26:32,821
the properties in that object will change.

568
00:26:33,601 --> 00:26:36,363
and this is the object, just so you can see it.

569
00:26:36,363 --> 00:26:39,125
It's just some fields, and they'll just be updated

570
00:26:39,125 --> 00:26:39,946
when the file gets updated.

571
00:26:39,946 --> 00:26:43,188
So that means that much more things are hot loaded,

572
00:26:43,188 --> 00:26:45,190
much more things are editable by other members of the team

573
00:26:45,190 --> 00:26:46,751
than if this had been a lot harder to integrate.

574
00:26:46,751 --> 00:26:47,712
So that's a very important value for us.

575
00:26:47,712 --> 00:26:48,232
And I want you to do this.

576
00:26:48,232 --> 00:26:48,713
I want you to iterate fast,

577
00:26:48,713 --> 00:26:49,773
express lots of things in your games,

578
00:26:49,773 --> 00:26:50,354
and I want you to actually do it.

579
00:27:02,765 --> 00:27:07,229
We're proud to announce that this is Firefox's first open source project.

580
00:27:07,229 --> 00:27:10,432
It's up here on GitHub and you can check it out.

581
00:27:10,432 --> 00:27:17,037
Try not to inundate me with pull requests while I'm at GDC, thank you.

582
00:27:17,037 --> 00:27:20,300
And I want to drop in here that it's not just a Unity thing.

583
00:27:20,300 --> 00:27:23,923
We use Unity but we've made DarkConfig so it supports any C-sharp project.

584
00:27:23,923 --> 00:27:28,686
So you can expect to see it in all sorts of weird, wonderful places.

585
00:27:28,686 --> 00:27:30,288
Thank you very much and happy developing.

586
00:27:38,818 --> 00:27:40,300
Yeah, thank you so much, that's really interesting.

587
00:27:40,300 --> 00:27:43,985
I love also how text is such a good lowest common denominator,

588
00:27:43,985 --> 00:27:45,647
you can build more stuff onto.

589
00:27:45,647 --> 00:27:47,269
I think last year, two years ago,

590
00:27:47,269 --> 00:27:49,732
we had Omar Kornet talk about,

591
00:27:49,732 --> 00:27:53,156
dear Imgui, about writing C++ visual tools.

592
00:27:53,156 --> 00:27:54,458
He's right there, I see him.

593
00:27:55,763 --> 00:28:00,908
Talk about like C++, more visual tools that you can build on top of anything.

594
00:28:00,908 --> 00:28:06,632
So you could go, you know, Unity to text file to like a custom level editor without having

595
00:28:06,632 --> 00:28:08,694
to make that level editor into Unity or compatible.

596
00:28:08,694 --> 00:28:10,415
That's really, really cool.

597
00:28:10,415 --> 00:28:18,182
Next up, we've got Shukya, also known as your boy, Sugar, who's here to talk about procedural

598
00:28:18,182 --> 00:28:21,845
mess deformation and how they use that in their game design.

599
00:28:21,845 --> 00:28:22,585
Are you ready to go?

600
00:28:23,042 --> 00:28:26,625
Are you on a different one?

601
00:28:26,625 --> 00:28:28,848
Yeah, there we go.

602
00:28:28,848 --> 00:28:32,912
Okay, yeah that's me.

603
00:28:32,912 --> 00:28:39,579
Are you going to introduce yourself?

604
00:28:39,579 --> 00:28:41,641
I will.

605
00:28:43,785 --> 00:28:47,468
Really happy to have Sugar here and have some other South African developers as well.

606
00:28:47,468 --> 00:28:53,653
I got lucky enough to go to Amaze Johannesburg a few years ago and met all these great, great people.

607
00:28:53,653 --> 00:28:59,257
And it's a huge pleasure to be able to have them here on stage with me.

608
00:28:59,257 --> 00:29:00,698
Alright, you ready to go?

609
00:29:00,698 --> 00:29:01,218
Yeah, let's do it.

610
00:29:01,218 --> 00:29:02,820
Let's give them a warm hand.

611
00:29:10,992 --> 00:29:13,055
Thanks, thanks for that introduction.

612
00:29:13,055 --> 00:29:15,418
What's up guys, I'm Shukya Kimani,

613
00:29:15,418 --> 00:29:18,002
but you guys can call me Sugar.

614
00:29:18,002 --> 00:29:24,271
And I'll try my best to keep this short and sweet.

615
00:29:24,271 --> 00:29:24,732
I'm the...

616
00:29:27,373 --> 00:29:32,537
I'm the lead programmer down at Yamakop, a small game development studio in Johannesburg,

617
00:29:32,537 --> 00:29:33,477
South Africa.

618
00:29:33,477 --> 00:29:37,039
And we've been working on our debut title, Semblance.

619
00:29:37,039 --> 00:29:44,984
And while we started working on this project, I started developing a tool that creates procedural

620
00:29:44,984 --> 00:29:47,525
animations on dynamic 2D meshes.

621
00:29:47,525 --> 00:29:49,566
It's a lot of words, okay?

622
00:29:49,566 --> 00:29:54,950
But basically it's just to animate our character and make him feel as juicy as possible.

623
00:29:55,815 --> 00:29:59,777
But like any of us programmers, it was a tool

624
00:29:59,777 --> 00:30:01,917
because I can't art, I can't animate,

625
00:30:01,917 --> 00:30:05,378
but I can write some pretty good code, right?

626
00:30:05,378 --> 00:30:08,379
And most of us have our prototypes look like

627
00:30:08,379 --> 00:30:10,980
little rectangles jumping around

628
00:30:10,980 --> 00:30:12,981
on top of other rectangles,

629
00:30:12,981 --> 00:30:15,141
and I wanted to do something a bit more interesting.

630
00:30:15,862 --> 00:30:21,123
And Mike Bethel has shown us that a rectangle can be pretty interesting.

631
00:30:21,123 --> 00:30:24,705
So I started investigating what other people were doing with rectangles.

632
00:30:24,705 --> 00:30:31,207
And games like Super Sex Soccer and Tennis use a rectangle and change the width and height of the rectangles.

633
00:30:31,207 --> 00:30:34,888
And they start to feel, they start to come more alive.

634
00:30:34,888 --> 00:30:42,671
And then around the same time, Zach Bell released Ink and he started tweaking the corners of the rectangle.

635
00:30:42,671 --> 00:30:43,871
And that's when I started thinking.

636
00:30:44,492 --> 00:30:46,833
What if I used Bezier curves?

637
00:30:46,833 --> 00:30:50,896
What if we define our rectangle based on Bezier curves?

638
00:30:50,896 --> 00:30:55,119
And for you who don't know what a Bezier curve is, it's pretty much the pen tool in Photoshop.

639
00:30:55,119 --> 00:31:00,723
So you got two points, the anchor points, that are beginning and end of the Bezier curve.

640
00:31:00,723 --> 00:31:04,686
And you have two other control points to change how the curve works.

641
00:31:04,686 --> 00:31:05,646
And I did that.

642
00:31:06,190 --> 00:31:09,493
So we got the rectangle based on Bezier curves.

643
00:31:09,493 --> 00:31:12,915
And at this point, I wasn't too sure I was still working

644
00:31:12,915 --> 00:31:14,256
with a rectangle anymore.

645
00:31:14,256 --> 00:31:16,218
Because you could change it into any shape

646
00:31:16,218 --> 00:31:17,298
that I really wanted.

647
00:31:17,298 --> 00:31:19,220
And this was fun.

648
00:31:19,220 --> 00:31:22,762
But creating the mesh was the first problem.

649
00:31:22,762 --> 00:31:28,887
And using the Bezier curves, you can go all across the Bezier

650
00:31:28,887 --> 00:31:30,088
curves in different steps.

651
00:31:30,088 --> 00:31:32,830
The more steps you use, the higher fidelity you get,

652
00:31:32,830 --> 00:31:34,611
the smoother curves you have.

653
00:31:35,532 --> 00:31:38,894
And then from there, the next thing you need to do

654
00:31:38,894 --> 00:31:40,695
is create the triangles.

655
00:31:40,695 --> 00:31:44,958
And triangulating every frame becomes very costly.

656
00:31:44,958 --> 00:31:49,280
And so we developed a way of just putting one vertex

657
00:31:49,280 --> 00:31:52,683
in the middle of the rectangle and having all the tris

658
00:31:52,683 --> 00:31:53,723
go right to the middle.

659
00:31:53,723 --> 00:31:57,466
And that way, we didn't have to re-triangulate every frame.

660
00:31:57,466 --> 00:32:02,169
And the middle vertex is just an average of the four corners.

661
00:32:02,169 --> 00:32:04,370
So it was able to move around, and you were still

662
00:32:04,370 --> 00:32:04,770
able to.

663
00:32:05,230 --> 00:32:11,655
change the mesh the way we wanted. But now it's just a mesh. Why not just slap on a sprite?

664
00:32:12,627 --> 00:32:16,668
then at this point you can have more complex shapes

665
00:32:16,668 --> 00:32:19,869
and still be able to not have to animate every frame

666
00:32:19,869 --> 00:32:22,890
and then you can just deform the mesh

667
00:32:22,890 --> 00:32:24,651
in the way you want it.

668
00:32:24,651 --> 00:32:27,711
And this is how we started creating the key frames

669
00:32:27,711 --> 00:32:29,312
that you would animate to.

670
00:32:29,312 --> 00:32:33,033
But procedural animation, we just use numeric springing.

671
00:32:33,033 --> 00:32:36,894
And that way you can jump from different key frames

672
00:32:36,894 --> 00:32:39,495
into other ones and it would still look

673
00:32:39,495 --> 00:32:41,395
nice and springy and interesting.

674
00:32:42,833 --> 00:32:46,656
And that's when we finally ended with this tool

675
00:32:46,656 --> 00:32:50,458
that helped either of us go in and change

676
00:32:50,458 --> 00:32:53,520
Squish's animations, but just by the key frames,

677
00:32:53,520 --> 00:32:56,361
a little tools to swap it,

678
00:32:56,361 --> 00:33:01,284
the mirrored, flip it, and then eventually just save it

679
00:33:01,284 --> 00:33:02,605
into the bank of animations.

680
00:33:03,238 --> 00:33:04,579
and then internally in code,

681
00:33:04,579 --> 00:33:08,321
we could just trigger off those different animations.

682
00:33:08,321 --> 00:33:10,842
And what's great about the key frames

683
00:33:10,842 --> 00:33:12,062
and the procedure animations

684
00:33:12,062 --> 00:33:15,303
that you could blend in between any of those key frames.

685
00:33:15,303 --> 00:33:16,404
And that was fun.

686
00:33:16,404 --> 00:33:20,506
And we still needed the square to look.

687
00:33:20,506 --> 00:33:22,666
And so we added eyes.

688
00:33:22,666 --> 00:33:24,407
And just make it a little springy.

689
00:33:24,407 --> 00:33:27,368
And became a lot more interesting,

690
00:33:27,368 --> 00:33:29,069
a lot more fun to play with.

691
00:33:30,060 --> 00:33:33,003
But at this point, the tech was being built,

692
00:33:33,003 --> 00:33:35,306
and it's just a collection of algorithms, right?

693
00:33:35,306 --> 00:33:36,767
You have your Bezier curves,

694
00:33:36,767 --> 00:33:40,431
you have a physics simulation on the springs,

695
00:33:40,431 --> 00:33:42,233
and we started asking ourselves,

696
00:33:42,233 --> 00:33:45,035
but what if we just add it to the platforms as well?

697
00:33:45,035 --> 00:33:48,339
And then that way, you have this interesting mechanic

698
00:33:48,339 --> 00:33:51,302
where you can start changing the world

699
00:33:51,302 --> 00:33:53,144
and spring it as much as possible.

700
00:33:53,665 --> 00:33:55,166
And that's basically what the tool is.

701
00:33:55,166 --> 00:33:56,987
And if you need to ask me any more questions,

702
00:33:56,987 --> 00:33:58,088
just holler at your boy.

703
00:33:58,088 --> 00:33:59,508
Or if you're more into Twitter,

704
00:33:59,508 --> 00:34:01,369
just throw it on Twitter as well, man.

705
00:34:01,369 --> 00:34:01,790
Thanks, guys.

706
00:34:01,790 --> 00:34:02,090
Thank you.

707
00:34:02,090 --> 00:34:02,750
Thank you.

708
00:34:02,750 --> 00:34:03,310
Thank you so much.

709
00:34:03,310 --> 00:34:03,691
Thank you.

710
00:34:03,691 --> 00:34:04,031
Thank you.

711
00:34:04,031 --> 00:34:04,471
Thank you.

712
00:34:04,471 --> 00:34:04,711
Thank you.

713
00:34:04,711 --> 00:34:05,091
Thank you.

714
00:34:05,091 --> 00:34:05,752
Thank you.

715
00:34:05,752 --> 00:34:05,952
Thank you.

716
00:34:05,952 --> 00:34:06,152
Thank you.

717
00:34:06,152 --> 00:34:16,537
Thank you.

718
00:34:16,537 --> 00:34:16,838
Thank you.

719
00:34:16,838 --> 00:34:17,318
That was excellent.

720
00:34:20,010 --> 00:34:21,231
Thanks, Sugar.

721
00:34:21,231 --> 00:34:23,093
I hope a lot of people will hollow at your boy.

722
00:34:23,093 --> 00:34:28,637
And definitely check out Semblance.

723
00:34:28,637 --> 00:34:30,599
I'm really excited to hear more about it.

724
00:34:30,599 --> 00:34:36,844
Next up, we have Chris Martens, who's going to talk about a tool called Scepter.

725
00:34:36,844 --> 00:34:37,304
Are you ready to go?

726
00:34:37,304 --> 00:34:37,784
Yeah, I think so.

727
00:34:37,784 --> 00:34:38,325
Come up.

728
00:34:38,325 --> 00:34:39,466
That's number one, yeah.

729
00:34:39,466 --> 00:34:43,609
Let's give another big hand for Chris Martens.

730
00:34:49,423 --> 00:34:50,304
All right, thank you.

731
00:34:50,304 --> 00:34:51,985
Well, that was awesome.

732
00:34:51,985 --> 00:34:54,207
I'm really excited and honored to be here

733
00:34:54,207 --> 00:34:56,628
among all of these people making amazing things.

734
00:34:56,628 --> 00:34:59,130
So I made a thing called Scepter,

735
00:34:59,130 --> 00:35:00,031
which I'm calling a Tinker Tool,

736
00:35:00,031 --> 00:35:02,673
kind of if you know what a Tinker Toy is.

737
00:35:03,453 --> 00:35:05,195
So it's a tool for tinkering with rule sets.

738
00:35:05,195 --> 00:35:07,457
And what I was kind of inspired by

739
00:35:07,457 --> 00:35:10,300
was the idea of rapid prototyping.

740
00:35:10,300 --> 00:35:11,701
I guess I should say I'm an academic.

741
00:35:11,701 --> 00:35:15,305
I'm an assistant professor at North Carolina University,

742
00:35:15,305 --> 00:35:18,688
so a lot of what I do is sort of research motivated.

743
00:35:18,688 --> 00:35:22,171
And I'm interested in rapid prototyping games

744
00:35:22,171 --> 00:35:25,575
and particularly I really like using index cards

745
00:35:25,575 --> 00:35:27,136
and paper prototyping sorts of things,

746
00:35:27,136 --> 00:35:28,117
especially when making.

747
00:35:28,477 --> 00:35:30,819
analog prototypes and I really wanted something

748
00:35:30,819 --> 00:35:35,041
that could be used similarly in the digital space

749
00:35:35,041 --> 00:35:38,223
to basically get right to the heart of rule sets

750
00:35:38,223 --> 00:35:40,644
without having to muck around with graphics

751
00:35:40,644 --> 00:35:42,025
and input controls and things like that.

752
00:35:42,025 --> 00:35:47,428
So this slide has a little tiny bit of Sceptre code on it

753
00:35:47,428 --> 00:35:49,449
that you can look at without understanding for now.

754
00:35:49,449 --> 00:35:53,971
But it's effectively a very tiny programming language

755
00:35:53,971 --> 00:35:55,332
for prototyping system design.

756
00:35:56,643 --> 00:35:58,545
And I'm gonna show you three examples

757
00:35:58,545 --> 00:36:00,848
to kind of demonstrate the breadth

758
00:36:00,848 --> 00:36:02,871
of what I like to do in Scepter.

759
00:36:02,871 --> 00:36:04,513
It can be used for a number of things,

760
00:36:04,513 --> 00:36:06,916
but I wanna talk a little bit about using it

761
00:36:06,916 --> 00:36:08,718
for codifying resource economies in games,

762
00:36:08,718 --> 00:36:11,642
doing a little bit of procedural generation,

763
00:36:11,642 --> 00:36:13,364
and prototyping interactive fiction.

764
00:36:15,382 --> 00:36:17,443
This next part is gonna be the most syntax heavy

765
00:36:17,443 --> 00:36:21,286
that we'll get, but the, so just to give you a sense,

766
00:36:21,286 --> 00:36:22,747
an overall sense for how this works,

767
00:36:22,747 --> 00:36:24,908
we use something called linear logic rules,

768
00:36:24,908 --> 00:36:28,951
and these are just rules where you have a left-hand side

769
00:36:28,951 --> 00:36:30,672
that when the rule is selected,

770
00:36:30,672 --> 00:36:34,155
that left-hand side gets replaced by a right-hand side.

771
00:36:34,155 --> 00:36:38,278
So the only syntax-specific deceptor in this rule is.

772
00:36:38,618 --> 00:36:40,539
the Lolly and the Tensor.

773
00:36:40,539 --> 00:36:43,260
And Lolly just separates the left-hand side

774
00:36:43,260 --> 00:36:46,002
and the right-hand side, and Tensor connects together

775
00:36:46,002 --> 00:36:48,583
the pieces that go on either side of the rule.

776
00:36:48,583 --> 00:36:50,344
So what are those pieces?

777
00:36:50,344 --> 00:36:53,665
Those are, I'm being intentionally vague about what they are

778
00:36:53,665 --> 00:36:56,026
because they can literally be anything that describes

779
00:36:56,026 --> 00:37:00,328
some kind of segment or slice of the world state

780
00:37:00,328 --> 00:37:01,468
that you're trying to describe.

781
00:37:01,468 --> 00:37:06,130
So without further ado, let's look at our first example.

782
00:37:06,130 --> 00:37:07,031
So resource economies.

783
00:37:07,031 --> 00:37:08,572
So what I mean by resource economies.

784
00:37:08,918 --> 00:37:10,280
is the kind of thing that you often find

785
00:37:10,280 --> 00:37:13,022
as a central play element in games like Minecraft

786
00:37:13,022 --> 00:37:14,644
or really any kind of crafting game

787
00:37:14,644 --> 00:37:18,427
where you have recipes that can be put together

788
00:37:18,427 --> 00:37:21,369
from resources that you're collecting around the world.

789
00:37:21,369 --> 00:37:24,672
And you can also typically have some kind of feedback loops

790
00:37:24,672 --> 00:37:26,834
in these systems where the recipes allow you

791
00:37:26,834 --> 00:37:29,797
to create new tools that allow you to uncover

792
00:37:29,797 --> 00:37:32,379
and obtain richer resources.

793
00:37:33,235 --> 00:37:36,317
So in Scepter, you can write a system like that

794
00:37:36,317 --> 00:37:38,479
with rules that look kind of like this.

795
00:37:38,479 --> 00:37:40,580
So the pieces of worlds that you represent

796
00:37:40,580 --> 00:37:42,842
are things that the player has in their inventory,

797
00:37:42,842 --> 00:37:44,883
which is like this have predicate.

798
00:37:44,883 --> 00:37:46,985
And they can have, for example,

799
00:37:46,985 --> 00:37:49,246
a material M in some quantity,

800
00:37:49,246 --> 00:37:51,708
which is a quantity plus two.

801
00:37:51,708 --> 00:37:53,129
So this is a kind of pattern matching,

802
00:37:53,129 --> 00:37:56,091
if you're used to that from another programming language.

803
00:37:56,091 --> 00:37:57,672
So what this rule does is it basically says

804
00:37:57,672 --> 00:37:59,393
if you have a material M in a quantity,

805
00:38:00,050 --> 00:38:03,572
quantity plus two, you can replace that piece of world state

806
00:38:03,572 --> 00:38:06,655
with having a shield made out of that material

807
00:38:06,655 --> 00:38:09,697
and having M in a quantity that is two less

808
00:38:09,697 --> 00:38:11,958
than the quantity you started with.

809
00:38:11,958 --> 00:38:14,320
The things in purple are variables

810
00:38:14,320 --> 00:38:16,722
and they can stand for arbitrary things in the world.

811
00:38:16,722 --> 00:38:19,424
So for example, M here, if this were sort of

812
00:38:19,424 --> 00:38:21,365
a Minecraft world, could stand for any material

813
00:38:21,365 --> 00:38:22,266
like wood or stone.

814
00:38:23,638 --> 00:38:26,338
You can also have a rule like a mining rule,

815
00:38:26,338 --> 00:38:28,219
which says if you have a pickaxe made of some material

816
00:38:28,219 --> 00:38:30,739
and there's some ore in the world

817
00:38:30,739 --> 00:38:32,799
of some other material, M prime,

818
00:38:32,799 --> 00:38:35,340
and M can break M prime,

819
00:38:35,340 --> 00:38:38,000
and you have a quantity of M prime equal to Q,

820
00:38:38,000 --> 00:38:40,121
then you can replace all of those things

821
00:38:40,121 --> 00:38:41,841
with having a quantity of M prime

822
00:38:41,841 --> 00:38:44,021
that's one more than that.

823
00:38:44,021 --> 00:38:46,062
It should be noted that we don't actually want

824
00:38:46,062 --> 00:38:48,222
to get rid of these two pieces of our world state,

825
00:38:48,222 --> 00:38:50,042
so we have a little bit of syntactic sugar

826
00:38:50,042 --> 00:38:51,983
for keeping those things around.

827
00:38:52,833 --> 00:38:55,034
and basically checking condition without deleting them.

828
00:38:55,034 --> 00:38:59,755
So what can you do with a rule set like this?

829
00:38:59,755 --> 00:39:04,616
So the author can select subsets of these rules

830
00:39:04,616 --> 00:39:05,996
that either run autonomously,

831
00:39:05,996 --> 00:39:07,497
so the system will pick randomly

832
00:39:07,497 --> 00:39:10,477
among all available rules that can fire,

833
00:39:10,477 --> 00:39:12,178
or you can run them interactively, the user picks.

834
00:39:14,427 --> 00:39:16,229
So in the Minecraft example, this could be used,

835
00:39:16,229 --> 00:39:20,132
for example, to basically run this rule set at random

836
00:39:20,132 --> 00:39:22,533
and see what kinds of things in the world

837
00:39:22,533 --> 00:39:24,695
can be put together and interacted with

838
00:39:24,695 --> 00:39:27,577
to create the kind of feedback loops I mentioned,

839
00:39:27,577 --> 00:39:29,779
or you could interact with the system to try and debug it.

840
00:39:29,779 --> 00:39:33,622
So the next example is procedural generation,

841
00:39:33,622 --> 00:39:36,484
which is basically, this is the kind of mode

842
00:39:36,484 --> 00:39:38,325
where you would always want to be

843
00:39:38,325 --> 00:39:41,027
running the rule sets autonomously.

844
00:39:41,975 --> 00:39:43,977
simple procedural generation example.

845
00:39:43,977 --> 00:39:45,999
So I have like a screenshot of Spelunky here

846
00:39:45,999 --> 00:39:50,023
to suggest maybe we want to generate some kind of level

847
00:39:50,023 --> 00:39:53,906
with starting with like an empty 2D array of tiles

848
00:39:53,906 --> 00:39:56,289
and then populating them with some random tiles

849
00:39:56,289 --> 00:39:59,192
including walls and ladders and spikes and things like that.

850
00:40:00,086 --> 00:40:04,427
So because Scepter randomly picks between sets of rules

851
00:40:04,427 --> 00:40:06,847
that can fire, you can start out by saying everything

852
00:40:06,847 --> 00:40:09,148
in the world is empty at coordinates X and Y,

853
00:40:09,148 --> 00:40:12,228
and then you can at random replace those things

854
00:40:12,228 --> 00:40:14,609
with the fact that there's a wall there

855
00:40:14,609 --> 00:40:17,249
or the fact that there are spikes there.

856
00:40:17,249 --> 00:40:20,350
You can also introduce some more interesting constraints,

857
00:40:20,350 --> 00:40:22,090
like for example, if you only wanna put a ladder

858
00:40:22,090 --> 00:40:24,690
in a location where there's an empty space above,

859
00:40:24,690 --> 00:40:26,211
then you can also add that condition.

860
00:40:28,334 --> 00:40:30,716
Again, checking that condition without deleting it.

861
00:40:30,716 --> 00:40:33,338
And you can, for example, if you only want,

862
00:40:33,338 --> 00:40:35,200
if you want to place the player in a random position,

863
00:40:35,200 --> 00:40:37,242
but you want to make sure you can only do that once,

864
00:40:37,242 --> 00:40:40,404
you can add a token to the rule that basically says,

865
00:40:40,404 --> 00:40:41,385
is the player free?

866
00:40:41,385 --> 00:40:43,127
Like, has the player not been placed yet?

867
00:40:43,127 --> 00:40:44,948
And then remove that token from the world

868
00:40:44,948 --> 00:40:46,510
so that that rule only fires once.

869
00:40:46,510 --> 00:40:49,292
And finally, my third example

870
00:40:49,292 --> 00:40:51,915
is prototyping interactive fiction.

871
00:40:51,915 --> 00:40:55,338
So, by interactive fiction, I'm thinking in kind of like,

872
00:40:55,625 --> 00:40:57,006
the parser interactive fiction sense,

873
00:40:57,006 --> 00:40:59,768
where you're typing commands like go north, take lamp,

874
00:40:59,768 --> 00:41:02,310
and you can describe these sorts of user actions

875
00:41:02,310 --> 00:41:05,953
and interactions with the world in a similar manner.

876
00:41:05,953 --> 00:41:08,214
Starting with a character in a room,

877
00:41:08,214 --> 00:41:10,376
if you, that should have a,

878
00:41:10,376 --> 00:41:13,178
the indirection should have a dollar sign next to it.

879
00:41:13,178 --> 00:41:16,121
So if the room is in a particular direction

880
00:41:16,121 --> 00:41:18,843
towards room two, then you can move in that direction

881
00:41:18,843 --> 00:41:19,803
and be in room two.

882
00:41:20,924 --> 00:41:23,165
The interesting thing about this is that it's also fairly

883
00:41:23,165 --> 00:41:26,965
straightforward to start scripting more interesting types

884
00:41:26,965 --> 00:41:29,686
of interactions like character conversation.

885
00:41:29,686 --> 00:41:33,687
So if you're in a room and a character is also in that room

886
00:41:33,687 --> 00:41:35,747
and you have some knowledge about a topic,

887
00:41:35,747 --> 00:41:37,268
then you can start talking about a topic.

888
00:41:37,268 --> 00:41:39,548
And then maybe this rule interacts with another one

889
00:41:39,548 --> 00:41:43,209
that takes the talk about predicate

890
00:41:43,209 --> 00:41:44,989
and then the character can respond to it.

891
00:41:48,050 --> 00:41:50,552
So these first two points are kind of in summary.

892
00:41:50,552 --> 00:41:53,635
You can take rule sets and you can either run them

893
00:41:53,635 --> 00:41:56,278
as generators, run them as interactive prototypes,

894
00:41:56,278 --> 00:41:58,781
or kind of combine the two to switch between

895
00:41:58,781 --> 00:42:01,404
automated generation and interaction.

896
00:42:01,404 --> 00:42:03,145
Another thing that you can do is run them

897
00:42:03,145 --> 00:42:05,528
to analyze causality between events.

898
00:42:05,528 --> 00:42:08,171
So as one example, so in interactive fiction,

899
00:42:08,171 --> 00:42:10,633
we often have like these quest or progression structures

900
00:42:11,165 --> 00:42:13,207
talk about which pieces you need to advance

901
00:42:13,207 --> 00:42:17,109
to certain puzzles, and then what that permits

902
00:42:17,109 --> 00:42:18,510
as an outcome that will allow you to advance

903
00:42:18,510 --> 00:42:19,451
to new puzzles.

904
00:42:19,451 --> 00:42:21,833
And you can, there's a visualization component

905
00:42:21,833 --> 00:42:24,394
to Scepter that allows you to see the causal structure

906
00:42:24,394 --> 00:42:26,296
between events that happen in the world.

907
00:42:27,342 --> 00:42:32,825
So with that I will throw up the GitHub link and this is by the way like a crafty command-line tool

908
00:42:32,825 --> 00:42:36,206
So be prepared for academic software

909
00:42:36,206 --> 00:42:41,149
But you are welcome to ping me on Twitter or talk to me in the wrap-up room and I'd be happy to help you out

910
00:42:41,149 --> 00:42:41,389
Thanks

911
00:42:41,389 --> 00:42:50,693
Thanks Chris

912
00:42:50,693 --> 00:42:51,414
We're already at the

913
00:42:52,483 --> 00:42:59,888
last tool, tech toolbox talk.

914
00:42:59,888 --> 00:43:01,309
That's crazy.

915
00:43:01,309 --> 00:43:14,098
So next up we have Ines McKendrick from Hello Games.

916
00:43:14,098 --> 00:43:18,621
If you guys ever heard of this game called No Mansky.

917
00:43:20,167 --> 00:43:22,268
It's good to practice that, sorry.

918
00:43:22,268 --> 00:43:28,451
Cool, I'm just gonna give it over to Ines McKendrick.

919
00:43:28,451 --> 00:43:30,632
Let's give him a big hand.

920
00:43:30,632 --> 00:43:42,177
Hi, so I'm Ines McKendrick and I'm a programmer at Hello Games.

921
00:43:42,177 --> 00:43:47,139
And yeah, we worked on No Man's Sky, which is a sci-fi exploration game.

922
00:43:47,641 --> 00:43:49,301
Today I'm going to talk a bit about the tools

923
00:43:49,301 --> 00:43:52,862
that we use for texturing, for procedural texturing,

924
00:43:52,862 --> 00:43:54,523
and making the most of our artist textures.

925
00:43:54,523 --> 00:43:56,543
But a lot of the things I'm saying

926
00:43:56,543 --> 00:43:58,263
are really relevant across the board

927
00:43:58,263 --> 00:44:00,044
when we generate content.

928
00:44:00,044 --> 00:44:01,444
They're just principles.

929
00:44:01,444 --> 00:44:03,044
But there are some useful details,

930
00:44:03,044 --> 00:44:05,125
I hope, that you'll pick up as well.

931
00:44:05,125 --> 00:44:06,965
So when it comes to content in No Man's Sky,

932
00:44:06,965 --> 00:44:10,366
we have a few aims that kind of guide our approach

933
00:44:10,366 --> 00:44:11,526
to creating that.

934
00:44:11,526 --> 00:44:13,727
The first is that we have a really large space.

935
00:44:13,727 --> 00:44:16,167
So we want to create a variety of interesting content

936
00:44:16,167 --> 00:44:17,208
within that.

937
00:44:17,208 --> 00:44:17,488
But...

938
00:44:17,973 --> 00:44:19,973
At the same time, we want to create enough content

939
00:44:19,973 --> 00:44:22,514
that we couldn't possibly save it all to disk

940
00:44:22,514 --> 00:44:24,455
or have it all in memory at runtime.

941
00:44:24,455 --> 00:44:26,675
So we need to be generating it on the fly,

942
00:44:26,675 --> 00:44:29,576
which means we need generation approaches

943
00:44:29,576 --> 00:44:33,357
that are performant and we can do it at load time or runtime.

944
00:44:33,357 --> 00:44:34,798
And the final guiding thing for us

945
00:44:34,798 --> 00:44:36,358
is that we're a really small team.

946
00:44:36,358 --> 00:44:37,859
And I know that might not seem true

947
00:44:37,859 --> 00:44:39,379
to some solo indies out there.

948
00:44:39,379 --> 00:44:40,860
That's maybe an unfair thing to say.

949
00:44:40,860 --> 00:44:43,620
But compared to a AAA team with hundreds of artists,

950
00:44:43,620 --> 00:44:44,661
we have five.

951
00:44:44,661 --> 00:44:46,881
And there's no way we can output the amount of content

952
00:44:46,881 --> 00:44:47,802
that those people can.

953
00:44:48,225 --> 00:44:50,888
So every piece of art that our artists work on

954
00:44:50,888 --> 00:44:55,752
needs to count for a load more content in the games

955
00:44:55,752 --> 00:44:57,954
than a single texture normally would.

956
00:44:57,954 --> 00:45:01,637
So in terms of how we texture, the basic overview

957
00:45:01,637 --> 00:45:04,639
is that our artists make parts of textures,

958
00:45:04,639 --> 00:45:06,521
and we just recolor and recombine them

959
00:45:06,521 --> 00:45:10,184
in different ways to get a much larger variety of textures.

960
00:45:10,184 --> 00:45:11,005
And how that looks.

961
00:45:11,315 --> 00:45:12,176
is something like this.

962
00:45:12,176 --> 00:45:14,897
So we start with a base layer there,

963
00:45:14,897 --> 00:45:17,257
and then we add different layers over the top.

964
00:45:17,257 --> 00:45:18,878
And really quickly, I think you can imagine

965
00:45:18,878 --> 00:45:20,818
the kind of variety that that can get.

966
00:45:20,818 --> 00:45:22,419
For example, if I take that stripe texture

967
00:45:22,419 --> 00:45:23,479
and swap it out for spots,

968
00:45:23,479 --> 00:45:25,580
then suddenly we have a different creature.

969
00:45:25,580 --> 00:45:27,461
If I take that sort of underbelly,

970
00:45:27,461 --> 00:45:30,382
that light color there, and swap it for some fur.

971
00:45:31,058 --> 00:45:33,120
then we're gonna have another set of textures

972
00:45:33,120 --> 00:45:35,001
and exponentially we grow the space

973
00:45:35,001 --> 00:45:37,103
in which our textures exist.

974
00:45:37,103 --> 00:45:38,564
And this is with a diffuse texture,

975
00:45:38,564 --> 00:45:40,865
but we do it matching up with our normal maps

976
00:45:40,865 --> 00:45:41,866
and our specular maps.

977
00:45:41,866 --> 00:45:43,307
So we have a complete set of textures

978
00:45:43,307 --> 00:45:45,429
for any of the props in our game

979
00:45:45,429 --> 00:45:47,510
just by the artist creating a series of these texture parts.

980
00:45:47,510 --> 00:45:48,751
And so in terms of how we author that.

981
00:45:51,740 --> 00:45:54,280
It's really important to us that our artists use

982
00:45:54,280 --> 00:45:55,921
pieces of software that are already out there.

983
00:45:55,921 --> 00:45:58,001
We don't want to make a tool that replaces Photoshop

984
00:45:58,001 --> 00:46:01,002
because that would be really dumb.

985
00:46:01,002 --> 00:46:03,102
We're not, you know, we're a really small team

986
00:46:03,102 --> 00:46:04,082
and our artists like Photoshop.

987
00:46:04,082 --> 00:46:07,163
So our artists work like this.

988
00:46:07,163 --> 00:46:08,783
They work on a texture as a whole.

989
00:46:08,783 --> 00:46:10,264
So this is a head for, I don't know,

990
00:46:10,264 --> 00:46:12,084
some rodent-y thing, I guess.

991
00:46:12,084 --> 00:46:15,205
And they work on all the layers all together there.

992
00:46:15,735 --> 00:46:18,176
So they can see the texture as a whole.

993
00:46:18,176 --> 00:46:19,637
They can combine the layers themselves

994
00:46:19,637 --> 00:46:21,979
and look at how that appears

995
00:46:21,979 --> 00:46:24,000
and check they're in the correct order and things.

996
00:46:24,000 --> 00:46:26,042
And then you can see all the little hashtags

997
00:46:26,042 --> 00:46:27,783
next to the layers there.

998
00:46:27,783 --> 00:46:28,983
And that's because we have a script

999
00:46:28,983 --> 00:46:30,564
that simply takes all those textures

1000
00:46:30,564 --> 00:46:33,146
and it exports them to a series of separate files

1001
00:46:33,146 --> 00:46:35,488
and names our normal maps appropriately

1002
00:46:35,488 --> 00:46:36,608
for us to load them in the game.

1003
00:46:38,205 --> 00:46:40,587
And to supplement that, we use metadata.

1004
00:46:40,587 --> 00:46:43,570
And what you're seeing here is our metadata editor,

1005
00:46:43,570 --> 00:46:46,032
but the data itself is actually just XML.

1006
00:46:46,032 --> 00:46:48,414
We can edit that in text format as well.

1007
00:46:48,414 --> 00:46:50,196
And I think that's a really good thing

1008
00:46:50,196 --> 00:46:52,738
that we use all the time with our generated content,

1009
00:46:52,738 --> 00:46:55,841
both so that our artists can provide more information

1010
00:46:55,841 --> 00:46:57,383
on what they've made, give it context,

1011
00:46:57,383 --> 00:46:58,764
give it probabilities for showing up.

1012
00:47:00,007 --> 00:47:02,147
Also so that we can really easily debug

1013
00:47:02,147 --> 00:47:03,748
and look through existing data.

1014
00:47:03,748 --> 00:47:05,829
You know, any time we can see what's been generated

1015
00:47:05,829 --> 00:47:07,689
and we can check the input in a really clear

1016
00:47:07,689 --> 00:47:10,350
and easy to store format and go back to it later.

1017
00:47:10,350 --> 00:47:13,111
So it's really handy.

1018
00:47:13,111 --> 00:47:15,472
So we've got our textures, we've combined them,

1019
00:47:15,472 --> 00:47:18,553
and the other important step that we do is recoloring them.

1020
00:47:18,553 --> 00:47:20,394
So looking at the same texture from before,

1021
00:47:20,394 --> 00:47:22,855
we're recoloring all the layers separately there.

1022
00:47:22,855 --> 00:47:23,955
And one of the pieces of information

1023
00:47:23,955 --> 00:47:26,076
that our artists gave on the previous slide

1024
00:47:26,076 --> 00:47:28,076
was what each of those layers is made of.

1025
00:47:28,076 --> 00:47:28,136
So.

1026
00:47:28,602 --> 00:47:31,323
If they say that a texture part is made of fur,

1027
00:47:31,323 --> 00:47:32,983
that will determine the types of colors

1028
00:47:32,983 --> 00:47:35,004
that that layer is allowed to be.

1029
00:47:35,004 --> 00:47:37,845
But when we say recoloring,

1030
00:47:37,845 --> 00:47:40,285
that could mean a lot of different things.

1031
00:47:40,285 --> 00:47:42,806
We could be just hue shifting those textures.

1032
00:47:42,806 --> 00:47:44,706
So if we have a texture and a color input,

1033
00:47:44,706 --> 00:47:47,387
we could combine those in a lot of different ways.

1034
00:47:47,387 --> 00:47:49,748
So for us specifically.

1035
00:47:50,176 --> 00:47:53,138
The most important thing that you can take away from this today,

1036
00:47:53,138 --> 00:47:55,139
and I think this has been said at Tech Toolbox before,

1037
00:47:55,139 --> 00:47:57,680
if you're working with textures, don't work in RGB.

1038
00:47:57,680 --> 00:47:59,481
Find a nice, friendly texture format

1039
00:47:59,481 --> 00:48:01,662
that gives you some control over what you're doing.

1040
00:48:01,662 --> 00:48:03,723
We tend to work in HSV, but it doesn't have to be.

1041
00:48:03,723 --> 00:48:05,585
There are other nice color spaces,

1042
00:48:05,585 --> 00:48:08,566
but just find something that gives you nicer control

1043
00:48:08,566 --> 00:48:11,068
over your colors when you're working with them.

1044
00:48:11,068 --> 00:48:15,870
So then we have this transform.

1045
00:48:15,870 --> 00:48:18,152
And this is our super secret code bit.

1046
00:48:18,549 --> 00:48:20,691
You can kind of copy it wholesale if you want,

1047
00:48:20,691 --> 00:48:23,012
but the important thing to think about here

1048
00:48:23,012 --> 00:48:25,854
is what we're inputting is our texture,

1049
00:48:25,854 --> 00:48:28,496
which is our input texture parts, a series of them,

1050
00:48:28,496 --> 00:48:30,697
the average colors of those,

1051
00:48:30,697 --> 00:48:32,979
and the color that we want them to become.

1052
00:48:32,979 --> 00:48:36,921
So in terms of hue, to give a brief overview,

1053
00:48:36,921 --> 00:48:39,523
but there'll be more detail on the notes for this slide

1054
00:48:39,523 --> 00:48:40,404
if you want to come back to it

1055
00:48:40,404 --> 00:48:41,585
and actually look at how it works.

1056
00:48:42,219 --> 00:48:44,620
Our hue is just shifted so that the average color

1057
00:48:44,620 --> 00:48:46,840
of our input texture becomes the hue

1058
00:48:46,840 --> 00:48:48,341
that we want the texture overall to be.

1059
00:48:48,341 --> 00:48:51,302
And the importance from this is that

1060
00:48:51,302 --> 00:48:53,142
when our artists are creating those textures,

1061
00:48:53,142 --> 00:48:54,723
they're not creating them in a flat hue.

1062
00:48:54,723 --> 00:48:57,283
They're not creating, they're adding detail

1063
00:48:57,283 --> 00:48:59,264
and we need to do our best to preserve that.

1064
00:48:59,264 --> 00:49:01,104
And that's why we hue shift in this way

1065
00:49:01,104 --> 00:49:04,345
and do separate transforms for saturation and value.

1066
00:49:04,345 --> 00:49:06,786
So for our saturation, that line's simply saying

1067
00:49:06,786 --> 00:49:08,447
that we will let our textures become.

1068
00:49:08,843 --> 00:49:10,864
less saturated to match the colors we put in,

1069
00:49:10,864 --> 00:49:11,945
but not more saturated.

1070
00:49:11,945 --> 00:49:15,448
So we will let them fade out to whites and grays,

1071
00:49:15,448 --> 00:49:17,049
but we won't boost the saturation

1072
00:49:17,049 --> 00:49:18,070
just because it's really ugly.

1073
00:49:18,070 --> 00:49:21,333
And then that final line, which is a bit of a monster,

1074
00:49:21,333 --> 00:49:24,055
is basically a curve that came from fiddling

1075
00:49:24,055 --> 00:49:24,996
with things in GraphToy.

1076
00:49:24,996 --> 00:49:26,637
And GraphToy is my favorite thing

1077
00:49:26,637 --> 00:49:28,538
whenever you need to deal with curves.

1078
00:49:28,538 --> 00:49:32,642
And basically all it says is that we wanna keep

1079
00:49:32,642 --> 00:49:34,783
the dark parts of our input texture dark

1080
00:49:34,783 --> 00:49:35,744
and the light parts light.

1081
00:49:36,154 --> 00:49:38,635
but in between we want to try and match the value

1082
00:49:38,635 --> 00:49:42,798
of the color that we've chosen for it.

1083
00:49:42,798 --> 00:49:45,860
So then in terms of fitting all those things together,

1084
00:49:45,860 --> 00:49:49,182
so that was, sorry, this was a bit of shader code

1085
00:49:49,182 --> 00:49:52,944
and we do all these next steps in a shader in the game

1086
00:49:52,944 --> 00:49:53,904
as we load into it.

1087
00:49:53,904 --> 00:49:56,486
So the basic steps to bring this all together

1088
00:49:56,486 --> 00:49:59,367
are that our artists create all these bits of textures,

1089
00:49:59,367 --> 00:50:01,308
they create these color palettes.

1090
00:50:01,642 --> 00:50:03,524
And in-game, we select the ones we want.

1091
00:50:03,524 --> 00:50:05,406
They give us probability data, and that

1092
00:50:05,406 --> 00:50:08,789
lets us choose how rare individual parts should be.

1093
00:50:08,789 --> 00:50:12,694
So we choose a complete set for an individual model.

1094
00:50:12,694 --> 00:50:14,215
We load all that data in-game.

1095
00:50:14,215 --> 00:50:16,377
We load all those input textures.

1096
00:50:16,377 --> 00:50:18,199
We then combine and recolor them.

1097
00:50:18,995 --> 00:50:22,299
in a shader, and then the important part is that we then

1098
00:50:22,299 --> 00:50:24,602
generate mipmaps and compress them and unload

1099
00:50:24,602 --> 00:50:26,404
all that previous texture data.

1100
00:50:26,404 --> 00:50:28,025
A big thing when you're working with textures

1101
00:50:28,025 --> 00:50:30,308
is that it's really easy to end up having a massive

1102
00:50:30,308 --> 00:50:31,570
RGB data in your game, so you need a plan for

1103
00:50:31,570 --> 00:50:33,592
how you're going to get that into a workable format.

1104
00:50:33,592 --> 00:50:34,993
And then the results themselves.

1105
00:50:39,675 --> 00:50:42,036
We have a bunch of creatures, plants.

1106
00:50:42,036 --> 00:50:44,978
We use this texturing technique right across the board.

1107
00:50:44,978 --> 00:50:47,079
And this shows a creature in context,

1108
00:50:47,079 --> 00:50:48,559
but a really important thing

1109
00:50:48,559 --> 00:50:50,681
when you're evaluating your content

1110
00:50:50,681 --> 00:50:52,762
is that you're seeing things en masse.

1111
00:50:52,762 --> 00:50:55,183
So we have tools that let artists really quickly

1112
00:50:55,183 --> 00:50:57,124
see vast amounts of content

1113
00:50:57,124 --> 00:50:59,105
generated from their input work.

1114
00:50:59,805 --> 00:51:02,848
and they can quickly call out bugs if there's a problem.

1115
00:51:02,848 --> 00:51:05,210
They can see if all those creatures show up red

1116
00:51:05,210 --> 00:51:07,572
without stripes or if something's showing up too much

1117
00:51:07,572 --> 00:51:09,674
or if there's a texture that they're not able

1118
00:51:09,674 --> 00:51:11,496
to get enough from, if it doesn't look different enough

1119
00:51:11,496 --> 00:51:13,557
to their other approaches, if there's a space

1120
00:51:13,557 --> 00:51:15,139
where they haven't made enough content.

1121
00:51:15,139 --> 00:51:17,441
So being able to evaluate content in a wide way

1122
00:51:17,441 --> 00:51:19,903
is really important for us.

1123
00:51:19,903 --> 00:51:20,643
So I know there's not a whole lot of.

1124
00:51:25,237 --> 00:51:29,820
detail on a tool that you can take away, but the important thing I want you to go away

1125
00:51:29,820 --> 00:51:35,184
with today is that anything your artists make, you can get so much more from.

1126
00:51:35,184 --> 00:51:39,927
You can take that content, you can boost it, you can manipulate it in ways, and that can

1127
00:51:39,927 --> 00:51:43,109
be a really approachable and controllable way to look at procedural generation.

1128
00:51:43,109 --> 00:51:47,852
This is great because our artists have made all the things and they know what the output

1129
00:51:47,852 --> 00:51:48,412
is going to be like.

1130
00:51:48,950 --> 00:51:50,510
So we have a fairly manageable space,

1131
00:51:50,510 --> 00:51:52,351
but we're still doing so much more

1132
00:51:52,351 --> 00:51:53,712
with the textures they've made

1133
00:51:53,712 --> 00:51:55,233
than if we just used them directly.

1134
00:51:55,233 --> 00:51:58,474
We have a way broader amount of content.

1135
00:51:58,474 --> 00:52:00,015
If you have any questions about this stuff,

1136
00:52:00,015 --> 00:52:01,835
then just shout me on Twitter.

1137
00:52:01,835 --> 00:52:03,696
I don't have such a cool email address,

1138
00:52:03,696 --> 00:52:06,778
but you can email me,

1139
00:52:06,778 --> 00:52:08,999
and we'll all be in a wrap-up room later, I think.

1140
00:52:08,999 --> 00:52:09,839
So give me a shout.

1141
00:52:20,278 --> 00:52:23,983
Thanks Ines and thanks all of the other speakers as well.

1142
00:52:23,983 --> 00:52:24,824
Look, I fixed a year.

1143
00:52:24,824 --> 00:52:32,133
Just to wrap this all up, thanks for listening to a bunch of super varied game developers

1144
00:52:32,133 --> 00:52:34,716
talk about their games and their tools.

1145
00:52:35,330 --> 00:52:39,793
Take it, yeah, just take it seriously and think about the tools you're making and especially

1146
00:52:39,793 --> 00:52:44,798
sharing them with each other because that's basically why we started doing the Tech Toolbox.

1147
00:52:44,798 --> 00:52:45,778
Thanks for coming.

1148
00:52:45,778 --> 00:52:52,264
Tell your friends, especially tell anybody you know who may not, out of their own,

1149
00:52:52,703 --> 00:52:55,486
You know, who may not normally submit to these type of things,

1150
00:52:55,486 --> 00:52:57,947
tell them to do it anyway, especially your diverse friends.

1151
00:52:57,947 --> 00:52:59,849
We really appreciate that, and it's hard for us to find them.

1152
00:52:59,849 --> 00:53:04,812
Watch the previous years in the vaults if you thought this was really interesting,

1153
00:53:04,812 --> 00:53:08,035
and please fill out the evaluation, and definitely come up

1154
00:53:08,035 --> 00:53:10,537
as soon as we clap one more time to the front of the stage

1155
00:53:10,537 --> 00:53:13,099
and talk to anybody you have questions about their tool.

1156
00:53:13,099 --> 00:53:15,220
Thank you so much, and I hope to see you again next year.

