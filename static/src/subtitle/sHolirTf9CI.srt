1
00:00:06,596 --> 00:00:07,176
Can everyone hear me?

2
00:00:07,196 --> 00:00:08,597
All right, that sounds good.

3
00:00:09,718 --> 00:00:10,178
Hi, everyone.

4
00:00:10,218 --> 00:00:10,839
Thanks for coming.

5
00:00:11,399 --> 00:00:14,241
My name is Andre Arceneaux, and I'm from Creative Assembly.

6
00:00:14,802 --> 00:00:16,042
And I'm here today to talk to you

7
00:00:16,383 --> 00:00:20,125
about the AI for our siege battles in Total War Warhammer.

8
00:00:20,145 --> 00:00:23,988
A little bit about me before we get started.

9
00:00:24,728 --> 00:00:27,370
I'm a 21-year veteran of the games industry,

10
00:00:27,830 --> 00:00:28,891
making games for a long time.

11
00:00:29,960 --> 00:00:35,704
I got my start designing levels for Doom, specifically Final Doom, but most of my career

12
00:00:35,884 --> 00:00:40,687
has been focused on gameplay programming for MMO and RTS titles.

13
00:00:42,729 --> 00:00:47,992
I've also spent a few years in project leadership and production roles, and you'll see a little

14
00:00:48,012 --> 00:00:49,873
bit of that influence in this presentation today.

15
00:00:49,893 --> 00:00:57,878
And I joined Creative Assembly in 2014, and now I'm responsible for the battle AI in the

16
00:00:57,938 --> 00:00:58,699
Total War series.

17
00:01:00,748 --> 00:01:02,310
For those of you who may not be familiar,

18
00:01:03,292 --> 00:01:05,696
Total War is an award-winning strategy series

19
00:01:05,756 --> 00:01:07,399
with over 15 years of history.

20
00:01:08,961 --> 00:01:11,846
It's been set in various historical time periods,

21
00:01:12,186 --> 00:01:13,969
ranging from the Japanese shogunate

22
00:01:14,209 --> 00:01:15,712
through the Napoleonic Empire.

23
00:01:17,396 --> 00:01:21,438
It features a sandbox-style, turn-based campaign map

24
00:01:21,978 --> 00:01:23,278
with real-time battles.

25
00:01:24,119 --> 00:01:26,220
And all of the resource management and recruiting

26
00:01:27,040 --> 00:01:28,861
is done in the turn-based campaign.

27
00:01:29,421 --> 00:01:32,242
So the battles themselves don't have any resource gathering

28
00:01:32,302 --> 00:01:34,323
or unit recruitment, which means it

29
00:01:34,363 --> 00:01:36,444
doesn't fit the typical RTS formula

30
00:01:36,484 --> 00:01:37,304
that you might think of.

31
00:01:39,165 --> 00:01:42,646
So when I talk about battle AI in this talk, what I mean

32
00:01:42,806 --> 00:01:45,027
is the AI for the real-time battles portion.

33
00:01:46,867 --> 00:01:52,730
During those battles, players control armies of thousands of men in real time to defeat

34
00:01:53,031 --> 00:01:53,591
the AI.

35
00:01:55,332 --> 00:02:00,755
And we've supported various different types of battles throughout the series, from open

36
00:02:00,795 --> 00:02:06,118
field land battles to ambushes, river crossings, and siege battles.

37
00:02:06,738 --> 00:02:09,760
And this talk will focus exclusively on those siege battles.

38
00:02:12,537 --> 00:02:17,420
Total War Warhammer brings together the gameplay style of the Total War series

39
00:02:17,920 --> 00:02:20,741
with the amazing world of Warhammer fantasy battles.

40
00:02:22,062 --> 00:02:25,784
It's the first non-historical setting for the Total War series,

41
00:02:26,344 --> 00:02:30,166
and as such it presents some pretty unique challenges to the AI that we

42
00:02:30,206 --> 00:02:31,446
haven't had to deal with before.

43
00:02:32,507 --> 00:02:37,049
Things such as totally new unit types like individual heroes,

44
00:02:37,649 --> 00:02:40,351
flying units, and crazy mechanical contraptions.

45
00:02:41,762 --> 00:02:44,763
We have some very different unit rosters per faction.

46
00:02:45,083 --> 00:02:47,683
For example, the dwarfs don't have cavalry,

47
00:02:48,524 --> 00:02:51,005
and the vampire accounts don't have any ranged units.

48
00:02:53,065 --> 00:02:56,986
We also have a very wide range of unit power, capabilities,

49
00:02:57,187 --> 00:02:57,847
and upgrades.

50
00:02:59,467 --> 00:03:01,788
And finally, there's a cool new spell system

51
00:03:02,188 --> 00:03:04,209
that brings a dramatic new element to the battles

52
00:03:04,249 --> 00:03:04,729
themselves.

53
00:03:07,469 --> 00:03:09,591
So in this talk, I'm gonna cover

54
00:03:09,631 --> 00:03:10,933
a number of different subjects.

55
00:03:11,133 --> 00:03:13,696
And I wanted to bring this talk to GDC this year

56
00:03:14,377 --> 00:03:16,440
because it covers a number of topics

57
00:03:16,860 --> 00:03:19,243
that are different than the typical agent-based AI

58
00:03:19,283 --> 00:03:20,325
that you're all familiar with.

59
00:03:21,186 --> 00:03:23,529
And that's a good thing for us to broaden our horizons

60
00:03:23,609 --> 00:03:25,511
and learn a little something about different disciplines.

61
00:03:26,726 --> 00:03:29,508
So during this talk, I'll be covering the context

62
00:03:29,548 --> 00:03:32,691
of siege battles in Total War Warhammer, what they are,

63
00:03:32,891 --> 00:03:36,034
why they're important, and how our gameplay goals changed

64
00:03:36,094 --> 00:03:38,436
for this type of battle in this particular title.

65
00:03:40,057 --> 00:03:43,039
We'll then cover an overview of the AI architecture

66
00:03:43,119 --> 00:03:45,922
in general for the real-time battles of the Total War

67
00:03:45,942 --> 00:03:46,322
series.

68
00:03:47,903 --> 00:03:51,987
Then we'll dig into reviewing some AI-related design hints

69
00:03:52,167 --> 00:03:54,569
that are used on every siege battle map in order

70
00:03:54,589 --> 00:03:56,030
for the AI to behave correctly.

71
00:03:56,977 --> 00:03:59,058
But the bulk of the talk will be spent

72
00:03:59,238 --> 00:04:02,441
diving into the details of the attacking siege AI.

73
00:04:03,101 --> 00:04:05,423
We won't get into any depth on defending

74
00:04:05,603 --> 00:04:07,804
so that we can really get into some of the nitty gritty

75
00:04:07,824 --> 00:04:08,725
of attacking AI.

76
00:04:10,546 --> 00:04:12,868
And finally, we'll end by covering

77
00:04:12,888 --> 00:04:15,930
a little bit about our team process and collaboration

78
00:04:16,430 --> 00:04:18,312
with some conclusions and general advice.

79
00:04:18,972 --> 00:04:20,333
So let's get into it.

80
00:04:21,234 --> 00:04:21,914
Siege battles.

81
00:04:23,455 --> 00:04:26,578
Let's talk about what they are and how our goals changed.

82
00:04:28,104 --> 00:04:33,767
So siege battles are major battles over a well-defended, walled city.

83
00:04:34,828 --> 00:04:38,430
It shows off some of the biggest and coolest cities of each faction.

84
00:04:39,791 --> 00:04:45,254
And the siege battles are intended to be a high-stakes battle with significant strategic

85
00:04:45,354 --> 00:04:46,515
impact on the campaign.

86
00:04:50,257 --> 00:04:55,300
Sieges are triggered when an army attacks the capital of a province on the campaign

87
00:04:55,340 --> 00:04:55,540
map.

88
00:04:56,377 --> 00:04:58,878
The defenders can hold out for several turns

89
00:04:59,298 --> 00:05:01,799
before beginning to suffer losses due to attrition,

90
00:05:02,199 --> 00:05:03,599
being starved out, essentially.

91
00:05:04,660 --> 00:05:07,201
The attacker can spend multiple turns

92
00:05:07,281 --> 00:05:10,542
building siege equipment before they initiate the battle.

93
00:05:11,923 --> 00:05:14,284
And when that attacker chooses to start the battle,

94
00:05:14,364 --> 00:05:16,124
they'll take that siege equipment with them

95
00:05:16,644 --> 00:05:17,345
into the map.

96
00:05:18,065 --> 00:05:19,986
But you can't carry the siege equipment with you

97
00:05:20,046 --> 00:05:21,867
as your army moves around in the campaign.

98
00:05:25,523 --> 00:05:29,126
So within a siege battle, there's always an attacker and a defender.

99
00:05:30,427 --> 00:05:34,630
The attacker always brings the army from the campaign map, which was laying siege to this

100
00:05:34,670 --> 00:05:37,633
settlement, including any siege equipment that they may have built.

101
00:05:37,653 --> 00:05:44,098
The defender always has some free garrison units with which to mount a defense.

102
00:05:45,279 --> 00:05:50,923
The amount and type of those garrison units can be increased and changed by building various

103
00:05:50,983 --> 00:05:52,725
city upgrades on the campaign map.

104
00:05:54,983 --> 00:05:59,126
The defender might also have an entire army of units stationed in the city

105
00:05:59,766 --> 00:06:02,648
if they were able to do so before the city was besieged.

106
00:06:05,129 --> 00:06:08,291
Each side can bring multiple armies of reinforcements with them,

107
00:06:08,731 --> 00:06:12,313
but this is wholly dependent on positioning at the campaign level.

108
00:06:13,013 --> 00:06:17,015
So if you had a friendly army nearby, it can be pulled into the battle with you

109
00:06:17,236 --> 00:06:18,376
as a set of reinforcements.

110
00:06:19,897 --> 00:06:22,318
Those reinforcements may be either player-controlled,

111
00:06:22,458 --> 00:06:24,600
in the case of a player having two armies nearby.

112
00:06:25,519 --> 00:06:31,544
or it could be AI-controlled, if an AI player is near the city while you as a player attack it.

113
00:06:33,346 --> 00:06:38,251
Within the battle itself, the army always deploys its armies outside of the city walls,

114
00:06:39,412 --> 00:06:43,475
and the defender always deploys either on the walls or inside the city,

115
00:06:44,056 --> 00:06:47,920
and the attacker always deploys first, without knowledge of where the defender is.

116
00:06:50,145 --> 00:06:53,766
The battle is over once either you've managed to destroy

117
00:06:53,946 --> 00:06:57,467
or rout all of your enemies, or the attacker has managed

118
00:06:57,487 --> 00:06:59,748
to capture the central victory point of the city.

119
00:07:02,369 --> 00:07:05,009
So in our previous Total War titles,

120
00:07:05,950 --> 00:07:09,311
our goals for siege battles were to be historically

121
00:07:09,391 --> 00:07:11,171
authentic, or at least believable,

122
00:07:12,412 --> 00:07:15,553
to allow the attacker to physically surround the city

123
00:07:15,653 --> 00:07:17,573
to really get that feel of laying siege.

124
00:07:18,737 --> 00:07:21,700
and then to begin with a deliberate bombardment phase

125
00:07:22,421 --> 00:07:27,286
where the attacker is trying to inflict a lot of damage into the city before entering.

126
00:07:29,067 --> 00:07:33,131
Once they manage to enter the city, there should be an intricate street battle

127
00:07:34,092 --> 00:07:35,734
once the attacker has made it past the walls.

128
00:07:38,035 --> 00:07:41,256
And in Rome 2 and Attila, which were our two previous titles,

129
00:07:41,836 --> 00:07:45,898
these goals were executed by having the attacking CGI use

130
00:07:45,938 --> 00:07:49,240
a single tactic, which used one finite state machine

131
00:07:49,300 --> 00:07:51,041
to control the entire attacking army.

132
00:07:53,982 --> 00:07:56,083
But our goals for Warhammer were slightly different.

133
00:07:57,063 --> 00:07:59,524
We wanted fast, high-intensity battles,

134
00:07:59,704 --> 00:08:01,425
as opposed to deliberate phases.

135
00:08:03,011 --> 00:08:04,931
We wanted a single attack direction

136
00:08:05,231 --> 00:08:08,472
to ensure that the battle was focused on the city walls

137
00:08:08,672 --> 00:08:10,992
instead of surrounding the city, so you couldn't just

138
00:08:11,092 --> 00:08:12,313
slip past unnoticed.

139
00:08:13,473 --> 00:08:15,273
Holding those city walls is the key

140
00:08:15,333 --> 00:08:17,493
to defending a settlement correctly.

141
00:08:19,814 --> 00:08:21,894
And there should be a quick resolution to the battle

142
00:08:22,114 --> 00:08:23,714
once you've made it past the walls.

143
00:08:25,095 --> 00:08:29,055
So therefore, pressing the defender quickly and broadly

144
00:08:29,655 --> 00:08:32,376
is important for the attacking AI to do its job well.

145
00:08:33,997 --> 00:08:35,618
Because of these different gameplay goals,

146
00:08:36,278 --> 00:08:39,020
the AI needed to attack cities in a very different way

147
00:08:39,080 --> 00:08:39,901
than we did before.

148
00:08:40,861 --> 00:08:43,003
While we had solid functionality to build on

149
00:08:43,083 --> 00:08:45,784
from Total War Attila, significant effort

150
00:08:45,824 --> 00:08:48,786
was spent to reorganize this functionality in order

151
00:08:48,806 --> 00:08:49,887
to suit our new goals.

152
00:08:50,988 --> 00:08:54,010
And we did this by executing many specialized tactics

153
00:08:54,350 --> 00:08:55,191
simultaneously.

154
00:08:56,652 --> 00:08:58,013
Most of what we'll cover today is

155
00:08:58,033 --> 00:08:59,974
the result of that reorganization process.

156
00:09:02,532 --> 00:09:06,894
So let's talk a bit about the general battle AI architecture in the Total War series.

157
00:09:08,495 --> 00:09:13,257
There's many tiers of game objects that are present in the battle hierarchy.

158
00:09:14,098 --> 00:09:19,260
Starting with the smallest, we have an entity, which represents either a single man or a

159
00:09:19,300 --> 00:09:22,062
composite entity such as a horse and rider.

160
00:09:23,562 --> 00:09:29,765
We then have squads, which is a collection of entities, and a unit, which is a collection

161
00:09:29,805 --> 00:09:30,446
of squads.

162
00:09:31,501 --> 00:09:35,782
Generally, a unit has only one squad, but through various game mechanics,

163
00:09:36,262 --> 00:09:39,543
the unit can get chopped into multiple squads, for example,

164
00:09:39,603 --> 00:09:41,204
if they're in different pathfinding areas.

165
00:09:42,284 --> 00:09:46,845
A typical unit is composed of between 80 and 120 individual entities.

166
00:09:49,426 --> 00:09:52,587
Above that, we have an army, which is a collection of units.

167
00:09:52,687 --> 00:09:54,807
Generally, there's up to 20 units in one army.

168
00:09:56,259 --> 00:09:58,480
But then you can also have alliances,

169
00:09:58,560 --> 00:10:00,281
which are sets of multiple armies.

170
00:10:00,821 --> 00:10:03,042
This typically happens when you bring reinforcements

171
00:10:03,102 --> 00:10:05,863
into a battle and can control more than one army at a time.

172
00:10:08,484 --> 00:10:11,285
Orders, however, are always issued to units.

173
00:10:12,086 --> 00:10:14,827
And the AI uses the exact same set of orders

174
00:10:14,887 --> 00:10:16,168
that players can issue.

175
00:10:17,208 --> 00:10:19,249
Orders are things like move to that location,

176
00:10:19,849 --> 00:10:20,669
change your width.

177
00:10:21,787 --> 00:10:26,869
attack that particular target, pick up this piece of siege equipment, or activate that ability, etc.

178
00:10:29,470 --> 00:10:36,653
Effectively then, battle AI in Total War is game logic that acts similar to a player

179
00:10:37,093 --> 00:10:38,474
by issuing the same set of orders.

180
00:10:41,775 --> 00:10:46,157
Those orders are defined and implemented by the battle team,

181
00:10:46,217 --> 00:10:48,638
which is essentially our gameplay team for the battle mode.

182
00:10:50,130 --> 00:10:52,731
Therefore, anything that happens as a result of player action

183
00:10:53,112 --> 00:10:56,453
is the responsibility of that battle team and not the AI

184
00:10:56,493 --> 00:10:56,693
team.

185
00:10:57,133 --> 00:10:59,194
This includes some things that would classically

186
00:10:59,374 --> 00:11:02,456
be considered AI, such as pathfinding and navigation.

187
00:11:04,617 --> 00:11:06,598
There's a separate campaign team that's

188
00:11:06,638 --> 00:11:08,658
responsible for all of the gameplay and AI

189
00:11:08,759 --> 00:11:10,439
on the turn-based campaign map.

190
00:11:11,420 --> 00:11:14,241
So the battle AI team is focused just solely

191
00:11:14,401 --> 00:11:17,022
on providing an enjoyable computer opponent that

192
00:11:17,042 --> 00:11:19,823
can play against the player using the same set of tools.

193
00:11:21,447 --> 00:11:22,928
So let's look at how that's accomplished

194
00:11:23,429 --> 00:11:25,690
by examining the architecture of the battle AI.

195
00:11:28,433 --> 00:11:30,714
The AI architecture for these battles in Total War

196
00:11:30,774 --> 00:11:33,116
is well established and has been used for many years.

197
00:11:33,897 --> 00:11:36,819
It uses a top-down set of strategic layers

198
00:11:36,899 --> 00:11:39,861
going from high-level strategy down to group tactics.

199
00:11:40,582 --> 00:11:43,364
We call it the objective detachment tactics system.

200
00:11:44,580 --> 00:11:48,321
There isn't any individual unit AI at all in this system.

201
00:11:48,941 --> 00:11:51,521
Even individual orders are only executing

202
00:11:52,141 --> 00:11:54,962
after considering what other units on the field are doing.

203
00:11:56,983 --> 00:11:59,243
So starting at the top, we have alliance,

204
00:11:59,283 --> 00:12:00,403
which we've touched on before.

205
00:12:01,604 --> 00:12:04,644
Each alliance in the battle is capable of running the AI.

206
00:12:05,645 --> 00:12:08,285
That's useful when you have a reinforcing army that

207
00:12:08,465 --> 00:12:10,786
enters the battlefield on the player's side.

208
00:12:12,163 --> 00:12:14,244
or if the player decides to place some of his units

209
00:12:14,364 --> 00:12:15,745
under simplified AI control.

210
00:12:19,247 --> 00:12:22,269
Each alliance owns an object called the Grand Tactical

211
00:12:22,389 --> 00:12:24,690
Analyzer, or GTA for short.

212
00:12:25,471 --> 00:12:27,832
And this decides whether the entire alliance

213
00:12:28,012 --> 00:12:29,653
should be attacking or defending,

214
00:12:30,054 --> 00:12:31,715
depending on the battlefield circumstances.

215
00:12:32,655 --> 00:12:34,556
It's also then responsible for creating

216
00:12:34,596 --> 00:12:36,677
the set of objectives to be executed

217
00:12:37,138 --> 00:12:39,099
and assigning units to each objective.

218
00:12:41,364 --> 00:12:44,887
The objectives themselves represent the set of units

219
00:12:44,947 --> 00:12:46,768
that's matched to a high level goal.

220
00:12:47,528 --> 00:12:50,931
For example, if the enemy splits his forces into two groups,

221
00:12:51,631 --> 00:12:54,153
the GTA might generate a separate objective

222
00:12:54,393 --> 00:12:56,474
for each set of units to go and attack them.

223
00:12:56,955 --> 00:12:59,497
And this would cause the AI to divide its forces as well.

224
00:13:01,738 --> 00:13:03,900
Detachments are responsible for figuring out

225
00:13:04,060 --> 00:13:05,461
how to accomplish the goal.

226
00:13:06,621 --> 00:13:09,423
In practice, each objective just has one detachment.

227
00:13:11,148 --> 00:13:13,771
The detachments have a set of tactics

228
00:13:13,851 --> 00:13:16,353
that they can use to choose from in order

229
00:13:16,393 --> 00:13:17,715
to accomplish the objective.

230
00:13:19,036 --> 00:13:22,399
That list of tactics is specific to a type of detachment,

231
00:13:23,200 --> 00:13:25,142
although the tactics themselves can be

232
00:13:25,202 --> 00:13:27,003
reused in multiple detachments.

233
00:13:28,665 --> 00:13:32,088
The detachment may assign units to any of its child tactics

234
00:13:32,328 --> 00:13:32,869
as desired.

235
00:13:35,590 --> 00:13:40,554
Tactics themselves usually represent a maneuver to be executed, such as advancing in formation,

236
00:13:41,194 --> 00:13:43,036
outflanking, or holding a position.

237
00:13:44,757 --> 00:13:49,962
Its goal is generally to get its set of assigned units into an engagement distance with the

238
00:13:50,022 --> 00:13:52,484
enemy where the melee manager takes over.

239
00:13:54,287 --> 00:13:57,830
The melee manager is responsible for the micromanagement

240
00:13:58,110 --> 00:14:01,273
of individual AI units, such as performing

241
00:14:01,393 --> 00:14:03,034
the evaluation of potential targets

242
00:14:03,795 --> 00:14:05,696
and issuing individual attack orders.

243
00:14:07,037 --> 00:14:10,080
This system is the core of the low-level AI logic.

244
00:14:11,501 --> 00:14:14,203
When the melee manager decides to issue an order to a unit,

245
00:14:14,803 --> 00:14:17,545
it steals control away from the unit's assigned tactic

246
00:14:17,766 --> 00:14:19,147
for the duration of those orders.

247
00:14:19,747 --> 00:14:21,689
And when it no longer wants control of the unit,

248
00:14:21,889 --> 00:14:23,650
it relinquishes it back to the tactic.

249
00:14:26,232 --> 00:14:29,573
All of these systems are owned and processed by the battle model.

250
00:14:30,073 --> 00:14:34,835
And when we say model, we mean basically the typical model view controller architecture.

251
00:14:36,136 --> 00:14:40,838
This battle model is completely deterministic for networking and replay requirements.

252
00:14:41,958 --> 00:14:45,840
And those replays are really useful during development to reproduce bugs that people

253
00:14:45,880 --> 00:14:46,100
find.

254
00:14:47,575 --> 00:14:51,338
The battle model itself is ticked 10 times per second,

255
00:14:51,859 --> 00:14:54,861
meaning that we have up to a maximum of 100 milliseconds

256
00:14:54,881 --> 00:14:56,462
per tick to do all of our calculations.

257
00:14:57,143 --> 00:14:59,925
But in practice, faster is a lot better

258
00:15:00,386 --> 00:15:02,027
because we have a fast forward feature.

259
00:15:02,447 --> 00:15:03,588
And if you're running at the maximum

260
00:15:03,608 --> 00:15:05,329
of 100 milliseconds per tick, then it

261
00:15:05,369 --> 00:15:06,430
doesn't go any faster than that.

262
00:15:07,091 --> 00:15:10,934
So in practice, our model tick is about 20 milliseconds.

263
00:15:13,158 --> 00:15:16,680
Tactics themselves can hold state between model ticks,

264
00:15:17,020 --> 00:15:19,202
and they typically do so in a finite state machine.

265
00:15:20,142 --> 00:15:23,224
But objectives and detachments recalculate everything

266
00:15:23,304 --> 00:15:23,745
every tick.

267
00:15:25,046 --> 00:15:28,388
That means there's no guarantee that a tactic will still

268
00:15:28,428 --> 00:15:30,789
be running on the next tick, or even

269
00:15:30,809 --> 00:15:32,911
that a tactic that continues to execute

270
00:15:33,011 --> 00:15:34,872
will have the same set of units it did last time.

271
00:15:36,333 --> 00:15:37,614
The strength of a system like this,

272
00:15:37,694 --> 00:15:39,715
though, is its responsiveness to player action.

273
00:15:43,215 --> 00:15:46,218
So getting into the details of the Siege AI in particular,

274
00:15:47,059 --> 00:15:49,782
there's a single objective detachment pair for attacking

275
00:15:50,162 --> 00:15:52,945
and a different objective detachment pair for defending.

276
00:15:54,806 --> 00:15:56,888
The Grand Tactical Analyzer intentionally

277
00:15:56,948 --> 00:16:00,131
keeps these pairs alive for the entire duration of the battle,

278
00:16:01,192 --> 00:16:02,714
meaning that for siege battles, we

279
00:16:02,754 --> 00:16:05,196
can safely hold more state in the detachment

280
00:16:05,236 --> 00:16:06,097
than we typically could.

281
00:16:08,204 --> 00:16:11,987
The various tasks and tactics in the lower right portion of this diagram

282
00:16:12,788 --> 00:16:16,390
are defined and carried out by a highly specialized subsystem called the

283
00:16:16,471 --> 00:16:17,311
Settlement AI,

284
00:16:18,252 --> 00:16:21,855
which deals exclusively with the interior of the city in order to have

285
00:16:21,915 --> 00:16:23,256
those compelling street battles.

286
00:16:24,497 --> 00:16:25,237
And it does so

287
00:16:26,078 --> 00:16:29,781
using a specialized settlement graph and various influence graphs,

288
00:16:30,601 --> 00:16:31,882
which we'll get into in a little while.

289
00:16:32,943 --> 00:16:34,865
But this talk will focus primarily

290
00:16:35,005 --> 00:16:36,827
on the tactics, which are highlighted in red,

291
00:16:37,268 --> 00:16:40,371
and how the attack settlement detachment coordinates

292
00:16:40,431 --> 00:16:40,872
between them.

293
00:16:43,354 --> 00:16:45,056
But before we can get into those details,

294
00:16:45,797 --> 00:16:48,921
we first have to discuss the AI hint data that has to be

295
00:16:48,981 --> 00:16:50,282
present on every siege map.

296
00:16:52,973 --> 00:16:54,595
The first hint that's worth discussing

297
00:16:54,735 --> 00:16:55,876
is the settlement perimeter.

298
00:16:56,576 --> 00:16:59,198
This is a closed polygon that defines

299
00:16:59,418 --> 00:17:01,219
which parts of the map are considered

300
00:17:01,259 --> 00:17:04,542
to be inside the city, and anything else

301
00:17:04,702 --> 00:17:06,123
is considered outside of the city.

302
00:17:06,703 --> 00:17:09,606
It doesn't have to be perfectly drawn,

303
00:17:10,346 --> 00:17:13,949
but there should never be any point outside of the polygon

304
00:17:14,009 --> 00:17:15,930
that's actually inside the city, including

305
00:17:15,970 --> 00:17:16,991
the walls of the settlement.

306
00:17:17,952 --> 00:17:20,193
And this polygon is manually drawn by a designer.

307
00:17:21,188 --> 00:17:23,750
And I should repeat the same disclaimer as the previous talk.

308
00:17:23,790 --> 00:17:26,773
This is obviously not indicative of the final product.

309
00:17:27,353 --> 00:17:28,314
Clearly a test map.

310
00:17:30,576 --> 00:17:33,558
The next hint are deployment lines.

311
00:17:34,819 --> 00:17:36,900
These are manually placed by designers,

312
00:17:37,161 --> 00:17:39,702
just like the previous settlement perimeter.

313
00:17:41,164 --> 00:17:43,165
And these lines indicate where the AI

314
00:17:43,265 --> 00:17:46,588
might choose to deploy a portion of its forces when attacking.

315
00:17:47,488 --> 00:17:49,130
The width of the lines doesn't really matter.

316
00:17:49,150 --> 00:17:50,871
It's just their positions and orientations.

317
00:17:53,375 --> 00:17:56,596
From those deployment lines, we trace a line forward

318
00:17:56,696 --> 00:17:58,657
until we contact the settlement perimeter.

319
00:17:59,277 --> 00:18:03,218
And this yellow line is called the assault designation.

320
00:18:04,378 --> 00:18:07,659
Each assault designation represents a channel or a lane

321
00:18:07,899 --> 00:18:11,459
that the AI can use to focus on part of the city's defenses.

322
00:18:12,320 --> 00:18:15,060
The AI will generate these hints when the map loads.

323
00:18:17,740 --> 00:18:22,766
Each assault designation has an attack focus, which is the point where the assault designation

324
00:18:22,806 --> 00:18:24,708
makes contact with the settlement perimeter.

325
00:18:26,310 --> 00:18:31,596
This is typically used to define which walled buildings are relevant to each assault designation

326
00:18:32,117 --> 00:18:36,522
by doing quick distance tests along the settlement perimeter from the attack focus.

327
00:18:39,174 --> 00:18:42,095
Each assault designation is scored from 0 to 1

328
00:18:42,575 --> 00:18:45,436
for each possible method of getting into the city, of which

329
00:18:45,476 --> 00:18:46,016
there are three.

330
00:18:46,076 --> 00:18:48,697
And we'll get into a lot of detail on this a bit later.

331
00:18:49,438 --> 00:18:53,199
But for the three scores, the first one is assault walls.

332
00:18:53,779 --> 00:18:55,360
And we determine that score based

333
00:18:55,420 --> 00:18:57,720
on how many dockable wall pieces there

334
00:18:57,820 --> 00:18:59,121
are near the attack focus.

335
00:19:00,201 --> 00:19:01,582
Then we have assaulting gates.

336
00:19:01,822 --> 00:19:04,983
And we generate that score based on how close the nearest gate

337
00:19:05,163 --> 00:19:06,303
is to the attack focus.

338
00:19:07,335 --> 00:19:10,277
and then the breach walls, which is scored based on

339
00:19:10,317 --> 00:19:13,078
how many destroyable walls are near the attack focus.

340
00:19:14,158 --> 00:19:16,599
These scores are first calculated when the map loads.

341
00:19:19,701 --> 00:19:22,522
And as mentioned earlier, we have a settlement graph,

342
00:19:23,443 --> 00:19:25,523
which is a complex graph of nodes and edges,

343
00:19:25,944 --> 00:19:28,785
which are used to define the AI's usable space

344
00:19:28,945 --> 00:19:29,645
within the city.

345
00:19:30,966 --> 00:19:33,227
It's used for navigation and spatial awareness.

346
00:19:34,291 --> 00:19:36,212
and it's manually drawn by a designer,

347
00:19:36,832 --> 00:19:39,293
but it can be dynamically modified at runtime

348
00:19:39,494 --> 00:19:41,915
if parts of the city walls have been destroyed, for example.

349
00:19:44,316 --> 00:19:45,957
The shape of that settlement graph

350
00:19:46,537 --> 00:19:49,759
also defines the shape of the corresponding influence graphs

351
00:19:50,379 --> 00:19:53,360
that the AI uses to perform tactical spatial reasoning

352
00:19:53,400 --> 00:19:54,041
within the city.

353
00:19:55,341 --> 00:19:57,863
We have a number of such influence graphs

354
00:19:58,423 --> 00:20:00,124
with different values for threat.

355
00:20:01,467 --> 00:20:03,689
the strategic value for capturing an area,

356
00:20:03,829 --> 00:20:06,231
which is what's shown here with the victory point in red,

357
00:20:07,471 --> 00:20:09,573
the strategic value for defending an area,

358
00:20:10,614 --> 00:20:12,755
each area's exposure to missile fire,

359
00:20:13,776 --> 00:20:15,737
the current friendly occupation strength,

360
00:20:15,997 --> 00:20:17,999
and the current enemy occupation strength.

361
00:20:18,779 --> 00:20:20,500
And we can refer to any of the values

362
00:20:20,541 --> 00:20:22,442
from these influence graphs when determining

363
00:20:22,882 --> 00:20:24,603
where to position our units within the city

364
00:20:24,663 --> 00:20:27,285
and where they should move to get to their next objective.

365
00:20:29,705 --> 00:20:33,328
On previous titles, each siege battle map was handcrafted,

366
00:20:34,109 --> 00:20:35,250
and due to their complexity,

367
00:20:35,830 --> 00:20:38,032
they were a common source of AI behavior issues.

368
00:20:39,313 --> 00:20:42,316
The prefab system, which is new to Total War Warhammer,

369
00:20:42,876 --> 00:20:45,098
allows us to reuse those logical layouts,

370
00:20:45,619 --> 00:20:48,241
and therefore reuse the AI hints and settlement graphs,

371
00:20:48,741 --> 00:20:51,303
but still give each map a dramatically different

372
00:20:51,343 --> 00:20:52,804
look and feel between factions.

373
00:20:54,317 --> 00:20:56,659
The quality of that settlement graph authoring

374
00:20:56,719 --> 00:20:58,821
has a huge impact on the AI's performance

375
00:20:58,861 --> 00:21:00,383
within the settlement, as you can imagine.

376
00:21:01,363 --> 00:21:02,965
This is one of the major benefits

377
00:21:03,025 --> 00:21:05,267
of switching to the prefab system for city building.

378
00:21:07,089 --> 00:21:09,892
We got to author fewer settlement graphs, which

379
00:21:09,952 --> 00:21:12,434
means we get better testing coverage, and therefore,

380
00:21:12,494 --> 00:21:14,096
better quality AI behavior.

381
00:21:15,057 --> 00:21:17,940
And in Warhammer, we have many such logical layouts

382
00:21:18,240 --> 00:21:19,001
for each faction.

383
00:21:22,116 --> 00:21:26,779
Now let's dive into the specifics of the CJI strategy and tactics.

384
00:21:29,440 --> 00:21:32,762
The strategy for attacking a walled city is pretty simple.

385
00:21:33,442 --> 00:21:35,523
Get past the walls, capture the victory point.

386
00:21:36,384 --> 00:21:40,366
Executing that strategy, however, is not so simple.

387
00:21:40,486 --> 00:21:41,026
Step one.

388
00:21:42,382 --> 00:21:45,084
is carried out by a set of special purpose tactics,

389
00:21:45,444 --> 00:21:46,745
all executing in parallel.

390
00:21:47,506 --> 00:21:49,708
Each tactic is attempting to get its units

391
00:21:50,188 --> 00:21:52,510
on top of or past the city walls.

392
00:21:53,771 --> 00:21:56,973
Step two is carried out by a highly specialized subsystem

393
00:21:57,033 --> 00:21:58,134
called the settlement AI,

394
00:21:59,295 --> 00:22:01,937
which controls all of the AI units within the city walls

395
00:22:02,197 --> 00:22:03,258
using the settlement graph

396
00:22:03,318 --> 00:22:04,779
and its associated influence graphs

397
00:22:04,819 --> 00:22:05,740
that we spoke about earlier.

398
00:22:07,202 --> 00:22:10,123
units are transferred to that settlement AI system

399
00:22:10,704 --> 00:22:12,685
once they reach the settlement graph itself

400
00:22:12,785 --> 00:22:13,906
and can be attached to it.

401
00:22:14,646 --> 00:22:17,148
Therefore, the goal of all the specialized tactics

402
00:22:17,208 --> 00:22:20,470
in step one is to create entry points into the city

403
00:22:20,650 --> 00:22:22,791
through which we can send the rest of our attacking units.

404
00:22:25,252 --> 00:22:29,433
Notice that since units are handed off to the settlement AI as soon as they attach to

405
00:22:29,473 --> 00:22:33,655
the settlement graph, that means that both steps of this attacking strategy are also

406
00:22:33,735 --> 00:22:34,756
executing in parallel.

407
00:22:35,236 --> 00:22:40,698
The units outside the walls are under control of the tactic, when units on or inside the

408
00:22:40,738 --> 00:22:43,179
walls are under control of the settlement AI.

409
00:22:45,480 --> 00:22:47,401
So how can we actually get past the walls?

410
00:22:48,496 --> 00:22:52,619
Well, we can destroy the walls, which is pretty much the easiest option.

411
00:22:52,799 --> 00:22:53,760
You just blow them up.

412
00:22:54,140 --> 00:22:55,061
Shoot them with artillery.

413
00:22:55,982 --> 00:22:57,303
Or we could climb over the walls.

414
00:22:58,183 --> 00:22:59,524
We have a couple of tools for this.

415
00:22:59,825 --> 00:23:02,487
We can dock a siege tower, or you can place some ladders.

416
00:23:03,828 --> 00:23:05,029
Or we could destroy the gates.

417
00:23:06,089 --> 00:23:07,751
There's a number of tools available for this.

418
00:23:09,890 --> 00:23:12,972
But some of these options are not available to some factions.

419
00:23:13,793 --> 00:23:15,874
So understanding your enemy's capabilities

420
00:23:16,595 --> 00:23:19,516
is important for mounting an effective defense against them.

421
00:23:21,337 --> 00:23:23,379
As is true with all battles in Total War,

422
00:23:24,139 --> 00:23:27,401
the battle AI cannot choose to surrender or withdraw.

423
00:23:28,262 --> 00:23:32,204
So attacking the gates serves as the direct fallback option,

424
00:23:32,745 --> 00:23:34,466
which is always available to the AI,

425
00:23:34,966 --> 00:23:36,707
since any unit can attack the gates.

426
00:23:39,975 --> 00:23:42,198
I mentioned earlier that the goal of each tactic

427
00:23:42,819 --> 00:23:45,603
is to enter the city by creating entry points.

428
00:23:46,123 --> 00:23:48,486
Well, an entry point is an actual game object

429
00:23:48,526 --> 00:23:51,730
representation that's created dynamically at runtime,

430
00:23:52,632 --> 00:23:54,654
which represents an available method of getting

431
00:23:54,694 --> 00:23:58,739
into the city, or an attempt currently in progress by the AI.

432
00:24:00,015 --> 00:24:02,677
Each entry point has an estimated time to completion,

433
00:24:02,697 --> 00:24:06,280
a progress percentage, and a fulfillment score,

434
00:24:06,440 --> 00:24:08,501
which roughly corresponds to the number of units

435
00:24:08,762 --> 00:24:10,823
that is currently assigned to that entry point.

436
00:24:12,524 --> 00:24:15,386
Internally, each entry point also holds a pointer

437
00:24:15,486 --> 00:24:17,628
to the tactic which is currently responsible

438
00:24:17,708 --> 00:24:18,488
for that entry point.

439
00:24:20,245 --> 00:24:23,308
The entry points can be created via player actions as well,

440
00:24:23,888 --> 00:24:26,710
meaning that if an attacking player creates a way

441
00:24:26,750 --> 00:24:29,512
to climb the walls, the AI reinforcements

442
00:24:29,752 --> 00:24:30,393
will know about it.

443
00:24:33,135 --> 00:24:35,576
In order to determine which tactics we should employ

444
00:24:35,617 --> 00:24:38,218
to get past the walls, we have to organize

445
00:24:38,379 --> 00:24:40,700
our available units into specialized groups.

446
00:24:41,801 --> 00:24:44,063
This process will normally occur during deployment.

447
00:24:45,375 --> 00:24:49,279
And the attacker always deploys first, so while organizing these groups, we have no

448
00:24:49,339 --> 00:24:52,941
information about how the defender has arranged their forces on the city walls.

449
00:24:54,783 --> 00:25:01,028
So we have to first identify, from the available units, which ones can lead each type of tactics,

450
00:25:01,228 --> 00:25:04,791
and then form hypothetical groups around them with supporting units.

451
00:25:06,833 --> 00:25:10,816
That will give us the set of ideal groups from the main attacking army.

452
00:25:12,504 --> 00:25:15,286
We then match those ideal groups to the AI hints

453
00:25:15,546 --> 00:25:17,827
that are placed on the map according to the result

454
00:25:17,847 --> 00:25:18,748
designation scores.

455
00:25:20,189 --> 00:25:21,850
And then finally, we send any groups

456
00:25:22,450 --> 00:25:26,172
that we weren't able to match with AI hints to the reserves

457
00:25:26,512 --> 00:25:28,153
along with any ungrouped units.

458
00:25:30,495 --> 00:25:32,576
So now that we essentially have our set

459
00:25:32,596 --> 00:25:34,917
of initial tactics in place, we can

460
00:25:34,957 --> 00:25:38,099
move on to examining each type of attacking siege

461
00:25:38,159 --> 00:25:39,560
tactic in greater detail.

462
00:25:40,482 --> 00:25:42,443
starting with the gate assault tactic.

463
00:25:43,664 --> 00:25:48,529
So the goal of this tactic is to destroy a specific gate so that we can get into the

464
00:25:48,569 --> 00:25:48,809
city.

465
00:25:50,490 --> 00:25:55,495
The functionality for this tactic was extracted from that single tactic that was used to control

466
00:25:55,535 --> 00:26:00,359
the whole army in the historical version, and was turned into a standalone tactic in

467
00:26:00,419 --> 00:26:00,880
its own right.

468
00:26:02,717 --> 00:26:05,158
So given an assault designation to use,

469
00:26:05,918 --> 00:26:08,599
the gate assault tactic identifies the target gate

470
00:26:08,839 --> 00:26:11,140
by choosing the closest one to the attack focus.

471
00:26:12,001 --> 00:26:15,042
Note that there has to be a gate within a reasonable distance.

472
00:26:15,202 --> 00:26:16,543
Otherwise, this assault designation

473
00:26:16,583 --> 00:26:18,884
would have received a zero score for gate assaults.

474
00:26:20,704 --> 00:26:22,645
In order to destroy that gate, we

475
00:26:22,685 --> 00:26:24,246
have a number of tools at our disposal.

476
00:26:24,626 --> 00:26:26,927
We can use battering rams, which are definitely

477
00:26:26,947 --> 00:26:28,048
the right tool for the job.

478
00:26:28,728 --> 00:26:30,869
But they need to be manned by an infantry unit.

479
00:26:31,049 --> 00:26:32,390
They wouldn't do anything by themselves.

480
00:26:34,491 --> 00:26:38,194
Or a new thing in Warhammer, we could use monstrous creatures like giants.

481
00:26:39,094 --> 00:26:43,037
Some factions have those types of creatures.

482
00:26:43,918 --> 00:26:46,339
And some of them are really well suited to bashing things.

483
00:26:47,160 --> 00:26:51,183
But that's not to say that all monstrous creatures are well suited to bashing things.

484
00:26:52,083 --> 00:26:53,544
So we have a bit of a dilemma here.

485
00:26:54,205 --> 00:26:55,226
Time for a quick diversion.

486
00:26:57,167 --> 00:26:59,829
Let's talk about unit classification.

487
00:27:00,049 --> 00:27:00,809
What is this thing?

488
00:27:01,729 --> 00:27:05,392
So in historical games, unit classification was pretty straightforward.

489
00:27:06,313 --> 00:27:15,921
We had sword infantry, spear infantry, missile units, cavalry, and artillery.

490
00:27:15,941 --> 00:27:18,944
It's a nice and simple classification system.

491
00:27:19,745 --> 00:27:26,611
So as a result, the AI succumbed to this temptation of making behavioral decisions based on the

492
00:27:26,711 --> 00:27:27,672
type of the unit.

493
00:27:29,377 --> 00:27:39,367
But in Warhammer, we have all of those things, plus flying units, war machines, monsters

494
00:27:39,468 --> 00:27:45,814
like giants, trolls, and gigantic spiders, and individual heroic characters.

495
00:27:46,967 --> 00:27:50,009
And at first, those might just seem like new unit categories.

496
00:27:50,849 --> 00:27:53,250
But the units themselves within those categories

497
00:27:53,270 --> 00:27:55,391
can have very different strengths and weaknesses,

498
00:27:56,071 --> 00:27:58,452
especially with the individual heroic characters.

499
00:27:59,313 --> 00:28:01,314
As a result, we needed a better way

500
00:28:01,374 --> 00:28:04,775
to describe each unit's role on the battlefield to the AI.

501
00:28:07,296 --> 00:28:10,438
So essentially, the AI code was asking the wrong question.

502
00:28:11,418 --> 00:28:13,139
It doesn't matter what a unit is.

503
00:28:14,180 --> 00:28:15,640
It matters how we should use it.

504
00:28:17,092 --> 00:28:21,214
Is it excellent in melee, for example, or should it try to avoid combat altogether?

505
00:28:22,295 --> 00:28:24,176
Is it a great choice for breaking down the gates?

506
00:28:24,816 --> 00:28:26,837
Or maybe it excels at flanking instead?

507
00:28:28,118 --> 00:28:32,380
Is it a high-value unit that should be protected even at the cost of another unit?

508
00:28:34,639 --> 00:28:36,840
Well, each unit can have more than one use,

509
00:28:37,400 --> 00:28:39,781
so we created a set of AI usage flags

510
00:28:40,442 --> 00:28:42,723
that designers can place on each unit record

511
00:28:43,343 --> 00:28:46,664
to help identify how the AI should use them correctly.

512
00:28:47,385 --> 00:28:48,945
Those flags are effectively combined

513
00:28:48,985 --> 00:28:51,366
into a bit field structure that we can examine anywhere.

514
00:28:53,487 --> 00:28:55,388
So now getting back to the gate assault tactic,

515
00:28:55,588 --> 00:28:58,309
we can now examine the unit's AI usage flag

516
00:28:58,369 --> 00:29:01,171
to determine if it's a gate crusher or not.

517
00:29:01,997 --> 00:29:04,019
instead of checking whether it's a monstrous creature.

518
00:29:04,179 --> 00:29:05,601
And that gives us a lot better results.

519
00:29:07,002 --> 00:29:10,326
And then finally, bashing the gate is the ultimate fallback.

520
00:29:10,606 --> 00:29:13,590
As I mentioned earlier, if there aren't any other options

521
00:29:13,650 --> 00:29:15,812
for the AI, we can always fall back

522
00:29:15,852 --> 00:29:17,073
to trying to break the gates down.

523
00:29:19,857 --> 00:29:21,819
So the way that this tactic works.

524
00:29:23,171 --> 00:29:26,495
is the first thing we do is we form up into a group formation,

525
00:29:27,076 --> 00:29:31,322
ensuring that our units, our best units for destroying the gates, are at the front and

526
00:29:31,382 --> 00:29:32,584
center of that formation.

527
00:29:33,505 --> 00:29:37,171
We then advance that formation together towards the gate.

528
00:29:38,730 --> 00:29:42,332
and we choose the best unit once we've reached the staging position

529
00:29:42,912 --> 00:29:45,793
to destroy the gate by sending it forth to attack.

530
00:29:47,334 --> 00:29:49,655
In order to make the decision as to which unit to send,

531
00:29:50,115 --> 00:29:54,737
we perform a time to destruction calculation for each unit in the tactic,

532
00:29:55,278 --> 00:29:59,780
which factors in the time it would take to reach the target from our staging position,

533
00:30:00,360 --> 00:30:03,161
and then the time it would take to destroy the gate once it arrives,

534
00:30:03,661 --> 00:30:06,983
essentially doing an estimate of their DPS versus buildings,

535
00:30:07,423 --> 00:30:08,463
which we perform at runtime.

536
00:30:10,543 --> 00:30:15,906
At the same time as we're attacking the gate, if possible, we can periodically relinquish

537
00:30:15,946 --> 00:30:21,048
a unit to climb the walls and attack any defenders who might be up there firing at us.

538
00:30:21,749 --> 00:30:24,911
Or if we're lucky enough, we might be able to get over the walls and capture the gate

539
00:30:24,931 --> 00:30:27,032
from the inside instead of trying to bash it down.

540
00:30:29,233 --> 00:30:33,955
If at any time during this attack process the attacking unit is invalidated, such as

541
00:30:33,995 --> 00:30:38,258
it was forced to flee or it was killed, then we just choose the next best one and send

542
00:30:38,298 --> 00:30:38,458
it in.

543
00:30:40,372 --> 00:30:44,755
During that process, we also try to use all the supporting units in the tactic to defend

544
00:30:44,775 --> 00:30:49,879
that main attacking unit from the enemy.

545
00:30:51,360 --> 00:30:56,103
Once we destroy or capture the gate, we can then record it as an accessible entry point

546
00:30:56,444 --> 00:30:57,985
and the tactic has accomplished its goal.

547
00:31:00,547 --> 00:31:03,769
The next tactic that's worth examining is the wall assault tactic.

548
00:31:05,330 --> 00:31:08,872
And here, our goal is to create a way for our unmounted units,

549
00:31:09,092 --> 00:31:11,193
or our footmen, to scale the walls.

550
00:31:13,014 --> 00:31:14,796
This functionality was also extracted

551
00:31:14,936 --> 00:31:18,578
from the single tactic in the historical games, which

552
00:31:18,658 --> 00:31:20,279
used to control the whole army at once,

553
00:31:21,260 --> 00:31:23,761
and turned into a standalone tactic in its own right.

554
00:31:25,442 --> 00:31:29,425
So given a specific assault designation to use,

555
00:31:30,639 --> 00:31:34,822
The wall assault tactic identifies the set of allowable wall targets by scanning the

556
00:31:34,862 --> 00:31:37,284
wall pieces that are close to the attack focus.

557
00:31:38,185 --> 00:31:42,749
And note that there has to be at least some valid ones, otherwise the assault designation

558
00:31:42,769 --> 00:31:44,910
would have a zero score for this attack type.

559
00:31:46,289 --> 00:31:49,332
And some of the tools that we can use in order to accomplish our objective

560
00:31:49,873 --> 00:31:52,716
are siege towers, which are the perfect tool for the job.

561
00:31:53,357 --> 00:31:56,981
They offer excellent protection from missile fire for the unit while it's

562
00:31:57,021 --> 00:31:59,584
approaching the walls, and then they're quite easy to climb.

563
00:32:00,305 --> 00:32:03,949
The downside is that they have to be built while besieging the city on the

564
00:32:03,989 --> 00:32:04,550
campaign map.

565
00:32:06,370 --> 00:32:07,990
And also we can use ladders.

566
00:32:08,710 --> 00:32:11,731
So any footman unit can raise ladders and scale the walls.

567
00:32:12,452 --> 00:32:15,353
However, they don't have any protection during the approach

568
00:32:15,813 --> 00:32:18,694
and they'll incur fatigue penalties while climbing,

569
00:32:18,754 --> 00:32:20,434
which leaves them less fit for combat

570
00:32:20,574 --> 00:32:21,795
once they crest the walls.

571
00:32:23,795 --> 00:32:25,756
So only certain types of units can climb

572
00:32:25,796 --> 00:32:27,077
those siege towers and ladders.

573
00:32:27,637 --> 00:32:29,877
So while it's a great tactic to employ,

574
00:32:30,458 --> 00:32:32,698
it won't necessarily work for all of our units,

575
00:32:32,758 --> 00:32:34,679
such as our vehicles or our cavalry.

576
00:32:37,383 --> 00:32:44,049
So the way that this tactic progresses is first we form some groups within the tactic itself.

577
00:32:45,049 --> 00:32:51,055
So we form groups around units that have a siege tower currently equipped,

578
00:32:51,675 --> 00:32:53,697
or a unit that we want to place ladders.

579
00:32:54,417 --> 00:32:58,020
And then we assign to each of those groups some remaining support units

580
00:32:58,181 --> 00:33:01,443
who are going to try to protect that leader as it approaches the walls,

581
00:33:01,964 --> 00:33:05,026
and they're going to return fire on the defenders who are on top of the walls.

582
00:33:06,985 --> 00:33:11,086
Then each group independently selects which wall piece

583
00:33:11,106 --> 00:33:11,966
they want to dock with.

584
00:33:12,626 --> 00:33:14,627
And then we validate those target choices

585
00:33:15,087 --> 00:33:16,787
within the tactic itself to ensure

586
00:33:16,827 --> 00:33:18,768
that none of the groups are going to cross paths

587
00:33:18,868 --> 00:33:19,848
as they approach the walls.

588
00:33:21,329 --> 00:33:23,569
And then each group advances independently

589
00:33:23,669 --> 00:33:24,970
towards their selected target.

590
00:33:26,485 --> 00:33:28,166
Once they reach their target wall piece,

591
00:33:28,647 --> 00:33:31,189
they'll either dock the tower or place the ladder

592
00:33:31,309 --> 00:33:32,170
onto that wall piece.

593
00:33:32,911 --> 00:33:35,653
And once that's happened, we can mark that section of wall

594
00:33:36,134 --> 00:33:37,375
as an accessible entry point.

595
00:33:37,936 --> 00:33:39,537
And that group has accomplished its goal.

596
00:33:42,099 --> 00:33:44,261
And the third tactic that's worth talking about in detail

597
00:33:45,142 --> 00:33:46,303
is the wall breach tactic.

598
00:33:47,925 --> 00:33:50,748
And its goal is to destroy a part of the city walls

599
00:33:50,968 --> 00:33:52,209
so that our units can run through.

600
00:33:53,877 --> 00:33:58,800
This functionality was also extracted from that single monolithic tactic from the historical games.

601
00:34:00,862 --> 00:34:07,025
So given a specific assault designation to use, the wall breach tactic identifies a target wall piece to destroy

602
00:34:07,626 --> 00:34:09,587
by scanning the walls near the attack focus.

603
00:34:10,107 --> 00:34:15,151
And there must be a valid target for it to choose, otherwise we would have received a zero score for this assault designation.

604
00:34:16,271 --> 00:34:17,232
In order to do this...

605
00:34:18,552 --> 00:34:21,393
to actually destroy the walls, we bring out the big guns.

606
00:34:21,553 --> 00:34:24,415
So anything that has a weapon big enough,

607
00:34:24,715 --> 00:34:27,397
or a missile weapon specifically, to damage buildings.

608
00:34:28,758 --> 00:34:31,419
While it's only a small subset of units that can do this,

609
00:34:32,200 --> 00:34:34,361
any unit can walk through the breach created.

610
00:34:34,501 --> 00:34:36,222
So it's actually quite a valuable tactic.

611
00:34:38,967 --> 00:34:43,350
The way that it works is given that small set of artillery units and some support units

612
00:34:43,390 --> 00:34:48,753
to defend them from attack, we form them up into a group formation, ensuring that any

613
00:34:48,873 --> 00:34:53,476
direct fire artillery, such as cannons, are placed in the front rank, and any indirect

614
00:34:53,536 --> 00:34:55,697
fire units, like catapults, can go in the rear.

615
00:34:57,074 --> 00:34:59,735
We then select a section of walls to destroy

616
00:35:00,475 --> 00:35:02,876
and advance the group towards that target

617
00:35:03,016 --> 00:35:04,857
until all of our artillery pieces

618
00:35:04,997 --> 00:35:06,618
are within their effective firing range.

619
00:35:07,258 --> 00:35:10,099
We then focus fire all of the units on that wall target

620
00:35:10,199 --> 00:35:11,060
until it's destroyed.

621
00:35:12,200 --> 00:35:13,521
And then once it is destroyed, we

622
00:35:13,561 --> 00:35:16,582
can record that wall section as an accessible entry point.

623
00:35:17,702 --> 00:35:18,683
And the tactic is complete.

624
00:35:21,310 --> 00:35:23,751
Now that we know about all of the climbable walls,

625
00:35:24,191 --> 00:35:26,932
the destroyed or captured gates, and all of the wall breaches,

626
00:35:28,093 --> 00:35:29,493
we're ready to storm the city, right?

627
00:35:30,974 --> 00:35:33,575
Well, actually we're not, because we only

628
00:35:33,635 --> 00:35:35,836
know about the entry points that the AI created.

629
00:35:36,577 --> 00:35:38,677
But what about the ones that the player might have created?

630
00:35:39,778 --> 00:35:43,300
Since the AI can act as a friendly reinforcement

631
00:35:43,680 --> 00:35:45,861
for an attacking player army, we also

632
00:35:45,901 --> 00:35:48,662
have to consider the entry points that they have created.

633
00:35:49,491 --> 00:35:52,913
In order to do that, we need to go back to our architecture diagram.

634
00:35:54,314 --> 00:35:57,417
And we have to add a missing element, which is the entry point manager.

635
00:35:58,718 --> 00:36:03,541
So we can detect entry points that were created through player actions by periodically scanning

636
00:36:03,581 --> 00:36:09,345
the city walls for any docked towers, placed ladders, captured or destroyed gates, and

637
00:36:09,405 --> 00:36:13,008
destroyed sections of wall that the AI doesn't already know about.

638
00:36:14,247 --> 00:36:16,348
And for each one that we find, we can just create

639
00:36:17,048 --> 00:36:20,150
an entry point object that is marked as already accessible

640
00:36:20,710 --> 00:36:22,771
to represent that new way of entering the city.

641
00:36:24,412 --> 00:36:26,873
The entry point manager, owned by the Grand Tactical

642
00:36:26,953 --> 00:36:29,935
Analyzer, is responsible not only for storing

643
00:36:30,095 --> 00:36:32,036
all of the AI-created entry points,

644
00:36:32,296 --> 00:36:34,878
but also for performing the scanning process.

645
00:36:35,938 --> 00:36:38,920
This ensures that all entry points, regardless of source,

646
00:36:39,580 --> 00:36:42,201
are accessed and treated the same way by the rest of the AI.

647
00:36:44,500 --> 00:36:46,001
So now we're ready to storm the city.

648
00:36:47,942 --> 00:36:51,483
The storm entry points tactic is responsible for sending units

649
00:36:51,583 --> 00:36:54,585
into the city via the accessible entry points.

650
00:36:56,326 --> 00:36:58,587
It starts by forming a storming group

651
00:36:58,887 --> 00:37:00,427
for each accessible entry point.

652
00:37:01,488 --> 00:37:03,929
It's perfectly fine to have empty groups at this point,

653
00:37:04,109 --> 00:37:06,710
as units can be allocated to those groups in the future.

654
00:37:08,584 --> 00:37:13,088
Generally, the units that were responsible for creating an entry point should be allocated

655
00:37:13,148 --> 00:37:16,972
to that entry point group first, so that they can exploit the opening that they've created.

656
00:37:18,573 --> 00:37:24,778
So for each group, we queue up our units in front of the entry point, and then we send

657
00:37:24,838 --> 00:37:26,100
them through one at a time.

658
00:37:29,443 --> 00:37:30,523
In the historical titles...

659
00:37:31,720 --> 00:37:38,466
This tactic, the tactics themselves were responsible for sending the units through into the city.

660
00:37:39,647 --> 00:37:41,889
But we've changed that for Warhammer.

661
00:37:42,349 --> 00:37:48,174
The storm entry point tactic is new for Warhammer and it was created because the process of

662
00:37:48,334 --> 00:37:52,498
using the entry points is very similar regardless of the type of entry point.

663
00:37:53,459 --> 00:37:56,581
And so this created a nice separation of responsibilities for us.

664
00:37:57,701 --> 00:38:00,843
The assault tactics always create the entry points,

665
00:38:01,464 --> 00:38:04,305
and the storm entry points tactic uses them.

666
00:38:06,967 --> 00:38:08,869
Once the AI is broken past the walls

667
00:38:09,049 --> 00:38:11,170
into the interior of the city, its goal

668
00:38:11,210 --> 00:38:13,131
becomes to capture the city's victory point.

669
00:38:13,872 --> 00:38:16,894
And as mentioned before, the special purpose settlement AI

670
00:38:17,374 --> 00:38:19,336
is used to identify threats within the city

671
00:38:19,476 --> 00:38:21,517
and direct the attacking units to their goal.

672
00:38:23,070 --> 00:38:27,274
As this system is quite complex and remains mostly unchanged from the previous titles,

673
00:38:27,674 --> 00:38:29,456
we won't be diving too deep into that today.

674
00:38:32,738 --> 00:38:34,120
So how do the reserves fit in?

675
00:38:34,720 --> 00:38:40,665
Well, if a tactic or an entry point group can no longer accomplish its goal, for example

676
00:38:40,725 --> 00:38:45,149
if the wall breach tactic loses all of its artillery units because the defender sallied

677
00:38:45,229 --> 00:38:45,829
out to meet them.

678
00:38:46,847 --> 00:38:51,088
then we have to abandon that tactic and reallocate its units elsewhere.

679
00:38:51,668 --> 00:38:52,969
But where should we reallocate them?

680
00:38:53,689 --> 00:38:56,370
Well, we've created a new tactic for that, and it's called the reserves.

681
00:38:58,190 --> 00:38:59,911
For the first time in the Total War series,

682
00:39:00,371 --> 00:39:02,811
the battle AI is making use of reserves.

683
00:39:03,892 --> 00:39:05,892
This is a pool of units that's held back

684
00:39:06,312 --> 00:39:09,913
to see how the battle unfolds before we commit all of our resources.

685
00:39:11,094 --> 00:39:12,274
For the attacking siege AI,

686
00:39:13,253 --> 00:39:18,456
This is a group of units that examines the entry points, either in progress or already

687
00:39:18,496 --> 00:39:21,297
completed, before deciding where to commit its units.

688
00:39:22,437 --> 00:39:27,199
So effectively, the reserves tactic has become a mechanism to transfer units between tactics

689
00:39:27,479 --> 00:39:28,440
as the battle progresses.

690
00:39:30,341 --> 00:39:34,522
Depending on the starting army composition, we might already have some units in the reserves

691
00:39:34,562 --> 00:39:35,683
straight away during deployment.

692
00:39:38,423 --> 00:39:41,844
Any tactics that are abandoned will send their units to the reserves,

693
00:39:42,084 --> 00:39:45,365
and the reserves periodically scans those entry points

694
00:39:46,265 --> 00:39:48,226
in order to decide where to allocate them.

695
00:39:49,026 --> 00:39:51,466
This whole process can occur within the same model tick,

696
00:39:51,827 --> 00:39:54,767
so we don't necessarily have to wait for the units to physically move

697
00:39:55,127 --> 00:39:58,708
from where they were to the reserves before being assigned to the next tactic.

698
00:40:01,129 --> 00:40:04,650
When considering which units should be assigned to which entry points,

699
00:40:05,583 --> 00:40:09,226
We have to consider each unit's capabilities and the current set of options.

700
00:40:10,466 --> 00:40:17,632
A unit might be better suited to one type of entry point than another, and it might

701
00:40:17,672 --> 00:40:21,635
be worth waiting for progress on a highly desirable entry point instead of making a

702
00:40:21,695 --> 00:40:23,096
suboptimal assignment now.

703
00:40:24,777 --> 00:40:28,459
Highly desirable entry points, though, might already have enough units assigned to them.

704
00:40:29,498 --> 00:40:31,218
So we use a simple scoring heuristic

705
00:40:31,839 --> 00:40:34,700
to ensure that a unit is always assigned to an entry point

706
00:40:35,160 --> 00:40:38,581
for which it is well suited, but that we don't perform

707
00:40:38,681 --> 00:40:41,442
any overcrowded allocations to those entry points.

708
00:40:43,663 --> 00:40:45,224
Once an assignment decision is made,

709
00:40:45,984 --> 00:40:48,725
it's passed up to the parent detachment for execution.

710
00:40:50,165 --> 00:40:52,066
If the entry point is already accessible,

711
00:40:52,426 --> 00:40:54,407
this will result in the unit being transferred

712
00:40:54,547 --> 00:40:56,048
to the storm entry points tactic.

713
00:40:56,815 --> 00:40:58,516
But if the entry point is still in progress,

714
00:40:59,136 --> 00:41:01,678
then it will result in the unit being transferred

715
00:41:01,878 --> 00:41:03,699
to the tactic that's currently attempting

716
00:41:03,739 --> 00:41:04,739
to create the entry point.

717
00:41:06,760 --> 00:41:09,502
Note that since the reserves tactic is making its assignment

718
00:41:09,522 --> 00:41:11,723
decisions based on the set of entry points held

719
00:41:11,763 --> 00:41:14,064
by the entry point manager, there's

720
00:41:14,084 --> 00:41:16,585
no direct dependency between tactics introduced

721
00:41:16,645 --> 00:41:17,646
because of this process.

722
00:41:18,246 --> 00:41:20,747
And the assignments will consider entry methods created

723
00:41:20,787 --> 00:41:21,868
by player actions as well.

724
00:41:24,659 --> 00:41:27,601
So let's move on to talking about how the battle AI

725
00:41:27,741 --> 00:41:31,223
coordinates between tactics within a detachment in general.

726
00:41:33,164 --> 00:41:37,146
By design, our AI architecture dictates that the tactics

727
00:41:37,446 --> 00:41:40,028
should be as encapsulated and modular as possible,

728
00:41:40,908 --> 00:41:44,090
so that tactics can be reused between different detachments

729
00:41:44,510 --> 00:41:45,531
in various contexts.

730
00:41:46,131 --> 00:41:48,473
For example, the same tactic might be used

731
00:41:48,553 --> 00:41:50,233
in a land battle and a naval battle,

732
00:41:50,994 --> 00:41:53,315
or maybe while attacking and while defending.

733
00:41:55,212 --> 00:41:59,856
Sometimes, limited coordination between those tactics is performed by the parent detachment.

734
00:42:01,457 --> 00:42:07,721
In the general purpose battle AI, detachments allocate units to tactics using a prioritized

735
00:42:07,861 --> 00:42:08,642
bidding process.

736
00:42:14,844 --> 00:42:17,206
But in the case of the attacking CGI,

737
00:42:17,867 --> 00:42:20,989
the detachment does quite a lot of coordination, actually,

738
00:42:21,429 --> 00:42:25,072
by manually managing the process of allocating units

739
00:42:25,092 --> 00:42:25,633
to tactics.

740
00:42:26,533 --> 00:42:29,596
So let's get specific on the tactical coordination

741
00:42:30,096 --> 00:42:31,497
by going through a few examples.

742
00:42:32,798 --> 00:42:35,580
The first is the gate assault tactic,

743
00:42:35,780 --> 00:42:37,562
choosing to relinquish some of its units

744
00:42:37,842 --> 00:42:40,464
in order to place a ladder on the walls near the gate.

745
00:42:42,172 --> 00:42:44,854
A wall assault tactic wouldn't normally be able to do this,

746
00:42:45,434 --> 00:42:48,916
because the gate assault tactic would have claimed that assault designation,

747
00:42:49,377 --> 00:42:52,158
and therefore all of the wall pieces near its attack focus.

748
00:42:55,481 --> 00:42:58,362
The tactical coordination process unfolds as follows.

749
00:42:59,123 --> 00:43:03,586
The gate assault tactic determines the list of units that it's willing to relinquish

750
00:43:03,826 --> 00:43:05,347
in order to climb the walls near the gate.

751
00:43:06,427 --> 00:43:08,609
It passes that list of units up to the detachment.

752
00:43:09,689 --> 00:43:15,153
The detachment verifies that the assault designation has a high enough score to warrant an attempt

753
00:43:15,253 --> 00:43:16,074
at climbing the walls.

754
00:43:17,475 --> 00:43:23,419
The detachment then, if that is true, will start a new wall assault tactic on the same

755
00:43:23,539 --> 00:43:25,720
assault designation as the gate assault tactic.

756
00:43:27,001 --> 00:43:30,924
The detachment will then transfer control of those units from the gate tactic to the

757
00:43:30,964 --> 00:43:31,565
wall tactic.

758
00:43:32,919 --> 00:43:36,340
And since none of those units will have any wall assault equipment,

759
00:43:36,560 --> 00:43:37,841
they won't have siege towers,

760
00:43:38,181 --> 00:43:39,922
because they were just in a gate tactic,

761
00:43:41,023 --> 00:43:44,965
the new wall assault tactic forms ladder groups as opposed to siege tower groups,

762
00:43:45,625 --> 00:43:48,607
and uses the unit's ability to place ladders to accomplish its goal.

763
00:43:50,528 --> 00:43:53,730
And finally, the new group will then select a wall target,

764
00:43:54,070 --> 00:43:55,511
which is definitely near the gate,

765
00:43:56,171 --> 00:43:57,191
and proceeds as normal.

766
00:43:59,865 --> 00:44:05,170
A second example of tactical coordination would be when a tower docks with the walls,

767
00:44:06,090 --> 00:44:07,752
and it has therefore accomplished its goal.

768
00:44:08,913 --> 00:44:14,278
So the group within the tactic which was responsible for docking that tower should be removed from

769
00:44:14,318 --> 00:44:19,422
the tactic, and its units should be assigned to the storm entry point's tactic in order

770
00:44:19,462 --> 00:44:23,926
to climb that specific tower, thereby exploiting the entry point that it just created.

771
00:44:25,808 --> 00:44:27,189
The way that this process unfolds...

772
00:44:28,264 --> 00:44:31,566
is the first, the wall assault tactic marks that entry point

773
00:44:31,766 --> 00:44:34,087
representing that wall section as accessible.

774
00:44:35,407 --> 00:44:39,409
The tactic then relinquishes the set of units that were in that specific tower group

775
00:44:40,070 --> 00:44:43,251
along with the entry point for that tower group to the detachment.

776
00:44:44,452 --> 00:44:48,233
And the detachment assigns those units to the storm entry points tactic

777
00:44:49,174 --> 00:44:52,615
indicating that they should be assigned to that specific entry group.

778
00:44:54,554 --> 00:44:58,538
The storm entry points tactic then assigns those units to that particular group.

779
00:44:59,278 --> 00:45:03,803
And since that group knows that the entry point represents a docked tower, because each

780
00:45:03,883 --> 00:45:09,930
entry point has a type, it's able to issue the appropriate unit orders for those units

781
00:45:10,050 --> 00:45:12,813
to climb to the top of the walls using that specific tower.

782
00:45:14,007 --> 00:45:16,349
And then finally, if the wall assault tactic

783
00:45:16,869 --> 00:45:18,650
no longer has any units assigned to it,

784
00:45:19,171 --> 00:45:20,852
and therefore has no groups remaining,

785
00:45:21,332 --> 00:45:22,893
it's destroyed by the detachment

786
00:45:23,013 --> 00:45:24,674
because it's accomplished all of its goals.

787
00:45:27,276 --> 00:45:29,517
And as a final example of tactical coordination,

788
00:45:30,058 --> 00:45:32,739
we can look at the process of allocating the reserves.

789
00:45:34,821 --> 00:45:36,562
So units in the reserves are being held

790
00:45:36,642 --> 00:45:38,063
until there's a good opportunity

791
00:45:38,523 --> 00:45:40,464
to bolster an existing tactic in progress

792
00:45:40,985 --> 00:45:43,366
or to enter the city through an accessible entry point.

793
00:45:44,206 --> 00:45:46,086
Each entry point, whether completed or not,

794
00:45:46,407 --> 00:45:48,287
has that fulfillment score, which

795
00:45:48,327 --> 00:45:50,268
ensures that we don't allocate too many units

796
00:45:50,308 --> 00:45:51,308
to a single location.

797
00:45:53,208 --> 00:45:54,909
Each unit in the reserves is then

798
00:45:55,029 --> 00:45:58,190
scored for each entry point to determine

799
00:45:58,250 --> 00:46:00,850
how valuable it would be to that entry point.

800
00:46:02,791 --> 00:46:05,392
We can then determine if any units can

801
00:46:05,432 --> 00:46:07,692
be allocated to an entry point which would fully

802
00:46:07,812 --> 00:46:10,553
utilize the unit's potential, but not become

803
00:46:10,653 --> 00:46:12,033
over-fulfilled in the process.

804
00:46:13,539 --> 00:46:16,281
The way that that works is periodically the reserves

805
00:46:16,621 --> 00:46:18,562
scans for matches between its units

806
00:46:18,842 --> 00:46:19,883
and the set of entry points.

807
00:46:20,863 --> 00:46:23,565
Note that we don't have, sorry, not all units

808
00:46:23,725 --> 00:46:24,885
can use all entry points.

809
00:46:25,085 --> 00:46:27,547
For example, mounted units can't climb ladders, obviously.

810
00:46:28,267 --> 00:46:30,308
And we only have to inspect the set of entry points

811
00:46:30,328 --> 00:46:32,189
that are below their maximum fulfillment scores.

812
00:46:33,830 --> 00:46:36,131
So the reserves tactic then passes

813
00:46:36,211 --> 00:46:39,453
that set of mappings of unit to entry point pairs

814
00:46:39,874 --> 00:46:41,875
up to the parent attachment for assignment.

815
00:46:43,492 --> 00:46:45,453
The detachment iterates that set of mappings

816
00:46:46,273 --> 00:46:48,434
and moves the units to the appropriate tactics.

817
00:46:49,855 --> 00:46:52,116
Note that since we create accessible entry points

818
00:46:52,436 --> 00:46:54,937
as a result of allied human player actions,

819
00:46:55,377 --> 00:46:57,778
this process allows the assignment of AI units

820
00:46:57,938 --> 00:46:59,979
to use entry points that were created by the player.

821
00:47:03,100 --> 00:47:05,221
So at this point, we have a complete view

822
00:47:05,401 --> 00:47:07,282
of how the attacking CJI functions.

823
00:47:08,477 --> 00:47:14,282
Everything from the initial organization to execution, coordination, and adaptation through

824
00:47:14,342 --> 00:47:14,982
to completion.

825
00:47:16,544 --> 00:47:20,447
So the final remaining topic is that of additional armies or reinforcements.

826
00:47:22,929 --> 00:47:28,634
A reinforcing army is a friendly player army that enters the battlefield, sorry, not player,

827
00:47:28,794 --> 00:47:32,237
a friendly army that enters the battlefield after it's already begun.

828
00:47:33,850 --> 00:47:39,051
This happens when an allied army is nearby on the campaign map when the siege is initiated.

829
00:47:40,452 --> 00:47:45,393
The reinforcing army may either be player-controlled or it could be AI-controlled.

830
00:47:46,173 --> 00:47:48,313
If it's player-controlled, we don't need to do anything special.

831
00:47:48,613 --> 00:47:51,854
They'll just control up to 40 units then instead of a normal 20.

832
00:47:52,994 --> 00:47:58,135
In the case of AI-controlled reinforcements, they're not necessarily of the same faction

833
00:47:58,295 --> 00:47:59,115
as the player's army.

834
00:48:00,266 --> 00:48:07,447
So for example, an AI army of dwarfs could reinforce a player army of the empire when

835
00:48:08,588 --> 00:48:15,269
besieging a city held by the vampire counts, if the dwarf and the empire factions are military

836
00:48:15,369 --> 00:48:16,509
allies on the campaign map.

837
00:48:17,129 --> 00:48:19,049
This can lead to some pretty cool combinations.

838
00:48:20,330 --> 00:48:25,171
So in this image, the enemy defenders are in red, the player's army is in yellow, and

839
00:48:25,211 --> 00:48:29,892
a reinforcing army of AI-controlled units is just entering the field in blue.

840
00:48:32,761 --> 00:48:36,763
So by definition, the reinforcing army doesn't bring any siege equipment with it into the

841
00:48:36,823 --> 00:48:39,885
battle, so they might be ill-equipped to fight a siege battle.

842
00:48:42,166 --> 00:48:47,390
When an AI-controlled army of reinforcements joins the siege battles, they're all added

843
00:48:47,450 --> 00:48:52,613
to the existing reserves tactic, which means that they mostly rely on the original staging

844
00:48:52,773 --> 00:48:54,914
army to create the entry points.

845
00:48:56,882 --> 00:49:02,247
As the entry points are created, the units from the reinforcing army are sent into the

846
00:49:02,307 --> 00:49:05,029
city using the normal process for allocating the reserves.

847
00:49:07,852 --> 00:49:10,875
So that wraps it up for all the details of attacking siege AI.

848
00:49:11,476 --> 00:49:16,460
Now let's switch gears a little bit and discuss a change in process that we made for the Warhammer

849
00:49:16,841 --> 00:49:20,864
project, that increased collaboration between disciplines for siege battles.

850
00:49:22,683 --> 00:49:25,044
So in addition to our daily stand-ups,

851
00:49:25,704 --> 00:49:28,645
I initiated a one-hour siege AI meeting for Warhammer.

852
00:49:29,525 --> 00:49:30,945
I know that everyone hates meetings,

853
00:49:31,045 --> 00:49:35,066
but this one proved vital to the success of our siege battles.

854
00:49:36,146 --> 00:49:39,607
So represented in each meeting were the battle AI team,

855
00:49:39,667 --> 00:49:42,108
which consists of myself, responsible for sieges,

856
00:49:42,548 --> 00:49:44,868
and two other AI programmers who are responsible

857
00:49:44,888 --> 00:49:46,048
for the general battle AI.

858
00:49:47,396 --> 00:49:49,958
We also had the designer who was responsible for siege battles.

859
00:49:50,599 --> 00:49:54,302
We had the designer responsible for both battle and campaign AI.

860
00:49:55,363 --> 00:49:58,946
We had the lead battle programmer, three representatives from QA,

861
00:49:59,046 --> 00:50:02,029
including the lead QA, an embedded battle tester,

862
00:50:02,189 --> 00:50:06,913
and an embedded siege tester, and a producer, and the game director himself.

863
00:50:07,274 --> 00:50:10,336
So essentially, everyone was in the room who

864
00:50:10,376 --> 00:50:13,039
needed to be there in order for us to make actionable decisions.

865
00:50:14,028 --> 00:50:16,511
So yes, it was a big meeting, but it was by far

866
00:50:16,611 --> 00:50:17,432
our most productive.

867
00:50:18,774 --> 00:50:21,978
During each meeting, we would review the status of action

868
00:50:22,018 --> 00:50:23,500
items from the previous meeting, of course.

869
00:50:24,021 --> 00:50:25,342
And then we would play the build,

870
00:50:25,683 --> 00:50:28,847
specifically to demonstrate any AI changes since last week.

871
00:50:29,904 --> 00:50:32,105
We would then discuss whether or not those changes looked

872
00:50:32,185 --> 00:50:34,666
good, if they were working out as expected,

873
00:50:34,926 --> 00:50:36,467
or if something needed to be changed,

874
00:50:36,547 --> 00:50:39,448
whether it was in the AI itself or potentially

875
00:50:39,488 --> 00:50:40,988
a feature in the game that wasn't panning out

876
00:50:41,008 --> 00:50:43,529
as we expected or something that was particularly challenging

877
00:50:43,569 --> 00:50:44,470
for the AI to use.

878
00:50:45,910 --> 00:50:48,971
We would then demonstrate any updates to the debugging tools

879
00:50:49,712 --> 00:50:51,472
to visualize any of these new behaviors.

880
00:50:52,653 --> 00:50:54,774
And then we'd bring up any changes or decisions that

881
00:50:54,794 --> 00:50:57,235
might have occurred outside of the siege team that could

882
00:50:57,275 --> 00:50:58,515
have impact on the sieges.

883
00:50:59,627 --> 00:51:01,028
And then finally, we would generate

884
00:51:01,348 --> 00:51:03,929
a list of relevant tasks that we intended to complete

885
00:51:04,169 --> 00:51:04,849
for the next meeting.

886
00:51:06,370 --> 00:51:07,950
Speaking personally, this process

887
00:51:07,990 --> 00:51:10,051
was invaluable to me as an AI programmer

888
00:51:10,371 --> 00:51:12,172
and to all the other participants as well.

889
00:51:13,212 --> 00:51:15,073
It formed the core of our collaborative process,

890
00:51:15,153 --> 00:51:17,854
which got everyone invested in the success of the siege

891
00:51:17,894 --> 00:51:18,214
battles.

892
00:51:19,255 --> 00:51:21,676
And critically, this collaboration

893
00:51:21,736 --> 00:51:23,737
provided a mutual understanding of challenges,

894
00:51:24,297 --> 00:51:26,938
and it prevented surprises as the project progressed.

895
00:51:29,587 --> 00:51:36,831
So, if you'll indulge me, as a result of those changes in process, and my experience in the past, I'd like to offer some general advice.

896
00:51:37,771 --> 00:51:44,255
Now, this stuff might seem pretty basic, but it's shockingly rare to find people who actually follow it sometimes.

897
00:51:44,716 --> 00:51:45,876
So, it bears repeating.

898
00:51:46,937 --> 00:51:52,460
First, play your game. Understand your game. And watch other people play it as well.

899
00:51:52,981 --> 00:51:58,624
Talk to your expert players if you're lucky enough to be in a situation like us, where we all have a very established fanbase.

900
00:51:59,739 --> 00:52:04,821
Understanding your game means noticing things that design documents won't tell you explicitly.

901
00:52:05,461 --> 00:52:09,922
And it should be obvious that in order to program a competent computer opponent, you

902
00:52:09,942 --> 00:52:11,642
should understand the game that it's trying to play.

903
00:52:13,603 --> 00:52:15,123
Be the champion for the AI.

904
00:52:15,724 --> 00:52:17,764
No one will understand the AI better than you do.

905
00:52:18,604 --> 00:52:22,766
It's easy for someone outside of the AI team to make a decision that impacts AI without

906
00:52:22,826 --> 00:52:23,626
even realizing it.

907
00:52:24,515 --> 00:52:30,239
Since you're responsible for the AI, you're also responsible for educating the rest of the team about the AI.

908
00:52:31,160 --> 00:52:33,422
Encourage questions and be available to answer them.

909
00:52:35,603 --> 00:52:41,128
Be the expert. As the AI programmer, you know how the AI works. Or I certainly hope you do.

910
00:52:42,749 --> 00:52:49,574
If you understand how your game works, then you should also be able to anticipate scenarios where the AI might do a bad job.

911
00:52:50,255 --> 00:52:52,696
Don't rely on other people to find those edge cases for you.

912
00:52:53,983 --> 00:52:56,004
Just think about it, and if you can anticipate it,

913
00:52:56,484 --> 00:52:58,285
you can probably come up with a plan to mitigate it.

914
00:52:59,085 --> 00:53:01,806
But resist the temptation to work on theoretical problems.

915
00:53:02,207 --> 00:53:03,647
Instead, you should identify it,

916
00:53:04,027 --> 00:53:06,108
discuss it with your team, and prioritize it.

917
00:53:06,509 --> 00:53:07,289
Maybe it's not a big deal.

918
00:53:09,258 --> 00:53:09,878
Be organized.

919
00:53:10,458 --> 00:53:12,599
Having your own private to-do list is important,

920
00:53:12,839 --> 00:53:14,920
but buddy up with a producer to get those tasks

921
00:53:14,980 --> 00:53:16,241
tracked as appropriate.

922
00:53:16,801 --> 00:53:18,882
It's really easy to let things slip through the cracks,

923
00:53:18,902 --> 00:53:20,643
because these games are so complicated.

924
00:53:21,323 --> 00:53:24,145
And if you don't quantify and track discovered work,

925
00:53:24,785 --> 00:53:26,506
you're either going to work yourself

926
00:53:26,546 --> 00:53:28,267
into the ground fixing them, or you're

927
00:53:28,287 --> 00:53:29,707
going to let the quality of the game suffer.

928
00:53:30,207 --> 00:53:30,908
Don't let that happen.

929
00:53:33,365 --> 00:53:37,186
show your work, subject the AI to critique on a regular basis,

930
00:53:38,086 --> 00:53:40,167
people will have ideas about how to improve it.

931
00:53:40,567 --> 00:53:42,528
And you don't need to act on every suggestion.

932
00:53:43,008 --> 00:53:44,329
But two heads are better than one,

933
00:53:44,409 --> 00:53:46,029
especially when they're from different disciplines.

934
00:53:46,810 --> 00:53:48,350
You might get some really great suggestions.

935
00:53:49,611 --> 00:53:50,471
Invest in tools.

936
00:53:51,511 --> 00:53:52,832
They'll save you time in the long run.

937
00:53:53,112 --> 00:53:54,873
I know they're not sexy, but they're so useful.

938
00:53:55,473 --> 00:53:57,574
Especially visualization tools that help you

939
00:53:57,614 --> 00:53:58,854
understand what's going wrong.

940
00:54:00,078 --> 00:54:02,479
Make sure those tools can be enabled on anyone's machine.

941
00:54:02,539 --> 00:54:03,939
You don't have to do something special.

942
00:54:04,700 --> 00:54:06,500
So that you can diagnose weird behavior

943
00:54:06,540 --> 00:54:08,801
when someone ambushes you as you walk by in the hallway.

944
00:54:09,742 --> 00:54:11,362
And if you train other people to use the tools,

945
00:54:11,402 --> 00:54:13,623
they can potentially diagnose issues for you

946
00:54:14,584 --> 00:54:16,484
and lead to better quality bug reports.

947
00:54:17,885 --> 00:54:19,385
And finally, don't take it personally.

948
00:54:20,386 --> 00:54:22,006
It's not a personal insult if someone says

949
00:54:22,026 --> 00:54:23,387
the AI is doing something stupid.

950
00:54:24,307 --> 00:54:25,908
Set your ego aside during development

951
00:54:26,008 --> 00:54:26,788
and put the game first.

952
00:54:29,468 --> 00:54:34,811
So to wrap up, the CJI on Total War Warhammer is remarkably different than previous games

953
00:54:34,851 --> 00:54:37,832
in the series due to a different set of design goals.

954
00:54:38,973 --> 00:54:43,955
We started with a proven set of functionality from Total War Attila and iterated towards

955
00:54:43,995 --> 00:54:48,838
a style of gameplay that we wanted in close collaboration with the battle and design teams.

956
00:54:51,028 --> 00:54:53,710
The breadth of the player-facing AI behaviors

957
00:54:54,311 --> 00:54:57,494
is driven by the variety of unit types and army compositions

958
00:54:57,534 --> 00:54:59,315
that are brought to the battle, not

959
00:54:59,355 --> 00:55:02,598
by randomization within the behaviors themselves.

960
00:55:04,820 --> 00:55:06,601
And for the first time, we're now

961
00:55:06,682 --> 00:55:08,543
holding back units and reserves instead

962
00:55:08,563 --> 00:55:10,765
of committing the entire force at the start of the battle.

963
00:55:11,526 --> 00:55:13,728
And also for the first time, the friendly AI

964
00:55:13,908 --> 00:55:16,230
is able to follow the player's lead instead of just

965
00:55:16,290 --> 00:55:17,291
forging its own path.

966
00:55:19,668 --> 00:55:22,750
So Creative Assembly is located in sunny England,

967
00:55:23,271 --> 00:55:26,093
and we're hiring for positions across all disciplines.

968
00:55:26,173 --> 00:55:28,095
We have lots of opportunities, so if you're ever

969
00:55:28,155 --> 00:55:29,736
interested in moving to England, please

970
00:55:29,836 --> 00:55:32,378
come find me at the conference or talk to me after the chat.

971
00:55:33,839 --> 00:55:34,400
Thanks very much.

972
00:55:34,420 --> 00:55:36,241
Woo!

973
00:55:36,261 --> 00:55:36,321
Woo!

974
00:55:36,341 --> 00:55:36,441
Woo!

975
00:55:36,461 --> 00:55:36,722
Woo!

976
00:55:36,762 --> 00:55:36,942
Woo!

977
00:55:36,962 --> 00:55:37,122
Woo!

978
00:55:37,382 --> 00:55:37,442
Woo!

979
00:55:37,462 --> 00:55:37,602
Woo!

980
00:55:37,622 --> 00:55:37,682
Woo!

981
00:55:37,702 --> 00:55:37,762
Woo!

982
00:55:37,802 --> 00:55:37,882
Woo!

983
00:55:38,083 --> 00:55:38,183
Woo!

984
00:55:38,203 --> 00:55:38,323
Woo!

985
00:55:38,383 --> 00:55:38,443
Woo!

986
00:55:38,463 --> 00:55:38,523
Woo!

987
00:55:38,583 --> 00:55:38,683
Woo!

988
00:55:38,723 --> 00:55:38,803
Woo!

989
00:55:38,983 --> 00:55:39,063
Woo!

990
00:55:39,204 --> 00:55:39,404
Woo!

991
00:55:39,424 --> 00:55:39,584
Woo!

992
00:55:39,604 --> 00:55:39,704
Woo!

993
00:55:39,724 --> 00:55:39,824
Woo!

994
00:55:39,884 --> 00:55:40,044
Woo!

995
00:55:40,064 --> 00:55:40,184
Woo!

996
00:55:40,244 --> 00:55:40,304
Woo!

997
00:55:40,344 --> 00:55:40,404
Woo!

998
00:55:40,424 --> 00:55:40,485
Woo!

999
00:55:40,505 --> 00:55:40,565
Woo!

1000
00:55:40,585 --> 00:55:40,645
Woo!

1001
00:55:41,777 --> 00:55:45,760
All right, folks. We've got about four minutes for questions. I know it's not a lot of time

1002
00:55:45,801 --> 00:55:50,584
and obviously you can also ambush Andre outside. Just don't break down any walls because I

1003
00:55:50,604 --> 00:55:55,608
think that's against our contract. So if anybody has questions, always please use the microphones,

1004
00:55:55,789 --> 00:55:57,930
one in each aisle. Anybody?

1005
00:55:57,950 --> 00:56:09,059
Let's just keep our eye open for a minute. There goes John. John, go ahead and go for it.

1006
00:56:09,800 --> 00:56:09,900
Hey.

1007
00:56:11,025 --> 00:56:16,869
So can entry points be closed down, as in ladders being kicked down and so on?

1008
00:56:17,410 --> 00:56:24,656
And if so, how does the units actually reorganize in accordance to that?

1009
00:56:24,916 --> 00:56:29,679
And how do the reserves, if they're heading for it, reorganize?

1010
00:56:30,080 --> 00:56:36,102
Yeah, good question. So it is possible, but it's very unlikely, which means we have to handle that.

1011
00:56:37,002 --> 00:56:43,565
So the way that that works, typically the entry points are permanent, but it's entirely possible

1012
00:56:43,625 --> 00:56:49,007
that, for example, that section of wall is destroyed, and so the siege tower attached to it

1013
00:56:49,187 --> 00:56:54,029
is worthless now. So the way that that works is just the same as a tactic being abandoned.

1014
00:56:54,609 --> 00:56:56,411
the entry point will be shut down.

1015
00:56:57,552 --> 00:56:59,013
All of the units that were assigned to it

1016
00:56:59,033 --> 00:57:01,295
will be immediately transferred to the reserves tactic.

1017
00:57:01,735 --> 00:57:04,878
And from there, they go back into the typical process

1018
00:57:04,918 --> 00:57:06,860
of the reserves scanning for other entry points.

1019
00:57:07,240 --> 00:57:09,242
So if there's something else for them to do immediately,

1020
00:57:09,582 --> 00:57:11,504
they'll get transferred to another tactic right away,

1021
00:57:11,584 --> 00:57:12,785
and then they'll go off and do that.

1022
00:57:15,607 --> 00:57:15,888
Here.

1023
00:57:16,668 --> 00:57:18,390
I'm curious how the game difficulty

1024
00:57:18,490 --> 00:57:20,712
affects the battle AI in these games,

1025
00:57:21,112 --> 00:57:21,893
or at least in Warhammer.

1026
00:57:22,437 --> 00:57:23,337
That's a good question.

1027
00:57:25,198 --> 00:57:27,499
The short answer is it's very indirect.

1028
00:57:28,500 --> 00:57:30,481
It happens as a result of the unit balance.

1029
00:57:30,961 --> 00:57:33,883
We have some pretty sophisticated systems

1030
00:57:34,043 --> 00:57:36,284
called the combat outcome prediction, which

1031
00:57:36,604 --> 00:57:38,305
features quite heavily in the way

1032
00:57:38,325 --> 00:57:39,406
that the melee manager works.

1033
00:57:40,306 --> 00:57:43,408
And so the AI doesn't make any different tactical decisions,

1034
00:57:43,728 --> 00:57:46,550
but it'll certainly make a lot of different targeting choices

1035
00:57:46,830 --> 00:57:50,412
within the low-level behaviors as a result of the unit balance

1036
00:57:50,432 --> 00:57:50,752
shifting.

1037
00:57:53,789 --> 00:57:56,312
What do they do with flying units during a siege?

1038
00:57:57,073 --> 00:58:01,658
Good question. I didn't touch on that because they don't feature into any of these particular

1039
00:58:01,698 --> 00:58:07,605
assault tactics. So what we do with them instead is they have a separate objective, which is

1040
00:58:07,665 --> 00:58:09,107
just attack enemy.

1041
00:58:09,988 --> 00:58:13,329
and they will wait and scan the entry points

1042
00:58:13,949 --> 00:58:17,791
into the settlement and decide to fly towards one of them

1043
00:58:17,991 --> 00:58:21,652
once it's about reaching its accessibility point.

1044
00:58:22,053 --> 00:58:24,013
And so at that point, we can get some flying units,

1045
00:58:24,253 --> 00:58:26,334
dive in and attack the guys on the walls

1046
00:58:26,834 --> 00:58:28,775
just as your guys are cresting the ladders

1047
00:58:28,855 --> 00:58:30,776
and chaos erupts and it's pretty crazy.

1048
00:58:31,516 --> 00:58:31,856
It's fun.

1049
00:58:33,397 --> 00:58:33,717
One over here.

1050
00:58:34,460 --> 00:58:36,743
You mentioned visualization tools.

1051
00:58:37,123 --> 00:58:41,789
Could you just describe in a couple words what exactly are you visualizing?

1052
00:58:42,349 --> 00:58:42,650
Sure.

1053
00:58:43,170 --> 00:58:45,873
Well, our visualizers are pretty rudimentary.

1054
00:58:46,514 --> 00:58:47,676
It's just lines and text.

1055
00:58:49,517 --> 00:58:51,998
using them appropriately is the hard part, right?

1056
00:58:52,519 --> 00:58:54,960
So the way that we do it for most of our tactics

1057
00:58:55,180 --> 00:58:56,880
is we'll draw like bounding boxes

1058
00:58:57,081 --> 00:58:59,362
around all of the units assigned to a tactic.

1059
00:58:59,502 --> 00:59:01,222
And then if that tactic has subgroups

1060
00:59:01,302 --> 00:59:02,583
like the wall assault tactic does,

1061
00:59:03,063 --> 00:59:04,144
then we identify those.

1062
00:59:04,644 --> 00:59:06,585
And then we will draw like pegs to say,

1063
00:59:06,645 --> 00:59:07,725
these are the leading units

1064
00:59:07,825 --> 00:59:09,286
and therefore anything else enclosed

1065
00:59:09,386 --> 00:59:10,966
by that bounding box is a support unit.

1066
00:59:11,567 --> 00:59:13,969
And we can see how that progresses,

1067
00:59:14,089 --> 00:59:15,951
and when the bounding box goes giant,

1068
00:59:16,031 --> 00:59:17,432
then obviously something over there

1069
00:59:17,472 --> 00:59:18,653
just got allocated to it.

1070
00:59:19,233 --> 00:59:20,895
And then on each individual unit,

1071
00:59:20,915 --> 00:59:22,636
we can print out a bunch of text saying

1072
00:59:22,696 --> 00:59:24,137
which tactic is it currently in,

1073
00:59:24,237 --> 00:59:26,499
which state is that tactic currently in as well,

1074
00:59:27,140 --> 00:59:29,262
and what are its priorities, what's it trying to do.

1075
00:59:30,142 --> 00:59:32,564
So fairly simple stuff, but really useful.

1076
00:59:34,726 --> 00:59:36,047
One more in the middle here.

1077
00:59:36,267 --> 00:59:37,468
Okay, last one in the middle.

1078
00:59:39,090 --> 00:59:41,814
You mentioned that the AI is not permitted to retreat.

1079
00:59:42,235 --> 00:59:42,596
Correct.

1080
00:59:42,616 --> 00:59:42,796
Why?

1081
00:59:43,717 --> 00:59:49,866
That's a game design decision at the highest levels, but basically it comes down to preventing

1082
00:59:49,926 --> 00:59:53,091
the campaign AI and the battle AI from disagreeing.

1083
00:59:53,832 --> 00:59:56,833
So if you enter a battle, and the battle AI goes,

1084
00:59:57,213 --> 00:59:59,354
I can't win this, crap, I'm going to retreat.

1085
00:59:59,434 --> 01:00:01,574
And the campaign AI goes, well, I

1086
01:00:01,614 --> 01:00:02,575
told you to attack for a reason.

1087
01:00:02,595 --> 01:00:03,295
Go attack again.

1088
01:00:03,335 --> 01:00:04,695
And then you can get stuck in these loops.

1089
01:00:05,276 --> 01:00:07,656
And there really isn't any coordination

1090
01:00:07,716 --> 01:00:09,677
between the campaign AI and the battle AI

1091
01:00:09,777 --> 01:00:11,238
currently in the Total War series.

1092
01:00:11,778 --> 01:00:12,978
But that's something that I think

1093
01:00:12,998 --> 01:00:14,779
is a great target for improvement in the future.

1094
01:00:16,199 --> 01:00:16,419
Cool.

1095
01:00:17,180 --> 01:00:18,020
Thanks a lot, everybody.

1096
01:00:18,040 --> 01:00:19,020
That was really great.

