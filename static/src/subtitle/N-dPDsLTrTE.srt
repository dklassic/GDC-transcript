1
00:00:07,844 --> 00:00:08,404
Konnichiwa.

2
00:00:22,474 --> 00:00:23,375
Hello everyone.

3
00:00:24,095 --> 00:00:32,621
Thank you for coming to listen to Tunes of the Kingdom, our presentation about the legend of Zelda, Tears of the Kingdom.

4
00:00:35,455 --> 00:00:36,835
This is a Hylian Shield.

5
00:00:37,656 --> 00:00:43,417
It should be familiar to fans who have been playing the Legend of Zelda series for a long time.

6
00:00:45,118 --> 00:00:56,341
But I doubt anyone imagined that you would be able to attach a piece of icy meat to it and use it to surf at high speeds in the latest game in the series.

7
00:00:59,465 --> 00:01:07,051
This is a sequel to the Legend of Zelda Breath of the Wild, so you may have guessed there'd be a portable cooking pot.

8
00:01:09,092 --> 00:01:15,437
But I doubt anyone predicted the cooking pot would also have excellent suspension.

9
00:01:19,860 --> 00:01:22,462
Even we didn't predict that.

10
00:01:26,638 --> 00:01:35,562
No matter how difficult the situation, sometimes you can just stick a bunch of logs together and figure something out.

11
00:01:36,902 --> 00:01:49,968
Rather than using only wisdom to find a solution, sometimes it is just as important to have courage to power through a problem.

12
00:02:00,011 --> 00:02:00,811
Hello, everyone.

13
00:02:02,032 --> 00:02:03,732
I am Takuhiro Dota.

14
00:02:04,572 --> 00:02:05,733
I joined Nintendo in 2003.

15
00:02:06,013 --> 00:02:17,676
I've been involved in many titles, working on game programming, developing game engines, and prototyping new games from a technological perspective.

16
00:02:18,756 --> 00:02:23,918
I was the technical director for both Breath of the Wild and Tears of the Kingdom.

17
00:02:26,149 --> 00:02:33,571
As you just saw, we introduced the ability to stick objects together as a distinctive game mechanic in Tears of the Kingdom.

18
00:02:34,511 --> 00:02:40,952
We wanted to let players combine objects to make new discoveries and try unexpected methods.

19
00:02:41,993 --> 00:02:51,295
To start off, let me provide some background about how the idea of sticking objects together came about in Tears of the Kingdom.

20
00:02:52,375 --> 00:02:55,716
First, let's return to the topic of Breath of the Wild.

21
00:02:58,188 --> 00:03:02,950
We had two major themes during development of Breath of the Wild.

22
00:03:04,611 --> 00:03:07,512
The first was a fast and seamless high-low.

23
00:03:08,672 --> 00:03:17,176
In Breath of the Wild, we wanted players to see a place in the distance and be able to reach it simply going that direction.

24
00:03:18,416 --> 00:03:26,540
But at the same time, simply making the game feel fast and seamless doesn't necessarily make the game itself fun.

25
00:03:28,183 --> 00:03:32,111
So we came up with the idea of multiplicative gameplay.

26
00:03:32,812 --> 00:03:34,095
This was the second theme.

27
00:03:35,317 --> 00:03:37,301
Now then, what does this mean?

28
00:03:39,679 --> 00:03:49,762
Multiplicative gameplay is a game structure that lets players combine actions and objects to create many different ways to play.

29
00:03:50,722 --> 00:03:56,124
This was one of the themes of our Wild presentation for GDC 2017.

30
00:03:57,324 --> 00:03:59,104
This is a slide from that time.

31
00:04:01,225 --> 00:04:08,207
All objects in the game are connected by same world rules, such as physics and chemistry.

32
00:04:10,097 --> 00:04:16,781
This allows actions and objects and the game field to interact on a raw basis.

33
00:04:18,102 --> 00:04:26,106
These interactions cause many different things to happen automatically, such as falling borders, damaging enemies.

34
00:04:32,430 --> 00:04:37,533
And game designers use these rules as a basis for level design.

35
00:04:39,025 --> 00:04:44,648
Rather than creating something fun, create a system that makes fun things happen.

36
00:04:45,668 --> 00:04:48,710
This is a concept behind multiplicative gameplay.

37
00:04:54,793 --> 00:05:03,698
We wanted to take the two development themes that were realized in Breath of the Wild and expand on them even further for Tears of the Kingdom.

38
00:05:04,864 --> 00:05:10,146
First, we decided to expand Hyrule and the scope of players' adventure.

39
00:05:16,188 --> 00:05:24,271
After developing Skyward Sword, we wanted to try seamlessly connecting the sky and surface in the future title.

40
00:05:26,707 --> 00:05:35,352
There have been many examples of a dark world that is a counterpart of the surface in the series.

41
00:05:36,252 --> 00:05:39,854
In this game, we created the depths based on this concept.

42
00:05:44,737 --> 00:05:51,120
Our producer wanted to dig holes in the world ever since development of Breath of the Wild started.

43
00:05:52,141 --> 00:05:54,122
So, we dug holes.

44
00:05:57,335 --> 00:06:04,437
We expanded the world of Hyrule more and more, going upwards, downwards, and even inside.

45
00:06:07,198 --> 00:06:13,940
But let me repeat, simply making the game feel fast doesn't necessarily make the game fun.

46
00:06:15,100 --> 00:06:17,641
How should players get around in the sky?

47
00:06:18,601 --> 00:06:21,242
What kind of gameplay should exist in the depths?

48
00:06:23,737 --> 00:06:27,162
We wanted to enhance the multiplicative gameplay too.

49
00:06:28,263 --> 00:06:30,226
But how are we going to do that?

50
00:06:33,615 --> 00:06:41,898
By the way, this is an article that was published on the Japanese Nintendo homepage after Breath of the Wild was released.

51
00:06:42,858 --> 00:06:47,200
These octoballoons were special materials, even in Breath of the Wild.

52
00:06:47,880 --> 00:06:50,761
They can make an object float when attached to it.

53
00:06:51,901 --> 00:07:01,925
We implemented this functionality not to be used as a solution, but as a way to make the multiplicative gameplay even more plentiful.

54
00:07:03,203 --> 00:07:14,386
Because of this, it wasn't a major element, but we actually felt that the ability to stick one object to another had a lot of potential.

55
00:07:17,327 --> 00:07:26,309
So, when development began on Tears of the Kingdom, Mr. Fujibayashi, the game's director, produced the prototypes like this.

56
00:07:27,984 --> 00:07:34,349
These were made in place of the wild game engine by forcefully sticking objects that appear in the game together.

57
00:07:35,590 --> 00:07:38,473
By combining objects, he created something new.

58
00:07:40,394 --> 00:07:47,880
By the way, the wheels are actually cog wheels that Mr. Fujibayashi stole from the dungeon.

59
00:07:52,784 --> 00:07:57,228
So we began proper prototyping to stick objects together freely

60
00:07:58,376 --> 00:08:08,058
The potential of sticking objects together that we felt with the octoballons and the new value gained by combining objects shown by the prototypes.

61
00:08:08,978 --> 00:08:14,560
We felt that this could be a gameplay point for this expanded world.

62
00:08:20,661 --> 00:08:24,222
In the end, Ultrahand and Fuse were born.

63
00:08:30,635 --> 00:08:37,901
What was once a simple king ingredient can now be attached to an arrow to become a powerful way to defeat enemies.

64
00:08:39,082 --> 00:08:43,385
The board on the ground over there can also become a flying carpet.

65
00:08:47,268 --> 00:08:50,631
A new game design using this system was born.

66
00:08:52,432 --> 00:08:56,856
Even if you aren't sure what to use these things for at first,

67
00:08:58,154 --> 00:09:03,038
you will come up with new ways to combine them to make something useful.

68
00:09:15,669 --> 00:09:19,632
Sticking two things together produces something new.

69
00:09:20,713 --> 00:09:24,376
We used this as a guide when preparing this presentation.

70
00:09:26,158 --> 00:09:30,283
which brings us to physics and sound.

71
00:09:31,364 --> 00:09:40,195
By combining two technical fields that aren't usually spoken about together, we thought that we might be able to create an interesting story.

72
00:09:42,076 --> 00:09:50,042
Today, I invite the lead programmers from each field to discuss this game from their perspectives.

73
00:09:51,243 --> 00:09:56,746
And so, I will pass the baton to the lead physics engineer, Takayama-san.

74
00:09:57,987 --> 00:09:58,668
Thank you very much.

75
00:10:11,297 --> 00:10:12,618
Thank you, Dota-san.

76
00:10:17,201 --> 00:10:24,826
When I first saw the prototype, I was excited that this was going to be a great game.

77
00:10:26,027 --> 00:10:31,771
But I also knew this was going to be very, very difficult.

78
00:10:33,792 --> 00:10:38,155
I said to myself, are we really doing this?

79
00:10:40,287 --> 00:10:43,270
development is going to be chaos.

80
00:10:46,352 --> 00:10:48,855
The more I thought, the more I worried.

81
00:10:50,416 --> 00:10:56,281
But in life, it's sometimes important to have the courage to push forward.

82
00:10:59,964 --> 00:11:03,768
As expected, the world fell apart.

83
00:11:06,630 --> 00:11:07,231
At this rate,

84
00:11:08,240 --> 00:11:13,208
the world will destroy itself before Ganondorf comes back.

85
00:11:15,051 --> 00:11:21,662
And so began our battle against the true menace of hell.

86
00:11:26,889 --> 00:11:27,670
Hello, everyone.

87
00:11:28,190 --> 00:11:29,291
I'm Takahiro Takayama.

88
00:11:30,351 --> 00:11:36,836
Since I began at Nintendo, I've worked on many games as a programmer.

89
00:11:37,916 --> 00:11:42,419
And now, I develop the in-house physics library and tools.

90
00:11:44,821 --> 00:11:49,704
I was a physics programming lead on Breath of the Wild and Tears of the Kingdom.

91
00:11:50,745 --> 00:11:52,226
Thank you for having me today.

92
00:11:54,980 --> 00:12:03,747
Before we start, like Breath of the Wild, Tears of the Kingdom uses Havok as the base for the physics engine.

93
00:12:04,868 --> 00:12:15,337
And on top of that, we have our in-house physics library, which is a foundation for the physics in Tears of the Kingdom.

94
00:12:17,419 --> 00:12:19,621
Please let me switch to Japanese now.

95
00:12:30,146 --> 00:12:40,010
With the aim of expanding the world by enhancing the multiplicative gameplay, there were two things we attempted, and I'd like to touch on those.

96
00:12:40,590 --> 00:12:43,851
The first was to create an entirely physics-driven world.

97
00:12:50,270 --> 00:12:56,117
The second was to create a system where unique interactions occur without any dedicated implementation.

98
00:12:57,419 --> 00:13:00,723
I'll start out by explaining why we needed an entirely physics-driven world.

99
00:13:07,622 --> 00:13:16,988
During development, when we say physics-driven, what we mean is objects have mass and moment of inertia, and they can be controlled using things like velocity and acceleration.

100
00:13:37,501 --> 00:13:39,082
So what would the opposite be?

101
00:13:39,362 --> 00:13:41,324
What is a non-physics driven object?

102
00:13:41,344 --> 00:13:45,787
It's what we call a kinematic rigid body control.

103
00:13:45,867 --> 00:13:50,311
It's forcibly moving a rigid body at a velocity calculated from the animation.

104
00:14:09,753 --> 00:14:18,637
The implementation is easy, and the results are also visually easy to understand, so we used it quite a bit in the early stages of development for Tears of the Kingdom.

105
00:14:20,258 --> 00:14:22,439
However, there is one thing we need to be careful of.

106
00:14:23,099 --> 00:14:28,302
Kinematic-controlled rigid bodies have an infinite amount of mass and destroy physical calculations.

107
00:14:34,305 --> 00:14:41,210
However, rigid bodies controlled by kinematics have infinite mass and can break down a physics-based calculation.

108
00:14:41,910 --> 00:14:45,953
As seen in this footage, you normally wouldn't expect the metal object to get caught up like this.

109
00:14:58,496 --> 00:15:01,198
Practically speaking, this meant chaos for us.

110
00:15:01,819 --> 00:15:10,165
The clash between these non-physics-driven objects and Ultrahan, with its high degree of freedom, caused daily problems all over the land of Hyrule.

111
00:15:10,625 --> 00:15:11,586
It went something like this.

112
00:15:22,475 --> 00:15:27,756
I would hear things like, it broke, or it went flying, and I would respond, I know, we'll deal with it later.

113
00:15:27,976 --> 00:15:32,038
Just focus on getting the gameplay in there and trying it out.

114
00:15:32,818 --> 00:15:34,478
We were in search of a solution.

115
00:15:36,279 --> 00:15:40,300
The starting point for the solution was the experience we had with Breath of the Wild.

116
00:15:40,320 --> 00:15:43,321
This was a car that had broken down due to an unethical control.

117
00:15:45,458 --> 00:15:49,339
The key to that solution was in our experience developing Breath of the Wild.

118
00:15:50,119 --> 00:15:55,340
This is the cogwheel from earlier that was not functioning properly due to non-physics driven controls.

119
00:15:59,742 --> 00:16:06,203
We connected the two fixed cogwheels with a constraint to transfer velocity and moved one of them with a motor.

120
00:16:29,274 --> 00:16:34,057
Because all calculations are now physics-based, all the issues we were facing were now resolved.

121
00:16:34,697 --> 00:16:43,383
From this experience, we realized removing all non-physics-driven objects and making everything physics-driven would lead us to the solution we were looking for.

122
00:16:46,076 --> 00:17:02,625
In Tears of the Kingdom, gates were initially implemented as non-physics driven objects and thus were one of many objects that proved problematic when using UltraHand.

123
00:17:14,713 --> 00:17:26,783
If the player were to place something underneath the gate, the physics calculation would fall apart because this was a kinematic-controlled gate.

124
00:17:27,424 --> 00:17:34,270
So to address this, we made the gate physics-driven.

125
00:17:35,130 --> 00:17:39,214
This is now controlled by connecting the ground and the gate with a slider constraint.

126
00:17:43,291 --> 00:17:44,912
We then add a motor to power it.

127
00:17:46,452 --> 00:17:47,653
And this removes all the breakdown.

128
00:17:47,673 --> 00:17:52,634
But this shift from non-physics driven to physics driven brought many new discoveries for us.

129
00:18:10,523 --> 00:18:16,327
This particular shrine is one where you can weigh a switch down by reducing the size of a block of ice.

130
00:18:40,404 --> 00:18:49,648
When we changed the gate to be physics-driven to prevent the world from destroying itself, it also resulted in an alternate solution to the shrine, simply keeping the gate open.

131
00:18:51,449 --> 00:18:58,432
This is precisely the kind of multiplicative gameplay we were seeking, and a confirmation that making everything physics-driven was the correct approach.

132
00:19:09,798 --> 00:19:10,979
And this wasn't just limited to objects.

133
00:19:10,999 --> 00:19:12,660
Player abilities, like recall, also needed to be physics-driven.

134
00:19:12,680 --> 00:19:17,665
While implementation is faster using a non-physics-driven control for a quick gut check, it can also lead to something like this.

135
00:19:40,560 --> 00:19:42,962
In the end, like everything else, we also changed recall to be physics-driven.

136
00:19:43,002 --> 00:19:46,445
As a result, regardless of what the player does, we have a world free from self-destruction, as seen here.

137
00:20:14,358 --> 00:20:24,905
Up until this point, I've spoken about how a world with a high degree of freedom requires everything to be physics-driven.

138
00:20:26,306 --> 00:20:29,828
Every single thing, without exception, is built with dynamic, rigid bodies and constraints.

139
00:20:40,395 --> 00:20:52,043
And this is what allowed us to create a world in which players can freely translate their creativity and imagination into action without destroying the world.

140
00:21:03,846 --> 00:21:10,690
Next, I'd like to introduce the other important element necessary to bring this idea of enhanced multiplicative gameplay to life.

141
00:21:11,410 --> 00:21:15,973
A system that allows unique interactions to occur without dedicated implementation.

142
00:21:17,654 --> 00:21:22,137
The world we aim to create is a world where various events occur depending on the player's free will.

143
00:21:25,450 --> 00:21:34,454
Enhanced Multiplicative Gameplay aims to create a world in which a multitude of unique interactions can happen based on a player's creativity and imagination.

144
00:21:42,458 --> 00:21:49,401
And so we thought a system that allows for unique interactions to occur without any dedicated implementation is what we needed.

145
00:21:51,070 --> 00:21:56,293
Dedicated implementation here refers to having a dedicated program for each and every interaction we wanted to include.

146
00:22:16,601 --> 00:22:24,708
For example, we wanted the player to be able to build vehicles to explore, but we didn't implement any sort of dedicated vehicle program.

147
00:22:24,728 --> 00:22:34,596
All we did was implement the individual elements, like wheels, a steering stick, and a wooden board, so the player can combine them to create a vehicle themselves.

148
00:22:46,291 --> 00:22:47,752
The same goes for this gate.

149
00:22:48,032 --> 00:22:49,133
There was no dedicated programming.

150
00:22:49,153 --> 00:22:52,575
This is just a combination of wheels, a stone slab, and chains.

151
00:22:52,595 --> 00:22:55,457
The wheel is fixed onto the gate, which opens up as the wheel rolls up the chains.

152
00:23:25,309 --> 00:23:27,130
Paddle boats are yet another example.

153
00:23:27,971 --> 00:23:34,656
Buoyancy and resistance acting on the paddle boat's individual elements like the wheels and wooden boards result in this unique interaction.

154
00:23:43,246 --> 00:23:50,267
So far, I've touched on the interactions themselves, but I'd like to now talk about the various parts or components that trigger these interactions.

155
00:23:57,129 --> 00:23:57,649
Take the wheel.

156
00:23:58,089 --> 00:24:02,210
It's comprised of three rigid bodies, the wheel, motor, and shaft.

157
00:24:09,031 --> 00:24:12,712
Instead of the shaft connecting directly with the wheel, it holds up the motor.

158
00:24:23,360 --> 00:24:31,402
The torque from the motor transfers to the wheel's rigid body, causing it to rotate, and the friction between the ground and the wheel creates the driving force.

159
00:24:33,263 --> 00:24:37,944
Chains are used to pull an object or change the direction of a moving force.

160
00:24:44,229 --> 00:24:49,273
It's a series of capsule-shaped rigid bodies that vary in number based on length and are connected via ball socket constraints.

161
00:25:09,085 --> 00:25:17,112
In order to simulate water resistance when an object enters the water, we used the projected area of the direction of velocity to calculate the resistance.

162
00:25:32,580 --> 00:25:38,223
An easier way to simulate water resistance would be to simply apply velocity decay in all directions.

163
00:25:38,884 --> 00:25:52,411
But in order for rafts and boats to have a more convincing feel and movement to them, we needed changes in velocity based on the contact surface.

164
00:25:55,833 --> 00:26:00,436
The components of multiplicative gameplay were not limited to just objects and zonai devices.

165
00:26:01,377 --> 00:26:08,262
The calculations pertaining to water are applied equally to all objects, allowing us to create this unique interaction, also known as a paddle boat.

166
00:26:30,563 --> 00:26:39,566
Since our goal was to create a system where unique interactions occur without dedicated implementation, we included many different components that can trigger these interactions.

167
00:26:47,928 --> 00:26:57,451
And we've been so happy to see so many players combining these components in ways we hadn't thought about as they embark on their adventures.

168
00:26:57,911 --> 00:26:59,612
It looks like the Koroks are happy about it too.

169
00:27:04,349 --> 00:27:09,974
I've shared the two concepts crucial in our efforts to create a world that expands through enhanced multiplicative gameplay.

170
00:27:10,454 --> 00:27:15,058
An entirely physics-driven world in a system where unique interactions occur without dedicated implementation.

171
00:27:36,208 --> 00:27:39,910
But is that enough?

172
00:27:40,530 --> 00:27:41,810
The answer is no, not at all.

173
00:27:42,611 --> 00:27:44,791
There's one more vital piece of the puzzle missing.

174
00:27:46,772 --> 00:27:48,713
That piece is working together as a team.

175
00:28:05,696 --> 00:28:13,939
Development consisted of each member of the team understanding the gameplay they wanted to realize, and understanding what they needed to do to achieve it.

176
00:28:14,659 --> 00:28:16,460
I'd like to now share some of the team's efforts.

177
00:28:26,317 --> 00:28:33,740
First, in order to create an entirely physics-driven world, we worked with the artists and designers to set up the physics parameters correctly.

178
00:28:34,580 --> 00:28:43,684
When we specify the material, such as wood, steel, or stone, the density of the object is determined, and the mass and completion moment are automatically calculated.

179
00:28:43,704 --> 00:28:48,786
The volume required for calculation is automatically calculated from the shape of the shape.

180
00:28:50,509 --> 00:29:00,314
When we assign a material property to an object, such as wood, metal, stone, and so on, that object's mass and moment of inertia are automatically calculated.

181
00:29:01,034 --> 00:29:06,537
The volume necessary for that calculation is, in turn, automatically calculated based on the object's shape.

182
00:29:16,906 --> 00:29:20,170
But there are times when an automatic calculation doesn't fit our needs.

183
00:29:20,370 --> 00:29:24,214
And in those cases, we work with the artists and game designers to make adjustments.

184
00:29:25,576 --> 00:29:29,019
For example, Tears of the Kingdom is made thicker than the actual board.

185
00:29:29,039 --> 00:29:34,305
This is due to various reasons, such as the visibility and operability of the game.

186
00:29:36,701 --> 00:29:47,328
For example, objects like boards, slabs and plates in Tears of the Kingdom are actually thicker than those in the real world, due to various reasons like the need to make them easier to see or control.

187
00:29:58,672 --> 00:30:04,315
If the mass for these objects were to be calculated based on the shape as-is, they would become way too heavy.

188
00:30:04,535 --> 00:30:09,197
So we corrected the mass and moment of inertia to match what the player would expect them to be.

189
00:30:09,217 --> 00:30:15,380
The gimmicks in HOKORA are designed to make everything move physically.

190
00:30:15,400 --> 00:30:20,362
We created a verification lab to make sure that every single part moves correctly.

191
00:30:25,615 --> 00:30:30,876
Because all the puzzle elements for the shrines are physics-driven, many of them required precise construction.

192
00:30:31,576 --> 00:30:38,217
We created sort of a testing room so that we can check to make sure each and every one of them were functioning properly at any given time.

193
00:30:40,338 --> 00:30:47,839
Even complex objects such as carriages were made by close communication between the engineer and the artist.

194
00:30:47,859 --> 00:30:54,580
The size and position of the wheels were adjusted from the physical behavior, and the artist created the best appearance that matched it.

195
00:30:55,799 --> 00:31:01,604
Complex objects such as wagons were created through close and careful communication between engineers and artists.

196
00:31:02,365 --> 00:31:09,370
The size and position of the wheels were adjusted based on their physics behavior, and the artists created the best possible look for them.

197
00:31:16,537 --> 00:31:20,380
This is an example of using wheels for purposes other than driving a vehicle.

198
00:31:21,837 --> 00:31:26,599
When a game designer is working on a shrine, they create content that maximizes multiplicative gameplay and fun.

199
00:31:26,619 --> 00:31:28,400
In this shrine, the key lies in changing the orientation of the board.

200
00:31:55,201 --> 00:32:00,684
This idea came up when we used the projected area of the direction of velocity in calculating the water resistance.

201
00:32:05,846 --> 00:32:10,388
I personally like this idea very much, as it leverages an intuitive interaction with the water.

202
00:32:20,515 --> 00:32:28,579
Even the wheel, as a component to trigger unique interactions, is a result of the collaboration between game design, artistic perspective, and physics.

203
00:32:40,100 --> 00:32:50,884
Because we were focused on making sure the experience of driving assembled vehicles felt right and enjoyable, I vividly remember the team's excitement about how good the driving felt once the suspension was attached.

204
00:33:00,568 --> 00:33:08,631
The artist in charge designed a wheel with built-in suspension which she mentioned was quite challenging given it's not something you really see out in the real world.

205
00:33:20,407 --> 00:33:25,431
The shaft holds up the motor via the suspension and the motor provides driving power to the wheel.

206
00:33:32,837 --> 00:33:40,022
The length of time the wheel makes contact with the ground is increased by having the wheels along with the motor shift up and down and left to right.

207
00:33:47,600 --> 00:33:52,202
There's also a range limit constraint and a plane constraint to control the range of movement.

208
00:33:57,205 --> 00:33:59,327
Lastly, I'd like to talk about the portable pot.

209
00:34:09,321 --> 00:34:16,408
Since they can be placed anywhere now, there's no guarantee the pot will be placed on a flat, level surface, meaning your dish could spill out.

210
00:34:18,850 --> 00:34:24,155
As a countermeasure to this critical problem, an artist proposed adding telescopic legs to the pot.

211
00:34:32,629 --> 00:34:36,530
But in the end, we decided to put a joint at the bottom of the pot for stability.

212
00:34:36,650 --> 00:34:37,930
I'm happy to say your soup is now safe.

213
00:35:00,740 --> 00:35:10,706
And furthermore, we were so happy to see that the joint on the portable pot has seen a whole range of other uses, thanks to the creative imagination of so many players.

214
00:35:13,607 --> 00:35:15,108
I introduced the team's overall efforts.

215
00:35:15,148 --> 00:35:22,532
In order to create the vast world of Tears of the Kingdom, we needed to work with a game designer and artist who understood the world we wanted to create.

216
00:35:28,399 --> 00:35:42,550
As you can see from the examples I've shared, in order to bring the vast world of Tears of the Kingdom to life without it falling apart, it was essential that we worked intimately with designers and artists that had a deep understanding of the world we wanted to create.

217
00:35:51,117 --> 00:35:53,519
This concludes the physics portion of the presentation.

218
00:35:53,859 --> 00:35:56,561
I'll now pass it along to Osada-san to talk about the sound.

219
00:35:56,781 --> 00:35:57,542
Thank you very much.

220
00:36:09,312 --> 00:36:10,333
Thank you, Takayama-san.

221
00:36:11,093 --> 00:36:12,754
But aren't you forgetting something?

222
00:36:13,935 --> 00:36:15,436
You forgot the sound team.

223
00:36:16,957 --> 00:36:17,237
There.

224
00:36:18,238 --> 00:36:18,819
That's better.

225
00:36:25,843 --> 00:36:26,624
Hello, everyone.

226
00:36:27,164 --> 00:36:28,925
My name is Junyan Osada.

227
00:36:29,846 --> 00:36:36,691
For several years after I joined the company, I was a sound designer in charge of creating sound effects.

228
00:36:37,836 --> 00:36:47,541
Starting with the development of Breath of the Wild, I became the programming lead, and I developed the in-house sound library and tools.

229
00:36:48,602 --> 00:36:50,943
Thank you very much for having me here today.

230
00:36:52,264 --> 00:36:54,305
I'm going to switch to Japanese now.

231
00:36:56,626 --> 00:36:58,167
Speaking in Japanese

232
00:37:13,007 --> 00:37:21,230
Now then, you've seen how the vast and seamless world of Breath of the Wild was further expanded for Tears of the Kingdom, but this wasn't just limited to physical space.

233
00:37:21,650 --> 00:37:26,512
With the ability to combine various objects, the freedom within the gameplay itself also expanded.

234
00:37:40,998 --> 00:37:44,779
Because of this, many different kinds of spaces now appear within the game.

235
00:37:45,279 --> 00:37:55,121
We wanted to depict how sound spreads and naturally echoes in every corner of this expanded Hyrule, whether in open air places, complicated terrain, enclosed spaces, and so on.

236
00:38:00,984 --> 00:38:05,909
To do this, it seemed we would need some rules that could act as the focal point of our sound design.

237
00:38:07,270 --> 00:38:14,877
We thought perhaps that real-world acoustic characteristics could be those rules, and so we decided to go back to the basics of what it means to make sound in a 3D space.

238
00:38:27,008 --> 00:38:31,731
But, before we get into that, did you know that we've worked on various types of interactive music in the Legend of Zelda series?

239
00:38:31,751 --> 00:38:32,952
Here are just a few examples from past games.

240
00:38:56,505 --> 00:38:56,766
Let's go!

241
00:39:31,072 --> 00:39:32,393
Pretty nostalgic, right?

242
00:39:32,413 --> 00:39:41,699
Times have changed, but even now, in an era when orchestrated recordings are more prominent, we pour our energy into interactive musical expression.

243
00:40:17,216 --> 00:40:21,524
This is the first time I've played this game

244
00:40:44,725 --> 00:40:49,788
As games grew larger in scale and freer in gameplay, so grew the demand for an even more complex musical expression.

245
00:40:49,808 --> 00:40:51,450
We developed this tool in order to meet those demands.

246
00:41:06,755 --> 00:41:09,536
Now we can graphically edit the way music transitions by connecting nodes.

247
00:41:09,556 --> 00:41:14,579
You could say that this is an indispensable tool for designing interactive music as it's being composed.

248
00:41:42,685 --> 00:41:46,246
Speaking of which, we got to see the musical troupe in one of the earlier videos.

249
00:41:46,707 --> 00:41:55,511
We tend to notice that their performances and animations are synchronized, but another distinctive factor is that their music actually plays in the game space in the same way sound effects do.

250
00:41:56,769 --> 00:42:01,572
What if we were to express the change of a bold sound like interactive music with sound effects?

251
00:42:01,592 --> 00:42:08,296
This means controlling the waveform so that the sound becomes natural in the 3D game space, not just the waveform itself.

252
00:42:12,898 --> 00:42:19,507
What if we were to express some of the bold changes, much like the interactive music we spoke about, but in sound effects?

253
00:42:19,968 --> 00:42:27,078
This means rather than just playing an audio file as is, manipulating it so that the sound plays naturally within a 3D game space.

254
00:42:28,510 --> 00:42:37,155
In the first place, the sound in a 3D space can be heard from far away, or from the right speaker on the right side of the screen, or from the cave where the sound reverberates.

255
00:42:45,014 --> 00:42:59,698
We can define making sounds in a 3D space to mean reproducing changes in sounds within the game, such as how sounds coming from far away sound quieter, sounds coming from the right side of the screen can be heard from the right speaker, and sounds echo when the player enters a cave.

256
00:42:59,718 --> 00:43:09,881
It is common to use a distance reduction curve to express the sound going away, but this does not simply mean that the sound should be reduced.

257
00:43:12,062 --> 00:43:19,569
It is common to depict sounds moving farther away by using a distance attenuation curve for volume, with distance taken on the horizontal axis.

258
00:43:20,010 --> 00:43:22,472
But that doesn't mean just lowering the volume is enough.

259
00:43:36,536 --> 00:43:43,719
Not only do we lower the volume, but we also apply filters that muffle the sound, and reverb to blend it with the ambient sounds of the environment.

260
00:43:44,099 --> 00:43:48,021
In doing so, we can make it feel like the sound is realistically moving farther away.

261
00:43:49,221 --> 00:43:56,325
Rather than adjusting the parameters, another method that works well is preparing both short and long distance sounds and crossfading them according to distance.

262
00:44:05,421 --> 00:44:09,171
These methods are well known and have been used on many existing titles.

263
00:44:27,495 --> 00:44:31,518
However, there are many different kinds of spaces in Hyrule, so simply changing the sounds isn't enough.

264
00:44:31,538 --> 00:44:39,443
We want players to be able to tell which direction a sound is coming from, how far away it is, whether it's inside a cave or a forest, and so on, just by hearing it.

265
00:44:56,684 --> 00:44:59,526
To do this, all sounds really must be controlled by the same rules.

266
00:45:19,841 --> 00:45:24,705
For example, it is a well-known property of sound that when distance is doubled, volume is halved.

267
00:45:25,186 --> 00:45:32,572
This represents the fact that, in point sources, sound pressure per unit area attenuates with distance, and can be determined with a calculation.

268
00:45:33,473 --> 00:45:38,918
Put in simple terms, this means that loud sounds can be heard at a distance, while quiet sounds cannot.

269
00:45:50,741 --> 00:45:54,585
In other words, if you want a sound to be heard from far away, then it needs to be loud.

270
00:45:55,526 --> 00:45:59,931
A simple logarithmic graph like this shows the change in volume decreasing by half as distance doubles.

271
00:46:09,465 --> 00:46:10,205
But is that all it takes?

272
00:46:10,226 --> 00:46:12,727
For example, a rooster's crow is reportedly about 100 decibels.

273
00:46:12,747 --> 00:46:14,848
It would appear to take 100,000 meters before its sound would attenuate.

274
00:46:15,029 --> 00:46:16,229
Converted to miles, that's about 62 miles.

275
00:46:36,144 --> 00:46:37,685
In Japan, the distance from Tokyo to Mt.

276
00:46:37,705 --> 00:46:38,325
Fuji is about 62 miles.

277
00:46:38,345 --> 00:46:43,967
While roosters certainly are loud, I have a hard time believing a rooster crowing in Sacramento could be heard from this stage.

278
00:47:04,093 --> 00:47:09,596
Basically, it's very difficult to represent direct sound attenuation using only the phenomenon of sound diffusion.

279
00:47:15,600 --> 00:47:20,402
This is where excess attenuation, or in this case, air absorption in particular, comes into play.

280
00:47:22,003 --> 00:47:26,706
With air absorption, experiments have shown that the higher the frequency, the stronger the attenuation.

281
00:47:32,691 --> 00:47:36,474
Since air absorption decays in proportion to distance, it becomes a curve on a logarithmic graph.

282
00:47:36,494 --> 00:47:40,998
With this, the audible range for a rooster's crow becomes a much more realistic distance.

283
00:47:52,452 --> 00:47:55,695
Here, too, we use filters to depict stronger attenuation for higher frequencies.

284
00:47:55,715 --> 00:48:04,542
We take excess attenuation into account and make adjustments to find the right balance for things like what characteristics we need filters for and the distance at which those filters should be applied.

285
00:48:19,980 --> 00:48:22,942
Here are some examples of sounds that have been designed in such a way.

286
00:48:22,962 --> 00:48:25,363
Can you sense the change in the way the arrow sounds when it impacts?

287
00:49:03,561 --> 00:49:04,442
Did you hear the sound?

288
00:49:04,502 --> 00:49:08,084
Did you hear the way the sound of the vehicle blends into the environment as it gets farther away?

289
00:49:32,622 --> 00:49:38,106
When depicting sounds within a game space, it's important to factor in not just distance, but also indirect sound.

290
00:49:38,687 --> 00:49:48,154
Whether it's the inside of a house or within a rock cave, you can represent the characteristics of that space with sound by correctly setting how the sounds reverberate or how long their echoes last.

291
00:49:57,062 --> 00:50:04,028
We've used reverb effects on other Zelda games in the past as well, but there were too many parameters to adjust, and it ended up being a lot of work to address.

292
00:50:22,051 --> 00:50:25,772
So, we made it so the reverb parameters would be automatically calculated.

293
00:50:26,252 --> 00:50:40,197
Information such as room capacity based on the direction and distance of nearby walls and sound absorption rate based on the material of the walls is collected and used to calculate parameters using a formula called Eyring's Reverberation Time Equation.

294
00:50:41,457 --> 00:50:44,078
This is what echoes sound like when based on the reverberation equation.

295
00:51:21,533 --> 00:51:26,097
Taking it a step further, this game has a much larger amount of complicated terrain such as caves.

296
00:51:26,817 --> 00:51:31,281
Sound obstruction and occlusion are also important when creating even more realistic sounds for Hyrule.

297
00:51:51,690 --> 00:51:56,952
In this game, in order to depict a three-dimensional world, the terrain contains voxel information.

298
00:51:57,892 --> 00:52:03,734
Each voxel stores terrain information, such as whether its coordinates are located indoors or whether they are near the water's surface.

299
00:52:17,438 --> 00:52:22,401
They also contain information vital to level design, such as whether it's possible to use ascend.

300
00:52:23,581 --> 00:52:27,464
Sound uses these voxels, too, to search for sound paths using an informed search algorithm.

301
00:52:46,653 --> 00:52:56,919
To give a bit of extra information, in this game, the sound system performs calculations for the audio listener based on the camera's position, but searches for sound paths between the sound source and Link's position.

302
00:52:57,960 --> 00:53:00,321
This is why sound changes when you go behind a wall like this.

303
00:53:27,023 --> 00:53:29,965
This also addresses cases when the sound path is changed dynamically by a door.

304
00:53:56,351 --> 00:54:02,512
As you can see, expanding the degree of freedom and the world itself paints the world with a diverse palette of sound.

305
00:54:03,453 --> 00:54:08,954
The important thing here is that all sounds follow the same rules, and among those rules, loudness is particularly important.

306
00:54:20,165 --> 00:54:32,391
Basically, if you create acoustic characteristics based on the loudness of a sound, such as how loud it is and how far it can be heard, all that's left is to assign a loudness to each sound, and you'll be able to hear them within the game space properly.

307
00:54:55,080 --> 00:55:00,983
This is how sounds can now be heard in Hyrule, from quiet sounds like the heart container to loud sounds like the storm cloud.

308
00:55:35,612 --> 00:55:43,020
And what's more, instrumental music that isn't a sound effect can also sound as if it's echoing off of nearby walls or coming from the bottom of a cliff.

309
00:56:25,917 --> 00:56:28,758
Each and every sound now plays naturally within the game space.

310
00:56:29,239 --> 00:56:32,961
But now that I mention it, there is an incredible amount of freedom in this world.

311
00:56:33,341 --> 00:56:39,524
It would not be possible to prepare dedicated audio files for all of the many different things that can be created with UltraHand.

312
00:56:40,512 --> 00:56:45,274
And so, like with physics, the sound team also thought of a system where sounds would play without dedicated implementation.

313
00:57:05,643 --> 00:57:07,284
Take a look at this wagon for example.

314
00:57:07,825 --> 00:57:14,731
This is just a combination of the sound of wheels rolling, the short repeated shaking of the wooden bed, the chains connected to the bed, and so on.

315
00:57:15,151 --> 00:57:17,993
We did not use any recordings of actual wagon sounds.

316
00:57:27,785 --> 00:57:37,834
Even this paddle boat sound is a combination of the sound the water makes when wheels rotate through it, and the sound of wooden boards fighting water resistance as they splash through the water.

317
00:57:39,315 --> 00:57:45,921
We made a system that analyzes the way rigid bodies controlled by the physics system will move, then bases the sound on their size and material.

318
00:58:03,467 --> 00:58:08,313
As a result, various sounds will now play without needing to have a dedicated program set up to play them.

319
00:58:12,117 --> 00:58:17,803
Whether it's the flux construct's geometric movements, or sliding down a rail on a hook,

320
00:58:29,707 --> 00:58:38,615
The suspension bridges are also held together just with physics, without any kind of special suspension bridge program at all, and their wobbling and creaking sounds play automatically.

321
00:58:46,601 --> 00:58:52,887
Of course, these sounds are also based on the sound loudness rules I explained earlier, and they play naturally within the game space.

322
00:58:54,349 --> 00:58:59,034
The sound designer was surprised to hear that the system was able to create sounds that were not made by the player.

323
00:59:08,783 --> 00:59:16,044
Having come up with this form of implementation makes it feel like we have, in a sense, built a rule system for how sounds are made in the world of Hyrule.

324
00:59:16,725 --> 00:59:21,285
Many of the sound designers were surprised at the high quality sounds that were created with this system.

325
00:59:21,666 --> 00:59:23,726
Sounds which they had no memory of creating.

326
00:59:24,426 --> 00:59:27,947
Even the director told us, so this is basically a physics engine for sound, isn't it?

327
00:59:35,228 --> 00:59:42,691
We didn't start out with the goal of building such a system, but it was the result of our efforts to use sound to make the expanded Hyrule more dynamic.

328
00:59:42,731 --> 00:59:43,211
That's all from me.

329
00:59:43,251 --> 00:59:43,851
Thank you very much.

330
01:00:09,002 --> 01:00:10,863
Thank you, Takayama-san, Hosoda-san.

331
01:00:12,264 --> 01:00:21,489
Physics and sound are two different fields, but I think they have some things in common when it comes to how they evolved in this game.

332
01:00:22,870 --> 01:00:29,434
First, both steer towards a more rules-based system design to allow for greater player freedom.

333
01:00:31,595 --> 01:00:38,159
And these designs added another layer of complexity to interaction that occur within the game.

334
01:00:41,849 --> 01:00:52,091
And as a result, they each created a system that brings new discoveries, not only to players, but also as developers.

335
01:00:55,672 --> 01:01:07,115
As I explained at the beginning, the concept for multiplicative gameplay was rather than creating something fun, create a system that makes fun things happen.

336
01:01:08,905 --> 01:01:15,007
With Tears of the Kingdom, we aimed to achieve an even higher level of freedom.

337
01:01:16,048 --> 01:01:26,292
As a result, rather than determining each object movement, the physics team focused on creating a system that makes objects move.

338
01:01:28,273 --> 01:01:36,456
And rather than creating every sound you heard in the game, the sound team created a system that makes it sound that way.

339
01:01:38,157 --> 01:01:44,883
The fact that they focused on and worked hard to tune this system is fascinating to me.

340
01:01:48,806 --> 01:01:56,192
Rather than creating unique interactions, create a system that causes unique interactions to occur.

341
01:01:57,873 --> 01:02:04,959
I believe this was the essence of the evolution of physics and sound in Tears of the Kingdom.

342
01:02:07,219 --> 01:02:09,000
That's all for our presentation.

343
01:02:12,041 --> 01:02:20,364
Thank you for your kind attention.

344
01:02:20,404 --> 01:02:25,146
The interpreters you have heard today are from Nintendo of America.

345
01:02:25,967 --> 01:02:29,248
Let's have a big round of applause for them, too.

