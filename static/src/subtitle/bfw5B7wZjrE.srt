1
00:00:08,549 --> 00:00:09,169
Hi, welcome.

2
00:00:12,212 --> 00:00:14,774
My name is Paul Vosper, and today I'd like to talk to you

3
00:00:14,954 --> 00:00:19,518
about budgets and budget reports.

4
00:00:19,618 --> 00:00:22,861
In 1998, I went to work for a small game studio in Chicago

5
00:00:22,941 --> 00:00:25,283
that made games exclusively for the Macintosh.

6
00:00:25,904 --> 00:00:28,186
I worked on Myth 2 as an artist and animator.

7
00:00:28,826 --> 00:00:31,268
I created content within strict guidelines.

8
00:00:32,049 --> 00:00:34,171
All artwork was done on sprite plates.

9
00:00:35,006 --> 00:00:36,667
So you had a limited number of plates,

10
00:00:37,028 --> 00:00:39,130
and each plate had a limited number of images.

11
00:00:39,870 --> 00:00:41,031
We didn't have a schedule,

12
00:00:41,492 --> 00:00:43,213
and ship games only when they were done.

13
00:00:43,994 --> 00:00:46,236
At that point, I didn't know about budgets

14
00:00:46,376 --> 00:00:47,196
or budget reporting.

15
00:00:50,719 --> 00:00:51,700
The limits of what I could do

16
00:00:51,720 --> 00:00:53,322
were strictly guided by an engineer.

17
00:00:53,902 --> 00:00:54,903
The size of our maps,

18
00:00:55,323 --> 00:00:57,125
as well as the size and number of the sprites,

19
00:00:57,325 --> 00:00:58,886
were well understood limitations.

20
00:01:01,733 --> 00:01:03,914
Two years later, we've been bought by Microsoft

21
00:01:04,094 --> 00:01:07,135
and found ourselves shipping Halo on a strict timeline

22
00:01:07,155 --> 00:01:09,495
that had more to do with the new Xbox console

23
00:01:09,916 --> 00:01:11,336
than it did with the game's development.

24
00:01:12,056 --> 00:01:16,218
It was a new engine, our first to move away from sprites,

25
00:01:16,758 --> 00:01:19,099
to create a new IP on a new platform.

26
00:01:20,399 --> 00:01:22,019
As our certification date approached,

27
00:01:22,100 --> 00:01:23,760
we realized that we were having trouble

28
00:01:24,020 --> 00:01:26,701
fitting into the memory constraints of the Xbox console.

29
00:01:27,421 --> 00:01:30,142
We optimized code, we cleaned up content,

30
00:01:30,538 --> 00:01:32,900
and we rebuilt the Warthog 37 times.

31
00:01:33,781 --> 00:01:35,582
We did all the logical optimizations

32
00:01:35,642 --> 00:01:38,544
we could think of without sacrificing quality,

33
00:01:38,744 --> 00:01:39,945
but nothing was really working.

34
00:01:42,727 --> 00:01:44,729
As time ran out, we realized that we needed

35
00:01:44,749 --> 00:01:45,990
to take drastic measures.

36
00:01:47,090 --> 00:01:50,293
So we cut the resolution of every texture

37
00:01:50,353 --> 00:01:51,614
in the environment by half.

38
00:01:52,934 --> 00:01:54,896
At this point, it wasn't really a choice.

39
00:01:55,376 --> 00:01:56,997
It wasn't even discussed with the artists.

40
00:01:57,738 --> 00:02:00,200
We kicked off another build and checked the memory usage.

41
00:02:01,282 --> 00:02:04,342
We were still not in budget, so we did the only thing we could.

42
00:02:04,982 --> 00:02:07,523
We cut the resolution of the textures in half again.

43
00:02:09,363 --> 00:02:12,064
What we shipped was only a shadow of what we had intended,

44
00:02:12,684 --> 00:02:15,144
and certainly not what all the artists had been looking at

45
00:02:15,224 --> 00:02:17,385
day in and day out in the weeks before ship.

46
00:02:19,225 --> 00:02:20,826
Most artists never saw the changes

47
00:02:20,906 --> 00:02:22,706
until they were playing the final release build.

48
00:02:26,367 --> 00:02:27,167
In 2004, we released Halo 2.

49
00:02:28,741 --> 00:02:30,362
We continue to work in the Halo engine,

50
00:02:30,783 --> 00:02:33,004
improving the physics, graphics, and gameplay,

51
00:02:33,545 --> 00:02:35,926
but also starting to include budget reporting

52
00:02:36,027 --> 00:02:36,787
in our tool set.

53
00:02:37,868 --> 00:02:40,870
Content creators became more of a part of the budget process

54
00:02:41,711 --> 00:02:44,012
and began to influence the creation of better tools.

55
00:02:46,154 --> 00:02:48,696
In 2007, we transitioned the engine

56
00:02:48,736 --> 00:02:51,278
to the Xbox 360 console with Halo 3.

57
00:02:52,098 --> 00:02:54,800
We continue to refine the game and the gameplay,

58
00:02:55,781 --> 00:02:57,022
but also honing the tools.

59
00:02:57,890 --> 00:02:59,531
Budget reporting improved as well,

60
00:02:59,991 --> 00:03:01,673
becoming a fully featured system.

61
00:03:02,553 --> 00:03:04,195
We shipped ODST and Reach

62
00:03:04,355 --> 00:03:06,477
as we became an independent studio again

63
00:03:06,937 --> 00:03:08,518
and started on our next big project.

64
00:03:12,521 --> 00:03:14,543
In 2014, we released Destiny,

65
00:03:15,083 --> 00:03:18,546
a brand new engine, but also two new platforms.

66
00:03:19,167 --> 00:03:20,928
While there were significant challenges

67
00:03:21,388 --> 00:03:23,630
and plenty of unpleasant choices to be made,

68
00:03:24,391 --> 00:03:25,932
none of them were a real crisis.

69
00:03:26,608 --> 00:03:29,770
And none had a negative impact on the quality of the final game.

70
00:03:30,951 --> 00:03:35,695
We established realistic budgets in the early stages of pre-production, and continually

71
00:03:35,855 --> 00:03:39,138
updated them as the project evolved into the game that you see today.

72
00:03:40,879 --> 00:03:46,304
Before content memory peaked, we had reporting tools in place, and had already been working

73
00:03:46,344 --> 00:03:50,086
with content creators on how to best use them to optimize content.

74
00:03:51,222 --> 00:03:53,204
This is an insanely complex problem.

75
00:03:53,924 --> 00:03:57,768
Destiny is a shared world experience with multiple activity lines

76
00:03:58,148 --> 00:04:01,050
that can overlap in different ways at different points in the game.

77
00:04:02,431 --> 00:04:05,274
These new game elements were a real challenge

78
00:04:06,855 --> 00:04:08,296
to track and keep in budget.

79
00:04:08,917 --> 00:04:11,319
But our reporting system started strongly

80
00:04:11,819 --> 00:04:14,221
and has evolved through the entire development of the game.

81
00:04:18,020 --> 00:04:22,543
For Destiny, I became more involved with budgets and budget reporting than I ever had before.

82
00:04:23,603 --> 00:04:28,166
I found that I really liked it because it provided a fascinating look deep into the

83
00:04:28,226 --> 00:04:31,809
game engine, as well as how the game comes together as a project.

84
00:04:32,789 --> 00:04:37,092
My role was classic TA territory of analysis and evangelism.

85
00:04:37,813 --> 00:04:43,076
I fought fires, I dug through reports, I had endless conversations with both content creators

86
00:04:43,116 --> 00:04:43,776
and engineers.

87
00:04:45,215 --> 00:04:48,517
About their intentions, I evangelized best practices

88
00:04:48,837 --> 00:04:50,619
and functioned as a human UI

89
00:04:50,719 --> 00:04:52,840
for our in-development budget reporting system.

90
00:04:54,301 --> 00:04:56,523
More than anything, I had to understand our system

91
00:04:56,883 --> 00:04:58,785
and explain it to others again and again.

92
00:05:00,566 --> 00:05:01,707
I made plenty of mistakes

93
00:05:02,087 --> 00:05:03,408
and had to continually challenge

94
00:05:03,448 --> 00:05:05,250
what I thought I knew about the system.

95
00:05:08,492 --> 00:05:09,813
Understanding any system

96
00:05:09,853 --> 00:05:11,494
means learning it from the inside out.

97
00:05:12,075 --> 00:05:13,696
I still spend a lot of time in Excel.

98
00:05:14,483 --> 00:05:17,606
pouring over data to learn as much as possible

99
00:05:17,646 --> 00:05:18,987
about our system and how it works.

100
00:05:19,887 --> 00:05:22,269
But no matter how well I know the system,

101
00:05:22,789 --> 00:05:24,710
new problems are constantly appearing

102
00:05:24,751 --> 00:05:27,012
that require careful analysis to understand

103
00:05:29,494 --> 00:05:31,015
why assets cost what they do,

104
00:05:31,415 --> 00:05:33,416
where they come from, or why they change.

105
00:05:34,602 --> 00:05:37,983
TAs certainly need to understand the system from the DCC perspective,

106
00:05:38,463 --> 00:05:42,345
so you understand where the data goes once you leave Photoshop or Maya,

107
00:05:42,805 --> 00:05:45,746
but you also need to look at it from the engine's perspective as well.

108
00:05:48,267 --> 00:05:52,568
These are the hard and often unpleasant facts about budgets in the bottom line.

109
00:05:56,680 --> 00:05:59,782
Any modern game engine contains many complex systems

110
00:05:59,822 --> 00:06:01,003
that all have to work together.

111
00:06:01,624 --> 00:06:03,525
These systems are written by different people

112
00:06:03,785 --> 00:06:04,626
at different times,

113
00:06:05,426 --> 00:06:07,848
each following their own motivations and constraints.

114
00:06:08,889 --> 00:06:11,290
I try to make sense of them to paint a larger picture

115
00:06:11,350 --> 00:06:12,571
that can be presented to others.

116
00:06:13,672 --> 00:06:14,973
What you're seeing up on the screen

117
00:06:15,033 --> 00:06:17,875
is a conceptual overview of Destiny's content system,

118
00:06:18,475 --> 00:06:20,676
from DCC's source on the outer ring

119
00:06:21,277 --> 00:06:23,118
to the runtime game engine at the center.

120
00:06:24,062 --> 00:06:25,923
I've drawn it many times at meetings,

121
00:06:26,323 --> 00:06:27,884
and this whiteboard became a slide

122
00:06:27,904 --> 00:06:30,846
that was included in one of the lunchtime brown bag talks

123
00:06:30,946 --> 00:06:32,947
I gave about the content system in our theater.

124
00:06:36,268 --> 00:06:38,670
This puts me squarely between these two characters,

125
00:06:39,350 --> 00:06:41,251
part Oracle and part accountant.

126
00:06:42,272 --> 00:06:44,393
This is the territory that TAs thrive,

127
00:06:45,073 --> 00:06:47,434
understanding a complex pipeline and toolset,

128
00:06:47,874 --> 00:06:49,996
explaining that to artists and designers,

129
00:06:50,416 --> 00:06:53,237
chasing down bugs, helping to create better tools.

130
00:06:53,695 --> 00:06:56,497
in trying to make the whole process as painless as possible.

131
00:06:58,138 --> 00:07:02,082
What I'd like to share today is some of the lessons I have learned while working on Destiny.

132
00:07:03,183 --> 00:07:08,327
I'd like to talk about TA roles and budgets, and budget reports, and how we can help optimize

133
00:07:08,467 --> 00:07:10,149
assets and build better processes.

134
00:07:11,129 --> 00:07:16,954
But before we start, I need to explain a bit about what content means inside of the Destiny

135
00:07:17,034 --> 00:07:17,235
engine.

136
00:07:20,867 --> 00:07:23,488
In the Destiny engine, the system and world art

137
00:07:23,528 --> 00:07:26,170
get loaded first, so all of the environment

138
00:07:26,411 --> 00:07:27,591
is in and able to run.

139
00:07:28,632 --> 00:07:31,654
Next is the player, including the customizable gear

140
00:07:31,694 --> 00:07:32,195
and weapons.

141
00:07:32,715 --> 00:07:34,956
Then all of the designer-placed assets get loaded.

142
00:07:36,237 --> 00:07:39,179
Combatants, loot chests, objects, et cetera.

143
00:07:39,840 --> 00:07:41,501
You can see that most assets in the game,

144
00:07:41,861 --> 00:07:43,723
from the bottom of this pyramid to the top,

145
00:07:44,423 --> 00:07:45,964
can use animations and effects.

146
00:07:47,485 --> 00:07:50,007
So they get loaded, they get brought in at many levels.

147
00:07:51,214 --> 00:07:55,517
Assets that are higher in this pyramid can share content with assets below them, but

148
00:07:55,577 --> 00:07:56,478
not vice versa.

149
00:07:57,119 --> 00:08:02,663
So combatants can make use of world art textures, but world art can't make use of anyone else's

150
00:08:02,703 --> 00:08:03,003
data.

151
00:08:07,587 --> 00:08:12,410
Our spaces in the game are broken up into bubbles, with transitions between those bubbles.

152
00:08:13,391 --> 00:08:18,495
When we talk about a loading set, we're talking about two bubbles and all the transitions

153
00:08:18,535 --> 00:08:19,095
that touch them.

154
00:08:20,176 --> 00:08:22,418
This means that whenever you're looking at bubble B,

155
00:08:22,898 --> 00:08:26,561
you have to think about both bubble A and bubble C as well.

156
00:08:27,481 --> 00:08:29,202
This presents significant challenges

157
00:08:29,242 --> 00:08:30,643
to how spaces are laid out,

158
00:08:31,064 --> 00:08:33,666
but also in how we manage the budgets for these as well.

159
00:08:37,648 --> 00:08:39,770
In this talk, I'd like to discuss some of the forces

160
00:08:39,830 --> 00:08:42,292
that work against keeping assets on track.

161
00:08:43,092 --> 00:08:45,834
These are natural phenomenon and never really go away,

162
00:08:46,295 --> 00:08:48,056
but by understanding what they are,

163
00:08:48,554 --> 00:08:52,156
and why they happen, you can manage their effect on your project.

164
00:08:55,017 --> 00:08:57,899
As a TA, I'd like you to keep in mind four things.

165
00:08:59,279 --> 00:09:03,661
You need to understand the motivations of both content creators and engineers.

166
00:09:04,762 --> 00:09:08,704
You need to understand the cycles within your project, both big and small.

167
00:09:10,205 --> 00:09:14,147
You need to understand the technology of your tools and your engines.

168
00:09:15,489 --> 00:09:16,830
And you should never stop learning.

169
00:09:17,370 --> 00:09:19,791
And you should always share what you've learned with others.

170
00:09:24,113 --> 00:09:25,354
This might seem self-evident,

171
00:09:25,414 --> 00:09:27,515
but it's important to acknowledge right from the start.

172
00:09:28,635 --> 00:09:31,136
Content creators want to create content.

173
00:09:32,477 --> 00:09:36,219
Content creators want to create content.

174
00:09:36,859 --> 00:09:40,261
This includes artists, musicians, animators, and designers.

175
00:09:41,101 --> 00:09:43,262
We hire creative, passionate people

176
00:09:43,402 --> 00:09:45,083
who want to make capital A art.

177
00:09:46,120 --> 00:09:48,421
Their strongest motivation is to create assets,

178
00:09:48,661 --> 00:09:49,481
not to manage them.

179
00:09:50,322 --> 00:09:52,783
Creating something of wonder and beauty is a joy,

180
00:09:53,223 --> 00:09:55,824
but managing the cost for it is a pain in the ass.

181
00:09:56,864 --> 00:10:00,325
No one gets in the art books by shaving 4K off of a texture,

182
00:10:00,785 --> 00:10:03,967
or by reusing someone else's geometry to save cost.

183
00:10:05,507 --> 00:10:07,448
These are the folks that will pour their souls

184
00:10:07,508 --> 00:10:09,729
into creating magical, beautiful things,

185
00:10:10,149 --> 00:10:12,289
yet these are also the folks that will suffer the most

186
00:10:12,329 --> 00:10:14,870
from bad decisions and poorly understood data.

187
00:10:15,952 --> 00:10:19,214
While they are working on something, it is the most important thing in the world,

188
00:10:19,614 --> 00:10:23,236
but after they hand it off, it must be stacked up against all other assets

189
00:10:23,296 --> 00:10:26,617
to be scrutinized, criticized, and possibly cut.

190
00:10:28,578 --> 00:10:31,300
Content creators usually learn by bitter experience

191
00:10:31,760 --> 00:10:33,861
that there are dark forces working against them,

192
00:10:34,381 --> 00:10:37,222
but at the heart of every artist is that nagging feeling

193
00:10:37,262 --> 00:10:39,463
that they just want to create content.

194
00:10:43,566 --> 00:10:47,508
Most people think of assets as having a value that is measured in kilobytes.

195
00:10:48,369 --> 00:10:51,651
But really, the value of any asset has three distinct axes.

196
00:10:52,491 --> 00:10:55,813
It has a memory cost, it also has visual impact,

197
00:10:56,174 --> 00:10:57,835
and it has the impact on gameplay.

198
00:10:58,735 --> 00:11:01,037
This makes the value of any piece of content

199
00:11:01,437 --> 00:11:03,658
difficult to define and very hard to measure.

200
00:11:05,639 --> 00:11:07,340
The first axis is the easiest.

201
00:11:07,540 --> 00:11:09,121
Bytes are bytes after all.

202
00:11:10,842 --> 00:11:13,664
Even when sharing textures or geometry between assets,

203
00:11:13,824 --> 00:11:16,845
memory should be simple to report and easy to understand.

204
00:11:17,606 --> 00:11:20,427
This is the hard data that is the start

205
00:11:20,487 --> 00:11:21,688
of any budget discussion.

206
00:11:22,948 --> 00:11:26,730
This is the axis of value that fits into a spreadsheet.

207
00:11:27,771 --> 00:11:28,992
This is the bottom line.

208
00:11:29,532 --> 00:11:31,713
It's black and white, and it all adds up.

209
00:11:32,613 --> 00:11:34,634
But there are other important axes as well,

210
00:11:34,815 --> 00:11:36,275
and they evade easy measure.

211
00:11:39,132 --> 00:11:43,594
Visual impact is a huge part of deciding what resources you should devote to an asset.

212
00:11:44,634 --> 00:11:45,875
How large is the model?

213
00:11:46,435 --> 00:11:48,636
How big or massive is it supposed to look?

214
00:11:49,336 --> 00:11:51,257
How close will the player get to it?

215
00:11:52,937 --> 00:11:57,979
A character's face will have a different impact than a tree, and a tree along a player's path

216
00:11:58,039 --> 00:12:01,681
will have a very different impact than one at the top of a hill on a horizon.

217
00:12:03,037 --> 00:12:05,978
Size, scale, proximity, and readability

218
00:12:06,278 --> 00:12:08,138
will all affect how much resources

219
00:12:08,178 --> 00:12:09,679
you'll want to devote to that asset.

220
00:12:11,899 --> 00:12:13,640
But it's impact on gameplay

221
00:12:13,680 --> 00:12:15,601
that is actually the most critical axis,

222
00:12:16,201 --> 00:12:18,681
and is easily the most difficult to define or measure.

223
00:12:20,172 --> 00:12:23,256
What part does the asset play in engaging the player?

224
00:12:24,057 --> 00:12:26,540
What information does this asset need to convey?

225
00:12:27,321 --> 00:12:27,902
Is it fun?

226
00:12:28,462 --> 00:12:29,724
Does it advance the story?

227
00:12:30,525 --> 00:12:34,329
Does it help establish goals or explain problems to the player?

228
00:12:35,815 --> 00:12:40,537
The radar array you see in the horizon in the upper left of this screenshot

229
00:12:41,177 --> 00:12:43,358
is one of the most important assets in the scene.

230
00:12:44,159 --> 00:12:48,200
It's an important landmark that serves as a destination for several missions.

231
00:12:48,880 --> 00:12:50,561
So it's both guidepost and goal.

232
00:12:51,261 --> 00:12:54,422
It has a unique silhouette that can be read from anywhere in the space.

233
00:12:55,203 --> 00:12:59,184
Its visual impact is small, but its gameplay impact is enormous.

234
00:13:01,965 --> 00:13:05,187
All of the things we just discussed, memory, visual impact,

235
00:13:05,632 --> 00:13:09,275
impact on gameplay are going to change over the course of the project.

236
00:13:10,455 --> 00:13:13,757
This means that the value for any piece of content will change as well.

237
00:13:15,038 --> 00:13:17,580
When you start a project, everything has equal value.

238
00:13:18,620 --> 00:13:21,282
Anything is possible, and you have far more good ideas

239
00:13:21,342 --> 00:13:23,083
than you'll ever have resources to finish.

240
00:13:24,284 --> 00:13:28,567
As the project matures, some assets rise in prominence while others sink.

241
00:13:29,747 --> 00:13:30,768
A minor character is...

242
00:13:32,197 --> 00:13:34,977
Discovered to be unique and compelling, so becomes a star.

243
00:13:35,817 --> 00:13:37,818
A major character flops and is cut.

244
00:13:38,778 --> 00:13:42,819
That hard-edged steampunk theme everybody so admired at the outset

245
00:13:43,299 --> 00:13:47,700
is discarded in favor of ethereal futuristic sci-fi holograms.

246
00:13:48,940 --> 00:13:53,201
The story you set out to tell is never the story you wind up telling,

247
00:13:53,781 --> 00:13:57,502
which means the assets you use to tell it are going to change in value.

248
00:14:00,967 --> 00:14:03,608
The rate that groups add content to the game

249
00:14:03,668 --> 00:14:04,808
will change over time,

250
00:14:05,568 --> 00:14:08,369
and the rate of change will vary from group to group.

251
00:14:09,970 --> 00:14:11,811
Environments must be masked out in engine

252
00:14:11,871 --> 00:14:13,151
before other work can happen.

253
00:14:13,931 --> 00:14:16,292
World artists are working on palettes

254
00:14:16,332 --> 00:14:17,733
and explorations as well,

255
00:14:18,053 --> 00:14:20,554
but they must build the physical mass of the game world

256
00:14:20,594 --> 00:14:22,155
before anyone else can play in it.

257
00:14:24,996 --> 00:14:27,436
World art will be first in and first out.

258
00:14:28,985 --> 00:14:32,248
Sandbox, that is characters, vehicles, and weapons,

259
00:14:32,708 --> 00:14:35,750
follow closely behind and deliver one of each

260
00:14:37,452 --> 00:14:38,993
of their assets.

261
00:14:40,174 --> 00:14:42,695
Design starts on paper, and only towards the end

262
00:14:42,775 --> 00:14:44,597
can they make full use of the assets

263
00:14:44,637 --> 00:14:46,638
that World Art and Sandbox have created.

264
00:14:47,479 --> 00:14:50,581
They are adding assets to the game all along,

265
00:14:50,981 --> 00:14:52,923
but the rate they are adding assets

266
00:14:53,103 --> 00:14:55,405
peaks only at the very end of the project.

267
00:14:56,475 --> 00:15:03,017
So it's not until design does their work that you see the quantity of content increase to its full extent.

268
00:15:04,198 --> 00:15:09,520
A character artist builds a single character, but it's the designer who puts 50 of them in a scene.

269
00:15:12,641 --> 00:15:15,402
Each asset has its own cycle of cost growth as well.

270
00:15:16,579 --> 00:15:20,122
A door starts off as a gray box, then becomes a wood door,

271
00:15:20,582 --> 00:15:22,503
then becomes a wood door with iron hinges,

272
00:15:23,044 --> 00:15:27,447
and then a complex locking mechanism gets added to complement gameplay.

273
00:15:28,307 --> 00:15:31,990
This means that the memory cost of the added content will change over time.

274
00:15:33,031 --> 00:15:35,332
Combined with the rate of content gets added,

275
00:15:35,873 --> 00:15:40,096
this creates a constantly rising slope whose summit can be hard to predict.

276
00:15:43,884 --> 00:15:48,028
The resources required to remove assets are going to change over time as well.

277
00:15:49,149 --> 00:15:53,133
Every asset will have dependencies which have a huge effect on its creation,

278
00:15:53,753 --> 00:15:56,316
as well as any editing or removal later on.

279
00:15:57,437 --> 00:15:59,979
You can't animate a character that hasn't been rigged,

280
00:16:00,500 --> 00:16:05,665
and changing the rig on a character that has already been animated can have a staggering cost.

281
00:16:06,989 --> 00:16:11,934
What might be an easy change early on can soon have a huge downstream cost that require

282
00:16:12,054 --> 00:16:13,976
extraordinary resources to resolve.

283
00:16:15,037 --> 00:16:19,962
This can lead to having to make pragmatic decisions about cutting assets, not because

284
00:16:20,002 --> 00:16:26,128
it makes sense for aesthetic or gameplay reasons, but because the pragmatic action is your only

285
00:16:26,289 --> 00:16:28,010
option based on available resources.

286
00:16:31,542 --> 00:16:34,304
It's easy to measure how much content is actually loaded,

287
00:16:34,865 --> 00:16:38,027
but what's loaded and why is much more interesting.

288
00:16:38,928 --> 00:16:41,951
For games, balancing the what's loaded equation

289
00:16:42,111 --> 00:16:43,532
is actually much more important

290
00:16:44,332 --> 00:16:46,634
than the inevitable bottom line.

291
00:16:47,615 --> 00:16:49,537
Balancing within a single asset

292
00:16:49,617 --> 00:16:51,218
is an understandable exercise,

293
00:16:51,618 --> 00:16:53,780
as you can easily see how all the parts work

294
00:16:53,860 --> 00:16:54,781
within a single unit.

295
00:16:55,741 --> 00:16:57,963
Comparing the size of one texture against another

296
00:16:58,023 --> 00:16:59,605
is easy to see and balance.

297
00:17:00,615 --> 00:17:03,818
But what happens when you have to balance one asset against another,

298
00:17:04,438 --> 00:17:05,559
or against many others?

299
00:17:06,640 --> 00:17:08,402
Given a huge stack of assets,

300
00:17:08,562 --> 00:17:11,805
how do you evaluate why one should cost more than the other?

301
00:17:12,865 --> 00:17:14,006
Or which one should be cut?

302
00:17:15,248 --> 00:17:18,230
What happens when a cool new monster that design wants to add

303
00:17:18,590 --> 00:17:21,513
means that world art has to compromise on the visibility

304
00:17:21,993 --> 00:17:24,035
and playable area in a level?

305
00:17:27,463 --> 00:17:30,064
For Destiny, the disciplines that had the most control

306
00:17:30,144 --> 00:17:32,565
over their assets were also the most successful

307
00:17:32,625 --> 00:17:33,605
at keeping them in budget.

308
00:17:34,706 --> 00:17:36,667
I want to share two very different stories.

309
00:17:38,808 --> 00:17:41,329
The first is world art, and the second is effects.

310
00:17:42,189 --> 00:17:44,810
You can see world art up here at the base

311
00:17:44,850 --> 00:17:46,771
of the content pyramid with effects

312
00:17:46,971 --> 00:17:48,112
off on the right-hand side.

313
00:17:49,812 --> 00:17:52,734
World art did a fantastic job on engaging with

314
00:17:52,894 --> 00:17:54,955
and owning their budget process.

315
00:17:55,715 --> 00:17:58,797
They controlled the balance for all of their own assets.

316
00:17:59,278 --> 00:18:01,259
So even though they were working with a complex

317
00:18:01,299 --> 00:18:02,700
and hard to understand system,

318
00:18:03,121 --> 00:18:04,862
they were able to get everything in budget

319
00:18:05,162 --> 00:18:07,444
and even handle outside requests for change.

320
00:18:08,905 --> 00:18:12,268
Every action they took reflected on their own bottom line.

321
00:18:12,908 --> 00:18:15,330
So they were quickly able to see cause and effect

322
00:18:15,771 --> 00:18:17,172
and mastered their own domain.

323
00:18:19,033 --> 00:18:20,374
Effects had a much harder time.

324
00:18:21,075 --> 00:18:23,777
They delivered assets that are used by other groups.

325
00:18:24,651 --> 00:18:27,092
often beyond the scope of their original intentions.

326
00:18:28,192 --> 00:18:30,113
So effects would be in budget on Monday,

327
00:18:30,393 --> 00:18:31,854
but over budget on Tuesday,

328
00:18:32,234 --> 00:18:33,875
without them having changed anything.

329
00:18:35,755 --> 00:18:37,696
They had a hard time seeing the causes

330
00:18:37,816 --> 00:18:40,757
for the changes in their data usages.

331
00:18:41,578 --> 00:18:44,539
They still did an awesome job in optimizing their content

332
00:18:44,659 --> 00:18:46,339
while delivering world-class effects,

333
00:18:46,760 --> 00:18:48,020
but we never found a simple,

334
00:18:48,200 --> 00:18:50,021
understandable way to balance their budget.

335
00:18:52,361 --> 00:18:54,882
But it was design that had the hardest time of any discipline.

336
00:18:55,942 --> 00:18:58,503
Not only were they at the apex of a complex system,

337
00:18:58,963 --> 00:19:01,645
but design itself is made up of many subgroups,

338
00:19:01,965 --> 00:19:03,765
each with their own goals and motivations.

339
00:19:04,966 --> 00:19:06,446
Each of these groups affects the other,

340
00:19:06,606 --> 00:19:08,267
and yet they all share the same budget.

341
00:19:09,428 --> 00:19:11,528
Communication and negotiation is difficult,

342
00:19:11,969 --> 00:19:13,809
as each of the groups is only putting forward

343
00:19:14,029 --> 00:19:15,630
the best efforts for their area,

344
00:19:16,130 --> 00:19:18,491
and the ones that they feel most passionately about.

345
00:19:20,211 --> 00:19:23,152
Finding a balance here is a problem that transcends design

346
00:19:23,592 --> 00:19:25,212
and becomes a project-level problem.

347
00:19:28,633 --> 00:19:30,093
In many artistic disciplines,

348
00:19:30,153 --> 00:19:32,054
the rules for proportion and design

349
00:19:32,094 --> 00:19:34,594
have been well understood and documented for centuries.

350
00:19:35,434 --> 00:19:37,295
This is simply not true for games.

351
00:19:37,935 --> 00:19:40,916
There is no formula for a fun and rewarding experience.

352
00:19:41,816 --> 00:19:43,116
During the production of a game,

353
00:19:43,156 --> 00:19:44,556
you'll often hear people say,

354
00:19:45,097 --> 00:19:47,357
this is gonna be cool, or this is gonna be fun.

355
00:19:48,487 --> 00:19:50,108
But you won't know if that's really true

356
00:19:50,348 --> 00:19:52,769
until it's in-game and in the hands of players.

357
00:19:54,130 --> 00:19:56,672
Bungie uses a playtest-driven development process,

358
00:19:57,312 --> 00:19:59,253
which means that we try out a lot of ideas

359
00:19:59,313 --> 00:20:01,194
by playing them over and over again.

360
00:20:02,455 --> 00:20:03,895
Many ideas will get tossed out

361
00:20:04,336 --> 00:20:06,557
or get changed until they are unrecognizable.

362
00:20:07,737 --> 00:20:08,938
This is great for the game,

363
00:20:09,298 --> 00:20:10,919
but it means that you are trying to balance

364
00:20:10,999 --> 00:20:12,640
not only the assets themselves,

365
00:20:13,080 --> 00:20:15,501
but also their intention and execution

366
00:20:15,922 --> 00:20:17,983
against the actual player experience.

367
00:20:19,217 --> 00:20:20,717
There is no formula to follow.

368
00:20:21,197 --> 00:20:24,198
It's a heated discussion that will go on all during production

369
00:20:24,798 --> 00:20:26,279
and even after you ship the game.

370
00:20:30,420 --> 00:20:33,181
Engineers can't create effective budget tools

371
00:20:33,641 --> 00:20:36,542
if content creators can't or aren't willing to use them.

372
00:20:37,482 --> 00:20:40,143
The tools have to be built to enable content creators

373
00:20:40,203 --> 00:20:41,644
to balance the content budgets,

374
00:20:42,184 --> 00:20:43,945
but if they never really use the tools,

375
00:20:44,225 --> 00:20:45,765
then no one notices the problems

376
00:20:46,285 --> 00:20:48,166
or thinks about the ways they might be improved.

377
00:20:49,291 --> 00:20:52,574
This stalemate leads to an accumulation of bugs

378
00:20:52,774 --> 00:20:54,835
that don't get fixed or improvements

379
00:20:55,035 --> 00:20:55,976
that never get implemented.

380
00:20:57,137 --> 00:20:59,659
After we shipped Destiny, we asked content creators

381
00:20:59,699 --> 00:21:02,341
to list out what they thought were the 10 most important

382
00:21:02,982 --> 00:21:04,783
tools, excuse me,

383
00:21:07,565 --> 00:21:09,647
we asked the content creators to list out what they thought

384
00:21:09,687 --> 00:21:11,869
were the 10 most important tools and improvements

385
00:21:11,909 --> 00:21:13,330
the engineers could work on next.

386
00:21:14,871 --> 00:21:16,272
More than a dozen groups took part.

387
00:21:16,598 --> 00:21:19,859
But not one discipline listed budget reports in their requests.

388
00:21:20,919 --> 00:21:23,840
As you might guess, content creators don't ever include

389
00:21:24,000 --> 00:21:26,801
building better budget reports anywhere in their job description.

390
00:21:29,202 --> 00:21:30,302
So think about this cycle.

391
00:21:31,543 --> 00:21:33,743
World Art has measurable assets first,

392
00:21:34,144 --> 00:21:36,284
so they start using the budget tools earlier

393
00:21:36,764 --> 00:21:38,725
and make requests for changes and improvements

394
00:21:38,765 --> 00:21:41,126
while the project is still early in the production cycle.

395
00:21:42,917 --> 00:21:44,957
But design doesn't have any measurable assets

396
00:21:44,997 --> 00:21:46,158
until late in the project.

397
00:21:46,858 --> 00:21:49,239
But by then, tool support is scarce

398
00:21:49,419 --> 00:21:51,240
and everyone's against hard deadlines.

399
00:21:52,520 --> 00:21:55,822
By the time a new tool or improvement might be finished,

400
00:21:56,182 --> 00:21:57,542
the project will have already shipped.

401
00:21:58,283 --> 00:22:00,624
So the task gets pushed off until the next project.

402
00:22:01,884 --> 00:22:04,665
So it's no surprise that tech debt piles up faster

403
00:22:04,725 --> 00:22:06,426
for the disciplines that finish later.

404
00:22:07,861 --> 00:22:11,643
This accumulation of technical debt creates a problem that is difficult to overcome.

405
00:22:12,384 --> 00:22:15,786
It's often a vicious cycle that repeats itself from project to project.

406
00:22:19,028 --> 00:22:22,751
There's an unspoken pact between content creators and engineers.

407
00:22:23,531 --> 00:22:28,094
Content creators must trust the engineers, and the engineers must trust the content creators.

408
00:22:29,675 --> 00:22:33,678
Engineers are delivering a game engine and the tools to create and analyze content.

409
00:22:34,470 --> 00:22:37,351
They define what the game can and cannot do,

410
00:22:37,751 --> 00:22:39,171
including many of the constraints

411
00:22:39,191 --> 00:22:40,492
that will face content creators.

412
00:22:41,772 --> 00:22:44,954
They require that content creators be knowledgeable about

413
00:22:45,414 --> 00:22:47,354
and monitor their own content.

414
00:22:49,015 --> 00:22:50,576
Content creators are delivering content,

415
00:22:51,156 --> 00:22:53,977
textures and geometry arranged in engaging and entertaining

416
00:22:54,017 --> 00:22:54,317
ways.

417
00:22:55,077 --> 00:22:57,658
They define the look and feel of the game

418
00:22:58,218 --> 00:23:00,159
and look to engineering to facilitate that.

419
00:23:01,200 --> 00:23:03,380
They require that engineers are knowledgeable

420
00:23:03,420 --> 00:23:04,941
and forthcoming about their systems

421
00:23:05,181 --> 00:23:06,641
and how it affects that content.

422
00:23:07,782 --> 00:23:10,162
In a perfect world, this is a wonderful symbiosis,

423
00:23:10,803 --> 00:23:12,803
but that is rarely what happens in games development.

424
00:23:13,563 --> 00:23:15,764
As systems and the fabric of the game itself

425
00:23:15,864 --> 00:23:18,885
change rapidly, trust is a fragile thing

426
00:23:18,925 --> 00:23:20,925
that must be constantly refreshed and renewed.

427
00:23:22,186 --> 00:23:23,786
Trust is something that is hard to create

428
00:23:24,146 --> 00:23:24,967
and easy to break.

429
00:23:25,867 --> 00:23:28,048
It's all too easy for trust to erode

430
00:23:28,468 --> 00:23:30,908
and for all sides to retreat into their own corners.

431
00:23:34,241 --> 00:23:36,722
And no matter how much foresight and planning you have,

432
00:23:36,983 --> 00:23:38,744
you are inevitably going to stumble upon

433
00:23:38,784 --> 00:23:42,126
a poorly understood or completely overlooked constraint

434
00:23:42,306 --> 00:23:43,927
that affect the project's development

435
00:23:44,527 --> 00:23:46,208
and the goodwill of everyone involved.

436
00:23:47,549 --> 00:23:50,391
All of the ground rules for asset allocation and destiny

437
00:23:50,431 --> 00:23:52,232
were laid down in 2009,

438
00:23:52,932 --> 00:23:55,054
five years before the game actually shipped.

439
00:23:57,055 --> 00:23:59,796
While this initial set of rules held amazingly true,

440
00:24:00,542 --> 00:24:06,126
Adjustments had to be made as the game itself grew and changed, and there were things that simply broke.

441
00:24:08,368 --> 00:24:14,072
We always imagined that content creators would only have to deal with the horizontal axis on this budget chart.

442
00:24:14,833 --> 00:24:21,178
That is, they would never need to know the distinction between assets used by the GPU and assets used by the CPU.

443
00:24:22,579 --> 00:24:28,724
Towards the end of Destiny, we started seeing problems with tags memory on V1 consoles, the Xbox 360 and the PS3.

444
00:24:31,548 --> 00:24:33,250
This was a constraint that the content creators

445
00:24:33,290 --> 00:24:35,392
had never been made aware of.

446
00:24:36,253 --> 00:24:37,774
And this is where I learned the definition

447
00:24:37,814 --> 00:24:39,896
of the term non-fungible.

448
00:24:42,198 --> 00:24:44,019
Because memory is non-fungible,

449
00:24:44,480 --> 00:24:46,962
which means that you can't use CPU memory

450
00:24:47,042 --> 00:24:49,124
for the GPU and vice versa.

451
00:24:50,225 --> 00:24:53,087
The GPU will pay a penalty if it tries to pull data

452
00:24:53,408 --> 00:24:55,510
from memory that is set up for the CPU.

453
00:24:56,210 --> 00:24:59,073
And the CPU will pay a penalty if it tries to pull data

454
00:24:59,733 --> 00:25:01,753
from memory that is set up for the GPU.

455
00:25:03,113 --> 00:25:05,434
So the memory that you use for textures and geometry

456
00:25:05,494 --> 00:25:07,734
has to be defined separately

457
00:25:08,234 --> 00:25:10,375
from the memory you use for the remainder,

458
00:25:10,935 --> 00:25:13,876
and you can't move the line between them after it's set.

459
00:25:14,836 --> 00:25:16,496
That's what non-fungible means.

460
00:25:17,776 --> 00:25:21,537
For last generation consoles, PS3 and Xbox 360,

461
00:25:22,557 --> 00:25:24,178
this is about a 60-40 split,

462
00:25:24,758 --> 00:25:26,758
where 60% of the memory is used for graphics

463
00:25:26,818 --> 00:25:27,558
and 40% for the remainder.

464
00:25:29,177 --> 00:25:32,178
For a current gen, the PS4 and the Xbox One,

465
00:25:33,119 --> 00:25:36,841
this is about 80-20, with tags being much less of an issue

466
00:25:36,921 --> 00:25:38,762
and leaving lots more room for graphics.

467
00:25:40,963 --> 00:25:44,065
So we ran out of memory for assets being sent to the CPU

468
00:25:44,585 --> 00:25:45,946
and couldn't borrow any memory

469
00:25:45,986 --> 00:25:47,507
that had been slated for the GPU.

470
00:25:48,727 --> 00:25:50,388
We wound up having to cut assets

471
00:25:50,689 --> 00:25:53,450
not because of the graphics or their overall cost,

472
00:25:54,090 --> 00:25:56,872
but simply because of the cost of the CPU-bound data.

473
00:25:58,188 --> 00:26:00,688
We didn't find this until towards the end of the project,

474
00:26:01,148 --> 00:26:03,269
and although the changes were thankfully small,

475
00:26:03,669 --> 00:26:05,589
the concessions were very painful to make.

476
00:26:05,609 --> 00:26:11,771
And no matter how big or small your project is,

477
00:26:12,311 --> 00:26:15,191
you have finite resources to make your game.

478
00:26:16,652 --> 00:26:18,232
So the game of project development

479
00:26:18,272 --> 00:26:20,013
becomes how you can manage resources

480
00:26:20,053 --> 00:26:21,553
in the most efficient way possible,

481
00:26:21,993 --> 00:26:23,853
so you can best deliver on your intentions.

482
00:26:25,694 --> 00:26:27,134
This means you have to manage people,

483
00:26:27,604 --> 00:26:31,685
You have to manage time, and you have to manage assets and their cost.

484
00:26:32,765 --> 00:26:37,046
There is nothing more frustrating than delivering an asset or experience only to find out that

485
00:26:37,086 --> 00:26:41,847
it simply doesn't fit and must be either reduced in cost or cut entirely.

486
00:26:43,208 --> 00:26:47,108
Ultimately, the game of making games is one of resource management.

487
00:26:54,095 --> 00:26:57,898
It's important to keep in mind that you are fighting forces that are constantly mutating

488
00:26:58,298 --> 00:26:59,279
and are indestructible.

489
00:27:00,800 --> 00:27:05,404
Yet they are as much a part of making games as the gameplay or the assets themselves.

490
00:27:06,384 --> 00:27:11,168
As a TA, you'll need to learn as much as possible about what drives the technology, as well

491
00:27:11,208 --> 00:27:15,131
as what drives the people that write the code and the people that are making the content.

492
00:27:16,612 --> 00:27:21,716
You'll need to help educate both content creators and engineers about what has happened on the

493
00:27:21,756 --> 00:27:23,518
project and what's going to happen next.

494
00:27:24,939 --> 00:27:28,523
You'll need to answer questions, many of which you will not have the answer to.

495
00:27:29,964 --> 00:27:35,249
You'll need to evangelize best practices and often remind people of what they should be

496
00:27:35,289 --> 00:27:38,572
doing and what part they should play in making a better game.

497
00:27:50,970 --> 00:27:52,691
While the dark arts will never be tamed,

498
00:27:53,251 --> 00:27:55,273
there are tools and processes that will help you

499
00:27:55,333 --> 00:27:57,574
understand them by better tracking their behavior.

500
00:27:59,215 --> 00:28:01,296
While we are talking about tools and processes,

501
00:28:01,717 --> 00:28:03,098
there are four things to keep in mind.

502
00:28:04,839 --> 00:28:06,200
To understand any problem,

503
00:28:06,580 --> 00:28:07,981
you'll need to understand the data.

504
00:28:09,322 --> 00:28:11,523
But, raw data is not enough.

505
00:28:12,404 --> 00:28:14,605
Any decision is going to require context.

506
00:28:16,166 --> 00:28:17,927
Different disciplines need different ways

507
00:28:18,007 --> 00:28:18,928
of looking at the data.

508
00:28:20,734 --> 00:28:22,195
And always learn from your mistakes.

509
00:28:22,835 --> 00:28:24,295
And tell others what you have learned.

510
00:28:28,257 --> 00:28:29,297
When you load your game,

511
00:28:29,737 --> 00:28:32,358
the engine has to assemble a staggering amount of data

512
00:28:32,498 --> 00:28:35,259
into a comprehensible experience of sight and sound.

513
00:28:36,039 --> 00:28:38,200
But that same data has to be visualized

514
00:28:38,700 --> 00:28:39,821
in other ways as well.

515
00:28:41,421 --> 00:28:43,522
So that it can be managed according to platform

516
00:28:43,602 --> 00:28:44,703
and project restrictions.

517
00:28:45,603 --> 00:28:48,544
Budget reports are what allow you to make sense of that data.

518
00:28:49,675 --> 00:28:52,916
to dive in and organize it by location, by discipline,

519
00:28:53,416 --> 00:28:54,977
by type, and by asset.

520
00:28:56,657 --> 00:28:58,758
Understanding the data allows you to understand

521
00:28:58,938 --> 00:29:00,939
if you have a problem, and if you do,

522
00:29:01,499 --> 00:29:04,140
where that problem is, and how best to solve it.

523
00:29:05,601 --> 00:29:06,761
When talking about budgets,

524
00:29:06,962 --> 00:29:08,962
you'll need to view data in its raw form,

525
00:29:09,883 --> 00:29:12,204
not just from the view of the DCC apps,

526
00:29:12,304 --> 00:29:13,484
like Photoshop or Maya,

527
00:29:14,044 --> 00:29:16,425
but in the way the game engine itself sees the data.

528
00:29:19,892 --> 00:29:24,075
Going back to this slide a minute, you'll see that the content creators spend most of

529
00:29:24,115 --> 00:29:25,797
their time working in the outer ring.

530
00:29:26,618 --> 00:29:32,603
That is, the DCC apps like Max, Maya, and Photoshop, or in Grognok, our world editor.

531
00:29:34,385 --> 00:29:38,048
Think of the outer ring as the intentions of the content creators.

532
00:29:39,169 --> 00:29:43,513
But it's only at the center that you find the real truth that is inside the runtime

533
00:29:43,613 --> 00:29:43,833
engine.

534
00:29:45,484 --> 00:29:47,985
Remember that no matter what you thought was going to happen

535
00:29:48,385 --> 00:29:50,166
as you were authoring content in Maya,

536
00:29:51,207 --> 00:29:53,849
once the game ships, the only thing that really matters

537
00:29:53,929 --> 00:29:55,170
is what's happening at runtime.

538
00:29:56,491 --> 00:29:58,832
This is a huge distinction for content creators

539
00:29:59,152 --> 00:30:00,933
who spend the vast majority of their time

540
00:30:01,354 --> 00:30:02,935
in the outer ring of intentions.

541
00:30:11,971 --> 00:30:17,554
To look at this data, we have tools for analyzing budget costs from DCC apps through to runtime,

542
00:30:18,034 --> 00:30:19,674
as well as many steps along the way.

543
00:30:20,795 --> 00:30:26,177
These tools range from carefully crafted user experiences to gritty dumps of raw data.

544
00:30:27,378 --> 00:30:32,260
In this diagram, you'll see the intentions of the content creators on the left, with

545
00:30:32,280 --> 00:30:33,661
the runtime reality on the right.

546
00:30:37,304 --> 00:30:39,125
In this ecosystem for understanding data,

547
00:30:39,145 --> 00:30:40,907
you're going to notice some distinct areas.

548
00:30:41,627 --> 00:30:43,749
On the left, we have preventative tools,

549
00:30:44,250 --> 00:30:46,271
which guide the creation of better content

550
00:30:46,372 --> 00:30:48,073
before it ever gets into the game engine.

551
00:30:49,274 --> 00:30:51,316
On the right, we have forensic tools

552
00:30:51,636 --> 00:30:54,078
for measuring the data the engine actually sees.

553
00:30:57,361 --> 00:31:00,264
For any content creator, understanding data can be hard.

554
00:31:01,685 --> 00:31:03,867
But when building models.

555
00:31:04,232 --> 00:31:07,253
The geometry data reported inside Max and Maya

556
00:31:07,593 --> 00:31:08,894
is actually misleading,

557
00:31:09,494 --> 00:31:12,116
and so artists might believe there's something wrong with the system.

558
00:31:13,836 --> 00:31:17,318
How a DCC app perceives vert count is vastly different

559
00:31:17,338 --> 00:31:19,239
than how a real-time game engine does.

560
00:31:20,320 --> 00:31:24,422
UV islands, smoothing groups, shaders, vertex colors,

561
00:31:24,702 --> 00:31:26,803
skin weighting, and even game markup

562
00:31:27,063 --> 00:31:29,484
can lead to doubling of verts in a rendering—

563
00:31:30,065 --> 00:31:31,385
real-time rendering pipeline,

564
00:31:31,826 --> 00:31:33,666
which adds to the cost of geometry.

565
00:31:34,901 --> 00:31:37,041
This can be confusing for content creators

566
00:31:37,441 --> 00:31:38,762
who are looking at the vert count,

567
00:31:38,882 --> 00:31:40,422
as reported by the DCC app,

568
00:31:40,822 --> 00:31:42,582
and assuming that's what the count should be.

569
00:31:44,663 --> 00:31:46,243
Remember that this is the outer ring,

570
00:31:47,603 --> 00:31:48,803
the artist's intentions,

571
00:31:49,143 --> 00:31:50,664
and not the runtime reality.

572
00:31:51,624 --> 00:31:54,084
So we maintain vertex estimation tools

573
00:31:54,144 --> 00:31:55,325
in both Max and Maya,

574
00:31:56,005 --> 00:31:57,325
while still in approximation,

575
00:31:58,265 --> 00:32:00,385
and it's close enough to the final in-engine results

576
00:32:00,485 --> 00:32:02,386
to eliminate the need for the round trip

577
00:32:02,426 --> 00:32:03,226
through the importer.

578
00:32:03,717 --> 00:32:05,819
to measure an asset's runtime costs.

579
00:32:07,200 --> 00:32:11,504
You can see in this example that Max is reporting these meshes

580
00:32:11,564 --> 00:32:16,348
as having about 3,000 verts, where in-game this is closer to 5,000.

581
00:32:16,708 --> 00:32:21,112
The tools show the artist which categories are the least efficient.

582
00:32:21,712 --> 00:32:24,575
In this case, the boundaries of smoothing groups.

583
00:32:25,555 --> 00:32:30,099
Having these tools as close as possible to where the content decisions are being made

584
00:32:30,560 --> 00:32:32,781
is crucial for connecting cause and effect.

585
00:32:36,418 --> 00:32:41,180
While not perfect, these estimates make geometry optimizations much more efficient and are

586
00:32:41,220 --> 00:32:45,922
also a valuable tool for helping content creators understand the difference between DCC and

587
00:32:45,962 --> 00:32:46,842
runtime costs.

588
00:32:50,063 --> 00:32:53,785
In Destiny, textures have their compression and MIP level automatically applied.

589
00:32:54,425 --> 00:32:58,887
We also dropped one MIP for the V1 platforms, the PS3 and the Xbox 360.

590
00:33:00,944 --> 00:33:03,005
Artists will often want to override these settings

591
00:33:03,045 --> 00:33:04,887
when creating specialized textures

592
00:33:05,407 --> 00:33:07,849
or when optimizing textures in order to balance a budget.

593
00:33:09,330 --> 00:33:11,012
So we have budget feedback tools

594
00:33:11,993 --> 00:33:14,615
alongside the settings inside of the texture tag editor.

595
00:33:18,078 --> 00:33:19,399
You can see across the top here

596
00:33:19,439 --> 00:33:20,960
that the source resolution is listed,

597
00:33:21,721 --> 00:33:24,583
as well as the Xbox 360 cost and the compression method.

598
00:33:25,584 --> 00:33:27,625
We allow V1 and V2 resolution

599
00:33:27,665 --> 00:33:29,707
to be edited independently from the source.

600
00:33:30,205 --> 00:33:33,028
So the original intention of the texture can always be maintained.

601
00:33:34,389 --> 00:33:35,870
Common parameters are at the top,

602
00:33:36,511 --> 00:33:38,513
but more detail can be exposed when needed.

603
00:33:39,073 --> 00:33:42,156
This allows editing of the MIP chain and the compression method.

604
00:33:45,460 --> 00:33:48,042
For the in-game data, you'll need different methods

605
00:33:48,322 --> 00:33:49,984
to display the data for different users.

606
00:33:51,145 --> 00:33:53,227
And there are two main roles for budget reporting.

607
00:33:54,167 --> 00:33:57,789
The first is for auditing, an overview of conditions and trends.

608
00:33:58,529 --> 00:34:04,052
And the second is for taking action, forensic tools to locate and resolve problems.

609
00:34:05,333 --> 00:34:10,576
The first is to inspect the data from a high level to get an overall sense of current or future problem areas.

610
00:34:11,556 --> 00:34:16,659
These users are often project or discipline leads who want to create or maintain a visual model

611
00:34:17,259 --> 00:34:19,640
of the assets and how they're tracking against budgets.

612
00:34:20,607 --> 00:34:24,770
They need to cover large aspects of the game and easily identify trouble spots.

613
00:34:26,091 --> 00:34:28,272
The second requires a much more detailed view.

614
00:34:28,913 --> 00:34:33,596
These users are often content creators who will be making direct changes to the content.

615
00:34:34,476 --> 00:34:39,099
They need to be able to dig much further into which assets are present, how they got there,

616
00:34:39,299 --> 00:34:40,640
and why they cost what they do.

617
00:34:42,376 --> 00:34:44,797
Both groups need to see this data in context,

618
00:34:45,317 --> 00:34:47,538
so they can see how making changes to one thing

619
00:34:47,578 --> 00:34:50,359
will affect others, or how an asset compares

620
00:34:50,399 --> 00:34:51,320
to the others around it.

621
00:34:52,540 --> 00:34:55,141
It's important to note that all budget reports

622
00:34:55,301 --> 00:34:59,143
are really a contract with both curators and creators.

623
00:34:59,743 --> 00:35:01,964
It's critical that they be true and accurate,

624
00:35:02,324 --> 00:35:04,645
and that they don't change over the course of a project.

625
00:35:07,666 --> 00:35:09,387
For both curators and creators,

626
00:35:09,407 --> 00:35:11,408
you need a quick method to identify

627
00:35:12,089 --> 00:35:14,250
any problem areas and to put them in context.

628
00:35:15,491 --> 00:35:18,853
The web report provides information on every content build we do.

629
00:35:19,894 --> 00:35:23,717
A quick glance at the color-coded page will show which areas are having issues.

630
00:35:24,558 --> 00:35:27,240
This information is accessible to anyone in the studio.

631
00:35:27,800 --> 00:35:32,884
Content creators, project leads, producers all can use this page for an overview of how

632
00:35:33,204 --> 00:35:34,945
the destination and activities are doing.

633
00:35:36,526 --> 00:35:38,568
The contents of the page can also be emailed.

634
00:35:39,096 --> 00:35:42,958
We have several distribution lists that get these reports emailed to them daily.

635
00:35:44,980 --> 00:35:47,761
The web page also allows you to track builds over time.

636
00:35:48,462 --> 00:35:52,684
This allows you to look at trends as well as to find when changes were introduced.

637
00:35:53,865 --> 00:35:56,607
Each point on this graph represents a content build.

638
00:35:57,327 --> 00:36:01,229
Hovering over the data provides basic information about the build,

639
00:36:01,770 --> 00:36:03,931
as well as serving as a link to that build page.

640
00:36:07,088 --> 00:36:09,729
When digging into why changes occur between builds,

641
00:36:10,009 --> 00:36:12,009
you need to show the difference between the two,

642
00:36:12,710 --> 00:36:14,210
one before and one after.

643
00:36:15,230 --> 00:36:17,691
All the reports we're going to talk about support diffing,

644
00:36:18,271 --> 00:36:19,871
so you can track down these changes.

645
00:36:20,911 --> 00:36:23,672
Here I'm comparing the activity report for two builds.

646
00:36:24,452 --> 00:36:26,732
You can see items that were added are in green,

647
00:36:27,432 --> 00:36:28,793
those removed are in red,

648
00:36:29,573 --> 00:36:31,073
and you can see changes in blue

649
00:36:31,173 --> 00:36:33,114
with the before and after values listed.

650
00:36:34,414 --> 00:36:35,774
I have two red items selected,

651
00:36:36,127 --> 00:36:37,188
So they show up in orange.

652
00:36:37,888 --> 00:36:39,629
And the total for those selected items

653
00:36:39,709 --> 00:36:40,489
shows at the bottom.

654
00:36:41,410 --> 00:36:44,531
Being able to pick out and total items quickly and easily

655
00:36:44,571 --> 00:36:46,572
is important when trying to track down problems.

656
00:36:50,274 --> 00:36:52,054
All the budget reporting tools exist

657
00:36:52,094 --> 00:36:55,836
in a network of database servers with web front ends.

658
00:36:56,176 --> 00:36:59,057
And local tools you can run on the data for further analysis.

659
00:37:00,238 --> 00:37:02,519
So you can see the game build server at the center

660
00:37:02,559 --> 00:37:03,219
here in green.

661
00:37:04,140 --> 00:37:05,320
When builds are created.

662
00:37:05,717 --> 00:37:07,178
They also generate budget data

663
00:37:07,238 --> 00:37:08,639
that is held on a different server.

664
00:37:09,440 --> 00:37:10,940
Both of these have web front ends

665
00:37:11,020 --> 00:37:13,162
to make searching and getting info easier.

666
00:37:14,442 --> 00:37:16,704
All the budget data can be loaded and processed

667
00:37:16,764 --> 00:37:18,045
on a user's local machine.

668
00:37:18,885 --> 00:37:21,547
Once processed, any of a number of custom reports

669
00:37:21,587 --> 00:37:23,268
can be run for environment,

670
00:37:23,648 --> 00:37:26,189
for animation, design, et cetera.

671
00:37:29,091 --> 00:37:31,753
So this is the starting point for the local budget reports.

672
00:37:32,567 --> 00:37:37,188
This tool allows users to browse through a list of current builds from the server and

673
00:37:37,228 --> 00:37:39,989
load the budget data for any destination or platform.

674
00:37:41,529 --> 00:37:46,271
Once loaded, you can run reports specifically tailored to each discipline or simply view

675
00:37:46,311 --> 00:37:47,011
the raw data.

676
00:37:50,292 --> 00:37:52,472
So let's start with a common case for environments.

677
00:37:53,653 --> 00:37:58,514
A lead scans the overview report in email and sees that the overall data usages for

678
00:37:58,554 --> 00:38:00,315
environments is at or near budget.

679
00:38:01,513 --> 00:38:05,614
Using the link in the email, they open the report to do a bit of digging and find the

680
00:38:05,654 --> 00:38:07,675
textures are a bit over where they should be.

681
00:38:08,415 --> 00:38:13,376
They check the surrounding areas to establish context and make sure there is no systemic

682
00:38:13,416 --> 00:38:13,836
problem.

683
00:38:14,877 --> 00:38:19,718
The lead then tasks an artist familiar with the space to cut down the textures, along

684
00:38:19,738 --> 00:38:20,738
with some recommendations.

685
00:38:21,998 --> 00:38:25,979
The artist checks the figures from the top down as well to make sure that they understand

686
00:38:26,019 --> 00:38:27,120
the problem and context.

687
00:38:30,113 --> 00:38:31,894
Remember the complexity of this problem.

688
00:38:32,614 --> 00:38:34,075
When we talk about a loading set,

689
00:38:34,495 --> 00:38:35,875
we're talking about two bubbles

690
00:38:36,115 --> 00:38:38,416
and all of the transitions that touch them.

691
00:38:39,456 --> 00:38:42,837
So if a texture is in both bubble B and bubble C,

692
00:38:43,377 --> 00:38:46,358
then removing it from B doesn't actually gain anything.

693
00:38:47,778 --> 00:38:50,259
Every decision must be judged within the loading set

694
00:38:50,659 --> 00:38:53,540
and then balanced against all the surrounding bubbles as well.

695
00:38:54,620 --> 00:38:57,041
So knowing which textures are in which bubbles

696
00:38:57,261 --> 00:38:58,902
becomes a critical piece of information.

697
00:39:01,860 --> 00:39:04,322
Here's a full-screen view of the environment report.

698
00:39:04,962 --> 00:39:07,064
Up at the top, you can see that I'm looking at the moon

699
00:39:07,524 --> 00:39:08,925
in the first story activity,

700
00:39:09,345 --> 00:39:11,667
and I filtered it down to show only the loading set

701
00:39:11,847 --> 00:39:12,948
of Accelerator Hellmouth.

702
00:39:14,329 --> 00:39:17,131
World art controls a wide variety of assets,

703
00:39:17,231 --> 00:39:19,953
from graphics resources like textures and geometry,

704
00:39:20,394 --> 00:39:23,436
to pathfinding terrain and geometry.

705
00:39:26,498 --> 00:39:28,560
World art controls a wide variety of assets,

706
00:39:28,600 --> 00:39:30,802
from graphics resources like textures and geometry,

707
00:39:31,215 --> 00:39:33,476
to pathfinding terrain and visibility data.

708
00:39:34,256 --> 00:39:36,617
Everything here is broken down into logical units

709
00:39:37,197 --> 00:39:39,338
according to how World Art needs to deal with them.

710
00:39:41,559 --> 00:39:43,420
In the middle section of the environment report,

711
00:39:43,640 --> 00:39:45,161
you can see that each of the categories

712
00:39:45,241 --> 00:39:46,962
are broken down into their own tabs.

713
00:39:47,642 --> 00:39:49,763
Textures, geometry, AO,

714
00:39:50,183 --> 00:39:52,944
LOD textures, LOD geometry, and game data.

715
00:39:54,245 --> 00:39:56,726
Each tab has a unique custom view of the data

716
00:39:56,966 --> 00:39:58,967
according to the needs of the content creators.

717
00:40:00,077 --> 00:40:08,521
Inside of the textures tab here, you can see that all of the environment textures in this loading set are broken down further according to logical units.

718
00:40:09,882 --> 00:40:15,284
So you can see environment textures listed separately from sky, object, and speed tree textures.

719
00:40:16,244 --> 00:40:20,986
You can also see that not everything breaks down neatly, so there's often a leftovers category.

720
00:40:22,287 --> 00:40:25,568
There's a drop-down at the bottom of the section for filtering the detail view.

721
00:40:28,145 --> 00:40:30,506
And here's the detailed view of the environment textures.

722
00:40:31,767 --> 00:40:34,929
When listing out the textures, it's important to put them into context.

723
00:40:35,509 --> 00:40:38,091
It's important to list not only their size,

724
00:40:38,651 --> 00:40:42,313
but also where the texture is used and how many times it's used.

725
00:40:43,174 --> 00:40:45,195
A texture that is only used once or twice

726
00:40:45,615 --> 00:40:47,657
is much more likely to be reduced or cut,

727
00:40:48,137 --> 00:40:50,579
rather than one that is used 98 times.

728
00:40:52,140 --> 00:40:53,420
You'll see on the right side

729
00:40:54,101 --> 00:40:56,322
that the bubbles that the texture is used in are listed.

730
00:40:57,223 --> 00:40:59,765
Most textures shown here are used in both bubbles,

731
00:41:00,245 --> 00:41:02,867
but that fourth texture, which is only used in one.

732
00:41:06,849 --> 00:41:09,010
After you've answered the question of where

733
00:41:09,170 --> 00:41:11,211
and how many times the texture has been used,

734
00:41:11,571 --> 00:41:13,312
the next question that needs to be answered

735
00:41:13,873 --> 00:41:16,374
is what objects actually use this texture.

736
00:41:17,955 --> 00:41:20,036
Hovering over the usages will pop up a list

737
00:41:20,076 --> 00:41:21,817
of all assets that use that texture.

738
00:41:23,180 --> 00:41:27,581
Note that not only the assets listed, but also where to find them in the world building

739
00:41:27,641 --> 00:41:27,921
tool.

740
00:41:31,822 --> 00:41:35,983
Being able to connect the reports to other tools is a critical step in taking action.

741
00:41:37,023 --> 00:41:41,664
From this point, you can take several actions that lead away from the budget reports themselves.

742
00:41:42,424 --> 00:41:46,844
From this point, you can dig further into the data, open the texture directly in the

743
00:41:46,924 --> 00:41:51,705
editor, or simply copy out a list of the objects that use the texture to paste them into an

744
00:41:51,805 --> 00:41:52,025
email.

745
00:41:55,442 --> 00:41:59,786
All of the reports support exporting data to Excel for further analysis.

746
00:42:00,486 --> 00:42:05,591
This way we don't have to duplicate all of the spreadsheet functions within the budget reports themselves.

747
00:42:06,772 --> 00:42:12,096
You'll see here that there are far more data elements listed than what we saw in the previous texture report.

748
00:42:12,977 --> 00:42:17,841
This is a complete list of the raw data, the reality that's running under the UI.

749
00:42:18,842 --> 00:42:22,805
Many of these elements get filtered out because they are of limited use for content creators.

750
00:42:23,229 --> 00:42:25,491
but can be critical when analyzing a problem.

751
00:42:29,915 --> 00:42:33,378
To allow design more flexibility with the combatant races,

752
00:42:33,858 --> 00:42:35,600
the graphics for each of those races

753
00:42:35,700 --> 00:42:37,482
had to fit into a specific budget.

754
00:42:38,723 --> 00:42:40,705
This meant the designers could be confident

755
00:42:40,785 --> 00:42:42,426
that any two races would fit

756
00:42:42,626 --> 00:42:44,188
into any of their mission spaces.

757
00:42:45,609 --> 00:42:48,231
This way, designers don't have to worry about the cost

758
00:42:48,271 --> 00:42:50,713
for any particular character, vehicle, or weapon.

759
00:42:51,430 --> 00:42:55,554
All they have to worry about is that they never have more than two races per loading set.

760
00:42:56,875 --> 00:42:59,817
So all of the Fallen are the same cost as all of the Cabal.

761
00:43:04,060 --> 00:43:07,743
We limited the budget reporting for sandbox art to graphics resources only.

762
00:43:08,243 --> 00:43:12,106
This allowed those content creators to focus 100% on the graphics

763
00:43:12,647 --> 00:43:15,369
and not have to worry about the cost of abilities or AI.

764
00:43:16,695 --> 00:43:19,316
This also allowed the art group to focus on the visuals

765
00:43:19,396 --> 00:43:21,257
for each character by giving them

766
00:43:21,377 --> 00:43:23,077
easily understandable boundaries.

767
00:43:24,198 --> 00:43:26,458
They had complete control over their own domain

768
00:43:26,559 --> 00:43:28,799
and could allocate resources as they saw fit.

769
00:43:31,780 --> 00:43:33,841
To do this, we needed to assemble assets

770
00:43:33,881 --> 00:43:36,442
into logical units other than loading sets.

771
00:43:37,122 --> 00:43:38,602
So we created budget sets,

772
00:43:39,063 --> 00:43:41,383
which allows an arbitrary collection of assets

773
00:43:41,423 --> 00:43:43,324
to be imported into a single package.

774
00:43:44,485 --> 00:43:46,026
Budget sets can include anything,

775
00:43:46,407 --> 00:43:48,728
but are most often used as a collection of assets

776
00:43:48,828 --> 00:43:49,969
and all of their dependents.

777
00:43:51,390 --> 00:43:53,532
Each race is made up of multiple characters,

778
00:43:53,612 --> 00:43:54,612
vehicles, and weapons.

779
00:43:55,213 --> 00:43:57,374
They are considered as a single unit for budgets,

780
00:43:57,875 --> 00:43:59,976
but each of these assets can also be reported

781
00:44:00,036 --> 00:44:00,837
on individually.

782
00:44:02,378 --> 00:44:06,080
Importing any asset also imports all of the dependent

783
00:44:06,440 --> 00:44:08,762
abilities, AI, animation, and effects,

784
00:44:09,282 --> 00:44:11,084
so the costs for these are always available

785
00:44:11,244 --> 00:44:12,625
even if they are not being reported.

786
00:44:15,637 --> 00:44:18,000
So here's the sandbox report view of the Cabal

787
00:44:18,380 --> 00:44:20,643
with the gladiator highlighted for inspection.

788
00:44:21,544 --> 00:44:23,507
You can see the cost of the race as a whole

789
00:44:23,627 --> 00:44:25,309
broken down in the upper left column

790
00:44:25,990 --> 00:44:28,313
with the selected gladiator on the right.

791
00:44:28,333 --> 00:44:31,797
I've included the cost of animation and effects here,

792
00:44:32,198 --> 00:44:33,780
but these are usually hidden by default.

793
00:44:35,228 --> 00:44:39,290
Like the environment report, the sandbox report is broken down into subcategories.

794
00:44:39,790 --> 00:44:44,392
The sandbox artists are mainly concerned with the graphics resources of textures, geometry,

795
00:44:44,412 --> 00:44:47,773
and postures, but all of the assets' costs can be listed.

796
00:44:50,394 --> 00:44:52,614
This is the geometry view for a single asset.

797
00:44:53,335 --> 00:44:57,856
While the sandbox texture report is similar to what the environment artists use, they

798
00:44:57,916 --> 00:45:00,637
require a more detailed look into the geometry.

799
00:45:01,722 --> 00:45:04,044
The assets themselves are generally more complex

800
00:45:04,705 --> 00:45:06,786
and usually include multiple source files.

801
00:45:07,587 --> 00:45:10,349
So the report includes information on triangles,

802
00:45:10,409 --> 00:45:13,592
verts, and LODs, but also breaks down the mesh

803
00:45:13,672 --> 00:45:16,435
into all of its parts to report on the cost

804
00:45:16,495 --> 00:45:18,036
of damage sections and variants.

805
00:45:18,977 --> 00:45:20,998
This is another example of a custom report

806
00:45:21,058 --> 00:45:23,961
defined by content creators to make it easier

807
00:45:24,001 --> 00:45:27,103
for them to pinpoint problems and identify where to fix them.

808
00:45:30,382 --> 00:45:32,684
One of the elements that defines Destiny is gear,

809
00:45:33,324 --> 00:45:35,866
our system for providing a near-infinite assortment

810
00:45:35,886 --> 00:45:37,968
of player outfits, weapons, and ships.

811
00:45:39,028 --> 00:45:41,550
Each piece of gear is made up of a number of slots.

812
00:45:42,271 --> 00:45:45,493
Each slot can have hundreds or thousands of options.

813
00:45:46,554 --> 00:45:49,676
Artists combine multiple sub-components called bits

814
00:45:50,156 --> 00:45:52,177
to create the options for each slot.

815
00:45:53,098 --> 00:45:55,200
This specific overall configuration

816
00:45:55,300 --> 00:45:56,280
is called an arrangement.

817
00:45:57,666 --> 00:45:59,867
So the budget reporting has to list the bits

818
00:46:00,187 --> 00:46:02,769
that fill the slots configured by arrangement

819
00:46:03,109 --> 00:46:05,010
to show the overall cost of the gear.

820
00:46:06,231 --> 00:46:08,853
While the overall budget for any piece of gear

821
00:46:08,893 --> 00:46:10,394
within a class is the same,

822
00:46:11,154 --> 00:46:14,276
a shotgun has the same overall cost as a sniper rifle.

823
00:46:15,096 --> 00:46:17,358
The cost for the slots are very different.

824
00:46:18,218 --> 00:46:21,600
For example, the cost for a scope on a sniper rifle

825
00:46:21,680 --> 00:46:23,781
is very different than the sights on a shotgun.

826
00:46:26,924 --> 00:46:29,426
This presented some interesting challenges for budget reports.

827
00:46:30,267 --> 00:46:31,908
Here's a view of a single weapon.

828
00:46:32,889 --> 00:46:34,230
At the very bottom of the screen,

829
00:46:34,291 --> 00:46:36,472
you can see the gear arrangement that's selected.

830
00:46:37,153 --> 00:46:39,975
In this case, the auto rifle you start the game with.

831
00:46:40,896 --> 00:46:43,258
Above this, the main part of the slide here,

832
00:46:43,939 --> 00:46:45,700
you can see all of the bits listed

833
00:46:46,261 --> 00:46:48,143
along with the slot that they belong to.

834
00:46:49,478 --> 00:46:52,720
As you can see, even a single weapon can be quite complex.

835
00:46:53,340 --> 00:46:55,541
It's critical that the data be presented in such a way

836
00:46:55,601 --> 00:46:57,742
that the user can quickly locate problems

837
00:46:58,262 --> 00:47:00,884
and determine what action should be taken to fix it.

838
00:47:04,265 --> 00:47:06,026
Here's a view of a different kind of gear.

839
00:47:06,626 --> 00:47:08,427
This is the personal gear for the player.

840
00:47:09,007 --> 00:47:11,768
Helmets, shoulder pads, capes, and et cetera.

841
00:47:12,729 --> 00:47:15,150
Player gear doesn't have any preset arrangements,

842
00:47:15,350 --> 00:47:18,571
so everything is a la carte within a specific class or gender.

843
00:47:19,860 --> 00:47:22,380
All of these reports are based on the same data types,

844
00:47:22,920 --> 00:47:25,181
but they are presented in a way that makes the most sense

845
00:47:25,221 --> 00:47:26,221
to the group using them.

846
00:47:27,321 --> 00:47:30,102
The presentation is partially driven by process

847
00:47:30,222 --> 00:47:31,402
used to create the assets,

848
00:47:31,862 --> 00:47:34,543
but also by the preference of the content creators

849
00:47:34,563 --> 00:47:35,803
that have to make use of the data.

850
00:47:37,163 --> 00:47:40,604
Each of the five slots here has its own individual budget.

851
00:47:42,404 --> 00:47:45,885
These budgets are individually set by class, gender, and slot.

852
00:47:46,635 --> 00:47:48,856
To report on this, we needed another custom view

853
00:47:49,316 --> 00:47:51,577
that would support not only the custom arrangements,

854
00:47:51,858 --> 00:47:53,398
but also their associated budgets.

855
00:47:57,000 --> 00:47:59,321
The design report presents some interesting challenges.

856
00:47:59,741 --> 00:48:00,801
As we talked about earlier,

857
00:48:01,201 --> 00:48:04,203
design is actually five unique but interdependent groups.

858
00:48:05,203 --> 00:48:07,644
They exist at the apex of the content pyramid

859
00:48:08,084 --> 00:48:09,745
and are constantly juggling assets

860
00:48:09,825 --> 00:48:12,606
to find the perfect balance between cost and gameplay.

861
00:48:13,787 --> 00:48:15,728
For the main activities on any map,

862
00:48:16,513 --> 00:48:19,494
The two design groups are Mission Design, or Story,

863
00:48:20,254 --> 00:48:20,895
and Ambient.

864
00:48:22,135 --> 00:48:26,216
Ambient includes patrols, public events, bounties, loot,

865
00:48:26,696 --> 00:48:29,237
and other events not directly related to the missions.

866
00:48:32,197 --> 00:48:34,598
So in addition to the complexity of our loading sets,

867
00:48:34,938 --> 00:48:37,739
design also has to track multiple activities

868
00:48:37,819 --> 00:48:38,699
running in parallel.

869
00:48:39,759 --> 00:48:42,860
Designers can place assets directly,

870
00:48:43,400 --> 00:48:46,081
or they can spawn them through squads or behaviors.

871
00:48:47,543 --> 00:48:49,825
Because assets are brought in from so many sources,

872
00:48:50,305 --> 00:48:51,966
it's important to be able to identify

873
00:48:52,226 --> 00:48:54,667
which of the activities brought the assets

874
00:48:54,707 --> 00:48:55,528
into the loading set.

875
00:48:59,490 --> 00:49:01,451
Designers are also pulling together assets

876
00:49:01,511 --> 00:49:03,151
from many different sources.

877
00:49:04,212 --> 00:49:07,013
They might place a squad of menacing AI to fight,

878
00:49:07,634 --> 00:49:10,155
or a handy pile of crates for cover,

879
00:49:10,575 --> 00:49:13,257
or even an enormous spectacle that culminates a battle.

880
00:49:14,497 --> 00:49:16,078
So designers need to not only

881
00:49:17,067 --> 00:49:21,349
So designers need to not only know the overall cost of the asset,

882
00:49:21,870 --> 00:49:25,291
but how much of that cost is shared with other assets in the scene.

883
00:49:26,932 --> 00:49:31,495
So when reporting an asset's cost, we also need to report on how much would be saved

884
00:49:31,535 --> 00:49:32,995
if we were to remove the asset.

885
00:49:33,916 --> 00:49:36,757
The common questions that design needs to answer are

886
00:49:37,478 --> 00:49:39,379
what changed between these two builds,

887
00:49:40,219 --> 00:49:43,281
how much memory would I save if I removed asset X.

888
00:49:44,213 --> 00:49:46,994
And how much memory, how much would memory increase

889
00:49:47,254 --> 00:49:48,694
if I added asset Y?

890
00:49:53,095 --> 00:49:55,536
You learn for your mistakes by taking the time

891
00:49:55,596 --> 00:49:58,157
to stop and reflect on what things went wrong

892
00:49:58,417 --> 00:49:59,457
and what things went right.

893
00:50:00,917 --> 00:50:03,738
After we shipped Destiny, every discipline took the time

894
00:50:03,818 --> 00:50:05,859
to write up what went right on the project

895
00:50:05,979 --> 00:50:06,699
and what went wrong.

896
00:50:07,693 --> 00:50:10,635
There was a lot of discussion about what we could do better next time,

897
00:50:11,255 --> 00:50:13,996
but in doing so, we uncovered a lot about our processes.

898
00:50:14,756 --> 00:50:18,318
So even if they never change, our understanding has improved tremendously.

899
00:50:19,818 --> 00:50:22,419
These discussions turned into valuable documentation

900
00:50:22,499 --> 00:50:25,561
for setting standards and identifying trouble spots moving forward.

901
00:50:29,682 --> 00:50:31,283
So we've talked a bit about the dark arts

902
00:50:31,943 --> 00:50:35,325
and some of the spells and potions you can use to defend your project against them.

903
00:50:36,687 --> 00:50:39,488
As a TA, you'll need to understand the technology,

904
00:50:39,588 --> 00:50:41,849
not just from the side of the user's intentions,

905
00:50:42,309 --> 00:50:44,310
but from how the game engine receives the data.

906
00:50:45,411 --> 00:50:48,032
You'll need to help educate both content creators

907
00:50:48,372 --> 00:50:51,014
and engineers about the budget tools and how to use them.

908
00:50:52,034 --> 00:50:54,956
You'll need to answer questions, lots of questions.

909
00:50:56,216 --> 00:50:57,757
Many of these questions will require you

910
00:50:57,797 --> 00:50:59,958
to do serious detective work in order to answer.

911
00:51:01,279 --> 00:51:03,980
You'll need to constantly evangelize best practices.

912
00:51:06,259 --> 00:51:08,581
And often remind people of what they should be doing

913
00:51:08,641 --> 00:51:11,002
and what part they should play in making a better game.

914
00:51:12,483 --> 00:51:15,325
Remember that humans only absorb and retain a portion

915
00:51:15,485 --> 00:51:17,346
of any explanation they hear or see.

916
00:51:18,427 --> 00:51:20,588
Don't be surprised if you have to explain something

917
00:51:20,628 --> 00:51:22,389
to the same person several times over.

918
00:51:23,470 --> 00:51:25,792
And don't expect a group to absorb information

919
00:51:25,912 --> 00:51:27,353
uniformly or rationally.

920
00:51:27,973 --> 00:51:30,695
Expect communication breakdowns, misconceptions,

921
00:51:30,795 --> 00:51:32,496
and isolated pockets of ignorance.

922
00:51:33,765 --> 00:51:38,267
And last, remember that great games are made by ordinary people, just like you.

923
00:51:38,987 --> 00:51:39,627
Thanks for listening.

924
00:51:51,230 --> 00:51:54,291
So I think we're going to do questions now, if anybody has any questions.

925
00:51:56,452 --> 00:51:57,532
I covered everything.

926
00:51:59,313 --> 00:52:00,153
That is awesome.

927
00:52:01,538 --> 00:52:03,861
Or you all are just so tired by this point in the day,

928
00:52:03,881 --> 00:52:06,003
you're just like, you're ready for the coffee break.

929
00:52:08,025 --> 00:52:08,285
Sweet.

930
00:52:08,305 --> 00:52:10,387
Oh, one question.

931
00:52:11,668 --> 00:52:13,890
So you mentioned that you've done stuff out to Excel.

932
00:52:14,271 --> 00:52:16,232
Could you give some examples of some of the kind of things

933
00:52:16,252 --> 00:52:19,495
you discovered with other forms of analysis

934
00:52:19,596 --> 00:52:21,277
besides the stuff you showed here?

935
00:52:23,135 --> 00:52:30,461
One of the things that we often need to do is we'll need to take the entirety of a loading set and dump it out into Excel

936
00:52:31,122 --> 00:52:38,228
and then do a pivot table inside of Excel so we can determine the GPU resources versus the CPU resources.

937
00:52:38,988 --> 00:52:44,273
And so a lot of that kind of the breakdown I showed on one of the earlier slides was done by just that,

938
00:52:44,653 --> 00:52:47,175
by taking the raw data, dumping it into Excel.

939
00:52:47,696 --> 00:52:52,800
and then pulling it apart into the different types of resources that were present in the loading set.

940
00:52:54,581 --> 00:52:55,002
Cool, thanks.

941
00:52:55,022 --> 00:53:02,728
So, the most of what you talked about were kind of offline reports.

942
00:53:03,329 --> 00:53:07,252
Are there things that you can only gather runtime when the game is running?

943
00:53:08,213 --> 00:53:08,753
There are.

944
00:53:09,634 --> 00:53:13,557
They're usually not directly related to content memory.

945
00:53:14,703 --> 00:53:20,486
The main thing I was just focusing on was measuring sort of the package data that we have, the data that's on disk.

946
00:53:21,686 --> 00:53:26,129
But there's a whole other set of things that we do for the actual runtime costs,

947
00:53:26,629 --> 00:53:30,992
and things like the memory that's required to update the game at runtime.

948
00:53:31,772 --> 00:53:33,373
But that's actually a different set of tools.

949
00:53:33,993 --> 00:53:34,834
But we do have those.

950
00:53:35,774 --> 00:53:37,355
There's a whole set of stuff for doing that.

951
00:53:38,136 --> 00:53:40,397
Sorry, that's not a terribly satisfactory answer to your question.

952
00:53:40,797 --> 00:53:41,878
That's a different talk, I think.

953
00:53:42,418 --> 00:53:42,999
Yeah, probably.

954
00:53:43,579 --> 00:53:43,839
Thank you.

955
00:53:45,165 --> 00:53:45,385
Hi.

956
00:53:46,726 --> 00:53:47,106
Over here.

957
00:53:47,126 --> 00:53:47,226
Hi.

958
00:53:47,326 --> 00:53:47,547
Yes.

959
00:53:47,847 --> 00:53:48,507
Yeah, great talk.

960
00:53:48,587 --> 00:53:49,008
Thank you.

961
00:53:49,028 --> 00:53:49,628
Thank you.

962
00:53:49,868 --> 00:53:54,892
I was just curious, from a team organization point, you've got a pretty complex tool system

963
00:53:54,932 --> 00:53:59,316
there just for the budgeting, and I was wondering how many personnel maintain that itself?

964
00:54:03,599 --> 00:54:06,482
That's a complicated answer.

965
00:54:06,862 --> 00:54:07,002
Yeah.

966
00:54:08,531 --> 00:54:13,835
Just for the kind of the user facing side of it, just the interface, it's one person.

967
00:54:15,476 --> 00:54:19,259
We're actually shifting a lot of this stuff over now and kind of rewriting a bunch of it.

968
00:54:20,540 --> 00:54:29,527
That one person that's writing the tools that the users see is making use of a staggering amount of data that comes in from a variety of sources.

969
00:54:31,975 --> 00:54:38,869
Whenever we write an import process, and there's probably 15 different engineers that are writing import processes.

970
00:54:39,720 --> 00:54:42,162
Each of those import processes is writing out data

971
00:54:42,982 --> 00:54:45,064
that gets stored on all of the assets.

972
00:54:45,804 --> 00:54:48,225
So if you ask an asset and say,

973
00:54:48,285 --> 00:54:50,887
hey, how many verts do you have in this asset?

974
00:54:51,427 --> 00:54:52,848
That data was actually written out

975
00:54:52,928 --> 00:54:54,209
during the import process.

976
00:54:54,809 --> 00:54:57,751
So there was one of our 15 content engineers

977
00:54:57,791 --> 00:54:58,611
was actually the person

978
00:54:58,651 --> 00:55:00,032
that actually has to write the data.

979
00:55:00,833 --> 00:55:01,893
So we have one person

980
00:55:01,953 --> 00:55:03,935
that's just doing the reporting process,

981
00:55:04,415 --> 00:55:05,596
but then we have another person

982
00:55:05,616 --> 00:55:07,216
who's actually writing the import process.

983
00:55:07,794 --> 00:55:10,396
So it's very distributed. It is it is.

984
00:55:10,736 --> 00:55:13,557
And then we have individual engineers that are working on

985
00:55:13,637 --> 00:55:14,818
all of the web services.

986
00:55:14,838 --> 00:55:18,740
You know storing the data and then also the web

987
00:55:18,780 --> 00:55:21,061
front ends is in yet another person that's up there.

988
00:55:21,582 --> 00:55:23,423
Cool, thank you very much for that overview,

989
00:55:23,443 --> 00:55:23,623
sure.

990
00:55:28,165 --> 00:55:31,127
Anyone else out there? I'm getting a yellow card held

991
00:55:31,207 --> 00:55:31,287
up.

992
00:55:31,347 --> 00:55:32,648
I think it's time for a coffee break.

993
00:55:34,209 --> 00:55:34,709
Thanks very much.

