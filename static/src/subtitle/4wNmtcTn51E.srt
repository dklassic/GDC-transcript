1
00:00:06,039 --> 00:00:11,741
Hello everybody, and welcome to my talk on Starship physics and controls that feel real.

2
00:00:12,761 --> 00:00:15,762
How we brought the toys of Starlink to life.

3
00:00:17,523 --> 00:00:20,704
Just before I begin, I'd like to ask everybody to please silence their cell phones.

4
00:00:21,424 --> 00:00:25,785
And this is my first GDC talk, so I would love to, if you could fill out your evaluation

5
00:00:25,825 --> 00:00:28,446
forms at the end, and I love to read comments like that.

6
00:00:28,506 --> 00:00:29,207
So thank you.

7
00:00:32,755 --> 00:00:33,897
So who am I?

8
00:00:33,937 --> 00:00:34,958
My name is Michael Wasilewski.

9
00:00:35,499 --> 00:00:38,863
I've been in the game industry roughly 13, 14 years now.

10
00:00:39,544 --> 00:00:41,426
The last eight years at Ubisoft Toronto.

11
00:00:42,467 --> 00:00:44,249
I've been focused primarily on gameplay,

12
00:00:44,309 --> 00:00:45,311
animation, and tools.

13
00:00:46,292 --> 00:00:47,153
And for the last little bit,

14
00:00:47,173 --> 00:00:49,135
I've been working on Starlink Battle for Atlas.

15
00:00:50,197 --> 00:00:57,358
So our team's primary contributions include transforming the signals coming out of this

16
00:00:58,018 --> 00:01:02,519
hardware device that our very talented hardware team provide and turning them into a digital

17
00:01:02,559 --> 00:01:03,299
version of the ship.

18
00:01:03,919 --> 00:01:09,721
So along with that comes the controls, the physics, and reactions of the ship.

19
00:01:10,441 --> 00:01:14,742
I'm also super passionate about controls and how characters feel in games.

20
00:01:15,722 --> 00:01:19,523
And it's not easy to convey with just videos and text, but I'm going to try to do my best.

21
00:01:22,300 --> 00:01:23,101
So what is Starlink?

22
00:01:23,901 --> 00:01:26,343
Well, Starlink is an open world action adventure game

23
00:01:27,124 --> 00:01:29,866
targeted towards, but not exclusively for, kids.

24
00:01:30,906 --> 00:01:32,407
Players are encouraged to swap parts,

25
00:01:32,527 --> 00:01:35,029
not only to build the type of starship that they want,

26
00:01:35,550 --> 00:01:37,611
but also to overcome obstacles in the game.

27
00:01:38,412 --> 00:01:41,294
So you can sort of turn your wings around,

28
00:01:41,574 --> 00:01:44,256
you can swap them on top of each other,

29
00:01:45,236 --> 00:01:46,757
and swap parts of different hulls

30
00:01:46,918 --> 00:01:47,758
onto different other hulls.

31
00:01:56,313 --> 00:01:59,155
So you can see we've come a long way

32
00:01:59,215 --> 00:02:00,416
since the initial prototype.

33
00:02:00,516 --> 00:02:02,898
I think that was roughly four years ago or so.

34
00:02:04,219 --> 00:02:06,661
But even from day one, having the toy be a physical thing

35
00:02:06,721 --> 00:02:08,903
that our players would interact with was very important.

36
00:02:09,584 --> 00:02:11,265
The starship being mounted on the controller

37
00:02:11,325 --> 00:02:13,126
provides more of a visceral experience

38
00:02:13,207 --> 00:02:14,948
and we wanted that to translate into game.

39
00:02:16,649 --> 00:02:18,010
So how do children play with toys?

40
00:02:18,351 --> 00:02:21,033
Well, they skim them along the ground,

41
00:02:21,894 --> 00:02:23,074
they fly them through the air,

42
00:02:23,995 --> 00:02:25,376
they tumble them in the air,

43
00:02:26,582 --> 00:02:29,565
and usually smash them into the nearest available object.

44
00:02:30,926 --> 00:02:33,068
And those are some of the core experiences

45
00:02:33,108 --> 00:02:36,732
that we wanted to translate and to digitally emulate.

46
00:02:39,434 --> 00:02:42,096
Now, with that brings a few challenges.

47
00:02:42,177 --> 00:02:44,919
So, our starships don't have wheels.

48
00:02:45,774 --> 00:02:48,596
of course, and with that come certain expectations.

49
00:02:48,736 --> 00:02:50,498
Environmental collisions that in a car game

50
00:02:50,798 --> 00:02:53,080
would feel completely acceptable in stopping you

51
00:02:54,001 --> 00:02:55,803
dead in your tracks should probably be avoided.

52
00:02:56,343 --> 00:02:58,525
We also want to align nicely to the terrain.

53
00:03:00,467 --> 00:03:02,869
We are a shooter, so we need tight control

54
00:03:02,929 --> 00:03:04,431
over all movement of our ship.

55
00:03:05,091 --> 00:03:08,474
You know, we can't, we have to have control over timings,

56
00:03:08,895 --> 00:03:10,836
the feel, position on screen, that sort of thing.

57
00:03:14,246 --> 00:03:16,786
You don't need full physical accuracy,

58
00:03:16,846 --> 00:03:19,247
it's not that important, but being physically plausible

59
00:03:19,787 --> 00:03:21,928
while remaining fun was an important goal.

60
00:03:24,708 --> 00:03:24,948
Whoops.

61
00:03:26,989 --> 00:03:30,929
And we're a small team, so inexpensive solutions

62
00:03:30,969 --> 00:03:31,950
were always a big plus.

63
00:03:32,210 --> 00:03:34,810
I think each cell had roughly three to four people in it,

64
00:03:34,890 --> 00:03:37,791
so we looked for cheap solutions.

65
00:03:39,951 --> 00:03:42,912
And of course the unique challenge in our game was this.

66
00:03:44,860 --> 00:03:47,161
Players build their ships and we wanted them

67
00:03:47,261 --> 00:03:50,201
to give them the fantasy of being an ace pilot

68
00:03:50,241 --> 00:03:51,101
of their own creation.

69
00:03:51,762 --> 00:03:54,582
Thus, we couldn't optimize towards any single basic shape

70
00:03:54,802 --> 00:03:55,642
or convex hull.

71
00:03:55,662 --> 00:03:58,563
We kind of had to support a huge variety of different shapes.

72
00:04:01,583 --> 00:04:04,464
So I'm gonna go step by step to build up a ship

73
00:04:04,484 --> 00:04:07,384
that's dynamic, has character, reactive to the environment.

74
00:04:08,384 --> 00:04:10,485
My hope is that at each step it feels like,

75
00:04:10,605 --> 00:04:12,885
well, that was just the obvious next thing one would do.

76
00:04:13,645 --> 00:04:13,785
But.

77
00:04:14,387 --> 00:04:16,548
Like, make no mistake, it took a while to develop this game,

78
00:04:16,588 --> 00:04:18,089
and during development, we tried things,

79
00:04:18,329 --> 00:04:20,109
we iterated, and we did fail quite a bit.

80
00:04:23,531 --> 00:04:25,231
So, what is our ship?

81
00:04:25,391 --> 00:04:27,692
Well, it's just a point in space

82
00:04:27,772 --> 00:04:29,653
driven by linear and angular velocities.

83
00:04:30,733 --> 00:04:32,174
It's kind of an oversimplification,

84
00:04:32,234 --> 00:04:34,154
but at its absolute core, that's true.

85
00:04:35,215 --> 00:04:37,156
On the gameplay side, we drive the point in space.

86
00:04:37,856 --> 00:04:39,276
The ship mesh and collision shapes

87
00:04:39,316 --> 00:04:40,797
are bolted onto that transform,

88
00:04:41,317 --> 00:04:43,278
and we treat the whole thing like a giant rigid body.

89
00:04:46,012 --> 00:04:47,613
It's not quite that simple, and in fact,

90
00:04:47,633 --> 00:04:52,175
you can see from the picture that we use some sensors

91
00:04:52,215 --> 00:04:53,596
to properly navigate in the world,

92
00:04:53,876 --> 00:04:55,237
and I'll go into those in a moment.

93
00:04:57,078 --> 00:05:00,399
But first, the transformation pipeline of our ship.

94
00:05:01,220 --> 00:05:02,940
First, we try to apply any player input

95
00:05:02,980 --> 00:05:03,821
to drive it in the world.

96
00:05:04,541 --> 00:05:06,702
Then we apply some character, maybe flavor,

97
00:05:07,183 --> 00:05:08,643
onto the ship via animations.

98
00:05:09,893 --> 00:05:11,835
We perform reactions to projectiles

99
00:05:11,875 --> 00:05:13,457
and collisions we encountered last frame,

100
00:05:13,997 --> 00:05:17,501
and finally we pass all of that off to the physics system

101
00:05:17,581 --> 00:05:18,642
and read it back for rendering.

102
00:05:21,184 --> 00:05:21,965
So what is behavior?

103
00:05:22,225 --> 00:05:24,187
Well, behavior is the layer at which design,

104
00:05:24,227 --> 00:05:25,448
I would say, has the most control

105
00:05:25,508 --> 00:05:27,670
over how a ship will feel when being controlled.

106
00:05:28,391 --> 00:05:30,132
It's made up of several reusable classes

107
00:05:30,453 --> 00:05:33,495
that control primarily just one aspect of the ship

108
00:05:33,555 --> 00:05:34,997
via linear and angular velocities.

109
00:05:36,244 --> 00:05:38,465
Multiple behaviors can be sequenced or blended together

110
00:05:38,505 --> 00:05:40,005
to get something more complex.

111
00:05:41,945 --> 00:05:44,526
So the code here isn't all that important.

112
00:05:44,586 --> 00:05:45,886
I've kind of simplified it anyway

113
00:05:45,926 --> 00:05:47,066
from the real thing we shipped with.

114
00:05:47,706 --> 00:05:49,326
But the important thing is that each behavior

115
00:05:49,346 --> 00:05:51,407
is just a class with tuning parameters

116
00:05:52,187 --> 00:05:53,947
and an update method which operates

117
00:05:54,027 --> 00:05:55,908
on a set of input output parameters.

118
00:05:57,408 --> 00:05:59,168
Some behaviors drive our point directly.

119
00:05:59,488 --> 00:06:01,409
Some behaviors just calculate parameters

120
00:06:01,449 --> 00:06:04,149
for later behaviors to use in some way.

121
00:06:07,390 --> 00:06:09,372
Now, we have three major navigation modes,

122
00:06:09,812 --> 00:06:10,773
like I mentioned at the beginning,

123
00:06:10,994 --> 00:06:14,117
skimming, atmospheric flight, and space flight.

124
00:06:15,238 --> 00:06:17,000
Each navigation mode has a state machine

125
00:06:17,701 --> 00:06:19,082
that sequences behaviors together

126
00:06:19,283 --> 00:06:20,744
and adjusts various blend parameters.

127
00:06:21,004 --> 00:06:23,367
In the example above, we blend two versions

128
00:06:23,427 --> 00:06:24,768
of a camera alignment,

129
00:06:24,849 --> 00:06:26,390
depending on how fast the ship is moving.

130
00:06:27,434 --> 00:06:29,956
We can also adjust the settings if you're stalled, frozen,

131
00:06:30,036 --> 00:06:31,677
or have some other status effect applied.

132
00:06:32,597 --> 00:06:34,538
It's a really simplified example,

133
00:06:34,698 --> 00:06:37,800
and our real modes had many, many, many more

134
00:06:37,880 --> 00:06:40,682
sequence behaviors in this sort of tree-like structure.

135
00:06:42,703 --> 00:06:44,844
When we enter or exit the atmosphere of a planet,

136
00:06:44,884 --> 00:06:46,745
or maybe turn on and off our flight engines,

137
00:06:47,446 --> 00:06:49,087
we have to transition between these states.

138
00:06:49,607 --> 00:06:52,208
Thus, each of our state machines are behaviors themselves,

139
00:06:52,829 --> 00:06:54,630
and then we can use existing blend functionality

140
00:06:54,650 --> 00:06:55,630
to transition between them.

141
00:06:58,073 --> 00:06:59,895
And we have a big core set of behaviors,

142
00:07:00,055 --> 00:07:02,578
and most reuse happens by tuning a behavior

143
00:07:02,619 --> 00:07:03,860
for a specific scenario.

144
00:07:04,421 --> 00:07:06,764
Most of them are applicable to multiple navigation modes,

145
00:07:07,224 --> 00:07:09,607
although we do have more esoteric ones,

146
00:07:10,188 --> 00:07:11,770
like something our designers requested,

147
00:07:11,970 --> 00:07:15,975
aligning to the solar system ecliptic plane over time

148
00:07:16,015 --> 00:07:17,477
so the players don't get disoriented.

149
00:07:20,745 --> 00:07:22,566
So let's just start with the most basic,

150
00:07:22,606 --> 00:07:24,167
which is a thruster behavior.

151
00:07:24,588 --> 00:07:26,569
This just applies a linear force to our point

152
00:07:27,449 --> 00:07:29,130
based on user input.

153
00:07:29,170 --> 00:07:30,591
When the ship is attached to the point,

154
00:07:30,871 --> 00:07:32,312
the physics step keeps it in the world,

155
00:07:32,813 --> 00:07:34,173
but you know, we're constantly colliding

156
00:07:34,213 --> 00:07:36,695
and scraping in the world against our height map

157
00:07:36,735 --> 00:07:37,716
and props along the way.

158
00:07:37,816 --> 00:07:39,837
So there's no rotation on the ship,

159
00:07:39,857 --> 00:07:42,358
so it's not really useful on its own.

160
00:07:45,481 --> 00:07:47,042
But let's start aligning to the camera.

161
00:07:47,502 --> 00:07:49,584
The player actually feels like now

162
00:07:49,604 --> 00:07:51,505
they're controlling a third person character

163
00:07:51,685 --> 00:07:52,666
or third person avatar.

164
00:07:53,727 --> 00:07:55,368
We just dangle a carrot in front of the ship

165
00:07:55,728 --> 00:07:56,929
in the direction we wanna rotate,

166
00:07:57,449 --> 00:07:58,950
given our current angular velocity,

167
00:07:59,010 --> 00:08:00,772
figure out if there's any delta needed

168
00:08:00,812 --> 00:08:02,053
to get us there in the next frame,

169
00:08:02,753 --> 00:08:04,094
and then apply a force to do so.

170
00:08:04,794 --> 00:08:06,496
Design, of course, has knobs to tune

171
00:08:06,516 --> 00:08:07,857
the smoothing and acceleration.

172
00:08:10,619 --> 00:08:12,820
Once we're generally moving and facing the right direction,

173
00:08:13,060 --> 00:08:14,741
we can work on keeping ourselves off the ground.

174
00:08:16,436 --> 00:08:18,398
Our repulsor behavior sphere casts against the world

175
00:08:18,438 --> 00:08:20,100
a few times and tries to keep the ship

176
00:08:20,120 --> 00:08:20,881
from hitting the terrain.

177
00:08:21,482 --> 00:08:23,364
Now here, repulsor's a bit of a misnomer

178
00:08:23,684 --> 00:08:25,706
because depending on the desired gameplay,

179
00:08:26,507 --> 00:08:28,810
we either tightly keep our ship bound to the ground,

180
00:08:29,130 --> 00:08:30,932
for example in combat, we wanna keep them

181
00:08:31,452 --> 00:08:32,774
generally in the same combat plane.

182
00:08:33,655 --> 00:08:36,616
But when we're navigating across our giant worlds,

183
00:08:36,976 --> 00:08:39,297
we allow the ship to hit jumps, sail through the air,

184
00:08:40,457 --> 00:08:40,997
that sort of thing.

185
00:08:41,317 --> 00:08:44,418
So the repulsor is kind of just using a spring equation

186
00:08:44,939 --> 00:08:47,219
where our spring constant varies depending on the type

187
00:08:47,259 --> 00:08:48,260
of gameplay that we want.

188
00:08:48,940 --> 00:08:50,621
And it generally keeps us off the ground

189
00:08:51,221 --> 00:08:54,302
and away from objects, although, as you can see from the video,

190
00:08:54,362 --> 00:08:55,762
not all objects.

191
00:08:55,962 --> 00:08:57,043
And I'll get into that in a second.

192
00:09:00,524 --> 00:09:02,405
Well, once we have this repulsor behavior,

193
00:09:02,525 --> 00:09:05,886
we kind of have a good normal to the ground.

194
00:09:06,126 --> 00:09:07,647
So we can use some of the repulsors,

195
00:09:08,407 --> 00:09:10,407
the sensors to determine a good normal vector

196
00:09:10,487 --> 00:09:12,348
and refine our ship and align it to the terrain.

197
00:09:13,448 --> 00:09:16,189
This is where having multiple sphere cast results help,

198
00:09:16,530 --> 00:09:18,710
as you can never know what sort of scattered artist props

199
00:09:18,890 --> 00:09:20,311
you may find your ship on top of.

200
00:09:21,531 --> 00:09:22,892
You can also see that the array cast,

201
00:09:23,072 --> 00:09:25,072
the distance between array cast changes

202
00:09:25,393 --> 00:09:27,753
as the ship moves faster or slower.

203
00:09:31,408 --> 00:09:33,789
Then we add, I'd say, the most touchy-feely step

204
00:09:33,829 --> 00:09:35,810
for design to tune, but one that completely

205
00:09:35,850 --> 00:09:36,810
brings the ship to life.

206
00:09:37,530 --> 00:09:39,731
Adding roll to the ship based on player input

207
00:09:39,911 --> 00:09:41,651
helps give the impression of engines

208
00:09:41,791 --> 00:09:43,172
actually having to do work.

209
00:09:47,453 --> 00:09:49,633
Then putting that all together and including dashes

210
00:09:49,673 --> 00:09:52,074
in different directions, upwards, left, right,

211
00:09:52,614 --> 00:09:55,355
you get something that I think feels pretty dynamic

212
00:09:55,515 --> 00:09:56,615
and responsive on screen.

213
00:09:59,876 --> 00:10:00,837
The VFX help as well.

214
00:10:03,920 --> 00:10:06,121
Now, we're not a racing or simulation game

215
00:10:06,321 --> 00:10:08,062
where the player is expected to retain

216
00:10:08,102 --> 00:10:09,643
very high-grain control of their ship.

217
00:10:10,323 --> 00:10:12,744
We're a giant open-world game where the player's goal

218
00:10:12,804 --> 00:10:14,465
is to get across varied types of terrain

219
00:10:14,565 --> 00:10:15,565
and engage in combat.

220
00:10:17,006 --> 00:10:18,586
It was important that our worlds feel

221
00:10:18,927 --> 00:10:21,048
as interesting as possible and that the player

222
00:10:21,088 --> 00:10:23,368
felt like a skilled pilot while navigating

223
00:10:23,549 --> 00:10:25,629
every corner of each of our seven planets.

224
00:10:27,030 --> 00:10:28,531
Without some sort of avoidance behavior,

225
00:10:28,751 --> 00:10:30,111
I don't think we could have accomplished that goal.

226
00:10:30,957 --> 00:10:36,221
Thus we raycast in front of us to sense what's ahead and apply an upwards force to try to

227
00:10:36,261 --> 00:10:37,782
clear any obstacles in the way.

228
00:10:39,903 --> 00:10:44,787
In this case, it's getting me over some dinosaur bones and some scattered rocks.

229
00:10:48,549 --> 00:10:53,153
And you can see, even as I jump over it, when I go down to the ground, my repulsor spring

230
00:10:53,193 --> 00:10:55,214
equation kicks in and you get that nice sense of movement.

231
00:10:59,600 --> 00:11:02,943
So our tooling wasn't quite there for Starlink,

232
00:11:03,123 --> 00:11:05,305
so sequencing the behaviors was a bit manual,

233
00:11:05,545 --> 00:11:07,707
but all the design variables were exposed for tuning.

234
00:11:08,828 --> 00:11:11,110
Like I mentioned, we have the three major navigation modes,

235
00:11:11,731 --> 00:11:12,911
and the sequence of behaviors,

236
00:11:12,952 --> 00:11:14,773
the sequencing of behaviors was slightly different

237
00:11:14,793 --> 00:11:16,735
for each of them, but the core set of behaviors

238
00:11:16,775 --> 00:11:17,435
was all the same.

239
00:11:18,296 --> 00:11:19,957
In fact, we're releasing an update in April,

240
00:11:20,518 --> 00:11:21,959
I think maybe April, early May,

241
00:11:22,540 --> 00:11:24,141
that adds a drifting mechanic to the game,

242
00:11:24,421 --> 00:11:26,323
and we didn't add any new types of behaviors.

243
00:11:26,543 --> 00:11:28,625
We just sequenced existing ones with our state machine.

244
00:11:31,899 --> 00:11:33,839
And I mentioned that behaviors have settings.

245
00:11:34,360 --> 00:11:37,200
These include acceleration curves, blending times,

246
00:11:37,280 --> 00:11:39,221
maximum translations on screen, et cetera.

247
00:11:40,021 --> 00:11:41,861
But we also had many different ship hulls and wings

248
00:11:41,881 --> 00:11:43,121
that should feel different depending on

249
00:11:43,161 --> 00:11:44,662
how our players assemble them together.

250
00:11:45,162 --> 00:11:47,502
So design actually tuned several sets of settings

251
00:11:47,522 --> 00:11:49,002
for our behaviors, and at runtime,

252
00:11:49,022 --> 00:11:51,563
we would linearly combine them with weights

253
00:11:51,663 --> 00:11:54,724
extracted from this physical ship configuration.

254
00:11:56,044 --> 00:11:58,224
At one extreme, the ship could feel more like a motorcycle,

255
00:11:58,264 --> 00:11:59,925
and the other extreme, more like a tank.

256
00:12:03,773 --> 00:12:04,634
So onto animation.

257
00:12:05,415 --> 00:12:07,198
Since we have a rigid body as our main avatar,

258
00:12:07,579 --> 00:12:10,783
much of the character has to come from VFX, SFX,

259
00:12:10,843 --> 00:12:12,346
and secondary animation on the flaps.

260
00:12:13,688 --> 00:12:15,931
But we can do a bit better by using animations

261
00:12:15,951 --> 00:12:16,993
to drive our rigid body.

262
00:12:17,800 --> 00:12:22,703
There's not a lot of references out there for applying animations to a ship that's physically controlled, but it's not too bad.

263
00:12:22,863 --> 00:12:25,364
In a nutshell, animation is always additive for us.

264
00:12:25,945 --> 00:12:31,007
So, playing animation defines an offset around the base gameplay transform we want to be at.

265
00:12:31,608 --> 00:12:38,191
We never actually drive the route of the ship with animations, we just apply velocities to our physics bodies that take us to the desired offset.

266
00:12:39,232 --> 00:12:43,034
And just as a side note, we had a very small team to make this title, so...

267
00:12:43,554 --> 00:12:45,457
And since our animations are just a single bone,

268
00:12:46,558 --> 00:12:48,682
the first animations we applied were actually just

269
00:12:48,742 --> 00:12:51,486
repurposed camera animations from an internal third person

270
00:12:51,506 --> 00:12:52,007
shooter game.

271
00:12:52,568 --> 00:12:54,110
And I think we actually shipped with that.

272
00:12:58,606 --> 00:13:01,308
So once we have a ship that moves, has a bit of character,

273
00:13:02,808 --> 00:13:04,910
reactions to the world and the environment

274
00:13:04,970 --> 00:13:07,371
are in my opinion the biggest opportunity

275
00:13:07,531 --> 00:13:09,912
to connect it with the rest of the game.

276
00:13:10,293 --> 00:13:11,493
Makes the ship feel grounded

277
00:13:12,033 --> 00:13:13,654
and more than just a transform on screen.

278
00:13:15,796 --> 00:13:17,236
But remember our driving principle.

279
00:13:17,417 --> 00:13:19,778
The ship in game has to react to physical impacts

280
00:13:19,838 --> 00:13:21,999
just like you might imagine a child might mime

281
00:13:22,599 --> 00:13:23,580
while playing with a toy.

282
00:13:24,180 --> 00:13:26,241
Ship should translate, although maybe not too far.

283
00:13:27,183 --> 00:13:29,444
Should rotate, maybe not too much to interfere

284
00:13:29,464 --> 00:13:31,564
with gameplay, and finally recover back

285
00:13:31,584 --> 00:13:32,605
to its original transform.

286
00:13:33,365 --> 00:13:34,805
And one extra constraint for our team,

287
00:13:35,105 --> 00:13:36,626
depending on how the ship has been configured,

288
00:13:36,766 --> 00:13:39,487
you know, three wings on one side, no wings on the other,

289
00:13:40,047 --> 00:13:41,487
some pointing up, some pointing down,

290
00:13:41,707 --> 00:13:44,068
the ship has to react in a physically plausible way.

291
00:13:46,309 --> 00:13:47,849
So each part that we attach to the ship

292
00:13:48,089 --> 00:13:49,090
comes with a set of capsules

293
00:13:49,310 --> 00:13:51,370
that get added to a base compound shape.

294
00:13:53,031 --> 00:13:55,252
As we add more wings, they just stack on top of each other.

295
00:13:57,109 --> 00:14:00,431
And as you can build some pretty crazy ship combinations in our game, your rigid body

296
00:14:00,472 --> 00:14:02,673
compound shape will also look pretty wild.

297
00:14:03,935 --> 00:14:08,499
Each part has a mass and can change the ship's center of mass and inertia tensor accordingly.

298
00:14:09,019 --> 00:14:13,763
Together, the inertia tensor and center of mass position can drastically change how impact

299
00:14:13,803 --> 00:14:14,544
reactions feel.

300
00:14:16,085 --> 00:14:20,629
So we'd like to have impacts that feel real, or maybe a better term would be feel fun.

301
00:14:24,460 --> 00:14:26,421
And again, because we want tight control over our ship,

302
00:14:26,521 --> 00:14:28,061
we don't actually want the physics engine

303
00:14:28,121 --> 00:14:30,062
to do the creative work for us.

304
00:14:30,662 --> 00:14:32,883
We actually don't have that much control at that level.

305
00:14:33,524 --> 00:14:35,765
Ideally, we do some creative calculations

306
00:14:35,805 --> 00:14:36,645
on the gameplay side,

307
00:14:37,145 --> 00:14:38,366
figure out what our ship should look like,

308
00:14:38,486 --> 00:14:40,607
and then drive the ship transform in the physics step

309
00:14:40,667 --> 00:14:43,828
the same way we've been doing with behaviors and animation,

310
00:14:43,928 --> 00:14:46,349
just via linear and angular forces.

311
00:14:48,830 --> 00:14:49,691
So there are two components,

312
00:14:49,731 --> 00:14:50,911
and I'll start with translation.

313
00:14:50,931 --> 00:14:52,032
There's translation and rotation.

314
00:14:53,572 --> 00:14:56,415
At least in Starlink, projectiles move pretty quickly

315
00:14:56,515 --> 00:14:58,316
and players generally only perceive

316
00:14:58,737 --> 00:15:01,159
that one came from this direction

317
00:15:01,499 --> 00:15:02,780
and hit the main mass of the ship.

318
00:15:03,621 --> 00:15:05,102
Not that it came from an exact spot

319
00:15:05,202 --> 00:15:07,444
and hit my wing at an oblique angle.

320
00:15:08,465 --> 00:15:10,226
So in our simplified representation,

321
00:15:10,427 --> 00:15:12,228
the ship is just gonna translate for some amount

322
00:15:12,308 --> 00:15:13,389
down the impact direction.

323
00:15:13,629 --> 00:15:14,210
It's pretty easy.

324
00:15:14,370 --> 00:15:16,992
I kind of think of it as a little finger poking

325
00:15:17,232 --> 00:15:18,333
the ship at a certain spot.

326
00:15:21,517 --> 00:15:22,558
So you translate for a bit.

327
00:15:23,198 --> 00:15:24,019
And what does that look like?

328
00:15:25,300 --> 00:15:26,601
Well, it's not bad, I guess.

329
00:15:27,681 --> 00:15:29,022
Serves a couple purposes.

330
00:15:30,063 --> 00:15:31,964
It has the ship dynamically react on screen

331
00:15:32,825 --> 00:15:34,686
and shows which direction the impact came from.

332
00:15:35,487 --> 00:15:38,469
I think it works, but it's a bit sterile

333
00:15:38,529 --> 00:15:40,450
and lacking that oomph factor.

334
00:15:43,632 --> 00:15:44,853
So let's make it look a bit better

335
00:15:44,893 --> 00:15:46,754
by focusing on the rotation component.

336
00:15:48,575 --> 00:15:49,776
So we see an incoming projectile

337
00:15:49,796 --> 00:15:50,937
that's about to impact our ship.

338
00:15:52,918 --> 00:15:58,440
The impact in the projectile direction is in the red vector v right here, which will

339
00:15:58,480 --> 00:16:01,861
cross with the vector from the center of mass to the impact point.

340
00:16:02,501 --> 00:16:09,164
This gives us the green vector, sorry, the magenta vector coming out of the screen and

341
00:16:09,184 --> 00:16:10,044
maybe a bit to the right.

342
00:16:14,486 --> 00:16:18,447
Now, that becomes our vector that we want to rotate the ship around.

343
00:16:19,667 --> 00:16:20,328
Well, in physics.

344
00:16:21,322 --> 00:16:25,865
An inertia tensor kind of tells us how much a rigid body will resist rotation around each axis

345
00:16:26,126 --> 00:16:29,188
and how much torque needs to be applied to move the body.

346
00:16:30,088 --> 00:16:34,251
And as I mentioned before, each part has a mass, so each the ship has an inertia tensor

347
00:16:34,271 --> 00:16:37,734
that you can either calculate manually or ask your physics system to provide for you.

348
00:16:38,314 --> 00:16:42,818
So if we multiply this rotation axis by the tensor and the mass,

349
00:16:43,178 --> 00:16:47,181
the length of the result is the total angle by which you would need to rotate.

350
00:16:47,421 --> 00:16:48,402
It's an axis angle.

351
00:16:55,180 --> 00:16:59,744
So as a recap, each projectile just creates a new axis angle transform that we want the ship to be at.

352
00:17:00,184 --> 00:17:05,929
We blend those transforms out over time and we nudge the ship there using forces.

353
00:17:08,331 --> 00:17:09,051
So what does that look like?

354
00:17:10,510 --> 00:17:12,852
So the magic, as with most things in game development,

355
00:17:13,452 --> 00:17:14,073
is in the tuning.

356
00:17:14,433 --> 00:17:16,855
There's a maximum translation the ship generally remains,

357
00:17:17,475 --> 00:17:18,536
so that the ship generally remains

358
00:17:18,576 --> 00:17:19,357
in the center of the screen.

359
00:17:19,777 --> 00:17:22,279
This differs in space versus on planet,

360
00:17:22,359 --> 00:17:23,480
because we don't have the ground plane

361
00:17:23,500 --> 00:17:25,381
to worry about in space.

362
00:17:26,202 --> 00:17:27,963
There are also limits on the maximum rotation

363
00:17:28,003 --> 00:17:28,864
we can torque the ship,

364
00:17:28,924 --> 00:17:31,886
so that on screen the ship generally faces mostly forward.

365
00:17:33,180 --> 00:17:35,863
We can also combine this by modifying the behaviors

366
00:17:35,883 --> 00:17:37,023
from the beginning of the presentation.

367
00:17:37,704 --> 00:17:39,606
Hard enough impacts will push us towards the ground,

368
00:17:39,766 --> 00:17:41,467
causing our repulsor to work a bit harder.

369
00:17:42,648 --> 00:17:44,830
So you see the ship do sort of a bounce up and down,

370
00:17:44,930 --> 00:17:46,952
providing, I think, a richer sense of movement.

371
00:17:47,772 --> 00:17:50,074
And even harder impacts cause what we call a stall,

372
00:17:50,555 --> 00:17:52,496
where our repulsor and thrust behaviors

373
00:17:52,636 --> 00:17:54,698
just completely turn off for about a second or so.

374
00:17:57,500 --> 00:17:59,102
And then our VFX team did a great job

375
00:17:59,142 --> 00:18:01,183
of selling the actual engines recovering.

376
00:18:04,405 --> 00:18:06,927
Now, you may have noticed me snapping wings and weapons

377
00:18:07,127 --> 00:18:09,008
onto my ship, and you can literally

378
00:18:09,128 --> 00:18:11,430
feel in your hand the force needed to do that.

379
00:18:12,150 --> 00:18:13,631
And we wanted that to translate into game.

380
00:18:13,971 --> 00:18:16,773
So we actually just applied the exact same technique

381
00:18:16,873 --> 00:18:17,834
when a part animates it.

382
00:18:18,454 --> 00:18:20,255
We just do that fake little finger jab.

383
00:18:22,177 --> 00:18:24,318
And of course, depending on how the ship is currently

384
00:18:24,338 --> 00:18:27,320
configured, that reaction should still look pretty realistic.

385
00:18:28,701 --> 00:18:30,982
Basically, we kind of created ourselves

386
00:18:31,042 --> 00:18:33,023
an inexpensive form of procedural animation.

387
00:18:45,844 --> 00:18:47,085
Well, what about collisions with the world?

388
00:18:47,925 --> 00:18:49,045
This is sort of what it looks like

389
00:18:49,085 --> 00:18:50,706
if you don't react to the world at all.

390
00:18:51,166 --> 00:18:52,987
I mean, you don't go through those objects,

391
00:18:54,588 --> 00:18:58,469
but I guess it does the job, but it's not super exciting.

392
00:18:59,950 --> 00:19:02,451
But what if we were to do the exact same thing

393
00:19:02,491 --> 00:19:03,772
we did with projectile impacts?

394
00:19:03,812 --> 00:19:06,333
What if we were to apply that fake little nudge?

395
00:19:10,285 --> 00:19:12,226
In this case, I think it results in something

396
00:19:12,246 --> 00:19:15,728
that looks pretty good and, more importantly,

397
00:19:15,808 --> 00:19:18,209
pushes us out of the way for subsequent collisions.

398
00:19:21,470 --> 00:19:25,872
So as a side note, I can't tell you how many cliffs

399
00:19:25,952 --> 00:19:28,433
and rocks I've scraped our digital ship in

400
00:19:28,953 --> 00:19:31,915
during the course of this game to get it to feel just right.

401
00:19:32,355 --> 00:19:35,436
And my one note is that

402
00:19:37,109 --> 00:19:40,331
If you're doing something where you have a skimming vehicle,

403
00:19:41,131 --> 00:19:43,293
just ignore like 90% of the collisions

404
00:19:43,333 --> 00:19:44,453
coming from below your ship,

405
00:19:44,593 --> 00:19:48,095
because you're probably hitting collision-enabled props

406
00:19:48,156 --> 00:19:49,376
on the ground that somebody scattered,

407
00:19:49,676 --> 00:19:51,437
and your ship would just flinch way too much.

408
00:19:58,842 --> 00:20:02,264
So, some of the more eagle-eyed of you

409
00:20:02,304 --> 00:20:04,445
may have noticed a physics shape at the bottom of the ship

410
00:20:04,525 --> 00:20:06,046
that's colored a little bit differently.

411
00:20:07,344 --> 00:20:08,965
Internally, we call that the imp plow.

412
00:20:10,185 --> 00:20:12,107
We have a small NPC in our game, the imp,

413
00:20:12,927 --> 00:20:13,888
with very low hit points,

414
00:20:14,088 --> 00:20:15,569
kind of popcorn fodder for the player.

415
00:20:16,229 --> 00:20:17,270
And as they're pretty small,

416
00:20:17,450 --> 00:20:19,491
design wanted to encourage the player

417
00:20:19,531 --> 00:20:20,512
to drive right through them.

418
00:20:21,493 --> 00:20:23,114
The problem being with all the work we did

419
00:20:23,154 --> 00:20:24,254
to get our repulsor working,

420
00:20:24,435 --> 00:20:26,876
the ship sits at about the same height as the imp.

421
00:20:27,997 --> 00:20:29,658
And a player trying to ram them would often miss

422
00:20:29,718 --> 00:20:31,119
or skim directly over their heads.

423
00:20:32,560 --> 00:20:33,560
So our solution,

424
00:20:34,593 --> 00:20:36,234
was to add this invisible plow shape.

425
00:20:36,374 --> 00:20:37,595
So from the player's perspective,

426
00:20:37,635 --> 00:20:38,676
everything looks great,

427
00:20:38,796 --> 00:20:40,538
given the camera angle, speed at which we travel.

428
00:20:41,359 --> 00:20:42,640
But if we look at it from the side,

429
00:20:42,880 --> 00:20:45,002
the ship never actually hits the imp.

430
00:20:45,062 --> 00:20:46,923
It's just this invisible piece of collision

431
00:20:47,524 --> 00:20:48,305
causing the reaction.

432
00:20:54,610 --> 00:20:57,533
Well, really hard collisions are a special case.

433
00:20:57,853 --> 00:20:59,234
Sometimes it's best to just step back

434
00:20:59,274 --> 00:21:01,196
and let your physics system do the heavy lifting.

435
00:21:01,975 --> 00:21:04,437
Apply a little slow motion on the impact to emphasize it,

436
00:21:04,937 --> 00:21:05,638
and things look great.

437
00:21:07,159 --> 00:21:09,000
One thing to note is because all of our behaviors,

438
00:21:09,060 --> 00:21:10,761
animations, projectile impacts, et cetera,

439
00:21:10,781 --> 00:21:12,663
have all been combining to drive the rigid body.

440
00:21:13,484 --> 00:21:15,285
When we go into purely physics-driven mode,

441
00:21:15,505 --> 00:21:16,706
all that motion is carried through.

442
00:21:17,767 --> 00:21:19,028
We don't need to blend anything out

443
00:21:19,108 --> 00:21:21,350
or worry about a mismatch between the rendering and physics.

444
00:21:23,131 --> 00:21:24,732
But you will notice here that my ship

445
00:21:24,812 --> 00:21:26,474
actually recovers back to normal

446
00:21:27,254 --> 00:21:29,096
in a pretty physically plausible manner.

447
00:21:30,000 --> 00:21:31,561
And that was one of the biggest challenges

448
00:21:31,601 --> 00:21:32,581
we faced on this project.

449
00:21:34,602 --> 00:21:35,023
Recovery.

450
00:21:36,543 --> 00:21:38,705
So there are several different factors to consider

451
00:21:38,725 --> 00:21:39,945
when dealing with a tumbling vehicle.

452
00:21:40,526 --> 00:21:42,987
Its initial and desired orientations,

453
00:21:43,187 --> 00:21:45,869
as well as the initial and desired angular velocities.

454
00:21:46,769 --> 00:21:48,250
There's of course, and of course,

455
00:21:48,430 --> 00:21:50,011
you don't want to do it over one frame,

456
00:21:50,211 --> 00:21:52,012
so there's some recovery time

457
00:21:52,192 --> 00:21:54,614
that you want to nudge your vehicle over.

458
00:21:55,944 --> 00:22:03,310
There's of course the linear component to this, but we kind of ignored it for the purposes of this game and just let gravity do its thing.

459
00:22:04,651 --> 00:22:08,974
So just like with animations and projectile reactions,

460
00:22:09,014 --> 00:22:13,998
we want to find a good recovery way to recover and then nudge our ship over time to this better orientation.

461
00:22:16,963 --> 00:22:20,146
So I typically think of Bézier curves as a way to blend a position,

462
00:22:20,646 --> 00:22:23,008
but we can also use them to blend from one angle to another,

463
00:22:23,168 --> 00:22:27,352
where our intermediate points are blending out our initial angular velocity

464
00:22:27,392 --> 00:22:29,814
and blending in our target angular velocity.

465
00:22:31,155 --> 00:22:34,037
I've shown it above here in local space, but you can also do it in world space.

466
00:22:35,278 --> 00:22:38,781
K here is just a tuning parameter that kind of specifies how the recovery looks.

467
00:22:40,222 --> 00:22:43,385
And depending on the time that you use to recover,

468
00:22:44,266 --> 00:22:45,947
it can actually look quite a bit different as well.

469
00:22:47,726 --> 00:22:50,748
The important thing to note here is that this curve just defines orientations.

470
00:22:51,388 --> 00:22:56,211
Our job is to take these desired orientations and apply forces to our rigid body over some

471
00:22:56,251 --> 00:22:58,473
amount of time to sort of nudge it back into place.

472
00:22:58,533 --> 00:23:01,094
This is just an ideal representation of where we want to be.

473
00:23:04,377 --> 00:23:09,080
Now, when we blend to a target angle, of course we can go the short way or long way around

474
00:23:09,100 --> 00:23:09,480
the sphere.

475
00:23:10,200 --> 00:23:14,263
And I've done a lot of animation programming, so blending the short way is kind of embedded

476
00:23:14,303 --> 00:23:15,164
or ingrained in my head.

477
00:23:16,022 --> 00:23:19,144
But it's not immediately clear that that's the best approach.

478
00:23:20,045 --> 00:23:22,106
If you have that initial angular velocity,

479
00:23:22,286 --> 00:23:25,668
you may end up with something that looks worse.

480
00:23:28,009 --> 00:23:29,430
So I'll show you a video in a second,

481
00:23:29,730 --> 00:23:31,812
but here's a ship that from the perspective of the pilot

482
00:23:32,712 --> 00:23:34,133
inside is tumbling clockwise.

483
00:23:35,154 --> 00:23:37,615
The arrows represent the forward orientation of the ship

484
00:23:38,015 --> 00:23:39,876
if we were to simulate it ahead in time.

485
00:23:41,126 --> 00:23:42,847
We can either carry that momentum through,

486
00:23:43,247 --> 00:23:45,769
keep spinning, and then slowly nudge ourselves

487
00:23:45,809 --> 00:23:47,089
towards the target orientation,

488
00:23:48,290 --> 00:23:50,631
or, that's what the green debug arrows represent,

489
00:23:51,652 --> 00:23:53,713
or instead try to counteract that momentum,

490
00:23:53,873 --> 00:23:54,473
the yellow arrows.

491
00:23:55,114 --> 00:23:57,455
Both get us to this desired orientation and velocity,

492
00:23:57,575 --> 00:23:59,316
but one just looks much better.

493
00:24:00,897 --> 00:24:03,338
So we finally, we tried several things here,

494
00:24:03,358 --> 00:24:04,819
but we finally settled on this approach.

495
00:24:05,200 --> 00:24:07,301
We subdivide each curve into segments.

496
00:24:08,399 --> 00:24:10,419
We calculate the angular acceleration

497
00:24:10,559 --> 00:24:12,700
at each segment for curve A,

498
00:24:13,700 --> 00:24:15,280
do the exact same thing for curve B,

499
00:24:16,241 --> 00:24:17,161
and then pick the curve

500
00:24:17,301 --> 00:24:19,181
with the smallest maximum acceleration.

501
00:24:19,741 --> 00:24:21,121
And when you try to reduce

502
00:24:21,141 --> 00:24:23,142
your maximum angular acceleration,

503
00:24:23,722 --> 00:24:25,262
you preserve momentum,

504
00:24:25,302 --> 00:24:27,423
or at least it feels like you're preserving momentum.

505
00:24:29,963 --> 00:24:32,264
So here I am, heroically piloting my ship

506
00:24:32,364 --> 00:24:33,924
directly into a pile of dinosaur bones.

507
00:24:34,959 --> 00:24:37,040
As my ship tumbles, I can recover it nicely.

508
00:24:37,200 --> 00:24:38,261
Looks pretty good.

509
00:24:39,061 --> 00:24:40,482
Now if we scrub backwards in time

510
00:24:40,882 --> 00:24:41,943
to see exactly what happened,

511
00:24:42,463 --> 00:24:44,284
just remember that the projected path in green

512
00:24:44,524 --> 00:24:47,926
is always the recovery with the minimal angular acceleration,

513
00:24:48,046 --> 00:24:48,826
i.e. the best one.

514
00:24:50,107 --> 00:24:52,729
When I first impact, you can see it's better for me

515
00:24:52,749 --> 00:24:55,090
to fight the induced rotation and power through.

516
00:24:55,890 --> 00:24:58,872
But as my ship keeps tumbling, the path changes.

517
00:24:58,912 --> 00:25:01,173
So it actually becomes better for me to continue tumbling

518
00:25:01,213 --> 00:25:04,034
and actually increase my tumble rate versus drag.

519
00:25:04,647 --> 00:25:06,867
to rotate 360 through and recover.

520
00:25:14,228 --> 00:25:16,549
Finally, physics and readback.

521
00:25:16,809 --> 00:25:19,369
So, gameplay systems on Instarlink

522
00:25:19,409 --> 00:25:20,550
run on a variable time step,

523
00:25:20,670 --> 00:25:22,710
and we always render the ship at the gameplay position.

524
00:25:23,510 --> 00:25:25,551
Physics, however, operates on a fixed time step,

525
00:25:25,591 --> 00:25:27,811
and that's just due to simulation stability concerns.

526
00:25:28,751 --> 00:25:30,872
What this means is that our physics representation

527
00:25:30,892 --> 00:25:32,632
of the ship is always slightly out of sync

528
00:25:32,652 --> 00:25:33,312
with what we render.

529
00:25:34,100 --> 00:25:35,540
In games where you don't travel too fast,

530
00:25:35,980 --> 00:25:37,061
it's not that big of an issue,

531
00:25:37,401 --> 00:25:39,741
but for us it was something we needed to think about.

532
00:25:40,322 --> 00:25:42,522
And in fact, before working on a vehicle game like this,

533
00:25:42,682 --> 00:25:44,263
I hadn't even considered this problem.

534
00:25:45,243 --> 00:25:47,184
So you can step your physics to just before

535
00:25:48,124 --> 00:25:49,724
or just after your game frame.

536
00:25:51,245 --> 00:25:52,745
And for us, in fact,

537
00:25:53,025 --> 00:25:54,866
in order to keep them as close as possible,

538
00:25:54,966 --> 00:25:56,066
we try to split the difference.

539
00:25:56,586 --> 00:25:58,387
If more than half of the physics step time

540
00:25:58,407 --> 00:26:00,087
would have been past the gameplay frame,

541
00:26:00,507 --> 00:26:01,268
then we kept it back.

542
00:26:02,059 --> 00:26:07,584
Conversely, if the physics step would have been more than half its step behind the gameplay frame, then we stepped it past.

543
00:26:09,206 --> 00:26:13,710
But what that means is when you're reading back transforms from physics and actually rendering them,

544
00:26:14,171 --> 00:26:19,015
we either have to forward predict to where we think it'll be, or

545
00:26:19,096 --> 00:26:20,677
backward predict to where it has been.

546
00:26:24,327 --> 00:26:25,928
So here I've induced a bad frame rate

547
00:26:25,988 --> 00:26:27,949
in order to get my physics and game frames out of sync.

548
00:26:28,150 --> 00:26:29,971
Although you can see that for the player,

549
00:26:30,851 --> 00:26:32,612
the ship generally looks correct.

550
00:26:33,393 --> 00:26:37,635
But if I scrub back, the green physics shapes

551
00:26:37,676 --> 00:26:39,317
are always slightly out of sync.

552
00:26:40,277 --> 00:26:41,738
And depending on where my game frame

553
00:26:41,778 --> 00:26:43,119
and my physics frame are,

554
00:26:43,399 --> 00:26:46,361
I'm either predicting forward or predicting backward.

555
00:26:46,901 --> 00:26:48,983
But due to the prediction,

556
00:26:49,003 --> 00:26:50,303
you don't really notice it as a player.

557
00:26:55,215 --> 00:26:56,335
So, conclusions.

558
00:26:56,615 --> 00:26:58,676
Well, you can build up your vehicle behaviors

559
00:26:58,796 --> 00:26:59,617
one step at a time.

560
00:27:00,497 --> 00:27:04,039
Layering them together, basic behaviors together

561
00:27:04,079 --> 00:27:05,960
can really give you something a bit more complex.

562
00:27:07,281 --> 00:27:10,222
Simulating impacts on the gameplay side can feel real

563
00:27:10,562 --> 00:27:12,623
and be an inexpensive form of animation

564
00:27:12,663 --> 00:27:13,964
for the rest of your game,

565
00:27:14,144 --> 00:27:15,885
depending on what sort of game you're making.

566
00:27:18,320 --> 00:27:21,942
At first, when we started with a tumbling physics object in the world,

567
00:27:22,102 --> 00:27:25,764
and we had no idea how to recover it, but it turns out it's really not too bad.

568
00:27:27,405 --> 00:27:28,845
You can still look physically plausible.

569
00:27:29,966 --> 00:27:31,967
And I would really love to push that even farther

570
00:27:32,167 --> 00:27:33,988
by taking the linear component into account.

571
00:27:34,188 --> 00:27:35,209
I would love to be able to

572
00:27:36,529 --> 00:27:39,591
raycast ahead in time, see where I'm going to be

573
00:27:39,791 --> 00:27:43,193
and do something more interesting, or maybe even make a gameplay mechanic out of it.

574
00:27:47,535 --> 00:27:47,775
Thank you.

