1
00:00:05,897 --> 00:00:07,919
Hello, my name is Yoichiro Miyake,

2
00:00:08,219 --> 00:00:09,501
lead AI in this clinic.

3
00:00:09,561 --> 00:00:14,385
So today I will show the AI system of Final Fantasy XV.

4
00:00:14,925 --> 00:00:20,931
I have been a game AI for over 15 years, so focus on the

5
00:00:20,951 --> 00:00:21,531
AAA title.

6
00:00:25,864 --> 00:00:31,167
Today's work is done by Square Enix AI core team.

7
00:00:31,207 --> 00:00:33,629
Over 20 people are contributing to this work.

8
00:00:33,669 --> 00:00:37,212
So I will explain the total work involved in the games.

9
00:00:37,832 --> 00:00:41,955
So but the detail is written in the Square Enix 5 article

10
00:00:41,975 --> 00:00:42,876
in the Game Maker Pro.

11
00:00:42,916 --> 00:00:43,836
Please show that.

12
00:00:43,917 --> 00:00:48,380
Today, I will show the overview of Final Fantasy XV AI

13
00:00:48,400 --> 00:00:49,160
technologies.

14
00:00:49,861 --> 00:00:51,622
At first, what is Final Fantasy XV?

15
00:00:52,903 --> 00:00:55,825
As you showed, you play the game.

16
00:00:55,845 --> 00:00:58,626
That's a reality-based fantasy game, action RPG,

17
00:00:58,766 --> 00:01:00,847
and the car, body, nature, there's many.

18
00:01:01,788 --> 00:01:04,610
In the nature, there's many monsters, many characters.

19
00:01:04,630 --> 00:01:06,671
That is very autonomous AI.

20
00:01:06,731 --> 00:01:11,974
So the players can travel with bodies

21
00:01:12,334 --> 00:01:16,116
to fight with the monsters and characters.

22
00:01:16,576 --> 00:01:19,218
At first, I will show the technical overview

23
00:01:19,298 --> 00:01:21,179
of game AI, so biomechanics.

24
00:01:30,914 --> 00:01:31,795
I hope you enjoyed this video.

25
00:01:31,815 --> 00:01:32,675
If you did, please give it a thumbs up.

26
00:01:32,695 --> 00:01:33,716
Also, if you want to see more videos like this,

27
00:01:33,736 --> 00:01:34,536
please subscribe to my channel.

28
00:01:34,556 --> 00:01:34,996
Thanks for watching.

29
00:01:35,017 --> 00:01:35,517
See you next time.

30
00:01:35,537 --> 00:01:35,597
Bye.

31
00:01:57,627 --> 00:02:03,669
Many characters of Mainoh's fantasy shows, it is a choosed to make their AI's by Аndie Wuzaina and Coordinating Developers Sensei.

32
00:02:03,709 --> 00:02:06,869
I think that, maybe, there are such possibilities.

33
00:02:06,909 --> 00:02:15,451
But after, I don't know how to create AI from figures and how to make them by hand.

34
00:02:23,940 --> 00:02:26,524
and then she is a dog.

35
00:02:26,624 --> 00:02:27,946
Yeah, it's a real dog.

36
00:02:28,006 --> 00:02:31,610
This time she is by only by the mountain tree.

37
00:02:41,840 --> 00:02:43,382
This is a monster.

38
00:02:43,422 --> 00:02:47,267
That's the form is sensitive zone.

39
00:02:47,367 --> 00:02:52,313
That's the point where the system hypnotize the real time.

40
00:02:57,498 --> 00:03:01,002
OK, I will explain the detail of this technology.

41
00:03:02,002 --> 00:03:07,548
Our grand three goals is making an autonomous AI in the Final Fantasy XV world,

42
00:03:08,208 --> 00:03:13,113
and make one united living world of Final Fantasy XV.

43
00:03:14,274 --> 00:03:17,316
And making a unique user experience of Final Fantasy XV.

44
00:03:17,596 --> 00:03:20,078
OK, at first, I will overview.

45
00:03:20,699 --> 00:03:24,542
Final Fantasy AI system consists of three components,

46
00:03:24,582 --> 00:03:28,045
such as meta-AIs, character AI, and navigation AI.

47
00:03:28,845 --> 00:03:31,467
Meta-AI, sometimes called AI director,

48
00:03:31,507 --> 00:03:34,690
that is controlling the game progress dynamically.

49
00:03:34,730 --> 00:03:37,953
For example, allocating enemies dynamically.

50
00:03:38,753 --> 00:03:42,155
Next is the character AI, that is the brain of the characters,

51
00:03:42,916 --> 00:03:43,476
as you know.

52
00:03:44,096 --> 00:03:46,258
And the last is navigation AI.

53
00:03:46,278 --> 00:03:49,540
The goal is find the best position to stand.

54
00:03:50,680 --> 00:03:54,243
By using three components of AI, we

55
00:03:54,323 --> 00:03:58,305
want to make a unique user experience for Final Fantasy 15.

56
00:03:58,445 --> 00:04:01,567
At first, I will explain the meta AIs.

57
00:04:02,863 --> 00:04:09,408
Meta AI is called, we write, explain in the Sims,

58
00:04:09,569 --> 00:04:11,110
two awesome lectures.

59
00:04:11,750 --> 00:04:15,154
That is a little bit different from an AI director.

60
00:04:15,214 --> 00:04:18,376
AI director is mainly the context of battle.

61
00:04:18,797 --> 00:04:22,220
Meta AI is the context of the whole situation of the game.

62
00:04:22,240 --> 00:04:24,742
For example, putting a new object on the level

63
00:04:24,782 --> 00:04:27,405
or change the terrain dynamically, or such things.

64
00:04:28,357 --> 00:04:31,020
And adjusting the game world to the player's Meta AI role.

65
00:04:31,361 --> 00:04:33,884
For example, in the Final Fantasy XV,

66
00:04:33,964 --> 00:04:36,547
Meta AI controls the body's behaviors.

67
00:04:37,749 --> 00:04:38,670
I will show the video.

68
00:04:47,822 --> 00:04:52,406
In that situation, the player not only cries by the Garuba's attacks,

69
00:04:52,666 --> 00:04:55,549
but a few people don't notice.

70
00:04:55,569 --> 00:04:59,212
But Metaei is giving the order to help the monsters in the evening,

71
00:04:59,252 --> 00:05:01,554
so he goes between the monsters and helps them.

72
00:05:01,695 --> 00:05:02,615
Helps them break free.

73
00:05:06,219 --> 00:05:12,563
In that case, the author is not good at fighting with enemies and he is in crisis now.

74
00:05:13,684 --> 00:05:18,907
In this meta AI giving the order to help the weakness to attack the enemy sword,

75
00:05:18,947 --> 00:05:22,429
the role of meta AI is to make the situation for the players.

76
00:05:23,545 --> 00:05:27,908
Without Meta AI, that is a stupid situation.

77
00:05:27,928 --> 00:05:30,329
That is, all three guys help Mark.

78
00:05:30,369 --> 00:05:31,990
That is a stupid situation.

79
00:05:33,311 --> 00:05:35,712
To remove these situations, Meta AI

80
00:05:35,813 --> 00:05:37,433
controls the characters' behaviors,

81
00:05:37,654 --> 00:05:40,515
stopping the two NPCs' behavior and orders only one player.

82
00:05:46,179 --> 00:05:47,100
That is the meta-AI.

83
00:05:47,540 --> 00:05:48,942
Next is the character AI.

84
00:05:49,002 --> 00:05:51,785
Character AI has intelligence, has a body,

85
00:05:51,966 --> 00:05:53,627
and deep relations.

86
00:05:54,790 --> 00:05:58,652
And intelligence and body is a big problem for character AI.

87
00:05:58,992 --> 00:06:01,213
At first, I will say animation system.

88
00:06:01,913 --> 00:06:03,714
This is animation blending trees.

89
00:06:03,894 --> 00:06:06,775
All node has animation data.

90
00:06:07,356 --> 00:06:12,258
This is a demonstration to make the blend trees of animations.

91
00:06:12,818 --> 00:06:15,299
So the animators make the blending trees

92
00:06:15,499 --> 00:06:16,699
of all animations.

93
00:06:17,300 --> 00:06:18,220
This is very complex.

94
00:06:19,319 --> 00:06:24,903
In that situation, this gravitational gravity changes depending on the players behavior.

95
00:06:24,963 --> 00:06:32,127
That is the basic gravitational gravity, but there is a complex gravitational system called gravitational gravity.

96
00:06:33,097 --> 00:06:38,881
So the challenge is how to unite AI and animation layers.

97
00:06:39,682 --> 00:06:43,865
There's no general theory between these two components.

98
00:06:44,465 --> 00:06:50,370
So we will put one layer that is called a meta-intermediate

99
00:06:50,430 --> 00:06:52,251
layer between AI and animation.

100
00:06:53,072 --> 00:06:56,855
That role is to manage the various physical states for

101
00:06:57,696 --> 00:06:59,457
any NPC's bodies.

102
00:06:59,937 --> 00:07:00,558
For example...

103
00:07:01,739 --> 00:07:04,920
One character has many physical status.

104
00:07:05,561 --> 00:07:08,962
Their status is exclusive.

105
00:07:09,102 --> 00:07:12,564
For example, when they're climbing the ladders,

106
00:07:13,405 --> 00:07:16,426
Noct can not take a soul.

107
00:07:17,547 --> 00:07:20,548
So the design is different.

108
00:07:20,608 --> 00:07:22,989
For example, AI graphics, the decision making,

109
00:07:23,029 --> 00:07:24,190
that is a game design.

110
00:07:24,210 --> 00:07:26,311
The body graphics is the programmers.

111
00:07:26,411 --> 00:07:27,752
Animation is animated.

112
00:07:27,772 --> 00:07:30,333
That is three layers, different types of that.

113
00:07:31,450 --> 00:07:34,912
So the tool is for each layer.

114
00:07:35,032 --> 00:07:37,853
For example, intelligence layer is AI graph.

115
00:07:37,973 --> 00:07:41,755
That is a tool for making the decision-making system.

116
00:07:42,776 --> 00:07:47,738
Next layer, body layer, that is defining

117
00:07:47,818 --> 00:07:50,740
the status of physical state of characters' bodies.

118
00:07:51,460 --> 00:07:54,601
And last is animation graph that, as I explained,

119
00:07:54,641 --> 00:07:57,143
that is animator work to make blend trees.

120
00:07:57,883 --> 00:08:02,788
So for example, this is a state machine of body layers.

121
00:08:03,549 --> 00:08:08,033
Decision-making layer assigns a state for each situation.

122
00:08:08,093 --> 00:08:17,763
So via body graphs, AI layers controls the characters'

123
00:08:17,804 --> 00:08:18,144
bodies.

124
00:08:20,621 --> 00:08:22,902
So that is the next example.

125
00:08:23,502 --> 00:08:28,565
This is the animation layers of this monster.

126
00:08:28,685 --> 00:08:31,327
This is the decision-making layer.

127
00:08:31,347 --> 00:08:34,348
That layer is a different type, and it's synchronizing

128
00:08:34,368 --> 00:08:36,509
the executing for each other.

129
00:08:38,730 --> 00:08:42,112
So I will explain in this lecture

130
00:08:42,132 --> 00:08:46,795
to focus on the intelligent layers.

131
00:08:48,338 --> 00:08:50,320
Introduction to decision making.

132
00:08:51,301 --> 00:08:52,242
What is intelligence?

133
00:08:53,844 --> 00:08:56,366
For the characters, basically, it has a body.

134
00:08:57,147 --> 00:09:01,312
And next is input senses and output action.

135
00:09:01,372 --> 00:09:07,498
That is fundamental module of the characters.

136
00:09:08,262 --> 00:09:11,485
So I will use the agent architecture

137
00:09:11,525 --> 00:09:13,307
that is used in the robotics.

138
00:09:13,887 --> 00:09:17,270
At first, we separated the two worlds, environment world

139
00:09:17,390 --> 00:09:18,631
and intelligent worlds.

140
00:09:19,151 --> 00:09:22,755
The world is connected to the sensor and the effectors

141
00:09:23,695 --> 00:09:24,276
to a module.

142
00:09:25,197 --> 00:09:27,198
And inside the intelligent world,

143
00:09:27,258 --> 00:09:30,281
there are the three components, recognition module,

144
00:09:30,361 --> 00:09:34,745
and decision making module, motion making module.

145
00:09:37,382 --> 00:09:40,884
The information flows via all modules.

146
00:09:41,724 --> 00:09:44,365
The information flow connects the two worlds,

147
00:09:44,405 --> 00:09:47,586
such as intelligent world, environment world,

148
00:09:48,647 --> 00:09:50,167
via sensor and effectors.

149
00:09:51,088 --> 00:09:54,569
So at first, I will explain the sensor's bodies.

150
00:09:56,030 --> 00:10:00,992
This is the sensoring regions of gargoyles and monsters.

151
00:10:02,032 --> 00:10:04,493
When the enemies come into the field,

152
00:10:05,787 --> 00:10:13,071
The system, the one ray casted from the gorilla to the object.

153
00:10:14,311 --> 00:10:18,394
When the ray does not collide with any object,

154
00:10:18,634 --> 00:10:24,057
it means this monster can see the object, the enemies.

155
00:10:24,837 --> 00:10:28,339
That is seeing the meaning.

156
00:10:29,900 --> 00:10:33,862
And when the gorilla's a recogonite.

157
00:10:36,833 --> 00:10:39,856
When the Garuda recognizes many monsters,

158
00:10:40,216 --> 00:10:43,379
Garuda must select one target to attack.

159
00:10:44,019 --> 00:10:46,702
So target selection rule is there's many,

160
00:10:46,862 --> 00:10:48,784
so that is condition.

161
00:10:49,024 --> 00:10:52,427
It can be controlled with these tools.

162
00:10:53,928 --> 00:10:58,592
Game designer can customize how to select enemy targets

163
00:10:59,173 --> 00:11:01,035
by customizing many parameters.

164
00:11:02,216 --> 00:11:03,677
Next is decision making.

165
00:11:05,070 --> 00:11:13,373
In the game development, mainly decision-making algorithms

166
00:11:13,733 --> 00:11:20,795
are seven algorithms, rule-based, state-based,

167
00:11:20,815 --> 00:11:22,855
or behavior-based, and so on.

168
00:11:23,715 --> 00:11:29,237
In Final Fantasy XV, we use three top algorithms,

169
00:11:29,417 --> 00:11:31,618
rule-based, state-based, and behavior-based.

170
00:11:32,600 --> 00:11:35,641
At first, I will explain rule-based.

171
00:11:36,501 --> 00:11:38,822
Behemoth's decision-making is rule-based.

172
00:11:39,722 --> 00:11:42,583
There's many rules listed up in here.

173
00:11:42,763 --> 00:11:49,184
So when the condition is fired, the line is orange-lit.

174
00:11:49,824 --> 00:11:53,245
So Galar's is controlled by that rule,

175
00:11:54,025 --> 00:11:56,346
depending on the player's positions.

176
00:11:57,285 --> 00:12:00,686
So depending on the positions of the analyzers,

177
00:12:00,826 --> 00:12:03,426
different rules are required on the list.

178
00:12:04,207 --> 00:12:05,107
That is rule-based.

179
00:12:05,887 --> 00:12:08,267
Next is behavior-based.

180
00:12:08,787 --> 00:12:12,988
As you know, the behavior tree is the most popular algorithm

181
00:12:13,228 --> 00:12:15,529
for current game development.

182
00:12:16,029 --> 00:12:19,729
So we developed the original tools of behavior trees.

183
00:12:20,429 --> 00:12:22,650
Game designers can behave their tools only

184
00:12:22,750 --> 00:12:25,350
by operating mouse operations.

185
00:12:26,703 --> 00:12:28,064
Next is state-based.

186
00:12:28,584 --> 00:12:31,805
State-based is the most simple algorithm for characters.

187
00:12:31,825 --> 00:12:32,665
The state has...

188
00:12:36,946 --> 00:12:41,446
Each state has behaviors of characters.

189
00:12:41,907 --> 00:12:46,107
The game and the status of a character changes,

190
00:12:46,427 --> 00:12:51,168
a state transition happens from this state to this state.

191
00:12:52,029 --> 00:12:55,770
But for more complex games, it is not enough.

192
00:12:56,290 --> 00:12:59,252
So a state machine becomes hierarchical.

193
00:12:59,332 --> 00:13:03,213
For example, this is a green is a top layer state machine.

194
00:13:03,634 --> 00:13:08,296
The one state has more smaller state machine like this.

195
00:13:12,557 --> 00:13:16,699
So in Square Enix, original state machine tools

196
00:13:17,219 --> 00:13:20,521
developed for Final Fantasy development.

197
00:13:22,318 --> 00:13:26,860
And from now that this is a Square Enix original AI system,

198
00:13:29,801 --> 00:13:38,404
state machine is good at steady control step by step.

199
00:13:39,424 --> 00:13:40,925
And behavior trees is good.

200
00:13:46,032 --> 00:13:48,414
Good apps adapt to playback fluently.

201
00:13:48,714 --> 00:13:50,716
We want to use both good points.

202
00:13:51,377 --> 00:13:55,620
So the idea is we separate the presentation layer

203
00:13:55,660 --> 00:13:56,741
and the process layers.

204
00:13:57,201 --> 00:14:00,024
The node and process layer are shared in state machine

205
00:14:00,044 --> 00:14:00,824
and VBA3s.

206
00:14:01,665 --> 00:14:03,686
But the presentation layer state machine

207
00:14:03,707 --> 00:14:04,687
business are different.

208
00:14:05,704 --> 00:14:11,306
So for example, AI Graph has a hierarchical layer architecture.

209
00:14:11,926 --> 00:14:14,407
For example, our top layer is a state machine.

210
00:14:15,528 --> 00:14:19,209
The one state of the state machine has a behavior tree.

211
00:14:19,789 --> 00:14:22,290
And the state machines, one of the state,

212
00:14:23,110 --> 00:14:26,532
one of the deep node of behavior trees has a state machine.

213
00:14:27,292 --> 00:14:31,614
Game designers can make the deeper and deeper hierarchical

214
00:14:31,714 --> 00:14:33,974
structure as they want.

215
00:14:35,813 --> 00:14:39,217
So that has the extensibility and the scalability

216
00:14:39,337 --> 00:14:41,198
to make the decision-making graph.

217
00:14:43,480 --> 00:14:46,763
So that is an example of the Nifuru soldiers.

218
00:14:47,945 --> 00:14:51,167
The top layer is green.

219
00:14:51,448 --> 00:14:52,629
It's a state machine.

220
00:14:53,209 --> 00:14:57,553
And one of the state machines has a behavior tree.

221
00:14:57,653 --> 00:14:58,774
So that's the second layer.

222
00:14:59,826 --> 00:15:03,191
And the third layer is leaf node of behavior tree

223
00:15:03,271 --> 00:15:04,293
has a state machine.

224
00:15:04,814 --> 00:15:08,079
That's the third hierarchical system.

225
00:15:08,459 --> 00:15:11,124
One is state machine, behavior tree, and the state machine.

226
00:15:12,172 --> 00:15:15,192
And after all the process of loyal levels are finished,

227
00:15:15,252 --> 00:15:17,413
the transition happens on the top layers.

228
00:15:18,133 --> 00:15:21,574
That is the operation of this system.

229
00:15:21,594 --> 00:15:23,734
I will show the example of this system.

230
00:15:24,394 --> 00:15:29,336
This is a green with a little high time soldier.

231
00:15:30,076 --> 00:15:30,316
Great.

232
00:15:32,676 --> 00:15:35,417
This is the top layer on the blue.

233
00:15:35,457 --> 00:15:37,637
That is the state.

234
00:15:37,657 --> 00:15:40,938
The red player has a behavior trick.

235
00:15:42,599 --> 00:16:01,765
And all debugging information is listed in the database to monitor the character's status

236
00:16:01,885 --> 00:16:02,285
inside.

237
00:16:03,405 --> 00:16:08,567
An AI graph has three functions, blackboard, parallel thinking, and overriding.

238
00:16:10,947 --> 00:16:16,070
At first, I will explain the Blackboard architecture.

239
00:16:17,670 --> 00:16:21,212
Blackboard architecture has memories in here.

240
00:16:21,252 --> 00:16:22,693
That is Blackboard.

241
00:16:22,833 --> 00:16:23,173
I'm sorry.

242
00:16:23,213 --> 00:16:24,294
It's an AI graph.

243
00:16:25,614 --> 00:16:26,054
AI graph.

244
00:16:27,395 --> 00:16:29,936
Blackboard has the information.

245
00:16:31,717 --> 00:16:32,958
got from the sensors.

246
00:16:33,898 --> 00:16:39,561
The information got from sensors stored in the blackboard.

247
00:16:40,082 --> 00:16:44,364
The information can be used from the AI graph inside.

248
00:16:45,244 --> 00:16:49,146
So the information connected to the nodes,

249
00:16:49,246 --> 00:16:52,528
that information can be used inside

250
00:16:53,189 --> 00:16:55,130
by connecting these lines.

251
00:16:57,668 --> 00:16:59,809
So that is a blackboard architecture.

252
00:17:00,009 --> 00:17:01,609
Next is parallel thinking.

253
00:17:01,929 --> 00:17:03,990
For complex situations, it is not

254
00:17:04,270 --> 00:17:09,052
enough that the character is thinking one problem.

255
00:17:10,813 --> 00:17:15,295
Sometimes characters must think two problems at the same time,

256
00:17:15,415 --> 00:17:18,336
so parallel thinking function is required.

257
00:17:19,316 --> 00:17:21,658
For example, in the state machine case,

258
00:17:21,879 --> 00:17:23,480
we define the P stat.

259
00:17:23,560 --> 00:17:24,902
That is parallel stat.

260
00:17:25,502 --> 00:17:31,148
In this graph, the two state machines can be executed.

261
00:17:31,168 --> 00:17:36,973
For the BBR tree, the parallel nodes, in the parallel nodes,

262
00:17:37,033 --> 00:17:38,395
the two nodes are

263
00:17:39,922 --> 00:17:41,602
executed at the same time.

264
00:17:42,662 --> 00:17:44,703
That is a parallel thinking function.

265
00:17:45,183 --> 00:17:46,823
Well, that is an example.

266
00:17:46,863 --> 00:17:50,024
The green-lit camp is now a shooting situation.

267
00:17:50,224 --> 00:17:53,665
While shooting, moving and shooting

268
00:17:53,705 --> 00:17:55,985
searches new enemies around.

269
00:17:56,025 --> 00:17:58,066
Parallel thinking function.

270
00:17:58,086 --> 00:18:01,247
That's really convenient for a complex situation.

271
00:18:02,307 --> 00:18:03,647
Last is overridings.

272
00:18:04,604 --> 00:18:09,478
Overriding is to make many, many monsters AIs.

273
00:18:10,100 --> 00:18:11,584
We must make many.

274
00:18:12,954 --> 00:18:16,856
AI graphs for different monsters.

275
00:18:17,296 --> 00:18:21,099
But many monsters have common logics, basically.

276
00:18:21,920 --> 00:18:28,504
So the overrides functions means the game designers

277
00:18:28,584 --> 00:18:33,427
can customize one of the common logics at any time.

278
00:18:33,528 --> 00:18:36,910
For example, this is Behemoth over AI graphs.

279
00:18:36,970 --> 00:18:37,991
This is a common logic.

280
00:18:38,811 --> 00:18:42,754
But one state can customize only for Behemoths.

281
00:18:43,495 --> 00:18:45,897
That is the Kato-Kurepas AI graph.

282
00:18:45,917 --> 00:18:47,038
That is a common logic.

283
00:18:47,258 --> 00:18:51,661
One of states can be customized properly to the Kato-Kurepas.

284
00:18:52,342 --> 00:18:55,184
So overriding a function is very convenient

285
00:18:55,264 --> 00:18:56,465
to make the difference.

286
00:18:56,925 --> 00:18:59,067
AI graphs dynamically.

287
00:18:59,307 --> 00:19:00,408
So that's a template.

288
00:19:01,448 --> 00:19:03,910
Overriding, overriding, multiple overriding

289
00:19:04,170 --> 00:19:10,514
is giving the game designers extending AI graph any time.

290
00:19:11,755 --> 00:19:14,257
So last is navigation AI.

291
00:19:14,617 --> 00:19:16,298
Navigation AI is very simple.

292
00:19:17,018 --> 00:19:20,561
At first, first finding a system that we use is the algorithm.

293
00:19:21,672 --> 00:19:23,433
And that is the navigation mesh.

294
00:19:23,653 --> 00:19:26,516
Navigation mesh is a nightly build of all maps

295
00:19:26,596 --> 00:19:29,798
that is automatically made from the collision model.

296
00:19:31,720 --> 00:19:35,963
And by using navigation mesh, those

297
00:19:36,124 --> 00:19:40,267
are used to connect to the gamma navigation.

298
00:19:40,287 --> 00:19:44,230
So let's call this gamma, even in a complex terrain.

299
00:19:45,791 --> 00:19:47,813
Next is a point query system.

300
00:19:48,073 --> 00:19:51,016
Point query system has a long history.

301
00:19:52,514 --> 00:19:58,516
That is a system to find the best position for a character's ability in a train in real-time.

302
00:19:59,556 --> 00:20:01,256
For example, that is the three phases.

303
00:20:02,057 --> 00:20:03,757
At first, point generation phase.

304
00:20:03,817 --> 00:20:05,838
Next is filtering phase.

305
00:20:06,538 --> 00:20:08,139
The third is evaluation phase.

306
00:20:08,559 --> 00:20:10,620
For example, AI is here.

307
00:20:10,660 --> 00:20:12,680
There's bodies and enemies.

308
00:20:12,800 --> 00:20:16,181
And at first, distribute to the point around the players.

309
00:20:17,082 --> 00:20:19,582
And filtering out is a useless point.

310
00:20:19,602 --> 00:20:21,863
For example, this is a lake, this is a pond,

311
00:20:21,983 --> 00:20:24,064
and this is enemies, this is bodies.

312
00:20:24,164 --> 00:20:25,544
Seven points remain.

313
00:20:25,644 --> 00:20:33,586
So by picking up one point to be highest height values.

314
00:20:34,267 --> 00:20:39,790
And finally, the one best point for players remains.

315
00:20:40,090 --> 00:20:41,671
That is point query system.

316
00:20:42,331 --> 00:20:46,513
Point query system can be customized only by tool.

317
00:20:46,573 --> 00:20:48,494
Without the help of the engineers,

318
00:20:49,335 --> 00:20:53,577
game designers can customize the value for a PQS system.

319
00:20:54,918 --> 00:20:57,961
That is one example of the demonstration.

320
00:20:59,042 --> 00:21:04,808
These monsters can find points the players and parties cannot

321
00:21:04,968 --> 00:21:05,148
see.

322
00:21:05,188 --> 00:21:08,612
That's three points the players cannot see.

323
00:21:08,632 --> 00:21:12,556
So by using the PQS system, any monsters

324
00:21:13,016 --> 00:21:14,898
can go to the behind the players.

325
00:21:15,899 --> 00:21:18,881
This is some example of this PQS system.

326
00:21:18,961 --> 00:21:23,002
That is the Noctua is here, so filtering out

327
00:21:23,042 --> 00:21:26,564
these points on the circle.

328
00:21:28,425 --> 00:21:28,725
OK.

329
00:21:29,465 --> 00:21:30,846
Finally, attacking position.

330
00:21:32,242 --> 00:21:33,783
movement portion of his.

331
00:21:34,724 --> 00:21:39,527
All PQS queries information is stored in the servers, so we

332
00:21:39,548 --> 00:21:44,151
can game developers see any time the statics of query

333
00:21:44,171 --> 00:21:44,792
validation.

334
00:21:45,112 --> 00:21:50,356
For example, this query is often called many times.

335
00:21:53,278 --> 00:21:59,163
OK, next is face-to-face conversation system.

336
00:21:59,883 --> 00:22:00,504
This system.

337
00:22:03,344 --> 00:22:07,127
is a system to find the positions for the conversations.

338
00:22:16,333 --> 00:22:19,155
For example, Prompto finds the best position

339
00:22:19,475 --> 00:22:24,798
to talk with Nocto by PKS system.

340
00:22:29,191 --> 00:22:32,993
For example, this is a combination of three AI,

341
00:22:33,093 --> 00:22:35,894
meta-AIs, character AI, and navigation AI.

342
00:22:35,974 --> 00:22:40,095
Meta-AI orders to find a point in the characters

343
00:22:40,736 --> 00:22:44,157
by using navigation system to find the best position.

344
00:22:45,037 --> 00:22:47,478
In this demo, the

345
00:22:48,631 --> 00:22:54,095
Prompto will go to the position on the next side

346
00:22:54,715 --> 00:22:55,656
to talk with him.

347
00:22:56,056 --> 00:22:57,857
That is a face-to-face system.

348
00:22:58,678 --> 00:23:00,379
And the next is a steering system.

349
00:23:00,399 --> 00:23:04,142
Steering system, we use a human-like avoidance system.

350
00:23:04,182 --> 00:23:06,423
That is a very simple algorithm.

351
00:23:06,443 --> 00:23:09,505
The system distributes the ray casting in all directions

352
00:23:09,545 --> 00:23:14,128
to find the best direction to go to the goal.

353
00:23:15,268 --> 00:23:19,929
That is a result of each agent can avoid each other

354
00:23:19,969 --> 00:23:21,750
by human-like avoidance system.

355
00:23:22,991 --> 00:23:24,331
Next is motion analysis.

356
00:23:24,591 --> 00:23:29,493
Motion analysis system to learn their motion by themselves.

357
00:23:29,513 --> 00:23:30,153
For example.

358
00:23:33,940 --> 00:23:35,963
Behemoth, that is Behemoth training time.

359
00:23:36,984 --> 00:23:41,088
Each different motion has different regions

360
00:23:41,469 --> 00:23:44,652
to be hit by the motions.

361
00:23:45,053 --> 00:23:50,379
Behemoth learns what motions can reach what regions,

362
00:23:51,620 --> 00:23:52,181
as like this.

363
00:23:53,153 --> 00:23:57,576
By using this data, we make a rule-based system.

364
00:23:58,496 --> 00:24:05,699
This behemoth knows the region each motion reached.

365
00:24:06,380 --> 00:24:10,562
So by this information, the space information,

366
00:24:11,182 --> 00:24:14,684
he knows what motion should be executed

367
00:24:16,164 --> 00:24:18,806
to attack the knocked positions.

368
00:24:19,678 --> 00:24:21,720
Next is character carving.

369
00:24:21,840 --> 00:24:29,849
So in high speed, the character cannot make the smooth curve

370
00:24:30,149 --> 00:24:30,950
immediately.

371
00:24:31,991 --> 00:24:34,214
So depending on the.

372
00:24:35,520 --> 00:24:40,284
Rotation radius depends on the velocity.

373
00:24:40,865 --> 00:24:48,050
So also, we have training of the carving of monsters.

374
00:24:48,671 --> 00:24:52,393
In the midnight, they automatically

375
00:24:52,594 --> 00:24:54,055
carving in time, anytime.

376
00:24:54,735 --> 00:24:58,798
In the morning, this graph automatically generates.

377
00:24:59,959 --> 00:25:04,904
The vertical horizontal axis is the active speed.

378
00:25:05,444 --> 00:25:07,767
This is the rotation radius.

379
00:25:08,307 --> 00:25:10,930
By using these graphs, the monsters

380
00:25:11,050 --> 00:25:17,255
can know the best speed to carve the path generated

381
00:25:17,275 --> 00:25:18,617
by pathfinding system.

382
00:25:19,538 --> 00:25:21,840
Next is the character conversation system.

383
00:25:21,960 --> 00:25:28,266
So the scenario is not totally generated.

384
00:25:28,786 --> 00:25:32,850
Many scenarios for conversation prepared by game developers.

385
00:25:33,390 --> 00:25:37,734
But meta AI is the best scenario from them.

386
00:25:39,836 --> 00:25:41,758
And in that case, it's a

387
00:25:43,234 --> 00:25:45,896
There's many conditions, depending on many conditions,

388
00:25:46,076 --> 00:25:50,999
each scenario's evaluation decides.

389
00:25:51,059 --> 00:25:54,221
Finally, one scenario picks up.

390
00:25:54,982 --> 00:25:59,385
And meta-AI's point of attention of the point of view

391
00:25:59,565 --> 00:26:03,587
is in the conversations, the attention point

392
00:26:03,767 --> 00:26:06,149
to move to the speakers.

393
00:26:06,729 --> 00:26:10,211
Or in that case, it's the direction of the goatee.

394
00:26:11,381 --> 00:26:16,150
In more details, we'll talk on Sunday.

395
00:26:16,430 --> 00:26:18,715
In that way, please attend the lectures.

396
00:26:20,458 --> 00:26:21,440
Thursday, I'm sorry.

397
00:26:23,155 --> 00:26:25,537
And finally, it's ambient AI.

398
00:26:25,577 --> 00:26:27,998
This is the town people in the towns.

399
00:26:28,698 --> 00:26:32,420
So in that point, we use the smart object.

400
00:26:32,440 --> 00:26:36,322
Smart object means which contains the object,

401
00:26:36,762 --> 00:26:39,303
has animation, area statements, everything

402
00:26:39,363 --> 00:26:40,524
to control the agent.

403
00:26:41,672 --> 00:26:42,212
in that case.

404
00:26:42,412 --> 00:26:45,493
But we extend the smart object, smart location.

405
00:26:45,553 --> 00:26:49,915
Location has object and script emitters to

406
00:26:49,995 --> 00:26:51,035
control the agent.

407
00:26:51,655 --> 00:26:57,257
So in that case, this location has intelligence to gather two

408
00:26:57,337 --> 00:27:03,658
people and controlling by GOAP planning system.

409
00:27:04,259 --> 00:27:08,600
And after three minutes, for example, that system calls a

410
00:27:08,640 --> 00:27:09,720
third person like this.

411
00:27:10,600 --> 00:27:14,281
So a Stribist-like system is a Jeff O'Rourke developed

412
00:27:14,321 --> 00:27:15,442
as a goal-like system.

413
00:27:16,022 --> 00:27:18,863
This is a Stribist system for planning.

414
00:27:19,483 --> 00:27:27,985
Game designers write this script for the actions,

415
00:27:28,025 --> 00:27:30,206
the preconditions, the already conditions.

416
00:27:30,966 --> 00:27:35,928
So by writing many of these types,

417
00:27:36,368 --> 00:27:37,768
these nice representations.

418
00:27:40,035 --> 00:27:44,797
data, more complex situations can be made.

419
00:27:44,817 --> 00:27:51,961
For example, this character calls the waiters after the

420
00:27:52,181 --> 00:27:53,621
conversations like this.

421
00:27:55,262 --> 00:28:00,184
So this is the XML process and is compiled for binary data.

422
00:28:00,224 --> 00:28:02,926
And finally, when the players enter the town, the whole

423
00:28:02,946 --> 00:28:05,367
So this is the XML process and is compiled for binary data.

424
00:28:06,521 --> 00:28:09,822
NPC characters' behaviors are like humans,

425
00:28:10,362 --> 00:28:12,042
human townspeople, like this.

426
00:28:14,183 --> 00:28:17,744
At the last chapter is data logging and visualizations.

427
00:28:17,924 --> 00:28:20,125
In the game development,

428
00:28:20,725 --> 00:28:24,886
all data of game status is stored on the server.

429
00:28:26,205 --> 00:28:31,267
All data immediately can be visualized for a game developer

430
00:28:31,307 --> 00:28:32,367
to find a bug.

431
00:28:32,747 --> 00:28:36,389
That is, as I said, queries, static cycles.

432
00:28:37,229 --> 00:28:40,170
Or that is a stack of a number of calling scenarios.

433
00:28:40,230 --> 00:28:42,091
That scenario is called orphan.

434
00:28:42,771 --> 00:28:45,552
That is a heat map of animations.

435
00:28:46,593 --> 00:28:49,714
Many animations, that animation is called in the regions.

436
00:28:50,254 --> 00:28:54,756
By using this data, we can design the animation package

437
00:28:54,896 --> 00:28:55,716
for each region.

438
00:28:57,072 --> 00:28:57,753
The summaries.

439
00:28:58,353 --> 00:28:58,813
Summaries.

440
00:28:59,334 --> 00:29:02,116
This is I will show the overview of the Final Fantasy

441
00:29:02,236 --> 00:29:04,097
and the original decision making is shown.

442
00:29:04,117 --> 00:29:05,398
And the basic is the source.

443
00:29:06,038 --> 00:29:10,741
This is the list of the AI techniques implemented

444
00:29:10,821 --> 00:29:12,322
in Final Fantasy XV.

445
00:29:12,943 --> 00:29:16,705
By accumulating the small AI techniques, we make a big.

446
00:29:17,826 --> 00:29:19,467
This is the memory usage.

447
00:29:19,567 --> 00:29:23,329
AI graph narration over 20 megabytes.

448
00:29:23,429 --> 00:29:26,570
So more details are described in the GameMaker Pro 3.

449
00:29:26,610 --> 00:29:27,291
Please show that.

450
00:29:28,351 --> 00:29:29,092
OK.

451
00:29:30,993 --> 00:29:33,674
OK, we are hiring AI engineer designers.

452
00:29:34,134 --> 00:29:36,435
If you are interested in our company, please contact us.

453
00:29:36,896 --> 00:29:37,576
OK, thank you.

