1
00:00:05,375 --> 00:00:09,377
Hello, and welcome to my presentation,

2
00:00:09,377 --> 00:00:14,039
A QA Perspective on Live Game Production.

3
00:00:14,039 --> 00:00:17,581
My name is Michael Borg-Larsen, and I am the lead tester

4
00:00:17,581 --> 00:00:22,544
at Retomoto in Copenhagen. And we are making and maintaining

5
00:00:22,544 --> 00:00:24,085
the game, Heroes and Generals.

6
00:00:24,085 --> 00:00:29,108
And before we begin, I've been asked to just remind you

7
00:00:29,108 --> 00:00:32,509
to turn off any silent or silence your noise-making

8
00:00:32,509 --> 00:00:33,010
devices.

9
00:00:33,809 --> 00:00:38,112
And also, I would appreciate it if you rated this talk in the

10
00:00:38,112 --> 00:00:39,413
survey that you will get after this.

11
00:00:39,413 --> 00:00:47,099
I will try and leave some time in the end for questions.

12
00:00:47,099 --> 00:00:52,023
And if we run out of time, I've been told that there's an

13
00:00:52,023 --> 00:00:52,684
area we can move to.

14
00:00:52,684 --> 00:00:55,926
And I will be happy to take questions.

15
00:00:55,926 --> 00:00:59,809
So let's begin.

16
00:00:59,809 --> 00:01:01,410
First, my background.

17
00:01:02,492 --> 00:01:09,897
My background is I've had, in seven years, I've been working in development, so I've

18
00:01:09,897 --> 00:01:18,362
developed systems myself, content management systems, and I've also created some logistics

19
00:01:18,362 --> 00:01:19,082
handling systems.

20
00:01:19,082 --> 00:01:27,127
So I've been through the whole loop from concept to design and development and on to test and

21
00:01:27,127 --> 00:01:27,807
maintaining it.

22
00:01:27,807 --> 00:01:30,109
And that has come in handy now.

23
00:01:31,994 --> 00:01:38,357
in my function as tester and as lead tester.

24
00:01:38,357 --> 00:01:42,820
And before I started at Resumoto, I was the editor of

25
00:01:42,820 --> 00:01:45,261
Tom's Hardware in Denmark, where we started up.

26
00:01:45,261 --> 00:01:49,644
So I was helping with creating the brand and the format.

27
00:01:49,644 --> 00:01:55,487
And also, I had the task of creating or writing news

28
00:01:55,487 --> 00:02:01,030
articles from the hardware and games perspective.

29
00:02:01,973 --> 00:02:07,796
And also I translated a lot of the technical articles that came from the mother site.

30
00:02:07,796 --> 00:02:18,502
And then I've played a lot of games over the years, spanning down to the classic arcade games and home computers.

31
00:02:18,502 --> 00:02:21,223
Every console there's been, and of course on PC.

32
00:02:21,223 --> 00:02:28,567
So that gives a good base also to have an idea as a tester what to expect of bugs.

33
00:02:29,527 --> 00:02:32,069
I work for Retomoto. It's a studio in Copenhagen.

34
00:02:32,069 --> 00:02:36,311
It was created by the initial founders of IO Interactive,

35
00:02:36,311 --> 00:02:41,435
and the founders or creators of the Hitman series.

36
00:02:41,435 --> 00:02:44,176
So when they sold their company to Eidos,

37
00:02:44,176 --> 00:02:45,877
they moved on and created Retomoto.

38
00:02:45,877 --> 00:02:49,339
And they created the game Heroes and Generals,

39
00:02:49,339 --> 00:02:50,720
which we operate to this day.

40
00:02:55,231 --> 00:03:01,733
And to give you an idea of the scope of our production, I can tell you a little bit about the game.

41
00:03:01,733 --> 00:03:07,095
Heroes and Generals World War II is a first-person shooter, and free-to-play.

42
00:03:07,095 --> 00:03:09,516
And as the name suggests, it's set in World War II.

43
00:03:09,516 --> 00:03:18,518
Battles all over Europe are going on between the factions, Americans and Germans and Soviets.

44
00:03:18,518 --> 00:03:24,160
And they all fight for dominance. There are no predetermined alliances.

45
00:03:24,830 --> 00:03:32,173
one might expect, but it's open to the players and the clans to make alliances in our game.

46
00:03:32,173 --> 00:03:42,196
So we have combined arms combat where players will be able to play as infantry or tankers

47
00:03:42,196 --> 00:03:45,718
or pilots, recons or paratroopers.

48
00:03:45,718 --> 00:03:50,540
And all this going around in the same battle, and yes, all three factions can be in the

49
00:03:50,540 --> 00:03:51,940
same battle.

50
00:03:56,886 --> 00:04:01,728
And the action client, as you see, it's not based on a

51
00:04:01,728 --> 00:04:02,688
licensed engine.

52
00:04:02,688 --> 00:04:08,631
So it's a proprietary engine that we created ourselves,

53
00:04:08,631 --> 00:04:12,912
which makes it we have a lot of different tasks that we

54
00:04:12,912 --> 00:04:16,013
otherwise might not have when we change anything in the

55
00:04:16,013 --> 00:04:17,414
render engine.

56
00:04:17,414 --> 00:04:20,355
Or if we change anything to the network code, we have to

57
00:04:20,355 --> 00:04:23,476
test that from scratch.

58
00:04:23,476 --> 00:04:25,657
And on top of that, we have a strategic layer.

59
00:04:26,632 --> 00:04:32,937
And as you see here, this is just a replay of one of the wars we've had.

60
00:04:32,937 --> 00:04:38,622
It went on for over a month, and each blip you see on the map is one battle that starts up.

61
00:04:38,622 --> 00:04:45,167
So we have our generals move their forces around on the map to create these battles,

62
00:04:45,167 --> 00:04:50,231
and that will fire up a battle for up to 18 or up to 36 players, 18 on each faction,

63
00:04:50,231 --> 00:04:54,135
or 12 on each faction for a three-faction battle.

64
00:04:55,800 --> 00:04:57,661
And if not enough players are online,

65
00:04:57,661 --> 00:04:59,182
then it will simulate the results

66
00:04:59,182 --> 00:05:03,806
from the resources available.

67
00:05:03,806 --> 00:05:09,490
And it came out of closed beta in 2013.

68
00:05:09,490 --> 00:05:13,613
So we went into open beta at that stage.

69
00:05:13,613 --> 00:05:15,675
And in 2016, we released it fully.

70
00:05:15,675 --> 00:05:19,918
And since then, we've had regular updates.

71
00:05:19,918 --> 00:05:22,600
And that has added new weapons, new vehicles, new maps,

72
00:05:22,600 --> 00:05:23,901
and new exciting features.

73
00:05:26,836 --> 00:05:32,959
And it's available for free on PC at heroesandjournals.com or on partner sites like Steam.

74
00:05:32,959 --> 00:05:42,123
And now on to the interesting part.

75
00:05:42,123 --> 00:05:51,227
So, we've gone through different stages and in the six years I've been there, it started out in closed beta.

76
00:05:52,064 --> 00:06:00,592
And that was a comfortable stage to be in, because our players kind of expected there to be some bugs, and we had some leeway.

77
00:06:00,592 --> 00:06:09,639
It was still not cool to let a bug slip out, so we still had to be good, and we still had to use our resources efficiently.

78
00:06:09,639 --> 00:06:15,645
And we figured out that we could...

79
00:06:15,645 --> 00:06:19,288
We had some dedicated players, where we took the most...

80
00:06:20,446 --> 00:06:24,669
mature of those and invited them into a closed beta group.

81
00:06:24,669 --> 00:06:28,472
And we used them for feedback and gave them the opportunity to see upcoming

82
00:06:28,472 --> 00:06:29,834
features.

83
00:06:29,834 --> 00:06:30,774
And uh...

84
00:06:30,774 --> 00:06:35,338
we found that as a very valuable asset at that time. Of course

85
00:06:35,338 --> 00:06:37,780
you have to have those dedicated players and uh...

86
00:06:37,780 --> 00:06:42,344
if they're not mature then uh... you might have to have some battles with them

87
00:06:42,344 --> 00:06:44,346
but uh... we've been lucky in

88
00:06:44,346 --> 00:06:46,188
in having some good players to assist us.

89
00:06:48,031 --> 00:06:54,577
And in Open Beta, we kind of removed or we didn't,

90
00:06:54,577 --> 00:06:58,501
we no longer had that control over how many players

91
00:06:58,501 --> 00:07:01,824
would come into our game and put load on our servers.

92
00:07:01,824 --> 00:07:04,667
So we had to adapt and find out how to best test

93
00:07:04,667 --> 00:07:08,371
for load issues and for scaling.

94
00:07:10,246 --> 00:07:17,148
And for Steam Early Access, we were one of the first games that were greenlit for Steam Early Access,

95
00:07:17,148 --> 00:07:22,850
which was a program that Valve made to give the players, or the users of Steam,

96
00:07:22,850 --> 00:07:28,571
the opportunity to decide themselves which games they would see on the platform.

97
00:07:28,571 --> 00:07:34,453
And that put pressure on us, in the sense that we could see that there was a lot of interest,

98
00:07:34,453 --> 00:07:36,854
and we had to...

99
00:07:38,152 --> 00:07:46,438
Of course, always look at our processes to see how could we prevent the issues that could

100
00:07:46,438 --> 00:07:49,300
lay down the game to come out on our live stream.

101
00:07:52,518 --> 00:07:57,481
But until release, we had a three year period until there.

102
00:07:57,481 --> 00:07:59,842
Or we went from open beta to release.

103
00:07:59,842 --> 00:08:04,325
And that time we spent to hone in on the best practices, and

104
00:08:04,325 --> 00:08:08,688
to make a really tight process, and make sure that

105
00:08:08,688 --> 00:08:14,072
we caught the most of the broken bugs that would

106
00:08:14,072 --> 00:08:17,934
otherwise go out.

107
00:08:17,934 --> 00:08:22,017
And beyond that, since 2016, we've had a lot of updates.

108
00:08:22,943 --> 00:08:29,466
where of course we have frequent updates that has to be tested

109
00:08:29,466 --> 00:08:33,967
overlappingly, so we have always new upcoming stuff that has to

110
00:08:33,967 --> 00:08:38,729
be tested in a way where it doesn't have to break or break

111
00:08:38,729 --> 00:08:42,970
the, or prevent the development process. And that's something I

112
00:08:42,970 --> 00:08:44,190
will go into more detail with.

113
00:08:49,683 --> 00:08:55,365
Of course, the main goals might be obvious, but it's good to remind ourselves we are in QA,

114
00:08:55,365 --> 00:08:59,306
and quality and stability is what it's all about.

115
00:08:59,306 --> 00:09:03,507
And with a live game, that is not always as easy to maintain.

116
00:09:03,507 --> 00:09:11,329
So over the years, we've added many weapons and many vehicles and skin variations, new features, new maps.

117
00:09:11,329 --> 00:09:16,091
And with each new data that we add, that adds a lot of new failure processes.

118
00:09:16,724 --> 00:09:26,649
And we have to scale up and see how can we best prevent all of these issues that could,

119
00:09:26,649 --> 00:09:31,311
I mean the regression testing of it just grew and grew.

120
00:09:31,311 --> 00:09:40,636
So we looked into how could we better perform in our QA and make a better or hone in on

121
00:09:40,636 --> 00:09:41,476
a better process.

122
00:09:45,293 --> 00:09:48,855
And one really obvious answer to us was to be more agile.

123
00:09:48,855 --> 00:09:54,438
And of course, there's a lot of literature on that.

124
00:09:54,438 --> 00:09:58,140
But we tried some ways to implement from what we read

125
00:09:58,140 --> 00:10:01,742
and what we heard from others to implement.

126
00:10:01,742 --> 00:10:07,065
But we also tried out what we thought would fit best into

127
00:10:07,065 --> 00:10:08,986
our way of working.

128
00:10:08,986 --> 00:10:14,269
And a good way to illustrate that is by this comic.

129
00:10:14,596 --> 00:10:19,637
This is one type, one way we tried to implement it, and one that didn't work very well.

130
00:10:19,637 --> 00:10:28,159
And, for example, in this case where we have a new house master in the game,

131
00:10:28,159 --> 00:10:33,521
we would know that there were some issues with it, because it was not finished yet.

132
00:10:33,521 --> 00:10:37,462
It was testing it while he was making it, our graphics artist.

133
00:10:37,462 --> 00:10:43,063
So we tried to figure out what could we test, what could we benefit from testing early on it.

134
00:10:44,184 --> 00:10:46,225
And we would look at it.

135
00:10:46,225 --> 00:10:48,025
We would know exactly what this should do.

136
00:10:48,025 --> 00:10:51,286
This should be placed on a map somewhere.

137
00:10:51,286 --> 00:10:55,567
And it should just be working as somewhere on the map that

138
00:10:55,567 --> 00:10:56,267
added to the level.

139
00:10:56,267 --> 00:10:59,648
So we could see from the get-go that there was a hole

140
00:10:59,648 --> 00:11:00,208
in the roof.

141
00:11:00,208 --> 00:11:04,189
And we would expect there to be a bug or two somewhere.

142
00:11:04,189 --> 00:11:08,150
And what would happen when we approach it?

143
00:11:08,150 --> 00:11:08,910
We turned the knob.

144
00:11:09,699 --> 00:11:12,400
And everything just broke down and went to flames.

145
00:11:12,400 --> 00:11:15,902
And we had a developer that was really not happy about it.

146
00:11:15,902 --> 00:11:18,864
We had a tester that was really not happy about that.

147
00:11:18,864 --> 00:11:25,187
He spent some time to test this, and it wasn't ready.

148
00:11:25,187 --> 00:11:28,549
So we looked at that and figured out how can we better

149
00:11:28,549 --> 00:11:30,270
implement that process.

150
00:11:30,270 --> 00:11:32,111
And communication is a good thing.

151
00:11:32,111 --> 00:11:34,992
Communication is something you can always improve on.

152
00:11:34,992 --> 00:11:37,213
And in this case, we should never have.

153
00:11:38,153 --> 00:11:41,835
turn the knob because the knob was a part that wasn't done yet.

154
00:11:41,835 --> 00:11:47,858
So we should have done it more synthetically, so we should have tested the parts of it that

155
00:11:47,858 --> 00:11:54,921
was actually done, like the collie, like the stitching of the textures, and of course we

156
00:11:54,921 --> 00:11:58,823
should have made a more specific test case from it.

157
00:11:58,823 --> 00:12:01,864
And that's what we learned from it.

158
00:12:09,127 --> 00:12:12,388
And now on to how we work with streams.

159
00:12:12,388 --> 00:12:18,512
If you're familiar with Perforce or something similar,

160
00:12:18,512 --> 00:12:23,475
you probably know the term stream or branch.

161
00:12:24,205 --> 00:12:29,709
And the way we use it is that whenever we start working on a new feature,

162
00:12:29,709 --> 00:12:34,211
we take the code base that closely resembles live, copy it down to that stream,

163
00:12:34,211 --> 00:12:39,595
and make sure that it's as up-to-date as possible before we start to work on that feature.

164
00:12:41,412 --> 00:12:44,633
And that means that if we start working on a new game mode,

165
00:12:44,633 --> 00:12:49,194
we can make sure that no other feature in progress

166
00:12:49,194 --> 00:12:51,875
will have any effect on whether it works or not.

167
00:12:51,875 --> 00:12:53,576
So if we find a bug on that stream,

168
00:12:53,576 --> 00:12:55,696
we would know that the one responsible

169
00:12:55,696 --> 00:12:58,857
is probably one guy or those guys that are working on that.

170
00:12:58,857 --> 00:13:02,018
So the blame game is kind of eliminated

171
00:13:02,018 --> 00:13:04,179
from whenever we find a bug,

172
00:13:04,179 --> 00:13:05,980
who's actually responsible in fixing it.

173
00:13:08,155 --> 00:13:15,480
This also means that we can have parallel tracks of testing, where we can prioritize

174
00:13:15,480 --> 00:13:22,924
into what we want into next update, and focus on what are the areas that we want to make

175
00:13:22,924 --> 00:13:29,448
sure are working in the process where we are in the early process, in the sense where some

176
00:13:29,448 --> 00:13:34,431
of the features might be very prone to errors, and we would know that we would have to have

177
00:13:34,431 --> 00:13:35,131
focus on those.

178
00:13:36,056 --> 00:13:39,657
in early on, so we could check all the test breaking stuff

179
00:13:39,657 --> 00:13:44,499
and make sure that those get fixed before we move on.

180
00:13:44,499 --> 00:13:46,700
So in this case, we have six different features

181
00:13:46,700 --> 00:13:47,760
that are ready for test.

182
00:13:47,760 --> 00:13:52,782
We might only have time for three or four to start with.

183
00:13:52,782 --> 00:13:56,044
And by doing that, we will have one tester

184
00:13:56,044 --> 00:13:58,164
be assigned to one of these features

185
00:13:58,164 --> 00:14:00,185
and apply a first QA pass.

186
00:14:00,185 --> 00:14:02,466
And a first QA pass for us is that he

187
00:14:02,466 --> 00:14:05,127
takes an approach that fits best.

188
00:14:06,083 --> 00:14:11,866
and works just by experiencing it either from the black box,

189
00:14:11,866 --> 00:14:14,747
white box, or gray box approach.

190
00:14:14,747 --> 00:14:19,950
And from there, he will go through finding all the bugs.

191
00:14:19,950 --> 00:14:21,670
Bug fixes come back.

192
00:14:21,670 --> 00:14:22,331
He checks them.

193
00:14:22,331 --> 00:14:24,732
If they're all fixed, he greenlits the stream.

194
00:14:24,732 --> 00:14:27,793
And when it's greenlit on the stream,

195
00:14:27,793 --> 00:14:32,616
it's ready to be merged up to the main development stream.

196
00:14:32,616 --> 00:14:33,096
And from there.

197
00:14:34,703 --> 00:14:39,204
If it's not ready, we will, of course, not merge it up.

198
00:14:39,204 --> 00:14:42,105
And we will still have features that are quite not

199
00:14:42,105 --> 00:14:46,466
ready and some that we have not have time to test fully.

200
00:14:46,466 --> 00:14:49,106
And that will be a risk management process where we

201
00:14:49,106 --> 00:14:52,267
would see, do we really need this in the next update?

202
00:14:52,267 --> 00:14:54,568
Do we have to move our test focus on that

203
00:14:54,568 --> 00:14:56,668
before we move up?

204
00:14:56,668 --> 00:14:59,889
And this is also a process where we would use some test

205
00:14:59,889 --> 00:15:04,070
automation to make sure that we don't spend too much time on

206
00:15:05,099 --> 00:15:09,301
the stuff that are very time consuming, and it will be able

207
00:15:09,301 --> 00:15:13,403
to assist us in finding the bugs that can occur.

208
00:15:13,403 --> 00:15:26,148
So once we are ready to move it up, we have all the green-lit

209
00:15:26,148 --> 00:15:28,910
features from our first pass.

210
00:15:28,910 --> 00:15:31,611
And these don't have to be perfect.

211
00:15:31,611 --> 00:15:33,072
These don't have to be bug-free.

212
00:15:33,702 --> 00:15:39,565
These just have to be non-test-breaking, in a sense where we know what to predict from it.

213
00:15:39,565 --> 00:15:46,407
So in the feature phase, where we are now, that would be two to three weeks before release.

214
00:15:46,407 --> 00:15:50,869
We would know that we're pretty sure that we can make this release.

215
00:15:50,869 --> 00:15:55,791
So predictability is what we are gaining with this process.

216
00:15:55,791 --> 00:15:59,253
But of course it's not always that easy.

217
00:16:00,165 --> 00:16:04,049
in the perfect situation. Sometimes we have a main content driver that we need to get

218
00:16:04,049 --> 00:16:11,616
out, like a new map for example in this case, where based on player feedback from playtests,

219
00:16:11,616 --> 00:16:16,301
we can see that there are some areas that still need work. And in that case, our level

220
00:16:16,301 --> 00:16:20,044
designer will still be working on it when we are going to the phase where we need to

221
00:16:20,044 --> 00:16:21,666
move it up to our test stream.

222
00:16:22,712 --> 00:16:29,817
So that just means that we would have to focus on other areas, get our test resources focused

223
00:16:29,817 --> 00:16:37,463
on the stuff that is ready, and assist the level designer, if we can, in the process,

224
00:16:37,463 --> 00:16:45,148
and move in to test the stuff that he does. Get ready early. And of course, something like the

225
00:16:45,148 --> 00:16:49,712
sound update, that might be something that is not a critical asset or a critical addition.

226
00:16:49,712 --> 00:16:50,632
So that means that...

227
00:16:51,800 --> 00:16:59,102
There's low risk in merging that up because we would be able to test this fully before release.

228
00:16:59,102 --> 00:17:06,225
Well then also, some other things can come in to the side.

229
00:17:07,090 --> 00:17:14,857
And this can be based from metrics and based on decisions where we want to move a little faster to see the results of.

230
00:17:14,857 --> 00:17:21,382
It could be an iterative process where we want to iterate on a process where we just need to find the issues with it, the bugs with it,

231
00:17:21,382 --> 00:17:27,567
get it out there, and then measure the metrics from it on the live environment.

232
00:17:27,567 --> 00:17:31,990
So it's often not optimal, it's often not perfect when working on a live game.

233
00:17:33,004 --> 00:17:38,489
But that's where we have to be good at scaling it and scoping

234
00:17:38,489 --> 00:17:44,774
what we test and report to our project manager what the risks

235
00:17:44,774 --> 00:17:48,036
are if we move on with this.

236
00:17:48,036 --> 00:17:55,322
And then optimally, we have all the features greenlit.

237
00:17:55,322 --> 00:17:59,326
Or we will get to that stage before release.

238
00:17:59,975 --> 00:18:04,357
And in that case, we have the stream greenlit.

239
00:18:04,357 --> 00:18:07,780
And we will move it up to a staging stream, which will be

240
00:18:07,780 --> 00:18:13,023
a stream we reserve for the critical fixes, the hot fixes

241
00:18:13,023 --> 00:18:17,365
where we need to have a clean stream that is closely

242
00:18:17,365 --> 00:18:22,909
resembling live, and to make sure that nothing else impacts

243
00:18:22,909 --> 00:18:25,230
anything if we are fixing something isolated.

244
00:18:26,468 --> 00:18:32,471
But right before release, we move it up there and we do a short or longer smoke test,

245
00:18:32,471 --> 00:18:40,956
depending on where, what the risks are with the build, just getting around all the corners.

246
00:18:40,956 --> 00:18:43,357
And once that's greenlit, we release it to live.

247
00:18:43,357 --> 00:18:53,422
And in this process...

248
00:18:53,975 --> 00:18:58,756
I've seen during this GDC there's been a lot of focus on automated testing.

249
00:18:58,756 --> 00:19:03,778
That's also something that we have had a focus on that we could see we could benefit from.

250
00:19:03,778 --> 00:19:10,059
I think everyone should in QA because it's something that both can spare you a lot of time

251
00:19:10,059 --> 00:19:14,821
and it can actually add new cases that you will never be able to test.

252
00:19:14,821 --> 00:19:23,783
So we have two different tools as we've explored different ways that we could implement this.

253
00:19:24,535 --> 00:19:27,076
The first thing being a war data visualizer.

254
00:19:27,076 --> 00:19:30,317
Because we have a game with a lot of items and a lot of

255
00:19:30,317 --> 00:19:35,358
attributes, it can be daunting to look into all of these data

256
00:19:35,358 --> 00:19:40,399
and figure out if one value somewhere is way off.

257
00:19:40,399 --> 00:19:43,160
So what we have, we have a tool that, across streams, can

258
00:19:43,160 --> 00:19:46,241
compare all the different data, all the changes.

259
00:19:46,241 --> 00:19:50,542
And then we have a manual process where we have to look

260
00:19:50,542 --> 00:19:51,542
at these results and see.

261
00:19:52,496 --> 00:19:57,000
or the red flags where the problematic issues could arise.

262
00:19:57,000 --> 00:20:00,743
And this means that we can focus our testing directly

263
00:20:00,743 --> 00:20:06,248
towards the areas that actually have reason to be tested,

264
00:20:06,248 --> 00:20:08,971
where it's not just, we think this might be affected,

265
00:20:08,971 --> 00:20:10,873
but this is actually affected.

266
00:20:10,873 --> 00:20:14,796
Might be a bug, it might not be,

267
00:20:14,796 --> 00:20:15,296
but it helps.

268
00:20:17,009 --> 00:20:21,251
And the other track we have is an automated compliance and

269
00:20:21,251 --> 00:20:25,394
performance tester, which runs a nightly build every night.

270
00:20:25,394 --> 00:20:31,017
And it's scalable, so we have two worker PCs or more that we

271
00:20:31,017 --> 00:20:34,779
can set up with different hardware to make sure that it

272
00:20:34,779 --> 00:20:36,900
can actually run the nightly build.

273
00:20:36,900 --> 00:20:40,242
We can set it to a higher degree, so we can set it to

274
00:20:40,242 --> 00:20:41,482
each commit we have.

275
00:20:42,507 --> 00:20:46,509
But it takes a while for it to run through all our maps from a

276
00:20:46,509 --> 00:20:49,051
different set of camera files.

277
00:20:49,051 --> 00:20:52,192
So we usually have it set to a nightly build.

278
00:20:52,192 --> 00:20:55,874
And that will catch, so when we meet in the next day, we

279
00:20:55,874 --> 00:20:58,356
will catch if a build has failed.

280
00:20:58,356 --> 00:21:01,497
It will catch if something has been committed that is very

281
00:21:01,497 --> 00:21:03,579
taxing on performance.

282
00:21:03,579 --> 00:21:06,800
And we will be able to see where is the performance

283
00:21:06,800 --> 00:21:09,041
historically moving on our streams.

284
00:21:09,464 --> 00:21:11,965
That's also something that is very time consuming if we had

285
00:21:11,965 --> 00:21:13,306
to do this manually.

286
00:21:13,306 --> 00:21:22,890
And looking at the methods, of course, there are a lot of

287
00:21:22,890 --> 00:21:23,651
different methods.

288
00:21:23,651 --> 00:21:28,533
And one of the points I want to make today is that what we

289
00:21:28,533 --> 00:21:31,114
found to be very important is diversifying with the

290
00:21:31,114 --> 00:21:32,015
resources we have.

291
00:21:32,855 --> 00:21:36,536
So in the perfect environment, we would have all the resources in the world.

292
00:21:36,536 --> 00:21:42,638
We will have all the testers to make all the different test cases that we want to complete.

293
00:21:42,638 --> 00:21:45,899
But of course, that's not rarely the case.

294
00:21:45,899 --> 00:21:52,301
So we have to diversify and look into what methods are good to use.

295
00:21:52,301 --> 00:21:56,202
Sometimes it's obvious, depending on the test case.

296
00:21:56,202 --> 00:22:01,704
But other times, there might be some that are outliers in what will we benefit from using this method.

297
00:22:02,495 --> 00:22:07,136
And for the first test pass, it might make sense to do the obvious.

298
00:22:07,136 --> 00:22:13,158
And for the second test pass, it might be obvious to try and diversify into another

299
00:22:13,158 --> 00:22:14,818
method and another approach.

300
00:22:14,818 --> 00:22:20,820
In that case, we would get around other corners and get around to other areas of whatever

301
00:22:20,820 --> 00:22:27,182
we are testing.

302
00:22:27,182 --> 00:22:29,983
And approaches are also something that we are diversifying with.

303
00:22:29,983 --> 00:22:30,443
So we'll see.

304
00:22:30,443 --> 00:22:31,203
Thank you.

305
00:22:31,850 --> 00:22:35,651
Box testing, I look at black box testing as a luxury,

306
00:22:35,651 --> 00:22:38,252
something where we can, if we have the time,

307
00:22:38,252 --> 00:22:42,054
I would love to have a first pass just being a black box,

308
00:22:42,054 --> 00:22:45,815
where we would have a different outcome of it,

309
00:22:45,815 --> 00:22:50,717
instead of having the focus of having all the details from the get-go.

310
00:22:50,717 --> 00:22:54,199
So our tester, if he knows nothing of a new vehicle we've made,

311
00:22:54,199 --> 00:22:57,760
he would experience it much more like the player would.

312
00:22:57,760 --> 00:22:59,321
He would look much more into,

313
00:22:59,321 --> 00:23:01,502
how does this fit into what else is in the game.

314
00:23:03,565 --> 00:23:07,509
And in the other end, if we don't have that much time, white box testing is the way to go.

315
00:23:07,509 --> 00:23:16,177
White box will be able to dig deep into the data, dig into the code, and see what has actually changed.

316
00:23:16,177 --> 00:23:21,742
And from that, make a decision on what should we test from this.

317
00:23:21,742 --> 00:23:27,407
But often times, it's a grey box situation where we are looking into the data behind, or the code behind.

318
00:23:28,307 --> 00:23:32,930
And then we are doing a task where we give that information,

319
00:23:32,930 --> 00:23:34,951
or some of that information, to our tester to test from.

320
00:23:34,951 --> 00:23:39,094
But it's much dependent on what time you actually

321
00:23:39,094 --> 00:23:40,475
have for the task.

322
00:23:40,475 --> 00:23:45,958
And another approach, or two other approaches, are what I

323
00:23:45,958 --> 00:23:47,739
call authentic and synthetic.

324
00:23:47,739 --> 00:23:50,841
The authentic being the way the player

325
00:23:50,841 --> 00:23:52,002
experiences something.

326
00:23:52,002 --> 00:23:55,524
So this will be if we have that new armored vehicle, that

327
00:23:55,524 --> 00:23:57,005
would be log into the game.

328
00:23:57,980 --> 00:24:05,043
find it in the store, find out how you unlock it, then unlock it, purchase it, and equip it to your character.

329
00:24:05,043 --> 00:24:10,806
And from that flow, go around all the corners figuring out what can I do with this new item,

330
00:24:10,806 --> 00:24:18,370
and finally matchmaking into a battle, driving around in it and experience it, like the player would.

331
00:24:18,370 --> 00:24:22,592
The synthetic way of testing that, that would be just firing up a local build,

332
00:24:23,610 --> 00:24:26,050
firing off a command just to spawn that vehicle,

333
00:24:26,050 --> 00:24:27,871
fly around, fly through it,

334
00:24:27,871 --> 00:24:30,851
add a lot of debug layers and outputs,

335
00:24:30,851 --> 00:24:32,872
and testing it that way.

336
00:24:32,872 --> 00:24:35,873
Both are important and necessary,

337
00:24:35,873 --> 00:24:38,193
but it's something where if we diversify

338
00:24:38,193 --> 00:24:42,314
by focusing the first pass on one or the other,

339
00:24:42,314 --> 00:24:44,395
we see that we can actually benefit from that.

340
00:24:47,776 --> 00:24:51,978
Then we have the methodic or the chaotic way, as I call it.

341
00:24:51,978 --> 00:24:54,759
The methodic being, might be more of a

342
00:24:54,759 --> 00:24:57,000
temper-based approach.

343
00:24:57,000 --> 00:25:00,641
Where when we are looking at hiring people, we are trying

344
00:25:00,641 --> 00:25:02,402
to fill out different profiles.

345
00:25:02,402 --> 00:25:07,624
So a profile could be a very analytical person, very,

346
00:25:07,624 --> 00:25:09,825
what's the word?

347
00:25:09,825 --> 00:25:16,328
Someone who takes it slow and quiet and kind of looks at it,

348
00:25:16,328 --> 00:25:16,968
steps back.

349
00:25:17,485 --> 00:25:22,507
when he experiences something, and then test it from that approach.

350
00:25:22,507 --> 00:25:26,688
Another profile we have is the chaotic guy, the guy that just clicks on everything,

351
00:25:26,688 --> 00:25:29,969
and if it just responds within a nanosecond, he will click it ten more times.

352
00:25:29,969 --> 00:25:33,409
And in that case, he will probably find a lot of crashes that way.

353
00:25:33,409 --> 00:25:40,031
But that's also something where we can benefit from having one type of tester,

354
00:25:40,031 --> 00:25:42,812
testing something in the first pass,

355
00:25:42,812 --> 00:25:45,933
and have another tester with another approach in the second pass.

356
00:25:48,077 --> 00:25:51,339
And then the last one is objective versus subjective.

357
00:25:51,339 --> 00:25:57,224
This is more dependent on, I guess it also carries over to

358
00:25:57,224 --> 00:26:00,967
the black box testing, where if we take objective testing,

359
00:26:00,967 --> 00:26:02,889
well, that is the definite box.

360
00:26:02,889 --> 00:26:06,131
That is, if you are testing a new vehicle and the collision

361
00:26:06,131 --> 00:26:07,873
is all wrong on it, you can walk right through it.

362
00:26:07,873 --> 00:26:09,114
That's just a definite bug.

363
00:26:09,114 --> 00:26:10,114
That's a defect.

364
00:26:10,114 --> 00:26:13,177
That goes into the bug reporting system, and that's

365
00:26:13,177 --> 00:26:13,897
getting fixed.

366
00:26:13,897 --> 00:26:16,600
The subjective part, that's more of.

367
00:26:17,405 --> 00:26:23,130
does this look right? So this vehicle, when testing this from a black box perspective

368
00:26:23,130 --> 00:26:28,655
for example, does this fit in to that category of vehicles? So if it's an armoured vehicle

369
00:26:28,655 --> 00:26:36,341
like a medium armour tank and we look at this and see well it has an incredible front armour

370
00:26:36,341 --> 00:26:40,885
and it's pretty much impossible to penetrate, you cannot deal damage to this tank.

371
00:26:41,523 --> 00:26:47,327
Maybe that's based on historical data, maybe that's intended by the developer, but maybe

372
00:26:47,327 --> 00:26:48,287
that's not intended.

373
00:26:48,287 --> 00:26:50,909
And that's where the subjective part comes in.

374
00:26:50,909 --> 00:26:56,152
From the tester's perspective, he will look at where it fits in, see, well, this doesn't

375
00:26:56,152 --> 00:26:58,173
seem right, and make a report from that.

376
00:27:04,659 --> 00:27:10,265
And sometimes not just situations that you can test, sometimes that, well, you can test it,

377
00:27:10,265 --> 00:27:14,729
but it will not be in an authentic manner as our players would experience it.

378
00:27:14,729 --> 00:27:22,858
And that's a good way for us, or we opened our eyes to this when we had more and more players.

379
00:27:23,845 --> 00:27:29,029
join our game, where we started to have much more open tests,

380
00:27:29,029 --> 00:27:33,792
where we are inviting them in on our prototype server,

381
00:27:33,792 --> 00:27:38,255
testing a new feature, and then seeing what actually comes

382
00:27:38,255 --> 00:27:42,198
from that, getting the feedback from them, and opening it up

383
00:27:42,198 --> 00:27:45,240
for anyone who had the time or the interest.

384
00:27:45,240 --> 00:27:48,682
And this is from a player on live that experienced

385
00:27:48,682 --> 00:27:51,344
something that, if we put this out, we would never, in a

386
00:27:51,344 --> 00:27:53,425
million years, be able to reproduce this, I think.

387
00:27:54,389 --> 00:28:07,281
And that's something where we can see that the physics system and the network code that's actually working properly and we could reaffirm that it's working like we would like.

388
00:28:07,281 --> 00:28:11,465
And another example here from a very good pilot.

389
00:28:12,537 --> 00:28:19,382
what he sees is, uh, he doesn't see his friend, but, uh, his friend is dropping a bomb, and we can

390
00:28:19,382 --> 00:28:25,906
see the hitbox actually, uh, and the netcode being up to par. So the bomb passes right through

391
00:28:25,906 --> 00:28:38,254
the, the model, as it should. And now for the conclusion. I know I'm a bit quick, I can see. So

392
00:28:38,254 --> 00:28:39,795
I will expand more on these points.

393
00:28:40,475 --> 00:28:44,777
And the first point is, get QA involved early on.

394
00:28:44,777 --> 00:28:50,101
And that, of course, carries over to the agile part of it.

395
00:28:50,101 --> 00:28:52,502
And it can be a battle.

396
00:28:52,502 --> 00:28:55,864
It can be a constant battle to get QA involved early on.

397
00:28:55,864 --> 00:29:01,228
And the way we've done it is, we can see we benefit from

398
00:29:01,228 --> 00:29:06,151
having a tester in the design meeting itself, where we can

399
00:29:06,151 --> 00:29:09,953
see, or we can raise a flag and say, well, this decision

400
00:29:10,934 --> 00:29:15,857
is something that would result in this and it would give a problem in this area where

401
00:29:15,857 --> 00:29:24,022
the designer might not have thought about that. And of course that's a very diplomatic

402
00:29:24,022 --> 00:29:28,805
process and we have to make sure that we are not killing off the creative process because

403
00:29:28,805 --> 00:29:35,530
then we wouldn't be invited back. But we've seen results of this working where we have

404
00:29:35,530 --> 00:29:36,450
prevented.

405
00:29:37,103 --> 00:29:41,606
some issues to arise where we haven't thought of the bigger picture.

406
00:29:41,606 --> 00:29:45,768
And so before we started production, before we started programming it,

407
00:29:45,768 --> 00:29:49,771
we've actually prevented something to come to the test phase.

408
00:29:49,771 --> 00:30:04,080
And another point I want to make is test features on dedicated streams.

409
00:30:04,931 --> 00:30:10,556
And if you are able to do that, it's something that we, of

410
00:30:10,556 --> 00:30:15,400
course, have benefited from in the sense where we can see

411
00:30:15,400 --> 00:30:18,663
that we had had issues where we tried to compile different

412
00:30:18,663 --> 00:30:20,264
features on the same stream.

413
00:30:20,264 --> 00:30:23,167
And that just made a mess of things.

414
00:30:23,167 --> 00:30:30,053
So what we did with separating it on each stream, we could

415
00:30:30,053 --> 00:30:31,794
see that it was not only much more.

416
00:30:32,270 --> 00:30:38,074
Simpler to test but the bugs that came from those tests were much more

417
00:30:38,074 --> 00:30:41,177
In a merit that they would take these as granted as okay

418
00:30:41,177 --> 00:30:44,979
This is my bug and it's not something that someone else has caused

419
00:30:44,979 --> 00:30:45,199
and

420
00:30:45,199 --> 00:30:46,800
it also

421
00:30:46,800 --> 00:30:52,624
allow us to much more diversifying the

422
00:30:52,624 --> 00:30:55,126
the approaches we make

423
00:30:55,126 --> 00:31:00,370
And it will add that extra step into before we go to release

424
00:31:01,020 --> 00:31:04,861
We actually make sure that we have proper time for some of

425
00:31:04,861 --> 00:31:07,842
the features that might not be as important.

426
00:31:07,842 --> 00:31:11,302
So for the lesser features that we still want out,

427
00:31:11,302 --> 00:31:16,203
those shouldn't hold back a release because we haven't had

428
00:31:16,203 --> 00:31:17,284
enough time to test it.

429
00:31:17,284 --> 00:31:21,044
And of course, also by automating some of our

430
00:31:21,044 --> 00:31:24,345
processes on the lower streams, we'll be able to

431
00:31:24,345 --> 00:31:27,926
catch something much more easily than if everything was

432
00:31:27,926 --> 00:31:29,146
jumbled into the same stream.

433
00:31:29,818 --> 00:31:35,320
So especially with our data visualizer, that's possible to

434
00:31:35,320 --> 00:31:38,701
isolate a few different changes instead of a huge set

435
00:31:38,701 --> 00:31:41,541
of changes that clutters around if it's a lot of

436
00:31:41,541 --> 00:31:47,203
different features.

437
00:31:47,203 --> 00:31:51,304
And of course, diversifying is one of the things that we've

438
00:31:51,304 --> 00:31:52,224
benefited most from.

439
00:31:52,224 --> 00:31:56,265
And that's much dependent on the resources you have.

440
00:31:56,265 --> 00:31:59,446
And for a live game, sometimes you have to move fast.

441
00:32:00,288 --> 00:32:04,971
And by moving fast, you have to take a different approach.

442
00:32:04,971 --> 00:32:06,732
Make sure you cover all bases.

443
00:32:06,732 --> 00:32:10,974
Make sure you cover all different areas where the risk

444
00:32:10,974 --> 00:32:12,335
is highest.

445
00:32:12,335 --> 00:32:17,297
And of course, you can never prevent bugs from getting out,

446
00:32:17,297 --> 00:32:20,699
especially if you have to scope it down into where you

447
00:32:20,699 --> 00:32:24,921
have to allow for certain processes to finish early.

448
00:32:24,921 --> 00:32:28,303
So if you only have a day to test something that takes two

449
00:32:28,303 --> 00:32:28,883
or three days.

450
00:32:29,890 --> 00:32:36,232
Our approach would be to first look at it in a very deep manner, just look into the

451
00:32:36,232 --> 00:32:42,855
data and look into the processes and the code and then figure out what do we need to test

452
00:32:42,855 --> 00:32:45,395
from there.

453
00:32:45,395 --> 00:32:50,597
And also with the hardware we have available, that's also something that we diversify with.

454
00:32:50,975 --> 00:32:55,040
That's something where we try to, with the hardware we're using on a daily basis,

455
00:32:55,040 --> 00:32:59,465
we use some different graphics cards and CPU setups, also operating systems.

456
00:32:59,465 --> 00:33:04,351
And for our automated performance and compliance testing, that's something

457
00:33:04,351 --> 00:33:08,816
where we have different setups, of course, that we'll test it on a daily basis.

458
00:33:13,529 --> 00:33:15,972
And then involve your dedicated amateur players.

459
00:33:15,972 --> 00:33:20,656
This is also something that might take some effort from our own part.

460
00:33:20,656 --> 00:33:25,641
It's something that sometimes takes some maintenance, but it's something that we benefit a lot from

461
00:33:25,641 --> 00:33:27,523
and something that we can see the value of.

462
00:33:27,523 --> 00:33:31,768
So that is also something that I would want to point out as,

463
00:33:31,768 --> 00:33:33,690
if you have that opportunity to involve them.

464
00:33:34,505 --> 00:33:41,246
being on Slack or any other sort of communication, Discord or just from a forum, then that's

465
00:33:41,246 --> 00:33:43,127
something where you can benefit a lot.

466
00:33:43,127 --> 00:33:54,750
And automated testing, that's been a big, big word on this GDC and that's something

467
00:33:54,750 --> 00:33:57,370
I would also say that maybe you can...

468
00:33:58,305 --> 00:34:02,368
Maybe you don't know exactly how to approach it if you don't have anything yet.

469
00:34:02,368 --> 00:34:09,554
But it's something where I think everyone should explore what is possible and what would make sense.

470
00:34:09,554 --> 00:34:14,258
And of course there are different approaches that will never make sense.

471
00:34:14,258 --> 00:34:18,221
We've made the decision that we would never automate our UI testing

472
00:34:18,221 --> 00:34:22,585
because that's just something that changes a lot in our game.

473
00:34:22,585 --> 00:34:26,548
So we would have to use a lot of time just to maintain that test.

474
00:34:26,854 --> 00:34:33,977
and the benefit from that would be minimal. So we're identifying the areas that actually

475
00:34:33,977 --> 00:34:41,100
make sense to test and then focus on maintaining that, because there will be some maintaining,

476
00:34:41,100 --> 00:34:47,963
but it's something where if you don't have any automated testing, you probably have that.

477
00:34:48,779 --> 00:34:57,084
the task for your testers where you see that this is just a tedious task, you see them

478
00:34:57,084 --> 00:35:10,073
being maybe annoyed or it's tiresome for them. But if you can automate that process, that's

479
00:35:10,073 --> 00:35:13,375
something that everyone can benefit from. And that leads us to questions. If anyone

480
00:35:13,375 --> 00:35:14,355
has any questions, then please use the mic.

481
00:35:30,659 --> 00:35:32,420
Alright? Oh, yeah?

482
00:35:32,420 --> 00:35:37,646
I had a question. A very interesting concept with the separate streams.

483
00:35:37,646 --> 00:35:41,290
Where do you do the integration testing?

484
00:35:41,290 --> 00:35:46,416
You had an example with a new map and a new vehicle.

485
00:35:46,416 --> 00:35:50,100
So when those two come together, where do you do the integration testing for that?

486
00:35:50,717 --> 00:35:56,099
we do that when we move it to our main testing stream. So that means that when we've tested

487
00:35:56,099 --> 00:36:01,601
it isolated, we know that that part works. So when we move it up to a higher stream and

488
00:36:01,601 --> 00:36:08,784
they're collected there, we will do the integrated test. So usually if it's something that is,

489
00:36:08,784 --> 00:36:14,107
if it's layer related, we will probably develop it on the same stream and test it on the same

490
00:36:14,107 --> 00:36:16,388
stream before we move it up.

491
00:36:17,770 --> 00:36:21,554
But we've seen larger updates, larger features where we have

492
00:36:21,554 --> 00:36:23,616
collected too much on the same stream.

493
00:36:23,616 --> 00:36:26,840
And that has just ended up in a mess where you can't really,

494
00:36:26,840 --> 00:36:29,362
we couldn't find head or tails in it.

495
00:36:29,362 --> 00:36:32,125
And it took us a long time before we actually got it to a

496
00:36:32,125 --> 00:36:36,930
state where it's usable and it's ready for release.

497
00:36:36,930 --> 00:36:38,031
Thank you.

498
00:36:38,031 --> 00:36:40,634
OK, thank you.

